
testsm10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b618  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800b7a8  0800b7a8  0000c7a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc24  0800bc24  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc24  0800bc24  0000cc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc2c  0800bc2c  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc2c  0800bc2c  0000cc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc30  0800bc30  0000cc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800bc34  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000710  200001d4  0800be08  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008e4  0800be08  0000d8e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001617b  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f5b  00000000  00000000  0002337f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  000262e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f87  00000000  00000000  000276e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a2f3  00000000  00000000  00028667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001883c  00000000  00000000  0005295a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001078a8  00000000  00000000  0006b196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172a3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069f4  00000000  00000000  00172a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00179478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b790 	.word	0x0800b790

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800b790 	.word	0x0800b790

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	@ 0x28
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001006:	4b37      	ldr	r3, [pc, #220]	@ (80010e4 <MX_ADC1_Init+0x100>)
 8001008:	4a37      	ldr	r2, [pc, #220]	@ (80010e8 <MX_ADC1_Init+0x104>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800100c:	4b35      	ldr	r3, [pc, #212]	@ (80010e4 <MX_ADC1_Init+0x100>)
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001012:	4b34      	ldr	r3, [pc, #208]	@ (80010e4 <MX_ADC1_Init+0x100>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001018:	4b32      	ldr	r3, [pc, #200]	@ (80010e4 <MX_ADC1_Init+0x100>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800101e:	4b31      	ldr	r3, [pc, #196]	@ (80010e4 <MX_ADC1_Init+0x100>)
 8001020:	2201      	movs	r2, #1
 8001022:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001024:	4b2f      	ldr	r3, [pc, #188]	@ (80010e4 <MX_ADC1_Init+0x100>)
 8001026:	2208      	movs	r2, #8
 8001028:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800102a:	4b2e      	ldr	r3, [pc, #184]	@ (80010e4 <MX_ADC1_Init+0x100>)
 800102c:	2200      	movs	r2, #0
 800102e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001030:	4b2c      	ldr	r3, [pc, #176]	@ (80010e4 <MX_ADC1_Init+0x100>)
 8001032:	2201      	movs	r2, #1
 8001034:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001036:	4b2b      	ldr	r3, [pc, #172]	@ (80010e4 <MX_ADC1_Init+0x100>)
 8001038:	2202      	movs	r2, #2
 800103a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103c:	4b29      	ldr	r3, [pc, #164]	@ (80010e4 <MX_ADC1_Init+0x100>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001044:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <MX_ADC1_Init+0x100>)
 8001046:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800104a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800104c:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <MX_ADC1_Init+0x100>)
 800104e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001052:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001054:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <MX_ADC1_Init+0x100>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800105c:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <MX_ADC1_Init+0x100>)
 800105e:	2200      	movs	r2, #0
 8001060:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001062:	4b20      	ldr	r3, [pc, #128]	@ (80010e4 <MX_ADC1_Init+0x100>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106a:	481e      	ldr	r0, [pc, #120]	@ (80010e4 <MX_ADC1_Init+0x100>)
 800106c:	f001 f958 	bl	8002320 <HAL_ADC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001076:	f000 fa96 	bl	80015a6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	4817      	ldr	r0, [pc, #92]	@ (80010e4 <MX_ADC1_Init+0x100>)
 8001086:	f002 f89d 	bl	80031c4 <HAL_ADCEx_MultiModeConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001090:	f000 fa89 	bl	80015a6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001094:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <MX_ADC1_Init+0x108>)
 8001096:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001098:	2306      	movs	r3, #6
 800109a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800109c:	2307      	movs	r3, #7
 800109e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010a0:	237f      	movs	r3, #127	@ 0x7f
 80010a2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010a4:	2304      	movs	r3, #4
 80010a6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	4619      	mov	r1, r3
 80010b0:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <MX_ADC1_Init+0x100>)
 80010b2:	f001 fb55 	bl	8002760 <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80010bc:	f000 fa73 	bl	80015a6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <MX_ADC1_Init+0x10c>)
 80010c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010c4:	230c      	movs	r3, #12
 80010c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <MX_ADC1_Init+0x100>)
 80010ce:	f001 fb47 	bl	8002760 <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80010d8:	f000 fa65 	bl	80015a6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	@ 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200001f4 	.word	0x200001f4
 80010e8:	50040000 	.word	0x50040000
 80010ec:	80000001 	.word	0x80000001
 80010f0:	14f00020 	.word	0x14f00020

080010f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0ac      	sub	sp, #176	@ 0xb0
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2288      	movs	r2, #136	@ 0x88
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f007 fe22 	bl	8008d5e <memset>
  if(adcHandle->Instance==ADC1)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a3d      	ldr	r2, [pc, #244]	@ (8001214 <HAL_ADC_MspInit+0x120>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d172      	bne.n	800120a <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001124:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001128:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800112a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800112e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001136:	2301      	movs	r3, #1
 8001138:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800113a:	2308      	movs	r3, #8
 800113c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800113e:	2307      	movs	r3, #7
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001142:	2302      	movs	r3, #2
 8001144:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001146:	2302      	movs	r3, #2
 8001148:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800114a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800114e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fc5f 	bl	8004a18 <HAL_RCCEx_PeriphCLKConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001160:	f000 fa21 	bl	80015a6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001164:	4b2c      	ldr	r3, [pc, #176]	@ (8001218 <HAL_ADC_MspInit+0x124>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001168:	4a2b      	ldr	r2, [pc, #172]	@ (8001218 <HAL_ADC_MspInit+0x124>)
 800116a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800116e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001170:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <HAL_ADC_MspInit+0x124>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001174:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b26      	ldr	r3, [pc, #152]	@ (8001218 <HAL_ADC_MspInit+0x124>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001180:	4a25      	ldr	r2, [pc, #148]	@ (8001218 <HAL_ADC_MspInit+0x124>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001188:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <HAL_ADC_MspInit+0x124>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001194:	2301      	movs	r3, #1
 8001196:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800119a:	230b      	movs	r3, #11
 800119c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b0:	f002 fc0c 	bl	80039cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011b4:	4b19      	ldr	r3, [pc, #100]	@ (800121c <HAL_ADC_MspInit+0x128>)
 80011b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001220 <HAL_ADC_MspInit+0x12c>)
 80011b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80011ba:	4b18      	ldr	r3, [pc, #96]	@ (800121c <HAL_ADC_MspInit+0x128>)
 80011bc:	2200      	movs	r2, #0
 80011be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c0:	4b16      	ldr	r3, [pc, #88]	@ (800121c <HAL_ADC_MspInit+0x128>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <HAL_ADC_MspInit+0x128>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011cc:	4b13      	ldr	r3, [pc, #76]	@ (800121c <HAL_ADC_MspInit+0x128>)
 80011ce:	2280      	movs	r2, #128	@ 0x80
 80011d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011d2:	4b12      	ldr	r3, [pc, #72]	@ (800121c <HAL_ADC_MspInit+0x128>)
 80011d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <HAL_ADC_MspInit+0x128>)
 80011dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <HAL_ADC_MspInit+0x128>)
 80011e4:	2220      	movs	r2, #32
 80011e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <HAL_ADC_MspInit+0x128>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011ee:	480b      	ldr	r0, [pc, #44]	@ (800121c <HAL_ADC_MspInit+0x128>)
 80011f0:	f002 f9aa 	bl	8003548 <HAL_DMA_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 80011fa:	f000 f9d4 	bl	80015a6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a06      	ldr	r2, [pc, #24]	@ (800121c <HAL_ADC_MspInit+0x128>)
 8001202:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001204:	4a05      	ldr	r2, [pc, #20]	@ (800121c <HAL_ADC_MspInit+0x128>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800120a:	bf00      	nop
 800120c:	37b0      	adds	r7, #176	@ 0xb0
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	50040000 	.word	0x50040000
 8001218:	40021000 	.word	0x40021000
 800121c:	20000258 	.word	0x20000258
 8001220:	40020008 	.word	0x40020008
 8001224:	00000000 	.word	0x00000000

08001228 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a22      	ldr	r2, [pc, #136]	@ (80012c0 <HAL_ADC_ConvCpltCallback+0x98>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d12e      	bne.n	8001298 <HAL_ADC_ConvCpltCallback+0x70>
		vrefint=(float) ((3.0*170)/adcvalues[0]);
 800123a:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <HAL_ADC_ConvCpltCallback+0x9c>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f970 	bl	8000524 <__aeabi_i2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	a119      	add	r1, pc, #100	@ (adr r1, 80012b0 <HAL_ADC_ConvCpltCallback+0x88>)
 800124a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800124e:	f7ff fafd 	bl	800084c <__aeabi_ddiv>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff fcc5 	bl	8000be8 <__aeabi_d2f>
 800125e:	4603      	mov	r3, r0
 8001260:	4a19      	ldr	r2, [pc, #100]	@ (80012c8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001262:	6013      	str	r3, [r2, #0]
		tension=(float) (adcvalues[1]/4095.0)*vrefint;
 8001264:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001266:	885b      	ldrh	r3, [r3, #2]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f95b 	bl	8000524 <__aeabi_i2d>
 800126e:	a312      	add	r3, pc, #72	@ (adr r3, 80012b8 <HAL_ADC_ConvCpltCallback+0x90>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff faea 	bl	800084c <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fcb2 	bl	8000be8 <__aeabi_d2f>
 8001284:	ee07 0a10 	vmov	s14, r0
 8001288:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <HAL_ADC_ConvCpltCallback+0xa0>)
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <HAL_ADC_ConvCpltCallback+0xa4>)
 8001294:	edc3 7a00 	vstr	s15, [r3]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adcvalues, 2);
 8001298:	2202      	movs	r2, #2
 800129a:	490a      	ldr	r1, [pc, #40]	@ (80012c4 <HAL_ADC_ConvCpltCallback+0x9c>)
 800129c:	480c      	ldr	r0, [pc, #48]	@ (80012d0 <HAL_ADC_ConvCpltCallback+0xa8>)
 800129e:	f001 f98f 	bl	80025c0 <HAL_ADC_Start_DMA>



}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	f3af 8000 	nop.w
 80012b0:	00000000 	.word	0x00000000
 80012b4:	407fe000 	.word	0x407fe000
 80012b8:	00000000 	.word	0x00000000
 80012bc:	40affe00 	.word	0x40affe00
 80012c0:	50040000 	.word	0x50040000
 80012c4:	20000564 	.word	0x20000564
 80012c8:	200001f0 	.word	0x200001f0
 80012cc:	20000568 	.word	0x20000568
 80012d0:	200001f4 	.word	0x200001f4

080012d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012da:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <MX_DMA_Init+0x60>)
 80012dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012de:	4a15      	ldr	r2, [pc, #84]	@ (8001334 <MX_DMA_Init+0x60>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80012e6:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <MX_DMA_Init+0x60>)
 80012e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012f2:	4b10      	ldr	r3, [pc, #64]	@ (8001334 <MX_DMA_Init+0x60>)
 80012f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001334 <MX_DMA_Init+0x60>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80012fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001334 <MX_DMA_Init+0x60>)
 8001300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	200b      	movs	r0, #11
 8001310:	f002 f8e3 	bl	80034da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001314:	200b      	movs	r0, #11
 8001316:	f002 f8fc 	bl	8003512 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	203c      	movs	r0, #60	@ 0x3c
 8001320:	f002 f8db 	bl	80034da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001324:	203c      	movs	r0, #60	@ 0x3c
 8001326:	f002 f8f4 	bl	8003512 <HAL_NVIC_EnableIRQ>

}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000

08001338 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	4b2b      	ldr	r3, [pc, #172]	@ (80013fc <MX_GPIO_Init+0xc4>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	4a2a      	ldr	r2, [pc, #168]	@ (80013fc <MX_GPIO_Init+0xc4>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135a:	4b28      	ldr	r3, [pc, #160]	@ (80013fc <MX_GPIO_Init+0xc4>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001366:	4b25      	ldr	r3, [pc, #148]	@ (80013fc <MX_GPIO_Init+0xc4>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a24      	ldr	r2, [pc, #144]	@ (80013fc <MX_GPIO_Init+0xc4>)
 800136c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b22      	ldr	r3, [pc, #136]	@ (80013fc <MX_GPIO_Init+0xc4>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <MX_GPIO_Init+0xc4>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a1e      	ldr	r2, [pc, #120]	@ (80013fc <MX_GPIO_Init+0xc4>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <MX_GPIO_Init+0xc4>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <MX_GPIO_Init+0xc4>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	4a18      	ldr	r2, [pc, #96]	@ (80013fc <MX_GPIO_Init+0xc4>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a2:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <MX_GPIO_Init+0xc4>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2120      	movs	r1, #32
 80013b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b6:	f002 fcb3 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	480b      	ldr	r0, [pc, #44]	@ (8001400 <MX_GPIO_Init+0xc8>)
 80013d2:	f002 fafb 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013d6:	2320      	movs	r3, #32
 80013d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f0:	f002 faec 	bl	80039cc <HAL_GPIO_Init>

}
 80013f4:	bf00      	nop
 80013f6:	3728      	adds	r7, #40	@ 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40021000 	.word	0x40021000
 8001400:	48000800 	.word	0x48000800

08001404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140a:	f000 fd13 	bl	8001e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140e:	f000 f879 	bl	8001504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001412:	f7ff ff91 	bl	8001338 <MX_GPIO_Init>
  MX_DMA_Init();
 8001416:	f7ff ff5d 	bl	80012d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800141a:	f000 fb53 	bl	8001ac4 <MX_USART2_UART_Init>
  MX_UART4_Init();
 800141e:	f000 fb21 	bl	8001a64 <MX_UART4_Init>
  MX_ADC1_Init();
 8001422:	f7ff fddf 	bl	8000fe4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001426:	f000 fa43 	bl	80018b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800142a:	f000 fa95 	bl	8001958 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  memcpy((uint8_t *)commandbuffer, "", sizeof(""));
 800142e:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <main+0xc8>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]

  HAL_Delay(100);
 8001434:	2064      	movs	r0, #100	@ 0x64
 8001436:	f000 fd79 	bl	8001f2c <HAL_Delay>
  HAL_UART_Abort(&huart4);
 800143a:	4825      	ldr	r0, [pc, #148]	@ (80014d0 <main+0xcc>)
 800143c:	f004 fde4 	bl	8006008 <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&huart4, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8001440:	2240      	movs	r2, #64	@ 0x40
 8001442:	4924      	ldr	r1, [pc, #144]	@ (80014d4 <main+0xd0>)
 8001444:	4822      	ldr	r0, [pc, #136]	@ (80014d0 <main+0xcc>)
 8001446:	f004 fd93 	bl	8005f70 <HAL_UART_Receive_DMA>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcvalues, 2);
 800144a:	2202      	movs	r2, #2
 800144c:	4922      	ldr	r1, [pc, #136]	@ (80014d8 <main+0xd4>)
 800144e:	4823      	ldr	r0, [pc, #140]	@ (80014dc <main+0xd8>)
 8001450:	f001 f8b6 	bl	80025c0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 8001454:	4822      	ldr	r0, [pc, #136]	@ (80014e0 <main+0xdc>)
 8001456:	f003 fff3 	bl	8005440 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800145a:	4822      	ldr	r0, [pc, #136]	@ (80014e4 <main+0xe0>)
 800145c:	f004 f858 	bl	8005510 <HAL_TIM_Base_Start_IT>
  vrefcalval=VREFCAL;
 8001460:	4b21      	ldr	r3, [pc, #132]	@ (80014e8 <main+0xe4>)
 8001462:	22aa      	movs	r2, #170	@ 0xaa
 8001464:	701a      	strb	r2, [r3, #0]


  /* USER CODE END 2 */
  int sizeb=0;
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(senderen==1){
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <main+0xe8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d1fb      	bne.n	800146a <main+0x66>
		  for(int i=0;i<10;i++){
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	e024      	b.n	80014c2 <main+0xbe>
			  sizeb=snprintf((char *)uart2buf,15, "%0.3f\r\n",( float)sendadcvalues[i]/1000.0);
 8001478:	4a1d      	ldr	r2, [pc, #116]	@ (80014f0 <main+0xec>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001488:	ee17 0a90 	vmov	r0, s15
 800148c:	f7ff f85c 	bl	8000548 <__aeabi_f2d>
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <main+0xf0>)
 8001496:	f7ff f9d9 	bl	800084c <__aeabi_ddiv>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	e9cd 2300 	strd	r2, r3, [sp]
 80014a2:	4a15      	ldr	r2, [pc, #84]	@ (80014f8 <main+0xf4>)
 80014a4:	210f      	movs	r1, #15
 80014a6:	4815      	ldr	r0, [pc, #84]	@ (80014fc <main+0xf8>)
 80014a8:	f007 fbc2 	bl	8008c30 <sniprintf>
 80014ac:	6038      	str	r0, [r7, #0]
			  HAL_UART_Transmit(&huart2, (char *)uart2buf, sizeb, 100);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	2364      	movs	r3, #100	@ 0x64
 80014b4:	4911      	ldr	r1, [pc, #68]	@ (80014fc <main+0xf8>)
 80014b6:	4812      	ldr	r0, [pc, #72]	@ (8001500 <main+0xfc>)
 80014b8:	f004 fcd0 	bl	8005e5c <HAL_UART_Transmit>
		  for(int i=0;i<10;i++){
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3301      	adds	r3, #1
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b09      	cmp	r3, #9
 80014c6:	ddd7      	ble.n	8001478 <main+0x74>
	  if(senderen==1){
 80014c8:	e7cf      	b.n	800146a <main+0x66>
 80014ca:	bf00      	nop
 80014cc:	200004e4 	.word	0x200004e4
 80014d0:	2000063c 	.word	0x2000063c
 80014d4:	200002a0 	.word	0x200002a0
 80014d8:	20000564 	.word	0x20000564
 80014dc:	200001f4 	.word	0x200001f4
 80014e0:	200005a4 	.word	0x200005a4
 80014e4:	200005f0 	.word	0x200005f0
 80014e8:	2000059c 	.word	0x2000059c
 80014ec:	20000594 	.word	0x20000594
 80014f0:	2000056c 	.word	0x2000056c
 80014f4:	408f4000 	.word	0x408f4000
 80014f8:	0800b7a8 	.word	0x0800b7a8
 80014fc:	20000580 	.word	0x20000580
 8001500:	200006c4 	.word	0x200006c4

08001504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b096      	sub	sp, #88	@ 0x58
 8001508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	2244      	movs	r2, #68	@ 0x44
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f007 fc23 	bl	8008d5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	463b      	mov	r3, r7
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001526:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800152a:	f002 fc1f 	bl	8003d6c <HAL_PWREx_ControlVoltageScaling>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001534:	f000 f837 	bl	80015a6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001538:	2302      	movs	r3, #2
 800153a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001540:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001542:	2310      	movs	r3, #16
 8001544:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001546:	2302      	movs	r3, #2
 8001548:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800154a:	2302      	movs	r3, #2
 800154c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800154e:	2301      	movs	r3, #1
 8001550:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001552:	230a      	movs	r3, #10
 8001554:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001556:	2307      	movs	r3, #7
 8001558:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800155a:	2302      	movs	r3, #2
 800155c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800155e:	2302      	movs	r3, #2
 8001560:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4618      	mov	r0, r3
 8001568:	f002 fc56 	bl	8003e18 <HAL_RCC_OscConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001572:	f000 f818 	bl	80015a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001576:	230f      	movs	r3, #15
 8001578:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157a:	2303      	movs	r3, #3
 800157c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800158a:	463b      	mov	r3, r7
 800158c:	2104      	movs	r1, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f003 f81e 	bl	80045d0 <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800159a:	f000 f804 	bl	80015a6 <Error_Handler>
  }
}
 800159e:	bf00      	nop
 80015a0:	3758      	adds	r7, #88	@ 0x58
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015aa:	b672      	cpsid	i
}
 80015ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ae:	bf00      	nop
 80015b0:	e7fd      	b.n	80015ae <Error_Handler+0x8>
	...

080015b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_MspInit+0x44>)
 80015bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015be:	4a0e      	ldr	r2, [pc, #56]	@ (80015f8 <HAL_MspInit+0x44>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80015c6:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <HAL_MspInit+0x44>)
 80015c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <HAL_MspInit+0x44>)
 80015d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d6:	4a08      	ldr	r2, [pc, #32]	@ (80015f8 <HAL_MspInit+0x44>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_MspInit+0x44>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <NMI_Handler+0x4>

08001604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <HardFault_Handler+0x4>

0800160c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <MemManage_Handler+0x4>

08001614 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <UsageFault_Handler+0x4>

08001624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001652:	f000 fc4b 	bl	8001eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <DMA1_Channel1_IRQHandler+0x10>)
 8001662:	f002 f8c7 	bl	80037f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000258 	.word	0x20000258

08001670 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001670:	b598      	push	{r3, r4, r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */


	sendadcvalues[tim2indx]=(uint16_t) floor(tension*1000);
 8001674:	4b17      	ldr	r3, [pc, #92]	@ (80016d4 <TIM2_IRQHandler+0x64>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80016d8 <TIM2_IRQHandler+0x68>
 800167e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001682:	ee17 0a90 	vmov	r0, s15
 8001686:	f7fe ff5f 	bl	8000548 <__aeabi_f2d>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	ec43 2b10 	vmov	d0, r2, r3
 8001692:	f00a f801 	bl	800b698 <floor>
 8001696:	ec51 0b10 	vmov	r0, r1, d0
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <TIM2_IRQHandler+0x6c>)
 800169c:	681c      	ldr	r4, [r3, #0]
 800169e:	f7ff fa83 	bl	8000ba8 <__aeabi_d2uiz>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <TIM2_IRQHandler+0x70>)
 80016a8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	tim2indx++;
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <TIM2_IRQHandler+0x6c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <TIM2_IRQHandler+0x6c>)
 80016b4:	6013      	str	r3, [r2, #0]

	if(tim2indx>=10){
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <TIM2_IRQHandler+0x6c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b09      	cmp	r3, #9
 80016bc:	dd05      	ble.n	80016ca <TIM2_IRQHandler+0x5a>
		senderen=1;
 80016be:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <TIM2_IRQHandler+0x74>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
		tim2indx=0;
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <TIM2_IRQHandler+0x6c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
		}



  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016ca:	4807      	ldr	r0, [pc, #28]	@ (80016e8 <TIM2_IRQHandler+0x78>)
 80016cc:	f003 ff90 	bl	80055f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	bd98      	pop	{r3, r4, r7, pc}
 80016d4:	20000568 	.word	0x20000568
 80016d8:	447a0000 	.word	0x447a0000
 80016dc:	20000598 	.word	0x20000598
 80016e0:	2000056c 	.word	0x2000056c
 80016e4:	20000594 	.word	0x20000594
 80016e8:	200005f0 	.word	0x200005f0

080016ec <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <DMA2_Channel5_IRQHandler+0x10>)
 80016f2:	f002 f87f 	bl	80037f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000074c 	.word	0x2000074c

08001700 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return 1;
 8001704:	2301      	movs	r3, #1
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_kill>:

int _kill(int pid, int sig)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800171a:	f007 fb95 	bl	8008e48 <__errno>
 800171e:	4603      	mov	r3, r0
 8001720:	2216      	movs	r2, #22
 8001722:	601a      	str	r2, [r3, #0]
  return -1;
 8001724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_exit>:

void _exit (int status)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ffe7 	bl	8001710 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001742:	bf00      	nop
 8001744:	e7fd      	b.n	8001742 <_exit+0x12>

08001746 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e00a      	b.n	800176e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001758:	f3af 8000 	nop.w
 800175c:	4601      	mov	r1, r0
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	60ba      	str	r2, [r7, #8]
 8001764:	b2ca      	uxtb	r2, r1
 8001766:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3301      	adds	r3, #1
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	429a      	cmp	r2, r3
 8001774:	dbf0      	blt.n	8001758 <_read+0x12>
  }

  return len;
 8001776:	687b      	ldr	r3, [r7, #4]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	e009      	b.n	80017a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	60ba      	str	r2, [r7, #8]
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3301      	adds	r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	dbf1      	blt.n	8001792 <_write+0x12>
  }
  return len;
 80017ae:	687b      	ldr	r3, [r7, #4]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <_close>:

int _close(int file)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017e0:	605a      	str	r2, [r3, #4]
  return 0;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_isatty>:

int _isatty(int file)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017f8:	2301      	movs	r3, #1
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001806:	b480      	push	{r7}
 8001808:	b085      	sub	sp, #20
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001828:	4a14      	ldr	r2, [pc, #80]	@ (800187c <_sbrk+0x5c>)
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <_sbrk+0x60>)
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001834:	4b13      	ldr	r3, [pc, #76]	@ (8001884 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <_sbrk+0x64>)
 800183e:	4a12      	ldr	r2, [pc, #72]	@ (8001888 <_sbrk+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001842:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001850:	f007 fafa 	bl	8008e48 <__errno>
 8001854:	4603      	mov	r3, r0
 8001856:	220c      	movs	r2, #12
 8001858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e009      	b.n	8001874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001866:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <_sbrk+0x64>)
 8001870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20018000 	.word	0x20018000
 8001880:	00000400 	.word	0x00000400
 8001884:	200005a0 	.word	0x200005a0
 8001888:	200008e8 	.word	0x200008e8

0800188c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <SystemInit+0x20>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001896:	4a05      	ldr	r2, [pc, #20]	@ (80018ac <SystemInit+0x20>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b6:	f107 0310 	add.w	r3, r7, #16
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018ce:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <MX_TIM1_Init+0xa0>)
 80018d0:	4a20      	ldr	r2, [pc, #128]	@ (8001954 <MX_TIM1_Init+0xa4>)
 80018d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 80018d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001950 <MX_TIM1_Init+0xa0>)
 80018d6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80018da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <MX_TIM1_Init+0xa0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 800-1;
 80018e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <MX_TIM1_Init+0xa0>)
 80018e4:	f240 321f 	movw	r2, #799	@ 0x31f
 80018e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ea:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <MX_TIM1_Init+0xa0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018f0:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <MX_TIM1_Init+0xa0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f6:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <MX_TIM1_Init+0xa0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018fc:	4814      	ldr	r0, [pc, #80]	@ (8001950 <MX_TIM1_Init+0xa0>)
 80018fe:	f003 fd47 	bl	8005390 <HAL_TIM_Base_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001908:	f7ff fe4d 	bl	80015a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001910:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001912:	f107 0310 	add.w	r3, r7, #16
 8001916:	4619      	mov	r1, r3
 8001918:	480d      	ldr	r0, [pc, #52]	@ (8001950 <MX_TIM1_Init+0xa0>)
 800191a:	f003 ff70 	bl	80057fe <HAL_TIM_ConfigClockSource>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001924:	f7ff fe3f 	bl	80015a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001928:	2320      	movs	r3, #32
 800192a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	@ (8001950 <MX_TIM1_Init+0xa0>)
 800193a:	f004 f99b 	bl	8005c74 <HAL_TIMEx_MasterConfigSynchronization>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001944:	f7ff fe2f 	bl	80015a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200005a4 	.word	0x200005a4
 8001954:	40012c00 	.word	0x40012c00

08001958 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195e:	f107 0310 	add.w	r3, r7, #16
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001976:	4b1e      	ldr	r3, [pc, #120]	@ (80019f0 <MX_TIM2_Init+0x98>)
 8001978:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800197c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 800197e:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <MX_TIM2_Init+0x98>)
 8001980:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001984:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001986:	4b1a      	ldr	r3, [pc, #104]	@ (80019f0 <MX_TIM2_Init+0x98>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800-1;
 800198c:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <MX_TIM2_Init+0x98>)
 800198e:	f240 321f 	movw	r2, #799	@ 0x31f
 8001992:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001994:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <MX_TIM2_Init+0x98>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <MX_TIM2_Init+0x98>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019a0:	4813      	ldr	r0, [pc, #76]	@ (80019f0 <MX_TIM2_Init+0x98>)
 80019a2:	f003 fcf5 	bl	8005390 <HAL_TIM_Base_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80019ac:	f7ff fdfb 	bl	80015a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	4619      	mov	r1, r3
 80019bc:	480c      	ldr	r0, [pc, #48]	@ (80019f0 <MX_TIM2_Init+0x98>)
 80019be:	f003 ff1e 	bl	80057fe <HAL_TIM_ConfigClockSource>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80019c8:	f7ff fded 	bl	80015a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	4619      	mov	r1, r3
 80019d8:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <MX_TIM2_Init+0x98>)
 80019da:	f004 f94b 	bl	8005c74 <HAL_TIMEx_MasterConfigSynchronization>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80019e4:	f7ff fddf 	bl	80015a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200005f0 	.word	0x200005f0

080019f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a16      	ldr	r2, [pc, #88]	@ (8001a5c <HAL_TIM_Base_MspInit+0x68>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10c      	bne.n	8001a20 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a06:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <HAL_TIM_Base_MspInit+0x6c>)
 8001a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0a:	4a15      	ldr	r2, [pc, #84]	@ (8001a60 <HAL_TIM_Base_MspInit+0x6c>)
 8001a0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a10:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <HAL_TIM_Base_MspInit+0x6c>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a1e:	e018      	b.n	8001a52 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a28:	d113      	bne.n	8001a52 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <HAL_TIM_Base_MspInit+0x6c>)
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a60 <HAL_TIM_Base_MspInit+0x6c>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a36:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <HAL_TIM_Base_MspInit+0x6c>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	201c      	movs	r0, #28
 8001a48:	f001 fd47 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a4c:	201c      	movs	r0, #28
 8001a4e:	f001 fd60 	bl	8003512 <HAL_NVIC_EnableIRQ>
}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40012c00 	.word	0x40012c00
 8001a60:	40021000 	.word	0x40021000

08001a64 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a68:	4b14      	ldr	r3, [pc, #80]	@ (8001abc <MX_UART4_Init+0x58>)
 8001a6a:	4a15      	ldr	r2, [pc, #84]	@ (8001ac0 <MX_UART4_Init+0x5c>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <MX_UART4_Init+0x58>)
 8001a70:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a74:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <MX_UART4_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <MX_UART4_Init+0x58>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <MX_UART4_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <MX_UART4_Init+0x58>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <MX_UART4_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <MX_UART4_Init+0x58>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <MX_UART4_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <MX_UART4_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	@ (8001abc <MX_UART4_Init+0x58>)
 8001aa8:	f004 f98a 	bl	8005dc0 <HAL_UART_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001ab2:	f7ff fd78 	bl	80015a6 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2000063c 	.word	0x2000063c
 8001ac0:	40004c00 	.word	0x40004c00

08001ac4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ac8:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <MX_USART2_UART_Init+0x58>)
 8001aca:	4a15      	ldr	r2, [pc, #84]	@ (8001b20 <MX_USART2_UART_Init+0x5c>)
 8001acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ace:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <MX_USART2_UART_Init+0x58>)
 8001ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad6:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <MX_USART2_UART_Init+0x58>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001adc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <MX_USART2_UART_Init+0x58>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <MX_USART2_UART_Init+0x58>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <MX_USART2_UART_Init+0x58>)
 8001aea:	220c      	movs	r2, #12
 8001aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <MX_USART2_UART_Init+0x58>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af4:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <MX_USART2_UART_Init+0x58>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001afa:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <MX_USART2_UART_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <MX_USART2_UART_Init+0x58>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b06:	4805      	ldr	r0, [pc, #20]	@ (8001b1c <MX_USART2_UART_Init+0x58>)
 8001b08:	f004 f95a 	bl	8005dc0 <HAL_UART_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b12:	f7ff fd48 	bl	80015a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200006c4 	.word	0x200006c4
 8001b20:	40004400 	.word	0x40004400

08001b24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b0ae      	sub	sp, #184	@ 0xb8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	2288      	movs	r2, #136	@ 0x88
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f007 f90a 	bl	8008d5e <memset>
  if(uartHandle->Instance==UART4)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a68      	ldr	r2, [pc, #416]	@ (8001cf0 <HAL_UART_MspInit+0x1cc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	f040 8088 	bne.w	8001c66 <HAL_UART_MspInit+0x142>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001b56:	2308      	movs	r3, #8
 8001b58:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4618      	mov	r0, r3
 8001b64:	f002 ff58 	bl	8004a18 <HAL_RCCEx_PeriphCLKConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b6e:	f7ff fd1a 	bl	80015a6 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b72:	4b60      	ldr	r3, [pc, #384]	@ (8001cf4 <HAL_UART_MspInit+0x1d0>)
 8001b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b76:	4a5f      	ldr	r2, [pc, #380]	@ (8001cf4 <HAL_UART_MspInit+0x1d0>)
 8001b78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b7e:	4b5d      	ldr	r3, [pc, #372]	@ (8001cf4 <HAL_UART_MspInit+0x1d0>)
 8001b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b86:	61bb      	str	r3, [r7, #24]
 8001b88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cf4 <HAL_UART_MspInit+0x1d0>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8e:	4a59      	ldr	r2, [pc, #356]	@ (8001cf4 <HAL_UART_MspInit+0x1d0>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b96:	4b57      	ldr	r3, [pc, #348]	@ (8001cf4 <HAL_UART_MspInit+0x1d0>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	4b54      	ldr	r3, [pc, #336]	@ (8001cf4 <HAL_UART_MspInit+0x1d0>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba6:	4a53      	ldr	r2, [pc, #332]	@ (8001cf4 <HAL_UART_MspInit+0x1d0>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bae:	4b51      	ldr	r3, [pc, #324]	@ (8001cf4 <HAL_UART_MspInit+0x1d0>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be2:	f001 fef3 	bl	80039cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001be6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c00:	2308      	movs	r3, #8
 8001c02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c06:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	483a      	ldr	r0, [pc, #232]	@ (8001cf8 <HAL_UART_MspInit+0x1d4>)
 8001c0e:	f001 fedd 	bl	80039cc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8001c12:	4b3a      	ldr	r3, [pc, #232]	@ (8001cfc <HAL_UART_MspInit+0x1d8>)
 8001c14:	4a3a      	ldr	r2, [pc, #232]	@ (8001d00 <HAL_UART_MspInit+0x1dc>)
 8001c16:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8001c18:	4b38      	ldr	r3, [pc, #224]	@ (8001cfc <HAL_UART_MspInit+0x1d8>)
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c1e:	4b37      	ldr	r3, [pc, #220]	@ (8001cfc <HAL_UART_MspInit+0x1d8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c24:	4b35      	ldr	r3, [pc, #212]	@ (8001cfc <HAL_UART_MspInit+0x1d8>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c2a:	4b34      	ldr	r3, [pc, #208]	@ (8001cfc <HAL_UART_MspInit+0x1d8>)
 8001c2c:	2280      	movs	r2, #128	@ 0x80
 8001c2e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c30:	4b32      	ldr	r3, [pc, #200]	@ (8001cfc <HAL_UART_MspInit+0x1d8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c36:	4b31      	ldr	r3, [pc, #196]	@ (8001cfc <HAL_UART_MspInit+0x1d8>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cfc <HAL_UART_MspInit+0x1d8>)
 8001c3e:	2220      	movs	r2, #32
 8001c40:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c42:	4b2e      	ldr	r3, [pc, #184]	@ (8001cfc <HAL_UART_MspInit+0x1d8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001c48:	482c      	ldr	r0, [pc, #176]	@ (8001cfc <HAL_UART_MspInit+0x1d8>)
 8001c4a:	f001 fc7d 	bl	8003548 <HAL_DMA_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8001c54:	f7ff fca7 	bl	80015a6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a28      	ldr	r2, [pc, #160]	@ (8001cfc <HAL_UART_MspInit+0x1d8>)
 8001c5c:	675a      	str	r2, [r3, #116]	@ 0x74
 8001c5e:	4a27      	ldr	r2, [pc, #156]	@ (8001cfc <HAL_UART_MspInit+0x1d8>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c64:	e040      	b.n	8001ce8 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART2)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a26      	ldr	r2, [pc, #152]	@ (8001d04 <HAL_UART_MspInit+0x1e0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d13b      	bne.n	8001ce8 <HAL_UART_MspInit+0x1c4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c70:	2302      	movs	r3, #2
 8001c72:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f002 fecb 	bl	8004a18 <HAL_RCCEx_PeriphCLKConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_UART_MspInit+0x168>
      Error_Handler();
 8001c88:	f7ff fc8d 	bl	80015a6 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c8c:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <HAL_UART_MspInit+0x1d0>)
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c90:	4a18      	ldr	r2, [pc, #96]	@ (8001cf4 <HAL_UART_MspInit+0x1d0>)
 8001c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c96:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c98:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <HAL_UART_MspInit+0x1d0>)
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca4:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <HAL_UART_MspInit+0x1d0>)
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca8:	4a12      	ldr	r2, [pc, #72]	@ (8001cf4 <HAL_UART_MspInit+0x1d0>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb0:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <HAL_UART_MspInit+0x1d0>)
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cbc:	230c      	movs	r3, #12
 8001cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd4:	2307      	movs	r3, #7
 8001cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ce4:	f001 fe72 	bl	80039cc <HAL_GPIO_Init>
}
 8001ce8:	bf00      	nop
 8001cea:	37b8      	adds	r7, #184	@ 0xb8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40004c00 	.word	0x40004c00
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	48000800 	.word	0x48000800
 8001cfc:	2000074c 	.word	0x2000074c
 8001d00:	40020458 	.word	0x40020458
 8001d04:	40004400 	.word	0x40004400

08001d08 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8001d10:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc8 <HAL_UART_RxCpltCallback+0xc0>)
 8001d12:	881a      	ldrh	r2, [r3, #0]
 8001d14:	4b2d      	ldr	r3, [pc, #180]	@ (8001dcc <HAL_UART_RxCpltCallback+0xc4>)
 8001d16:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8001d18:	4b2c      	ldr	r3, [pc, #176]	@ (8001dcc <HAL_UART_RxCpltCallback+0xc4>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001d20:	d922      	bls.n	8001d68 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 8001d22:	4b2a      	ldr	r3, [pc, #168]	@ (8001dcc <HAL_UART_RxCpltCallback+0xc4>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001d2a:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8001d2c:	4b27      	ldr	r3, [pc, #156]	@ (8001dcc <HAL_UART_RxCpltCallback+0xc4>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b27      	ldr	r3, [pc, #156]	@ (8001dd0 <HAL_UART_RxCpltCallback+0xc8>)
 8001d34:	4413      	add	r3, r2
 8001d36:	89fa      	ldrh	r2, [r7, #14]
 8001d38:	4926      	ldr	r1, [pc, #152]	@ (8001dd4 <HAL_UART_RxCpltCallback+0xcc>)
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f007 f8b1 	bl	8008ea2 <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8001d40:	4b22      	ldr	r3, [pc, #136]	@ (8001dcc <HAL_UART_RxCpltCallback+0xc4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8001d46:	89fb      	ldrh	r3, [r7, #14]
 8001d48:	4a22      	ldr	r2, [pc, #136]	@ (8001dd4 <HAL_UART_RxCpltCallback+0xcc>)
 8001d4a:	1899      	adds	r1, r3, r2
 8001d4c:	89fb      	ldrh	r3, [r7, #14]
 8001d4e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001d52:	461a      	mov	r2, r3
 8001d54:	481e      	ldr	r0, [pc, #120]	@ (8001dd0 <HAL_UART_RxCpltCallback+0xc8>)
 8001d56:	f007 f8a4 	bl	8008ea2 <memcpy>
				newPos = (64-datatocopy);  // update the position
 8001d5a:	89fb      	ldrh	r3, [r7, #14]
 8001d5c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <HAL_UART_RxCpltCallback+0xc0>)
 8001d64:	801a      	strh	r2, [r3, #0]
 8001d66:	e01e      	b.n	8001da6 <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8001d68:	4b18      	ldr	r3, [pc, #96]	@ (8001dcc <HAL_UART_RxCpltCallback+0xc4>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <HAL_UART_RxCpltCallback+0xc8>)
 8001d70:	441a      	add	r2, r3
 8001d72:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <HAL_UART_RxCpltCallback+0xcc>)
 8001d74:	4610      	mov	r0, r2
 8001d76:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f8d1 c000 	ldr.w	ip, [r1]
 8001d82:	684e      	ldr	r6, [r1, #4]
 8001d84:	688d      	ldr	r5, [r1, #8]
 8001d86:	68c9      	ldr	r1, [r1, #12]
 8001d88:	f8c2 c000 	str.w	ip, [r2]
 8001d8c:	6056      	str	r6, [r2, #4]
 8001d8e:	6095      	str	r5, [r2, #8]
 8001d90:	60d1      	str	r1, [r2, #12]
 8001d92:	3310      	adds	r3, #16
 8001d94:	3010      	adds	r0, #16
 8001d96:	42a3      	cmp	r3, r4
 8001d98:	d1ef      	bne.n	8001d7a <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <HAL_UART_RxCpltCallback+0xc4>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	3340      	adds	r3, #64	@ 0x40
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <HAL_UART_RxCpltCallback+0xc0>)
 8001da4:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&huart4, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 8001da6:	2240      	movs	r2, #64	@ 0x40
 8001da8:	490a      	ldr	r1, [pc, #40]	@ (8001dd4 <HAL_UART_RxCpltCallback+0xcc>)
 8001daa:	480b      	ldr	r0, [pc, #44]	@ (8001dd8 <HAL_UART_RxCpltCallback+0xd0>)
 8001dac:	f004 f8e0 	bl	8005f70 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8001db0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <HAL_UART_RxCpltCallback+0xd4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4b09      	ldr	r3, [pc, #36]	@ (8001ddc <HAL_UART_RxCpltCallback+0xd4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0204 	bic.w	r2, r2, #4
 8001dbe:	601a      	str	r2, [r3, #0]

	//HAL_UART_Receive_DMA(&huart4, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc8:	200004e2 	.word	0x200004e2
 8001dcc:	200004e0 	.word	0x200004e0
 8001dd0:	200002e0 	.word	0x200002e0
 8001dd4:	200002a0 	.word	0x200002a0
 8001dd8:	2000063c 	.word	0x2000063c
 8001ddc:	2000074c 	.word	0x2000074c

08001de0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001de0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001de4:	f7ff fd52 	bl	800188c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de8:	480c      	ldr	r0, [pc, #48]	@ (8001e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8001dea:	490d      	ldr	r1, [pc, #52]	@ (8001e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dec:	4a0d      	ldr	r2, [pc, #52]	@ (8001e24 <LoopForever+0xe>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df0:	e002      	b.n	8001df8 <LoopCopyDataInit>

08001df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df6:	3304      	adds	r3, #4

08001df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dfc:	d3f9      	bcc.n	8001df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e00:	4c0a      	ldr	r4, [pc, #40]	@ (8001e2c <LoopForever+0x16>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e04:	e001      	b.n	8001e0a <LoopFillZerobss>

08001e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e08:	3204      	adds	r2, #4

08001e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e0c:	d3fb      	bcc.n	8001e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e0e:	f007 f821 	bl	8008e54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e12:	f7ff faf7 	bl	8001404 <main>

08001e16 <LoopForever>:

LoopForever:
    b LoopForever
 8001e16:	e7fe      	b.n	8001e16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e20:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e24:	0800bc34 	.word	0x0800bc34
  ldr r2, =_sbss
 8001e28:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e2c:	200008e4 	.word	0x200008e4

08001e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e30:	e7fe      	b.n	8001e30 <ADC1_2_IRQHandler>
	...

08001e34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <HAL_Init+0x3c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a0b      	ldr	r2, [pc, #44]	@ (8001e70 <HAL_Init+0x3c>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e48:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e4a:	2003      	movs	r0, #3
 8001e4c:	f001 fb3a 	bl	80034c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e50:	2000      	movs	r0, #0
 8001e52:	f000 f80f 	bl	8001e74 <HAL_InitTick>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	71fb      	strb	r3, [r7, #7]
 8001e60:	e001      	b.n	8001e66 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e62:	f7ff fba7 	bl	80015b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e66:	79fb      	ldrb	r3, [r7, #7]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40022000 	.word	0x40022000

08001e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e80:	4b17      	ldr	r3, [pc, #92]	@ (8001ee0 <HAL_InitTick+0x6c>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d023      	beq.n	8001ed0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e88:	4b16      	ldr	r3, [pc, #88]	@ (8001ee4 <HAL_InitTick+0x70>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <HAL_InitTick+0x6c>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f001 fb45 	bl	800352e <HAL_SYSTICK_Config>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10f      	bne.n	8001eca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b0f      	cmp	r3, #15
 8001eae:	d809      	bhi.n	8001ec4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	f001 fb0f 	bl	80034da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee8 <HAL_InitTick+0x74>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e007      	b.n	8001ed4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
 8001ec8:	e004      	b.n	8001ed4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	73fb      	strb	r3, [r7, #15]
 8001ece:	e001      	b.n	8001ed4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000004 	.word	0x20000004

08001eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <HAL_IncTick+0x20>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_IncTick+0x24>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	4a04      	ldr	r2, [pc, #16]	@ (8001f10 <HAL_IncTick+0x24>)
 8001efe:	6013      	str	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20000794 	.word	0x20000794

08001f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return uwTick;
 8001f18:	4b03      	ldr	r3, [pc, #12]	@ (8001f28 <HAL_GetTick+0x14>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000794 	.word	0x20000794

08001f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff ffee 	bl	8001f14 <HAL_GetTick>
 8001f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d005      	beq.n	8001f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f46:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <HAL_Delay+0x44>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f52:	bf00      	nop
 8001f54:	f7ff ffde 	bl	8001f14 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d8f7      	bhi.n	8001f54 <HAL_Delay+0x28>
  {
  }
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000008 	.word	0x20000008

08001f74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3360      	adds	r3, #96	@ 0x60
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <LL_ADC_SetOffset+0x44>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	4313      	orrs	r3, r2
 800200c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002014:	bf00      	nop
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	03fff000 	.word	0x03fff000

08002024 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3360      	adds	r3, #96	@ 0x60
 8002032:	461a      	mov	r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3360      	adds	r3, #96	@ 0x60
 8002060:	461a      	mov	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	431a      	orrs	r2, r3
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800207a:	bf00      	nop
 800207c:	371c      	adds	r7, #28
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3330      	adds	r3, #48	@ 0x30
 80020bc:	461a      	mov	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	4413      	add	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	211f      	movs	r1, #31
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	401a      	ands	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	0e9b      	lsrs	r3, r3, #26
 80020e4:	f003 011f 	and.w	r1, r3, #31
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	fa01 f303 	lsl.w	r3, r1, r3
 80020f2:	431a      	orrs	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020f8:	bf00      	nop
 80020fa:	371c      	adds	r7, #28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	3314      	adds	r3, #20
 8002114:	461a      	mov	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	0e5b      	lsrs	r3, r3, #25
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	4413      	add	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	0d1b      	lsrs	r3, r3, #20
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	2107      	movs	r1, #7
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	401a      	ands	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	0d1b      	lsrs	r3, r3, #20
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	431a      	orrs	r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800214e:	bf00      	nop
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002174:	43db      	mvns	r3, r3
 8002176:	401a      	ands	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0318 	and.w	r3, r3, #24
 800217e:	4908      	ldr	r1, [pc, #32]	@ (80021a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002180:	40d9      	lsrs	r1, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	400b      	ands	r3, r1
 8002186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218a:	431a      	orrs	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	0007ffff 	.word	0x0007ffff

080021a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 031f 	and.w	r3, r3, #31
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80021d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6093      	str	r3, [r2, #8]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021f8:	d101      	bne.n	80021fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800221c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002220:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002244:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002248:	d101      	bne.n	800224e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800226c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002270:	f043 0201 	orr.w	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <LL_ADC_IsEnabled+0x18>
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <LL_ADC_IsEnabled+0x1a>
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022ba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022be:	f043 0204 	orr.w	r2, r3, #4
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d101      	bne.n	80022ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b08      	cmp	r3, #8
 800230a:	d101      	bne.n	8002310 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b089      	sub	sp, #36	@ 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e130      	b.n	800259c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002344:	2b00      	cmp	r3, #0
 8002346:	d109      	bne.n	800235c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7fe fed3 	bl	80010f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff3f 	bl	80021e4 <LL_ADC_IsDeepPowerDownEnabled>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d004      	beq.n	8002376 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff25 	bl	80021c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ff5a 	bl	8002234 <LL_ADC_IsInternalRegulatorEnabled>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d115      	bne.n	80023b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ff3e 	bl	800220c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002390:	4b84      	ldr	r3, [pc, #528]	@ (80025a4 <HAL_ADC_Init+0x284>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	4a84      	ldr	r2, [pc, #528]	@ (80025a8 <HAL_ADC_Init+0x288>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	099b      	lsrs	r3, r3, #6
 800239e:	3301      	adds	r3, #1
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023a4:	e002      	b.n	80023ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f9      	bne.n	80023a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff ff3c 	bl	8002234 <LL_ADC_IsInternalRegulatorEnabled>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10d      	bne.n	80023de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c6:	f043 0210 	orr.w	r2, r3, #16
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ff75 	bl	80022d2 <LL_ADC_REG_IsConversionOngoing>
 80023e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f040 80c9 	bne.w	800258a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 80c5 	bne.w	800258a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002404:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002408:	f043 0202 	orr.w	r2, r3, #2
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff35 	bl	8002284 <LL_ADC_IsEnabled>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d115      	bne.n	800244c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002420:	4862      	ldr	r0, [pc, #392]	@ (80025ac <HAL_ADC_Init+0x28c>)
 8002422:	f7ff ff2f 	bl	8002284 <LL_ADC_IsEnabled>
 8002426:	4604      	mov	r4, r0
 8002428:	4861      	ldr	r0, [pc, #388]	@ (80025b0 <HAL_ADC_Init+0x290>)
 800242a:	f7ff ff2b 	bl	8002284 <LL_ADC_IsEnabled>
 800242e:	4603      	mov	r3, r0
 8002430:	431c      	orrs	r4, r3
 8002432:	4860      	ldr	r0, [pc, #384]	@ (80025b4 <HAL_ADC_Init+0x294>)
 8002434:	f7ff ff26 	bl	8002284 <LL_ADC_IsEnabled>
 8002438:	4603      	mov	r3, r0
 800243a:	4323      	orrs	r3, r4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4619      	mov	r1, r3
 8002446:	485c      	ldr	r0, [pc, #368]	@ (80025b8 <HAL_ADC_Init+0x298>)
 8002448:	f7ff fd94 	bl	8001f74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7e5b      	ldrb	r3, [r3, #25]
 8002450:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002456:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800245c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002462:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3020 	ldrb.w	r3, [r3, #32]
 800246a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d106      	bne.n	8002488 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	3b01      	subs	r3, #1
 8002480:	045b      	lsls	r3, r3, #17
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002494:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	4b44      	ldr	r3, [pc, #272]	@ (80025bc <HAL_ADC_Init+0x29c>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	69b9      	ldr	r1, [r7, #24]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff1b 	bl	80022f8 <LL_ADC_INJ_IsConversionOngoing>
 80024c2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d13d      	bne.n	8002546 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d13a      	bne.n	8002546 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024d4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024dc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024ec:	f023 0302 	bic.w	r3, r3, #2
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	69b9      	ldr	r1, [r7, #24]
 80024f6:	430b      	orrs	r3, r1
 80024f8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002500:	2b01      	cmp	r3, #1
 8002502:	d118      	bne.n	8002536 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800250e:	f023 0304 	bic.w	r3, r3, #4
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800251a:	4311      	orrs	r1, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002520:	4311      	orrs	r1, r2
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002526:	430a      	orrs	r2, r1
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	611a      	str	r2, [r3, #16]
 8002534:	e007      	b.n	8002546 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0201 	bic.w	r2, r2, #1
 8002544:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d10c      	bne.n	8002568 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002554:	f023 010f 	bic.w	r1, r3, #15
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	1e5a      	subs	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	631a      	str	r2, [r3, #48]	@ 0x30
 8002566:	e007      	b.n	8002578 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 020f 	bic.w	r2, r2, #15
 8002576:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257c:	f023 0303 	bic.w	r3, r3, #3
 8002580:	f043 0201 	orr.w	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	655a      	str	r2, [r3, #84]	@ 0x54
 8002588:	e007      	b.n	800259a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258e:	f043 0210 	orr.w	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800259a:	7ffb      	ldrb	r3, [r7, #31]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3724      	adds	r7, #36	@ 0x24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd90      	pop	{r4, r7, pc}
 80025a4:	20000000 	.word	0x20000000
 80025a8:	053e2d63 	.word	0x053e2d63
 80025ac:	50040000 	.word	0x50040000
 80025b0:	50040100 	.word	0x50040100
 80025b4:	50040200 	.word	0x50040200
 80025b8:	50040300 	.word	0x50040300
 80025bc:	fff0c007 	.word	0xfff0c007

080025c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025cc:	4853      	ldr	r0, [pc, #332]	@ (800271c <HAL_ADC_Start_DMA+0x15c>)
 80025ce:	f7ff fde9 	bl	80021a4 <LL_ADC_GetMultimode>
 80025d2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fe7a 	bl	80022d2 <LL_ADC_REG_IsConversionOngoing>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f040 8093 	bne.w	800270c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_Start_DMA+0x34>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e08e      	b.n	8002712 <HAL_ADC_Start_DMA+0x152>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a47      	ldr	r2, [pc, #284]	@ (8002720 <HAL_ADC_Start_DMA+0x160>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d008      	beq.n	8002618 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b05      	cmp	r3, #5
 8002610:	d002      	beq.n	8002618 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b09      	cmp	r3, #9
 8002616:	d172      	bne.n	80026fe <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fc93 	bl	8002f44 <ADC_Enable>
 800261e:	4603      	mov	r3, r0
 8002620:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002622:	7dfb      	ldrb	r3, [r7, #23]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d165      	bne.n	80026f4 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a38      	ldr	r2, [pc, #224]	@ (8002724 <HAL_ADC_Start_DMA+0x164>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d002      	beq.n	800264c <HAL_ADC_Start_DMA+0x8c>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	e000      	b.n	800264e <HAL_ADC_Start_DMA+0x8e>
 800264c:	4b36      	ldr	r3, [pc, #216]	@ (8002728 <HAL_ADC_Start_DMA+0x168>)
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	4293      	cmp	r3, r2
 8002654:	d002      	beq.n	800265c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d105      	bne.n	8002668 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002660:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d006      	beq.n	8002682 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002678:	f023 0206 	bic.w	r2, r3, #6
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002680:	e002      	b.n	8002688 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268c:	4a27      	ldr	r2, [pc, #156]	@ (800272c <HAL_ADC_Start_DMA+0x16c>)
 800268e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002694:	4a26      	ldr	r2, [pc, #152]	@ (8002730 <HAL_ADC_Start_DMA+0x170>)
 8002696:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269c:	4a25      	ldr	r2, [pc, #148]	@ (8002734 <HAL_ADC_Start_DMA+0x174>)
 800269e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	221c      	movs	r2, #28
 80026a6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0210 	orr.w	r2, r2, #16
 80026be:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3340      	adds	r3, #64	@ 0x40
 80026da:	4619      	mov	r1, r3
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f000 ffea 	bl	80036b8 <HAL_DMA_Start_IT>
 80026e4:	4603      	mov	r3, r0
 80026e6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fddc 	bl	80022aa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80026f2:	e00d      	b.n	8002710 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80026fc:	e008      	b.n	8002710 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800270a:	e001      	b.n	8002710 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800270c:	2302      	movs	r3, #2
 800270e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002710:	7dfb      	ldrb	r3, [r7, #23]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	50040300 	.word	0x50040300
 8002720:	50040200 	.word	0x50040200
 8002724:	50040100 	.word	0x50040100
 8002728:	50040000 	.word	0x50040000
 800272c:	08003051 	.word	0x08003051
 8002730:	08003129 	.word	0x08003129
 8002734:	08003145 	.word	0x08003145

08002738 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b0b6      	sub	sp, #216	@ 0xd8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x22>
 800277e:	2302      	movs	r3, #2
 8002780:	e3c9      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x7b6>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fd9f 	bl	80022d2 <LL_ADC_REG_IsConversionOngoing>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	f040 83aa 	bne.w	8002ef0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d824      	bhi.n	80027f6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	3b02      	subs	r3, #2
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d81b      	bhi.n	80027ee <HAL_ADC_ConfigChannel+0x8e>
 80027b6:	a201      	add	r2, pc, #4	@ (adr r2, 80027bc <HAL_ADC_ConfigChannel+0x5c>)
 80027b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027bc:	080027cd 	.word	0x080027cd
 80027c0:	080027d5 	.word	0x080027d5
 80027c4:	080027dd 	.word	0x080027dd
 80027c8:	080027e5 	.word	0x080027e5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80027cc:	230c      	movs	r3, #12
 80027ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027d2:	e010      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80027d4:	2312      	movs	r3, #18
 80027d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027da:	e00c      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80027dc:	2318      	movs	r3, #24
 80027de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027e2:	e008      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80027e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027ec:	e003      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80027ee:	2306      	movs	r3, #6
 80027f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027f4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002804:	f7ff fc52 	bl	80020ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fd60 	bl	80022d2 <LL_ADC_REG_IsConversionOngoing>
 8002812:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fd6c 	bl	80022f8 <LL_ADC_INJ_IsConversionOngoing>
 8002820:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002828:	2b00      	cmp	r3, #0
 800282a:	f040 81a4 	bne.w	8002b76 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800282e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 819f 	bne.w	8002b76 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6819      	ldr	r1, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	461a      	mov	r2, r3
 8002846:	f7ff fc5d 	bl	8002104 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	08db      	lsrs	r3, r3, #3
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b04      	cmp	r3, #4
 800286a:	d00a      	beq.n	8002882 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6919      	ldr	r1, [r3, #16]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800287c:	f7ff fbae 	bl	8001fdc <LL_ADC_SetOffset>
 8002880:	e179      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2100      	movs	r1, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fbcb 	bl	8002024 <LL_ADC_GetOffsetChannel>
 800288e:	4603      	mov	r3, r0
 8002890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x14e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fbc0 	bl	8002024 <LL_ADC_GetOffsetChannel>
 80028a4:	4603      	mov	r3, r0
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	f003 021f 	and.w	r2, r3, #31
 80028ac:	e01e      	b.n	80028ec <HAL_ADC_ConfigChannel+0x18c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fbb5 	bl	8002024 <LL_ADC_GetOffsetChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80028dc:	2320      	movs	r3, #32
 80028de:	e004      	b.n	80028ea <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80028e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028e4:	fab3 f383 	clz	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x1a4>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	0e9b      	lsrs	r3, r3, #26
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	e018      	b.n	8002936 <HAL_ADC_ConfigChannel+0x1d6>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002918:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800291c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002920:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002928:	2320      	movs	r3, #32
 800292a:	e004      	b.n	8002936 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800292c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002936:	429a      	cmp	r2, r3
 8002938:	d106      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fb84 	bl	8002050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2101      	movs	r1, #1
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fb68 	bl	8002024 <LL_ADC_GetOffsetChannel>
 8002954:	4603      	mov	r3, r0
 8002956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10a      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x214>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2101      	movs	r1, #1
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fb5d 	bl	8002024 <LL_ADC_GetOffsetChannel>
 800296a:	4603      	mov	r3, r0
 800296c:	0e9b      	lsrs	r3, r3, #26
 800296e:	f003 021f 	and.w	r2, r3, #31
 8002972:	e01e      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x252>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fb52 	bl	8002024 <LL_ADC_GetOffsetChannel>
 8002980:	4603      	mov	r3, r0
 8002982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002992:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002996:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800299a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80029a2:	2320      	movs	r3, #32
 80029a4:	e004      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80029a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029aa:	fab3 f383 	clz	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d105      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x26a>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	0e9b      	lsrs	r3, r3, #26
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	e018      	b.n	80029fc <HAL_ADC_ConfigChannel+0x29c>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80029de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80029e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80029ee:	2320      	movs	r3, #32
 80029f0:	e004      	b.n	80029fc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80029f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d106      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2200      	movs	r2, #0
 8002a06:	2101      	movs	r1, #1
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fb21 	bl	8002050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2102      	movs	r1, #2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fb05 	bl	8002024 <LL_ADC_GetOffsetChannel>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x2da>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2102      	movs	r1, #2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fafa 	bl	8002024 <LL_ADC_GetOffsetChannel>
 8002a30:	4603      	mov	r3, r0
 8002a32:	0e9b      	lsrs	r3, r3, #26
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	e01e      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x318>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2102      	movs	r1, #2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff faef 	bl	8002024 <LL_ADC_GetOffsetChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002a68:	2320      	movs	r3, #32
 8002a6a:	e004      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d105      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x330>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	e014      	b.n	8002aba <HAL_ADC_ConfigChannel+0x35a>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002a9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002aa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002aa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002aac:	2320      	movs	r3, #32
 8002aae:	e004      	b.n	8002aba <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002ab0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ab4:	fab3 f383 	clz	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d106      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2102      	movs	r1, #2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fac2 	bl	8002050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2103      	movs	r1, #3
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff faa6 	bl	8002024 <LL_ADC_GetOffsetChannel>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x398>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2103      	movs	r1, #3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fa9b 	bl	8002024 <LL_ADC_GetOffsetChannel>
 8002aee:	4603      	mov	r3, r0
 8002af0:	0e9b      	lsrs	r3, r3, #26
 8002af2:	f003 021f 	and.w	r2, r3, #31
 8002af6:	e017      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x3c8>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2103      	movs	r1, #3
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fa90 	bl	8002024 <LL_ADC_GetOffsetChannel>
 8002b04:	4603      	mov	r3, r0
 8002b06:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002b10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b12:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002b14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	e003      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002b1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x3e0>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0e9b      	lsrs	r3, r3, #26
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	e011      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x404>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002b4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b50:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002b52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b58:	2320      	movs	r3, #32
 8002b5a:	e003      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d106      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2103      	movs	r1, #3
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fa6d 	bl	8002050 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fb82 	bl	8002284 <LL_ADC_IsEnabled>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f040 8140 	bne.w	8002e08 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6819      	ldr	r1, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	461a      	mov	r2, r3
 8002b96:	f7ff fae1 	bl	800215c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	4a8f      	ldr	r2, [pc, #572]	@ (8002ddc <HAL_ADC_ConfigChannel+0x67c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	f040 8131 	bne.w	8002e08 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10b      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x46e>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	0e9b      	lsrs	r3, r3, #26
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	2b09      	cmp	r3, #9
 8002bc4:	bf94      	ite	ls
 8002bc6:	2301      	movls	r3, #1
 8002bc8:	2300      	movhi	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	e019      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x4a2>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bde:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002be0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002be6:	2320      	movs	r3, #32
 8002be8:	e003      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	2b09      	cmp	r3, #9
 8002bfa:	bf94      	ite	ls
 8002bfc:	2301      	movls	r3, #1
 8002bfe:	2300      	movhi	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d079      	beq.n	8002cfa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d107      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x4c2>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	0e9b      	lsrs	r3, r3, #26
 8002c18:	3301      	adds	r3, #1
 8002c1a:	069b      	lsls	r3, r3, #26
 8002c1c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c20:	e015      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x4ee>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c32:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002c34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002c3a:	2320      	movs	r3, #32
 8002c3c:	e003      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	069b      	lsls	r3, r3, #26
 8002c4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x50e>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	0e9b      	lsrs	r3, r3, #26
 8002c60:	3301      	adds	r3, #1
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	2101      	movs	r1, #1
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	e017      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x53e>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c7e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c86:	2320      	movs	r3, #32
 8002c88:	e003      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c8c:	fab3 f383 	clz	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	3301      	adds	r3, #1
 8002c94:	f003 031f 	and.w	r3, r3, #31
 8002c98:	2101      	movs	r1, #1
 8002c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9e:	ea42 0103 	orr.w	r1, r2, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10a      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x564>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	0e9b      	lsrs	r3, r3, #26
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f003 021f 	and.w	r2, r3, #31
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	051b      	lsls	r3, r3, #20
 8002cc2:	e018      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x596>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002cdc:	2320      	movs	r3, #32
 8002cde:	e003      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f003 021f 	and.w	r2, r3, #31
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	e081      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d107      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x5b6>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	0e9b      	lsrs	r3, r3, #26
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	069b      	lsls	r3, r3, #26
 8002d10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d14:	e015      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x5e2>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002d2e:	2320      	movs	r3, #32
 8002d30:	e003      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	069b      	lsls	r3, r3, #26
 8002d3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x602>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	0e9b      	lsrs	r3, r3, #26
 8002d54:	3301      	adds	r3, #1
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	e017      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x632>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	61bb      	str	r3, [r7, #24]
  return result;
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002d7a:	2320      	movs	r3, #32
 8002d7c:	e003      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	ea42 0103 	orr.w	r1, r2, r3
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10d      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x65e>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	0e9b      	lsrs	r3, r3, #26
 8002da8:	3301      	adds	r3, #1
 8002daa:	f003 021f 	and.w	r2, r3, #31
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	3b1e      	subs	r3, #30
 8002db6:	051b      	lsls	r3, r3, #20
 8002db8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002dbc:	e01e      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x69c>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	60fb      	str	r3, [r7, #12]
  return result;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d104      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002dd6:	2320      	movs	r3, #32
 8002dd8:	e006      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x688>
 8002dda:	bf00      	nop
 8002ddc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f003 021f 	and.w	r2, r3, #31
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	3b1e      	subs	r3, #30
 8002df6:	051b      	lsls	r3, r3, #20
 8002df8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dfc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e02:	4619      	mov	r1, r3
 8002e04:	f7ff f97e 	bl	8002104 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b44      	ldr	r3, [pc, #272]	@ (8002f20 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d07a      	beq.n	8002f0a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e14:	4843      	ldr	r0, [pc, #268]	@ (8002f24 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e16:	f7ff f8d3 	bl	8001fc0 <LL_ADC_GetCommonPathInternalCh>
 8002e1a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a41      	ldr	r2, [pc, #260]	@ (8002f28 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d12c      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d126      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a3c      	ldr	r2, [pc, #240]	@ (8002f2c <HAL_ADC_ConfigChannel+0x7cc>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d004      	beq.n	8002e48 <HAL_ADC_ConfigChannel+0x6e8>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a3b      	ldr	r2, [pc, #236]	@ (8002f30 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d15d      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e50:	4619      	mov	r1, r3
 8002e52:	4834      	ldr	r0, [pc, #208]	@ (8002f24 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e54:	f7ff f8a1 	bl	8001f9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e58:	4b36      	ldr	r3, [pc, #216]	@ (8002f34 <HAL_ADC_ConfigChannel+0x7d4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	4a36      	ldr	r2, [pc, #216]	@ (8002f38 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	099b      	lsrs	r3, r3, #6
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e72:	e002      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f9      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e80:	e040      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2d      	ldr	r2, [pc, #180]	@ (8002f3c <HAL_ADC_ConfigChannel+0x7dc>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d118      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d112      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <HAL_ADC_ConfigChannel+0x7cc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d004      	beq.n	8002eac <HAL_ADC_ConfigChannel+0x74c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a22      	ldr	r2, [pc, #136]	@ (8002f30 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d12d      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002eb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	481b      	ldr	r0, [pc, #108]	@ (8002f24 <HAL_ADC_ConfigChannel+0x7c4>)
 8002eb8:	f7ff f86f 	bl	8001f9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ebc:	e024      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8002f40 <HAL_ADC_ConfigChannel+0x7e0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d120      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ec8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ecc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d11a      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a14      	ldr	r2, [pc, #80]	@ (8002f2c <HAL_ADC_ConfigChannel+0x7cc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d115      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ede:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ee2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	480e      	ldr	r0, [pc, #56]	@ (8002f24 <HAL_ADC_ConfigChannel+0x7c4>)
 8002eea:	f7ff f856 	bl	8001f9a <LL_ADC_SetCommonPathInternalCh>
 8002eee:	e00c      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef4:	f043 0220 	orr.w	r2, r3, #32
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002f02:	e002      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f04:	bf00      	nop
 8002f06:	e000      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f12:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	37d8      	adds	r7, #216	@ 0xd8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	80080000 	.word	0x80080000
 8002f24:	50040300 	.word	0x50040300
 8002f28:	c7520000 	.word	0xc7520000
 8002f2c:	50040000 	.word	0x50040000
 8002f30:	50040200 	.word	0x50040200
 8002f34:	20000000 	.word	0x20000000
 8002f38:	053e2d63 	.word	0x053e2d63
 8002f3c:	cb840000 	.word	0xcb840000
 8002f40:	80000001 	.word	0x80000001

08002f44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff f995 	bl	8002284 <LL_ADC_IsEnabled>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d169      	bne.n	8003034 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	4b36      	ldr	r3, [pc, #216]	@ (8003040 <ADC_Enable+0xfc>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00d      	beq.n	8002f8a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f72:	f043 0210 	orr.w	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7e:	f043 0201 	orr.w	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e055      	b.n	8003036 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff f964 	bl	800225c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f94:	482b      	ldr	r0, [pc, #172]	@ (8003044 <ADC_Enable+0x100>)
 8002f96:	f7ff f813 	bl	8001fc0 <LL_ADC_GetCommonPathInternalCh>
 8002f9a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d013      	beq.n	8002fcc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fa4:	4b28      	ldr	r3, [pc, #160]	@ (8003048 <ADC_Enable+0x104>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	099b      	lsrs	r3, r3, #6
 8002faa:	4a28      	ldr	r2, [pc, #160]	@ (800304c <ADC_Enable+0x108>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fbe:	e002      	b.n	8002fc6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f9      	bne.n	8002fc0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fcc:	f7fe ffa2 	bl	8001f14 <HAL_GetTick>
 8002fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fd2:	e028      	b.n	8003026 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff f953 	bl	8002284 <LL_ADC_IsEnabled>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d104      	bne.n	8002fee <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff f937 	bl	800225c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fee:	f7fe ff91 	bl	8001f14 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d914      	bls.n	8003026 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b01      	cmp	r3, #1
 8003008:	d00d      	beq.n	8003026 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300e:	f043 0210 	orr.w	r2, r3, #16
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301a:	f043 0201 	orr.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e007      	b.n	8003036 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	d1cf      	bne.n	8002fd4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	8000003f 	.word	0x8000003f
 8003044:	50040300 	.word	0x50040300
 8003048:	20000000 	.word	0x20000000
 800304c:	053e2d63 	.word	0x053e2d63

08003050 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003062:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003066:	2b00      	cmp	r3, #0
 8003068:	d14b      	bne.n	8003102 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	d021      	beq.n	80030c8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fe fffc 	bl	8002086 <LL_ADC_REG_IsTriggerSourceSWStart>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d032      	beq.n	80030fa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d12b      	bne.n	80030fa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d11f      	bne.n	80030fa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030be:	f043 0201 	orr.w	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	655a      	str	r2, [r3, #84]	@ 0x54
 80030c6:	e018      	b.n	80030fa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d111      	bne.n	80030fa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d105      	bne.n	80030fa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f2:	f043 0201 	orr.w	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f7fe f894 	bl	8001228 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003100:	e00e      	b.n	8003120 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f7ff fb1c 	bl	800274c <HAL_ADC_ErrorCallback>
}
 8003114:	e004      	b.n	8003120 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800311a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003134:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f7ff fafe 	bl	8002738 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800313c:	bf00      	nop
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003150:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003156:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003162:	f043 0204 	orr.w	r2, r3, #4
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f7ff faee 	bl	800274c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003170:	bf00      	nop
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <LL_ADC_IsEnabled>:
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <LL_ADC_IsEnabled+0x18>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <LL_ADC_IsEnabled+0x1a>
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <LL_ADC_REG_IsConversionOngoing>:
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d101      	bne.n	80031b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80031c4:	b590      	push	{r4, r7, lr}
 80031c6:	b09f      	sub	sp, #124	@ 0x7c
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031de:	2302      	movs	r3, #2
 80031e0:	e093      	b.n	800330a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80031ea:	2300      	movs	r3, #0
 80031ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80031ee:	2300      	movs	r3, #0
 80031f0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a47      	ldr	r2, [pc, #284]	@ (8003314 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d102      	bne.n	8003202 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031fc:	4b46      	ldr	r3, [pc, #280]	@ (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	e001      	b.n	8003206 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10b      	bne.n	8003224 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e072      	b.n	800330a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff ffb9 	bl	800319e <LL_ADC_REG_IsConversionOngoing>
 800322c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff ffb3 	bl	800319e <LL_ADC_REG_IsConversionOngoing>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d154      	bne.n	80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800323e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003240:	2b00      	cmp	r3, #0
 8003242:	d151      	bne.n	80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003244:	4b35      	ldr	r3, [pc, #212]	@ (800331c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003246:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d02c      	beq.n	80032aa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003250:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003262:	035b      	lsls	r3, r3, #13
 8003264:	430b      	orrs	r3, r1
 8003266:	431a      	orrs	r2, r3
 8003268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800326a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800326c:	4829      	ldr	r0, [pc, #164]	@ (8003314 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800326e:	f7ff ff83 	bl	8003178 <LL_ADC_IsEnabled>
 8003272:	4604      	mov	r4, r0
 8003274:	4828      	ldr	r0, [pc, #160]	@ (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003276:	f7ff ff7f 	bl	8003178 <LL_ADC_IsEnabled>
 800327a:	4603      	mov	r3, r0
 800327c:	431c      	orrs	r4, r3
 800327e:	4828      	ldr	r0, [pc, #160]	@ (8003320 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003280:	f7ff ff7a 	bl	8003178 <LL_ADC_IsEnabled>
 8003284:	4603      	mov	r3, r0
 8003286:	4323      	orrs	r3, r4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d137      	bne.n	80032fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800328c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003294:	f023 030f 	bic.w	r3, r3, #15
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	6811      	ldr	r1, [r2, #0]
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	6892      	ldr	r2, [r2, #8]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	431a      	orrs	r2, r3
 80032a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032a6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032a8:	e028      	b.n	80032fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032b4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032b6:	4817      	ldr	r0, [pc, #92]	@ (8003314 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032b8:	f7ff ff5e 	bl	8003178 <LL_ADC_IsEnabled>
 80032bc:	4604      	mov	r4, r0
 80032be:	4816      	ldr	r0, [pc, #88]	@ (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032c0:	f7ff ff5a 	bl	8003178 <LL_ADC_IsEnabled>
 80032c4:	4603      	mov	r3, r0
 80032c6:	431c      	orrs	r4, r3
 80032c8:	4815      	ldr	r0, [pc, #84]	@ (8003320 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80032ca:	f7ff ff55 	bl	8003178 <LL_ADC_IsEnabled>
 80032ce:	4603      	mov	r3, r0
 80032d0:	4323      	orrs	r3, r4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d112      	bne.n	80032fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80032de:	f023 030f 	bic.w	r3, r3, #15
 80032e2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032e4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032e6:	e009      	b.n	80032fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ec:	f043 0220 	orr.w	r2, r3, #32
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80032fa:	e000      	b.n	80032fe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003306:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800330a:	4618      	mov	r0, r3
 800330c:	377c      	adds	r7, #124	@ 0x7c
 800330e:	46bd      	mov	sp, r7
 8003310:	bd90      	pop	{r4, r7, pc}
 8003312:	bf00      	nop
 8003314:	50040000 	.word	0x50040000
 8003318:	50040100 	.word	0x50040100
 800331c:	50040300 	.word	0x50040300
 8003320:	50040200 	.word	0x50040200

08003324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003334:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003340:	4013      	ands	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800334c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003356:	4a04      	ldr	r2, [pc, #16]	@ (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	60d3      	str	r3, [r2, #12]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003370:	4b04      	ldr	r3, [pc, #16]	@ (8003384 <__NVIC_GetPriorityGrouping+0x18>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 0307 	and.w	r3, r3, #7
}
 800337a:	4618      	mov	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	2b00      	cmp	r3, #0
 8003398:	db0b      	blt.n	80033b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	4907      	ldr	r1, [pc, #28]	@ (80033c0 <__NVIC_EnableIRQ+0x38>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	2001      	movs	r0, #1
 80033aa:	fa00 f202 	lsl.w	r2, r0, r2
 80033ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000e100 	.word	0xe000e100

080033c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	db0a      	blt.n	80033ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	490c      	ldr	r1, [pc, #48]	@ (8003410 <__NVIC_SetPriority+0x4c>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	440b      	add	r3, r1
 80033e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033ec:	e00a      	b.n	8003404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4908      	ldr	r1, [pc, #32]	@ (8003414 <__NVIC_SetPriority+0x50>)
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	3b04      	subs	r3, #4
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	440b      	add	r3, r1
 8003402:	761a      	strb	r2, [r3, #24]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000e100 	.word	0xe000e100
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	@ 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f1c3 0307 	rsb	r3, r3, #7
 8003432:	2b04      	cmp	r3, #4
 8003434:	bf28      	it	cs
 8003436:	2304      	movcs	r3, #4
 8003438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3304      	adds	r3, #4
 800343e:	2b06      	cmp	r3, #6
 8003440:	d902      	bls.n	8003448 <NVIC_EncodePriority+0x30>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3b03      	subs	r3, #3
 8003446:	e000      	b.n	800344a <NVIC_EncodePriority+0x32>
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	f04f 32ff 	mov.w	r2, #4294967295
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43da      	mvns	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	401a      	ands	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003460:	f04f 31ff 	mov.w	r1, #4294967295
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43d9      	mvns	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	4313      	orrs	r3, r2
         );
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	@ 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003490:	d301      	bcc.n	8003496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003492:	2301      	movs	r3, #1
 8003494:	e00f      	b.n	80034b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003496:	4a0a      	ldr	r2, [pc, #40]	@ (80034c0 <SysTick_Config+0x40>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349e:	210f      	movs	r1, #15
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	f7ff ff8e 	bl	80033c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a8:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <SysTick_Config+0x40>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ae:	4b04      	ldr	r3, [pc, #16]	@ (80034c0 <SysTick_Config+0x40>)
 80034b0:	2207      	movs	r2, #7
 80034b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	e000e010 	.word	0xe000e010

080034c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff29 	bl	8003324 <__NVIC_SetPriorityGrouping>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034ec:	f7ff ff3e 	bl	800336c <__NVIC_GetPriorityGrouping>
 80034f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	6978      	ldr	r0, [r7, #20]
 80034f8:	f7ff ff8e 	bl	8003418 <NVIC_EncodePriority>
 80034fc:	4602      	mov	r2, r0
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff5d 	bl	80033c4 <__NVIC_SetPriority>
}
 800350a:	bf00      	nop
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	4603      	mov	r3, r0
 800351a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800351c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff31 	bl	8003388 <__NVIC_EnableIRQ>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ffa2 	bl	8003480 <SysTick_Config>
 800353c:	4603      	mov	r3, r0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e098      	b.n	800368c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	4b4d      	ldr	r3, [pc, #308]	@ (8003698 <HAL_DMA_Init+0x150>)
 8003562:	429a      	cmp	r2, r3
 8003564:	d80f      	bhi.n	8003586 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	4b4b      	ldr	r3, [pc, #300]	@ (800369c <HAL_DMA_Init+0x154>)
 800356e:	4413      	add	r3, r2
 8003570:	4a4b      	ldr	r2, [pc, #300]	@ (80036a0 <HAL_DMA_Init+0x158>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	009a      	lsls	r2, r3, #2
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a48      	ldr	r2, [pc, #288]	@ (80036a4 <HAL_DMA_Init+0x15c>)
 8003582:	641a      	str	r2, [r3, #64]	@ 0x40
 8003584:	e00e      	b.n	80035a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	4b46      	ldr	r3, [pc, #280]	@ (80036a8 <HAL_DMA_Init+0x160>)
 800358e:	4413      	add	r3, r2
 8003590:	4a43      	ldr	r2, [pc, #268]	@ (80036a0 <HAL_DMA_Init+0x158>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	009a      	lsls	r2, r3, #2
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a42      	ldr	r2, [pc, #264]	@ (80036ac <HAL_DMA_Init+0x164>)
 80035a2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80035ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035fe:	d039      	beq.n	8003674 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003604:	4a27      	ldr	r2, [pc, #156]	@ (80036a4 <HAL_DMA_Init+0x15c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d11a      	bne.n	8003640 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800360a:	4b29      	ldr	r3, [pc, #164]	@ (80036b0 <HAL_DMA_Init+0x168>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003612:	f003 031c 	and.w	r3, r3, #28
 8003616:	210f      	movs	r1, #15
 8003618:	fa01 f303 	lsl.w	r3, r1, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	4924      	ldr	r1, [pc, #144]	@ (80036b0 <HAL_DMA_Init+0x168>)
 8003620:	4013      	ands	r3, r2
 8003622:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003624:	4b22      	ldr	r3, [pc, #136]	@ (80036b0 <HAL_DMA_Init+0x168>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003630:	f003 031c 	and.w	r3, r3, #28
 8003634:	fa01 f303 	lsl.w	r3, r1, r3
 8003638:	491d      	ldr	r1, [pc, #116]	@ (80036b0 <HAL_DMA_Init+0x168>)
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]
 800363e:	e019      	b.n	8003674 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003640:	4b1c      	ldr	r3, [pc, #112]	@ (80036b4 <HAL_DMA_Init+0x16c>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003648:	f003 031c 	and.w	r3, r3, #28
 800364c:	210f      	movs	r1, #15
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	4917      	ldr	r1, [pc, #92]	@ (80036b4 <HAL_DMA_Init+0x16c>)
 8003656:	4013      	ands	r3, r2
 8003658:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800365a:	4b16      	ldr	r3, [pc, #88]	@ (80036b4 <HAL_DMA_Init+0x16c>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6859      	ldr	r1, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	f003 031c 	and.w	r3, r3, #28
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	4911      	ldr	r1, [pc, #68]	@ (80036b4 <HAL_DMA_Init+0x16c>)
 8003670:	4313      	orrs	r3, r2
 8003672:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	40020407 	.word	0x40020407
 800369c:	bffdfff8 	.word	0xbffdfff8
 80036a0:	cccccccd 	.word	0xcccccccd
 80036a4:	40020000 	.word	0x40020000
 80036a8:	bffdfbf8 	.word	0xbffdfbf8
 80036ac:	40020400 	.word	0x40020400
 80036b0:	400200a8 	.word	0x400200a8
 80036b4:	400204a8 	.word	0x400204a8

080036b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_DMA_Start_IT+0x20>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e04b      	b.n	8003770 <HAL_DMA_Start_IT+0xb8>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d13a      	bne.n	8003762 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0201 	bic.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f92a 	bl	800396a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	2b00      	cmp	r3, #0
 800371c:	d008      	beq.n	8003730 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 020e 	orr.w	r2, r2, #14
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e00f      	b.n	8003750 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0204 	bic.w	r2, r2, #4
 800373e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 020a 	orr.w	r2, r2, #10
 800374e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	e005      	b.n	800376e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800376a:	2302      	movs	r3, #2
 800376c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800376e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d008      	beq.n	80037a2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2204      	movs	r2, #4
 8003794:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e022      	b.n	80037e8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 020e 	bic.w	r2, r2, #14
 80037b0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0201 	bic.w	r2, r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	f003 021c 	and.w	r2, r3, #28
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ce:	2101      	movs	r1, #1
 80037d0:	fa01 f202 	lsl.w	r2, r1, r2
 80037d4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003810:	f003 031c 	and.w	r3, r3, #28
 8003814:	2204      	movs	r2, #4
 8003816:	409a      	lsls	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d026      	beq.n	800386e <HAL_DMA_IRQHandler+0x7a>
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d021      	beq.n	800386e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b00      	cmp	r3, #0
 8003836:	d107      	bne.n	8003848 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0204 	bic.w	r2, r2, #4
 8003846:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384c:	f003 021c 	and.w	r2, r3, #28
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	2104      	movs	r1, #4
 8003856:	fa01 f202 	lsl.w	r2, r1, r2
 800385a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003860:	2b00      	cmp	r3, #0
 8003862:	d071      	beq.n	8003948 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800386c:	e06c      	b.n	8003948 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003872:	f003 031c 	and.w	r3, r3, #28
 8003876:	2202      	movs	r2, #2
 8003878:	409a      	lsls	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4013      	ands	r3, r2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d02e      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xec>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d029      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10b      	bne.n	80038b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 020a 	bic.w	r2, r2, #10
 80038a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b6:	f003 021c 	and.w	r2, r3, #28
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	2102      	movs	r1, #2
 80038c0:	fa01 f202 	lsl.w	r2, r1, r2
 80038c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d038      	beq.n	8003948 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038de:	e033      	b.n	8003948 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e4:	f003 031c 	and.w	r3, r3, #28
 80038e8:	2208      	movs	r2, #8
 80038ea:	409a      	lsls	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4013      	ands	r3, r2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d02a      	beq.n	800394a <HAL_DMA_IRQHandler+0x156>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d025      	beq.n	800394a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 020e 	bic.w	r2, r2, #14
 800390c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003912:	f003 021c 	and.w	r2, r3, #28
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	2101      	movs	r1, #1
 800391c:	fa01 f202 	lsl.w	r2, r1, r2
 8003920:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800393c:	2b00      	cmp	r3, #0
 800393e:	d004      	beq.n	800394a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003948:	bf00      	nop
 800394a:	bf00      	nop
}
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800396a:	b480      	push	{r7}
 800396c:	b085      	sub	sp, #20
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397c:	f003 021c 	and.w	r2, r3, #28
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	2101      	movs	r1, #1
 8003986:	fa01 f202 	lsl.w	r2, r1, r2
 800398a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b10      	cmp	r3, #16
 800399a:	d108      	bne.n	80039ae <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039ac:	e007      	b.n	80039be <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	60da      	str	r2, [r3, #12]
}
 80039be:	bf00      	nop
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039da:	e17f      	b.n	8003cdc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	2101      	movs	r1, #1
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	fa01 f303 	lsl.w	r3, r1, r3
 80039e8:	4013      	ands	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8171 	beq.w	8003cd6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d005      	beq.n	8003a0c <HAL_GPIO_Init+0x40>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d130      	bne.n	8003a6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	2203      	movs	r2, #3
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4013      	ands	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a42:	2201      	movs	r2, #1
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	091b      	lsrs	r3, r3, #4
 8003a58:	f003 0201 	and.w	r2, r3, #1
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d118      	bne.n	8003aac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a80:	2201      	movs	r2, #1
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	08db      	lsrs	r3, r3, #3
 8003a96:	f003 0201 	and.w	r2, r3, #1
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d017      	beq.n	8003ae8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4013      	ands	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d123      	bne.n	8003b3c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	08da      	lsrs	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3208      	adds	r2, #8
 8003afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	220f      	movs	r2, #15
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4013      	ands	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	08da      	lsrs	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3208      	adds	r2, #8
 8003b36:	6939      	ldr	r1, [r7, #16]
 8003b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	2203      	movs	r2, #3
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4013      	ands	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 0203 	and.w	r2, r3, #3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 80ac 	beq.w	8003cd6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b7e:	4b5f      	ldr	r3, [pc, #380]	@ (8003cfc <HAL_GPIO_Init+0x330>)
 8003b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b82:	4a5e      	ldr	r2, [pc, #376]	@ (8003cfc <HAL_GPIO_Init+0x330>)
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b8a:	4b5c      	ldr	r3, [pc, #368]	@ (8003cfc <HAL_GPIO_Init+0x330>)
 8003b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	60bb      	str	r3, [r7, #8]
 8003b94:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b96:	4a5a      	ldr	r2, [pc, #360]	@ (8003d00 <HAL_GPIO_Init+0x334>)
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	089b      	lsrs	r3, r3, #2
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	220f      	movs	r2, #15
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003bc0:	d025      	beq.n	8003c0e <HAL_GPIO_Init+0x242>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a4f      	ldr	r2, [pc, #316]	@ (8003d04 <HAL_GPIO_Init+0x338>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01f      	beq.n	8003c0a <HAL_GPIO_Init+0x23e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a4e      	ldr	r2, [pc, #312]	@ (8003d08 <HAL_GPIO_Init+0x33c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d019      	beq.n	8003c06 <HAL_GPIO_Init+0x23a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a4d      	ldr	r2, [pc, #308]	@ (8003d0c <HAL_GPIO_Init+0x340>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d013      	beq.n	8003c02 <HAL_GPIO_Init+0x236>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a4c      	ldr	r2, [pc, #304]	@ (8003d10 <HAL_GPIO_Init+0x344>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00d      	beq.n	8003bfe <HAL_GPIO_Init+0x232>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a4b      	ldr	r2, [pc, #300]	@ (8003d14 <HAL_GPIO_Init+0x348>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d007      	beq.n	8003bfa <HAL_GPIO_Init+0x22e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a4a      	ldr	r2, [pc, #296]	@ (8003d18 <HAL_GPIO_Init+0x34c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d101      	bne.n	8003bf6 <HAL_GPIO_Init+0x22a>
 8003bf2:	2306      	movs	r3, #6
 8003bf4:	e00c      	b.n	8003c10 <HAL_GPIO_Init+0x244>
 8003bf6:	2307      	movs	r3, #7
 8003bf8:	e00a      	b.n	8003c10 <HAL_GPIO_Init+0x244>
 8003bfa:	2305      	movs	r3, #5
 8003bfc:	e008      	b.n	8003c10 <HAL_GPIO_Init+0x244>
 8003bfe:	2304      	movs	r3, #4
 8003c00:	e006      	b.n	8003c10 <HAL_GPIO_Init+0x244>
 8003c02:	2303      	movs	r3, #3
 8003c04:	e004      	b.n	8003c10 <HAL_GPIO_Init+0x244>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e002      	b.n	8003c10 <HAL_GPIO_Init+0x244>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <HAL_GPIO_Init+0x244>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	f002 0203 	and.w	r2, r2, #3
 8003c16:	0092      	lsls	r2, r2, #2
 8003c18:	4093      	lsls	r3, r2
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c20:	4937      	ldr	r1, [pc, #220]	@ (8003d00 <HAL_GPIO_Init+0x334>)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	089b      	lsrs	r3, r3, #2
 8003c26:	3302      	adds	r3, #2
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d1c <HAL_GPIO_Init+0x350>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c52:	4a32      	ldr	r2, [pc, #200]	@ (8003d1c <HAL_GPIO_Init+0x350>)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c58:	4b30      	ldr	r3, [pc, #192]	@ (8003d1c <HAL_GPIO_Init+0x350>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4013      	ands	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c7c:	4a27      	ldr	r2, [pc, #156]	@ (8003d1c <HAL_GPIO_Init+0x350>)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c82:	4b26      	ldr	r3, [pc, #152]	@ (8003d1c <HAL_GPIO_Init+0x350>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d1c <HAL_GPIO_Init+0x350>)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003cac:	4b1b      	ldr	r3, [pc, #108]	@ (8003d1c <HAL_GPIO_Init+0x350>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cd0:	4a12      	ldr	r2, [pc, #72]	@ (8003d1c <HAL_GPIO_Init+0x350>)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f47f ae78 	bne.w	80039dc <HAL_GPIO_Init+0x10>
  }
}
 8003cec:	bf00      	nop
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40010000 	.word	0x40010000
 8003d04:	48000400 	.word	0x48000400
 8003d08:	48000800 	.word	0x48000800
 8003d0c:	48000c00 	.word	0x48000c00
 8003d10:	48001000 	.word	0x48001000
 8003d14:	48001400 	.word	0x48001400
 8003d18:	48001800 	.word	0x48001800
 8003d1c:	40010400 	.word	0x40010400

08003d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	807b      	strh	r3, [r7, #2]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d30:	787b      	ldrb	r3, [r7, #1]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d36:	887a      	ldrh	r2, [r7, #2]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d3c:	e002      	b.n	8003d44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d3e:	887a      	ldrh	r2, [r7, #2]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d54:	4b04      	ldr	r3, [pc, #16]	@ (8003d68 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40007000 	.word	0x40007000

08003d6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d7a:	d130      	bne.n	8003dde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d7c:	4b23      	ldr	r3, [pc, #140]	@ (8003e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d88:	d038      	beq.n	8003dfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d8a:	4b20      	ldr	r3, [pc, #128]	@ (8003e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d92:	4a1e      	ldr	r2, [pc, #120]	@ (8003e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003e10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2232      	movs	r2, #50	@ 0x32
 8003da0:	fb02 f303 	mul.w	r3, r2, r3
 8003da4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	0c9b      	lsrs	r3, r3, #18
 8003dac:	3301      	adds	r3, #1
 8003dae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003db0:	e002      	b.n	8003db8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003db8:	4b14      	ldr	r3, [pc, #80]	@ (8003e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dc4:	d102      	bne.n	8003dcc <HAL_PWREx_ControlVoltageScaling+0x60>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f2      	bne.n	8003db2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8003e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dd8:	d110      	bne.n	8003dfc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e00f      	b.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dde:	4b0b      	ldr	r3, [pc, #44]	@ (8003e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dea:	d007      	beq.n	8003dfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dec:	4b07      	ldr	r3, [pc, #28]	@ (8003e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003df4:	4a05      	ldr	r2, [pc, #20]	@ (8003e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003df6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003dfa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40007000 	.word	0x40007000
 8003e10:	20000000 	.word	0x20000000
 8003e14:	431bde83 	.word	0x431bde83

08003e18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e3ca      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e2a:	4b97      	ldr	r3, [pc, #604]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e34:	4b94      	ldr	r3, [pc, #592]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 80e4 	beq.w	8004014 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d007      	beq.n	8003e62 <HAL_RCC_OscConfig+0x4a>
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b0c      	cmp	r3, #12
 8003e56:	f040 808b 	bne.w	8003f70 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	f040 8087 	bne.w	8003f70 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e62:	4b89      	ldr	r3, [pc, #548]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_RCC_OscConfig+0x62>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e3a2      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1a      	ldr	r2, [r3, #32]
 8003e7e:	4b82      	ldr	r3, [pc, #520]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d004      	beq.n	8003e94 <HAL_RCC_OscConfig+0x7c>
 8003e8a:	4b7f      	ldr	r3, [pc, #508]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e92:	e005      	b.n	8003ea0 <HAL_RCC_OscConfig+0x88>
 8003e94:	4b7c      	ldr	r3, [pc, #496]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d223      	bcs.n	8003eec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fd55 	bl	8004958 <RCC_SetFlashLatencyFromMSIRange>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e383      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eb8:	4b73      	ldr	r3, [pc, #460]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a72      	ldr	r2, [pc, #456]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003ebe:	f043 0308 	orr.w	r3, r3, #8
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	4b70      	ldr	r3, [pc, #448]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	496d      	ldr	r1, [pc, #436]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ed6:	4b6c      	ldr	r3, [pc, #432]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	4968      	ldr	r1, [pc, #416]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	604b      	str	r3, [r1, #4]
 8003eea:	e025      	b.n	8003f38 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eec:	4b66      	ldr	r3, [pc, #408]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a65      	ldr	r2, [pc, #404]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003ef2:	f043 0308 	orr.w	r3, r3, #8
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	4b63      	ldr	r3, [pc, #396]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	4960      	ldr	r1, [pc, #384]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f0a:	4b5f      	ldr	r3, [pc, #380]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	495b      	ldr	r1, [pc, #364]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d109      	bne.n	8003f38 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fd15 	bl	8004958 <RCC_SetFlashLatencyFromMSIRange>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e343      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f38:	f000 fc4a 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b52      	ldr	r3, [pc, #328]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	091b      	lsrs	r3, r3, #4
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	4950      	ldr	r1, [pc, #320]	@ (800408c <HAL_RCC_OscConfig+0x274>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
 8003f54:	4a4e      	ldr	r2, [pc, #312]	@ (8004090 <HAL_RCC_OscConfig+0x278>)
 8003f56:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f58:	4b4e      	ldr	r3, [pc, #312]	@ (8004094 <HAL_RCC_OscConfig+0x27c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fd ff89 	bl	8001e74 <HAL_InitTick>
 8003f62:	4603      	mov	r3, r0
 8003f64:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d052      	beq.n	8004012 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	e327      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d032      	beq.n	8003fde <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f78:	4b43      	ldr	r3, [pc, #268]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a42      	ldr	r2, [pc, #264]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f84:	f7fd ffc6 	bl	8001f14 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f8c:	f7fd ffc2 	bl	8001f14 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e310      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f0      	beq.n	8003f8c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003faa:	4b37      	ldr	r3, [pc, #220]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a36      	ldr	r2, [pc, #216]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003fb0:	f043 0308 	orr.w	r3, r3, #8
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	4b34      	ldr	r3, [pc, #208]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	4931      	ldr	r1, [pc, #196]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fc8:	4b2f      	ldr	r3, [pc, #188]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	021b      	lsls	r3, r3, #8
 8003fd6:	492c      	ldr	r1, [pc, #176]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	604b      	str	r3, [r1, #4]
 8003fdc:	e01a      	b.n	8004014 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fde:	4b2a      	ldr	r3, [pc, #168]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a29      	ldr	r2, [pc, #164]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fea:	f7fd ff93 	bl	8001f14 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ff2:	f7fd ff8f 	bl	8001f14 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e2dd      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004004:	4b20      	ldr	r3, [pc, #128]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f0      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x1da>
 8004010:	e000      	b.n	8004014 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004012:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d074      	beq.n	800410a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	2b08      	cmp	r3, #8
 8004024:	d005      	beq.n	8004032 <HAL_RCC_OscConfig+0x21a>
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b0c      	cmp	r3, #12
 800402a:	d10e      	bne.n	800404a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b03      	cmp	r3, #3
 8004030:	d10b      	bne.n	800404a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004032:	4b15      	ldr	r3, [pc, #84]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d064      	beq.n	8004108 <HAL_RCC_OscConfig+0x2f0>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d160      	bne.n	8004108 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e2ba      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004052:	d106      	bne.n	8004062 <HAL_RCC_OscConfig+0x24a>
 8004054:	4b0c      	ldr	r3, [pc, #48]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0b      	ldr	r2, [pc, #44]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 800405a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	e026      	b.n	80040b0 <HAL_RCC_OscConfig+0x298>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800406a:	d115      	bne.n	8004098 <HAL_RCC_OscConfig+0x280>
 800406c:	4b06      	ldr	r3, [pc, #24]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a05      	ldr	r2, [pc, #20]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 8004072:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	4b03      	ldr	r3, [pc, #12]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a02      	ldr	r2, [pc, #8]	@ (8004088 <HAL_RCC_OscConfig+0x270>)
 800407e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	e014      	b.n	80040b0 <HAL_RCC_OscConfig+0x298>
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	0800b7b0 	.word	0x0800b7b0
 8004090:	20000000 	.word	0x20000000
 8004094:	20000004 	.word	0x20000004
 8004098:	4ba0      	ldr	r3, [pc, #640]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a9f      	ldr	r2, [pc, #636]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 800409e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	4b9d      	ldr	r3, [pc, #628]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a9c      	ldr	r2, [pc, #624]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 80040aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d013      	beq.n	80040e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b8:	f7fd ff2c 	bl	8001f14 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c0:	f7fd ff28 	bl	8001f14 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	@ 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e276      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040d2:	4b92      	ldr	r3, [pc, #584]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x2a8>
 80040de:	e014      	b.n	800410a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e0:	f7fd ff18 	bl	8001f14 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e8:	f7fd ff14 	bl	8001f14 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	@ 0x64
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e262      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040fa:	4b88      	ldr	r3, [pc, #544]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x2d0>
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d060      	beq.n	80041d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	2b04      	cmp	r3, #4
 800411a:	d005      	beq.n	8004128 <HAL_RCC_OscConfig+0x310>
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2b0c      	cmp	r3, #12
 8004120:	d119      	bne.n	8004156 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d116      	bne.n	8004156 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004128:	4b7c      	ldr	r3, [pc, #496]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_RCC_OscConfig+0x328>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e23f      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004140:	4b76      	ldr	r3, [pc, #472]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	061b      	lsls	r3, r3, #24
 800414e:	4973      	ldr	r1, [pc, #460]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 8004150:	4313      	orrs	r3, r2
 8004152:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004154:	e040      	b.n	80041d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d023      	beq.n	80041a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800415e:	4b6f      	ldr	r3, [pc, #444]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a6e      	ldr	r2, [pc, #440]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 8004164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fd fed3 	bl	8001f14 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004172:	f7fd fecf 	bl	8001f14 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e21d      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004184:	4b65      	ldr	r3, [pc, #404]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004190:	4b62      	ldr	r3, [pc, #392]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	061b      	lsls	r3, r3, #24
 800419e:	495f      	ldr	r1, [pc, #380]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	604b      	str	r3, [r1, #4]
 80041a4:	e018      	b.n	80041d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041a6:	4b5d      	ldr	r3, [pc, #372]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a5c      	ldr	r2, [pc, #368]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 80041ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b2:	f7fd feaf 	bl	8001f14 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ba:	f7fd feab 	bl	8001f14 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e1f9      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041cc:	4b53      	ldr	r3, [pc, #332]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1f0      	bne.n	80041ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d03c      	beq.n	800425e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01c      	beq.n	8004226 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ec:	4b4b      	ldr	r3, [pc, #300]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 80041ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041f2:	4a4a      	ldr	r2, [pc, #296]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7fd fe8a 	bl	8001f14 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004204:	f7fd fe86 	bl	8001f14 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e1d4      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004216:	4b41      	ldr	r3, [pc, #260]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 8004218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0ef      	beq.n	8004204 <HAL_RCC_OscConfig+0x3ec>
 8004224:	e01b      	b.n	800425e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004226:	4b3d      	ldr	r3, [pc, #244]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 8004228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800422c:	4a3b      	ldr	r2, [pc, #236]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 800422e:	f023 0301 	bic.w	r3, r3, #1
 8004232:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004236:	f7fd fe6d 	bl	8001f14 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800423e:	f7fd fe69 	bl	8001f14 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e1b7      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004250:	4b32      	ldr	r3, [pc, #200]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 8004252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1ef      	bne.n	800423e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 80a6 	beq.w	80043b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800426c:	2300      	movs	r3, #0
 800426e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004270:	4b2a      	ldr	r3, [pc, #168]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 8004272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10d      	bne.n	8004298 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800427c:	4b27      	ldr	r3, [pc, #156]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 800427e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004280:	4a26      	ldr	r2, [pc, #152]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 8004282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004286:	6593      	str	r3, [r2, #88]	@ 0x58
 8004288:	4b24      	ldr	r3, [pc, #144]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 800428a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004294:	2301      	movs	r3, #1
 8004296:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004298:	4b21      	ldr	r3, [pc, #132]	@ (8004320 <HAL_RCC_OscConfig+0x508>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d118      	bne.n	80042d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004320 <HAL_RCC_OscConfig+0x508>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004320 <HAL_RCC_OscConfig+0x508>)
 80042aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042b0:	f7fd fe30 	bl	8001f14 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b8:	f7fd fe2c 	bl	8001f14 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e17a      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ca:	4b15      	ldr	r3, [pc, #84]	@ (8004320 <HAL_RCC_OscConfig+0x508>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0f0      	beq.n	80042b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d108      	bne.n	80042f0 <HAL_RCC_OscConfig+0x4d8>
 80042de:	4b0f      	ldr	r3, [pc, #60]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 80042e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e4:	4a0d      	ldr	r2, [pc, #52]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042ee:	e029      	b.n	8004344 <HAL_RCC_OscConfig+0x52c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b05      	cmp	r3, #5
 80042f6:	d115      	bne.n	8004324 <HAL_RCC_OscConfig+0x50c>
 80042f8:	4b08      	ldr	r3, [pc, #32]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042fe:	4a07      	ldr	r2, [pc, #28]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 8004300:	f043 0304 	orr.w	r3, r3, #4
 8004304:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004308:	4b04      	ldr	r3, [pc, #16]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800430e:	4a03      	ldr	r2, [pc, #12]	@ (800431c <HAL_RCC_OscConfig+0x504>)
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004318:	e014      	b.n	8004344 <HAL_RCC_OscConfig+0x52c>
 800431a:	bf00      	nop
 800431c:	40021000 	.word	0x40021000
 8004320:	40007000 	.word	0x40007000
 8004324:	4b9c      	ldr	r3, [pc, #624]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432a:	4a9b      	ldr	r2, [pc, #620]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 800432c:	f023 0301 	bic.w	r3, r3, #1
 8004330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004334:	4b98      	ldr	r3, [pc, #608]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433a:	4a97      	ldr	r2, [pc, #604]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 800433c:	f023 0304 	bic.w	r3, r3, #4
 8004340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d016      	beq.n	800437a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434c:	f7fd fde2 	bl	8001f14 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004352:	e00a      	b.n	800436a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004354:	f7fd fdde 	bl	8001f14 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e12a      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800436a:	4b8b      	ldr	r3, [pc, #556]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 800436c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0ed      	beq.n	8004354 <HAL_RCC_OscConfig+0x53c>
 8004378:	e015      	b.n	80043a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437a:	f7fd fdcb 	bl	8001f14 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004380:	e00a      	b.n	8004398 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004382:	f7fd fdc7 	bl	8001f14 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e113      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004398:	4b7f      	ldr	r3, [pc, #508]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1ed      	bne.n	8004382 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043a6:	7ffb      	ldrb	r3, [r7, #31]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d105      	bne.n	80043b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ac:	4b7a      	ldr	r3, [pc, #488]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 80043ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b0:	4a79      	ldr	r2, [pc, #484]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 80043b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043b6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80fe 	beq.w	80045be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	f040 80d0 	bne.w	800456c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80043cc:	4b72      	ldr	r3, [pc, #456]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f003 0203 	and.w	r2, r3, #3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	429a      	cmp	r2, r3
 80043de:	d130      	bne.n	8004442 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ea:	3b01      	subs	r3, #1
 80043ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d127      	bne.n	8004442 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043fe:	429a      	cmp	r2, r3
 8004400:	d11f      	bne.n	8004442 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800440c:	2a07      	cmp	r2, #7
 800440e:	bf14      	ite	ne
 8004410:	2201      	movne	r2, #1
 8004412:	2200      	moveq	r2, #0
 8004414:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004416:	4293      	cmp	r3, r2
 8004418:	d113      	bne.n	8004442 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004424:	085b      	lsrs	r3, r3, #1
 8004426:	3b01      	subs	r3, #1
 8004428:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800442a:	429a      	cmp	r2, r3
 800442c:	d109      	bne.n	8004442 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004438:	085b      	lsrs	r3, r3, #1
 800443a:	3b01      	subs	r3, #1
 800443c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800443e:	429a      	cmp	r2, r3
 8004440:	d06e      	beq.n	8004520 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2b0c      	cmp	r3, #12
 8004446:	d069      	beq.n	800451c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004448:	4b53      	ldr	r3, [pc, #332]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d105      	bne.n	8004460 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004454:	4b50      	ldr	r3, [pc, #320]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0ad      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004464:	4b4c      	ldr	r3, [pc, #304]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a4b      	ldr	r2, [pc, #300]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 800446a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800446e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004470:	f7fd fd50 	bl	8001f14 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004478:	f7fd fd4c 	bl	8001f14 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e09a      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800448a:	4b43      	ldr	r3, [pc, #268]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004496:	4b40      	ldr	r3, [pc, #256]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	4b40      	ldr	r3, [pc, #256]	@ (800459c <HAL_RCC_OscConfig+0x784>)
 800449c:	4013      	ands	r3, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80044a6:	3a01      	subs	r2, #1
 80044a8:	0112      	lsls	r2, r2, #4
 80044aa:	4311      	orrs	r1, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80044b0:	0212      	lsls	r2, r2, #8
 80044b2:	4311      	orrs	r1, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80044b8:	0852      	lsrs	r2, r2, #1
 80044ba:	3a01      	subs	r2, #1
 80044bc:	0552      	lsls	r2, r2, #21
 80044be:	4311      	orrs	r1, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80044c4:	0852      	lsrs	r2, r2, #1
 80044c6:	3a01      	subs	r2, #1
 80044c8:	0652      	lsls	r2, r2, #25
 80044ca:	4311      	orrs	r1, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80044d0:	0912      	lsrs	r2, r2, #4
 80044d2:	0452      	lsls	r2, r2, #17
 80044d4:	430a      	orrs	r2, r1
 80044d6:	4930      	ldr	r1, [pc, #192]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 80044e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 80044ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044f4:	f7fd fd0e 	bl	8001f14 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044fc:	f7fd fd0a 	bl	8001f14 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e058      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800450e:	4b22      	ldr	r3, [pc, #136]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800451a:	e050      	b.n	80045be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e04f      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004520:	4b1d      	ldr	r3, [pc, #116]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d148      	bne.n	80045be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800452c:	4b1a      	ldr	r3, [pc, #104]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a19      	ldr	r2, [pc, #100]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 8004532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004536:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004538:	4b17      	ldr	r3, [pc, #92]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4a16      	ldr	r2, [pc, #88]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 800453e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004542:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004544:	f7fd fce6 	bl	8001f14 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454c:	f7fd fce2 	bl	8001f14 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e030      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800455e:	4b0e      	ldr	r3, [pc, #56]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x734>
 800456a:	e028      	b.n	80045be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b0c      	cmp	r3, #12
 8004570:	d023      	beq.n	80045ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004572:	4b09      	ldr	r3, [pc, #36]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a08      	ldr	r2, [pc, #32]	@ (8004598 <HAL_RCC_OscConfig+0x780>)
 8004578:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800457c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457e:	f7fd fcc9 	bl	8001f14 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004584:	e00c      	b.n	80045a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004586:	f7fd fcc5 	bl	8001f14 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d905      	bls.n	80045a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e013      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
 8004598:	40021000 	.word	0x40021000
 800459c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a0:	4b09      	ldr	r3, [pc, #36]	@ (80045c8 <HAL_RCC_OscConfig+0x7b0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1ec      	bne.n	8004586 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80045ac:	4b06      	ldr	r3, [pc, #24]	@ (80045c8 <HAL_RCC_OscConfig+0x7b0>)
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	4905      	ldr	r1, [pc, #20]	@ (80045c8 <HAL_RCC_OscConfig+0x7b0>)
 80045b2:	4b06      	ldr	r3, [pc, #24]	@ (80045cc <HAL_RCC_OscConfig+0x7b4>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	60cb      	str	r3, [r1, #12]
 80045b8:	e001      	b.n	80045be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3720      	adds	r7, #32
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40021000 	.word	0x40021000
 80045cc:	feeefffc 	.word	0xfeeefffc

080045d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e0e7      	b.n	80047b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e4:	4b75      	ldr	r3, [pc, #468]	@ (80047bc <HAL_RCC_ClockConfig+0x1ec>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d910      	bls.n	8004614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f2:	4b72      	ldr	r3, [pc, #456]	@ (80047bc <HAL_RCC_ClockConfig+0x1ec>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f023 0207 	bic.w	r2, r3, #7
 80045fa:	4970      	ldr	r1, [pc, #448]	@ (80047bc <HAL_RCC_ClockConfig+0x1ec>)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	4313      	orrs	r3, r2
 8004600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004602:	4b6e      	ldr	r3, [pc, #440]	@ (80047bc <HAL_RCC_ClockConfig+0x1ec>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d001      	beq.n	8004614 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e0cf      	b.n	80047b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d010      	beq.n	8004642 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	4b66      	ldr	r3, [pc, #408]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800462c:	429a      	cmp	r2, r3
 800462e:	d908      	bls.n	8004642 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004630:	4b63      	ldr	r3, [pc, #396]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	4960      	ldr	r1, [pc, #384]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d04c      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b03      	cmp	r3, #3
 8004654:	d107      	bne.n	8004666 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004656:	4b5a      	ldr	r3, [pc, #360]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d121      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e0a6      	b.n	80047b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d107      	bne.n	800467e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800466e:	4b54      	ldr	r3, [pc, #336]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d115      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e09a      	b.n	80047b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d107      	bne.n	8004696 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004686:	4b4e      	ldr	r3, [pc, #312]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e08e      	b.n	80047b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004696:	4b4a      	ldr	r3, [pc, #296]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e086      	b.n	80047b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046a6:	4b46      	ldr	r3, [pc, #280]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f023 0203 	bic.w	r2, r3, #3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4943      	ldr	r1, [pc, #268]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b8:	f7fd fc2c 	bl	8001f14 <HAL_GetTick>
 80046bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046be:	e00a      	b.n	80046d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c0:	f7fd fc28 	bl	8001f14 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e06e      	b.n	80047b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d6:	4b3a      	ldr	r3, [pc, #232]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 020c 	and.w	r2, r3, #12
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d1eb      	bne.n	80046c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d010      	beq.n	8004716 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	4b31      	ldr	r3, [pc, #196]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004700:	429a      	cmp	r2, r3
 8004702:	d208      	bcs.n	8004716 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004704:	4b2e      	ldr	r3, [pc, #184]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	492b      	ldr	r1, [pc, #172]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004716:	4b29      	ldr	r3, [pc, #164]	@ (80047bc <HAL_RCC_ClockConfig+0x1ec>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d210      	bcs.n	8004746 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004724:	4b25      	ldr	r3, [pc, #148]	@ (80047bc <HAL_RCC_ClockConfig+0x1ec>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f023 0207 	bic.w	r2, r3, #7
 800472c:	4923      	ldr	r1, [pc, #140]	@ (80047bc <HAL_RCC_ClockConfig+0x1ec>)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	4313      	orrs	r3, r2
 8004732:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004734:	4b21      	ldr	r3, [pc, #132]	@ (80047bc <HAL_RCC_ClockConfig+0x1ec>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d001      	beq.n	8004746 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e036      	b.n	80047b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	d008      	beq.n	8004764 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004752:	4b1b      	ldr	r3, [pc, #108]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	4918      	ldr	r1, [pc, #96]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004760:	4313      	orrs	r3, r2
 8004762:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b00      	cmp	r3, #0
 800476e:	d009      	beq.n	8004784 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004770:	4b13      	ldr	r3, [pc, #76]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	4910      	ldr	r1, [pc, #64]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004780:	4313      	orrs	r3, r2
 8004782:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004784:	f000 f824 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 8004788:	4602      	mov	r2, r0
 800478a:	4b0d      	ldr	r3, [pc, #52]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f0>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	091b      	lsrs	r3, r3, #4
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	490b      	ldr	r1, [pc, #44]	@ (80047c4 <HAL_RCC_ClockConfig+0x1f4>)
 8004796:	5ccb      	ldrb	r3, [r1, r3]
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
 80047a0:	4a09      	ldr	r2, [pc, #36]	@ (80047c8 <HAL_RCC_ClockConfig+0x1f8>)
 80047a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047a4:	4b09      	ldr	r3, [pc, #36]	@ (80047cc <HAL_RCC_ClockConfig+0x1fc>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fd fb63 	bl	8001e74 <HAL_InitTick>
 80047ae:	4603      	mov	r3, r0
 80047b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80047b2:	7afb      	ldrb	r3, [r7, #11]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40022000 	.word	0x40022000
 80047c0:	40021000 	.word	0x40021000
 80047c4:	0800b7b0 	.word	0x0800b7b0
 80047c8:	20000000 	.word	0x20000000
 80047cc:	20000004 	.word	0x20000004

080047d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b089      	sub	sp, #36	@ 0x24
 80047d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	2300      	movs	r3, #0
 80047dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047de:	4b3e      	ldr	r3, [pc, #248]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 030c 	and.w	r3, r3, #12
 80047e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047e8:	4b3b      	ldr	r3, [pc, #236]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x34>
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b0c      	cmp	r3, #12
 80047fc:	d121      	bne.n	8004842 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d11e      	bne.n	8004842 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004804:	4b34      	ldr	r3, [pc, #208]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d107      	bne.n	8004820 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004810:	4b31      	ldr	r3, [pc, #196]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004816:	0a1b      	lsrs	r3, r3, #8
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	e005      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004820:	4b2d      	ldr	r3, [pc, #180]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	091b      	lsrs	r3, r3, #4
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800482c:	4a2b      	ldr	r2, [pc, #172]	@ (80048dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004834:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10d      	bne.n	8004858 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004840:	e00a      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b04      	cmp	r3, #4
 8004846:	d102      	bne.n	800484e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004848:	4b25      	ldr	r3, [pc, #148]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	e004      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b08      	cmp	r3, #8
 8004852:	d101      	bne.n	8004858 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004854:	4b23      	ldr	r3, [pc, #140]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004856:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	2b0c      	cmp	r3, #12
 800485c:	d134      	bne.n	80048c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800485e:	4b1e      	ldr	r3, [pc, #120]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d003      	beq.n	8004876 <HAL_RCC_GetSysClockFreq+0xa6>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b03      	cmp	r3, #3
 8004872:	d003      	beq.n	800487c <HAL_RCC_GetSysClockFreq+0xac>
 8004874:	e005      	b.n	8004882 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004876:	4b1a      	ldr	r3, [pc, #104]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004878:	617b      	str	r3, [r7, #20]
      break;
 800487a:	e005      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800487c:	4b19      	ldr	r3, [pc, #100]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800487e:	617b      	str	r3, [r7, #20]
      break;
 8004880:	e002      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	617b      	str	r3, [r7, #20]
      break;
 8004886:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004888:	4b13      	ldr	r3, [pc, #76]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	091b      	lsrs	r3, r3, #4
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	3301      	adds	r3, #1
 8004894:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004896:	4b10      	ldr	r3, [pc, #64]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	0a1b      	lsrs	r3, r3, #8
 800489c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	fb03 f202 	mul.w	r2, r3, r2
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048ae:	4b0a      	ldr	r3, [pc, #40]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	0e5b      	lsrs	r3, r3, #25
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	3301      	adds	r3, #1
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048c8:	69bb      	ldr	r3, [r7, #24]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3724      	adds	r7, #36	@ 0x24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40021000 	.word	0x40021000
 80048dc:	0800b7c8 	.word	0x0800b7c8
 80048e0:	00f42400 	.word	0x00f42400
 80048e4:	007a1200 	.word	0x007a1200

080048e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048ec:	4b03      	ldr	r3, [pc, #12]	@ (80048fc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ee:	681b      	ldr	r3, [r3, #0]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000000 	.word	0x20000000

08004900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004904:	f7ff fff0 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004908:	4602      	mov	r2, r0
 800490a:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <HAL_RCC_GetPCLK1Freq+0x24>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	0a1b      	lsrs	r3, r3, #8
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	4904      	ldr	r1, [pc, #16]	@ (8004928 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004916:	5ccb      	ldrb	r3, [r1, r3]
 8004918:	f003 031f 	and.w	r3, r3, #31
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004920:	4618      	mov	r0, r3
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40021000 	.word	0x40021000
 8004928:	0800b7c0 	.word	0x0800b7c0

0800492c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004930:	f7ff ffda 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004934:	4602      	mov	r2, r0
 8004936:	4b06      	ldr	r3, [pc, #24]	@ (8004950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	0adb      	lsrs	r3, r3, #11
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	4904      	ldr	r1, [pc, #16]	@ (8004954 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004942:	5ccb      	ldrb	r3, [r1, r3]
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800494c:	4618      	mov	r0, r3
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40021000 	.word	0x40021000
 8004954:	0800b7c0 	.word	0x0800b7c0

08004958 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004960:	2300      	movs	r3, #0
 8004962:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004964:	4b2a      	ldr	r3, [pc, #168]	@ (8004a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004970:	f7ff f9ee 	bl	8003d50 <HAL_PWREx_GetVoltageRange>
 8004974:	6178      	str	r0, [r7, #20]
 8004976:	e014      	b.n	80049a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004978:	4b25      	ldr	r3, [pc, #148]	@ (8004a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800497a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800497c:	4a24      	ldr	r2, [pc, #144]	@ (8004a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800497e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004982:	6593      	str	r3, [r2, #88]	@ 0x58
 8004984:	4b22      	ldr	r3, [pc, #136]	@ (8004a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004990:	f7ff f9de 	bl	8003d50 <HAL_PWREx_GetVoltageRange>
 8004994:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004996:	4b1e      	ldr	r3, [pc, #120]	@ (8004a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499a:	4a1d      	ldr	r2, [pc, #116]	@ (8004a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800499c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049a8:	d10b      	bne.n	80049c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b80      	cmp	r3, #128	@ 0x80
 80049ae:	d919      	bls.n	80049e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80049b4:	d902      	bls.n	80049bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049b6:	2302      	movs	r3, #2
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	e013      	b.n	80049e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049bc:	2301      	movs	r3, #1
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	e010      	b.n	80049e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b80      	cmp	r3, #128	@ 0x80
 80049c6:	d902      	bls.n	80049ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80049c8:	2303      	movs	r3, #3
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	e00a      	b.n	80049e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b80      	cmp	r3, #128	@ 0x80
 80049d2:	d102      	bne.n	80049da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049d4:	2302      	movs	r3, #2
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	e004      	b.n	80049e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b70      	cmp	r3, #112	@ 0x70
 80049de:	d101      	bne.n	80049e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049e0:	2301      	movs	r3, #1
 80049e2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f023 0207 	bic.w	r2, r3, #7
 80049ec:	4909      	ldr	r1, [pc, #36]	@ (8004a14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049f4:	4b07      	ldr	r3, [pc, #28]	@ (8004a14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d001      	beq.n	8004a06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40022000 	.word	0x40022000

08004a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a20:	2300      	movs	r3, #0
 8004a22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a24:	2300      	movs	r3, #0
 8004a26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d041      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a38:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004a3c:	d02a      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a3e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004a42:	d824      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a48:	d008      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a4e:	d81e      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a58:	d010      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a5a:	e018      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a5c:	4b86      	ldr	r3, [pc, #536]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	4a85      	ldr	r2, [pc, #532]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a68:	e015      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	2100      	movs	r1, #0
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fabb 	bl	8004fec <RCCEx_PLLSAI1_Config>
 8004a76:	4603      	mov	r3, r0
 8004a78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a7a:	e00c      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3320      	adds	r3, #32
 8004a80:	2100      	movs	r1, #0
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fba6 	bl	80051d4 <RCCEx_PLLSAI2_Config>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a8c:	e003      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	74fb      	strb	r3, [r7, #19]
      break;
 8004a92:	e000      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a96:	7cfb      	ldrb	r3, [r7, #19]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10b      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a9c:	4b76      	ldr	r3, [pc, #472]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004aaa:	4973      	ldr	r1, [pc, #460]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004ab2:	e001      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab4:	7cfb      	ldrb	r3, [r7, #19]
 8004ab6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d041      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ac8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004acc:	d02a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ace:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ad2:	d824      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ad4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ad8:	d008      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ada:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ade:	d81e      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004ae4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ae8:	d010      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004aea:	e018      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004aec:	4b62      	ldr	r3, [pc, #392]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4a61      	ldr	r2, [pc, #388]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004af8:	e015      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3304      	adds	r3, #4
 8004afe:	2100      	movs	r1, #0
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fa73 	bl	8004fec <RCCEx_PLLSAI1_Config>
 8004b06:	4603      	mov	r3, r0
 8004b08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b0a:	e00c      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3320      	adds	r3, #32
 8004b10:	2100      	movs	r1, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fb5e 	bl	80051d4 <RCCEx_PLLSAI2_Config>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b1c:	e003      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	74fb      	strb	r3, [r7, #19]
      break;
 8004b22:	e000      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b26:	7cfb      	ldrb	r3, [r7, #19]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10b      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b2c:	4b52      	ldr	r3, [pc, #328]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b32:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b3a:	494f      	ldr	r1, [pc, #316]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004b42:	e001      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b44:	7cfb      	ldrb	r3, [r7, #19]
 8004b46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 80a0 	beq.w	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b56:	2300      	movs	r3, #0
 8004b58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b5a:	4b47      	ldr	r3, [pc, #284]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00d      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b70:	4b41      	ldr	r3, [pc, #260]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b74:	4a40      	ldr	r2, [pc, #256]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b7c:	4b3e      	ldr	r3, [pc, #248]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b84:	60bb      	str	r3, [r7, #8]
 8004b86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a3a      	ldr	r2, [pc, #232]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b98:	f7fd f9bc 	bl	8001f14 <HAL_GetTick>
 8004b9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b9e:	e009      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba0:	f7fd f9b8 	bl	8001f14 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d902      	bls.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	74fb      	strb	r3, [r7, #19]
        break;
 8004bb2:	e005      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bb4:	4b31      	ldr	r3, [pc, #196]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0ef      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004bc0:	7cfb      	ldrb	r3, [r7, #19]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d15c      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bc6:	4b2c      	ldr	r3, [pc, #176]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01f      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d019      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004be4:	4b24      	ldr	r3, [pc, #144]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bf0:	4b21      	ldr	r3, [pc, #132]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf6:	4a20      	ldr	r2, [pc, #128]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c00:	4b1d      	ldr	r3, [pc, #116]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c06:	4a1c      	ldr	r2, [pc, #112]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c10:	4a19      	ldr	r2, [pc, #100]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d016      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c22:	f7fd f977 	bl	8001f14 <HAL_GetTick>
 8004c26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c28:	e00b      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c2a:	f7fd f973 	bl	8001f14 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d902      	bls.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	74fb      	strb	r3, [r7, #19]
            break;
 8004c40:	e006      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c42:	4b0d      	ldr	r3, [pc, #52]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0ec      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c50:	7cfb      	ldrb	r3, [r7, #19]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10c      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c56:	4b08      	ldr	r3, [pc, #32]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c66:	4904      	ldr	r1, [pc, #16]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c6e:	e009      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c70:	7cfb      	ldrb	r3, [r7, #19]
 8004c72:	74bb      	strb	r3, [r7, #18]
 8004c74:	e006      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c80:	7cfb      	ldrb	r3, [r7, #19]
 8004c82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c84:	7c7b      	ldrb	r3, [r7, #17]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d105      	bne.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c8a:	4b9e      	ldr	r3, [pc, #632]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8e:	4a9d      	ldr	r2, [pc, #628]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c94:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ca2:	4b98      	ldr	r3, [pc, #608]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca8:	f023 0203 	bic.w	r2, r3, #3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb0:	4994      	ldr	r1, [pc, #592]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cc4:	4b8f      	ldr	r3, [pc, #572]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cca:	f023 020c 	bic.w	r2, r3, #12
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd2:	498c      	ldr	r1, [pc, #560]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ce6:	4b87      	ldr	r3, [pc, #540]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf4:	4983      	ldr	r1, [pc, #524]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d08:	4b7e      	ldr	r3, [pc, #504]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d16:	497b      	ldr	r1, [pc, #492]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0310 	and.w	r3, r3, #16
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d2a:	4b76      	ldr	r3, [pc, #472]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d38:	4972      	ldr	r1, [pc, #456]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d4c:	4b6d      	ldr	r3, [pc, #436]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d5a:	496a      	ldr	r1, [pc, #424]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d6e:	4b65      	ldr	r3, [pc, #404]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d7c:	4961      	ldr	r1, [pc, #388]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d90:	4b5c      	ldr	r3, [pc, #368]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d9e:	4959      	ldr	r1, [pc, #356]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004db2:	4b54      	ldr	r3, [pc, #336]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc0:	4950      	ldr	r1, [pc, #320]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dda:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de2:	4948      	ldr	r1, [pc, #288]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004df6:	4b43      	ldr	r3, [pc, #268]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e04:	493f      	ldr	r1, [pc, #252]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d028      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e18:	4b3a      	ldr	r3, [pc, #232]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e26:	4937      	ldr	r1, [pc, #220]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e36:	d106      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e38:	4b32      	ldr	r3, [pc, #200]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	4a31      	ldr	r2, [pc, #196]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e42:	60d3      	str	r3, [r2, #12]
 8004e44:	e011      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e4e:	d10c      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3304      	adds	r3, #4
 8004e54:	2101      	movs	r1, #1
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 f8c8 	bl	8004fec <RCCEx_PLLSAI1_Config>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e60:	7cfb      	ldrb	r3, [r7, #19]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e66:	7cfb      	ldrb	r3, [r7, #19]
 8004e68:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d028      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e76:	4b23      	ldr	r3, [pc, #140]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e84:	491f      	ldr	r1, [pc, #124]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e94:	d106      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e96:	4b1b      	ldr	r3, [pc, #108]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ea0:	60d3      	str	r3, [r2, #12]
 8004ea2:	e011      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 f899 	bl	8004fec <RCCEx_PLLSAI1_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ebe:	7cfb      	ldrb	r3, [r7, #19]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ec4:	7cfb      	ldrb	r3, [r7, #19]
 8004ec6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d02b      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ee2:	4908      	ldr	r1, [pc, #32]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ef2:	d109      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ef4:	4b03      	ldr	r3, [pc, #12]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4a02      	ldr	r2, [pc, #8]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004efa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004efe:	60d3      	str	r3, [r2, #12]
 8004f00:	e014      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004f02:	bf00      	nop
 8004f04:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f10:	d10c      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3304      	adds	r3, #4
 8004f16:	2101      	movs	r1, #1
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 f867 	bl	8004fec <RCCEx_PLLSAI1_Config>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f22:	7cfb      	ldrb	r3, [r7, #19]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004f28:	7cfb      	ldrb	r3, [r7, #19]
 8004f2a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d02f      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f38:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f46:	4928      	ldr	r1, [pc, #160]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f56:	d10d      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	2102      	movs	r1, #2
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 f844 	bl	8004fec <RCCEx_PLLSAI1_Config>
 8004f64:	4603      	mov	r3, r0
 8004f66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f68:	7cfb      	ldrb	r3, [r7, #19]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d014      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f6e:	7cfb      	ldrb	r3, [r7, #19]
 8004f70:	74bb      	strb	r3, [r7, #18]
 8004f72:	e011      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3320      	adds	r3, #32
 8004f82:	2102      	movs	r1, #2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 f925 	bl	80051d4 <RCCEx_PLLSAI2_Config>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f8e:	7cfb      	ldrb	r3, [r7, #19]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f94:	7cfb      	ldrb	r3, [r7, #19]
 8004f96:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00a      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fa4:	4b10      	ldr	r3, [pc, #64]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004faa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fb2:	490d      	ldr	r1, [pc, #52]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00b      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fc6:	4b08      	ldr	r3, [pc, #32]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fcc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fd6:	4904      	ldr	r1, [pc, #16]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004fde:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40021000 	.word	0x40021000

08004fec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ffa:	4b75      	ldr	r3, [pc, #468]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d018      	beq.n	8005038 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005006:	4b72      	ldr	r3, [pc, #456]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f003 0203 	and.w	r2, r3, #3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d10d      	bne.n	8005032 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
       ||
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800501e:	4b6c      	ldr	r3, [pc, #432]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	091b      	lsrs	r3, r3, #4
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
       ||
 800502e:	429a      	cmp	r2, r3
 8005030:	d047      	beq.n	80050c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	73fb      	strb	r3, [r7, #15]
 8005036:	e044      	b.n	80050c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b03      	cmp	r3, #3
 800503e:	d018      	beq.n	8005072 <RCCEx_PLLSAI1_Config+0x86>
 8005040:	2b03      	cmp	r3, #3
 8005042:	d825      	bhi.n	8005090 <RCCEx_PLLSAI1_Config+0xa4>
 8005044:	2b01      	cmp	r3, #1
 8005046:	d002      	beq.n	800504e <RCCEx_PLLSAI1_Config+0x62>
 8005048:	2b02      	cmp	r3, #2
 800504a:	d009      	beq.n	8005060 <RCCEx_PLLSAI1_Config+0x74>
 800504c:	e020      	b.n	8005090 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800504e:	4b60      	ldr	r3, [pc, #384]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d11d      	bne.n	8005096 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800505e:	e01a      	b.n	8005096 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005060:	4b5b      	ldr	r3, [pc, #364]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005068:	2b00      	cmp	r3, #0
 800506a:	d116      	bne.n	800509a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005070:	e013      	b.n	800509a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005072:	4b57      	ldr	r3, [pc, #348]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10f      	bne.n	800509e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800507e:	4b54      	ldr	r3, [pc, #336]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800508e:	e006      	b.n	800509e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	73fb      	strb	r3, [r7, #15]
      break;
 8005094:	e004      	b.n	80050a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005096:	bf00      	nop
 8005098:	e002      	b.n	80050a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800509a:	bf00      	nop
 800509c:	e000      	b.n	80050a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800509e:	bf00      	nop
    }

    if(status == HAL_OK)
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10d      	bne.n	80050c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050a6:	4b4a      	ldr	r3, [pc, #296]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6819      	ldr	r1, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	430b      	orrs	r3, r1
 80050bc:	4944      	ldr	r1, [pc, #272]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d17d      	bne.n	80051c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050c8:	4b41      	ldr	r3, [pc, #260]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a40      	ldr	r2, [pc, #256]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d4:	f7fc ff1e 	bl	8001f14 <HAL_GetTick>
 80050d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050da:	e009      	b.n	80050f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050dc:	f7fc ff1a 	bl	8001f14 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d902      	bls.n	80050f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	73fb      	strb	r3, [r7, #15]
        break;
 80050ee:	e005      	b.n	80050fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050f0:	4b37      	ldr	r3, [pc, #220]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1ef      	bne.n	80050dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d160      	bne.n	80051c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d111      	bne.n	800512c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005108:	4b31      	ldr	r3, [pc, #196]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6892      	ldr	r2, [r2, #8]
 8005118:	0211      	lsls	r1, r2, #8
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	68d2      	ldr	r2, [r2, #12]
 800511e:	0912      	lsrs	r2, r2, #4
 8005120:	0452      	lsls	r2, r2, #17
 8005122:	430a      	orrs	r2, r1
 8005124:	492a      	ldr	r1, [pc, #168]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005126:	4313      	orrs	r3, r2
 8005128:	610b      	str	r3, [r1, #16]
 800512a:	e027      	b.n	800517c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d112      	bne.n	8005158 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005132:	4b27      	ldr	r3, [pc, #156]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800513a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6892      	ldr	r2, [r2, #8]
 8005142:	0211      	lsls	r1, r2, #8
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6912      	ldr	r2, [r2, #16]
 8005148:	0852      	lsrs	r2, r2, #1
 800514a:	3a01      	subs	r2, #1
 800514c:	0552      	lsls	r2, r2, #21
 800514e:	430a      	orrs	r2, r1
 8005150:	491f      	ldr	r1, [pc, #124]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005152:	4313      	orrs	r3, r2
 8005154:	610b      	str	r3, [r1, #16]
 8005156:	e011      	b.n	800517c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005158:	4b1d      	ldr	r3, [pc, #116]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005160:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6892      	ldr	r2, [r2, #8]
 8005168:	0211      	lsls	r1, r2, #8
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6952      	ldr	r2, [r2, #20]
 800516e:	0852      	lsrs	r2, r2, #1
 8005170:	3a01      	subs	r2, #1
 8005172:	0652      	lsls	r2, r2, #25
 8005174:	430a      	orrs	r2, r1
 8005176:	4916      	ldr	r1, [pc, #88]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005178:	4313      	orrs	r3, r2
 800517a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800517c:	4b14      	ldr	r3, [pc, #80]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a13      	ldr	r2, [pc, #76]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005182:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005186:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005188:	f7fc fec4 	bl	8001f14 <HAL_GetTick>
 800518c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800518e:	e009      	b.n	80051a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005190:	f7fc fec0 	bl	8001f14 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d902      	bls.n	80051a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	73fb      	strb	r3, [r7, #15]
          break;
 80051a2:	e005      	b.n	80051b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051a4:	4b0a      	ldr	r3, [pc, #40]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0ef      	beq.n	8005190 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051b6:	4b06      	ldr	r3, [pc, #24]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051b8:	691a      	ldr	r2, [r3, #16]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	4904      	ldr	r1, [pc, #16]	@ (80051d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40021000 	.word	0x40021000

080051d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051e2:	4b6a      	ldr	r3, [pc, #424]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d018      	beq.n	8005220 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80051ee:	4b67      	ldr	r3, [pc, #412]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f003 0203 	and.w	r2, r3, #3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d10d      	bne.n	800521a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
       ||
 8005202:	2b00      	cmp	r3, #0
 8005204:	d009      	beq.n	800521a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005206:	4b61      	ldr	r3, [pc, #388]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	091b      	lsrs	r3, r3, #4
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
       ||
 8005216:	429a      	cmp	r2, r3
 8005218:	d047      	beq.n	80052aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	73fb      	strb	r3, [r7, #15]
 800521e:	e044      	b.n	80052aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b03      	cmp	r3, #3
 8005226:	d018      	beq.n	800525a <RCCEx_PLLSAI2_Config+0x86>
 8005228:	2b03      	cmp	r3, #3
 800522a:	d825      	bhi.n	8005278 <RCCEx_PLLSAI2_Config+0xa4>
 800522c:	2b01      	cmp	r3, #1
 800522e:	d002      	beq.n	8005236 <RCCEx_PLLSAI2_Config+0x62>
 8005230:	2b02      	cmp	r3, #2
 8005232:	d009      	beq.n	8005248 <RCCEx_PLLSAI2_Config+0x74>
 8005234:	e020      	b.n	8005278 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005236:	4b55      	ldr	r3, [pc, #340]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d11d      	bne.n	800527e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005246:	e01a      	b.n	800527e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005248:	4b50      	ldr	r3, [pc, #320]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005250:	2b00      	cmp	r3, #0
 8005252:	d116      	bne.n	8005282 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005258:	e013      	b.n	8005282 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800525a:	4b4c      	ldr	r3, [pc, #304]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10f      	bne.n	8005286 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005266:	4b49      	ldr	r3, [pc, #292]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d109      	bne.n	8005286 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005276:	e006      	b.n	8005286 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
      break;
 800527c:	e004      	b.n	8005288 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800527e:	bf00      	nop
 8005280:	e002      	b.n	8005288 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005282:	bf00      	nop
 8005284:	e000      	b.n	8005288 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005286:	bf00      	nop
    }

    if(status == HAL_OK)
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10d      	bne.n	80052aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800528e:	4b3f      	ldr	r3, [pc, #252]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6819      	ldr	r1, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	3b01      	subs	r3, #1
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	430b      	orrs	r3, r1
 80052a4:	4939      	ldr	r1, [pc, #228]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d167      	bne.n	8005380 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052b0:	4b36      	ldr	r3, [pc, #216]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a35      	ldr	r2, [pc, #212]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052bc:	f7fc fe2a 	bl	8001f14 <HAL_GetTick>
 80052c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052c2:	e009      	b.n	80052d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052c4:	f7fc fe26 	bl	8001f14 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d902      	bls.n	80052d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	73fb      	strb	r3, [r7, #15]
        break;
 80052d6:	e005      	b.n	80052e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052d8:	4b2c      	ldr	r3, [pc, #176]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1ef      	bne.n	80052c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d14a      	bne.n	8005380 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d111      	bne.n	8005314 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052f0:	4b26      	ldr	r3, [pc, #152]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80052f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6892      	ldr	r2, [r2, #8]
 8005300:	0211      	lsls	r1, r2, #8
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	68d2      	ldr	r2, [r2, #12]
 8005306:	0912      	lsrs	r2, r2, #4
 8005308:	0452      	lsls	r2, r2, #17
 800530a:	430a      	orrs	r2, r1
 800530c:	491f      	ldr	r1, [pc, #124]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 800530e:	4313      	orrs	r3, r2
 8005310:	614b      	str	r3, [r1, #20]
 8005312:	e011      	b.n	8005338 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005314:	4b1d      	ldr	r3, [pc, #116]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800531c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6892      	ldr	r2, [r2, #8]
 8005324:	0211      	lsls	r1, r2, #8
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6912      	ldr	r2, [r2, #16]
 800532a:	0852      	lsrs	r2, r2, #1
 800532c:	3a01      	subs	r2, #1
 800532e:	0652      	lsls	r2, r2, #25
 8005330:	430a      	orrs	r2, r1
 8005332:	4916      	ldr	r1, [pc, #88]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005334:	4313      	orrs	r3, r2
 8005336:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005338:	4b14      	ldr	r3, [pc, #80]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a13      	ldr	r2, [pc, #76]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 800533e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005342:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005344:	f7fc fde6 	bl	8001f14 <HAL_GetTick>
 8005348:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800534a:	e009      	b.n	8005360 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800534c:	f7fc fde2 	bl	8001f14 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d902      	bls.n	8005360 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	73fb      	strb	r3, [r7, #15]
          break;
 800535e:	e005      	b.n	800536c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005360:	4b0a      	ldr	r3, [pc, #40]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0ef      	beq.n	800534c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005372:	4b06      	ldr	r3, [pc, #24]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005374:	695a      	ldr	r2, [r3, #20]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	4904      	ldr	r1, [pc, #16]	@ (800538c <RCCEx_PLLSAI2_Config+0x1b8>)
 800537c:	4313      	orrs	r3, r2
 800537e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	40021000 	.word	0x40021000

08005390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e049      	b.n	8005436 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fc fb1c 	bl	80019f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3304      	adds	r3, #4
 80053cc:	4619      	mov	r1, r3
 80053ce:	4610      	mov	r0, r2
 80053d0:	f000 fb10 	bl	80059f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b01      	cmp	r3, #1
 8005452:	d001      	beq.n	8005458 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e047      	b.n	80054e8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a23      	ldr	r2, [pc, #140]	@ (80054f4 <HAL_TIM_Base_Start+0xb4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d01d      	beq.n	80054a6 <HAL_TIM_Base_Start+0x66>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005472:	d018      	beq.n	80054a6 <HAL_TIM_Base_Start+0x66>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1f      	ldr	r2, [pc, #124]	@ (80054f8 <HAL_TIM_Base_Start+0xb8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d013      	beq.n	80054a6 <HAL_TIM_Base_Start+0x66>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1e      	ldr	r2, [pc, #120]	@ (80054fc <HAL_TIM_Base_Start+0xbc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00e      	beq.n	80054a6 <HAL_TIM_Base_Start+0x66>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1c      	ldr	r2, [pc, #112]	@ (8005500 <HAL_TIM_Base_Start+0xc0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d009      	beq.n	80054a6 <HAL_TIM_Base_Start+0x66>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1b      	ldr	r2, [pc, #108]	@ (8005504 <HAL_TIM_Base_Start+0xc4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d004      	beq.n	80054a6 <HAL_TIM_Base_Start+0x66>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a19      	ldr	r2, [pc, #100]	@ (8005508 <HAL_TIM_Base_Start+0xc8>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d115      	bne.n	80054d2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	4b17      	ldr	r3, [pc, #92]	@ (800550c <HAL_TIM_Base_Start+0xcc>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b06      	cmp	r3, #6
 80054b6:	d015      	beq.n	80054e4 <HAL_TIM_Base_Start+0xa4>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054be:	d011      	beq.n	80054e4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0201 	orr.w	r2, r2, #1
 80054ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d0:	e008      	b.n	80054e4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0201 	orr.w	r2, r2, #1
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	e000      	b.n	80054e6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	40012c00 	.word	0x40012c00
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	40013400 	.word	0x40013400
 8005508:	40014000 	.word	0x40014000
 800550c:	00010007 	.word	0x00010007

08005510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b01      	cmp	r3, #1
 8005522:	d001      	beq.n	8005528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e04f      	b.n	80055c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0201 	orr.w	r2, r2, #1
 800553e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a23      	ldr	r2, [pc, #140]	@ (80055d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d01d      	beq.n	8005586 <HAL_TIM_Base_Start_IT+0x76>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005552:	d018      	beq.n	8005586 <HAL_TIM_Base_Start_IT+0x76>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1f      	ldr	r2, [pc, #124]	@ (80055d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <HAL_TIM_Base_Start_IT+0x76>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1e      	ldr	r2, [pc, #120]	@ (80055dc <HAL_TIM_Base_Start_IT+0xcc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00e      	beq.n	8005586 <HAL_TIM_Base_Start_IT+0x76>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1c      	ldr	r2, [pc, #112]	@ (80055e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d009      	beq.n	8005586 <HAL_TIM_Base_Start_IT+0x76>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1b      	ldr	r2, [pc, #108]	@ (80055e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d004      	beq.n	8005586 <HAL_TIM_Base_Start_IT+0x76>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a19      	ldr	r2, [pc, #100]	@ (80055e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d115      	bne.n	80055b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	4b17      	ldr	r3, [pc, #92]	@ (80055ec <HAL_TIM_Base_Start_IT+0xdc>)
 800558e:	4013      	ands	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b06      	cmp	r3, #6
 8005596:	d015      	beq.n	80055c4 <HAL_TIM_Base_Start_IT+0xb4>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800559e:	d011      	beq.n	80055c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b0:	e008      	b.n	80055c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0201 	orr.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	e000      	b.n	80055c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	40012c00 	.word	0x40012c00
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800
 80055e0:	40000c00 	.word	0x40000c00
 80055e4:	40013400 	.word	0x40013400
 80055e8:	40014000 	.word	0x40014000
 80055ec:	00010007 	.word	0x00010007

080055f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d020      	beq.n	8005654 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01b      	beq.n	8005654 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0202 	mvn.w	r2, #2
 8005624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9bc 	bl	80059b8 <HAL_TIM_IC_CaptureCallback>
 8005640:	e005      	b.n	800564e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f9ae 	bl	80059a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f9bf 	bl	80059cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f003 0304 	and.w	r3, r3, #4
 800565a:	2b00      	cmp	r3, #0
 800565c:	d020      	beq.n	80056a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01b      	beq.n	80056a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0204 	mvn.w	r2, #4
 8005670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2202      	movs	r2, #2
 8005676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f996 	bl	80059b8 <HAL_TIM_IC_CaptureCallback>
 800568c:	e005      	b.n	800569a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f988 	bl	80059a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f999 	bl	80059cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d020      	beq.n	80056ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f003 0308 	and.w	r3, r3, #8
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01b      	beq.n	80056ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f06f 0208 	mvn.w	r2, #8
 80056bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2204      	movs	r2, #4
 80056c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f970 	bl	80059b8 <HAL_TIM_IC_CaptureCallback>
 80056d8:	e005      	b.n	80056e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f962 	bl	80059a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f973 	bl	80059cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 0310 	and.w	r3, r3, #16
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d020      	beq.n	8005738 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01b      	beq.n	8005738 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0210 	mvn.w	r2, #16
 8005708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2208      	movs	r2, #8
 800570e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f94a 	bl	80059b8 <HAL_TIM_IC_CaptureCallback>
 8005724:	e005      	b.n	8005732 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f93c 	bl	80059a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f94d 	bl	80059cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00c      	beq.n	800575c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d007      	beq.n	800575c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0201 	mvn.w	r2, #1
 8005754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f91a 	bl	8005990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005762:	2b00      	cmp	r3, #0
 8005764:	d104      	bne.n	8005770 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00c      	beq.n	800578a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fb07 	bl	8005d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00c      	beq.n	80057ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800579a:	2b00      	cmp	r3, #0
 800579c:	d007      	beq.n	80057ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80057a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 faff 	bl	8005dac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00c      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d007      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f907 	bl	80059e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00c      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d007      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f06f 0220 	mvn.w	r2, #32
 80057ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fac7 	bl	8005d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057f6:	bf00      	nop
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <HAL_TIM_ConfigClockSource+0x1c>
 8005816:	2302      	movs	r3, #2
 8005818:	e0b6      	b.n	8005988 <HAL_TIM_ConfigClockSource+0x18a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2202      	movs	r2, #2
 8005826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005838:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800583c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005844:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005856:	d03e      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0xd8>
 8005858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800585c:	f200 8087 	bhi.w	800596e <HAL_TIM_ConfigClockSource+0x170>
 8005860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005864:	f000 8086 	beq.w	8005974 <HAL_TIM_ConfigClockSource+0x176>
 8005868:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800586c:	d87f      	bhi.n	800596e <HAL_TIM_ConfigClockSource+0x170>
 800586e:	2b70      	cmp	r3, #112	@ 0x70
 8005870:	d01a      	beq.n	80058a8 <HAL_TIM_ConfigClockSource+0xaa>
 8005872:	2b70      	cmp	r3, #112	@ 0x70
 8005874:	d87b      	bhi.n	800596e <HAL_TIM_ConfigClockSource+0x170>
 8005876:	2b60      	cmp	r3, #96	@ 0x60
 8005878:	d050      	beq.n	800591c <HAL_TIM_ConfigClockSource+0x11e>
 800587a:	2b60      	cmp	r3, #96	@ 0x60
 800587c:	d877      	bhi.n	800596e <HAL_TIM_ConfigClockSource+0x170>
 800587e:	2b50      	cmp	r3, #80	@ 0x50
 8005880:	d03c      	beq.n	80058fc <HAL_TIM_ConfigClockSource+0xfe>
 8005882:	2b50      	cmp	r3, #80	@ 0x50
 8005884:	d873      	bhi.n	800596e <HAL_TIM_ConfigClockSource+0x170>
 8005886:	2b40      	cmp	r3, #64	@ 0x40
 8005888:	d058      	beq.n	800593c <HAL_TIM_ConfigClockSource+0x13e>
 800588a:	2b40      	cmp	r3, #64	@ 0x40
 800588c:	d86f      	bhi.n	800596e <HAL_TIM_ConfigClockSource+0x170>
 800588e:	2b30      	cmp	r3, #48	@ 0x30
 8005890:	d064      	beq.n	800595c <HAL_TIM_ConfigClockSource+0x15e>
 8005892:	2b30      	cmp	r3, #48	@ 0x30
 8005894:	d86b      	bhi.n	800596e <HAL_TIM_ConfigClockSource+0x170>
 8005896:	2b20      	cmp	r3, #32
 8005898:	d060      	beq.n	800595c <HAL_TIM_ConfigClockSource+0x15e>
 800589a:	2b20      	cmp	r3, #32
 800589c:	d867      	bhi.n	800596e <HAL_TIM_ConfigClockSource+0x170>
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d05c      	beq.n	800595c <HAL_TIM_ConfigClockSource+0x15e>
 80058a2:	2b10      	cmp	r3, #16
 80058a4:	d05a      	beq.n	800595c <HAL_TIM_ConfigClockSource+0x15e>
 80058a6:	e062      	b.n	800596e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058b8:	f000 f9bc 	bl	8005c34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	609a      	str	r2, [r3, #8]
      break;
 80058d4:	e04f      	b.n	8005976 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058e6:	f000 f9a5 	bl	8005c34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058f8:	609a      	str	r2, [r3, #8]
      break;
 80058fa:	e03c      	b.n	8005976 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005908:	461a      	mov	r2, r3
 800590a:	f000 f919 	bl	8005b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2150      	movs	r1, #80	@ 0x50
 8005914:	4618      	mov	r0, r3
 8005916:	f000 f972 	bl	8005bfe <TIM_ITRx_SetConfig>
      break;
 800591a:	e02c      	b.n	8005976 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005928:	461a      	mov	r2, r3
 800592a:	f000 f938 	bl	8005b9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2160      	movs	r1, #96	@ 0x60
 8005934:	4618      	mov	r0, r3
 8005936:	f000 f962 	bl	8005bfe <TIM_ITRx_SetConfig>
      break;
 800593a:	e01c      	b.n	8005976 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005948:	461a      	mov	r2, r3
 800594a:	f000 f8f9 	bl	8005b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2140      	movs	r1, #64	@ 0x40
 8005954:	4618      	mov	r0, r3
 8005956:	f000 f952 	bl	8005bfe <TIM_ITRx_SetConfig>
      break;
 800595a:	e00c      	b.n	8005976 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f000 f949 	bl	8005bfe <TIM_ITRx_SetConfig>
      break;
 800596c:	e003      	b.n	8005976 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	73fb      	strb	r3, [r7, #15]
      break;
 8005972:	e000      	b.n	8005976 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005974:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005986:	7bfb      	ldrb	r3, [r7, #15]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a46      	ldr	r2, [pc, #280]	@ (8005b20 <TIM_Base_SetConfig+0x12c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d013      	beq.n	8005a34 <TIM_Base_SetConfig+0x40>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a12:	d00f      	beq.n	8005a34 <TIM_Base_SetConfig+0x40>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a43      	ldr	r2, [pc, #268]	@ (8005b24 <TIM_Base_SetConfig+0x130>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00b      	beq.n	8005a34 <TIM_Base_SetConfig+0x40>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a42      	ldr	r2, [pc, #264]	@ (8005b28 <TIM_Base_SetConfig+0x134>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d007      	beq.n	8005a34 <TIM_Base_SetConfig+0x40>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a41      	ldr	r2, [pc, #260]	@ (8005b2c <TIM_Base_SetConfig+0x138>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_Base_SetConfig+0x40>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a40      	ldr	r2, [pc, #256]	@ (8005b30 <TIM_Base_SetConfig+0x13c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d108      	bne.n	8005a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a35      	ldr	r2, [pc, #212]	@ (8005b20 <TIM_Base_SetConfig+0x12c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01f      	beq.n	8005a8e <TIM_Base_SetConfig+0x9a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a54:	d01b      	beq.n	8005a8e <TIM_Base_SetConfig+0x9a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a32      	ldr	r2, [pc, #200]	@ (8005b24 <TIM_Base_SetConfig+0x130>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d017      	beq.n	8005a8e <TIM_Base_SetConfig+0x9a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a31      	ldr	r2, [pc, #196]	@ (8005b28 <TIM_Base_SetConfig+0x134>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d013      	beq.n	8005a8e <TIM_Base_SetConfig+0x9a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a30      	ldr	r2, [pc, #192]	@ (8005b2c <TIM_Base_SetConfig+0x138>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00f      	beq.n	8005a8e <TIM_Base_SetConfig+0x9a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a2f      	ldr	r2, [pc, #188]	@ (8005b30 <TIM_Base_SetConfig+0x13c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00b      	beq.n	8005a8e <TIM_Base_SetConfig+0x9a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a2e      	ldr	r2, [pc, #184]	@ (8005b34 <TIM_Base_SetConfig+0x140>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d007      	beq.n	8005a8e <TIM_Base_SetConfig+0x9a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a2d      	ldr	r2, [pc, #180]	@ (8005b38 <TIM_Base_SetConfig+0x144>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d003      	beq.n	8005a8e <TIM_Base_SetConfig+0x9a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a2c      	ldr	r2, [pc, #176]	@ (8005b3c <TIM_Base_SetConfig+0x148>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d108      	bne.n	8005aa0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a16      	ldr	r2, [pc, #88]	@ (8005b20 <TIM_Base_SetConfig+0x12c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00f      	beq.n	8005aec <TIM_Base_SetConfig+0xf8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a18      	ldr	r2, [pc, #96]	@ (8005b30 <TIM_Base_SetConfig+0x13c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00b      	beq.n	8005aec <TIM_Base_SetConfig+0xf8>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a17      	ldr	r2, [pc, #92]	@ (8005b34 <TIM_Base_SetConfig+0x140>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d007      	beq.n	8005aec <TIM_Base_SetConfig+0xf8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a16      	ldr	r2, [pc, #88]	@ (8005b38 <TIM_Base_SetConfig+0x144>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <TIM_Base_SetConfig+0xf8>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a15      	ldr	r2, [pc, #84]	@ (8005b3c <TIM_Base_SetConfig+0x148>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d103      	bne.n	8005af4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d105      	bne.n	8005b12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f023 0201 	bic.w	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	611a      	str	r2, [r3, #16]
  }
}
 8005b12:	bf00      	nop
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40012c00 	.word	0x40012c00
 8005b24:	40000400 	.word	0x40000400
 8005b28:	40000800 	.word	0x40000800
 8005b2c:	40000c00 	.word	0x40000c00
 8005b30:	40013400 	.word	0x40013400
 8005b34:	40014000 	.word	0x40014000
 8005b38:	40014400 	.word	0x40014400
 8005b3c:	40014800 	.word	0x40014800

08005b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f023 0201 	bic.w	r2, r3, #1
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f023 030a 	bic.w	r3, r3, #10
 8005b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	621a      	str	r2, [r3, #32]
}
 8005b92:	bf00      	nop
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b087      	sub	sp, #28
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	f023 0210 	bic.w	r2, r3, #16
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	031b      	lsls	r3, r3, #12
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	621a      	str	r2, [r3, #32]
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f043 0307 	orr.w	r3, r3, #7
 8005c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	609a      	str	r2, [r3, #8]
}
 8005c28:	bf00      	nop
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	021a      	lsls	r2, r3, #8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	431a      	orrs	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	609a      	str	r2, [r3, #8]
}
 8005c68:	bf00      	nop
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e068      	b.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a2e      	ldr	r2, [pc, #184]	@ (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d004      	beq.n	8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a2d      	ldr	r2, [pc, #180]	@ (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d108      	bne.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005cc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a1e      	ldr	r2, [pc, #120]	@ (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d01d      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cfe:	d018      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1b      	ldr	r2, [pc, #108]	@ (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d013      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1a      	ldr	r2, [pc, #104]	@ (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00e      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a18      	ldr	r2, [pc, #96]	@ (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d009      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a13      	ldr	r2, [pc, #76]	@ (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a14      	ldr	r2, [pc, #80]	@ (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d10c      	bne.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40012c00 	.word	0x40012c00
 8005d70:	40013400 	.word	0x40013400
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40000800 	.word	0x40000800
 8005d7c:	40000c00 	.word	0x40000c00
 8005d80:	40014000 	.word	0x40014000

08005d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e040      	b.n	8005e54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fb fe9e 	bl	8001b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2224      	movs	r2, #36	@ 0x24
 8005dec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0201 	bic.w	r2, r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fcd2 	bl	80067b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fa17 	bl	8006240 <UART_SetConfig>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e01b      	b.n	8005e54 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0201 	orr.w	r2, r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fd51 	bl	80068f4 <UART_CheckIdleState>
 8005e52:	4603      	mov	r3, r0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08a      	sub	sp, #40	@ 0x28
 8005e60:	af02      	add	r7, sp, #8
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	603b      	str	r3, [r7, #0]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e70:	2b20      	cmp	r3, #32
 8005e72:	d177      	bne.n	8005f64 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <HAL_UART_Transmit+0x24>
 8005e7a:	88fb      	ldrh	r3, [r7, #6]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e070      	b.n	8005f66 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2221      	movs	r2, #33	@ 0x21
 8005e90:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e92:	f7fc f83f 	bl	8001f14 <HAL_GetTick>
 8005e96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	88fa      	ldrh	r2, [r7, #6]
 8005e9c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	88fa      	ldrh	r2, [r7, #6]
 8005ea4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eb0:	d108      	bne.n	8005ec4 <HAL_UART_Transmit+0x68>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d104      	bne.n	8005ec4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	61bb      	str	r3, [r7, #24]
 8005ec2:	e003      	b.n	8005ecc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ecc:	e02f      	b.n	8005f2e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	2180      	movs	r1, #128	@ 0x80
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 fdb3 	bl	8006a44 <UART_WaitOnFlagUntilTimeout>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d004      	beq.n	8005eee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e03b      	b.n	8005f66 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10b      	bne.n	8005f0c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	881a      	ldrh	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f00:	b292      	uxth	r2, r2
 8005f02:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	3302      	adds	r3, #2
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	e007      	b.n	8005f1c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	781a      	ldrb	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1c9      	bne.n	8005ece <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2200      	movs	r2, #0
 8005f42:	2140      	movs	r1, #64	@ 0x40
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fd7d 	bl	8006a44 <UART_WaitOnFlagUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d004      	beq.n	8005f5a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2220      	movs	r2, #32
 8005f54:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e005      	b.n	8005f66 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	e000      	b.n	8005f66 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005f64:	2302      	movs	r3, #2
  }
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3720      	adds	r7, #32
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08a      	sub	sp, #40	@ 0x28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d137      	bne.n	8005ff8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <HAL_UART_Receive_DMA+0x24>
 8005f8e:	88fb      	ldrh	r3, [r7, #6]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e030      	b.n	8005ffa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a18      	ldr	r2, [pc, #96]	@ (8006004 <HAL_UART_Receive_DMA+0x94>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d01f      	beq.n	8005fe8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d018      	beq.n	8005fe8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd4:	623b      	str	r3, [r7, #32]
 8005fd6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	69f9      	ldr	r1, [r7, #28]
 8005fda:	6a3a      	ldr	r2, [r7, #32]
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e6      	bne.n	8005fb6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005fe8:	88fb      	ldrh	r3, [r7, #6]
 8005fea:	461a      	mov	r2, r3
 8005fec:	68b9      	ldr	r1, [r7, #8]
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fd96 	bl	8006b20 <UART_Start_Receive_DMA>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	e000      	b.n	8005ffa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ff8:	2302      	movs	r3, #2
  }
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3728      	adds	r7, #40	@ 0x28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	40008000 	.word	0x40008000

08006008 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b0a0      	sub	sp, #128	@ 0x80
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800601e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006020:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8006024:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800602e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006030:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006034:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800603c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1e6      	bne.n	8006010 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3308      	adds	r3, #8
 8006048:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006054:	f023 0301 	bic.w	r3, r3, #1
 8006058:	67bb      	str	r3, [r7, #120]	@ 0x78
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3308      	adds	r3, #8
 8006060:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006062:	657a      	str	r2, [r7, #84]	@ 0x54
 8006064:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006066:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006068:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800606a:	e841 2300 	strex	r3, r2, [r1]
 800606e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1e5      	bne.n	8006042 <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800607a:	2b01      	cmp	r3, #1
 800607c:	d118      	bne.n	80060b0 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006086:	e853 3f00 	ldrex	r3, [r3]
 800608a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800608c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608e:	f023 0310 	bic.w	r3, r3, #16
 8006092:	677b      	str	r3, [r7, #116]	@ 0x74
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800609c:	643b      	str	r3, [r7, #64]	@ 0x40
 800609e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060a4:	e841 2300 	strex	r3, r2, [r1]
 80060a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e6      	bne.n	800607e <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ba:	2b80      	cmp	r3, #128	@ 0x80
 80060bc:	d137      	bne.n	800612e <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3308      	adds	r3, #8
 80060c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3308      	adds	r3, #8
 80060dc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80060de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e5      	bne.n	80060be <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d019      	beq.n	800612e <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060fe:	2200      	movs	r2, #0
 8006100:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006106:	4618      	mov	r0, r3
 8006108:	f7fd fb36 	bl	8003778 <HAL_DMA_Abort>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00d      	beq.n	800612e <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006116:	4618      	mov	r0, r3
 8006118:	f7fd fc1b 	bl	8003952 <HAL_DMA_GetError>
 800611c:	4603      	mov	r3, r0
 800611e:	2b20      	cmp	r3, #32
 8006120:	d105      	bne.n	800612e <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2210      	movs	r2, #16
 8006126:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e063      	b.n	80061f6 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006138:	2b40      	cmp	r3, #64	@ 0x40
 800613a:	d137      	bne.n	80061ac <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3308      	adds	r3, #8
 8006142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	e853 3f00 	ldrex	r3, [r3]
 800614a:	60bb      	str	r3, [r7, #8]
   return(result);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006152:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3308      	adds	r3, #8
 800615a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800615c:	61ba      	str	r2, [r7, #24]
 800615e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006160:	6979      	ldr	r1, [r7, #20]
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	613b      	str	r3, [r7, #16]
   return(result);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e5      	bne.n	800613c <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006174:	2b00      	cmp	r3, #0
 8006176:	d019      	beq.n	80061ac <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800617c:	2200      	movs	r2, #0
 800617e:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006184:	4618      	mov	r0, r3
 8006186:	f7fd faf7 	bl	8003778 <HAL_DMA_Abort>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00d      	beq.n	80061ac <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006194:	4618      	mov	r0, r3
 8006196:	f7fd fbdc 	bl	8003952 <HAL_DMA_GetError>
 800619a:	4603      	mov	r3, r0
 800619c:	2b20      	cmp	r3, #32
 800619e:	d105      	bne.n	80061ac <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2210      	movs	r2, #16
 80061a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e024      	b.n	80061f6 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  huart->RxXferCount = 0U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	220f      	movs	r2, #15
 80061c2:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	8b1b      	ldrh	r3, [r3, #24]
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f042 0208 	orr.w	r2, r2, #8
 80061d4:	b292      	uxth	r2, r2
 80061d6:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	661a      	str	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3780      	adds	r7, #128	@ 0x80
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	460b      	mov	r3, r1
 8006230:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
	...

08006240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006244:	b08a      	sub	sp, #40	@ 0x28
 8006246:	af00      	add	r7, sp, #0
 8006248:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	431a      	orrs	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	431a      	orrs	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	4313      	orrs	r3, r2
 8006266:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	4ba4      	ldr	r3, [pc, #656]	@ (8006500 <UART_SetConfig+0x2c0>)
 8006270:	4013      	ands	r3, r2
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	6812      	ldr	r2, [r2, #0]
 8006276:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006278:	430b      	orrs	r3, r1
 800627a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a99      	ldr	r2, [pc, #612]	@ (8006504 <UART_SetConfig+0x2c4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d004      	beq.n	80062ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a8:	4313      	orrs	r3, r2
 80062aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062bc:	430a      	orrs	r2, r1
 80062be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a90      	ldr	r2, [pc, #576]	@ (8006508 <UART_SetConfig+0x2c8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d126      	bne.n	8006318 <UART_SetConfig+0xd8>
 80062ca:	4b90      	ldr	r3, [pc, #576]	@ (800650c <UART_SetConfig+0x2cc>)
 80062cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d0:	f003 0303 	and.w	r3, r3, #3
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d81b      	bhi.n	8006310 <UART_SetConfig+0xd0>
 80062d8:	a201      	add	r2, pc, #4	@ (adr r2, 80062e0 <UART_SetConfig+0xa0>)
 80062da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062de:	bf00      	nop
 80062e0:	080062f1 	.word	0x080062f1
 80062e4:	08006301 	.word	0x08006301
 80062e8:	080062f9 	.word	0x080062f9
 80062ec:	08006309 	.word	0x08006309
 80062f0:	2301      	movs	r3, #1
 80062f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062f6:	e116      	b.n	8006526 <UART_SetConfig+0x2e6>
 80062f8:	2302      	movs	r3, #2
 80062fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062fe:	e112      	b.n	8006526 <UART_SetConfig+0x2e6>
 8006300:	2304      	movs	r3, #4
 8006302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006306:	e10e      	b.n	8006526 <UART_SetConfig+0x2e6>
 8006308:	2308      	movs	r3, #8
 800630a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800630e:	e10a      	b.n	8006526 <UART_SetConfig+0x2e6>
 8006310:	2310      	movs	r3, #16
 8006312:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006316:	e106      	b.n	8006526 <UART_SetConfig+0x2e6>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a7c      	ldr	r2, [pc, #496]	@ (8006510 <UART_SetConfig+0x2d0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d138      	bne.n	8006394 <UART_SetConfig+0x154>
 8006322:	4b7a      	ldr	r3, [pc, #488]	@ (800650c <UART_SetConfig+0x2cc>)
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006328:	f003 030c 	and.w	r3, r3, #12
 800632c:	2b0c      	cmp	r3, #12
 800632e:	d82d      	bhi.n	800638c <UART_SetConfig+0x14c>
 8006330:	a201      	add	r2, pc, #4	@ (adr r2, 8006338 <UART_SetConfig+0xf8>)
 8006332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006336:	bf00      	nop
 8006338:	0800636d 	.word	0x0800636d
 800633c:	0800638d 	.word	0x0800638d
 8006340:	0800638d 	.word	0x0800638d
 8006344:	0800638d 	.word	0x0800638d
 8006348:	0800637d 	.word	0x0800637d
 800634c:	0800638d 	.word	0x0800638d
 8006350:	0800638d 	.word	0x0800638d
 8006354:	0800638d 	.word	0x0800638d
 8006358:	08006375 	.word	0x08006375
 800635c:	0800638d 	.word	0x0800638d
 8006360:	0800638d 	.word	0x0800638d
 8006364:	0800638d 	.word	0x0800638d
 8006368:	08006385 	.word	0x08006385
 800636c:	2300      	movs	r3, #0
 800636e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006372:	e0d8      	b.n	8006526 <UART_SetConfig+0x2e6>
 8006374:	2302      	movs	r3, #2
 8006376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800637a:	e0d4      	b.n	8006526 <UART_SetConfig+0x2e6>
 800637c:	2304      	movs	r3, #4
 800637e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006382:	e0d0      	b.n	8006526 <UART_SetConfig+0x2e6>
 8006384:	2308      	movs	r3, #8
 8006386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800638a:	e0cc      	b.n	8006526 <UART_SetConfig+0x2e6>
 800638c:	2310      	movs	r3, #16
 800638e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006392:	e0c8      	b.n	8006526 <UART_SetConfig+0x2e6>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a5e      	ldr	r2, [pc, #376]	@ (8006514 <UART_SetConfig+0x2d4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d125      	bne.n	80063ea <UART_SetConfig+0x1aa>
 800639e:	4b5b      	ldr	r3, [pc, #364]	@ (800650c <UART_SetConfig+0x2cc>)
 80063a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80063a8:	2b30      	cmp	r3, #48	@ 0x30
 80063aa:	d016      	beq.n	80063da <UART_SetConfig+0x19a>
 80063ac:	2b30      	cmp	r3, #48	@ 0x30
 80063ae:	d818      	bhi.n	80063e2 <UART_SetConfig+0x1a2>
 80063b0:	2b20      	cmp	r3, #32
 80063b2:	d00a      	beq.n	80063ca <UART_SetConfig+0x18a>
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d814      	bhi.n	80063e2 <UART_SetConfig+0x1a2>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <UART_SetConfig+0x182>
 80063bc:	2b10      	cmp	r3, #16
 80063be:	d008      	beq.n	80063d2 <UART_SetConfig+0x192>
 80063c0:	e00f      	b.n	80063e2 <UART_SetConfig+0x1a2>
 80063c2:	2300      	movs	r3, #0
 80063c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063c8:	e0ad      	b.n	8006526 <UART_SetConfig+0x2e6>
 80063ca:	2302      	movs	r3, #2
 80063cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063d0:	e0a9      	b.n	8006526 <UART_SetConfig+0x2e6>
 80063d2:	2304      	movs	r3, #4
 80063d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063d8:	e0a5      	b.n	8006526 <UART_SetConfig+0x2e6>
 80063da:	2308      	movs	r3, #8
 80063dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063e0:	e0a1      	b.n	8006526 <UART_SetConfig+0x2e6>
 80063e2:	2310      	movs	r3, #16
 80063e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063e8:	e09d      	b.n	8006526 <UART_SetConfig+0x2e6>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a4a      	ldr	r2, [pc, #296]	@ (8006518 <UART_SetConfig+0x2d8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d125      	bne.n	8006440 <UART_SetConfig+0x200>
 80063f4:	4b45      	ldr	r3, [pc, #276]	@ (800650c <UART_SetConfig+0x2cc>)
 80063f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80063fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8006400:	d016      	beq.n	8006430 <UART_SetConfig+0x1f0>
 8006402:	2bc0      	cmp	r3, #192	@ 0xc0
 8006404:	d818      	bhi.n	8006438 <UART_SetConfig+0x1f8>
 8006406:	2b80      	cmp	r3, #128	@ 0x80
 8006408:	d00a      	beq.n	8006420 <UART_SetConfig+0x1e0>
 800640a:	2b80      	cmp	r3, #128	@ 0x80
 800640c:	d814      	bhi.n	8006438 <UART_SetConfig+0x1f8>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <UART_SetConfig+0x1d8>
 8006412:	2b40      	cmp	r3, #64	@ 0x40
 8006414:	d008      	beq.n	8006428 <UART_SetConfig+0x1e8>
 8006416:	e00f      	b.n	8006438 <UART_SetConfig+0x1f8>
 8006418:	2300      	movs	r3, #0
 800641a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800641e:	e082      	b.n	8006526 <UART_SetConfig+0x2e6>
 8006420:	2302      	movs	r3, #2
 8006422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006426:	e07e      	b.n	8006526 <UART_SetConfig+0x2e6>
 8006428:	2304      	movs	r3, #4
 800642a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800642e:	e07a      	b.n	8006526 <UART_SetConfig+0x2e6>
 8006430:	2308      	movs	r3, #8
 8006432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006436:	e076      	b.n	8006526 <UART_SetConfig+0x2e6>
 8006438:	2310      	movs	r3, #16
 800643a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800643e:	e072      	b.n	8006526 <UART_SetConfig+0x2e6>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a35      	ldr	r2, [pc, #212]	@ (800651c <UART_SetConfig+0x2dc>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d12a      	bne.n	80064a0 <UART_SetConfig+0x260>
 800644a:	4b30      	ldr	r3, [pc, #192]	@ (800650c <UART_SetConfig+0x2cc>)
 800644c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006450:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006454:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006458:	d01a      	beq.n	8006490 <UART_SetConfig+0x250>
 800645a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800645e:	d81b      	bhi.n	8006498 <UART_SetConfig+0x258>
 8006460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006464:	d00c      	beq.n	8006480 <UART_SetConfig+0x240>
 8006466:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800646a:	d815      	bhi.n	8006498 <UART_SetConfig+0x258>
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <UART_SetConfig+0x238>
 8006470:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006474:	d008      	beq.n	8006488 <UART_SetConfig+0x248>
 8006476:	e00f      	b.n	8006498 <UART_SetConfig+0x258>
 8006478:	2300      	movs	r3, #0
 800647a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800647e:	e052      	b.n	8006526 <UART_SetConfig+0x2e6>
 8006480:	2302      	movs	r3, #2
 8006482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006486:	e04e      	b.n	8006526 <UART_SetConfig+0x2e6>
 8006488:	2304      	movs	r3, #4
 800648a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800648e:	e04a      	b.n	8006526 <UART_SetConfig+0x2e6>
 8006490:	2308      	movs	r3, #8
 8006492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006496:	e046      	b.n	8006526 <UART_SetConfig+0x2e6>
 8006498:	2310      	movs	r3, #16
 800649a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800649e:	e042      	b.n	8006526 <UART_SetConfig+0x2e6>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a17      	ldr	r2, [pc, #92]	@ (8006504 <UART_SetConfig+0x2c4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d13a      	bne.n	8006520 <UART_SetConfig+0x2e0>
 80064aa:	4b18      	ldr	r3, [pc, #96]	@ (800650c <UART_SetConfig+0x2cc>)
 80064ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80064b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064b8:	d01a      	beq.n	80064f0 <UART_SetConfig+0x2b0>
 80064ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064be:	d81b      	bhi.n	80064f8 <UART_SetConfig+0x2b8>
 80064c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064c4:	d00c      	beq.n	80064e0 <UART_SetConfig+0x2a0>
 80064c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064ca:	d815      	bhi.n	80064f8 <UART_SetConfig+0x2b8>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <UART_SetConfig+0x298>
 80064d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064d4:	d008      	beq.n	80064e8 <UART_SetConfig+0x2a8>
 80064d6:	e00f      	b.n	80064f8 <UART_SetConfig+0x2b8>
 80064d8:	2300      	movs	r3, #0
 80064da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064de:	e022      	b.n	8006526 <UART_SetConfig+0x2e6>
 80064e0:	2302      	movs	r3, #2
 80064e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064e6:	e01e      	b.n	8006526 <UART_SetConfig+0x2e6>
 80064e8:	2304      	movs	r3, #4
 80064ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ee:	e01a      	b.n	8006526 <UART_SetConfig+0x2e6>
 80064f0:	2308      	movs	r3, #8
 80064f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064f6:	e016      	b.n	8006526 <UART_SetConfig+0x2e6>
 80064f8:	2310      	movs	r3, #16
 80064fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064fe:	e012      	b.n	8006526 <UART_SetConfig+0x2e6>
 8006500:	efff69f3 	.word	0xefff69f3
 8006504:	40008000 	.word	0x40008000
 8006508:	40013800 	.word	0x40013800
 800650c:	40021000 	.word	0x40021000
 8006510:	40004400 	.word	0x40004400
 8006514:	40004800 	.word	0x40004800
 8006518:	40004c00 	.word	0x40004c00
 800651c:	40005000 	.word	0x40005000
 8006520:	2310      	movs	r3, #16
 8006522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a9f      	ldr	r2, [pc, #636]	@ (80067a8 <UART_SetConfig+0x568>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d17a      	bne.n	8006626 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006530:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006534:	2b08      	cmp	r3, #8
 8006536:	d824      	bhi.n	8006582 <UART_SetConfig+0x342>
 8006538:	a201      	add	r2, pc, #4	@ (adr r2, 8006540 <UART_SetConfig+0x300>)
 800653a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653e:	bf00      	nop
 8006540:	08006565 	.word	0x08006565
 8006544:	08006583 	.word	0x08006583
 8006548:	0800656d 	.word	0x0800656d
 800654c:	08006583 	.word	0x08006583
 8006550:	08006573 	.word	0x08006573
 8006554:	08006583 	.word	0x08006583
 8006558:	08006583 	.word	0x08006583
 800655c:	08006583 	.word	0x08006583
 8006560:	0800657b 	.word	0x0800657b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006564:	f7fe f9cc 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 8006568:	61f8      	str	r0, [r7, #28]
        break;
 800656a:	e010      	b.n	800658e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800656c:	4b8f      	ldr	r3, [pc, #572]	@ (80067ac <UART_SetConfig+0x56c>)
 800656e:	61fb      	str	r3, [r7, #28]
        break;
 8006570:	e00d      	b.n	800658e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006572:	f7fe f92d 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 8006576:	61f8      	str	r0, [r7, #28]
        break;
 8006578:	e009      	b.n	800658e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800657a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800657e:	61fb      	str	r3, [r7, #28]
        break;
 8006580:	e005      	b.n	800658e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800658c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 80fb 	beq.w	800678c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	4613      	mov	r3, r2
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	4413      	add	r3, r2
 80065a0:	69fa      	ldr	r2, [r7, #28]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d305      	bcc.n	80065b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065ac:	69fa      	ldr	r2, [r7, #28]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d903      	bls.n	80065ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80065b8:	e0e8      	b.n	800678c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	2200      	movs	r2, #0
 80065be:	461c      	mov	r4, r3
 80065c0:	4615      	mov	r5, r2
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	f04f 0300 	mov.w	r3, #0
 80065ca:	022b      	lsls	r3, r5, #8
 80065cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80065d0:	0222      	lsls	r2, r4, #8
 80065d2:	68f9      	ldr	r1, [r7, #12]
 80065d4:	6849      	ldr	r1, [r1, #4]
 80065d6:	0849      	lsrs	r1, r1, #1
 80065d8:	2000      	movs	r0, #0
 80065da:	4688      	mov	r8, r1
 80065dc:	4681      	mov	r9, r0
 80065de:	eb12 0a08 	adds.w	sl, r2, r8
 80065e2:	eb43 0b09 	adc.w	fp, r3, r9
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	603b      	str	r3, [r7, #0]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065f4:	4650      	mov	r0, sl
 80065f6:	4659      	mov	r1, fp
 80065f8:	f7fa fb46 	bl	8000c88 <__aeabi_uldivmod>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4613      	mov	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800660a:	d308      	bcc.n	800661e <UART_SetConfig+0x3de>
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006612:	d204      	bcs.n	800661e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	60da      	str	r2, [r3, #12]
 800661c:	e0b6      	b.n	800678c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006624:	e0b2      	b.n	800678c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800662e:	d15e      	bne.n	80066ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006630:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006634:	2b08      	cmp	r3, #8
 8006636:	d828      	bhi.n	800668a <UART_SetConfig+0x44a>
 8006638:	a201      	add	r2, pc, #4	@ (adr r2, 8006640 <UART_SetConfig+0x400>)
 800663a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663e:	bf00      	nop
 8006640:	08006665 	.word	0x08006665
 8006644:	0800666d 	.word	0x0800666d
 8006648:	08006675 	.word	0x08006675
 800664c:	0800668b 	.word	0x0800668b
 8006650:	0800667b 	.word	0x0800667b
 8006654:	0800668b 	.word	0x0800668b
 8006658:	0800668b 	.word	0x0800668b
 800665c:	0800668b 	.word	0x0800668b
 8006660:	08006683 	.word	0x08006683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006664:	f7fe f94c 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 8006668:	61f8      	str	r0, [r7, #28]
        break;
 800666a:	e014      	b.n	8006696 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800666c:	f7fe f95e 	bl	800492c <HAL_RCC_GetPCLK2Freq>
 8006670:	61f8      	str	r0, [r7, #28]
        break;
 8006672:	e010      	b.n	8006696 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006674:	4b4d      	ldr	r3, [pc, #308]	@ (80067ac <UART_SetConfig+0x56c>)
 8006676:	61fb      	str	r3, [r7, #28]
        break;
 8006678:	e00d      	b.n	8006696 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800667a:	f7fe f8a9 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 800667e:	61f8      	str	r0, [r7, #28]
        break;
 8006680:	e009      	b.n	8006696 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006686:	61fb      	str	r3, [r7, #28]
        break;
 8006688:	e005      	b.n	8006696 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006694:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d077      	beq.n	800678c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	005a      	lsls	r2, r3, #1
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	085b      	lsrs	r3, r3, #1
 80066a6:	441a      	add	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b0f      	cmp	r3, #15
 80066b6:	d916      	bls.n	80066e6 <UART_SetConfig+0x4a6>
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066be:	d212      	bcs.n	80066e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	f023 030f 	bic.w	r3, r3, #15
 80066c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	085b      	lsrs	r3, r3, #1
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	8afb      	ldrh	r3, [r7, #22]
 80066d8:	4313      	orrs	r3, r2
 80066da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	8afa      	ldrh	r2, [r7, #22]
 80066e2:	60da      	str	r2, [r3, #12]
 80066e4:	e052      	b.n	800678c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80066ec:	e04e      	b.n	800678c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066f2:	2b08      	cmp	r3, #8
 80066f4:	d827      	bhi.n	8006746 <UART_SetConfig+0x506>
 80066f6:	a201      	add	r2, pc, #4	@ (adr r2, 80066fc <UART_SetConfig+0x4bc>)
 80066f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006729 	.word	0x08006729
 8006704:	08006731 	.word	0x08006731
 8006708:	08006747 	.word	0x08006747
 800670c:	08006737 	.word	0x08006737
 8006710:	08006747 	.word	0x08006747
 8006714:	08006747 	.word	0x08006747
 8006718:	08006747 	.word	0x08006747
 800671c:	0800673f 	.word	0x0800673f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006720:	f7fe f8ee 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 8006724:	61f8      	str	r0, [r7, #28]
        break;
 8006726:	e014      	b.n	8006752 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006728:	f7fe f900 	bl	800492c <HAL_RCC_GetPCLK2Freq>
 800672c:	61f8      	str	r0, [r7, #28]
        break;
 800672e:	e010      	b.n	8006752 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006730:	4b1e      	ldr	r3, [pc, #120]	@ (80067ac <UART_SetConfig+0x56c>)
 8006732:	61fb      	str	r3, [r7, #28]
        break;
 8006734:	e00d      	b.n	8006752 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006736:	f7fe f84b 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 800673a:	61f8      	str	r0, [r7, #28]
        break;
 800673c:	e009      	b.n	8006752 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800673e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006742:	61fb      	str	r3, [r7, #28]
        break;
 8006744:	e005      	b.n	8006752 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006750:	bf00      	nop
    }

    if (pclk != 0U)
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d019      	beq.n	800678c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	085a      	lsrs	r2, r3, #1
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	441a      	add	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	fbb2 f3f3 	udiv	r3, r2, r3
 800676a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	2b0f      	cmp	r3, #15
 8006770:	d909      	bls.n	8006786 <UART_SetConfig+0x546>
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006778:	d205      	bcs.n	8006786 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	b29a      	uxth	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	60da      	str	r2, [r3, #12]
 8006784:	e002      	b.n	800678c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006798:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800679c:	4618      	mov	r0, r3
 800679e:	3728      	adds	r7, #40	@ 0x28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067a6:	bf00      	nop
 80067a8:	40008000 	.word	0x40008000
 80067ac:	00f42400 	.word	0x00f42400

080067b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067bc:	f003 0308 	and.w	r3, r3, #8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00a      	beq.n	80067da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00a      	beq.n	800681e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006844:	f003 0310 	and.w	r3, r3, #16
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00a      	beq.n	8006862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01a      	beq.n	80068c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068ae:	d10a      	bne.n	80068c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	605a      	str	r2, [r3, #4]
  }
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b098      	sub	sp, #96	@ 0x60
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006904:	f7fb fb06 	bl	8001f14 <HAL_GetTick>
 8006908:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0308 	and.w	r3, r3, #8
 8006914:	2b08      	cmp	r3, #8
 8006916:	d12e      	bne.n	8006976 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006918:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006920:	2200      	movs	r2, #0
 8006922:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f88c 	bl	8006a44 <UART_WaitOnFlagUntilTimeout>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d021      	beq.n	8006976 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006946:	653b      	str	r3, [r7, #80]	@ 0x50
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	461a      	mov	r2, r3
 800694e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006950:	647b      	str	r3, [r7, #68]	@ 0x44
 8006952:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800695e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e6      	bne.n	8006932 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e062      	b.n	8006a3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0304 	and.w	r3, r3, #4
 8006980:	2b04      	cmp	r3, #4
 8006982:	d149      	bne.n	8006a18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006984:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800698c:	2200      	movs	r2, #0
 800698e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f856 	bl	8006a44 <UART_WaitOnFlagUntilTimeout>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d03c      	beq.n	8006a18 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	623b      	str	r3, [r7, #32]
   return(result);
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	461a      	mov	r2, r3
 80069ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80069be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e6      	bne.n	800699e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3308      	adds	r3, #8
 80069d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	60fb      	str	r3, [r7, #12]
   return(result);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0301 	bic.w	r3, r3, #1
 80069e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3308      	adds	r3, #8
 80069ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069f0:	61fa      	str	r2, [r7, #28]
 80069f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	69b9      	ldr	r1, [r7, #24]
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	617b      	str	r3, [r7, #20]
   return(result);
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e5      	bne.n	80069d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2220      	movs	r2, #32
 8006a08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e011      	b.n	8006a3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3758      	adds	r7, #88	@ 0x58
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	4613      	mov	r3, r2
 8006a52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a54:	e04f      	b.n	8006af6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5c:	d04b      	beq.n	8006af6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a5e:	f7fb fa59 	bl	8001f14 <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	69ba      	ldr	r2, [r7, #24]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d302      	bcc.n	8006a74 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e04e      	b.n	8006b16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0304 	and.w	r3, r3, #4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d037      	beq.n	8006af6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b80      	cmp	r3, #128	@ 0x80
 8006a8a:	d034      	beq.n	8006af6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2b40      	cmp	r3, #64	@ 0x40
 8006a90:	d031      	beq.n	8006af6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d110      	bne.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2208      	movs	r2, #8
 8006aa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 f8ff 	bl	8006cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2208      	movs	r2, #8
 8006ab2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e029      	b.n	8006b16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006acc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ad0:	d111      	bne.n	8006af6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f8e5 	bl	8006cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e00f      	b.n	8006b16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	69da      	ldr	r2, [r3, #28]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4013      	ands	r3, r2
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	bf0c      	ite	eq
 8006b06:	2301      	moveq	r3, #1
 8006b08:	2300      	movne	r3, #0
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d0a0      	beq.n	8006a56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b096      	sub	sp, #88	@ 0x58
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	88fa      	ldrh	r2, [r7, #6]
 8006b38:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2222      	movs	r2, #34	@ 0x22
 8006b48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d028      	beq.n	8006ba6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b58:	4a3e      	ldr	r2, [pc, #248]	@ (8006c54 <UART_Start_Receive_DMA+0x134>)
 8006b5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b60:	4a3d      	ldr	r2, [pc, #244]	@ (8006c58 <UART_Start_Receive_DMA+0x138>)
 8006b62:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b68:	4a3c      	ldr	r2, [pc, #240]	@ (8006c5c <UART_Start_Receive_DMA+0x13c>)
 8006b6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b70:	2200      	movs	r2, #0
 8006b72:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3324      	adds	r3, #36	@ 0x24
 8006b7e:	4619      	mov	r1, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b84:	461a      	mov	r2, r3
 8006b86:	88fb      	ldrh	r3, [r7, #6]
 8006b88:	f7fc fd96 	bl	80036b8 <HAL_DMA_Start_IT>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d009      	beq.n	8006ba6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2210      	movs	r2, #16
 8006b96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e051      	b.n	8006c4a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d018      	beq.n	8006be0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb6:	e853 3f00 	ldrex	r3, [r3]
 8006bba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006bd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bd4:	e841 2300 	strex	r3, r2, [r1]
 8006bd8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e6      	bne.n	8006bae <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3308      	adds	r3, #8
 8006be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf2:	f043 0301 	orr.w	r3, r3, #1
 8006bf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3308      	adds	r3, #8
 8006bfe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c00:	637a      	str	r2, [r7, #52]	@ 0x34
 8006c02:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e5      	bne.n	8006be0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3308      	adds	r3, #8
 8006c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	613b      	str	r3, [r7, #16]
   return(result);
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3308      	adds	r3, #8
 8006c32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c34:	623a      	str	r2, [r7, #32]
 8006c36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	69f9      	ldr	r1, [r7, #28]
 8006c3a:	6a3a      	ldr	r2, [r7, #32]
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e5      	bne.n	8006c14 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3758      	adds	r7, #88	@ 0x58
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	08006d75 	.word	0x08006d75
 8006c58:	08006ea1 	.word	0x08006ea1
 8006c5c:	08006edf 	.word	0x08006edf

08006c60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b089      	sub	sp, #36	@ 0x24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006c7c:	61fb      	str	r3, [r7, #28]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	61bb      	str	r3, [r7, #24]
 8006c88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	6979      	ldr	r1, [r7, #20]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	613b      	str	r3, [r7, #16]
   return(result);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e6      	bne.n	8006c68 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006ca0:	bf00      	nop
 8006ca2:	3724      	adds	r7, #36	@ 0x24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b095      	sub	sp, #84	@ 0x54
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1e6      	bne.n	8006cb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3308      	adds	r3, #8
 8006cec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	f023 0301 	bic.w	r3, r3, #1
 8006cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3308      	adds	r3, #8
 8006d04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e5      	bne.n	8006ce6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d118      	bne.n	8006d54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	e853 3f00 	ldrex	r3, [r3]
 8006d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	f023 0310 	bic.w	r3, r3, #16
 8006d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d40:	61bb      	str	r3, [r7, #24]
 8006d42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	6979      	ldr	r1, [r7, #20]
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	e841 2300 	strex	r3, r2, [r1]
 8006d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e6      	bne.n	8006d22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006d68:	bf00      	nop
 8006d6a:	3754      	adds	r7, #84	@ 0x54
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b09c      	sub	sp, #112	@ 0x70
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d80:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0320 	and.w	r3, r3, #32
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d171      	bne.n	8006e74 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006da8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006dae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006db6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006db8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006dbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006dc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e6      	bne.n	8006d98 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd4:	e853 3f00 	ldrex	r3, [r3]
 8006dd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	667b      	str	r3, [r7, #100]	@ 0x64
 8006de2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3308      	adds	r3, #8
 8006de8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006dea:	647a      	str	r2, [r7, #68]	@ 0x44
 8006dec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006df0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006df2:	e841 2300 	strex	r3, r2, [r1]
 8006df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e5      	bne.n	8006dca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3308      	adds	r3, #8
 8006e04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e08:	e853 3f00 	ldrex	r3, [r3]
 8006e0c:	623b      	str	r3, [r7, #32]
   return(result);
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e14:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e26:	e841 2300 	strex	r3, r2, [r1]
 8006e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1e5      	bne.n	8006dfe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e34:	2220      	movs	r2, #32
 8006e36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d118      	bne.n	8006e74 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	e853 3f00 	ldrex	r3, [r3]
 8006e4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0310 	bic.w	r3, r3, #16
 8006e56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e60:	61fb      	str	r3, [r7, #28]
 8006e62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e64:	69b9      	ldr	r1, [r7, #24]
 8006e66:	69fa      	ldr	r2, [r7, #28]
 8006e68:	e841 2300 	strex	r3, r2, [r1]
 8006e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1e6      	bne.n	8006e42 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e76:	2200      	movs	r2, #0
 8006e78:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d107      	bne.n	8006e92 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006e8c:	f7ff f9cb 	bl	8006226 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e90:	e002      	b.n	8006e98 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006e92:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006e94:	f7fa ff38 	bl	8001d08 <HAL_UART_RxCpltCallback>
}
 8006e98:	bf00      	nop
 8006e9a:	3770      	adds	r7, #112	@ 0x70
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d109      	bne.n	8006ed0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ec2:	085b      	lsrs	r3, r3, #1
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f7ff f9ac 	bl	8006226 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ece:	e002      	b.n	8006ed6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f7ff f994 	bl	80061fe <HAL_UART_RxHalfCpltCallback>
}
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b086      	sub	sp, #24
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ef0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f04:	2b80      	cmp	r3, #128	@ 0x80
 8006f06:	d109      	bne.n	8006f1c <UART_DMAError+0x3e>
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	2b21      	cmp	r3, #33	@ 0x21
 8006f0c:	d106      	bne.n	8006f1c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8006f16:	6978      	ldr	r0, [r7, #20]
 8006f18:	f7ff fea2 	bl	8006c60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f26:	2b40      	cmp	r3, #64	@ 0x40
 8006f28:	d109      	bne.n	8006f3e <UART_DMAError+0x60>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b22      	cmp	r3, #34	@ 0x22
 8006f2e:	d106      	bne.n	8006f3e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8006f38:	6978      	ldr	r0, [r7, #20]
 8006f3a:	f7ff feb7 	bl	8006cac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f44:	f043 0210 	orr.w	r2, r3, #16
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f4e:	6978      	ldr	r0, [r7, #20]
 8006f50:	f7ff f95f 	bl	8006212 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f54:	bf00      	nop
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <malloc>:
 8006f5c:	4b02      	ldr	r3, [pc, #8]	@ (8006f68 <malloc+0xc>)
 8006f5e:	4601      	mov	r1, r0
 8006f60:	6818      	ldr	r0, [r3, #0]
 8006f62:	f000 b825 	b.w	8006fb0 <_malloc_r>
 8006f66:	bf00      	nop
 8006f68:	20000184 	.word	0x20000184

08006f6c <sbrk_aligned>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	4e0f      	ldr	r6, [pc, #60]	@ (8006fac <sbrk_aligned+0x40>)
 8006f70:	460c      	mov	r4, r1
 8006f72:	6831      	ldr	r1, [r6, #0]
 8006f74:	4605      	mov	r5, r0
 8006f76:	b911      	cbnz	r1, 8006f7e <sbrk_aligned+0x12>
 8006f78:	f001 ff44 	bl	8008e04 <_sbrk_r>
 8006f7c:	6030      	str	r0, [r6, #0]
 8006f7e:	4621      	mov	r1, r4
 8006f80:	4628      	mov	r0, r5
 8006f82:	f001 ff3f 	bl	8008e04 <_sbrk_r>
 8006f86:	1c43      	adds	r3, r0, #1
 8006f88:	d103      	bne.n	8006f92 <sbrk_aligned+0x26>
 8006f8a:	f04f 34ff 	mov.w	r4, #4294967295
 8006f8e:	4620      	mov	r0, r4
 8006f90:	bd70      	pop	{r4, r5, r6, pc}
 8006f92:	1cc4      	adds	r4, r0, #3
 8006f94:	f024 0403 	bic.w	r4, r4, #3
 8006f98:	42a0      	cmp	r0, r4
 8006f9a:	d0f8      	beq.n	8006f8e <sbrk_aligned+0x22>
 8006f9c:	1a21      	subs	r1, r4, r0
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f001 ff30 	bl	8008e04 <_sbrk_r>
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d1f2      	bne.n	8006f8e <sbrk_aligned+0x22>
 8006fa8:	e7ef      	b.n	8006f8a <sbrk_aligned+0x1e>
 8006faa:	bf00      	nop
 8006fac:	20000798 	.word	0x20000798

08006fb0 <_malloc_r>:
 8006fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fb4:	1ccd      	adds	r5, r1, #3
 8006fb6:	f025 0503 	bic.w	r5, r5, #3
 8006fba:	3508      	adds	r5, #8
 8006fbc:	2d0c      	cmp	r5, #12
 8006fbe:	bf38      	it	cc
 8006fc0:	250c      	movcc	r5, #12
 8006fc2:	2d00      	cmp	r5, #0
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	db01      	blt.n	8006fcc <_malloc_r+0x1c>
 8006fc8:	42a9      	cmp	r1, r5
 8006fca:	d904      	bls.n	8006fd6 <_malloc_r+0x26>
 8006fcc:	230c      	movs	r3, #12
 8006fce:	6033      	str	r3, [r6, #0]
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070ac <_malloc_r+0xfc>
 8006fda:	f000 f869 	bl	80070b0 <__malloc_lock>
 8006fde:	f8d8 3000 	ldr.w	r3, [r8]
 8006fe2:	461c      	mov	r4, r3
 8006fe4:	bb44      	cbnz	r4, 8007038 <_malloc_r+0x88>
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	4630      	mov	r0, r6
 8006fea:	f7ff ffbf 	bl	8006f6c <sbrk_aligned>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	d158      	bne.n	80070a6 <_malloc_r+0xf6>
 8006ff4:	f8d8 4000 	ldr.w	r4, [r8]
 8006ff8:	4627      	mov	r7, r4
 8006ffa:	2f00      	cmp	r7, #0
 8006ffc:	d143      	bne.n	8007086 <_malloc_r+0xd6>
 8006ffe:	2c00      	cmp	r4, #0
 8007000:	d04b      	beq.n	800709a <_malloc_r+0xea>
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	4639      	mov	r1, r7
 8007006:	4630      	mov	r0, r6
 8007008:	eb04 0903 	add.w	r9, r4, r3
 800700c:	f001 fefa 	bl	8008e04 <_sbrk_r>
 8007010:	4581      	cmp	r9, r0
 8007012:	d142      	bne.n	800709a <_malloc_r+0xea>
 8007014:	6821      	ldr	r1, [r4, #0]
 8007016:	1a6d      	subs	r5, r5, r1
 8007018:	4629      	mov	r1, r5
 800701a:	4630      	mov	r0, r6
 800701c:	f7ff ffa6 	bl	8006f6c <sbrk_aligned>
 8007020:	3001      	adds	r0, #1
 8007022:	d03a      	beq.n	800709a <_malloc_r+0xea>
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	442b      	add	r3, r5
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	f8d8 3000 	ldr.w	r3, [r8]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	bb62      	cbnz	r2, 800708c <_malloc_r+0xdc>
 8007032:	f8c8 7000 	str.w	r7, [r8]
 8007036:	e00f      	b.n	8007058 <_malloc_r+0xa8>
 8007038:	6822      	ldr	r2, [r4, #0]
 800703a:	1b52      	subs	r2, r2, r5
 800703c:	d420      	bmi.n	8007080 <_malloc_r+0xd0>
 800703e:	2a0b      	cmp	r2, #11
 8007040:	d917      	bls.n	8007072 <_malloc_r+0xc2>
 8007042:	1961      	adds	r1, r4, r5
 8007044:	42a3      	cmp	r3, r4
 8007046:	6025      	str	r5, [r4, #0]
 8007048:	bf18      	it	ne
 800704a:	6059      	strne	r1, [r3, #4]
 800704c:	6863      	ldr	r3, [r4, #4]
 800704e:	bf08      	it	eq
 8007050:	f8c8 1000 	streq.w	r1, [r8]
 8007054:	5162      	str	r2, [r4, r5]
 8007056:	604b      	str	r3, [r1, #4]
 8007058:	4630      	mov	r0, r6
 800705a:	f000 f82f 	bl	80070bc <__malloc_unlock>
 800705e:	f104 000b 	add.w	r0, r4, #11
 8007062:	1d23      	adds	r3, r4, #4
 8007064:	f020 0007 	bic.w	r0, r0, #7
 8007068:	1ac2      	subs	r2, r0, r3
 800706a:	bf1c      	itt	ne
 800706c:	1a1b      	subne	r3, r3, r0
 800706e:	50a3      	strne	r3, [r4, r2]
 8007070:	e7af      	b.n	8006fd2 <_malloc_r+0x22>
 8007072:	6862      	ldr	r2, [r4, #4]
 8007074:	42a3      	cmp	r3, r4
 8007076:	bf0c      	ite	eq
 8007078:	f8c8 2000 	streq.w	r2, [r8]
 800707c:	605a      	strne	r2, [r3, #4]
 800707e:	e7eb      	b.n	8007058 <_malloc_r+0xa8>
 8007080:	4623      	mov	r3, r4
 8007082:	6864      	ldr	r4, [r4, #4]
 8007084:	e7ae      	b.n	8006fe4 <_malloc_r+0x34>
 8007086:	463c      	mov	r4, r7
 8007088:	687f      	ldr	r7, [r7, #4]
 800708a:	e7b6      	b.n	8006ffa <_malloc_r+0x4a>
 800708c:	461a      	mov	r2, r3
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	42a3      	cmp	r3, r4
 8007092:	d1fb      	bne.n	800708c <_malloc_r+0xdc>
 8007094:	2300      	movs	r3, #0
 8007096:	6053      	str	r3, [r2, #4]
 8007098:	e7de      	b.n	8007058 <_malloc_r+0xa8>
 800709a:	230c      	movs	r3, #12
 800709c:	6033      	str	r3, [r6, #0]
 800709e:	4630      	mov	r0, r6
 80070a0:	f000 f80c 	bl	80070bc <__malloc_unlock>
 80070a4:	e794      	b.n	8006fd0 <_malloc_r+0x20>
 80070a6:	6005      	str	r5, [r0, #0]
 80070a8:	e7d6      	b.n	8007058 <_malloc_r+0xa8>
 80070aa:	bf00      	nop
 80070ac:	2000079c 	.word	0x2000079c

080070b0 <__malloc_lock>:
 80070b0:	4801      	ldr	r0, [pc, #4]	@ (80070b8 <__malloc_lock+0x8>)
 80070b2:	f001 bef4 	b.w	8008e9e <__retarget_lock_acquire_recursive>
 80070b6:	bf00      	nop
 80070b8:	200008e0 	.word	0x200008e0

080070bc <__malloc_unlock>:
 80070bc:	4801      	ldr	r0, [pc, #4]	@ (80070c4 <__malloc_unlock+0x8>)
 80070be:	f001 beef 	b.w	8008ea0 <__retarget_lock_release_recursive>
 80070c2:	bf00      	nop
 80070c4:	200008e0 	.word	0x200008e0

080070c8 <sulp>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	4604      	mov	r4, r0
 80070cc:	460d      	mov	r5, r1
 80070ce:	ec45 4b10 	vmov	d0, r4, r5
 80070d2:	4616      	mov	r6, r2
 80070d4:	f003 fc76 	bl	800a9c4 <__ulp>
 80070d8:	ec51 0b10 	vmov	r0, r1, d0
 80070dc:	b17e      	cbz	r6, 80070fe <sulp+0x36>
 80070de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80070e2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	dd09      	ble.n	80070fe <sulp+0x36>
 80070ea:	051b      	lsls	r3, r3, #20
 80070ec:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80070f0:	2400      	movs	r4, #0
 80070f2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80070f6:	4622      	mov	r2, r4
 80070f8:	462b      	mov	r3, r5
 80070fa:	f7f9 fa7d 	bl	80005f8 <__aeabi_dmul>
 80070fe:	ec41 0b10 	vmov	d0, r0, r1
 8007102:	bd70      	pop	{r4, r5, r6, pc}
 8007104:	0000      	movs	r0, r0
	...

08007108 <_strtod_l>:
 8007108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710c:	b09f      	sub	sp, #124	@ 0x7c
 800710e:	460c      	mov	r4, r1
 8007110:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007112:	2200      	movs	r2, #0
 8007114:	921a      	str	r2, [sp, #104]	@ 0x68
 8007116:	9005      	str	r0, [sp, #20]
 8007118:	f04f 0a00 	mov.w	sl, #0
 800711c:	f04f 0b00 	mov.w	fp, #0
 8007120:	460a      	mov	r2, r1
 8007122:	9219      	str	r2, [sp, #100]	@ 0x64
 8007124:	7811      	ldrb	r1, [r2, #0]
 8007126:	292b      	cmp	r1, #43	@ 0x2b
 8007128:	d04a      	beq.n	80071c0 <_strtod_l+0xb8>
 800712a:	d838      	bhi.n	800719e <_strtod_l+0x96>
 800712c:	290d      	cmp	r1, #13
 800712e:	d832      	bhi.n	8007196 <_strtod_l+0x8e>
 8007130:	2908      	cmp	r1, #8
 8007132:	d832      	bhi.n	800719a <_strtod_l+0x92>
 8007134:	2900      	cmp	r1, #0
 8007136:	d03b      	beq.n	80071b0 <_strtod_l+0xa8>
 8007138:	2200      	movs	r2, #0
 800713a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800713c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800713e:	782a      	ldrb	r2, [r5, #0]
 8007140:	2a30      	cmp	r2, #48	@ 0x30
 8007142:	f040 80b3 	bne.w	80072ac <_strtod_l+0x1a4>
 8007146:	786a      	ldrb	r2, [r5, #1]
 8007148:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800714c:	2a58      	cmp	r2, #88	@ 0x58
 800714e:	d16e      	bne.n	800722e <_strtod_l+0x126>
 8007150:	9302      	str	r3, [sp, #8]
 8007152:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	ab1a      	add	r3, sp, #104	@ 0x68
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	4a8e      	ldr	r2, [pc, #568]	@ (8007394 <_strtod_l+0x28c>)
 800715c:	9805      	ldr	r0, [sp, #20]
 800715e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007160:	a919      	add	r1, sp, #100	@ 0x64
 8007162:	f002 fdd7 	bl	8009d14 <__gethex>
 8007166:	f010 060f 	ands.w	r6, r0, #15
 800716a:	4604      	mov	r4, r0
 800716c:	d005      	beq.n	800717a <_strtod_l+0x72>
 800716e:	2e06      	cmp	r6, #6
 8007170:	d128      	bne.n	80071c4 <_strtod_l+0xbc>
 8007172:	3501      	adds	r5, #1
 8007174:	2300      	movs	r3, #0
 8007176:	9519      	str	r5, [sp, #100]	@ 0x64
 8007178:	930b      	str	r3, [sp, #44]	@ 0x2c
 800717a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800717c:	2b00      	cmp	r3, #0
 800717e:	f040 858e 	bne.w	8007c9e <_strtod_l+0xb96>
 8007182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007184:	b1cb      	cbz	r3, 80071ba <_strtod_l+0xb2>
 8007186:	4652      	mov	r2, sl
 8007188:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800718c:	ec43 2b10 	vmov	d0, r2, r3
 8007190:	b01f      	add	sp, #124	@ 0x7c
 8007192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007196:	2920      	cmp	r1, #32
 8007198:	d1ce      	bne.n	8007138 <_strtod_l+0x30>
 800719a:	3201      	adds	r2, #1
 800719c:	e7c1      	b.n	8007122 <_strtod_l+0x1a>
 800719e:	292d      	cmp	r1, #45	@ 0x2d
 80071a0:	d1ca      	bne.n	8007138 <_strtod_l+0x30>
 80071a2:	2101      	movs	r1, #1
 80071a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80071a6:	1c51      	adds	r1, r2, #1
 80071a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80071aa:	7852      	ldrb	r2, [r2, #1]
 80071ac:	2a00      	cmp	r2, #0
 80071ae:	d1c5      	bne.n	800713c <_strtod_l+0x34>
 80071b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80071b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f040 8570 	bne.w	8007c9a <_strtod_l+0xb92>
 80071ba:	4652      	mov	r2, sl
 80071bc:	465b      	mov	r3, fp
 80071be:	e7e5      	b.n	800718c <_strtod_l+0x84>
 80071c0:	2100      	movs	r1, #0
 80071c2:	e7ef      	b.n	80071a4 <_strtod_l+0x9c>
 80071c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80071c6:	b13a      	cbz	r2, 80071d8 <_strtod_l+0xd0>
 80071c8:	2135      	movs	r1, #53	@ 0x35
 80071ca:	a81c      	add	r0, sp, #112	@ 0x70
 80071cc:	f003 fcf4 	bl	800abb8 <__copybits>
 80071d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80071d2:	9805      	ldr	r0, [sp, #20]
 80071d4:	f003 f8c2 	bl	800a35c <_Bfree>
 80071d8:	3e01      	subs	r6, #1
 80071da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80071dc:	2e04      	cmp	r6, #4
 80071de:	d806      	bhi.n	80071ee <_strtod_l+0xe6>
 80071e0:	e8df f006 	tbb	[pc, r6]
 80071e4:	201d0314 	.word	0x201d0314
 80071e8:	14          	.byte	0x14
 80071e9:	00          	.byte	0x00
 80071ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80071ee:	05e1      	lsls	r1, r4, #23
 80071f0:	bf48      	it	mi
 80071f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80071f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80071fa:	0d1b      	lsrs	r3, r3, #20
 80071fc:	051b      	lsls	r3, r3, #20
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1bb      	bne.n	800717a <_strtod_l+0x72>
 8007202:	f001 fe21 	bl	8008e48 <__errno>
 8007206:	2322      	movs	r3, #34	@ 0x22
 8007208:	6003      	str	r3, [r0, #0]
 800720a:	e7b6      	b.n	800717a <_strtod_l+0x72>
 800720c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007210:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007214:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007218:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800721c:	e7e7      	b.n	80071ee <_strtod_l+0xe6>
 800721e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800739c <_strtod_l+0x294>
 8007222:	e7e4      	b.n	80071ee <_strtod_l+0xe6>
 8007224:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007228:	f04f 3aff 	mov.w	sl, #4294967295
 800722c:	e7df      	b.n	80071ee <_strtod_l+0xe6>
 800722e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	9219      	str	r2, [sp, #100]	@ 0x64
 8007234:	785b      	ldrb	r3, [r3, #1]
 8007236:	2b30      	cmp	r3, #48	@ 0x30
 8007238:	d0f9      	beq.n	800722e <_strtod_l+0x126>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d09d      	beq.n	800717a <_strtod_l+0x72>
 800723e:	2301      	movs	r3, #1
 8007240:	9309      	str	r3, [sp, #36]	@ 0x24
 8007242:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007244:	930c      	str	r3, [sp, #48]	@ 0x30
 8007246:	2300      	movs	r3, #0
 8007248:	9308      	str	r3, [sp, #32]
 800724a:	930a      	str	r3, [sp, #40]	@ 0x28
 800724c:	461f      	mov	r7, r3
 800724e:	220a      	movs	r2, #10
 8007250:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007252:	7805      	ldrb	r5, [r0, #0]
 8007254:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007258:	b2d9      	uxtb	r1, r3
 800725a:	2909      	cmp	r1, #9
 800725c:	d928      	bls.n	80072b0 <_strtod_l+0x1a8>
 800725e:	494e      	ldr	r1, [pc, #312]	@ (8007398 <_strtod_l+0x290>)
 8007260:	2201      	movs	r2, #1
 8007262:	f001 fd84 	bl	8008d6e <strncmp>
 8007266:	2800      	cmp	r0, #0
 8007268:	d032      	beq.n	80072d0 <_strtod_l+0x1c8>
 800726a:	2000      	movs	r0, #0
 800726c:	462a      	mov	r2, r5
 800726e:	4681      	mov	r9, r0
 8007270:	463d      	mov	r5, r7
 8007272:	4603      	mov	r3, r0
 8007274:	2a65      	cmp	r2, #101	@ 0x65
 8007276:	d001      	beq.n	800727c <_strtod_l+0x174>
 8007278:	2a45      	cmp	r2, #69	@ 0x45
 800727a:	d114      	bne.n	80072a6 <_strtod_l+0x19e>
 800727c:	b91d      	cbnz	r5, 8007286 <_strtod_l+0x17e>
 800727e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007280:	4302      	orrs	r2, r0
 8007282:	d095      	beq.n	80071b0 <_strtod_l+0xa8>
 8007284:	2500      	movs	r5, #0
 8007286:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007288:	1c62      	adds	r2, r4, #1
 800728a:	9219      	str	r2, [sp, #100]	@ 0x64
 800728c:	7862      	ldrb	r2, [r4, #1]
 800728e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007290:	d077      	beq.n	8007382 <_strtod_l+0x27a>
 8007292:	2a2d      	cmp	r2, #45	@ 0x2d
 8007294:	d07b      	beq.n	800738e <_strtod_l+0x286>
 8007296:	f04f 0c00 	mov.w	ip, #0
 800729a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800729e:	2909      	cmp	r1, #9
 80072a0:	f240 8082 	bls.w	80073a8 <_strtod_l+0x2a0>
 80072a4:	9419      	str	r4, [sp, #100]	@ 0x64
 80072a6:	f04f 0800 	mov.w	r8, #0
 80072aa:	e0a2      	b.n	80073f2 <_strtod_l+0x2ea>
 80072ac:	2300      	movs	r3, #0
 80072ae:	e7c7      	b.n	8007240 <_strtod_l+0x138>
 80072b0:	2f08      	cmp	r7, #8
 80072b2:	bfd5      	itete	le
 80072b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80072b6:	9908      	ldrgt	r1, [sp, #32]
 80072b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80072bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80072c0:	f100 0001 	add.w	r0, r0, #1
 80072c4:	bfd4      	ite	le
 80072c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80072c8:	9308      	strgt	r3, [sp, #32]
 80072ca:	3701      	adds	r7, #1
 80072cc:	9019      	str	r0, [sp, #100]	@ 0x64
 80072ce:	e7bf      	b.n	8007250 <_strtod_l+0x148>
 80072d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072d2:	1c5a      	adds	r2, r3, #1
 80072d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80072d6:	785a      	ldrb	r2, [r3, #1]
 80072d8:	b37f      	cbz	r7, 800733a <_strtod_l+0x232>
 80072da:	4681      	mov	r9, r0
 80072dc:	463d      	mov	r5, r7
 80072de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80072e2:	2b09      	cmp	r3, #9
 80072e4:	d912      	bls.n	800730c <_strtod_l+0x204>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e7c4      	b.n	8007274 <_strtod_l+0x16c>
 80072ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80072f0:	785a      	ldrb	r2, [r3, #1]
 80072f2:	3001      	adds	r0, #1
 80072f4:	2a30      	cmp	r2, #48	@ 0x30
 80072f6:	d0f8      	beq.n	80072ea <_strtod_l+0x1e2>
 80072f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	f200 84d3 	bhi.w	8007ca8 <_strtod_l+0xba0>
 8007302:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007304:	930c      	str	r3, [sp, #48]	@ 0x30
 8007306:	4681      	mov	r9, r0
 8007308:	2000      	movs	r0, #0
 800730a:	4605      	mov	r5, r0
 800730c:	3a30      	subs	r2, #48	@ 0x30
 800730e:	f100 0301 	add.w	r3, r0, #1
 8007312:	d02a      	beq.n	800736a <_strtod_l+0x262>
 8007314:	4499      	add	r9, r3
 8007316:	eb00 0c05 	add.w	ip, r0, r5
 800731a:	462b      	mov	r3, r5
 800731c:	210a      	movs	r1, #10
 800731e:	4563      	cmp	r3, ip
 8007320:	d10d      	bne.n	800733e <_strtod_l+0x236>
 8007322:	1c69      	adds	r1, r5, #1
 8007324:	4401      	add	r1, r0
 8007326:	4428      	add	r0, r5
 8007328:	2808      	cmp	r0, #8
 800732a:	dc16      	bgt.n	800735a <_strtod_l+0x252>
 800732c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800732e:	230a      	movs	r3, #10
 8007330:	fb03 2300 	mla	r3, r3, r0, r2
 8007334:	930a      	str	r3, [sp, #40]	@ 0x28
 8007336:	2300      	movs	r3, #0
 8007338:	e018      	b.n	800736c <_strtod_l+0x264>
 800733a:	4638      	mov	r0, r7
 800733c:	e7da      	b.n	80072f4 <_strtod_l+0x1ec>
 800733e:	2b08      	cmp	r3, #8
 8007340:	f103 0301 	add.w	r3, r3, #1
 8007344:	dc03      	bgt.n	800734e <_strtod_l+0x246>
 8007346:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007348:	434e      	muls	r6, r1
 800734a:	960a      	str	r6, [sp, #40]	@ 0x28
 800734c:	e7e7      	b.n	800731e <_strtod_l+0x216>
 800734e:	2b10      	cmp	r3, #16
 8007350:	bfde      	ittt	le
 8007352:	9e08      	ldrle	r6, [sp, #32]
 8007354:	434e      	mulle	r6, r1
 8007356:	9608      	strle	r6, [sp, #32]
 8007358:	e7e1      	b.n	800731e <_strtod_l+0x216>
 800735a:	280f      	cmp	r0, #15
 800735c:	dceb      	bgt.n	8007336 <_strtod_l+0x22e>
 800735e:	9808      	ldr	r0, [sp, #32]
 8007360:	230a      	movs	r3, #10
 8007362:	fb03 2300 	mla	r3, r3, r0, r2
 8007366:	9308      	str	r3, [sp, #32]
 8007368:	e7e5      	b.n	8007336 <_strtod_l+0x22e>
 800736a:	4629      	mov	r1, r5
 800736c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800736e:	1c50      	adds	r0, r2, #1
 8007370:	9019      	str	r0, [sp, #100]	@ 0x64
 8007372:	7852      	ldrb	r2, [r2, #1]
 8007374:	4618      	mov	r0, r3
 8007376:	460d      	mov	r5, r1
 8007378:	e7b1      	b.n	80072de <_strtod_l+0x1d6>
 800737a:	f04f 0900 	mov.w	r9, #0
 800737e:	2301      	movs	r3, #1
 8007380:	e77d      	b.n	800727e <_strtod_l+0x176>
 8007382:	f04f 0c00 	mov.w	ip, #0
 8007386:	1ca2      	adds	r2, r4, #2
 8007388:	9219      	str	r2, [sp, #100]	@ 0x64
 800738a:	78a2      	ldrb	r2, [r4, #2]
 800738c:	e785      	b.n	800729a <_strtod_l+0x192>
 800738e:	f04f 0c01 	mov.w	ip, #1
 8007392:	e7f8      	b.n	8007386 <_strtod_l+0x27e>
 8007394:	0800b810 	.word	0x0800b810
 8007398:	0800b7f8 	.word	0x0800b7f8
 800739c:	7ff00000 	.word	0x7ff00000
 80073a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073a2:	1c51      	adds	r1, r2, #1
 80073a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80073a6:	7852      	ldrb	r2, [r2, #1]
 80073a8:	2a30      	cmp	r2, #48	@ 0x30
 80073aa:	d0f9      	beq.n	80073a0 <_strtod_l+0x298>
 80073ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80073b0:	2908      	cmp	r1, #8
 80073b2:	f63f af78 	bhi.w	80072a6 <_strtod_l+0x19e>
 80073b6:	3a30      	subs	r2, #48	@ 0x30
 80073b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80073ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80073be:	f04f 080a 	mov.w	r8, #10
 80073c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073c4:	1c56      	adds	r6, r2, #1
 80073c6:	9619      	str	r6, [sp, #100]	@ 0x64
 80073c8:	7852      	ldrb	r2, [r2, #1]
 80073ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80073ce:	f1be 0f09 	cmp.w	lr, #9
 80073d2:	d939      	bls.n	8007448 <_strtod_l+0x340>
 80073d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80073d6:	1a76      	subs	r6, r6, r1
 80073d8:	2e08      	cmp	r6, #8
 80073da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80073de:	dc03      	bgt.n	80073e8 <_strtod_l+0x2e0>
 80073e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80073e2:	4588      	cmp	r8, r1
 80073e4:	bfa8      	it	ge
 80073e6:	4688      	movge	r8, r1
 80073e8:	f1bc 0f00 	cmp.w	ip, #0
 80073ec:	d001      	beq.n	80073f2 <_strtod_l+0x2ea>
 80073ee:	f1c8 0800 	rsb	r8, r8, #0
 80073f2:	2d00      	cmp	r5, #0
 80073f4:	d14e      	bne.n	8007494 <_strtod_l+0x38c>
 80073f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073f8:	4308      	orrs	r0, r1
 80073fa:	f47f aebe 	bne.w	800717a <_strtod_l+0x72>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f47f aed6 	bne.w	80071b0 <_strtod_l+0xa8>
 8007404:	2a69      	cmp	r2, #105	@ 0x69
 8007406:	d028      	beq.n	800745a <_strtod_l+0x352>
 8007408:	dc25      	bgt.n	8007456 <_strtod_l+0x34e>
 800740a:	2a49      	cmp	r2, #73	@ 0x49
 800740c:	d025      	beq.n	800745a <_strtod_l+0x352>
 800740e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007410:	f47f aece 	bne.w	80071b0 <_strtod_l+0xa8>
 8007414:	499b      	ldr	r1, [pc, #620]	@ (8007684 <_strtod_l+0x57c>)
 8007416:	a819      	add	r0, sp, #100	@ 0x64
 8007418:	f002 fe9e 	bl	800a158 <__match>
 800741c:	2800      	cmp	r0, #0
 800741e:	f43f aec7 	beq.w	80071b0 <_strtod_l+0xa8>
 8007422:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2b28      	cmp	r3, #40	@ 0x28
 8007428:	d12e      	bne.n	8007488 <_strtod_l+0x380>
 800742a:	4997      	ldr	r1, [pc, #604]	@ (8007688 <_strtod_l+0x580>)
 800742c:	aa1c      	add	r2, sp, #112	@ 0x70
 800742e:	a819      	add	r0, sp, #100	@ 0x64
 8007430:	f002 fea6 	bl	800a180 <__hexnan>
 8007434:	2805      	cmp	r0, #5
 8007436:	d127      	bne.n	8007488 <_strtod_l+0x380>
 8007438:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800743a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800743e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007442:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007446:	e698      	b.n	800717a <_strtod_l+0x72>
 8007448:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800744a:	fb08 2101 	mla	r1, r8, r1, r2
 800744e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007452:	920e      	str	r2, [sp, #56]	@ 0x38
 8007454:	e7b5      	b.n	80073c2 <_strtod_l+0x2ba>
 8007456:	2a6e      	cmp	r2, #110	@ 0x6e
 8007458:	e7da      	b.n	8007410 <_strtod_l+0x308>
 800745a:	498c      	ldr	r1, [pc, #560]	@ (800768c <_strtod_l+0x584>)
 800745c:	a819      	add	r0, sp, #100	@ 0x64
 800745e:	f002 fe7b 	bl	800a158 <__match>
 8007462:	2800      	cmp	r0, #0
 8007464:	f43f aea4 	beq.w	80071b0 <_strtod_l+0xa8>
 8007468:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800746a:	4989      	ldr	r1, [pc, #548]	@ (8007690 <_strtod_l+0x588>)
 800746c:	3b01      	subs	r3, #1
 800746e:	a819      	add	r0, sp, #100	@ 0x64
 8007470:	9319      	str	r3, [sp, #100]	@ 0x64
 8007472:	f002 fe71 	bl	800a158 <__match>
 8007476:	b910      	cbnz	r0, 800747e <_strtod_l+0x376>
 8007478:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800747a:	3301      	adds	r3, #1
 800747c:	9319      	str	r3, [sp, #100]	@ 0x64
 800747e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80076a0 <_strtod_l+0x598>
 8007482:	f04f 0a00 	mov.w	sl, #0
 8007486:	e678      	b.n	800717a <_strtod_l+0x72>
 8007488:	4882      	ldr	r0, [pc, #520]	@ (8007694 <_strtod_l+0x58c>)
 800748a:	f001 fd19 	bl	8008ec0 <nan>
 800748e:	ec5b ab10 	vmov	sl, fp, d0
 8007492:	e672      	b.n	800717a <_strtod_l+0x72>
 8007494:	eba8 0309 	sub.w	r3, r8, r9
 8007498:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800749a:	9309      	str	r3, [sp, #36]	@ 0x24
 800749c:	2f00      	cmp	r7, #0
 800749e:	bf08      	it	eq
 80074a0:	462f      	moveq	r7, r5
 80074a2:	2d10      	cmp	r5, #16
 80074a4:	462c      	mov	r4, r5
 80074a6:	bfa8      	it	ge
 80074a8:	2410      	movge	r4, #16
 80074aa:	f7f9 f82b 	bl	8000504 <__aeabi_ui2d>
 80074ae:	2d09      	cmp	r5, #9
 80074b0:	4682      	mov	sl, r0
 80074b2:	468b      	mov	fp, r1
 80074b4:	dc13      	bgt.n	80074de <_strtod_l+0x3d6>
 80074b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f43f ae5e 	beq.w	800717a <_strtod_l+0x72>
 80074be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074c0:	dd78      	ble.n	80075b4 <_strtod_l+0x4ac>
 80074c2:	2b16      	cmp	r3, #22
 80074c4:	dc5f      	bgt.n	8007586 <_strtod_l+0x47e>
 80074c6:	4974      	ldr	r1, [pc, #464]	@ (8007698 <_strtod_l+0x590>)
 80074c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074d0:	4652      	mov	r2, sl
 80074d2:	465b      	mov	r3, fp
 80074d4:	f7f9 f890 	bl	80005f8 <__aeabi_dmul>
 80074d8:	4682      	mov	sl, r0
 80074da:	468b      	mov	fp, r1
 80074dc:	e64d      	b.n	800717a <_strtod_l+0x72>
 80074de:	4b6e      	ldr	r3, [pc, #440]	@ (8007698 <_strtod_l+0x590>)
 80074e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80074e8:	f7f9 f886 	bl	80005f8 <__aeabi_dmul>
 80074ec:	4682      	mov	sl, r0
 80074ee:	9808      	ldr	r0, [sp, #32]
 80074f0:	468b      	mov	fp, r1
 80074f2:	f7f9 f807 	bl	8000504 <__aeabi_ui2d>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	4650      	mov	r0, sl
 80074fc:	4659      	mov	r1, fp
 80074fe:	f7f8 fec5 	bl	800028c <__adddf3>
 8007502:	2d0f      	cmp	r5, #15
 8007504:	4682      	mov	sl, r0
 8007506:	468b      	mov	fp, r1
 8007508:	ddd5      	ble.n	80074b6 <_strtod_l+0x3ae>
 800750a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800750c:	1b2c      	subs	r4, r5, r4
 800750e:	441c      	add	r4, r3
 8007510:	2c00      	cmp	r4, #0
 8007512:	f340 8096 	ble.w	8007642 <_strtod_l+0x53a>
 8007516:	f014 030f 	ands.w	r3, r4, #15
 800751a:	d00a      	beq.n	8007532 <_strtod_l+0x42a>
 800751c:	495e      	ldr	r1, [pc, #376]	@ (8007698 <_strtod_l+0x590>)
 800751e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007522:	4652      	mov	r2, sl
 8007524:	465b      	mov	r3, fp
 8007526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800752a:	f7f9 f865 	bl	80005f8 <__aeabi_dmul>
 800752e:	4682      	mov	sl, r0
 8007530:	468b      	mov	fp, r1
 8007532:	f034 040f 	bics.w	r4, r4, #15
 8007536:	d073      	beq.n	8007620 <_strtod_l+0x518>
 8007538:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800753c:	dd48      	ble.n	80075d0 <_strtod_l+0x4c8>
 800753e:	2400      	movs	r4, #0
 8007540:	46a0      	mov	r8, r4
 8007542:	940a      	str	r4, [sp, #40]	@ 0x28
 8007544:	46a1      	mov	r9, r4
 8007546:	9a05      	ldr	r2, [sp, #20]
 8007548:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80076a0 <_strtod_l+0x598>
 800754c:	2322      	movs	r3, #34	@ 0x22
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	f04f 0a00 	mov.w	sl, #0
 8007554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007556:	2b00      	cmp	r3, #0
 8007558:	f43f ae0f 	beq.w	800717a <_strtod_l+0x72>
 800755c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800755e:	9805      	ldr	r0, [sp, #20]
 8007560:	f002 fefc 	bl	800a35c <_Bfree>
 8007564:	9805      	ldr	r0, [sp, #20]
 8007566:	4649      	mov	r1, r9
 8007568:	f002 fef8 	bl	800a35c <_Bfree>
 800756c:	9805      	ldr	r0, [sp, #20]
 800756e:	4641      	mov	r1, r8
 8007570:	f002 fef4 	bl	800a35c <_Bfree>
 8007574:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007576:	9805      	ldr	r0, [sp, #20]
 8007578:	f002 fef0 	bl	800a35c <_Bfree>
 800757c:	9805      	ldr	r0, [sp, #20]
 800757e:	4621      	mov	r1, r4
 8007580:	f002 feec 	bl	800a35c <_Bfree>
 8007584:	e5f9      	b.n	800717a <_strtod_l+0x72>
 8007586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007588:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800758c:	4293      	cmp	r3, r2
 800758e:	dbbc      	blt.n	800750a <_strtod_l+0x402>
 8007590:	4c41      	ldr	r4, [pc, #260]	@ (8007698 <_strtod_l+0x590>)
 8007592:	f1c5 050f 	rsb	r5, r5, #15
 8007596:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800759a:	4652      	mov	r2, sl
 800759c:	465b      	mov	r3, fp
 800759e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075a2:	f7f9 f829 	bl	80005f8 <__aeabi_dmul>
 80075a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a8:	1b5d      	subs	r5, r3, r5
 80075aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80075ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80075b2:	e78f      	b.n	80074d4 <_strtod_l+0x3cc>
 80075b4:	3316      	adds	r3, #22
 80075b6:	dba8      	blt.n	800750a <_strtod_l+0x402>
 80075b8:	4b37      	ldr	r3, [pc, #220]	@ (8007698 <_strtod_l+0x590>)
 80075ba:	eba9 0808 	sub.w	r8, r9, r8
 80075be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80075c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80075c6:	4650      	mov	r0, sl
 80075c8:	4659      	mov	r1, fp
 80075ca:	f7f9 f93f 	bl	800084c <__aeabi_ddiv>
 80075ce:	e783      	b.n	80074d8 <_strtod_l+0x3d0>
 80075d0:	4b32      	ldr	r3, [pc, #200]	@ (800769c <_strtod_l+0x594>)
 80075d2:	9308      	str	r3, [sp, #32]
 80075d4:	2300      	movs	r3, #0
 80075d6:	1124      	asrs	r4, r4, #4
 80075d8:	4650      	mov	r0, sl
 80075da:	4659      	mov	r1, fp
 80075dc:	461e      	mov	r6, r3
 80075de:	2c01      	cmp	r4, #1
 80075e0:	dc21      	bgt.n	8007626 <_strtod_l+0x51e>
 80075e2:	b10b      	cbz	r3, 80075e8 <_strtod_l+0x4e0>
 80075e4:	4682      	mov	sl, r0
 80075e6:	468b      	mov	fp, r1
 80075e8:	492c      	ldr	r1, [pc, #176]	@ (800769c <_strtod_l+0x594>)
 80075ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80075ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80075f2:	4652      	mov	r2, sl
 80075f4:	465b      	mov	r3, fp
 80075f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075fa:	f7f8 fffd 	bl	80005f8 <__aeabi_dmul>
 80075fe:	4b28      	ldr	r3, [pc, #160]	@ (80076a0 <_strtod_l+0x598>)
 8007600:	460a      	mov	r2, r1
 8007602:	400b      	ands	r3, r1
 8007604:	4927      	ldr	r1, [pc, #156]	@ (80076a4 <_strtod_l+0x59c>)
 8007606:	428b      	cmp	r3, r1
 8007608:	4682      	mov	sl, r0
 800760a:	d898      	bhi.n	800753e <_strtod_l+0x436>
 800760c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007610:	428b      	cmp	r3, r1
 8007612:	bf86      	itte	hi
 8007614:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80076a8 <_strtod_l+0x5a0>
 8007618:	f04f 3aff 	movhi.w	sl, #4294967295
 800761c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007620:	2300      	movs	r3, #0
 8007622:	9308      	str	r3, [sp, #32]
 8007624:	e07a      	b.n	800771c <_strtod_l+0x614>
 8007626:	07e2      	lsls	r2, r4, #31
 8007628:	d505      	bpl.n	8007636 <_strtod_l+0x52e>
 800762a:	9b08      	ldr	r3, [sp, #32]
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f7f8 ffe2 	bl	80005f8 <__aeabi_dmul>
 8007634:	2301      	movs	r3, #1
 8007636:	9a08      	ldr	r2, [sp, #32]
 8007638:	3208      	adds	r2, #8
 800763a:	3601      	adds	r6, #1
 800763c:	1064      	asrs	r4, r4, #1
 800763e:	9208      	str	r2, [sp, #32]
 8007640:	e7cd      	b.n	80075de <_strtod_l+0x4d6>
 8007642:	d0ed      	beq.n	8007620 <_strtod_l+0x518>
 8007644:	4264      	negs	r4, r4
 8007646:	f014 020f 	ands.w	r2, r4, #15
 800764a:	d00a      	beq.n	8007662 <_strtod_l+0x55a>
 800764c:	4b12      	ldr	r3, [pc, #72]	@ (8007698 <_strtod_l+0x590>)
 800764e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007652:	4650      	mov	r0, sl
 8007654:	4659      	mov	r1, fp
 8007656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765a:	f7f9 f8f7 	bl	800084c <__aeabi_ddiv>
 800765e:	4682      	mov	sl, r0
 8007660:	468b      	mov	fp, r1
 8007662:	1124      	asrs	r4, r4, #4
 8007664:	d0dc      	beq.n	8007620 <_strtod_l+0x518>
 8007666:	2c1f      	cmp	r4, #31
 8007668:	dd20      	ble.n	80076ac <_strtod_l+0x5a4>
 800766a:	2400      	movs	r4, #0
 800766c:	46a0      	mov	r8, r4
 800766e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007670:	46a1      	mov	r9, r4
 8007672:	9a05      	ldr	r2, [sp, #20]
 8007674:	2322      	movs	r3, #34	@ 0x22
 8007676:	f04f 0a00 	mov.w	sl, #0
 800767a:	f04f 0b00 	mov.w	fp, #0
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	e768      	b.n	8007554 <_strtod_l+0x44c>
 8007682:	bf00      	nop
 8007684:	0800b95e 	.word	0x0800b95e
 8007688:	0800b7fc 	.word	0x0800b7fc
 800768c:	0800b956 	.word	0x0800b956
 8007690:	0800b9d1 	.word	0x0800b9d1
 8007694:	0800b9cd 	.word	0x0800b9cd
 8007698:	0800bb48 	.word	0x0800bb48
 800769c:	0800bb20 	.word	0x0800bb20
 80076a0:	7ff00000 	.word	0x7ff00000
 80076a4:	7ca00000 	.word	0x7ca00000
 80076a8:	7fefffff 	.word	0x7fefffff
 80076ac:	f014 0310 	ands.w	r3, r4, #16
 80076b0:	bf18      	it	ne
 80076b2:	236a      	movne	r3, #106	@ 0x6a
 80076b4:	4ea9      	ldr	r6, [pc, #676]	@ (800795c <_strtod_l+0x854>)
 80076b6:	9308      	str	r3, [sp, #32]
 80076b8:	4650      	mov	r0, sl
 80076ba:	4659      	mov	r1, fp
 80076bc:	2300      	movs	r3, #0
 80076be:	07e2      	lsls	r2, r4, #31
 80076c0:	d504      	bpl.n	80076cc <_strtod_l+0x5c4>
 80076c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80076c6:	f7f8 ff97 	bl	80005f8 <__aeabi_dmul>
 80076ca:	2301      	movs	r3, #1
 80076cc:	1064      	asrs	r4, r4, #1
 80076ce:	f106 0608 	add.w	r6, r6, #8
 80076d2:	d1f4      	bne.n	80076be <_strtod_l+0x5b6>
 80076d4:	b10b      	cbz	r3, 80076da <_strtod_l+0x5d2>
 80076d6:	4682      	mov	sl, r0
 80076d8:	468b      	mov	fp, r1
 80076da:	9b08      	ldr	r3, [sp, #32]
 80076dc:	b1b3      	cbz	r3, 800770c <_strtod_l+0x604>
 80076de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80076e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	4659      	mov	r1, fp
 80076ea:	dd0f      	ble.n	800770c <_strtod_l+0x604>
 80076ec:	2b1f      	cmp	r3, #31
 80076ee:	dd55      	ble.n	800779c <_strtod_l+0x694>
 80076f0:	2b34      	cmp	r3, #52	@ 0x34
 80076f2:	bfde      	ittt	le
 80076f4:	f04f 33ff 	movle.w	r3, #4294967295
 80076f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80076fc:	4093      	lslle	r3, r2
 80076fe:	f04f 0a00 	mov.w	sl, #0
 8007702:	bfcc      	ite	gt
 8007704:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007708:	ea03 0b01 	andle.w	fp, r3, r1
 800770c:	2200      	movs	r2, #0
 800770e:	2300      	movs	r3, #0
 8007710:	4650      	mov	r0, sl
 8007712:	4659      	mov	r1, fp
 8007714:	f7f9 f9d8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007718:	2800      	cmp	r0, #0
 800771a:	d1a6      	bne.n	800766a <_strtod_l+0x562>
 800771c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007722:	9805      	ldr	r0, [sp, #20]
 8007724:	462b      	mov	r3, r5
 8007726:	463a      	mov	r2, r7
 8007728:	f002 fe80 	bl	800a42c <__s2b>
 800772c:	900a      	str	r0, [sp, #40]	@ 0x28
 800772e:	2800      	cmp	r0, #0
 8007730:	f43f af05 	beq.w	800753e <_strtod_l+0x436>
 8007734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007736:	2a00      	cmp	r2, #0
 8007738:	eba9 0308 	sub.w	r3, r9, r8
 800773c:	bfa8      	it	ge
 800773e:	2300      	movge	r3, #0
 8007740:	9312      	str	r3, [sp, #72]	@ 0x48
 8007742:	2400      	movs	r4, #0
 8007744:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007748:	9316      	str	r3, [sp, #88]	@ 0x58
 800774a:	46a0      	mov	r8, r4
 800774c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800774e:	9805      	ldr	r0, [sp, #20]
 8007750:	6859      	ldr	r1, [r3, #4]
 8007752:	f002 fdc3 	bl	800a2dc <_Balloc>
 8007756:	4681      	mov	r9, r0
 8007758:	2800      	cmp	r0, #0
 800775a:	f43f aef4 	beq.w	8007546 <_strtod_l+0x43e>
 800775e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007760:	691a      	ldr	r2, [r3, #16]
 8007762:	3202      	adds	r2, #2
 8007764:	f103 010c 	add.w	r1, r3, #12
 8007768:	0092      	lsls	r2, r2, #2
 800776a:	300c      	adds	r0, #12
 800776c:	f001 fb99 	bl	8008ea2 <memcpy>
 8007770:	ec4b ab10 	vmov	d0, sl, fp
 8007774:	9805      	ldr	r0, [sp, #20]
 8007776:	aa1c      	add	r2, sp, #112	@ 0x70
 8007778:	a91b      	add	r1, sp, #108	@ 0x6c
 800777a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800777e:	f003 f991 	bl	800aaa4 <__d2b>
 8007782:	901a      	str	r0, [sp, #104]	@ 0x68
 8007784:	2800      	cmp	r0, #0
 8007786:	f43f aede 	beq.w	8007546 <_strtod_l+0x43e>
 800778a:	9805      	ldr	r0, [sp, #20]
 800778c:	2101      	movs	r1, #1
 800778e:	f002 fee3 	bl	800a558 <__i2b>
 8007792:	4680      	mov	r8, r0
 8007794:	b948      	cbnz	r0, 80077aa <_strtod_l+0x6a2>
 8007796:	f04f 0800 	mov.w	r8, #0
 800779a:	e6d4      	b.n	8007546 <_strtod_l+0x43e>
 800779c:	f04f 32ff 	mov.w	r2, #4294967295
 80077a0:	fa02 f303 	lsl.w	r3, r2, r3
 80077a4:	ea03 0a0a 	and.w	sl, r3, sl
 80077a8:	e7b0      	b.n	800770c <_strtod_l+0x604>
 80077aa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80077ac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80077ae:	2d00      	cmp	r5, #0
 80077b0:	bfab      	itete	ge
 80077b2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80077b4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80077b6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80077b8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80077ba:	bfac      	ite	ge
 80077bc:	18ef      	addge	r7, r5, r3
 80077be:	1b5e      	sublt	r6, r3, r5
 80077c0:	9b08      	ldr	r3, [sp, #32]
 80077c2:	1aed      	subs	r5, r5, r3
 80077c4:	4415      	add	r5, r2
 80077c6:	4b66      	ldr	r3, [pc, #408]	@ (8007960 <_strtod_l+0x858>)
 80077c8:	3d01      	subs	r5, #1
 80077ca:	429d      	cmp	r5, r3
 80077cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80077d0:	da50      	bge.n	8007874 <_strtod_l+0x76c>
 80077d2:	1b5b      	subs	r3, r3, r5
 80077d4:	2b1f      	cmp	r3, #31
 80077d6:	eba2 0203 	sub.w	r2, r2, r3
 80077da:	f04f 0101 	mov.w	r1, #1
 80077de:	dc3d      	bgt.n	800785c <_strtod_l+0x754>
 80077e0:	fa01 f303 	lsl.w	r3, r1, r3
 80077e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077e6:	2300      	movs	r3, #0
 80077e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80077ea:	18bd      	adds	r5, r7, r2
 80077ec:	9b08      	ldr	r3, [sp, #32]
 80077ee:	42af      	cmp	r7, r5
 80077f0:	4416      	add	r6, r2
 80077f2:	441e      	add	r6, r3
 80077f4:	463b      	mov	r3, r7
 80077f6:	bfa8      	it	ge
 80077f8:	462b      	movge	r3, r5
 80077fa:	42b3      	cmp	r3, r6
 80077fc:	bfa8      	it	ge
 80077fe:	4633      	movge	r3, r6
 8007800:	2b00      	cmp	r3, #0
 8007802:	bfc2      	ittt	gt
 8007804:	1aed      	subgt	r5, r5, r3
 8007806:	1af6      	subgt	r6, r6, r3
 8007808:	1aff      	subgt	r7, r7, r3
 800780a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800780c:	2b00      	cmp	r3, #0
 800780e:	dd16      	ble.n	800783e <_strtod_l+0x736>
 8007810:	4641      	mov	r1, r8
 8007812:	9805      	ldr	r0, [sp, #20]
 8007814:	461a      	mov	r2, r3
 8007816:	f002 ff5f 	bl	800a6d8 <__pow5mult>
 800781a:	4680      	mov	r8, r0
 800781c:	2800      	cmp	r0, #0
 800781e:	d0ba      	beq.n	8007796 <_strtod_l+0x68e>
 8007820:	4601      	mov	r1, r0
 8007822:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007824:	9805      	ldr	r0, [sp, #20]
 8007826:	f002 fead 	bl	800a584 <__multiply>
 800782a:	900e      	str	r0, [sp, #56]	@ 0x38
 800782c:	2800      	cmp	r0, #0
 800782e:	f43f ae8a 	beq.w	8007546 <_strtod_l+0x43e>
 8007832:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007834:	9805      	ldr	r0, [sp, #20]
 8007836:	f002 fd91 	bl	800a35c <_Bfree>
 800783a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800783c:	931a      	str	r3, [sp, #104]	@ 0x68
 800783e:	2d00      	cmp	r5, #0
 8007840:	dc1d      	bgt.n	800787e <_strtod_l+0x776>
 8007842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007844:	2b00      	cmp	r3, #0
 8007846:	dd23      	ble.n	8007890 <_strtod_l+0x788>
 8007848:	4649      	mov	r1, r9
 800784a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800784c:	9805      	ldr	r0, [sp, #20]
 800784e:	f002 ff43 	bl	800a6d8 <__pow5mult>
 8007852:	4681      	mov	r9, r0
 8007854:	b9e0      	cbnz	r0, 8007890 <_strtod_l+0x788>
 8007856:	f04f 0900 	mov.w	r9, #0
 800785a:	e674      	b.n	8007546 <_strtod_l+0x43e>
 800785c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007860:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007864:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007868:	35e2      	adds	r5, #226	@ 0xe2
 800786a:	fa01 f305 	lsl.w	r3, r1, r5
 800786e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007870:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007872:	e7ba      	b.n	80077ea <_strtod_l+0x6e2>
 8007874:	2300      	movs	r3, #0
 8007876:	9310      	str	r3, [sp, #64]	@ 0x40
 8007878:	2301      	movs	r3, #1
 800787a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800787c:	e7b5      	b.n	80077ea <_strtod_l+0x6e2>
 800787e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007880:	9805      	ldr	r0, [sp, #20]
 8007882:	462a      	mov	r2, r5
 8007884:	f002 ff82 	bl	800a78c <__lshift>
 8007888:	901a      	str	r0, [sp, #104]	@ 0x68
 800788a:	2800      	cmp	r0, #0
 800788c:	d1d9      	bne.n	8007842 <_strtod_l+0x73a>
 800788e:	e65a      	b.n	8007546 <_strtod_l+0x43e>
 8007890:	2e00      	cmp	r6, #0
 8007892:	dd07      	ble.n	80078a4 <_strtod_l+0x79c>
 8007894:	4649      	mov	r1, r9
 8007896:	9805      	ldr	r0, [sp, #20]
 8007898:	4632      	mov	r2, r6
 800789a:	f002 ff77 	bl	800a78c <__lshift>
 800789e:	4681      	mov	r9, r0
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d0d8      	beq.n	8007856 <_strtod_l+0x74e>
 80078a4:	2f00      	cmp	r7, #0
 80078a6:	dd08      	ble.n	80078ba <_strtod_l+0x7b2>
 80078a8:	4641      	mov	r1, r8
 80078aa:	9805      	ldr	r0, [sp, #20]
 80078ac:	463a      	mov	r2, r7
 80078ae:	f002 ff6d 	bl	800a78c <__lshift>
 80078b2:	4680      	mov	r8, r0
 80078b4:	2800      	cmp	r0, #0
 80078b6:	f43f ae46 	beq.w	8007546 <_strtod_l+0x43e>
 80078ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078bc:	9805      	ldr	r0, [sp, #20]
 80078be:	464a      	mov	r2, r9
 80078c0:	f002 ffec 	bl	800a89c <__mdiff>
 80078c4:	4604      	mov	r4, r0
 80078c6:	2800      	cmp	r0, #0
 80078c8:	f43f ae3d 	beq.w	8007546 <_strtod_l+0x43e>
 80078cc:	68c3      	ldr	r3, [r0, #12]
 80078ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078d0:	2300      	movs	r3, #0
 80078d2:	60c3      	str	r3, [r0, #12]
 80078d4:	4641      	mov	r1, r8
 80078d6:	f002 ffc5 	bl	800a864 <__mcmp>
 80078da:	2800      	cmp	r0, #0
 80078dc:	da46      	bge.n	800796c <_strtod_l+0x864>
 80078de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078e0:	ea53 030a 	orrs.w	r3, r3, sl
 80078e4:	d16c      	bne.n	80079c0 <_strtod_l+0x8b8>
 80078e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d168      	bne.n	80079c0 <_strtod_l+0x8b8>
 80078ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80078f2:	0d1b      	lsrs	r3, r3, #20
 80078f4:	051b      	lsls	r3, r3, #20
 80078f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80078fa:	d961      	bls.n	80079c0 <_strtod_l+0x8b8>
 80078fc:	6963      	ldr	r3, [r4, #20]
 80078fe:	b913      	cbnz	r3, 8007906 <_strtod_l+0x7fe>
 8007900:	6923      	ldr	r3, [r4, #16]
 8007902:	2b01      	cmp	r3, #1
 8007904:	dd5c      	ble.n	80079c0 <_strtod_l+0x8b8>
 8007906:	4621      	mov	r1, r4
 8007908:	2201      	movs	r2, #1
 800790a:	9805      	ldr	r0, [sp, #20]
 800790c:	f002 ff3e 	bl	800a78c <__lshift>
 8007910:	4641      	mov	r1, r8
 8007912:	4604      	mov	r4, r0
 8007914:	f002 ffa6 	bl	800a864 <__mcmp>
 8007918:	2800      	cmp	r0, #0
 800791a:	dd51      	ble.n	80079c0 <_strtod_l+0x8b8>
 800791c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007920:	9a08      	ldr	r2, [sp, #32]
 8007922:	0d1b      	lsrs	r3, r3, #20
 8007924:	051b      	lsls	r3, r3, #20
 8007926:	2a00      	cmp	r2, #0
 8007928:	d06b      	beq.n	8007a02 <_strtod_l+0x8fa>
 800792a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800792e:	d868      	bhi.n	8007a02 <_strtod_l+0x8fa>
 8007930:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007934:	f67f ae9d 	bls.w	8007672 <_strtod_l+0x56a>
 8007938:	4b0a      	ldr	r3, [pc, #40]	@ (8007964 <_strtod_l+0x85c>)
 800793a:	4650      	mov	r0, sl
 800793c:	4659      	mov	r1, fp
 800793e:	2200      	movs	r2, #0
 8007940:	f7f8 fe5a 	bl	80005f8 <__aeabi_dmul>
 8007944:	4b08      	ldr	r3, [pc, #32]	@ (8007968 <_strtod_l+0x860>)
 8007946:	400b      	ands	r3, r1
 8007948:	4682      	mov	sl, r0
 800794a:	468b      	mov	fp, r1
 800794c:	2b00      	cmp	r3, #0
 800794e:	f47f ae05 	bne.w	800755c <_strtod_l+0x454>
 8007952:	9a05      	ldr	r2, [sp, #20]
 8007954:	2322      	movs	r3, #34	@ 0x22
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	e600      	b.n	800755c <_strtod_l+0x454>
 800795a:	bf00      	nop
 800795c:	0800b828 	.word	0x0800b828
 8007960:	fffffc02 	.word	0xfffffc02
 8007964:	39500000 	.word	0x39500000
 8007968:	7ff00000 	.word	0x7ff00000
 800796c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007970:	d165      	bne.n	8007a3e <_strtod_l+0x936>
 8007972:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007974:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007978:	b35a      	cbz	r2, 80079d2 <_strtod_l+0x8ca>
 800797a:	4a9f      	ldr	r2, [pc, #636]	@ (8007bf8 <_strtod_l+0xaf0>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d12b      	bne.n	80079d8 <_strtod_l+0x8d0>
 8007980:	9b08      	ldr	r3, [sp, #32]
 8007982:	4651      	mov	r1, sl
 8007984:	b303      	cbz	r3, 80079c8 <_strtod_l+0x8c0>
 8007986:	4b9d      	ldr	r3, [pc, #628]	@ (8007bfc <_strtod_l+0xaf4>)
 8007988:	465a      	mov	r2, fp
 800798a:	4013      	ands	r3, r2
 800798c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007990:	f04f 32ff 	mov.w	r2, #4294967295
 8007994:	d81b      	bhi.n	80079ce <_strtod_l+0x8c6>
 8007996:	0d1b      	lsrs	r3, r3, #20
 8007998:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800799c:	fa02 f303 	lsl.w	r3, r2, r3
 80079a0:	4299      	cmp	r1, r3
 80079a2:	d119      	bne.n	80079d8 <_strtod_l+0x8d0>
 80079a4:	4b96      	ldr	r3, [pc, #600]	@ (8007c00 <_strtod_l+0xaf8>)
 80079a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d102      	bne.n	80079b2 <_strtod_l+0x8aa>
 80079ac:	3101      	adds	r1, #1
 80079ae:	f43f adca 	beq.w	8007546 <_strtod_l+0x43e>
 80079b2:	4b92      	ldr	r3, [pc, #584]	@ (8007bfc <_strtod_l+0xaf4>)
 80079b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079b6:	401a      	ands	r2, r3
 80079b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80079bc:	f04f 0a00 	mov.w	sl, #0
 80079c0:	9b08      	ldr	r3, [sp, #32]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1b8      	bne.n	8007938 <_strtod_l+0x830>
 80079c6:	e5c9      	b.n	800755c <_strtod_l+0x454>
 80079c8:	f04f 33ff 	mov.w	r3, #4294967295
 80079cc:	e7e8      	b.n	80079a0 <_strtod_l+0x898>
 80079ce:	4613      	mov	r3, r2
 80079d0:	e7e6      	b.n	80079a0 <_strtod_l+0x898>
 80079d2:	ea53 030a 	orrs.w	r3, r3, sl
 80079d6:	d0a1      	beq.n	800791c <_strtod_l+0x814>
 80079d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80079da:	b1db      	cbz	r3, 8007a14 <_strtod_l+0x90c>
 80079dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079de:	4213      	tst	r3, r2
 80079e0:	d0ee      	beq.n	80079c0 <_strtod_l+0x8b8>
 80079e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079e4:	9a08      	ldr	r2, [sp, #32]
 80079e6:	4650      	mov	r0, sl
 80079e8:	4659      	mov	r1, fp
 80079ea:	b1bb      	cbz	r3, 8007a1c <_strtod_l+0x914>
 80079ec:	f7ff fb6c 	bl	80070c8 <sulp>
 80079f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079f4:	ec53 2b10 	vmov	r2, r3, d0
 80079f8:	f7f8 fc48 	bl	800028c <__adddf3>
 80079fc:	4682      	mov	sl, r0
 80079fe:	468b      	mov	fp, r1
 8007a00:	e7de      	b.n	80079c0 <_strtod_l+0x8b8>
 8007a02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007a06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a0a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a0e:	f04f 3aff 	mov.w	sl, #4294967295
 8007a12:	e7d5      	b.n	80079c0 <_strtod_l+0x8b8>
 8007a14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a16:	ea13 0f0a 	tst.w	r3, sl
 8007a1a:	e7e1      	b.n	80079e0 <_strtod_l+0x8d8>
 8007a1c:	f7ff fb54 	bl	80070c8 <sulp>
 8007a20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a24:	ec53 2b10 	vmov	r2, r3, d0
 8007a28:	f7f8 fc2e 	bl	8000288 <__aeabi_dsub>
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2300      	movs	r3, #0
 8007a30:	4682      	mov	sl, r0
 8007a32:	468b      	mov	fp, r1
 8007a34:	f7f9 f848 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d0c1      	beq.n	80079c0 <_strtod_l+0x8b8>
 8007a3c:	e619      	b.n	8007672 <_strtod_l+0x56a>
 8007a3e:	4641      	mov	r1, r8
 8007a40:	4620      	mov	r0, r4
 8007a42:	f003 f887 	bl	800ab54 <__ratio>
 8007a46:	ec57 6b10 	vmov	r6, r7, d0
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007a50:	4630      	mov	r0, r6
 8007a52:	4639      	mov	r1, r7
 8007a54:	f7f9 f84c 	bl	8000af0 <__aeabi_dcmple>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d06f      	beq.n	8007b3c <_strtod_l+0xa34>
 8007a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d17a      	bne.n	8007b58 <_strtod_l+0xa50>
 8007a62:	f1ba 0f00 	cmp.w	sl, #0
 8007a66:	d158      	bne.n	8007b1a <_strtod_l+0xa12>
 8007a68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d15a      	bne.n	8007b28 <_strtod_l+0xa20>
 8007a72:	4b64      	ldr	r3, [pc, #400]	@ (8007c04 <_strtod_l+0xafc>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	4630      	mov	r0, r6
 8007a78:	4639      	mov	r1, r7
 8007a7a:	f7f9 f82f 	bl	8000adc <__aeabi_dcmplt>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d159      	bne.n	8007b36 <_strtod_l+0xa2e>
 8007a82:	4630      	mov	r0, r6
 8007a84:	4639      	mov	r1, r7
 8007a86:	4b60      	ldr	r3, [pc, #384]	@ (8007c08 <_strtod_l+0xb00>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f7f8 fdb5 	bl	80005f8 <__aeabi_dmul>
 8007a8e:	4606      	mov	r6, r0
 8007a90:	460f      	mov	r7, r1
 8007a92:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007a96:	9606      	str	r6, [sp, #24]
 8007a98:	9307      	str	r3, [sp, #28]
 8007a9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a9e:	4d57      	ldr	r5, [pc, #348]	@ (8007bfc <_strtod_l+0xaf4>)
 8007aa0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007aa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aa6:	401d      	ands	r5, r3
 8007aa8:	4b58      	ldr	r3, [pc, #352]	@ (8007c0c <_strtod_l+0xb04>)
 8007aaa:	429d      	cmp	r5, r3
 8007aac:	f040 80b2 	bne.w	8007c14 <_strtod_l+0xb0c>
 8007ab0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ab2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007ab6:	ec4b ab10 	vmov	d0, sl, fp
 8007aba:	f002 ff83 	bl	800a9c4 <__ulp>
 8007abe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ac2:	ec51 0b10 	vmov	r0, r1, d0
 8007ac6:	f7f8 fd97 	bl	80005f8 <__aeabi_dmul>
 8007aca:	4652      	mov	r2, sl
 8007acc:	465b      	mov	r3, fp
 8007ace:	f7f8 fbdd 	bl	800028c <__adddf3>
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	4949      	ldr	r1, [pc, #292]	@ (8007bfc <_strtod_l+0xaf4>)
 8007ad6:	4a4e      	ldr	r2, [pc, #312]	@ (8007c10 <_strtod_l+0xb08>)
 8007ad8:	4019      	ands	r1, r3
 8007ada:	4291      	cmp	r1, r2
 8007adc:	4682      	mov	sl, r0
 8007ade:	d942      	bls.n	8007b66 <_strtod_l+0xa5e>
 8007ae0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ae2:	4b47      	ldr	r3, [pc, #284]	@ (8007c00 <_strtod_l+0xaf8>)
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d103      	bne.n	8007af0 <_strtod_l+0x9e8>
 8007ae8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007aea:	3301      	adds	r3, #1
 8007aec:	f43f ad2b 	beq.w	8007546 <_strtod_l+0x43e>
 8007af0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007c00 <_strtod_l+0xaf8>
 8007af4:	f04f 3aff 	mov.w	sl, #4294967295
 8007af8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007afa:	9805      	ldr	r0, [sp, #20]
 8007afc:	f002 fc2e 	bl	800a35c <_Bfree>
 8007b00:	9805      	ldr	r0, [sp, #20]
 8007b02:	4649      	mov	r1, r9
 8007b04:	f002 fc2a 	bl	800a35c <_Bfree>
 8007b08:	9805      	ldr	r0, [sp, #20]
 8007b0a:	4641      	mov	r1, r8
 8007b0c:	f002 fc26 	bl	800a35c <_Bfree>
 8007b10:	9805      	ldr	r0, [sp, #20]
 8007b12:	4621      	mov	r1, r4
 8007b14:	f002 fc22 	bl	800a35c <_Bfree>
 8007b18:	e618      	b.n	800774c <_strtod_l+0x644>
 8007b1a:	f1ba 0f01 	cmp.w	sl, #1
 8007b1e:	d103      	bne.n	8007b28 <_strtod_l+0xa20>
 8007b20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f43f ada5 	beq.w	8007672 <_strtod_l+0x56a>
 8007b28:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007bd8 <_strtod_l+0xad0>
 8007b2c:	4f35      	ldr	r7, [pc, #212]	@ (8007c04 <_strtod_l+0xafc>)
 8007b2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007b32:	2600      	movs	r6, #0
 8007b34:	e7b1      	b.n	8007a9a <_strtod_l+0x992>
 8007b36:	4f34      	ldr	r7, [pc, #208]	@ (8007c08 <_strtod_l+0xb00>)
 8007b38:	2600      	movs	r6, #0
 8007b3a:	e7aa      	b.n	8007a92 <_strtod_l+0x98a>
 8007b3c:	4b32      	ldr	r3, [pc, #200]	@ (8007c08 <_strtod_l+0xb00>)
 8007b3e:	4630      	mov	r0, r6
 8007b40:	4639      	mov	r1, r7
 8007b42:	2200      	movs	r2, #0
 8007b44:	f7f8 fd58 	bl	80005f8 <__aeabi_dmul>
 8007b48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	460f      	mov	r7, r1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d09f      	beq.n	8007a92 <_strtod_l+0x98a>
 8007b52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007b56:	e7a0      	b.n	8007a9a <_strtod_l+0x992>
 8007b58:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007be0 <_strtod_l+0xad8>
 8007b5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007b60:	ec57 6b17 	vmov	r6, r7, d7
 8007b64:	e799      	b.n	8007a9a <_strtod_l+0x992>
 8007b66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007b6a:	9b08      	ldr	r3, [sp, #32]
 8007b6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1c1      	bne.n	8007af8 <_strtod_l+0x9f0>
 8007b74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b78:	0d1b      	lsrs	r3, r3, #20
 8007b7a:	051b      	lsls	r3, r3, #20
 8007b7c:	429d      	cmp	r5, r3
 8007b7e:	d1bb      	bne.n	8007af8 <_strtod_l+0x9f0>
 8007b80:	4630      	mov	r0, r6
 8007b82:	4639      	mov	r1, r7
 8007b84:	f7f9 f898 	bl	8000cb8 <__aeabi_d2lz>
 8007b88:	f7f8 fd08 	bl	800059c <__aeabi_l2d>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4630      	mov	r0, r6
 8007b92:	4639      	mov	r1, r7
 8007b94:	f7f8 fb78 	bl	8000288 <__aeabi_dsub>
 8007b98:	460b      	mov	r3, r1
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007ba0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ba6:	ea46 060a 	orr.w	r6, r6, sl
 8007baa:	431e      	orrs	r6, r3
 8007bac:	d06f      	beq.n	8007c8e <_strtod_l+0xb86>
 8007bae:	a30e      	add	r3, pc, #56	@ (adr r3, 8007be8 <_strtod_l+0xae0>)
 8007bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb4:	f7f8 ff92 	bl	8000adc <__aeabi_dcmplt>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	f47f accf 	bne.w	800755c <_strtod_l+0x454>
 8007bbe:	a30c      	add	r3, pc, #48	@ (adr r3, 8007bf0 <_strtod_l+0xae8>)
 8007bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bc8:	f7f8 ffa6 	bl	8000b18 <__aeabi_dcmpgt>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d093      	beq.n	8007af8 <_strtod_l+0x9f0>
 8007bd0:	e4c4      	b.n	800755c <_strtod_l+0x454>
 8007bd2:	bf00      	nop
 8007bd4:	f3af 8000 	nop.w
 8007bd8:	00000000 	.word	0x00000000
 8007bdc:	bff00000 	.word	0xbff00000
 8007be0:	00000000 	.word	0x00000000
 8007be4:	3ff00000 	.word	0x3ff00000
 8007be8:	94a03595 	.word	0x94a03595
 8007bec:	3fdfffff 	.word	0x3fdfffff
 8007bf0:	35afe535 	.word	0x35afe535
 8007bf4:	3fe00000 	.word	0x3fe00000
 8007bf8:	000fffff 	.word	0x000fffff
 8007bfc:	7ff00000 	.word	0x7ff00000
 8007c00:	7fefffff 	.word	0x7fefffff
 8007c04:	3ff00000 	.word	0x3ff00000
 8007c08:	3fe00000 	.word	0x3fe00000
 8007c0c:	7fe00000 	.word	0x7fe00000
 8007c10:	7c9fffff 	.word	0x7c9fffff
 8007c14:	9b08      	ldr	r3, [sp, #32]
 8007c16:	b323      	cbz	r3, 8007c62 <_strtod_l+0xb5a>
 8007c18:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007c1c:	d821      	bhi.n	8007c62 <_strtod_l+0xb5a>
 8007c1e:	a328      	add	r3, pc, #160	@ (adr r3, 8007cc0 <_strtod_l+0xbb8>)
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	4630      	mov	r0, r6
 8007c26:	4639      	mov	r1, r7
 8007c28:	f7f8 ff62 	bl	8000af0 <__aeabi_dcmple>
 8007c2c:	b1a0      	cbz	r0, 8007c58 <_strtod_l+0xb50>
 8007c2e:	4639      	mov	r1, r7
 8007c30:	4630      	mov	r0, r6
 8007c32:	f7f8 ffb9 	bl	8000ba8 <__aeabi_d2uiz>
 8007c36:	2801      	cmp	r0, #1
 8007c38:	bf38      	it	cc
 8007c3a:	2001      	movcc	r0, #1
 8007c3c:	f7f8 fc62 	bl	8000504 <__aeabi_ui2d>
 8007c40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c42:	4606      	mov	r6, r0
 8007c44:	460f      	mov	r7, r1
 8007c46:	b9fb      	cbnz	r3, 8007c88 <_strtod_l+0xb80>
 8007c48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007c4c:	9014      	str	r0, [sp, #80]	@ 0x50
 8007c4e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007c50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007c54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007c58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007c5a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007c5e:	1b5b      	subs	r3, r3, r5
 8007c60:	9311      	str	r3, [sp, #68]	@ 0x44
 8007c62:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007c66:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007c6a:	f002 feab 	bl	800a9c4 <__ulp>
 8007c6e:	4650      	mov	r0, sl
 8007c70:	ec53 2b10 	vmov	r2, r3, d0
 8007c74:	4659      	mov	r1, fp
 8007c76:	f7f8 fcbf 	bl	80005f8 <__aeabi_dmul>
 8007c7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007c7e:	f7f8 fb05 	bl	800028c <__adddf3>
 8007c82:	4682      	mov	sl, r0
 8007c84:	468b      	mov	fp, r1
 8007c86:	e770      	b.n	8007b6a <_strtod_l+0xa62>
 8007c88:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007c8c:	e7e0      	b.n	8007c50 <_strtod_l+0xb48>
 8007c8e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007cc8 <_strtod_l+0xbc0>)
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	f7f8 ff22 	bl	8000adc <__aeabi_dcmplt>
 8007c98:	e798      	b.n	8007bcc <_strtod_l+0xac4>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c9e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007ca0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ca2:	6013      	str	r3, [r2, #0]
 8007ca4:	f7ff ba6d 	b.w	8007182 <_strtod_l+0x7a>
 8007ca8:	2a65      	cmp	r2, #101	@ 0x65
 8007caa:	f43f ab66 	beq.w	800737a <_strtod_l+0x272>
 8007cae:	2a45      	cmp	r2, #69	@ 0x45
 8007cb0:	f43f ab63 	beq.w	800737a <_strtod_l+0x272>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	f7ff bb9e 	b.w	80073f6 <_strtod_l+0x2ee>
 8007cba:	bf00      	nop
 8007cbc:	f3af 8000 	nop.w
 8007cc0:	ffc00000 	.word	0xffc00000
 8007cc4:	41dfffff 	.word	0x41dfffff
 8007cc8:	94a03595 	.word	0x94a03595
 8007ccc:	3fcfffff 	.word	0x3fcfffff

08007cd0 <_strtod_r>:
 8007cd0:	4b01      	ldr	r3, [pc, #4]	@ (8007cd8 <_strtod_r+0x8>)
 8007cd2:	f7ff ba19 	b.w	8007108 <_strtod_l>
 8007cd6:	bf00      	nop
 8007cd8:	20000018 	.word	0x20000018

08007cdc <_strtol_l.constprop.0>:
 8007cdc:	2b24      	cmp	r3, #36	@ 0x24
 8007cde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce2:	4686      	mov	lr, r0
 8007ce4:	4690      	mov	r8, r2
 8007ce6:	d801      	bhi.n	8007cec <_strtol_l.constprop.0+0x10>
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d106      	bne.n	8007cfa <_strtol_l.constprop.0+0x1e>
 8007cec:	f001 f8ac 	bl	8008e48 <__errno>
 8007cf0:	2316      	movs	r3, #22
 8007cf2:	6003      	str	r3, [r0, #0]
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cfa:	4834      	ldr	r0, [pc, #208]	@ (8007dcc <_strtol_l.constprop.0+0xf0>)
 8007cfc:	460d      	mov	r5, r1
 8007cfe:	462a      	mov	r2, r5
 8007d00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d04:	5d06      	ldrb	r6, [r0, r4]
 8007d06:	f016 0608 	ands.w	r6, r6, #8
 8007d0a:	d1f8      	bne.n	8007cfe <_strtol_l.constprop.0+0x22>
 8007d0c:	2c2d      	cmp	r4, #45	@ 0x2d
 8007d0e:	d12d      	bne.n	8007d6c <_strtol_l.constprop.0+0x90>
 8007d10:	782c      	ldrb	r4, [r5, #0]
 8007d12:	2601      	movs	r6, #1
 8007d14:	1c95      	adds	r5, r2, #2
 8007d16:	f033 0210 	bics.w	r2, r3, #16
 8007d1a:	d109      	bne.n	8007d30 <_strtol_l.constprop.0+0x54>
 8007d1c:	2c30      	cmp	r4, #48	@ 0x30
 8007d1e:	d12a      	bne.n	8007d76 <_strtol_l.constprop.0+0x9a>
 8007d20:	782a      	ldrb	r2, [r5, #0]
 8007d22:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007d26:	2a58      	cmp	r2, #88	@ 0x58
 8007d28:	d125      	bne.n	8007d76 <_strtol_l.constprop.0+0x9a>
 8007d2a:	786c      	ldrb	r4, [r5, #1]
 8007d2c:	2310      	movs	r3, #16
 8007d2e:	3502      	adds	r5, #2
 8007d30:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007d34:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007d38:	2200      	movs	r2, #0
 8007d3a:	fbbc f9f3 	udiv	r9, ip, r3
 8007d3e:	4610      	mov	r0, r2
 8007d40:	fb03 ca19 	mls	sl, r3, r9, ip
 8007d44:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007d48:	2f09      	cmp	r7, #9
 8007d4a:	d81b      	bhi.n	8007d84 <_strtol_l.constprop.0+0xa8>
 8007d4c:	463c      	mov	r4, r7
 8007d4e:	42a3      	cmp	r3, r4
 8007d50:	dd27      	ble.n	8007da2 <_strtol_l.constprop.0+0xc6>
 8007d52:	1c57      	adds	r7, r2, #1
 8007d54:	d007      	beq.n	8007d66 <_strtol_l.constprop.0+0x8a>
 8007d56:	4581      	cmp	r9, r0
 8007d58:	d320      	bcc.n	8007d9c <_strtol_l.constprop.0+0xc0>
 8007d5a:	d101      	bne.n	8007d60 <_strtol_l.constprop.0+0x84>
 8007d5c:	45a2      	cmp	sl, r4
 8007d5e:	db1d      	blt.n	8007d9c <_strtol_l.constprop.0+0xc0>
 8007d60:	fb00 4003 	mla	r0, r0, r3, r4
 8007d64:	2201      	movs	r2, #1
 8007d66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d6a:	e7eb      	b.n	8007d44 <_strtol_l.constprop.0+0x68>
 8007d6c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007d6e:	bf04      	itt	eq
 8007d70:	782c      	ldrbeq	r4, [r5, #0]
 8007d72:	1c95      	addeq	r5, r2, #2
 8007d74:	e7cf      	b.n	8007d16 <_strtol_l.constprop.0+0x3a>
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1da      	bne.n	8007d30 <_strtol_l.constprop.0+0x54>
 8007d7a:	2c30      	cmp	r4, #48	@ 0x30
 8007d7c:	bf0c      	ite	eq
 8007d7e:	2308      	moveq	r3, #8
 8007d80:	230a      	movne	r3, #10
 8007d82:	e7d5      	b.n	8007d30 <_strtol_l.constprop.0+0x54>
 8007d84:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007d88:	2f19      	cmp	r7, #25
 8007d8a:	d801      	bhi.n	8007d90 <_strtol_l.constprop.0+0xb4>
 8007d8c:	3c37      	subs	r4, #55	@ 0x37
 8007d8e:	e7de      	b.n	8007d4e <_strtol_l.constprop.0+0x72>
 8007d90:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007d94:	2f19      	cmp	r7, #25
 8007d96:	d804      	bhi.n	8007da2 <_strtol_l.constprop.0+0xc6>
 8007d98:	3c57      	subs	r4, #87	@ 0x57
 8007d9a:	e7d8      	b.n	8007d4e <_strtol_l.constprop.0+0x72>
 8007d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007da0:	e7e1      	b.n	8007d66 <_strtol_l.constprop.0+0x8a>
 8007da2:	1c53      	adds	r3, r2, #1
 8007da4:	d108      	bne.n	8007db8 <_strtol_l.constprop.0+0xdc>
 8007da6:	2322      	movs	r3, #34	@ 0x22
 8007da8:	f8ce 3000 	str.w	r3, [lr]
 8007dac:	4660      	mov	r0, ip
 8007dae:	f1b8 0f00 	cmp.w	r8, #0
 8007db2:	d0a0      	beq.n	8007cf6 <_strtol_l.constprop.0+0x1a>
 8007db4:	1e69      	subs	r1, r5, #1
 8007db6:	e006      	b.n	8007dc6 <_strtol_l.constprop.0+0xea>
 8007db8:	b106      	cbz	r6, 8007dbc <_strtol_l.constprop.0+0xe0>
 8007dba:	4240      	negs	r0, r0
 8007dbc:	f1b8 0f00 	cmp.w	r8, #0
 8007dc0:	d099      	beq.n	8007cf6 <_strtol_l.constprop.0+0x1a>
 8007dc2:	2a00      	cmp	r2, #0
 8007dc4:	d1f6      	bne.n	8007db4 <_strtol_l.constprop.0+0xd8>
 8007dc6:	f8c8 1000 	str.w	r1, [r8]
 8007dca:	e794      	b.n	8007cf6 <_strtol_l.constprop.0+0x1a>
 8007dcc:	0800b851 	.word	0x0800b851

08007dd0 <_strtol_r>:
 8007dd0:	f7ff bf84 	b.w	8007cdc <_strtol_l.constprop.0>

08007dd4 <__cvt>:
 8007dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd8:	ec57 6b10 	vmov	r6, r7, d0
 8007ddc:	2f00      	cmp	r7, #0
 8007dde:	460c      	mov	r4, r1
 8007de0:	4619      	mov	r1, r3
 8007de2:	463b      	mov	r3, r7
 8007de4:	bfbb      	ittet	lt
 8007de6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007dea:	461f      	movlt	r7, r3
 8007dec:	2300      	movge	r3, #0
 8007dee:	232d      	movlt	r3, #45	@ 0x2d
 8007df0:	700b      	strb	r3, [r1, #0]
 8007df2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007df4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007df8:	4691      	mov	r9, r2
 8007dfa:	f023 0820 	bic.w	r8, r3, #32
 8007dfe:	bfbc      	itt	lt
 8007e00:	4632      	movlt	r2, r6
 8007e02:	4616      	movlt	r6, r2
 8007e04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e08:	d005      	beq.n	8007e16 <__cvt+0x42>
 8007e0a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007e0e:	d100      	bne.n	8007e12 <__cvt+0x3e>
 8007e10:	3401      	adds	r4, #1
 8007e12:	2102      	movs	r1, #2
 8007e14:	e000      	b.n	8007e18 <__cvt+0x44>
 8007e16:	2103      	movs	r1, #3
 8007e18:	ab03      	add	r3, sp, #12
 8007e1a:	9301      	str	r3, [sp, #4]
 8007e1c:	ab02      	add	r3, sp, #8
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	ec47 6b10 	vmov	d0, r6, r7
 8007e24:	4653      	mov	r3, sl
 8007e26:	4622      	mov	r2, r4
 8007e28:	f001 f8fe 	bl	8009028 <_dtoa_r>
 8007e2c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007e30:	4605      	mov	r5, r0
 8007e32:	d119      	bne.n	8007e68 <__cvt+0x94>
 8007e34:	f019 0f01 	tst.w	r9, #1
 8007e38:	d00e      	beq.n	8007e58 <__cvt+0x84>
 8007e3a:	eb00 0904 	add.w	r9, r0, r4
 8007e3e:	2200      	movs	r2, #0
 8007e40:	2300      	movs	r3, #0
 8007e42:	4630      	mov	r0, r6
 8007e44:	4639      	mov	r1, r7
 8007e46:	f7f8 fe3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e4a:	b108      	cbz	r0, 8007e50 <__cvt+0x7c>
 8007e4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e50:	2230      	movs	r2, #48	@ 0x30
 8007e52:	9b03      	ldr	r3, [sp, #12]
 8007e54:	454b      	cmp	r3, r9
 8007e56:	d31e      	bcc.n	8007e96 <__cvt+0xc2>
 8007e58:	9b03      	ldr	r3, [sp, #12]
 8007e5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e5c:	1b5b      	subs	r3, r3, r5
 8007e5e:	4628      	mov	r0, r5
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	b004      	add	sp, #16
 8007e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e6c:	eb00 0904 	add.w	r9, r0, r4
 8007e70:	d1e5      	bne.n	8007e3e <__cvt+0x6a>
 8007e72:	7803      	ldrb	r3, [r0, #0]
 8007e74:	2b30      	cmp	r3, #48	@ 0x30
 8007e76:	d10a      	bne.n	8007e8e <__cvt+0xba>
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	4639      	mov	r1, r7
 8007e80:	f7f8 fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e84:	b918      	cbnz	r0, 8007e8e <__cvt+0xba>
 8007e86:	f1c4 0401 	rsb	r4, r4, #1
 8007e8a:	f8ca 4000 	str.w	r4, [sl]
 8007e8e:	f8da 3000 	ldr.w	r3, [sl]
 8007e92:	4499      	add	r9, r3
 8007e94:	e7d3      	b.n	8007e3e <__cvt+0x6a>
 8007e96:	1c59      	adds	r1, r3, #1
 8007e98:	9103      	str	r1, [sp, #12]
 8007e9a:	701a      	strb	r2, [r3, #0]
 8007e9c:	e7d9      	b.n	8007e52 <__cvt+0x7e>

08007e9e <__exponent>:
 8007e9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ea0:	2900      	cmp	r1, #0
 8007ea2:	bfba      	itte	lt
 8007ea4:	4249      	neglt	r1, r1
 8007ea6:	232d      	movlt	r3, #45	@ 0x2d
 8007ea8:	232b      	movge	r3, #43	@ 0x2b
 8007eaa:	2909      	cmp	r1, #9
 8007eac:	7002      	strb	r2, [r0, #0]
 8007eae:	7043      	strb	r3, [r0, #1]
 8007eb0:	dd29      	ble.n	8007f06 <__exponent+0x68>
 8007eb2:	f10d 0307 	add.w	r3, sp, #7
 8007eb6:	461d      	mov	r5, r3
 8007eb8:	270a      	movs	r7, #10
 8007eba:	461a      	mov	r2, r3
 8007ebc:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ec0:	fb07 1416 	mls	r4, r7, r6, r1
 8007ec4:	3430      	adds	r4, #48	@ 0x30
 8007ec6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007eca:	460c      	mov	r4, r1
 8007ecc:	2c63      	cmp	r4, #99	@ 0x63
 8007ece:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	dcf1      	bgt.n	8007eba <__exponent+0x1c>
 8007ed6:	3130      	adds	r1, #48	@ 0x30
 8007ed8:	1e94      	subs	r4, r2, #2
 8007eda:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ede:	1c41      	adds	r1, r0, #1
 8007ee0:	4623      	mov	r3, r4
 8007ee2:	42ab      	cmp	r3, r5
 8007ee4:	d30a      	bcc.n	8007efc <__exponent+0x5e>
 8007ee6:	f10d 0309 	add.w	r3, sp, #9
 8007eea:	1a9b      	subs	r3, r3, r2
 8007eec:	42ac      	cmp	r4, r5
 8007eee:	bf88      	it	hi
 8007ef0:	2300      	movhi	r3, #0
 8007ef2:	3302      	adds	r3, #2
 8007ef4:	4403      	add	r3, r0
 8007ef6:	1a18      	subs	r0, r3, r0
 8007ef8:	b003      	add	sp, #12
 8007efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007efc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007f00:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007f04:	e7ed      	b.n	8007ee2 <__exponent+0x44>
 8007f06:	2330      	movs	r3, #48	@ 0x30
 8007f08:	3130      	adds	r1, #48	@ 0x30
 8007f0a:	7083      	strb	r3, [r0, #2]
 8007f0c:	70c1      	strb	r1, [r0, #3]
 8007f0e:	1d03      	adds	r3, r0, #4
 8007f10:	e7f1      	b.n	8007ef6 <__exponent+0x58>
	...

08007f14 <_printf_float>:
 8007f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f18:	b08d      	sub	sp, #52	@ 0x34
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007f20:	4616      	mov	r6, r2
 8007f22:	461f      	mov	r7, r3
 8007f24:	4605      	mov	r5, r0
 8007f26:	f000 ff35 	bl	8008d94 <_localeconv_r>
 8007f2a:	6803      	ldr	r3, [r0, #0]
 8007f2c:	9304      	str	r3, [sp, #16]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7f8 f99e 	bl	8000270 <strlen>
 8007f34:	2300      	movs	r3, #0
 8007f36:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f38:	f8d8 3000 	ldr.w	r3, [r8]
 8007f3c:	9005      	str	r0, [sp, #20]
 8007f3e:	3307      	adds	r3, #7
 8007f40:	f023 0307 	bic.w	r3, r3, #7
 8007f44:	f103 0208 	add.w	r2, r3, #8
 8007f48:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007f4c:	f8d4 b000 	ldr.w	fp, [r4]
 8007f50:	f8c8 2000 	str.w	r2, [r8]
 8007f54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f58:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007f5c:	9307      	str	r3, [sp, #28]
 8007f5e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f62:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f6a:	4b9c      	ldr	r3, [pc, #624]	@ (80081dc <_printf_float+0x2c8>)
 8007f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f70:	f7f8 fddc 	bl	8000b2c <__aeabi_dcmpun>
 8007f74:	bb70      	cbnz	r0, 8007fd4 <_printf_float+0xc0>
 8007f76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f7a:	4b98      	ldr	r3, [pc, #608]	@ (80081dc <_printf_float+0x2c8>)
 8007f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f80:	f7f8 fdb6 	bl	8000af0 <__aeabi_dcmple>
 8007f84:	bb30      	cbnz	r0, 8007fd4 <_printf_float+0xc0>
 8007f86:	2200      	movs	r2, #0
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4640      	mov	r0, r8
 8007f8c:	4649      	mov	r1, r9
 8007f8e:	f7f8 fda5 	bl	8000adc <__aeabi_dcmplt>
 8007f92:	b110      	cbz	r0, 8007f9a <_printf_float+0x86>
 8007f94:	232d      	movs	r3, #45	@ 0x2d
 8007f96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f9a:	4a91      	ldr	r2, [pc, #580]	@ (80081e0 <_printf_float+0x2cc>)
 8007f9c:	4b91      	ldr	r3, [pc, #580]	@ (80081e4 <_printf_float+0x2d0>)
 8007f9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007fa2:	bf94      	ite	ls
 8007fa4:	4690      	movls	r8, r2
 8007fa6:	4698      	movhi	r8, r3
 8007fa8:	2303      	movs	r3, #3
 8007faa:	6123      	str	r3, [r4, #16]
 8007fac:	f02b 0304 	bic.w	r3, fp, #4
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	f04f 0900 	mov.w	r9, #0
 8007fb6:	9700      	str	r7, [sp, #0]
 8007fb8:	4633      	mov	r3, r6
 8007fba:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f000 f9d2 	bl	8008368 <_printf_common>
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	f040 808d 	bne.w	80080e4 <_printf_float+0x1d0>
 8007fca:	f04f 30ff 	mov.w	r0, #4294967295
 8007fce:	b00d      	add	sp, #52	@ 0x34
 8007fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd4:	4642      	mov	r2, r8
 8007fd6:	464b      	mov	r3, r9
 8007fd8:	4640      	mov	r0, r8
 8007fda:	4649      	mov	r1, r9
 8007fdc:	f7f8 fda6 	bl	8000b2c <__aeabi_dcmpun>
 8007fe0:	b140      	cbz	r0, 8007ff4 <_printf_float+0xe0>
 8007fe2:	464b      	mov	r3, r9
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bfbc      	itt	lt
 8007fe8:	232d      	movlt	r3, #45	@ 0x2d
 8007fea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007fee:	4a7e      	ldr	r2, [pc, #504]	@ (80081e8 <_printf_float+0x2d4>)
 8007ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80081ec <_printf_float+0x2d8>)
 8007ff2:	e7d4      	b.n	8007f9e <_printf_float+0x8a>
 8007ff4:	6863      	ldr	r3, [r4, #4]
 8007ff6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007ffa:	9206      	str	r2, [sp, #24]
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	d13b      	bne.n	8008078 <_printf_float+0x164>
 8008000:	2306      	movs	r3, #6
 8008002:	6063      	str	r3, [r4, #4]
 8008004:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008008:	2300      	movs	r3, #0
 800800a:	6022      	str	r2, [r4, #0]
 800800c:	9303      	str	r3, [sp, #12]
 800800e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008010:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008014:	ab09      	add	r3, sp, #36	@ 0x24
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	6861      	ldr	r1, [r4, #4]
 800801a:	ec49 8b10 	vmov	d0, r8, r9
 800801e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008022:	4628      	mov	r0, r5
 8008024:	f7ff fed6 	bl	8007dd4 <__cvt>
 8008028:	9b06      	ldr	r3, [sp, #24]
 800802a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800802c:	2b47      	cmp	r3, #71	@ 0x47
 800802e:	4680      	mov	r8, r0
 8008030:	d129      	bne.n	8008086 <_printf_float+0x172>
 8008032:	1cc8      	adds	r0, r1, #3
 8008034:	db02      	blt.n	800803c <_printf_float+0x128>
 8008036:	6863      	ldr	r3, [r4, #4]
 8008038:	4299      	cmp	r1, r3
 800803a:	dd41      	ble.n	80080c0 <_printf_float+0x1ac>
 800803c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008040:	fa5f fa8a 	uxtb.w	sl, sl
 8008044:	3901      	subs	r1, #1
 8008046:	4652      	mov	r2, sl
 8008048:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800804c:	9109      	str	r1, [sp, #36]	@ 0x24
 800804e:	f7ff ff26 	bl	8007e9e <__exponent>
 8008052:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008054:	1813      	adds	r3, r2, r0
 8008056:	2a01      	cmp	r2, #1
 8008058:	4681      	mov	r9, r0
 800805a:	6123      	str	r3, [r4, #16]
 800805c:	dc02      	bgt.n	8008064 <_printf_float+0x150>
 800805e:	6822      	ldr	r2, [r4, #0]
 8008060:	07d2      	lsls	r2, r2, #31
 8008062:	d501      	bpl.n	8008068 <_printf_float+0x154>
 8008064:	3301      	adds	r3, #1
 8008066:	6123      	str	r3, [r4, #16]
 8008068:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0a2      	beq.n	8007fb6 <_printf_float+0xa2>
 8008070:	232d      	movs	r3, #45	@ 0x2d
 8008072:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008076:	e79e      	b.n	8007fb6 <_printf_float+0xa2>
 8008078:	9a06      	ldr	r2, [sp, #24]
 800807a:	2a47      	cmp	r2, #71	@ 0x47
 800807c:	d1c2      	bne.n	8008004 <_printf_float+0xf0>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1c0      	bne.n	8008004 <_printf_float+0xf0>
 8008082:	2301      	movs	r3, #1
 8008084:	e7bd      	b.n	8008002 <_printf_float+0xee>
 8008086:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800808a:	d9db      	bls.n	8008044 <_printf_float+0x130>
 800808c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008090:	d118      	bne.n	80080c4 <_printf_float+0x1b0>
 8008092:	2900      	cmp	r1, #0
 8008094:	6863      	ldr	r3, [r4, #4]
 8008096:	dd0b      	ble.n	80080b0 <_printf_float+0x19c>
 8008098:	6121      	str	r1, [r4, #16]
 800809a:	b913      	cbnz	r3, 80080a2 <_printf_float+0x18e>
 800809c:	6822      	ldr	r2, [r4, #0]
 800809e:	07d0      	lsls	r0, r2, #31
 80080a0:	d502      	bpl.n	80080a8 <_printf_float+0x194>
 80080a2:	3301      	adds	r3, #1
 80080a4:	440b      	add	r3, r1
 80080a6:	6123      	str	r3, [r4, #16]
 80080a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80080aa:	f04f 0900 	mov.w	r9, #0
 80080ae:	e7db      	b.n	8008068 <_printf_float+0x154>
 80080b0:	b913      	cbnz	r3, 80080b8 <_printf_float+0x1a4>
 80080b2:	6822      	ldr	r2, [r4, #0]
 80080b4:	07d2      	lsls	r2, r2, #31
 80080b6:	d501      	bpl.n	80080bc <_printf_float+0x1a8>
 80080b8:	3302      	adds	r3, #2
 80080ba:	e7f4      	b.n	80080a6 <_printf_float+0x192>
 80080bc:	2301      	movs	r3, #1
 80080be:	e7f2      	b.n	80080a6 <_printf_float+0x192>
 80080c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80080c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080c6:	4299      	cmp	r1, r3
 80080c8:	db05      	blt.n	80080d6 <_printf_float+0x1c2>
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	6121      	str	r1, [r4, #16]
 80080ce:	07d8      	lsls	r0, r3, #31
 80080d0:	d5ea      	bpl.n	80080a8 <_printf_float+0x194>
 80080d2:	1c4b      	adds	r3, r1, #1
 80080d4:	e7e7      	b.n	80080a6 <_printf_float+0x192>
 80080d6:	2900      	cmp	r1, #0
 80080d8:	bfd4      	ite	le
 80080da:	f1c1 0202 	rsble	r2, r1, #2
 80080de:	2201      	movgt	r2, #1
 80080e0:	4413      	add	r3, r2
 80080e2:	e7e0      	b.n	80080a6 <_printf_float+0x192>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	055a      	lsls	r2, r3, #21
 80080e8:	d407      	bmi.n	80080fa <_printf_float+0x1e6>
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	4642      	mov	r2, r8
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	d12b      	bne.n	8008150 <_printf_float+0x23c>
 80080f8:	e767      	b.n	8007fca <_printf_float+0xb6>
 80080fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80080fe:	f240 80dd 	bls.w	80082bc <_printf_float+0x3a8>
 8008102:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008106:	2200      	movs	r2, #0
 8008108:	2300      	movs	r3, #0
 800810a:	f7f8 fcdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800810e:	2800      	cmp	r0, #0
 8008110:	d033      	beq.n	800817a <_printf_float+0x266>
 8008112:	4a37      	ldr	r2, [pc, #220]	@ (80081f0 <_printf_float+0x2dc>)
 8008114:	2301      	movs	r3, #1
 8008116:	4631      	mov	r1, r6
 8008118:	4628      	mov	r0, r5
 800811a:	47b8      	blx	r7
 800811c:	3001      	adds	r0, #1
 800811e:	f43f af54 	beq.w	8007fca <_printf_float+0xb6>
 8008122:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008126:	4543      	cmp	r3, r8
 8008128:	db02      	blt.n	8008130 <_printf_float+0x21c>
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	07d8      	lsls	r0, r3, #31
 800812e:	d50f      	bpl.n	8008150 <_printf_float+0x23c>
 8008130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008134:	4631      	mov	r1, r6
 8008136:	4628      	mov	r0, r5
 8008138:	47b8      	blx	r7
 800813a:	3001      	adds	r0, #1
 800813c:	f43f af45 	beq.w	8007fca <_printf_float+0xb6>
 8008140:	f04f 0900 	mov.w	r9, #0
 8008144:	f108 38ff 	add.w	r8, r8, #4294967295
 8008148:	f104 0a1a 	add.w	sl, r4, #26
 800814c:	45c8      	cmp	r8, r9
 800814e:	dc09      	bgt.n	8008164 <_printf_float+0x250>
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	079b      	lsls	r3, r3, #30
 8008154:	f100 8103 	bmi.w	800835e <_printf_float+0x44a>
 8008158:	68e0      	ldr	r0, [r4, #12]
 800815a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800815c:	4298      	cmp	r0, r3
 800815e:	bfb8      	it	lt
 8008160:	4618      	movlt	r0, r3
 8008162:	e734      	b.n	8007fce <_printf_float+0xba>
 8008164:	2301      	movs	r3, #1
 8008166:	4652      	mov	r2, sl
 8008168:	4631      	mov	r1, r6
 800816a:	4628      	mov	r0, r5
 800816c:	47b8      	blx	r7
 800816e:	3001      	adds	r0, #1
 8008170:	f43f af2b 	beq.w	8007fca <_printf_float+0xb6>
 8008174:	f109 0901 	add.w	r9, r9, #1
 8008178:	e7e8      	b.n	800814c <_printf_float+0x238>
 800817a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800817c:	2b00      	cmp	r3, #0
 800817e:	dc39      	bgt.n	80081f4 <_printf_float+0x2e0>
 8008180:	4a1b      	ldr	r2, [pc, #108]	@ (80081f0 <_printf_float+0x2dc>)
 8008182:	2301      	movs	r3, #1
 8008184:	4631      	mov	r1, r6
 8008186:	4628      	mov	r0, r5
 8008188:	47b8      	blx	r7
 800818a:	3001      	adds	r0, #1
 800818c:	f43f af1d 	beq.w	8007fca <_printf_float+0xb6>
 8008190:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008194:	ea59 0303 	orrs.w	r3, r9, r3
 8008198:	d102      	bne.n	80081a0 <_printf_float+0x28c>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	07d9      	lsls	r1, r3, #31
 800819e:	d5d7      	bpl.n	8008150 <_printf_float+0x23c>
 80081a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081a4:	4631      	mov	r1, r6
 80081a6:	4628      	mov	r0, r5
 80081a8:	47b8      	blx	r7
 80081aa:	3001      	adds	r0, #1
 80081ac:	f43f af0d 	beq.w	8007fca <_printf_float+0xb6>
 80081b0:	f04f 0a00 	mov.w	sl, #0
 80081b4:	f104 0b1a 	add.w	fp, r4, #26
 80081b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ba:	425b      	negs	r3, r3
 80081bc:	4553      	cmp	r3, sl
 80081be:	dc01      	bgt.n	80081c4 <_printf_float+0x2b0>
 80081c0:	464b      	mov	r3, r9
 80081c2:	e793      	b.n	80080ec <_printf_float+0x1d8>
 80081c4:	2301      	movs	r3, #1
 80081c6:	465a      	mov	r2, fp
 80081c8:	4631      	mov	r1, r6
 80081ca:	4628      	mov	r0, r5
 80081cc:	47b8      	blx	r7
 80081ce:	3001      	adds	r0, #1
 80081d0:	f43f aefb 	beq.w	8007fca <_printf_float+0xb6>
 80081d4:	f10a 0a01 	add.w	sl, sl, #1
 80081d8:	e7ee      	b.n	80081b8 <_printf_float+0x2a4>
 80081da:	bf00      	nop
 80081dc:	7fefffff 	.word	0x7fefffff
 80081e0:	0800b951 	.word	0x0800b951
 80081e4:	0800b955 	.word	0x0800b955
 80081e8:	0800b959 	.word	0x0800b959
 80081ec:	0800b95d 	.word	0x0800b95d
 80081f0:	0800b961 	.word	0x0800b961
 80081f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80081f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80081fa:	4553      	cmp	r3, sl
 80081fc:	bfa8      	it	ge
 80081fe:	4653      	movge	r3, sl
 8008200:	2b00      	cmp	r3, #0
 8008202:	4699      	mov	r9, r3
 8008204:	dc36      	bgt.n	8008274 <_printf_float+0x360>
 8008206:	f04f 0b00 	mov.w	fp, #0
 800820a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800820e:	f104 021a 	add.w	r2, r4, #26
 8008212:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008214:	9306      	str	r3, [sp, #24]
 8008216:	eba3 0309 	sub.w	r3, r3, r9
 800821a:	455b      	cmp	r3, fp
 800821c:	dc31      	bgt.n	8008282 <_printf_float+0x36e>
 800821e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008220:	459a      	cmp	sl, r3
 8008222:	dc3a      	bgt.n	800829a <_printf_float+0x386>
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	07da      	lsls	r2, r3, #31
 8008228:	d437      	bmi.n	800829a <_printf_float+0x386>
 800822a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822c:	ebaa 0903 	sub.w	r9, sl, r3
 8008230:	9b06      	ldr	r3, [sp, #24]
 8008232:	ebaa 0303 	sub.w	r3, sl, r3
 8008236:	4599      	cmp	r9, r3
 8008238:	bfa8      	it	ge
 800823a:	4699      	movge	r9, r3
 800823c:	f1b9 0f00 	cmp.w	r9, #0
 8008240:	dc33      	bgt.n	80082aa <_printf_float+0x396>
 8008242:	f04f 0800 	mov.w	r8, #0
 8008246:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800824a:	f104 0b1a 	add.w	fp, r4, #26
 800824e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008250:	ebaa 0303 	sub.w	r3, sl, r3
 8008254:	eba3 0309 	sub.w	r3, r3, r9
 8008258:	4543      	cmp	r3, r8
 800825a:	f77f af79 	ble.w	8008150 <_printf_float+0x23c>
 800825e:	2301      	movs	r3, #1
 8008260:	465a      	mov	r2, fp
 8008262:	4631      	mov	r1, r6
 8008264:	4628      	mov	r0, r5
 8008266:	47b8      	blx	r7
 8008268:	3001      	adds	r0, #1
 800826a:	f43f aeae 	beq.w	8007fca <_printf_float+0xb6>
 800826e:	f108 0801 	add.w	r8, r8, #1
 8008272:	e7ec      	b.n	800824e <_printf_float+0x33a>
 8008274:	4642      	mov	r2, r8
 8008276:	4631      	mov	r1, r6
 8008278:	4628      	mov	r0, r5
 800827a:	47b8      	blx	r7
 800827c:	3001      	adds	r0, #1
 800827e:	d1c2      	bne.n	8008206 <_printf_float+0x2f2>
 8008280:	e6a3      	b.n	8007fca <_printf_float+0xb6>
 8008282:	2301      	movs	r3, #1
 8008284:	4631      	mov	r1, r6
 8008286:	4628      	mov	r0, r5
 8008288:	9206      	str	r2, [sp, #24]
 800828a:	47b8      	blx	r7
 800828c:	3001      	adds	r0, #1
 800828e:	f43f ae9c 	beq.w	8007fca <_printf_float+0xb6>
 8008292:	9a06      	ldr	r2, [sp, #24]
 8008294:	f10b 0b01 	add.w	fp, fp, #1
 8008298:	e7bb      	b.n	8008212 <_printf_float+0x2fe>
 800829a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800829e:	4631      	mov	r1, r6
 80082a0:	4628      	mov	r0, r5
 80082a2:	47b8      	blx	r7
 80082a4:	3001      	adds	r0, #1
 80082a6:	d1c0      	bne.n	800822a <_printf_float+0x316>
 80082a8:	e68f      	b.n	8007fca <_printf_float+0xb6>
 80082aa:	9a06      	ldr	r2, [sp, #24]
 80082ac:	464b      	mov	r3, r9
 80082ae:	4442      	add	r2, r8
 80082b0:	4631      	mov	r1, r6
 80082b2:	4628      	mov	r0, r5
 80082b4:	47b8      	blx	r7
 80082b6:	3001      	adds	r0, #1
 80082b8:	d1c3      	bne.n	8008242 <_printf_float+0x32e>
 80082ba:	e686      	b.n	8007fca <_printf_float+0xb6>
 80082bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80082c0:	f1ba 0f01 	cmp.w	sl, #1
 80082c4:	dc01      	bgt.n	80082ca <_printf_float+0x3b6>
 80082c6:	07db      	lsls	r3, r3, #31
 80082c8:	d536      	bpl.n	8008338 <_printf_float+0x424>
 80082ca:	2301      	movs	r3, #1
 80082cc:	4642      	mov	r2, r8
 80082ce:	4631      	mov	r1, r6
 80082d0:	4628      	mov	r0, r5
 80082d2:	47b8      	blx	r7
 80082d4:	3001      	adds	r0, #1
 80082d6:	f43f ae78 	beq.w	8007fca <_printf_float+0xb6>
 80082da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082de:	4631      	mov	r1, r6
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b8      	blx	r7
 80082e4:	3001      	adds	r0, #1
 80082e6:	f43f ae70 	beq.w	8007fca <_printf_float+0xb6>
 80082ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80082ee:	2200      	movs	r2, #0
 80082f0:	2300      	movs	r3, #0
 80082f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082f6:	f7f8 fbe7 	bl	8000ac8 <__aeabi_dcmpeq>
 80082fa:	b9c0      	cbnz	r0, 800832e <_printf_float+0x41a>
 80082fc:	4653      	mov	r3, sl
 80082fe:	f108 0201 	add.w	r2, r8, #1
 8008302:	4631      	mov	r1, r6
 8008304:	4628      	mov	r0, r5
 8008306:	47b8      	blx	r7
 8008308:	3001      	adds	r0, #1
 800830a:	d10c      	bne.n	8008326 <_printf_float+0x412>
 800830c:	e65d      	b.n	8007fca <_printf_float+0xb6>
 800830e:	2301      	movs	r3, #1
 8008310:	465a      	mov	r2, fp
 8008312:	4631      	mov	r1, r6
 8008314:	4628      	mov	r0, r5
 8008316:	47b8      	blx	r7
 8008318:	3001      	adds	r0, #1
 800831a:	f43f ae56 	beq.w	8007fca <_printf_float+0xb6>
 800831e:	f108 0801 	add.w	r8, r8, #1
 8008322:	45d0      	cmp	r8, sl
 8008324:	dbf3      	blt.n	800830e <_printf_float+0x3fa>
 8008326:	464b      	mov	r3, r9
 8008328:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800832c:	e6df      	b.n	80080ee <_printf_float+0x1da>
 800832e:	f04f 0800 	mov.w	r8, #0
 8008332:	f104 0b1a 	add.w	fp, r4, #26
 8008336:	e7f4      	b.n	8008322 <_printf_float+0x40e>
 8008338:	2301      	movs	r3, #1
 800833a:	4642      	mov	r2, r8
 800833c:	e7e1      	b.n	8008302 <_printf_float+0x3ee>
 800833e:	2301      	movs	r3, #1
 8008340:	464a      	mov	r2, r9
 8008342:	4631      	mov	r1, r6
 8008344:	4628      	mov	r0, r5
 8008346:	47b8      	blx	r7
 8008348:	3001      	adds	r0, #1
 800834a:	f43f ae3e 	beq.w	8007fca <_printf_float+0xb6>
 800834e:	f108 0801 	add.w	r8, r8, #1
 8008352:	68e3      	ldr	r3, [r4, #12]
 8008354:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008356:	1a5b      	subs	r3, r3, r1
 8008358:	4543      	cmp	r3, r8
 800835a:	dcf0      	bgt.n	800833e <_printf_float+0x42a>
 800835c:	e6fc      	b.n	8008158 <_printf_float+0x244>
 800835e:	f04f 0800 	mov.w	r8, #0
 8008362:	f104 0919 	add.w	r9, r4, #25
 8008366:	e7f4      	b.n	8008352 <_printf_float+0x43e>

08008368 <_printf_common>:
 8008368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800836c:	4616      	mov	r6, r2
 800836e:	4698      	mov	r8, r3
 8008370:	688a      	ldr	r2, [r1, #8]
 8008372:	690b      	ldr	r3, [r1, #16]
 8008374:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008378:	4293      	cmp	r3, r2
 800837a:	bfb8      	it	lt
 800837c:	4613      	movlt	r3, r2
 800837e:	6033      	str	r3, [r6, #0]
 8008380:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008384:	4607      	mov	r7, r0
 8008386:	460c      	mov	r4, r1
 8008388:	b10a      	cbz	r2, 800838e <_printf_common+0x26>
 800838a:	3301      	adds	r3, #1
 800838c:	6033      	str	r3, [r6, #0]
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	0699      	lsls	r1, r3, #26
 8008392:	bf42      	ittt	mi
 8008394:	6833      	ldrmi	r3, [r6, #0]
 8008396:	3302      	addmi	r3, #2
 8008398:	6033      	strmi	r3, [r6, #0]
 800839a:	6825      	ldr	r5, [r4, #0]
 800839c:	f015 0506 	ands.w	r5, r5, #6
 80083a0:	d106      	bne.n	80083b0 <_printf_common+0x48>
 80083a2:	f104 0a19 	add.w	sl, r4, #25
 80083a6:	68e3      	ldr	r3, [r4, #12]
 80083a8:	6832      	ldr	r2, [r6, #0]
 80083aa:	1a9b      	subs	r3, r3, r2
 80083ac:	42ab      	cmp	r3, r5
 80083ae:	dc26      	bgt.n	80083fe <_printf_common+0x96>
 80083b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083b4:	6822      	ldr	r2, [r4, #0]
 80083b6:	3b00      	subs	r3, #0
 80083b8:	bf18      	it	ne
 80083ba:	2301      	movne	r3, #1
 80083bc:	0692      	lsls	r2, r2, #26
 80083be:	d42b      	bmi.n	8008418 <_printf_common+0xb0>
 80083c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083c4:	4641      	mov	r1, r8
 80083c6:	4638      	mov	r0, r7
 80083c8:	47c8      	blx	r9
 80083ca:	3001      	adds	r0, #1
 80083cc:	d01e      	beq.n	800840c <_printf_common+0xa4>
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	6922      	ldr	r2, [r4, #16]
 80083d2:	f003 0306 	and.w	r3, r3, #6
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	bf02      	ittt	eq
 80083da:	68e5      	ldreq	r5, [r4, #12]
 80083dc:	6833      	ldreq	r3, [r6, #0]
 80083de:	1aed      	subeq	r5, r5, r3
 80083e0:	68a3      	ldr	r3, [r4, #8]
 80083e2:	bf0c      	ite	eq
 80083e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083e8:	2500      	movne	r5, #0
 80083ea:	4293      	cmp	r3, r2
 80083ec:	bfc4      	itt	gt
 80083ee:	1a9b      	subgt	r3, r3, r2
 80083f0:	18ed      	addgt	r5, r5, r3
 80083f2:	2600      	movs	r6, #0
 80083f4:	341a      	adds	r4, #26
 80083f6:	42b5      	cmp	r5, r6
 80083f8:	d11a      	bne.n	8008430 <_printf_common+0xc8>
 80083fa:	2000      	movs	r0, #0
 80083fc:	e008      	b.n	8008410 <_printf_common+0xa8>
 80083fe:	2301      	movs	r3, #1
 8008400:	4652      	mov	r2, sl
 8008402:	4641      	mov	r1, r8
 8008404:	4638      	mov	r0, r7
 8008406:	47c8      	blx	r9
 8008408:	3001      	adds	r0, #1
 800840a:	d103      	bne.n	8008414 <_printf_common+0xac>
 800840c:	f04f 30ff 	mov.w	r0, #4294967295
 8008410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008414:	3501      	adds	r5, #1
 8008416:	e7c6      	b.n	80083a6 <_printf_common+0x3e>
 8008418:	18e1      	adds	r1, r4, r3
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	2030      	movs	r0, #48	@ 0x30
 800841e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008422:	4422      	add	r2, r4
 8008424:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008428:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800842c:	3302      	adds	r3, #2
 800842e:	e7c7      	b.n	80083c0 <_printf_common+0x58>
 8008430:	2301      	movs	r3, #1
 8008432:	4622      	mov	r2, r4
 8008434:	4641      	mov	r1, r8
 8008436:	4638      	mov	r0, r7
 8008438:	47c8      	blx	r9
 800843a:	3001      	adds	r0, #1
 800843c:	d0e6      	beq.n	800840c <_printf_common+0xa4>
 800843e:	3601      	adds	r6, #1
 8008440:	e7d9      	b.n	80083f6 <_printf_common+0x8e>
	...

08008444 <_printf_i>:
 8008444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008448:	7e0f      	ldrb	r7, [r1, #24]
 800844a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800844c:	2f78      	cmp	r7, #120	@ 0x78
 800844e:	4691      	mov	r9, r2
 8008450:	4680      	mov	r8, r0
 8008452:	460c      	mov	r4, r1
 8008454:	469a      	mov	sl, r3
 8008456:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800845a:	d807      	bhi.n	800846c <_printf_i+0x28>
 800845c:	2f62      	cmp	r7, #98	@ 0x62
 800845e:	d80a      	bhi.n	8008476 <_printf_i+0x32>
 8008460:	2f00      	cmp	r7, #0
 8008462:	f000 80d2 	beq.w	800860a <_printf_i+0x1c6>
 8008466:	2f58      	cmp	r7, #88	@ 0x58
 8008468:	f000 80b9 	beq.w	80085de <_printf_i+0x19a>
 800846c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008470:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008474:	e03a      	b.n	80084ec <_printf_i+0xa8>
 8008476:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800847a:	2b15      	cmp	r3, #21
 800847c:	d8f6      	bhi.n	800846c <_printf_i+0x28>
 800847e:	a101      	add	r1, pc, #4	@ (adr r1, 8008484 <_printf_i+0x40>)
 8008480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008484:	080084dd 	.word	0x080084dd
 8008488:	080084f1 	.word	0x080084f1
 800848c:	0800846d 	.word	0x0800846d
 8008490:	0800846d 	.word	0x0800846d
 8008494:	0800846d 	.word	0x0800846d
 8008498:	0800846d 	.word	0x0800846d
 800849c:	080084f1 	.word	0x080084f1
 80084a0:	0800846d 	.word	0x0800846d
 80084a4:	0800846d 	.word	0x0800846d
 80084a8:	0800846d 	.word	0x0800846d
 80084ac:	0800846d 	.word	0x0800846d
 80084b0:	080085f1 	.word	0x080085f1
 80084b4:	0800851b 	.word	0x0800851b
 80084b8:	080085ab 	.word	0x080085ab
 80084bc:	0800846d 	.word	0x0800846d
 80084c0:	0800846d 	.word	0x0800846d
 80084c4:	08008613 	.word	0x08008613
 80084c8:	0800846d 	.word	0x0800846d
 80084cc:	0800851b 	.word	0x0800851b
 80084d0:	0800846d 	.word	0x0800846d
 80084d4:	0800846d 	.word	0x0800846d
 80084d8:	080085b3 	.word	0x080085b3
 80084dc:	6833      	ldr	r3, [r6, #0]
 80084de:	1d1a      	adds	r2, r3, #4
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	6032      	str	r2, [r6, #0]
 80084e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084ec:	2301      	movs	r3, #1
 80084ee:	e09d      	b.n	800862c <_printf_i+0x1e8>
 80084f0:	6833      	ldr	r3, [r6, #0]
 80084f2:	6820      	ldr	r0, [r4, #0]
 80084f4:	1d19      	adds	r1, r3, #4
 80084f6:	6031      	str	r1, [r6, #0]
 80084f8:	0606      	lsls	r6, r0, #24
 80084fa:	d501      	bpl.n	8008500 <_printf_i+0xbc>
 80084fc:	681d      	ldr	r5, [r3, #0]
 80084fe:	e003      	b.n	8008508 <_printf_i+0xc4>
 8008500:	0645      	lsls	r5, r0, #25
 8008502:	d5fb      	bpl.n	80084fc <_printf_i+0xb8>
 8008504:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008508:	2d00      	cmp	r5, #0
 800850a:	da03      	bge.n	8008514 <_printf_i+0xd0>
 800850c:	232d      	movs	r3, #45	@ 0x2d
 800850e:	426d      	negs	r5, r5
 8008510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008514:	4859      	ldr	r0, [pc, #356]	@ (800867c <_printf_i+0x238>)
 8008516:	230a      	movs	r3, #10
 8008518:	e011      	b.n	800853e <_printf_i+0xfa>
 800851a:	6821      	ldr	r1, [r4, #0]
 800851c:	6833      	ldr	r3, [r6, #0]
 800851e:	0608      	lsls	r0, r1, #24
 8008520:	f853 5b04 	ldr.w	r5, [r3], #4
 8008524:	d402      	bmi.n	800852c <_printf_i+0xe8>
 8008526:	0649      	lsls	r1, r1, #25
 8008528:	bf48      	it	mi
 800852a:	b2ad      	uxthmi	r5, r5
 800852c:	2f6f      	cmp	r7, #111	@ 0x6f
 800852e:	4853      	ldr	r0, [pc, #332]	@ (800867c <_printf_i+0x238>)
 8008530:	6033      	str	r3, [r6, #0]
 8008532:	bf14      	ite	ne
 8008534:	230a      	movne	r3, #10
 8008536:	2308      	moveq	r3, #8
 8008538:	2100      	movs	r1, #0
 800853a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800853e:	6866      	ldr	r6, [r4, #4]
 8008540:	60a6      	str	r6, [r4, #8]
 8008542:	2e00      	cmp	r6, #0
 8008544:	bfa2      	ittt	ge
 8008546:	6821      	ldrge	r1, [r4, #0]
 8008548:	f021 0104 	bicge.w	r1, r1, #4
 800854c:	6021      	strge	r1, [r4, #0]
 800854e:	b90d      	cbnz	r5, 8008554 <_printf_i+0x110>
 8008550:	2e00      	cmp	r6, #0
 8008552:	d04b      	beq.n	80085ec <_printf_i+0x1a8>
 8008554:	4616      	mov	r6, r2
 8008556:	fbb5 f1f3 	udiv	r1, r5, r3
 800855a:	fb03 5711 	mls	r7, r3, r1, r5
 800855e:	5dc7      	ldrb	r7, [r0, r7]
 8008560:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008564:	462f      	mov	r7, r5
 8008566:	42bb      	cmp	r3, r7
 8008568:	460d      	mov	r5, r1
 800856a:	d9f4      	bls.n	8008556 <_printf_i+0x112>
 800856c:	2b08      	cmp	r3, #8
 800856e:	d10b      	bne.n	8008588 <_printf_i+0x144>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	07df      	lsls	r7, r3, #31
 8008574:	d508      	bpl.n	8008588 <_printf_i+0x144>
 8008576:	6923      	ldr	r3, [r4, #16]
 8008578:	6861      	ldr	r1, [r4, #4]
 800857a:	4299      	cmp	r1, r3
 800857c:	bfde      	ittt	le
 800857e:	2330      	movle	r3, #48	@ 0x30
 8008580:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008584:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008588:	1b92      	subs	r2, r2, r6
 800858a:	6122      	str	r2, [r4, #16]
 800858c:	f8cd a000 	str.w	sl, [sp]
 8008590:	464b      	mov	r3, r9
 8008592:	aa03      	add	r2, sp, #12
 8008594:	4621      	mov	r1, r4
 8008596:	4640      	mov	r0, r8
 8008598:	f7ff fee6 	bl	8008368 <_printf_common>
 800859c:	3001      	adds	r0, #1
 800859e:	d14a      	bne.n	8008636 <_printf_i+0x1f2>
 80085a0:	f04f 30ff 	mov.w	r0, #4294967295
 80085a4:	b004      	add	sp, #16
 80085a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	f043 0320 	orr.w	r3, r3, #32
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	4833      	ldr	r0, [pc, #204]	@ (8008680 <_printf_i+0x23c>)
 80085b4:	2778      	movs	r7, #120	@ 0x78
 80085b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	6831      	ldr	r1, [r6, #0]
 80085be:	061f      	lsls	r7, r3, #24
 80085c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80085c4:	d402      	bmi.n	80085cc <_printf_i+0x188>
 80085c6:	065f      	lsls	r7, r3, #25
 80085c8:	bf48      	it	mi
 80085ca:	b2ad      	uxthmi	r5, r5
 80085cc:	6031      	str	r1, [r6, #0]
 80085ce:	07d9      	lsls	r1, r3, #31
 80085d0:	bf44      	itt	mi
 80085d2:	f043 0320 	orrmi.w	r3, r3, #32
 80085d6:	6023      	strmi	r3, [r4, #0]
 80085d8:	b11d      	cbz	r5, 80085e2 <_printf_i+0x19e>
 80085da:	2310      	movs	r3, #16
 80085dc:	e7ac      	b.n	8008538 <_printf_i+0xf4>
 80085de:	4827      	ldr	r0, [pc, #156]	@ (800867c <_printf_i+0x238>)
 80085e0:	e7e9      	b.n	80085b6 <_printf_i+0x172>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	f023 0320 	bic.w	r3, r3, #32
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	e7f6      	b.n	80085da <_printf_i+0x196>
 80085ec:	4616      	mov	r6, r2
 80085ee:	e7bd      	b.n	800856c <_printf_i+0x128>
 80085f0:	6833      	ldr	r3, [r6, #0]
 80085f2:	6825      	ldr	r5, [r4, #0]
 80085f4:	6961      	ldr	r1, [r4, #20]
 80085f6:	1d18      	adds	r0, r3, #4
 80085f8:	6030      	str	r0, [r6, #0]
 80085fa:	062e      	lsls	r6, r5, #24
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	d501      	bpl.n	8008604 <_printf_i+0x1c0>
 8008600:	6019      	str	r1, [r3, #0]
 8008602:	e002      	b.n	800860a <_printf_i+0x1c6>
 8008604:	0668      	lsls	r0, r5, #25
 8008606:	d5fb      	bpl.n	8008600 <_printf_i+0x1bc>
 8008608:	8019      	strh	r1, [r3, #0]
 800860a:	2300      	movs	r3, #0
 800860c:	6123      	str	r3, [r4, #16]
 800860e:	4616      	mov	r6, r2
 8008610:	e7bc      	b.n	800858c <_printf_i+0x148>
 8008612:	6833      	ldr	r3, [r6, #0]
 8008614:	1d1a      	adds	r2, r3, #4
 8008616:	6032      	str	r2, [r6, #0]
 8008618:	681e      	ldr	r6, [r3, #0]
 800861a:	6862      	ldr	r2, [r4, #4]
 800861c:	2100      	movs	r1, #0
 800861e:	4630      	mov	r0, r6
 8008620:	f7f7 fdd6 	bl	80001d0 <memchr>
 8008624:	b108      	cbz	r0, 800862a <_printf_i+0x1e6>
 8008626:	1b80      	subs	r0, r0, r6
 8008628:	6060      	str	r0, [r4, #4]
 800862a:	6863      	ldr	r3, [r4, #4]
 800862c:	6123      	str	r3, [r4, #16]
 800862e:	2300      	movs	r3, #0
 8008630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008634:	e7aa      	b.n	800858c <_printf_i+0x148>
 8008636:	6923      	ldr	r3, [r4, #16]
 8008638:	4632      	mov	r2, r6
 800863a:	4649      	mov	r1, r9
 800863c:	4640      	mov	r0, r8
 800863e:	47d0      	blx	sl
 8008640:	3001      	adds	r0, #1
 8008642:	d0ad      	beq.n	80085a0 <_printf_i+0x15c>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	079b      	lsls	r3, r3, #30
 8008648:	d413      	bmi.n	8008672 <_printf_i+0x22e>
 800864a:	68e0      	ldr	r0, [r4, #12]
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	4298      	cmp	r0, r3
 8008650:	bfb8      	it	lt
 8008652:	4618      	movlt	r0, r3
 8008654:	e7a6      	b.n	80085a4 <_printf_i+0x160>
 8008656:	2301      	movs	r3, #1
 8008658:	4632      	mov	r2, r6
 800865a:	4649      	mov	r1, r9
 800865c:	4640      	mov	r0, r8
 800865e:	47d0      	blx	sl
 8008660:	3001      	adds	r0, #1
 8008662:	d09d      	beq.n	80085a0 <_printf_i+0x15c>
 8008664:	3501      	adds	r5, #1
 8008666:	68e3      	ldr	r3, [r4, #12]
 8008668:	9903      	ldr	r1, [sp, #12]
 800866a:	1a5b      	subs	r3, r3, r1
 800866c:	42ab      	cmp	r3, r5
 800866e:	dcf2      	bgt.n	8008656 <_printf_i+0x212>
 8008670:	e7eb      	b.n	800864a <_printf_i+0x206>
 8008672:	2500      	movs	r5, #0
 8008674:	f104 0619 	add.w	r6, r4, #25
 8008678:	e7f5      	b.n	8008666 <_printf_i+0x222>
 800867a:	bf00      	nop
 800867c:	0800b963 	.word	0x0800b963
 8008680:	0800b974 	.word	0x0800b974

08008684 <_scanf_float>:
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	b087      	sub	sp, #28
 800868a:	4617      	mov	r7, r2
 800868c:	9303      	str	r3, [sp, #12]
 800868e:	688b      	ldr	r3, [r1, #8]
 8008690:	1e5a      	subs	r2, r3, #1
 8008692:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008696:	bf81      	itttt	hi
 8008698:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800869c:	eb03 0b05 	addhi.w	fp, r3, r5
 80086a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80086a4:	608b      	strhi	r3, [r1, #8]
 80086a6:	680b      	ldr	r3, [r1, #0]
 80086a8:	460a      	mov	r2, r1
 80086aa:	f04f 0500 	mov.w	r5, #0
 80086ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80086b2:	f842 3b1c 	str.w	r3, [r2], #28
 80086b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80086ba:	4680      	mov	r8, r0
 80086bc:	460c      	mov	r4, r1
 80086be:	bf98      	it	ls
 80086c0:	f04f 0b00 	movls.w	fp, #0
 80086c4:	9201      	str	r2, [sp, #4]
 80086c6:	4616      	mov	r6, r2
 80086c8:	46aa      	mov	sl, r5
 80086ca:	46a9      	mov	r9, r5
 80086cc:	9502      	str	r5, [sp, #8]
 80086ce:	68a2      	ldr	r2, [r4, #8]
 80086d0:	b152      	cbz	r2, 80086e8 <_scanf_float+0x64>
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	2b4e      	cmp	r3, #78	@ 0x4e
 80086d8:	d864      	bhi.n	80087a4 <_scanf_float+0x120>
 80086da:	2b40      	cmp	r3, #64	@ 0x40
 80086dc:	d83c      	bhi.n	8008758 <_scanf_float+0xd4>
 80086de:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80086e2:	b2c8      	uxtb	r0, r1
 80086e4:	280e      	cmp	r0, #14
 80086e6:	d93a      	bls.n	800875e <_scanf_float+0xda>
 80086e8:	f1b9 0f00 	cmp.w	r9, #0
 80086ec:	d003      	beq.n	80086f6 <_scanf_float+0x72>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086fa:	f1ba 0f01 	cmp.w	sl, #1
 80086fe:	f200 8117 	bhi.w	8008930 <_scanf_float+0x2ac>
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	429e      	cmp	r6, r3
 8008706:	f200 8108 	bhi.w	800891a <_scanf_float+0x296>
 800870a:	2001      	movs	r0, #1
 800870c:	b007      	add	sp, #28
 800870e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008712:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008716:	2a0d      	cmp	r2, #13
 8008718:	d8e6      	bhi.n	80086e8 <_scanf_float+0x64>
 800871a:	a101      	add	r1, pc, #4	@ (adr r1, 8008720 <_scanf_float+0x9c>)
 800871c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008720:	08008867 	.word	0x08008867
 8008724:	080086e9 	.word	0x080086e9
 8008728:	080086e9 	.word	0x080086e9
 800872c:	080086e9 	.word	0x080086e9
 8008730:	080088c7 	.word	0x080088c7
 8008734:	0800889f 	.word	0x0800889f
 8008738:	080086e9 	.word	0x080086e9
 800873c:	080086e9 	.word	0x080086e9
 8008740:	08008875 	.word	0x08008875
 8008744:	080086e9 	.word	0x080086e9
 8008748:	080086e9 	.word	0x080086e9
 800874c:	080086e9 	.word	0x080086e9
 8008750:	080086e9 	.word	0x080086e9
 8008754:	0800882d 	.word	0x0800882d
 8008758:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800875c:	e7db      	b.n	8008716 <_scanf_float+0x92>
 800875e:	290e      	cmp	r1, #14
 8008760:	d8c2      	bhi.n	80086e8 <_scanf_float+0x64>
 8008762:	a001      	add	r0, pc, #4	@ (adr r0, 8008768 <_scanf_float+0xe4>)
 8008764:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008768:	0800881d 	.word	0x0800881d
 800876c:	080086e9 	.word	0x080086e9
 8008770:	0800881d 	.word	0x0800881d
 8008774:	080088b3 	.word	0x080088b3
 8008778:	080086e9 	.word	0x080086e9
 800877c:	080087c5 	.word	0x080087c5
 8008780:	08008803 	.word	0x08008803
 8008784:	08008803 	.word	0x08008803
 8008788:	08008803 	.word	0x08008803
 800878c:	08008803 	.word	0x08008803
 8008790:	08008803 	.word	0x08008803
 8008794:	08008803 	.word	0x08008803
 8008798:	08008803 	.word	0x08008803
 800879c:	08008803 	.word	0x08008803
 80087a0:	08008803 	.word	0x08008803
 80087a4:	2b6e      	cmp	r3, #110	@ 0x6e
 80087a6:	d809      	bhi.n	80087bc <_scanf_float+0x138>
 80087a8:	2b60      	cmp	r3, #96	@ 0x60
 80087aa:	d8b2      	bhi.n	8008712 <_scanf_float+0x8e>
 80087ac:	2b54      	cmp	r3, #84	@ 0x54
 80087ae:	d07b      	beq.n	80088a8 <_scanf_float+0x224>
 80087b0:	2b59      	cmp	r3, #89	@ 0x59
 80087b2:	d199      	bne.n	80086e8 <_scanf_float+0x64>
 80087b4:	2d07      	cmp	r5, #7
 80087b6:	d197      	bne.n	80086e8 <_scanf_float+0x64>
 80087b8:	2508      	movs	r5, #8
 80087ba:	e02c      	b.n	8008816 <_scanf_float+0x192>
 80087bc:	2b74      	cmp	r3, #116	@ 0x74
 80087be:	d073      	beq.n	80088a8 <_scanf_float+0x224>
 80087c0:	2b79      	cmp	r3, #121	@ 0x79
 80087c2:	e7f6      	b.n	80087b2 <_scanf_float+0x12e>
 80087c4:	6821      	ldr	r1, [r4, #0]
 80087c6:	05c8      	lsls	r0, r1, #23
 80087c8:	d51b      	bpl.n	8008802 <_scanf_float+0x17e>
 80087ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80087ce:	6021      	str	r1, [r4, #0]
 80087d0:	f109 0901 	add.w	r9, r9, #1
 80087d4:	f1bb 0f00 	cmp.w	fp, #0
 80087d8:	d003      	beq.n	80087e2 <_scanf_float+0x15e>
 80087da:	3201      	adds	r2, #1
 80087dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087e0:	60a2      	str	r2, [r4, #8]
 80087e2:	68a3      	ldr	r3, [r4, #8]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	60a3      	str	r3, [r4, #8]
 80087e8:	6923      	ldr	r3, [r4, #16]
 80087ea:	3301      	adds	r3, #1
 80087ec:	6123      	str	r3, [r4, #16]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	607b      	str	r3, [r7, #4]
 80087f6:	f340 8087 	ble.w	8008908 <_scanf_float+0x284>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	3301      	adds	r3, #1
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	e765      	b.n	80086ce <_scanf_float+0x4a>
 8008802:	eb1a 0105 	adds.w	r1, sl, r5
 8008806:	f47f af6f 	bne.w	80086e8 <_scanf_float+0x64>
 800880a:	6822      	ldr	r2, [r4, #0]
 800880c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008810:	6022      	str	r2, [r4, #0]
 8008812:	460d      	mov	r5, r1
 8008814:	468a      	mov	sl, r1
 8008816:	f806 3b01 	strb.w	r3, [r6], #1
 800881a:	e7e2      	b.n	80087e2 <_scanf_float+0x15e>
 800881c:	6822      	ldr	r2, [r4, #0]
 800881e:	0610      	lsls	r0, r2, #24
 8008820:	f57f af62 	bpl.w	80086e8 <_scanf_float+0x64>
 8008824:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008828:	6022      	str	r2, [r4, #0]
 800882a:	e7f4      	b.n	8008816 <_scanf_float+0x192>
 800882c:	f1ba 0f00 	cmp.w	sl, #0
 8008830:	d10e      	bne.n	8008850 <_scanf_float+0x1cc>
 8008832:	f1b9 0f00 	cmp.w	r9, #0
 8008836:	d10e      	bne.n	8008856 <_scanf_float+0x1d2>
 8008838:	6822      	ldr	r2, [r4, #0]
 800883a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800883e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008842:	d108      	bne.n	8008856 <_scanf_float+0x1d2>
 8008844:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008848:	6022      	str	r2, [r4, #0]
 800884a:	f04f 0a01 	mov.w	sl, #1
 800884e:	e7e2      	b.n	8008816 <_scanf_float+0x192>
 8008850:	f1ba 0f02 	cmp.w	sl, #2
 8008854:	d055      	beq.n	8008902 <_scanf_float+0x27e>
 8008856:	2d01      	cmp	r5, #1
 8008858:	d002      	beq.n	8008860 <_scanf_float+0x1dc>
 800885a:	2d04      	cmp	r5, #4
 800885c:	f47f af44 	bne.w	80086e8 <_scanf_float+0x64>
 8008860:	3501      	adds	r5, #1
 8008862:	b2ed      	uxtb	r5, r5
 8008864:	e7d7      	b.n	8008816 <_scanf_float+0x192>
 8008866:	f1ba 0f01 	cmp.w	sl, #1
 800886a:	f47f af3d 	bne.w	80086e8 <_scanf_float+0x64>
 800886e:	f04f 0a02 	mov.w	sl, #2
 8008872:	e7d0      	b.n	8008816 <_scanf_float+0x192>
 8008874:	b97d      	cbnz	r5, 8008896 <_scanf_float+0x212>
 8008876:	f1b9 0f00 	cmp.w	r9, #0
 800887a:	f47f af38 	bne.w	80086ee <_scanf_float+0x6a>
 800887e:	6822      	ldr	r2, [r4, #0]
 8008880:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008884:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008888:	f040 8108 	bne.w	8008a9c <_scanf_float+0x418>
 800888c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008890:	6022      	str	r2, [r4, #0]
 8008892:	2501      	movs	r5, #1
 8008894:	e7bf      	b.n	8008816 <_scanf_float+0x192>
 8008896:	2d03      	cmp	r5, #3
 8008898:	d0e2      	beq.n	8008860 <_scanf_float+0x1dc>
 800889a:	2d05      	cmp	r5, #5
 800889c:	e7de      	b.n	800885c <_scanf_float+0x1d8>
 800889e:	2d02      	cmp	r5, #2
 80088a0:	f47f af22 	bne.w	80086e8 <_scanf_float+0x64>
 80088a4:	2503      	movs	r5, #3
 80088a6:	e7b6      	b.n	8008816 <_scanf_float+0x192>
 80088a8:	2d06      	cmp	r5, #6
 80088aa:	f47f af1d 	bne.w	80086e8 <_scanf_float+0x64>
 80088ae:	2507      	movs	r5, #7
 80088b0:	e7b1      	b.n	8008816 <_scanf_float+0x192>
 80088b2:	6822      	ldr	r2, [r4, #0]
 80088b4:	0591      	lsls	r1, r2, #22
 80088b6:	f57f af17 	bpl.w	80086e8 <_scanf_float+0x64>
 80088ba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80088be:	6022      	str	r2, [r4, #0]
 80088c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80088c4:	e7a7      	b.n	8008816 <_scanf_float+0x192>
 80088c6:	6822      	ldr	r2, [r4, #0]
 80088c8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80088cc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80088d0:	d006      	beq.n	80088e0 <_scanf_float+0x25c>
 80088d2:	0550      	lsls	r0, r2, #21
 80088d4:	f57f af08 	bpl.w	80086e8 <_scanf_float+0x64>
 80088d8:	f1b9 0f00 	cmp.w	r9, #0
 80088dc:	f000 80de 	beq.w	8008a9c <_scanf_float+0x418>
 80088e0:	0591      	lsls	r1, r2, #22
 80088e2:	bf58      	it	pl
 80088e4:	9902      	ldrpl	r1, [sp, #8]
 80088e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80088ea:	bf58      	it	pl
 80088ec:	eba9 0101 	subpl.w	r1, r9, r1
 80088f0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80088f4:	bf58      	it	pl
 80088f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80088fa:	6022      	str	r2, [r4, #0]
 80088fc:	f04f 0900 	mov.w	r9, #0
 8008900:	e789      	b.n	8008816 <_scanf_float+0x192>
 8008902:	f04f 0a03 	mov.w	sl, #3
 8008906:	e786      	b.n	8008816 <_scanf_float+0x192>
 8008908:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800890c:	4639      	mov	r1, r7
 800890e:	4640      	mov	r0, r8
 8008910:	4798      	blx	r3
 8008912:	2800      	cmp	r0, #0
 8008914:	f43f aedb 	beq.w	80086ce <_scanf_float+0x4a>
 8008918:	e6e6      	b.n	80086e8 <_scanf_float+0x64>
 800891a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800891e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008922:	463a      	mov	r2, r7
 8008924:	4640      	mov	r0, r8
 8008926:	4798      	blx	r3
 8008928:	6923      	ldr	r3, [r4, #16]
 800892a:	3b01      	subs	r3, #1
 800892c:	6123      	str	r3, [r4, #16]
 800892e:	e6e8      	b.n	8008702 <_scanf_float+0x7e>
 8008930:	1e6b      	subs	r3, r5, #1
 8008932:	2b06      	cmp	r3, #6
 8008934:	d824      	bhi.n	8008980 <_scanf_float+0x2fc>
 8008936:	2d02      	cmp	r5, #2
 8008938:	d836      	bhi.n	80089a8 <_scanf_float+0x324>
 800893a:	9b01      	ldr	r3, [sp, #4]
 800893c:	429e      	cmp	r6, r3
 800893e:	f67f aee4 	bls.w	800870a <_scanf_float+0x86>
 8008942:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008946:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800894a:	463a      	mov	r2, r7
 800894c:	4640      	mov	r0, r8
 800894e:	4798      	blx	r3
 8008950:	6923      	ldr	r3, [r4, #16]
 8008952:	3b01      	subs	r3, #1
 8008954:	6123      	str	r3, [r4, #16]
 8008956:	e7f0      	b.n	800893a <_scanf_float+0x2b6>
 8008958:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800895c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008960:	463a      	mov	r2, r7
 8008962:	4640      	mov	r0, r8
 8008964:	4798      	blx	r3
 8008966:	6923      	ldr	r3, [r4, #16]
 8008968:	3b01      	subs	r3, #1
 800896a:	6123      	str	r3, [r4, #16]
 800896c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008970:	fa5f fa8a 	uxtb.w	sl, sl
 8008974:	f1ba 0f02 	cmp.w	sl, #2
 8008978:	d1ee      	bne.n	8008958 <_scanf_float+0x2d4>
 800897a:	3d03      	subs	r5, #3
 800897c:	b2ed      	uxtb	r5, r5
 800897e:	1b76      	subs	r6, r6, r5
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	05da      	lsls	r2, r3, #23
 8008984:	d530      	bpl.n	80089e8 <_scanf_float+0x364>
 8008986:	055b      	lsls	r3, r3, #21
 8008988:	d511      	bpl.n	80089ae <_scanf_float+0x32a>
 800898a:	9b01      	ldr	r3, [sp, #4]
 800898c:	429e      	cmp	r6, r3
 800898e:	f67f aebc 	bls.w	800870a <_scanf_float+0x86>
 8008992:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008996:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800899a:	463a      	mov	r2, r7
 800899c:	4640      	mov	r0, r8
 800899e:	4798      	blx	r3
 80089a0:	6923      	ldr	r3, [r4, #16]
 80089a2:	3b01      	subs	r3, #1
 80089a4:	6123      	str	r3, [r4, #16]
 80089a6:	e7f0      	b.n	800898a <_scanf_float+0x306>
 80089a8:	46aa      	mov	sl, r5
 80089aa:	46b3      	mov	fp, r6
 80089ac:	e7de      	b.n	800896c <_scanf_float+0x2e8>
 80089ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80089b2:	6923      	ldr	r3, [r4, #16]
 80089b4:	2965      	cmp	r1, #101	@ 0x65
 80089b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80089ba:	f106 35ff 	add.w	r5, r6, #4294967295
 80089be:	6123      	str	r3, [r4, #16]
 80089c0:	d00c      	beq.n	80089dc <_scanf_float+0x358>
 80089c2:	2945      	cmp	r1, #69	@ 0x45
 80089c4:	d00a      	beq.n	80089dc <_scanf_float+0x358>
 80089c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089ca:	463a      	mov	r2, r7
 80089cc:	4640      	mov	r0, r8
 80089ce:	4798      	blx	r3
 80089d0:	6923      	ldr	r3, [r4, #16]
 80089d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	1eb5      	subs	r5, r6, #2
 80089da:	6123      	str	r3, [r4, #16]
 80089dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089e0:	463a      	mov	r2, r7
 80089e2:	4640      	mov	r0, r8
 80089e4:	4798      	blx	r3
 80089e6:	462e      	mov	r6, r5
 80089e8:	6822      	ldr	r2, [r4, #0]
 80089ea:	f012 0210 	ands.w	r2, r2, #16
 80089ee:	d001      	beq.n	80089f4 <_scanf_float+0x370>
 80089f0:	2000      	movs	r0, #0
 80089f2:	e68b      	b.n	800870c <_scanf_float+0x88>
 80089f4:	7032      	strb	r2, [r6, #0]
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80089fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a00:	d11c      	bne.n	8008a3c <_scanf_float+0x3b8>
 8008a02:	9b02      	ldr	r3, [sp, #8]
 8008a04:	454b      	cmp	r3, r9
 8008a06:	eba3 0209 	sub.w	r2, r3, r9
 8008a0a:	d123      	bne.n	8008a54 <_scanf_float+0x3d0>
 8008a0c:	9901      	ldr	r1, [sp, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	4640      	mov	r0, r8
 8008a12:	f7ff f95d 	bl	8007cd0 <_strtod_r>
 8008a16:	9b03      	ldr	r3, [sp, #12]
 8008a18:	6821      	ldr	r1, [r4, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f011 0f02 	tst.w	r1, #2
 8008a20:	ec57 6b10 	vmov	r6, r7, d0
 8008a24:	f103 0204 	add.w	r2, r3, #4
 8008a28:	d01f      	beq.n	8008a6a <_scanf_float+0x3e6>
 8008a2a:	9903      	ldr	r1, [sp, #12]
 8008a2c:	600a      	str	r2, [r1, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	e9c3 6700 	strd	r6, r7, [r3]
 8008a34:	68e3      	ldr	r3, [r4, #12]
 8008a36:	3301      	adds	r3, #1
 8008a38:	60e3      	str	r3, [r4, #12]
 8008a3a:	e7d9      	b.n	80089f0 <_scanf_float+0x36c>
 8008a3c:	9b04      	ldr	r3, [sp, #16]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0e4      	beq.n	8008a0c <_scanf_float+0x388>
 8008a42:	9905      	ldr	r1, [sp, #20]
 8008a44:	230a      	movs	r3, #10
 8008a46:	3101      	adds	r1, #1
 8008a48:	4640      	mov	r0, r8
 8008a4a:	f7ff f9c1 	bl	8007dd0 <_strtol_r>
 8008a4e:	9b04      	ldr	r3, [sp, #16]
 8008a50:	9e05      	ldr	r6, [sp, #20]
 8008a52:	1ac2      	subs	r2, r0, r3
 8008a54:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008a58:	429e      	cmp	r6, r3
 8008a5a:	bf28      	it	cs
 8008a5c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008a60:	4910      	ldr	r1, [pc, #64]	@ (8008aa4 <_scanf_float+0x420>)
 8008a62:	4630      	mov	r0, r6
 8008a64:	f000 f918 	bl	8008c98 <siprintf>
 8008a68:	e7d0      	b.n	8008a0c <_scanf_float+0x388>
 8008a6a:	f011 0f04 	tst.w	r1, #4
 8008a6e:	9903      	ldr	r1, [sp, #12]
 8008a70:	600a      	str	r2, [r1, #0]
 8008a72:	d1dc      	bne.n	8008a2e <_scanf_float+0x3aa>
 8008a74:	681d      	ldr	r5, [r3, #0]
 8008a76:	4632      	mov	r2, r6
 8008a78:	463b      	mov	r3, r7
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	4639      	mov	r1, r7
 8008a7e:	f7f8 f855 	bl	8000b2c <__aeabi_dcmpun>
 8008a82:	b128      	cbz	r0, 8008a90 <_scanf_float+0x40c>
 8008a84:	4808      	ldr	r0, [pc, #32]	@ (8008aa8 <_scanf_float+0x424>)
 8008a86:	f000 fa23 	bl	8008ed0 <nanf>
 8008a8a:	ed85 0a00 	vstr	s0, [r5]
 8008a8e:	e7d1      	b.n	8008a34 <_scanf_float+0x3b0>
 8008a90:	4630      	mov	r0, r6
 8008a92:	4639      	mov	r1, r7
 8008a94:	f7f8 f8a8 	bl	8000be8 <__aeabi_d2f>
 8008a98:	6028      	str	r0, [r5, #0]
 8008a9a:	e7cb      	b.n	8008a34 <_scanf_float+0x3b0>
 8008a9c:	f04f 0900 	mov.w	r9, #0
 8008aa0:	e629      	b.n	80086f6 <_scanf_float+0x72>
 8008aa2:	bf00      	nop
 8008aa4:	0800b985 	.word	0x0800b985
 8008aa8:	0800b9cd 	.word	0x0800b9cd

08008aac <std>:
 8008aac:	2300      	movs	r3, #0
 8008aae:	b510      	push	{r4, lr}
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aba:	6083      	str	r3, [r0, #8]
 8008abc:	8181      	strh	r1, [r0, #12]
 8008abe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ac0:	81c2      	strh	r2, [r0, #14]
 8008ac2:	6183      	str	r3, [r0, #24]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	2208      	movs	r2, #8
 8008ac8:	305c      	adds	r0, #92	@ 0x5c
 8008aca:	f000 f948 	bl	8008d5e <memset>
 8008ace:	4b0d      	ldr	r3, [pc, #52]	@ (8008b04 <std+0x58>)
 8008ad0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b08 <std+0x5c>)
 8008ad4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8008b0c <std+0x60>)
 8008ad8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ada:	4b0d      	ldr	r3, [pc, #52]	@ (8008b10 <std+0x64>)
 8008adc:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ade:	4b0d      	ldr	r3, [pc, #52]	@ (8008b14 <std+0x68>)
 8008ae0:	6224      	str	r4, [r4, #32]
 8008ae2:	429c      	cmp	r4, r3
 8008ae4:	d006      	beq.n	8008af4 <std+0x48>
 8008ae6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008aea:	4294      	cmp	r4, r2
 8008aec:	d002      	beq.n	8008af4 <std+0x48>
 8008aee:	33d0      	adds	r3, #208	@ 0xd0
 8008af0:	429c      	cmp	r4, r3
 8008af2:	d105      	bne.n	8008b00 <std+0x54>
 8008af4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008afc:	f000 b9ce 	b.w	8008e9c <__retarget_lock_init_recursive>
 8008b00:	bd10      	pop	{r4, pc}
 8008b02:	bf00      	nop
 8008b04:	08008cd9 	.word	0x08008cd9
 8008b08:	08008cfb 	.word	0x08008cfb
 8008b0c:	08008d33 	.word	0x08008d33
 8008b10:	08008d57 	.word	0x08008d57
 8008b14:	200007a0 	.word	0x200007a0

08008b18 <stdio_exit_handler>:
 8008b18:	4a02      	ldr	r2, [pc, #8]	@ (8008b24 <stdio_exit_handler+0xc>)
 8008b1a:	4903      	ldr	r1, [pc, #12]	@ (8008b28 <stdio_exit_handler+0x10>)
 8008b1c:	4803      	ldr	r0, [pc, #12]	@ (8008b2c <stdio_exit_handler+0x14>)
 8008b1e:	f000 b869 	b.w	8008bf4 <_fwalk_sglue>
 8008b22:	bf00      	nop
 8008b24:	2000000c 	.word	0x2000000c
 8008b28:	0800b011 	.word	0x0800b011
 8008b2c:	20000188 	.word	0x20000188

08008b30 <cleanup_stdio>:
 8008b30:	6841      	ldr	r1, [r0, #4]
 8008b32:	4b0c      	ldr	r3, [pc, #48]	@ (8008b64 <cleanup_stdio+0x34>)
 8008b34:	4299      	cmp	r1, r3
 8008b36:	b510      	push	{r4, lr}
 8008b38:	4604      	mov	r4, r0
 8008b3a:	d001      	beq.n	8008b40 <cleanup_stdio+0x10>
 8008b3c:	f002 fa68 	bl	800b010 <_fflush_r>
 8008b40:	68a1      	ldr	r1, [r4, #8]
 8008b42:	4b09      	ldr	r3, [pc, #36]	@ (8008b68 <cleanup_stdio+0x38>)
 8008b44:	4299      	cmp	r1, r3
 8008b46:	d002      	beq.n	8008b4e <cleanup_stdio+0x1e>
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f002 fa61 	bl	800b010 <_fflush_r>
 8008b4e:	68e1      	ldr	r1, [r4, #12]
 8008b50:	4b06      	ldr	r3, [pc, #24]	@ (8008b6c <cleanup_stdio+0x3c>)
 8008b52:	4299      	cmp	r1, r3
 8008b54:	d004      	beq.n	8008b60 <cleanup_stdio+0x30>
 8008b56:	4620      	mov	r0, r4
 8008b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b5c:	f002 ba58 	b.w	800b010 <_fflush_r>
 8008b60:	bd10      	pop	{r4, pc}
 8008b62:	bf00      	nop
 8008b64:	200007a0 	.word	0x200007a0
 8008b68:	20000808 	.word	0x20000808
 8008b6c:	20000870 	.word	0x20000870

08008b70 <global_stdio_init.part.0>:
 8008b70:	b510      	push	{r4, lr}
 8008b72:	4b0b      	ldr	r3, [pc, #44]	@ (8008ba0 <global_stdio_init.part.0+0x30>)
 8008b74:	4c0b      	ldr	r4, [pc, #44]	@ (8008ba4 <global_stdio_init.part.0+0x34>)
 8008b76:	4a0c      	ldr	r2, [pc, #48]	@ (8008ba8 <global_stdio_init.part.0+0x38>)
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2104      	movs	r1, #4
 8008b80:	f7ff ff94 	bl	8008aac <std>
 8008b84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b88:	2201      	movs	r2, #1
 8008b8a:	2109      	movs	r1, #9
 8008b8c:	f7ff ff8e 	bl	8008aac <std>
 8008b90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b94:	2202      	movs	r2, #2
 8008b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b9a:	2112      	movs	r1, #18
 8008b9c:	f7ff bf86 	b.w	8008aac <std>
 8008ba0:	200008d8 	.word	0x200008d8
 8008ba4:	200007a0 	.word	0x200007a0
 8008ba8:	08008b19 	.word	0x08008b19

08008bac <__sfp_lock_acquire>:
 8008bac:	4801      	ldr	r0, [pc, #4]	@ (8008bb4 <__sfp_lock_acquire+0x8>)
 8008bae:	f000 b976 	b.w	8008e9e <__retarget_lock_acquire_recursive>
 8008bb2:	bf00      	nop
 8008bb4:	200008e1 	.word	0x200008e1

08008bb8 <__sfp_lock_release>:
 8008bb8:	4801      	ldr	r0, [pc, #4]	@ (8008bc0 <__sfp_lock_release+0x8>)
 8008bba:	f000 b971 	b.w	8008ea0 <__retarget_lock_release_recursive>
 8008bbe:	bf00      	nop
 8008bc0:	200008e1 	.word	0x200008e1

08008bc4 <__sinit>:
 8008bc4:	b510      	push	{r4, lr}
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	f7ff fff0 	bl	8008bac <__sfp_lock_acquire>
 8008bcc:	6a23      	ldr	r3, [r4, #32]
 8008bce:	b11b      	cbz	r3, 8008bd8 <__sinit+0x14>
 8008bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bd4:	f7ff bff0 	b.w	8008bb8 <__sfp_lock_release>
 8008bd8:	4b04      	ldr	r3, [pc, #16]	@ (8008bec <__sinit+0x28>)
 8008bda:	6223      	str	r3, [r4, #32]
 8008bdc:	4b04      	ldr	r3, [pc, #16]	@ (8008bf0 <__sinit+0x2c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1f5      	bne.n	8008bd0 <__sinit+0xc>
 8008be4:	f7ff ffc4 	bl	8008b70 <global_stdio_init.part.0>
 8008be8:	e7f2      	b.n	8008bd0 <__sinit+0xc>
 8008bea:	bf00      	nop
 8008bec:	08008b31 	.word	0x08008b31
 8008bf0:	200008d8 	.word	0x200008d8

08008bf4 <_fwalk_sglue>:
 8008bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf8:	4607      	mov	r7, r0
 8008bfa:	4688      	mov	r8, r1
 8008bfc:	4614      	mov	r4, r2
 8008bfe:	2600      	movs	r6, #0
 8008c00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c04:	f1b9 0901 	subs.w	r9, r9, #1
 8008c08:	d505      	bpl.n	8008c16 <_fwalk_sglue+0x22>
 8008c0a:	6824      	ldr	r4, [r4, #0]
 8008c0c:	2c00      	cmp	r4, #0
 8008c0e:	d1f7      	bne.n	8008c00 <_fwalk_sglue+0xc>
 8008c10:	4630      	mov	r0, r6
 8008c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c16:	89ab      	ldrh	r3, [r5, #12]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d907      	bls.n	8008c2c <_fwalk_sglue+0x38>
 8008c1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c20:	3301      	adds	r3, #1
 8008c22:	d003      	beq.n	8008c2c <_fwalk_sglue+0x38>
 8008c24:	4629      	mov	r1, r5
 8008c26:	4638      	mov	r0, r7
 8008c28:	47c0      	blx	r8
 8008c2a:	4306      	orrs	r6, r0
 8008c2c:	3568      	adds	r5, #104	@ 0x68
 8008c2e:	e7e9      	b.n	8008c04 <_fwalk_sglue+0x10>

08008c30 <sniprintf>:
 8008c30:	b40c      	push	{r2, r3}
 8008c32:	b530      	push	{r4, r5, lr}
 8008c34:	4b17      	ldr	r3, [pc, #92]	@ (8008c94 <sniprintf+0x64>)
 8008c36:	1e0c      	subs	r4, r1, #0
 8008c38:	681d      	ldr	r5, [r3, #0]
 8008c3a:	b09d      	sub	sp, #116	@ 0x74
 8008c3c:	da08      	bge.n	8008c50 <sniprintf+0x20>
 8008c3e:	238b      	movs	r3, #139	@ 0x8b
 8008c40:	602b      	str	r3, [r5, #0]
 8008c42:	f04f 30ff 	mov.w	r0, #4294967295
 8008c46:	b01d      	add	sp, #116	@ 0x74
 8008c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c4c:	b002      	add	sp, #8
 8008c4e:	4770      	bx	lr
 8008c50:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008c54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008c58:	bf14      	ite	ne
 8008c5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008c5e:	4623      	moveq	r3, r4
 8008c60:	9304      	str	r3, [sp, #16]
 8008c62:	9307      	str	r3, [sp, #28]
 8008c64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c68:	9002      	str	r0, [sp, #8]
 8008c6a:	9006      	str	r0, [sp, #24]
 8008c6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008c70:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008c72:	ab21      	add	r3, sp, #132	@ 0x84
 8008c74:	a902      	add	r1, sp, #8
 8008c76:	4628      	mov	r0, r5
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	f002 f849 	bl	800ad10 <_svfiprintf_r>
 8008c7e:	1c43      	adds	r3, r0, #1
 8008c80:	bfbc      	itt	lt
 8008c82:	238b      	movlt	r3, #139	@ 0x8b
 8008c84:	602b      	strlt	r3, [r5, #0]
 8008c86:	2c00      	cmp	r4, #0
 8008c88:	d0dd      	beq.n	8008c46 <sniprintf+0x16>
 8008c8a:	9b02      	ldr	r3, [sp, #8]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	701a      	strb	r2, [r3, #0]
 8008c90:	e7d9      	b.n	8008c46 <sniprintf+0x16>
 8008c92:	bf00      	nop
 8008c94:	20000184 	.word	0x20000184

08008c98 <siprintf>:
 8008c98:	b40e      	push	{r1, r2, r3}
 8008c9a:	b500      	push	{lr}
 8008c9c:	b09c      	sub	sp, #112	@ 0x70
 8008c9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008ca0:	9002      	str	r0, [sp, #8]
 8008ca2:	9006      	str	r0, [sp, #24]
 8008ca4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008ca8:	4809      	ldr	r0, [pc, #36]	@ (8008cd0 <siprintf+0x38>)
 8008caa:	9107      	str	r1, [sp, #28]
 8008cac:	9104      	str	r1, [sp, #16]
 8008cae:	4909      	ldr	r1, [pc, #36]	@ (8008cd4 <siprintf+0x3c>)
 8008cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb4:	9105      	str	r1, [sp, #20]
 8008cb6:	6800      	ldr	r0, [r0, #0]
 8008cb8:	9301      	str	r3, [sp, #4]
 8008cba:	a902      	add	r1, sp, #8
 8008cbc:	f002 f828 	bl	800ad10 <_svfiprintf_r>
 8008cc0:	9b02      	ldr	r3, [sp, #8]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	701a      	strb	r2, [r3, #0]
 8008cc6:	b01c      	add	sp, #112	@ 0x70
 8008cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ccc:	b003      	add	sp, #12
 8008cce:	4770      	bx	lr
 8008cd0:	20000184 	.word	0x20000184
 8008cd4:	ffff0208 	.word	0xffff0208

08008cd8 <__sread>:
 8008cd8:	b510      	push	{r4, lr}
 8008cda:	460c      	mov	r4, r1
 8008cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ce0:	f000 f87e 	bl	8008de0 <_read_r>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	bfab      	itete	ge
 8008ce8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008cea:	89a3      	ldrhlt	r3, [r4, #12]
 8008cec:	181b      	addge	r3, r3, r0
 8008cee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008cf2:	bfac      	ite	ge
 8008cf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008cf6:	81a3      	strhlt	r3, [r4, #12]
 8008cf8:	bd10      	pop	{r4, pc}

08008cfa <__swrite>:
 8008cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cfe:	461f      	mov	r7, r3
 8008d00:	898b      	ldrh	r3, [r1, #12]
 8008d02:	05db      	lsls	r3, r3, #23
 8008d04:	4605      	mov	r5, r0
 8008d06:	460c      	mov	r4, r1
 8008d08:	4616      	mov	r6, r2
 8008d0a:	d505      	bpl.n	8008d18 <__swrite+0x1e>
 8008d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d10:	2302      	movs	r3, #2
 8008d12:	2200      	movs	r2, #0
 8008d14:	f000 f852 	bl	8008dbc <_lseek_r>
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d22:	81a3      	strh	r3, [r4, #12]
 8008d24:	4632      	mov	r2, r6
 8008d26:	463b      	mov	r3, r7
 8008d28:	4628      	mov	r0, r5
 8008d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d2e:	f000 b879 	b.w	8008e24 <_write_r>

08008d32 <__sseek>:
 8008d32:	b510      	push	{r4, lr}
 8008d34:	460c      	mov	r4, r1
 8008d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d3a:	f000 f83f 	bl	8008dbc <_lseek_r>
 8008d3e:	1c43      	adds	r3, r0, #1
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	bf15      	itete	ne
 8008d44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d4e:	81a3      	strheq	r3, [r4, #12]
 8008d50:	bf18      	it	ne
 8008d52:	81a3      	strhne	r3, [r4, #12]
 8008d54:	bd10      	pop	{r4, pc}

08008d56 <__sclose>:
 8008d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d5a:	f000 b81f 	b.w	8008d9c <_close_r>

08008d5e <memset>:
 8008d5e:	4402      	add	r2, r0
 8008d60:	4603      	mov	r3, r0
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d100      	bne.n	8008d68 <memset+0xa>
 8008d66:	4770      	bx	lr
 8008d68:	f803 1b01 	strb.w	r1, [r3], #1
 8008d6c:	e7f9      	b.n	8008d62 <memset+0x4>

08008d6e <strncmp>:
 8008d6e:	b510      	push	{r4, lr}
 8008d70:	b16a      	cbz	r2, 8008d8e <strncmp+0x20>
 8008d72:	3901      	subs	r1, #1
 8008d74:	1884      	adds	r4, r0, r2
 8008d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d7a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d103      	bne.n	8008d8a <strncmp+0x1c>
 8008d82:	42a0      	cmp	r0, r4
 8008d84:	d001      	beq.n	8008d8a <strncmp+0x1c>
 8008d86:	2a00      	cmp	r2, #0
 8008d88:	d1f5      	bne.n	8008d76 <strncmp+0x8>
 8008d8a:	1ad0      	subs	r0, r2, r3
 8008d8c:	bd10      	pop	{r4, pc}
 8008d8e:	4610      	mov	r0, r2
 8008d90:	e7fc      	b.n	8008d8c <strncmp+0x1e>
	...

08008d94 <_localeconv_r>:
 8008d94:	4800      	ldr	r0, [pc, #0]	@ (8008d98 <_localeconv_r+0x4>)
 8008d96:	4770      	bx	lr
 8008d98:	20000108 	.word	0x20000108

08008d9c <_close_r>:
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	4d06      	ldr	r5, [pc, #24]	@ (8008db8 <_close_r+0x1c>)
 8008da0:	2300      	movs	r3, #0
 8008da2:	4604      	mov	r4, r0
 8008da4:	4608      	mov	r0, r1
 8008da6:	602b      	str	r3, [r5, #0]
 8008da8:	f7f8 fd06 	bl	80017b8 <_close>
 8008dac:	1c43      	adds	r3, r0, #1
 8008dae:	d102      	bne.n	8008db6 <_close_r+0x1a>
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	b103      	cbz	r3, 8008db6 <_close_r+0x1a>
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	bd38      	pop	{r3, r4, r5, pc}
 8008db8:	200008dc 	.word	0x200008dc

08008dbc <_lseek_r>:
 8008dbc:	b538      	push	{r3, r4, r5, lr}
 8008dbe:	4d07      	ldr	r5, [pc, #28]	@ (8008ddc <_lseek_r+0x20>)
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	4608      	mov	r0, r1
 8008dc4:	4611      	mov	r1, r2
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	602a      	str	r2, [r5, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f7f8 fd1b 	bl	8001806 <_lseek>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d102      	bne.n	8008dda <_lseek_r+0x1e>
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	b103      	cbz	r3, 8008dda <_lseek_r+0x1e>
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	200008dc 	.word	0x200008dc

08008de0 <_read_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4d07      	ldr	r5, [pc, #28]	@ (8008e00 <_read_r+0x20>)
 8008de4:	4604      	mov	r4, r0
 8008de6:	4608      	mov	r0, r1
 8008de8:	4611      	mov	r1, r2
 8008dea:	2200      	movs	r2, #0
 8008dec:	602a      	str	r2, [r5, #0]
 8008dee:	461a      	mov	r2, r3
 8008df0:	f7f8 fca9 	bl	8001746 <_read>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_read_r+0x1e>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_read_r+0x1e>
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	200008dc 	.word	0x200008dc

08008e04 <_sbrk_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	4d06      	ldr	r5, [pc, #24]	@ (8008e20 <_sbrk_r+0x1c>)
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	4608      	mov	r0, r1
 8008e0e:	602b      	str	r3, [r5, #0]
 8008e10:	f7f8 fd06 	bl	8001820 <_sbrk>
 8008e14:	1c43      	adds	r3, r0, #1
 8008e16:	d102      	bne.n	8008e1e <_sbrk_r+0x1a>
 8008e18:	682b      	ldr	r3, [r5, #0]
 8008e1a:	b103      	cbz	r3, 8008e1e <_sbrk_r+0x1a>
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	bd38      	pop	{r3, r4, r5, pc}
 8008e20:	200008dc 	.word	0x200008dc

08008e24 <_write_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	4d07      	ldr	r5, [pc, #28]	@ (8008e44 <_write_r+0x20>)
 8008e28:	4604      	mov	r4, r0
 8008e2a:	4608      	mov	r0, r1
 8008e2c:	4611      	mov	r1, r2
 8008e2e:	2200      	movs	r2, #0
 8008e30:	602a      	str	r2, [r5, #0]
 8008e32:	461a      	mov	r2, r3
 8008e34:	f7f8 fca4 	bl	8001780 <_write>
 8008e38:	1c43      	adds	r3, r0, #1
 8008e3a:	d102      	bne.n	8008e42 <_write_r+0x1e>
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	b103      	cbz	r3, 8008e42 <_write_r+0x1e>
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	bd38      	pop	{r3, r4, r5, pc}
 8008e44:	200008dc 	.word	0x200008dc

08008e48 <__errno>:
 8008e48:	4b01      	ldr	r3, [pc, #4]	@ (8008e50 <__errno+0x8>)
 8008e4a:	6818      	ldr	r0, [r3, #0]
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	20000184 	.word	0x20000184

08008e54 <__libc_init_array>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	4d0d      	ldr	r5, [pc, #52]	@ (8008e8c <__libc_init_array+0x38>)
 8008e58:	4c0d      	ldr	r4, [pc, #52]	@ (8008e90 <__libc_init_array+0x3c>)
 8008e5a:	1b64      	subs	r4, r4, r5
 8008e5c:	10a4      	asrs	r4, r4, #2
 8008e5e:	2600      	movs	r6, #0
 8008e60:	42a6      	cmp	r6, r4
 8008e62:	d109      	bne.n	8008e78 <__libc_init_array+0x24>
 8008e64:	4d0b      	ldr	r5, [pc, #44]	@ (8008e94 <__libc_init_array+0x40>)
 8008e66:	4c0c      	ldr	r4, [pc, #48]	@ (8008e98 <__libc_init_array+0x44>)
 8008e68:	f002 fc92 	bl	800b790 <_init>
 8008e6c:	1b64      	subs	r4, r4, r5
 8008e6e:	10a4      	asrs	r4, r4, #2
 8008e70:	2600      	movs	r6, #0
 8008e72:	42a6      	cmp	r6, r4
 8008e74:	d105      	bne.n	8008e82 <__libc_init_array+0x2e>
 8008e76:	bd70      	pop	{r4, r5, r6, pc}
 8008e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e7c:	4798      	blx	r3
 8008e7e:	3601      	adds	r6, #1
 8008e80:	e7ee      	b.n	8008e60 <__libc_init_array+0xc>
 8008e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e86:	4798      	blx	r3
 8008e88:	3601      	adds	r6, #1
 8008e8a:	e7f2      	b.n	8008e72 <__libc_init_array+0x1e>
 8008e8c:	0800bc2c 	.word	0x0800bc2c
 8008e90:	0800bc2c 	.word	0x0800bc2c
 8008e94:	0800bc2c 	.word	0x0800bc2c
 8008e98:	0800bc30 	.word	0x0800bc30

08008e9c <__retarget_lock_init_recursive>:
 8008e9c:	4770      	bx	lr

08008e9e <__retarget_lock_acquire_recursive>:
 8008e9e:	4770      	bx	lr

08008ea0 <__retarget_lock_release_recursive>:
 8008ea0:	4770      	bx	lr

08008ea2 <memcpy>:
 8008ea2:	440a      	add	r2, r1
 8008ea4:	4291      	cmp	r1, r2
 8008ea6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008eaa:	d100      	bne.n	8008eae <memcpy+0xc>
 8008eac:	4770      	bx	lr
 8008eae:	b510      	push	{r4, lr}
 8008eb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eb8:	4291      	cmp	r1, r2
 8008eba:	d1f9      	bne.n	8008eb0 <memcpy+0xe>
 8008ebc:	bd10      	pop	{r4, pc}
	...

08008ec0 <nan>:
 8008ec0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008ec8 <nan+0x8>
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	00000000 	.word	0x00000000
 8008ecc:	7ff80000 	.word	0x7ff80000

08008ed0 <nanf>:
 8008ed0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008ed8 <nanf+0x8>
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	7fc00000 	.word	0x7fc00000

08008edc <__assert_func>:
 8008edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ede:	4614      	mov	r4, r2
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	4b09      	ldr	r3, [pc, #36]	@ (8008f08 <__assert_func+0x2c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	68d8      	ldr	r0, [r3, #12]
 8008eea:	b954      	cbnz	r4, 8008f02 <__assert_func+0x26>
 8008eec:	4b07      	ldr	r3, [pc, #28]	@ (8008f0c <__assert_func+0x30>)
 8008eee:	461c      	mov	r4, r3
 8008ef0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ef4:	9100      	str	r1, [sp, #0]
 8008ef6:	462b      	mov	r3, r5
 8008ef8:	4905      	ldr	r1, [pc, #20]	@ (8008f10 <__assert_func+0x34>)
 8008efa:	f002 f8b1 	bl	800b060 <fiprintf>
 8008efe:	f002 f8db 	bl	800b0b8 <abort>
 8008f02:	4b04      	ldr	r3, [pc, #16]	@ (8008f14 <__assert_func+0x38>)
 8008f04:	e7f4      	b.n	8008ef0 <__assert_func+0x14>
 8008f06:	bf00      	nop
 8008f08:	20000184 	.word	0x20000184
 8008f0c:	0800b9cd 	.word	0x0800b9cd
 8008f10:	0800b99f 	.word	0x0800b99f
 8008f14:	0800b992 	.word	0x0800b992

08008f18 <quorem>:
 8008f18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	6903      	ldr	r3, [r0, #16]
 8008f1e:	690c      	ldr	r4, [r1, #16]
 8008f20:	42a3      	cmp	r3, r4
 8008f22:	4607      	mov	r7, r0
 8008f24:	db7e      	blt.n	8009024 <quorem+0x10c>
 8008f26:	3c01      	subs	r4, #1
 8008f28:	f101 0814 	add.w	r8, r1, #20
 8008f2c:	00a3      	lsls	r3, r4, #2
 8008f2e:	f100 0514 	add.w	r5, r0, #20
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f38:	9301      	str	r3, [sp, #4]
 8008f3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f42:	3301      	adds	r3, #1
 8008f44:	429a      	cmp	r2, r3
 8008f46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f4e:	d32e      	bcc.n	8008fae <quorem+0x96>
 8008f50:	f04f 0a00 	mov.w	sl, #0
 8008f54:	46c4      	mov	ip, r8
 8008f56:	46ae      	mov	lr, r5
 8008f58:	46d3      	mov	fp, sl
 8008f5a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f5e:	b298      	uxth	r0, r3
 8008f60:	fb06 a000 	mla	r0, r6, r0, sl
 8008f64:	0c02      	lsrs	r2, r0, #16
 8008f66:	0c1b      	lsrs	r3, r3, #16
 8008f68:	fb06 2303 	mla	r3, r6, r3, r2
 8008f6c:	f8de 2000 	ldr.w	r2, [lr]
 8008f70:	b280      	uxth	r0, r0
 8008f72:	b292      	uxth	r2, r2
 8008f74:	1a12      	subs	r2, r2, r0
 8008f76:	445a      	add	r2, fp
 8008f78:	f8de 0000 	ldr.w	r0, [lr]
 8008f7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008f86:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008f8a:	b292      	uxth	r2, r2
 8008f8c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008f90:	45e1      	cmp	r9, ip
 8008f92:	f84e 2b04 	str.w	r2, [lr], #4
 8008f96:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008f9a:	d2de      	bcs.n	8008f5a <quorem+0x42>
 8008f9c:	9b00      	ldr	r3, [sp, #0]
 8008f9e:	58eb      	ldr	r3, [r5, r3]
 8008fa0:	b92b      	cbnz	r3, 8008fae <quorem+0x96>
 8008fa2:	9b01      	ldr	r3, [sp, #4]
 8008fa4:	3b04      	subs	r3, #4
 8008fa6:	429d      	cmp	r5, r3
 8008fa8:	461a      	mov	r2, r3
 8008faa:	d32f      	bcc.n	800900c <quorem+0xf4>
 8008fac:	613c      	str	r4, [r7, #16]
 8008fae:	4638      	mov	r0, r7
 8008fb0:	f001 fc58 	bl	800a864 <__mcmp>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	db25      	blt.n	8009004 <quorem+0xec>
 8008fb8:	4629      	mov	r1, r5
 8008fba:	2000      	movs	r0, #0
 8008fbc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008fc0:	f8d1 c000 	ldr.w	ip, [r1]
 8008fc4:	fa1f fe82 	uxth.w	lr, r2
 8008fc8:	fa1f f38c 	uxth.w	r3, ip
 8008fcc:	eba3 030e 	sub.w	r3, r3, lr
 8008fd0:	4403      	add	r3, r0
 8008fd2:	0c12      	lsrs	r2, r2, #16
 8008fd4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008fd8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fe2:	45c1      	cmp	r9, r8
 8008fe4:	f841 3b04 	str.w	r3, [r1], #4
 8008fe8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008fec:	d2e6      	bcs.n	8008fbc <quorem+0xa4>
 8008fee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ff6:	b922      	cbnz	r2, 8009002 <quorem+0xea>
 8008ff8:	3b04      	subs	r3, #4
 8008ffa:	429d      	cmp	r5, r3
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	d30b      	bcc.n	8009018 <quorem+0x100>
 8009000:	613c      	str	r4, [r7, #16]
 8009002:	3601      	adds	r6, #1
 8009004:	4630      	mov	r0, r6
 8009006:	b003      	add	sp, #12
 8009008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800900c:	6812      	ldr	r2, [r2, #0]
 800900e:	3b04      	subs	r3, #4
 8009010:	2a00      	cmp	r2, #0
 8009012:	d1cb      	bne.n	8008fac <quorem+0x94>
 8009014:	3c01      	subs	r4, #1
 8009016:	e7c6      	b.n	8008fa6 <quorem+0x8e>
 8009018:	6812      	ldr	r2, [r2, #0]
 800901a:	3b04      	subs	r3, #4
 800901c:	2a00      	cmp	r2, #0
 800901e:	d1ef      	bne.n	8009000 <quorem+0xe8>
 8009020:	3c01      	subs	r4, #1
 8009022:	e7ea      	b.n	8008ffa <quorem+0xe2>
 8009024:	2000      	movs	r0, #0
 8009026:	e7ee      	b.n	8009006 <quorem+0xee>

08009028 <_dtoa_r>:
 8009028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	69c7      	ldr	r7, [r0, #28]
 800902e:	b099      	sub	sp, #100	@ 0x64
 8009030:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009034:	ec55 4b10 	vmov	r4, r5, d0
 8009038:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800903a:	9109      	str	r1, [sp, #36]	@ 0x24
 800903c:	4683      	mov	fp, r0
 800903e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009040:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009042:	b97f      	cbnz	r7, 8009064 <_dtoa_r+0x3c>
 8009044:	2010      	movs	r0, #16
 8009046:	f7fd ff89 	bl	8006f5c <malloc>
 800904a:	4602      	mov	r2, r0
 800904c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009050:	b920      	cbnz	r0, 800905c <_dtoa_r+0x34>
 8009052:	4ba7      	ldr	r3, [pc, #668]	@ (80092f0 <_dtoa_r+0x2c8>)
 8009054:	21ef      	movs	r1, #239	@ 0xef
 8009056:	48a7      	ldr	r0, [pc, #668]	@ (80092f4 <_dtoa_r+0x2cc>)
 8009058:	f7ff ff40 	bl	8008edc <__assert_func>
 800905c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009060:	6007      	str	r7, [r0, #0]
 8009062:	60c7      	str	r7, [r0, #12]
 8009064:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009068:	6819      	ldr	r1, [r3, #0]
 800906a:	b159      	cbz	r1, 8009084 <_dtoa_r+0x5c>
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	604a      	str	r2, [r1, #4]
 8009070:	2301      	movs	r3, #1
 8009072:	4093      	lsls	r3, r2
 8009074:	608b      	str	r3, [r1, #8]
 8009076:	4658      	mov	r0, fp
 8009078:	f001 f970 	bl	800a35c <_Bfree>
 800907c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009080:	2200      	movs	r2, #0
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	1e2b      	subs	r3, r5, #0
 8009086:	bfb9      	ittee	lt
 8009088:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800908c:	9303      	strlt	r3, [sp, #12]
 800908e:	2300      	movge	r3, #0
 8009090:	6033      	strge	r3, [r6, #0]
 8009092:	9f03      	ldr	r7, [sp, #12]
 8009094:	4b98      	ldr	r3, [pc, #608]	@ (80092f8 <_dtoa_r+0x2d0>)
 8009096:	bfbc      	itt	lt
 8009098:	2201      	movlt	r2, #1
 800909a:	6032      	strlt	r2, [r6, #0]
 800909c:	43bb      	bics	r3, r7
 800909e:	d112      	bne.n	80090c6 <_dtoa_r+0x9e>
 80090a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80090a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80090a6:	6013      	str	r3, [r2, #0]
 80090a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80090ac:	4323      	orrs	r3, r4
 80090ae:	f000 854d 	beq.w	8009b4c <_dtoa_r+0xb24>
 80090b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80090b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800930c <_dtoa_r+0x2e4>
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 854f 	beq.w	8009b5c <_dtoa_r+0xb34>
 80090be:	f10a 0303 	add.w	r3, sl, #3
 80090c2:	f000 bd49 	b.w	8009b58 <_dtoa_r+0xb30>
 80090c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090ca:	2200      	movs	r2, #0
 80090cc:	ec51 0b17 	vmov	r0, r1, d7
 80090d0:	2300      	movs	r3, #0
 80090d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80090d6:	f7f7 fcf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80090da:	4680      	mov	r8, r0
 80090dc:	b158      	cbz	r0, 80090f6 <_dtoa_r+0xce>
 80090de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80090e0:	2301      	movs	r3, #1
 80090e2:	6013      	str	r3, [r2, #0]
 80090e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80090e6:	b113      	cbz	r3, 80090ee <_dtoa_r+0xc6>
 80090e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80090ea:	4b84      	ldr	r3, [pc, #528]	@ (80092fc <_dtoa_r+0x2d4>)
 80090ec:	6013      	str	r3, [r2, #0]
 80090ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009310 <_dtoa_r+0x2e8>
 80090f2:	f000 bd33 	b.w	8009b5c <_dtoa_r+0xb34>
 80090f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80090fa:	aa16      	add	r2, sp, #88	@ 0x58
 80090fc:	a917      	add	r1, sp, #92	@ 0x5c
 80090fe:	4658      	mov	r0, fp
 8009100:	f001 fcd0 	bl	800aaa4 <__d2b>
 8009104:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009108:	4681      	mov	r9, r0
 800910a:	2e00      	cmp	r6, #0
 800910c:	d077      	beq.n	80091fe <_dtoa_r+0x1d6>
 800910e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009110:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009118:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800911c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009120:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009124:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009128:	4619      	mov	r1, r3
 800912a:	2200      	movs	r2, #0
 800912c:	4b74      	ldr	r3, [pc, #464]	@ (8009300 <_dtoa_r+0x2d8>)
 800912e:	f7f7 f8ab 	bl	8000288 <__aeabi_dsub>
 8009132:	a369      	add	r3, pc, #420	@ (adr r3, 80092d8 <_dtoa_r+0x2b0>)
 8009134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009138:	f7f7 fa5e 	bl	80005f8 <__aeabi_dmul>
 800913c:	a368      	add	r3, pc, #416	@ (adr r3, 80092e0 <_dtoa_r+0x2b8>)
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	f7f7 f8a3 	bl	800028c <__adddf3>
 8009146:	4604      	mov	r4, r0
 8009148:	4630      	mov	r0, r6
 800914a:	460d      	mov	r5, r1
 800914c:	f7f7 f9ea 	bl	8000524 <__aeabi_i2d>
 8009150:	a365      	add	r3, pc, #404	@ (adr r3, 80092e8 <_dtoa_r+0x2c0>)
 8009152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009156:	f7f7 fa4f 	bl	80005f8 <__aeabi_dmul>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4620      	mov	r0, r4
 8009160:	4629      	mov	r1, r5
 8009162:	f7f7 f893 	bl	800028c <__adddf3>
 8009166:	4604      	mov	r4, r0
 8009168:	460d      	mov	r5, r1
 800916a:	f7f7 fcf5 	bl	8000b58 <__aeabi_d2iz>
 800916e:	2200      	movs	r2, #0
 8009170:	4607      	mov	r7, r0
 8009172:	2300      	movs	r3, #0
 8009174:	4620      	mov	r0, r4
 8009176:	4629      	mov	r1, r5
 8009178:	f7f7 fcb0 	bl	8000adc <__aeabi_dcmplt>
 800917c:	b140      	cbz	r0, 8009190 <_dtoa_r+0x168>
 800917e:	4638      	mov	r0, r7
 8009180:	f7f7 f9d0 	bl	8000524 <__aeabi_i2d>
 8009184:	4622      	mov	r2, r4
 8009186:	462b      	mov	r3, r5
 8009188:	f7f7 fc9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800918c:	b900      	cbnz	r0, 8009190 <_dtoa_r+0x168>
 800918e:	3f01      	subs	r7, #1
 8009190:	2f16      	cmp	r7, #22
 8009192:	d851      	bhi.n	8009238 <_dtoa_r+0x210>
 8009194:	4b5b      	ldr	r3, [pc, #364]	@ (8009304 <_dtoa_r+0x2dc>)
 8009196:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091a2:	f7f7 fc9b 	bl	8000adc <__aeabi_dcmplt>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d048      	beq.n	800923c <_dtoa_r+0x214>
 80091aa:	3f01      	subs	r7, #1
 80091ac:	2300      	movs	r3, #0
 80091ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80091b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80091b2:	1b9b      	subs	r3, r3, r6
 80091b4:	1e5a      	subs	r2, r3, #1
 80091b6:	bf44      	itt	mi
 80091b8:	f1c3 0801 	rsbmi	r8, r3, #1
 80091bc:	2300      	movmi	r3, #0
 80091be:	9208      	str	r2, [sp, #32]
 80091c0:	bf54      	ite	pl
 80091c2:	f04f 0800 	movpl.w	r8, #0
 80091c6:	9308      	strmi	r3, [sp, #32]
 80091c8:	2f00      	cmp	r7, #0
 80091ca:	db39      	blt.n	8009240 <_dtoa_r+0x218>
 80091cc:	9b08      	ldr	r3, [sp, #32]
 80091ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 80091d0:	443b      	add	r3, r7
 80091d2:	9308      	str	r3, [sp, #32]
 80091d4:	2300      	movs	r3, #0
 80091d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80091d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091da:	2b09      	cmp	r3, #9
 80091dc:	d864      	bhi.n	80092a8 <_dtoa_r+0x280>
 80091de:	2b05      	cmp	r3, #5
 80091e0:	bfc4      	itt	gt
 80091e2:	3b04      	subgt	r3, #4
 80091e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80091e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091e8:	f1a3 0302 	sub.w	r3, r3, #2
 80091ec:	bfcc      	ite	gt
 80091ee:	2400      	movgt	r4, #0
 80091f0:	2401      	movle	r4, #1
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	d863      	bhi.n	80092be <_dtoa_r+0x296>
 80091f6:	e8df f003 	tbb	[pc, r3]
 80091fa:	372a      	.short	0x372a
 80091fc:	5535      	.short	0x5535
 80091fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009202:	441e      	add	r6, r3
 8009204:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009208:	2b20      	cmp	r3, #32
 800920a:	bfc1      	itttt	gt
 800920c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009210:	409f      	lslgt	r7, r3
 8009212:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009216:	fa24 f303 	lsrgt.w	r3, r4, r3
 800921a:	bfd6      	itet	le
 800921c:	f1c3 0320 	rsble	r3, r3, #32
 8009220:	ea47 0003 	orrgt.w	r0, r7, r3
 8009224:	fa04 f003 	lslle.w	r0, r4, r3
 8009228:	f7f7 f96c 	bl	8000504 <__aeabi_ui2d>
 800922c:	2201      	movs	r2, #1
 800922e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009232:	3e01      	subs	r6, #1
 8009234:	9214      	str	r2, [sp, #80]	@ 0x50
 8009236:	e777      	b.n	8009128 <_dtoa_r+0x100>
 8009238:	2301      	movs	r3, #1
 800923a:	e7b8      	b.n	80091ae <_dtoa_r+0x186>
 800923c:	9012      	str	r0, [sp, #72]	@ 0x48
 800923e:	e7b7      	b.n	80091b0 <_dtoa_r+0x188>
 8009240:	427b      	negs	r3, r7
 8009242:	930a      	str	r3, [sp, #40]	@ 0x28
 8009244:	2300      	movs	r3, #0
 8009246:	eba8 0807 	sub.w	r8, r8, r7
 800924a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800924c:	e7c4      	b.n	80091d8 <_dtoa_r+0x1b0>
 800924e:	2300      	movs	r3, #0
 8009250:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009254:	2b00      	cmp	r3, #0
 8009256:	dc35      	bgt.n	80092c4 <_dtoa_r+0x29c>
 8009258:	2301      	movs	r3, #1
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	9307      	str	r3, [sp, #28]
 800925e:	461a      	mov	r2, r3
 8009260:	920e      	str	r2, [sp, #56]	@ 0x38
 8009262:	e00b      	b.n	800927c <_dtoa_r+0x254>
 8009264:	2301      	movs	r3, #1
 8009266:	e7f3      	b.n	8009250 <_dtoa_r+0x228>
 8009268:	2300      	movs	r3, #0
 800926a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800926c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800926e:	18fb      	adds	r3, r7, r3
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	3301      	adds	r3, #1
 8009274:	2b01      	cmp	r3, #1
 8009276:	9307      	str	r3, [sp, #28]
 8009278:	bfb8      	it	lt
 800927a:	2301      	movlt	r3, #1
 800927c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009280:	2100      	movs	r1, #0
 8009282:	2204      	movs	r2, #4
 8009284:	f102 0514 	add.w	r5, r2, #20
 8009288:	429d      	cmp	r5, r3
 800928a:	d91f      	bls.n	80092cc <_dtoa_r+0x2a4>
 800928c:	6041      	str	r1, [r0, #4]
 800928e:	4658      	mov	r0, fp
 8009290:	f001 f824 	bl	800a2dc <_Balloc>
 8009294:	4682      	mov	sl, r0
 8009296:	2800      	cmp	r0, #0
 8009298:	d13c      	bne.n	8009314 <_dtoa_r+0x2ec>
 800929a:	4b1b      	ldr	r3, [pc, #108]	@ (8009308 <_dtoa_r+0x2e0>)
 800929c:	4602      	mov	r2, r0
 800929e:	f240 11af 	movw	r1, #431	@ 0x1af
 80092a2:	e6d8      	b.n	8009056 <_dtoa_r+0x2e>
 80092a4:	2301      	movs	r3, #1
 80092a6:	e7e0      	b.n	800926a <_dtoa_r+0x242>
 80092a8:	2401      	movs	r4, #1
 80092aa:	2300      	movs	r3, #0
 80092ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80092b0:	f04f 33ff 	mov.w	r3, #4294967295
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	9307      	str	r3, [sp, #28]
 80092b8:	2200      	movs	r2, #0
 80092ba:	2312      	movs	r3, #18
 80092bc:	e7d0      	b.n	8009260 <_dtoa_r+0x238>
 80092be:	2301      	movs	r3, #1
 80092c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092c2:	e7f5      	b.n	80092b0 <_dtoa_r+0x288>
 80092c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	9307      	str	r3, [sp, #28]
 80092ca:	e7d7      	b.n	800927c <_dtoa_r+0x254>
 80092cc:	3101      	adds	r1, #1
 80092ce:	0052      	lsls	r2, r2, #1
 80092d0:	e7d8      	b.n	8009284 <_dtoa_r+0x25c>
 80092d2:	bf00      	nop
 80092d4:	f3af 8000 	nop.w
 80092d8:	636f4361 	.word	0x636f4361
 80092dc:	3fd287a7 	.word	0x3fd287a7
 80092e0:	8b60c8b3 	.word	0x8b60c8b3
 80092e4:	3fc68a28 	.word	0x3fc68a28
 80092e8:	509f79fb 	.word	0x509f79fb
 80092ec:	3fd34413 	.word	0x3fd34413
 80092f0:	0800b9db 	.word	0x0800b9db
 80092f4:	0800b9f2 	.word	0x0800b9f2
 80092f8:	7ff00000 	.word	0x7ff00000
 80092fc:	0800b962 	.word	0x0800b962
 8009300:	3ff80000 	.word	0x3ff80000
 8009304:	0800bb48 	.word	0x0800bb48
 8009308:	0800ba4a 	.word	0x0800ba4a
 800930c:	0800b9d7 	.word	0x0800b9d7
 8009310:	0800b961 	.word	0x0800b961
 8009314:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009318:	6018      	str	r0, [r3, #0]
 800931a:	9b07      	ldr	r3, [sp, #28]
 800931c:	2b0e      	cmp	r3, #14
 800931e:	f200 80a4 	bhi.w	800946a <_dtoa_r+0x442>
 8009322:	2c00      	cmp	r4, #0
 8009324:	f000 80a1 	beq.w	800946a <_dtoa_r+0x442>
 8009328:	2f00      	cmp	r7, #0
 800932a:	dd33      	ble.n	8009394 <_dtoa_r+0x36c>
 800932c:	4bad      	ldr	r3, [pc, #692]	@ (80095e4 <_dtoa_r+0x5bc>)
 800932e:	f007 020f 	and.w	r2, r7, #15
 8009332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009336:	ed93 7b00 	vldr	d7, [r3]
 800933a:	05f8      	lsls	r0, r7, #23
 800933c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009340:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009344:	d516      	bpl.n	8009374 <_dtoa_r+0x34c>
 8009346:	4ba8      	ldr	r3, [pc, #672]	@ (80095e8 <_dtoa_r+0x5c0>)
 8009348:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800934c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009350:	f7f7 fa7c 	bl	800084c <__aeabi_ddiv>
 8009354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009358:	f004 040f 	and.w	r4, r4, #15
 800935c:	2603      	movs	r6, #3
 800935e:	4da2      	ldr	r5, [pc, #648]	@ (80095e8 <_dtoa_r+0x5c0>)
 8009360:	b954      	cbnz	r4, 8009378 <_dtoa_r+0x350>
 8009362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800936a:	f7f7 fa6f 	bl	800084c <__aeabi_ddiv>
 800936e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009372:	e028      	b.n	80093c6 <_dtoa_r+0x39e>
 8009374:	2602      	movs	r6, #2
 8009376:	e7f2      	b.n	800935e <_dtoa_r+0x336>
 8009378:	07e1      	lsls	r1, r4, #31
 800937a:	d508      	bpl.n	800938e <_dtoa_r+0x366>
 800937c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009380:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009384:	f7f7 f938 	bl	80005f8 <__aeabi_dmul>
 8009388:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800938c:	3601      	adds	r6, #1
 800938e:	1064      	asrs	r4, r4, #1
 8009390:	3508      	adds	r5, #8
 8009392:	e7e5      	b.n	8009360 <_dtoa_r+0x338>
 8009394:	f000 80d2 	beq.w	800953c <_dtoa_r+0x514>
 8009398:	427c      	negs	r4, r7
 800939a:	4b92      	ldr	r3, [pc, #584]	@ (80095e4 <_dtoa_r+0x5bc>)
 800939c:	4d92      	ldr	r5, [pc, #584]	@ (80095e8 <_dtoa_r+0x5c0>)
 800939e:	f004 020f 	and.w	r2, r4, #15
 80093a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093ae:	f7f7 f923 	bl	80005f8 <__aeabi_dmul>
 80093b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093b6:	1124      	asrs	r4, r4, #4
 80093b8:	2300      	movs	r3, #0
 80093ba:	2602      	movs	r6, #2
 80093bc:	2c00      	cmp	r4, #0
 80093be:	f040 80b2 	bne.w	8009526 <_dtoa_r+0x4fe>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1d3      	bne.n	800936e <_dtoa_r+0x346>
 80093c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80093c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f000 80b7 	beq.w	8009540 <_dtoa_r+0x518>
 80093d2:	4b86      	ldr	r3, [pc, #536]	@ (80095ec <_dtoa_r+0x5c4>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	4620      	mov	r0, r4
 80093d8:	4629      	mov	r1, r5
 80093da:	f7f7 fb7f 	bl	8000adc <__aeabi_dcmplt>
 80093de:	2800      	cmp	r0, #0
 80093e0:	f000 80ae 	beq.w	8009540 <_dtoa_r+0x518>
 80093e4:	9b07      	ldr	r3, [sp, #28]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f000 80aa 	beq.w	8009540 <_dtoa_r+0x518>
 80093ec:	9b00      	ldr	r3, [sp, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	dd37      	ble.n	8009462 <_dtoa_r+0x43a>
 80093f2:	1e7b      	subs	r3, r7, #1
 80093f4:	9304      	str	r3, [sp, #16]
 80093f6:	4620      	mov	r0, r4
 80093f8:	4b7d      	ldr	r3, [pc, #500]	@ (80095f0 <_dtoa_r+0x5c8>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	4629      	mov	r1, r5
 80093fe:	f7f7 f8fb 	bl	80005f8 <__aeabi_dmul>
 8009402:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009406:	9c00      	ldr	r4, [sp, #0]
 8009408:	3601      	adds	r6, #1
 800940a:	4630      	mov	r0, r6
 800940c:	f7f7 f88a 	bl	8000524 <__aeabi_i2d>
 8009410:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009414:	f7f7 f8f0 	bl	80005f8 <__aeabi_dmul>
 8009418:	4b76      	ldr	r3, [pc, #472]	@ (80095f4 <_dtoa_r+0x5cc>)
 800941a:	2200      	movs	r2, #0
 800941c:	f7f6 ff36 	bl	800028c <__adddf3>
 8009420:	4605      	mov	r5, r0
 8009422:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009426:	2c00      	cmp	r4, #0
 8009428:	f040 808d 	bne.w	8009546 <_dtoa_r+0x51e>
 800942c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009430:	4b71      	ldr	r3, [pc, #452]	@ (80095f8 <_dtoa_r+0x5d0>)
 8009432:	2200      	movs	r2, #0
 8009434:	f7f6 ff28 	bl	8000288 <__aeabi_dsub>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009440:	462a      	mov	r2, r5
 8009442:	4633      	mov	r3, r6
 8009444:	f7f7 fb68 	bl	8000b18 <__aeabi_dcmpgt>
 8009448:	2800      	cmp	r0, #0
 800944a:	f040 828b 	bne.w	8009964 <_dtoa_r+0x93c>
 800944e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009452:	462a      	mov	r2, r5
 8009454:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009458:	f7f7 fb40 	bl	8000adc <__aeabi_dcmplt>
 800945c:	2800      	cmp	r0, #0
 800945e:	f040 8128 	bne.w	80096b2 <_dtoa_r+0x68a>
 8009462:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009466:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800946a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800946c:	2b00      	cmp	r3, #0
 800946e:	f2c0 815a 	blt.w	8009726 <_dtoa_r+0x6fe>
 8009472:	2f0e      	cmp	r7, #14
 8009474:	f300 8157 	bgt.w	8009726 <_dtoa_r+0x6fe>
 8009478:	4b5a      	ldr	r3, [pc, #360]	@ (80095e4 <_dtoa_r+0x5bc>)
 800947a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800947e:	ed93 7b00 	vldr	d7, [r3]
 8009482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009484:	2b00      	cmp	r3, #0
 8009486:	ed8d 7b00 	vstr	d7, [sp]
 800948a:	da03      	bge.n	8009494 <_dtoa_r+0x46c>
 800948c:	9b07      	ldr	r3, [sp, #28]
 800948e:	2b00      	cmp	r3, #0
 8009490:	f340 8101 	ble.w	8009696 <_dtoa_r+0x66e>
 8009494:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009498:	4656      	mov	r6, sl
 800949a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800949e:	4620      	mov	r0, r4
 80094a0:	4629      	mov	r1, r5
 80094a2:	f7f7 f9d3 	bl	800084c <__aeabi_ddiv>
 80094a6:	f7f7 fb57 	bl	8000b58 <__aeabi_d2iz>
 80094aa:	4680      	mov	r8, r0
 80094ac:	f7f7 f83a 	bl	8000524 <__aeabi_i2d>
 80094b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094b4:	f7f7 f8a0 	bl	80005f8 <__aeabi_dmul>
 80094b8:	4602      	mov	r2, r0
 80094ba:	460b      	mov	r3, r1
 80094bc:	4620      	mov	r0, r4
 80094be:	4629      	mov	r1, r5
 80094c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80094c4:	f7f6 fee0 	bl	8000288 <__aeabi_dsub>
 80094c8:	f806 4b01 	strb.w	r4, [r6], #1
 80094cc:	9d07      	ldr	r5, [sp, #28]
 80094ce:	eba6 040a 	sub.w	r4, r6, sl
 80094d2:	42a5      	cmp	r5, r4
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	f040 8117 	bne.w	800970a <_dtoa_r+0x6e2>
 80094dc:	f7f6 fed6 	bl	800028c <__adddf3>
 80094e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094e4:	4604      	mov	r4, r0
 80094e6:	460d      	mov	r5, r1
 80094e8:	f7f7 fb16 	bl	8000b18 <__aeabi_dcmpgt>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	f040 80f9 	bne.w	80096e4 <_dtoa_r+0x6bc>
 80094f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094f6:	4620      	mov	r0, r4
 80094f8:	4629      	mov	r1, r5
 80094fa:	f7f7 fae5 	bl	8000ac8 <__aeabi_dcmpeq>
 80094fe:	b118      	cbz	r0, 8009508 <_dtoa_r+0x4e0>
 8009500:	f018 0f01 	tst.w	r8, #1
 8009504:	f040 80ee 	bne.w	80096e4 <_dtoa_r+0x6bc>
 8009508:	4649      	mov	r1, r9
 800950a:	4658      	mov	r0, fp
 800950c:	f000 ff26 	bl	800a35c <_Bfree>
 8009510:	2300      	movs	r3, #0
 8009512:	7033      	strb	r3, [r6, #0]
 8009514:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009516:	3701      	adds	r7, #1
 8009518:	601f      	str	r7, [r3, #0]
 800951a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 831d 	beq.w	8009b5c <_dtoa_r+0xb34>
 8009522:	601e      	str	r6, [r3, #0]
 8009524:	e31a      	b.n	8009b5c <_dtoa_r+0xb34>
 8009526:	07e2      	lsls	r2, r4, #31
 8009528:	d505      	bpl.n	8009536 <_dtoa_r+0x50e>
 800952a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800952e:	f7f7 f863 	bl	80005f8 <__aeabi_dmul>
 8009532:	3601      	adds	r6, #1
 8009534:	2301      	movs	r3, #1
 8009536:	1064      	asrs	r4, r4, #1
 8009538:	3508      	adds	r5, #8
 800953a:	e73f      	b.n	80093bc <_dtoa_r+0x394>
 800953c:	2602      	movs	r6, #2
 800953e:	e742      	b.n	80093c6 <_dtoa_r+0x39e>
 8009540:	9c07      	ldr	r4, [sp, #28]
 8009542:	9704      	str	r7, [sp, #16]
 8009544:	e761      	b.n	800940a <_dtoa_r+0x3e2>
 8009546:	4b27      	ldr	r3, [pc, #156]	@ (80095e4 <_dtoa_r+0x5bc>)
 8009548:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800954a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800954e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009552:	4454      	add	r4, sl
 8009554:	2900      	cmp	r1, #0
 8009556:	d053      	beq.n	8009600 <_dtoa_r+0x5d8>
 8009558:	4928      	ldr	r1, [pc, #160]	@ (80095fc <_dtoa_r+0x5d4>)
 800955a:	2000      	movs	r0, #0
 800955c:	f7f7 f976 	bl	800084c <__aeabi_ddiv>
 8009560:	4633      	mov	r3, r6
 8009562:	462a      	mov	r2, r5
 8009564:	f7f6 fe90 	bl	8000288 <__aeabi_dsub>
 8009568:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800956c:	4656      	mov	r6, sl
 800956e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009572:	f7f7 faf1 	bl	8000b58 <__aeabi_d2iz>
 8009576:	4605      	mov	r5, r0
 8009578:	f7f6 ffd4 	bl	8000524 <__aeabi_i2d>
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009584:	f7f6 fe80 	bl	8000288 <__aeabi_dsub>
 8009588:	3530      	adds	r5, #48	@ 0x30
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009592:	f806 5b01 	strb.w	r5, [r6], #1
 8009596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800959a:	f7f7 fa9f 	bl	8000adc <__aeabi_dcmplt>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d171      	bne.n	8009686 <_dtoa_r+0x65e>
 80095a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095a6:	4911      	ldr	r1, [pc, #68]	@ (80095ec <_dtoa_r+0x5c4>)
 80095a8:	2000      	movs	r0, #0
 80095aa:	f7f6 fe6d 	bl	8000288 <__aeabi_dsub>
 80095ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80095b2:	f7f7 fa93 	bl	8000adc <__aeabi_dcmplt>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	f040 8095 	bne.w	80096e6 <_dtoa_r+0x6be>
 80095bc:	42a6      	cmp	r6, r4
 80095be:	f43f af50 	beq.w	8009462 <_dtoa_r+0x43a>
 80095c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80095c6:	4b0a      	ldr	r3, [pc, #40]	@ (80095f0 <_dtoa_r+0x5c8>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	f7f7 f815 	bl	80005f8 <__aeabi_dmul>
 80095ce:	4b08      	ldr	r3, [pc, #32]	@ (80095f0 <_dtoa_r+0x5c8>)
 80095d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80095d4:	2200      	movs	r2, #0
 80095d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095da:	f7f7 f80d 	bl	80005f8 <__aeabi_dmul>
 80095de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095e2:	e7c4      	b.n	800956e <_dtoa_r+0x546>
 80095e4:	0800bb48 	.word	0x0800bb48
 80095e8:	0800bb20 	.word	0x0800bb20
 80095ec:	3ff00000 	.word	0x3ff00000
 80095f0:	40240000 	.word	0x40240000
 80095f4:	401c0000 	.word	0x401c0000
 80095f8:	40140000 	.word	0x40140000
 80095fc:	3fe00000 	.word	0x3fe00000
 8009600:	4631      	mov	r1, r6
 8009602:	4628      	mov	r0, r5
 8009604:	f7f6 fff8 	bl	80005f8 <__aeabi_dmul>
 8009608:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800960c:	9415      	str	r4, [sp, #84]	@ 0x54
 800960e:	4656      	mov	r6, sl
 8009610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009614:	f7f7 faa0 	bl	8000b58 <__aeabi_d2iz>
 8009618:	4605      	mov	r5, r0
 800961a:	f7f6 ff83 	bl	8000524 <__aeabi_i2d>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009626:	f7f6 fe2f 	bl	8000288 <__aeabi_dsub>
 800962a:	3530      	adds	r5, #48	@ 0x30
 800962c:	f806 5b01 	strb.w	r5, [r6], #1
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	42a6      	cmp	r6, r4
 8009636:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800963a:	f04f 0200 	mov.w	r2, #0
 800963e:	d124      	bne.n	800968a <_dtoa_r+0x662>
 8009640:	4bac      	ldr	r3, [pc, #688]	@ (80098f4 <_dtoa_r+0x8cc>)
 8009642:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009646:	f7f6 fe21 	bl	800028c <__adddf3>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009652:	f7f7 fa61 	bl	8000b18 <__aeabi_dcmpgt>
 8009656:	2800      	cmp	r0, #0
 8009658:	d145      	bne.n	80096e6 <_dtoa_r+0x6be>
 800965a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800965e:	49a5      	ldr	r1, [pc, #660]	@ (80098f4 <_dtoa_r+0x8cc>)
 8009660:	2000      	movs	r0, #0
 8009662:	f7f6 fe11 	bl	8000288 <__aeabi_dsub>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800966e:	f7f7 fa35 	bl	8000adc <__aeabi_dcmplt>
 8009672:	2800      	cmp	r0, #0
 8009674:	f43f aef5 	beq.w	8009462 <_dtoa_r+0x43a>
 8009678:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800967a:	1e73      	subs	r3, r6, #1
 800967c:	9315      	str	r3, [sp, #84]	@ 0x54
 800967e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009682:	2b30      	cmp	r3, #48	@ 0x30
 8009684:	d0f8      	beq.n	8009678 <_dtoa_r+0x650>
 8009686:	9f04      	ldr	r7, [sp, #16]
 8009688:	e73e      	b.n	8009508 <_dtoa_r+0x4e0>
 800968a:	4b9b      	ldr	r3, [pc, #620]	@ (80098f8 <_dtoa_r+0x8d0>)
 800968c:	f7f6 ffb4 	bl	80005f8 <__aeabi_dmul>
 8009690:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009694:	e7bc      	b.n	8009610 <_dtoa_r+0x5e8>
 8009696:	d10c      	bne.n	80096b2 <_dtoa_r+0x68a>
 8009698:	4b98      	ldr	r3, [pc, #608]	@ (80098fc <_dtoa_r+0x8d4>)
 800969a:	2200      	movs	r2, #0
 800969c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096a0:	f7f6 ffaa 	bl	80005f8 <__aeabi_dmul>
 80096a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096a8:	f7f7 fa2c 	bl	8000b04 <__aeabi_dcmpge>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	f000 8157 	beq.w	8009960 <_dtoa_r+0x938>
 80096b2:	2400      	movs	r4, #0
 80096b4:	4625      	mov	r5, r4
 80096b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096b8:	43db      	mvns	r3, r3
 80096ba:	9304      	str	r3, [sp, #16]
 80096bc:	4656      	mov	r6, sl
 80096be:	2700      	movs	r7, #0
 80096c0:	4621      	mov	r1, r4
 80096c2:	4658      	mov	r0, fp
 80096c4:	f000 fe4a 	bl	800a35c <_Bfree>
 80096c8:	2d00      	cmp	r5, #0
 80096ca:	d0dc      	beq.n	8009686 <_dtoa_r+0x65e>
 80096cc:	b12f      	cbz	r7, 80096da <_dtoa_r+0x6b2>
 80096ce:	42af      	cmp	r7, r5
 80096d0:	d003      	beq.n	80096da <_dtoa_r+0x6b2>
 80096d2:	4639      	mov	r1, r7
 80096d4:	4658      	mov	r0, fp
 80096d6:	f000 fe41 	bl	800a35c <_Bfree>
 80096da:	4629      	mov	r1, r5
 80096dc:	4658      	mov	r0, fp
 80096de:	f000 fe3d 	bl	800a35c <_Bfree>
 80096e2:	e7d0      	b.n	8009686 <_dtoa_r+0x65e>
 80096e4:	9704      	str	r7, [sp, #16]
 80096e6:	4633      	mov	r3, r6
 80096e8:	461e      	mov	r6, r3
 80096ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096ee:	2a39      	cmp	r2, #57	@ 0x39
 80096f0:	d107      	bne.n	8009702 <_dtoa_r+0x6da>
 80096f2:	459a      	cmp	sl, r3
 80096f4:	d1f8      	bne.n	80096e8 <_dtoa_r+0x6c0>
 80096f6:	9a04      	ldr	r2, [sp, #16]
 80096f8:	3201      	adds	r2, #1
 80096fa:	9204      	str	r2, [sp, #16]
 80096fc:	2230      	movs	r2, #48	@ 0x30
 80096fe:	f88a 2000 	strb.w	r2, [sl]
 8009702:	781a      	ldrb	r2, [r3, #0]
 8009704:	3201      	adds	r2, #1
 8009706:	701a      	strb	r2, [r3, #0]
 8009708:	e7bd      	b.n	8009686 <_dtoa_r+0x65e>
 800970a:	4b7b      	ldr	r3, [pc, #492]	@ (80098f8 <_dtoa_r+0x8d0>)
 800970c:	2200      	movs	r2, #0
 800970e:	f7f6 ff73 	bl	80005f8 <__aeabi_dmul>
 8009712:	2200      	movs	r2, #0
 8009714:	2300      	movs	r3, #0
 8009716:	4604      	mov	r4, r0
 8009718:	460d      	mov	r5, r1
 800971a:	f7f7 f9d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800971e:	2800      	cmp	r0, #0
 8009720:	f43f aebb 	beq.w	800949a <_dtoa_r+0x472>
 8009724:	e6f0      	b.n	8009508 <_dtoa_r+0x4e0>
 8009726:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009728:	2a00      	cmp	r2, #0
 800972a:	f000 80db 	beq.w	80098e4 <_dtoa_r+0x8bc>
 800972e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009730:	2a01      	cmp	r2, #1
 8009732:	f300 80bf 	bgt.w	80098b4 <_dtoa_r+0x88c>
 8009736:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009738:	2a00      	cmp	r2, #0
 800973a:	f000 80b7 	beq.w	80098ac <_dtoa_r+0x884>
 800973e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009742:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009744:	4646      	mov	r6, r8
 8009746:	9a08      	ldr	r2, [sp, #32]
 8009748:	2101      	movs	r1, #1
 800974a:	441a      	add	r2, r3
 800974c:	4658      	mov	r0, fp
 800974e:	4498      	add	r8, r3
 8009750:	9208      	str	r2, [sp, #32]
 8009752:	f000 ff01 	bl	800a558 <__i2b>
 8009756:	4605      	mov	r5, r0
 8009758:	b15e      	cbz	r6, 8009772 <_dtoa_r+0x74a>
 800975a:	9b08      	ldr	r3, [sp, #32]
 800975c:	2b00      	cmp	r3, #0
 800975e:	dd08      	ble.n	8009772 <_dtoa_r+0x74a>
 8009760:	42b3      	cmp	r3, r6
 8009762:	9a08      	ldr	r2, [sp, #32]
 8009764:	bfa8      	it	ge
 8009766:	4633      	movge	r3, r6
 8009768:	eba8 0803 	sub.w	r8, r8, r3
 800976c:	1af6      	subs	r6, r6, r3
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	9308      	str	r3, [sp, #32]
 8009772:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009774:	b1f3      	cbz	r3, 80097b4 <_dtoa_r+0x78c>
 8009776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 80b7 	beq.w	80098ec <_dtoa_r+0x8c4>
 800977e:	b18c      	cbz	r4, 80097a4 <_dtoa_r+0x77c>
 8009780:	4629      	mov	r1, r5
 8009782:	4622      	mov	r2, r4
 8009784:	4658      	mov	r0, fp
 8009786:	f000 ffa7 	bl	800a6d8 <__pow5mult>
 800978a:	464a      	mov	r2, r9
 800978c:	4601      	mov	r1, r0
 800978e:	4605      	mov	r5, r0
 8009790:	4658      	mov	r0, fp
 8009792:	f000 fef7 	bl	800a584 <__multiply>
 8009796:	4649      	mov	r1, r9
 8009798:	9004      	str	r0, [sp, #16]
 800979a:	4658      	mov	r0, fp
 800979c:	f000 fdde 	bl	800a35c <_Bfree>
 80097a0:	9b04      	ldr	r3, [sp, #16]
 80097a2:	4699      	mov	r9, r3
 80097a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097a6:	1b1a      	subs	r2, r3, r4
 80097a8:	d004      	beq.n	80097b4 <_dtoa_r+0x78c>
 80097aa:	4649      	mov	r1, r9
 80097ac:	4658      	mov	r0, fp
 80097ae:	f000 ff93 	bl	800a6d8 <__pow5mult>
 80097b2:	4681      	mov	r9, r0
 80097b4:	2101      	movs	r1, #1
 80097b6:	4658      	mov	r0, fp
 80097b8:	f000 fece 	bl	800a558 <__i2b>
 80097bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097be:	4604      	mov	r4, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f000 81cf 	beq.w	8009b64 <_dtoa_r+0xb3c>
 80097c6:	461a      	mov	r2, r3
 80097c8:	4601      	mov	r1, r0
 80097ca:	4658      	mov	r0, fp
 80097cc:	f000 ff84 	bl	800a6d8 <__pow5mult>
 80097d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	4604      	mov	r4, r0
 80097d6:	f300 8095 	bgt.w	8009904 <_dtoa_r+0x8dc>
 80097da:	9b02      	ldr	r3, [sp, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f040 8087 	bne.w	80098f0 <_dtoa_r+0x8c8>
 80097e2:	9b03      	ldr	r3, [sp, #12]
 80097e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f040 8089 	bne.w	8009900 <_dtoa_r+0x8d8>
 80097ee:	9b03      	ldr	r3, [sp, #12]
 80097f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097f4:	0d1b      	lsrs	r3, r3, #20
 80097f6:	051b      	lsls	r3, r3, #20
 80097f8:	b12b      	cbz	r3, 8009806 <_dtoa_r+0x7de>
 80097fa:	9b08      	ldr	r3, [sp, #32]
 80097fc:	3301      	adds	r3, #1
 80097fe:	9308      	str	r3, [sp, #32]
 8009800:	f108 0801 	add.w	r8, r8, #1
 8009804:	2301      	movs	r3, #1
 8009806:	930a      	str	r3, [sp, #40]	@ 0x28
 8009808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800980a:	2b00      	cmp	r3, #0
 800980c:	f000 81b0 	beq.w	8009b70 <_dtoa_r+0xb48>
 8009810:	6923      	ldr	r3, [r4, #16]
 8009812:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009816:	6918      	ldr	r0, [r3, #16]
 8009818:	f000 fe52 	bl	800a4c0 <__hi0bits>
 800981c:	f1c0 0020 	rsb	r0, r0, #32
 8009820:	9b08      	ldr	r3, [sp, #32]
 8009822:	4418      	add	r0, r3
 8009824:	f010 001f 	ands.w	r0, r0, #31
 8009828:	d077      	beq.n	800991a <_dtoa_r+0x8f2>
 800982a:	f1c0 0320 	rsb	r3, r0, #32
 800982e:	2b04      	cmp	r3, #4
 8009830:	dd6b      	ble.n	800990a <_dtoa_r+0x8e2>
 8009832:	9b08      	ldr	r3, [sp, #32]
 8009834:	f1c0 001c 	rsb	r0, r0, #28
 8009838:	4403      	add	r3, r0
 800983a:	4480      	add	r8, r0
 800983c:	4406      	add	r6, r0
 800983e:	9308      	str	r3, [sp, #32]
 8009840:	f1b8 0f00 	cmp.w	r8, #0
 8009844:	dd05      	ble.n	8009852 <_dtoa_r+0x82a>
 8009846:	4649      	mov	r1, r9
 8009848:	4642      	mov	r2, r8
 800984a:	4658      	mov	r0, fp
 800984c:	f000 ff9e 	bl	800a78c <__lshift>
 8009850:	4681      	mov	r9, r0
 8009852:	9b08      	ldr	r3, [sp, #32]
 8009854:	2b00      	cmp	r3, #0
 8009856:	dd05      	ble.n	8009864 <_dtoa_r+0x83c>
 8009858:	4621      	mov	r1, r4
 800985a:	461a      	mov	r2, r3
 800985c:	4658      	mov	r0, fp
 800985e:	f000 ff95 	bl	800a78c <__lshift>
 8009862:	4604      	mov	r4, r0
 8009864:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009866:	2b00      	cmp	r3, #0
 8009868:	d059      	beq.n	800991e <_dtoa_r+0x8f6>
 800986a:	4621      	mov	r1, r4
 800986c:	4648      	mov	r0, r9
 800986e:	f000 fff9 	bl	800a864 <__mcmp>
 8009872:	2800      	cmp	r0, #0
 8009874:	da53      	bge.n	800991e <_dtoa_r+0x8f6>
 8009876:	1e7b      	subs	r3, r7, #1
 8009878:	9304      	str	r3, [sp, #16]
 800987a:	4649      	mov	r1, r9
 800987c:	2300      	movs	r3, #0
 800987e:	220a      	movs	r2, #10
 8009880:	4658      	mov	r0, fp
 8009882:	f000 fd8d 	bl	800a3a0 <__multadd>
 8009886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009888:	4681      	mov	r9, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	f000 8172 	beq.w	8009b74 <_dtoa_r+0xb4c>
 8009890:	2300      	movs	r3, #0
 8009892:	4629      	mov	r1, r5
 8009894:	220a      	movs	r2, #10
 8009896:	4658      	mov	r0, fp
 8009898:	f000 fd82 	bl	800a3a0 <__multadd>
 800989c:	9b00      	ldr	r3, [sp, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	4605      	mov	r5, r0
 80098a2:	dc67      	bgt.n	8009974 <_dtoa_r+0x94c>
 80098a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	dc41      	bgt.n	800992e <_dtoa_r+0x906>
 80098aa:	e063      	b.n	8009974 <_dtoa_r+0x94c>
 80098ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80098ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80098b2:	e746      	b.n	8009742 <_dtoa_r+0x71a>
 80098b4:	9b07      	ldr	r3, [sp, #28]
 80098b6:	1e5c      	subs	r4, r3, #1
 80098b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ba:	42a3      	cmp	r3, r4
 80098bc:	bfbf      	itttt	lt
 80098be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80098c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80098c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80098c4:	1ae3      	sublt	r3, r4, r3
 80098c6:	bfb4      	ite	lt
 80098c8:	18d2      	addlt	r2, r2, r3
 80098ca:	1b1c      	subge	r4, r3, r4
 80098cc:	9b07      	ldr	r3, [sp, #28]
 80098ce:	bfbc      	itt	lt
 80098d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80098d2:	2400      	movlt	r4, #0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	bfb5      	itete	lt
 80098d8:	eba8 0603 	sublt.w	r6, r8, r3
 80098dc:	9b07      	ldrge	r3, [sp, #28]
 80098de:	2300      	movlt	r3, #0
 80098e0:	4646      	movge	r6, r8
 80098e2:	e730      	b.n	8009746 <_dtoa_r+0x71e>
 80098e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80098e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80098e8:	4646      	mov	r6, r8
 80098ea:	e735      	b.n	8009758 <_dtoa_r+0x730>
 80098ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80098ee:	e75c      	b.n	80097aa <_dtoa_r+0x782>
 80098f0:	2300      	movs	r3, #0
 80098f2:	e788      	b.n	8009806 <_dtoa_r+0x7de>
 80098f4:	3fe00000 	.word	0x3fe00000
 80098f8:	40240000 	.word	0x40240000
 80098fc:	40140000 	.word	0x40140000
 8009900:	9b02      	ldr	r3, [sp, #8]
 8009902:	e780      	b.n	8009806 <_dtoa_r+0x7de>
 8009904:	2300      	movs	r3, #0
 8009906:	930a      	str	r3, [sp, #40]	@ 0x28
 8009908:	e782      	b.n	8009810 <_dtoa_r+0x7e8>
 800990a:	d099      	beq.n	8009840 <_dtoa_r+0x818>
 800990c:	9a08      	ldr	r2, [sp, #32]
 800990e:	331c      	adds	r3, #28
 8009910:	441a      	add	r2, r3
 8009912:	4498      	add	r8, r3
 8009914:	441e      	add	r6, r3
 8009916:	9208      	str	r2, [sp, #32]
 8009918:	e792      	b.n	8009840 <_dtoa_r+0x818>
 800991a:	4603      	mov	r3, r0
 800991c:	e7f6      	b.n	800990c <_dtoa_r+0x8e4>
 800991e:	9b07      	ldr	r3, [sp, #28]
 8009920:	9704      	str	r7, [sp, #16]
 8009922:	2b00      	cmp	r3, #0
 8009924:	dc20      	bgt.n	8009968 <_dtoa_r+0x940>
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800992a:	2b02      	cmp	r3, #2
 800992c:	dd1e      	ble.n	800996c <_dtoa_r+0x944>
 800992e:	9b00      	ldr	r3, [sp, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	f47f aec0 	bne.w	80096b6 <_dtoa_r+0x68e>
 8009936:	4621      	mov	r1, r4
 8009938:	2205      	movs	r2, #5
 800993a:	4658      	mov	r0, fp
 800993c:	f000 fd30 	bl	800a3a0 <__multadd>
 8009940:	4601      	mov	r1, r0
 8009942:	4604      	mov	r4, r0
 8009944:	4648      	mov	r0, r9
 8009946:	f000 ff8d 	bl	800a864 <__mcmp>
 800994a:	2800      	cmp	r0, #0
 800994c:	f77f aeb3 	ble.w	80096b6 <_dtoa_r+0x68e>
 8009950:	4656      	mov	r6, sl
 8009952:	2331      	movs	r3, #49	@ 0x31
 8009954:	f806 3b01 	strb.w	r3, [r6], #1
 8009958:	9b04      	ldr	r3, [sp, #16]
 800995a:	3301      	adds	r3, #1
 800995c:	9304      	str	r3, [sp, #16]
 800995e:	e6ae      	b.n	80096be <_dtoa_r+0x696>
 8009960:	9c07      	ldr	r4, [sp, #28]
 8009962:	9704      	str	r7, [sp, #16]
 8009964:	4625      	mov	r5, r4
 8009966:	e7f3      	b.n	8009950 <_dtoa_r+0x928>
 8009968:	9b07      	ldr	r3, [sp, #28]
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 8104 	beq.w	8009b7c <_dtoa_r+0xb54>
 8009974:	2e00      	cmp	r6, #0
 8009976:	dd05      	ble.n	8009984 <_dtoa_r+0x95c>
 8009978:	4629      	mov	r1, r5
 800997a:	4632      	mov	r2, r6
 800997c:	4658      	mov	r0, fp
 800997e:	f000 ff05 	bl	800a78c <__lshift>
 8009982:	4605      	mov	r5, r0
 8009984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009986:	2b00      	cmp	r3, #0
 8009988:	d05a      	beq.n	8009a40 <_dtoa_r+0xa18>
 800998a:	6869      	ldr	r1, [r5, #4]
 800998c:	4658      	mov	r0, fp
 800998e:	f000 fca5 	bl	800a2dc <_Balloc>
 8009992:	4606      	mov	r6, r0
 8009994:	b928      	cbnz	r0, 80099a2 <_dtoa_r+0x97a>
 8009996:	4b84      	ldr	r3, [pc, #528]	@ (8009ba8 <_dtoa_r+0xb80>)
 8009998:	4602      	mov	r2, r0
 800999a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800999e:	f7ff bb5a 	b.w	8009056 <_dtoa_r+0x2e>
 80099a2:	692a      	ldr	r2, [r5, #16]
 80099a4:	3202      	adds	r2, #2
 80099a6:	0092      	lsls	r2, r2, #2
 80099a8:	f105 010c 	add.w	r1, r5, #12
 80099ac:	300c      	adds	r0, #12
 80099ae:	f7ff fa78 	bl	8008ea2 <memcpy>
 80099b2:	2201      	movs	r2, #1
 80099b4:	4631      	mov	r1, r6
 80099b6:	4658      	mov	r0, fp
 80099b8:	f000 fee8 	bl	800a78c <__lshift>
 80099bc:	f10a 0301 	add.w	r3, sl, #1
 80099c0:	9307      	str	r3, [sp, #28]
 80099c2:	9b00      	ldr	r3, [sp, #0]
 80099c4:	4453      	add	r3, sl
 80099c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099c8:	9b02      	ldr	r3, [sp, #8]
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	462f      	mov	r7, r5
 80099d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80099d2:	4605      	mov	r5, r0
 80099d4:	9b07      	ldr	r3, [sp, #28]
 80099d6:	4621      	mov	r1, r4
 80099d8:	3b01      	subs	r3, #1
 80099da:	4648      	mov	r0, r9
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	f7ff fa9b 	bl	8008f18 <quorem>
 80099e2:	4639      	mov	r1, r7
 80099e4:	9002      	str	r0, [sp, #8]
 80099e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80099ea:	4648      	mov	r0, r9
 80099ec:	f000 ff3a 	bl	800a864 <__mcmp>
 80099f0:	462a      	mov	r2, r5
 80099f2:	9008      	str	r0, [sp, #32]
 80099f4:	4621      	mov	r1, r4
 80099f6:	4658      	mov	r0, fp
 80099f8:	f000 ff50 	bl	800a89c <__mdiff>
 80099fc:	68c2      	ldr	r2, [r0, #12]
 80099fe:	4606      	mov	r6, r0
 8009a00:	bb02      	cbnz	r2, 8009a44 <_dtoa_r+0xa1c>
 8009a02:	4601      	mov	r1, r0
 8009a04:	4648      	mov	r0, r9
 8009a06:	f000 ff2d 	bl	800a864 <__mcmp>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	4658      	mov	r0, fp
 8009a10:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a12:	f000 fca3 	bl	800a35c <_Bfree>
 8009a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a1a:	9e07      	ldr	r6, [sp, #28]
 8009a1c:	ea43 0102 	orr.w	r1, r3, r2
 8009a20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a22:	4319      	orrs	r1, r3
 8009a24:	d110      	bne.n	8009a48 <_dtoa_r+0xa20>
 8009a26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a2a:	d029      	beq.n	8009a80 <_dtoa_r+0xa58>
 8009a2c:	9b08      	ldr	r3, [sp, #32]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	dd02      	ble.n	8009a38 <_dtoa_r+0xa10>
 8009a32:	9b02      	ldr	r3, [sp, #8]
 8009a34:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009a38:	9b00      	ldr	r3, [sp, #0]
 8009a3a:	f883 8000 	strb.w	r8, [r3]
 8009a3e:	e63f      	b.n	80096c0 <_dtoa_r+0x698>
 8009a40:	4628      	mov	r0, r5
 8009a42:	e7bb      	b.n	80099bc <_dtoa_r+0x994>
 8009a44:	2201      	movs	r2, #1
 8009a46:	e7e1      	b.n	8009a0c <_dtoa_r+0x9e4>
 8009a48:	9b08      	ldr	r3, [sp, #32]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	db04      	blt.n	8009a58 <_dtoa_r+0xa30>
 8009a4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a50:	430b      	orrs	r3, r1
 8009a52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a54:	430b      	orrs	r3, r1
 8009a56:	d120      	bne.n	8009a9a <_dtoa_r+0xa72>
 8009a58:	2a00      	cmp	r2, #0
 8009a5a:	dded      	ble.n	8009a38 <_dtoa_r+0xa10>
 8009a5c:	4649      	mov	r1, r9
 8009a5e:	2201      	movs	r2, #1
 8009a60:	4658      	mov	r0, fp
 8009a62:	f000 fe93 	bl	800a78c <__lshift>
 8009a66:	4621      	mov	r1, r4
 8009a68:	4681      	mov	r9, r0
 8009a6a:	f000 fefb 	bl	800a864 <__mcmp>
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	dc03      	bgt.n	8009a7a <_dtoa_r+0xa52>
 8009a72:	d1e1      	bne.n	8009a38 <_dtoa_r+0xa10>
 8009a74:	f018 0f01 	tst.w	r8, #1
 8009a78:	d0de      	beq.n	8009a38 <_dtoa_r+0xa10>
 8009a7a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a7e:	d1d8      	bne.n	8009a32 <_dtoa_r+0xa0a>
 8009a80:	9a00      	ldr	r2, [sp, #0]
 8009a82:	2339      	movs	r3, #57	@ 0x39
 8009a84:	7013      	strb	r3, [r2, #0]
 8009a86:	4633      	mov	r3, r6
 8009a88:	461e      	mov	r6, r3
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009a90:	2a39      	cmp	r2, #57	@ 0x39
 8009a92:	d052      	beq.n	8009b3a <_dtoa_r+0xb12>
 8009a94:	3201      	adds	r2, #1
 8009a96:	701a      	strb	r2, [r3, #0]
 8009a98:	e612      	b.n	80096c0 <_dtoa_r+0x698>
 8009a9a:	2a00      	cmp	r2, #0
 8009a9c:	dd07      	ble.n	8009aae <_dtoa_r+0xa86>
 8009a9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009aa2:	d0ed      	beq.n	8009a80 <_dtoa_r+0xa58>
 8009aa4:	9a00      	ldr	r2, [sp, #0]
 8009aa6:	f108 0301 	add.w	r3, r8, #1
 8009aaa:	7013      	strb	r3, [r2, #0]
 8009aac:	e608      	b.n	80096c0 <_dtoa_r+0x698>
 8009aae:	9b07      	ldr	r3, [sp, #28]
 8009ab0:	9a07      	ldr	r2, [sp, #28]
 8009ab2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009ab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d028      	beq.n	8009b0e <_dtoa_r+0xae6>
 8009abc:	4649      	mov	r1, r9
 8009abe:	2300      	movs	r3, #0
 8009ac0:	220a      	movs	r2, #10
 8009ac2:	4658      	mov	r0, fp
 8009ac4:	f000 fc6c 	bl	800a3a0 <__multadd>
 8009ac8:	42af      	cmp	r7, r5
 8009aca:	4681      	mov	r9, r0
 8009acc:	f04f 0300 	mov.w	r3, #0
 8009ad0:	f04f 020a 	mov.w	r2, #10
 8009ad4:	4639      	mov	r1, r7
 8009ad6:	4658      	mov	r0, fp
 8009ad8:	d107      	bne.n	8009aea <_dtoa_r+0xac2>
 8009ada:	f000 fc61 	bl	800a3a0 <__multadd>
 8009ade:	4607      	mov	r7, r0
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	9b07      	ldr	r3, [sp, #28]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	9307      	str	r3, [sp, #28]
 8009ae8:	e774      	b.n	80099d4 <_dtoa_r+0x9ac>
 8009aea:	f000 fc59 	bl	800a3a0 <__multadd>
 8009aee:	4629      	mov	r1, r5
 8009af0:	4607      	mov	r7, r0
 8009af2:	2300      	movs	r3, #0
 8009af4:	220a      	movs	r2, #10
 8009af6:	4658      	mov	r0, fp
 8009af8:	f000 fc52 	bl	800a3a0 <__multadd>
 8009afc:	4605      	mov	r5, r0
 8009afe:	e7f0      	b.n	8009ae2 <_dtoa_r+0xaba>
 8009b00:	9b00      	ldr	r3, [sp, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	bfcc      	ite	gt
 8009b06:	461e      	movgt	r6, r3
 8009b08:	2601      	movle	r6, #1
 8009b0a:	4456      	add	r6, sl
 8009b0c:	2700      	movs	r7, #0
 8009b0e:	4649      	mov	r1, r9
 8009b10:	2201      	movs	r2, #1
 8009b12:	4658      	mov	r0, fp
 8009b14:	f000 fe3a 	bl	800a78c <__lshift>
 8009b18:	4621      	mov	r1, r4
 8009b1a:	4681      	mov	r9, r0
 8009b1c:	f000 fea2 	bl	800a864 <__mcmp>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	dcb0      	bgt.n	8009a86 <_dtoa_r+0xa5e>
 8009b24:	d102      	bne.n	8009b2c <_dtoa_r+0xb04>
 8009b26:	f018 0f01 	tst.w	r8, #1
 8009b2a:	d1ac      	bne.n	8009a86 <_dtoa_r+0xa5e>
 8009b2c:	4633      	mov	r3, r6
 8009b2e:	461e      	mov	r6, r3
 8009b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b34:	2a30      	cmp	r2, #48	@ 0x30
 8009b36:	d0fa      	beq.n	8009b2e <_dtoa_r+0xb06>
 8009b38:	e5c2      	b.n	80096c0 <_dtoa_r+0x698>
 8009b3a:	459a      	cmp	sl, r3
 8009b3c:	d1a4      	bne.n	8009a88 <_dtoa_r+0xa60>
 8009b3e:	9b04      	ldr	r3, [sp, #16]
 8009b40:	3301      	adds	r3, #1
 8009b42:	9304      	str	r3, [sp, #16]
 8009b44:	2331      	movs	r3, #49	@ 0x31
 8009b46:	f88a 3000 	strb.w	r3, [sl]
 8009b4a:	e5b9      	b.n	80096c0 <_dtoa_r+0x698>
 8009b4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009bac <_dtoa_r+0xb84>
 8009b52:	b11b      	cbz	r3, 8009b5c <_dtoa_r+0xb34>
 8009b54:	f10a 0308 	add.w	r3, sl, #8
 8009b58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009b5a:	6013      	str	r3, [r2, #0]
 8009b5c:	4650      	mov	r0, sl
 8009b5e:	b019      	add	sp, #100	@ 0x64
 8009b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	f77f ae37 	ble.w	80097da <_dtoa_r+0x7b2>
 8009b6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b70:	2001      	movs	r0, #1
 8009b72:	e655      	b.n	8009820 <_dtoa_r+0x7f8>
 8009b74:	9b00      	ldr	r3, [sp, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f77f aed6 	ble.w	8009928 <_dtoa_r+0x900>
 8009b7c:	4656      	mov	r6, sl
 8009b7e:	4621      	mov	r1, r4
 8009b80:	4648      	mov	r0, r9
 8009b82:	f7ff f9c9 	bl	8008f18 <quorem>
 8009b86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009b8a:	f806 8b01 	strb.w	r8, [r6], #1
 8009b8e:	9b00      	ldr	r3, [sp, #0]
 8009b90:	eba6 020a 	sub.w	r2, r6, sl
 8009b94:	4293      	cmp	r3, r2
 8009b96:	ddb3      	ble.n	8009b00 <_dtoa_r+0xad8>
 8009b98:	4649      	mov	r1, r9
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	220a      	movs	r2, #10
 8009b9e:	4658      	mov	r0, fp
 8009ba0:	f000 fbfe 	bl	800a3a0 <__multadd>
 8009ba4:	4681      	mov	r9, r0
 8009ba6:	e7ea      	b.n	8009b7e <_dtoa_r+0xb56>
 8009ba8:	0800ba4a 	.word	0x0800ba4a
 8009bac:	0800b9ce 	.word	0x0800b9ce

08009bb0 <_free_r>:
 8009bb0:	b538      	push	{r3, r4, r5, lr}
 8009bb2:	4605      	mov	r5, r0
 8009bb4:	2900      	cmp	r1, #0
 8009bb6:	d041      	beq.n	8009c3c <_free_r+0x8c>
 8009bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bbc:	1f0c      	subs	r4, r1, #4
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	bfb8      	it	lt
 8009bc2:	18e4      	addlt	r4, r4, r3
 8009bc4:	f7fd fa74 	bl	80070b0 <__malloc_lock>
 8009bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8009c40 <_free_r+0x90>)
 8009bca:	6813      	ldr	r3, [r2, #0]
 8009bcc:	b933      	cbnz	r3, 8009bdc <_free_r+0x2c>
 8009bce:	6063      	str	r3, [r4, #4]
 8009bd0:	6014      	str	r4, [r2, #0]
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bd8:	f7fd ba70 	b.w	80070bc <__malloc_unlock>
 8009bdc:	42a3      	cmp	r3, r4
 8009bde:	d908      	bls.n	8009bf2 <_free_r+0x42>
 8009be0:	6820      	ldr	r0, [r4, #0]
 8009be2:	1821      	adds	r1, r4, r0
 8009be4:	428b      	cmp	r3, r1
 8009be6:	bf01      	itttt	eq
 8009be8:	6819      	ldreq	r1, [r3, #0]
 8009bea:	685b      	ldreq	r3, [r3, #4]
 8009bec:	1809      	addeq	r1, r1, r0
 8009bee:	6021      	streq	r1, [r4, #0]
 8009bf0:	e7ed      	b.n	8009bce <_free_r+0x1e>
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	b10b      	cbz	r3, 8009bfc <_free_r+0x4c>
 8009bf8:	42a3      	cmp	r3, r4
 8009bfa:	d9fa      	bls.n	8009bf2 <_free_r+0x42>
 8009bfc:	6811      	ldr	r1, [r2, #0]
 8009bfe:	1850      	adds	r0, r2, r1
 8009c00:	42a0      	cmp	r0, r4
 8009c02:	d10b      	bne.n	8009c1c <_free_r+0x6c>
 8009c04:	6820      	ldr	r0, [r4, #0]
 8009c06:	4401      	add	r1, r0
 8009c08:	1850      	adds	r0, r2, r1
 8009c0a:	4283      	cmp	r3, r0
 8009c0c:	6011      	str	r1, [r2, #0]
 8009c0e:	d1e0      	bne.n	8009bd2 <_free_r+0x22>
 8009c10:	6818      	ldr	r0, [r3, #0]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	6053      	str	r3, [r2, #4]
 8009c16:	4408      	add	r0, r1
 8009c18:	6010      	str	r0, [r2, #0]
 8009c1a:	e7da      	b.n	8009bd2 <_free_r+0x22>
 8009c1c:	d902      	bls.n	8009c24 <_free_r+0x74>
 8009c1e:	230c      	movs	r3, #12
 8009c20:	602b      	str	r3, [r5, #0]
 8009c22:	e7d6      	b.n	8009bd2 <_free_r+0x22>
 8009c24:	6820      	ldr	r0, [r4, #0]
 8009c26:	1821      	adds	r1, r4, r0
 8009c28:	428b      	cmp	r3, r1
 8009c2a:	bf04      	itt	eq
 8009c2c:	6819      	ldreq	r1, [r3, #0]
 8009c2e:	685b      	ldreq	r3, [r3, #4]
 8009c30:	6063      	str	r3, [r4, #4]
 8009c32:	bf04      	itt	eq
 8009c34:	1809      	addeq	r1, r1, r0
 8009c36:	6021      	streq	r1, [r4, #0]
 8009c38:	6054      	str	r4, [r2, #4]
 8009c3a:	e7ca      	b.n	8009bd2 <_free_r+0x22>
 8009c3c:	bd38      	pop	{r3, r4, r5, pc}
 8009c3e:	bf00      	nop
 8009c40:	2000079c 	.word	0x2000079c

08009c44 <rshift>:
 8009c44:	6903      	ldr	r3, [r0, #16]
 8009c46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009c4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009c52:	f100 0414 	add.w	r4, r0, #20
 8009c56:	dd45      	ble.n	8009ce4 <rshift+0xa0>
 8009c58:	f011 011f 	ands.w	r1, r1, #31
 8009c5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009c60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009c64:	d10c      	bne.n	8009c80 <rshift+0x3c>
 8009c66:	f100 0710 	add.w	r7, r0, #16
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	42b1      	cmp	r1, r6
 8009c6e:	d334      	bcc.n	8009cda <rshift+0x96>
 8009c70:	1a9b      	subs	r3, r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	1eea      	subs	r2, r5, #3
 8009c76:	4296      	cmp	r6, r2
 8009c78:	bf38      	it	cc
 8009c7a:	2300      	movcc	r3, #0
 8009c7c:	4423      	add	r3, r4
 8009c7e:	e015      	b.n	8009cac <rshift+0x68>
 8009c80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009c84:	f1c1 0820 	rsb	r8, r1, #32
 8009c88:	40cf      	lsrs	r7, r1
 8009c8a:	f105 0e04 	add.w	lr, r5, #4
 8009c8e:	46a1      	mov	r9, r4
 8009c90:	4576      	cmp	r6, lr
 8009c92:	46f4      	mov	ip, lr
 8009c94:	d815      	bhi.n	8009cc2 <rshift+0x7e>
 8009c96:	1a9a      	subs	r2, r3, r2
 8009c98:	0092      	lsls	r2, r2, #2
 8009c9a:	3a04      	subs	r2, #4
 8009c9c:	3501      	adds	r5, #1
 8009c9e:	42ae      	cmp	r6, r5
 8009ca0:	bf38      	it	cc
 8009ca2:	2200      	movcc	r2, #0
 8009ca4:	18a3      	adds	r3, r4, r2
 8009ca6:	50a7      	str	r7, [r4, r2]
 8009ca8:	b107      	cbz	r7, 8009cac <rshift+0x68>
 8009caa:	3304      	adds	r3, #4
 8009cac:	1b1a      	subs	r2, r3, r4
 8009cae:	42a3      	cmp	r3, r4
 8009cb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009cb4:	bf08      	it	eq
 8009cb6:	2300      	moveq	r3, #0
 8009cb8:	6102      	str	r2, [r0, #16]
 8009cba:	bf08      	it	eq
 8009cbc:	6143      	streq	r3, [r0, #20]
 8009cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cc2:	f8dc c000 	ldr.w	ip, [ip]
 8009cc6:	fa0c fc08 	lsl.w	ip, ip, r8
 8009cca:	ea4c 0707 	orr.w	r7, ip, r7
 8009cce:	f849 7b04 	str.w	r7, [r9], #4
 8009cd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009cd6:	40cf      	lsrs	r7, r1
 8009cd8:	e7da      	b.n	8009c90 <rshift+0x4c>
 8009cda:	f851 cb04 	ldr.w	ip, [r1], #4
 8009cde:	f847 cf04 	str.w	ip, [r7, #4]!
 8009ce2:	e7c3      	b.n	8009c6c <rshift+0x28>
 8009ce4:	4623      	mov	r3, r4
 8009ce6:	e7e1      	b.n	8009cac <rshift+0x68>

08009ce8 <__hexdig_fun>:
 8009ce8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009cec:	2b09      	cmp	r3, #9
 8009cee:	d802      	bhi.n	8009cf6 <__hexdig_fun+0xe>
 8009cf0:	3820      	subs	r0, #32
 8009cf2:	b2c0      	uxtb	r0, r0
 8009cf4:	4770      	bx	lr
 8009cf6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009cfa:	2b05      	cmp	r3, #5
 8009cfc:	d801      	bhi.n	8009d02 <__hexdig_fun+0x1a>
 8009cfe:	3847      	subs	r0, #71	@ 0x47
 8009d00:	e7f7      	b.n	8009cf2 <__hexdig_fun+0xa>
 8009d02:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009d06:	2b05      	cmp	r3, #5
 8009d08:	d801      	bhi.n	8009d0e <__hexdig_fun+0x26>
 8009d0a:	3827      	subs	r0, #39	@ 0x27
 8009d0c:	e7f1      	b.n	8009cf2 <__hexdig_fun+0xa>
 8009d0e:	2000      	movs	r0, #0
 8009d10:	4770      	bx	lr
	...

08009d14 <__gethex>:
 8009d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d18:	b085      	sub	sp, #20
 8009d1a:	468a      	mov	sl, r1
 8009d1c:	9302      	str	r3, [sp, #8]
 8009d1e:	680b      	ldr	r3, [r1, #0]
 8009d20:	9001      	str	r0, [sp, #4]
 8009d22:	4690      	mov	r8, r2
 8009d24:	1c9c      	adds	r4, r3, #2
 8009d26:	46a1      	mov	r9, r4
 8009d28:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009d2c:	2830      	cmp	r0, #48	@ 0x30
 8009d2e:	d0fa      	beq.n	8009d26 <__gethex+0x12>
 8009d30:	eba9 0303 	sub.w	r3, r9, r3
 8009d34:	f1a3 0b02 	sub.w	fp, r3, #2
 8009d38:	f7ff ffd6 	bl	8009ce8 <__hexdig_fun>
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d168      	bne.n	8009e14 <__gethex+0x100>
 8009d42:	49a0      	ldr	r1, [pc, #640]	@ (8009fc4 <__gethex+0x2b0>)
 8009d44:	2201      	movs	r2, #1
 8009d46:	4648      	mov	r0, r9
 8009d48:	f7ff f811 	bl	8008d6e <strncmp>
 8009d4c:	4607      	mov	r7, r0
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d167      	bne.n	8009e22 <__gethex+0x10e>
 8009d52:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009d56:	4626      	mov	r6, r4
 8009d58:	f7ff ffc6 	bl	8009ce8 <__hexdig_fun>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d062      	beq.n	8009e26 <__gethex+0x112>
 8009d60:	4623      	mov	r3, r4
 8009d62:	7818      	ldrb	r0, [r3, #0]
 8009d64:	2830      	cmp	r0, #48	@ 0x30
 8009d66:	4699      	mov	r9, r3
 8009d68:	f103 0301 	add.w	r3, r3, #1
 8009d6c:	d0f9      	beq.n	8009d62 <__gethex+0x4e>
 8009d6e:	f7ff ffbb 	bl	8009ce8 <__hexdig_fun>
 8009d72:	fab0 f580 	clz	r5, r0
 8009d76:	096d      	lsrs	r5, r5, #5
 8009d78:	f04f 0b01 	mov.w	fp, #1
 8009d7c:	464a      	mov	r2, r9
 8009d7e:	4616      	mov	r6, r2
 8009d80:	3201      	adds	r2, #1
 8009d82:	7830      	ldrb	r0, [r6, #0]
 8009d84:	f7ff ffb0 	bl	8009ce8 <__hexdig_fun>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d1f8      	bne.n	8009d7e <__gethex+0x6a>
 8009d8c:	498d      	ldr	r1, [pc, #564]	@ (8009fc4 <__gethex+0x2b0>)
 8009d8e:	2201      	movs	r2, #1
 8009d90:	4630      	mov	r0, r6
 8009d92:	f7fe ffec 	bl	8008d6e <strncmp>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	d13f      	bne.n	8009e1a <__gethex+0x106>
 8009d9a:	b944      	cbnz	r4, 8009dae <__gethex+0x9a>
 8009d9c:	1c74      	adds	r4, r6, #1
 8009d9e:	4622      	mov	r2, r4
 8009da0:	4616      	mov	r6, r2
 8009da2:	3201      	adds	r2, #1
 8009da4:	7830      	ldrb	r0, [r6, #0]
 8009da6:	f7ff ff9f 	bl	8009ce8 <__hexdig_fun>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d1f8      	bne.n	8009da0 <__gethex+0x8c>
 8009dae:	1ba4      	subs	r4, r4, r6
 8009db0:	00a7      	lsls	r7, r4, #2
 8009db2:	7833      	ldrb	r3, [r6, #0]
 8009db4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009db8:	2b50      	cmp	r3, #80	@ 0x50
 8009dba:	d13e      	bne.n	8009e3a <__gethex+0x126>
 8009dbc:	7873      	ldrb	r3, [r6, #1]
 8009dbe:	2b2b      	cmp	r3, #43	@ 0x2b
 8009dc0:	d033      	beq.n	8009e2a <__gethex+0x116>
 8009dc2:	2b2d      	cmp	r3, #45	@ 0x2d
 8009dc4:	d034      	beq.n	8009e30 <__gethex+0x11c>
 8009dc6:	1c71      	adds	r1, r6, #1
 8009dc8:	2400      	movs	r4, #0
 8009dca:	7808      	ldrb	r0, [r1, #0]
 8009dcc:	f7ff ff8c 	bl	8009ce8 <__hexdig_fun>
 8009dd0:	1e43      	subs	r3, r0, #1
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	2b18      	cmp	r3, #24
 8009dd6:	d830      	bhi.n	8009e3a <__gethex+0x126>
 8009dd8:	f1a0 0210 	sub.w	r2, r0, #16
 8009ddc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009de0:	f7ff ff82 	bl	8009ce8 <__hexdig_fun>
 8009de4:	f100 3cff 	add.w	ip, r0, #4294967295
 8009de8:	fa5f fc8c 	uxtb.w	ip, ip
 8009dec:	f1bc 0f18 	cmp.w	ip, #24
 8009df0:	f04f 030a 	mov.w	r3, #10
 8009df4:	d91e      	bls.n	8009e34 <__gethex+0x120>
 8009df6:	b104      	cbz	r4, 8009dfa <__gethex+0xe6>
 8009df8:	4252      	negs	r2, r2
 8009dfa:	4417      	add	r7, r2
 8009dfc:	f8ca 1000 	str.w	r1, [sl]
 8009e00:	b1ed      	cbz	r5, 8009e3e <__gethex+0x12a>
 8009e02:	f1bb 0f00 	cmp.w	fp, #0
 8009e06:	bf0c      	ite	eq
 8009e08:	2506      	moveq	r5, #6
 8009e0a:	2500      	movne	r5, #0
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	b005      	add	sp, #20
 8009e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e14:	2500      	movs	r5, #0
 8009e16:	462c      	mov	r4, r5
 8009e18:	e7b0      	b.n	8009d7c <__gethex+0x68>
 8009e1a:	2c00      	cmp	r4, #0
 8009e1c:	d1c7      	bne.n	8009dae <__gethex+0x9a>
 8009e1e:	4627      	mov	r7, r4
 8009e20:	e7c7      	b.n	8009db2 <__gethex+0x9e>
 8009e22:	464e      	mov	r6, r9
 8009e24:	462f      	mov	r7, r5
 8009e26:	2501      	movs	r5, #1
 8009e28:	e7c3      	b.n	8009db2 <__gethex+0x9e>
 8009e2a:	2400      	movs	r4, #0
 8009e2c:	1cb1      	adds	r1, r6, #2
 8009e2e:	e7cc      	b.n	8009dca <__gethex+0xb6>
 8009e30:	2401      	movs	r4, #1
 8009e32:	e7fb      	b.n	8009e2c <__gethex+0x118>
 8009e34:	fb03 0002 	mla	r0, r3, r2, r0
 8009e38:	e7ce      	b.n	8009dd8 <__gethex+0xc4>
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	e7de      	b.n	8009dfc <__gethex+0xe8>
 8009e3e:	eba6 0309 	sub.w	r3, r6, r9
 8009e42:	3b01      	subs	r3, #1
 8009e44:	4629      	mov	r1, r5
 8009e46:	2b07      	cmp	r3, #7
 8009e48:	dc0a      	bgt.n	8009e60 <__gethex+0x14c>
 8009e4a:	9801      	ldr	r0, [sp, #4]
 8009e4c:	f000 fa46 	bl	800a2dc <_Balloc>
 8009e50:	4604      	mov	r4, r0
 8009e52:	b940      	cbnz	r0, 8009e66 <__gethex+0x152>
 8009e54:	4b5c      	ldr	r3, [pc, #368]	@ (8009fc8 <__gethex+0x2b4>)
 8009e56:	4602      	mov	r2, r0
 8009e58:	21e4      	movs	r1, #228	@ 0xe4
 8009e5a:	485c      	ldr	r0, [pc, #368]	@ (8009fcc <__gethex+0x2b8>)
 8009e5c:	f7ff f83e 	bl	8008edc <__assert_func>
 8009e60:	3101      	adds	r1, #1
 8009e62:	105b      	asrs	r3, r3, #1
 8009e64:	e7ef      	b.n	8009e46 <__gethex+0x132>
 8009e66:	f100 0a14 	add.w	sl, r0, #20
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	4655      	mov	r5, sl
 8009e6e:	469b      	mov	fp, r3
 8009e70:	45b1      	cmp	r9, r6
 8009e72:	d337      	bcc.n	8009ee4 <__gethex+0x1d0>
 8009e74:	f845 bb04 	str.w	fp, [r5], #4
 8009e78:	eba5 050a 	sub.w	r5, r5, sl
 8009e7c:	10ad      	asrs	r5, r5, #2
 8009e7e:	6125      	str	r5, [r4, #16]
 8009e80:	4658      	mov	r0, fp
 8009e82:	f000 fb1d 	bl	800a4c0 <__hi0bits>
 8009e86:	016d      	lsls	r5, r5, #5
 8009e88:	f8d8 6000 	ldr.w	r6, [r8]
 8009e8c:	1a2d      	subs	r5, r5, r0
 8009e8e:	42b5      	cmp	r5, r6
 8009e90:	dd54      	ble.n	8009f3c <__gethex+0x228>
 8009e92:	1bad      	subs	r5, r5, r6
 8009e94:	4629      	mov	r1, r5
 8009e96:	4620      	mov	r0, r4
 8009e98:	f000 feb1 	bl	800abfe <__any_on>
 8009e9c:	4681      	mov	r9, r0
 8009e9e:	b178      	cbz	r0, 8009ec0 <__gethex+0x1ac>
 8009ea0:	1e6b      	subs	r3, r5, #1
 8009ea2:	1159      	asrs	r1, r3, #5
 8009ea4:	f003 021f 	and.w	r2, r3, #31
 8009ea8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009eac:	f04f 0901 	mov.w	r9, #1
 8009eb0:	fa09 f202 	lsl.w	r2, r9, r2
 8009eb4:	420a      	tst	r2, r1
 8009eb6:	d003      	beq.n	8009ec0 <__gethex+0x1ac>
 8009eb8:	454b      	cmp	r3, r9
 8009eba:	dc36      	bgt.n	8009f2a <__gethex+0x216>
 8009ebc:	f04f 0902 	mov.w	r9, #2
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f7ff febe 	bl	8009c44 <rshift>
 8009ec8:	442f      	add	r7, r5
 8009eca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ece:	42bb      	cmp	r3, r7
 8009ed0:	da42      	bge.n	8009f58 <__gethex+0x244>
 8009ed2:	9801      	ldr	r0, [sp, #4]
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	f000 fa41 	bl	800a35c <_Bfree>
 8009eda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009edc:	2300      	movs	r3, #0
 8009ede:	6013      	str	r3, [r2, #0]
 8009ee0:	25a3      	movs	r5, #163	@ 0xa3
 8009ee2:	e793      	b.n	8009e0c <__gethex+0xf8>
 8009ee4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009ee8:	2a2e      	cmp	r2, #46	@ 0x2e
 8009eea:	d012      	beq.n	8009f12 <__gethex+0x1fe>
 8009eec:	2b20      	cmp	r3, #32
 8009eee:	d104      	bne.n	8009efa <__gethex+0x1e6>
 8009ef0:	f845 bb04 	str.w	fp, [r5], #4
 8009ef4:	f04f 0b00 	mov.w	fp, #0
 8009ef8:	465b      	mov	r3, fp
 8009efa:	7830      	ldrb	r0, [r6, #0]
 8009efc:	9303      	str	r3, [sp, #12]
 8009efe:	f7ff fef3 	bl	8009ce8 <__hexdig_fun>
 8009f02:	9b03      	ldr	r3, [sp, #12]
 8009f04:	f000 000f 	and.w	r0, r0, #15
 8009f08:	4098      	lsls	r0, r3
 8009f0a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009f0e:	3304      	adds	r3, #4
 8009f10:	e7ae      	b.n	8009e70 <__gethex+0x15c>
 8009f12:	45b1      	cmp	r9, r6
 8009f14:	d8ea      	bhi.n	8009eec <__gethex+0x1d8>
 8009f16:	492b      	ldr	r1, [pc, #172]	@ (8009fc4 <__gethex+0x2b0>)
 8009f18:	9303      	str	r3, [sp, #12]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	f7fe ff26 	bl	8008d6e <strncmp>
 8009f22:	9b03      	ldr	r3, [sp, #12]
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d1e1      	bne.n	8009eec <__gethex+0x1d8>
 8009f28:	e7a2      	b.n	8009e70 <__gethex+0x15c>
 8009f2a:	1ea9      	subs	r1, r5, #2
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f000 fe66 	bl	800abfe <__any_on>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	d0c2      	beq.n	8009ebc <__gethex+0x1a8>
 8009f36:	f04f 0903 	mov.w	r9, #3
 8009f3a:	e7c1      	b.n	8009ec0 <__gethex+0x1ac>
 8009f3c:	da09      	bge.n	8009f52 <__gethex+0x23e>
 8009f3e:	1b75      	subs	r5, r6, r5
 8009f40:	4621      	mov	r1, r4
 8009f42:	9801      	ldr	r0, [sp, #4]
 8009f44:	462a      	mov	r2, r5
 8009f46:	f000 fc21 	bl	800a78c <__lshift>
 8009f4a:	1b7f      	subs	r7, r7, r5
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	f100 0a14 	add.w	sl, r0, #20
 8009f52:	f04f 0900 	mov.w	r9, #0
 8009f56:	e7b8      	b.n	8009eca <__gethex+0x1b6>
 8009f58:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009f5c:	42bd      	cmp	r5, r7
 8009f5e:	dd6f      	ble.n	800a040 <__gethex+0x32c>
 8009f60:	1bed      	subs	r5, r5, r7
 8009f62:	42ae      	cmp	r6, r5
 8009f64:	dc34      	bgt.n	8009fd0 <__gethex+0x2bc>
 8009f66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d022      	beq.n	8009fb4 <__gethex+0x2a0>
 8009f6e:	2b03      	cmp	r3, #3
 8009f70:	d024      	beq.n	8009fbc <__gethex+0x2a8>
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d115      	bne.n	8009fa2 <__gethex+0x28e>
 8009f76:	42ae      	cmp	r6, r5
 8009f78:	d113      	bne.n	8009fa2 <__gethex+0x28e>
 8009f7a:	2e01      	cmp	r6, #1
 8009f7c:	d10b      	bne.n	8009f96 <__gethex+0x282>
 8009f7e:	9a02      	ldr	r2, [sp, #8]
 8009f80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f84:	6013      	str	r3, [r2, #0]
 8009f86:	2301      	movs	r3, #1
 8009f88:	6123      	str	r3, [r4, #16]
 8009f8a:	f8ca 3000 	str.w	r3, [sl]
 8009f8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f90:	2562      	movs	r5, #98	@ 0x62
 8009f92:	601c      	str	r4, [r3, #0]
 8009f94:	e73a      	b.n	8009e0c <__gethex+0xf8>
 8009f96:	1e71      	subs	r1, r6, #1
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f000 fe30 	bl	800abfe <__any_on>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d1ed      	bne.n	8009f7e <__gethex+0x26a>
 8009fa2:	9801      	ldr	r0, [sp, #4]
 8009fa4:	4621      	mov	r1, r4
 8009fa6:	f000 f9d9 	bl	800a35c <_Bfree>
 8009faa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fac:	2300      	movs	r3, #0
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	2550      	movs	r5, #80	@ 0x50
 8009fb2:	e72b      	b.n	8009e0c <__gethex+0xf8>
 8009fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1f3      	bne.n	8009fa2 <__gethex+0x28e>
 8009fba:	e7e0      	b.n	8009f7e <__gethex+0x26a>
 8009fbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1dd      	bne.n	8009f7e <__gethex+0x26a>
 8009fc2:	e7ee      	b.n	8009fa2 <__gethex+0x28e>
 8009fc4:	0800b7f8 	.word	0x0800b7f8
 8009fc8:	0800ba4a 	.word	0x0800ba4a
 8009fcc:	0800ba5b 	.word	0x0800ba5b
 8009fd0:	1e6f      	subs	r7, r5, #1
 8009fd2:	f1b9 0f00 	cmp.w	r9, #0
 8009fd6:	d130      	bne.n	800a03a <__gethex+0x326>
 8009fd8:	b127      	cbz	r7, 8009fe4 <__gethex+0x2d0>
 8009fda:	4639      	mov	r1, r7
 8009fdc:	4620      	mov	r0, r4
 8009fde:	f000 fe0e 	bl	800abfe <__any_on>
 8009fe2:	4681      	mov	r9, r0
 8009fe4:	117a      	asrs	r2, r7, #5
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009fec:	f007 071f 	and.w	r7, r7, #31
 8009ff0:	40bb      	lsls	r3, r7
 8009ff2:	4213      	tst	r3, r2
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	bf18      	it	ne
 8009ffa:	f049 0902 	orrne.w	r9, r9, #2
 8009ffe:	f7ff fe21 	bl	8009c44 <rshift>
 800a002:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a006:	1b76      	subs	r6, r6, r5
 800a008:	2502      	movs	r5, #2
 800a00a:	f1b9 0f00 	cmp.w	r9, #0
 800a00e:	d047      	beq.n	800a0a0 <__gethex+0x38c>
 800a010:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a014:	2b02      	cmp	r3, #2
 800a016:	d015      	beq.n	800a044 <__gethex+0x330>
 800a018:	2b03      	cmp	r3, #3
 800a01a:	d017      	beq.n	800a04c <__gethex+0x338>
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d109      	bne.n	800a034 <__gethex+0x320>
 800a020:	f019 0f02 	tst.w	r9, #2
 800a024:	d006      	beq.n	800a034 <__gethex+0x320>
 800a026:	f8da 3000 	ldr.w	r3, [sl]
 800a02a:	ea49 0903 	orr.w	r9, r9, r3
 800a02e:	f019 0f01 	tst.w	r9, #1
 800a032:	d10e      	bne.n	800a052 <__gethex+0x33e>
 800a034:	f045 0510 	orr.w	r5, r5, #16
 800a038:	e032      	b.n	800a0a0 <__gethex+0x38c>
 800a03a:	f04f 0901 	mov.w	r9, #1
 800a03e:	e7d1      	b.n	8009fe4 <__gethex+0x2d0>
 800a040:	2501      	movs	r5, #1
 800a042:	e7e2      	b.n	800a00a <__gethex+0x2f6>
 800a044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a046:	f1c3 0301 	rsb	r3, r3, #1
 800a04a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a04c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d0f0      	beq.n	800a034 <__gethex+0x320>
 800a052:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a056:	f104 0314 	add.w	r3, r4, #20
 800a05a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a05e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a062:	f04f 0c00 	mov.w	ip, #0
 800a066:	4618      	mov	r0, r3
 800a068:	f853 2b04 	ldr.w	r2, [r3], #4
 800a06c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a070:	d01b      	beq.n	800a0aa <__gethex+0x396>
 800a072:	3201      	adds	r2, #1
 800a074:	6002      	str	r2, [r0, #0]
 800a076:	2d02      	cmp	r5, #2
 800a078:	f104 0314 	add.w	r3, r4, #20
 800a07c:	d13c      	bne.n	800a0f8 <__gethex+0x3e4>
 800a07e:	f8d8 2000 	ldr.w	r2, [r8]
 800a082:	3a01      	subs	r2, #1
 800a084:	42b2      	cmp	r2, r6
 800a086:	d109      	bne.n	800a09c <__gethex+0x388>
 800a088:	1171      	asrs	r1, r6, #5
 800a08a:	2201      	movs	r2, #1
 800a08c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a090:	f006 061f 	and.w	r6, r6, #31
 800a094:	fa02 f606 	lsl.w	r6, r2, r6
 800a098:	421e      	tst	r6, r3
 800a09a:	d13a      	bne.n	800a112 <__gethex+0x3fe>
 800a09c:	f045 0520 	orr.w	r5, r5, #32
 800a0a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0a2:	601c      	str	r4, [r3, #0]
 800a0a4:	9b02      	ldr	r3, [sp, #8]
 800a0a6:	601f      	str	r7, [r3, #0]
 800a0a8:	e6b0      	b.n	8009e0c <__gethex+0xf8>
 800a0aa:	4299      	cmp	r1, r3
 800a0ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800a0b0:	d8d9      	bhi.n	800a066 <__gethex+0x352>
 800a0b2:	68a3      	ldr	r3, [r4, #8]
 800a0b4:	459b      	cmp	fp, r3
 800a0b6:	db17      	blt.n	800a0e8 <__gethex+0x3d4>
 800a0b8:	6861      	ldr	r1, [r4, #4]
 800a0ba:	9801      	ldr	r0, [sp, #4]
 800a0bc:	3101      	adds	r1, #1
 800a0be:	f000 f90d 	bl	800a2dc <_Balloc>
 800a0c2:	4681      	mov	r9, r0
 800a0c4:	b918      	cbnz	r0, 800a0ce <__gethex+0x3ba>
 800a0c6:	4b1a      	ldr	r3, [pc, #104]	@ (800a130 <__gethex+0x41c>)
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	2184      	movs	r1, #132	@ 0x84
 800a0cc:	e6c5      	b.n	8009e5a <__gethex+0x146>
 800a0ce:	6922      	ldr	r2, [r4, #16]
 800a0d0:	3202      	adds	r2, #2
 800a0d2:	f104 010c 	add.w	r1, r4, #12
 800a0d6:	0092      	lsls	r2, r2, #2
 800a0d8:	300c      	adds	r0, #12
 800a0da:	f7fe fee2 	bl	8008ea2 <memcpy>
 800a0de:	4621      	mov	r1, r4
 800a0e0:	9801      	ldr	r0, [sp, #4]
 800a0e2:	f000 f93b 	bl	800a35c <_Bfree>
 800a0e6:	464c      	mov	r4, r9
 800a0e8:	6923      	ldr	r3, [r4, #16]
 800a0ea:	1c5a      	adds	r2, r3, #1
 800a0ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0f0:	6122      	str	r2, [r4, #16]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	615a      	str	r2, [r3, #20]
 800a0f6:	e7be      	b.n	800a076 <__gethex+0x362>
 800a0f8:	6922      	ldr	r2, [r4, #16]
 800a0fa:	455a      	cmp	r2, fp
 800a0fc:	dd0b      	ble.n	800a116 <__gethex+0x402>
 800a0fe:	2101      	movs	r1, #1
 800a100:	4620      	mov	r0, r4
 800a102:	f7ff fd9f 	bl	8009c44 <rshift>
 800a106:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a10a:	3701      	adds	r7, #1
 800a10c:	42bb      	cmp	r3, r7
 800a10e:	f6ff aee0 	blt.w	8009ed2 <__gethex+0x1be>
 800a112:	2501      	movs	r5, #1
 800a114:	e7c2      	b.n	800a09c <__gethex+0x388>
 800a116:	f016 061f 	ands.w	r6, r6, #31
 800a11a:	d0fa      	beq.n	800a112 <__gethex+0x3fe>
 800a11c:	4453      	add	r3, sl
 800a11e:	f1c6 0620 	rsb	r6, r6, #32
 800a122:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a126:	f000 f9cb 	bl	800a4c0 <__hi0bits>
 800a12a:	42b0      	cmp	r0, r6
 800a12c:	dbe7      	blt.n	800a0fe <__gethex+0x3ea>
 800a12e:	e7f0      	b.n	800a112 <__gethex+0x3fe>
 800a130:	0800ba4a 	.word	0x0800ba4a

0800a134 <L_shift>:
 800a134:	f1c2 0208 	rsb	r2, r2, #8
 800a138:	0092      	lsls	r2, r2, #2
 800a13a:	b570      	push	{r4, r5, r6, lr}
 800a13c:	f1c2 0620 	rsb	r6, r2, #32
 800a140:	6843      	ldr	r3, [r0, #4]
 800a142:	6804      	ldr	r4, [r0, #0]
 800a144:	fa03 f506 	lsl.w	r5, r3, r6
 800a148:	432c      	orrs	r4, r5
 800a14a:	40d3      	lsrs	r3, r2
 800a14c:	6004      	str	r4, [r0, #0]
 800a14e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a152:	4288      	cmp	r0, r1
 800a154:	d3f4      	bcc.n	800a140 <L_shift+0xc>
 800a156:	bd70      	pop	{r4, r5, r6, pc}

0800a158 <__match>:
 800a158:	b530      	push	{r4, r5, lr}
 800a15a:	6803      	ldr	r3, [r0, #0]
 800a15c:	3301      	adds	r3, #1
 800a15e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a162:	b914      	cbnz	r4, 800a16a <__match+0x12>
 800a164:	6003      	str	r3, [r0, #0]
 800a166:	2001      	movs	r0, #1
 800a168:	bd30      	pop	{r4, r5, pc}
 800a16a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a16e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a172:	2d19      	cmp	r5, #25
 800a174:	bf98      	it	ls
 800a176:	3220      	addls	r2, #32
 800a178:	42a2      	cmp	r2, r4
 800a17a:	d0f0      	beq.n	800a15e <__match+0x6>
 800a17c:	2000      	movs	r0, #0
 800a17e:	e7f3      	b.n	800a168 <__match+0x10>

0800a180 <__hexnan>:
 800a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	680b      	ldr	r3, [r1, #0]
 800a186:	6801      	ldr	r1, [r0, #0]
 800a188:	115e      	asrs	r6, r3, #5
 800a18a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a18e:	f013 031f 	ands.w	r3, r3, #31
 800a192:	b087      	sub	sp, #28
 800a194:	bf18      	it	ne
 800a196:	3604      	addne	r6, #4
 800a198:	2500      	movs	r5, #0
 800a19a:	1f37      	subs	r7, r6, #4
 800a19c:	4682      	mov	sl, r0
 800a19e:	4690      	mov	r8, r2
 800a1a0:	9301      	str	r3, [sp, #4]
 800a1a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a1a6:	46b9      	mov	r9, r7
 800a1a8:	463c      	mov	r4, r7
 800a1aa:	9502      	str	r5, [sp, #8]
 800a1ac:	46ab      	mov	fp, r5
 800a1ae:	784a      	ldrb	r2, [r1, #1]
 800a1b0:	1c4b      	adds	r3, r1, #1
 800a1b2:	9303      	str	r3, [sp, #12]
 800a1b4:	b342      	cbz	r2, 800a208 <__hexnan+0x88>
 800a1b6:	4610      	mov	r0, r2
 800a1b8:	9105      	str	r1, [sp, #20]
 800a1ba:	9204      	str	r2, [sp, #16]
 800a1bc:	f7ff fd94 	bl	8009ce8 <__hexdig_fun>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d151      	bne.n	800a268 <__hexnan+0xe8>
 800a1c4:	9a04      	ldr	r2, [sp, #16]
 800a1c6:	9905      	ldr	r1, [sp, #20]
 800a1c8:	2a20      	cmp	r2, #32
 800a1ca:	d818      	bhi.n	800a1fe <__hexnan+0x7e>
 800a1cc:	9b02      	ldr	r3, [sp, #8]
 800a1ce:	459b      	cmp	fp, r3
 800a1d0:	dd13      	ble.n	800a1fa <__hexnan+0x7a>
 800a1d2:	454c      	cmp	r4, r9
 800a1d4:	d206      	bcs.n	800a1e4 <__hexnan+0x64>
 800a1d6:	2d07      	cmp	r5, #7
 800a1d8:	dc04      	bgt.n	800a1e4 <__hexnan+0x64>
 800a1da:	462a      	mov	r2, r5
 800a1dc:	4649      	mov	r1, r9
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f7ff ffa8 	bl	800a134 <L_shift>
 800a1e4:	4544      	cmp	r4, r8
 800a1e6:	d952      	bls.n	800a28e <__hexnan+0x10e>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	f1a4 0904 	sub.w	r9, r4, #4
 800a1ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1f2:	f8cd b008 	str.w	fp, [sp, #8]
 800a1f6:	464c      	mov	r4, r9
 800a1f8:	461d      	mov	r5, r3
 800a1fa:	9903      	ldr	r1, [sp, #12]
 800a1fc:	e7d7      	b.n	800a1ae <__hexnan+0x2e>
 800a1fe:	2a29      	cmp	r2, #41	@ 0x29
 800a200:	d157      	bne.n	800a2b2 <__hexnan+0x132>
 800a202:	3102      	adds	r1, #2
 800a204:	f8ca 1000 	str.w	r1, [sl]
 800a208:	f1bb 0f00 	cmp.w	fp, #0
 800a20c:	d051      	beq.n	800a2b2 <__hexnan+0x132>
 800a20e:	454c      	cmp	r4, r9
 800a210:	d206      	bcs.n	800a220 <__hexnan+0xa0>
 800a212:	2d07      	cmp	r5, #7
 800a214:	dc04      	bgt.n	800a220 <__hexnan+0xa0>
 800a216:	462a      	mov	r2, r5
 800a218:	4649      	mov	r1, r9
 800a21a:	4620      	mov	r0, r4
 800a21c:	f7ff ff8a 	bl	800a134 <L_shift>
 800a220:	4544      	cmp	r4, r8
 800a222:	d936      	bls.n	800a292 <__hexnan+0x112>
 800a224:	f1a8 0204 	sub.w	r2, r8, #4
 800a228:	4623      	mov	r3, r4
 800a22a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a22e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a232:	429f      	cmp	r7, r3
 800a234:	d2f9      	bcs.n	800a22a <__hexnan+0xaa>
 800a236:	1b3b      	subs	r3, r7, r4
 800a238:	f023 0303 	bic.w	r3, r3, #3
 800a23c:	3304      	adds	r3, #4
 800a23e:	3401      	adds	r4, #1
 800a240:	3e03      	subs	r6, #3
 800a242:	42b4      	cmp	r4, r6
 800a244:	bf88      	it	hi
 800a246:	2304      	movhi	r3, #4
 800a248:	4443      	add	r3, r8
 800a24a:	2200      	movs	r2, #0
 800a24c:	f843 2b04 	str.w	r2, [r3], #4
 800a250:	429f      	cmp	r7, r3
 800a252:	d2fb      	bcs.n	800a24c <__hexnan+0xcc>
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	b91b      	cbnz	r3, 800a260 <__hexnan+0xe0>
 800a258:	4547      	cmp	r7, r8
 800a25a:	d128      	bne.n	800a2ae <__hexnan+0x12e>
 800a25c:	2301      	movs	r3, #1
 800a25e:	603b      	str	r3, [r7, #0]
 800a260:	2005      	movs	r0, #5
 800a262:	b007      	add	sp, #28
 800a264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a268:	3501      	adds	r5, #1
 800a26a:	2d08      	cmp	r5, #8
 800a26c:	f10b 0b01 	add.w	fp, fp, #1
 800a270:	dd06      	ble.n	800a280 <__hexnan+0x100>
 800a272:	4544      	cmp	r4, r8
 800a274:	d9c1      	bls.n	800a1fa <__hexnan+0x7a>
 800a276:	2300      	movs	r3, #0
 800a278:	f844 3c04 	str.w	r3, [r4, #-4]
 800a27c:	2501      	movs	r5, #1
 800a27e:	3c04      	subs	r4, #4
 800a280:	6822      	ldr	r2, [r4, #0]
 800a282:	f000 000f 	and.w	r0, r0, #15
 800a286:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a28a:	6020      	str	r0, [r4, #0]
 800a28c:	e7b5      	b.n	800a1fa <__hexnan+0x7a>
 800a28e:	2508      	movs	r5, #8
 800a290:	e7b3      	b.n	800a1fa <__hexnan+0x7a>
 800a292:	9b01      	ldr	r3, [sp, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d0dd      	beq.n	800a254 <__hexnan+0xd4>
 800a298:	f1c3 0320 	rsb	r3, r3, #32
 800a29c:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a0:	40da      	lsrs	r2, r3
 800a2a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a2ac:	e7d2      	b.n	800a254 <__hexnan+0xd4>
 800a2ae:	3f04      	subs	r7, #4
 800a2b0:	e7d0      	b.n	800a254 <__hexnan+0xd4>
 800a2b2:	2004      	movs	r0, #4
 800a2b4:	e7d5      	b.n	800a262 <__hexnan+0xe2>

0800a2b6 <__ascii_mbtowc>:
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	b901      	cbnz	r1, 800a2bc <__ascii_mbtowc+0x6>
 800a2ba:	a901      	add	r1, sp, #4
 800a2bc:	b142      	cbz	r2, 800a2d0 <__ascii_mbtowc+0x1a>
 800a2be:	b14b      	cbz	r3, 800a2d4 <__ascii_mbtowc+0x1e>
 800a2c0:	7813      	ldrb	r3, [r2, #0]
 800a2c2:	600b      	str	r3, [r1, #0]
 800a2c4:	7812      	ldrb	r2, [r2, #0]
 800a2c6:	1e10      	subs	r0, r2, #0
 800a2c8:	bf18      	it	ne
 800a2ca:	2001      	movne	r0, #1
 800a2cc:	b002      	add	sp, #8
 800a2ce:	4770      	bx	lr
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	e7fb      	b.n	800a2cc <__ascii_mbtowc+0x16>
 800a2d4:	f06f 0001 	mvn.w	r0, #1
 800a2d8:	e7f8      	b.n	800a2cc <__ascii_mbtowc+0x16>
	...

0800a2dc <_Balloc>:
 800a2dc:	b570      	push	{r4, r5, r6, lr}
 800a2de:	69c6      	ldr	r6, [r0, #28]
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	460d      	mov	r5, r1
 800a2e4:	b976      	cbnz	r6, 800a304 <_Balloc+0x28>
 800a2e6:	2010      	movs	r0, #16
 800a2e8:	f7fc fe38 	bl	8006f5c <malloc>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	61e0      	str	r0, [r4, #28]
 800a2f0:	b920      	cbnz	r0, 800a2fc <_Balloc+0x20>
 800a2f2:	4b18      	ldr	r3, [pc, #96]	@ (800a354 <_Balloc+0x78>)
 800a2f4:	4818      	ldr	r0, [pc, #96]	@ (800a358 <_Balloc+0x7c>)
 800a2f6:	216b      	movs	r1, #107	@ 0x6b
 800a2f8:	f7fe fdf0 	bl	8008edc <__assert_func>
 800a2fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a300:	6006      	str	r6, [r0, #0]
 800a302:	60c6      	str	r6, [r0, #12]
 800a304:	69e6      	ldr	r6, [r4, #28]
 800a306:	68f3      	ldr	r3, [r6, #12]
 800a308:	b183      	cbz	r3, 800a32c <_Balloc+0x50>
 800a30a:	69e3      	ldr	r3, [r4, #28]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a312:	b9b8      	cbnz	r0, 800a344 <_Balloc+0x68>
 800a314:	2101      	movs	r1, #1
 800a316:	fa01 f605 	lsl.w	r6, r1, r5
 800a31a:	1d72      	adds	r2, r6, #5
 800a31c:	0092      	lsls	r2, r2, #2
 800a31e:	4620      	mov	r0, r4
 800a320:	f000 fed1 	bl	800b0c6 <_calloc_r>
 800a324:	b160      	cbz	r0, 800a340 <_Balloc+0x64>
 800a326:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a32a:	e00e      	b.n	800a34a <_Balloc+0x6e>
 800a32c:	2221      	movs	r2, #33	@ 0x21
 800a32e:	2104      	movs	r1, #4
 800a330:	4620      	mov	r0, r4
 800a332:	f000 fec8 	bl	800b0c6 <_calloc_r>
 800a336:	69e3      	ldr	r3, [r4, #28]
 800a338:	60f0      	str	r0, [r6, #12]
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1e4      	bne.n	800a30a <_Balloc+0x2e>
 800a340:	2000      	movs	r0, #0
 800a342:	bd70      	pop	{r4, r5, r6, pc}
 800a344:	6802      	ldr	r2, [r0, #0]
 800a346:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a34a:	2300      	movs	r3, #0
 800a34c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a350:	e7f7      	b.n	800a342 <_Balloc+0x66>
 800a352:	bf00      	nop
 800a354:	0800b9db 	.word	0x0800b9db
 800a358:	0800babb 	.word	0x0800babb

0800a35c <_Bfree>:
 800a35c:	b570      	push	{r4, r5, r6, lr}
 800a35e:	69c6      	ldr	r6, [r0, #28]
 800a360:	4605      	mov	r5, r0
 800a362:	460c      	mov	r4, r1
 800a364:	b976      	cbnz	r6, 800a384 <_Bfree+0x28>
 800a366:	2010      	movs	r0, #16
 800a368:	f7fc fdf8 	bl	8006f5c <malloc>
 800a36c:	4602      	mov	r2, r0
 800a36e:	61e8      	str	r0, [r5, #28]
 800a370:	b920      	cbnz	r0, 800a37c <_Bfree+0x20>
 800a372:	4b09      	ldr	r3, [pc, #36]	@ (800a398 <_Bfree+0x3c>)
 800a374:	4809      	ldr	r0, [pc, #36]	@ (800a39c <_Bfree+0x40>)
 800a376:	218f      	movs	r1, #143	@ 0x8f
 800a378:	f7fe fdb0 	bl	8008edc <__assert_func>
 800a37c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a380:	6006      	str	r6, [r0, #0]
 800a382:	60c6      	str	r6, [r0, #12]
 800a384:	b13c      	cbz	r4, 800a396 <_Bfree+0x3a>
 800a386:	69eb      	ldr	r3, [r5, #28]
 800a388:	6862      	ldr	r2, [r4, #4]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a390:	6021      	str	r1, [r4, #0]
 800a392:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a396:	bd70      	pop	{r4, r5, r6, pc}
 800a398:	0800b9db 	.word	0x0800b9db
 800a39c:	0800babb 	.word	0x0800babb

0800a3a0 <__multadd>:
 800a3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a4:	690d      	ldr	r5, [r1, #16]
 800a3a6:	4607      	mov	r7, r0
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	461e      	mov	r6, r3
 800a3ac:	f101 0c14 	add.w	ip, r1, #20
 800a3b0:	2000      	movs	r0, #0
 800a3b2:	f8dc 3000 	ldr.w	r3, [ip]
 800a3b6:	b299      	uxth	r1, r3
 800a3b8:	fb02 6101 	mla	r1, r2, r1, r6
 800a3bc:	0c1e      	lsrs	r6, r3, #16
 800a3be:	0c0b      	lsrs	r3, r1, #16
 800a3c0:	fb02 3306 	mla	r3, r2, r6, r3
 800a3c4:	b289      	uxth	r1, r1
 800a3c6:	3001      	adds	r0, #1
 800a3c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3cc:	4285      	cmp	r5, r0
 800a3ce:	f84c 1b04 	str.w	r1, [ip], #4
 800a3d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3d6:	dcec      	bgt.n	800a3b2 <__multadd+0x12>
 800a3d8:	b30e      	cbz	r6, 800a41e <__multadd+0x7e>
 800a3da:	68a3      	ldr	r3, [r4, #8]
 800a3dc:	42ab      	cmp	r3, r5
 800a3de:	dc19      	bgt.n	800a414 <__multadd+0x74>
 800a3e0:	6861      	ldr	r1, [r4, #4]
 800a3e2:	4638      	mov	r0, r7
 800a3e4:	3101      	adds	r1, #1
 800a3e6:	f7ff ff79 	bl	800a2dc <_Balloc>
 800a3ea:	4680      	mov	r8, r0
 800a3ec:	b928      	cbnz	r0, 800a3fa <__multadd+0x5a>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a424 <__multadd+0x84>)
 800a3f2:	480d      	ldr	r0, [pc, #52]	@ (800a428 <__multadd+0x88>)
 800a3f4:	21ba      	movs	r1, #186	@ 0xba
 800a3f6:	f7fe fd71 	bl	8008edc <__assert_func>
 800a3fa:	6922      	ldr	r2, [r4, #16]
 800a3fc:	3202      	adds	r2, #2
 800a3fe:	f104 010c 	add.w	r1, r4, #12
 800a402:	0092      	lsls	r2, r2, #2
 800a404:	300c      	adds	r0, #12
 800a406:	f7fe fd4c 	bl	8008ea2 <memcpy>
 800a40a:	4621      	mov	r1, r4
 800a40c:	4638      	mov	r0, r7
 800a40e:	f7ff ffa5 	bl	800a35c <_Bfree>
 800a412:	4644      	mov	r4, r8
 800a414:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a418:	3501      	adds	r5, #1
 800a41a:	615e      	str	r6, [r3, #20]
 800a41c:	6125      	str	r5, [r4, #16]
 800a41e:	4620      	mov	r0, r4
 800a420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a424:	0800ba4a 	.word	0x0800ba4a
 800a428:	0800babb 	.word	0x0800babb

0800a42c <__s2b>:
 800a42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a430:	460c      	mov	r4, r1
 800a432:	4615      	mov	r5, r2
 800a434:	461f      	mov	r7, r3
 800a436:	2209      	movs	r2, #9
 800a438:	3308      	adds	r3, #8
 800a43a:	4606      	mov	r6, r0
 800a43c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a440:	2100      	movs	r1, #0
 800a442:	2201      	movs	r2, #1
 800a444:	429a      	cmp	r2, r3
 800a446:	db09      	blt.n	800a45c <__s2b+0x30>
 800a448:	4630      	mov	r0, r6
 800a44a:	f7ff ff47 	bl	800a2dc <_Balloc>
 800a44e:	b940      	cbnz	r0, 800a462 <__s2b+0x36>
 800a450:	4602      	mov	r2, r0
 800a452:	4b19      	ldr	r3, [pc, #100]	@ (800a4b8 <__s2b+0x8c>)
 800a454:	4819      	ldr	r0, [pc, #100]	@ (800a4bc <__s2b+0x90>)
 800a456:	21d3      	movs	r1, #211	@ 0xd3
 800a458:	f7fe fd40 	bl	8008edc <__assert_func>
 800a45c:	0052      	lsls	r2, r2, #1
 800a45e:	3101      	adds	r1, #1
 800a460:	e7f0      	b.n	800a444 <__s2b+0x18>
 800a462:	9b08      	ldr	r3, [sp, #32]
 800a464:	6143      	str	r3, [r0, #20]
 800a466:	2d09      	cmp	r5, #9
 800a468:	f04f 0301 	mov.w	r3, #1
 800a46c:	6103      	str	r3, [r0, #16]
 800a46e:	dd16      	ble.n	800a49e <__s2b+0x72>
 800a470:	f104 0909 	add.w	r9, r4, #9
 800a474:	46c8      	mov	r8, r9
 800a476:	442c      	add	r4, r5
 800a478:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a47c:	4601      	mov	r1, r0
 800a47e:	3b30      	subs	r3, #48	@ 0x30
 800a480:	220a      	movs	r2, #10
 800a482:	4630      	mov	r0, r6
 800a484:	f7ff ff8c 	bl	800a3a0 <__multadd>
 800a488:	45a0      	cmp	r8, r4
 800a48a:	d1f5      	bne.n	800a478 <__s2b+0x4c>
 800a48c:	f1a5 0408 	sub.w	r4, r5, #8
 800a490:	444c      	add	r4, r9
 800a492:	1b2d      	subs	r5, r5, r4
 800a494:	1963      	adds	r3, r4, r5
 800a496:	42bb      	cmp	r3, r7
 800a498:	db04      	blt.n	800a4a4 <__s2b+0x78>
 800a49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a49e:	340a      	adds	r4, #10
 800a4a0:	2509      	movs	r5, #9
 800a4a2:	e7f6      	b.n	800a492 <__s2b+0x66>
 800a4a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a4a8:	4601      	mov	r1, r0
 800a4aa:	3b30      	subs	r3, #48	@ 0x30
 800a4ac:	220a      	movs	r2, #10
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f7ff ff76 	bl	800a3a0 <__multadd>
 800a4b4:	e7ee      	b.n	800a494 <__s2b+0x68>
 800a4b6:	bf00      	nop
 800a4b8:	0800ba4a 	.word	0x0800ba4a
 800a4bc:	0800babb 	.word	0x0800babb

0800a4c0 <__hi0bits>:
 800a4c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	bf36      	itet	cc
 800a4c8:	0403      	lslcc	r3, r0, #16
 800a4ca:	2000      	movcs	r0, #0
 800a4cc:	2010      	movcc	r0, #16
 800a4ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4d2:	bf3c      	itt	cc
 800a4d4:	021b      	lslcc	r3, r3, #8
 800a4d6:	3008      	addcc	r0, #8
 800a4d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4dc:	bf3c      	itt	cc
 800a4de:	011b      	lslcc	r3, r3, #4
 800a4e0:	3004      	addcc	r0, #4
 800a4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4e6:	bf3c      	itt	cc
 800a4e8:	009b      	lslcc	r3, r3, #2
 800a4ea:	3002      	addcc	r0, #2
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	db05      	blt.n	800a4fc <__hi0bits+0x3c>
 800a4f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a4f4:	f100 0001 	add.w	r0, r0, #1
 800a4f8:	bf08      	it	eq
 800a4fa:	2020      	moveq	r0, #32
 800a4fc:	4770      	bx	lr

0800a4fe <__lo0bits>:
 800a4fe:	6803      	ldr	r3, [r0, #0]
 800a500:	4602      	mov	r2, r0
 800a502:	f013 0007 	ands.w	r0, r3, #7
 800a506:	d00b      	beq.n	800a520 <__lo0bits+0x22>
 800a508:	07d9      	lsls	r1, r3, #31
 800a50a:	d421      	bmi.n	800a550 <__lo0bits+0x52>
 800a50c:	0798      	lsls	r0, r3, #30
 800a50e:	bf49      	itett	mi
 800a510:	085b      	lsrmi	r3, r3, #1
 800a512:	089b      	lsrpl	r3, r3, #2
 800a514:	2001      	movmi	r0, #1
 800a516:	6013      	strmi	r3, [r2, #0]
 800a518:	bf5c      	itt	pl
 800a51a:	6013      	strpl	r3, [r2, #0]
 800a51c:	2002      	movpl	r0, #2
 800a51e:	4770      	bx	lr
 800a520:	b299      	uxth	r1, r3
 800a522:	b909      	cbnz	r1, 800a528 <__lo0bits+0x2a>
 800a524:	0c1b      	lsrs	r3, r3, #16
 800a526:	2010      	movs	r0, #16
 800a528:	b2d9      	uxtb	r1, r3
 800a52a:	b909      	cbnz	r1, 800a530 <__lo0bits+0x32>
 800a52c:	3008      	adds	r0, #8
 800a52e:	0a1b      	lsrs	r3, r3, #8
 800a530:	0719      	lsls	r1, r3, #28
 800a532:	bf04      	itt	eq
 800a534:	091b      	lsreq	r3, r3, #4
 800a536:	3004      	addeq	r0, #4
 800a538:	0799      	lsls	r1, r3, #30
 800a53a:	bf04      	itt	eq
 800a53c:	089b      	lsreq	r3, r3, #2
 800a53e:	3002      	addeq	r0, #2
 800a540:	07d9      	lsls	r1, r3, #31
 800a542:	d403      	bmi.n	800a54c <__lo0bits+0x4e>
 800a544:	085b      	lsrs	r3, r3, #1
 800a546:	f100 0001 	add.w	r0, r0, #1
 800a54a:	d003      	beq.n	800a554 <__lo0bits+0x56>
 800a54c:	6013      	str	r3, [r2, #0]
 800a54e:	4770      	bx	lr
 800a550:	2000      	movs	r0, #0
 800a552:	4770      	bx	lr
 800a554:	2020      	movs	r0, #32
 800a556:	4770      	bx	lr

0800a558 <__i2b>:
 800a558:	b510      	push	{r4, lr}
 800a55a:	460c      	mov	r4, r1
 800a55c:	2101      	movs	r1, #1
 800a55e:	f7ff febd 	bl	800a2dc <_Balloc>
 800a562:	4602      	mov	r2, r0
 800a564:	b928      	cbnz	r0, 800a572 <__i2b+0x1a>
 800a566:	4b05      	ldr	r3, [pc, #20]	@ (800a57c <__i2b+0x24>)
 800a568:	4805      	ldr	r0, [pc, #20]	@ (800a580 <__i2b+0x28>)
 800a56a:	f240 1145 	movw	r1, #325	@ 0x145
 800a56e:	f7fe fcb5 	bl	8008edc <__assert_func>
 800a572:	2301      	movs	r3, #1
 800a574:	6144      	str	r4, [r0, #20]
 800a576:	6103      	str	r3, [r0, #16]
 800a578:	bd10      	pop	{r4, pc}
 800a57a:	bf00      	nop
 800a57c:	0800ba4a 	.word	0x0800ba4a
 800a580:	0800babb 	.word	0x0800babb

0800a584 <__multiply>:
 800a584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a588:	4614      	mov	r4, r2
 800a58a:	690a      	ldr	r2, [r1, #16]
 800a58c:	6923      	ldr	r3, [r4, #16]
 800a58e:	429a      	cmp	r2, r3
 800a590:	bfa8      	it	ge
 800a592:	4623      	movge	r3, r4
 800a594:	460f      	mov	r7, r1
 800a596:	bfa4      	itt	ge
 800a598:	460c      	movge	r4, r1
 800a59a:	461f      	movge	r7, r3
 800a59c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a5a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a5a4:	68a3      	ldr	r3, [r4, #8]
 800a5a6:	6861      	ldr	r1, [r4, #4]
 800a5a8:	eb0a 0609 	add.w	r6, sl, r9
 800a5ac:	42b3      	cmp	r3, r6
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	bfb8      	it	lt
 800a5b2:	3101      	addlt	r1, #1
 800a5b4:	f7ff fe92 	bl	800a2dc <_Balloc>
 800a5b8:	b930      	cbnz	r0, 800a5c8 <__multiply+0x44>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	4b44      	ldr	r3, [pc, #272]	@ (800a6d0 <__multiply+0x14c>)
 800a5be:	4845      	ldr	r0, [pc, #276]	@ (800a6d4 <__multiply+0x150>)
 800a5c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a5c4:	f7fe fc8a 	bl	8008edc <__assert_func>
 800a5c8:	f100 0514 	add.w	r5, r0, #20
 800a5cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a5d0:	462b      	mov	r3, r5
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	4543      	cmp	r3, r8
 800a5d6:	d321      	bcc.n	800a61c <__multiply+0x98>
 800a5d8:	f107 0114 	add.w	r1, r7, #20
 800a5dc:	f104 0214 	add.w	r2, r4, #20
 800a5e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a5e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a5e8:	9302      	str	r3, [sp, #8]
 800a5ea:	1b13      	subs	r3, r2, r4
 800a5ec:	3b15      	subs	r3, #21
 800a5ee:	f023 0303 	bic.w	r3, r3, #3
 800a5f2:	3304      	adds	r3, #4
 800a5f4:	f104 0715 	add.w	r7, r4, #21
 800a5f8:	42ba      	cmp	r2, r7
 800a5fa:	bf38      	it	cc
 800a5fc:	2304      	movcc	r3, #4
 800a5fe:	9301      	str	r3, [sp, #4]
 800a600:	9b02      	ldr	r3, [sp, #8]
 800a602:	9103      	str	r1, [sp, #12]
 800a604:	428b      	cmp	r3, r1
 800a606:	d80c      	bhi.n	800a622 <__multiply+0x9e>
 800a608:	2e00      	cmp	r6, #0
 800a60a:	dd03      	ble.n	800a614 <__multiply+0x90>
 800a60c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a610:	2b00      	cmp	r3, #0
 800a612:	d05b      	beq.n	800a6cc <__multiply+0x148>
 800a614:	6106      	str	r6, [r0, #16]
 800a616:	b005      	add	sp, #20
 800a618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61c:	f843 2b04 	str.w	r2, [r3], #4
 800a620:	e7d8      	b.n	800a5d4 <__multiply+0x50>
 800a622:	f8b1 a000 	ldrh.w	sl, [r1]
 800a626:	f1ba 0f00 	cmp.w	sl, #0
 800a62a:	d024      	beq.n	800a676 <__multiply+0xf2>
 800a62c:	f104 0e14 	add.w	lr, r4, #20
 800a630:	46a9      	mov	r9, r5
 800a632:	f04f 0c00 	mov.w	ip, #0
 800a636:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a63a:	f8d9 3000 	ldr.w	r3, [r9]
 800a63e:	fa1f fb87 	uxth.w	fp, r7
 800a642:	b29b      	uxth	r3, r3
 800a644:	fb0a 330b 	mla	r3, sl, fp, r3
 800a648:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a64c:	f8d9 7000 	ldr.w	r7, [r9]
 800a650:	4463      	add	r3, ip
 800a652:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a656:	fb0a c70b 	mla	r7, sl, fp, ip
 800a65a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a65e:	b29b      	uxth	r3, r3
 800a660:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a664:	4572      	cmp	r2, lr
 800a666:	f849 3b04 	str.w	r3, [r9], #4
 800a66a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a66e:	d8e2      	bhi.n	800a636 <__multiply+0xb2>
 800a670:	9b01      	ldr	r3, [sp, #4]
 800a672:	f845 c003 	str.w	ip, [r5, r3]
 800a676:	9b03      	ldr	r3, [sp, #12]
 800a678:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a67c:	3104      	adds	r1, #4
 800a67e:	f1b9 0f00 	cmp.w	r9, #0
 800a682:	d021      	beq.n	800a6c8 <__multiply+0x144>
 800a684:	682b      	ldr	r3, [r5, #0]
 800a686:	f104 0c14 	add.w	ip, r4, #20
 800a68a:	46ae      	mov	lr, r5
 800a68c:	f04f 0a00 	mov.w	sl, #0
 800a690:	f8bc b000 	ldrh.w	fp, [ip]
 800a694:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a698:	fb09 770b 	mla	r7, r9, fp, r7
 800a69c:	4457      	add	r7, sl
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a6a4:	f84e 3b04 	str.w	r3, [lr], #4
 800a6a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a6ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6b0:	f8be 3000 	ldrh.w	r3, [lr]
 800a6b4:	fb09 330a 	mla	r3, r9, sl, r3
 800a6b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a6bc:	4562      	cmp	r2, ip
 800a6be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6c2:	d8e5      	bhi.n	800a690 <__multiply+0x10c>
 800a6c4:	9f01      	ldr	r7, [sp, #4]
 800a6c6:	51eb      	str	r3, [r5, r7]
 800a6c8:	3504      	adds	r5, #4
 800a6ca:	e799      	b.n	800a600 <__multiply+0x7c>
 800a6cc:	3e01      	subs	r6, #1
 800a6ce:	e79b      	b.n	800a608 <__multiply+0x84>
 800a6d0:	0800ba4a 	.word	0x0800ba4a
 800a6d4:	0800babb 	.word	0x0800babb

0800a6d8 <__pow5mult>:
 800a6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6dc:	4615      	mov	r5, r2
 800a6de:	f012 0203 	ands.w	r2, r2, #3
 800a6e2:	4607      	mov	r7, r0
 800a6e4:	460e      	mov	r6, r1
 800a6e6:	d007      	beq.n	800a6f8 <__pow5mult+0x20>
 800a6e8:	4c25      	ldr	r4, [pc, #148]	@ (800a780 <__pow5mult+0xa8>)
 800a6ea:	3a01      	subs	r2, #1
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a6f2:	f7ff fe55 	bl	800a3a0 <__multadd>
 800a6f6:	4606      	mov	r6, r0
 800a6f8:	10ad      	asrs	r5, r5, #2
 800a6fa:	d03d      	beq.n	800a778 <__pow5mult+0xa0>
 800a6fc:	69fc      	ldr	r4, [r7, #28]
 800a6fe:	b97c      	cbnz	r4, 800a720 <__pow5mult+0x48>
 800a700:	2010      	movs	r0, #16
 800a702:	f7fc fc2b 	bl	8006f5c <malloc>
 800a706:	4602      	mov	r2, r0
 800a708:	61f8      	str	r0, [r7, #28]
 800a70a:	b928      	cbnz	r0, 800a718 <__pow5mult+0x40>
 800a70c:	4b1d      	ldr	r3, [pc, #116]	@ (800a784 <__pow5mult+0xac>)
 800a70e:	481e      	ldr	r0, [pc, #120]	@ (800a788 <__pow5mult+0xb0>)
 800a710:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a714:	f7fe fbe2 	bl	8008edc <__assert_func>
 800a718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a71c:	6004      	str	r4, [r0, #0]
 800a71e:	60c4      	str	r4, [r0, #12]
 800a720:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a728:	b94c      	cbnz	r4, 800a73e <__pow5mult+0x66>
 800a72a:	f240 2171 	movw	r1, #625	@ 0x271
 800a72e:	4638      	mov	r0, r7
 800a730:	f7ff ff12 	bl	800a558 <__i2b>
 800a734:	2300      	movs	r3, #0
 800a736:	f8c8 0008 	str.w	r0, [r8, #8]
 800a73a:	4604      	mov	r4, r0
 800a73c:	6003      	str	r3, [r0, #0]
 800a73e:	f04f 0900 	mov.w	r9, #0
 800a742:	07eb      	lsls	r3, r5, #31
 800a744:	d50a      	bpl.n	800a75c <__pow5mult+0x84>
 800a746:	4631      	mov	r1, r6
 800a748:	4622      	mov	r2, r4
 800a74a:	4638      	mov	r0, r7
 800a74c:	f7ff ff1a 	bl	800a584 <__multiply>
 800a750:	4631      	mov	r1, r6
 800a752:	4680      	mov	r8, r0
 800a754:	4638      	mov	r0, r7
 800a756:	f7ff fe01 	bl	800a35c <_Bfree>
 800a75a:	4646      	mov	r6, r8
 800a75c:	106d      	asrs	r5, r5, #1
 800a75e:	d00b      	beq.n	800a778 <__pow5mult+0xa0>
 800a760:	6820      	ldr	r0, [r4, #0]
 800a762:	b938      	cbnz	r0, 800a774 <__pow5mult+0x9c>
 800a764:	4622      	mov	r2, r4
 800a766:	4621      	mov	r1, r4
 800a768:	4638      	mov	r0, r7
 800a76a:	f7ff ff0b 	bl	800a584 <__multiply>
 800a76e:	6020      	str	r0, [r4, #0]
 800a770:	f8c0 9000 	str.w	r9, [r0]
 800a774:	4604      	mov	r4, r0
 800a776:	e7e4      	b.n	800a742 <__pow5mult+0x6a>
 800a778:	4630      	mov	r0, r6
 800a77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a77e:	bf00      	nop
 800a780:	0800bb14 	.word	0x0800bb14
 800a784:	0800b9db 	.word	0x0800b9db
 800a788:	0800babb 	.word	0x0800babb

0800a78c <__lshift>:
 800a78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a790:	460c      	mov	r4, r1
 800a792:	6849      	ldr	r1, [r1, #4]
 800a794:	6923      	ldr	r3, [r4, #16]
 800a796:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a79a:	68a3      	ldr	r3, [r4, #8]
 800a79c:	4607      	mov	r7, r0
 800a79e:	4691      	mov	r9, r2
 800a7a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7a4:	f108 0601 	add.w	r6, r8, #1
 800a7a8:	42b3      	cmp	r3, r6
 800a7aa:	db0b      	blt.n	800a7c4 <__lshift+0x38>
 800a7ac:	4638      	mov	r0, r7
 800a7ae:	f7ff fd95 	bl	800a2dc <_Balloc>
 800a7b2:	4605      	mov	r5, r0
 800a7b4:	b948      	cbnz	r0, 800a7ca <__lshift+0x3e>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	4b28      	ldr	r3, [pc, #160]	@ (800a85c <__lshift+0xd0>)
 800a7ba:	4829      	ldr	r0, [pc, #164]	@ (800a860 <__lshift+0xd4>)
 800a7bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a7c0:	f7fe fb8c 	bl	8008edc <__assert_func>
 800a7c4:	3101      	adds	r1, #1
 800a7c6:	005b      	lsls	r3, r3, #1
 800a7c8:	e7ee      	b.n	800a7a8 <__lshift+0x1c>
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	f100 0114 	add.w	r1, r0, #20
 800a7d0:	f100 0210 	add.w	r2, r0, #16
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	4553      	cmp	r3, sl
 800a7d8:	db33      	blt.n	800a842 <__lshift+0xb6>
 800a7da:	6920      	ldr	r0, [r4, #16]
 800a7dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7e0:	f104 0314 	add.w	r3, r4, #20
 800a7e4:	f019 091f 	ands.w	r9, r9, #31
 800a7e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a7f0:	d02b      	beq.n	800a84a <__lshift+0xbe>
 800a7f2:	f1c9 0e20 	rsb	lr, r9, #32
 800a7f6:	468a      	mov	sl, r1
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	6818      	ldr	r0, [r3, #0]
 800a7fc:	fa00 f009 	lsl.w	r0, r0, r9
 800a800:	4310      	orrs	r0, r2
 800a802:	f84a 0b04 	str.w	r0, [sl], #4
 800a806:	f853 2b04 	ldr.w	r2, [r3], #4
 800a80a:	459c      	cmp	ip, r3
 800a80c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a810:	d8f3      	bhi.n	800a7fa <__lshift+0x6e>
 800a812:	ebac 0304 	sub.w	r3, ip, r4
 800a816:	3b15      	subs	r3, #21
 800a818:	f023 0303 	bic.w	r3, r3, #3
 800a81c:	3304      	adds	r3, #4
 800a81e:	f104 0015 	add.w	r0, r4, #21
 800a822:	4584      	cmp	ip, r0
 800a824:	bf38      	it	cc
 800a826:	2304      	movcc	r3, #4
 800a828:	50ca      	str	r2, [r1, r3]
 800a82a:	b10a      	cbz	r2, 800a830 <__lshift+0xa4>
 800a82c:	f108 0602 	add.w	r6, r8, #2
 800a830:	3e01      	subs	r6, #1
 800a832:	4638      	mov	r0, r7
 800a834:	612e      	str	r6, [r5, #16]
 800a836:	4621      	mov	r1, r4
 800a838:	f7ff fd90 	bl	800a35c <_Bfree>
 800a83c:	4628      	mov	r0, r5
 800a83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a842:	f842 0f04 	str.w	r0, [r2, #4]!
 800a846:	3301      	adds	r3, #1
 800a848:	e7c5      	b.n	800a7d6 <__lshift+0x4a>
 800a84a:	3904      	subs	r1, #4
 800a84c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a850:	f841 2f04 	str.w	r2, [r1, #4]!
 800a854:	459c      	cmp	ip, r3
 800a856:	d8f9      	bhi.n	800a84c <__lshift+0xc0>
 800a858:	e7ea      	b.n	800a830 <__lshift+0xa4>
 800a85a:	bf00      	nop
 800a85c:	0800ba4a 	.word	0x0800ba4a
 800a860:	0800babb 	.word	0x0800babb

0800a864 <__mcmp>:
 800a864:	690a      	ldr	r2, [r1, #16]
 800a866:	4603      	mov	r3, r0
 800a868:	6900      	ldr	r0, [r0, #16]
 800a86a:	1a80      	subs	r0, r0, r2
 800a86c:	b530      	push	{r4, r5, lr}
 800a86e:	d10e      	bne.n	800a88e <__mcmp+0x2a>
 800a870:	3314      	adds	r3, #20
 800a872:	3114      	adds	r1, #20
 800a874:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a878:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a87c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a880:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a884:	4295      	cmp	r5, r2
 800a886:	d003      	beq.n	800a890 <__mcmp+0x2c>
 800a888:	d205      	bcs.n	800a896 <__mcmp+0x32>
 800a88a:	f04f 30ff 	mov.w	r0, #4294967295
 800a88e:	bd30      	pop	{r4, r5, pc}
 800a890:	42a3      	cmp	r3, r4
 800a892:	d3f3      	bcc.n	800a87c <__mcmp+0x18>
 800a894:	e7fb      	b.n	800a88e <__mcmp+0x2a>
 800a896:	2001      	movs	r0, #1
 800a898:	e7f9      	b.n	800a88e <__mcmp+0x2a>
	...

0800a89c <__mdiff>:
 800a89c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a0:	4689      	mov	r9, r1
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	4611      	mov	r1, r2
 800a8a6:	4648      	mov	r0, r9
 800a8a8:	4614      	mov	r4, r2
 800a8aa:	f7ff ffdb 	bl	800a864 <__mcmp>
 800a8ae:	1e05      	subs	r5, r0, #0
 800a8b0:	d112      	bne.n	800a8d8 <__mdiff+0x3c>
 800a8b2:	4629      	mov	r1, r5
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	f7ff fd11 	bl	800a2dc <_Balloc>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	b928      	cbnz	r0, 800a8ca <__mdiff+0x2e>
 800a8be:	4b3f      	ldr	r3, [pc, #252]	@ (800a9bc <__mdiff+0x120>)
 800a8c0:	f240 2137 	movw	r1, #567	@ 0x237
 800a8c4:	483e      	ldr	r0, [pc, #248]	@ (800a9c0 <__mdiff+0x124>)
 800a8c6:	f7fe fb09 	bl	8008edc <__assert_func>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a8d0:	4610      	mov	r0, r2
 800a8d2:	b003      	add	sp, #12
 800a8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d8:	bfbc      	itt	lt
 800a8da:	464b      	movlt	r3, r9
 800a8dc:	46a1      	movlt	r9, r4
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a8e4:	bfba      	itte	lt
 800a8e6:	461c      	movlt	r4, r3
 800a8e8:	2501      	movlt	r5, #1
 800a8ea:	2500      	movge	r5, #0
 800a8ec:	f7ff fcf6 	bl	800a2dc <_Balloc>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	b918      	cbnz	r0, 800a8fc <__mdiff+0x60>
 800a8f4:	4b31      	ldr	r3, [pc, #196]	@ (800a9bc <__mdiff+0x120>)
 800a8f6:	f240 2145 	movw	r1, #581	@ 0x245
 800a8fa:	e7e3      	b.n	800a8c4 <__mdiff+0x28>
 800a8fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a900:	6926      	ldr	r6, [r4, #16]
 800a902:	60c5      	str	r5, [r0, #12]
 800a904:	f109 0310 	add.w	r3, r9, #16
 800a908:	f109 0514 	add.w	r5, r9, #20
 800a90c:	f104 0e14 	add.w	lr, r4, #20
 800a910:	f100 0b14 	add.w	fp, r0, #20
 800a914:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a918:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a91c:	9301      	str	r3, [sp, #4]
 800a91e:	46d9      	mov	r9, fp
 800a920:	f04f 0c00 	mov.w	ip, #0
 800a924:	9b01      	ldr	r3, [sp, #4]
 800a926:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a92a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a92e:	9301      	str	r3, [sp, #4]
 800a930:	fa1f f38a 	uxth.w	r3, sl
 800a934:	4619      	mov	r1, r3
 800a936:	b283      	uxth	r3, r0
 800a938:	1acb      	subs	r3, r1, r3
 800a93a:	0c00      	lsrs	r0, r0, #16
 800a93c:	4463      	add	r3, ip
 800a93e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a942:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a946:	b29b      	uxth	r3, r3
 800a948:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a94c:	4576      	cmp	r6, lr
 800a94e:	f849 3b04 	str.w	r3, [r9], #4
 800a952:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a956:	d8e5      	bhi.n	800a924 <__mdiff+0x88>
 800a958:	1b33      	subs	r3, r6, r4
 800a95a:	3b15      	subs	r3, #21
 800a95c:	f023 0303 	bic.w	r3, r3, #3
 800a960:	3415      	adds	r4, #21
 800a962:	3304      	adds	r3, #4
 800a964:	42a6      	cmp	r6, r4
 800a966:	bf38      	it	cc
 800a968:	2304      	movcc	r3, #4
 800a96a:	441d      	add	r5, r3
 800a96c:	445b      	add	r3, fp
 800a96e:	461e      	mov	r6, r3
 800a970:	462c      	mov	r4, r5
 800a972:	4544      	cmp	r4, r8
 800a974:	d30e      	bcc.n	800a994 <__mdiff+0xf8>
 800a976:	f108 0103 	add.w	r1, r8, #3
 800a97a:	1b49      	subs	r1, r1, r5
 800a97c:	f021 0103 	bic.w	r1, r1, #3
 800a980:	3d03      	subs	r5, #3
 800a982:	45a8      	cmp	r8, r5
 800a984:	bf38      	it	cc
 800a986:	2100      	movcc	r1, #0
 800a988:	440b      	add	r3, r1
 800a98a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a98e:	b191      	cbz	r1, 800a9b6 <__mdiff+0x11a>
 800a990:	6117      	str	r7, [r2, #16]
 800a992:	e79d      	b.n	800a8d0 <__mdiff+0x34>
 800a994:	f854 1b04 	ldr.w	r1, [r4], #4
 800a998:	46e6      	mov	lr, ip
 800a99a:	0c08      	lsrs	r0, r1, #16
 800a99c:	fa1c fc81 	uxtah	ip, ip, r1
 800a9a0:	4471      	add	r1, lr
 800a9a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a9a6:	b289      	uxth	r1, r1
 800a9a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a9ac:	f846 1b04 	str.w	r1, [r6], #4
 800a9b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9b4:	e7dd      	b.n	800a972 <__mdiff+0xd6>
 800a9b6:	3f01      	subs	r7, #1
 800a9b8:	e7e7      	b.n	800a98a <__mdiff+0xee>
 800a9ba:	bf00      	nop
 800a9bc:	0800ba4a 	.word	0x0800ba4a
 800a9c0:	0800babb 	.word	0x0800babb

0800a9c4 <__ulp>:
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	ed8d 0b00 	vstr	d0, [sp]
 800a9ca:	9a01      	ldr	r2, [sp, #4]
 800a9cc:	4b0f      	ldr	r3, [pc, #60]	@ (800aa0c <__ulp+0x48>)
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	dc08      	bgt.n	800a9ea <__ulp+0x26>
 800a9d8:	425b      	negs	r3, r3
 800a9da:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a9de:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a9e2:	da04      	bge.n	800a9ee <__ulp+0x2a>
 800a9e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a9e8:	4113      	asrs	r3, r2
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	e008      	b.n	800aa00 <__ulp+0x3c>
 800a9ee:	f1a2 0314 	sub.w	r3, r2, #20
 800a9f2:	2b1e      	cmp	r3, #30
 800a9f4:	bfda      	itte	le
 800a9f6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a9fa:	40da      	lsrle	r2, r3
 800a9fc:	2201      	movgt	r2, #1
 800a9fe:	2300      	movs	r3, #0
 800aa00:	4619      	mov	r1, r3
 800aa02:	4610      	mov	r0, r2
 800aa04:	ec41 0b10 	vmov	d0, r0, r1
 800aa08:	b002      	add	sp, #8
 800aa0a:	4770      	bx	lr
 800aa0c:	7ff00000 	.word	0x7ff00000

0800aa10 <__b2d>:
 800aa10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa14:	6906      	ldr	r6, [r0, #16]
 800aa16:	f100 0814 	add.w	r8, r0, #20
 800aa1a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aa1e:	1f37      	subs	r7, r6, #4
 800aa20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa24:	4610      	mov	r0, r2
 800aa26:	f7ff fd4b 	bl	800a4c0 <__hi0bits>
 800aa2a:	f1c0 0320 	rsb	r3, r0, #32
 800aa2e:	280a      	cmp	r0, #10
 800aa30:	600b      	str	r3, [r1, #0]
 800aa32:	491b      	ldr	r1, [pc, #108]	@ (800aaa0 <__b2d+0x90>)
 800aa34:	dc15      	bgt.n	800aa62 <__b2d+0x52>
 800aa36:	f1c0 0c0b 	rsb	ip, r0, #11
 800aa3a:	fa22 f30c 	lsr.w	r3, r2, ip
 800aa3e:	45b8      	cmp	r8, r7
 800aa40:	ea43 0501 	orr.w	r5, r3, r1
 800aa44:	bf34      	ite	cc
 800aa46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa4a:	2300      	movcs	r3, #0
 800aa4c:	3015      	adds	r0, #21
 800aa4e:	fa02 f000 	lsl.w	r0, r2, r0
 800aa52:	fa23 f30c 	lsr.w	r3, r3, ip
 800aa56:	4303      	orrs	r3, r0
 800aa58:	461c      	mov	r4, r3
 800aa5a:	ec45 4b10 	vmov	d0, r4, r5
 800aa5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa62:	45b8      	cmp	r8, r7
 800aa64:	bf3a      	itte	cc
 800aa66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa6a:	f1a6 0708 	subcc.w	r7, r6, #8
 800aa6e:	2300      	movcs	r3, #0
 800aa70:	380b      	subs	r0, #11
 800aa72:	d012      	beq.n	800aa9a <__b2d+0x8a>
 800aa74:	f1c0 0120 	rsb	r1, r0, #32
 800aa78:	fa23 f401 	lsr.w	r4, r3, r1
 800aa7c:	4082      	lsls	r2, r0
 800aa7e:	4322      	orrs	r2, r4
 800aa80:	4547      	cmp	r7, r8
 800aa82:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800aa86:	bf8c      	ite	hi
 800aa88:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aa8c:	2200      	movls	r2, #0
 800aa8e:	4083      	lsls	r3, r0
 800aa90:	40ca      	lsrs	r2, r1
 800aa92:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800aa96:	4313      	orrs	r3, r2
 800aa98:	e7de      	b.n	800aa58 <__b2d+0x48>
 800aa9a:	ea42 0501 	orr.w	r5, r2, r1
 800aa9e:	e7db      	b.n	800aa58 <__b2d+0x48>
 800aaa0:	3ff00000 	.word	0x3ff00000

0800aaa4 <__d2b>:
 800aaa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aaa8:	460f      	mov	r7, r1
 800aaaa:	2101      	movs	r1, #1
 800aaac:	ec59 8b10 	vmov	r8, r9, d0
 800aab0:	4616      	mov	r6, r2
 800aab2:	f7ff fc13 	bl	800a2dc <_Balloc>
 800aab6:	4604      	mov	r4, r0
 800aab8:	b930      	cbnz	r0, 800aac8 <__d2b+0x24>
 800aaba:	4602      	mov	r2, r0
 800aabc:	4b23      	ldr	r3, [pc, #140]	@ (800ab4c <__d2b+0xa8>)
 800aabe:	4824      	ldr	r0, [pc, #144]	@ (800ab50 <__d2b+0xac>)
 800aac0:	f240 310f 	movw	r1, #783	@ 0x30f
 800aac4:	f7fe fa0a 	bl	8008edc <__assert_func>
 800aac8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aacc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aad0:	b10d      	cbz	r5, 800aad6 <__d2b+0x32>
 800aad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aad6:	9301      	str	r3, [sp, #4]
 800aad8:	f1b8 0300 	subs.w	r3, r8, #0
 800aadc:	d023      	beq.n	800ab26 <__d2b+0x82>
 800aade:	4668      	mov	r0, sp
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	f7ff fd0c 	bl	800a4fe <__lo0bits>
 800aae6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aaea:	b1d0      	cbz	r0, 800ab22 <__d2b+0x7e>
 800aaec:	f1c0 0320 	rsb	r3, r0, #32
 800aaf0:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf4:	430b      	orrs	r3, r1
 800aaf6:	40c2      	lsrs	r2, r0
 800aaf8:	6163      	str	r3, [r4, #20]
 800aafa:	9201      	str	r2, [sp, #4]
 800aafc:	9b01      	ldr	r3, [sp, #4]
 800aafe:	61a3      	str	r3, [r4, #24]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	bf0c      	ite	eq
 800ab04:	2201      	moveq	r2, #1
 800ab06:	2202      	movne	r2, #2
 800ab08:	6122      	str	r2, [r4, #16]
 800ab0a:	b1a5      	cbz	r5, 800ab36 <__d2b+0x92>
 800ab0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ab10:	4405      	add	r5, r0
 800ab12:	603d      	str	r5, [r7, #0]
 800ab14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ab18:	6030      	str	r0, [r6, #0]
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	b003      	add	sp, #12
 800ab1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab22:	6161      	str	r1, [r4, #20]
 800ab24:	e7ea      	b.n	800aafc <__d2b+0x58>
 800ab26:	a801      	add	r0, sp, #4
 800ab28:	f7ff fce9 	bl	800a4fe <__lo0bits>
 800ab2c:	9b01      	ldr	r3, [sp, #4]
 800ab2e:	6163      	str	r3, [r4, #20]
 800ab30:	3020      	adds	r0, #32
 800ab32:	2201      	movs	r2, #1
 800ab34:	e7e8      	b.n	800ab08 <__d2b+0x64>
 800ab36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ab3e:	6038      	str	r0, [r7, #0]
 800ab40:	6918      	ldr	r0, [r3, #16]
 800ab42:	f7ff fcbd 	bl	800a4c0 <__hi0bits>
 800ab46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab4a:	e7e5      	b.n	800ab18 <__d2b+0x74>
 800ab4c:	0800ba4a 	.word	0x0800ba4a
 800ab50:	0800babb 	.word	0x0800babb

0800ab54 <__ratio>:
 800ab54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab58:	b085      	sub	sp, #20
 800ab5a:	e9cd 1000 	strd	r1, r0, [sp]
 800ab5e:	a902      	add	r1, sp, #8
 800ab60:	f7ff ff56 	bl	800aa10 <__b2d>
 800ab64:	9800      	ldr	r0, [sp, #0]
 800ab66:	a903      	add	r1, sp, #12
 800ab68:	ec55 4b10 	vmov	r4, r5, d0
 800ab6c:	f7ff ff50 	bl	800aa10 <__b2d>
 800ab70:	9b01      	ldr	r3, [sp, #4]
 800ab72:	6919      	ldr	r1, [r3, #16]
 800ab74:	9b00      	ldr	r3, [sp, #0]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	1ac9      	subs	r1, r1, r3
 800ab7a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ab7e:	1a9b      	subs	r3, r3, r2
 800ab80:	ec5b ab10 	vmov	sl, fp, d0
 800ab84:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	bfce      	itee	gt
 800ab8c:	462a      	movgt	r2, r5
 800ab8e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab92:	465a      	movle	r2, fp
 800ab94:	462f      	mov	r7, r5
 800ab96:	46d9      	mov	r9, fp
 800ab98:	bfcc      	ite	gt
 800ab9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab9e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aba2:	464b      	mov	r3, r9
 800aba4:	4652      	mov	r2, sl
 800aba6:	4620      	mov	r0, r4
 800aba8:	4639      	mov	r1, r7
 800abaa:	f7f5 fe4f 	bl	800084c <__aeabi_ddiv>
 800abae:	ec41 0b10 	vmov	d0, r0, r1
 800abb2:	b005      	add	sp, #20
 800abb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abb8 <__copybits>:
 800abb8:	3901      	subs	r1, #1
 800abba:	b570      	push	{r4, r5, r6, lr}
 800abbc:	1149      	asrs	r1, r1, #5
 800abbe:	6914      	ldr	r4, [r2, #16]
 800abc0:	3101      	adds	r1, #1
 800abc2:	f102 0314 	add.w	r3, r2, #20
 800abc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800abca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800abce:	1f05      	subs	r5, r0, #4
 800abd0:	42a3      	cmp	r3, r4
 800abd2:	d30c      	bcc.n	800abee <__copybits+0x36>
 800abd4:	1aa3      	subs	r3, r4, r2
 800abd6:	3b11      	subs	r3, #17
 800abd8:	f023 0303 	bic.w	r3, r3, #3
 800abdc:	3211      	adds	r2, #17
 800abde:	42a2      	cmp	r2, r4
 800abe0:	bf88      	it	hi
 800abe2:	2300      	movhi	r3, #0
 800abe4:	4418      	add	r0, r3
 800abe6:	2300      	movs	r3, #0
 800abe8:	4288      	cmp	r0, r1
 800abea:	d305      	bcc.n	800abf8 <__copybits+0x40>
 800abec:	bd70      	pop	{r4, r5, r6, pc}
 800abee:	f853 6b04 	ldr.w	r6, [r3], #4
 800abf2:	f845 6f04 	str.w	r6, [r5, #4]!
 800abf6:	e7eb      	b.n	800abd0 <__copybits+0x18>
 800abf8:	f840 3b04 	str.w	r3, [r0], #4
 800abfc:	e7f4      	b.n	800abe8 <__copybits+0x30>

0800abfe <__any_on>:
 800abfe:	f100 0214 	add.w	r2, r0, #20
 800ac02:	6900      	ldr	r0, [r0, #16]
 800ac04:	114b      	asrs	r3, r1, #5
 800ac06:	4298      	cmp	r0, r3
 800ac08:	b510      	push	{r4, lr}
 800ac0a:	db11      	blt.n	800ac30 <__any_on+0x32>
 800ac0c:	dd0a      	ble.n	800ac24 <__any_on+0x26>
 800ac0e:	f011 011f 	ands.w	r1, r1, #31
 800ac12:	d007      	beq.n	800ac24 <__any_on+0x26>
 800ac14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac18:	fa24 f001 	lsr.w	r0, r4, r1
 800ac1c:	fa00 f101 	lsl.w	r1, r0, r1
 800ac20:	428c      	cmp	r4, r1
 800ac22:	d10b      	bne.n	800ac3c <__any_on+0x3e>
 800ac24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d803      	bhi.n	800ac34 <__any_on+0x36>
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	bd10      	pop	{r4, pc}
 800ac30:	4603      	mov	r3, r0
 800ac32:	e7f7      	b.n	800ac24 <__any_on+0x26>
 800ac34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac38:	2900      	cmp	r1, #0
 800ac3a:	d0f5      	beq.n	800ac28 <__any_on+0x2a>
 800ac3c:	2001      	movs	r0, #1
 800ac3e:	e7f6      	b.n	800ac2e <__any_on+0x30>

0800ac40 <__ascii_wctomb>:
 800ac40:	4603      	mov	r3, r0
 800ac42:	4608      	mov	r0, r1
 800ac44:	b141      	cbz	r1, 800ac58 <__ascii_wctomb+0x18>
 800ac46:	2aff      	cmp	r2, #255	@ 0xff
 800ac48:	d904      	bls.n	800ac54 <__ascii_wctomb+0x14>
 800ac4a:	228a      	movs	r2, #138	@ 0x8a
 800ac4c:	601a      	str	r2, [r3, #0]
 800ac4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac52:	4770      	bx	lr
 800ac54:	700a      	strb	r2, [r1, #0]
 800ac56:	2001      	movs	r0, #1
 800ac58:	4770      	bx	lr

0800ac5a <__ssputs_r>:
 800ac5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac5e:	688e      	ldr	r6, [r1, #8]
 800ac60:	461f      	mov	r7, r3
 800ac62:	42be      	cmp	r6, r7
 800ac64:	680b      	ldr	r3, [r1, #0]
 800ac66:	4682      	mov	sl, r0
 800ac68:	460c      	mov	r4, r1
 800ac6a:	4690      	mov	r8, r2
 800ac6c:	d82d      	bhi.n	800acca <__ssputs_r+0x70>
 800ac6e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac72:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ac76:	d026      	beq.n	800acc6 <__ssputs_r+0x6c>
 800ac78:	6965      	ldr	r5, [r4, #20]
 800ac7a:	6909      	ldr	r1, [r1, #16]
 800ac7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac80:	eba3 0901 	sub.w	r9, r3, r1
 800ac84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac88:	1c7b      	adds	r3, r7, #1
 800ac8a:	444b      	add	r3, r9
 800ac8c:	106d      	asrs	r5, r5, #1
 800ac8e:	429d      	cmp	r5, r3
 800ac90:	bf38      	it	cc
 800ac92:	461d      	movcc	r5, r3
 800ac94:	0553      	lsls	r3, r2, #21
 800ac96:	d527      	bpl.n	800ace8 <__ssputs_r+0x8e>
 800ac98:	4629      	mov	r1, r5
 800ac9a:	f7fc f989 	bl	8006fb0 <_malloc_r>
 800ac9e:	4606      	mov	r6, r0
 800aca0:	b360      	cbz	r0, 800acfc <__ssputs_r+0xa2>
 800aca2:	6921      	ldr	r1, [r4, #16]
 800aca4:	464a      	mov	r2, r9
 800aca6:	f7fe f8fc 	bl	8008ea2 <memcpy>
 800acaa:	89a3      	ldrh	r3, [r4, #12]
 800acac:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800acb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acb4:	81a3      	strh	r3, [r4, #12]
 800acb6:	6126      	str	r6, [r4, #16]
 800acb8:	6165      	str	r5, [r4, #20]
 800acba:	444e      	add	r6, r9
 800acbc:	eba5 0509 	sub.w	r5, r5, r9
 800acc0:	6026      	str	r6, [r4, #0]
 800acc2:	60a5      	str	r5, [r4, #8]
 800acc4:	463e      	mov	r6, r7
 800acc6:	42be      	cmp	r6, r7
 800acc8:	d900      	bls.n	800accc <__ssputs_r+0x72>
 800acca:	463e      	mov	r6, r7
 800accc:	6820      	ldr	r0, [r4, #0]
 800acce:	4632      	mov	r2, r6
 800acd0:	4641      	mov	r1, r8
 800acd2:	f000 f9d7 	bl	800b084 <memmove>
 800acd6:	68a3      	ldr	r3, [r4, #8]
 800acd8:	1b9b      	subs	r3, r3, r6
 800acda:	60a3      	str	r3, [r4, #8]
 800acdc:	6823      	ldr	r3, [r4, #0]
 800acde:	4433      	add	r3, r6
 800ace0:	6023      	str	r3, [r4, #0]
 800ace2:	2000      	movs	r0, #0
 800ace4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace8:	462a      	mov	r2, r5
 800acea:	f000 fa00 	bl	800b0ee <_realloc_r>
 800acee:	4606      	mov	r6, r0
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d1e0      	bne.n	800acb6 <__ssputs_r+0x5c>
 800acf4:	6921      	ldr	r1, [r4, #16]
 800acf6:	4650      	mov	r0, sl
 800acf8:	f7fe ff5a 	bl	8009bb0 <_free_r>
 800acfc:	230c      	movs	r3, #12
 800acfe:	f8ca 3000 	str.w	r3, [sl]
 800ad02:	89a3      	ldrh	r3, [r4, #12]
 800ad04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad08:	81a3      	strh	r3, [r4, #12]
 800ad0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad0e:	e7e9      	b.n	800ace4 <__ssputs_r+0x8a>

0800ad10 <_svfiprintf_r>:
 800ad10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad14:	4698      	mov	r8, r3
 800ad16:	898b      	ldrh	r3, [r1, #12]
 800ad18:	061b      	lsls	r3, r3, #24
 800ad1a:	b09d      	sub	sp, #116	@ 0x74
 800ad1c:	4607      	mov	r7, r0
 800ad1e:	460d      	mov	r5, r1
 800ad20:	4614      	mov	r4, r2
 800ad22:	d510      	bpl.n	800ad46 <_svfiprintf_r+0x36>
 800ad24:	690b      	ldr	r3, [r1, #16]
 800ad26:	b973      	cbnz	r3, 800ad46 <_svfiprintf_r+0x36>
 800ad28:	2140      	movs	r1, #64	@ 0x40
 800ad2a:	f7fc f941 	bl	8006fb0 <_malloc_r>
 800ad2e:	6028      	str	r0, [r5, #0]
 800ad30:	6128      	str	r0, [r5, #16]
 800ad32:	b930      	cbnz	r0, 800ad42 <_svfiprintf_r+0x32>
 800ad34:	230c      	movs	r3, #12
 800ad36:	603b      	str	r3, [r7, #0]
 800ad38:	f04f 30ff 	mov.w	r0, #4294967295
 800ad3c:	b01d      	add	sp, #116	@ 0x74
 800ad3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad42:	2340      	movs	r3, #64	@ 0x40
 800ad44:	616b      	str	r3, [r5, #20]
 800ad46:	2300      	movs	r3, #0
 800ad48:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad4a:	2320      	movs	r3, #32
 800ad4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad50:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad54:	2330      	movs	r3, #48	@ 0x30
 800ad56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aef4 <_svfiprintf_r+0x1e4>
 800ad5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad5e:	f04f 0901 	mov.w	r9, #1
 800ad62:	4623      	mov	r3, r4
 800ad64:	469a      	mov	sl, r3
 800ad66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad6a:	b10a      	cbz	r2, 800ad70 <_svfiprintf_r+0x60>
 800ad6c:	2a25      	cmp	r2, #37	@ 0x25
 800ad6e:	d1f9      	bne.n	800ad64 <_svfiprintf_r+0x54>
 800ad70:	ebba 0b04 	subs.w	fp, sl, r4
 800ad74:	d00b      	beq.n	800ad8e <_svfiprintf_r+0x7e>
 800ad76:	465b      	mov	r3, fp
 800ad78:	4622      	mov	r2, r4
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	4638      	mov	r0, r7
 800ad7e:	f7ff ff6c 	bl	800ac5a <__ssputs_r>
 800ad82:	3001      	adds	r0, #1
 800ad84:	f000 80a7 	beq.w	800aed6 <_svfiprintf_r+0x1c6>
 800ad88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad8a:	445a      	add	r2, fp
 800ad8c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad8e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f000 809f 	beq.w	800aed6 <_svfiprintf_r+0x1c6>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ada2:	f10a 0a01 	add.w	sl, sl, #1
 800ada6:	9304      	str	r3, [sp, #16]
 800ada8:	9307      	str	r3, [sp, #28]
 800adaa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800adae:	931a      	str	r3, [sp, #104]	@ 0x68
 800adb0:	4654      	mov	r4, sl
 800adb2:	2205      	movs	r2, #5
 800adb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adb8:	484e      	ldr	r0, [pc, #312]	@ (800aef4 <_svfiprintf_r+0x1e4>)
 800adba:	f7f5 fa09 	bl	80001d0 <memchr>
 800adbe:	9a04      	ldr	r2, [sp, #16]
 800adc0:	b9d8      	cbnz	r0, 800adfa <_svfiprintf_r+0xea>
 800adc2:	06d0      	lsls	r0, r2, #27
 800adc4:	bf44      	itt	mi
 800adc6:	2320      	movmi	r3, #32
 800adc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adcc:	0711      	lsls	r1, r2, #28
 800adce:	bf44      	itt	mi
 800add0:	232b      	movmi	r3, #43	@ 0x2b
 800add2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800add6:	f89a 3000 	ldrb.w	r3, [sl]
 800adda:	2b2a      	cmp	r3, #42	@ 0x2a
 800addc:	d015      	beq.n	800ae0a <_svfiprintf_r+0xfa>
 800adde:	9a07      	ldr	r2, [sp, #28]
 800ade0:	4654      	mov	r4, sl
 800ade2:	2000      	movs	r0, #0
 800ade4:	f04f 0c0a 	mov.w	ip, #10
 800ade8:	4621      	mov	r1, r4
 800adea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adee:	3b30      	subs	r3, #48	@ 0x30
 800adf0:	2b09      	cmp	r3, #9
 800adf2:	d94b      	bls.n	800ae8c <_svfiprintf_r+0x17c>
 800adf4:	b1b0      	cbz	r0, 800ae24 <_svfiprintf_r+0x114>
 800adf6:	9207      	str	r2, [sp, #28]
 800adf8:	e014      	b.n	800ae24 <_svfiprintf_r+0x114>
 800adfa:	eba0 0308 	sub.w	r3, r0, r8
 800adfe:	fa09 f303 	lsl.w	r3, r9, r3
 800ae02:	4313      	orrs	r3, r2
 800ae04:	9304      	str	r3, [sp, #16]
 800ae06:	46a2      	mov	sl, r4
 800ae08:	e7d2      	b.n	800adb0 <_svfiprintf_r+0xa0>
 800ae0a:	9b03      	ldr	r3, [sp, #12]
 800ae0c:	1d19      	adds	r1, r3, #4
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	9103      	str	r1, [sp, #12]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	bfbb      	ittet	lt
 800ae16:	425b      	neglt	r3, r3
 800ae18:	f042 0202 	orrlt.w	r2, r2, #2
 800ae1c:	9307      	strge	r3, [sp, #28]
 800ae1e:	9307      	strlt	r3, [sp, #28]
 800ae20:	bfb8      	it	lt
 800ae22:	9204      	strlt	r2, [sp, #16]
 800ae24:	7823      	ldrb	r3, [r4, #0]
 800ae26:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae28:	d10a      	bne.n	800ae40 <_svfiprintf_r+0x130>
 800ae2a:	7863      	ldrb	r3, [r4, #1]
 800ae2c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae2e:	d132      	bne.n	800ae96 <_svfiprintf_r+0x186>
 800ae30:	9b03      	ldr	r3, [sp, #12]
 800ae32:	1d1a      	adds	r2, r3, #4
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	9203      	str	r2, [sp, #12]
 800ae38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae3c:	3402      	adds	r4, #2
 800ae3e:	9305      	str	r3, [sp, #20]
 800ae40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800af04 <_svfiprintf_r+0x1f4>
 800ae44:	7821      	ldrb	r1, [r4, #0]
 800ae46:	2203      	movs	r2, #3
 800ae48:	4650      	mov	r0, sl
 800ae4a:	f7f5 f9c1 	bl	80001d0 <memchr>
 800ae4e:	b138      	cbz	r0, 800ae60 <_svfiprintf_r+0x150>
 800ae50:	9b04      	ldr	r3, [sp, #16]
 800ae52:	eba0 000a 	sub.w	r0, r0, sl
 800ae56:	2240      	movs	r2, #64	@ 0x40
 800ae58:	4082      	lsls	r2, r0
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	3401      	adds	r4, #1
 800ae5e:	9304      	str	r3, [sp, #16]
 800ae60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae64:	4824      	ldr	r0, [pc, #144]	@ (800aef8 <_svfiprintf_r+0x1e8>)
 800ae66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae6a:	2206      	movs	r2, #6
 800ae6c:	f7f5 f9b0 	bl	80001d0 <memchr>
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d036      	beq.n	800aee2 <_svfiprintf_r+0x1d2>
 800ae74:	4b21      	ldr	r3, [pc, #132]	@ (800aefc <_svfiprintf_r+0x1ec>)
 800ae76:	bb1b      	cbnz	r3, 800aec0 <_svfiprintf_r+0x1b0>
 800ae78:	9b03      	ldr	r3, [sp, #12]
 800ae7a:	3307      	adds	r3, #7
 800ae7c:	f023 0307 	bic.w	r3, r3, #7
 800ae80:	3308      	adds	r3, #8
 800ae82:	9303      	str	r3, [sp, #12]
 800ae84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae86:	4433      	add	r3, r6
 800ae88:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae8a:	e76a      	b.n	800ad62 <_svfiprintf_r+0x52>
 800ae8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae90:	460c      	mov	r4, r1
 800ae92:	2001      	movs	r0, #1
 800ae94:	e7a8      	b.n	800ade8 <_svfiprintf_r+0xd8>
 800ae96:	2300      	movs	r3, #0
 800ae98:	3401      	adds	r4, #1
 800ae9a:	9305      	str	r3, [sp, #20]
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	f04f 0c0a 	mov.w	ip, #10
 800aea2:	4620      	mov	r0, r4
 800aea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aea8:	3a30      	subs	r2, #48	@ 0x30
 800aeaa:	2a09      	cmp	r2, #9
 800aeac:	d903      	bls.n	800aeb6 <_svfiprintf_r+0x1a6>
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d0c6      	beq.n	800ae40 <_svfiprintf_r+0x130>
 800aeb2:	9105      	str	r1, [sp, #20]
 800aeb4:	e7c4      	b.n	800ae40 <_svfiprintf_r+0x130>
 800aeb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeba:	4604      	mov	r4, r0
 800aebc:	2301      	movs	r3, #1
 800aebe:	e7f0      	b.n	800aea2 <_svfiprintf_r+0x192>
 800aec0:	ab03      	add	r3, sp, #12
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	462a      	mov	r2, r5
 800aec6:	4b0e      	ldr	r3, [pc, #56]	@ (800af00 <_svfiprintf_r+0x1f0>)
 800aec8:	a904      	add	r1, sp, #16
 800aeca:	4638      	mov	r0, r7
 800aecc:	f7fd f822 	bl	8007f14 <_printf_float>
 800aed0:	1c42      	adds	r2, r0, #1
 800aed2:	4606      	mov	r6, r0
 800aed4:	d1d6      	bne.n	800ae84 <_svfiprintf_r+0x174>
 800aed6:	89ab      	ldrh	r3, [r5, #12]
 800aed8:	065b      	lsls	r3, r3, #25
 800aeda:	f53f af2d 	bmi.w	800ad38 <_svfiprintf_r+0x28>
 800aede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aee0:	e72c      	b.n	800ad3c <_svfiprintf_r+0x2c>
 800aee2:	ab03      	add	r3, sp, #12
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	462a      	mov	r2, r5
 800aee8:	4b05      	ldr	r3, [pc, #20]	@ (800af00 <_svfiprintf_r+0x1f0>)
 800aeea:	a904      	add	r1, sp, #16
 800aeec:	4638      	mov	r0, r7
 800aeee:	f7fd faa9 	bl	8008444 <_printf_i>
 800aef2:	e7ed      	b.n	800aed0 <_svfiprintf_r+0x1c0>
 800aef4:	0800bc10 	.word	0x0800bc10
 800aef8:	0800bc1a 	.word	0x0800bc1a
 800aefc:	08007f15 	.word	0x08007f15
 800af00:	0800ac5b 	.word	0x0800ac5b
 800af04:	0800bc16 	.word	0x0800bc16

0800af08 <__sflush_r>:
 800af08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af10:	0716      	lsls	r6, r2, #28
 800af12:	4605      	mov	r5, r0
 800af14:	460c      	mov	r4, r1
 800af16:	d454      	bmi.n	800afc2 <__sflush_r+0xba>
 800af18:	684b      	ldr	r3, [r1, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	dc02      	bgt.n	800af24 <__sflush_r+0x1c>
 800af1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af20:	2b00      	cmp	r3, #0
 800af22:	dd48      	ble.n	800afb6 <__sflush_r+0xae>
 800af24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af26:	2e00      	cmp	r6, #0
 800af28:	d045      	beq.n	800afb6 <__sflush_r+0xae>
 800af2a:	2300      	movs	r3, #0
 800af2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af30:	682f      	ldr	r7, [r5, #0]
 800af32:	6a21      	ldr	r1, [r4, #32]
 800af34:	602b      	str	r3, [r5, #0]
 800af36:	d030      	beq.n	800af9a <__sflush_r+0x92>
 800af38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af3a:	89a3      	ldrh	r3, [r4, #12]
 800af3c:	0759      	lsls	r1, r3, #29
 800af3e:	d505      	bpl.n	800af4c <__sflush_r+0x44>
 800af40:	6863      	ldr	r3, [r4, #4]
 800af42:	1ad2      	subs	r2, r2, r3
 800af44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af46:	b10b      	cbz	r3, 800af4c <__sflush_r+0x44>
 800af48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af4a:	1ad2      	subs	r2, r2, r3
 800af4c:	2300      	movs	r3, #0
 800af4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af50:	6a21      	ldr	r1, [r4, #32]
 800af52:	4628      	mov	r0, r5
 800af54:	47b0      	blx	r6
 800af56:	1c43      	adds	r3, r0, #1
 800af58:	89a3      	ldrh	r3, [r4, #12]
 800af5a:	d106      	bne.n	800af6a <__sflush_r+0x62>
 800af5c:	6829      	ldr	r1, [r5, #0]
 800af5e:	291d      	cmp	r1, #29
 800af60:	d82b      	bhi.n	800afba <__sflush_r+0xb2>
 800af62:	4a2a      	ldr	r2, [pc, #168]	@ (800b00c <__sflush_r+0x104>)
 800af64:	410a      	asrs	r2, r1
 800af66:	07d6      	lsls	r6, r2, #31
 800af68:	d427      	bmi.n	800afba <__sflush_r+0xb2>
 800af6a:	2200      	movs	r2, #0
 800af6c:	6062      	str	r2, [r4, #4]
 800af6e:	04d9      	lsls	r1, r3, #19
 800af70:	6922      	ldr	r2, [r4, #16]
 800af72:	6022      	str	r2, [r4, #0]
 800af74:	d504      	bpl.n	800af80 <__sflush_r+0x78>
 800af76:	1c42      	adds	r2, r0, #1
 800af78:	d101      	bne.n	800af7e <__sflush_r+0x76>
 800af7a:	682b      	ldr	r3, [r5, #0]
 800af7c:	b903      	cbnz	r3, 800af80 <__sflush_r+0x78>
 800af7e:	6560      	str	r0, [r4, #84]	@ 0x54
 800af80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af82:	602f      	str	r7, [r5, #0]
 800af84:	b1b9      	cbz	r1, 800afb6 <__sflush_r+0xae>
 800af86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af8a:	4299      	cmp	r1, r3
 800af8c:	d002      	beq.n	800af94 <__sflush_r+0x8c>
 800af8e:	4628      	mov	r0, r5
 800af90:	f7fe fe0e 	bl	8009bb0 <_free_r>
 800af94:	2300      	movs	r3, #0
 800af96:	6363      	str	r3, [r4, #52]	@ 0x34
 800af98:	e00d      	b.n	800afb6 <__sflush_r+0xae>
 800af9a:	2301      	movs	r3, #1
 800af9c:	4628      	mov	r0, r5
 800af9e:	47b0      	blx	r6
 800afa0:	4602      	mov	r2, r0
 800afa2:	1c50      	adds	r0, r2, #1
 800afa4:	d1c9      	bne.n	800af3a <__sflush_r+0x32>
 800afa6:	682b      	ldr	r3, [r5, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d0c6      	beq.n	800af3a <__sflush_r+0x32>
 800afac:	2b1d      	cmp	r3, #29
 800afae:	d001      	beq.n	800afb4 <__sflush_r+0xac>
 800afb0:	2b16      	cmp	r3, #22
 800afb2:	d11e      	bne.n	800aff2 <__sflush_r+0xea>
 800afb4:	602f      	str	r7, [r5, #0]
 800afb6:	2000      	movs	r0, #0
 800afb8:	e022      	b.n	800b000 <__sflush_r+0xf8>
 800afba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afbe:	b21b      	sxth	r3, r3
 800afc0:	e01b      	b.n	800affa <__sflush_r+0xf2>
 800afc2:	690f      	ldr	r7, [r1, #16]
 800afc4:	2f00      	cmp	r7, #0
 800afc6:	d0f6      	beq.n	800afb6 <__sflush_r+0xae>
 800afc8:	0793      	lsls	r3, r2, #30
 800afca:	680e      	ldr	r6, [r1, #0]
 800afcc:	bf08      	it	eq
 800afce:	694b      	ldreq	r3, [r1, #20]
 800afd0:	600f      	str	r7, [r1, #0]
 800afd2:	bf18      	it	ne
 800afd4:	2300      	movne	r3, #0
 800afd6:	eba6 0807 	sub.w	r8, r6, r7
 800afda:	608b      	str	r3, [r1, #8]
 800afdc:	f1b8 0f00 	cmp.w	r8, #0
 800afe0:	dde9      	ble.n	800afb6 <__sflush_r+0xae>
 800afe2:	6a21      	ldr	r1, [r4, #32]
 800afe4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800afe6:	4643      	mov	r3, r8
 800afe8:	463a      	mov	r2, r7
 800afea:	4628      	mov	r0, r5
 800afec:	47b0      	blx	r6
 800afee:	2800      	cmp	r0, #0
 800aff0:	dc08      	bgt.n	800b004 <__sflush_r+0xfc>
 800aff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800affa:	81a3      	strh	r3, [r4, #12]
 800affc:	f04f 30ff 	mov.w	r0, #4294967295
 800b000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b004:	4407      	add	r7, r0
 800b006:	eba8 0800 	sub.w	r8, r8, r0
 800b00a:	e7e7      	b.n	800afdc <__sflush_r+0xd4>
 800b00c:	dfbffffe 	.word	0xdfbffffe

0800b010 <_fflush_r>:
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	690b      	ldr	r3, [r1, #16]
 800b014:	4605      	mov	r5, r0
 800b016:	460c      	mov	r4, r1
 800b018:	b913      	cbnz	r3, 800b020 <_fflush_r+0x10>
 800b01a:	2500      	movs	r5, #0
 800b01c:	4628      	mov	r0, r5
 800b01e:	bd38      	pop	{r3, r4, r5, pc}
 800b020:	b118      	cbz	r0, 800b02a <_fflush_r+0x1a>
 800b022:	6a03      	ldr	r3, [r0, #32]
 800b024:	b90b      	cbnz	r3, 800b02a <_fflush_r+0x1a>
 800b026:	f7fd fdcd 	bl	8008bc4 <__sinit>
 800b02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d0f3      	beq.n	800b01a <_fflush_r+0xa>
 800b032:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b034:	07d0      	lsls	r0, r2, #31
 800b036:	d404      	bmi.n	800b042 <_fflush_r+0x32>
 800b038:	0599      	lsls	r1, r3, #22
 800b03a:	d402      	bmi.n	800b042 <_fflush_r+0x32>
 800b03c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b03e:	f7fd ff2e 	bl	8008e9e <__retarget_lock_acquire_recursive>
 800b042:	4628      	mov	r0, r5
 800b044:	4621      	mov	r1, r4
 800b046:	f7ff ff5f 	bl	800af08 <__sflush_r>
 800b04a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b04c:	07da      	lsls	r2, r3, #31
 800b04e:	4605      	mov	r5, r0
 800b050:	d4e4      	bmi.n	800b01c <_fflush_r+0xc>
 800b052:	89a3      	ldrh	r3, [r4, #12]
 800b054:	059b      	lsls	r3, r3, #22
 800b056:	d4e1      	bmi.n	800b01c <_fflush_r+0xc>
 800b058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b05a:	f7fd ff21 	bl	8008ea0 <__retarget_lock_release_recursive>
 800b05e:	e7dd      	b.n	800b01c <_fflush_r+0xc>

0800b060 <fiprintf>:
 800b060:	b40e      	push	{r1, r2, r3}
 800b062:	b503      	push	{r0, r1, lr}
 800b064:	4601      	mov	r1, r0
 800b066:	ab03      	add	r3, sp, #12
 800b068:	4805      	ldr	r0, [pc, #20]	@ (800b080 <fiprintf+0x20>)
 800b06a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b06e:	6800      	ldr	r0, [r0, #0]
 800b070:	9301      	str	r3, [sp, #4]
 800b072:	f000 f893 	bl	800b19c <_vfiprintf_r>
 800b076:	b002      	add	sp, #8
 800b078:	f85d eb04 	ldr.w	lr, [sp], #4
 800b07c:	b003      	add	sp, #12
 800b07e:	4770      	bx	lr
 800b080:	20000184 	.word	0x20000184

0800b084 <memmove>:
 800b084:	4288      	cmp	r0, r1
 800b086:	b510      	push	{r4, lr}
 800b088:	eb01 0402 	add.w	r4, r1, r2
 800b08c:	d902      	bls.n	800b094 <memmove+0x10>
 800b08e:	4284      	cmp	r4, r0
 800b090:	4623      	mov	r3, r4
 800b092:	d807      	bhi.n	800b0a4 <memmove+0x20>
 800b094:	1e43      	subs	r3, r0, #1
 800b096:	42a1      	cmp	r1, r4
 800b098:	d008      	beq.n	800b0ac <memmove+0x28>
 800b09a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b09e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0a2:	e7f8      	b.n	800b096 <memmove+0x12>
 800b0a4:	4402      	add	r2, r0
 800b0a6:	4601      	mov	r1, r0
 800b0a8:	428a      	cmp	r2, r1
 800b0aa:	d100      	bne.n	800b0ae <memmove+0x2a>
 800b0ac:	bd10      	pop	{r4, pc}
 800b0ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0b6:	e7f7      	b.n	800b0a8 <memmove+0x24>

0800b0b8 <abort>:
 800b0b8:	b508      	push	{r3, lr}
 800b0ba:	2006      	movs	r0, #6
 800b0bc:	f000 fa42 	bl	800b544 <raise>
 800b0c0:	2001      	movs	r0, #1
 800b0c2:	f7f6 fb35 	bl	8001730 <_exit>

0800b0c6 <_calloc_r>:
 800b0c6:	b570      	push	{r4, r5, r6, lr}
 800b0c8:	fba1 5402 	umull	r5, r4, r1, r2
 800b0cc:	b93c      	cbnz	r4, 800b0de <_calloc_r+0x18>
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	f7fb ff6e 	bl	8006fb0 <_malloc_r>
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	b928      	cbnz	r0, 800b0e4 <_calloc_r+0x1e>
 800b0d8:	2600      	movs	r6, #0
 800b0da:	4630      	mov	r0, r6
 800b0dc:	bd70      	pop	{r4, r5, r6, pc}
 800b0de:	220c      	movs	r2, #12
 800b0e0:	6002      	str	r2, [r0, #0]
 800b0e2:	e7f9      	b.n	800b0d8 <_calloc_r+0x12>
 800b0e4:	462a      	mov	r2, r5
 800b0e6:	4621      	mov	r1, r4
 800b0e8:	f7fd fe39 	bl	8008d5e <memset>
 800b0ec:	e7f5      	b.n	800b0da <_calloc_r+0x14>

0800b0ee <_realloc_r>:
 800b0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f2:	4680      	mov	r8, r0
 800b0f4:	4615      	mov	r5, r2
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	b921      	cbnz	r1, 800b104 <_realloc_r+0x16>
 800b0fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0fe:	4611      	mov	r1, r2
 800b100:	f7fb bf56 	b.w	8006fb0 <_malloc_r>
 800b104:	b92a      	cbnz	r2, 800b112 <_realloc_r+0x24>
 800b106:	f7fe fd53 	bl	8009bb0 <_free_r>
 800b10a:	2400      	movs	r4, #0
 800b10c:	4620      	mov	r0, r4
 800b10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b112:	f000 fa33 	bl	800b57c <_malloc_usable_size_r>
 800b116:	4285      	cmp	r5, r0
 800b118:	4606      	mov	r6, r0
 800b11a:	d802      	bhi.n	800b122 <_realloc_r+0x34>
 800b11c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b120:	d8f4      	bhi.n	800b10c <_realloc_r+0x1e>
 800b122:	4629      	mov	r1, r5
 800b124:	4640      	mov	r0, r8
 800b126:	f7fb ff43 	bl	8006fb0 <_malloc_r>
 800b12a:	4607      	mov	r7, r0
 800b12c:	2800      	cmp	r0, #0
 800b12e:	d0ec      	beq.n	800b10a <_realloc_r+0x1c>
 800b130:	42b5      	cmp	r5, r6
 800b132:	462a      	mov	r2, r5
 800b134:	4621      	mov	r1, r4
 800b136:	bf28      	it	cs
 800b138:	4632      	movcs	r2, r6
 800b13a:	f7fd feb2 	bl	8008ea2 <memcpy>
 800b13e:	4621      	mov	r1, r4
 800b140:	4640      	mov	r0, r8
 800b142:	f7fe fd35 	bl	8009bb0 <_free_r>
 800b146:	463c      	mov	r4, r7
 800b148:	e7e0      	b.n	800b10c <_realloc_r+0x1e>

0800b14a <__sfputc_r>:
 800b14a:	6893      	ldr	r3, [r2, #8]
 800b14c:	3b01      	subs	r3, #1
 800b14e:	2b00      	cmp	r3, #0
 800b150:	b410      	push	{r4}
 800b152:	6093      	str	r3, [r2, #8]
 800b154:	da08      	bge.n	800b168 <__sfputc_r+0x1e>
 800b156:	6994      	ldr	r4, [r2, #24]
 800b158:	42a3      	cmp	r3, r4
 800b15a:	db01      	blt.n	800b160 <__sfputc_r+0x16>
 800b15c:	290a      	cmp	r1, #10
 800b15e:	d103      	bne.n	800b168 <__sfputc_r+0x1e>
 800b160:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b164:	f000 b932 	b.w	800b3cc <__swbuf_r>
 800b168:	6813      	ldr	r3, [r2, #0]
 800b16a:	1c58      	adds	r0, r3, #1
 800b16c:	6010      	str	r0, [r2, #0]
 800b16e:	7019      	strb	r1, [r3, #0]
 800b170:	4608      	mov	r0, r1
 800b172:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <__sfputs_r>:
 800b178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b17a:	4606      	mov	r6, r0
 800b17c:	460f      	mov	r7, r1
 800b17e:	4614      	mov	r4, r2
 800b180:	18d5      	adds	r5, r2, r3
 800b182:	42ac      	cmp	r4, r5
 800b184:	d101      	bne.n	800b18a <__sfputs_r+0x12>
 800b186:	2000      	movs	r0, #0
 800b188:	e007      	b.n	800b19a <__sfputs_r+0x22>
 800b18a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b18e:	463a      	mov	r2, r7
 800b190:	4630      	mov	r0, r6
 800b192:	f7ff ffda 	bl	800b14a <__sfputc_r>
 800b196:	1c43      	adds	r3, r0, #1
 800b198:	d1f3      	bne.n	800b182 <__sfputs_r+0xa>
 800b19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b19c <_vfiprintf_r>:
 800b19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a0:	460d      	mov	r5, r1
 800b1a2:	b09d      	sub	sp, #116	@ 0x74
 800b1a4:	4614      	mov	r4, r2
 800b1a6:	4698      	mov	r8, r3
 800b1a8:	4606      	mov	r6, r0
 800b1aa:	b118      	cbz	r0, 800b1b4 <_vfiprintf_r+0x18>
 800b1ac:	6a03      	ldr	r3, [r0, #32]
 800b1ae:	b90b      	cbnz	r3, 800b1b4 <_vfiprintf_r+0x18>
 800b1b0:	f7fd fd08 	bl	8008bc4 <__sinit>
 800b1b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1b6:	07d9      	lsls	r1, r3, #31
 800b1b8:	d405      	bmi.n	800b1c6 <_vfiprintf_r+0x2a>
 800b1ba:	89ab      	ldrh	r3, [r5, #12]
 800b1bc:	059a      	lsls	r2, r3, #22
 800b1be:	d402      	bmi.n	800b1c6 <_vfiprintf_r+0x2a>
 800b1c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1c2:	f7fd fe6c 	bl	8008e9e <__retarget_lock_acquire_recursive>
 800b1c6:	89ab      	ldrh	r3, [r5, #12]
 800b1c8:	071b      	lsls	r3, r3, #28
 800b1ca:	d501      	bpl.n	800b1d0 <_vfiprintf_r+0x34>
 800b1cc:	692b      	ldr	r3, [r5, #16]
 800b1ce:	b99b      	cbnz	r3, 800b1f8 <_vfiprintf_r+0x5c>
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	f000 f938 	bl	800b448 <__swsetup_r>
 800b1d8:	b170      	cbz	r0, 800b1f8 <_vfiprintf_r+0x5c>
 800b1da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1dc:	07dc      	lsls	r4, r3, #31
 800b1de:	d504      	bpl.n	800b1ea <_vfiprintf_r+0x4e>
 800b1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e4:	b01d      	add	sp, #116	@ 0x74
 800b1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ea:	89ab      	ldrh	r3, [r5, #12]
 800b1ec:	0598      	lsls	r0, r3, #22
 800b1ee:	d4f7      	bmi.n	800b1e0 <_vfiprintf_r+0x44>
 800b1f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1f2:	f7fd fe55 	bl	8008ea0 <__retarget_lock_release_recursive>
 800b1f6:	e7f3      	b.n	800b1e0 <_vfiprintf_r+0x44>
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1fc:	2320      	movs	r3, #32
 800b1fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b202:	f8cd 800c 	str.w	r8, [sp, #12]
 800b206:	2330      	movs	r3, #48	@ 0x30
 800b208:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b3b8 <_vfiprintf_r+0x21c>
 800b20c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b210:	f04f 0901 	mov.w	r9, #1
 800b214:	4623      	mov	r3, r4
 800b216:	469a      	mov	sl, r3
 800b218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b21c:	b10a      	cbz	r2, 800b222 <_vfiprintf_r+0x86>
 800b21e:	2a25      	cmp	r2, #37	@ 0x25
 800b220:	d1f9      	bne.n	800b216 <_vfiprintf_r+0x7a>
 800b222:	ebba 0b04 	subs.w	fp, sl, r4
 800b226:	d00b      	beq.n	800b240 <_vfiprintf_r+0xa4>
 800b228:	465b      	mov	r3, fp
 800b22a:	4622      	mov	r2, r4
 800b22c:	4629      	mov	r1, r5
 800b22e:	4630      	mov	r0, r6
 800b230:	f7ff ffa2 	bl	800b178 <__sfputs_r>
 800b234:	3001      	adds	r0, #1
 800b236:	f000 80a7 	beq.w	800b388 <_vfiprintf_r+0x1ec>
 800b23a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b23c:	445a      	add	r2, fp
 800b23e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b240:	f89a 3000 	ldrb.w	r3, [sl]
 800b244:	2b00      	cmp	r3, #0
 800b246:	f000 809f 	beq.w	800b388 <_vfiprintf_r+0x1ec>
 800b24a:	2300      	movs	r3, #0
 800b24c:	f04f 32ff 	mov.w	r2, #4294967295
 800b250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b254:	f10a 0a01 	add.w	sl, sl, #1
 800b258:	9304      	str	r3, [sp, #16]
 800b25a:	9307      	str	r3, [sp, #28]
 800b25c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b260:	931a      	str	r3, [sp, #104]	@ 0x68
 800b262:	4654      	mov	r4, sl
 800b264:	2205      	movs	r2, #5
 800b266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b26a:	4853      	ldr	r0, [pc, #332]	@ (800b3b8 <_vfiprintf_r+0x21c>)
 800b26c:	f7f4 ffb0 	bl	80001d0 <memchr>
 800b270:	9a04      	ldr	r2, [sp, #16]
 800b272:	b9d8      	cbnz	r0, 800b2ac <_vfiprintf_r+0x110>
 800b274:	06d1      	lsls	r1, r2, #27
 800b276:	bf44      	itt	mi
 800b278:	2320      	movmi	r3, #32
 800b27a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b27e:	0713      	lsls	r3, r2, #28
 800b280:	bf44      	itt	mi
 800b282:	232b      	movmi	r3, #43	@ 0x2b
 800b284:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b288:	f89a 3000 	ldrb.w	r3, [sl]
 800b28c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b28e:	d015      	beq.n	800b2bc <_vfiprintf_r+0x120>
 800b290:	9a07      	ldr	r2, [sp, #28]
 800b292:	4654      	mov	r4, sl
 800b294:	2000      	movs	r0, #0
 800b296:	f04f 0c0a 	mov.w	ip, #10
 800b29a:	4621      	mov	r1, r4
 800b29c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2a0:	3b30      	subs	r3, #48	@ 0x30
 800b2a2:	2b09      	cmp	r3, #9
 800b2a4:	d94b      	bls.n	800b33e <_vfiprintf_r+0x1a2>
 800b2a6:	b1b0      	cbz	r0, 800b2d6 <_vfiprintf_r+0x13a>
 800b2a8:	9207      	str	r2, [sp, #28]
 800b2aa:	e014      	b.n	800b2d6 <_vfiprintf_r+0x13a>
 800b2ac:	eba0 0308 	sub.w	r3, r0, r8
 800b2b0:	fa09 f303 	lsl.w	r3, r9, r3
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	9304      	str	r3, [sp, #16]
 800b2b8:	46a2      	mov	sl, r4
 800b2ba:	e7d2      	b.n	800b262 <_vfiprintf_r+0xc6>
 800b2bc:	9b03      	ldr	r3, [sp, #12]
 800b2be:	1d19      	adds	r1, r3, #4
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	9103      	str	r1, [sp, #12]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	bfbb      	ittet	lt
 800b2c8:	425b      	neglt	r3, r3
 800b2ca:	f042 0202 	orrlt.w	r2, r2, #2
 800b2ce:	9307      	strge	r3, [sp, #28]
 800b2d0:	9307      	strlt	r3, [sp, #28]
 800b2d2:	bfb8      	it	lt
 800b2d4:	9204      	strlt	r2, [sp, #16]
 800b2d6:	7823      	ldrb	r3, [r4, #0]
 800b2d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2da:	d10a      	bne.n	800b2f2 <_vfiprintf_r+0x156>
 800b2dc:	7863      	ldrb	r3, [r4, #1]
 800b2de:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2e0:	d132      	bne.n	800b348 <_vfiprintf_r+0x1ac>
 800b2e2:	9b03      	ldr	r3, [sp, #12]
 800b2e4:	1d1a      	adds	r2, r3, #4
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	9203      	str	r2, [sp, #12]
 800b2ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2ee:	3402      	adds	r4, #2
 800b2f0:	9305      	str	r3, [sp, #20]
 800b2f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b3c8 <_vfiprintf_r+0x22c>
 800b2f6:	7821      	ldrb	r1, [r4, #0]
 800b2f8:	2203      	movs	r2, #3
 800b2fa:	4650      	mov	r0, sl
 800b2fc:	f7f4 ff68 	bl	80001d0 <memchr>
 800b300:	b138      	cbz	r0, 800b312 <_vfiprintf_r+0x176>
 800b302:	9b04      	ldr	r3, [sp, #16]
 800b304:	eba0 000a 	sub.w	r0, r0, sl
 800b308:	2240      	movs	r2, #64	@ 0x40
 800b30a:	4082      	lsls	r2, r0
 800b30c:	4313      	orrs	r3, r2
 800b30e:	3401      	adds	r4, #1
 800b310:	9304      	str	r3, [sp, #16]
 800b312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b316:	4829      	ldr	r0, [pc, #164]	@ (800b3bc <_vfiprintf_r+0x220>)
 800b318:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b31c:	2206      	movs	r2, #6
 800b31e:	f7f4 ff57 	bl	80001d0 <memchr>
 800b322:	2800      	cmp	r0, #0
 800b324:	d03f      	beq.n	800b3a6 <_vfiprintf_r+0x20a>
 800b326:	4b26      	ldr	r3, [pc, #152]	@ (800b3c0 <_vfiprintf_r+0x224>)
 800b328:	bb1b      	cbnz	r3, 800b372 <_vfiprintf_r+0x1d6>
 800b32a:	9b03      	ldr	r3, [sp, #12]
 800b32c:	3307      	adds	r3, #7
 800b32e:	f023 0307 	bic.w	r3, r3, #7
 800b332:	3308      	adds	r3, #8
 800b334:	9303      	str	r3, [sp, #12]
 800b336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b338:	443b      	add	r3, r7
 800b33a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b33c:	e76a      	b.n	800b214 <_vfiprintf_r+0x78>
 800b33e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b342:	460c      	mov	r4, r1
 800b344:	2001      	movs	r0, #1
 800b346:	e7a8      	b.n	800b29a <_vfiprintf_r+0xfe>
 800b348:	2300      	movs	r3, #0
 800b34a:	3401      	adds	r4, #1
 800b34c:	9305      	str	r3, [sp, #20]
 800b34e:	4619      	mov	r1, r3
 800b350:	f04f 0c0a 	mov.w	ip, #10
 800b354:	4620      	mov	r0, r4
 800b356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b35a:	3a30      	subs	r2, #48	@ 0x30
 800b35c:	2a09      	cmp	r2, #9
 800b35e:	d903      	bls.n	800b368 <_vfiprintf_r+0x1cc>
 800b360:	2b00      	cmp	r3, #0
 800b362:	d0c6      	beq.n	800b2f2 <_vfiprintf_r+0x156>
 800b364:	9105      	str	r1, [sp, #20]
 800b366:	e7c4      	b.n	800b2f2 <_vfiprintf_r+0x156>
 800b368:	fb0c 2101 	mla	r1, ip, r1, r2
 800b36c:	4604      	mov	r4, r0
 800b36e:	2301      	movs	r3, #1
 800b370:	e7f0      	b.n	800b354 <_vfiprintf_r+0x1b8>
 800b372:	ab03      	add	r3, sp, #12
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	462a      	mov	r2, r5
 800b378:	4b12      	ldr	r3, [pc, #72]	@ (800b3c4 <_vfiprintf_r+0x228>)
 800b37a:	a904      	add	r1, sp, #16
 800b37c:	4630      	mov	r0, r6
 800b37e:	f7fc fdc9 	bl	8007f14 <_printf_float>
 800b382:	4607      	mov	r7, r0
 800b384:	1c78      	adds	r0, r7, #1
 800b386:	d1d6      	bne.n	800b336 <_vfiprintf_r+0x19a>
 800b388:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b38a:	07d9      	lsls	r1, r3, #31
 800b38c:	d405      	bmi.n	800b39a <_vfiprintf_r+0x1fe>
 800b38e:	89ab      	ldrh	r3, [r5, #12]
 800b390:	059a      	lsls	r2, r3, #22
 800b392:	d402      	bmi.n	800b39a <_vfiprintf_r+0x1fe>
 800b394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b396:	f7fd fd83 	bl	8008ea0 <__retarget_lock_release_recursive>
 800b39a:	89ab      	ldrh	r3, [r5, #12]
 800b39c:	065b      	lsls	r3, r3, #25
 800b39e:	f53f af1f 	bmi.w	800b1e0 <_vfiprintf_r+0x44>
 800b3a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b3a4:	e71e      	b.n	800b1e4 <_vfiprintf_r+0x48>
 800b3a6:	ab03      	add	r3, sp, #12
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	462a      	mov	r2, r5
 800b3ac:	4b05      	ldr	r3, [pc, #20]	@ (800b3c4 <_vfiprintf_r+0x228>)
 800b3ae:	a904      	add	r1, sp, #16
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	f7fd f847 	bl	8008444 <_printf_i>
 800b3b6:	e7e4      	b.n	800b382 <_vfiprintf_r+0x1e6>
 800b3b8:	0800bc10 	.word	0x0800bc10
 800b3bc:	0800bc1a 	.word	0x0800bc1a
 800b3c0:	08007f15 	.word	0x08007f15
 800b3c4:	0800b179 	.word	0x0800b179
 800b3c8:	0800bc16 	.word	0x0800bc16

0800b3cc <__swbuf_r>:
 800b3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ce:	460e      	mov	r6, r1
 800b3d0:	4614      	mov	r4, r2
 800b3d2:	4605      	mov	r5, r0
 800b3d4:	b118      	cbz	r0, 800b3de <__swbuf_r+0x12>
 800b3d6:	6a03      	ldr	r3, [r0, #32]
 800b3d8:	b90b      	cbnz	r3, 800b3de <__swbuf_r+0x12>
 800b3da:	f7fd fbf3 	bl	8008bc4 <__sinit>
 800b3de:	69a3      	ldr	r3, [r4, #24]
 800b3e0:	60a3      	str	r3, [r4, #8]
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	071a      	lsls	r2, r3, #28
 800b3e6:	d501      	bpl.n	800b3ec <__swbuf_r+0x20>
 800b3e8:	6923      	ldr	r3, [r4, #16]
 800b3ea:	b943      	cbnz	r3, 800b3fe <__swbuf_r+0x32>
 800b3ec:	4621      	mov	r1, r4
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	f000 f82a 	bl	800b448 <__swsetup_r>
 800b3f4:	b118      	cbz	r0, 800b3fe <__swbuf_r+0x32>
 800b3f6:	f04f 37ff 	mov.w	r7, #4294967295
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3fe:	6823      	ldr	r3, [r4, #0]
 800b400:	6922      	ldr	r2, [r4, #16]
 800b402:	1a98      	subs	r0, r3, r2
 800b404:	6963      	ldr	r3, [r4, #20]
 800b406:	b2f6      	uxtb	r6, r6
 800b408:	4283      	cmp	r3, r0
 800b40a:	4637      	mov	r7, r6
 800b40c:	dc05      	bgt.n	800b41a <__swbuf_r+0x4e>
 800b40e:	4621      	mov	r1, r4
 800b410:	4628      	mov	r0, r5
 800b412:	f7ff fdfd 	bl	800b010 <_fflush_r>
 800b416:	2800      	cmp	r0, #0
 800b418:	d1ed      	bne.n	800b3f6 <__swbuf_r+0x2a>
 800b41a:	68a3      	ldr	r3, [r4, #8]
 800b41c:	3b01      	subs	r3, #1
 800b41e:	60a3      	str	r3, [r4, #8]
 800b420:	6823      	ldr	r3, [r4, #0]
 800b422:	1c5a      	adds	r2, r3, #1
 800b424:	6022      	str	r2, [r4, #0]
 800b426:	701e      	strb	r6, [r3, #0]
 800b428:	6962      	ldr	r2, [r4, #20]
 800b42a:	1c43      	adds	r3, r0, #1
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d004      	beq.n	800b43a <__swbuf_r+0x6e>
 800b430:	89a3      	ldrh	r3, [r4, #12]
 800b432:	07db      	lsls	r3, r3, #31
 800b434:	d5e1      	bpl.n	800b3fa <__swbuf_r+0x2e>
 800b436:	2e0a      	cmp	r6, #10
 800b438:	d1df      	bne.n	800b3fa <__swbuf_r+0x2e>
 800b43a:	4621      	mov	r1, r4
 800b43c:	4628      	mov	r0, r5
 800b43e:	f7ff fde7 	bl	800b010 <_fflush_r>
 800b442:	2800      	cmp	r0, #0
 800b444:	d0d9      	beq.n	800b3fa <__swbuf_r+0x2e>
 800b446:	e7d6      	b.n	800b3f6 <__swbuf_r+0x2a>

0800b448 <__swsetup_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	4b29      	ldr	r3, [pc, #164]	@ (800b4f0 <__swsetup_r+0xa8>)
 800b44c:	4605      	mov	r5, r0
 800b44e:	6818      	ldr	r0, [r3, #0]
 800b450:	460c      	mov	r4, r1
 800b452:	b118      	cbz	r0, 800b45c <__swsetup_r+0x14>
 800b454:	6a03      	ldr	r3, [r0, #32]
 800b456:	b90b      	cbnz	r3, 800b45c <__swsetup_r+0x14>
 800b458:	f7fd fbb4 	bl	8008bc4 <__sinit>
 800b45c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b460:	0719      	lsls	r1, r3, #28
 800b462:	d422      	bmi.n	800b4aa <__swsetup_r+0x62>
 800b464:	06da      	lsls	r2, r3, #27
 800b466:	d407      	bmi.n	800b478 <__swsetup_r+0x30>
 800b468:	2209      	movs	r2, #9
 800b46a:	602a      	str	r2, [r5, #0]
 800b46c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b470:	81a3      	strh	r3, [r4, #12]
 800b472:	f04f 30ff 	mov.w	r0, #4294967295
 800b476:	e033      	b.n	800b4e0 <__swsetup_r+0x98>
 800b478:	0758      	lsls	r0, r3, #29
 800b47a:	d512      	bpl.n	800b4a2 <__swsetup_r+0x5a>
 800b47c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b47e:	b141      	cbz	r1, 800b492 <__swsetup_r+0x4a>
 800b480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b484:	4299      	cmp	r1, r3
 800b486:	d002      	beq.n	800b48e <__swsetup_r+0x46>
 800b488:	4628      	mov	r0, r5
 800b48a:	f7fe fb91 	bl	8009bb0 <_free_r>
 800b48e:	2300      	movs	r3, #0
 800b490:	6363      	str	r3, [r4, #52]	@ 0x34
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b498:	81a3      	strh	r3, [r4, #12]
 800b49a:	2300      	movs	r3, #0
 800b49c:	6063      	str	r3, [r4, #4]
 800b49e:	6923      	ldr	r3, [r4, #16]
 800b4a0:	6023      	str	r3, [r4, #0]
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	f043 0308 	orr.w	r3, r3, #8
 800b4a8:	81a3      	strh	r3, [r4, #12]
 800b4aa:	6923      	ldr	r3, [r4, #16]
 800b4ac:	b94b      	cbnz	r3, 800b4c2 <__swsetup_r+0x7a>
 800b4ae:	89a3      	ldrh	r3, [r4, #12]
 800b4b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b4b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4b8:	d003      	beq.n	800b4c2 <__swsetup_r+0x7a>
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	4628      	mov	r0, r5
 800b4be:	f000 f88b 	bl	800b5d8 <__smakebuf_r>
 800b4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4c6:	f013 0201 	ands.w	r2, r3, #1
 800b4ca:	d00a      	beq.n	800b4e2 <__swsetup_r+0x9a>
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	60a2      	str	r2, [r4, #8]
 800b4d0:	6962      	ldr	r2, [r4, #20]
 800b4d2:	4252      	negs	r2, r2
 800b4d4:	61a2      	str	r2, [r4, #24]
 800b4d6:	6922      	ldr	r2, [r4, #16]
 800b4d8:	b942      	cbnz	r2, 800b4ec <__swsetup_r+0xa4>
 800b4da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b4de:	d1c5      	bne.n	800b46c <__swsetup_r+0x24>
 800b4e0:	bd38      	pop	{r3, r4, r5, pc}
 800b4e2:	0799      	lsls	r1, r3, #30
 800b4e4:	bf58      	it	pl
 800b4e6:	6962      	ldrpl	r2, [r4, #20]
 800b4e8:	60a2      	str	r2, [r4, #8]
 800b4ea:	e7f4      	b.n	800b4d6 <__swsetup_r+0x8e>
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	e7f7      	b.n	800b4e0 <__swsetup_r+0x98>
 800b4f0:	20000184 	.word	0x20000184

0800b4f4 <_raise_r>:
 800b4f4:	291f      	cmp	r1, #31
 800b4f6:	b538      	push	{r3, r4, r5, lr}
 800b4f8:	4605      	mov	r5, r0
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	d904      	bls.n	800b508 <_raise_r+0x14>
 800b4fe:	2316      	movs	r3, #22
 800b500:	6003      	str	r3, [r0, #0]
 800b502:	f04f 30ff 	mov.w	r0, #4294967295
 800b506:	bd38      	pop	{r3, r4, r5, pc}
 800b508:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b50a:	b112      	cbz	r2, 800b512 <_raise_r+0x1e>
 800b50c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b510:	b94b      	cbnz	r3, 800b526 <_raise_r+0x32>
 800b512:	4628      	mov	r0, r5
 800b514:	f000 f830 	bl	800b578 <_getpid_r>
 800b518:	4622      	mov	r2, r4
 800b51a:	4601      	mov	r1, r0
 800b51c:	4628      	mov	r0, r5
 800b51e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b522:	f000 b817 	b.w	800b554 <_kill_r>
 800b526:	2b01      	cmp	r3, #1
 800b528:	d00a      	beq.n	800b540 <_raise_r+0x4c>
 800b52a:	1c59      	adds	r1, r3, #1
 800b52c:	d103      	bne.n	800b536 <_raise_r+0x42>
 800b52e:	2316      	movs	r3, #22
 800b530:	6003      	str	r3, [r0, #0]
 800b532:	2001      	movs	r0, #1
 800b534:	e7e7      	b.n	800b506 <_raise_r+0x12>
 800b536:	2100      	movs	r1, #0
 800b538:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b53c:	4620      	mov	r0, r4
 800b53e:	4798      	blx	r3
 800b540:	2000      	movs	r0, #0
 800b542:	e7e0      	b.n	800b506 <_raise_r+0x12>

0800b544 <raise>:
 800b544:	4b02      	ldr	r3, [pc, #8]	@ (800b550 <raise+0xc>)
 800b546:	4601      	mov	r1, r0
 800b548:	6818      	ldr	r0, [r3, #0]
 800b54a:	f7ff bfd3 	b.w	800b4f4 <_raise_r>
 800b54e:	bf00      	nop
 800b550:	20000184 	.word	0x20000184

0800b554 <_kill_r>:
 800b554:	b538      	push	{r3, r4, r5, lr}
 800b556:	4d07      	ldr	r5, [pc, #28]	@ (800b574 <_kill_r+0x20>)
 800b558:	2300      	movs	r3, #0
 800b55a:	4604      	mov	r4, r0
 800b55c:	4608      	mov	r0, r1
 800b55e:	4611      	mov	r1, r2
 800b560:	602b      	str	r3, [r5, #0]
 800b562:	f7f6 f8d5 	bl	8001710 <_kill>
 800b566:	1c43      	adds	r3, r0, #1
 800b568:	d102      	bne.n	800b570 <_kill_r+0x1c>
 800b56a:	682b      	ldr	r3, [r5, #0]
 800b56c:	b103      	cbz	r3, 800b570 <_kill_r+0x1c>
 800b56e:	6023      	str	r3, [r4, #0]
 800b570:	bd38      	pop	{r3, r4, r5, pc}
 800b572:	bf00      	nop
 800b574:	200008dc 	.word	0x200008dc

0800b578 <_getpid_r>:
 800b578:	f7f6 b8c2 	b.w	8001700 <_getpid>

0800b57c <_malloc_usable_size_r>:
 800b57c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b580:	1f18      	subs	r0, r3, #4
 800b582:	2b00      	cmp	r3, #0
 800b584:	bfbc      	itt	lt
 800b586:	580b      	ldrlt	r3, [r1, r0]
 800b588:	18c0      	addlt	r0, r0, r3
 800b58a:	4770      	bx	lr

0800b58c <__swhatbuf_r>:
 800b58c:	b570      	push	{r4, r5, r6, lr}
 800b58e:	460c      	mov	r4, r1
 800b590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b594:	2900      	cmp	r1, #0
 800b596:	b096      	sub	sp, #88	@ 0x58
 800b598:	4615      	mov	r5, r2
 800b59a:	461e      	mov	r6, r3
 800b59c:	da0d      	bge.n	800b5ba <__swhatbuf_r+0x2e>
 800b59e:	89a3      	ldrh	r3, [r4, #12]
 800b5a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b5a4:	f04f 0100 	mov.w	r1, #0
 800b5a8:	bf14      	ite	ne
 800b5aa:	2340      	movne	r3, #64	@ 0x40
 800b5ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	6031      	str	r1, [r6, #0]
 800b5b4:	602b      	str	r3, [r5, #0]
 800b5b6:	b016      	add	sp, #88	@ 0x58
 800b5b8:	bd70      	pop	{r4, r5, r6, pc}
 800b5ba:	466a      	mov	r2, sp
 800b5bc:	f000 f848 	bl	800b650 <_fstat_r>
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	dbec      	blt.n	800b59e <__swhatbuf_r+0x12>
 800b5c4:	9901      	ldr	r1, [sp, #4]
 800b5c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b5ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b5ce:	4259      	negs	r1, r3
 800b5d0:	4159      	adcs	r1, r3
 800b5d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5d6:	e7eb      	b.n	800b5b0 <__swhatbuf_r+0x24>

0800b5d8 <__smakebuf_r>:
 800b5d8:	898b      	ldrh	r3, [r1, #12]
 800b5da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5dc:	079d      	lsls	r5, r3, #30
 800b5de:	4606      	mov	r6, r0
 800b5e0:	460c      	mov	r4, r1
 800b5e2:	d507      	bpl.n	800b5f4 <__smakebuf_r+0x1c>
 800b5e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b5e8:	6023      	str	r3, [r4, #0]
 800b5ea:	6123      	str	r3, [r4, #16]
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	6163      	str	r3, [r4, #20]
 800b5f0:	b003      	add	sp, #12
 800b5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5f4:	ab01      	add	r3, sp, #4
 800b5f6:	466a      	mov	r2, sp
 800b5f8:	f7ff ffc8 	bl	800b58c <__swhatbuf_r>
 800b5fc:	9f00      	ldr	r7, [sp, #0]
 800b5fe:	4605      	mov	r5, r0
 800b600:	4639      	mov	r1, r7
 800b602:	4630      	mov	r0, r6
 800b604:	f7fb fcd4 	bl	8006fb0 <_malloc_r>
 800b608:	b948      	cbnz	r0, 800b61e <__smakebuf_r+0x46>
 800b60a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b60e:	059a      	lsls	r2, r3, #22
 800b610:	d4ee      	bmi.n	800b5f0 <__smakebuf_r+0x18>
 800b612:	f023 0303 	bic.w	r3, r3, #3
 800b616:	f043 0302 	orr.w	r3, r3, #2
 800b61a:	81a3      	strh	r3, [r4, #12]
 800b61c:	e7e2      	b.n	800b5e4 <__smakebuf_r+0xc>
 800b61e:	89a3      	ldrh	r3, [r4, #12]
 800b620:	6020      	str	r0, [r4, #0]
 800b622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b626:	81a3      	strh	r3, [r4, #12]
 800b628:	9b01      	ldr	r3, [sp, #4]
 800b62a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b62e:	b15b      	cbz	r3, 800b648 <__smakebuf_r+0x70>
 800b630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b634:	4630      	mov	r0, r6
 800b636:	f000 f81d 	bl	800b674 <_isatty_r>
 800b63a:	b128      	cbz	r0, 800b648 <__smakebuf_r+0x70>
 800b63c:	89a3      	ldrh	r3, [r4, #12]
 800b63e:	f023 0303 	bic.w	r3, r3, #3
 800b642:	f043 0301 	orr.w	r3, r3, #1
 800b646:	81a3      	strh	r3, [r4, #12]
 800b648:	89a3      	ldrh	r3, [r4, #12]
 800b64a:	431d      	orrs	r5, r3
 800b64c:	81a5      	strh	r5, [r4, #12]
 800b64e:	e7cf      	b.n	800b5f0 <__smakebuf_r+0x18>

0800b650 <_fstat_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4d07      	ldr	r5, [pc, #28]	@ (800b670 <_fstat_r+0x20>)
 800b654:	2300      	movs	r3, #0
 800b656:	4604      	mov	r4, r0
 800b658:	4608      	mov	r0, r1
 800b65a:	4611      	mov	r1, r2
 800b65c:	602b      	str	r3, [r5, #0]
 800b65e:	f7f6 f8b7 	bl	80017d0 <_fstat>
 800b662:	1c43      	adds	r3, r0, #1
 800b664:	d102      	bne.n	800b66c <_fstat_r+0x1c>
 800b666:	682b      	ldr	r3, [r5, #0]
 800b668:	b103      	cbz	r3, 800b66c <_fstat_r+0x1c>
 800b66a:	6023      	str	r3, [r4, #0]
 800b66c:	bd38      	pop	{r3, r4, r5, pc}
 800b66e:	bf00      	nop
 800b670:	200008dc 	.word	0x200008dc

0800b674 <_isatty_r>:
 800b674:	b538      	push	{r3, r4, r5, lr}
 800b676:	4d06      	ldr	r5, [pc, #24]	@ (800b690 <_isatty_r+0x1c>)
 800b678:	2300      	movs	r3, #0
 800b67a:	4604      	mov	r4, r0
 800b67c:	4608      	mov	r0, r1
 800b67e:	602b      	str	r3, [r5, #0]
 800b680:	f7f6 f8b6 	bl	80017f0 <_isatty>
 800b684:	1c43      	adds	r3, r0, #1
 800b686:	d102      	bne.n	800b68e <_isatty_r+0x1a>
 800b688:	682b      	ldr	r3, [r5, #0]
 800b68a:	b103      	cbz	r3, 800b68e <_isatty_r+0x1a>
 800b68c:	6023      	str	r3, [r4, #0]
 800b68e:	bd38      	pop	{r3, r4, r5, pc}
 800b690:	200008dc 	.word	0x200008dc
 800b694:	00000000 	.word	0x00000000

0800b698 <floor>:
 800b698:	ec51 0b10 	vmov	r0, r1, d0
 800b69c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b6a8:	2e13      	cmp	r6, #19
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	4605      	mov	r5, r0
 800b6ae:	4680      	mov	r8, r0
 800b6b0:	dc34      	bgt.n	800b71c <floor+0x84>
 800b6b2:	2e00      	cmp	r6, #0
 800b6b4:	da17      	bge.n	800b6e6 <floor+0x4e>
 800b6b6:	a332      	add	r3, pc, #200	@ (adr r3, 800b780 <floor+0xe8>)
 800b6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6bc:	f7f4 fde6 	bl	800028c <__adddf3>
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	f7f5 fa28 	bl	8000b18 <__aeabi_dcmpgt>
 800b6c8:	b150      	cbz	r0, 800b6e0 <floor+0x48>
 800b6ca:	2c00      	cmp	r4, #0
 800b6cc:	da55      	bge.n	800b77a <floor+0xe2>
 800b6ce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b6d2:	432c      	orrs	r4, r5
 800b6d4:	2500      	movs	r5, #0
 800b6d6:	42ac      	cmp	r4, r5
 800b6d8:	4c2b      	ldr	r4, [pc, #172]	@ (800b788 <floor+0xf0>)
 800b6da:	bf08      	it	eq
 800b6dc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b6e0:	4621      	mov	r1, r4
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	e023      	b.n	800b72e <floor+0x96>
 800b6e6:	4f29      	ldr	r7, [pc, #164]	@ (800b78c <floor+0xf4>)
 800b6e8:	4137      	asrs	r7, r6
 800b6ea:	ea01 0307 	and.w	r3, r1, r7
 800b6ee:	4303      	orrs	r3, r0
 800b6f0:	d01d      	beq.n	800b72e <floor+0x96>
 800b6f2:	a323      	add	r3, pc, #140	@ (adr r3, 800b780 <floor+0xe8>)
 800b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f8:	f7f4 fdc8 	bl	800028c <__adddf3>
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	2300      	movs	r3, #0
 800b700:	f7f5 fa0a 	bl	8000b18 <__aeabi_dcmpgt>
 800b704:	2800      	cmp	r0, #0
 800b706:	d0eb      	beq.n	800b6e0 <floor+0x48>
 800b708:	2c00      	cmp	r4, #0
 800b70a:	bfbe      	ittt	lt
 800b70c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b710:	4133      	asrlt	r3, r6
 800b712:	18e4      	addlt	r4, r4, r3
 800b714:	ea24 0407 	bic.w	r4, r4, r7
 800b718:	2500      	movs	r5, #0
 800b71a:	e7e1      	b.n	800b6e0 <floor+0x48>
 800b71c:	2e33      	cmp	r6, #51	@ 0x33
 800b71e:	dd0a      	ble.n	800b736 <floor+0x9e>
 800b720:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b724:	d103      	bne.n	800b72e <floor+0x96>
 800b726:	4602      	mov	r2, r0
 800b728:	460b      	mov	r3, r1
 800b72a:	f7f4 fdaf 	bl	800028c <__adddf3>
 800b72e:	ec41 0b10 	vmov	d0, r0, r1
 800b732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b736:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b73a:	f04f 37ff 	mov.w	r7, #4294967295
 800b73e:	40df      	lsrs	r7, r3
 800b740:	4207      	tst	r7, r0
 800b742:	d0f4      	beq.n	800b72e <floor+0x96>
 800b744:	a30e      	add	r3, pc, #56	@ (adr r3, 800b780 <floor+0xe8>)
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	f7f4 fd9f 	bl	800028c <__adddf3>
 800b74e:	2200      	movs	r2, #0
 800b750:	2300      	movs	r3, #0
 800b752:	f7f5 f9e1 	bl	8000b18 <__aeabi_dcmpgt>
 800b756:	2800      	cmp	r0, #0
 800b758:	d0c2      	beq.n	800b6e0 <floor+0x48>
 800b75a:	2c00      	cmp	r4, #0
 800b75c:	da0a      	bge.n	800b774 <floor+0xdc>
 800b75e:	2e14      	cmp	r6, #20
 800b760:	d101      	bne.n	800b766 <floor+0xce>
 800b762:	3401      	adds	r4, #1
 800b764:	e006      	b.n	800b774 <floor+0xdc>
 800b766:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b76a:	2301      	movs	r3, #1
 800b76c:	40b3      	lsls	r3, r6
 800b76e:	441d      	add	r5, r3
 800b770:	4545      	cmp	r5, r8
 800b772:	d3f6      	bcc.n	800b762 <floor+0xca>
 800b774:	ea25 0507 	bic.w	r5, r5, r7
 800b778:	e7b2      	b.n	800b6e0 <floor+0x48>
 800b77a:	2500      	movs	r5, #0
 800b77c:	462c      	mov	r4, r5
 800b77e:	e7af      	b.n	800b6e0 <floor+0x48>
 800b780:	8800759c 	.word	0x8800759c
 800b784:	7e37e43c 	.word	0x7e37e43c
 800b788:	bff00000 	.word	0xbff00000
 800b78c:	000fffff 	.word	0x000fffff

0800b790 <_init>:
 800b790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b792:	bf00      	nop
 800b794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b796:	bc08      	pop	{r3}
 800b798:	469e      	mov	lr, r3
 800b79a:	4770      	bx	lr

0800b79c <_fini>:
 800b79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b79e:	bf00      	nop
 800b7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7a2:	bc08      	pop	{r3}
 800b7a4:	469e      	mov	lr, r3
 800b7a6:	4770      	bx	lr
