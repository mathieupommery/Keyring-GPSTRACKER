
balise_BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f738  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c30  0801f878  0801f878  00020878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080224a8  080224a8  000234a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080224b0  080224b0  000234b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080224b4  080224b4  000234b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000318  20000008  080224b8  00024008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000320  080227d0  00024320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000358  08022805  00024358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dc4  20000370  08022816  00024370  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003134  08022816  00025134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00026000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00026000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08022816  000251e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0004c781  00000000  00000000  00025a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a59d  00000000  00000000  00072218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003f28  00000000  00000000  0007c7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000305d  00000000  00000000  000806e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000158e4  00000000  00000000  0008373d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00054a54  00000000  00000000  00099021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011e817  00000000  00000000  000eda75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0020c28c  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000123ac  00000000  00000000  0020c2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000076  00000000  00000000  0021e67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000370 	.word	0x20000370
 800015c:	00000000 	.word	0x00000000
 8000160:	0801f860 	.word	0x0801f860

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000374 	.word	0x20000374
 800017c:	0801f860 	.word	0x0801f860

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fde:	4b38      	ldr	r3, [pc, #224]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fe0:	4a38      	ldr	r2, [pc, #224]	@ (80010c4 <MX_ADC1_Init+0xfc>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fe4:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fea:	4b35      	ldr	r3, [pc, #212]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff0:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ff6:	4b32      	ldr	r3, [pc, #200]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffc:	4b30      	ldr	r3, [pc, #192]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ffe:	2204      	movs	r2, #4
 8001000:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001002:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001004:	2200      	movs	r2, #0
 8001006:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001008:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800100a:	2201      	movs	r2, #1
 800100c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800100e:	4b2c      	ldr	r3, [pc, #176]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001010:	2203      	movs	r2, #3
 8001012:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001014:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800101c:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800101e:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 8001022:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001024:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001026:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800102c:	4b24      	ldr	r3, [pc, #144]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001034:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001036:	2200      	movs	r2, #0
 8001038:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800103a:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001042:	481f      	ldr	r0, [pc, #124]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001044:	f006 fa9e 	bl	8007584 <HAL_ADC_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800104e:	f001 fe45 	bl	8002cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001052:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <MX_ADC1_Init+0x100>)
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001056:	2306      	movs	r3, #6
 8001058:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800105a:	2307      	movs	r3, #7
 800105c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800105e:	237f      	movs	r3, #127	@ 0x7f
 8001060:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001062:	2304      	movs	r3, #4
 8001064:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4814      	ldr	r0, [pc, #80]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001070:	f006 fc6c 	bl	800794c <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800107a:	f001 fe2f 	bl	8002cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <MX_ADC1_Init+0x104>)
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001082:	230c      	movs	r3, #12
 8001084:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	480d      	ldr	r0, [pc, #52]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800108c:	f006 fc5e 	bl	800794c <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001096:	f001 fe21 	bl	8002cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <MX_ADC1_Init+0x108>)
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800109e:	2312      	movs	r3, #18
 80010a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 80010a8:	f006 fc50 	bl	800794c <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80010b2:	f001 fe13 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000038c 	.word	0x2000038c
 80010c4:	50040000 	.word	0x50040000
 80010c8:	80000001 	.word	0x80000001
 80010cc:	c7520000 	.word	0xc7520000
 80010d0:	25b00200 	.word	0x25b00200

080010d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a22      	ldr	r2, [pc, #136]	@ (800117c <HAL_ADC_MspInit+0xa8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d13e      	bne.n	8001174 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010f6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010fa:	f7ff ff4b 	bl	8000f94 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff ff48 	bl	8000f94 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001104:	2310      	movs	r3, #16
 8001106:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001108:	2303      	movs	r3, #3
 800110a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f007 fe59 	bl	8008dd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <HAL_ADC_MspInit+0xb0>)
 8001122:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001126:	2205      	movs	r2, #5
 8001128:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001138:	2280      	movs	r2, #128	@ 0x80
 800113a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800113e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001142:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001146:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800114a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800114e:	2220      	movs	r2, #32
 8001150:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800115a:	f007 fa65 	bl	8008628 <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001164:	f001 fdba 	bl	8002cdc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800116c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800116e:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	50040000 	.word	0x50040000
 8001180:	200003f0 	.word	0x200003f0
 8001184:	40020008 	.word	0x40020008

08001188 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a54      	ldr	r2, [pc, #336]	@ (80012e8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001198:	4293      	cmp	r3, r2
 800119a:	f040 8091 	bne.w	80012c0 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 800119e:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f996 	bl	80004d4 <__aeabi_i2d>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	a14a      	add	r1, pc, #296	@ (adr r1, 80012d8 <HAL_ADC_ConvCpltCallback+0x150>)
 80011ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011b2:	f7ff fb23 	bl	80007fc <__aeabi_ddiv>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fceb 	bl	8000b98 <__aeabi_d2f>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a4a      	ldr	r2, [pc, #296]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 80011c6:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80011c8:	4b4a      	ldr	r3, [pc, #296]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x16c>)
 80011ca:	ed93 7a00 	vldr	s14, [r3]
 80011ce:	4b4a      	ldr	r3, [pc, #296]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d8:	ee17 0a90 	vmov	r0, s15
 80011dc:	f7ff f98c 	bl	80004f8 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	f04f 0000 	mov.w	r0, #0
 80011e8:	4944      	ldr	r1, [pc, #272]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x174>)
 80011ea:	f7ff fb07 	bl	80007fc <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4690      	mov	r8, r2
 80011f4:	4699      	mov	r9, r3
 80011f6:	4b3d      	ldr	r3, [pc, #244]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80011f8:	885b      	ldrh	r3, [r3, #2]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f96a 	bl	80004d4 <__aeabi_i2d>
 8001200:	4604      	mov	r4, r0
 8001202:	460d      	mov	r5, r1
 8001204:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f975 	bl	80004f8 <__aeabi_f2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b3b      	ldr	r3, [pc, #236]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x178>)
 8001214:	f7ff faf2 	bl	80007fc <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7ff f9c2 	bl	80005a8 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4614      	mov	r4, r2
 800122a:	461d      	mov	r5, r3
 800122c:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f961 	bl	80004f8 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4620      	mov	r0, r4
 800123c:	4629      	mov	r1, r5
 800123e:	f7fe fffb 	bl	8000238 <__aeabi_dsub>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4640      	mov	r0, r8
 8001248:	4649      	mov	r1, r9
 800124a:	f7ff f9ad 	bl	80005a8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fc9f 	bl	8000b98 <__aeabi_d2f>
 800125a:	ee07 0a10 	vmov	s14, r0
 800125e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001266:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001268:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 800126e:	889b      	ldrh	r3, [r3, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f92f 	bl	80004d4 <__aeabi_i2d>
 8001276:	a31a      	add	r3, pc, #104	@ (adr r3, 80012e0 <HAL_ADC_ConvCpltCallback+0x158>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff fabe 	bl	80007fc <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	f7fe ffd6 	bl	800023c <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4614      	mov	r4, r2
 8001296:	461d      	mov	r5, r3
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f92b 	bl	80004f8 <__aeabi_f2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7ff f97d 	bl	80005a8 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc6f 	bl	8000b98 <__aeabi_d2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <HAL_ADC_ConvCpltCallback+0x180>)
 80012be:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 80012c0:	2203      	movs	r2, #3
 80012c2:	490a      	ldr	r1, [pc, #40]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80012c4:	4811      	ldr	r0, [pc, #68]	@ (800130c <HAL_ADC_ConvCpltCallback+0x184>)
 80012c6:	f006 faa9 	bl	800781c <HAL_ADC_Start_DMA>



}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012d4:	f3af 8000 	nop.w
 80012d8:	d70a3d70 	.word	0xd70a3d70
 80012dc:	40b36323 	.word	0x40b36323
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40affe00 	.word	0x40affe00
 80012e8:	50040000 	.word	0x50040000
 80012ec:	20000888 	.word	0x20000888
 80012f0:	20000894 	.word	0x20000894
 80012f4:	20000008 	.word	0x20000008
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	40590000 	.word	0x40590000
 8001300:	40080000 	.word	0x40080000
 8001304:	20000890 	.word	0x20000890
 8001308:	20000898 	.word	0x20000898
 800130c:	2000038c 	.word	0x2000038c

08001310 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <APPD_EnableCPU2+0x34>)
 8001318:	1d3c      	adds	r4, r7, #4
 800131a:	461d      	mov	r5, r3
 800131c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001320:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001324:	c403      	stmia	r4!, {r0, r1}
 8001326:	8022      	strh	r2, [r4, #0]
 8001328:	3402      	adds	r4, #2
 800132a:	0c13      	lsrs	r3, r2, #16
 800132c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800132e:	f015 fb95 	bl	8016a5c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	4618      	mov	r0, r3
 8001336:	f014 fe26 	bl	8015f86 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800133a:	bf00      	nop
}
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bdb0      	pop	{r4, r5, r7, pc}
 8001342:	bf00      	nop
 8001344:	0801f878 	.word	0x0801f878

08001348 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <LL_C2_PWR_SetPowerMode+0x28>)
 8001352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001356:	f023 0207 	bic.w	r2, r3, #7
 800135a:	4905      	ldr	r1, [pc, #20]	@ (8001370 <LL_C2_PWR_SetPowerMode+0x28>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4313      	orrs	r3, r2
 8001360:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	58000400 	.word	0x58000400

08001374 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <LL_EXTI_EnableIT_32_63+0x24>)
 800137e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001382:	4905      	ldr	r1, [pc, #20]	@ (8001398 <LL_EXTI_EnableIT_32_63+0x24>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4313      	orrs	r3, r2
 8001388:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	58000800 	.word	0x58000800

0800139c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a8:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80013aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80013ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013b6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013c2:	4313      	orrs	r3, r2
 80013c4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	cafecafe 	.word	0xcafecafe

080013d8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80013e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80013ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001404:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <LL_DBGMCU_GetDeviceID+0x18>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e0042000 	.word	0xe0042000

0800141c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001420:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <LL_DBGMCU_GetRevisionID+0x18>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0c1b      	lsrs	r3, r3, #16
 8001426:	b29b      	uxth	r3, r3
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e0042000 	.word	0xe0042000

08001438 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <LL_LPM_EnableSleep+0x1c>)
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	4a04      	ldr	r2, [pc, #16]	@ (8001454 <LL_LPM_EnableSleep+0x1c>)
 8001442:	f023 0304 	bic.w	r3, r3, #4
 8001446:	6113      	str	r3, [r2, #16]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	22ca      	movs	r2, #202	@ 0xca
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2253      	movs	r2, #83	@ 0x53
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 0207 	bic.w	r2, r3, #7
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <MX_APPE_Config+0x18>)
 80014be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014c2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80014c4:	f000 f824 	bl	8001510 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80014c8:	f000 f829 	bl	800151e <Config_HSE>

  return;
 80014cc:	bf00      	nop
}
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	58004000 	.word	0x58004000

080014d4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80014d8:	f000 f835 	bl	8001546 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80014dc:	f000 f84e 	bl	800157c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80014e0:	4903      	ldr	r1, [pc, #12]	@ (80014f0 <MX_APPE_Init+0x1c>)
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 fe3c 	bl	8002160 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80014e8:	f000 f856 	bl	8001598 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80014ec:	bf00      	nop
}
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000d20 	.word	0x20000d20

080014f4 <Init_Smps>:

void Init_Smps(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80014f8:	bf00      	nop
}
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <Init_Exti>:

void Init_Exti(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001506:	2050      	movs	r0, #80	@ 0x50
 8001508:	f7ff ff34 	bl	8001374 <LL_EXTI_EnableIT_32_63>

  return;
 800150c:	bf00      	nop
}
 800150e:	bd80      	pop	{r7, pc}

08001510 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001514:	bf00      	nop
}
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001524:	2000      	movs	r0, #0
 8001526:	f015 fb25 	bl	8016b74 <OTP_Read>
 800152a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	799b      	ldrb	r3, [r3, #6]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff30 	bl	800139c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800153c:	bf00      	nop
 800153e:	bf00      	nop
}
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <System_Init>:

static void System_Init(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  Init_Smps();
 800154a:	f7ff ffd3 	bl	80014f4 <Init_Smps>

  Init_Exti();
 800154e:	f7ff ffd8 	bl	8001502 <Init_Exti>

  Init_Rtc();
 8001552:	f000 f803 	bl	800155c <Init_Rtc>

  return;
 8001556:	bf00      	nop
}
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <Init_Rtc>:

static void Init_Rtc(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <Init_Rtc+0x1c>)
 8001562:	f7ff ff86 	bl	8001472 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001566:	2100      	movs	r1, #0
 8001568:	4803      	ldr	r0, [pc, #12]	@ (8001578 <Init_Rtc+0x1c>)
 800156a:	f7ff ff92 	bl	8001492 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800156e:	4802      	ldr	r0, [pc, #8]	@ (8001578 <Init_Rtc+0x1c>)
 8001570:	f7ff ff72 	bl	8001458 <LL_RTC_EnableWriteProtection>

  return;
 8001574:	bf00      	nop
}
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40002800 	.word	0x40002800

0800157c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001580:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001584:	f7ff ff28 	bl	80013d8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001588:	f017 fd02 	bl	8018f90 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800158c:	2004      	movs	r0, #4
 800158e:	f7ff fedb 	bl	8001348 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001592:	bf00      	nop
}
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800159e:	f015 f8a7 	bl	80166f0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80015a2:	4a11      	ldr	r2, [pc, #68]	@ (80015e8 <appe_Tl_Init+0x50>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	2008      	movs	r0, #8
 80015a8:	f017 fe30 	bl	801920c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <appe_Tl_Init+0x54>)
 80015ae:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <appe_Tl_Init+0x58>)
 80015b2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80015b4:	463b      	mov	r3, r7
 80015b6:	4619      	mov	r1, r3
 80015b8:	480e      	ldr	r0, [pc, #56]	@ (80015f4 <appe_Tl_Init+0x5c>)
 80015ba:	f014 ff5b 	bl	8016474 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <appe_Tl_Init+0x60>)
 80015c0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <appe_Tl_Init+0x64>)
 80015c4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <appe_Tl_Init+0x68>)
 80015c8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80015ca:	f240 533c 	movw	r3, #1340	@ 0x53c
 80015ce:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4618      	mov	r0, r3
 80015d6:	f015 f9cd 	bl	8016974 <TL_MM_Init>

  TL_Enable();
 80015da:	f015 f883 	bl	80166e4 <TL_Enable>

  return;
 80015de:	bf00      	nop
}
 80015e0:	3720      	adds	r7, #32
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	080164ad 	.word	0x080164ad
 80015ec:	20030734 	.word	0x20030734
 80015f0:	08001605 	.word	0x08001605
 80015f4:	0800161d 	.word	0x0800161d
 80015f8:	2003094c 	.word	0x2003094c
 80015fc:	20030840 	.word	0x20030840
 8001600:	200301f8 	.word	0x200301f8

08001604 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800160e:	bf00      	nop
}
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	330b      	adds	r3, #11
 800162a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	b29b      	uxth	r3, r3
 8001632:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001636:	2b07      	cmp	r3, #7
 8001638:	d81f      	bhi.n	800167a <APPE_SysUserEvtRx+0x5e>
 800163a:	a201      	add	r2, pc, #4	@ (adr r2, 8001640 <APPE_SysUserEvtRx+0x24>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	08001661 	.word	0x08001661
 8001644:	08001673 	.word	0x08001673
 8001648:	0800167b 	.word	0x0800167b
 800164c:	0800167b 	.word	0x0800167b
 8001650:	0800167b 	.word	0x0800167b
 8001654:	0800167b 	.word	0x0800167b
 8001658:	0800167b 	.word	0x0800167b
 800165c:	0800167b 	.word	0x0800167b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4618      	mov	r0, r3
 8001666:	f014 fcbb 	bl	8015fe0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f81b 	bl	80016a6 <APPE_SysEvtReadyProcessing>
    break;
 8001670:	e004      	b.n	800167c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f806 	bl	8001684 <APPE_SysEvtError>
    break;
 8001678:	e000      	b.n	800167c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800167a:	bf00      	nop
  }

  return;
 800167c:	bf00      	nop
}
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	330b      	adds	r3, #11
 8001692:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3302      	adds	r3, #2
 8001698:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800169a:	bf00      	nop
}
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b08a      	sub	sp, #40	@ 0x28
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	330b      	adds	r3, #11
 80016ca:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	3302      	adds	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11d      	bne.n	8001716 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80016da:	f7ff fe19 	bl	8001310 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80016de:	230f      	movs	r3, #15
 80016e0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80016e2:	237f      	movs	r3, #127	@ 0x7f
 80016e4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80016e6:	f7ff fe99 	bl	800141c <LL_DBGMCU_GetRevisionID>
 80016ea:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80016f2:	f7ff fe85 	bl	8001400 <LL_DBGMCU_GetDeviceID>
 80016f6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4618      	mov	r0, r3
 8001704:	f014 fc56 	bl	8015fb4 <SHCI_C2_Config>

    APP_BLE_Init();
 8001708:	f016 f838 	bl	801777c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800170c:	2100      	movs	r1, #0
 800170e:	2001      	movs	r0, #1
 8001710:	f017 fc50 	bl	8018fb4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001714:	e007      	b.n	8001726 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d103      	bne.n	8001726 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
  return;
 8001724:	bf00      	nop
 8001726:	bf00      	nop
}
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001736:	f005 fd39 	bl	80071ac <HAL_GetTick>
 800173a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001746:	d00a      	beq.n	800175e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001748:	f005 fd48 	bl	80071dc <HAL_GetTickFreq>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001756:	e002      	b.n	800175e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001758:	f7ff fe6e 	bl	8001438 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 800175c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800175e:	f005 fd25 	bl	80071ac <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	429a      	cmp	r2, r3
 800176c:	d8f4      	bhi.n	8001758 <HAL_Delay+0x2a>
  }
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f017 fc48 	bl	8019014 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800178c:	bf00      	nop
}
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f017 fc36 	bl	8019014 <UTIL_SEQ_Run>
  return;
 80017a8:	bf00      	nop
}
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80017b8:	2100      	movs	r1, #0
 80017ba:	2008      	movs	r0, #8
 80017bc:	f017 fd48 	bl	8019250 <UTIL_SEQ_SetTask>
  return;
 80017c0:	bf00      	nop
}
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017d0:	2002      	movs	r0, #2
 80017d2:	f017 fda9 	bl	8019328 <UTIL_SEQ_SetEvt>
  return;
 80017d6:	bf00      	nop
}
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017e6:	2002      	movs	r0, #2
 80017e8:	f017 fdbe 	bl	8019368 <UTIL_SEQ_WaitEvt>
  return;
 80017ec:	bf00      	nop
}
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <LL_AHB1_GRP1_EnableClock>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001800:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001802:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4313      	orrs	r3, r2
 800180a:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001810:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001818:	68fb      	ldr	r3, [r7, #12]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800182a:	2004      	movs	r0, #4
 800182c:	f7ff ffe2 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001830:	2001      	movs	r0, #1
 8001832:	f7ff ffdf 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 4, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2104      	movs	r1, #4
 800183a:	200b      	movs	r0, #11
 800183c:	f006 fe95 	bl	800856a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001840:	200b      	movs	r0, #11
 8001842:	f006 feac 	bl	800859e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2102      	movs	r1, #2
 800184a:	200c      	movs	r0, #12
 800184c:	f006 fe8d 	bl	800856a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001850:	200c      	movs	r0, #12
 8001852:	f006 fea4 	bl	800859e <HAL_NVIC_EnableIRQ>

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}

0800185a <LL_AHB2_GRP1_EnableClock>:
{
 800185a:	b480      	push	{r7}
 800185c:	b085      	sub	sp, #20
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001866:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001868:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4313      	orrs	r3, r2
 8001870:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001876:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4013      	ands	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a0:	2004      	movs	r0, #4
 80018a2:	f7ff ffda 	bl	800185a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	2002      	movs	r0, #2
 80018a8:	f7ff ffd7 	bl	800185a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ac:	2001      	movs	r0, #1
 80018ae:	f7ff ffd4 	bl	800185a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2101      	movs	r1, #1
 80018b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ba:	f007 fcef 	bl	800929c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2183      	movs	r1, #131	@ 0x83
 80018c2:	481b      	ldr	r0, [pc, #108]	@ (8001930 <MX_GPIO_Init+0xa4>)
 80018c4:	f007 fcea 	bl	800929c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018c8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80018cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018ce:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80018d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	4619      	mov	r1, r3
 80018dc:	4815      	ldr	r0, [pc, #84]	@ (8001934 <MX_GPIO_Init+0xa8>)
 80018de:	f007 fa77 	bl	8008dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018e2:	2301      	movs	r3, #1
 80018e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018fa:	f007 fa69 	bl	8008dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|SPI_CS_Pin;
 80018fe:	2383      	movs	r3, #131	@ 0x83
 8001900:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	4619      	mov	r1, r3
 8001912:	4807      	ldr	r0, [pc, #28]	@ (8001930 <MX_GPIO_Init+0xa4>)
 8001914:	f007 fa5c 	bl	8008dd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2101      	movs	r1, #1
 800191c:	2028      	movs	r0, #40	@ 0x28
 800191e:	f006 fe24 	bl	800856a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001922:	2028      	movs	r0, #40	@ 0x28
 8001924:	f006 fe3b 	bl	800859e <HAL_NVIC_EnableIRQ>

}
 8001928:	bf00      	nop
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	48000400 	.word	0x48000400
 8001934:	48000800 	.word	0x48000800

08001938 <LL_EXTI_EnableIT_0_31>:
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <LL_EXTI_EnableIT_0_31+0x24>)
 8001942:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001946:	4905      	ldr	r1, [pc, #20]	@ (800195c <LL_EXTI_EnableIT_0_31+0x24>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4313      	orrs	r3, r2
 800194c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	58000800 	.word	0x58000800

08001960 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001968:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4904      	ldr	r1, [pc, #16]	@ (8001980 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]

}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	58000800 	.word	0x58000800

08001984 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800198a:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <ReadRtcSsrValue+0x3c>)
 800198c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198e:	b29b      	uxth	r3, r3
 8001990:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001992:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <ReadRtcSsrValue+0x3c>)
 8001994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001996:	b29b      	uxth	r3, r3
 8001998:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800199a:	e005      	b.n	80019a8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019a0:	4b07      	ldr	r3, [pc, #28]	@ (80019c0 <ReadRtcSsrValue+0x3c>)
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d1f5      	bne.n	800199c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80019b0:	683b      	ldr	r3, [r7, #0]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40002800 	.word	0x40002800

080019c4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	460a      	mov	r2, r1
 80019ce:	71fb      	strb	r3, [r7, #7]
 80019d0:	4613      	mov	r3, r2
 80019d2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80019d4:	79ba      	ldrb	r2, [r7, #6]
 80019d6:	491d      	ldr	r1, [pc, #116]	@ (8001a4c <LinkTimerAfter+0x88>)
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	3315      	adds	r3, #21
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d009      	beq.n	8001a02 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80019ee:	7bfa      	ldrb	r2, [r7, #15]
 80019f0:	4916      	ldr	r1, [pc, #88]	@ (8001a4c <LinkTimerAfter+0x88>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	440b      	add	r3, r1
 80019fc:	3314      	adds	r3, #20
 80019fe:	79fa      	ldrb	r2, [r7, #7]
 8001a00:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001a02:	79fa      	ldrb	r2, [r7, #7]
 8001a04:	4911      	ldr	r1, [pc, #68]	@ (8001a4c <LinkTimerAfter+0x88>)
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	3315      	adds	r3, #21
 8001a12:	7bfa      	ldrb	r2, [r7, #15]
 8001a14:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001a16:	79fa      	ldrb	r2, [r7, #7]
 8001a18:	490c      	ldr	r1, [pc, #48]	@ (8001a4c <LinkTimerAfter+0x88>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	440b      	add	r3, r1
 8001a24:	3314      	adds	r3, #20
 8001a26:	79ba      	ldrb	r2, [r7, #6]
 8001a28:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001a2a:	79ba      	ldrb	r2, [r7, #6]
 8001a2c:	4907      	ldr	r1, [pc, #28]	@ (8001a4c <LinkTimerAfter+0x88>)
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	440b      	add	r3, r1
 8001a38:	3315      	adds	r3, #21
 8001a3a:	79fa      	ldrb	r2, [r7, #7]
 8001a3c:	701a      	strb	r2, [r3, #0]

  return;
 8001a3e:	bf00      	nop
}
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000450 	.word	0x20000450

08001a50 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	460a      	mov	r2, r1
 8001a5a:	71fb      	strb	r3, [r7, #7]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001a60:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <LinkTimerBefore+0xb8>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	79ba      	ldrb	r2, [r7, #6]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d032      	beq.n	8001ad2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001a6c:	79ba      	ldrb	r2, [r7, #6]
 8001a6e:	4927      	ldr	r1, [pc, #156]	@ (8001b0c <LinkTimerBefore+0xbc>)
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	440b      	add	r3, r1
 8001a7a:	3314      	adds	r3, #20
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	4922      	ldr	r1, [pc, #136]	@ (8001b0c <LinkTimerBefore+0xbc>)
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3315      	adds	r3, #21
 8001a90:	79fa      	ldrb	r2, [r7, #7]
 8001a92:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001a94:	79fa      	ldrb	r2, [r7, #7]
 8001a96:	491d      	ldr	r1, [pc, #116]	@ (8001b0c <LinkTimerBefore+0xbc>)
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3315      	adds	r3, #21
 8001aa4:	79ba      	ldrb	r2, [r7, #6]
 8001aa6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001aa8:	79fa      	ldrb	r2, [r7, #7]
 8001aaa:	4918      	ldr	r1, [pc, #96]	@ (8001b0c <LinkTimerBefore+0xbc>)
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3314      	adds	r3, #20
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001abc:	79ba      	ldrb	r2, [r7, #6]
 8001abe:	4913      	ldr	r1, [pc, #76]	@ (8001b0c <LinkTimerBefore+0xbc>)
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	3314      	adds	r3, #20
 8001acc:	79fa      	ldrb	r2, [r7, #7]
 8001ace:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001ad0:	e014      	b.n	8001afc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001ad2:	79fa      	ldrb	r2, [r7, #7]
 8001ad4:	490d      	ldr	r1, [pc, #52]	@ (8001b0c <LinkTimerBefore+0xbc>)
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	440b      	add	r3, r1
 8001ae0:	3315      	adds	r3, #21
 8001ae2:	79ba      	ldrb	r2, [r7, #6]
 8001ae4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001ae6:	79ba      	ldrb	r2, [r7, #6]
 8001ae8:	4908      	ldr	r1, [pc, #32]	@ (8001b0c <LinkTimerBefore+0xbc>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	3314      	adds	r3, #20
 8001af6:	79fa      	ldrb	r2, [r7, #7]
 8001af8:	701a      	strb	r2, [r3, #0]
  return;
 8001afa:	bf00      	nop
}
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	200004e0 	.word	0x200004e0
 8001b0c:	20000450 	.word	0x20000450

08001b10 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b1a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c54 <linkTimer+0x144>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b06      	cmp	r3, #6
 8001b22:	d118      	bne.n	8001b56 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b24:	4b4b      	ldr	r3, [pc, #300]	@ (8001c54 <linkTimer+0x144>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c58 <linkTimer+0x148>)
 8001b2c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001b2e:	4a49      	ldr	r2, [pc, #292]	@ (8001c54 <linkTimer+0x144>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001b34:	79fa      	ldrb	r2, [r7, #7]
 8001b36:	4949      	ldr	r1, [pc, #292]	@ (8001c5c <linkTimer+0x14c>)
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	440b      	add	r3, r1
 8001b42:	3315      	adds	r3, #21
 8001b44:	2206      	movs	r2, #6
 8001b46:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b48:	4b45      	ldr	r3, [pc, #276]	@ (8001c60 <linkTimer+0x150>)
 8001b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	81fb      	strh	r3, [r7, #14]
 8001b54:	e078      	b.n	8001c48 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001b56:	f000 f909 	bl	8001d6c <ReturnTimeElapsed>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001b5e:	79fa      	ldrb	r2, [r7, #7]
 8001b60:	493e      	ldr	r1, [pc, #248]	@ (8001c5c <linkTimer+0x14c>)
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3308      	adds	r3, #8
 8001b6e:	6819      	ldr	r1, [r3, #0]
 8001b70:	89fb      	ldrh	r3, [r7, #14]
 8001b72:	79fa      	ldrb	r2, [r7, #7]
 8001b74:	4419      	add	r1, r3
 8001b76:	4839      	ldr	r0, [pc, #228]	@ (8001c5c <linkTimer+0x14c>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4403      	add	r3, r0
 8001b82:	3308      	adds	r3, #8
 8001b84:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001b86:	79fa      	ldrb	r2, [r7, #7]
 8001b88:	4934      	ldr	r1, [pc, #208]	@ (8001c5c <linkTimer+0x14c>)
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	3308      	adds	r3, #8
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c54 <linkTimer+0x144>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4a2e      	ldr	r2, [pc, #184]	@ (8001c5c <linkTimer+0x14c>)
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	440b      	add	r3, r1
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4413      	add	r3, r2
 8001bae:	3308      	adds	r3, #8
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d337      	bcc.n	8001c28 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001bb8:	4b26      	ldr	r3, [pc, #152]	@ (8001c54 <linkTimer+0x144>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001bbe:	7b7a      	ldrb	r2, [r7, #13]
 8001bc0:	4926      	ldr	r1, [pc, #152]	@ (8001c5c <linkTimer+0x14c>)
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	3315      	adds	r3, #21
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001bd2:	e013      	b.n	8001bfc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001bd4:	7b7a      	ldrb	r2, [r7, #13]
 8001bd6:	4921      	ldr	r1, [pc, #132]	@ (8001c5c <linkTimer+0x14c>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	3315      	adds	r3, #21
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001be8:	7b7a      	ldrb	r2, [r7, #13]
 8001bea:	491c      	ldr	r1, [pc, #112]	@ (8001c5c <linkTimer+0x14c>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3315      	adds	r3, #21
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001bfc:	7b3b      	ldrb	r3, [r7, #12]
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d00b      	beq.n	8001c1a <linkTimer+0x10a>
 8001c02:	7b3a      	ldrb	r2, [r7, #12]
 8001c04:	4915      	ldr	r1, [pc, #84]	@ (8001c5c <linkTimer+0x14c>)
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	440b      	add	r3, r1
 8001c10:	3308      	adds	r3, #8
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d2dc      	bcs.n	8001bd4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001c1a:	7b7a      	ldrb	r2, [r7, #13]
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fecf 	bl	80019c4 <LinkTimerAfter>
 8001c26:	e00f      	b.n	8001c48 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <linkTimer+0x144>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	4611      	mov	r1, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ff0c 	bl	8001a50 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <linkTimer+0x144>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <linkTimer+0x148>)
 8001c40:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001c42:	4a04      	ldr	r2, [pc, #16]	@ (8001c54 <linkTimer+0x144>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001c48:	89fb      	ldrh	r3, [r7, #14]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200004e0 	.word	0x200004e0
 8001c58:	200004e1 	.word	0x200004e1
 8001c5c:	20000450 	.word	0x20000450
 8001c60:	200004e4 	.word	0x200004e4

08001c64 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	4613      	mov	r3, r2
 8001c72:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001c74:	4b39      	ldr	r3, [pc, #228]	@ (8001d5c <UnlinkTimer+0xf8>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	79fa      	ldrb	r2, [r7, #7]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d111      	bne.n	8001ca4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001c80:	4b36      	ldr	r3, [pc, #216]	@ (8001d5c <UnlinkTimer+0xf8>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b36      	ldr	r3, [pc, #216]	@ (8001d60 <UnlinkTimer+0xfc>)
 8001c88:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001c8a:	79fa      	ldrb	r2, [r7, #7]
 8001c8c:	4935      	ldr	r1, [pc, #212]	@ (8001d64 <UnlinkTimer+0x100>)
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	3315      	adds	r3, #21
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d5c <UnlinkTimer+0xf8>)
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	e03e      	b.n	8001d22 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001ca4:	79fa      	ldrb	r2, [r7, #7]
 8001ca6:	492f      	ldr	r1, [pc, #188]	@ (8001d64 <UnlinkTimer+0x100>)
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3314      	adds	r3, #20
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001cb8:	79fa      	ldrb	r2, [r7, #7]
 8001cba:	492a      	ldr	r1, [pc, #168]	@ (8001d64 <UnlinkTimer+0x100>)
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3315      	adds	r3, #21
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001ccc:	79f9      	ldrb	r1, [r7, #7]
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	4824      	ldr	r0, [pc, #144]	@ (8001d64 <UnlinkTimer+0x100>)
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	440b      	add	r3, r1
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4403      	add	r3, r0
 8001cdc:	3315      	adds	r3, #21
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b2d8      	uxtb	r0, r3
 8001ce2:	4920      	ldr	r1, [pc, #128]	@ (8001d64 <UnlinkTimer+0x100>)
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	440b      	add	r3, r1
 8001cee:	3315      	adds	r3, #21
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001cf4:	7bbb      	ldrb	r3, [r7, #14]
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d013      	beq.n	8001d22 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001cfa:	79f9      	ldrb	r1, [r7, #7]
 8001cfc:	7bba      	ldrb	r2, [r7, #14]
 8001cfe:	4819      	ldr	r0, [pc, #100]	@ (8001d64 <UnlinkTimer+0x100>)
 8001d00:	460b      	mov	r3, r1
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	440b      	add	r3, r1
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4403      	add	r3, r0
 8001d0a:	3314      	adds	r3, #20
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	b2d8      	uxtb	r0, r3
 8001d10:	4914      	ldr	r1, [pc, #80]	@ (8001d64 <UnlinkTimer+0x100>)
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3314      	adds	r3, #20
 8001d1e:	4602      	mov	r2, r0
 8001d20:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001d22:	79fa      	ldrb	r2, [r7, #7]
 8001d24:	490f      	ldr	r1, [pc, #60]	@ (8001d64 <UnlinkTimer+0x100>)
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	440b      	add	r3, r1
 8001d30:	330c      	adds	r3, #12
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <UnlinkTimer+0xf8>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b06      	cmp	r3, #6
 8001d3e:	d107      	bne.n	8001d50 <UnlinkTimer+0xec>
 8001d40:	79bb      	ldrb	r3, [r7, #6]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d104      	bne.n	8001d50 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d46:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <UnlinkTimer+0x104>)
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4c:	601a      	str	r2, [r3, #0]
  }

  return;
 8001d4e:	bf00      	nop
 8001d50:	bf00      	nop
}
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	200004e0 	.word	0x200004e0
 8001d60:	200004e1 	.word	0x200004e1
 8001d64:	20000450 	.word	0x20000450
 8001d68:	200004e4 	.word	0x200004e4

08001d6c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001d72:	4b1a      	ldr	r3, [pc, #104]	@ (8001ddc <ReturnTimeElapsed+0x70>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7a:	d026      	beq.n	8001dca <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001d7c:	f7ff fe02 	bl	8001984 <ReadRtcSsrValue>
 8001d80:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001d82:	4b16      	ldr	r3, [pc, #88]	@ (8001ddc <ReturnTimeElapsed+0x70>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d805      	bhi.n	8001d98 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001d8c:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <ReturnTimeElapsed+0x70>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	e00a      	b.n	8001dae <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <ReturnTimeElapsed+0x74>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001da4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <ReturnTimeElapsed+0x70>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001dae:	4b0d      	ldr	r3, [pc, #52]	@ (8001de4 <ReturnTimeElapsed+0x78>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	fb02 f303 	mul.w	r3, r2, r3
 8001dba:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <ReturnTimeElapsed+0x7c>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	40d3      	lsrs	r3, r2
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	e001      	b.n	8001dce <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	b29b      	uxth	r3, r3
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200004e4 	.word	0x200004e4
 8001de0:	200004ec 	.word	0x200004ec
 8001de4:	200004ea 	.word	0x200004ea
 8001de8:	200004e9 	.word	0x200004e9

08001dec <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d108      	bne.n	8001e0e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001dfc:	f7ff fdc2 	bl	8001984 <ReadRtcSsrValue>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4a21      	ldr	r2, [pc, #132]	@ (8001e88 <RestartWakeupCounter+0x9c>)
 8001e04:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001e06:	2003      	movs	r0, #3
 8001e08:	f006 fbf1 	bl	80085ee <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001e0c:	e039      	b.n	8001e82 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d803      	bhi.n	8001e1c <RestartWakeupCounter+0x30>
 8001e14:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <RestartWakeupCounter+0xa0>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d002      	beq.n	8001e22 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001e22:	bf00      	nop
 8001e24:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <RestartWakeupCounter+0xa4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f8      	beq.n	8001e24 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001e32:	4b17      	ldr	r3, [pc, #92]	@ (8001e90 <RestartWakeupCounter+0xa4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <RestartWakeupCounter+0xa4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001e42:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e44:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <RestartWakeupCounter+0xa8>)
 8001e46:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e4a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f006 fbdc 	bl	800860a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001e52:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <RestartWakeupCounter+0xac>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	0c1b      	lsrs	r3, r3, #16
 8001e58:	041b      	lsls	r3, r3, #16
 8001e5a:	88fa      	ldrh	r2, [r7, #6]
 8001e5c:	490e      	ldr	r1, [pc, #56]	@ (8001e98 <RestartWakeupCounter+0xac>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e62:	f7ff fd8f 	bl	8001984 <ReadRtcSsrValue>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a07      	ldr	r2, [pc, #28]	@ (8001e88 <RestartWakeupCounter+0x9c>)
 8001e6a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001e6c:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <RestartWakeupCounter+0xa4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <RestartWakeupCounter+0xa4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e7a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001e7c:	f3af 8000 	nop.w
  return ;
 8001e80:	bf00      	nop
}
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	200004e4 	.word	0x200004e4
 8001e8c:	200004e9 	.word	0x200004e9
 8001e90:	20000d20 	.word	0x20000d20
 8001e94:	58000800 	.word	0x58000800
 8001e98:	40002800 	.word	0x40002800

08001e9c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ea2:	4b45      	ldr	r3, [pc, #276]	@ (8001fb8 <RescheduleTimerList+0x11c>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eae:	d107      	bne.n	8001ec0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001eb0:	bf00      	nop
 8001eb2:	4b42      	ldr	r3, [pc, #264]	@ (8001fbc <RescheduleTimerList+0x120>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f8      	bne.n	8001eb2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001ec0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fbc <RescheduleTimerList+0x120>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	@ (8001fbc <RescheduleTimerList+0x120>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ece:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc0 <RescheduleTimerList+0x124>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	493a      	ldr	r1, [pc, #232]	@ (8001fc4 <RescheduleTimerList+0x128>)
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	3308      	adds	r3, #8
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001eea:	f7ff ff3f 	bl	8001d6c <ReturnTimeElapsed>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d205      	bcs.n	8001f06 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001efe:	4b32      	ldr	r3, [pc, #200]	@ (8001fc8 <RescheduleTimerList+0x12c>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	e04d      	b.n	8001fa2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	4a30      	ldr	r2, [pc, #192]	@ (8001fcc <RescheduleTimerList+0x130>)
 8001f0a:	8812      	ldrh	r2, [r2, #0]
 8001f0c:	b292      	uxth	r2, r2
 8001f0e:	4413      	add	r3, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d906      	bls.n	8001f26 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001f18:	4b2c      	ldr	r3, [pc, #176]	@ (8001fcc <RescheduleTimerList+0x130>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc8 <RescheduleTimerList+0x12c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
 8001f24:	e03d      	b.n	8001fa2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f30:	4b25      	ldr	r3, [pc, #148]	@ (8001fc8 <RescheduleTimerList+0x12c>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f36:	e034      	b.n	8001fa2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	4922      	ldr	r1, [pc, #136]	@ (8001fc4 <RescheduleTimerList+0x128>)
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	440b      	add	r3, r1
 8001f46:	3308      	adds	r3, #8
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d20a      	bcs.n	8001f66 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	491c      	ldr	r1, [pc, #112]	@ (8001fc4 <RescheduleTimerList+0x128>)
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3308      	adds	r3, #8
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e013      	b.n	8001f8e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	4916      	ldr	r1, [pc, #88]	@ (8001fc4 <RescheduleTimerList+0x128>)
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	440b      	add	r3, r1
 8001f74:	3308      	adds	r3, #8
 8001f76:	6819      	ldr	r1, [r3, #0]
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	1ac9      	subs	r1, r1, r3
 8001f7e:	4811      	ldr	r0, [pc, #68]	@ (8001fc4 <RescheduleTimerList+0x128>)
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4403      	add	r3, r0
 8001f8a:	3308      	adds	r3, #8
 8001f8c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	490c      	ldr	r1, [pc, #48]	@ (8001fc4 <RescheduleTimerList+0x128>)
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3315      	adds	r3, #21
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	2b06      	cmp	r3, #6
 8001fa6:	d1c7      	bne.n	8001f38 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001fa8:	89bb      	ldrh	r3, [r7, #12]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ff1e 	bl	8001dec <RestartWakeupCounter>

  return ;
 8001fb0:	bf00      	nop
}
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40002800 	.word	0x40002800
 8001fbc:	20000d20 	.word	0x20000d20
 8001fc0:	200004e0 	.word	0x200004e0
 8001fc4:	20000450 	.word	0x20000450
 8001fc8:	200004e8 	.word	0x200004e8
 8001fcc:	200004ee 	.word	0x200004ee

08001fd0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	@ 0x28
 8001fd4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8001fda:	617b      	str	r3, [r7, #20]
  return(result);
 8001fdc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe0:	b672      	cpsid	i
}
 8001fe2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fe4:	4b59      	ldr	r3, [pc, #356]	@ (800214c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	22ca      	movs	r2, #202	@ 0xca
 8001fea:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fec:	4b57      	ldr	r3, [pc, #348]	@ (800214c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2253      	movs	r2, #83	@ 0x53
 8001ff2:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001ff4:	4b55      	ldr	r3, [pc, #340]	@ (800214c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	4b54      	ldr	r3, [pc, #336]	@ (800214c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002002:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002004:	4b52      	ldr	r3, [pc, #328]	@ (8002150 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800200c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002010:	4950      	ldr	r1, [pc, #320]	@ (8002154 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	440b      	add	r3, r1
 800201c:	330c      	adds	r3, #12
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d16e      	bne.n	8002104 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002026:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800202a:	494a      	ldr	r1, [pc, #296]	@ (8002154 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800203a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800203e:	4945      	ldr	r1, [pc, #276]	@ (8002154 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	3310      	adds	r3, #16
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002050:	4b41      	ldr	r3, [pc, #260]	@ (8002158 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d04c      	beq.n	80020f4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800205a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800205e:	493d      	ldr	r1, [pc, #244]	@ (8002154 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	330d      	adds	r3, #13
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d124      	bne.n	80020be <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002074:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002078:	2101      	movs	r1, #1
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fdf2 	bl	8001c64 <UnlinkTimer>
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002082:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f383 8810 	msr	PRIMASK, r3
}
 800208a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800208c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002090:	4930      	ldr	r1, [pc, #192]	@ (8002154 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	3304      	adds	r3, #4
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f9b8 	bl	800241c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020ac:	4b27      	ldr	r3, [pc, #156]	@ (800214c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	22ca      	movs	r2, #202	@ 0xca
 80020b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80020b4:	4b25      	ldr	r3, [pc, #148]	@ (800214c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2253      	movs	r2, #83	@ 0x53
 80020ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80020bc:	e012      	b.n	80020e4 <HW_TS_RTC_Wakeup_Handler+0x114>
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f383 8810 	msr	PRIMASK, r3
}
 80020c8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80020ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f920 	bl	8002314 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020d4:	4b1d      	ldr	r3, [pc, #116]	@ (800214c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	22ca      	movs	r2, #202	@ 0xca
 80020da:	625a      	str	r2, [r3, #36]	@ 0x24
 80020dc:	4b1b      	ldr	r3, [pc, #108]	@ (800214c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2253      	movs	r2, #83	@ 0x53
 80020e2:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80020e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	4619      	mov	r1, r3
 80020ec:	69b8      	ldr	r0, [r7, #24]
 80020ee:	f000 fa1b 	bl	8002528 <HW_TS_RTC_Int_AppNot>
 80020f2:	e022      	b.n	800213a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80020f4:	f7ff fed2 	bl	8001e9c <RescheduleTimerList>
 80020f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f383 8810 	msr	PRIMASK, r3
}
 8002102:	e01a      	b.n	800213a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002104:	bf00      	nop
 8002106:	4b11      	ldr	r3, [pc, #68]	@ (800214c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f8      	beq.n	8002106 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002114:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002124:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002126:	4b0d      	ldr	r3, [pc, #52]	@ (800215c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002128:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f383 8810 	msr	PRIMASK, r3
}
 8002138:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800213a:	4b04      	ldr	r3, [pc, #16]	@ (800214c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	22ff      	movs	r2, #255	@ 0xff
 8002140:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002142:	bf00      	nop
}
 8002144:	3728      	adds	r7, #40	@ 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000d20 	.word	0x20000d20
 8002150:	200004e0 	.word	0x200004e0
 8002154:	20000450 	.word	0x20000450
 8002158:	200004e8 	.word	0x200004e8
 800215c:	58000800 	.word	0x58000800

08002160 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800216c:	4b5e      	ldr	r3, [pc, #376]	@ (80022e8 <HW_TS_Init+0x188>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	22ca      	movs	r2, #202	@ 0xca
 8002172:	625a      	str	r2, [r3, #36]	@ 0x24
 8002174:	4b5c      	ldr	r3, [pc, #368]	@ (80022e8 <HW_TS_Init+0x188>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2253      	movs	r2, #83	@ 0x53
 800217a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800217c:	4b5b      	ldr	r3, [pc, #364]	@ (80022ec <HW_TS_Init+0x18c>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	4a5a      	ldr	r2, [pc, #360]	@ (80022ec <HW_TS_Init+0x18c>)
 8002182:	f043 0320 	orr.w	r3, r3, #32
 8002186:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002188:	4b58      	ldr	r3, [pc, #352]	@ (80022ec <HW_TS_Init+0x18c>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f1c3 0304 	rsb	r3, r3, #4
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4b55      	ldr	r3, [pc, #340]	@ (80022f0 <HW_TS_Init+0x190>)
 800219c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800219e:	4b53      	ldr	r3, [pc, #332]	@ (80022ec <HW_TS_Init+0x18c>)
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80021a6:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80021aa:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	fa92 f2a2 	rbit	r2, r2
 80021b2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	2a00      	cmp	r2, #0
 80021bc:	d101      	bne.n	80021c2 <HW_TS_Init+0x62>
  {
    return 32U;
 80021be:	2220      	movs	r2, #32
 80021c0:	e003      	b.n	80021ca <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	fab2 f282 	clz	r2, r2
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	40d3      	lsrs	r3, r2
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b48      	ldr	r3, [pc, #288]	@ (80022f4 <HW_TS_Init+0x194>)
 80021d4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80021d6:	4b45      	ldr	r3, [pc, #276]	@ (80022ec <HW_TS_Init+0x18c>)
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3301      	adds	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	4b44      	ldr	r3, [pc, #272]	@ (80022f8 <HW_TS_Init+0x198>)
 80021e8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80021ea:	4b43      	ldr	r3, [pc, #268]	@ (80022f8 <HW_TS_Init+0x198>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	4a40      	ldr	r2, [pc, #256]	@ (80022f4 <HW_TS_Init+0x194>)
 80021f2:	7812      	ldrb	r2, [r2, #0]
 80021f4:	fb02 f303 	mul.w	r3, r2, r3
 80021f8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80021fc:	4a3c      	ldr	r2, [pc, #240]	@ (80022f0 <HW_TS_Init+0x190>)
 80021fe:	7812      	ldrb	r2, [r2, #0]
 8002200:	40d3      	lsrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800220a:	4293      	cmp	r3, r2
 800220c:	d904      	bls.n	8002218 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800220e:	4b3b      	ldr	r3, [pc, #236]	@ (80022fc <HW_TS_Init+0x19c>)
 8002210:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002214:	801a      	strh	r2, [r3, #0]
 8002216:	e003      	b.n	8002220 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	b29a      	uxth	r2, r3
 800221c:	4b37      	ldr	r3, [pc, #220]	@ (80022fc <HW_TS_Init+0x19c>)
 800221e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002220:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002224:	f7ff fb9c 	bl	8001960 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002228:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800222c:	f7ff fb84 	bl	8001938 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d13d      	bne.n	80022b2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002236:	4b32      	ldr	r3, [pc, #200]	@ (8002300 <HW_TS_Init+0x1a0>)
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800223c:	4b31      	ldr	r3, [pc, #196]	@ (8002304 <HW_TS_Init+0x1a4>)
 800223e:	f04f 32ff 	mov.w	r2, #4294967295
 8002242:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002244:	2300      	movs	r3, #0
 8002246:	77fb      	strb	r3, [r7, #31]
 8002248:	e00c      	b.n	8002264 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800224a:	7ffa      	ldrb	r2, [r7, #31]
 800224c:	492e      	ldr	r1, [pc, #184]	@ (8002308 <HW_TS_Init+0x1a8>)
 800224e:	4613      	mov	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	440b      	add	r3, r1
 8002258:	330c      	adds	r3, #12
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800225e:	7ffb      	ldrb	r3, [r7, #31]
 8002260:	3301      	adds	r3, #1
 8002262:	77fb      	strb	r3, [r7, #31]
 8002264:	7ffb      	ldrb	r3, [r7, #31]
 8002266:	2b05      	cmp	r3, #5
 8002268:	d9ef      	bls.n	800224a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800226a:	4b28      	ldr	r3, [pc, #160]	@ (800230c <HW_TS_Init+0x1ac>)
 800226c:	2206      	movs	r2, #6
 800226e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002270:	4b1d      	ldr	r3, [pc, #116]	@ (80022e8 <HW_TS_Init+0x188>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	4b1c      	ldr	r3, [pc, #112]	@ (80022e8 <HW_TS_Init+0x188>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800227e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002280:	4b19      	ldr	r3, [pc, #100]	@ (80022e8 <HW_TS_Init+0x188>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	4b17      	ldr	r3, [pc, #92]	@ (80022e8 <HW_TS_Init+0x188>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002290:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002292:	4b1f      	ldr	r3, [pc, #124]	@ (8002310 <HW_TS_Init+0x1b0>)
 8002294:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002298:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800229a:	2003      	movs	r0, #3
 800229c:	f006 f9b5 	bl	800860a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80022a0:	4b11      	ldr	r3, [pc, #68]	@ (80022e8 <HW_TS_Init+0x188>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <HW_TS_Init+0x188>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	e009      	b.n	80022c6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80022b2:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <HW_TS_Init+0x188>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80022c0:	2003      	movs	r0, #3
 80022c2:	f006 f994 	bl	80085ee <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80022c6:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <HW_TS_Init+0x188>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	22ff      	movs	r2, #255	@ 0xff
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80022ce:	2200      	movs	r2, #0
 80022d0:	2103      	movs	r1, #3
 80022d2:	2003      	movs	r0, #3
 80022d4:	f006 f949 	bl	800856a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80022d8:	2003      	movs	r0, #3
 80022da:	f006 f960 	bl	800859e <HAL_NVIC_EnableIRQ>

  return;
 80022de:	bf00      	nop
}
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000d20 	.word	0x20000d20
 80022ec:	40002800 	.word	0x40002800
 80022f0:	200004e9 	.word	0x200004e9
 80022f4:	200004ea 	.word	0x200004ea
 80022f8:	200004ec 	.word	0x200004ec
 80022fc:	200004ee 	.word	0x200004ee
 8002300:	200004e8 	.word	0x200004e8
 8002304:	200004e4 	.word	0x200004e4
 8002308:	20000450 	.word	0x20000450
 800230c:	200004e0 	.word	0x200004e0
 8002310:	58000800 	.word	0x58000800

08002314 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800231e:	f3ef 8310 	mrs	r3, PRIMASK
 8002322:	60fb      	str	r3, [r7, #12]
  return(result);
 8002324:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002326:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002328:	b672      	cpsid	i
}
 800232a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800232c:	2003      	movs	r0, #3
 800232e:	f006 f944 	bl	80085ba <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002332:	4b34      	ldr	r3, [pc, #208]	@ (8002404 <HW_TS_Stop+0xf0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	22ca      	movs	r2, #202	@ 0xca
 8002338:	625a      	str	r2, [r3, #36]	@ 0x24
 800233a:	4b32      	ldr	r3, [pc, #200]	@ (8002404 <HW_TS_Stop+0xf0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2253      	movs	r2, #83	@ 0x53
 8002340:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002342:	79fa      	ldrb	r2, [r7, #7]
 8002344:	4930      	ldr	r1, [pc, #192]	@ (8002408 <HW_TS_Stop+0xf4>)
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	440b      	add	r3, r1
 8002350:	330c      	adds	r3, #12
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d142      	bne.n	80023e0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	2100      	movs	r1, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fc80 	bl	8001c64 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002364:	4b29      	ldr	r3, [pc, #164]	@ (800240c <HW_TS_Stop+0xf8>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	2b06      	cmp	r3, #6
 800236e:	d12f      	bne.n	80023d0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002370:	4b27      	ldr	r3, [pc, #156]	@ (8002410 <HW_TS_Stop+0xfc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800237c:	d107      	bne.n	800238e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800237e:	bf00      	nop
 8002380:	4b20      	ldr	r3, [pc, #128]	@ (8002404 <HW_TS_Stop+0xf0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f8      	bne.n	8002380 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800238e:	4b1d      	ldr	r3, [pc, #116]	@ (8002404 <HW_TS_Stop+0xf0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	4b1b      	ldr	r3, [pc, #108]	@ (8002404 <HW_TS_Stop+0xf0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800239c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800239e:	bf00      	nop
 80023a0:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <HW_TS_Stop+0xf0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f8      	beq.n	80023a0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80023ae:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <HW_TS_Stop+0xf0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b13      	ldr	r3, [pc, #76]	@ (8002404 <HW_TS_Stop+0xf0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80023be:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80023c0:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <HW_TS_Stop+0x100>)
 80023c2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80023c6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80023c8:	2003      	movs	r0, #3
 80023ca:	f006 f91e 	bl	800860a <HAL_NVIC_ClearPendingIRQ>
 80023ce:	e007      	b.n	80023e0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80023d0:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <HW_TS_Stop+0x104>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	7cfa      	ldrb	r2, [r7, #19]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80023dc:	f7ff fd5e 	bl	8001e9c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023e0:	4b08      	ldr	r3, [pc, #32]	@ (8002404 <HW_TS_Stop+0xf0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	22ff      	movs	r2, #255	@ 0xff
 80023e6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80023e8:	2003      	movs	r0, #3
 80023ea:	f006 f8d8 	bl	800859e <HAL_NVIC_EnableIRQ>
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f383 8810 	msr	PRIMASK, r3
}
 80023f8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80023fa:	bf00      	nop
}
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000d20 	.word	0x20000d20
 8002408:	20000450 	.word	0x20000450
 800240c:	200004e0 	.word	0x200004e0
 8002410:	40002800 	.word	0x40002800
 8002414:	58000800 	.word	0x58000800
 8002418:	200004e1 	.word	0x200004e1

0800241c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	6039      	str	r1, [r7, #0]
 8002426:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002428:	79fa      	ldrb	r2, [r7, #7]
 800242a:	493b      	ldr	r1, [pc, #236]	@ (8002518 <HW_TS_Start+0xfc>)
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	440b      	add	r3, r1
 8002436:	330c      	adds	r3, #12
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d103      	bne.n	8002448 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff66 	bl	8002314 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002448:	f3ef 8310 	mrs	r3, PRIMASK
 800244c:	60fb      	str	r3, [r7, #12]
  return(result);
 800244e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002450:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002452:	b672      	cpsid	i
}
 8002454:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002456:	2003      	movs	r0, #3
 8002458:	f006 f8af 	bl	80085ba <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800245c:	4b2f      	ldr	r3, [pc, #188]	@ (800251c <HW_TS_Start+0x100>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	22ca      	movs	r2, #202	@ 0xca
 8002462:	625a      	str	r2, [r3, #36]	@ 0x24
 8002464:	4b2d      	ldr	r3, [pc, #180]	@ (800251c <HW_TS_Start+0x100>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2253      	movs	r2, #83	@ 0x53
 800246a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800246c:	79fa      	ldrb	r2, [r7, #7]
 800246e:	492a      	ldr	r1, [pc, #168]	@ (8002518 <HW_TS_Start+0xfc>)
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	440b      	add	r3, r1
 800247a:	330c      	adds	r3, #12
 800247c:	2202      	movs	r2, #2
 800247e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002480:	79fa      	ldrb	r2, [r7, #7]
 8002482:	4925      	ldr	r1, [pc, #148]	@ (8002518 <HW_TS_Start+0xfc>)
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	440b      	add	r3, r1
 800248e:	3308      	adds	r3, #8
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002494:	79fa      	ldrb	r2, [r7, #7]
 8002496:	4920      	ldr	r1, [pc, #128]	@ (8002518 <HW_TS_Start+0xfc>)
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	440b      	add	r3, r1
 80024a2:	3304      	adds	r3, #4
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fb30 	bl	8001b10 <linkTimer>
 80024b0:	4603      	mov	r3, r0
 80024b2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80024b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <HW_TS_Start+0x104>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80024ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002524 <HW_TS_Start+0x108>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	7c7a      	ldrb	r2, [r7, #17]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d002      	beq.n	80024cc <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80024c6:	f7ff fce9 	bl	8001e9c <RescheduleTimerList>
 80024ca:	e013      	b.n	80024f4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80024cc:	79fa      	ldrb	r2, [r7, #7]
 80024ce:	4912      	ldr	r1, [pc, #72]	@ (8002518 <HW_TS_Start+0xfc>)
 80024d0:	4613      	mov	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4413      	add	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	440b      	add	r3, r1
 80024da:	3308      	adds	r3, #8
 80024dc:	6819      	ldr	r1, [r3, #0]
 80024de:	8a7b      	ldrh	r3, [r7, #18]
 80024e0:	79fa      	ldrb	r2, [r7, #7]
 80024e2:	1ac9      	subs	r1, r1, r3
 80024e4:	480c      	ldr	r0, [pc, #48]	@ (8002518 <HW_TS_Start+0xfc>)
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4403      	add	r3, r0
 80024f0:	3308      	adds	r3, #8
 80024f2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80024f4:	4b09      	ldr	r3, [pc, #36]	@ (800251c <HW_TS_Start+0x100>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	22ff      	movs	r2, #255	@ 0xff
 80024fa:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80024fc:	2003      	movs	r0, #3
 80024fe:	f006 f84e 	bl	800859e <HAL_NVIC_EnableIRQ>
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f383 8810 	msr	PRIMASK, r3
}
 800250c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800250e:	bf00      	nop
}
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000450 	.word	0x20000450
 800251c:	20000d20 	.word	0x20000d20
 8002520:	200004e0 	.word	0x200004e0
 8002524:	200004e1 	.word	0x200004e1

08002528 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	460b      	mov	r3, r1
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4798      	blx	r3

  return;
 800253a:	bf00      	nop
}
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <LL_AHB2_GRP1_EnableClock>:
{
 8002542:	b480      	push	{r7}
 8002544:	b085      	sub	sp, #20
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800254e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002550:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4313      	orrs	r3, r2
 8002558:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800255a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800255e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4013      	ands	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002566:	68fb      	ldr	r3, [r7, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002580:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002582:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4313      	orrs	r3, r2
 800258a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800258c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002590:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4013      	ands	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002598:	68fb      	ldr	r3, [r7, #12]
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80025ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025bc:	4013      	ands	r3, r2
 80025be:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002640 <MX_I2C1_Init+0x74>)
 80025d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002644 <MX_I2C1_Init+0x78>)
 80025d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80025d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002640 <MX_I2C1_Init+0x74>)
 80025d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002648 <MX_I2C1_Init+0x7c>)
 80025da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025dc:	4b18      	ldr	r3, [pc, #96]	@ (8002640 <MX_I2C1_Init+0x74>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025e2:	4b17      	ldr	r3, [pc, #92]	@ (8002640 <MX_I2C1_Init+0x74>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025e8:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <MX_I2C1_Init+0x74>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025ee:	4b14      	ldr	r3, [pc, #80]	@ (8002640 <MX_I2C1_Init+0x74>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025f4:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <MX_I2C1_Init+0x74>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025fa:	4b11      	ldr	r3, [pc, #68]	@ (8002640 <MX_I2C1_Init+0x74>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002600:	4b0f      	ldr	r3, [pc, #60]	@ (8002640 <MX_I2C1_Init+0x74>)
 8002602:	2200      	movs	r2, #0
 8002604:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002606:	480e      	ldr	r0, [pc, #56]	@ (8002640 <MX_I2C1_Init+0x74>)
 8002608:	f006 feb6 	bl	8009378 <HAL_I2C_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002612:	f000 fb63 	bl	8002cdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002616:	2100      	movs	r1, #0
 8002618:	4809      	ldr	r0, [pc, #36]	@ (8002640 <MX_I2C1_Init+0x74>)
 800261a:	f007 faf9 	bl	8009c10 <HAL_I2CEx_ConfigAnalogFilter>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002624:	f000 fb5a 	bl	8002cdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002628:	2100      	movs	r1, #0
 800262a:	4805      	ldr	r0, [pc, #20]	@ (8002640 <MX_I2C1_Init+0x74>)
 800262c:	f007 fb3b 	bl	8009ca6 <HAL_I2CEx_ConfigDigitalFilter>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002636:	f000 fb51 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200004f0 	.word	0x200004f0
 8002644:	40005400 	.word	0x40005400
 8002648:	10707dbc 	.word	0x10707dbc

0800264c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002650:	4b1d      	ldr	r3, [pc, #116]	@ (80026c8 <MX_I2C3_Init+0x7c>)
 8002652:	4a1e      	ldr	r2, [pc, #120]	@ (80026cc <MX_I2C3_Init+0x80>)
 8002654:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300B29;
 8002656:	4b1c      	ldr	r3, [pc, #112]	@ (80026c8 <MX_I2C3_Init+0x7c>)
 8002658:	4a1d      	ldr	r2, [pc, #116]	@ (80026d0 <MX_I2C3_Init+0x84>)
 800265a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800265c:	4b1a      	ldr	r3, [pc, #104]	@ (80026c8 <MX_I2C3_Init+0x7c>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002662:	4b19      	ldr	r3, [pc, #100]	@ (80026c8 <MX_I2C3_Init+0x7c>)
 8002664:	2201      	movs	r2, #1
 8002666:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002668:	4b17      	ldr	r3, [pc, #92]	@ (80026c8 <MX_I2C3_Init+0x7c>)
 800266a:	2200      	movs	r2, #0
 800266c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800266e:	4b16      	ldr	r3, [pc, #88]	@ (80026c8 <MX_I2C3_Init+0x7c>)
 8002670:	2200      	movs	r2, #0
 8002672:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002674:	4b14      	ldr	r3, [pc, #80]	@ (80026c8 <MX_I2C3_Init+0x7c>)
 8002676:	2200      	movs	r2, #0
 8002678:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800267a:	4b13      	ldr	r3, [pc, #76]	@ (80026c8 <MX_I2C3_Init+0x7c>)
 800267c:	2200      	movs	r2, #0
 800267e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002680:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <MX_I2C3_Init+0x7c>)
 8002682:	2200      	movs	r2, #0
 8002684:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002686:	4810      	ldr	r0, [pc, #64]	@ (80026c8 <MX_I2C3_Init+0x7c>)
 8002688:	f006 fe76 	bl	8009378 <HAL_I2C_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002692:	f000 fb23 	bl	8002cdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002696:	2100      	movs	r1, #0
 8002698:	480b      	ldr	r0, [pc, #44]	@ (80026c8 <MX_I2C3_Init+0x7c>)
 800269a:	f007 fab9 	bl	8009c10 <HAL_I2CEx_ConfigAnalogFilter>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80026a4:	f000 fb1a 	bl	8002cdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80026a8:	2100      	movs	r1, #0
 80026aa:	4807      	ldr	r0, [pc, #28]	@ (80026c8 <MX_I2C3_Init+0x7c>)
 80026ac:	f007 fafb 	bl	8009ca6 <HAL_I2CEx_ConfigDigitalFilter>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80026b6:	f000 fb11 	bl	8002cdc <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80026ba:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80026be:	f007 fb3f 	bl	8009d40 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000544 	.word	0x20000544
 80026cc:	40005c00 	.word	0x40005c00
 80026d0:	00300b29 	.word	0x00300b29

080026d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b09c      	sub	sp, #112	@ 0x70
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	2250      	movs	r2, #80	@ 0x50
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f018 fe20 	bl	801b33a <memset>
  if(i2cHandle->Instance==I2C1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a37      	ldr	r2, [pc, #220]	@ (80027dc <HAL_I2C_MspInit+0x108>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d127      	bne.n	8002754 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002704:	2304      	movs	r3, #4
 8002706:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002708:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800270c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800270e:	f107 030c 	add.w	r3, r7, #12
 8002712:	4618      	mov	r0, r3
 8002714:	f00a fc03 	bl	800cf1e <HAL_RCCEx_PeriphCLKConfig>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800271e:	f000 fadd 	bl	8002cdc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002722:	2002      	movs	r0, #2
 8002724:	f7ff ff0d 	bl	8002542 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002728:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800272c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800272e:	2312      	movs	r3, #18
 8002730:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800273a:	2304      	movs	r3, #4
 800273c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002742:	4619      	mov	r1, r3
 8002744:	4826      	ldr	r0, [pc, #152]	@ (80027e0 <HAL_I2C_MspInit+0x10c>)
 8002746:	f006 fb43 	bl	8008dd0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800274a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800274e:	f7ff ff11 	bl	8002574 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002752:	e03e      	b.n	80027d2 <HAL_I2C_MspInit+0xfe>
  else if(i2cHandle->Instance==I2C3)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a22      	ldr	r2, [pc, #136]	@ (80027e4 <HAL_I2C_MspInit+0x110>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d139      	bne.n	80027d2 <HAL_I2C_MspInit+0xfe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800275e:	2308      	movs	r3, #8
 8002760:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002762:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8002766:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002768:	f107 030c 	add.w	r3, r7, #12
 800276c:	4618      	mov	r0, r3
 800276e:	f00a fbd6 	bl	800cf1e <HAL_RCCEx_PeriphCLKConfig>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8002778:	f000 fab0 	bl	8002cdc <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277c:	2001      	movs	r0, #1
 800277e:	f7ff fee0 	bl	8002542 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002782:	2002      	movs	r0, #2
 8002784:	f7ff fedd 	bl	8002542 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002788:	2380      	movs	r3, #128	@ 0x80
 800278a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800278c:	2312      	movs	r3, #18
 800278e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002794:	2300      	movs	r3, #0
 8002796:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002798:	2304      	movs	r3, #4
 800279a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027a0:	4619      	mov	r1, r3
 80027a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027a6:	f006 fb13 	bl	8008dd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027aa:	2310      	movs	r3, #16
 80027ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ae:	2312      	movs	r3, #18
 80027b0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2300      	movs	r3, #0
 80027b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027ba:	2304      	movs	r3, #4
 80027bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027be:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027c2:	4619      	mov	r1, r3
 80027c4:	4806      	ldr	r0, [pc, #24]	@ (80027e0 <HAL_I2C_MspInit+0x10c>)
 80027c6:	f006 fb03 	bl	8008dd0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80027ca:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80027ce:	f7ff fed1 	bl	8002574 <LL_APB1_GRP1_EnableClock>
}
 80027d2:	bf00      	nop
 80027d4:	3770      	adds	r7, #112	@ 0x70
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40005400 	.word	0x40005400
 80027e0:	48000400 	.word	0x48000400
 80027e4:	40005c00 	.word	0x40005c00

080027e8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a13      	ldr	r2, [pc, #76]	@ (8002844 <HAL_I2C_MspDeInit+0x5c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10e      	bne.n	8002818 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80027fa:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80027fe:	f7ff fed2 	bl	80025a6 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002802:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002806:	4810      	ldr	r0, [pc, #64]	@ (8002848 <HAL_I2C_MspDeInit+0x60>)
 8002808:	f006 fc52 	bl	80090b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800280c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002810:	480d      	ldr	r0, [pc, #52]	@ (8002848 <HAL_I2C_MspDeInit+0x60>)
 8002812:	f006 fc4d 	bl	80090b0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8002816:	e011      	b.n	800283c <HAL_I2C_MspDeInit+0x54>
  else if(i2cHandle->Instance==I2C3)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0b      	ldr	r2, [pc, #44]	@ (800284c <HAL_I2C_MspDeInit+0x64>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10c      	bne.n	800283c <HAL_I2C_MspDeInit+0x54>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002822:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002826:	f7ff febe 	bl	80025a6 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_7);
 800282a:	2180      	movs	r1, #128	@ 0x80
 800282c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002830:	f006 fc3e 	bl	80090b0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8002834:	2110      	movs	r1, #16
 8002836:	4804      	ldr	r0, [pc, #16]	@ (8002848 <HAL_I2C_MspDeInit+0x60>)
 8002838:	f006 fc3a 	bl	80090b0 <HAL_GPIO_DeInit>
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40005400 	.word	0x40005400
 8002848:	48000400 	.word	0x48000400
 800284c:	40005c00 	.word	0x40005c00

08002850 <LL_AHB3_GRP1_EnableClock>:
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800285c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800285e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4313      	orrs	r3, r2
 8002866:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800286c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4013      	ands	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002874:	68fb      	ldr	r3, [r7, #12]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <MX_IPCC_Init+0x20>)
 800288a:	4a07      	ldr	r2, [pc, #28]	@ (80028a8 <MX_IPCC_Init+0x24>)
 800288c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800288e:	4805      	ldr	r0, [pc, #20]	@ (80028a4 <MX_IPCC_Init+0x20>)
 8002890:	f007 fa68 	bl	8009d64 <HAL_IPCC_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800289a:	f000 fa1f 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000598 	.word	0x20000598
 80028a8:	58000c00 	.word	0x58000c00

080028ac <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0d      	ldr	r2, [pc, #52]	@ (80028f0 <HAL_IPCC_MspInit+0x44>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d113      	bne.n	80028e6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80028be:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80028c2:	f7ff ffc5 	bl	8002850 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	202c      	movs	r0, #44	@ 0x2c
 80028cc:	f005 fe4d 	bl	800856a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80028d0:	202c      	movs	r0, #44	@ 0x2c
 80028d2:	f005 fe64 	bl	800859e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2100      	movs	r1, #0
 80028da:	202d      	movs	r0, #45	@ 0x2d
 80028dc:	f005 fe45 	bl	800856a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80028e0:	202d      	movs	r0, #45	@ 0x2d
 80028e2:	f005 fe5c 	bl	800859e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	58000c00 	.word	0x58000c00

080028f4 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	3220      	adds	r2, #32
 8002904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002908:	4a05      	ldr	r2, [pc, #20]	@ (8002920 <LL_HSEM_1StepLock+0x2c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d001      	beq.n	8002912 <LL_HSEM_1StepLock+0x1e>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <LL_HSEM_1StepLock+0x20>
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	80000400 	.word	0x80000400

08002924 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002934:	d12f      	bne.n	8002996 <HAL_GPIO_EXTI_Callback+0x72>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)== GPIO_PIN_RESET){
 8002936:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800293a:	4833      	ldr	r0, [pc, #204]	@ (8002a08 <HAL_GPIO_EXTI_Callback+0xe4>)
 800293c:	f006 fc96 	bl	800926c <HAL_GPIO_ReadPin>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_GPIO_EXTI_Callback+0x36>

					boutonAtime=0;
 8002946:	4b31      	ldr	r3, [pc, #196]	@ (8002a0c <HAL_GPIO_EXTI_Callback+0xe8>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
					tbtn1=HAL_GetTick();
 800294c:	f004 fc2e 	bl	80071ac <HAL_GetTick>
 8002950:	4603      	mov	r3, r0
 8002952:	461a      	mov	r2, r3
 8002954:	4b2e      	ldr	r3, [pc, #184]	@ (8002a10 <HAL_GPIO_EXTI_Callback+0xec>)
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e010      	b.n	800297c <HAL_GPIO_EXTI_Callback+0x58>


				}
				else{
					BTN_A++;
 800295a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a14 <HAL_GPIO_EXTI_Callback+0xf0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	4a2c      	ldr	r2, [pc, #176]	@ (8002a14 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002962:	6013      	str	r3, [r2, #0]

					boutonAtime=HAL_GetTick()-tbtn1;
 8002964:	f004 fc22 	bl	80071ac <HAL_GetTick>
 8002968:	4603      	mov	r3, r0
 800296a:	4a29      	ldr	r2, [pc, #164]	@ (8002a10 <HAL_GPIO_EXTI_Callback+0xec>)
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	461a      	mov	r2, r3
 8002972:	4b26      	ldr	r3, [pc, #152]	@ (8002a0c <HAL_GPIO_EXTI_Callback+0xe8>)
 8002974:	601a      	str	r2, [r3, #0]
					tbtn1=0;
 8002976:	4b26      	ldr	r3, [pc, #152]	@ (8002a10 <HAL_GPIO_EXTI_Callback+0xec>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]


				}

				if(boutonAtime>=400){
 800297c:	4b23      	ldr	r3, [pc, #140]	@ (8002a0c <HAL_GPIO_EXTI_Callback+0xe8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002984:	db07      	blt.n	8002996 <HAL_GPIO_EXTI_Callback+0x72>
					BTN_A_LONG++;
 8002986:	4b24      	ldr	r3, [pc, #144]	@ (8002a18 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	3301      	adds	r3, #1
 800298c:	4a22      	ldr	r2, [pc, #136]	@ (8002a18 <HAL_GPIO_EXTI_Callback+0xf4>)
 800298e:	6013      	str	r3, [r2, #0]
					BTN_A=0;
 8002990:	4b20      	ldr	r3, [pc, #128]	@ (8002a14 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
				}

	}
	if(GPIO_Pin==GPIO_PIN_15){
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800299c:	d12f      	bne.n	80029fe <HAL_GPIO_EXTI_Callback+0xda>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)== GPIO_PIN_RESET){
 800299e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029a2:	4819      	ldr	r0, [pc, #100]	@ (8002a08 <HAL_GPIO_EXTI_Callback+0xe4>)
 80029a4:	f006 fc62 	bl	800926c <HAL_GPIO_ReadPin>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_GPIO_EXTI_Callback+0x9e>

			boutonBtime=0;
 80029ae:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <HAL_GPIO_EXTI_Callback+0xf8>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
			tbtn2=HAL_GetTick();
 80029b4:	f004 fbfa 	bl	80071ac <HAL_GetTick>
 80029b8:	4603      	mov	r3, r0
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b18      	ldr	r3, [pc, #96]	@ (8002a20 <HAL_GPIO_EXTI_Callback+0xfc>)
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e010      	b.n	80029e4 <HAL_GPIO_EXTI_Callback+0xc0>


		}
		else{
			BTN_B++;
 80029c2:	4b18      	ldr	r3, [pc, #96]	@ (8002a24 <HAL_GPIO_EXTI_Callback+0x100>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3301      	adds	r3, #1
 80029c8:	4a16      	ldr	r2, [pc, #88]	@ (8002a24 <HAL_GPIO_EXTI_Callback+0x100>)
 80029ca:	6013      	str	r3, [r2, #0]

			boutonBtime=HAL_GetTick()-tbtn2;
 80029cc:	f004 fbee 	bl	80071ac <HAL_GetTick>
 80029d0:	4603      	mov	r3, r0
 80029d2:	4a13      	ldr	r2, [pc, #76]	@ (8002a20 <HAL_GPIO_EXTI_Callback+0xfc>)
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	461a      	mov	r2, r3
 80029da:	4b10      	ldr	r3, [pc, #64]	@ (8002a1c <HAL_GPIO_EXTI_Callback+0xf8>)
 80029dc:	601a      	str	r2, [r3, #0]
			tbtn2=0;
 80029de:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <HAL_GPIO_EXTI_Callback+0xfc>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]


		}

		if(boutonBtime>=400){
 80029e4:	4b0d      	ldr	r3, [pc, #52]	@ (8002a1c <HAL_GPIO_EXTI_Callback+0xf8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80029ec:	db07      	blt.n	80029fe <HAL_GPIO_EXTI_Callback+0xda>
			BTN_B_LONG++;
 80029ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0x104>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3301      	adds	r3, #1
 80029f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0x104>)
 80029f6:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 80029f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <HAL_GPIO_EXTI_Callback+0x100>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
		}



	}
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	48000800 	.word	0x48000800
 8002a0c:	20000b84 	.word	0x20000b84
 8002a10:	20000b8c 	.word	0x20000b8c
 8002a14:	20000860 	.word	0x20000860
 8002a18:	20000b98 	.word	0x20000b98
 8002a1c:	20000b88 	.word	0x20000b88
 8002a20:	20000b90 	.word	0x20000b90
 8002a24:	20000864 	.word	0x20000864
 8002a28:	20000b94 	.word	0x20000b94

08002a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a32:	f004 fb4d 	bl	80070d0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002a36:	f7fe fd3f 	bl	80014b8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a3a:	f000 f8b1 	bl	8002ba0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002a3e:	f000 f913 	bl	8002c68 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002a42:	f7ff ff1f 	bl	8002884 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8002a46:	f000 fd53 	bl	80034f0 <MX_RF_Init>
  MX_GPIO_Init();
 8002a4a:	f7fe ff1f 	bl	800188c <MX_GPIO_Init>
  MX_DMA_Init();
 8002a4e:	f7fe feea 	bl	8001826 <MX_DMA_Init>
  MX_ADC1_Init();
 8002a52:	f7fe fab9 	bl	8000fc8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002a56:	f7ff fdb9 	bl	80025cc <MX_I2C1_Init>
  MX_I2C3_Init();
 8002a5a:	f7ff fdf7 	bl	800264c <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002a5e:	f004 f901 	bl	8006c64 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8002a62:	f003 fe2f 	bl	80066c4 <MX_TIM2_Init>
  MX_TIM16_Init();
 8002a66:	f003 fe7b 	bl	8006760 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002a6a:	f003 fea1 	bl	80067b0 <MX_TIM17_Init>
  MX_SPI1_Init();
 8002a6e:	f000 fe45 	bl	80036fc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002a72:	f004 f943 	bl	8006cfc <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8002a76:	f015 fd3b 	bl	80184f0 <MX_USB_Device_Init>
  MX_RTC_Init();
 8002a7a:	f000 fd6b 	bl	8003554 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Abort(&huart1);
 8002a7e:	4836      	ldr	r0, [pc, #216]	@ (8002b58 <main+0x12c>)
 8002a80:	f00c fe06 	bl	800f690 <HAL_UART_Abort>
    HAL_UART_DeInit(&huart1);
 8002a84:	4834      	ldr	r0, [pc, #208]	@ (8002b58 <main+0x12c>)
 8002a86:	f00c fd77 	bl	800f578 <HAL_UART_DeInit>

    HAL_I2C_DeInit(&hi2c1);
 8002a8a:	4834      	ldr	r0, [pc, #208]	@ (8002b5c <main+0x130>)
 8002a8c:	f006 fd0f 	bl	80094ae <HAL_I2C_DeInit>



  	ssd1306_Init();
 8002a90:	f001 f8ba 	bl	8003c08 <ssd1306_Init>

  	HAL_Delay(10);
 8002a94:	200a      	movs	r0, #10
 8002a96:	f7fe fe4a 	bl	800172e <HAL_Delay>
  	ssd1306_Fill(Black);
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f001 f91e 	bl	8003cdc <ssd1306_Fill>

  	ssd1306_DrawBitmap(32, 32, startimg, 64, 32, White);
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2340      	movs	r3, #64	@ 0x40
 8002aaa:	4a2d      	ldr	r2, [pc, #180]	@ (8002b60 <main+0x134>)
 8002aac:	2120      	movs	r1, #32
 8002aae:	2020      	movs	r0, #32
 8002ab0:	f001 fb5f 	bl	8004172 <ssd1306_DrawBitmap>
  	ssd1306_UpdateScreen();
 8002ab4:	f001 f92a 	bl	8003d0c <ssd1306_UpdateScreen>


  	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8002ab8:	2203      	movs	r2, #3
 8002aba:	492a      	ldr	r1, [pc, #168]	@ (8002b64 <main+0x138>)
 8002abc:	482a      	ldr	r0, [pc, #168]	@ (8002b68 <main+0x13c>)
 8002abe:	f004 fead 	bl	800781c <HAL_ADC_Start_DMA>
  	HAL_TIM_Base_Start(&htim2);
 8002ac2:	482a      	ldr	r0, [pc, #168]	@ (8002b6c <main+0x140>)
 8002ac4:	f00c f898 	bl	800ebf8 <HAL_TIM_Base_Start>
  	HAL_TIM_Base_Start_IT(&htim16);
 8002ac8:	4829      	ldr	r0, [pc, #164]	@ (8002b70 <main+0x144>)
 8002aca:	f00c f8db 	bl	800ec84 <HAL_TIM_Base_Start_IT>
  	//HAL_TIM_Base_Start_IT(&htim17);

  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8002ace:	2201      	movs	r2, #1
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ad6:	f006 fbe1 	bl	800929c <HAL_GPIO_WritePin>

  	HAL_Delay(100);
 8002ada:	2064      	movs	r0, #100	@ 0x64
 8002adc:	f7fe fe27 	bl	800172e <HAL_Delay>
  	HAL_UART_Abort(&hlpuart1);
 8002ae0:	4824      	ldr	r0, [pc, #144]	@ (8002b74 <main+0x148>)
 8002ae2:	f00c fdd5 	bl	800f690 <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8002ae6:	2240      	movs	r2, #64	@ 0x40
 8002ae8:	4923      	ldr	r1, [pc, #140]	@ (8002b78 <main+0x14c>)
 8002aea:	4822      	ldr	r0, [pc, #136]	@ (8002b74 <main+0x148>)
 8002aec:	f00c fd84 	bl	800f5f8 <HAL_UART_Receive_DMA>

  	memset(flashread,'1',256);
 8002af0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002af4:	2131      	movs	r1, #49	@ 0x31
 8002af6:	4821      	ldr	r0, [pc, #132]	@ (8002b7c <main+0x150>)
 8002af8:	f018 fc1f 	bl	801b33a <memset>
  	memset(flashwrite,'\0',256);
 8002afc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b00:	2100      	movs	r1, #0
 8002b02:	481f      	ldr	r0, [pc, #124]	@ (8002b80 <main+0x154>)
 8002b04:	f018 fc19 	bl	801b33a <memset>
  	memset((uint8_t *)bufferscreen ,'\0',50);
 8002b08:	2232      	movs	r2, #50	@ 0x32
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	481d      	ldr	r0, [pc, #116]	@ (8002b84 <main+0x158>)
 8002b0e:	f018 fc14 	bl	801b33a <memset>

  	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_7);
 8002b12:	2380      	movs	r3, #128	@ 0x80
 8002b14:	4a1c      	ldr	r2, [pc, #112]	@ (8002b88 <main+0x15c>)
 8002b16:	491d      	ldr	r1, [pc, #116]	@ (8002b8c <main+0x160>)
 8002b18:	481d      	ldr	r0, [pc, #116]	@ (8002b90 <main+0x164>)
 8002b1a:	f014 fcf2 	bl	8017502 <SPIF_Init>



  	getindex();
 8002b1e:	f000 ff3f 	bl	80039a0 <getindex>

  	ssd1306_Fill(Black);
 8002b22:	2000      	movs	r0, #0
 8002b24:	f001 f8da 	bl	8003cdc <ssd1306_Fill>

  	state=STATE_SPEED;
 8002b28:	4b1a      	ldr	r3, [pc, #104]	@ (8002b94 <main+0x168>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
  	BTN_A=0;
 8002b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b98 <main+0x16c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
  	BTN_A_LONG=0;
 8002b34:	4b19      	ldr	r3, [pc, #100]	@ (8002b9c <main+0x170>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]

  	HAL_Delay(700);
 8002b3a:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002b3e:	f7fe fdf6 	bl	800172e <HAL_Delay>

  	//LL_HSEM_1StepLock( HSEM, 5 );
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002b42:	f7fe fcc7 	bl	80014d4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002b46:	f7fe fe17 	bl	8001778 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
	  statemachine();
 8002b4a:	f001 fd7d 	bl	8004648 <statemachine>
	  ssd1306_UpdateScreen();
 8002b4e:	f001 f8dd 	bl	8003d0c <ssd1306_UpdateScreen>
    MX_APPE_Process();
 8002b52:	bf00      	nop
 8002b54:	e7f7      	b.n	8002b46 <main+0x11a>
 8002b56:	bf00      	nop
 8002b58:	20001364 	.word	0x20001364
 8002b5c:	200004f0 	.word	0x200004f0
 8002b60:	0801fd10 	.word	0x0801fd10
 8002b64:	20000888 	.word	0x20000888
 8002b68:	2000038c 	.word	0x2000038c
 8002b6c:	200011ec 	.word	0x200011ec
 8002b70:	20001238 	.word	0x20001238
 8002b74:	200012d0 	.word	0x200012d0
 8002b78:	200005e0 	.word	0x200005e0
 8002b7c:	2000099c 	.word	0x2000099c
 8002b80:	2000089c 	.word	0x2000089c
 8002b84:	20000ac0 	.word	0x20000ac0
 8002b88:	48000400 	.word	0x48000400
 8002b8c:	20000d78 	.word	0x20000d78
 8002b90:	20000868 	.word	0x20000868
 8002b94:	200005d4 	.word	0x200005d4
 8002b98:	20000860 	.word	0x20000860
 8002b9c:	20000b98 	.word	0x20000b98

08002ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b09a      	sub	sp, #104	@ 0x68
 8002ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ba6:	f107 0320 	add.w	r3, r7, #32
 8002baa:	2248      	movs	r2, #72	@ 0x48
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f018 fbc3 	bl	801b33a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	60da      	str	r2, [r3, #12]
 8002bc0:	611a      	str	r2, [r3, #16]
 8002bc2:	615a      	str	r2, [r3, #20]
 8002bc4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bc6:	4b27      	ldr	r3, [pc, #156]	@ (8002c64 <SystemClock_Config+0xc4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bce:	4a25      	ldr	r2, [pc, #148]	@ (8002c64 <SystemClock_Config+0xc4>)
 8002bd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	4b23      	ldr	r3, [pc, #140]	@ (8002c64 <SystemClock_Config+0xc4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002be2:	2303      	movs	r3, #3
 8002be4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002be6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bf2:	2340      	movs	r3, #64	@ 0x40
 8002bf4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002bfe:	2310      	movs	r3, #16
 8002c00:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002c02:	2308      	movs	r3, #8
 8002c04:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c0c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002c10:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c16:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c18:	f107 0320 	add.w	r3, r7, #32
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f009 f9cd 	bl	800bfbc <HAL_RCC_OscConfig>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002c28:	f000 f858 	bl	8002cdc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002c2c:	236f      	movs	r3, #111	@ 0x6f
 8002c2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c30:	2303      	movs	r3, #3
 8002c32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c34:	2300      	movs	r3, #0
 8002c36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002c40:	2380      	movs	r3, #128	@ 0x80
 8002c42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	2103      	movs	r1, #3
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f009 fd29 	bl	800c6a4 <HAL_RCC_ClockConfig>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002c58:	f000 f840 	bl	8002cdc <Error_Handler>
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3768      	adds	r7, #104	@ 0x68
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	58000400 	.word	0x58000400

08002c68 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b094      	sub	sp, #80	@ 0x50
 8002c6c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c6e:	463b      	mov	r3, r7
 8002c70:	2250      	movs	r2, #80	@ 0x50
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f018 fb60 	bl	801b33a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002c7a:	f44f 5354 	mov.w	r3, #13568	@ 0x3500
 8002c7e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8002c80:	2306      	movs	r3, #6
 8002c82:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002c84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c88:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002c8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c8e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002c90:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002c94:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8002c96:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8002c9a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002c9c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002ca0:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002ca2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002ca8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002cac:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002cb2:	2310      	movs	r3, #16
 8002cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cb6:	463b      	mov	r3, r7
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f00a f930 	bl	800cf1e <HAL_RCCEx_PeriphCLKConfig>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8002cc4:	f000 f80a 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock( HSEM, 5 );
 8002cc8:	2105      	movs	r1, #5
 8002cca:	4803      	ldr	r0, [pc, #12]	@ (8002cd8 <PeriphCommonClock_Config+0x70>)
 8002ccc:	f7ff fe12 	bl	80028f4 <LL_HSEM_1StepLock>

  /* USER CODE END Smps */
}
 8002cd0:	bf00      	nop
 8002cd2:	3750      	adds	r7, #80	@ 0x50
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	58001400 	.word	0x58001400

08002cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce0:	b672      	cpsid	i
}
 8002ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <Error_Handler+0x8>

08002ce8 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7fd fa95 	bl	8000220 <strlen>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d801      	bhi.n	8002d00 <gps_checksum+0x18>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e038      	b.n	8002d72 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7fd fa8d 	bl	8000220 <strlen>
 8002d06:	4603      	mov	r3, r0
 8002d08:	3b04      	subs	r3, #4
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fd fa84 	bl	8000220 <strlen>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	3b03      	subs	r3, #3
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	e00a      	b.n	8002d44 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	4413      	add	r3, r2
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	4053      	eors	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	3301      	adds	r3, #1
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7fd fa6b 	bl	8000220 <strlen>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	1f5a      	subs	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d8ec      	bhi.n	8002d2e <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8002d54:	f107 0308 	add.w	r3, r7, #8
 8002d58:	2210      	movs	r2, #16
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f017 fb1d 	bl	801a39c <strtol>
 8002d62:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d101      	bne.n	8002d70 <gps_checksum+0x88>
        return 1;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8002d70:	2300      	movs	r3, #0
    }
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b0b7      	sub	sp, #220	@ 0xdc
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8002d8c:	f107 0320 	add.w	r3, r7, #32
 8002d90:	2264      	movs	r2, #100	@ 0x64
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f018 fad0 	bl	801b33a <memset>
    char *marker = strtok(inputString, ",");
 8002d9a:	49c2      	ldr	r1, [pc, #776]	@ (80030a4 <nmea_GPGGA+0x328>)
 8002d9c:	6838      	ldr	r0, [r7, #0]
 8002d9e:	f018 fae7 	bl	801b370 <strtok>
 8002da2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8002da6:	e027      	b.n	8002df8 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002da8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8002dac:	f7fd fa38 	bl	8000220 <strlen>
 8002db0:	4603      	mov	r3, r0
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 8002db8:	1c63      	adds	r3, r4, #1
 8002dba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f016 fb46 	bl	8019450 <malloc>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	00a3      	lsls	r3, r4, #2
 8002dca:	33d8      	adds	r3, #216	@ 0xd8
 8002dcc:	443b      	add	r3, r7
 8002dce:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8002dd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	33d8      	adds	r3, #216	@ 0xd8
 8002ddc:	443b      	add	r3, r7
 8002dde:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002de2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f018 fbbb 	bl	801b562 <strcpy>
        marker = strtok(NULL, ",");
 8002dec:	49ad      	ldr	r1, [pc, #692]	@ (80030a4 <nmea_GPGGA+0x328>)
 8002dee:	2000      	movs	r0, #0
 8002df0:	f018 fabe 	bl	801b370 <strtok>
 8002df4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8002df8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1d3      	bne.n	8002da8 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8002e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 8002e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	332c      	adds	r3, #44	@ 0x2c
 8002e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f018 fba2 	bl	801b562 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8002e1e:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8002e22:	2b53      	cmp	r3, #83	@ 0x53
 8002e24:	d004      	beq.n	8002e30 <nmea_GPGGA+0xb4>
 8002e26:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8002e2a:	2b4e      	cmp	r3, #78	@ 0x4e
 8002e2c:	f040 8159 	bne.w	80030e2 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e36:	e010      	b.n	8002e5a <nmea_GPGGA+0xde>
 8002e38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e3e:	4413      	add	r3, r2
 8002e40:	7819      	ldrb	r1, [r3, #0]
 8002e42:	f107 021c 	add.w	r2, r7, #28
 8002e46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e4a:	4413      	add	r3, r2
 8002e4c:	460a      	mov	r2, r1
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e54:	3301      	adds	r3, #1
 8002e56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	ddea      	ble.n	8002e38 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8002e62:	2300      	movs	r3, #0
 8002e64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e68:	e011      	b.n	8002e8e <nmea_GPGGA+0x112>
 8002e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e70:	3302      	adds	r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	7819      	ldrb	r1, [r3, #0]
 8002e76:	f107 0214 	add.w	r2, r7, #20
 8002e7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e7e:	4413      	add	r3, r2
 8002e80:	460a      	mov	r2, r1
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	dde9      	ble.n	8002e6a <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8002e96:	f107 031c 	add.w	r3, r7, #28
 8002e9a:	220a      	movs	r2, #10
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f017 fa7c 	bl	801a39c <strtol>
 8002ea4:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8002ea8:	f107 0314 	add.w	r3, r7, #20
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f017 f994 	bl	801a1dc <strtof>
 8002eb4:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8002eb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ebc:	ee07 3a90 	vmov	s15, r3
 8002ec0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ec4:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8002ec8:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 80030a8 <nmea_GPGGA+0x32c>
 8002ecc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed4:	ee17 0a90 	vmov	r0, s15
 8002ed8:	f7fd fb0e 	bl	80004f8 <__aeabi_f2d>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002eea:	e010      	b.n	8002f0e <nmea_GPGGA+0x192>
 8002eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ef2:	4413      	add	r3, r2
 8002ef4:	7819      	ldrb	r1, [r3, #0]
 8002ef6:	f107 0210 	add.w	r2, r7, #16
 8002efa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002efe:	4413      	add	r3, r2
 8002f00:	460a      	mov	r2, r1
 8002f02:	701a      	strb	r2, [r3, #0]
 8002f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	ddea      	ble.n	8002eec <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f1c:	e011      	b.n	8002f42 <nmea_GPGGA+0x1c6>
 8002f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f24:	3303      	adds	r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	7819      	ldrb	r1, [r3, #0]
 8002f2a:	f107 0208 	add.w	r2, r7, #8
 8002f2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f32:	4413      	add	r3, r2
 8002f34:	460a      	mov	r2, r1
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f46:	2b05      	cmp	r3, #5
 8002f48:	dde9      	ble.n	8002f1e <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8002f4a:	f107 0310 	add.w	r3, r7, #16
 8002f4e:	220a      	movs	r2, #10
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f017 fa22 	bl	801a39c <strtol>
 8002f58:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8002f5c:	f107 0308 	add.w	r3, r7, #8
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f017 f93a 	bl	801a1dc <strtof>
 8002f68:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8002f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f70:	ee07 3a90 	vmov	s15, r3
 8002f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f78:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8002f7c:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 80030a8 <nmea_GPGGA+0x32c>
 8002f80:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f88:	ee17 0a90 	vmov	r0, s15
 8002f8c:	f7fd fab4 	bl	80004f8 <__aeabi_f2d>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002fa4:	f7fd fd68 	bl	8000a78 <__aeabi_dcmpeq>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d176      	bne.n	800309c <nmea_GPGGA+0x320>
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002fba:	f7fd fd5d 	bl	8000a78 <__aeabi_dcmpeq>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d16b      	bne.n	800309c <nmea_GPGGA+0x320>
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	4b38      	ldr	r3, [pc, #224]	@ (80030ac <nmea_GPGGA+0x330>)
 8002fca:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002fce:	f7fd fd5d 	bl	8000a8c <__aeabi_dcmplt>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d061      	beq.n	800309c <nmea_GPGGA+0x320>
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	4b34      	ldr	r3, [pc, #208]	@ (80030b0 <nmea_GPGGA+0x334>)
 8002fde:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002fe2:	f7fd fd53 	bl	8000a8c <__aeabi_dcmplt>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d057      	beq.n	800309c <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8002ff2:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 8002ffc:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003004:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 800300e:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8003010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f017 f8e1 	bl	801a1dc <strtof>
 800301a:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 800301e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003022:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302a:	d102      	bne.n	8003032 <nmea_GPGGA+0x2b6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	e001      	b.n	8003036 <nmea_GPGGA+0x2ba>
 8003032:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 800303a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800303c:	220a      	movs	r2, #10
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f017 f9ab 	bl	801a39c <strtol>
 8003046:	4602      	mov	r2, r0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 800304c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304e:	220a      	movs	r2, #10
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f017 f9a2 	bl	801a39c <strtol>
 8003058:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 800305c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003060:	2b00      	cmp	r3, #0
 8003062:	bfcc      	ite	gt
 8003064:	2301      	movgt	r3, #1
 8003066:	2300      	movle	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 8003070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f017 f8b1 	bl	801a1dc <strtof>
 800307a:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 800307e:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003082:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308a:	d102      	bne.n	8003092 <nmea_GPGGA+0x316>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	e001      	b.n	8003096 <nmea_GPGGA+0x31a>
 8003092:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800309a:	e022      	b.n	80030e2 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 800309c:	2300      	movs	r3, #0
 800309e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80030a2:	e016      	b.n	80030d2 <nmea_GPGGA+0x356>
 80030a4:	0801f894 	.word	0x0801f894
 80030a8:	42700000 	.word	0x42700000
 80030ac:	40568000 	.word	0x40568000
 80030b0:	40668000 	.word	0x40668000
 80030b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	33d8      	adds	r3, #216	@ 0xd8
 80030bc:	443b      	add	r3, r7
 80030be:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f016 f9cc 	bl	8019460 <free>
 80030c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030cc:	3301      	adds	r3, #1
 80030ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80030d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80030d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030da:	429a      	cmp	r2, r3
 80030dc:	dbea      	blt.n	80030b4 <nmea_GPGGA+0x338>
            return 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	e019      	b.n	8003116 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 80030e2:	2300      	movs	r3, #0
 80030e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030e8:	e00e      	b.n	8003108 <nmea_GPGGA+0x38c>
 80030ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	33d8      	adds	r3, #216	@ 0xd8
 80030f2:	443b      	add	r3, r7
 80030f4:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f016 f9b1 	bl	8019460 <free>
 80030fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003102:	3301      	adds	r3, #1
 8003104:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003108:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800310c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003110:	429a      	cmp	r2, r3
 8003112:	dbea      	blt.n	80030ea <nmea_GPGGA+0x36e>
    return 1;
 8003114:	2301      	movs	r3, #1
}
 8003116:	4618      	mov	r0, r3
 8003118:	37dc      	adds	r7, #220	@ 0xdc
 800311a:	46bd      	mov	sp, r7
 800311c:	bd90      	pop	{r4, r7, pc}
 800311e:	bf00      	nop

08003120 <nmea_GNRMC>:
//    return 1;
//}



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b0a1      	sub	sp, #132	@ 0x84
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 800312e:	f107 030c 	add.w	r3, r7, #12
 8003132:	2264      	movs	r2, #100	@ 0x64
 8003134:	2100      	movs	r1, #0
 8003136:	4618      	mov	r0, r3
 8003138:	f018 f8ff 	bl	801b33a <memset>
    char *marker = strtok(inputString, ",");
 800313c:	4930      	ldr	r1, [pc, #192]	@ (8003200 <nmea_GNRMC+0xe0>)
 800313e:	6838      	ldr	r0, [r7, #0]
 8003140:	f018 f916 	bl	801b370 <strtok>
 8003144:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 8003146:	e021      	b.n	800318c <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003148:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800314a:	f7fd f869 	bl	8000220 <strlen>
 800314e:	4603      	mov	r3, r0
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 8003154:	1c63      	adds	r3, r4, #1
 8003156:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003158:	4610      	mov	r0, r2
 800315a:	f016 f979 	bl	8019450 <malloc>
 800315e:	4603      	mov	r3, r0
 8003160:	461a      	mov	r2, r3
 8003162:	00a3      	lsls	r3, r4, #2
 8003164:	3380      	adds	r3, #128	@ 0x80
 8003166:	443b      	add	r3, r7
 8003168:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 800316c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800316e:	3b01      	subs	r3, #1
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	3380      	adds	r3, #128	@ 0x80
 8003174:	443b      	add	r3, r7
 8003176:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800317a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800317c:	4618      	mov	r0, r3
 800317e:	f018 f9f0 	bl	801b562 <strcpy>
        marker = strtok(NULL, ",");
 8003182:	491f      	ldr	r1, [pc, #124]	@ (8003200 <nmea_GNRMC+0xe0>)
 8003184:	2000      	movs	r0, #0
 8003186:	f018 f8f3 	bl	801b370 <strtok>
 800318a:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 800318c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1da      	bne.n	8003148 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8003192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f017 f820 	bl	801a1dc <strtof>
 800319c:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    gps_data->speed=speed/(1.944);
 80031a0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80031a2:	f7fd f9a9 	bl	80004f8 <__aeabi_f2d>
 80031a6:	a314      	add	r3, pc, #80	@ (adr r3, 80031f8 <nmea_GNRMC+0xd8>)
 80031a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ac:	f7fd fb26 	bl	80007fc <__aeabi_ddiv>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4610      	mov	r0, r2
 80031b6:	4619      	mov	r1, r3
 80031b8:	f7fd fcee 	bl	8000b98 <__aeabi_d2f>
 80031bc:	4602      	mov	r2, r0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	639a      	str	r2, [r3, #56]	@ 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 80031c2:	2300      	movs	r3, #0
 80031c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80031c6:	e00b      	b.n	80031e0 <nmea_GNRMC+0xc0>
 80031c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	3380      	adds	r3, #128	@ 0x80
 80031ce:	443b      	add	r3, r7
 80031d0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f016 f943 	bl	8019460 <free>
 80031da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031dc:	3301      	adds	r3, #1
 80031de:	677b      	str	r3, [r7, #116]	@ 0x74
 80031e0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80031e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031e4:	429a      	cmp	r2, r3
 80031e6:	dbef      	blt.n	80031c8 <nmea_GNRMC+0xa8>
    return 1;
 80031e8:	2301      	movs	r3, #1
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3784      	adds	r7, #132	@ 0x84
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd90      	pop	{r4, r7, pc}
 80031f2:	bf00      	nop
 80031f4:	f3af 8000 	nop.w
 80031f8:	be76c8b4 	.word	0xbe76c8b4
 80031fc:	3fff1a9f 	.word	0x3fff1a9f
 8003200:	0801f894 	.word	0x0801f894

08003204 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8003204:	b590      	push	{r4, r7, lr}
 8003206:	b089      	sub	sp, #36	@ 0x24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 800320e:	223c      	movs	r2, #60	@ 0x3c
 8003210:	2100      	movs	r1, #0
 8003212:	484c      	ldr	r0, [pc, #304]	@ (8003344 <nmea_parse+0x140>)
 8003214:	f018 f891 	bl	801b33a <memset>
    char * token = strtok(buffer, "$");
 8003218:	494b      	ldr	r1, [pc, #300]	@ (8003348 <nmea_parse+0x144>)
 800321a:	6838      	ldr	r0, [r7, #0]
 800321c:	f018 f8a8 	bl	801b370 <strtok>
 8003220:	61f8      	str	r0, [r7, #28]
    int cnt = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
    int cnt12=0;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
    while(token !=NULL){
 800322a:	e01d      	b.n	8003268 <nmea_parse+0x64>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 800322c:	69f8      	ldr	r0, [r7, #28]
 800322e:	f7fc fff7 	bl	8000220 <strlen>
 8003232:	4603      	mov	r3, r0
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	69bc      	ldr	r4, [r7, #24]
 8003238:	1c63      	adds	r3, r4, #1
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	4610      	mov	r0, r2
 800323e:	f016 f907 	bl	8019450 <malloc>
 8003242:	4603      	mov	r3, r0
 8003244:	461a      	mov	r2, r3
 8003246:	4b3f      	ldr	r3, [pc, #252]	@ (8003344 <nmea_parse+0x140>)
 8003248:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	3b01      	subs	r3, #1
 8003250:	4a3c      	ldr	r2, [pc, #240]	@ (8003344 <nmea_parse+0x140>)
 8003252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003256:	69f9      	ldr	r1, [r7, #28]
 8003258:	4618      	mov	r0, r3
 800325a:	f018 f982 	bl	801b562 <strcpy>
        token = strtok(NULL, "$");
 800325e:	493a      	ldr	r1, [pc, #232]	@ (8003348 <nmea_parse+0x144>)
 8003260:	2000      	movs	r0, #0
 8003262:	f018 f885 	bl	801b370 <strtok>
 8003266:	61f8      	str	r0, [r7, #28]
    while(token !=NULL){
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1de      	bne.n	800322c <nmea_parse+0x28>
    }
    for(int i = 0; i<cnt; i++){
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	e048      	b.n	8003306 <nmea_parse+0x102>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8003274:	4a33      	ldr	r2, [pc, #204]	@ (8003344 <nmea_parse+0x140>)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327c:	4933      	ldr	r1, [pc, #204]	@ (800334c <nmea_parse+0x148>)
 800327e:	4618      	mov	r0, r3
 8003280:	f018 f8d2 	bl	801b428 <strstr>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d03a      	beq.n	8003300 <nmea_parse+0xfc>
 800328a:	4a2e      	ldr	r2, [pc, #184]	@ (8003344 <nmea_parse+0x140>)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fd28 	bl	8002ce8 <gps_checksum>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d030      	beq.n	8003300 <nmea_parse+0xfc>
           if(strstr(data[i], "GNRMC")!=NULL){
 800329e:	4a29      	ldr	r2, [pc, #164]	@ (8003344 <nmea_parse+0x140>)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a6:	492a      	ldr	r1, [pc, #168]	@ (8003350 <nmea_parse+0x14c>)
 80032a8:	4618      	mov	r0, r3
 80032aa:	f018 f8bd 	bl	801b428 <strstr>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00d      	beq.n	80032d0 <nmea_parse+0xcc>
        	   nmea_GNRMC(gps_data, data[i]);
 80032b4:	4a23      	ldr	r2, [pc, #140]	@ (8003344 <nmea_parse+0x140>)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032bc:	4619      	mov	r1, r3
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff ff2e 	bl	8003120 <nmea_GNRMC>
        	   if(cnt12>=1){
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	dc22      	bgt.n	8003310 <nmea_parse+0x10c>
        		  break;
        	   }
               cnt12=1;
 80032ca:	2301      	movs	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e017      	b.n	8003300 <nmea_parse+0xfc>

           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 80032d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003344 <nmea_parse+0x140>)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d8:	491e      	ldr	r1, [pc, #120]	@ (8003354 <nmea_parse+0x150>)
 80032da:	4618      	mov	r0, r3
 80032dc:	f018 f8a4 	bl	801b428 <strstr>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00c      	beq.n	8003300 <nmea_parse+0xfc>
               nmea_GPGGA(gps_data, data[i]);
 80032e6:	4a17      	ldr	r2, [pc, #92]	@ (8003344 <nmea_parse+0x140>)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ee:	4619      	mov	r1, r3
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff fd43 	bl	8002d7c <nmea_GPGGA>
               if(cnt12>=1){
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	dc0b      	bgt.n	8003314 <nmea_parse+0x110>
              	   break;
               }
               cnt12=1;
 80032fc:	2301      	movs	r3, #1
 80032fe:	617b      	str	r3, [r7, #20]
    for(int i = 0; i<cnt; i++){
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	3301      	adds	r3, #1
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	429a      	cmp	r2, r3
 800330c:	dbb2      	blt.n	8003274 <nmea_parse+0x70>
 800330e:	e002      	b.n	8003316 <nmea_parse+0x112>
        		  break;
 8003310:	bf00      	nop
 8003312:	e000      	b.n	8003316 <nmea_parse+0x112>
              	   break;
 8003314:	bf00      	nop
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e009      	b.n	8003330 <nmea_parse+0x12c>
 800331c:	4a09      	ldr	r2, [pc, #36]	@ (8003344 <nmea_parse+0x140>)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003324:	4618      	mov	r0, r3
 8003326:	f016 f89b 	bl	8019460 <free>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	3301      	adds	r3, #1
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	429a      	cmp	r2, r3
 8003336:	dbf1      	blt.n	800331c <nmea_parse+0x118>


}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	3724      	adds	r7, #36	@ 0x24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd90      	pop	{r4, r7, pc}
 8003342:	bf00      	nop
 8003344:	20000ce4 	.word	0x20000ce4
 8003348:	0801f898 	.word	0x0801f898
 800334c:	0801f89c 	.word	0x0801f89c
 8003350:	0801f8a0 	.word	0x0801f8a0
 8003354:	0801f8a8 	.word	0x0801f8a8

08003358 <distancecalc>:

double distancecalc(double lat1, double lat2, double long1, double long2){
 8003358:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800335c:	b08a      	sub	sp, #40	@ 0x28
 800335e:	af00      	add	r7, sp, #0
 8003360:	ed87 0b06 	vstr	d0, [r7, #24]
 8003364:	ed87 1b04 	vstr	d1, [r7, #16]
 8003368:	ed87 2b02 	vstr	d2, [r7, #8]
 800336c:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 800337c:	a358      	add	r3, pc, #352	@ (adr r3, 80034e0 <distancecalc+0x188>)
 800337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003382:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003386:	f7fd f90f 	bl	80005a8 <__aeabi_dmul>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	ec43 2b17 	vmov	d7, r2, r3
 8003392:	eeb0 0a47 	vmov.f32	s0, s14
 8003396:	eef0 0a67 	vmov.f32	s1, s15
 800339a:	f01a fe23 	bl	801dfe4 <sinl>
 800339e:	ec55 4b10 	vmov	r4, r5, d0
 80033a2:	a34f      	add	r3, pc, #316	@ (adr r3, 80034e0 <distancecalc+0x188>)
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033ac:	f7fd f8fc 	bl	80005a8 <__aeabi_dmul>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	ec43 2b17 	vmov	d7, r2, r3
 80033b8:	eeb0 0a47 	vmov.f32	s0, s14
 80033bc:	eef0 0a67 	vmov.f32	s1, s15
 80033c0:	f01a fe10 	bl	801dfe4 <sinl>
 80033c4:	ec53 2b10 	vmov	r2, r3, d0
 80033c8:	4620      	mov	r0, r4
 80033ca:	4629      	mov	r1, r5
 80033cc:	f7fd f8ec 	bl	80005a8 <__aeabi_dmul>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4614      	mov	r4, r2
 80033d6:	461d      	mov	r5, r3
 80033d8:	a341      	add	r3, pc, #260	@ (adr r3, 80034e0 <distancecalc+0x188>)
 80033da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033e2:	f7fd f8e1 	bl	80005a8 <__aeabi_dmul>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	ec43 2b17 	vmov	d7, r2, r3
 80033ee:	eeb0 0a47 	vmov.f32	s0, s14
 80033f2:	eef0 0a67 	vmov.f32	s1, s15
 80033f6:	f01a fdf3 	bl	801dfe0 <cosl>
 80033fa:	ec59 8b10 	vmov	r8, r9, d0
 80033fe:	a338      	add	r3, pc, #224	@ (adr r3, 80034e0 <distancecalc+0x188>)
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003408:	f7fd f8ce 	bl	80005a8 <__aeabi_dmul>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	ec43 2b17 	vmov	d7, r2, r3
 8003414:	eeb0 0a47 	vmov.f32	s0, s14
 8003418:	eef0 0a67 	vmov.f32	s1, s15
 800341c:	f01a fde0 	bl	801dfe0 <cosl>
 8003420:	ec53 2b10 	vmov	r2, r3, d0
 8003424:	4640      	mov	r0, r8
 8003426:	4649      	mov	r1, r9
 8003428:	f7fd f8be 	bl	80005a8 <__aeabi_dmul>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4690      	mov	r8, r2
 8003432:	4699      	mov	r9, r3
 8003434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003438:	e9d7 0100 	ldrd	r0, r1, [r7]
 800343c:	f7fc fefc 	bl	8000238 <__aeabi_dsub>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4610      	mov	r0, r2
 8003446:	4619      	mov	r1, r3
 8003448:	a325      	add	r3, pc, #148	@ (adr r3, 80034e0 <distancecalc+0x188>)
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	f7fd f8ab 	bl	80005a8 <__aeabi_dmul>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	ec43 2b17 	vmov	d7, r2, r3
 800345a:	eeb0 0a47 	vmov.f32	s0, s14
 800345e:	eef0 0a67 	vmov.f32	s1, s15
 8003462:	f01a fdbd 	bl	801dfe0 <cosl>
 8003466:	ec53 2b10 	vmov	r2, r3, d0
 800346a:	4640      	mov	r0, r8
 800346c:	4649      	mov	r1, r9
 800346e:	f7fd f89b 	bl	80005a8 <__aeabi_dmul>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4620      	mov	r0, r4
 8003478:	4629      	mov	r1, r5
 800347a:	f7fc fedf 	bl	800023c <__adddf3>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	ec43 2b17 	vmov	d7, r2, r3
 8003486:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 80034d8 <distancecalc+0x180>
 800348a:	eeb0 0a47 	vmov.f32	s0, s14
 800348e:	eef0 0a67 	vmov.f32	s1, s15
 8003492:	f01a fd47 	bl	801df24 <fmin>
 8003496:	eeb0 7a40 	vmov.f32	s14, s0
 800349a:	eef0 7a60 	vmov.f32	s15, s1
 800349e:	eeb0 0a47 	vmov.f32	s0, s14
 80034a2:	eef0 0a67 	vmov.f32	s1, s15
 80034a6:	f01a fd9f 	bl	801dfe8 <acosl>
 80034aa:	ec51 0b10 	vmov	r0, r1, d0
 80034ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80034e8 <distancecalc+0x190>)
 80034b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b4:	f7fd f878 	bl	80005a8 <__aeabi_dmul>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 80034c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034c4:	ec43 2b17 	vmov	d7, r2, r3
}
 80034c8:	eeb0 0a47 	vmov.f32	s0, s14
 80034cc:	eef0 0a67 	vmov.f32	s1, s15
 80034d0:	3728      	adds	r7, #40	@ 0x28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034d8:	00000000 	.word	0x00000000
 80034dc:	3ff00000 	.word	0x3ff00000
 80034e0:	a2529d39 	.word	0xa2529d39
 80034e4:	3f91df46 	.word	0x3f91df46
 80034e8:	00000000 	.word	0x00000000
 80034ec:	41584dae 	.word	0x41584dae

080034f0 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800350e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003516:	bf00      	nop
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_APB1_GRP1_EnableClock>:
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800352c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800352e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4313      	orrs	r3, r2
 8003536:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800353c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4013      	ands	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003544:	68fb      	ldr	r3, [r7, #12]
}
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003568:	2300      	movs	r3, #0
 800356a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800356c:	4b2c      	ldr	r3, [pc, #176]	@ (8003620 <MX_RTC_Init+0xcc>)
 800356e:	4a2d      	ldr	r2, [pc, #180]	@ (8003624 <MX_RTC_Init+0xd0>)
 8003570:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003572:	4b2b      	ldr	r3, [pc, #172]	@ (8003620 <MX_RTC_Init+0xcc>)
 8003574:	2200      	movs	r2, #0
 8003576:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003578:	4b29      	ldr	r3, [pc, #164]	@ (8003620 <MX_RTC_Init+0xcc>)
 800357a:	227f      	movs	r2, #127	@ 0x7f
 800357c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800357e:	4b28      	ldr	r3, [pc, #160]	@ (8003620 <MX_RTC_Init+0xcc>)
 8003580:	f641 6284 	movw	r2, #7812	@ 0x1e84
 8003584:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003586:	4b26      	ldr	r3, [pc, #152]	@ (8003620 <MX_RTC_Init+0xcc>)
 8003588:	2200      	movs	r2, #0
 800358a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800358c:	4b24      	ldr	r3, [pc, #144]	@ (8003620 <MX_RTC_Init+0xcc>)
 800358e:	2200      	movs	r2, #0
 8003590:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003592:	4b23      	ldr	r3, [pc, #140]	@ (8003620 <MX_RTC_Init+0xcc>)
 8003594:	2200      	movs	r2, #0
 8003596:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003598:	4b21      	ldr	r3, [pc, #132]	@ (8003620 <MX_RTC_Init+0xcc>)
 800359a:	2200      	movs	r2, #0
 800359c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800359e:	4820      	ldr	r0, [pc, #128]	@ (8003620 <MX_RTC_Init+0xcc>)
 80035a0:	f009 ff44 	bl	800d42c <HAL_RTC_Init>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80035aa:	f7ff fb97 	bl	8002cdc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80035c6:	1d3b      	adds	r3, r7, #4
 80035c8:	2201      	movs	r2, #1
 80035ca:	4619      	mov	r1, r3
 80035cc:	4814      	ldr	r0, [pc, #80]	@ (8003620 <MX_RTC_Init+0xcc>)
 80035ce:	f009 ffdd 	bl	800d58c <HAL_RTC_SetTime>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <MX_RTC_Init+0x88>
  {
    Error_Handler();
 80035d8:	f7ff fb80 	bl	8002cdc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80035dc:	2301      	movs	r3, #1
 80035de:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80035e0:	2301      	movs	r3, #1
 80035e2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80035e4:	2301      	movs	r3, #1
 80035e6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80035ec:	463b      	mov	r3, r7
 80035ee:	2201      	movs	r2, #1
 80035f0:	4619      	mov	r1, r3
 80035f2:	480b      	ldr	r0, [pc, #44]	@ (8003620 <MX_RTC_Init+0xcc>)
 80035f4:	f00a f88e 	bl	800d714 <HAL_RTC_SetDate>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80035fe:	f7ff fb6d 	bl	8002cdc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003602:	2204      	movs	r2, #4
 8003604:	2100      	movs	r1, #0
 8003606:	4806      	ldr	r0, [pc, #24]	@ (8003620 <MX_RTC_Init+0xcc>)
 8003608:	f00a f9a2 	bl	800d950 <HAL_RTCEx_SetWakeUpTimer_IT>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003612:	f7ff fb63 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003616:	bf00      	nop
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000d20 	.word	0x20000d20
 8003624:	40002800 	.word	0x40002800

08003628 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b096      	sub	sp, #88	@ 0x58
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003630:	f107 0308 	add.w	r3, r7, #8
 8003634:	2250      	movs	r2, #80	@ 0x50
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f017 fe7e 	bl	801b33a <memset>
  if(rtcHandle->Instance==RTC)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a14      	ldr	r2, [pc, #80]	@ (8003694 <HAL_RTC_MspInit+0x6c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d121      	bne.n	800368c <HAL_RTC_MspInit+0x64>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

	  HAL_PWR_EnableBkUpAccess();
 8003648:	f008 f914 	bl	800b874 <HAL_PWR_EnableBkUpAccess>




	  HAL_PWR_EnableBkUpAccess();
 800364c:	f008 f912 	bl	800b874 <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003650:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003654:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8003656:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800365a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800365c:	f107 0308 	add.w	r3, r7, #8
 8003660:	4618      	mov	r0, r3
 8003662:	f009 fc5c 	bl	800cf1e <HAL_RCCEx_PeriphCLKConfig>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800366c:	f7ff fb36 	bl	8002cdc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003670:	f7ff ff45 	bl	80034fe <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003674:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003678:	f7ff ff52 	bl	8003520 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800367c:	2200      	movs	r2, #0
 800367e:	2100      	movs	r1, #0
 8003680:	2003      	movs	r0, #3
 8003682:	f004 ff72 	bl	800856a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003686:	2003      	movs	r0, #3
 8003688:	f004 ff89 	bl	800859e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800368c:	bf00      	nop
 800368e:	3758      	adds	r7, #88	@ 0x58
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40002800 	.word	0x40002800

08003698 <LL_AHB2_GRP1_EnableClock>:
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80036a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80036b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4013      	ands	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036bc:	68fb      	ldr	r3, [r7, #12]
}
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b085      	sub	sp, #20
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80036d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80036d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4313      	orrs	r3, r2
 80036e0:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80036e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4013      	ands	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036ee:	68fb      	ldr	r3, [r7, #12]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003700:	4b1b      	ldr	r3, [pc, #108]	@ (8003770 <MX_SPI1_Init+0x74>)
 8003702:	4a1c      	ldr	r2, [pc, #112]	@ (8003774 <MX_SPI1_Init+0x78>)
 8003704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003706:	4b1a      	ldr	r3, [pc, #104]	@ (8003770 <MX_SPI1_Init+0x74>)
 8003708:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800370c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800370e:	4b18      	ldr	r3, [pc, #96]	@ (8003770 <MX_SPI1_Init+0x74>)
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003714:	4b16      	ldr	r3, [pc, #88]	@ (8003770 <MX_SPI1_Init+0x74>)
 8003716:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800371a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800371c:	4b14      	ldr	r3, [pc, #80]	@ (8003770 <MX_SPI1_Init+0x74>)
 800371e:	2200      	movs	r2, #0
 8003720:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003722:	4b13      	ldr	r3, [pc, #76]	@ (8003770 <MX_SPI1_Init+0x74>)
 8003724:	2200      	movs	r2, #0
 8003726:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003728:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <MX_SPI1_Init+0x74>)
 800372a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800372e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003730:	4b0f      	ldr	r3, [pc, #60]	@ (8003770 <MX_SPI1_Init+0x74>)
 8003732:	2210      	movs	r2, #16
 8003734:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003736:	4b0e      	ldr	r3, [pc, #56]	@ (8003770 <MX_SPI1_Init+0x74>)
 8003738:	2200      	movs	r2, #0
 800373a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800373c:	4b0c      	ldr	r3, [pc, #48]	@ (8003770 <MX_SPI1_Init+0x74>)
 800373e:	2200      	movs	r2, #0
 8003740:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003742:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <MX_SPI1_Init+0x74>)
 8003744:	2200      	movs	r2, #0
 8003746:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003748:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <MX_SPI1_Init+0x74>)
 800374a:	2207      	movs	r2, #7
 800374c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800374e:	4b08      	ldr	r3, [pc, #32]	@ (8003770 <MX_SPI1_Init+0x74>)
 8003750:	2200      	movs	r2, #0
 8003752:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003754:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <MX_SPI1_Init+0x74>)
 8003756:	2208      	movs	r2, #8
 8003758:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800375a:	4805      	ldr	r0, [pc, #20]	@ (8003770 <MX_SPI1_Init+0x74>)
 800375c:	f00a f9b4 	bl	800dac8 <HAL_SPI_Init>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003766:	f7ff fab9 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000d78 	.word	0x20000d78
 8003774:	40013000 	.word	0x40013000

08003778 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	f107 030c 	add.w	r3, r7, #12
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1c      	ldr	r2, [pc, #112]	@ (8003808 <HAL_SPI_MspInit+0x90>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d132      	bne.n	8003800 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800379a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800379e:	f7ff ff94 	bl	80036ca <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a2:	2001      	movs	r0, #1
 80037a4:	f7ff ff78 	bl	8003698 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a8:	2002      	movs	r0, #2
 80037aa:	f7ff ff75 	bl	8003698 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80037ae:	2342      	movs	r3, #66	@ 0x42
 80037b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b2:	2302      	movs	r3, #2
 80037b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037be:	2305      	movs	r3, #5
 80037c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c2:	f107 030c 	add.w	r3, r7, #12
 80037c6:	4619      	mov	r1, r3
 80037c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037cc:	f005 fb00 	bl	8008dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80037d0:	2320      	movs	r3, #32
 80037d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d4:	2302      	movs	r3, #2
 80037d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037dc:	2300      	movs	r3, #0
 80037de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037e0:	2305      	movs	r3, #5
 80037e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e4:	f107 030c 	add.w	r3, r7, #12
 80037e8:	4619      	mov	r1, r3
 80037ea:	4808      	ldr	r0, [pc, #32]	@ (800380c <HAL_SPI_MspInit+0x94>)
 80037ec:	f005 faf0 	bl	8008dd0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 80037f0:	2200      	movs	r2, #0
 80037f2:	2103      	movs	r1, #3
 80037f4:	2022      	movs	r0, #34	@ 0x22
 80037f6:	f004 feb8 	bl	800856a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80037fa:	2022      	movs	r0, #34	@ 0x22
 80037fc:	f004 fecf 	bl	800859e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003800:	bf00      	nop
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40013000 	.word	0x40013000
 800380c:	48000400 	.word	0x48000400

08003810 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 8003810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003814:	ed2d 8b02 	vpush	{d8}
 8003818:	b0a7      	sub	sp, #156	@ 0x9c
 800381a:	af16      	add	r7, sp, #88	@ 0x58
 800381c:	6378      	str	r0, [r7, #52]	@ 0x34
 800381e:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8003822:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 8003826:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003828:	627a      	str	r2, [r7, #36]	@ 0x24
 800382a:	ed87 1a08 	vstr	s2, [r7, #32]
	int framesize=0;
 800382e:	2300      	movs	r3, #0
 8003830:	63fb      	str	r3, [r7, #60]	@ 0x3c
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 8003832:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003834:	f7fc fe60 	bl	80004f8 <__aeabi_f2d>
 8003838:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800383c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800383e:	f7fc fe5b 	bl	80004f8 <__aeabi_f2d>
 8003842:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384a:	4618      	mov	r0, r3
 800384c:	f7fc fe54 	bl	80004f8 <__aeabi_f2d>
 8003850:	a332      	add	r3, pc, #200	@ (adr r3, 800391c <csvframe+0x10c>)
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	f7fc fea7 	bl	80005a8 <__aeabi_dmul>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	ec43 2b18 	vmov	d8, r2, r3
 8003862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003864:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 800386e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fc fe40 	bl	80004f8 <__aeabi_f2d>
 8003878:	4682      	mov	sl, r0
 800387a:	468b      	mov	fp, r1
 800387c:	6a38      	ldr	r0, [r7, #32]
 800387e:	f7fc fe3b 	bl	80004f8 <__aeabi_f2d>
 8003882:	4b1f      	ldr	r3, [pc, #124]	@ (8003900 <csvframe+0xf0>)
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	4b1e      	ldr	r3, [pc, #120]	@ (8003904 <csvframe+0xf4>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	4b1e      	ldr	r3, [pc, #120]	@ (8003908 <csvframe+0xf8>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	607b      	str	r3, [r7, #4]
 8003894:	4b1d      	ldr	r3, [pc, #116]	@ (800390c <csvframe+0xfc>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	461e      	mov	r6, r3
 800389a:	4b1d      	ldr	r3, [pc, #116]	@ (8003910 <csvframe+0x100>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003914 <csvframe+0x104>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80038a6:	9214      	str	r2, [sp, #80]	@ 0x50
 80038a8:	9613      	str	r6, [sp, #76]	@ 0x4c
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	9212      	str	r2, [sp, #72]	@ 0x48
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	9211      	str	r2, [sp, #68]	@ 0x44
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	9310      	str	r3, [sp, #64]	@ 0x40
 80038b6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80038ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80038be:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 80038c2:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80038c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80038ca:	ed8d 8b04 	vstr	d8, [sp, #16]
 80038ce:	ed97 7b04 	vldr	d7, [r7, #16]
 80038d2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80038d6:	ed97 7b06 	vldr	d7, [r7, #24]
 80038da:	ed8d 7b00 	vstr	d7, [sp]
 80038de:	4a0e      	ldr	r2, [pc, #56]	@ (8003918 <csvframe+0x108>)
 80038e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038e4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80038e6:	f017 fc91 	bl	801b20c <sniprintf>
 80038ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
	return framesize;
 80038ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3744      	adds	r7, #68	@ 0x44
 80038f2:	46bd      	mov	sp, r7
 80038f4:	ecbd 8b02 	vpop	{d8}
 80038f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038fc:	f3af 8000 	nop.w
 8003900:	20000012 	.word	0x20000012
 8003904:	20000011 	.word	0x20000011
 8003908:	20000010 	.word	0x20000010
 800390c:	20000b7d 	.word	0x20000b7d
 8003910:	20000b7e 	.word	0x20000b7e
 8003914:	20000b7c 	.word	0x20000b7c
 8003918:	0801f8b0 	.word	0x0801f8b0
 800391c:	cccccccd 	.word	0xcccccccd
 8003920:	400ccccc 	.word	0x400ccccc

08003924 <storeindex>:


void storeindex(void){
 8003924:	b580      	push	{r7, lr}
 8003926:	b09c      	sub	sp, #112	@ 0x70
 8003928:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 800392a:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 800392e:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8003930:	463b      	mov	r3, r7
 8003932:	2264      	movs	r2, #100	@ 0x64
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f017 fcff 	bl	801b33a <memset>
	snprintf((char *)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 800393c:	4b14      	ldr	r3, [pc, #80]	@ (8003990 <storeindex+0x6c>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4b14      	ldr	r3, [pc, #80]	@ (8003994 <storeindex+0x70>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4638      	mov	r0, r7
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	4a13      	ldr	r2, [pc, #76]	@ (8003998 <storeindex+0x74>)
 800394c:	2164      	movs	r1, #100	@ 0x64
 800394e:	f017 fc5d 	bl	801b20c <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8003952:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003954:	2b00      	cmp	r3, #0
 8003956:	da00      	bge.n	800395a <storeindex+0x36>
 8003958:	330f      	adds	r3, #15
 800395a:	111b      	asrs	r3, r3, #4
 800395c:	4618      	mov	r0, r3
 800395e:	f7fc fdb9 	bl	80004d4 <__aeabi_i2d>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4610      	mov	r0, r2
 8003968:	4619      	mov	r1, r3
 800396a:	f7fd f8cd 	bl	8000b08 <__aeabi_d2iz>
 800396e:	4603      	mov	r3, r0
 8003970:	4619      	mov	r1, r3
 8003972:	480a      	ldr	r0, [pc, #40]	@ (800399c <storeindex+0x78>)
 8003974:	f013 fe11 	bl	801759a <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8003978:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800397a:	463a      	mov	r2, r7
 800397c:	2300      	movs	r3, #0
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	2364      	movs	r3, #100	@ 0x64
 8003982:	4806      	ldr	r0, [pc, #24]	@ (800399c <storeindex+0x78>)
 8003984:	f013 fe8c 	bl	80176a0 <SPIF_WritePage>

}
 8003988:	bf00      	nop
 800398a:	3768      	adds	r7, #104	@ 0x68
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20000a9c 	.word	0x20000a9c
 8003994:	20000aa0 	.word	0x20000aa0
 8003998:	0801f904 	.word	0x0801f904
 800399c:	20000868 	.word	0x20000868

080039a0 <getindex>:

void getindex(void){
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 80039a6:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 80039aa:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	2300      	movs	r3, #0
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	2332      	movs	r3, #50	@ 0x32
 80039b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003a64 <getindex+0xc4>)
 80039b6:	482c      	ldr	r0, [pc, #176]	@ (8003a68 <getindex+0xc8>)
 80039b8:	f013 fe90 	bl	80176dc <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 80039bc:	220a      	movs	r2, #10
 80039be:	2124      	movs	r1, #36	@ 0x24
 80039c0:	482a      	ldr	r0, [pc, #168]	@ (8003a6c <getindex+0xcc>)
 80039c2:	f017 fcba 	bl	801b33a <memset>
	memset(numbuf2,'$',10);
 80039c6:	220a      	movs	r2, #10
 80039c8:	2124      	movs	r1, #36	@ 0x24
 80039ca:	4829      	ldr	r0, [pc, #164]	@ (8003a70 <getindex+0xd0>)
 80039cc:	f017 fcb5 	bl	801b33a <memset>
	int cnt=0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 80039d4:	4b23      	ldr	r3, [pc, #140]	@ (8003a64 <getindex+0xc4>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	2b09      	cmp	r3, #9
 80039de:	dc3a      	bgt.n	8003a56 <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 80039e0:	e00b      	b.n	80039fa <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 80039e2:	4a20      	ldr	r2, [pc, #128]	@ (8003a64 <getindex+0xc4>)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4413      	add	r3, r2
 80039e8:	7819      	ldrb	r1, [r3, #0]
 80039ea:	4a20      	ldr	r2, [pc, #128]	@ (8003a6c <getindex+0xcc>)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	460a      	mov	r2, r1
 80039f2:	701a      	strb	r2, [r3, #0]
			  cnt++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	3301      	adds	r3, #1
 80039f8:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 80039fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003a64 <getindex+0xc4>)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b24      	cmp	r3, #36	@ 0x24
 8003a04:	d1ed      	bne.n	80039e2 <getindex+0x42>
		  }
		  cnt++;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8003a10:	e00e      	b.n	8003a30 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8003a12:	4a14      	ldr	r2, [pc, #80]	@ (8003a64 <getindex+0xc4>)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	7819      	ldrb	r1, [r3, #0]
 8003a1a:	4a15      	ldr	r2, [pc, #84]	@ (8003a70 <getindex+0xd0>)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4413      	add	r3, r2
 8003a20:	460a      	mov	r2, r1
 8003a22:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	3301      	adds	r3, #1
 8003a28:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8003a30:	4a0c      	ldr	r2, [pc, #48]	@ (8003a64 <getindex+0xc4>)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4413      	add	r3, r2
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b24      	cmp	r3, #36	@ 0x24
 8003a3a:	d1ea      	bne.n	8003a12 <getindex+0x72>
		  	  }

		 pageoffset=atoi((char *)numbuf1);
 8003a3c:	480b      	ldr	r0, [pc, #44]	@ (8003a6c <getindex+0xcc>)
 8003a3e:	f015 fd03 	bl	8019448 <atoi>
 8003a42:	4603      	mov	r3, r0
 8003a44:	4a0b      	ldr	r2, [pc, #44]	@ (8003a74 <getindex+0xd4>)
 8003a46:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((char *)numbuf2);
 8003a48:	4809      	ldr	r0, [pc, #36]	@ (8003a70 <getindex+0xd0>)
 8003a4a:	f015 fcfd 	bl	8019448 <atoi>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4a09      	ldr	r2, [pc, #36]	@ (8003a78 <getindex+0xd8>)
 8003a52:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8003a54:	e001      	b.n	8003a5a <getindex+0xba>
		storeindex();
 8003a56:	f7ff ff65 	bl	8003924 <storeindex>
}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000d44 	.word	0x20000d44
 8003a68:	20000868 	.word	0x20000868
 8003a6c:	20000aa8 	.word	0x20000aa8
 8003a70:	20000ab4 	.word	0x20000ab4
 8003a74:	20000a9c 	.word	0x20000a9c
 8003a78:	20000aa0 	.word	0x20000aa0

08003a7c <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 8003a86:	4b3f      	ldr	r3, [pc, #252]	@ (8003b84 <writebuffertoflash+0x108>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d11b      	bne.n	8003acc <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8003a94:	4b3c      	ldr	r3, [pc, #240]	@ (8003b88 <writebuffertoflash+0x10c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d117      	bne.n	8003acc <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8003a9c:	4b39      	ldr	r3, [pc, #228]	@ (8003b84 <writebuffertoflash+0x108>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	da00      	bge.n	8003aa8 <writebuffertoflash+0x2c>
 8003aa6:	330f      	adds	r3, #15
 8003aa8:	111b      	asrs	r3, r3, #4
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fc fd12 	bl	80004d4 <__aeabi_i2d>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	f7fd f826 	bl	8000b08 <__aeabi_d2iz>
 8003abc:	4603      	mov	r3, r0
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4832      	ldr	r0, [pc, #200]	@ (8003b8c <writebuffertoflash+0x110>)
 8003ac2:	f013 fd6a 	bl	801759a <SPIF_EraseSector>
		sectoreraseen=1;
 8003ac6:	4b30      	ldr	r3, [pc, #192]	@ (8003b88 <writebuffertoflash+0x10c>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8003acc:	4b30      	ldr	r3, [pc, #192]	@ (8003b90 <writebuffertoflash+0x114>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	2bff      	cmp	r3, #255	@ 0xff
 8003ad6:	dc11      	bgt.n	8003afc <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8003ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b84 <writebuffertoflash+0x108>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4619      	mov	r1, r3
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b90 <writebuffertoflash+0x114>)
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	9200      	str	r2, [sp, #0]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	4828      	ldr	r0, [pc, #160]	@ (8003b8c <writebuffertoflash+0x110>)
 8003aea:	f013 fdd9 	bl	80176a0 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8003aee:	4b28      	ldr	r3, [pc, #160]	@ (8003b90 <writebuffertoflash+0x114>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	4413      	add	r3, r2
 8003af6:	4a26      	ldr	r2, [pc, #152]	@ (8003b90 <writebuffertoflash+0x114>)
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e03c      	b.n	8003b76 <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 8003afc:	4b21      	ldr	r3, [pc, #132]	@ (8003b84 <writebuffertoflash+0x108>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4619      	mov	r1, r3
 8003b02:	4b23      	ldr	r3, [pc, #140]	@ (8003b90 <writebuffertoflash+0x114>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4b20      	ldr	r3, [pc, #128]	@ (8003b90 <writebuffertoflash+0x114>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	4613      	mov	r3, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	481d      	ldr	r0, [pc, #116]	@ (8003b8c <writebuffertoflash+0x110>)
 8003b18:	f013 fdc2 	bl	80176a0 <SPIF_WritePage>
		HAL_Delay(100);
 8003b1c:	2064      	movs	r0, #100	@ 0x64
 8003b1e:	f7fd fe06 	bl	800172e <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8003b22:	4b18      	ldr	r3, [pc, #96]	@ (8003b84 <writebuffertoflash+0x108>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3301      	adds	r3, #1
 8003b28:	4618      	mov	r0, r3
 8003b2a:	4b19      	ldr	r3, [pc, #100]	@ (8003b90 <writebuffertoflash+0x114>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003b32:	461a      	mov	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	1899      	adds	r1, r3, r2
 8003b38:	4b15      	ldr	r3, [pc, #84]	@ (8003b90 <writebuffertoflash+0x114>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	2300      	movs	r3, #0
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	460a      	mov	r2, r1
 8003b4e:	4601      	mov	r1, r0
 8003b50:	480e      	ldr	r0, [pc, #56]	@ (8003b8c <writebuffertoflash+0x110>)
 8003b52:	f013 fda5 	bl	80176a0 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 8003b56:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <writebuffertoflash+0x108>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	4a09      	ldr	r2, [pc, #36]	@ (8003b84 <writebuffertoflash+0x108>)
 8003b5e:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8003b60:	4b09      	ldr	r3, [pc, #36]	@ (8003b88 <writebuffertoflash+0x10c>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 8003b66:	4b0a      	ldr	r3, [pc, #40]	@ (8003b90 <writebuffertoflash+0x114>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	4a07      	ldr	r2, [pc, #28]	@ (8003b90 <writebuffertoflash+0x114>)
 8003b74:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 8003b76:	f7ff fed5 	bl	8003924 <storeindex>

}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000aa0 	.word	0x20000aa0
 8003b88:	20000aa4 	.word	0x20000aa4
 8003b8c:	20000868 	.word	0x20000868
 8003b90:	20000a9c 	.word	0x20000a9c

08003b94 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af04      	add	r7, sp, #16
 8003baa:	4603      	mov	r3, r0
 8003bac:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003bae:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb2:	9302      	str	r3, [sp, #8]
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2178      	movs	r1, #120	@ 0x78
 8003bc2:	4803      	ldr	r0, [pc, #12]	@ (8003bd0 <ssd1306_WriteCommand+0x2c>)
 8003bc4:	f005 fca2 	bl	800950c <HAL_I2C_Mem_Write>
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000544 	.word	0x20000544

08003bd4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af04      	add	r7, sp, #16
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	f04f 32ff 	mov.w	r2, #4294967295
 8003be6:	9202      	str	r2, [sp, #8]
 8003be8:	9301      	str	r3, [sp, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	2301      	movs	r3, #1
 8003bf0:	2240      	movs	r2, #64	@ 0x40
 8003bf2:	2178      	movs	r1, #120	@ 0x78
 8003bf4:	4803      	ldr	r0, [pc, #12]	@ (8003c04 <ssd1306_WriteData+0x30>)
 8003bf6:	f005 fc89 	bl	800950c <HAL_I2C_Mem_Write>
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000544 	.word	0x20000544

08003c08 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003c0c:	f7ff ffc2 	bl	8003b94 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003c10:	2064      	movs	r0, #100	@ 0x64
 8003c12:	f7fd fd8c 	bl	800172e <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003c16:	2000      	movs	r0, #0
 8003c18:	f000 fb1a 	bl	8004250 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003c1c:	2020      	movs	r0, #32
 8003c1e:	f7ff ffc1 	bl	8003ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003c22:	2000      	movs	r0, #0
 8003c24:	f7ff ffbe 	bl	8003ba4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003c28:	20b0      	movs	r0, #176	@ 0xb0
 8003c2a:	f7ff ffbb 	bl	8003ba4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003c2e:	20c8      	movs	r0, #200	@ 0xc8
 8003c30:	f7ff ffb8 	bl	8003ba4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003c34:	2000      	movs	r0, #0
 8003c36:	f7ff ffb5 	bl	8003ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003c3a:	2010      	movs	r0, #16
 8003c3c:	f7ff ffb2 	bl	8003ba4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003c40:	2040      	movs	r0, #64	@ 0x40
 8003c42:	f7ff ffaf 	bl	8003ba4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003c46:	20ff      	movs	r0, #255	@ 0xff
 8003c48:	f000 faee 	bl	8004228 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003c4c:	20a1      	movs	r0, #161	@ 0xa1
 8003c4e:	f7ff ffa9 	bl	8003ba4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003c52:	20a6      	movs	r0, #166	@ 0xa6
 8003c54:	f7ff ffa6 	bl	8003ba4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003c58:	20a8      	movs	r0, #168	@ 0xa8
 8003c5a:	f7ff ffa3 	bl	8003ba4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003c5e:	203f      	movs	r0, #63	@ 0x3f
 8003c60:	f7ff ffa0 	bl	8003ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003c64:	20a4      	movs	r0, #164	@ 0xa4
 8003c66:	f7ff ff9d 	bl	8003ba4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003c6a:	20d3      	movs	r0, #211	@ 0xd3
 8003c6c:	f7ff ff9a 	bl	8003ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003c70:	2000      	movs	r0, #0
 8003c72:	f7ff ff97 	bl	8003ba4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003c76:	20d5      	movs	r0, #213	@ 0xd5
 8003c78:	f7ff ff94 	bl	8003ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003c7c:	20f0      	movs	r0, #240	@ 0xf0
 8003c7e:	f7ff ff91 	bl	8003ba4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003c82:	20d9      	movs	r0, #217	@ 0xd9
 8003c84:	f7ff ff8e 	bl	8003ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003c88:	2022      	movs	r0, #34	@ 0x22
 8003c8a:	f7ff ff8b 	bl	8003ba4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003c8e:	20da      	movs	r0, #218	@ 0xda
 8003c90:	f7ff ff88 	bl	8003ba4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003c94:	2012      	movs	r0, #18
 8003c96:	f7ff ff85 	bl	8003ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003c9a:	20db      	movs	r0, #219	@ 0xdb
 8003c9c:	f7ff ff82 	bl	8003ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003ca0:	2020      	movs	r0, #32
 8003ca2:	f7ff ff7f 	bl	8003ba4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003ca6:	208d      	movs	r0, #141	@ 0x8d
 8003ca8:	f7ff ff7c 	bl	8003ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003cac:	2014      	movs	r0, #20
 8003cae:	f7ff ff79 	bl	8003ba4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	f000 facc 	bl	8004250 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003cb8:	2000      	movs	r0, #0
 8003cba:	f000 f80f 	bl	8003cdc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003cbe:	f000 f825 	bl	8003d0c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003cc2:	4b05      	ldr	r3, [pc, #20]	@ (8003cd8 <ssd1306_Init+0xd0>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003cc8:	4b03      	ldr	r3, [pc, #12]	@ (8003cd8 <ssd1306_Init+0xd0>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003cce:	4b02      	ldr	r3, [pc, #8]	@ (8003cd8 <ssd1306_Init+0xd0>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	711a      	strb	r2, [r3, #4]
}
 8003cd4:	bf00      	nop
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	200011dc 	.word	0x200011dc

08003cdc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <ssd1306_Fill+0x14>
 8003cec:	2300      	movs	r3, #0
 8003cee:	e000      	b.n	8003cf2 <ssd1306_Fill+0x16>
 8003cf0:	23ff      	movs	r3, #255	@ 0xff
 8003cf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4803      	ldr	r0, [pc, #12]	@ (8003d08 <ssd1306_Fill+0x2c>)
 8003cfa:	f017 fb1e 	bl	801b33a <memset>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	20000ddc 	.word	0x20000ddc

08003d0c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003d12:	2300      	movs	r3, #0
 8003d14:	71fb      	strb	r3, [r7, #7]
 8003d16:	e016      	b.n	8003d46 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	3b50      	subs	r3, #80	@ 0x50
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff ff40 	bl	8003ba4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003d24:	2000      	movs	r0, #0
 8003d26:	f7ff ff3d 	bl	8003ba4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003d2a:	2010      	movs	r0, #16
 8003d2c:	f7ff ff3a 	bl	8003ba4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	01db      	lsls	r3, r3, #7
 8003d34:	4a08      	ldr	r2, [pc, #32]	@ (8003d58 <ssd1306_UpdateScreen+0x4c>)
 8003d36:	4413      	add	r3, r2
 8003d38:	2180      	movs	r1, #128	@ 0x80
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff ff4a 	bl	8003bd4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	3301      	adds	r3, #1
 8003d44:	71fb      	strb	r3, [r7, #7]
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	2b07      	cmp	r3, #7
 8003d4a:	d9e5      	bls.n	8003d18 <ssd1306_UpdateScreen+0xc>
    }
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000ddc 	.word	0x20000ddc

08003d5c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	71fb      	strb	r3, [r7, #7]
 8003d66:	460b      	mov	r3, r1
 8003d68:	71bb      	strb	r3, [r7, #6]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	db3d      	blt.n	8003df2 <ssd1306_DrawPixel+0x96>
 8003d76:	79bb      	ldrb	r3, [r7, #6]
 8003d78:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d7a:	d83a      	bhi.n	8003df2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003d7c:	797b      	ldrb	r3, [r7, #5]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d11a      	bne.n	8003db8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003d82:	79fa      	ldrb	r2, [r7, #7]
 8003d84:	79bb      	ldrb	r3, [r7, #6]
 8003d86:	08db      	lsrs	r3, r3, #3
 8003d88:	b2d8      	uxtb	r0, r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	01db      	lsls	r3, r3, #7
 8003d8e:	4413      	add	r3, r2
 8003d90:	4a1b      	ldr	r2, [pc, #108]	@ (8003e00 <ssd1306_DrawPixel+0xa4>)
 8003d92:	5cd3      	ldrb	r3, [r2, r3]
 8003d94:	b25a      	sxtb	r2, r3
 8003d96:	79bb      	ldrb	r3, [r7, #6]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003da2:	b25b      	sxtb	r3, r3
 8003da4:	4313      	orrs	r3, r2
 8003da6:	b259      	sxtb	r1, r3
 8003da8:	79fa      	ldrb	r2, [r7, #7]
 8003daa:	4603      	mov	r3, r0
 8003dac:	01db      	lsls	r3, r3, #7
 8003dae:	4413      	add	r3, r2
 8003db0:	b2c9      	uxtb	r1, r1
 8003db2:	4a13      	ldr	r2, [pc, #76]	@ (8003e00 <ssd1306_DrawPixel+0xa4>)
 8003db4:	54d1      	strb	r1, [r2, r3]
 8003db6:	e01d      	b.n	8003df4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003db8:	79fa      	ldrb	r2, [r7, #7]
 8003dba:	79bb      	ldrb	r3, [r7, #6]
 8003dbc:	08db      	lsrs	r3, r3, #3
 8003dbe:	b2d8      	uxtb	r0, r3
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	01db      	lsls	r3, r3, #7
 8003dc4:	4413      	add	r3, r2
 8003dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8003e00 <ssd1306_DrawPixel+0xa4>)
 8003dc8:	5cd3      	ldrb	r3, [r2, r3]
 8003dca:	b25a      	sxtb	r2, r3
 8003dcc:	79bb      	ldrb	r3, [r7, #6]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd8:	b25b      	sxtb	r3, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	b25b      	sxtb	r3, r3
 8003dde:	4013      	ands	r3, r2
 8003de0:	b259      	sxtb	r1, r3
 8003de2:	79fa      	ldrb	r2, [r7, #7]
 8003de4:	4603      	mov	r3, r0
 8003de6:	01db      	lsls	r3, r3, #7
 8003de8:	4413      	add	r3, r2
 8003dea:	b2c9      	uxtb	r1, r1
 8003dec:	4a04      	ldr	r2, [pc, #16]	@ (8003e00 <ssd1306_DrawPixel+0xa4>)
 8003dee:	54d1      	strb	r1, [r2, r3]
 8003df0:	e000      	b.n	8003df4 <ssd1306_DrawPixel+0x98>
        return;
 8003df2:	bf00      	nop
    }
}
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	20000ddc 	.word	0x20000ddc

08003e04 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003e04:	b590      	push	{r4, r7, lr}
 8003e06:	b089      	sub	sp, #36	@ 0x24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	1d38      	adds	r0, r7, #4
 8003e0e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003e12:	461a      	mov	r2, r3
 8003e14:	4623      	mov	r3, r4
 8003e16:	73fb      	strb	r3, [r7, #15]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	2b1f      	cmp	r3, #31
 8003e20:	d902      	bls.n	8003e28 <ssd1306_WriteChar+0x24>
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	2b7e      	cmp	r3, #126	@ 0x7e
 8003e26:	d901      	bls.n	8003e2c <ssd1306_WriteChar+0x28>
        return 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e06c      	b.n	8003f06 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003e2c:	4b38      	ldr	r3, [pc, #224]	@ (8003f10 <ssd1306_WriteChar+0x10c>)
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	793b      	ldrb	r3, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	2b80      	cmp	r3, #128	@ 0x80
 8003e38:	dc06      	bgt.n	8003e48 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003e3a:	4b35      	ldr	r3, [pc, #212]	@ (8003f10 <ssd1306_WriteChar+0x10c>)
 8003e3c:	885b      	ldrh	r3, [r3, #2]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	797b      	ldrb	r3, [r7, #5]
 8003e42:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003e44:	2b40      	cmp	r3, #64	@ 0x40
 8003e46:	dd01      	ble.n	8003e4c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e05c      	b.n	8003f06 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61fb      	str	r3, [r7, #28]
 8003e50:	e04c      	b.n	8003eec <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	3b20      	subs	r3, #32
 8003e58:	7979      	ldrb	r1, [r7, #5]
 8003e5a:	fb01 f303 	mul.w	r3, r1, r3
 8003e5e:	4619      	mov	r1, r3
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	440b      	add	r3, r1
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	4413      	add	r3, r2
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61bb      	str	r3, [r7, #24]
 8003e70:	e034      	b.n	8003edc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d012      	beq.n	8003ea8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003e82:	4b23      	ldr	r3, [pc, #140]	@ (8003f10 <ssd1306_WriteChar+0x10c>)
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	b2d8      	uxtb	r0, r3
 8003e90:	4b1f      	ldr	r3, [pc, #124]	@ (8003f10 <ssd1306_WriteChar+0x10c>)
 8003e92:	885b      	ldrh	r3, [r3, #2]
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	7bba      	ldrb	r2, [r7, #14]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	f7ff ff5b 	bl	8003d5c <ssd1306_DrawPixel>
 8003ea6:	e016      	b.n	8003ed6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003ea8:	4b19      	ldr	r3, [pc, #100]	@ (8003f10 <ssd1306_WriteChar+0x10c>)
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	b2d8      	uxtb	r0, r3
 8003eb6:	4b16      	ldr	r3, [pc, #88]	@ (8003f10 <ssd1306_WriteChar+0x10c>)
 8003eb8:	885b      	ldrh	r3, [r3, #2]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	b2d9      	uxtb	r1, r3
 8003ec4:	7bbb      	ldrb	r3, [r7, #14]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	bf0c      	ite	eq
 8003eca:	2301      	moveq	r3, #1
 8003ecc:	2300      	movne	r3, #0
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f7ff ff43 	bl	8003d5c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	793b      	ldrb	r3, [r7, #4]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d3c5      	bcc.n	8003e72 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	797b      	ldrb	r3, [r7, #5]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d3ad      	bcc.n	8003e52 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003ef6:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <ssd1306_WriteChar+0x10c>)
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	793a      	ldrb	r2, [r7, #4]
 8003efc:	4413      	add	r3, r2
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	4b03      	ldr	r3, [pc, #12]	@ (8003f10 <ssd1306_WriteChar+0x10c>)
 8003f02:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3724      	adds	r7, #36	@ 0x24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd90      	pop	{r4, r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	200011dc 	.word	0x200011dc

08003f14 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	1d38      	adds	r0, r7, #4
 8003f1e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003f22:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8003f24:	e012      	b.n	8003f4c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	7818      	ldrb	r0, [r3, #0]
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	1d3a      	adds	r2, r7, #4
 8003f2e:	ca06      	ldmia	r2, {r1, r2}
 8003f30:	f7ff ff68 	bl	8003e04 <ssd1306_WriteChar>
 8003f34:	4603      	mov	r3, r0
 8003f36:	461a      	mov	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d002      	beq.n	8003f46 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	e008      	b.n	8003f58 <ssd1306_WriteString+0x44>
        }
        str++;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e8      	bne.n	8003f26 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	781b      	ldrb	r3, [r3, #0]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	460a      	mov	r2, r1
 8003f6a:	71fb      	strb	r3, [r7, #7]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	4b05      	ldr	r3, [pc, #20]	@ (8003f8c <ssd1306_SetCursor+0x2c>)
 8003f76:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003f78:	79bb      	ldrb	r3, [r7, #6]
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	4b03      	ldr	r3, [pc, #12]	@ (8003f8c <ssd1306_SetCursor+0x2c>)
 8003f7e:	805a      	strh	r2, [r3, #2]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	200011dc 	.word	0x200011dc

08003f90 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b089      	sub	sp, #36	@ 0x24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4604      	mov	r4, r0
 8003f98:	4608      	mov	r0, r1
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	71fb      	strb	r3, [r7, #7]
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	71bb      	strb	r3, [r7, #6]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	717b      	strb	r3, [r7, #5]
 8003faa:	4613      	mov	r3, r2
 8003fac:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8003fae:	797a      	ldrb	r2, [r7, #5]
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bfb8      	it	lt
 8003fb8:	425b      	neglt	r3, r3
 8003fba:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8003fbc:	793a      	ldrb	r2, [r7, #4]
 8003fbe:	79bb      	ldrb	r3, [r7, #6]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bfb8      	it	lt
 8003fc6:	425b      	neglt	r3, r3
 8003fc8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8003fca:	79fa      	ldrb	r2, [r7, #7]
 8003fcc:	797b      	ldrb	r3, [r7, #5]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d201      	bcs.n	8003fd6 <ssd1306_Line+0x46>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e001      	b.n	8003fda <ssd1306_Line+0x4a>
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fda:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8003fdc:	79ba      	ldrb	r2, [r7, #6]
 8003fde:	793b      	ldrb	r3, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d201      	bcs.n	8003fe8 <ssd1306_Line+0x58>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e001      	b.n	8003fec <ssd1306_Line+0x5c>
 8003fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fec:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8003ff6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003ffa:	7939      	ldrb	r1, [r7, #4]
 8003ffc:	797b      	ldrb	r3, [r7, #5]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff feac 	bl	8003d5c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8004004:	e024      	b.n	8004050 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8004006:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800400a:	79b9      	ldrb	r1, [r7, #6]
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fea4 	bl	8003d5c <ssd1306_DrawPixel>
        error2 = error * 2;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	425b      	negs	r3, r3
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	429a      	cmp	r2, r3
 8004022:	dd08      	ble.n	8004036 <ssd1306_Line+0xa6>
            error -= deltaY;
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	b2da      	uxtb	r2, r3
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	4413      	add	r3, r2
 8004034:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	429a      	cmp	r2, r3
 800403c:	da08      	bge.n	8004050 <ssd1306_Line+0xc0>
            error += deltaX;
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	4413      	add	r3, r2
 8004044:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	b2da      	uxtb	r2, r3
 800404a:	79bb      	ldrb	r3, [r7, #6]
 800404c:	4413      	add	r3, r2
 800404e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8004050:	79fa      	ldrb	r2, [r7, #7]
 8004052:	797b      	ldrb	r3, [r7, #5]
 8004054:	429a      	cmp	r2, r3
 8004056:	d1d6      	bne.n	8004006 <ssd1306_Line+0x76>
 8004058:	79ba      	ldrb	r2, [r7, #6]
 800405a:	793b      	ldrb	r3, [r7, #4]
 800405c:	429a      	cmp	r2, r3
 800405e:	d1d2      	bne.n	8004006 <ssd1306_Line+0x76>
        }
    }
    return;
 8004060:	bf00      	nop
}
 8004062:	3724      	adds	r7, #36	@ 0x24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd90      	pop	{r4, r7, pc}

08004068 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004068:	b590      	push	{r4, r7, lr}
 800406a:	b085      	sub	sp, #20
 800406c:	af02      	add	r7, sp, #8
 800406e:	4604      	mov	r4, r0
 8004070:	4608      	mov	r0, r1
 8004072:	4611      	mov	r1, r2
 8004074:	461a      	mov	r2, r3
 8004076:	4623      	mov	r3, r4
 8004078:	71fb      	strb	r3, [r7, #7]
 800407a:	4603      	mov	r3, r0
 800407c:	71bb      	strb	r3, [r7, #6]
 800407e:	460b      	mov	r3, r1
 8004080:	717b      	strb	r3, [r7, #5]
 8004082:	4613      	mov	r3, r2
 8004084:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8004086:	79bc      	ldrb	r4, [r7, #6]
 8004088:	797a      	ldrb	r2, [r7, #5]
 800408a:	79b9      	ldrb	r1, [r7, #6]
 800408c:	79f8      	ldrb	r0, [r7, #7]
 800408e:	7e3b      	ldrb	r3, [r7, #24]
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	4623      	mov	r3, r4
 8004094:	f7ff ff7c 	bl	8003f90 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8004098:	793c      	ldrb	r4, [r7, #4]
 800409a:	797a      	ldrb	r2, [r7, #5]
 800409c:	79b9      	ldrb	r1, [r7, #6]
 800409e:	7978      	ldrb	r0, [r7, #5]
 80040a0:	7e3b      	ldrb	r3, [r7, #24]
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	4623      	mov	r3, r4
 80040a6:	f7ff ff73 	bl	8003f90 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80040aa:	793c      	ldrb	r4, [r7, #4]
 80040ac:	79fa      	ldrb	r2, [r7, #7]
 80040ae:	7939      	ldrb	r1, [r7, #4]
 80040b0:	7978      	ldrb	r0, [r7, #5]
 80040b2:	7e3b      	ldrb	r3, [r7, #24]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	4623      	mov	r3, r4
 80040b8:	f7ff ff6a 	bl	8003f90 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80040bc:	79bc      	ldrb	r4, [r7, #6]
 80040be:	79fa      	ldrb	r2, [r7, #7]
 80040c0:	7939      	ldrb	r1, [r7, #4]
 80040c2:	79f8      	ldrb	r0, [r7, #7]
 80040c4:	7e3b      	ldrb	r3, [r7, #24]
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	4623      	mov	r3, r4
 80040ca:	f7ff ff61 	bl	8003f90 <ssd1306_Line>

    return;
 80040ce:	bf00      	nop
}
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd90      	pop	{r4, r7, pc}

080040d6 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80040d6:	b590      	push	{r4, r7, lr}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	4604      	mov	r4, r0
 80040de:	4608      	mov	r0, r1
 80040e0:	4611      	mov	r1, r2
 80040e2:	461a      	mov	r2, r3
 80040e4:	4623      	mov	r3, r4
 80040e6:	71fb      	strb	r3, [r7, #7]
 80040e8:	4603      	mov	r3, r0
 80040ea:	71bb      	strb	r3, [r7, #6]
 80040ec:	460b      	mov	r3, r1
 80040ee:	717b      	strb	r3, [r7, #5]
 80040f0:	4613      	mov	r3, r2
 80040f2:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80040f4:	79fa      	ldrb	r2, [r7, #7]
 80040f6:	797b      	ldrb	r3, [r7, #5]
 80040f8:	4293      	cmp	r3, r2
 80040fa:	bf28      	it	cs
 80040fc:	4613      	movcs	r3, r2
 80040fe:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8004100:	797a      	ldrb	r2, [r7, #5]
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	4293      	cmp	r3, r2
 8004106:	bf38      	it	cc
 8004108:	4613      	movcc	r3, r2
 800410a:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800410c:	79ba      	ldrb	r2, [r7, #6]
 800410e:	793b      	ldrb	r3, [r7, #4]
 8004110:	4293      	cmp	r3, r2
 8004112:	bf28      	it	cs
 8004114:	4613      	movcs	r3, r2
 8004116:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8004118:	793a      	ldrb	r2, [r7, #4]
 800411a:	79bb      	ldrb	r3, [r7, #6]
 800411c:	4293      	cmp	r3, r2
 800411e:	bf38      	it	cc
 8004120:	4613      	movcc	r3, r2
 8004122:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004124:	7afb      	ldrb	r3, [r7, #11]
 8004126:	73fb      	strb	r3, [r7, #15]
 8004128:	e017      	b.n	800415a <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800412a:	7b7b      	ldrb	r3, [r7, #13]
 800412c:	73bb      	strb	r3, [r7, #14]
 800412e:	e009      	b.n	8004144 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8004130:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004134:	7bf9      	ldrb	r1, [r7, #15]
 8004136:	7bbb      	ldrb	r3, [r7, #14]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fe0f 	bl	8003d5c <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800413e:	7bbb      	ldrb	r3, [r7, #14]
 8004140:	3301      	adds	r3, #1
 8004142:	73bb      	strb	r3, [r7, #14]
 8004144:	7bba      	ldrb	r2, [r7, #14]
 8004146:	7b3b      	ldrb	r3, [r7, #12]
 8004148:	429a      	cmp	r2, r3
 800414a:	d803      	bhi.n	8004154 <ssd1306_FillRectangle+0x7e>
 800414c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004150:	2b00      	cmp	r3, #0
 8004152:	daed      	bge.n	8004130 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	3301      	adds	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
 800415a:	7bfa      	ldrb	r2, [r7, #15]
 800415c:	7abb      	ldrb	r3, [r7, #10]
 800415e:	429a      	cmp	r2, r3
 8004160:	d803      	bhi.n	800416a <ssd1306_FillRectangle+0x94>
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	2b3f      	cmp	r3, #63	@ 0x3f
 8004166:	d9e0      	bls.n	800412a <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8004168:	bf00      	nop
 800416a:	bf00      	nop
}
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	bd90      	pop	{r4, r7, pc}

08004172 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	603a      	str	r2, [r7, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	4603      	mov	r3, r0
 800417e:	71fb      	strb	r3, [r7, #7]
 8004180:	460b      	mov	r3, r1
 8004182:	71bb      	strb	r3, [r7, #6]
 8004184:	4613      	mov	r3, r2
 8004186:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004188:	797b      	ldrb	r3, [r7, #5]
 800418a:	3307      	adds	r3, #7
 800418c:	2b00      	cmp	r3, #0
 800418e:	da00      	bge.n	8004192 <ssd1306_DrawBitmap+0x20>
 8004190:	3307      	adds	r3, #7
 8004192:	10db      	asrs	r3, r3, #3
 8004194:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800419a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	db3e      	blt.n	8004220 <ssd1306_DrawBitmap+0xae>
 80041a2:	79bb      	ldrb	r3, [r7, #6]
 80041a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80041a6:	d83b      	bhi.n	8004220 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80041a8:	2300      	movs	r3, #0
 80041aa:	73bb      	strb	r3, [r7, #14]
 80041ac:	e033      	b.n	8004216 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80041ae:	2300      	movs	r3, #0
 80041b0:	737b      	strb	r3, [r7, #13]
 80041b2:	e026      	b.n	8004202 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80041b4:	7b7b      	ldrb	r3, [r7, #13]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
 80041c4:	e00d      	b.n	80041e2 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80041c6:	7bbb      	ldrb	r3, [r7, #14]
 80041c8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80041cc:	fb02 f303 	mul.w	r3, r2, r3
 80041d0:	7b7a      	ldrb	r2, [r7, #13]
 80041d2:	08d2      	lsrs	r2, r2, #3
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	4413      	add	r3, r2
 80041d8:	461a      	mov	r2, r3
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	4413      	add	r3, r2
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80041e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	da08      	bge.n	80041fc <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80041ea:	79fa      	ldrb	r2, [r7, #7]
 80041ec:	7b7b      	ldrb	r3, [r7, #13]
 80041ee:	4413      	add	r3, r2
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	7f3a      	ldrb	r2, [r7, #28]
 80041f4:	79b9      	ldrb	r1, [r7, #6]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fdb0 	bl	8003d5c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80041fc:	7b7b      	ldrb	r3, [r7, #13]
 80041fe:	3301      	adds	r3, #1
 8004200:	737b      	strb	r3, [r7, #13]
 8004202:	7b7a      	ldrb	r2, [r7, #13]
 8004204:	797b      	ldrb	r3, [r7, #5]
 8004206:	429a      	cmp	r2, r3
 8004208:	d3d4      	bcc.n	80041b4 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800420a:	7bbb      	ldrb	r3, [r7, #14]
 800420c:	3301      	adds	r3, #1
 800420e:	73bb      	strb	r3, [r7, #14]
 8004210:	79bb      	ldrb	r3, [r7, #6]
 8004212:	3301      	adds	r3, #1
 8004214:	71bb      	strb	r3, [r7, #6]
 8004216:	7bba      	ldrb	r2, [r7, #14]
 8004218:	7e3b      	ldrb	r3, [r7, #24]
 800421a:	429a      	cmp	r2, r3
 800421c:	d3c7      	bcc.n	80041ae <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800421e:	e000      	b.n	8004222 <ssd1306_DrawBitmap+0xb0>
        return;
 8004220:	bf00      	nop
}
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004232:	2381      	movs	r3, #129	@ 0x81
 8004234:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff fcb3 	bl	8003ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fcaf 	bl	8003ba4 <ssd1306_WriteCommand>
}
 8004246:	bf00      	nop
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004260:	23af      	movs	r3, #175	@ 0xaf
 8004262:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004264:	4b08      	ldr	r3, [pc, #32]	@ (8004288 <ssd1306_SetDisplayOn+0x38>)
 8004266:	2201      	movs	r2, #1
 8004268:	715a      	strb	r2, [r3, #5]
 800426a:	e004      	b.n	8004276 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800426c:	23ae      	movs	r3, #174	@ 0xae
 800426e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004270:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <ssd1306_SetDisplayOn+0x38>)
 8004272:	2200      	movs	r2, #0
 8004274:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fc93 	bl	8003ba4 <ssd1306_WriteCommand>
}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	200011dc 	.word	0x200011dc
 800428c:	00000000 	.word	0x00000000

08004290 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 8004290:	b590      	push	{r4, r7, lr}
 8004292:	b087      	sub	sp, #28
 8004294:	af02      	add	r7, sp, #8
 8004296:	ed87 0a03 	vstr	s0, [r7, #12]
 800429a:	60b8      	str	r0, [r7, #8]
 800429c:	6079      	str	r1, [r7, #4]
 800429e:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	330f      	adds	r3, #15
 80042a6:	b2d8      	uxtb	r0, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	3301      	adds	r3, #1
 80042ae:	b2d9      	uxtb	r1, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	330f      	adds	r3, #15
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	3305      	adds	r3, #5
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2401      	movs	r4, #1
 80042c2:	9400      	str	r4, [sp, #0]
 80042c4:	f7ff fe64 	bl	8003f90 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	3310      	adds	r3, #16
 80042ce:	b2d8      	uxtb	r0, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	3301      	adds	r3, #1
 80042d6:	b2d9      	uxtb	r1, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	3310      	adds	r3, #16
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	3305      	adds	r3, #5
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2401      	movs	r4, #1
 80042ea:	9400      	str	r4, [sp, #0]
 80042ec:	f7ff fe50 	bl	8003f90 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	b2d8      	uxtb	r0, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	b2d9      	uxtb	r1, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	330e      	adds	r3, #14
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	3306      	adds	r3, #6
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2401      	movs	r4, #1
 800430a:	9400      	str	r4, [sp, #0]
 800430c:	f7ff feac 	bl	8004068 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f7fc f8f1 	bl	80004f8 <__aeabi_f2d>
 8004316:	a396      	add	r3, pc, #600	@ (adr r3, 8004570 <batterygauge+0x2e0>)
 8004318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431c:	f7fc fbc0 	bl	8000aa0 <__aeabi_dcmple>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d02a      	beq.n	800437c <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	3302      	adds	r3, #2
 800432c:	b2d8      	uxtb	r0, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	3302      	adds	r3, #2
 8004334:	b2d9      	uxtb	r1, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	3303      	adds	r3, #3
 800433c:	b2da      	uxtb	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	3304      	adds	r3, #4
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2401      	movs	r4, #1
 8004348:	9400      	str	r4, [sp, #0]
 800434a:	f7ff fe8d 	bl	8004068 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d113      	bne.n	800437c <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	3302      	adds	r3, #2
 800435a:	b2d8      	uxtb	r0, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	3302      	adds	r3, #2
 8004362:	b2d9      	uxtb	r1, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	3303      	adds	r3, #3
 800436a:	b2da      	uxtb	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	3304      	adds	r3, #4
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2401      	movs	r4, #1
 8004376:	9400      	str	r4, [sp, #0]
 8004378:	f7ff fe76 	bl	8004068 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f7fc f8bb 	bl	80004f8 <__aeabi_f2d>
 8004382:	a37b      	add	r3, pc, #492	@ (adr r3, 8004570 <batterygauge+0x2e0>)
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	f7fc fb9e 	bl	8000ac8 <__aeabi_dcmpgt>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d035      	beq.n	80043fe <batterygauge+0x16e>
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f7fc f8b0 	bl	80004f8 <__aeabi_f2d>
 8004398:	a377      	add	r3, pc, #476	@ (adr r3, 8004578 <batterygauge+0x2e8>)
 800439a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439e:	f7fc fb7f 	bl	8000aa0 <__aeabi_dcmple>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d02a      	beq.n	80043fe <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	3302      	adds	r3, #2
 80043ae:	b2d8      	uxtb	r0, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	3302      	adds	r3, #2
 80043b6:	b2d9      	uxtb	r1, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	3303      	adds	r3, #3
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	3304      	adds	r3, #4
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2401      	movs	r4, #1
 80043ca:	9400      	str	r4, [sp, #0]
 80043cc:	f7ff fe4c 	bl	8004068 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d113      	bne.n	80043fe <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	3305      	adds	r3, #5
 80043dc:	b2d8      	uxtb	r0, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	3302      	adds	r3, #2
 80043e4:	b2d9      	uxtb	r1, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	3306      	adds	r3, #6
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	3304      	adds	r3, #4
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2401      	movs	r4, #1
 80043f8:	9400      	str	r4, [sp, #0]
 80043fa:	f7ff fe35 	bl	8004068 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f7fc f87a 	bl	80004f8 <__aeabi_f2d>
 8004404:	a35c      	add	r3, pc, #368	@ (adr r3, 8004578 <batterygauge+0x2e8>)
 8004406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440a:	f7fc fb5d 	bl	8000ac8 <__aeabi_dcmpgt>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d049      	beq.n	80044a8 <batterygauge+0x218>
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7fc f86f 	bl	80004f8 <__aeabi_f2d>
 800441a:	a359      	add	r3, pc, #356	@ (adr r3, 8004580 <batterygauge+0x2f0>)
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	f7fc fb3e 	bl	8000aa0 <__aeabi_dcmple>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d03e      	beq.n	80044a8 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	3302      	adds	r3, #2
 8004430:	b2d8      	uxtb	r0, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	3302      	adds	r3, #2
 8004438:	b2d9      	uxtb	r1, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	3303      	adds	r3, #3
 8004440:	b2da      	uxtb	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	3304      	adds	r3, #4
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2401      	movs	r4, #1
 800444c:	9400      	str	r4, [sp, #0]
 800444e:	f7ff fe0b 	bl	8004068 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	3305      	adds	r3, #5
 8004458:	b2d8      	uxtb	r0, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	b2db      	uxtb	r3, r3
 800445e:	3302      	adds	r3, #2
 8004460:	b2d9      	uxtb	r1, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	3306      	adds	r3, #6
 8004468:	b2da      	uxtb	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	3304      	adds	r3, #4
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2401      	movs	r4, #1
 8004474:	9400      	str	r4, [sp, #0]
 8004476:	f7ff fdf7 	bl	8004068 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d113      	bne.n	80044a8 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	3308      	adds	r3, #8
 8004486:	b2d8      	uxtb	r0, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	3302      	adds	r3, #2
 800448e:	b2d9      	uxtb	r1, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	3309      	adds	r3, #9
 8004496:	b2da      	uxtb	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	3304      	adds	r3, #4
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2401      	movs	r4, #1
 80044a2:	9400      	str	r4, [sp, #0]
 80044a4:	f7ff fde0 	bl	8004068 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f7fc f825 	bl	80004f8 <__aeabi_f2d>
 80044ae:	a334      	add	r3, pc, #208	@ (adr r3, 8004580 <batterygauge+0x2f0>)
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	f7fc fb08 	bl	8000ac8 <__aeabi_dcmpgt>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d100      	bne.n	80044c0 <batterygauge+0x230>
	}




}
 80044be:	e052      	b.n	8004566 <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	3302      	adds	r3, #2
 80044c6:	b2d8      	uxtb	r0, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	3302      	adds	r3, #2
 80044ce:	b2d9      	uxtb	r1, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	3303      	adds	r3, #3
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	3304      	adds	r3, #4
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2401      	movs	r4, #1
 80044e2:	9400      	str	r4, [sp, #0]
 80044e4:	f7ff fdc0 	bl	8004068 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	3305      	adds	r3, #5
 80044ee:	b2d8      	uxtb	r0, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	3302      	adds	r3, #2
 80044f6:	b2d9      	uxtb	r1, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	3306      	adds	r3, #6
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	3304      	adds	r3, #4
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2401      	movs	r4, #1
 800450a:	9400      	str	r4, [sp, #0]
 800450c:	f7ff fdac 	bl	8004068 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	3308      	adds	r3, #8
 8004516:	b2d8      	uxtb	r0, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	3302      	adds	r3, #2
 800451e:	b2d9      	uxtb	r1, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	3309      	adds	r3, #9
 8004526:	b2da      	uxtb	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	3304      	adds	r3, #4
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2401      	movs	r4, #1
 8004532:	9400      	str	r4, [sp, #0]
 8004534:	f7ff fd98 	bl	8004068 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d113      	bne.n	8004566 <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	330b      	adds	r3, #11
 8004544:	b2d8      	uxtb	r0, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	3302      	adds	r3, #2
 800454c:	b2d9      	uxtb	r1, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	330c      	adds	r3, #12
 8004554:	b2da      	uxtb	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	3304      	adds	r3, #4
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2401      	movs	r4, #1
 8004560:	9400      	str	r4, [sp, #0]
 8004562:	f7ff fd81 	bl	8004068 <ssd1306_DrawRectangle>
}
 8004566:	bf00      	nop
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	bd90      	pop	{r4, r7, pc}
 800456e:	bf00      	nop
 8004570:	9999999a 	.word	0x9999999a
 8004574:	400d9999 	.word	0x400d9999
 8004578:	33333333 	.word	0x33333333
 800457c:	400f3333 	.word	0x400f3333
 8004580:	66666666 	.word	0x66666666
 8004584:	40106666 	.word	0x40106666

08004588 <percentage>:

void percentage(float percent){
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af02      	add	r7, sp, #8
 800458e:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 40, floor(0.64*percent+32), 56, White);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fb ffb0 	bl	80004f8 <__aeabi_f2d>
 8004598:	a329      	add	r3, pc, #164	@ (adr r3, 8004640 <percentage+0xb8>)
 800459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459e:	f7fc f803 	bl	80005a8 <__aeabi_dmul>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	4b20      	ldr	r3, [pc, #128]	@ (8004630 <percentage+0xa8>)
 80045b0:	f7fb fe44 	bl	800023c <__adddf3>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	ec43 2b17 	vmov	d7, r2, r3
 80045bc:	eeb0 0a47 	vmov.f32	s0, s14
 80045c0:	eef0 0a67 	vmov.f32	s1, s15
 80045c4:	f019 fd14 	bl	801dff0 <floor>
 80045c8:	ec53 2b10 	vmov	r2, r3, d0
 80045cc:	4610      	mov	r0, r2
 80045ce:	4619      	mov	r1, r3
 80045d0:	f7fc fac2 	bl	8000b58 <__aeabi_d2uiz>
 80045d4:	4603      	mov	r3, r0
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	2301      	movs	r3, #1
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	2338      	movs	r3, #56	@ 0x38
 80045de:	2128      	movs	r1, #40	@ 0x28
 80045e0:	2020      	movs	r0, #32
 80045e2:	f7ff fd78 	bl	80040d6 <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 40, 95, 56, White);
 80045e6:	2301      	movs	r3, #1
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	2338      	movs	r3, #56	@ 0x38
 80045ec:	225f      	movs	r2, #95	@ 0x5f
 80045ee:	2128      	movs	r1, #40	@ 0x28
 80045f0:	2020      	movs	r0, #32
 80045f2:	f7ff fd39 	bl	8004068 <ssd1306_DrawRectangle>
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fb ff7e 	bl	80004f8 <__aeabi_f2d>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	e9cd 2300 	strd	r2, r3, [sp]
 8004604:	4a0b      	ldr	r2, [pc, #44]	@ (8004634 <percentage+0xac>)
 8004606:	2114      	movs	r1, #20
 8004608:	480b      	ldr	r0, [pc, #44]	@ (8004638 <percentage+0xb0>)
 800460a:	f016 fdff 	bl	801b20c <sniprintf>
	ssd1306_SetCursor(45,44);
 800460e:	212c      	movs	r1, #44	@ 0x2c
 8004610:	202d      	movs	r0, #45	@ 0x2d
 8004612:	f7ff fca5 	bl	8003f60 <ssd1306_SetCursor>
	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 8004616:	4a09      	ldr	r2, [pc, #36]	@ (800463c <percentage+0xb4>)
 8004618:	2301      	movs	r3, #1
 800461a:	ca06      	ldmia	r2, {r1, r2}
 800461c:	4806      	ldr	r0, [pc, #24]	@ (8004638 <percentage+0xb0>)
 800461e:	f7ff fc79 	bl	8003f14 <ssd1306_WriteString>


}
 8004622:	bf00      	nop
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	f3af 8000 	nop.w
 8004630:	40400000 	.word	0x40400000
 8004634:	0801f90c 	.word	0x0801f90c
 8004638:	20000ac0 	.word	0x20000ac0
 800463c:	20000014 	.word	0x20000014
 8004640:	47ae147b 	.word	0x47ae147b
 8004644:	3fe47ae1 	.word	0x3fe47ae1

08004648 <statemachine>:
int timer1=0;
int tpstot=0;



void statemachine(void){
 8004648:	b5b0      	push	{r4, r5, r7, lr}
 800464a:	ed2d 8b02 	vpush	{d8}
 800464e:	b08a      	sub	sp, #40	@ 0x28
 8004650:	af04      	add	r7, sp, #16
	switch(state){
 8004652:	4bb9      	ldr	r3, [pc, #740]	@ (8004938 <statemachine+0x2f0>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b05      	cmp	r3, #5
 8004658:	f201 859a 	bhi.w	8006190 <statemachine+0x1b48>
 800465c:	a201      	add	r2, pc, #4	@ (adr r2, 8004664 <statemachine+0x1c>)
 800465e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004662:	bf00      	nop
 8004664:	0800467d 	.word	0x0800467d
 8004668:	08004a17 	.word	0x08004a17
 800466c:	08005261 	.word	0x08005261
 8004670:	08005911 	.word	0x08005911
 8004674:	08005b8b 	.word	0x08005b8b
 8004678:	08006097 	.word	0x08006097
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 800467c:	2000      	movs	r0, #0
 800467e:	f7ff fb2d 	bl	8003cdc <ssd1306_Fill>

				 if(myData.speed>=vitmax){
 8004682:	4bae      	ldr	r3, [pc, #696]	@ (800493c <statemachine+0x2f4>)
 8004684:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004688:	4bad      	ldr	r3, [pc, #692]	@ (8004940 <statemachine+0x2f8>)
 800468a:	edd3 7a00 	vldr	s15, [r3]
 800468e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004696:	db03      	blt.n	80046a0 <statemachine+0x58>
									 vitmax=myData.speed;
 8004698:	4ba8      	ldr	r3, [pc, #672]	@ (800493c <statemachine+0x2f4>)
 800469a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469c:	4aa8      	ldr	r2, [pc, #672]	@ (8004940 <statemachine+0x2f8>)
 800469e:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
								 float sec=0;
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	613b      	str	r3, [r7, #16]
								 if (myData.speed!=0){
 80046ac:	4ba3      	ldr	r3, [pc, #652]	@ (800493c <statemachine+0x2f4>)
 80046ae:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80046b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ba:	d032      	beq.n	8004722 <statemachine+0xda>
									 pace=1000/(60*myData.speed);
 80046bc:	4b9f      	ldr	r3, [pc, #636]	@ (800493c <statemachine+0x2f4>)
 80046be:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80046c2:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8004944 <statemachine+0x2fc>
 80046c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80046ca:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 8004948 <statemachine+0x300>
 80046ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046d2:	edc7 7a05 	vstr	s15, [r7, #20]
									 sec=(pace-floor(pace))*60;
 80046d6:	6978      	ldr	r0, [r7, #20]
 80046d8:	f7fb ff0e 	bl	80004f8 <__aeabi_f2d>
 80046dc:	4604      	mov	r4, r0
 80046de:	460d      	mov	r5, r1
 80046e0:	6978      	ldr	r0, [r7, #20]
 80046e2:	f7fb ff09 	bl	80004f8 <__aeabi_f2d>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	ec43 2b10 	vmov	d0, r2, r3
 80046ee:	f019 fc7f 	bl	801dff0 <floor>
 80046f2:	ec53 2b10 	vmov	r2, r3, d0
 80046f6:	4620      	mov	r0, r4
 80046f8:	4629      	mov	r1, r5
 80046fa:	f7fb fd9d 	bl	8000238 <__aeabi_dsub>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4610      	mov	r0, r2
 8004704:	4619      	mov	r1, r3
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	4b90      	ldr	r3, [pc, #576]	@ (800494c <statemachine+0x304>)
 800470c:	f7fb ff4c 	bl	80005a8 <__aeabi_dmul>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4610      	mov	r0, r2
 8004716:	4619      	mov	r1, r3
 8004718:	f7fc fa3e 	bl	8000b98 <__aeabi_d2f>
 800471c:	4603      	mov	r3, r0
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	e001      	b.n	8004726 <statemachine+0xde>
								 }
								 else {
									 pace=99;
 8004722:	4b8b      	ldr	r3, [pc, #556]	@ (8004950 <statemachine+0x308>)
 8004724:	617b      	str	r3, [r7, #20]
								 }


				  switch(spdstate){
 8004726:	4b8b      	ldr	r3, [pc, #556]	@ (8004954 <statemachine+0x30c>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b02      	cmp	r3, #2
 800472c:	f000 8087 	beq.w	800483e <statemachine+0x1f6>
 8004730:	2b02      	cmp	r3, #2
 8004732:	f300 812a 	bgt.w	800498a <statemachine+0x342>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <statemachine+0xf8>
 800473a:	2b01      	cmp	r3, #1
 800473c:	d040      	beq.n	80047c0 <statemachine+0x178>
 800473e:	e124      	b.n	800498a <statemachine+0x342>


				 case STATE_GROS:


						ssd1306_SetCursor(32, 32);
 8004740:	2120      	movs	r1, #32
 8004742:	2020      	movs	r0, #32
 8004744:	f7ff fc0c 	bl	8003f60 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "%0.1f",(myData.speed)*3.6);
 8004748:	4b7c      	ldr	r3, [pc, #496]	@ (800493c <statemachine+0x2f4>)
 800474a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474c:	4618      	mov	r0, r3
 800474e:	f7fb fed3 	bl	80004f8 <__aeabi_f2d>
 8004752:	a377      	add	r3, pc, #476	@ (adr r3, 8004930 <statemachine+0x2e8>)
 8004754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004758:	f7fb ff26 	bl	80005a8 <__aeabi_dmul>
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	e9cd 2300 	strd	r2, r3, [sp]
 8004764:	4a7c      	ldr	r2, [pc, #496]	@ (8004958 <statemachine+0x310>)
 8004766:	210f      	movs	r1, #15
 8004768:	487c      	ldr	r0, [pc, #496]	@ (800495c <statemachine+0x314>)
 800476a:	f016 fd4f 	bl	801b20c <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_16x24, White);
 800476e:	4a7c      	ldr	r2, [pc, #496]	@ (8004960 <statemachine+0x318>)
 8004770:	2301      	movs	r3, #1
 8004772:	ca06      	ldmia	r2, {r1, r2}
 8004774:	4879      	ldr	r0, [pc, #484]	@ (800495c <statemachine+0x314>)
 8004776:	f7ff fbcd 	bl	8003f14 <ssd1306_WriteString>
						ssd1306_SetCursor(32, 56);
 800477a:	2138      	movs	r1, #56	@ 0x38
 800477c:	2020      	movs	r0, #32
 800477e:	f7ff fbef 	bl	8003f60 <ssd1306_SetCursor>
						ssd1306_WriteString("Vit(kmh)", Font_6x8, White);
 8004782:	4a78      	ldr	r2, [pc, #480]	@ (8004964 <statemachine+0x31c>)
 8004784:	2301      	movs	r3, #1
 8004786:	ca06      	ldmia	r2, {r1, r2}
 8004788:	4877      	ldr	r0, [pc, #476]	@ (8004968 <statemachine+0x320>)
 800478a:	f7ff fbc3 	bl	8003f14 <ssd1306_WriteString>
						batterygauge(vbat,79, 57,1);
 800478e:	4b77      	ldr	r3, [pc, #476]	@ (800496c <statemachine+0x324>)
 8004790:	edd3 7a00 	vldr	s15, [r3]
 8004794:	2201      	movs	r2, #1
 8004796:	2139      	movs	r1, #57	@ 0x39
 8004798:	204f      	movs	r0, #79	@ 0x4f
 800479a:	eeb0 0a67 	vmov.f32	s0, s15
 800479e:	f7ff fd77 	bl	8004290 <batterygauge>

					 if(BTN_B>=1){
 80047a2:	4b73      	ldr	r3, [pc, #460]	@ (8004970 <statemachine+0x328>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f340 80bb 	ble.w	8004922 <statemachine+0x2da>
							spdstate++;
 80047ac:	4b69      	ldr	r3, [pc, #420]	@ (8004954 <statemachine+0x30c>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	3301      	adds	r3, #1
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	4b67      	ldr	r3, [pc, #412]	@ (8004954 <statemachine+0x30c>)
 80047b6:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 80047b8:	4b6d      	ldr	r3, [pc, #436]	@ (8004970 <statemachine+0x328>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
					 					 				  	}




				  break;
 80047be:	e0b0      	b.n	8004922 <statemachine+0x2da>
				 case STATE_GROS1:

					 ssd1306_SetCursor(32, 32);
 80047c0:	2120      	movs	r1, #32
 80047c2:	2020      	movs	r0, #32
 80047c4:	f7ff fbcc 	bl	8003f60 <ssd1306_SetCursor>
					 snprintf((char *)bufferscreen,15, "%0.1f",vitmax*3.6);
 80047c8:	4b5d      	ldr	r3, [pc, #372]	@ (8004940 <statemachine+0x2f8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fb fe93 	bl	80004f8 <__aeabi_f2d>
 80047d2:	a357      	add	r3, pc, #348	@ (adr r3, 8004930 <statemachine+0x2e8>)
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	f7fb fee6 	bl	80005a8 <__aeabi_dmul>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	e9cd 2300 	strd	r2, r3, [sp]
 80047e4:	4a5c      	ldr	r2, [pc, #368]	@ (8004958 <statemachine+0x310>)
 80047e6:	210f      	movs	r1, #15
 80047e8:	485c      	ldr	r0, [pc, #368]	@ (800495c <statemachine+0x314>)
 80047ea:	f016 fd0f 	bl	801b20c <sniprintf>
					 ssd1306_WriteString((char *)bufferscreen, Font_16x24, White);
 80047ee:	4a5c      	ldr	r2, [pc, #368]	@ (8004960 <statemachine+0x318>)
 80047f0:	2301      	movs	r3, #1
 80047f2:	ca06      	ldmia	r2, {r1, r2}
 80047f4:	4859      	ldr	r0, [pc, #356]	@ (800495c <statemachine+0x314>)
 80047f6:	f7ff fb8d 	bl	8003f14 <ssd1306_WriteString>
					 ssd1306_SetCursor(32, 56);
 80047fa:	2138      	movs	r1, #56	@ 0x38
 80047fc:	2020      	movs	r0, #32
 80047fe:	f7ff fbaf 	bl	8003f60 <ssd1306_SetCursor>
					 ssd1306_WriteString("maxV", Font_6x8, White);
 8004802:	4a58      	ldr	r2, [pc, #352]	@ (8004964 <statemachine+0x31c>)
 8004804:	2301      	movs	r3, #1
 8004806:	ca06      	ldmia	r2, {r1, r2}
 8004808:	485a      	ldr	r0, [pc, #360]	@ (8004974 <statemachine+0x32c>)
 800480a:	f7ff fb83 	bl	8003f14 <ssd1306_WriteString>
					 batterygauge(vbat,79, 57,1);
 800480e:	4b57      	ldr	r3, [pc, #348]	@ (800496c <statemachine+0x324>)
 8004810:	edd3 7a00 	vldr	s15, [r3]
 8004814:	2201      	movs	r2, #1
 8004816:	2139      	movs	r1, #57	@ 0x39
 8004818:	204f      	movs	r0, #79	@ 0x4f
 800481a:	eeb0 0a67 	vmov.f32	s0, s15
 800481e:	f7ff fd37 	bl	8004290 <batterygauge>





					 if(BTN_B>=1){
 8004822:	4b53      	ldr	r3, [pc, #332]	@ (8004970 <statemachine+0x328>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	dd7d      	ble.n	8004926 <statemachine+0x2de>
					 							spdstate++;
 800482a:	4b4a      	ldr	r3, [pc, #296]	@ (8004954 <statemachine+0x30c>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	3301      	adds	r3, #1
 8004830:	b2da      	uxtb	r2, r3
 8004832:	4b48      	ldr	r3, [pc, #288]	@ (8004954 <statemachine+0x30c>)
 8004834:	701a      	strb	r2, [r3, #0]
					 							BTN_B=0;
 8004836:	4b4e      	ldr	r3, [pc, #312]	@ (8004970 <statemachine+0x328>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]

					 					 					 				  	}



					 break;
 800483c:	e073      	b.n	8004926 <statemachine+0x2de>
				  case STATE_SUMMARY:
				  						ssd1306_SetCursor(32, 32);
 800483e:	2120      	movs	r1, #32
 8004840:	2020      	movs	r0, #32
 8004842:	f7ff fb8d 	bl	8003f60 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "%0.0fmin%0.0fs",floor(pace),floor(sec));
 8004846:	6978      	ldr	r0, [r7, #20]
 8004848:	f7fb fe56 	bl	80004f8 <__aeabi_f2d>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	ec43 2b10 	vmov	d0, r2, r3
 8004854:	f019 fbcc 	bl	801dff0 <floor>
 8004858:	eeb0 8a40 	vmov.f32	s16, s0
 800485c:	eef0 8a60 	vmov.f32	s17, s1
 8004860:	6938      	ldr	r0, [r7, #16]
 8004862:	f7fb fe49 	bl	80004f8 <__aeabi_f2d>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	ec43 2b10 	vmov	d0, r2, r3
 800486e:	f019 fbbf 	bl	801dff0 <floor>
 8004872:	eeb0 7a40 	vmov.f32	s14, s0
 8004876:	eef0 7a60 	vmov.f32	s15, s1
 800487a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800487e:	ed8d 8b00 	vstr	d8, [sp]
 8004882:	4a3d      	ldr	r2, [pc, #244]	@ (8004978 <statemachine+0x330>)
 8004884:	210f      	movs	r1, #15
 8004886:	4835      	ldr	r0, [pc, #212]	@ (800495c <statemachine+0x314>)
 8004888:	f016 fcc0 	bl	801b20c <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 800488c:	4a3b      	ldr	r2, [pc, #236]	@ (800497c <statemachine+0x334>)
 800488e:	2301      	movs	r3, #1
 8004890:	ca06      	ldmia	r2, {r1, r2}
 8004892:	4832      	ldr	r0, [pc, #200]	@ (800495c <statemachine+0x314>)
 8004894:	f7ff fb3e 	bl	8003f14 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 42);
 8004898:	212a      	movs	r1, #42	@ 0x2a
 800489a:	2020      	movs	r0, #32
 800489c:	f7ff fb60 	bl	8003f60 <ssd1306_SetCursor>
				  						ssd1306_WriteString("pace", Font_6x8, White);
 80048a0:	4a30      	ldr	r2, [pc, #192]	@ (8004964 <statemachine+0x31c>)
 80048a2:	2301      	movs	r3, #1
 80048a4:	ca06      	ldmia	r2, {r1, r2}
 80048a6:	4836      	ldr	r0, [pc, #216]	@ (8004980 <statemachine+0x338>)
 80048a8:	f7ff fb34 	bl	8003f14 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 56);
 80048ac:	2138      	movs	r1, #56	@ 0x38
 80048ae:	2020      	movs	r0, #32
 80048b0:	f7ff fb56 	bl	8003f60 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "V=%0.1fkmh",vitmax*3.6);
 80048b4:	4b22      	ldr	r3, [pc, #136]	@ (8004940 <statemachine+0x2f8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fb fe1d 	bl	80004f8 <__aeabi_f2d>
 80048be:	a31c      	add	r3, pc, #112	@ (adr r3, 8004930 <statemachine+0x2e8>)
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	f7fb fe70 	bl	80005a8 <__aeabi_dmul>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	e9cd 2300 	strd	r2, r3, [sp]
 80048d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004984 <statemachine+0x33c>)
 80048d2:	210f      	movs	r1, #15
 80048d4:	4821      	ldr	r0, [pc, #132]	@ (800495c <statemachine+0x314>)
 80048d6:	f016 fc99 	bl	801b20c <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80048da:	4a22      	ldr	r2, [pc, #136]	@ (8004964 <statemachine+0x31c>)
 80048dc:	2301      	movs	r3, #1
 80048de:	ca06      	ldmia	r2, {r1, r2}
 80048e0:	481e      	ldr	r0, [pc, #120]	@ (800495c <statemachine+0x314>)
 80048e2:	f7ff fb17 	bl	8003f14 <ssd1306_WriteString>
				  						batterygauge(vbat,79, 43,1);
 80048e6:	4b21      	ldr	r3, [pc, #132]	@ (800496c <statemachine+0x324>)
 80048e8:	edd3 7a00 	vldr	s15, [r3]
 80048ec:	2201      	movs	r2, #1
 80048ee:	212b      	movs	r1, #43	@ 0x2b
 80048f0:	204f      	movs	r0, #79	@ 0x4f
 80048f2:	eeb0 0a67 	vmov.f32	s0, s15
 80048f6:	f7ff fccb 	bl	8004290 <batterygauge>



				  					 if(BTN_B>=1){
 80048fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004970 <statemachine+0x328>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	dd42      	ble.n	8004988 <statemachine+0x340>
				  								spdstate--;
 8004902:	4b14      	ldr	r3, [pc, #80]	@ (8004954 <statemachine+0x30c>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	3b01      	subs	r3, #1
 8004908:	b2da      	uxtb	r2, r3
 800490a:	4b12      	ldr	r3, [pc, #72]	@ (8004954 <statemachine+0x30c>)
 800490c:	701a      	strb	r2, [r3, #0]
				  								spdstate--;
 800490e:	4b11      	ldr	r3, [pc, #68]	@ (8004954 <statemachine+0x30c>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	3b01      	subs	r3, #1
 8004914:	b2da      	uxtb	r2, r3
 8004916:	4b0f      	ldr	r3, [pc, #60]	@ (8004954 <statemachine+0x30c>)
 8004918:	701a      	strb	r2, [r3, #0]
				  								BTN_B=0;
 800491a:	4b15      	ldr	r3, [pc, #84]	@ (8004970 <statemachine+0x328>)
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
				  					 					 				  	}




				  					 break;
 8004920:	e032      	b.n	8004988 <statemachine+0x340>
				  break;
 8004922:	bf00      	nop
 8004924:	e031      	b.n	800498a <statemachine+0x342>
					 break;
 8004926:	bf00      	nop
 8004928:	e02f      	b.n	800498a <statemachine+0x342>
 800492a:	bf00      	nop
 800492c:	f3af 8000 	nop.w
 8004930:	cccccccd 	.word	0xcccccccd
 8004934:	400ccccc 	.word	0x400ccccc
 8004938:	200005d4 	.word	0x200005d4
 800493c:	20000820 	.word	0x20000820
 8004940:	20000b34 	.word	0x20000b34
 8004944:	42700000 	.word	0x42700000
 8004948:	447a0000 	.word	0x447a0000
 800494c:	404e0000 	.word	0x404e0000
 8004950:	42c60000 	.word	0x42c60000
 8004954:	200005d5 	.word	0x200005d5
 8004958:	0801f918 	.word	0x0801f918
 800495c:	20000ac0 	.word	0x20000ac0
 8004960:	20000024 	.word	0x20000024
 8004964:	20000014 	.word	0x20000014
 8004968:	0801f920 	.word	0x0801f920
 800496c:	20000898 	.word	0x20000898
 8004970:	20000864 	.word	0x20000864
 8004974:	0801f92c 	.word	0x0801f92c
 8004978:	0801f934 	.word	0x0801f934
 800497c:	2000001c 	.word	0x2000001c
 8004980:	0801f944 	.word	0x0801f944
 8004984:	0801f94c 	.word	0x0801f94c
				  					 break;
 8004988:	bf00      	nop
				  }
				  					if(BTN_A>=1){
 800498a:	4b84      	ldr	r3, [pc, #528]	@ (8004b9c <statemachine+0x554>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	dd0b      	ble.n	80049aa <statemachine+0x362>
				  									 					state++;
 8004992:	4b83      	ldr	r3, [pc, #524]	@ (8004ba0 <statemachine+0x558>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	3301      	adds	r3, #1
 8004998:	b2da      	uxtb	r2, r3
 800499a:	4b81      	ldr	r3, [pc, #516]	@ (8004ba0 <statemachine+0x558>)
 800499c:	701a      	strb	r2, [r3, #0]
				  									 					BTN_A=0;
 800499e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b9c <statemachine+0x554>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
				  									 					BTN_B=0;
 80049a4:	4b7f      	ldr	r3, [pc, #508]	@ (8004ba4 <statemachine+0x55c>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
				  									  	}
				  									 	 if(BTN_A_LONG>=1){
 80049aa:	4b7f      	ldr	r3, [pc, #508]	@ (8004ba8 <statemachine+0x560>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	dd23      	ble.n	80049fa <statemachine+0x3b2>
				  									 						 				 									state++;
 80049b2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ba0 <statemachine+0x558>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	3301      	adds	r3, #1
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	4b79      	ldr	r3, [pc, #484]	@ (8004ba0 <statemachine+0x558>)
 80049bc:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 80049be:	4b78      	ldr	r3, [pc, #480]	@ (8004ba0 <statemachine+0x558>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	3301      	adds	r3, #1
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	4b76      	ldr	r3, [pc, #472]	@ (8004ba0 <statemachine+0x558>)
 80049c8:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 80049ca:	4b75      	ldr	r3, [pc, #468]	@ (8004ba0 <statemachine+0x558>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	3301      	adds	r3, #1
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	4b73      	ldr	r3, [pc, #460]	@ (8004ba0 <statemachine+0x558>)
 80049d4:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 80049d6:	4b72      	ldr	r3, [pc, #456]	@ (8004ba0 <statemachine+0x558>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	3301      	adds	r3, #1
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	4b70      	ldr	r3, [pc, #448]	@ (8004ba0 <statemachine+0x558>)
 80049e0:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 80049e2:	4b6f      	ldr	r3, [pc, #444]	@ (8004ba0 <statemachine+0x558>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	3301      	adds	r3, #1
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	4b6d      	ldr	r3, [pc, #436]	@ (8004ba0 <statemachine+0x558>)
 80049ec:	701a      	strb	r2, [r3, #0]

				  									 						 				 									  			 	BTN_A_LONG=0;
 80049ee:	4b6e      	ldr	r3, [pc, #440]	@ (8004ba8 <statemachine+0x560>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
				  									 						 				 									  			 	BTN_B=0;
 80049f4:	4b6b      	ldr	r3, [pc, #428]	@ (8004ba4 <statemachine+0x55c>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
				  									 						 				 									  	}
				  									 	 if(BTN_B_LONG>=1){
 80049fa:	4b6c      	ldr	r3, [pc, #432]	@ (8004bac <statemachine+0x564>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f341 83ba 	ble.w	8006178 <statemachine+0x1b30>
				  									 					  							  vitmax=0;
 8004a04:	4b6a      	ldr	r3, [pc, #424]	@ (8004bb0 <statemachine+0x568>)
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
				  									 					  							BTN_B_LONG=0;
 8004a0c:	4b67      	ldr	r3, [pc, #412]	@ (8004bac <statemachine+0x564>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
				  									 					  						}
				  									 	 break;
 8004a12:	f001 bbb1 	b.w	8006178 <statemachine+0x1b30>


				  case STATE_BALISE:
					  ssd1306_Fill(Black);
 8004a16:	2000      	movs	r0, #0
 8004a18:	f7ff f960 	bl	8003cdc <ssd1306_Fill>

					  if(settimeen==0){
 8004a1c:	4b65      	ldr	r3, [pc, #404]	@ (8004bb4 <statemachine+0x56c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d145      	bne.n	8004ab0 <statemachine+0x468>

						  if(myData.fix==1){
 8004a24:	4b64      	ldr	r3, [pc, #400]	@ (8004bb8 <statemachine+0x570>)
 8004a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d141      	bne.n	8004ab0 <statemachine+0x468>
							settimeen=1;
 8004a2c:	4b61      	ldr	r3, [pc, #388]	@ (8004bb4 <statemachine+0x56c>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8004a32:	4b61      	ldr	r3, [pc, #388]	@ (8004bb8 <statemachine+0x570>)
 8004a34:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	461a      	mov	r2, r3
 8004a40:	0092      	lsls	r2, r2, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	4b5b      	ldr	r3, [pc, #364]	@ (8004bb8 <statemachine+0x570>)
 8004a4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	4413      	add	r3, r2
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	4b58      	ldr	r3, [pc, #352]	@ (8004bbc <statemachine+0x574>)
 8004a5a:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8004a5c:	4b56      	ldr	r3, [pc, #344]	@ (8004bb8 <statemachine+0x570>)
 8004a5e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	0092      	lsls	r2, r2, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	4b51      	ldr	r3, [pc, #324]	@ (8004bb8 <statemachine+0x570>)
 8004a74:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	4b4f      	ldr	r3, [pc, #316]	@ (8004bc0 <statemachine+0x578>)
 8004a84:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004a86:	4b4c      	ldr	r3, [pc, #304]	@ (8004bb8 <statemachine+0x570>)
 8004a88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	0092      	lsls	r2, r2, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	4b46      	ldr	r3, [pc, #280]	@ (8004bb8 <statemachine+0x570>)
 8004a9e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	4b45      	ldr	r3, [pc, #276]	@ (8004bc4 <statemachine+0x57c>)
 8004aae:	701a      	strb	r2, [r3, #0]





					  switch(balisestate){
 8004ab0:	4b45      	ldr	r3, [pc, #276]	@ (8004bc8 <statemachine+0x580>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	f000 837b 	beq.w	80051b0 <statemachine+0xb68>
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	f301 835e 	bgt.w	800617c <statemachine+0x1b34>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d004      	beq.n	8004ace <statemachine+0x486>
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	f000 8093 	beq.w	8004bf0 <statemachine+0x5a8>
						  				 									 									  	}

					  }


					  break;
 8004aca:	f001 bb57 	b.w	800617c <statemachine+0x1b34>
						  ssd1306_SetCursor(32,32);
 8004ace:	2120      	movs	r1, #32
 8004ad0:	2020      	movs	r0, #32
 8004ad2:	f7ff fa45 	bl	8003f60 <ssd1306_SetCursor>
						  ssd1306_WriteString("Tracker",Font_6x8,White);
 8004ad6:	4a3d      	ldr	r2, [pc, #244]	@ (8004bcc <statemachine+0x584>)
 8004ad8:	2301      	movs	r3, #1
 8004ada:	ca06      	ldmia	r2, {r1, r2}
 8004adc:	483c      	ldr	r0, [pc, #240]	@ (8004bd0 <statemachine+0x588>)
 8004ade:	f7ff fa19 	bl	8003f14 <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "offset=%d",pageoffset);
 8004ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8004bd4 <statemachine+0x58c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a3c      	ldr	r2, [pc, #240]	@ (8004bd8 <statemachine+0x590>)
 8004ae8:	2132      	movs	r1, #50	@ 0x32
 8004aea:	483c      	ldr	r0, [pc, #240]	@ (8004bdc <statemachine+0x594>)
 8004aec:	f016 fb8e 	bl	801b20c <sniprintf>
						  ssd1306_SetCursor(32,42);
 8004af0:	212a      	movs	r1, #42	@ 0x2a
 8004af2:	2020      	movs	r0, #32
 8004af4:	f7ff fa34 	bl	8003f60 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004af8:	4a39      	ldr	r2, [pc, #228]	@ (8004be0 <statemachine+0x598>)
 8004afa:	2301      	movs	r3, #1
 8004afc:	ca06      	ldmia	r2, {r1, r2}
 8004afe:	4837      	ldr	r0, [pc, #220]	@ (8004bdc <statemachine+0x594>)
 8004b00:	f7ff fa08 	bl	8003f14 <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 8004b04:	4b37      	ldr	r3, [pc, #220]	@ (8004be4 <statemachine+0x59c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a37      	ldr	r2, [pc, #220]	@ (8004be8 <statemachine+0x5a0>)
 8004b0a:	2132      	movs	r1, #50	@ 0x32
 8004b0c:	4833      	ldr	r0, [pc, #204]	@ (8004bdc <statemachine+0x594>)
 8004b0e:	f016 fb7d 	bl	801b20c <sniprintf>
						  ssd1306_SetCursor(32,52);
 8004b12:	2134      	movs	r1, #52	@ 0x34
 8004b14:	2020      	movs	r0, #32
 8004b16:	f7ff fa23 	bl	8003f60 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004b1a:	4a31      	ldr	r2, [pc, #196]	@ (8004be0 <statemachine+0x598>)
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	ca06      	ldmia	r2, {r1, r2}
 8004b20:	482e      	ldr	r0, [pc, #184]	@ (8004bdc <statemachine+0x594>)
 8004b22:	f7ff f9f7 	bl	8003f14 <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8004b26:	4b21      	ldr	r3, [pc, #132]	@ (8004bac <statemachine+0x564>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	dd0e      	ble.n	8004b4c <statemachine+0x504>
							balisestate++;
 8004b2e:	4b26      	ldr	r3, [pc, #152]	@ (8004bc8 <statemachine+0x580>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	3301      	adds	r3, #1
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	4b24      	ldr	r3, [pc, #144]	@ (8004bc8 <statemachine+0x580>)
 8004b38:	701a      	strb	r2, [r3, #0]
							BTN_B_LONG=0;
 8004b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8004bac <statemachine+0x564>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
							BTN_A=0;
 8004b40:	4b16      	ldr	r3, [pc, #88]	@ (8004b9c <statemachine+0x554>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim17);
 8004b46:	4829      	ldr	r0, [pc, #164]	@ (8004bec <statemachine+0x5a4>)
 8004b48:	f00a f89c 	bl	800ec84 <HAL_TIM_Base_Start_IT>
						  if(BTN_A>=1){
 8004b4c:	4b13      	ldr	r3, [pc, #76]	@ (8004b9c <statemachine+0x554>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	dd0e      	ble.n	8004b72 <statemachine+0x52a>
						  				  			 	state++;
 8004b54:	4b12      	ldr	r3, [pc, #72]	@ (8004ba0 <statemachine+0x558>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	4b10      	ldr	r3, [pc, #64]	@ (8004ba0 <statemachine+0x558>)
 8004b5e:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 8004b60:	4b0e      	ldr	r3, [pc, #56]	@ (8004b9c <statemachine+0x554>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 8004b66:	4b0f      	ldr	r3, [pc, #60]	@ (8004ba4 <statemachine+0x55c>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
						  				  			 	settimeen=0;
 8004b6c:	4b11      	ldr	r3, [pc, #68]	@ (8004bb4 <statemachine+0x56c>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 8004b72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba8 <statemachine+0x560>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f340 836c 	ble.w	8005254 <statemachine+0xc0c>
									  state--;
 8004b7c:	4b08      	ldr	r3, [pc, #32]	@ (8004ba0 <statemachine+0x558>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	4b06      	ldr	r3, [pc, #24]	@ (8004ba0 <statemachine+0x558>)
 8004b86:	701a      	strb	r2, [r3, #0]
									BTN_A_LONG=0;
 8004b88:	4b07      	ldr	r3, [pc, #28]	@ (8004ba8 <statemachine+0x560>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
									BTN_B=0;
 8004b8e:	4b05      	ldr	r3, [pc, #20]	@ (8004ba4 <statemachine+0x55c>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
									settimeen=0;
 8004b94:	4b07      	ldr	r3, [pc, #28]	@ (8004bb4 <statemachine+0x56c>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
						  break;
 8004b9a:	e35b      	b.n	8005254 <statemachine+0xc0c>
 8004b9c:	20000860 	.word	0x20000860
 8004ba0:	200005d4 	.word	0x200005d4
 8004ba4:	20000864 	.word	0x20000864
 8004ba8:	20000b98 	.word	0x20000b98
 8004bac:	20000b94 	.word	0x20000b94
 8004bb0:	20000b34 	.word	0x20000b34
 8004bb4:	20000b80 	.word	0x20000b80
 8004bb8:	20000820 	.word	0x20000820
 8004bbc:	20000b7d 	.word	0x20000b7d
 8004bc0:	20000b7e 	.word	0x20000b7e
 8004bc4:	20000b7c 	.word	0x20000b7c
 8004bc8:	200005d9 	.word	0x200005d9
 8004bcc:	20000014 	.word	0x20000014
 8004bd0:	0801f958 	.word	0x0801f958
 8004bd4:	20000a9c 	.word	0x20000a9c
 8004bd8:	0801f960 	.word	0x0801f960
 8004bdc:	20000ac0 	.word	0x20000ac0
 8004be0:	2000001c 	.word	0x2000001c
 8004be4:	20000aa0 	.word	0x20000aa0
 8004be8:	0801f96c 	.word	0x0801f96c
 8004bec:	20001284 	.word	0x20001284
						  if(myData.speed>=vitmax){
 8004bf0:	4ba3      	ldr	r3, [pc, #652]	@ (8004e80 <statemachine+0x838>)
 8004bf2:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004bf6:	4ba3      	ldr	r3, [pc, #652]	@ (8004e84 <statemachine+0x83c>)
 8004bf8:	edd3 7a00 	vldr	s15, [r3]
 8004bfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c04:	db03      	blt.n	8004c0e <statemachine+0x5c6>
						  									 vitmax=myData.speed;
 8004c06:	4b9e      	ldr	r3, [pc, #632]	@ (8004e80 <statemachine+0x838>)
 8004c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0a:	4a9e      	ldr	r2, [pc, #632]	@ (8004e84 <statemachine+0x83c>)
 8004c0c:	6013      	str	r3, [r2, #0]
						  if(pagenumber+1>=MAX_WRITE_PAGE){
 8004c0e:	4b9e      	ldr	r3, [pc, #632]	@ (8004e88 <statemachine+0x840>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f246 32fd 	movw	r2, #25597	@ 0x63fd
 8004c16:	4293      	cmp	r3, r2
 8004c18:	dd05      	ble.n	8004c26 <statemachine+0x5de>
							  HAL_TIM_Base_Stop_IT(&htim17);
 8004c1a:	489c      	ldr	r0, [pc, #624]	@ (8004e8c <statemachine+0x844>)
 8004c1c:	f00a f880 	bl	800ed20 <HAL_TIM_Base_Stop_IT>
							  balisestate=2;
 8004c20:	4b9b      	ldr	r3, [pc, #620]	@ (8004e90 <statemachine+0x848>)
 8004c22:	2202      	movs	r2, #2
 8004c24:	701a      	strb	r2, [r3, #0]
						  if(enablewrite==1){
 8004c26:	4b9b      	ldr	r3, [pc, #620]	@ (8004e94 <statemachine+0x84c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	f040 80b0 	bne.w	8004d90 <statemachine+0x748>
							  oldlat=myData.latitude;
 8004c30:	4b93      	ldr	r3, [pc, #588]	@ (8004e80 <statemachine+0x838>)
 8004c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c36:	4998      	ldr	r1, [pc, #608]	@ (8004e98 <statemachine+0x850>)
 8004c38:	e9c1 2300 	strd	r2, r3, [r1]
							  oldlong=myData.longitude;
 8004c3c:	4b90      	ldr	r3, [pc, #576]	@ (8004e80 <statemachine+0x838>)
 8004c3e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004c42:	4996      	ldr	r1, [pc, #600]	@ (8004e9c <statemachine+0x854>)
 8004c44:	e9c1 2300 	strd	r2, r3, [r1]
							  nmea_parse(&myData, DataBuffer);
 8004c48:	4995      	ldr	r1, [pc, #596]	@ (8004ea0 <statemachine+0x858>)
 8004c4a:	488d      	ldr	r0, [pc, #564]	@ (8004e80 <statemachine+0x838>)
 8004c4c:	f7fe fada 	bl	8003204 <nmea_parse>
							  if(distancecalc(oldlat, myData.latitude,oldlong, myData.longitude) > 139.0){//correspond à 500kmh pendant 1sec
 8004c50:	4b91      	ldr	r3, [pc, #580]	@ (8004e98 <statemachine+0x850>)
 8004c52:	ed93 7b00 	vldr	d7, [r3]
 8004c56:	4b8a      	ldr	r3, [pc, #552]	@ (8004e80 <statemachine+0x838>)
 8004c58:	ed93 6b00 	vldr	d6, [r3]
 8004c5c:	4b8f      	ldr	r3, [pc, #572]	@ (8004e9c <statemachine+0x854>)
 8004c5e:	ed93 5b00 	vldr	d5, [r3]
 8004c62:	4b87      	ldr	r3, [pc, #540]	@ (8004e80 <statemachine+0x838>)
 8004c64:	ed93 4b04 	vldr	d4, [r3, #16]
 8004c68:	eeb0 3a44 	vmov.f32	s6, s8
 8004c6c:	eef0 3a64 	vmov.f32	s7, s9
 8004c70:	eeb0 2a45 	vmov.f32	s4, s10
 8004c74:	eef0 2a65 	vmov.f32	s5, s11
 8004c78:	eeb0 1a46 	vmov.f32	s2, s12
 8004c7c:	eef0 1a66 	vmov.f32	s3, s13
 8004c80:	eeb0 0a47 	vmov.f32	s0, s14
 8004c84:	eef0 0a67 	vmov.f32	s1, s15
 8004c88:	f7fe fb66 	bl	8003358 <distancecalc>
 8004c8c:	ec51 0b10 	vmov	r0, r1, d0
 8004c90:	a379      	add	r3, pc, #484	@ (adr r3, 8004e78 <statemachine+0x830>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f7fb ff17 	bl	8000ac8 <__aeabi_dcmpgt>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d02b      	beq.n	8004cf8 <statemachine+0x6b0>
								  myData.latitude=oldlat;
 8004ca0:	4b7d      	ldr	r3, [pc, #500]	@ (8004e98 <statemachine+0x850>)
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	4976      	ldr	r1, [pc, #472]	@ (8004e80 <statemachine+0x838>)
 8004ca8:	e9c1 2300 	strd	r2, r3, [r1]
								  myData.longitude=oldlong;
 8004cac:	4b7b      	ldr	r3, [pc, #492]	@ (8004e9c <statemachine+0x854>)
 8004cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb2:	4973      	ldr	r1, [pc, #460]	@ (8004e80 <statemachine+0x838>)
 8004cb4:	e9c1 2304 	strd	r2, r3, [r1, #16]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004cb8:	4b7a      	ldr	r3, [pc, #488]	@ (8004ea4 <statemachine+0x85c>)
 8004cba:	edd3 7a00 	vldr	s15, [r3]
 8004cbe:	4b7a      	ldr	r3, [pc, #488]	@ (8004ea8 <statemachine+0x860>)
 8004cc0:	ed93 7a00 	vldr	s14, [r3]
 8004cc4:	4b6e      	ldr	r3, [pc, #440]	@ (8004e80 <statemachine+0x838>)
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc8:	4a6d      	ldr	r2, [pc, #436]	@ (8004e80 <statemachine+0x838>)
 8004cca:	edd2 6a08 	vldr	s13, [r2, #32]
 8004cce:	eeb0 1a66 	vmov.f32	s2, s13
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	496a      	ldr	r1, [pc, #424]	@ (8004e80 <statemachine+0x838>)
 8004cd6:	eef0 0a47 	vmov.f32	s1, s14
 8004cda:	eeb0 0a67 	vmov.f32	s0, s15
 8004cde:	4873      	ldr	r0, [pc, #460]	@ (8004eac <statemachine+0x864>)
 8004ce0:	f7fe fd96 	bl	8003810 <csvframe>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	4a72      	ldr	r2, [pc, #456]	@ (8004eb0 <statemachine+0x868>)
 8004ce8:	6013      	str	r3, [r2, #0]
								  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004cea:	4b71      	ldr	r3, [pc, #452]	@ (8004eb0 <statemachine+0x868>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4619      	mov	r1, r3
 8004cf0:	486e      	ldr	r0, [pc, #440]	@ (8004eac <statemachine+0x864>)
 8004cf2:	f7fe fec3 	bl	8003a7c <writebuffertoflash>
 8004cf6:	e048      	b.n	8004d8a <statemachine+0x742>
								  distanceparcouru=distanceparcouru + distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 8004cf8:	4b67      	ldr	r3, [pc, #412]	@ (8004e98 <statemachine+0x850>)
 8004cfa:	ed93 7b00 	vldr	d7, [r3]
 8004cfe:	4b60      	ldr	r3, [pc, #384]	@ (8004e80 <statemachine+0x838>)
 8004d00:	ed93 6b00 	vldr	d6, [r3]
 8004d04:	4b65      	ldr	r3, [pc, #404]	@ (8004e9c <statemachine+0x854>)
 8004d06:	ed93 5b00 	vldr	d5, [r3]
 8004d0a:	4b5d      	ldr	r3, [pc, #372]	@ (8004e80 <statemachine+0x838>)
 8004d0c:	ed93 4b04 	vldr	d4, [r3, #16]
 8004d10:	eeb0 3a44 	vmov.f32	s6, s8
 8004d14:	eef0 3a64 	vmov.f32	s7, s9
 8004d18:	eeb0 2a45 	vmov.f32	s4, s10
 8004d1c:	eef0 2a65 	vmov.f32	s5, s11
 8004d20:	eeb0 1a46 	vmov.f32	s2, s12
 8004d24:	eef0 1a66 	vmov.f32	s3, s13
 8004d28:	eeb0 0a47 	vmov.f32	s0, s14
 8004d2c:	eef0 0a67 	vmov.f32	s1, s15
 8004d30:	f7fe fb12 	bl	8003358 <distancecalc>
 8004d34:	ec51 0b10 	vmov	r0, r1, d0
 8004d38:	4b5e      	ldr	r3, [pc, #376]	@ (8004eb4 <statemachine+0x86c>)
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f7fb fa7d 	bl	800023c <__adddf3>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	495b      	ldr	r1, [pc, #364]	@ (8004eb4 <statemachine+0x86c>)
 8004d48:	e9c1 2300 	strd	r2, r3, [r1]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004d4c:	4b55      	ldr	r3, [pc, #340]	@ (8004ea4 <statemachine+0x85c>)
 8004d4e:	edd3 7a00 	vldr	s15, [r3]
 8004d52:	4b55      	ldr	r3, [pc, #340]	@ (8004ea8 <statemachine+0x860>)
 8004d54:	ed93 7a00 	vldr	s14, [r3]
 8004d58:	4b49      	ldr	r3, [pc, #292]	@ (8004e80 <statemachine+0x838>)
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	4a48      	ldr	r2, [pc, #288]	@ (8004e80 <statemachine+0x838>)
 8004d5e:	edd2 6a08 	vldr	s13, [r2, #32]
 8004d62:	eeb0 1a66 	vmov.f32	s2, s13
 8004d66:	461a      	mov	r2, r3
 8004d68:	4945      	ldr	r1, [pc, #276]	@ (8004e80 <statemachine+0x838>)
 8004d6a:	eef0 0a47 	vmov.f32	s1, s14
 8004d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8004d72:	484e      	ldr	r0, [pc, #312]	@ (8004eac <statemachine+0x864>)
 8004d74:	f7fe fd4c 	bl	8003810 <csvframe>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	4a4d      	ldr	r2, [pc, #308]	@ (8004eb0 <statemachine+0x868>)
 8004d7c:	6013      	str	r3, [r2, #0]
								  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004d7e:	4b4c      	ldr	r3, [pc, #304]	@ (8004eb0 <statemachine+0x868>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4619      	mov	r1, r3
 8004d84:	4849      	ldr	r0, [pc, #292]	@ (8004eac <statemachine+0x864>)
 8004d86:	f7fe fe79 	bl	8003a7c <writebuffertoflash>
							  enablewrite=0;
 8004d8a:	4b42      	ldr	r3, [pc, #264]	@ (8004e94 <statemachine+0x84c>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]
						  ssd1306_SetCursor(32,32);
 8004d90:	2120      	movs	r1, #32
 8004d92:	2020      	movs	r0, #32
 8004d94:	f7ff f8e4 	bl	8003f60 <ssd1306_SetCursor>
						  switch(ecranstate){
 8004d98:	4b47      	ldr	r3, [pc, #284]	@ (8004eb8 <statemachine+0x870>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2b05      	cmp	r3, #5
 8004d9e:	f200 818c 	bhi.w	80050ba <statemachine+0xa72>
 8004da2:	a201      	add	r2, pc, #4	@ (adr r2, 8004da8 <statemachine+0x760>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004dc1 	.word	0x08004dc1
 8004dac:	08004e13 	.word	0x08004e13
 8004db0:	08004ee5 	.word	0x08004ee5
 8004db4:	08004f4f 	.word	0x08004f4f
 8004db8:	08004faf 	.word	0x08004faf
 8004dbc:	0800500d 	.word	0x0800500d
							  snprintf((char *)bufferscreen,50,"%d",pagenumber);
 8004dc0:	4b31      	ldr	r3, [pc, #196]	@ (8004e88 <statemachine+0x840>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a3d      	ldr	r2, [pc, #244]	@ (8004ebc <statemachine+0x874>)
 8004dc6:	2132      	movs	r1, #50	@ 0x32
 8004dc8:	483d      	ldr	r0, [pc, #244]	@ (8004ec0 <statemachine+0x878>)
 8004dca:	f016 fa1f 	bl	801b20c <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004dce:	4a3d      	ldr	r2, [pc, #244]	@ (8004ec4 <statemachine+0x87c>)
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	ca06      	ldmia	r2, {r1, r2}
 8004dd4:	483a      	ldr	r0, [pc, #232]	@ (8004ec0 <statemachine+0x878>)
 8004dd6:	f7ff f89d 	bl	8003f14 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 8004dda:	212a      	movs	r1, #42	@ 0x2a
 8004ddc:	2020      	movs	r0, #32
 8004dde:	f7ff f8bf 	bl	8003f60 <ssd1306_SetCursor>
							  ssd1306_WriteString("PageNb",Font_6x8,White);
 8004de2:	4a39      	ldr	r2, [pc, #228]	@ (8004ec8 <statemachine+0x880>)
 8004de4:	2301      	movs	r3, #1
 8004de6:	ca06      	ldmia	r2, {r1, r2}
 8004de8:	4838      	ldr	r0, [pc, #224]	@ (8004ecc <statemachine+0x884>)
 8004dea:	f7ff f893 	bl	8003f14 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004dee:	4b38      	ldr	r3, [pc, #224]	@ (8004ed0 <statemachine+0x888>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f340 8156 	ble.w	80050a4 <statemachine+0xa5c>
														  ecranstate++;
 8004df8:	4b2f      	ldr	r3, [pc, #188]	@ (8004eb8 <statemachine+0x870>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	4b2d      	ldr	r3, [pc, #180]	@ (8004eb8 <statemachine+0x870>)
 8004e02:	701a      	strb	r2, [r3, #0]
													  	BTN_B=0;
 8004e04:	4b32      	ldr	r3, [pc, #200]	@ (8004ed0 <statemachine+0x888>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
													  	BTN_A=0;
 8004e0a:	4b32      	ldr	r3, [pc, #200]	@ (8004ed4 <statemachine+0x88c>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]
							  break;
 8004e10:	e148      	b.n	80050a4 <statemachine+0xa5c>
							  snprintf((char  *)bufferscreen,50,"%0.3lf",distanceparcouru/1000);
 8004e12:	4b28      	ldr	r3, [pc, #160]	@ (8004eb4 <statemachine+0x86c>)
 8004e14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ed8 <statemachine+0x890>)
 8004e1e:	f7fb fced 	bl	80007fc <__aeabi_ddiv>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	e9cd 2300 	strd	r2, r3, [sp]
 8004e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004edc <statemachine+0x894>)
 8004e2c:	2132      	movs	r1, #50	@ 0x32
 8004e2e:	4824      	ldr	r0, [pc, #144]	@ (8004ec0 <statemachine+0x878>)
 8004e30:	f016 f9ec 	bl	801b20c <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004e34:	4a23      	ldr	r2, [pc, #140]	@ (8004ec4 <statemachine+0x87c>)
 8004e36:	2301      	movs	r3, #1
 8004e38:	ca06      	ldmia	r2, {r1, r2}
 8004e3a:	4821      	ldr	r0, [pc, #132]	@ (8004ec0 <statemachine+0x878>)
 8004e3c:	f7ff f86a 	bl	8003f14 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 8004e40:	212a      	movs	r1, #42	@ 0x2a
 8004e42:	2020      	movs	r0, #32
 8004e44:	f7ff f88c 	bl	8003f60 <ssd1306_SetCursor>
							  ssd1306_WriteString("Dist(km)",Font_6x8,White);
 8004e48:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec8 <statemachine+0x880>)
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	ca06      	ldmia	r2, {r1, r2}
 8004e4e:	4824      	ldr	r0, [pc, #144]	@ (8004ee0 <statemachine+0x898>)
 8004e50:	f7ff f860 	bl	8003f14 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004e54:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed0 <statemachine+0x888>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f340 8125 	ble.w	80050a8 <statemachine+0xa60>
							  														  ecranstate++;
 8004e5e:	4b16      	ldr	r3, [pc, #88]	@ (8004eb8 <statemachine+0x870>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	3301      	adds	r3, #1
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	4b14      	ldr	r3, [pc, #80]	@ (8004eb8 <statemachine+0x870>)
 8004e68:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8004e6a:	4b19      	ldr	r3, [pc, #100]	@ (8004ed0 <statemachine+0x888>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8004e70:	4b18      	ldr	r3, [pc, #96]	@ (8004ed4 <statemachine+0x88c>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
							  break;
 8004e76:	e117      	b.n	80050a8 <statemachine+0xa60>
 8004e78:	00000000 	.word	0x00000000
 8004e7c:	40616000 	.word	0x40616000
 8004e80:	20000820 	.word	0x20000820
 8004e84:	20000b34 	.word	0x20000b34
 8004e88:	20000aa0 	.word	0x20000aa0
 8004e8c:	20001284 	.word	0x20001284
 8004e90:	200005d9 	.word	0x200005d9
 8004e94:	20000b78 	.word	0x20000b78
 8004e98:	20000b68 	.word	0x20000b68
 8004e9c:	20000b70 	.word	0x20000b70
 8004ea0:	20000620 	.word	0x20000620
 8004ea4:	20000890 	.word	0x20000890
 8004ea8:	20000898 	.word	0x20000898
 8004eac:	2000089c 	.word	0x2000089c
 8004eb0:	20000b4c 	.word	0x20000b4c
 8004eb4:	20000b60 	.word	0x20000b60
 8004eb8:	20000ce0 	.word	0x20000ce0
 8004ebc:	0801f974 	.word	0x0801f974
 8004ec0:	20000ac0 	.word	0x20000ac0
 8004ec4:	2000001c 	.word	0x2000001c
 8004ec8:	20000014 	.word	0x20000014
 8004ecc:	0801f978 	.word	0x0801f978
 8004ed0:	20000864 	.word	0x20000864
 8004ed4:	20000860 	.word	0x20000860
 8004ed8:	408f4000 	.word	0x408f4000
 8004edc:	0801f980 	.word	0x0801f980
 8004ee0:	0801f988 	.word	0x0801f988
							  snprintf((char  *)bufferscreen,50,"%0.1f",myData.speed*3.6);
 8004ee4:	4b9e      	ldr	r3, [pc, #632]	@ (8005160 <statemachine+0xb18>)
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fb fb05 	bl	80004f8 <__aeabi_f2d>
 8004eee:	a39a      	add	r3, pc, #616	@ (adr r3, 8005158 <statemachine+0xb10>)
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f7fb fb58 	bl	80005a8 <__aeabi_dmul>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	e9cd 2300 	strd	r2, r3, [sp]
 8004f00:	4a98      	ldr	r2, [pc, #608]	@ (8005164 <statemachine+0xb1c>)
 8004f02:	2132      	movs	r1, #50	@ 0x32
 8004f04:	4898      	ldr	r0, [pc, #608]	@ (8005168 <statemachine+0xb20>)
 8004f06:	f016 f981 	bl	801b20c <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004f0a:	4a98      	ldr	r2, [pc, #608]	@ (800516c <statemachine+0xb24>)
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	ca06      	ldmia	r2, {r1, r2}
 8004f10:	4895      	ldr	r0, [pc, #596]	@ (8005168 <statemachine+0xb20>)
 8004f12:	f7fe ffff 	bl	8003f14 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 8004f16:	212a      	movs	r1, #42	@ 0x2a
 8004f18:	2020      	movs	r0, #32
 8004f1a:	f7ff f821 	bl	8003f60 <ssd1306_SetCursor>
							  ssd1306_WriteString("Vit(kmh)",Font_6x8,White);
 8004f1e:	4a94      	ldr	r2, [pc, #592]	@ (8005170 <statemachine+0xb28>)
 8004f20:	2301      	movs	r3, #1
 8004f22:	ca06      	ldmia	r2, {r1, r2}
 8004f24:	4893      	ldr	r0, [pc, #588]	@ (8005174 <statemachine+0xb2c>)
 8004f26:	f7fe fff5 	bl	8003f14 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004f2a:	4b93      	ldr	r3, [pc, #588]	@ (8005178 <statemachine+0xb30>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f340 80bc 	ble.w	80050ac <statemachine+0xa64>
							  														  ecranstate++;
 8004f34:	4b91      	ldr	r3, [pc, #580]	@ (800517c <statemachine+0xb34>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	4b8f      	ldr	r3, [pc, #572]	@ (800517c <statemachine+0xb34>)
 8004f3e:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8004f40:	4b8d      	ldr	r3, [pc, #564]	@ (8005178 <statemachine+0xb30>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8004f46:	4b8e      	ldr	r3, [pc, #568]	@ (8005180 <statemachine+0xb38>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
							  break;
 8004f4c:	e0ae      	b.n	80050ac <statemachine+0xa64>
							  snprintf((char  *)bufferscreen,50,"%0.1f",myData.altitude);
 8004f4e:	4b84      	ldr	r3, [pc, #528]	@ (8005160 <statemachine+0xb18>)
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fb fad0 	bl	80004f8 <__aeabi_f2d>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	e9cd 2300 	strd	r2, r3, [sp]
 8004f60:	4a80      	ldr	r2, [pc, #512]	@ (8005164 <statemachine+0xb1c>)
 8004f62:	2132      	movs	r1, #50	@ 0x32
 8004f64:	4880      	ldr	r0, [pc, #512]	@ (8005168 <statemachine+0xb20>)
 8004f66:	f016 f951 	bl	801b20c <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004f6a:	4a80      	ldr	r2, [pc, #512]	@ (800516c <statemachine+0xb24>)
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	ca06      	ldmia	r2, {r1, r2}
 8004f70:	487d      	ldr	r0, [pc, #500]	@ (8005168 <statemachine+0xb20>)
 8004f72:	f7fe ffcf 	bl	8003f14 <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,42);
 8004f76:	212a      	movs	r1, #42	@ 0x2a
 8004f78:	2020      	movs	r0, #32
 8004f7a:	f7fe fff1 	bl	8003f60 <ssd1306_SetCursor>
							  							ssd1306_WriteString("alt(m)",Font_6x8,White);
 8004f7e:	4a7c      	ldr	r2, [pc, #496]	@ (8005170 <statemachine+0xb28>)
 8004f80:	2301      	movs	r3, #1
 8004f82:	ca06      	ldmia	r2, {r1, r2}
 8004f84:	487f      	ldr	r0, [pc, #508]	@ (8005184 <statemachine+0xb3c>)
 8004f86:	f7fe ffc5 	bl	8003f14 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004f8a:	4b7b      	ldr	r3, [pc, #492]	@ (8005178 <statemachine+0xb30>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f340 808e 	ble.w	80050b0 <statemachine+0xa68>
							  														  ecranstate++;
 8004f94:	4b79      	ldr	r3, [pc, #484]	@ (800517c <statemachine+0xb34>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	4b77      	ldr	r3, [pc, #476]	@ (800517c <statemachine+0xb34>)
 8004f9e:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8004fa0:	4b75      	ldr	r3, [pc, #468]	@ (8005178 <statemachine+0xb30>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8004fa6:	4b76      	ldr	r3, [pc, #472]	@ (8005180 <statemachine+0xb38>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]
							  break;
 8004fac:	e080      	b.n	80050b0 <statemachine+0xa68>
							  snprintf((char  *)bufferscreen,50,"%0.1f",vbat);
 8004fae:	4b76      	ldr	r3, [pc, #472]	@ (8005188 <statemachine+0xb40>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fb faa0 	bl	80004f8 <__aeabi_f2d>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	e9cd 2300 	strd	r2, r3, [sp]
 8004fc0:	4a68      	ldr	r2, [pc, #416]	@ (8005164 <statemachine+0xb1c>)
 8004fc2:	2132      	movs	r1, #50	@ 0x32
 8004fc4:	4868      	ldr	r0, [pc, #416]	@ (8005168 <statemachine+0xb20>)
 8004fc6:	f016 f921 	bl	801b20c <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004fca:	4a68      	ldr	r2, [pc, #416]	@ (800516c <statemachine+0xb24>)
 8004fcc:	2301      	movs	r3, #1
 8004fce:	ca06      	ldmia	r2, {r1, r2}
 8004fd0:	4865      	ldr	r0, [pc, #404]	@ (8005168 <statemachine+0xb20>)
 8004fd2:	f7fe ff9f 	bl	8003f14 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 8004fd6:	212a      	movs	r1, #42	@ 0x2a
 8004fd8:	2020      	movs	r0, #32
 8004fda:	f7fe ffc1 	bl	8003f60 <ssd1306_SetCursor>
							  ssd1306_WriteString("Vbat(V)",Font_6x8,White);
 8004fde:	4a64      	ldr	r2, [pc, #400]	@ (8005170 <statemachine+0xb28>)
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	ca06      	ldmia	r2, {r1, r2}
 8004fe4:	4869      	ldr	r0, [pc, #420]	@ (800518c <statemachine+0xb44>)
 8004fe6:	f7fe ff95 	bl	8003f14 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004fea:	4b63      	ldr	r3, [pc, #396]	@ (8005178 <statemachine+0xb30>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	dd60      	ble.n	80050b4 <statemachine+0xa6c>
							  														  ecranstate++;
 8004ff2:	4b62      	ldr	r3, [pc, #392]	@ (800517c <statemachine+0xb34>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	4b60      	ldr	r3, [pc, #384]	@ (800517c <statemachine+0xb34>)
 8004ffc:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8004ffe:	4b5e      	ldr	r3, [pc, #376]	@ (8005178 <statemachine+0xb30>)
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8005004:	4b5e      	ldr	r3, [pc, #376]	@ (8005180 <statemachine+0xb38>)
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]
							  break;
 800500a:	e053      	b.n	80050b4 <statemachine+0xa6c>
							  snprintf((char  *)bufferscreen,50,"%0.1f",vitmax*3.6);
 800500c:	4b60      	ldr	r3, [pc, #384]	@ (8005190 <statemachine+0xb48>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f7fb fa71 	bl	80004f8 <__aeabi_f2d>
 8005016:	a350      	add	r3, pc, #320	@ (adr r3, 8005158 <statemachine+0xb10>)
 8005018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501c:	f7fb fac4 	bl	80005a8 <__aeabi_dmul>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	e9cd 2300 	strd	r2, r3, [sp]
 8005028:	4a4e      	ldr	r2, [pc, #312]	@ (8005164 <statemachine+0xb1c>)
 800502a:	2132      	movs	r1, #50	@ 0x32
 800502c:	484e      	ldr	r0, [pc, #312]	@ (8005168 <statemachine+0xb20>)
 800502e:	f016 f8ed 	bl	801b20c <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8005032:	4a4e      	ldr	r2, [pc, #312]	@ (800516c <statemachine+0xb24>)
 8005034:	2301      	movs	r3, #1
 8005036:	ca06      	ldmia	r2, {r1, r2}
 8005038:	484b      	ldr	r0, [pc, #300]	@ (8005168 <statemachine+0xb20>)
 800503a:	f7fe ff6b 	bl	8003f14 <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,42);
 800503e:	212a      	movs	r1, #42	@ 0x2a
 8005040:	2020      	movs	r0, #32
 8005042:	f7fe ff8d 	bl	8003f60 <ssd1306_SetCursor>
							  							ssd1306_WriteString("MaxV",Font_6x8,White);
 8005046:	4a4a      	ldr	r2, [pc, #296]	@ (8005170 <statemachine+0xb28>)
 8005048:	2301      	movs	r3, #1
 800504a:	ca06      	ldmia	r2, {r1, r2}
 800504c:	4851      	ldr	r0, [pc, #324]	@ (8005194 <statemachine+0xb4c>)
 800504e:	f7fe ff61 	bl	8003f14 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8005052:	4b49      	ldr	r3, [pc, #292]	@ (8005178 <statemachine+0xb30>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	dd2e      	ble.n	80050b8 <statemachine+0xa70>
							  														ecranstate--;
 800505a:	4b48      	ldr	r3, [pc, #288]	@ (800517c <statemachine+0xb34>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	3b01      	subs	r3, #1
 8005060:	b2da      	uxtb	r2, r3
 8005062:	4b46      	ldr	r3, [pc, #280]	@ (800517c <statemachine+0xb34>)
 8005064:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 8005066:	4b45      	ldr	r3, [pc, #276]	@ (800517c <statemachine+0xb34>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	3b01      	subs	r3, #1
 800506c:	b2da      	uxtb	r2, r3
 800506e:	4b43      	ldr	r3, [pc, #268]	@ (800517c <statemachine+0xb34>)
 8005070:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 8005072:	4b42      	ldr	r3, [pc, #264]	@ (800517c <statemachine+0xb34>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	3b01      	subs	r3, #1
 8005078:	b2da      	uxtb	r2, r3
 800507a:	4b40      	ldr	r3, [pc, #256]	@ (800517c <statemachine+0xb34>)
 800507c:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 800507e:	4b3f      	ldr	r3, [pc, #252]	@ (800517c <statemachine+0xb34>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	3b01      	subs	r3, #1
 8005084:	b2da      	uxtb	r2, r3
 8005086:	4b3d      	ldr	r3, [pc, #244]	@ (800517c <statemachine+0xb34>)
 8005088:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 800508a:	4b3c      	ldr	r3, [pc, #240]	@ (800517c <statemachine+0xb34>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	3b01      	subs	r3, #1
 8005090:	b2da      	uxtb	r2, r3
 8005092:	4b3a      	ldr	r3, [pc, #232]	@ (800517c <statemachine+0xb34>)
 8005094:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8005096:	4b38      	ldr	r3, [pc, #224]	@ (8005178 <statemachine+0xb30>)
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 800509c:	4b38      	ldr	r3, [pc, #224]	@ (8005180 <statemachine+0xb38>)
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
							  break;
 80050a2:	e009      	b.n	80050b8 <statemachine+0xa70>
							  break;
 80050a4:	bf00      	nop
 80050a6:	e008      	b.n	80050ba <statemachine+0xa72>
							  break;
 80050a8:	bf00      	nop
 80050aa:	e006      	b.n	80050ba <statemachine+0xa72>
							  break;
 80050ac:	bf00      	nop
 80050ae:	e004      	b.n	80050ba <statemachine+0xa72>
							  break;
 80050b0:	bf00      	nop
 80050b2:	e002      	b.n	80050ba <statemachine+0xa72>
							  break;
 80050b4:	bf00      	nop
 80050b6:	e000      	b.n	80050ba <statemachine+0xa72>
							  break;
 80050b8:	bf00      	nop
						 	batterygauge(vbat,79, 42,1);
 80050ba:	4b33      	ldr	r3, [pc, #204]	@ (8005188 <statemachine+0xb40>)
 80050bc:	edd3 7a00 	vldr	s15, [r3]
 80050c0:	2201      	movs	r2, #1
 80050c2:	212a      	movs	r1, #42	@ 0x2a
 80050c4:	204f      	movs	r0, #79	@ 0x4f
 80050c6:	eeb0 0a67 	vmov.f32	s0, s15
 80050ca:	f7ff f8e1 	bl	8004290 <batterygauge>
						 	ssd1306_SetCursor(32,52);
 80050ce:	2134      	movs	r1, #52	@ 0x34
 80050d0:	2020      	movs	r0, #32
 80050d2:	f7fe ff45 	bl	8003f60 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 80050d6:	4b2c      	ldr	r3, [pc, #176]	@ (8005188 <statemachine+0xb40>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fb fa0c 	bl	80004f8 <__aeabi_f2d>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	e9cd 2300 	strd	r2, r3, [sp]
 80050e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005198 <statemachine+0xb50>)
 80050ea:	2132      	movs	r1, #50	@ 0x32
 80050ec:	481e      	ldr	r0, [pc, #120]	@ (8005168 <statemachine+0xb20>)
 80050ee:	f016 f88d 	bl	801b20c <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80050f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005170 <statemachine+0xb28>)
 80050f4:	2301      	movs	r3, #1
 80050f6:	ca06      	ldmia	r2, {r1, r2}
 80050f8:	481b      	ldr	r0, [pc, #108]	@ (8005168 <statemachine+0xb20>)
 80050fa:	f7fe ff0b 	bl	8003f14 <ssd1306_WriteString>
						 	ssd1306_SetCursor(65,52);
 80050fe:	2134      	movs	r1, #52	@ 0x34
 8005100:	2041      	movs	r0, #65	@ 0x41
 8005102:	f7fe ff2d 	bl	8003f60 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 8005106:	4b16      	ldr	r3, [pc, #88]	@ (8005160 <statemachine+0xb18>)
 8005108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510a:	4a24      	ldr	r2, [pc, #144]	@ (800519c <statemachine+0xb54>)
 800510c:	2132      	movs	r1, #50	@ 0x32
 800510e:	4816      	ldr	r0, [pc, #88]	@ (8005168 <statemachine+0xb20>)
 8005110:	f016 f87c 	bl	801b20c <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005114:	4a16      	ldr	r2, [pc, #88]	@ (8005170 <statemachine+0xb28>)
 8005116:	2301      	movs	r3, #1
 8005118:	ca06      	ldmia	r2, {r1, r2}
 800511a:	4813      	ldr	r0, [pc, #76]	@ (8005168 <statemachine+0xb20>)
 800511c:	f7fe fefa 	bl	8003f14 <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8005120:	4b1f      	ldr	r3, [pc, #124]	@ (80051a0 <statemachine+0xb58>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	f340 8098 	ble.w	800525a <statemachine+0xc12>
						  						  balisestate--;
 800512a:	4b1e      	ldr	r3, [pc, #120]	@ (80051a4 <statemachine+0xb5c>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	3b01      	subs	r3, #1
 8005130:	b2da      	uxtb	r2, r3
 8005132:	4b1c      	ldr	r3, [pc, #112]	@ (80051a4 <statemachine+0xb5c>)
 8005134:	701a      	strb	r2, [r3, #0]
						  						  BTN_B_LONG=0;
 8005136:	4b1a      	ldr	r3, [pc, #104]	@ (80051a0 <statemachine+0xb58>)
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]
						  						  BTN_A=0;
 800513c:	4b10      	ldr	r3, [pc, #64]	@ (8005180 <statemachine+0xb38>)
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
						  						  HAL_TIM_Base_Stop_IT(&htim17);
 8005142:	4819      	ldr	r0, [pc, #100]	@ (80051a8 <statemachine+0xb60>)
 8005144:	f009 fdec 	bl	800ed20 <HAL_TIM_Base_Stop_IT>
						  						HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8005148:	2200      	movs	r2, #0
 800514a:	2102      	movs	r1, #2
 800514c:	4817      	ldr	r0, [pc, #92]	@ (80051ac <statemachine+0xb64>)
 800514e:	f004 f8a5 	bl	800929c <HAL_GPIO_WritePin>
						  break;
 8005152:	e082      	b.n	800525a <statemachine+0xc12>
 8005154:	f3af 8000 	nop.w
 8005158:	cccccccd 	.word	0xcccccccd
 800515c:	400ccccc 	.word	0x400ccccc
 8005160:	20000820 	.word	0x20000820
 8005164:	0801f918 	.word	0x0801f918
 8005168:	20000ac0 	.word	0x20000ac0
 800516c:	2000001c 	.word	0x2000001c
 8005170:	20000014 	.word	0x20000014
 8005174:	0801f920 	.word	0x0801f920
 8005178:	20000864 	.word	0x20000864
 800517c:	20000ce0 	.word	0x20000ce0
 8005180:	20000860 	.word	0x20000860
 8005184:	0801f994 	.word	0x0801f994
 8005188:	20000898 	.word	0x20000898
 800518c:	0801f99c 	.word	0x0801f99c
 8005190:	20000b34 	.word	0x20000b34
 8005194:	0801f9a4 	.word	0x0801f9a4
 8005198:	0801f9ac 	.word	0x0801f9ac
 800519c:	0801f9b4 	.word	0x0801f9b4
 80051a0:	20000b94 	.word	0x20000b94
 80051a4:	200005d9 	.word	0x200005d9
 80051a8:	20001284 	.word	0x20001284
 80051ac:	48000400 	.word	0x48000400
						  ssd1306_SetCursor(32,32);
 80051b0:	2120      	movs	r1, #32
 80051b2:	2020      	movs	r0, #32
 80051b4:	f7fe fed4 	bl	8003f60 <ssd1306_SetCursor>
						  ssd1306_WriteString("fin de",Font_6x8,White);
 80051b8:	4a97      	ldr	r2, [pc, #604]	@ (8005418 <statemachine+0xdd0>)
 80051ba:	2301      	movs	r3, #1
 80051bc:	ca06      	ldmia	r2, {r1, r2}
 80051be:	4897      	ldr	r0, [pc, #604]	@ (800541c <statemachine+0xdd4>)
 80051c0:	f7fe fea8 	bl	8003f14 <ssd1306_WriteString>
						  ssd1306_SetCursor(32,42);
 80051c4:	212a      	movs	r1, #42	@ 0x2a
 80051c6:	2020      	movs	r0, #32
 80051c8:	f7fe feca 	bl	8003f60 <ssd1306_SetCursor>
						  ssd1306_WriteString("memoire",Font_6x8,White);
 80051cc:	4a92      	ldr	r2, [pc, #584]	@ (8005418 <statemachine+0xdd0>)
 80051ce:	2301      	movs	r3, #1
 80051d0:	ca06      	ldmia	r2, {r1, r2}
 80051d2:	4893      	ldr	r0, [pc, #588]	@ (8005420 <statemachine+0xdd8>)
 80051d4:	f7fe fe9e 	bl	8003f14 <ssd1306_WriteString>
						  ssd1306_SetCursor(32,52);
 80051d8:	2134      	movs	r1, #52	@ 0x34
 80051da:	2020      	movs	r0, #32
 80051dc:	f7fe fec0 	bl	8003f60 <ssd1306_SetCursor>
						  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 80051e0:	4b90      	ldr	r3, [pc, #576]	@ (8005424 <statemachine+0xddc>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	4b90      	ldr	r3, [pc, #576]	@ (8005428 <statemachine+0xde0>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	4613      	mov	r3, r2
 80051ec:	4a8f      	ldr	r2, [pc, #572]	@ (800542c <statemachine+0xde4>)
 80051ee:	2132      	movs	r1, #50	@ 0x32
 80051f0:	488f      	ldr	r0, [pc, #572]	@ (8005430 <statemachine+0xde8>)
 80051f2:	f016 f80b 	bl	801b20c <sniprintf>
						  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80051f6:	4a88      	ldr	r2, [pc, #544]	@ (8005418 <statemachine+0xdd0>)
 80051f8:	2301      	movs	r3, #1
 80051fa:	ca06      	ldmia	r2, {r1, r2}
 80051fc:	488c      	ldr	r0, [pc, #560]	@ (8005430 <statemachine+0xde8>)
 80051fe:	f7fe fe89 	bl	8003f14 <ssd1306_WriteString>
						  if(BTN_A>=1){
 8005202:	4b8c      	ldr	r3, [pc, #560]	@ (8005434 <statemachine+0xdec>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	dd0e      	ble.n	8005228 <statemachine+0xbe0>
						  				  			 	state++;
 800520a:	4b8b      	ldr	r3, [pc, #556]	@ (8005438 <statemachine+0xdf0>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	3301      	adds	r3, #1
 8005210:	b2da      	uxtb	r2, r3
 8005212:	4b89      	ldr	r3, [pc, #548]	@ (8005438 <statemachine+0xdf0>)
 8005214:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 8005216:	4b87      	ldr	r3, [pc, #540]	@ (8005434 <statemachine+0xdec>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 800521c:	4b87      	ldr	r3, [pc, #540]	@ (800543c <statemachine+0xdf4>)
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
						  				  			settimeen=0;
 8005222:	4b87      	ldr	r3, [pc, #540]	@ (8005440 <statemachine+0xdf8>)
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 8005228:	4b86      	ldr	r3, [pc, #536]	@ (8005444 <statemachine+0xdfc>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	f340 87a5 	ble.w	800617c <statemachine+0x1b34>
						  				 									 									  			 	state--;
 8005232:	4b81      	ldr	r3, [pc, #516]	@ (8005438 <statemachine+0xdf0>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	3b01      	subs	r3, #1
 8005238:	b2da      	uxtb	r2, r3
 800523a:	4b7f      	ldr	r3, [pc, #508]	@ (8005438 <statemachine+0xdf0>)
 800523c:	701a      	strb	r2, [r3, #0]
						  				 									 									  			 	BTN_A=0;
 800523e:	4b7d      	ldr	r3, [pc, #500]	@ (8005434 <statemachine+0xdec>)
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_B=0;
 8005244:	4b7d      	ldr	r3, [pc, #500]	@ (800543c <statemachine+0xdf4>)
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_A_LONG=0;
 800524a:	4b7e      	ldr	r3, [pc, #504]	@ (8005444 <statemachine+0xdfc>)
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
					  break;
 8005250:	f000 bf94 	b.w	800617c <statemachine+0x1b34>
						  break;
 8005254:	bf00      	nop
 8005256:	f000 bf91 	b.w	800617c <statemachine+0x1b34>
						  break;
 800525a:	bf00      	nop
					  break;
 800525c:	f000 bf8e 	b.w	800617c <statemachine+0x1b34>

	case STATE_POS:
			  ssd1306_Fill(Black);
 8005260:	2000      	movs	r0, #0
 8005262:	f7fe fd3b 	bl	8003cdc <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8005266:	4978      	ldr	r1, [pc, #480]	@ (8005448 <statemachine+0xe00>)
 8005268:	4878      	ldr	r0, [pc, #480]	@ (800544c <statemachine+0xe04>)
 800526a:	f7fd ffcb 	bl	8003204 <nmea_parse>
			  switch(posstate){
 800526e:	4b78      	ldr	r3, [pc, #480]	@ (8005450 <statemachine+0xe08>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b05      	cmp	r3, #5
 8005274:	f200 8326 	bhi.w	80058c4 <statemachine+0x127c>
 8005278:	a201      	add	r2, pc, #4	@ (adr r2, 8005280 <statemachine+0xc38>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	08005299 	.word	0x08005299
 8005284:	08005343 	.word	0x08005343
 8005288:	0800547d 	.word	0x0800547d
 800528c:	0800553b 	.word	0x0800553b
 8005290:	080055f9 	.word	0x080055f9
 8005294:	0800574d 	.word	0x0800574d

			  case STATE_SUMMARY1:

						ssd1306_SetCursor(32, 32);
 8005298:	2120      	movs	r1, #32
 800529a:	2020      	movs	r0, #32
 800529c:	f7fe fe60 	bl	8003f60 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "Latitude:");
 80052a0:	4a6c      	ldr	r2, [pc, #432]	@ (8005454 <statemachine+0xe0c>)
 80052a2:	210f      	movs	r1, #15
 80052a4:	4862      	ldr	r0, [pc, #392]	@ (8005430 <statemachine+0xde8>)
 80052a6:	f015 ffb1 	bl	801b20c <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80052aa:	4a5b      	ldr	r2, [pc, #364]	@ (8005418 <statemachine+0xdd0>)
 80052ac:	2301      	movs	r3, #1
 80052ae:	ca06      	ldmia	r2, {r1, r2}
 80052b0:	485f      	ldr	r0, [pc, #380]	@ (8005430 <statemachine+0xde8>)
 80052b2:	f7fe fe2f 	bl	8003f14 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80052b6:	4b65      	ldr	r3, [pc, #404]	@ (800544c <statemachine+0xe04>)
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	e9cd 2300 	strd	r2, r3, [sp]
 80052c0:	4a65      	ldr	r2, [pc, #404]	@ (8005458 <statemachine+0xe10>)
 80052c2:	210f      	movs	r1, #15
 80052c4:	485a      	ldr	r0, [pc, #360]	@ (8005430 <statemachine+0xde8>)
 80052c6:	f015 ffa1 	bl	801b20c <sniprintf>
						ssd1306_SetCursor(32, 40);
 80052ca:	2128      	movs	r1, #40	@ 0x28
 80052cc:	2020      	movs	r0, #32
 80052ce:	f7fe fe47 	bl	8003f60 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80052d2:	4a51      	ldr	r2, [pc, #324]	@ (8005418 <statemachine+0xdd0>)
 80052d4:	2301      	movs	r3, #1
 80052d6:	ca06      	ldmia	r2, {r1, r2}
 80052d8:	4855      	ldr	r0, [pc, #340]	@ (8005430 <statemachine+0xde8>)
 80052da:	f7fe fe1b 	bl	8003f14 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Longitude:");
 80052de:	4a5f      	ldr	r2, [pc, #380]	@ (800545c <statemachine+0xe14>)
 80052e0:	210f      	movs	r1, #15
 80052e2:	4853      	ldr	r0, [pc, #332]	@ (8005430 <statemachine+0xde8>)
 80052e4:	f015 ff92 	bl	801b20c <sniprintf>
						ssd1306_SetCursor(32, 48);
 80052e8:	2130      	movs	r1, #48	@ 0x30
 80052ea:	2020      	movs	r0, #32
 80052ec:	f7fe fe38 	bl	8003f60 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80052f0:	4a49      	ldr	r2, [pc, #292]	@ (8005418 <statemachine+0xdd0>)
 80052f2:	2301      	movs	r3, #1
 80052f4:	ca06      	ldmia	r2, {r1, r2}
 80052f6:	484e      	ldr	r0, [pc, #312]	@ (8005430 <statemachine+0xde8>)
 80052f8:	f7fe fe0c 	bl	8003f14 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 80052fc:	4b53      	ldr	r3, [pc, #332]	@ (800544c <statemachine+0xe04>)
 80052fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005302:	e9cd 2300 	strd	r2, r3, [sp]
 8005306:	4a54      	ldr	r2, [pc, #336]	@ (8005458 <statemachine+0xe10>)
 8005308:	210f      	movs	r1, #15
 800530a:	4849      	ldr	r0, [pc, #292]	@ (8005430 <statemachine+0xde8>)
 800530c:	f015 ff7e 	bl	801b20c <sniprintf>
						ssd1306_SetCursor(32, 56);
 8005310:	2138      	movs	r1, #56	@ 0x38
 8005312:	2020      	movs	r0, #32
 8005314:	f7fe fe24 	bl	8003f60 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005318:	4a3f      	ldr	r2, [pc, #252]	@ (8005418 <statemachine+0xdd0>)
 800531a:	2301      	movs	r3, #1
 800531c:	ca06      	ldmia	r2, {r1, r2}
 800531e:	4844      	ldr	r0, [pc, #272]	@ (8005430 <statemachine+0xde8>)
 8005320:	f7fe fdf8 	bl	8003f14 <ssd1306_WriteString>
				  if(BTN_B>=1){
 8005324:	4b45      	ldr	r3, [pc, #276]	@ (800543c <statemachine+0xdf4>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	f340 82c0 	ble.w	80058ae <statemachine+0x1266>
					  posstate++;
 800532e:	4b48      	ldr	r3, [pc, #288]	@ (8005450 <statemachine+0xe08>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	3301      	adds	r3, #1
 8005334:	b2da      	uxtb	r2, r3
 8005336:	4b46      	ldr	r3, [pc, #280]	@ (8005450 <statemachine+0xe08>)
 8005338:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 800533a:	4b40      	ldr	r3, [pc, #256]	@ (800543c <statemachine+0xdf4>)
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]
				  }



				  break;
 8005340:	e2b5      	b.n	80058ae <statemachine+0x1266>
			  case STATE_INFO:
				ssd1306_Fill(Black);
 8005342:	2000      	movs	r0, #0
 8005344:	f7fe fcca 	bl	8003cdc <ssd1306_Fill>
				nmea_parse(&myData, DataBuffer);
 8005348:	493f      	ldr	r1, [pc, #252]	@ (8005448 <statemachine+0xe00>)
 800534a:	4840      	ldr	r0, [pc, #256]	@ (800544c <statemachine+0xe04>)
 800534c:	f7fd ff5a 	bl	8003204 <nmea_parse>
				snprintf((char *)bufferscreen,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8005350:	4b3e      	ldr	r3, [pc, #248]	@ (800544c <statemachine+0xe04>)
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	4618      	mov	r0, r3
 8005356:	f7fb f8cf 	bl	80004f8 <__aeabi_f2d>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	e9cd 2300 	strd	r2, r3, [sp]
 8005362:	4a3f      	ldr	r2, [pc, #252]	@ (8005460 <statemachine+0xe18>)
 8005364:	210f      	movs	r1, #15
 8005366:	4832      	ldr	r0, [pc, #200]	@ (8005430 <statemachine+0xde8>)
 8005368:	f015 ff50 	bl	801b20c <sniprintf>
				ssd1306_SetCursor(32, 32);
 800536c:	2120      	movs	r1, #32
 800536e:	2020      	movs	r0, #32
 8005370:	f7fe fdf6 	bl	8003f60 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005374:	4a3b      	ldr	r2, [pc, #236]	@ (8005464 <statemachine+0xe1c>)
 8005376:	2301      	movs	r3, #1
 8005378:	ca06      	ldmia	r2, {r1, r2}
 800537a:	482d      	ldr	r0, [pc, #180]	@ (8005430 <statemachine+0xde8>)
 800537c:	f7fe fdca 	bl	8003f14 <ssd1306_WriteString>
				snprintf((char *)bufferscreen,20, "v=%0.2fV",vbat);
 8005380:	4b39      	ldr	r3, [pc, #228]	@ (8005468 <statemachine+0xe20>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f7fb f8b7 	bl	80004f8 <__aeabi_f2d>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	e9cd 2300 	strd	r2, r3, [sp]
 8005392:	4a36      	ldr	r2, [pc, #216]	@ (800546c <statemachine+0xe24>)
 8005394:	2114      	movs	r1, #20
 8005396:	4826      	ldr	r0, [pc, #152]	@ (8005430 <statemachine+0xde8>)
 8005398:	f015 ff38 	bl	801b20c <sniprintf>
				ssd1306_SetCursor(32, 42);
 800539c:	212a      	movs	r1, #42	@ 0x2a
 800539e:	2020      	movs	r0, #32
 80053a0:	f7fe fdde 	bl	8003f60 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80053a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005464 <statemachine+0xe1c>)
 80053a6:	2301      	movs	r3, #1
 80053a8:	ca06      	ldmia	r2, {r1, r2}
 80053aa:	4821      	ldr	r0, [pc, #132]	@ (8005430 <statemachine+0xde8>)
 80053ac:	f7fe fdb2 	bl	8003f14 <ssd1306_WriteString>
				ssd1306_SetCursor(32, 52);
 80053b0:	2134      	movs	r1, #52	@ 0x34
 80053b2:	2020      	movs	r0, #32
 80053b4:	f7fe fdd4 	bl	8003f60 <ssd1306_SetCursor>
				snprintf((char *)bufferscreen,15,  "T=%0.2fC",temp);
 80053b8:	4b2d      	ldr	r3, [pc, #180]	@ (8005470 <statemachine+0xe28>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fb f89b 	bl	80004f8 <__aeabi_f2d>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	e9cd 2300 	strd	r2, r3, [sp]
 80053ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005474 <statemachine+0xe2c>)
 80053cc:	210f      	movs	r1, #15
 80053ce:	4818      	ldr	r0, [pc, #96]	@ (8005430 <statemachine+0xde8>)
 80053d0:	f015 ff1c 	bl	801b20c <sniprintf>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80053d4:	4a23      	ldr	r2, [pc, #140]	@ (8005464 <statemachine+0xe1c>)
 80053d6:	2301      	movs	r3, #1
 80053d8:	ca06      	ldmia	r2, {r1, r2}
 80053da:	4815      	ldr	r0, [pc, #84]	@ (8005430 <statemachine+0xde8>)
 80053dc:	f7fe fd9a 	bl	8003f14 <ssd1306_WriteString>
				 if(BTN_B>=1){
 80053e0:	4b16      	ldr	r3, [pc, #88]	@ (800543c <statemachine+0xdf4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	dd08      	ble.n	80053fa <statemachine+0xdb2>
								  					  posstate++;
 80053e8:	4b19      	ldr	r3, [pc, #100]	@ (8005450 <statemachine+0xe08>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	3301      	adds	r3, #1
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	4b17      	ldr	r3, [pc, #92]	@ (8005450 <statemachine+0xe08>)
 80053f2:	701a      	strb	r2, [r3, #0]
								  					  BTN_B=0;
 80053f4:	4b11      	ldr	r3, [pc, #68]	@ (800543c <statemachine+0xdf4>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
								  				  }
								  if(BTN_B_LONG>=1){
 80053fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005478 <statemachine+0xe30>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f340 8257 	ble.w	80058b2 <statemachine+0x126a>
													  posstate--;
 8005404:	4b12      	ldr	r3, [pc, #72]	@ (8005450 <statemachine+0xe08>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	3b01      	subs	r3, #1
 800540a:	b2da      	uxtb	r2, r3
 800540c:	4b10      	ldr	r3, [pc, #64]	@ (8005450 <statemachine+0xe08>)
 800540e:	701a      	strb	r2, [r3, #0]
													BTN_B_LONG=0;
 8005410:	4b19      	ldr	r3, [pc, #100]	@ (8005478 <statemachine+0xe30>)
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
												}

				  break;
 8005416:	e24c      	b.n	80058b2 <statemachine+0x126a>
 8005418:	20000014 	.word	0x20000014
 800541c:	0801f9bc 	.word	0x0801f9bc
 8005420:	0801f9c4 	.word	0x0801f9c4
 8005424:	20000a9c 	.word	0x20000a9c
 8005428:	20000aa0 	.word	0x20000aa0
 800542c:	0801f9cc 	.word	0x0801f9cc
 8005430:	20000ac0 	.word	0x20000ac0
 8005434:	20000860 	.word	0x20000860
 8005438:	200005d4 	.word	0x200005d4
 800543c:	20000864 	.word	0x20000864
 8005440:	20000b80 	.word	0x20000b80
 8005444:	20000b98 	.word	0x20000b98
 8005448:	20000620 	.word	0x20000620
 800544c:	20000820 	.word	0x20000820
 8005450:	200005d6 	.word	0x200005d6
 8005454:	0801f9d4 	.word	0x0801f9d4
 8005458:	0801f9e0 	.word	0x0801f9e0
 800545c:	0801f9e8 	.word	0x0801f9e8
 8005460:	0801f9f4 	.word	0x0801f9f4
 8005464:	2000001c 	.word	0x2000001c
 8005468:	20000898 	.word	0x20000898
 800546c:	0801fa00 	.word	0x0801fa00
 8005470:	20000890 	.word	0x20000890
 8005474:	0801fa0c 	.word	0x0801fa0c
 8005478:	20000b94 	.word	0x20000b94
			  case STATE_LAT:
						ssd1306_SetCursor(32, 32);
 800547c:	2120      	movs	r1, #32
 800547e:	2020      	movs	r0, #32
 8005480:	f7fe fd6e 	bl	8003f60 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "LatSide:");
 8005484:	4aa0      	ldr	r2, [pc, #640]	@ (8005708 <statemachine+0x10c0>)
 8005486:	210f      	movs	r1, #15
 8005488:	48a0      	ldr	r0, [pc, #640]	@ (800570c <statemachine+0x10c4>)
 800548a:	f015 febf 	bl	801b20c <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800548e:	4aa0      	ldr	r2, [pc, #640]	@ (8005710 <statemachine+0x10c8>)
 8005490:	2301      	movs	r3, #1
 8005492:	ca06      	ldmia	r2, {r1, r2}
 8005494:	489d      	ldr	r0, [pc, #628]	@ (800570c <statemachine+0x10c4>)
 8005496:	f7fe fd3d 	bl	8003f14 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 800549a:	4b9e      	ldr	r3, [pc, #632]	@ (8005714 <statemachine+0x10cc>)
 800549c:	7a1b      	ldrb	r3, [r3, #8]
 800549e:	4a9e      	ldr	r2, [pc, #632]	@ (8005718 <statemachine+0x10d0>)
 80054a0:	210f      	movs	r1, #15
 80054a2:	489a      	ldr	r0, [pc, #616]	@ (800570c <statemachine+0x10c4>)
 80054a4:	f015 feb2 	bl	801b20c <sniprintf>
						ssd1306_SetCursor(32, 40);
 80054a8:	2128      	movs	r1, #40	@ 0x28
 80054aa:	2020      	movs	r0, #32
 80054ac:	f7fe fd58 	bl	8003f60 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80054b0:	4a97      	ldr	r2, [pc, #604]	@ (8005710 <statemachine+0x10c8>)
 80054b2:	2301      	movs	r3, #1
 80054b4:	ca06      	ldmia	r2, {r1, r2}
 80054b6:	4895      	ldr	r0, [pc, #596]	@ (800570c <statemachine+0x10c4>)
 80054b8:	f7fe fd2c 	bl	8003f14 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Latitude:");
 80054bc:	4a97      	ldr	r2, [pc, #604]	@ (800571c <statemachine+0x10d4>)
 80054be:	210f      	movs	r1, #15
 80054c0:	4892      	ldr	r0, [pc, #584]	@ (800570c <statemachine+0x10c4>)
 80054c2:	f015 fea3 	bl	801b20c <sniprintf>
						ssd1306_SetCursor(32, 48);
 80054c6:	2130      	movs	r1, #48	@ 0x30
 80054c8:	2020      	movs	r0, #32
 80054ca:	f7fe fd49 	bl	8003f60 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80054ce:	4a90      	ldr	r2, [pc, #576]	@ (8005710 <statemachine+0x10c8>)
 80054d0:	2301      	movs	r3, #1
 80054d2:	ca06      	ldmia	r2, {r1, r2}
 80054d4:	488d      	ldr	r0, [pc, #564]	@ (800570c <statemachine+0x10c4>)
 80054d6:	f7fe fd1d 	bl	8003f14 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);
 80054da:	4b8e      	ldr	r3, [pc, #568]	@ (8005714 <statemachine+0x10cc>)
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	e9cd 2300 	strd	r2, r3, [sp]
 80054e4:	4a8e      	ldr	r2, [pc, #568]	@ (8005720 <statemachine+0x10d8>)
 80054e6:	210f      	movs	r1, #15
 80054e8:	4888      	ldr	r0, [pc, #544]	@ (800570c <statemachine+0x10c4>)
 80054ea:	f015 fe8f 	bl	801b20c <sniprintf>
						ssd1306_SetCursor(32, 56);
 80054ee:	2138      	movs	r1, #56	@ 0x38
 80054f0:	2020      	movs	r0, #32
 80054f2:	f7fe fd35 	bl	8003f60 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80054f6:	4a86      	ldr	r2, [pc, #536]	@ (8005710 <statemachine+0x10c8>)
 80054f8:	2301      	movs	r3, #1
 80054fa:	ca06      	ldmia	r2, {r1, r2}
 80054fc:	4883      	ldr	r0, [pc, #524]	@ (800570c <statemachine+0x10c4>)
 80054fe:	f7fe fd09 	bl	8003f14 <ssd1306_WriteString>


				  if(BTN_B>=1){
 8005502:	4b88      	ldr	r3, [pc, #544]	@ (8005724 <statemachine+0x10dc>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	dd08      	ble.n	800551c <statemachine+0xed4>
				  					  posstate++;
 800550a:	4b87      	ldr	r3, [pc, #540]	@ (8005728 <statemachine+0x10e0>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	3301      	adds	r3, #1
 8005510:	b2da      	uxtb	r2, r3
 8005512:	4b85      	ldr	r3, [pc, #532]	@ (8005728 <statemachine+0x10e0>)
 8005514:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8005516:	4b83      	ldr	r3, [pc, #524]	@ (8005724 <statemachine+0x10dc>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 800551c:	4b83      	ldr	r3, [pc, #524]	@ (800572c <statemachine+0x10e4>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	f340 81c8 	ble.w	80058b6 <statemachine+0x126e>
									  posstate--;
 8005526:	4b80      	ldr	r3, [pc, #512]	@ (8005728 <statemachine+0x10e0>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	3b01      	subs	r3, #1
 800552c:	b2da      	uxtb	r2, r3
 800552e:	4b7e      	ldr	r3, [pc, #504]	@ (8005728 <statemachine+0x10e0>)
 8005530:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8005532:	4b7e      	ldr	r3, [pc, #504]	@ (800572c <statemachine+0x10e4>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
								}



				  break;
 8005538:	e1bd      	b.n	80058b6 <statemachine+0x126e>
			  case STATE_LONG:

					ssd1306_SetCursor(32, 32);
 800553a:	2120      	movs	r1, #32
 800553c:	2020      	movs	r0, #32
 800553e:	f7fe fd0f 	bl	8003f60 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "LonSide:");
 8005542:	4a7b      	ldr	r2, [pc, #492]	@ (8005730 <statemachine+0x10e8>)
 8005544:	210f      	movs	r1, #15
 8005546:	4871      	ldr	r0, [pc, #452]	@ (800570c <statemachine+0x10c4>)
 8005548:	f015 fe60 	bl	801b20c <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800554c:	4a70      	ldr	r2, [pc, #448]	@ (8005710 <statemachine+0x10c8>)
 800554e:	2301      	movs	r3, #1
 8005550:	ca06      	ldmia	r2, {r1, r2}
 8005552:	486e      	ldr	r0, [pc, #440]	@ (800570c <statemachine+0x10c4>)
 8005554:	f7fe fcde 	bl	8003f14 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005558:	4b6e      	ldr	r3, [pc, #440]	@ (8005714 <statemachine+0x10cc>)
 800555a:	7e1b      	ldrb	r3, [r3, #24]
 800555c:	4a6e      	ldr	r2, [pc, #440]	@ (8005718 <statemachine+0x10d0>)
 800555e:	210f      	movs	r1, #15
 8005560:	486a      	ldr	r0, [pc, #424]	@ (800570c <statemachine+0x10c4>)
 8005562:	f015 fe53 	bl	801b20c <sniprintf>
					ssd1306_SetCursor(32, 40);
 8005566:	2128      	movs	r1, #40	@ 0x28
 8005568:	2020      	movs	r0, #32
 800556a:	f7fe fcf9 	bl	8003f60 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800556e:	4a68      	ldr	r2, [pc, #416]	@ (8005710 <statemachine+0x10c8>)
 8005570:	2301      	movs	r3, #1
 8005572:	ca06      	ldmia	r2, {r1, r2}
 8005574:	4865      	ldr	r0, [pc, #404]	@ (800570c <statemachine+0x10c4>)
 8005576:	f7fe fccd 	bl	8003f14 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "Longitude:");
 800557a:	4a6e      	ldr	r2, [pc, #440]	@ (8005734 <statemachine+0x10ec>)
 800557c:	210f      	movs	r1, #15
 800557e:	4863      	ldr	r0, [pc, #396]	@ (800570c <statemachine+0x10c4>)
 8005580:	f015 fe44 	bl	801b20c <sniprintf>
					ssd1306_SetCursor(32, 48);
 8005584:	2130      	movs	r1, #48	@ 0x30
 8005586:	2020      	movs	r0, #32
 8005588:	f7fe fcea 	bl	8003f60 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800558c:	4a60      	ldr	r2, [pc, #384]	@ (8005710 <statemachine+0x10c8>)
 800558e:	2301      	movs	r3, #1
 8005590:	ca06      	ldmia	r2, {r1, r2}
 8005592:	485e      	ldr	r0, [pc, #376]	@ (800570c <statemachine+0x10c4>)
 8005594:	f7fe fcbe 	bl	8003f14 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 8005598:	4b5e      	ldr	r3, [pc, #376]	@ (8005714 <statemachine+0x10cc>)
 800559a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800559e:	e9cd 2300 	strd	r2, r3, [sp]
 80055a2:	4a5f      	ldr	r2, [pc, #380]	@ (8005720 <statemachine+0x10d8>)
 80055a4:	210f      	movs	r1, #15
 80055a6:	4859      	ldr	r0, [pc, #356]	@ (800570c <statemachine+0x10c4>)
 80055a8:	f015 fe30 	bl	801b20c <sniprintf>
					ssd1306_SetCursor(32, 56);
 80055ac:	2138      	movs	r1, #56	@ 0x38
 80055ae:	2020      	movs	r0, #32
 80055b0:	f7fe fcd6 	bl	8003f60 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80055b4:	4a56      	ldr	r2, [pc, #344]	@ (8005710 <statemachine+0x10c8>)
 80055b6:	2301      	movs	r3, #1
 80055b8:	ca06      	ldmia	r2, {r1, r2}
 80055ba:	4854      	ldr	r0, [pc, #336]	@ (800570c <statemachine+0x10c4>)
 80055bc:	f7fe fcaa 	bl	8003f14 <ssd1306_WriteString>

				  if(BTN_B>=1){
 80055c0:	4b58      	ldr	r3, [pc, #352]	@ (8005724 <statemachine+0x10dc>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	dd08      	ble.n	80055da <statemachine+0xf92>
				  					  posstate++;
 80055c8:	4b57      	ldr	r3, [pc, #348]	@ (8005728 <statemachine+0x10e0>)
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	3301      	adds	r3, #1
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	4b55      	ldr	r3, [pc, #340]	@ (8005728 <statemachine+0x10e0>)
 80055d2:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 80055d4:	4b53      	ldr	r3, [pc, #332]	@ (8005724 <statemachine+0x10dc>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80055da:	4b54      	ldr	r3, [pc, #336]	@ (800572c <statemachine+0x10e4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f340 816b 	ble.w	80058ba <statemachine+0x1272>
									  posstate--;
 80055e4:	4b50      	ldr	r3, [pc, #320]	@ (8005728 <statemachine+0x10e0>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	4b4e      	ldr	r3, [pc, #312]	@ (8005728 <statemachine+0x10e0>)
 80055ee:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 80055f0:	4b4e      	ldr	r3, [pc, #312]	@ (800572c <statemachine+0x10e4>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]
								}

				  break;
 80055f6:	e160      	b.n	80058ba <statemachine+0x1272>
			  case STATE_ALT:


				  						ssd1306_SetCursor(32, 32);
 80055f8:	2120      	movs	r1, #32
 80055fa:	2020      	movs	r0, #32
 80055fc:	f7fe fcb0 	bl	8003f60 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "altitude:");
 8005600:	4a4d      	ldr	r2, [pc, #308]	@ (8005738 <statemachine+0x10f0>)
 8005602:	210f      	movs	r1, #15
 8005604:	4841      	ldr	r0, [pc, #260]	@ (800570c <statemachine+0x10c4>)
 8005606:	f015 fe01 	bl	801b20c <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800560a:	4a41      	ldr	r2, [pc, #260]	@ (8005710 <statemachine+0x10c8>)
 800560c:	2301      	movs	r3, #1
 800560e:	ca06      	ldmia	r2, {r1, r2}
 8005610:	483e      	ldr	r0, [pc, #248]	@ (800570c <statemachine+0x10c4>)
 8005612:	f7fe fc7f 	bl	8003f14 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005616:	4b3f      	ldr	r3, [pc, #252]	@ (8005714 <statemachine+0x10cc>)
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	4618      	mov	r0, r3
 800561c:	f7fa ff6c 	bl	80004f8 <__aeabi_f2d>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	e9cd 2300 	strd	r2, r3, [sp]
 8005628:	4a44      	ldr	r2, [pc, #272]	@ (800573c <statemachine+0x10f4>)
 800562a:	210f      	movs	r1, #15
 800562c:	4837      	ldr	r0, [pc, #220]	@ (800570c <statemachine+0x10c4>)
 800562e:	f015 fded 	bl	801b20c <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8005632:	2128      	movs	r1, #40	@ 0x28
 8005634:	2020      	movs	r0, #32
 8005636:	f7fe fc93 	bl	8003f60 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800563a:	4a35      	ldr	r2, [pc, #212]	@ (8005710 <statemachine+0x10c8>)
 800563c:	2301      	movs	r3, #1
 800563e:	ca06      	ldmia	r2, {r1, r2}
 8005640:	4832      	ldr	r0, [pc, #200]	@ (800570c <statemachine+0x10c4>)
 8005642:	f7fe fc67 	bl	8003f14 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "Pressure:");
 8005646:	4a3e      	ldr	r2, [pc, #248]	@ (8005740 <statemachine+0x10f8>)
 8005648:	210f      	movs	r1, #15
 800564a:	4830      	ldr	r0, [pc, #192]	@ (800570c <statemachine+0x10c4>)
 800564c:	f015 fdde 	bl	801b20c <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8005650:	2130      	movs	r1, #48	@ 0x30
 8005652:	2020      	movs	r0, #32
 8005654:	f7fe fc84 	bl	8003f60 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005658:	4a2d      	ldr	r2, [pc, #180]	@ (8005710 <statemachine+0x10c8>)
 800565a:	2301      	movs	r3, #1
 800565c:	ca06      	ldmia	r2, {r1, r2}
 800565e:	482b      	ldr	r0, [pc, #172]	@ (800570c <statemachine+0x10c4>)
 8005660:	f7fe fc58 	bl	8003f14 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 8005664:	4b2b      	ldr	r3, [pc, #172]	@ (8005714 <statemachine+0x10cc>)
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	4618      	mov	r0, r3
 800566a:	f7fa ff45 	bl	80004f8 <__aeabi_f2d>
 800566e:	a324      	add	r3, pc, #144	@ (adr r3, 8005700 <statemachine+0x10b8>)
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f7fa ff98 	bl	80005a8 <__aeabi_dmul>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4610      	mov	r0, r2
 800567e:	4619      	mov	r1, r3
 8005680:	f7fb fa8a 	bl	8000b98 <__aeabi_d2f>
 8005684:	4603      	mov	r3, r0
 8005686:	ee00 3a10 	vmov	s0, r3
 800568a:	f018 fc15 	bl	801deb8 <expf>
 800568e:	eef0 7a40 	vmov.f32	s15, s0
 8005692:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8005744 <statemachine+0x10fc>
 8005696:	ee67 7a87 	vmul.f32	s15, s15, s14
 800569a:	ee17 0a90 	vmov	r0, s15
 800569e:	f7fa ff2b 	bl	80004f8 <__aeabi_f2d>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	e9cd 2300 	strd	r2, r3, [sp]
 80056aa:	4a27      	ldr	r2, [pc, #156]	@ (8005748 <statemachine+0x1100>)
 80056ac:	210f      	movs	r1, #15
 80056ae:	4817      	ldr	r0, [pc, #92]	@ (800570c <statemachine+0x10c4>)
 80056b0:	f015 fdac 	bl	801b20c <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80056b4:	2138      	movs	r1, #56	@ 0x38
 80056b6:	2020      	movs	r0, #32
 80056b8:	f7fe fc52 	bl	8003f60 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80056bc:	4a14      	ldr	r2, [pc, #80]	@ (8005710 <statemachine+0x10c8>)
 80056be:	2301      	movs	r3, #1
 80056c0:	ca06      	ldmia	r2, {r1, r2}
 80056c2:	4812      	ldr	r0, [pc, #72]	@ (800570c <statemachine+0x10c4>)
 80056c4:	f7fe fc26 	bl	8003f14 <ssd1306_WriteString>

				  if(BTN_B>=1){
 80056c8:	4b16      	ldr	r3, [pc, #88]	@ (8005724 <statemachine+0x10dc>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	dd08      	ble.n	80056e2 <statemachine+0x109a>
				  					posstate++;
 80056d0:	4b15      	ldr	r3, [pc, #84]	@ (8005728 <statemachine+0x10e0>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	4b13      	ldr	r3, [pc, #76]	@ (8005728 <statemachine+0x10e0>)
 80056da:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 80056dc:	4b11      	ldr	r3, [pc, #68]	@ (8005724 <statemachine+0x10dc>)
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80056e2:	4b12      	ldr	r3, [pc, #72]	@ (800572c <statemachine+0x10e4>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f340 80e9 	ble.w	80058be <statemachine+0x1276>
					  posstate--;
 80056ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005728 <statemachine+0x10e0>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005728 <statemachine+0x10e0>)
 80056f6:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 80056f8:	4b0c      	ldr	r3, [pc, #48]	@ (800572c <statemachine+0x10e4>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
				}
				  break;
 80056fe:	e0de      	b.n	80058be <statemachine+0x1276>
 8005700:	fb798882 	.word	0xfb798882
 8005704:	bf1e1818 	.word	0xbf1e1818
 8005708:	0801fa18 	.word	0x0801fa18
 800570c:	20000ac0 	.word	0x20000ac0
 8005710:	20000014 	.word	0x20000014
 8005714:	20000820 	.word	0x20000820
 8005718:	0801fa24 	.word	0x0801fa24
 800571c:	0801f9d4 	.word	0x0801f9d4
 8005720:	0801f9e0 	.word	0x0801f9e0
 8005724:	20000864 	.word	0x20000864
 8005728:	200005d6 	.word	0x200005d6
 800572c:	20000b94 	.word	0x20000b94
 8005730:	0801fa28 	.word	0x0801fa28
 8005734:	0801f9e8 	.word	0x0801f9e8
 8005738:	0801fa34 	.word	0x0801fa34
 800573c:	0801fa40 	.word	0x0801fa40
 8005740:	0801fa48 	.word	0x0801fa48
 8005744:	447a0000 	.word	0x447a0000
 8005748:	0801fa54 	.word	0x0801fa54
			  case STATE_HEURE:
			  			  ssd1306_Fill(Black);
 800574c:	2000      	movs	r0, #0
 800574e:	f7fe fac5 	bl	8003cdc <ssd1306_Fill>
			  			  nmea_parse(&myData, DataBuffer);
 8005752:	4999      	ldr	r1, [pc, #612]	@ (80059b8 <statemachine+0x1370>)
 8005754:	4899      	ldr	r0, [pc, #612]	@ (80059bc <statemachine+0x1374>)
 8005756:	f7fd fd55 	bl	8003204 <nmea_parse>
			  			  if(settimeen==0){
 800575a:	4b99      	ldr	r3, [pc, #612]	@ (80059c0 <statemachine+0x1378>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d141      	bne.n	80057e6 <statemachine+0x119e>

			  							settimeen=1;
 8005762:	4b97      	ldr	r3, [pc, #604]	@ (80059c0 <statemachine+0x1378>)
 8005764:	2201      	movs	r2, #1
 8005766:	601a      	str	r2, [r3, #0]
			  							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8005768:	4b94      	ldr	r3, [pc, #592]	@ (80059bc <statemachine+0x1374>)
 800576a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	b2db      	uxtb	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	0092      	lsls	r2, r2, #2
 8005778:	4413      	add	r3, r2
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	b2da      	uxtb	r2, r3
 800577e:	4b8f      	ldr	r3, [pc, #572]	@ (80059bc <statemachine+0x1374>)
 8005780:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	b2db      	uxtb	r3, r3
 800578a:	4413      	add	r3, r2
 800578c:	b2da      	uxtb	r2, r3
 800578e:	4b8d      	ldr	r3, [pc, #564]	@ (80059c4 <statemachine+0x137c>)
 8005790:	701a      	strb	r2, [r3, #0]
			  							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8005792:	4b8a      	ldr	r3, [pc, #552]	@ (80059bc <statemachine+0x1374>)
 8005794:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005798:	f003 030f 	and.w	r3, r3, #15
 800579c:	b2db      	uxtb	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	0092      	lsls	r2, r2, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	4b84      	ldr	r3, [pc, #528]	@ (80059bc <statemachine+0x1374>)
 80057aa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	4413      	add	r3, r2
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	4b83      	ldr	r3, [pc, #524]	@ (80059c8 <statemachine+0x1380>)
 80057ba:	701a      	strb	r2, [r3, #0]
			  							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 80057bc:	4b7f      	ldr	r3, [pc, #508]	@ (80059bc <statemachine+0x1374>)
 80057be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	461a      	mov	r2, r3
 80057ca:	0092      	lsls	r2, r2, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	4b7a      	ldr	r3, [pc, #488]	@ (80059bc <statemachine+0x1374>)
 80057d4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	4413      	add	r3, r2
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	4b7a      	ldr	r3, [pc, #488]	@ (80059cc <statemachine+0x1384>)
 80057e4:	701a      	strb	r2, [r3, #0]


			  					  }


			  				  ssd1306_SetCursor(32, 32);
 80057e6:	2120      	movs	r1, #32
 80057e8:	2020      	movs	r0, #32
 80057ea:	f7fe fbb9 	bl	8003f60 <ssd1306_SetCursor>
			  				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 80057ee:	4a78      	ldr	r2, [pc, #480]	@ (80059d0 <statemachine+0x1388>)
 80057f0:	2301      	movs	r3, #1
 80057f2:	ca06      	ldmia	r2, {r1, r2}
 80057f4:	4877      	ldr	r0, [pc, #476]	@ (80059d4 <statemachine+0x138c>)
 80057f6:	f7fe fb8d 	bl	8003f14 <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 42);
 80057fa:	212a      	movs	r1, #42	@ 0x2a
 80057fc:	2020      	movs	r0, #32
 80057fe:	f7fe fbaf 	bl	8003f60 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d:%02d",HR,MINUTE);
 8005802:	4b70      	ldr	r3, [pc, #448]	@ (80059c4 <statemachine+0x137c>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	4b6f      	ldr	r3, [pc, #444]	@ (80059c8 <statemachine+0x1380>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	4613      	mov	r3, r2
 8005810:	4a71      	ldr	r2, [pc, #452]	@ (80059d8 <statemachine+0x1390>)
 8005812:	210f      	movs	r1, #15
 8005814:	4871      	ldr	r0, [pc, #452]	@ (80059dc <statemachine+0x1394>)
 8005816:	f015 fcf9 	bl	801b20c <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 800581a:	4a71      	ldr	r2, [pc, #452]	@ (80059e0 <statemachine+0x1398>)
 800581c:	2301      	movs	r3, #1
 800581e:	ca06      	ldmia	r2, {r1, r2}
 8005820:	486e      	ldr	r0, [pc, #440]	@ (80059dc <statemachine+0x1394>)
 8005822:	f7fe fb77 	bl	8003f14 <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 52);
 8005826:	2134      	movs	r1, #52	@ 0x34
 8005828:	2020      	movs	r0, #32
 800582a:	f7fe fb99 	bl	8003f60 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d sec",SEC);
 800582e:	4b67      	ldr	r3, [pc, #412]	@ (80059cc <statemachine+0x1384>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	4a6c      	ldr	r2, [pc, #432]	@ (80059e4 <statemachine+0x139c>)
 8005834:	210f      	movs	r1, #15
 8005836:	4869      	ldr	r0, [pc, #420]	@ (80059dc <statemachine+0x1394>)
 8005838:	f015 fce8 	bl	801b20c <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 800583c:	4a68      	ldr	r2, [pc, #416]	@ (80059e0 <statemachine+0x1398>)
 800583e:	2301      	movs	r3, #1
 8005840:	ca06      	ldmia	r2, {r1, r2}
 8005842:	4866      	ldr	r0, [pc, #408]	@ (80059dc <statemachine+0x1394>)
 8005844:	f7fe fb66 	bl	8003f14 <ssd1306_WriteString>
			  				if(BTN_B>=1){
 8005848:	4b67      	ldr	r3, [pc, #412]	@ (80059e8 <statemachine+0x13a0>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	dd20      	ble.n	8005892 <statemachine+0x124a>
			  					posstate--;
 8005850:	4b66      	ldr	r3, [pc, #408]	@ (80059ec <statemachine+0x13a4>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	3b01      	subs	r3, #1
 8005856:	b2da      	uxtb	r2, r3
 8005858:	4b64      	ldr	r3, [pc, #400]	@ (80059ec <statemachine+0x13a4>)
 800585a:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 800585c:	4b63      	ldr	r3, [pc, #396]	@ (80059ec <statemachine+0x13a4>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	3b01      	subs	r3, #1
 8005862:	b2da      	uxtb	r2, r3
 8005864:	4b61      	ldr	r3, [pc, #388]	@ (80059ec <statemachine+0x13a4>)
 8005866:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005868:	4b60      	ldr	r3, [pc, #384]	@ (80059ec <statemachine+0x13a4>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	3b01      	subs	r3, #1
 800586e:	b2da      	uxtb	r2, r3
 8005870:	4b5e      	ldr	r3, [pc, #376]	@ (80059ec <statemachine+0x13a4>)
 8005872:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005874:	4b5d      	ldr	r3, [pc, #372]	@ (80059ec <statemachine+0x13a4>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	3b01      	subs	r3, #1
 800587a:	b2da      	uxtb	r2, r3
 800587c:	4b5b      	ldr	r3, [pc, #364]	@ (80059ec <statemachine+0x13a4>)
 800587e:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005880:	4b5a      	ldr	r3, [pc, #360]	@ (80059ec <statemachine+0x13a4>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	3b01      	subs	r3, #1
 8005886:	b2da      	uxtb	r2, r3
 8005888:	4b58      	ldr	r3, [pc, #352]	@ (80059ec <statemachine+0x13a4>)
 800588a:	701a      	strb	r2, [r3, #0]
			  					BTN_B=0;
 800588c:	4b56      	ldr	r3, [pc, #344]	@ (80059e8 <statemachine+0x13a0>)
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
			  				}
			  				if(BTN_B_LONG>=1){
 8005892:	4b57      	ldr	r3, [pc, #348]	@ (80059f0 <statemachine+0x13a8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	dd13      	ble.n	80058c2 <statemachine+0x127a>
			  							  					posstate--;
 800589a:	4b54      	ldr	r3, [pc, #336]	@ (80059ec <statemachine+0x13a4>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	3b01      	subs	r3, #1
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	4b52      	ldr	r3, [pc, #328]	@ (80059ec <statemachine+0x13a4>)
 80058a4:	701a      	strb	r2, [r3, #0]
			  							  					BTN_B_LONG=0;
 80058a6:	4b52      	ldr	r3, [pc, #328]	@ (80059f0 <statemachine+0x13a8>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]
			  							  				}
			  			break;
 80058ac:	e009      	b.n	80058c2 <statemachine+0x127a>
				  break;
 80058ae:	bf00      	nop
 80058b0:	e008      	b.n	80058c4 <statemachine+0x127c>
				  break;
 80058b2:	bf00      	nop
 80058b4:	e006      	b.n	80058c4 <statemachine+0x127c>
				  break;
 80058b6:	bf00      	nop
 80058b8:	e004      	b.n	80058c4 <statemachine+0x127c>
				  break;
 80058ba:	bf00      	nop
 80058bc:	e002      	b.n	80058c4 <statemachine+0x127c>
				  break;
 80058be:	bf00      	nop
 80058c0:	e000      	b.n	80058c4 <statemachine+0x127c>
			  			break;
 80058c2:	bf00      	nop
			  }

					if(BTN_A>=1){
 80058c4:	4b4b      	ldr	r3, [pc, #300]	@ (80059f4 <statemachine+0x13ac>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	dd0b      	ble.n	80058e4 <statemachine+0x129c>
							state++;
 80058cc:	4b4a      	ldr	r3, [pc, #296]	@ (80059f8 <statemachine+0x13b0>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	3301      	adds	r3, #1
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	4b48      	ldr	r3, [pc, #288]	@ (80059f8 <statemachine+0x13b0>)
 80058d6:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 80058d8:	4b46      	ldr	r3, [pc, #280]	@ (80059f4 <statemachine+0x13ac>)
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 80058de:	4b42      	ldr	r3, [pc, #264]	@ (80059e8 <statemachine+0x13a0>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]


						}
					if(BTN_A_LONG>=1){
 80058e4:	4b45      	ldr	r3, [pc, #276]	@ (80059fc <statemachine+0x13b4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f340 8449 	ble.w	8006180 <statemachine+0x1b38>
									 									 									  			 	state--;
 80058ee:	4b42      	ldr	r3, [pc, #264]	@ (80059f8 <statemachine+0x13b0>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	4b40      	ldr	r3, [pc, #256]	@ (80059f8 <statemachine+0x13b0>)
 80058f8:	701a      	strb	r2, [r3, #0]
									 									 									  			 	BTN_A=0;
 80058fa:	4b3e      	ldr	r3, [pc, #248]	@ (80059f4 <statemachine+0x13ac>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_B=0;
 8005900:	4b39      	ldr	r3, [pc, #228]	@ (80059e8 <statemachine+0x13a0>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_A_LONG=0;
 8005906:	4b3d      	ldr	r3, [pc, #244]	@ (80059fc <statemachine+0x13b4>)
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]
									 									 									  	}
			  break;
 800590c:	f000 bc38 	b.w	8006180 <statemachine+0x1b38>
		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8005910:	2000      	movs	r0, #0
 8005912:	f7fe f9e3 	bl	8003cdc <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 8005916:	2120      	movs	r1, #32
 8005918:	2020      	movs	r0, #32
 800591a:	f7fe fb21 	bl	8003f60 <ssd1306_SetCursor>
			  ssd1306_WriteString("chrono", Font_6x8, White);
 800591e:	4a2c      	ldr	r2, [pc, #176]	@ (80059d0 <statemachine+0x1388>)
 8005920:	2301      	movs	r3, #1
 8005922:	ca06      	ldmia	r2, {r1, r2}
 8005924:	4836      	ldr	r0, [pc, #216]	@ (8005a00 <statemachine+0x13b8>)
 8005926:	f7fe faf5 	bl	8003f14 <ssd1306_WriteString>
			  ssd1306_SetCursor(32,40);
 800592a:	2128      	movs	r1, #40	@ 0x28
 800592c:	2020      	movs	r0, #32
 800592e:	f7fe fb17 	bl	8003f60 <ssd1306_SetCursor>

			  switch(chronostate){
 8005932:	4b34      	ldr	r3, [pc, #208]	@ (8005a04 <statemachine+0x13bc>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b02      	cmp	r3, #2
 8005938:	d072      	beq.n	8005a20 <statemachine+0x13d8>
 800593a:	2b02      	cmp	r3, #2
 800593c:	f300 80a1 	bgt.w	8005a82 <statemachine+0x143a>
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <statemachine+0x1302>
 8005944:	2b01      	cmp	r3, #1
 8005946:	d01e      	beq.n	8005986 <statemachine+0x133e>
 8005948:	e09b      	b.n	8005a82 <statemachine+0x143a>
			  case STATE_RESET:
				  min=0;
 800594a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a08 <statemachine+0x13c0>)
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8005952:	4b2e      	ldr	r3, [pc, #184]	@ (8005a0c <statemachine+0x13c4>)
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
				  calctime=0;
 800595a:	4b2d      	ldr	r3, [pc, #180]	@ (8005a10 <statemachine+0x13c8>)
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]

				  	 if(BTN_B>=1){
 8005960:	4b21      	ldr	r3, [pc, #132]	@ (80059e8 <statemachine+0x13a0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	f340 8087 	ble.w	8005a78 <statemachine+0x1430>
				  		chronostate++;
 800596a:	4b26      	ldr	r3, [pc, #152]	@ (8005a04 <statemachine+0x13bc>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	3301      	adds	r3, #1
 8005970:	b2da      	uxtb	r2, r3
 8005972:	4b24      	ldr	r3, [pc, #144]	@ (8005a04 <statemachine+0x13bc>)
 8005974:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005976:	4b1c      	ldr	r3, [pc, #112]	@ (80059e8 <statemachine+0x13a0>)
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 800597c:	4b25      	ldr	r3, [pc, #148]	@ (8005a14 <statemachine+0x13cc>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a25      	ldr	r2, [pc, #148]	@ (8005a18 <statemachine+0x13d0>)
 8005982:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8005984:	e078      	b.n	8005a78 <statemachine+0x1430>
			  case STATE_RUN:
				  calctime=uwTick-starttime+timehandler;
 8005986:	4b23      	ldr	r3, [pc, #140]	@ (8005a14 <statemachine+0x13cc>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	4b23      	ldr	r3, [pc, #140]	@ (8005a18 <statemachine+0x13d0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	1ad2      	subs	r2, r2, r3
 8005990:	4b22      	ldr	r3, [pc, #136]	@ (8005a1c <statemachine+0x13d4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4413      	add	r3, r2
 8005996:	4a1e      	ldr	r2, [pc, #120]	@ (8005a10 <statemachine+0x13c8>)
 8005998:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 800599a:	4b13      	ldr	r3, [pc, #76]	@ (80059e8 <statemachine+0x13a0>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	dd6c      	ble.n	8005a7c <statemachine+0x1434>
				  		chronostate++;
 80059a2:	4b18      	ldr	r3, [pc, #96]	@ (8005a04 <statemachine+0x13bc>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	3301      	adds	r3, #1
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	4b16      	ldr	r3, [pc, #88]	@ (8005a04 <statemachine+0x13bc>)
 80059ac:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 80059ae:	4b0e      	ldr	r3, [pc, #56]	@ (80059e8 <statemachine+0x13a0>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]
			  }


				  break;
 80059b4:	e062      	b.n	8005a7c <statemachine+0x1434>
 80059b6:	bf00      	nop
 80059b8:	20000620 	.word	0x20000620
 80059bc:	20000820 	.word	0x20000820
 80059c0:	20000b80 	.word	0x20000b80
 80059c4:	20000b7d 	.word	0x20000b7d
 80059c8:	20000b7e 	.word	0x20000b7e
 80059cc:	20000b7c 	.word	0x20000b7c
 80059d0:	20000014 	.word	0x20000014
 80059d4:	0801fa60 	.word	0x0801fa60
 80059d8:	0801fa68 	.word	0x0801fa68
 80059dc:	20000ac0 	.word	0x20000ac0
 80059e0:	2000001c 	.word	0x2000001c
 80059e4:	0801fa74 	.word	0x0801fa74
 80059e8:	20000864 	.word	0x20000864
 80059ec:	200005d6 	.word	0x200005d6
 80059f0:	20000b94 	.word	0x20000b94
 80059f4:	20000860 	.word	0x20000860
 80059f8:	200005d4 	.word	0x200005d4
 80059fc:	20000b98 	.word	0x20000b98
 8005a00:	0801fa80 	.word	0x0801fa80
 8005a04:	200005d7 	.word	0x200005d7
 8005a08:	20000b3c 	.word	0x20000b3c
 8005a0c:	20000b38 	.word	0x20000b38
 8005a10:	20000b44 	.word	0x20000b44
 8005a14:	20001458 	.word	0x20001458
 8005a18:	20000b40 	.word	0x20000b40
 8005a1c:	20000b48 	.word	0x20000b48
			  case STATE_PAUSE:
				  timehandler=calctime;
 8005a20:	4b88      	ldr	r3, [pc, #544]	@ (8005c44 <statemachine+0x15fc>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a88      	ldr	r2, [pc, #544]	@ (8005c48 <statemachine+0x1600>)
 8005a26:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8005a28:	4b88      	ldr	r3, [pc, #544]	@ (8005c4c <statemachine+0x1604>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	dd0c      	ble.n	8005a4a <statemachine+0x1402>
				  			chronostate--;
 8005a30:	4b87      	ldr	r3, [pc, #540]	@ (8005c50 <statemachine+0x1608>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	4b85      	ldr	r3, [pc, #532]	@ (8005c50 <statemachine+0x1608>)
 8005a3a:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8005a3c:	4b83      	ldr	r3, [pc, #524]	@ (8005c4c <statemachine+0x1604>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
				  			starttime=uwTick;
 8005a42:	4b84      	ldr	r3, [pc, #528]	@ (8005c54 <statemachine+0x160c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a84      	ldr	r2, [pc, #528]	@ (8005c58 <statemachine+0x1610>)
 8005a48:	6013      	str	r3, [r2, #0]

			 }
				  if(BTN_B_LONG>=1){
 8005a4a:	4b84      	ldr	r3, [pc, #528]	@ (8005c5c <statemachine+0x1614>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	dd16      	ble.n	8005a80 <statemachine+0x1438>
				  				  	chronostate--;
 8005a52:	4b7f      	ldr	r3, [pc, #508]	@ (8005c50 <statemachine+0x1608>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	4b7d      	ldr	r3, [pc, #500]	@ (8005c50 <statemachine+0x1608>)
 8005a5c:	701a      	strb	r2, [r3, #0]
				  				  	chronostate--;
 8005a5e:	4b7c      	ldr	r3, [pc, #496]	@ (8005c50 <statemachine+0x1608>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	4b7a      	ldr	r3, [pc, #488]	@ (8005c50 <statemachine+0x1608>)
 8005a68:	701a      	strb	r2, [r3, #0]
				  				  	BTN_B_LONG=0;
 8005a6a:	4b7c      	ldr	r3, [pc, #496]	@ (8005c5c <statemachine+0x1614>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
				  				  	timehandler=0;
 8005a70:	4b75      	ldr	r3, [pc, #468]	@ (8005c48 <statemachine+0x1600>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
				  			 }


				  break;
 8005a76:	e003      	b.n	8005a80 <statemachine+0x1438>
				  break;
 8005a78:	bf00      	nop
 8005a7a:	e002      	b.n	8005a82 <statemachine+0x143a>
				  break;
 8005a7c:	bf00      	nop
 8005a7e:	e000      	b.n	8005a82 <statemachine+0x143a>
				  break;
 8005a80:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8005a82:	4b70      	ldr	r3, [pc, #448]	@ (8005c44 <statemachine+0x15fc>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	ee07 3a90 	vmov	s15, r3
 8005a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8e:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8005c60 <statemachine+0x1618>
 8005a92:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005a96:	ee16 0a90 	vmov	r0, s13
 8005a9a:	f7fa fd2d 	bl	80004f8 <__aeabi_f2d>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	ec43 2b10 	vmov	d0, r2, r3
 8005aa6:	f018 faa3 	bl	801dff0 <floor>
 8005aaa:	ec53 2b10 	vmov	r2, r3, d0
 8005aae:	4610      	mov	r0, r2
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f7fb f871 	bl	8000b98 <__aeabi_d2f>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4a6a      	ldr	r2, [pc, #424]	@ (8005c64 <statemachine+0x161c>)
 8005aba:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8005abc:	4b61      	ldr	r3, [pc, #388]	@ (8005c44 <statemachine+0x15fc>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	ee07 3a90 	vmov	s15, r3
 8005ac4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ac8:	4b66      	ldr	r3, [pc, #408]	@ (8005c64 <statemachine+0x161c>)
 8005aca:	edd3 7a00 	vldr	s15, [r3]
 8005ace:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8005c60 <statemachine+0x1618>
 8005ad2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005ad6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ada:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8005c68 <statemachine+0x1620>
 8005ade:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ae2:	4b62      	ldr	r3, [pc, #392]	@ (8005c6c <statemachine+0x1624>)
 8005ae4:	edc3 7a00 	vstr	s15, [r3]
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 8005ae8:	4b5e      	ldr	r3, [pc, #376]	@ (8005c64 <statemachine+0x161c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fa fd03 	bl	80004f8 <__aeabi_f2d>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	e9cd 2300 	strd	r2, r3, [sp]
 8005afa:	4a5d      	ldr	r2, [pc, #372]	@ (8005c70 <statemachine+0x1628>)
 8005afc:	210f      	movs	r1, #15
 8005afe:	485d      	ldr	r0, [pc, #372]	@ (8005c74 <statemachine+0x162c>)
 8005b00:	f015 fb84 	bl	801b20c <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005b04:	4a5c      	ldr	r2, [pc, #368]	@ (8005c78 <statemachine+0x1630>)
 8005b06:	2301      	movs	r3, #1
 8005b08:	ca06      	ldmia	r2, {r1, r2}
 8005b0a:	485a      	ldr	r0, [pc, #360]	@ (8005c74 <statemachine+0x162c>)
 8005b0c:	f7fe fa02 	bl	8003f14 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8005b10:	2132      	movs	r1, #50	@ 0x32
 8005b12:	2020      	movs	r0, #32
 8005b14:	f7fe fa24 	bl	8003f60 <ssd1306_SetCursor>
			  snprintf((char *)bufferscreen,15, "%0.3fs",seconde);
 8005b18:	4b54      	ldr	r3, [pc, #336]	@ (8005c6c <statemachine+0x1624>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fa fceb 	bl	80004f8 <__aeabi_f2d>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	e9cd 2300 	strd	r2, r3, [sp]
 8005b2a:	4a54      	ldr	r2, [pc, #336]	@ (8005c7c <statemachine+0x1634>)
 8005b2c:	210f      	movs	r1, #15
 8005b2e:	4851      	ldr	r0, [pc, #324]	@ (8005c74 <statemachine+0x162c>)
 8005b30:	f015 fb6c 	bl	801b20c <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005b34:	4a50      	ldr	r2, [pc, #320]	@ (8005c78 <statemachine+0x1630>)
 8005b36:	2301      	movs	r3, #1
 8005b38:	ca06      	ldmia	r2, {r1, r2}
 8005b3a:	484e      	ldr	r0, [pc, #312]	@ (8005c74 <statemachine+0x162c>)
 8005b3c:	f7fe f9ea 	bl	8003f14 <ssd1306_WriteString>


			  if(BTN_A>=1){
 8005b40:	4b4f      	ldr	r3, [pc, #316]	@ (8005c80 <statemachine+0x1638>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	dd0b      	ble.n	8005b60 <statemachine+0x1518>
			 	state++;
 8005b48:	4b4e      	ldr	r3, [pc, #312]	@ (8005c84 <statemachine+0x163c>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	4b4c      	ldr	r3, [pc, #304]	@ (8005c84 <statemachine+0x163c>)
 8005b52:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8005b54:	4b4a      	ldr	r3, [pc, #296]	@ (8005c80 <statemachine+0x1638>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8005b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8005c4c <statemachine+0x1604>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]


	}
			  if(BTN_A_LONG>=1){
 8005b60:	4b49      	ldr	r3, [pc, #292]	@ (8005c88 <statemachine+0x1640>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f340 830d 	ble.w	8006184 <statemachine+0x1b3c>
			  				 									 									  			 	state--;
 8005b6a:	4b46      	ldr	r3, [pc, #280]	@ (8005c84 <statemachine+0x163c>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	4b44      	ldr	r3, [pc, #272]	@ (8005c84 <statemachine+0x163c>)
 8005b74:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8005b76:	4b42      	ldr	r3, [pc, #264]	@ (8005c80 <statemachine+0x1638>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8005b7c:	4b33      	ldr	r3, [pc, #204]	@ (8005c4c <statemachine+0x1604>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8005b82:	4b41      	ldr	r3, [pc, #260]	@ (8005c88 <statemachine+0x1640>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8005b88:	e2fc      	b.n	8006184 <statemachine+0x1b3c>




			  case STATE_USB:
				  ssd1306_Fill(Black);
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	f7fe f8a6 	bl	8003cdc <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 8005b90:	2120      	movs	r1, #32
 8005b92:	2020      	movs	r0, #32
 8005b94:	f7fe f9e4 	bl	8003f60 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8005b98:	4a3c      	ldr	r2, [pc, #240]	@ (8005c8c <statemachine+0x1644>)
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	ca06      	ldmia	r2, {r1, r2}
 8005b9e:	483c      	ldr	r0, [pc, #240]	@ (8005c90 <statemachine+0x1648>)
 8005ba0:	f7fe f9b8 	bl	8003f14 <ssd1306_WriteString>
				  switch(usbstate){
 8005ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8005c94 <statemachine+0x164c>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	f000 815a 	beq.w	8005e62 <statemachine+0x181a>
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	f300 82ea 	bgt.w	8006188 <statemachine+0x1b40>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <statemachine+0x1576>
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d071      	beq.n	8005ca0 <statemachine+0x1658>
				 									 									  			 	BTN_B=0;
				 									 									  			 	BTN_A_LONG=0;
				 									 									  	}
				 					 break;
				 				  }
				  break;
 8005bbc:	e2e4      	b.n	8006188 <statemachine+0x1b40>
				 					  ssd1306_SetCursor(32,40);
 8005bbe:	2128      	movs	r1, #40	@ 0x28
 8005bc0:	2020      	movs	r0, #32
 8005bc2:	f7fe f9cd 	bl	8003f60 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8005bc6:	4a31      	ldr	r2, [pc, #196]	@ (8005c8c <statemachine+0x1644>)
 8005bc8:	2301      	movs	r3, #1
 8005bca:	ca06      	ldmia	r2, {r1, r2}
 8005bcc:	4832      	ldr	r0, [pc, #200]	@ (8005c98 <statemachine+0x1650>)
 8005bce:	f7fe f9a1 	bl	8003f14 <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8005bd2:	4b32      	ldr	r3, [pc, #200]	@ (8005c9c <statemachine+0x1654>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 8005bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8005c4c <statemachine+0x1604>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	dd0b      	ble.n	8005bf8 <statemachine+0x15b0>
				 						  usbstate++;
 8005be0:	4b2c      	ldr	r3, [pc, #176]	@ (8005c94 <statemachine+0x164c>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	3301      	adds	r3, #1
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	4b2a      	ldr	r3, [pc, #168]	@ (8005c94 <statemachine+0x164c>)
 8005bea:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 8005bec:	4b17      	ldr	r3, [pc, #92]	@ (8005c4c <statemachine+0x1604>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 8005bf2:	4b23      	ldr	r3, [pc, #140]	@ (8005c80 <statemachine+0x1638>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8005bf8:	4b21      	ldr	r3, [pc, #132]	@ (8005c80 <statemachine+0x1638>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	dd0b      	ble.n	8005c18 <statemachine+0x15d0>
				 						 state++;
 8005c00:	4b20      	ldr	r3, [pc, #128]	@ (8005c84 <statemachine+0x163c>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	3301      	adds	r3, #1
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	4b1e      	ldr	r3, [pc, #120]	@ (8005c84 <statemachine+0x163c>)
 8005c0a:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8005c80 <statemachine+0x1638>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005c12:	4b0e      	ldr	r3, [pc, #56]	@ (8005c4c <statemachine+0x1604>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8005c18:	4b1b      	ldr	r3, [pc, #108]	@ (8005c88 <statemachine+0x1640>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f340 8234 	ble.w	800608a <statemachine+0x1a42>
				 									 									 									  			 	state--;
 8005c22:	4b18      	ldr	r3, [pc, #96]	@ (8005c84 <statemachine+0x163c>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	4b16      	ldr	r3, [pc, #88]	@ (8005c84 <statemachine+0x163c>)
 8005c2c:	701a      	strb	r2, [r3, #0]
				 									 									 									  			 	BTN_A=0;
 8005c2e:	4b14      	ldr	r3, [pc, #80]	@ (8005c80 <statemachine+0x1638>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_B=0;
 8005c34:	4b05      	ldr	r3, [pc, #20]	@ (8005c4c <statemachine+0x1604>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_A_LONG=0;
 8005c3a:	4b13      	ldr	r3, [pc, #76]	@ (8005c88 <statemachine+0x1640>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]
				 					  break;
 8005c40:	e223      	b.n	800608a <statemachine+0x1a42>
 8005c42:	bf00      	nop
 8005c44:	20000b44 	.word	0x20000b44
 8005c48:	20000b48 	.word	0x20000b48
 8005c4c:	20000864 	.word	0x20000864
 8005c50:	200005d7 	.word	0x200005d7
 8005c54:	20001458 	.word	0x20001458
 8005c58:	20000b40 	.word	0x20000b40
 8005c5c:	20000b94 	.word	0x20000b94
 8005c60:	476a6000 	.word	0x476a6000
 8005c64:	20000b3c 	.word	0x20000b3c
 8005c68:	447a0000 	.word	0x447a0000
 8005c6c:	20000b38 	.word	0x20000b38
 8005c70:	0801fa88 	.word	0x0801fa88
 8005c74:	20000ac0 	.word	0x20000ac0
 8005c78:	2000001c 	.word	0x2000001c
 8005c7c:	0801fa94 	.word	0x0801fa94
 8005c80:	20000860 	.word	0x20000860
 8005c84:	200005d4 	.word	0x200005d4
 8005c88:	20000b98 	.word	0x20000b98
 8005c8c:	20000014 	.word	0x20000014
 8005c90:	0801fa9c 	.word	0x0801fa9c
 8005c94:	200005d8 	.word	0x200005d8
 8005c98:	0801faa0 	.word	0x0801faa0
 8005c9c:	20000b58 	.word	0x20000b58
				 					 ssd1306_SetCursor(32,40);
 8005ca0:	2128      	movs	r1, #40	@ 0x28
 8005ca2:	2020      	movs	r0, #32
 8005ca4:	f7fe f95c 	bl	8003f60 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8005ca8:	4ab6      	ldr	r2, [pc, #728]	@ (8005f84 <statemachine+0x193c>)
 8005caa:	2301      	movs	r3, #1
 8005cac:	ca06      	ldmia	r2, {r1, r2}
 8005cae:	48b6      	ldr	r0, [pc, #728]	@ (8005f88 <statemachine+0x1940>)
 8005cb0:	f7fe f930 	bl	8003f14 <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,48);
 8005cb4:	2130      	movs	r1, #48	@ 0x30
 8005cb6:	2020      	movs	r0, #32
 8005cb8:	f7fe f952 	bl	8003f60 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8005cbc:	4ab1      	ldr	r2, [pc, #708]	@ (8005f84 <statemachine+0x193c>)
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	ca06      	ldmia	r2, {r1, r2}
 8005cc2:	48b2      	ldr	r0, [pc, #712]	@ (8005f8c <statemachine+0x1944>)
 8005cc4:	f7fe f926 	bl	8003f14 <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8005cc8:	4bb1      	ldr	r3, [pc, #708]	@ (8005f90 <statemachine+0x1948>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d137      	bne.n	8005d40 <statemachine+0x16f8>
					 					 ssd1306_Fill(Black);
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	f7fe f803 	bl	8003cdc <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,32);
 8005cd6:	2120      	movs	r1, #32
 8005cd8:	2020      	movs	r0, #32
 8005cda:	f7fe f941 	bl	8003f60 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 8005cde:	4aa9      	ldr	r2, [pc, #676]	@ (8005f84 <statemachine+0x193c>)
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	ca06      	ldmia	r2, {r1, r2}
 8005ce4:	48ab      	ldr	r0, [pc, #684]	@ (8005f94 <statemachine+0x194c>)
 8005ce6:	f7fe f915 	bl	8003f14 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,42);
 8005cea:	212a      	movs	r1, #42	@ 0x2a
 8005cec:	2020      	movs	r0, #32
 8005cee:	f7fe f937 	bl	8003f60 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 8005cf2:	4aa9      	ldr	r2, [pc, #676]	@ (8005f98 <statemachine+0x1950>)
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	ca06      	ldmia	r2, {r1, r2}
 8005cf8:	48a8      	ldr	r0, [pc, #672]	@ (8005f9c <statemachine+0x1954>)
 8005cfa:	f7fe f90b 	bl	8003f14 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,56);
 8005cfe:	2138      	movs	r1, #56	@ 0x38
 8005d00:	2020      	movs	r0, #32
 8005d02:	f7fe f92d 	bl	8003f60 <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 8005d06:	4ba6      	ldr	r3, [pc, #664]	@ (8005fa0 <statemachine+0x1958>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d12:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8005fa4 <statemachine+0x195c>
 8005d16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d1a:	ee16 0a90 	vmov	r0, s13
 8005d1e:	f7fa fbeb 	bl	80004f8 <__aeabi_f2d>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	e9cd 2300 	strd	r2, r3, [sp]
 8005d2a:	4a9f      	ldr	r2, [pc, #636]	@ (8005fa8 <statemachine+0x1960>)
 8005d2c:	2132      	movs	r1, #50	@ 0x32
 8005d2e:	489f      	ldr	r0, [pc, #636]	@ (8005fac <statemachine+0x1964>)
 8005d30:	f015 fa6c 	bl	801b20c <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005d34:	4a93      	ldr	r2, [pc, #588]	@ (8005f84 <statemachine+0x193c>)
 8005d36:	2301      	movs	r3, #1
 8005d38:	ca06      	ldmia	r2, {r1, r2}
 8005d3a:	489c      	ldr	r0, [pc, #624]	@ (8005fac <statemachine+0x1964>)
 8005d3c:	f7fe f8ea 	bl	8003f14 <ssd1306_WriteString>
				 					if(BTN_A>=1){
 8005d40:	4b9b      	ldr	r3, [pc, #620]	@ (8005fb0 <statemachine+0x1968>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	dd7a      	ble.n	8005e3e <statemachine+0x17f6>
				 						erasetime=HAL_GetTick();
 8005d48:	f001 fa30 	bl	80071ac <HAL_GetTick>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4b93      	ldr	r3, [pc, #588]	@ (8005fa0 <statemachine+0x1958>)
 8005d52:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	e03f      	b.n	8005dda <statemachine+0x1792>
				 							ssd1306_Fill(Black);
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	f7fd ffbe 	bl	8003cdc <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8005d60:	2120      	movs	r1, #32
 8005d62:	2020      	movs	r0, #32
 8005d64:	f7fe f8fc 	bl	8003f60 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 8005d68:	4a86      	ldr	r2, [pc, #536]	@ (8005f84 <statemachine+0x193c>)
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	ca06      	ldmia	r2, {r1, r2}
 8005d6e:	4889      	ldr	r0, [pc, #548]	@ (8005f94 <statemachine+0x194c>)
 8005d70:	f7fe f8d0 	bl	8003f14 <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4619      	mov	r1, r3
 8005d78:	488e      	ldr	r0, [pc, #568]	@ (8005fb4 <statemachine+0x196c>)
 8005d7a:	f011 fc0e 	bl	801759a <SPIF_EraseSector>
				 							if(i>=1){
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	dd21      	ble.n	8005dc8 <statemachine+0x1780>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2264      	movs	r2, #100	@ 0x64
 8005d88:	fb02 f303 	mul.w	r3, r2, r3
 8005d8c:	ee07 3a90 	vmov	s15, r3
 8005d90:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005d94:	4b88      	ldr	r3, [pc, #544]	@ (8005fb8 <statemachine+0x1970>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	da00      	bge.n	8005d9e <statemachine+0x1756>
 8005d9c:	330f      	adds	r3, #15
 8005d9e:	111b      	asrs	r3, r3, #4
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fa fb97 	bl	80004d4 <__aeabi_i2d>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4610      	mov	r0, r2
 8005dac:	4619      	mov	r1, r3
 8005dae:	f7fa feab 	bl	8000b08 <__aeabi_d2iz>
 8005db2:	ee07 0a90 	vmov	s15, r0
 8005db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dba:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8005dbe:	eeb0 0a47 	vmov.f32	s0, s14
 8005dc2:	f7fe fbe1 	bl	8004588 <percentage>
 8005dc6:	e003      	b.n	8005dd0 <statemachine+0x1788>
				 								percentage((float) 0);
 8005dc8:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 8005fbc <statemachine+0x1974>
 8005dcc:	f7fe fbdc 	bl	8004588 <percentage>
				 							ssd1306_UpdateScreen();
 8005dd0:	f7fd ff9c 	bl	8003d0c <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	4b77      	ldr	r3, [pc, #476]	@ (8005fb8 <statemachine+0x1970>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	da00      	bge.n	8005de4 <statemachine+0x179c>
 8005de2:	330f      	adds	r3, #15
 8005de4:	111b      	asrs	r3, r3, #4
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fa fb74 	bl	80004d4 <__aeabi_i2d>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4610      	mov	r0, r2
 8005df2:	4619      	mov	r1, r3
 8005df4:	f7fa fe88 	bl	8000b08 <__aeabi_d2iz>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	ddac      	ble.n	8005d5a <statemachine+0x1712>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 8005e00:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8005e04:	486b      	ldr	r0, [pc, #428]	@ (8005fb4 <statemachine+0x196c>)
 8005e06:	f011 fbc8 	bl	801759a <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 8005e0a:	f001 f9cf 	bl	80071ac <HAL_GetTick>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	4a63      	ldr	r2, [pc, #396]	@ (8005fa0 <statemachine+0x1958>)
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	461a      	mov	r2, r3
 8005e18:	4b61      	ldr	r3, [pc, #388]	@ (8005fa0 <statemachine+0x1958>)
 8005e1a:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 8005e1c:	4b5c      	ldr	r3, [pc, #368]	@ (8005f90 <statemachine+0x1948>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 8005e22:	4b67      	ldr	r3, [pc, #412]	@ (8005fc0 <statemachine+0x1978>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 8005e28:	4b63      	ldr	r3, [pc, #396]	@ (8005fb8 <statemachine+0x1970>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
				 						storeindex();
 8005e2e:	f7fd fd79 	bl	8003924 <storeindex>
				 						BTN_A=0;
 8005e32:	4b5f      	ldr	r3, [pc, #380]	@ (8005fb0 <statemachine+0x1968>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 8005e38:	4b62      	ldr	r3, [pc, #392]	@ (8005fc4 <statemachine+0x197c>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 8005e3e:	4b61      	ldr	r3, [pc, #388]	@ (8005fc4 <statemachine+0x197c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f340 8123 	ble.w	800608e <statemachine+0x1a46>
					 						usbstate++;
 8005e48:	4b5f      	ldr	r3, [pc, #380]	@ (8005fc8 <statemachine+0x1980>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	4b5d      	ldr	r3, [pc, #372]	@ (8005fc8 <statemachine+0x1980>)
 8005e52:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 8005e54:	4b5b      	ldr	r3, [pc, #364]	@ (8005fc4 <statemachine+0x197c>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 8005e5a:	4b55      	ldr	r3, [pc, #340]	@ (8005fb0 <statemachine+0x1968>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]
				 			  break;
 8005e60:	e115      	b.n	800608e <statemachine+0x1a46>
				 					ssd1306_Fill(Black);
 8005e62:	2000      	movs	r0, #0
 8005e64:	f7fd ff3a 	bl	8003cdc <ssd1306_Fill>
				 					ssd1306_SetCursor(32,40);
 8005e68:	2128      	movs	r1, #40	@ 0x28
 8005e6a:	2020      	movs	r0, #32
 8005e6c:	f7fe f878 	bl	8003f60 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8005e70:	4a44      	ldr	r2, [pc, #272]	@ (8005f84 <statemachine+0x193c>)
 8005e72:	2301      	movs	r3, #1
 8005e74:	ca06      	ldmia	r2, {r1, r2}
 8005e76:	4855      	ldr	r0, [pc, #340]	@ (8005fcc <statemachine+0x1984>)
 8005e78:	f7fe f84c 	bl	8003f14 <ssd1306_WriteString>
				 					if(pagenumber>0){
 8005e7c:	4b4e      	ldr	r3, [pc, #312]	@ (8005fb8 <statemachine+0x1970>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f340 80b1 	ble.w	8005fe8 <statemachine+0x19a0>
				 					int i=0;
 8005e86:	2300      	movs	r3, #0
 8005e88:	60bb      	str	r3, [r7, #8]
				 					if(usbtransmiten==0){
 8005e8a:	4b51      	ldr	r3, [pc, #324]	@ (8005fd0 <statemachine+0x1988>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d165      	bne.n	8005f5e <statemachine+0x1916>
				 						while(i<pagenumber){
 8005e92:	e036      	b.n	8005f02 <statemachine+0x18ba>
				 							ssd1306_Fill(Black);
 8005e94:	2000      	movs	r0, #0
 8005e96:	f7fd ff21 	bl	8003cdc <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8005e9a:	2120      	movs	r1, #32
 8005e9c:	2020      	movs	r0, #32
 8005e9e:	f7fe f85f 	bl	8003f60 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8005ea2:	4a38      	ldr	r2, [pc, #224]	@ (8005f84 <statemachine+0x193c>)
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	ca06      	ldmia	r2, {r1, r2}
 8005ea8:	4848      	ldr	r0, [pc, #288]	@ (8005fcc <statemachine+0x1984>)
 8005eaa:	f7fe f833 	bl	8003f14 <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t  *)flashread, 256, 0);
 8005eae:	68b9      	ldr	r1, [r7, #8]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005eb8:	4a46      	ldr	r2, [pc, #280]	@ (8005fd4 <statemachine+0x198c>)
 8005eba:	483e      	ldr	r0, [pc, #248]	@ (8005fb4 <statemachine+0x196c>)
 8005ebc:	f011 fc0e 	bl	80176dc <SPIF_ReadPage>
				 							CDC_Transmit_FS((char  * )flashread,256);
 8005ec0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ec4:	4843      	ldr	r0, [pc, #268]	@ (8005fd4 <statemachine+0x198c>)
 8005ec6:	f012 fbe7 	bl	8018698 <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2264      	movs	r2, #100	@ 0x64
 8005ece:	fb02 f303 	mul.w	r3, r2, r3
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005eda:	4b37      	ldr	r3, [pc, #220]	@ (8005fb8 <statemachine+0x1970>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ee6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005eea:	eeb0 0a66 	vmov.f32	s0, s13
 8005eee:	f7fe fb4b 	bl	8004588 <percentage>
				 							ssd1306_UpdateScreen();
 8005ef2:	f7fd ff0b 	bl	8003d0c <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 8005ef6:	207d      	movs	r0, #125	@ 0x7d
 8005ef8:	f7fb fc19 	bl	800172e <HAL_Delay>
				 							i++;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	3301      	adds	r3, #1
 8005f00:	60bb      	str	r3, [r7, #8]
				 						while(i<pagenumber){
 8005f02:	4b2d      	ldr	r3, [pc, #180]	@ (8005fb8 <statemachine+0x1970>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	dbc3      	blt.n	8005e94 <statemachine+0x184c>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 8005f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8005fb8 <statemachine+0x1970>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4619      	mov	r1, r3
 8005f12:	4b2b      	ldr	r3, [pc, #172]	@ (8005fc0 <statemachine+0x1978>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	2300      	movs	r3, #0
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8005fd4 <statemachine+0x198c>)
 8005f20:	4824      	ldr	r0, [pc, #144]	@ (8005fb4 <statemachine+0x196c>)
 8005f22:	f011 fbdb 	bl	80176dc <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 8005f26:	4b26      	ldr	r3, [pc, #152]	@ (8005fc0 <statemachine+0x1978>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4829      	ldr	r0, [pc, #164]	@ (8005fd4 <statemachine+0x198c>)
 8005f30:	f012 fbb2 	bl	8018698 <CDC_Transmit_FS>
				 						HAL_Delay(125);
 8005f34:	207d      	movs	r0, #125	@ 0x7d
 8005f36:	f7fb fbfa 	bl	800172e <HAL_Delay>
				 						int taillefin=0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	607b      	str	r3, [r7, #4]
										taillefin = snprintf((char  *)usbbuffer,64,"findetrame\n\r");
 8005f3e:	4a26      	ldr	r2, [pc, #152]	@ (8005fd8 <statemachine+0x1990>)
 8005f40:	2140      	movs	r1, #64	@ 0x40
 8005f42:	4826      	ldr	r0, [pc, #152]	@ (8005fdc <statemachine+0x1994>)
 8005f44:	f015 f962 	bl	801b20c <sniprintf>
 8005f48:	6078      	str	r0, [r7, #4]
				 						CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4822      	ldr	r0, [pc, #136]	@ (8005fdc <statemachine+0x1994>)
 8005f52:	f012 fba1 	bl	8018698 <CDC_Transmit_FS>
				 						usbtransmiten=1;
 8005f56:	4b1e      	ldr	r3, [pc, #120]	@ (8005fd0 <statemachine+0x1988>)
 8005f58:	2201      	movs	r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	e003      	b.n	8005f66 <statemachine+0x191e>
				 						usbpercent=1;
 8005f5e:	4b20      	ldr	r3, [pc, #128]	@ (8005fe0 <statemachine+0x1998>)
 8005f60:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005f64:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 8005f66:	2000      	movs	r0, #0
 8005f68:	f7fd feb8 	bl	8003cdc <ssd1306_Fill>
				 					ssd1306_SetCursor(32,48);
 8005f6c:	2130      	movs	r1, #48	@ 0x30
 8005f6e:	2020      	movs	r0, #32
 8005f70:	f7fd fff6 	bl	8003f60 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 8005f74:	4a08      	ldr	r2, [pc, #32]	@ (8005f98 <statemachine+0x1950>)
 8005f76:	2301      	movs	r3, #1
 8005f78:	ca06      	ldmia	r2, {r1, r2}
 8005f7a:	481a      	ldr	r0, [pc, #104]	@ (8005fe4 <statemachine+0x199c>)
 8005f7c:	f7fd ffca 	bl	8003f14 <ssd1306_WriteString>
 8005f80:	e049      	b.n	8006016 <statemachine+0x19ce>
 8005f82:	bf00      	nop
 8005f84:	20000014 	.word	0x20000014
 8005f88:	0801faac 	.word	0x0801faac
 8005f8c:	0801fab4 	.word	0x0801fab4
 8005f90:	20000b54 	.word	0x20000b54
 8005f94:	0801fa9c 	.word	0x0801fa9c
 8005f98:	2000001c 	.word	0x2000001c
 8005f9c:	0801fac0 	.word	0x0801fac0
 8005fa0:	20000b50 	.word	0x20000b50
 8005fa4:	447a0000 	.word	0x447a0000
 8005fa8:	0801fac4 	.word	0x0801fac4
 8005fac:	20000ac0 	.word	0x20000ac0
 8005fb0:	20000860 	.word	0x20000860
 8005fb4:	20000868 	.word	0x20000868
 8005fb8:	20000aa0 	.word	0x20000aa0
 8005fbc:	00000000 	.word	0x00000000
 8005fc0:	20000a9c 	.word	0x20000a9c
 8005fc4:	20000864 	.word	0x20000864
 8005fc8:	200005d8 	.word	0x200005d8
 8005fcc:	0801facc 	.word	0x0801facc
 8005fd0:	20000b58 	.word	0x20000b58
 8005fd4:	2000099c 	.word	0x2000099c
 8005fd8:	0801fad4 	.word	0x0801fad4
 8005fdc:	20000af4 	.word	0x20000af4
 8005fe0:	20000b5c 	.word	0x20000b5c
 8005fe4:	0801fae4 	.word	0x0801fae4
				 							ssd1306_Fill(Black);
 8005fe8:	2000      	movs	r0, #0
 8005fea:	f7fd fe77 	bl	8003cdc <ssd1306_Fill>
				 							ssd1306_SetCursor(32,40);
 8005fee:	2128      	movs	r1, #40	@ 0x28
 8005ff0:	2020      	movs	r0, #32
 8005ff2:	f7fd ffb5 	bl	8003f60 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_7x10,White);
 8005ff6:	4a69      	ldr	r2, [pc, #420]	@ (800619c <statemachine+0x1b54>)
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	ca06      	ldmia	r2, {r1, r2}
 8005ffc:	4868      	ldr	r0, [pc, #416]	@ (80061a0 <statemachine+0x1b58>)
 8005ffe:	f7fd ff89 	bl	8003f14 <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,50);
 8006002:	2132      	movs	r1, #50	@ 0x32
 8006004:	2020      	movs	r0, #32
 8006006:	f7fd ffab 	bl	8003f60 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_7x10,White);
 800600a:	4a64      	ldr	r2, [pc, #400]	@ (800619c <statemachine+0x1b54>)
 800600c:	2301      	movs	r3, #1
 800600e:	ca06      	ldmia	r2, {r1, r2}
 8006010:	4864      	ldr	r0, [pc, #400]	@ (80061a4 <statemachine+0x1b5c>)
 8006012:	f7fd ff7f 	bl	8003f14 <ssd1306_WriteString>
				 					if(BTN_B>=1){
 8006016:	4b64      	ldr	r3, [pc, #400]	@ (80061a8 <statemachine+0x1b60>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	dd11      	ble.n	8006042 <statemachine+0x19fa>
				 									 						usbstate--;
 800601e:	4b63      	ldr	r3, [pc, #396]	@ (80061ac <statemachine+0x1b64>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	3b01      	subs	r3, #1
 8006024:	b2da      	uxtb	r2, r3
 8006026:	4b61      	ldr	r3, [pc, #388]	@ (80061ac <statemachine+0x1b64>)
 8006028:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 800602a:	4b60      	ldr	r3, [pc, #384]	@ (80061ac <statemachine+0x1b64>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	3b01      	subs	r3, #1
 8006030:	b2da      	uxtb	r2, r3
 8006032:	4b5e      	ldr	r3, [pc, #376]	@ (80061ac <statemachine+0x1b64>)
 8006034:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 8006036:	4b5c      	ldr	r3, [pc, #368]	@ (80061a8 <statemachine+0x1b60>)
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 800603c:	4b5c      	ldr	r3, [pc, #368]	@ (80061b0 <statemachine+0x1b68>)
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8006042:	4b5b      	ldr	r3, [pc, #364]	@ (80061b0 <statemachine+0x1b68>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	dd0b      	ble.n	8006062 <statemachine+0x1a1a>
				 									  			 	state++;
 800604a:	4b5a      	ldr	r3, [pc, #360]	@ (80061b4 <statemachine+0x1b6c>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	3301      	adds	r3, #1
 8006050:	b2da      	uxtb	r2, r3
 8006052:	4b58      	ldr	r3, [pc, #352]	@ (80061b4 <statemachine+0x1b6c>)
 8006054:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8006056:	4b56      	ldr	r3, [pc, #344]	@ (80061b0 <statemachine+0x1b68>)
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 800605c:	4b52      	ldr	r3, [pc, #328]	@ (80061a8 <statemachine+0x1b60>)
 800605e:	2200      	movs	r2, #0
 8006060:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8006062:	4b55      	ldr	r3, [pc, #340]	@ (80061b8 <statemachine+0x1b70>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	dd13      	ble.n	8006092 <statemachine+0x1a4a>
				 									 									  			 	state--;
 800606a:	4b52      	ldr	r3, [pc, #328]	@ (80061b4 <statemachine+0x1b6c>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	3b01      	subs	r3, #1
 8006070:	b2da      	uxtb	r2, r3
 8006072:	4b50      	ldr	r3, [pc, #320]	@ (80061b4 <statemachine+0x1b6c>)
 8006074:	701a      	strb	r2, [r3, #0]
				 									 									  			 	BTN_A=0;
 8006076:	4b4e      	ldr	r3, [pc, #312]	@ (80061b0 <statemachine+0x1b68>)
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_B=0;
 800607c:	4b4a      	ldr	r3, [pc, #296]	@ (80061a8 <statemachine+0x1b60>)
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_A_LONG=0;
 8006082:	4b4d      	ldr	r3, [pc, #308]	@ (80061b8 <statemachine+0x1b70>)
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]
				 					 break;
 8006088:	e003      	b.n	8006092 <statemachine+0x1a4a>
				 					  break;
 800608a:	bf00      	nop
 800608c:	e07c      	b.n	8006188 <statemachine+0x1b40>
				 			  break;
 800608e:	bf00      	nop
 8006090:	e07a      	b.n	8006188 <statemachine+0x1b40>
				 					 break;
 8006092:	bf00      	nop
				  break;
 8006094:	e078      	b.n	8006188 <statemachine+0x1b40>

				  case STATE_BLUETOOTH:
					  ssd1306_Fill(Black);
 8006096:	2000      	movs	r0, #0
 8006098:	f7fd fe20 	bl	8003cdc <ssd1306_Fill>
					  ssd1306_SetCursor(32,32);
 800609c:	2120      	movs	r1, #32
 800609e:	2020      	movs	r0, #32
 80060a0:	f7fd ff5e 	bl	8003f60 <ssd1306_SetCursor>
					  ssd1306_WriteString("bluetooth",Font_6x8,White);
 80060a4:	4a45      	ldr	r2, [pc, #276]	@ (80061bc <statemachine+0x1b74>)
 80060a6:	2301      	movs	r3, #1
 80060a8:	ca06      	ldmia	r2, {r1, r2}
 80060aa:	4845      	ldr	r0, [pc, #276]	@ (80061c0 <statemachine+0x1b78>)
 80060ac:	f7fd ff32 	bl	8003f14 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,42);
 80060b0:	212a      	movs	r1, #42	@ 0x2a
 80060b2:	2020      	movs	r0, #32
 80060b4:	f7fd ff54 	bl	8003f60 <ssd1306_SetCursor>

					  ssd1306_WriteString((char *) blereceivebuf, Font_7x10, White);
 80060b8:	4a38      	ldr	r2, [pc, #224]	@ (800619c <statemachine+0x1b54>)
 80060ba:	2301      	movs	r3, #1
 80060bc:	ca06      	ldmia	r2, {r1, r2}
 80060be:	4841      	ldr	r0, [pc, #260]	@ (80061c4 <statemachine+0x1b7c>)
 80060c0:	f7fd ff28 	bl	8003f14 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,52);
 80060c4:	2134      	movs	r1, #52	@ 0x34
 80060c6:	2020      	movs	r0, #32
 80060c8:	f7fd ff4a 	bl	8003f60 <ssd1306_SetCursor>
					  snprintf((char  *)bufferscreen,50,"t=%d",tpstot);
 80060cc:	4b3e      	ldr	r3, [pc, #248]	@ (80061c8 <statemachine+0x1b80>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a3e      	ldr	r2, [pc, #248]	@ (80061cc <statemachine+0x1b84>)
 80060d2:	2132      	movs	r1, #50	@ 0x32
 80060d4:	483e      	ldr	r0, [pc, #248]	@ (80061d0 <statemachine+0x1b88>)
 80060d6:	f015 f899 	bl	801b20c <sniprintf>
					  ssd1306_WriteString((char  *)bufferscreen, Font_6x8, White);
 80060da:	4a38      	ldr	r2, [pc, #224]	@ (80061bc <statemachine+0x1b74>)
 80060dc:	2301      	movs	r3, #1
 80060de:	ca06      	ldmia	r2, {r1, r2}
 80060e0:	483b      	ldr	r0, [pc, #236]	@ (80061d0 <statemachine+0x1b88>)
 80060e2:	f7fd ff17 	bl	8003f14 <ssd1306_WriteString>



					  if(BTN_B>=1){
 80060e6:	4b30      	ldr	r3, [pc, #192]	@ (80061a8 <statemachine+0x1b60>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	dd08      	ble.n	8006100 <statemachine+0x1ab8>


						  bluetoothsend=1;
 80060ee:	4b39      	ldr	r3, [pc, #228]	@ (80061d4 <statemachine+0x1b8c>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
						  BTN_B=0;
 80060f4:	4b2c      	ldr	r3, [pc, #176]	@ (80061a8 <statemachine+0x1b60>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
						  BTN_B_LONG=0;
 80060fa:	4b37      	ldr	r3, [pc, #220]	@ (80061d8 <statemachine+0x1b90>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
					  }


				  if(BTN_A>=1){
 8006100:	4b2b      	ldr	r3, [pc, #172]	@ (80061b0 <statemachine+0x1b68>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	dd23      	ble.n	8006150 <statemachine+0x1b08>
						state--;
 8006108:	4b2a      	ldr	r3, [pc, #168]	@ (80061b4 <statemachine+0x1b6c>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	3b01      	subs	r3, #1
 800610e:	b2da      	uxtb	r2, r3
 8006110:	4b28      	ldr	r3, [pc, #160]	@ (80061b4 <statemachine+0x1b6c>)
 8006112:	701a      	strb	r2, [r3, #0]
						state--;
 8006114:	4b27      	ldr	r3, [pc, #156]	@ (80061b4 <statemachine+0x1b6c>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	3b01      	subs	r3, #1
 800611a:	b2da      	uxtb	r2, r3
 800611c:	4b25      	ldr	r3, [pc, #148]	@ (80061b4 <statemachine+0x1b6c>)
 800611e:	701a      	strb	r2, [r3, #0]
						state--;
 8006120:	4b24      	ldr	r3, [pc, #144]	@ (80061b4 <statemachine+0x1b6c>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	3b01      	subs	r3, #1
 8006126:	b2da      	uxtb	r2, r3
 8006128:	4b22      	ldr	r3, [pc, #136]	@ (80061b4 <statemachine+0x1b6c>)
 800612a:	701a      	strb	r2, [r3, #0]
						state--;
 800612c:	4b21      	ldr	r3, [pc, #132]	@ (80061b4 <statemachine+0x1b6c>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	3b01      	subs	r3, #1
 8006132:	b2da      	uxtb	r2, r3
 8006134:	4b1f      	ldr	r3, [pc, #124]	@ (80061b4 <statemachine+0x1b6c>)
 8006136:	701a      	strb	r2, [r3, #0]
						state--;
 8006138:	4b1e      	ldr	r3, [pc, #120]	@ (80061b4 <statemachine+0x1b6c>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	3b01      	subs	r3, #1
 800613e:	b2da      	uxtb	r2, r3
 8006140:	4b1c      	ldr	r3, [pc, #112]	@ (80061b4 <statemachine+0x1b6c>)
 8006142:	701a      	strb	r2, [r3, #0]
						BTN_A=0;
 8006144:	4b1a      	ldr	r3, [pc, #104]	@ (80061b0 <statemachine+0x1b68>)
 8006146:	2200      	movs	r2, #0
 8006148:	601a      	str	r2, [r3, #0]
						BTN_B=0;
 800614a:	4b17      	ldr	r3, [pc, #92]	@ (80061a8 <statemachine+0x1b60>)
 800614c:	2200      	movs	r2, #0
 800614e:	601a      	str	r2, [r3, #0]
							}
					if(BTN_A_LONG>=1){
 8006150:	4b19      	ldr	r3, [pc, #100]	@ (80061b8 <statemachine+0x1b70>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	dd19      	ble.n	800618c <statemachine+0x1b44>
							state--;
 8006158:	4b16      	ldr	r3, [pc, #88]	@ (80061b4 <statemachine+0x1b6c>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	3b01      	subs	r3, #1
 800615e:	b2da      	uxtb	r2, r3
 8006160:	4b14      	ldr	r3, [pc, #80]	@ (80061b4 <statemachine+0x1b6c>)
 8006162:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8006164:	4b12      	ldr	r3, [pc, #72]	@ (80061b0 <statemachine+0x1b68>)
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 800616a:	4b0f      	ldr	r3, [pc, #60]	@ (80061a8 <statemachine+0x1b60>)
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]
							BTN_A_LONG=0;
 8006170:	4b11      	ldr	r3, [pc, #68]	@ (80061b8 <statemachine+0x1b70>)
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
							}



					  break;
 8006176:	e009      	b.n	800618c <statemachine+0x1b44>
				  									 	 break;
 8006178:	bf00      	nop
 800617a:	e008      	b.n	800618e <statemachine+0x1b46>
					  break;
 800617c:	bf00      	nop
 800617e:	e006      	b.n	800618e <statemachine+0x1b46>
			  break;
 8006180:	bf00      	nop
 8006182:	e004      	b.n	800618e <statemachine+0x1b46>
			  break;
 8006184:	bf00      	nop
 8006186:	e002      	b.n	800618e <statemachine+0x1b46>
				  break;
 8006188:	bf00      	nop
 800618a:	e000      	b.n	800618e <statemachine+0x1b46>
					  break;
 800618c:	bf00      	nop




	}
return ;
 800618e:	bf00      	nop
 8006190:	bf00      	nop
}
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	ecbd 8b02 	vpop	{d8}
 800619a:	bdb0      	pop	{r4, r5, r7, pc}
 800619c:	2000001c 	.word	0x2000001c
 80061a0:	0801facc 	.word	0x0801facc
 80061a4:	0801faec 	.word	0x0801faec
 80061a8:	20000864 	.word	0x20000864
 80061ac:	200005d8 	.word	0x200005d8
 80061b0:	20000860 	.word	0x20000860
 80061b4:	200005d4 	.word	0x200005d4
 80061b8:	20000b98 	.word	0x20000b98
 80061bc:	20000014 	.word	0x20000014
 80061c0:	0801faf4 	.word	0x0801faf4
 80061c4:	20000ba0 	.word	0x20000ba0
 80061c8:	200011e4 	.word	0x200011e4
 80061cc:	0801fb00 	.word	0x0801fb00
 80061d0:	20000ac0 	.word	0x20000ac0
 80061d4:	20000b9c 	.word	0x20000b9c
 80061d8:	20000b94 	.word	0x20000b94

080061dc <LL_AHB3_GRP1_EnableClock>:
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80061e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80061f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4013      	ands	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006200:	68fb      	ldr	r3, [r7, #12]
}
 8006202:	bf00      	nop
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	af00      	add	r7, sp, #0



  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8006212:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006216:	f7ff ffe1 	bl	80061dc <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800621a:	2200      	movs	r2, #0
 800621c:	2100      	movs	r1, #0
 800621e:	202e      	movs	r0, #46	@ 0x2e
 8006220:	f002 f9a3 	bl	800856a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8006224:	202e      	movs	r0, #46	@ 0x2e
 8006226:	f002 f9ba 	bl	800859e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800622a:	bf00      	nop
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   ssd1306_SetCursor(32, 20);
 8006234:	2114      	movs	r1, #20
 8006236:	2020      	movs	r0, #32
 8006238:	f7fd fe92 	bl	8003f60 <ssd1306_SetCursor>
	   	  ssd1306_WriteString("NMI", Font_7x10, White);
 800623c:	4a04      	ldr	r2, [pc, #16]	@ (8006250 <NMI_Handler+0x20>)
 800623e:	2301      	movs	r3, #1
 8006240:	ca06      	ldmia	r2, {r1, r2}
 8006242:	4804      	ldr	r0, [pc, #16]	@ (8006254 <NMI_Handler+0x24>)
 8006244:	f7fd fe66 	bl	8003f14 <ssd1306_WriteString>
	   	  ssd1306_UpdateScreen();
 8006248:	f7fd fd60 	bl	8003d0c <ssd1306_UpdateScreen>
	   ssd1306_SetCursor(32, 20);
 800624c:	bf00      	nop
 800624e:	e7f1      	b.n	8006234 <NMI_Handler+0x4>
 8006250:	2000001c 	.word	0x2000001c
 8006254:	0801fb08 	.word	0x0801fb08

08006258 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 800625c:	2114      	movs	r1, #20
 800625e:	2020      	movs	r0, #32
 8006260:	f7fd fe7e 	bl	8003f60 <ssd1306_SetCursor>
	  ssd1306_WriteString("hardfault", Font_7x10, White);
 8006264:	4a04      	ldr	r2, [pc, #16]	@ (8006278 <HardFault_Handler+0x20>)
 8006266:	2301      	movs	r3, #1
 8006268:	ca06      	ldmia	r2, {r1, r2}
 800626a:	4804      	ldr	r0, [pc, #16]	@ (800627c <HardFault_Handler+0x24>)
 800626c:	f7fd fe52 	bl	8003f14 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8006270:	f7fd fd4c 	bl	8003d0c <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006274:	bf00      	nop
 8006276:	e7f1      	b.n	800625c <HardFault_Handler+0x4>
 8006278:	2000001c 	.word	0x2000001c
 800627c:	0801fb0c 	.word	0x0801fb0c

08006280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006284:	2114      	movs	r1, #20
 8006286:	2020      	movs	r0, #32
 8006288:	f7fd fe6a 	bl	8003f60 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("mem", Font_7x10, White);
 800628c:	4a04      	ldr	r2, [pc, #16]	@ (80062a0 <MemManage_Handler+0x20>)
 800628e:	2301      	movs	r3, #1
 8006290:	ca06      	ldmia	r2, {r1, r2}
 8006292:	4804      	ldr	r0, [pc, #16]	@ (80062a4 <MemManage_Handler+0x24>)
 8006294:	f7fd fe3e 	bl	8003f14 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8006298:	f7fd fd38 	bl	8003d0c <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 800629c:	bf00      	nop
 800629e:	e7f1      	b.n	8006284 <MemManage_Handler+0x4>
 80062a0:	2000001c 	.word	0x2000001c
 80062a4:	0801fb18 	.word	0x0801fb18

080062a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80062ac:	2114      	movs	r1, #20
 80062ae:	2020      	movs	r0, #32
 80062b0:	f7fd fe56 	bl	8003f60 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("bus", Font_7x10, White);
 80062b4:	4a04      	ldr	r2, [pc, #16]	@ (80062c8 <BusFault_Handler+0x20>)
 80062b6:	2301      	movs	r3, #1
 80062b8:	ca06      	ldmia	r2, {r1, r2}
 80062ba:	4804      	ldr	r0, [pc, #16]	@ (80062cc <BusFault_Handler+0x24>)
 80062bc:	f7fd fe2a 	bl	8003f14 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 80062c0:	f7fd fd24 	bl	8003d0c <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80062c4:	bf00      	nop
 80062c6:	e7f1      	b.n	80062ac <BusFault_Handler+0x4>
 80062c8:	2000001c 	.word	0x2000001c
 80062cc:	0801fb1c 	.word	0x0801fb1c

080062d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80062d4:	2114      	movs	r1, #20
 80062d6:	2020      	movs	r0, #32
 80062d8:	f7fd fe42 	bl	8003f60 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("usage", Font_7x10, White);
 80062dc:	4a04      	ldr	r2, [pc, #16]	@ (80062f0 <UsageFault_Handler+0x20>)
 80062de:	2301      	movs	r3, #1
 80062e0:	ca06      	ldmia	r2, {r1, r2}
 80062e2:	4804      	ldr	r0, [pc, #16]	@ (80062f4 <UsageFault_Handler+0x24>)
 80062e4:	f7fd fe16 	bl	8003f14 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 80062e8:	f7fd fd10 	bl	8003d0c <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80062ec:	bf00      	nop
 80062ee:	e7f1      	b.n	80062d4 <UsageFault_Handler+0x4>
 80062f0:	2000001c 	.word	0x2000001c
 80062f4:	0801fb20 	.word	0x0801fb20

080062f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062f8:	b480      	push	{r7}
 80062fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80062fc:	bf00      	nop
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006306:	b480      	push	{r7}
 8006308:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800630a:	bf00      	nop
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006314:	b480      	push	{r7}
 8006316:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006318:	bf00      	nop
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006326:	f000 ff2d 	bl	8007184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800632a:	bf00      	nop
 800632c:	bd80      	pop	{r7, pc}

0800632e <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8006332:	f7fb fe4d 	bl	8001fd0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8006336:	bf00      	nop
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006340:	4802      	ldr	r0, [pc, #8]	@ (800634c <DMA1_Channel1_IRQHandler+0x10>)
 8006342:	f002 fbe8 	bl	8008b16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006346:	bf00      	nop
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	200003f0 	.word	0x200003f0

08006350 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8006354:	4802      	ldr	r0, [pc, #8]	@ (8006360 <DMA1_Channel2_IRQHandler+0x10>)
 8006356:	f002 fbde 	bl	8008b16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800635a:	bf00      	nop
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	200013f8 	.word	0x200013f8

08006364 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006368:	4802      	ldr	r0, [pc, #8]	@ (8006374 <USB_LP_IRQHandler+0x10>)
 800636a:	f003 fe71 	bl	800a050 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800636e:	bf00      	nop
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20002a4c 	.word	0x20002a4c

08006378 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800637c:	4806      	ldr	r0, [pc, #24]	@ (8006398 <TIM1_UP_TIM16_IRQHandler+0x20>)
 800637e:	f008 fcfe 	bl	800ed7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  updatedate();
 8006382:	f000 fa75 	bl	8006870 <updatedate>
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8006386:	2101      	movs	r1, #1
 8006388:	4804      	ldr	r0, [pc, #16]	@ (800639c <TIM1_UP_TIM16_IRQHandler+0x24>)
 800638a:	f002 ff9f 	bl	80092cc <HAL_GPIO_TogglePin>
  bluetoothsend=1;
 800638e:	4b04      	ldr	r3, [pc, #16]	@ (80063a0 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8006390:	2201      	movs	r2, #1
 8006392:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006394:	bf00      	nop
 8006396:	bd80      	pop	{r7, pc}
 8006398:	20001238 	.word	0x20001238
 800639c:	48000400 	.word	0x48000400
 80063a0:	20000b9c 	.word	0x20000b9c

080063a4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80063a8:	4805      	ldr	r0, [pc, #20]	@ (80063c0 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 80063aa:	f008 fce8 	bl	800ed7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 80063ae:	2102      	movs	r1, #2
 80063b0:	4804      	ldr	r0, [pc, #16]	@ (80063c4 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>)
 80063b2:	f002 ff8b 	bl	80092cc <HAL_GPIO_TogglePin>
  enablewrite=1;
 80063b6:	4b04      	ldr	r3, [pc, #16]	@ (80063c8 <TIM1_TRG_COM_TIM17_IRQHandler+0x24>)
 80063b8:	2201      	movs	r2, #1
 80063ba:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80063bc:	bf00      	nop
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20001284 	.word	0x20001284
 80063c4:	48000400 	.word	0x48000400
 80063c8:	20000b78 	.word	0x20000b78

080063cc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80063d0:	4802      	ldr	r0, [pc, #8]	@ (80063dc <SPI1_IRQHandler+0x10>)
 80063d2:	f008 f8e9 	bl	800e5a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80063d6:	bf00      	nop
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20000d78 	.word	0x20000d78

080063e0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80063e4:	4802      	ldr	r0, [pc, #8]	@ (80063f0 <LPUART1_IRQHandler+0x10>)
 80063e6:	f009 fa61 	bl	800f8ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80063ea:	bf00      	nop
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	200012d0 	.word	0x200012d0

080063f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80063f8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80063fc:	f002 ff80 	bl	8009300 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8006400:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006404:	f002 ff7c 	bl	8009300 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006408:	bf00      	nop
 800640a:	bd80      	pop	{r7, pc}

0800640c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8006410:	f011 ff30 	bl	8018274 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8006414:	bf00      	nop
 8006416:	bd80      	pop	{r7, pc}

08006418 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800641c:	f011 ff60 	bl	80182e0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8006420:	bf00      	nop
 8006422:	bd80      	pop	{r7, pc}

08006424 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8006428:	f002 ff82 	bl	8009330 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800642c:	bf00      	nop
 800642e:	bd80      	pop	{r7, pc}

08006430 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  return 1;
 8006434:	2301      	movs	r3, #1
}
 8006436:	4618      	mov	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <_kill>:

int _kill(int pid, int sig)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800644a:	f015 f85d 	bl	801b508 <__errno>
 800644e:	4603      	mov	r3, r0
 8006450:	2216      	movs	r2, #22
 8006452:	601a      	str	r2, [r3, #0]
  return -1;
 8006454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <_exit>:

void _exit (int status)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006468:	f04f 31ff 	mov.w	r1, #4294967295
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff ffe7 	bl	8006440 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006472:	bf00      	nop
 8006474:	e7fd      	b.n	8006472 <_exit+0x12>

08006476 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b086      	sub	sp, #24
 800647a:	af00      	add	r7, sp, #0
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006482:	2300      	movs	r3, #0
 8006484:	617b      	str	r3, [r7, #20]
 8006486:	e00a      	b.n	800649e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006488:	f3af 8000 	nop.w
 800648c:	4601      	mov	r1, r0
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	60ba      	str	r2, [r7, #8]
 8006494:	b2ca      	uxtb	r2, r1
 8006496:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	3301      	adds	r3, #1
 800649c:	617b      	str	r3, [r7, #20]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	dbf0      	blt.n	8006488 <_read+0x12>
  }

  return len;
 80064a6:	687b      	ldr	r3, [r7, #4]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064bc:	2300      	movs	r3, #0
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	e009      	b.n	80064d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	60ba      	str	r2, [r7, #8]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	3301      	adds	r3, #1
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	429a      	cmp	r2, r3
 80064dc:	dbf1      	blt.n	80064c2 <_write+0x12>
  }
  return len;
 80064de:	687b      	ldr	r3, [r7, #4]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3718      	adds	r7, #24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <_close>:

int _close(int file)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80064f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006510:	605a      	str	r2, [r3, #4]
  return 0;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <_isatty>:

int _isatty(int file)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006528:	2301      	movs	r3, #1
}
 800652a:	4618      	mov	r0, r3
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006536:	b480      	push	{r7}
 8006538:	b085      	sub	sp, #20
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006558:	4a14      	ldr	r2, [pc, #80]	@ (80065ac <_sbrk+0x5c>)
 800655a:	4b15      	ldr	r3, [pc, #84]	@ (80065b0 <_sbrk+0x60>)
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006564:	4b13      	ldr	r3, [pc, #76]	@ (80065b4 <_sbrk+0x64>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d102      	bne.n	8006572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800656c:	4b11      	ldr	r3, [pc, #68]	@ (80065b4 <_sbrk+0x64>)
 800656e:	4a12      	ldr	r2, [pc, #72]	@ (80065b8 <_sbrk+0x68>)
 8006570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006572:	4b10      	ldr	r3, [pc, #64]	@ (80065b4 <_sbrk+0x64>)
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4413      	add	r3, r2
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	429a      	cmp	r2, r3
 800657e:	d207      	bcs.n	8006590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006580:	f014 ffc2 	bl	801b508 <__errno>
 8006584:	4603      	mov	r3, r0
 8006586:	220c      	movs	r2, #12
 8006588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800658a:	f04f 33ff 	mov.w	r3, #4294967295
 800658e:	e009      	b.n	80065a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006590:	4b08      	ldr	r3, [pc, #32]	@ (80065b4 <_sbrk+0x64>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006596:	4b07      	ldr	r3, [pc, #28]	@ (80065b4 <_sbrk+0x64>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4413      	add	r3, r2
 800659e:	4a05      	ldr	r2, [pc, #20]	@ (80065b4 <_sbrk+0x64>)
 80065a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80065a2:	68fb      	ldr	r3, [r7, #12]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20030000 	.word	0x20030000
 80065b0:	00000400 	.word	0x00000400
 80065b4:	200011e8 	.word	0x200011e8
 80065b8:	20003138 	.word	0x20003138

080065bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80065c0:	4b24      	ldr	r3, [pc, #144]	@ (8006654 <SystemInit+0x98>)
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c6:	4a23      	ldr	r2, [pc, #140]	@ (8006654 <SystemInit+0x98>)
 80065c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80065cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80065d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065da:	f043 0301 	orr.w	r3, r3, #1
 80065de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80065e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065e4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80065e8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80065ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065f4:	4b18      	ldr	r3, [pc, #96]	@ (8006658 <SystemInit+0x9c>)
 80065f6:	4013      	ands	r3, r2
 80065f8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80065fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006602:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006606:	f023 0305 	bic.w	r3, r3, #5
 800660a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800660e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006612:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006616:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800661a:	f023 0301 	bic.w	r3, r3, #1
 800661e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8006622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006626:	4a0d      	ldr	r2, [pc, #52]	@ (800665c <SystemInit+0xa0>)
 8006628:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800662a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800662e:	4a0b      	ldr	r2, [pc, #44]	@ (800665c <SystemInit+0xa0>)
 8006630:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800663c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006640:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006646:	2200      	movs	r2, #0
 8006648:	619a      	str	r2, [r3, #24]
}
 800664a:	bf00      	nop
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	e000ed00 	.word	0xe000ed00
 8006658:	faf6fefb 	.word	0xfaf6fefb
 800665c:	22041000 	.word	0x22041000

08006660 <LL_APB1_GRP1_EnableClock>:
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800666c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800666e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4313      	orrs	r3, r2
 8006676:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800667c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4013      	ands	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006684:	68fb      	ldr	r3, [r7, #12]
}
 8006686:	bf00      	nop
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <LL_APB2_GRP1_EnableClock>:
{
 8006692:	b480      	push	{r7}
 8006694:	b085      	sub	sp, #20
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800669a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800669e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80066a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80066aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4013      	ands	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80066b6:	68fb      	ldr	r3, [r7, #12]
}
 80066b8:	bf00      	nop
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80066ca:	f107 0310 	add.w	r3, r7, #16
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	605a      	str	r2, [r3, #4]
 80066d4:	609a      	str	r2, [r3, #8]
 80066d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066d8:	1d3b      	adds	r3, r7, #4
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	605a      	str	r2, [r3, #4]
 80066e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80066e2:	4b1e      	ldr	r3, [pc, #120]	@ (800675c <MX_TIM2_Init+0x98>)
 80066e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80066e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 80066ea:	4b1c      	ldr	r3, [pc, #112]	@ (800675c <MX_TIM2_Init+0x98>)
 80066ec:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 80066f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066f2:	4b1a      	ldr	r3, [pc, #104]	@ (800675c <MX_TIM2_Init+0x98>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80066f8:	4b18      	ldr	r3, [pc, #96]	@ (800675c <MX_TIM2_Init+0x98>)
 80066fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80066fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006700:	4b16      	ldr	r3, [pc, #88]	@ (800675c <MX_TIM2_Init+0x98>)
 8006702:	2200      	movs	r2, #0
 8006704:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006706:	4b15      	ldr	r3, [pc, #84]	@ (800675c <MX_TIM2_Init+0x98>)
 8006708:	2200      	movs	r2, #0
 800670a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800670c:	4813      	ldr	r0, [pc, #76]	@ (800675c <MX_TIM2_Init+0x98>)
 800670e:	f008 fa1b 	bl	800eb48 <HAL_TIM_Base_Init>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8006718:	f7fc fae0 	bl	8002cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800671c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006720:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006722:	f107 0310 	add.w	r3, r7, #16
 8006726:	4619      	mov	r1, r3
 8006728:	480c      	ldr	r0, [pc, #48]	@ (800675c <MX_TIM2_Init+0x98>)
 800672a:	f008 fc2f 	bl	800ef8c <HAL_TIM_ConfigClockSource>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8006734:	f7fc fad2 	bl	8002cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006738:	2320      	movs	r3, #32
 800673a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006740:	1d3b      	adds	r3, r7, #4
 8006742:	4619      	mov	r1, r3
 8006744:	4805      	ldr	r0, [pc, #20]	@ (800675c <MX_TIM2_Init+0x98>)
 8006746:	f008 fe29 	bl	800f39c <HAL_TIMEx_MasterConfigSynchronization>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8006750:	f7fc fac4 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006754:	bf00      	nop
 8006756:	3720      	adds	r7, #32
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	200011ec 	.word	0x200011ec

08006760 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006764:	4b10      	ldr	r3, [pc, #64]	@ (80067a8 <MX_TIM16_Init+0x48>)
 8006766:	4a11      	ldr	r2, [pc, #68]	@ (80067ac <MX_TIM16_Init+0x4c>)
 8006768:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000-1;
 800676a:	4b0f      	ldr	r3, [pc, #60]	@ (80067a8 <MX_TIM16_Init+0x48>)
 800676c:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8006770:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006772:	4b0d      	ldr	r3, [pc, #52]	@ (80067a8 <MX_TIM16_Init+0x48>)
 8006774:	2200      	movs	r2, #0
 8006776:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8006778:	4b0b      	ldr	r3, [pc, #44]	@ (80067a8 <MX_TIM16_Init+0x48>)
 800677a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800677e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006780:	4b09      	ldr	r3, [pc, #36]	@ (80067a8 <MX_TIM16_Init+0x48>)
 8006782:	2200      	movs	r2, #0
 8006784:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006786:	4b08      	ldr	r3, [pc, #32]	@ (80067a8 <MX_TIM16_Init+0x48>)
 8006788:	2200      	movs	r2, #0
 800678a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800678c:	4b06      	ldr	r3, [pc, #24]	@ (80067a8 <MX_TIM16_Init+0x48>)
 800678e:	2200      	movs	r2, #0
 8006790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006792:	4805      	ldr	r0, [pc, #20]	@ (80067a8 <MX_TIM16_Init+0x48>)
 8006794:	f008 f9d8 	bl	800eb48 <HAL_TIM_Base_Init>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800679e:	f7fc fa9d 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80067a2:	bf00      	nop
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20001238 	.word	0x20001238
 80067ac:	40014400 	.word	0x40014400

080067b0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80067b4:	4b10      	ldr	r3, [pc, #64]	@ (80067f8 <MX_TIM17_Init+0x48>)
 80067b6:	4a11      	ldr	r2, [pc, #68]	@ (80067fc <MX_TIM17_Init+0x4c>)
 80067b8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000-1;
 80067ba:	4b0f      	ldr	r3, [pc, #60]	@ (80067f8 <MX_TIM17_Init+0x48>)
 80067bc:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80067c0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067c2:	4b0d      	ldr	r3, [pc, #52]	@ (80067f8 <MX_TIM17_Init+0x48>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 80067c8:	4b0b      	ldr	r3, [pc, #44]	@ (80067f8 <MX_TIM17_Init+0x48>)
 80067ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80067ce:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067d0:	4b09      	ldr	r3, [pc, #36]	@ (80067f8 <MX_TIM17_Init+0x48>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80067d6:	4b08      	ldr	r3, [pc, #32]	@ (80067f8 <MX_TIM17_Init+0x48>)
 80067d8:	2200      	movs	r2, #0
 80067da:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067dc:	4b06      	ldr	r3, [pc, #24]	@ (80067f8 <MX_TIM17_Init+0x48>)
 80067de:	2200      	movs	r2, #0
 80067e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80067e2:	4805      	ldr	r0, [pc, #20]	@ (80067f8 <MX_TIM17_Init+0x48>)
 80067e4:	f008 f9b0 	bl	800eb48 <HAL_TIM_Base_Init>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80067ee:	f7fc fa75 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80067f2:	bf00      	nop
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20001284 	.word	0x20001284
 80067fc:	40014800 	.word	0x40014800

08006800 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006810:	d103      	bne.n	800681a <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006812:	2001      	movs	r0, #1
 8006814:	f7ff ff24 	bl	8006660 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8006818:	e022      	b.n	8006860 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM16)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a12      	ldr	r2, [pc, #72]	@ (8006868 <HAL_TIM_Base_MspInit+0x68>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d10c      	bne.n	800683e <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006824:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8006828:	f7ff ff33 	bl	8006692 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 800682c:	2200      	movs	r2, #0
 800682e:	2104      	movs	r1, #4
 8006830:	2019      	movs	r0, #25
 8006832:	f001 fe9a 	bl	800856a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006836:	2019      	movs	r0, #25
 8006838:	f001 feb1 	bl	800859e <HAL_NVIC_EnableIRQ>
}
 800683c:	e010      	b.n	8006860 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM17)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a0a      	ldr	r2, [pc, #40]	@ (800686c <HAL_TIM_Base_MspInit+0x6c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d10b      	bne.n	8006860 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006848:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800684c:	f7ff ff21 	bl	8006692 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8006850:	2200      	movs	r2, #0
 8006852:	2102      	movs	r1, #2
 8006854:	201a      	movs	r0, #26
 8006856:	f001 fe88 	bl	800856a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800685a:	201a      	movs	r0, #26
 800685c:	f001 fe9f 	bl	800859e <HAL_NVIC_EnableIRQ>
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	40014400 	.word	0x40014400
 800686c:	40014800 	.word	0x40014800

08006870 <updatedate>:
  /* USER CODE END TIM17_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0

	SEC+=1;
 8006874:	4b98      	ldr	r3, [pc, #608]	@ (8006ad8 <updatedate+0x268>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	3301      	adds	r3, #1
 800687a:	b2da      	uxtb	r2, r3
 800687c:	4b96      	ldr	r3, [pc, #600]	@ (8006ad8 <updatedate+0x268>)
 800687e:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 8006880:	4b95      	ldr	r3, [pc, #596]	@ (8006ad8 <updatedate+0x268>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b3b      	cmp	r3, #59	@ 0x3b
 8006886:	d908      	bls.n	800689a <updatedate+0x2a>
		SEC=0;
 8006888:	4b93      	ldr	r3, [pc, #588]	@ (8006ad8 <updatedate+0x268>)
 800688a:	2200      	movs	r2, #0
 800688c:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 800688e:	4b93      	ldr	r3, [pc, #588]	@ (8006adc <updatedate+0x26c>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	3301      	adds	r3, #1
 8006894:	b2da      	uxtb	r2, r3
 8006896:	4b91      	ldr	r3, [pc, #580]	@ (8006adc <updatedate+0x26c>)
 8006898:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 800689a:	4b90      	ldr	r3, [pc, #576]	@ (8006adc <updatedate+0x26c>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b3b      	cmp	r3, #59	@ 0x3b
 80068a0:	d908      	bls.n	80068b4 <updatedate+0x44>

		MINUTE=0;
 80068a2:	4b8e      	ldr	r3, [pc, #568]	@ (8006adc <updatedate+0x26c>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	701a      	strb	r2, [r3, #0]
		HR+=1;
 80068a8:	4b8d      	ldr	r3, [pc, #564]	@ (8006ae0 <updatedate+0x270>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	3301      	adds	r3, #1
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	4b8b      	ldr	r3, [pc, #556]	@ (8006ae0 <updatedate+0x270>)
 80068b2:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 80068b4:	4b8a      	ldr	r3, [pc, #552]	@ (8006ae0 <updatedate+0x270>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2b17      	cmp	r3, #23
 80068ba:	d908      	bls.n	80068ce <updatedate+0x5e>
		HR=0;
 80068bc:	4b88      	ldr	r3, [pc, #544]	@ (8006ae0 <updatedate+0x270>)
 80068be:	2200      	movs	r2, #0
 80068c0:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 80068c2:	4b88      	ldr	r3, [pc, #544]	@ (8006ae4 <updatedate+0x274>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	3301      	adds	r3, #1
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	4b86      	ldr	r3, [pc, #536]	@ (8006ae4 <updatedate+0x274>)
 80068cc:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 80068ce:	4b86      	ldr	r3, [pc, #536]	@ (8006ae8 <updatedate+0x278>)
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	2b0b      	cmp	r3, #11
 80068d4:	f200 8137 	bhi.w	8006b46 <updatedate+0x2d6>
 80068d8:	a201      	add	r2, pc, #4	@ (adr r2, 80068e0 <updatedate+0x70>)
 80068da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068de:	bf00      	nop
 80068e0:	08006911 	.word	0x08006911
 80068e4:	0800693b 	.word	0x0800693b
 80068e8:	08006965 	.word	0x08006965
 80068ec:	0800698f 	.word	0x0800698f
 80068f0:	080069b9 	.word	0x080069b9
 80068f4:	080069e3 	.word	0x080069e3
 80068f8:	08006a0d 	.word	0x08006a0d
 80068fc:	08006a37 	.word	0x08006a37
 8006900:	08006a5f 	.word	0x08006a5f
 8006904:	08006a87 	.word	0x08006a87
 8006908:	08006aaf 	.word	0x08006aaf
 800690c:	08006af1 	.word	0x08006af1

	case JANVIER:
		if(JOURS>31){
 8006910:	4b74      	ldr	r3, [pc, #464]	@ (8006ae4 <updatedate+0x274>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b1f      	cmp	r3, #31
 8006916:	f240 80ff 	bls.w	8006b18 <updatedate+0x2a8>
			JOURS=1;
 800691a:	4b72      	ldr	r3, [pc, #456]	@ (8006ae4 <updatedate+0x274>)
 800691c:	2201      	movs	r2, #1
 800691e:	701a      	strb	r2, [r3, #0]
			mois++;
 8006920:	4b71      	ldr	r3, [pc, #452]	@ (8006ae8 <updatedate+0x278>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	3301      	adds	r3, #1
 8006926:	b2da      	uxtb	r2, r3
 8006928:	4b6f      	ldr	r3, [pc, #444]	@ (8006ae8 <updatedate+0x278>)
 800692a:	701a      	strb	r2, [r3, #0]
			MOIS++;
 800692c:	4b6f      	ldr	r3, [pc, #444]	@ (8006aec <updatedate+0x27c>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	3301      	adds	r3, #1
 8006932:	b2da      	uxtb	r2, r3
 8006934:	4b6d      	ldr	r3, [pc, #436]	@ (8006aec <updatedate+0x27c>)
 8006936:	701a      	strb	r2, [r3, #0]
		}

		break;
 8006938:	e0ee      	b.n	8006b18 <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 800693a:	4b6a      	ldr	r3, [pc, #424]	@ (8006ae4 <updatedate+0x274>)
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2b1d      	cmp	r3, #29
 8006940:	f240 80ec 	bls.w	8006b1c <updatedate+0x2ac>
					JOURS=1;
 8006944:	4b67      	ldr	r3, [pc, #412]	@ (8006ae4 <updatedate+0x274>)
 8006946:	2201      	movs	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
					mois++;
 800694a:	4b67      	ldr	r3, [pc, #412]	@ (8006ae8 <updatedate+0x278>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	3301      	adds	r3, #1
 8006950:	b2da      	uxtb	r2, r3
 8006952:	4b65      	ldr	r3, [pc, #404]	@ (8006ae8 <updatedate+0x278>)
 8006954:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006956:	4b65      	ldr	r3, [pc, #404]	@ (8006aec <updatedate+0x27c>)
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	3301      	adds	r3, #1
 800695c:	b2da      	uxtb	r2, r3
 800695e:	4b63      	ldr	r3, [pc, #396]	@ (8006aec <updatedate+0x27c>)
 8006960:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006962:	e0db      	b.n	8006b1c <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 8006964:	4b5f      	ldr	r3, [pc, #380]	@ (8006ae4 <updatedate+0x274>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b1f      	cmp	r3, #31
 800696a:	f240 80d9 	bls.w	8006b20 <updatedate+0x2b0>
					JOURS=1;
 800696e:	4b5d      	ldr	r3, [pc, #372]	@ (8006ae4 <updatedate+0x274>)
 8006970:	2201      	movs	r2, #1
 8006972:	701a      	strb	r2, [r3, #0]
					mois++;
 8006974:	4b5c      	ldr	r3, [pc, #368]	@ (8006ae8 <updatedate+0x278>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	3301      	adds	r3, #1
 800697a:	b2da      	uxtb	r2, r3
 800697c:	4b5a      	ldr	r3, [pc, #360]	@ (8006ae8 <updatedate+0x278>)
 800697e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006980:	4b5a      	ldr	r3, [pc, #360]	@ (8006aec <updatedate+0x27c>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	3301      	adds	r3, #1
 8006986:	b2da      	uxtb	r2, r3
 8006988:	4b58      	ldr	r3, [pc, #352]	@ (8006aec <updatedate+0x27c>)
 800698a:	701a      	strb	r2, [r3, #0]
				}
		break;
 800698c:	e0c8      	b.n	8006b20 <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 800698e:	4b55      	ldr	r3, [pc, #340]	@ (8006ae4 <updatedate+0x274>)
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	2b1e      	cmp	r3, #30
 8006994:	f240 80c6 	bls.w	8006b24 <updatedate+0x2b4>
					JOURS=1;
 8006998:	4b52      	ldr	r3, [pc, #328]	@ (8006ae4 <updatedate+0x274>)
 800699a:	2201      	movs	r2, #1
 800699c:	701a      	strb	r2, [r3, #0]
					mois++;
 800699e:	4b52      	ldr	r3, [pc, #328]	@ (8006ae8 <updatedate+0x278>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	3301      	adds	r3, #1
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	4b50      	ldr	r3, [pc, #320]	@ (8006ae8 <updatedate+0x278>)
 80069a8:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80069aa:	4b50      	ldr	r3, [pc, #320]	@ (8006aec <updatedate+0x27c>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	3301      	adds	r3, #1
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	4b4e      	ldr	r3, [pc, #312]	@ (8006aec <updatedate+0x27c>)
 80069b4:	701a      	strb	r2, [r3, #0]
				}
		break;
 80069b6:	e0b5      	b.n	8006b24 <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 80069b8:	4b4a      	ldr	r3, [pc, #296]	@ (8006ae4 <updatedate+0x274>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	2b1f      	cmp	r3, #31
 80069be:	f240 80b3 	bls.w	8006b28 <updatedate+0x2b8>
					JOURS=1;
 80069c2:	4b48      	ldr	r3, [pc, #288]	@ (8006ae4 <updatedate+0x274>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	701a      	strb	r2, [r3, #0]
					mois++;
 80069c8:	4b47      	ldr	r3, [pc, #284]	@ (8006ae8 <updatedate+0x278>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	3301      	adds	r3, #1
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	4b45      	ldr	r3, [pc, #276]	@ (8006ae8 <updatedate+0x278>)
 80069d2:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80069d4:	4b45      	ldr	r3, [pc, #276]	@ (8006aec <updatedate+0x27c>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	3301      	adds	r3, #1
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	4b43      	ldr	r3, [pc, #268]	@ (8006aec <updatedate+0x27c>)
 80069de:	701a      	strb	r2, [r3, #0]
				}
		break;
 80069e0:	e0a2      	b.n	8006b28 <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 80069e2:	4b40      	ldr	r3, [pc, #256]	@ (8006ae4 <updatedate+0x274>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	2b1e      	cmp	r3, #30
 80069e8:	f240 80a0 	bls.w	8006b2c <updatedate+0x2bc>
					JOURS=1;
 80069ec:	4b3d      	ldr	r3, [pc, #244]	@ (8006ae4 <updatedate+0x274>)
 80069ee:	2201      	movs	r2, #1
 80069f0:	701a      	strb	r2, [r3, #0]
					mois++;
 80069f2:	4b3d      	ldr	r3, [pc, #244]	@ (8006ae8 <updatedate+0x278>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	3301      	adds	r3, #1
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	4b3b      	ldr	r3, [pc, #236]	@ (8006ae8 <updatedate+0x278>)
 80069fc:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80069fe:	4b3b      	ldr	r3, [pc, #236]	@ (8006aec <updatedate+0x27c>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	4b39      	ldr	r3, [pc, #228]	@ (8006aec <updatedate+0x27c>)
 8006a08:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006a0a:	e08f      	b.n	8006b2c <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 8006a0c:	4b35      	ldr	r3, [pc, #212]	@ (8006ae4 <updatedate+0x274>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b1f      	cmp	r3, #31
 8006a12:	f240 808d 	bls.w	8006b30 <updatedate+0x2c0>
					JOURS=1;
 8006a16:	4b33      	ldr	r3, [pc, #204]	@ (8006ae4 <updatedate+0x274>)
 8006a18:	2201      	movs	r2, #1
 8006a1a:	701a      	strb	r2, [r3, #0]
					mois++;
 8006a1c:	4b32      	ldr	r3, [pc, #200]	@ (8006ae8 <updatedate+0x278>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	3301      	adds	r3, #1
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	4b30      	ldr	r3, [pc, #192]	@ (8006ae8 <updatedate+0x278>)
 8006a26:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006a28:	4b30      	ldr	r3, [pc, #192]	@ (8006aec <updatedate+0x27c>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	4b2e      	ldr	r3, [pc, #184]	@ (8006aec <updatedate+0x27c>)
 8006a32:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006a34:	e07c      	b.n	8006b30 <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 8006a36:	4b2b      	ldr	r3, [pc, #172]	@ (8006ae4 <updatedate+0x274>)
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	2b1f      	cmp	r3, #31
 8006a3c:	d97a      	bls.n	8006b34 <updatedate+0x2c4>
					JOURS=1;
 8006a3e:	4b29      	ldr	r3, [pc, #164]	@ (8006ae4 <updatedate+0x274>)
 8006a40:	2201      	movs	r2, #1
 8006a42:	701a      	strb	r2, [r3, #0]
					mois++;
 8006a44:	4b28      	ldr	r3, [pc, #160]	@ (8006ae8 <updatedate+0x278>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	4b26      	ldr	r3, [pc, #152]	@ (8006ae8 <updatedate+0x278>)
 8006a4e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006a50:	4b26      	ldr	r3, [pc, #152]	@ (8006aec <updatedate+0x27c>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	4b24      	ldr	r3, [pc, #144]	@ (8006aec <updatedate+0x27c>)
 8006a5a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006a5c:	e06a      	b.n	8006b34 <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 8006a5e:	4b21      	ldr	r3, [pc, #132]	@ (8006ae4 <updatedate+0x274>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b1e      	cmp	r3, #30
 8006a64:	d968      	bls.n	8006b38 <updatedate+0x2c8>
					JOURS=1;
 8006a66:	4b1f      	ldr	r3, [pc, #124]	@ (8006ae4 <updatedate+0x274>)
 8006a68:	2201      	movs	r2, #1
 8006a6a:	701a      	strb	r2, [r3, #0]
					mois++;
 8006a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ae8 <updatedate+0x278>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	3301      	adds	r3, #1
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	4b1c      	ldr	r3, [pc, #112]	@ (8006ae8 <updatedate+0x278>)
 8006a76:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006a78:	4b1c      	ldr	r3, [pc, #112]	@ (8006aec <updatedate+0x27c>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	4b1a      	ldr	r3, [pc, #104]	@ (8006aec <updatedate+0x27c>)
 8006a82:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006a84:	e058      	b.n	8006b38 <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 8006a86:	4b17      	ldr	r3, [pc, #92]	@ (8006ae4 <updatedate+0x274>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b1f      	cmp	r3, #31
 8006a8c:	d956      	bls.n	8006b3c <updatedate+0x2cc>
					JOURS=1;
 8006a8e:	4b15      	ldr	r3, [pc, #84]	@ (8006ae4 <updatedate+0x274>)
 8006a90:	2201      	movs	r2, #1
 8006a92:	701a      	strb	r2, [r3, #0]
					mois++;
 8006a94:	4b14      	ldr	r3, [pc, #80]	@ (8006ae8 <updatedate+0x278>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	4b12      	ldr	r3, [pc, #72]	@ (8006ae8 <updatedate+0x278>)
 8006a9e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006aa0:	4b12      	ldr	r3, [pc, #72]	@ (8006aec <updatedate+0x27c>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	4b10      	ldr	r3, [pc, #64]	@ (8006aec <updatedate+0x27c>)
 8006aaa:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006aac:	e046      	b.n	8006b3c <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 8006aae:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae4 <updatedate+0x274>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b1e      	cmp	r3, #30
 8006ab4:	d944      	bls.n	8006b40 <updatedate+0x2d0>
					JOURS=1;
 8006ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae4 <updatedate+0x274>)
 8006ab8:	2201      	movs	r2, #1
 8006aba:	701a      	strb	r2, [r3, #0]
					mois++;
 8006abc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae8 <updatedate+0x278>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	4b08      	ldr	r3, [pc, #32]	@ (8006ae8 <updatedate+0x278>)
 8006ac6:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006ac8:	4b08      	ldr	r3, [pc, #32]	@ (8006aec <updatedate+0x27c>)
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	3301      	adds	r3, #1
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	4b06      	ldr	r3, [pc, #24]	@ (8006aec <updatedate+0x27c>)
 8006ad2:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006ad4:	e034      	b.n	8006b40 <updatedate+0x2d0>
 8006ad6:	bf00      	nop
 8006ad8:	20000b7c 	.word	0x20000b7c
 8006adc:	20000b7e 	.word	0x20000b7e
 8006ae0:	20000b7d 	.word	0x20000b7d
 8006ae4:	20000010 	.word	0x20000010
 8006ae8:	20000b7f 	.word	0x20000b7f
 8006aec:	20000011 	.word	0x20000011
	case DECEMBRE:
		if(JOURS>31){
 8006af0:	4b1f      	ldr	r3, [pc, #124]	@ (8006b70 <updatedate+0x300>)
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	2b1f      	cmp	r3, #31
 8006af6:	d925      	bls.n	8006b44 <updatedate+0x2d4>
					JOURS=1;
 8006af8:	4b1d      	ldr	r3, [pc, #116]	@ (8006b70 <updatedate+0x300>)
 8006afa:	2201      	movs	r2, #1
 8006afc:	701a      	strb	r2, [r3, #0]
					mois++;
 8006afe:	4b1d      	ldr	r3, [pc, #116]	@ (8006b74 <updatedate+0x304>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	3301      	adds	r3, #1
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	4b1b      	ldr	r3, [pc, #108]	@ (8006b74 <updatedate+0x304>)
 8006b08:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8006b78 <updatedate+0x308>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	4b19      	ldr	r3, [pc, #100]	@ (8006b78 <updatedate+0x308>)
 8006b14:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006b16:	e015      	b.n	8006b44 <updatedate+0x2d4>
		break;
 8006b18:	bf00      	nop
 8006b1a:	e014      	b.n	8006b46 <updatedate+0x2d6>
		break;
 8006b1c:	bf00      	nop
 8006b1e:	e012      	b.n	8006b46 <updatedate+0x2d6>
		break;
 8006b20:	bf00      	nop
 8006b22:	e010      	b.n	8006b46 <updatedate+0x2d6>
		break;
 8006b24:	bf00      	nop
 8006b26:	e00e      	b.n	8006b46 <updatedate+0x2d6>
		break;
 8006b28:	bf00      	nop
 8006b2a:	e00c      	b.n	8006b46 <updatedate+0x2d6>
		break;
 8006b2c:	bf00      	nop
 8006b2e:	e00a      	b.n	8006b46 <updatedate+0x2d6>
		break;
 8006b30:	bf00      	nop
 8006b32:	e008      	b.n	8006b46 <updatedate+0x2d6>
		break;
 8006b34:	bf00      	nop
 8006b36:	e006      	b.n	8006b46 <updatedate+0x2d6>
		break;
 8006b38:	bf00      	nop
 8006b3a:	e004      	b.n	8006b46 <updatedate+0x2d6>
		break;
 8006b3c:	bf00      	nop
 8006b3e:	e002      	b.n	8006b46 <updatedate+0x2d6>
		break;
 8006b40:	bf00      	nop
 8006b42:	e000      	b.n	8006b46 <updatedate+0x2d6>
		break;
 8006b44:	bf00      	nop

	}

	if(MOIS>12){
 8006b46:	4b0c      	ldr	r3, [pc, #48]	@ (8006b78 <updatedate+0x308>)
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b0c      	cmp	r3, #12
 8006b4c:	d90b      	bls.n	8006b66 <updatedate+0x2f6>
		mois=JANVIER;
 8006b4e:	4b09      	ldr	r3, [pc, #36]	@ (8006b74 <updatedate+0x304>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 8006b54:	4b08      	ldr	r3, [pc, #32]	@ (8006b78 <updatedate+0x308>)
 8006b56:	2201      	movs	r2, #1
 8006b58:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 8006b5a:	4b08      	ldr	r3, [pc, #32]	@ (8006b7c <updatedate+0x30c>)
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	4b06      	ldr	r3, [pc, #24]	@ (8006b7c <updatedate+0x30c>)
 8006b64:	801a      	strh	r2, [r3, #0]
	}
}
 8006b66:	bf00      	nop
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	20000010 	.word	0x20000010
 8006b74:	20000b7f 	.word	0x20000b7f
 8006b78:	20000011 	.word	0x20000011
 8006b7c:	20000012 	.word	0x20000012

08006b80 <LL_AHB2_GRP1_EnableClock>:
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
}
 8006ba6:	bf00      	nop
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <LL_APB1_GRP2_EnableClock>:
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b085      	sub	sp, #20
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8006bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006bc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8006bca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
}
 8006bd8:	bf00      	nop
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <LL_APB1_GRP2_DisableClock>:
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8006bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bf0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	43db      	mvns	r3, r3
 8006bf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	65cb      	str	r3, [r1, #92]	@ 0x5c
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <LL_APB2_GRP1_EnableClock>:
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c16:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006c18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c26:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
}
 8006c30:	bf00      	nop
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8006c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	43db      	mvns	r3, r3
 8006c4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c52:	4013      	ands	r3, r2
 8006c54:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
	...

08006c64 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006c68:	4b22      	ldr	r3, [pc, #136]	@ (8006cf4 <MX_LPUART1_UART_Init+0x90>)
 8006c6a:	4a23      	ldr	r2, [pc, #140]	@ (8006cf8 <MX_LPUART1_UART_Init+0x94>)
 8006c6c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8006c6e:	4b21      	ldr	r3, [pc, #132]	@ (8006cf4 <MX_LPUART1_UART_Init+0x90>)
 8006c70:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006c74:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006c76:	4b1f      	ldr	r3, [pc, #124]	@ (8006cf4 <MX_LPUART1_UART_Init+0x90>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006cf4 <MX_LPUART1_UART_Init+0x90>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006c82:	4b1c      	ldr	r3, [pc, #112]	@ (8006cf4 <MX_LPUART1_UART_Init+0x90>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006c88:	4b1a      	ldr	r3, [pc, #104]	@ (8006cf4 <MX_LPUART1_UART_Init+0x90>)
 8006c8a:	220c      	movs	r2, #12
 8006c8c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c8e:	4b19      	ldr	r3, [pc, #100]	@ (8006cf4 <MX_LPUART1_UART_Init+0x90>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006c94:	4b17      	ldr	r3, [pc, #92]	@ (8006cf4 <MX_LPUART1_UART_Init+0x90>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006c9a:	4b16      	ldr	r3, [pc, #88]	@ (8006cf4 <MX_LPUART1_UART_Init+0x90>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006ca0:	4b14      	ldr	r3, [pc, #80]	@ (8006cf4 <MX_LPUART1_UART_Init+0x90>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8006ca6:	4b13      	ldr	r3, [pc, #76]	@ (8006cf4 <MX_LPUART1_UART_Init+0x90>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006cac:	4811      	ldr	r0, [pc, #68]	@ (8006cf4 <MX_LPUART1_UART_Init+0x90>)
 8006cae:	f008 fc13 	bl	800f4d8 <HAL_UART_Init>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8006cb8:	f7fc f810 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	480d      	ldr	r0, [pc, #52]	@ (8006cf4 <MX_LPUART1_UART_Init+0x90>)
 8006cc0:	f00a f818 	bl	8010cf4 <HAL_UARTEx_SetTxFifoThreshold>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006cca:	f7fc f807 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006cce:	2100      	movs	r1, #0
 8006cd0:	4808      	ldr	r0, [pc, #32]	@ (8006cf4 <MX_LPUART1_UART_Init+0x90>)
 8006cd2:	f00a f84d 	bl	8010d70 <HAL_UARTEx_SetRxFifoThreshold>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006cdc:	f7fb fffe 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8006ce0:	4804      	ldr	r0, [pc, #16]	@ (8006cf4 <MX_LPUART1_UART_Init+0x90>)
 8006ce2:	f009 ffce 	bl	8010c82 <HAL_UARTEx_DisableFifoMode>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006cec:	f7fb fff6 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006cf0:	bf00      	nop
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	200012d0 	.word	0x200012d0
 8006cf8:	40008000 	.word	0x40008000

08006cfc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006d00:	4b22      	ldr	r3, [pc, #136]	@ (8006d8c <MX_USART1_UART_Init+0x90>)
 8006d02:	4a23      	ldr	r2, [pc, #140]	@ (8006d90 <MX_USART1_UART_Init+0x94>)
 8006d04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006d06:	4b21      	ldr	r3, [pc, #132]	@ (8006d8c <MX_USART1_UART_Init+0x90>)
 8006d08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006d0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8006d8c <MX_USART1_UART_Init+0x90>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006d14:	4b1d      	ldr	r3, [pc, #116]	@ (8006d8c <MX_USART1_UART_Init+0x90>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8006d8c <MX_USART1_UART_Init+0x90>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006d20:	4b1a      	ldr	r3, [pc, #104]	@ (8006d8c <MX_USART1_UART_Init+0x90>)
 8006d22:	220c      	movs	r2, #12
 8006d24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d26:	4b19      	ldr	r3, [pc, #100]	@ (8006d8c <MX_USART1_UART_Init+0x90>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d2c:	4b17      	ldr	r3, [pc, #92]	@ (8006d8c <MX_USART1_UART_Init+0x90>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006d32:	4b16      	ldr	r3, [pc, #88]	@ (8006d8c <MX_USART1_UART_Init+0x90>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006d38:	4b14      	ldr	r3, [pc, #80]	@ (8006d8c <MX_USART1_UART_Init+0x90>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006d3e:	4b13      	ldr	r3, [pc, #76]	@ (8006d8c <MX_USART1_UART_Init+0x90>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006d44:	4811      	ldr	r0, [pc, #68]	@ (8006d8c <MX_USART1_UART_Init+0x90>)
 8006d46:	f008 fbc7 	bl	800f4d8 <HAL_UART_Init>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006d50:	f7fb ffc4 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006d54:	2100      	movs	r1, #0
 8006d56:	480d      	ldr	r0, [pc, #52]	@ (8006d8c <MX_USART1_UART_Init+0x90>)
 8006d58:	f009 ffcc 	bl	8010cf4 <HAL_UARTEx_SetTxFifoThreshold>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006d62:	f7fb ffbb 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006d66:	2100      	movs	r1, #0
 8006d68:	4808      	ldr	r0, [pc, #32]	@ (8006d8c <MX_USART1_UART_Init+0x90>)
 8006d6a:	f00a f801 	bl	8010d70 <HAL_UARTEx_SetRxFifoThreshold>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006d74:	f7fb ffb2 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006d78:	4804      	ldr	r0, [pc, #16]	@ (8006d8c <MX_USART1_UART_Init+0x90>)
 8006d7a:	f009 ff82 	bl	8010c82 <HAL_UARTEx_DisableFifoMode>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006d84:	f7fb ffaa 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006d88:	bf00      	nop
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20001364 	.word	0x20001364
 8006d90:	40013800 	.word	0x40013800

08006d94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b09c      	sub	sp, #112	@ 0x70
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006da0:	2200      	movs	r2, #0
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	605a      	str	r2, [r3, #4]
 8006da6:	609a      	str	r2, [r3, #8]
 8006da8:	60da      	str	r2, [r3, #12]
 8006daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006dac:	f107 030c 	add.w	r3, r7, #12
 8006db0:	2250      	movs	r2, #80	@ 0x50
 8006db2:	2100      	movs	r1, #0
 8006db4:	4618      	mov	r0, r3
 8006db6:	f014 fac0 	bl	801b33a <memset>
  if(uartHandle->Instance==LPUART1)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a46      	ldr	r2, [pc, #280]	@ (8006ed8 <HAL_UART_MspInit+0x144>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d158      	bne.n	8006e76 <HAL_UART_MspInit+0xe2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8006dc8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006dce:	f107 030c 	add.w	r3, r7, #12
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f006 f8a3 	bl	800cf1e <HAL_RCCEx_PeriphCLKConfig>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006dde:	f7fb ff7d 	bl	8002cdc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006de2:	2001      	movs	r0, #1
 8006de4:	f7ff fee5 	bl	8006bb2 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006de8:	2001      	movs	r0, #1
 8006dea:	f7ff fec9 	bl	8006b80 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006dee:	230c      	movs	r3, #12
 8006df0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006df2:	2302      	movs	r3, #2
 8006df4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8006dfe:	2308      	movs	r3, #8
 8006e00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e02:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006e06:	4619      	mov	r1, r3
 8006e08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006e0c:	f001 ffe0 	bl	8008dd0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8006e10:	4b32      	ldr	r3, [pc, #200]	@ (8006edc <HAL_UART_MspInit+0x148>)
 8006e12:	4a33      	ldr	r2, [pc, #204]	@ (8006ee0 <HAL_UART_MspInit+0x14c>)
 8006e14:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8006e16:	4b31      	ldr	r3, [pc, #196]	@ (8006edc <HAL_UART_MspInit+0x148>)
 8006e18:	2210      	movs	r2, #16
 8006e1a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8006edc <HAL_UART_MspInit+0x148>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e22:	4b2e      	ldr	r3, [pc, #184]	@ (8006edc <HAL_UART_MspInit+0x148>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006e28:	4b2c      	ldr	r3, [pc, #176]	@ (8006edc <HAL_UART_MspInit+0x148>)
 8006e2a:	2280      	movs	r2, #128	@ 0x80
 8006e2c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8006edc <HAL_UART_MspInit+0x148>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e34:	4b29      	ldr	r3, [pc, #164]	@ (8006edc <HAL_UART_MspInit+0x148>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8006e3a:	4b28      	ldr	r3, [pc, #160]	@ (8006edc <HAL_UART_MspInit+0x148>)
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006e40:	4b26      	ldr	r3, [pc, #152]	@ (8006edc <HAL_UART_MspInit+0x148>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8006e46:	4825      	ldr	r0, [pc, #148]	@ (8006edc <HAL_UART_MspInit+0x148>)
 8006e48:	f001 fbee 	bl	8008628 <HAL_DMA_Init>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8006e52:	f7fb ff43 	bl	8002cdc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a20      	ldr	r2, [pc, #128]	@ (8006edc <HAL_UART_MspInit+0x148>)
 8006e5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8006edc <HAL_UART_MspInit+0x148>)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 8006e64:	2200      	movs	r2, #0
 8006e66:	2102      	movs	r1, #2
 8006e68:	2025      	movs	r0, #37	@ 0x25
 8006e6a:	f001 fb7e 	bl	800856a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8006e6e:	2025      	movs	r0, #37	@ 0x25
 8006e70:	f001 fb95 	bl	800859e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006e74:	e02b      	b.n	8006ece <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART1)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ee4 <HAL_UART_MspInit+0x150>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d126      	bne.n	8006ece <HAL_UART_MspInit+0x13a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006e80:	2301      	movs	r3, #1
 8006e82:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006e84:	2300      	movs	r3, #0
 8006e86:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006e88:	f107 030c 	add.w	r3, r7, #12
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f006 f846 	bl	800cf1e <HAL_RCCEx_PeriphCLKConfig>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <HAL_UART_MspInit+0x108>
      Error_Handler();
 8006e98:	f7fb ff20 	bl	8002cdc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006e9c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006ea0:	f7ff feb3 	bl	8006c0a <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ea4:	2001      	movs	r0, #1
 8006ea6:	f7ff fe6b 	bl	8006b80 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006eaa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006eae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006ebc:	2307      	movs	r3, #7
 8006ebe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ec0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006eca:	f001 ff81 	bl	8008dd0 <HAL_GPIO_Init>
}
 8006ece:	bf00      	nop
 8006ed0:	3770      	adds	r7, #112	@ 0x70
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40008000 	.word	0x40008000
 8006edc:	200013f8 	.word	0x200013f8
 8006ee0:	4002001c 	.word	0x4002001c
 8006ee4:	40013800 	.word	0x40013800

08006ee8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a13      	ldr	r2, [pc, #76]	@ (8006f44 <HAL_UART_MspDeInit+0x5c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d111      	bne.n	8006f1e <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8006efa:	2001      	movs	r0, #1
 8006efc:	f7ff fe72 	bl	8006be4 <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8006f00:	210c      	movs	r1, #12
 8006f02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006f06:	f002 f8d3 	bl	80090b0 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f10:	4618      	mov	r0, r3
 8006f12:	f001 fc31 	bl	8008778 <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8006f16:	2025      	movs	r0, #37	@ 0x25
 8006f18:	f001 fb4f 	bl	80085ba <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8006f1c:	e00e      	b.n	8006f3c <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART1)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a09      	ldr	r2, [pc, #36]	@ (8006f48 <HAL_UART_MspDeInit+0x60>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d109      	bne.n	8006f3c <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART1_CLK_DISABLE();
 8006f28:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006f2c:	f7ff fe86 	bl	8006c3c <LL_APB2_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006f30:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006f34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006f38:	f002 f8ba 	bl	80090b0 <HAL_GPIO_DeInit>
}
 8006f3c:	bf00      	nop
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	40008000 	.word	0x40008000
 8006f48:	40013800 	.word	0x40013800

08006f4c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]

	oldPos = newPos; //keep track of the last position in the buffer
 8006f54:	4b3a      	ldr	r3, [pc, #232]	@ (8007040 <HAL_UART_RxCpltCallback+0xf4>)
 8006f56:	881a      	ldrh	r2, [r3, #0]
 8006f58:	4b3a      	ldr	r3, [pc, #232]	@ (8007044 <HAL_UART_RxCpltCallback+0xf8>)
 8006f5a:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8006f5c:	4b39      	ldr	r3, [pc, #228]	@ (8007044 <HAL_UART_RxCpltCallback+0xf8>)
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8006f64:	d922      	bls.n	8006fac <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 8006f66:	4b37      	ldr	r3, [pc, #220]	@ (8007044 <HAL_UART_RxCpltCallback+0xf8>)
 8006f68:	881b      	ldrh	r3, [r3, #0]
 8006f6a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006f6e:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8006f70:	4b34      	ldr	r3, [pc, #208]	@ (8007044 <HAL_UART_RxCpltCallback+0xf8>)
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	461a      	mov	r2, r3
 8006f76:	4b34      	ldr	r3, [pc, #208]	@ (8007048 <HAL_UART_RxCpltCallback+0xfc>)
 8006f78:	4413      	add	r3, r2
 8006f7a:	89fa      	ldrh	r2, [r7, #14]
 8006f7c:	4933      	ldr	r1, [pc, #204]	@ (800704c <HAL_UART_RxCpltCallback+0x100>)
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f014 faf7 	bl	801b572 <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8006f84:	4b2f      	ldr	r3, [pc, #188]	@ (8007044 <HAL_UART_RxCpltCallback+0xf8>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8006f8a:	89fb      	ldrh	r3, [r7, #14]
 8006f8c:	4a2f      	ldr	r2, [pc, #188]	@ (800704c <HAL_UART_RxCpltCallback+0x100>)
 8006f8e:	1899      	adds	r1, r3, r2
 8006f90:	89fb      	ldrh	r3, [r7, #14]
 8006f92:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8006f96:	461a      	mov	r2, r3
 8006f98:	482b      	ldr	r0, [pc, #172]	@ (8007048 <HAL_UART_RxCpltCallback+0xfc>)
 8006f9a:	f014 faea 	bl	801b572 <memcpy>
				newPos = (64-datatocopy);  // update the position
 8006f9e:	89fb      	ldrh	r3, [r7, #14]
 8006fa0:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	4b26      	ldr	r3, [pc, #152]	@ (8007040 <HAL_UART_RxCpltCallback+0xf4>)
 8006fa8:	801a      	strh	r2, [r3, #0]
 8006faa:	e01e      	b.n	8006fea <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8006fac:	4b25      	ldr	r3, [pc, #148]	@ (8007044 <HAL_UART_RxCpltCallback+0xf8>)
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4b25      	ldr	r3, [pc, #148]	@ (8007048 <HAL_UART_RxCpltCallback+0xfc>)
 8006fb4:	441a      	add	r2, r3
 8006fb6:	4b25      	ldr	r3, [pc, #148]	@ (800704c <HAL_UART_RxCpltCallback+0x100>)
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	f8d1 c000 	ldr.w	ip, [r1]
 8006fc6:	684e      	ldr	r6, [r1, #4]
 8006fc8:	688d      	ldr	r5, [r1, #8]
 8006fca:	68c9      	ldr	r1, [r1, #12]
 8006fcc:	f8c2 c000 	str.w	ip, [r2]
 8006fd0:	6056      	str	r6, [r2, #4]
 8006fd2:	6095      	str	r5, [r2, #8]
 8006fd4:	60d1      	str	r1, [r2, #12]
 8006fd6:	3310      	adds	r3, #16
 8006fd8:	3010      	adds	r0, #16
 8006fda:	42a3      	cmp	r3, r4
 8006fdc:	d1ef      	bne.n	8006fbe <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 8006fde:	4b19      	ldr	r3, [pc, #100]	@ (8007044 <HAL_UART_RxCpltCallback+0xf8>)
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	3340      	adds	r3, #64	@ 0x40
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	4b16      	ldr	r3, [pc, #88]	@ (8007040 <HAL_UART_RxCpltCallback+0xf4>)
 8006fe8:	801a      	strh	r2, [r3, #0]

			}


			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 8006fea:	2240      	movs	r2, #64	@ 0x40
 8006fec:	4917      	ldr	r1, [pc, #92]	@ (800704c <HAL_UART_RxCpltCallback+0x100>)
 8006fee:	4818      	ldr	r0, [pc, #96]	@ (8007050 <HAL_UART_RxCpltCallback+0x104>)
 8006ff0:	f008 fb02 	bl	800f5f8 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8006ff4:	4b17      	ldr	r3, [pc, #92]	@ (8007054 <HAL_UART_RxCpltCallback+0x108>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	4b16      	ldr	r3, [pc, #88]	@ (8007054 <HAL_UART_RxCpltCallback+0x108>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 0204 	bic.w	r2, r2, #4
 8007002:	601a      	str	r2, [r3, #0]
			memcpy((uint8_t *) receivedtrame,(uint8_t *)RxBuffer,64);
 8007004:	4a14      	ldr	r2, [pc, #80]	@ (8007058 <HAL_UART_RxCpltCallback+0x10c>)
 8007006:	4b11      	ldr	r3, [pc, #68]	@ (800704c <HAL_UART_RxCpltCallback+0x100>)
 8007008:	4610      	mov	r0, r2
 800700a:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800700e:	4602      	mov	r2, r0
 8007010:	4619      	mov	r1, r3
 8007012:	f8d1 c000 	ldr.w	ip, [r1]
 8007016:	684e      	ldr	r6, [r1, #4]
 8007018:	688d      	ldr	r5, [r1, #8]
 800701a:	68c9      	ldr	r1, [r1, #12]
 800701c:	f8c2 c000 	str.w	ip, [r2]
 8007020:	6056      	str	r6, [r2, #4]
 8007022:	6095      	str	r5, [r2, #8]
 8007024:	60d1      	str	r1, [r2, #12]
 8007026:	3310      	adds	r3, #16
 8007028:	3010      	adds	r0, #16
 800702a:	42a3      	cmp	r3, r4
 800702c:	d1ef      	bne.n	800700e <HAL_UART_RxCpltCallback+0xc2>


	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 800702e:	2240      	movs	r2, #64	@ 0x40
 8007030:	4906      	ldr	r1, [pc, #24]	@ (800704c <HAL_UART_RxCpltCallback+0x100>)
 8007032:	4807      	ldr	r0, [pc, #28]	@ (8007050 <HAL_UART_RxCpltCallback+0x104>)
 8007034:	f008 fae0 	bl	800f5f8 <HAL_UART_Receive_DMA>
}
 8007038:	bf00      	nop
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007040:	200005dc 	.word	0x200005dc
 8007044:	200005da 	.word	0x200005da
 8007048:	20000620 	.word	0x20000620
 800704c:	200005e0 	.word	0x200005e0
 8007050:	200012d0 	.word	0x200012d0
 8007054:	200013f8 	.word	0x200013f8
 8007058:	20000ca0 	.word	0x20000ca0

0800705c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800705c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800705e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007060:	3304      	adds	r3, #4

08007062 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007062:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007064:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8007066:	d3f9      	bcc.n	800705c <CopyDataInit>
  bx lr
 8007068:	4770      	bx	lr

0800706a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800706a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800706c:	3004      	adds	r0, #4

0800706e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800706e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8007070:	d3fb      	bcc.n	800706a <FillZerobss>
  bx lr
 8007072:	4770      	bx	lr

08007074 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007074:	480c      	ldr	r0, [pc, #48]	@ (80070a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007076:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007078:	f7ff faa0 	bl	80065bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800707c:	480b      	ldr	r0, [pc, #44]	@ (80070ac <LoopForever+0x6>)
 800707e:	490c      	ldr	r1, [pc, #48]	@ (80070b0 <LoopForever+0xa>)
 8007080:	4a0c      	ldr	r2, [pc, #48]	@ (80070b4 <LoopForever+0xe>)
 8007082:	2300      	movs	r3, #0
 8007084:	f7ff ffed 	bl	8007062 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007088:	480b      	ldr	r0, [pc, #44]	@ (80070b8 <LoopForever+0x12>)
 800708a:	490c      	ldr	r1, [pc, #48]	@ (80070bc <LoopForever+0x16>)
 800708c:	4a0c      	ldr	r2, [pc, #48]	@ (80070c0 <LoopForever+0x1a>)
 800708e:	2300      	movs	r3, #0
 8007090:	f7ff ffe7 	bl	8007062 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8007094:	480b      	ldr	r0, [pc, #44]	@ (80070c4 <LoopForever+0x1e>)
 8007096:	490c      	ldr	r1, [pc, #48]	@ (80070c8 <LoopForever+0x22>)
 8007098:	2300      	movs	r3, #0
 800709a:	f7ff ffe8 	bl	800706e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800709e:	f014 fa39 	bl	801b514 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80070a2:	f7fb fcc3 	bl	8002a2c <main>

080070a6 <LoopForever>:

LoopForever:
  b LoopForever
 80070a6:	e7fe      	b.n	80070a6 <LoopForever>
  ldr   r0, =_estack
 80070a8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80070ac:	20000008 	.word	0x20000008
 80070b0:	20000320 	.word	0x20000320
 80070b4:	080224b8 	.word	0x080224b8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80070b8:	200301e4 	.word	0x200301e4
 80070bc:	20030a67 	.word	0x20030a67
 80070c0:	08022816 	.word	0x08022816
  INIT_BSS _sbss, _ebss
 80070c4:	20000370 	.word	0x20000370
 80070c8:	20003134 	.word	0x20003134

080070cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80070cc:	e7fe      	b.n	80070cc <ADC1_IRQHandler>
	...

080070d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80070da:	4b0c      	ldr	r3, [pc, #48]	@ (800710c <HAL_Init+0x3c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a0b      	ldr	r2, [pc, #44]	@ (800710c <HAL_Init+0x3c>)
 80070e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070e6:	2003      	movs	r0, #3
 80070e8:	f001 fa34 	bl	8008554 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80070ec:	200f      	movs	r0, #15
 80070ee:	f000 f80f 	bl	8007110 <HAL_InitTick>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	71fb      	strb	r3, [r7, #7]
 80070fc:	e001      	b.n	8007102 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80070fe:	f7ff f886 	bl	800620e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007102:	79fb      	ldrb	r3, [r7, #7]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	58004000 	.word	0x58004000

08007110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800711c:	4b17      	ldr	r3, [pc, #92]	@ (800717c <HAL_InitTick+0x6c>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d024      	beq.n	800716e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007124:	f005 fc6a 	bl	800c9fc <HAL_RCC_GetHCLKFreq>
 8007128:	4602      	mov	r2, r0
 800712a:	4b14      	ldr	r3, [pc, #80]	@ (800717c <HAL_InitTick+0x6c>)
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	4619      	mov	r1, r3
 8007130:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007134:	fbb3 f3f1 	udiv	r3, r3, r1
 8007138:	fbb2 f3f3 	udiv	r3, r2, r3
 800713c:	4618      	mov	r0, r3
 800713e:	f001 fa4a 	bl	80085d6 <HAL_SYSTICK_Config>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10f      	bne.n	8007168 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b0f      	cmp	r3, #15
 800714c:	d809      	bhi.n	8007162 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800714e:	2200      	movs	r2, #0
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	f04f 30ff 	mov.w	r0, #4294967295
 8007156:	f001 fa08 	bl	800856a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800715a:	4a09      	ldr	r2, [pc, #36]	@ (8007180 <HAL_InitTick+0x70>)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	e007      	b.n	8007172 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	73fb      	strb	r3, [r7, #15]
 8007166:	e004      	b.n	8007172 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	73fb      	strb	r3, [r7, #15]
 800716c:	e001      	b.n	8007172 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007172:	7bfb      	ldrb	r3, [r7, #15]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	20000034 	.word	0x20000034
 8007180:	20000030 	.word	0x20000030

08007184 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007188:	4b06      	ldr	r3, [pc, #24]	@ (80071a4 <HAL_IncTick+0x20>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	461a      	mov	r2, r3
 800718e:	4b06      	ldr	r3, [pc, #24]	@ (80071a8 <HAL_IncTick+0x24>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4413      	add	r3, r2
 8007194:	4a04      	ldr	r2, [pc, #16]	@ (80071a8 <HAL_IncTick+0x24>)
 8007196:	6013      	str	r3, [r2, #0]
}
 8007198:	bf00      	nop
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	20000034 	.word	0x20000034
 80071a8:	20001458 	.word	0x20001458

080071ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0
  return uwTick;
 80071b0:	4b03      	ldr	r3, [pc, #12]	@ (80071c0 <HAL_GetTick+0x14>)
 80071b2:	681b      	ldr	r3, [r3, #0]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20001458 	.word	0x20001458

080071c4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80071c4:	b480      	push	{r7}
 80071c6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80071c8:	4b03      	ldr	r3, [pc, #12]	@ (80071d8 <HAL_GetTickPrio+0x14>)
 80071ca:	681b      	ldr	r3, [r3, #0]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	20000030 	.word	0x20000030

080071dc <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80071dc:	b480      	push	{r7}
 80071de:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80071e0:	4b03      	ldr	r3, [pc, #12]	@ (80071f0 <HAL_GetTickFreq+0x14>)
 80071e2:	781b      	ldrb	r3, [r3, #0]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	20000034 	.word	0x20000034

080071f4 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	431a      	orrs	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800720e:	bf00      	nop
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	609a      	str	r2, [r3, #8]
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8007250:	4618      	mov	r0, r3
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3360      	adds	r3, #96	@ 0x60
 800726e:	461a      	mov	r2, r3
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	4b08      	ldr	r3, [pc, #32]	@ (80072a0 <LL_ADC_SetOffset+0x44>)
 800727e:	4013      	ands	r3, r2
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	4313      	orrs	r3, r2
 800728c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007294:	bf00      	nop
 8007296:	371c      	adds	r7, #28
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	03fff000 	.word	0x03fff000

080072a4 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	3360      	adds	r3, #96	@ 0x60
 80072b2:	461a      	mov	r2, r3
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	3360      	adds	r3, #96	@ 0x60
 80072e0:	461a      	mov	r2, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	431a      	orrs	r2, r3
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8007306:	b480      	push	{r7}
 8007308:	b083      	sub	sp, #12
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800731a:	2301      	movs	r3, #1
 800731c:	e000      	b.n	8007320 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800731e:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3330      	adds	r3, #48	@ 0x30
 800733c:	461a      	mov	r2, r3
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	0a1b      	lsrs	r3, r3, #8
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	f003 030c 	and.w	r3, r3, #12
 8007348:	4413      	add	r3, r2
 800734a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f003 031f 	and.w	r3, r3, #31
 8007356:	211f      	movs	r1, #31
 8007358:	fa01 f303 	lsl.w	r3, r1, r3
 800735c:	43db      	mvns	r3, r3
 800735e:	401a      	ands	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	0e9b      	lsrs	r3, r3, #26
 8007364:	f003 011f 	and.w	r1, r3, #31
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f003 031f 	and.w	r3, r3, #31
 800736e:	fa01 f303 	lsl.w	r3, r1, r3
 8007372:	431a      	orrs	r2, r3
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007378:	bf00      	nop
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3314      	adds	r3, #20
 8007394:	461a      	mov	r2, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	0e5b      	lsrs	r3, r3, #25
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	4413      	add	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	0d1b      	lsrs	r3, r3, #20
 80073ac:	f003 031f 	and.w	r3, r3, #31
 80073b0:	2107      	movs	r1, #7
 80073b2:	fa01 f303 	lsl.w	r3, r1, r3
 80073b6:	43db      	mvns	r3, r3
 80073b8:	401a      	ands	r2, r3
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	0d1b      	lsrs	r3, r3, #20
 80073be:	f003 031f 	and.w	r3, r3, #31
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	fa01 f303 	lsl.w	r3, r1, r3
 80073c8:	431a      	orrs	r2, r3
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80073ce:	bf00      	nop
 80073d0:	371c      	adds	r7, #28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
	...

080073dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073f4:	43db      	mvns	r3, r3
 80073f6:	401a      	ands	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f003 0318 	and.w	r3, r3, #24
 80073fe:	4908      	ldr	r1, [pc, #32]	@ (8007420 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007400:	40d9      	lsrs	r1, r3
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	400b      	ands	r3, r1
 8007406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800740a:	431a      	orrs	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8007412:	bf00      	nop
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	0007ffff 	.word	0x0007ffff

08007424 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8007434:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	6093      	str	r3, [r2, #8]
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007458:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800745c:	d101      	bne.n	8007462 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8007480:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007484:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074ac:	d101      	bne.n	80074b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e000      	b.n	80074b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80074d4:	f043 0201 	orr.w	r2, r3, #1
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d101      	bne.n	8007500 <LL_ADC_IsEnabled+0x18>
 80074fc:	2301      	movs	r3, #1
 80074fe:	e000      	b.n	8007502 <LL_ADC_IsEnabled+0x1a>
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800751e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007522:	f043 0204 	orr.w	r2, r3, #4
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f003 0304 	and.w	r3, r3, #4
 8007546:	2b04      	cmp	r3, #4
 8007548:	d101      	bne.n	800754e <LL_ADC_REG_IsConversionOngoing+0x18>
 800754a:	2301      	movs	r3, #1
 800754c:	e000      	b.n	8007550 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f003 0308 	and.w	r3, r3, #8
 800756c:	2b08      	cmp	r3, #8
 800756e:	d101      	bne.n	8007574 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007570:	2301      	movs	r3, #1
 8007572:	e000      	b.n	8007576 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
	...

08007584 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b088      	sub	sp, #32
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8007590:	2300      	movs	r3, #0
 8007592:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007594:	2300      	movs	r3, #0
 8007596:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e12e      	b.n	8007800 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d109      	bne.n	80075c4 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7f9 fd8f 	bl	80010d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff ff3d 	bl	8007448 <LL_ADC_IsDeepPowerDownEnabled>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d004      	beq.n	80075de <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4618      	mov	r0, r3
 80075da:	f7ff ff23 	bl	8007424 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7ff ff58 	bl	8007498 <LL_ADC_IsInternalRegulatorEnabled>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d115      	bne.n	800761a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7ff ff3c 	bl	8007470 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80075f8:	4b83      	ldr	r3, [pc, #524]	@ (8007808 <HAL_ADC_Init+0x284>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	099b      	lsrs	r3, r3, #6
 80075fe:	4a83      	ldr	r2, [pc, #524]	@ (800780c <HAL_ADC_Init+0x288>)
 8007600:	fba2 2303 	umull	r2, r3, r2, r3
 8007604:	099b      	lsrs	r3, r3, #6
 8007606:	3301      	adds	r3, #1
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800760c:	e002      	b.n	8007614 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	3b01      	subs	r3, #1
 8007612:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1f9      	bne.n	800760e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f7ff ff3a 	bl	8007498 <LL_ADC_IsInternalRegulatorEnabled>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10d      	bne.n	8007646 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800762e:	f043 0210 	orr.w	r2, r3, #16
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800763a:	f043 0201 	orr.w	r2, r3, #1
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4618      	mov	r0, r3
 800764c:	f7ff ff73 	bl	8007536 <LL_ADC_REG_IsConversionOngoing>
 8007650:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007656:	f003 0310 	and.w	r3, r3, #16
 800765a:	2b00      	cmp	r3, #0
 800765c:	f040 80c7 	bne.w	80077ee <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f040 80c3 	bne.w	80077ee <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800766c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007670:	f043 0202 	orr.w	r2, r3, #2
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff ff33 	bl	80074e8 <LL_ADC_IsEnabled>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10b      	bne.n	80076a0 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007688:	4861      	ldr	r0, [pc, #388]	@ (8007810 <HAL_ADC_Init+0x28c>)
 800768a:	f7ff ff2d 	bl	80074e8 <LL_ADC_IsEnabled>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d105      	bne.n	80076a0 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	4619      	mov	r1, r3
 800769a:	485e      	ldr	r0, [pc, #376]	@ (8007814 <HAL_ADC_Init+0x290>)
 800769c:	f7ff fdaa 	bl	80071f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	7e5b      	ldrb	r3, [r3, #25]
 80076a4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80076aa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80076b0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80076b6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076be:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80076c0:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d106      	bne.n	80076e0 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d6:	3b01      	subs	r3, #1
 80076d8:	045b      	lsls	r3, r3, #17
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	4313      	orrs	r3, r2
 80076de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d009      	beq.n	80076fc <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ec:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80076f6:	69ba      	ldr	r2, [r7, #24]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68da      	ldr	r2, [r3, #12]
 8007702:	4b45      	ldr	r3, [pc, #276]	@ (8007818 <HAL_ADC_Init+0x294>)
 8007704:	4013      	ands	r3, r2
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6812      	ldr	r2, [r2, #0]
 800770a:	69b9      	ldr	r1, [r7, #24]
 800770c:	430b      	orrs	r3, r1
 800770e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4618      	mov	r0, r3
 8007716:	f7ff ff0e 	bl	8007536 <LL_ADC_REG_IsConversionOngoing>
 800771a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff ff1b 	bl	800755c <LL_ADC_INJ_IsConversionOngoing>
 8007726:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d13d      	bne.n	80077aa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d13a      	bne.n	80077aa <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007738:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007740:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007742:	4313      	orrs	r3, r2
 8007744:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007750:	f023 0302 	bic.w	r3, r3, #2
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	69b9      	ldr	r1, [r7, #24]
 800775a:	430b      	orrs	r3, r1
 800775c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007764:	2b01      	cmp	r3, #1
 8007766:	d118      	bne.n	800779a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007772:	f023 0304 	bic.w	r3, r3, #4
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800777e:	4311      	orrs	r1, r2
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007784:	4311      	orrs	r1, r2
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800778a:	430a      	orrs	r2, r1
 800778c:	431a      	orrs	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0201 	orr.w	r2, r2, #1
 8007796:	611a      	str	r2, [r3, #16]
 8007798:	e007      	b.n	80077aa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	691a      	ldr	r2, [r3, #16]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0201 	bic.w	r2, r2, #1
 80077a8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d10c      	bne.n	80077cc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b8:	f023 010f 	bic.w	r1, r3, #15
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	1e5a      	subs	r2, r3, #1
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80077ca:	e007      	b.n	80077dc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 020f 	bic.w	r2, r2, #15
 80077da:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e0:	f023 0303 	bic.w	r3, r3, #3
 80077e4:	f043 0201 	orr.w	r2, r3, #1
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80077ec:	e007      	b.n	80077fe <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f2:	f043 0210 	orr.w	r2, r3, #16
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80077fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3720      	adds	r7, #32
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	2000002c 	.word	0x2000002c
 800780c:	053e2d63 	.word	0x053e2d63
 8007810:	50040000 	.word	0x50040000
 8007814:	50040300 	.word	0x50040300
 8007818:	fff0c007 	.word	0xfff0c007

0800781c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4618      	mov	r0, r3
 800782e:	f7ff fe82 	bl	8007536 <LL_ADC_REG_IsConversionOngoing>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d167      	bne.n	8007908 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800783e:	2b01      	cmp	r3, #1
 8007840:	d101      	bne.n	8007846 <HAL_ADC_Start_DMA+0x2a>
 8007842:	2302      	movs	r3, #2
 8007844:	e063      	b.n	800790e <HAL_ADC_Start_DMA+0xf2>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 fc42 	bl	80080d8 <ADC_Enable>
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d14f      	bne.n	80078fe <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007862:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007866:	f023 0301 	bic.w	r3, r3, #1
 800786a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007876:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d006      	beq.n	800788c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007882:	f023 0206 	bic.w	r2, r3, #6
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	659a      	str	r2, [r3, #88]	@ 0x58
 800788a:	e002      	b.n	8007892 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007896:	4a20      	ldr	r2, [pc, #128]	@ (8007918 <HAL_ADC_Start_DMA+0xfc>)
 8007898:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800789e:	4a1f      	ldr	r2, [pc, #124]	@ (800791c <HAL_ADC_Start_DMA+0x100>)
 80078a0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078a6:	4a1e      	ldr	r2, [pc, #120]	@ (8007920 <HAL_ADC_Start_DMA+0x104>)
 80078a8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	221c      	movs	r2, #28
 80078b0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f042 0210 	orr.w	r2, r2, #16
 80078c8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f042 0201 	orr.w	r2, r2, #1
 80078d8:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3340      	adds	r3, #64	@ 0x40
 80078e4:	4619      	mov	r1, r3
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f000 ffdb 	bl	80088a4 <HAL_DMA_Start_IT>
 80078ee:	4603      	mov	r3, r0
 80078f0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7ff fe09 	bl	800750e <LL_ADC_REG_StartConversion>
 80078fc:	e006      	b.n	800790c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007906:	e001      	b.n	800790c <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007908:	2302      	movs	r3, #2
 800790a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800790c:	7dfb      	ldrb	r3, [r7, #23]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	080081cd 	.word	0x080081cd
 800791c:	080082a5 	.word	0x080082a5
 8007920:	080082c1 	.word	0x080082c1

08007924 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b0b6      	sub	sp, #216	@ 0xd8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007966:	2b01      	cmp	r3, #1
 8007968:	d101      	bne.n	800796e <HAL_ADC_ConfigChannel+0x22>
 800796a:	2302      	movs	r3, #2
 800796c:	e39f      	b.n	80080ae <HAL_ADC_ConfigChannel+0x762>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4618      	mov	r0, r3
 800797c:	f7ff fddb 	bl	8007536 <LL_ADC_REG_IsConversionOngoing>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	f040 8384 	bne.w	8008090 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6818      	ldr	r0, [r3, #0]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	6859      	ldr	r1, [r3, #4]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	f7ff fcc9 	bl	800732c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff fdc9 	bl	8007536 <LL_ADC_REG_IsConversionOngoing>
 80079a4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7ff fdd5 	bl	800755c <LL_ADC_INJ_IsConversionOngoing>
 80079b2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80079b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f040 81a6 	bne.w	8007d0c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80079c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f040 81a1 	bne.w	8007d0c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6818      	ldr	r0, [r3, #0]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	6819      	ldr	r1, [r3, #0]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	461a      	mov	r2, r3
 80079d8:	f7ff fcd4 	bl	8007384 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	695a      	ldr	r2, [r3, #20]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	08db      	lsrs	r3, r3, #3
 80079e8:	f003 0303 	and.w	r3, r3, #3
 80079ec:	005b      	lsls	r3, r3, #1
 80079ee:	fa02 f303 	lsl.w	r3, r2, r3
 80079f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	d00a      	beq.n	8007a14 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6818      	ldr	r0, [r3, #0]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	6919      	ldr	r1, [r3, #16]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a0e:	f7ff fc25 	bl	800725c <LL_ADC_SetOffset>
 8007a12:	e17b      	b.n	8007d0c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2100      	movs	r1, #0
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7ff fc42 	bl	80072a4 <LL_ADC_GetOffsetChannel>
 8007a20:	4603      	mov	r3, r0
 8007a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10a      	bne.n	8007a40 <HAL_ADC_ConfigChannel+0xf4>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2100      	movs	r1, #0
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7ff fc37 	bl	80072a4 <LL_ADC_GetOffsetChannel>
 8007a36:	4603      	mov	r3, r0
 8007a38:	0e9b      	lsrs	r3, r3, #26
 8007a3a:	f003 021f 	and.w	r2, r3, #31
 8007a3e:	e01e      	b.n	8007a7e <HAL_ADC_ConfigChannel+0x132>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2100      	movs	r1, #0
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff fc2c 	bl	80072a4 <LL_ADC_GetOffsetChannel>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007a56:	fa93 f3a3 	rbit	r3, r3
 8007a5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8007a5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8007a66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8007a6e:	2320      	movs	r3, #32
 8007a70:	e004      	b.n	8007a7c <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8007a72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a76:	fab3 f383 	clz	r3, r3
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d105      	bne.n	8007a96 <HAL_ADC_ConfigChannel+0x14a>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	0e9b      	lsrs	r3, r3, #26
 8007a90:	f003 031f 	and.w	r3, r3, #31
 8007a94:	e018      	b.n	8007ac8 <HAL_ADC_ConfigChannel+0x17c>
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007aa2:	fa93 f3a3 	rbit	r3, r3
 8007aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8007aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007aae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8007ab2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8007aba:	2320      	movs	r3, #32
 8007abc:	e004      	b.n	8007ac8 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8007abe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ac2:	fab3 f383 	clz	r3, r3
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d106      	bne.n	8007ada <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7ff fbfb 	bl	80072d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2101      	movs	r1, #1
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7ff fbdf 	bl	80072a4 <LL_ADC_GetOffsetChannel>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10a      	bne.n	8007b06 <HAL_ADC_ConfigChannel+0x1ba>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2101      	movs	r1, #1
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7ff fbd4 	bl	80072a4 <LL_ADC_GetOffsetChannel>
 8007afc:	4603      	mov	r3, r0
 8007afe:	0e9b      	lsrs	r3, r3, #26
 8007b00:	f003 021f 	and.w	r2, r3, #31
 8007b04:	e01e      	b.n	8007b44 <HAL_ADC_ConfigChannel+0x1f8>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7ff fbc9 	bl	80072a4 <LL_ADC_GetOffsetChannel>
 8007b12:	4603      	mov	r3, r0
 8007b14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b1c:	fa93 f3a3 	rbit	r3, r3
 8007b20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007b24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007b2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8007b34:	2320      	movs	r3, #32
 8007b36:	e004      	b.n	8007b42 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8007b38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b3c:	fab3 f383 	clz	r3, r3
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	461a      	mov	r2, r3
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d105      	bne.n	8007b5c <HAL_ADC_ConfigChannel+0x210>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	0e9b      	lsrs	r3, r3, #26
 8007b56:	f003 031f 	and.w	r3, r3, #31
 8007b5a:	e018      	b.n	8007b8e <HAL_ADC_ConfigChannel+0x242>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b68:	fa93 f3a3 	rbit	r3, r3
 8007b6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007b70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007b74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8007b80:	2320      	movs	r3, #32
 8007b82:	e004      	b.n	8007b8e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8007b84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b88:	fab3 f383 	clz	r3, r3
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d106      	bne.n	8007ba0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2200      	movs	r2, #0
 8007b98:	2101      	movs	r1, #1
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7ff fb98 	bl	80072d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2102      	movs	r1, #2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7ff fb7c 	bl	80072a4 <LL_ADC_GetOffsetChannel>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10a      	bne.n	8007bcc <HAL_ADC_ConfigChannel+0x280>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2102      	movs	r1, #2
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7ff fb71 	bl	80072a4 <LL_ADC_GetOffsetChannel>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	0e9b      	lsrs	r3, r3, #26
 8007bc6:	f003 021f 	and.w	r2, r3, #31
 8007bca:	e01e      	b.n	8007c0a <HAL_ADC_ConfigChannel+0x2be>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2102      	movs	r1, #2
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7ff fb66 	bl	80072a4 <LL_ADC_GetOffsetChannel>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007be2:	fa93 f3a3 	rbit	r3, r3
 8007be6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007bea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007bf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8007bfa:	2320      	movs	r3, #32
 8007bfc:	e004      	b.n	8007c08 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8007bfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007c02:	fab3 f383 	clz	r3, r3
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	461a      	mov	r2, r3
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d105      	bne.n	8007c22 <HAL_ADC_ConfigChannel+0x2d6>
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	0e9b      	lsrs	r3, r3, #26
 8007c1c:	f003 031f 	and.w	r3, r3, #31
 8007c20:	e016      	b.n	8007c50 <HAL_ADC_ConfigChannel+0x304>
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007c2e:	fa93 f3a3 	rbit	r3, r3
 8007c32:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007c34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007c3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8007c42:	2320      	movs	r3, #32
 8007c44:	e004      	b.n	8007c50 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8007c46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c4a:	fab3 f383 	clz	r3, r3
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d106      	bne.n	8007c62 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2102      	movs	r1, #2
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff fb37 	bl	80072d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2103      	movs	r1, #3
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7ff fb1b 	bl	80072a4 <LL_ADC_GetOffsetChannel>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10a      	bne.n	8007c8e <HAL_ADC_ConfigChannel+0x342>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2103      	movs	r1, #3
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff fb10 	bl	80072a4 <LL_ADC_GetOffsetChannel>
 8007c84:	4603      	mov	r3, r0
 8007c86:	0e9b      	lsrs	r3, r3, #26
 8007c88:	f003 021f 	and.w	r2, r3, #31
 8007c8c:	e017      	b.n	8007cbe <HAL_ADC_ConfigChannel+0x372>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2103      	movs	r1, #3
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff fb05 	bl	80072a4 <LL_ADC_GetOffsetChannel>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ca0:	fa93 f3a3 	rbit	r3, r3
 8007ca4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8007ca6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ca8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8007caa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8007cb0:	2320      	movs	r3, #32
 8007cb2:	e003      	b.n	8007cbc <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8007cb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cb6:	fab3 f383 	clz	r3, r3
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d105      	bne.n	8007cd6 <HAL_ADC_ConfigChannel+0x38a>
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	0e9b      	lsrs	r3, r3, #26
 8007cd0:	f003 031f 	and.w	r3, r3, #31
 8007cd4:	e011      	b.n	8007cfa <HAL_ADC_ConfigChannel+0x3ae>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cde:	fa93 f3a3 	rbit	r3, r3
 8007ce2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8007ce4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ce6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007ce8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8007cee:	2320      	movs	r3, #32
 8007cf0:	e003      	b.n	8007cfa <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8007cf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cf4:	fab3 f383 	clz	r3, r3
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d106      	bne.n	8007d0c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2200      	movs	r2, #0
 8007d04:	2103      	movs	r1, #3
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7ff fae2 	bl	80072d0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7ff fbe9 	bl	80074e8 <LL_ADC_IsEnabled>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f040 81c2 	bne.w	80080a2 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6818      	ldr	r0, [r3, #0]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	6819      	ldr	r1, [r3, #0]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f7ff fb56 	bl	80073dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	4a8e      	ldr	r2, [pc, #568]	@ (8007f70 <HAL_ADC_ConfigChannel+0x624>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	f040 8130 	bne.w	8007f9c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10b      	bne.n	8007d64 <HAL_ADC_ConfigChannel+0x418>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	0e9b      	lsrs	r3, r3, #26
 8007d52:	3301      	adds	r3, #1
 8007d54:	f003 031f 	and.w	r3, r3, #31
 8007d58:	2b09      	cmp	r3, #9
 8007d5a:	bf94      	ite	ls
 8007d5c:	2301      	movls	r3, #1
 8007d5e:	2300      	movhi	r3, #0
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	e019      	b.n	8007d98 <HAL_ADC_ConfigChannel+0x44c>
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d6c:	fa93 f3a3 	rbit	r3, r3
 8007d70:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007d72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d74:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8007d76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8007d7c:	2320      	movs	r3, #32
 8007d7e:	e003      	b.n	8007d88 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8007d80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d82:	fab3 f383 	clz	r3, r3
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	3301      	adds	r3, #1
 8007d8a:	f003 031f 	and.w	r3, r3, #31
 8007d8e:	2b09      	cmp	r3, #9
 8007d90:	bf94      	ite	ls
 8007d92:	2301      	movls	r3, #1
 8007d94:	2300      	movhi	r3, #0
 8007d96:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d079      	beq.n	8007e90 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d107      	bne.n	8007db8 <HAL_ADC_ConfigChannel+0x46c>
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	0e9b      	lsrs	r3, r3, #26
 8007dae:	3301      	adds	r3, #1
 8007db0:	069b      	lsls	r3, r3, #26
 8007db2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007db6:	e015      	b.n	8007de4 <HAL_ADC_ConfigChannel+0x498>
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dc0:	fa93 f3a3 	rbit	r3, r3
 8007dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dc8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8007dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8007dd0:	2320      	movs	r3, #32
 8007dd2:	e003      	b.n	8007ddc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8007dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dd6:	fab3 f383 	clz	r3, r3
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	3301      	adds	r3, #1
 8007dde:	069b      	lsls	r3, r3, #26
 8007de0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d109      	bne.n	8007e04 <HAL_ADC_ConfigChannel+0x4b8>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	0e9b      	lsrs	r3, r3, #26
 8007df6:	3301      	adds	r3, #1
 8007df8:	f003 031f 	and.w	r3, r3, #31
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8007e02:	e017      	b.n	8007e34 <HAL_ADC_ConfigChannel+0x4e8>
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e0c:	fa93 f3a3 	rbit	r3, r3
 8007e10:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e14:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8007e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d101      	bne.n	8007e20 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8007e1c:	2320      	movs	r3, #32
 8007e1e:	e003      	b.n	8007e28 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8007e20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e22:	fab3 f383 	clz	r3, r3
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	3301      	adds	r3, #1
 8007e2a:	f003 031f 	and.w	r3, r3, #31
 8007e2e:	2101      	movs	r1, #1
 8007e30:	fa01 f303 	lsl.w	r3, r1, r3
 8007e34:	ea42 0103 	orr.w	r1, r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10a      	bne.n	8007e5a <HAL_ADC_ConfigChannel+0x50e>
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	0e9b      	lsrs	r3, r3, #26
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	f003 021f 	and.w	r2, r3, #31
 8007e50:	4613      	mov	r3, r2
 8007e52:	005b      	lsls	r3, r3, #1
 8007e54:	4413      	add	r3, r2
 8007e56:	051b      	lsls	r3, r3, #20
 8007e58:	e018      	b.n	8007e8c <HAL_ADC_ConfigChannel+0x540>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e62:	fa93 f3a3 	rbit	r3, r3
 8007e66:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8007e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8007e72:	2320      	movs	r3, #32
 8007e74:	e003      	b.n	8007e7e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8007e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e78:	fab3 f383 	clz	r3, r3
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	3301      	adds	r3, #1
 8007e80:	f003 021f 	and.w	r2, r3, #31
 8007e84:	4613      	mov	r3, r2
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	4413      	add	r3, r2
 8007e8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	e080      	b.n	8007f92 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d107      	bne.n	8007eac <HAL_ADC_ConfigChannel+0x560>
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	0e9b      	lsrs	r3, r3, #26
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	069b      	lsls	r3, r3, #26
 8007ea6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007eaa:	e015      	b.n	8007ed8 <HAL_ADC_ConfigChannel+0x58c>
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb4:	fa93 f3a3 	rbit	r3, r3
 8007eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8007eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ebc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8007ec4:	2320      	movs	r3, #32
 8007ec6:	e003      	b.n	8007ed0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eca:	fab3 f383 	clz	r3, r3
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	069b      	lsls	r3, r3, #26
 8007ed4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d109      	bne.n	8007ef8 <HAL_ADC_ConfigChannel+0x5ac>
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	0e9b      	lsrs	r3, r3, #26
 8007eea:	3301      	adds	r3, #1
 8007eec:	f003 031f 	and.w	r3, r3, #31
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ef6:	e017      	b.n	8007f28 <HAL_ADC_ConfigChannel+0x5dc>
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	fa93 f3a3 	rbit	r3, r3
 8007f04:	61fb      	str	r3, [r7, #28]
  return result;
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8007f10:	2320      	movs	r3, #32
 8007f12:	e003      	b.n	8007f1c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8007f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f16:	fab3 f383 	clz	r3, r3
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	f003 031f 	and.w	r3, r3, #31
 8007f22:	2101      	movs	r1, #1
 8007f24:	fa01 f303 	lsl.w	r3, r1, r3
 8007f28:	ea42 0103 	orr.w	r1, r2, r3
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10d      	bne.n	8007f54 <HAL_ADC_ConfigChannel+0x608>
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	0e9b      	lsrs	r3, r3, #26
 8007f3e:	3301      	adds	r3, #1
 8007f40:	f003 021f 	and.w	r2, r3, #31
 8007f44:	4613      	mov	r3, r2
 8007f46:	005b      	lsls	r3, r3, #1
 8007f48:	4413      	add	r3, r2
 8007f4a:	3b1e      	subs	r3, #30
 8007f4c:	051b      	lsls	r3, r3, #20
 8007f4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007f52:	e01d      	b.n	8007f90 <HAL_ADC_ConfigChannel+0x644>
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	fa93 f3a3 	rbit	r3, r3
 8007f60:	613b      	str	r3, [r7, #16]
  return result;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d103      	bne.n	8007f74 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8007f6c:	2320      	movs	r3, #32
 8007f6e:	e005      	b.n	8007f7c <HAL_ADC_ConfigChannel+0x630>
 8007f70:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	fab3 f383 	clz	r3, r3
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	f003 021f 	and.w	r2, r3, #31
 8007f82:	4613      	mov	r3, r2
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	4413      	add	r3, r2
 8007f88:	3b1e      	subs	r3, #30
 8007f8a:	051b      	lsls	r3, r3, #20
 8007f8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007f90:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007f96:	4619      	mov	r1, r3
 8007f98:	f7ff f9f4 	bl	8007384 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	4b45      	ldr	r3, [pc, #276]	@ (80080b8 <HAL_ADC_ConfigChannel+0x76c>)
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d07c      	beq.n	80080a2 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007fa8:	4844      	ldr	r0, [pc, #272]	@ (80080bc <HAL_ADC_ConfigChannel+0x770>)
 8007faa:	f7ff f949 	bl	8007240 <LL_ADC_GetCommonPathInternalCh>
 8007fae:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007fb2:	4843      	ldr	r0, [pc, #268]	@ (80080c0 <HAL_ADC_ConfigChannel+0x774>)
 8007fb4:	f7ff fa98 	bl	80074e8 <LL_ADC_IsEnabled>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d15e      	bne.n	800807c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a40      	ldr	r2, [pc, #256]	@ (80080c4 <HAL_ADC_ConfigChannel+0x778>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d127      	bne.n	8008018 <HAL_ADC_ConfigChannel+0x6cc>
 8007fc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007fcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d121      	bne.n	8008018 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a39      	ldr	r2, [pc, #228]	@ (80080c0 <HAL_ADC_ConfigChannel+0x774>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d161      	bne.n	80080a2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8007fde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007fe2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	4834      	ldr	r0, [pc, #208]	@ (80080bc <HAL_ADC_ConfigChannel+0x770>)
 8007fea:	f7ff f916 	bl	800721a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007fee:	4b36      	ldr	r3, [pc, #216]	@ (80080c8 <HAL_ADC_ConfigChannel+0x77c>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	099b      	lsrs	r3, r3, #6
 8007ff4:	4a35      	ldr	r2, [pc, #212]	@ (80080cc <HAL_ADC_ConfigChannel+0x780>)
 8007ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8007ffa:	099b      	lsrs	r3, r3, #6
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	4613      	mov	r3, r2
 8008000:	005b      	lsls	r3, r3, #1
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8008008:	e002      	b.n	8008010 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3b01      	subs	r3, #1
 800800e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1f9      	bne.n	800800a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008016:	e044      	b.n	80080a2 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a2c      	ldr	r2, [pc, #176]	@ (80080d0 <HAL_ADC_ConfigChannel+0x784>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d113      	bne.n	800804a <HAL_ADC_ConfigChannel+0x6fe>
 8008022:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008026:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10d      	bne.n	800804a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a23      	ldr	r2, [pc, #140]	@ (80080c0 <HAL_ADC_ConfigChannel+0x774>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d134      	bne.n	80080a2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8008038:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800803c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008040:	4619      	mov	r1, r3
 8008042:	481e      	ldr	r0, [pc, #120]	@ (80080bc <HAL_ADC_ConfigChannel+0x770>)
 8008044:	f7ff f8e9 	bl	800721a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008048:	e02b      	b.n	80080a2 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a21      	ldr	r2, [pc, #132]	@ (80080d4 <HAL_ADC_ConfigChannel+0x788>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d126      	bne.n	80080a2 <HAL_ADC_ConfigChannel+0x756>
 8008054:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008058:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d120      	bne.n	80080a2 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a16      	ldr	r2, [pc, #88]	@ (80080c0 <HAL_ADC_ConfigChannel+0x774>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d11b      	bne.n	80080a2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800806a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800806e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008072:	4619      	mov	r1, r3
 8008074:	4811      	ldr	r0, [pc, #68]	@ (80080bc <HAL_ADC_ConfigChannel+0x770>)
 8008076:	f7ff f8d0 	bl	800721a <LL_ADC_SetCommonPathInternalCh>
 800807a:	e012      	b.n	80080a2 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008080:	f043 0220 	orr.w	r2, r3, #32
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800808e:	e008      	b.n	80080a2 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008094:	f043 0220 	orr.w	r2, r3, #32
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80080aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	37d8      	adds	r7, #216	@ 0xd8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	80080000 	.word	0x80080000
 80080bc:	50040300 	.word	0x50040300
 80080c0:	50040000 	.word	0x50040000
 80080c4:	c7520000 	.word	0xc7520000
 80080c8:	2000002c 	.word	0x2000002c
 80080cc:	053e2d63 	.word	0x053e2d63
 80080d0:	cb840000 	.word	0xcb840000
 80080d4:	80000001 	.word	0x80000001

080080d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7ff f9fd 	bl	80074e8 <LL_ADC_IsEnabled>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d15e      	bne.n	80081b2 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689a      	ldr	r2, [r3, #8]
 80080fa:	4b30      	ldr	r3, [pc, #192]	@ (80081bc <ADC_Enable+0xe4>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00d      	beq.n	800811e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008106:	f043 0210 	orr.w	r2, r3, #16
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008112:	f043 0201 	orr.w	r2, r3, #1
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e04a      	b.n	80081b4 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4618      	mov	r0, r3
 8008124:	f7ff f9cc 	bl	80074c0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8008128:	4825      	ldr	r0, [pc, #148]	@ (80081c0 <ADC_Enable+0xe8>)
 800812a:	f7ff f889 	bl	8007240 <LL_ADC_GetCommonPathInternalCh>
 800812e:	4603      	mov	r3, r0
 8008130:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00f      	beq.n	8008158 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008138:	4b22      	ldr	r3, [pc, #136]	@ (80081c4 <ADC_Enable+0xec>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	099b      	lsrs	r3, r3, #6
 800813e:	4a22      	ldr	r2, [pc, #136]	@ (80081c8 <ADC_Enable+0xf0>)
 8008140:	fba2 2303 	umull	r2, r3, r2, r3
 8008144:	099b      	lsrs	r3, r3, #6
 8008146:	3301      	adds	r3, #1
 8008148:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800814a:	e002      	b.n	8008152 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	3b01      	subs	r3, #1
 8008150:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1f9      	bne.n	800814c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8008158:	f7ff f828 	bl	80071ac <HAL_GetTick>
 800815c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800815e:	e021      	b.n	80081a4 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4618      	mov	r0, r3
 8008166:	f7ff f9bf 	bl	80074e8 <LL_ADC_IsEnabled>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d104      	bne.n	800817a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff f9a3 	bl	80074c0 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800817a:	f7ff f817 	bl	80071ac <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	2b02      	cmp	r3, #2
 8008186:	d90d      	bls.n	80081a4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800818c:	f043 0210 	orr.w	r2, r3, #16
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008198:	f043 0201 	orr.w	r2, r3, #1
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e007      	b.n	80081b4 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d1d6      	bne.n	8008160 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	8000003f 	.word	0x8000003f
 80081c0:	50040300 	.word	0x50040300
 80081c4:	2000002c 	.word	0x2000002c
 80081c8:	053e2d63 	.word	0x053e2d63

080081cc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d14b      	bne.n	800827e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0308 	and.w	r3, r3, #8
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d021      	beq.n	8008244 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff f87e 	bl	8007306 <LL_ADC_REG_IsTriggerSourceSWStart>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d032      	beq.n	8008276 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d12b      	bne.n	8008276 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008222:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800822e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d11f      	bne.n	8008276 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800823a:	f043 0201 	orr.w	r2, r3, #1
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	655a      	str	r2, [r3, #84]	@ 0x54
 8008242:	e018      	b.n	8008276 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	f003 0302 	and.w	r3, r3, #2
 800824e:	2b00      	cmp	r3, #0
 8008250:	d111      	bne.n	8008276 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008256:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008262:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d105      	bne.n	8008276 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800826e:	f043 0201 	orr.w	r2, r3, #1
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f7f8 ff86 	bl	8001188 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800827c:	e00e      	b.n	800829c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008282:	f003 0310 	and.w	r3, r3, #16
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f7ff fb54 	bl	8007938 <HAL_ADC_ErrorCallback>
}
 8008290:	e004      	b.n	800829c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	4798      	blx	r3
}
 800829c:	bf00      	nop
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f7ff fb36 	bl	8007924 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80082b8:	bf00      	nop
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082cc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082de:	f043 0204 	orr.w	r2, r3, #4
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f7ff fb26 	bl	8007938 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80082ec:	bf00      	nop
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f003 0307 	and.w	r3, r3, #7
 8008302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008304:	4b0c      	ldr	r3, [pc, #48]	@ (8008338 <__NVIC_SetPriorityGrouping+0x44>)
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008310:	4013      	ands	r3, r2
 8008312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800831c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008326:	4a04      	ldr	r2, [pc, #16]	@ (8008338 <__NVIC_SetPriorityGrouping+0x44>)
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	60d3      	str	r3, [r2, #12]
}
 800832c:	bf00      	nop
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr
 8008338:	e000ed00 	.word	0xe000ed00

0800833c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008340:	4b04      	ldr	r3, [pc, #16]	@ (8008354 <__NVIC_GetPriorityGrouping+0x18>)
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	0a1b      	lsrs	r3, r3, #8
 8008346:	f003 0307 	and.w	r3, r3, #7
}
 800834a:	4618      	mov	r0, r3
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	e000ed00 	.word	0xe000ed00

08008358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008366:	2b00      	cmp	r3, #0
 8008368:	db0b      	blt.n	8008382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800836a:	79fb      	ldrb	r3, [r7, #7]
 800836c:	f003 021f 	and.w	r2, r3, #31
 8008370:	4907      	ldr	r1, [pc, #28]	@ (8008390 <__NVIC_EnableIRQ+0x38>)
 8008372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008376:	095b      	lsrs	r3, r3, #5
 8008378:	2001      	movs	r0, #1
 800837a:	fa00 f202 	lsl.w	r2, r0, r2
 800837e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008382:	bf00      	nop
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	e000e100 	.word	0xe000e100

08008394 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	4603      	mov	r3, r0
 800839c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800839e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	db12      	blt.n	80083cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	f003 021f 	and.w	r2, r3, #31
 80083ac:	490a      	ldr	r1, [pc, #40]	@ (80083d8 <__NVIC_DisableIRQ+0x44>)
 80083ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083b2:	095b      	lsrs	r3, r3, #5
 80083b4:	2001      	movs	r0, #1
 80083b6:	fa00 f202 	lsl.w	r2, r0, r2
 80083ba:	3320      	adds	r3, #32
 80083bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80083c0:	f3bf 8f4f 	dsb	sy
}
 80083c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80083c6:	f3bf 8f6f 	isb	sy
}
 80083ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	e000e100 	.word	0xe000e100

080083dc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	4603      	mov	r3, r0
 80083e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	db0c      	blt.n	8008408 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083ee:	79fb      	ldrb	r3, [r7, #7]
 80083f0:	f003 021f 	and.w	r2, r3, #31
 80083f4:	4907      	ldr	r1, [pc, #28]	@ (8008414 <__NVIC_SetPendingIRQ+0x38>)
 80083f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083fa:	095b      	lsrs	r3, r3, #5
 80083fc:	2001      	movs	r0, #1
 80083fe:	fa00 f202 	lsl.w	r2, r0, r2
 8008402:	3340      	adds	r3, #64	@ 0x40
 8008404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	e000e100 	.word	0xe000e100

08008418 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008426:	2b00      	cmp	r3, #0
 8008428:	db0c      	blt.n	8008444 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800842a:	79fb      	ldrb	r3, [r7, #7]
 800842c:	f003 021f 	and.w	r2, r3, #31
 8008430:	4907      	ldr	r1, [pc, #28]	@ (8008450 <__NVIC_ClearPendingIRQ+0x38>)
 8008432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008436:	095b      	lsrs	r3, r3, #5
 8008438:	2001      	movs	r0, #1
 800843a:	fa00 f202 	lsl.w	r2, r0, r2
 800843e:	3360      	adds	r3, #96	@ 0x60
 8008440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	e000e100 	.word	0xe000e100

08008454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	4603      	mov	r3, r0
 800845c:	6039      	str	r1, [r7, #0]
 800845e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008464:	2b00      	cmp	r3, #0
 8008466:	db0a      	blt.n	800847e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	b2da      	uxtb	r2, r3
 800846c:	490c      	ldr	r1, [pc, #48]	@ (80084a0 <__NVIC_SetPriority+0x4c>)
 800846e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008472:	0112      	lsls	r2, r2, #4
 8008474:	b2d2      	uxtb	r2, r2
 8008476:	440b      	add	r3, r1
 8008478:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800847c:	e00a      	b.n	8008494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	b2da      	uxtb	r2, r3
 8008482:	4908      	ldr	r1, [pc, #32]	@ (80084a4 <__NVIC_SetPriority+0x50>)
 8008484:	79fb      	ldrb	r3, [r7, #7]
 8008486:	f003 030f 	and.w	r3, r3, #15
 800848a:	3b04      	subs	r3, #4
 800848c:	0112      	lsls	r2, r2, #4
 800848e:	b2d2      	uxtb	r2, r2
 8008490:	440b      	add	r3, r1
 8008492:	761a      	strb	r2, [r3, #24]
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	e000e100 	.word	0xe000e100
 80084a4:	e000ed00 	.word	0xe000ed00

080084a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b089      	sub	sp, #36	@ 0x24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	f1c3 0307 	rsb	r3, r3, #7
 80084c2:	2b04      	cmp	r3, #4
 80084c4:	bf28      	it	cs
 80084c6:	2304      	movcs	r3, #4
 80084c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	3304      	adds	r3, #4
 80084ce:	2b06      	cmp	r3, #6
 80084d0:	d902      	bls.n	80084d8 <NVIC_EncodePriority+0x30>
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	3b03      	subs	r3, #3
 80084d6:	e000      	b.n	80084da <NVIC_EncodePriority+0x32>
 80084d8:	2300      	movs	r3, #0
 80084da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084dc:	f04f 32ff 	mov.w	r2, #4294967295
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	fa02 f303 	lsl.w	r3, r2, r3
 80084e6:	43da      	mvns	r2, r3
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	401a      	ands	r2, r3
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80084f0:	f04f 31ff 	mov.w	r1, #4294967295
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	fa01 f303 	lsl.w	r3, r1, r3
 80084fa:	43d9      	mvns	r1, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008500:	4313      	orrs	r3, r2
         );
}
 8008502:	4618      	mov	r0, r3
 8008504:	3724      	adds	r7, #36	@ 0x24
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
	...

08008510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	3b01      	subs	r3, #1
 800851c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008520:	d301      	bcc.n	8008526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008522:	2301      	movs	r3, #1
 8008524:	e00f      	b.n	8008546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008526:	4a0a      	ldr	r2, [pc, #40]	@ (8008550 <SysTick_Config+0x40>)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	3b01      	subs	r3, #1
 800852c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800852e:	210f      	movs	r1, #15
 8008530:	f04f 30ff 	mov.w	r0, #4294967295
 8008534:	f7ff ff8e 	bl	8008454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008538:	4b05      	ldr	r3, [pc, #20]	@ (8008550 <SysTick_Config+0x40>)
 800853a:	2200      	movs	r2, #0
 800853c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800853e:	4b04      	ldr	r3, [pc, #16]	@ (8008550 <SysTick_Config+0x40>)
 8008540:	2207      	movs	r2, #7
 8008542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	e000e010 	.word	0xe000e010

08008554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7ff fec9 	bl	80082f4 <__NVIC_SetPriorityGrouping>
}
 8008562:	bf00      	nop
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b086      	sub	sp, #24
 800856e:	af00      	add	r7, sp, #0
 8008570:	4603      	mov	r3, r0
 8008572:	60b9      	str	r1, [r7, #8]
 8008574:	607a      	str	r2, [r7, #4]
 8008576:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008578:	f7ff fee0 	bl	800833c <__NVIC_GetPriorityGrouping>
 800857c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	68b9      	ldr	r1, [r7, #8]
 8008582:	6978      	ldr	r0, [r7, #20]
 8008584:	f7ff ff90 	bl	80084a8 <NVIC_EncodePriority>
 8008588:	4602      	mov	r2, r0
 800858a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800858e:	4611      	mov	r1, r2
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff ff5f 	bl	8008454 <__NVIC_SetPriority>
}
 8008596:	bf00      	nop
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b082      	sub	sp, #8
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	4603      	mov	r3, r0
 80085a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80085a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7ff fed3 	bl	8008358 <__NVIC_EnableIRQ>
}
 80085b2:	bf00      	nop
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b082      	sub	sp, #8
 80085be:	af00      	add	r7, sp, #0
 80085c0:	4603      	mov	r3, r0
 80085c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80085c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7ff fee3 	bl	8008394 <__NVIC_DisableIRQ>
}
 80085ce:	bf00      	nop
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b082      	sub	sp, #8
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7ff ff96 	bl	8008510 <SysTick_Config>
 80085e4:	4603      	mov	r3, r0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b082      	sub	sp, #8
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	4603      	mov	r3, r0
 80085f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80085f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7ff feed 	bl	80083dc <__NVIC_SetPendingIRQ>
}
 8008602:	bf00      	nop
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b082      	sub	sp, #8
 800860e:	af00      	add	r7, sp, #0
 8008610:	4603      	mov	r3, r0
 8008612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8008614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008618:	4618      	mov	r0, r3
 800861a:	f7ff fefd 	bl	8008418 <__NVIC_ClearPendingIRQ>
}
 800861e:	bf00      	nop
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
	...

08008628 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d101      	bne.n	800863a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e08e      	b.n	8008758 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	4b47      	ldr	r3, [pc, #284]	@ (8008760 <HAL_DMA_Init+0x138>)
 8008642:	429a      	cmp	r2, r3
 8008644:	d80f      	bhi.n	8008666 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	4b45      	ldr	r3, [pc, #276]	@ (8008764 <HAL_DMA_Init+0x13c>)
 800864e:	4413      	add	r3, r2
 8008650:	4a45      	ldr	r2, [pc, #276]	@ (8008768 <HAL_DMA_Init+0x140>)
 8008652:	fba2 2303 	umull	r2, r3, r2, r3
 8008656:	091b      	lsrs	r3, r3, #4
 8008658:	009a      	lsls	r2, r3, #2
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a42      	ldr	r2, [pc, #264]	@ (800876c <HAL_DMA_Init+0x144>)
 8008662:	641a      	str	r2, [r3, #64]	@ 0x40
 8008664:	e00e      	b.n	8008684 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	4b40      	ldr	r3, [pc, #256]	@ (8008770 <HAL_DMA_Init+0x148>)
 800866e:	4413      	add	r3, r2
 8008670:	4a3d      	ldr	r2, [pc, #244]	@ (8008768 <HAL_DMA_Init+0x140>)
 8008672:	fba2 2303 	umull	r2, r3, r2, r3
 8008676:	091b      	lsrs	r3, r3, #4
 8008678:	009a      	lsls	r2, r3, #2
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a3c      	ldr	r2, [pc, #240]	@ (8008774 <HAL_DMA_Init+0x14c>)
 8008682:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800869a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800869e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80086a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80086b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80086c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fb16 	bl	8008d08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086e4:	d102      	bne.n	80086ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086f4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80086f8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008702:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d010      	beq.n	800872e <HAL_DMA_Init+0x106>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	2b04      	cmp	r3, #4
 8008712:	d80c      	bhi.n	800872e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fb35 	bl	8008d84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800871e:	2200      	movs	r2, #0
 8008720:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800872a:	605a      	str	r2, [r3, #4]
 800872c:	e008      	b.n	8008740 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	40020407 	.word	0x40020407
 8008764:	bffdfff8 	.word	0xbffdfff8
 8008768:	cccccccd 	.word	0xcccccccd
 800876c:	40020000 	.word	0x40020000
 8008770:	bffdfbf8 	.word	0xbffdfbf8
 8008774:	40020400 	.word	0x40020400

08008778 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d101      	bne.n	800878a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e07b      	b.n	8008882 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 0201 	bic.w	r2, r2, #1
 8008798:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	4b3a      	ldr	r3, [pc, #232]	@ (800888c <HAL_DMA_DeInit+0x114>)
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d80f      	bhi.n	80087c6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	4b38      	ldr	r3, [pc, #224]	@ (8008890 <HAL_DMA_DeInit+0x118>)
 80087ae:	4413      	add	r3, r2
 80087b0:	4a38      	ldr	r2, [pc, #224]	@ (8008894 <HAL_DMA_DeInit+0x11c>)
 80087b2:	fba2 2303 	umull	r2, r3, r2, r3
 80087b6:	091b      	lsrs	r3, r3, #4
 80087b8:	009a      	lsls	r2, r3, #2
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a35      	ldr	r2, [pc, #212]	@ (8008898 <HAL_DMA_DeInit+0x120>)
 80087c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80087c4:	e00e      	b.n	80087e4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	461a      	mov	r2, r3
 80087cc:	4b33      	ldr	r3, [pc, #204]	@ (800889c <HAL_DMA_DeInit+0x124>)
 80087ce:	4413      	add	r3, r2
 80087d0:	4a30      	ldr	r2, [pc, #192]	@ (8008894 <HAL_DMA_DeInit+0x11c>)
 80087d2:	fba2 2303 	umull	r2, r3, r2, r3
 80087d6:	091b      	lsrs	r3, r3, #4
 80087d8:	009a      	lsls	r2, r3, #2
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a2f      	ldr	r2, [pc, #188]	@ (80088a0 <HAL_DMA_DeInit+0x128>)
 80087e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087f0:	f003 021c 	and.w	r2, r3, #28
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f8:	2101      	movs	r1, #1
 80087fa:	fa01 f202 	lsl.w	r2, r1, r2
 80087fe:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fa81 	bl	8008d08 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800880a:	2200      	movs	r2, #0
 800880c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008816:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00f      	beq.n	8008840 <HAL_DMA_DeInit+0xc8>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	2b04      	cmp	r3, #4
 8008826:	d80b      	bhi.n	8008840 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 faab 	bl	8008d84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008832:	2200      	movs	r2, #0
 8008834:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800883e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	40020407 	.word	0x40020407
 8008890:	bffdfff8 	.word	0xbffdfff8
 8008894:	cccccccd 	.word	0xcccccccd
 8008898:	40020000 	.word	0x40020000
 800889c:	bffdfbf8 	.word	0xbffdfbf8
 80088a0:	40020400 	.word	0x40020400

080088a4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d101      	bne.n	80088c4 <HAL_DMA_Start_IT+0x20>
 80088c0:	2302      	movs	r3, #2
 80088c2:	e066      	b.n	8008992 <HAL_DMA_Start_IT+0xee>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d155      	bne.n	8008984 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2202      	movs	r2, #2
 80088dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f022 0201 	bic.w	r2, r2, #1
 80088f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	68b9      	ldr	r1, [r7, #8]
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f000 f9c5 	bl	8008c8c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008906:	2b00      	cmp	r3, #0
 8008908:	d008      	beq.n	800891c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f042 020e 	orr.w	r2, r2, #14
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	e00f      	b.n	800893c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f022 0204 	bic.w	r2, r2, #4
 800892a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f042 020a 	orr.w	r2, r2, #10
 800893a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d007      	beq.n	800895a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008954:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008958:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800895e:	2b00      	cmp	r3, #0
 8008960:	d007      	beq.n	8008972 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800896c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008970:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f042 0201 	orr.w	r2, r2, #1
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	e005      	b.n	8008990 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800898c:	2302      	movs	r3, #2
 800898e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008990:	7dfb      	ldrb	r3, [r7, #23]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3718      	adds	r7, #24
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e04f      	b.n	8008a4c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d008      	beq.n	80089ca <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2204      	movs	r2, #4
 80089bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e040      	b.n	8008a4c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f022 020e 	bic.w	r2, r2, #14
 80089d8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80089e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f022 0201 	bic.w	r2, r2, #1
 80089f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089fe:	f003 021c 	and.w	r2, r3, #28
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a06:	2101      	movs	r1, #1
 8008a08:	fa01 f202 	lsl.w	r2, r1, r2
 8008a0c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008a16:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00c      	beq.n	8008a3a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008a2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008a38:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d005      	beq.n	8008a7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2204      	movs	r2, #4
 8008a74:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	73fb      	strb	r3, [r7, #15]
 8008a7a:	e047      	b.n	8008b0c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f022 020e 	bic.w	r2, r2, #14
 8008a8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f022 0201 	bic.w	r2, r2, #1
 8008a9a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aa6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008aaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ab0:	f003 021c 	and.w	r2, r3, #28
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab8:	2101      	movs	r1, #1
 8008aba:	fa01 f202 	lsl.w	r2, r1, r2
 8008abe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008ac8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00c      	beq.n	8008aec <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008adc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008ae0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008aea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d003      	beq.n	8008b0c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	4798      	blx	r3
    }
  }
  return status;
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b084      	sub	sp, #16
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b32:	f003 031c 	and.w	r3, r3, #28
 8008b36:	2204      	movs	r2, #4
 8008b38:	409a      	lsls	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d026      	beq.n	8008b90 <HAL_DMA_IRQHandler+0x7a>
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d021      	beq.n	8008b90 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0320 	and.w	r3, r3, #32
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d107      	bne.n	8008b6a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f022 0204 	bic.w	r2, r2, #4
 8008b68:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b6e:	f003 021c 	and.w	r2, r3, #28
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b76:	2104      	movs	r1, #4
 8008b78:	fa01 f202 	lsl.w	r2, r1, r2
 8008b7c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d071      	beq.n	8008c6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008b8e:	e06c      	b.n	8008c6a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b94:	f003 031c 	and.w	r3, r3, #28
 8008b98:	2202      	movs	r2, #2
 8008b9a:	409a      	lsls	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d02e      	beq.n	8008c02 <HAL_DMA_IRQHandler+0xec>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d029      	beq.n	8008c02 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 0320 	and.w	r3, r3, #32
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10b      	bne.n	8008bd4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f022 020a 	bic.w	r2, r2, #10
 8008bca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bd8:	f003 021c 	and.w	r2, r3, #28
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be0:	2102      	movs	r1, #2
 8008be2:	fa01 f202 	lsl.w	r2, r1, r2
 8008be6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d038      	beq.n	8008c6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008c00:	e033      	b.n	8008c6a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c06:	f003 031c 	and.w	r3, r3, #28
 8008c0a:	2208      	movs	r2, #8
 8008c0c:	409a      	lsls	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	4013      	ands	r3, r2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d02a      	beq.n	8008c6c <HAL_DMA_IRQHandler+0x156>
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	f003 0308 	and.w	r3, r3, #8
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d025      	beq.n	8008c6c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 020e 	bic.w	r2, r2, #14
 8008c2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c34:	f003 021c 	and.w	r2, r3, #28
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8008c42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d004      	beq.n	8008c6c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008c6a:	bf00      	nop
 8008c6c:	bf00      	nop
}
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
 8008c98:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008ca2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d004      	beq.n	8008cb6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008cb4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cba:	f003 021c 	and.w	r2, r3, #28
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8008cc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	2b10      	cmp	r3, #16
 8008cd8:	d108      	bne.n	8008cec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008cea:	e007      	b.n	8008cfc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	60da      	str	r2, [r3, #12]
}
 8008cfc:	bf00      	nop
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	461a      	mov	r2, r3
 8008d16:	4b17      	ldr	r3, [pc, #92]	@ (8008d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d80a      	bhi.n	8008d32 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d20:	089b      	lsrs	r3, r3, #2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008d28:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	6493      	str	r3, [r2, #72]	@ 0x48
 8008d30:	e007      	b.n	8008d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d36:	089b      	lsrs	r3, r3, #2
 8008d38:	009a      	lsls	r2, r3, #2
 8008d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008d3c:	4413      	add	r3, r2
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	3b08      	subs	r3, #8
 8008d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8008d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d50:	091b      	lsrs	r3, r3, #4
 8008d52:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a0a      	ldr	r2, [pc, #40]	@ (8008d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008d58:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f003 031f 	and.w	r3, r3, #31
 8008d60:	2201      	movs	r2, #1
 8008d62:	409a      	lsls	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008d68:	bf00      	nop
 8008d6a:	3714      	adds	r7, #20
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr
 8008d74:	40020407 	.word	0x40020407
 8008d78:	4002081c 	.word	0x4002081c
 8008d7c:	cccccccd 	.word	0xcccccccd
 8008d80:	40020880 	.word	0x40020880

08008d84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d94:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	4b0b      	ldr	r3, [pc, #44]	@ (8008dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008d9a:	4413      	add	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	461a      	mov	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a09      	ldr	r2, [pc, #36]	@ (8008dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008da8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	f003 0303 	and.w	r3, r3, #3
 8008db2:	2201      	movs	r2, #1
 8008db4:	409a      	lsls	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008dba:	bf00      	nop
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	1000823f 	.word	0x1000823f
 8008dcc:	40020940 	.word	0x40020940

08008dd0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008dde:	e14c      	b.n	800907a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	2101      	movs	r1, #1
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dec:	4013      	ands	r3, r2
 8008dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f000 813e 	beq.w	8009074 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f003 0303 	and.w	r3, r3, #3
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d005      	beq.n	8008e10 <HAL_GPIO_Init+0x40>
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f003 0303 	and.w	r3, r3, #3
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d130      	bne.n	8008e72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	005b      	lsls	r3, r3, #1
 8008e1a:	2203      	movs	r2, #3
 8008e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e20:	43db      	mvns	r3, r3
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	4013      	ands	r3, r2
 8008e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	68da      	ldr	r2, [r3, #12]
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	005b      	lsls	r3, r3, #1
 8008e30:	fa02 f303 	lsl.w	r3, r2, r3
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008e46:	2201      	movs	r2, #1
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4e:	43db      	mvns	r3, r3
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	4013      	ands	r3, r2
 8008e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	091b      	lsrs	r3, r3, #4
 8008e5c:	f003 0201 	and.w	r2, r3, #1
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	fa02 f303 	lsl.w	r3, r2, r3
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	f003 0303 	and.w	r3, r3, #3
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d017      	beq.n	8008eae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	005b      	lsls	r3, r3, #1
 8008e88:	2203      	movs	r2, #3
 8008e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e8e:	43db      	mvns	r3, r3
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	4013      	ands	r3, r2
 8008e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	689a      	ldr	r2, [r3, #8]
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	005b      	lsls	r3, r3, #1
 8008e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	f003 0303 	and.w	r3, r3, #3
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d123      	bne.n	8008f02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	08da      	lsrs	r2, r3, #3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	3208      	adds	r2, #8
 8008ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f003 0307 	and.w	r3, r3, #7
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	220f      	movs	r2, #15
 8008ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed6:	43db      	mvns	r3, r3
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	4013      	ands	r3, r2
 8008edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	691a      	ldr	r2, [r3, #16]
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f003 0307 	and.w	r3, r3, #7
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	fa02 f303 	lsl.w	r3, r2, r3
 8008eee:	693a      	ldr	r2, [r7, #16]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	08da      	lsrs	r2, r3, #3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	3208      	adds	r2, #8
 8008efc:	6939      	ldr	r1, [r7, #16]
 8008efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	2203      	movs	r2, #3
 8008f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f12:	43db      	mvns	r3, r3
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	4013      	ands	r3, r2
 8008f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f003 0203 	and.w	r2, r3, #3
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	fa02 f303 	lsl.w	r3, r2, r3
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f000 8098 	beq.w	8009074 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008f44:	4a54      	ldr	r2, [pc, #336]	@ (8009098 <HAL_GPIO_Init+0x2c8>)
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	089b      	lsrs	r3, r3, #2
 8008f4a:	3302      	adds	r3, #2
 8008f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f003 0303 	and.w	r3, r3, #3
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	220f      	movs	r2, #15
 8008f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f60:	43db      	mvns	r3, r3
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	4013      	ands	r3, r2
 8008f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008f6e:	d019      	beq.n	8008fa4 <HAL_GPIO_Init+0x1d4>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a4a      	ldr	r2, [pc, #296]	@ (800909c <HAL_GPIO_Init+0x2cc>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d013      	beq.n	8008fa0 <HAL_GPIO_Init+0x1d0>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a49      	ldr	r2, [pc, #292]	@ (80090a0 <HAL_GPIO_Init+0x2d0>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d00d      	beq.n	8008f9c <HAL_GPIO_Init+0x1cc>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a48      	ldr	r2, [pc, #288]	@ (80090a4 <HAL_GPIO_Init+0x2d4>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d007      	beq.n	8008f98 <HAL_GPIO_Init+0x1c8>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a47      	ldr	r2, [pc, #284]	@ (80090a8 <HAL_GPIO_Init+0x2d8>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d101      	bne.n	8008f94 <HAL_GPIO_Init+0x1c4>
 8008f90:	2304      	movs	r3, #4
 8008f92:	e008      	b.n	8008fa6 <HAL_GPIO_Init+0x1d6>
 8008f94:	2307      	movs	r3, #7
 8008f96:	e006      	b.n	8008fa6 <HAL_GPIO_Init+0x1d6>
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e004      	b.n	8008fa6 <HAL_GPIO_Init+0x1d6>
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	e002      	b.n	8008fa6 <HAL_GPIO_Init+0x1d6>
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e000      	b.n	8008fa6 <HAL_GPIO_Init+0x1d6>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	f002 0203 	and.w	r2, r2, #3
 8008fac:	0092      	lsls	r2, r2, #2
 8008fae:	4093      	lsls	r3, r2
 8008fb0:	693a      	ldr	r2, [r7, #16]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008fb6:	4938      	ldr	r1, [pc, #224]	@ (8009098 <HAL_GPIO_Init+0x2c8>)
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	089b      	lsrs	r3, r3, #2
 8008fbc:	3302      	adds	r3, #2
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008fc4:	4b39      	ldr	r3, [pc, #228]	@ (80090ac <HAL_GPIO_Init+0x2dc>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	43db      	mvns	r3, r3
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d003      	beq.n	8008fe8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008fe8:	4a30      	ldr	r2, [pc, #192]	@ (80090ac <HAL_GPIO_Init+0x2dc>)
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008fee:	4b2f      	ldr	r3, [pc, #188]	@ (80090ac <HAL_GPIO_Init+0x2dc>)
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	43db      	mvns	r3, r3
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4313      	orrs	r3, r2
 8009010:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009012:	4a26      	ldr	r2, [pc, #152]	@ (80090ac <HAL_GPIO_Init+0x2dc>)
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009018:	4b24      	ldr	r3, [pc, #144]	@ (80090ac <HAL_GPIO_Init+0x2dc>)
 800901a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800901e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	43db      	mvns	r3, r3
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	4013      	ands	r3, r2
 8009028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d003      	beq.n	800903e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4313      	orrs	r3, r2
 800903c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800903e:	4a1b      	ldr	r2, [pc, #108]	@ (80090ac <HAL_GPIO_Init+0x2dc>)
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8009046:	4b19      	ldr	r3, [pc, #100]	@ (80090ac <HAL_GPIO_Init+0x2dc>)
 8009048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800904c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	43db      	mvns	r3, r3
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	4013      	ands	r3, r2
 8009056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d003      	beq.n	800906c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	4313      	orrs	r3, r2
 800906a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800906c:	4a0f      	ldr	r2, [pc, #60]	@ (80090ac <HAL_GPIO_Init+0x2dc>)
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	3301      	adds	r3, #1
 8009078:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	fa22 f303 	lsr.w	r3, r2, r3
 8009084:	2b00      	cmp	r3, #0
 8009086:	f47f aeab 	bne.w	8008de0 <HAL_GPIO_Init+0x10>
  }
}
 800908a:	bf00      	nop
 800908c:	bf00      	nop
 800908e:	371c      	adds	r7, #28
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	40010000 	.word	0x40010000
 800909c:	48000400 	.word	0x48000400
 80090a0:	48000800 	.word	0x48000800
 80090a4:	48000c00 	.word	0x48000c00
 80090a8:	48001000 	.word	0x48001000
 80090ac:	58000800 	.word	0x58000800

080090b0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b087      	sub	sp, #28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80090ba:	2300      	movs	r3, #0
 80090bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80090be:	e0bb      	b.n	8009238 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80090c0:	2201      	movs	r2, #1
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	fa02 f303 	lsl.w	r3, r2, r3
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	4013      	ands	r3, r2
 80090cc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f000 80ae 	beq.w	8009232 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80090d6:	4a5f      	ldr	r2, [pc, #380]	@ (8009254 <HAL_GPIO_DeInit+0x1a4>)
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	089b      	lsrs	r3, r3, #2
 80090dc:	3302      	adds	r3, #2
 80090de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090e2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	f003 0303 	and.w	r3, r3, #3
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	220f      	movs	r2, #15
 80090ee:	fa02 f303 	lsl.w	r3, r2, r3
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	4013      	ands	r3, r2
 80090f6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80090fe:	d019      	beq.n	8009134 <HAL_GPIO_DeInit+0x84>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a55      	ldr	r2, [pc, #340]	@ (8009258 <HAL_GPIO_DeInit+0x1a8>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d013      	beq.n	8009130 <HAL_GPIO_DeInit+0x80>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a54      	ldr	r2, [pc, #336]	@ (800925c <HAL_GPIO_DeInit+0x1ac>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d00d      	beq.n	800912c <HAL_GPIO_DeInit+0x7c>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a53      	ldr	r2, [pc, #332]	@ (8009260 <HAL_GPIO_DeInit+0x1b0>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d007      	beq.n	8009128 <HAL_GPIO_DeInit+0x78>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a52      	ldr	r2, [pc, #328]	@ (8009264 <HAL_GPIO_DeInit+0x1b4>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d101      	bne.n	8009124 <HAL_GPIO_DeInit+0x74>
 8009120:	2304      	movs	r3, #4
 8009122:	e008      	b.n	8009136 <HAL_GPIO_DeInit+0x86>
 8009124:	2307      	movs	r3, #7
 8009126:	e006      	b.n	8009136 <HAL_GPIO_DeInit+0x86>
 8009128:	2303      	movs	r3, #3
 800912a:	e004      	b.n	8009136 <HAL_GPIO_DeInit+0x86>
 800912c:	2302      	movs	r3, #2
 800912e:	e002      	b.n	8009136 <HAL_GPIO_DeInit+0x86>
 8009130:	2301      	movs	r3, #1
 8009132:	e000      	b.n	8009136 <HAL_GPIO_DeInit+0x86>
 8009134:	2300      	movs	r3, #0
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	f002 0203 	and.w	r2, r2, #3
 800913c:	0092      	lsls	r2, r2, #2
 800913e:	4093      	lsls	r3, r2
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	429a      	cmp	r2, r3
 8009144:	d136      	bne.n	80091b4 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8009146:	4b48      	ldr	r3, [pc, #288]	@ (8009268 <HAL_GPIO_DeInit+0x1b8>)
 8009148:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	43db      	mvns	r3, r3
 8009150:	4945      	ldr	r1, [pc, #276]	@ (8009268 <HAL_GPIO_DeInit+0x1b8>)
 8009152:	4013      	ands	r3, r2
 8009154:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8009158:	4b43      	ldr	r3, [pc, #268]	@ (8009268 <HAL_GPIO_DeInit+0x1b8>)
 800915a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	43db      	mvns	r3, r3
 8009162:	4941      	ldr	r1, [pc, #260]	@ (8009268 <HAL_GPIO_DeInit+0x1b8>)
 8009164:	4013      	ands	r3, r2
 8009166:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800916a:	4b3f      	ldr	r3, [pc, #252]	@ (8009268 <HAL_GPIO_DeInit+0x1b8>)
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	43db      	mvns	r3, r3
 8009172:	493d      	ldr	r1, [pc, #244]	@ (8009268 <HAL_GPIO_DeInit+0x1b8>)
 8009174:	4013      	ands	r3, r2
 8009176:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8009178:	4b3b      	ldr	r3, [pc, #236]	@ (8009268 <HAL_GPIO_DeInit+0x1b8>)
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	43db      	mvns	r3, r3
 8009180:	4939      	ldr	r1, [pc, #228]	@ (8009268 <HAL_GPIO_DeInit+0x1b8>)
 8009182:	4013      	ands	r3, r2
 8009184:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f003 0303 	and.w	r3, r3, #3
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	220f      	movs	r2, #15
 8009190:	fa02 f303 	lsl.w	r3, r2, r3
 8009194:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8009196:	4a2f      	ldr	r2, [pc, #188]	@ (8009254 <HAL_GPIO_DeInit+0x1a4>)
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	089b      	lsrs	r3, r3, #2
 800919c:	3302      	adds	r3, #2
 800919e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	43da      	mvns	r2, r3
 80091a6:	482b      	ldr	r0, [pc, #172]	@ (8009254 <HAL_GPIO_DeInit+0x1a4>)
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	089b      	lsrs	r3, r3, #2
 80091ac:	400a      	ands	r2, r1
 80091ae:	3302      	adds	r3, #2
 80091b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	2103      	movs	r1, #3
 80091be:	fa01 f303 	lsl.w	r3, r1, r3
 80091c2:	431a      	orrs	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	08da      	lsrs	r2, r3, #3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	3208      	adds	r2, #8
 80091d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	f003 0307 	and.w	r3, r3, #7
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	220f      	movs	r2, #15
 80091de:	fa02 f303 	lsl.w	r3, r2, r3
 80091e2:	43db      	mvns	r3, r3
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	08d2      	lsrs	r2, r2, #3
 80091e8:	4019      	ands	r1, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	3208      	adds	r2, #8
 80091ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	68da      	ldr	r2, [r3, #12]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	005b      	lsls	r3, r3, #1
 80091fa:	2103      	movs	r1, #3
 80091fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009200:	43db      	mvns	r3, r3
 8009202:	401a      	ands	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	2101      	movs	r1, #1
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	fa01 f303 	lsl.w	r3, r1, r3
 8009214:	43db      	mvns	r3, r3
 8009216:	401a      	ands	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689a      	ldr	r2, [r3, #8]
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	005b      	lsls	r3, r3, #1
 8009224:	2103      	movs	r1, #3
 8009226:	fa01 f303 	lsl.w	r3, r1, r3
 800922a:	43db      	mvns	r3, r3
 800922c:	401a      	ands	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	609a      	str	r2, [r3, #8]
    }

    position++;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	3301      	adds	r3, #1
 8009236:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	fa22 f303 	lsr.w	r3, r2, r3
 8009240:	2b00      	cmp	r3, #0
 8009242:	f47f af3d 	bne.w	80090c0 <HAL_GPIO_DeInit+0x10>
  }
}
 8009246:	bf00      	nop
 8009248:	bf00      	nop
 800924a:	371c      	adds	r7, #28
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	40010000 	.word	0x40010000
 8009258:	48000400 	.word	0x48000400
 800925c:	48000800 	.word	0x48000800
 8009260:	48000c00 	.word	0x48000c00
 8009264:	48001000 	.word	0x48001000
 8009268:	58000800 	.word	0x58000800

0800926c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	691a      	ldr	r2, [r3, #16]
 800927c:	887b      	ldrh	r3, [r7, #2]
 800927e:	4013      	ands	r3, r2
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009284:	2301      	movs	r3, #1
 8009286:	73fb      	strb	r3, [r7, #15]
 8009288:	e001      	b.n	800928e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800928a:	2300      	movs	r3, #0
 800928c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800928e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	807b      	strh	r3, [r7, #2]
 80092a8:	4613      	mov	r3, r2
 80092aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80092ac:	787b      	ldrb	r3, [r7, #1]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d003      	beq.n	80092ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80092b2:	887a      	ldrh	r2, [r7, #2]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80092b8:	e002      	b.n	80092c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80092ba:	887a      	ldrh	r2, [r7, #2]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	460b      	mov	r3, r1
 80092d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80092de:	887a      	ldrh	r2, [r7, #2]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4013      	ands	r3, r2
 80092e4:	041a      	lsls	r2, r3, #16
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	43d9      	mvns	r1, r3
 80092ea:	887b      	ldrh	r3, [r7, #2]
 80092ec:	400b      	ands	r3, r1
 80092ee:	431a      	orrs	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	619a      	str	r2, [r3, #24]
}
 80092f4:	bf00      	nop
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800930a:	4b08      	ldr	r3, [pc, #32]	@ (800932c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800930c:	68da      	ldr	r2, [r3, #12]
 800930e:	88fb      	ldrh	r3, [r7, #6]
 8009310:	4013      	ands	r3, r2
 8009312:	2b00      	cmp	r3, #0
 8009314:	d006      	beq.n	8009324 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009316:	4a05      	ldr	r2, [pc, #20]	@ (800932c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009318:	88fb      	ldrh	r3, [r7, #6]
 800931a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800931c:	88fb      	ldrh	r3, [r7, #6]
 800931e:	4618      	mov	r0, r3
 8009320:	f7f9 fb00 	bl	8002924 <HAL_GPIO_EXTI_Callback>
  }
}
 8009324:	bf00      	nop
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	58000800 	.word	0x58000800

08009330 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8009336:	4b0a      	ldr	r3, [pc, #40]	@ (8009360 <HAL_HSEM_IRQHandler+0x30>)
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800933c:	4b08      	ldr	r3, [pc, #32]	@ (8009360 <HAL_HSEM_IRQHandler+0x30>)
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	43db      	mvns	r3, r3
 8009344:	4906      	ldr	r1, [pc, #24]	@ (8009360 <HAL_HSEM_IRQHandler+0x30>)
 8009346:	4013      	ands	r3, r2
 8009348:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800934a:	4a05      	ldr	r2, [pc, #20]	@ (8009360 <HAL_HSEM_IRQHandler+0x30>)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f807 	bl	8009364 <HAL_HSEM_FreeCallback>
}
 8009356:	bf00      	nop
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	58001500 	.word	0x58001500

08009364 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d101      	bne.n	800938a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e08d      	b.n	80094a6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b00      	cmp	r3, #0
 8009394:	d106      	bne.n	80093a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7f9 f998 	bl	80026d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2224      	movs	r2, #36	@ 0x24
 80093a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f022 0201 	bic.w	r2, r2, #1
 80093ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685a      	ldr	r2, [r3, #4]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80093c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689a      	ldr	r2, [r3, #8]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80093d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d107      	bne.n	80093f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	689a      	ldr	r2, [r3, #8]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80093ee:	609a      	str	r2, [r3, #8]
 80093f0:	e006      	b.n	8009400 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	689a      	ldr	r2, [r3, #8]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80093fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	2b02      	cmp	r3, #2
 8009406:	d108      	bne.n	800941a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009416:	605a      	str	r2, [r3, #4]
 8009418:	e007      	b.n	800942a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009428:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	6812      	ldr	r2, [r2, #0]
 8009434:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009438:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800943c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68da      	ldr	r2, [r3, #12]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800944c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	691a      	ldr	r2, [r3, #16]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	430a      	orrs	r2, r1
 8009466:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	69d9      	ldr	r1, [r3, #28]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a1a      	ldr	r2, [r3, #32]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	430a      	orrs	r2, r1
 8009476:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f042 0201 	orr.w	r2, r2, #1
 8009486:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2220      	movs	r2, #32
 8009492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b082      	sub	sp, #8
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d101      	bne.n	80094c0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e021      	b.n	8009504 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2224      	movs	r2, #36	@ 0x24
 80094c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f022 0201 	bic.w	r2, r2, #1
 80094d6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7f9 f985 	bl	80027e8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b088      	sub	sp, #32
 8009510:	af02      	add	r7, sp, #8
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	4608      	mov	r0, r1
 8009516:	4611      	mov	r1, r2
 8009518:	461a      	mov	r2, r3
 800951a:	4603      	mov	r3, r0
 800951c:	817b      	strh	r3, [r7, #10]
 800951e:	460b      	mov	r3, r1
 8009520:	813b      	strh	r3, [r7, #8]
 8009522:	4613      	mov	r3, r2
 8009524:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b20      	cmp	r3, #32
 8009530:	f040 80f9 	bne.w	8009726 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d002      	beq.n	8009540 <HAL_I2C_Mem_Write+0x34>
 800953a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800953c:	2b00      	cmp	r3, #0
 800953e:	d105      	bne.n	800954c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009546:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e0ed      	b.n	8009728 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009552:	2b01      	cmp	r3, #1
 8009554:	d101      	bne.n	800955a <HAL_I2C_Mem_Write+0x4e>
 8009556:	2302      	movs	r3, #2
 8009558:	e0e6      	b.n	8009728 <HAL_I2C_Mem_Write+0x21c>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009562:	f7fd fe23 	bl	80071ac <HAL_GetTick>
 8009566:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	2319      	movs	r3, #25
 800956e:	2201      	movs	r2, #1
 8009570:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f000 f955 	bl	8009824 <I2C_WaitOnFlagUntilTimeout>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e0d1      	b.n	8009728 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2221      	movs	r2, #33	@ 0x21
 8009588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2240      	movs	r2, #64	@ 0x40
 8009590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6a3a      	ldr	r2, [r7, #32]
 800959e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80095a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80095ac:	88f8      	ldrh	r0, [r7, #6]
 80095ae:	893a      	ldrh	r2, [r7, #8]
 80095b0:	8979      	ldrh	r1, [r7, #10]
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	9301      	str	r3, [sp, #4]
 80095b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	4603      	mov	r3, r0
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 f8b9 	bl	8009734 <I2C_RequestMemoryWrite>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d005      	beq.n	80095d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e0a9      	b.n	8009728 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095d8:	b29b      	uxth	r3, r3
 80095da:	2bff      	cmp	r3, #255	@ 0xff
 80095dc:	d90e      	bls.n	80095fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	22ff      	movs	r2, #255	@ 0xff
 80095e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	8979      	ldrh	r1, [r7, #10]
 80095ec:	2300      	movs	r3, #0
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 fad9 	bl	8009bac <I2C_TransferConfig>
 80095fa:	e00f      	b.n	800961c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009600:	b29a      	uxth	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800960a:	b2da      	uxtb	r2, r3
 800960c:	8979      	ldrh	r1, [r7, #10]
 800960e:	2300      	movs	r3, #0
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f000 fac8 	bl	8009bac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f000 f958 	bl	80098d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e07b      	b.n	8009728 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009634:	781a      	ldrb	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009640:	1c5a      	adds	r2, r3, #1
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800964a:	b29b      	uxth	r3, r3
 800964c:	3b01      	subs	r3, #1
 800964e:	b29a      	uxth	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009658:	3b01      	subs	r3, #1
 800965a:	b29a      	uxth	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009664:	b29b      	uxth	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	d034      	beq.n	80096d4 <HAL_I2C_Mem_Write+0x1c8>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800966e:	2b00      	cmp	r3, #0
 8009670:	d130      	bne.n	80096d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009678:	2200      	movs	r2, #0
 800967a:	2180      	movs	r1, #128	@ 0x80
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f000 f8d1 	bl	8009824 <I2C_WaitOnFlagUntilTimeout>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e04d      	b.n	8009728 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009690:	b29b      	uxth	r3, r3
 8009692:	2bff      	cmp	r3, #255	@ 0xff
 8009694:	d90e      	bls.n	80096b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	22ff      	movs	r2, #255	@ 0xff
 800969a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	8979      	ldrh	r1, [r7, #10]
 80096a4:	2300      	movs	r3, #0
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f000 fa7d 	bl	8009bac <I2C_TransferConfig>
 80096b2:	e00f      	b.n	80096d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	8979      	ldrh	r1, [r7, #10]
 80096c6:	2300      	movs	r3, #0
 80096c8:	9300      	str	r3, [sp, #0]
 80096ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 fa6c 	bl	8009bac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096d8:	b29b      	uxth	r3, r3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d19e      	bne.n	800961c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096de:	697a      	ldr	r2, [r7, #20]
 80096e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f000 f93e 	bl	8009964 <I2C_WaitOnSTOPFlagUntilTimeout>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d001      	beq.n	80096f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e01a      	b.n	8009728 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2220      	movs	r2, #32
 80096f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6859      	ldr	r1, [r3, #4]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	4b0a      	ldr	r3, [pc, #40]	@ (8009730 <HAL_I2C_Mem_Write+0x224>)
 8009706:	400b      	ands	r3, r1
 8009708:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2220      	movs	r2, #32
 800970e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	e000      	b.n	8009728 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009726:	2302      	movs	r3, #2
  }
}
 8009728:	4618      	mov	r0, r3
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	fe00e800 	.word	0xfe00e800

08009734 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af02      	add	r7, sp, #8
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	4608      	mov	r0, r1
 800973e:	4611      	mov	r1, r2
 8009740:	461a      	mov	r2, r3
 8009742:	4603      	mov	r3, r0
 8009744:	817b      	strh	r3, [r7, #10]
 8009746:	460b      	mov	r3, r1
 8009748:	813b      	strh	r3, [r7, #8]
 800974a:	4613      	mov	r3, r2
 800974c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800974e:	88fb      	ldrh	r3, [r7, #6]
 8009750:	b2da      	uxtb	r2, r3
 8009752:	8979      	ldrh	r1, [r7, #10]
 8009754:	4b20      	ldr	r3, [pc, #128]	@ (80097d8 <I2C_RequestMemoryWrite+0xa4>)
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f000 fa25 	bl	8009bac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009762:	69fa      	ldr	r2, [r7, #28]
 8009764:	69b9      	ldr	r1, [r7, #24]
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f000 f8b5 	bl	80098d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e02c      	b.n	80097d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009776:	88fb      	ldrh	r3, [r7, #6]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d105      	bne.n	8009788 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800977c:	893b      	ldrh	r3, [r7, #8]
 800977e:	b2da      	uxtb	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	629a      	str	r2, [r3, #40]	@ 0x28
 8009786:	e015      	b.n	80097b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009788:	893b      	ldrh	r3, [r7, #8]
 800978a:	0a1b      	lsrs	r3, r3, #8
 800978c:	b29b      	uxth	r3, r3
 800978e:	b2da      	uxtb	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009796:	69fa      	ldr	r2, [r7, #28]
 8009798:	69b9      	ldr	r1, [r7, #24]
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 f89b 	bl	80098d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e012      	b.n	80097d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80097aa:	893b      	ldrh	r3, [r7, #8]
 80097ac:	b2da      	uxtb	r2, r3
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	2200      	movs	r2, #0
 80097bc:	2180      	movs	r1, #128	@ 0x80
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f000 f830 	bl	8009824 <I2C_WaitOnFlagUntilTimeout>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e000      	b.n	80097d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	80002000 	.word	0x80002000

080097dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	f003 0302 	and.w	r3, r3, #2
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d103      	bne.n	80097fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2200      	movs	r2, #0
 80097f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	f003 0301 	and.w	r3, r3, #1
 8009804:	2b01      	cmp	r3, #1
 8009806:	d007      	beq.n	8009818 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	699a      	ldr	r2, [r3, #24]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f042 0201 	orr.w	r2, r2, #1
 8009816:	619a      	str	r2, [r3, #24]
  }
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	603b      	str	r3, [r7, #0]
 8009830:	4613      	mov	r3, r2
 8009832:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009834:	e03b      	b.n	80098ae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009836:	69ba      	ldr	r2, [r7, #24]
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f000 f8d6 	bl	80099ec <I2C_IsErrorOccurred>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d001      	beq.n	800984a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e041      	b.n	80098ce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009850:	d02d      	beq.n	80098ae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009852:	f7fd fcab 	bl	80071ac <HAL_GetTick>
 8009856:	4602      	mov	r2, r0
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	429a      	cmp	r2, r3
 8009860:	d302      	bcc.n	8009868 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d122      	bne.n	80098ae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	699a      	ldr	r2, [r3, #24]
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	4013      	ands	r3, r2
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	429a      	cmp	r2, r3
 8009876:	bf0c      	ite	eq
 8009878:	2301      	moveq	r3, #1
 800987a:	2300      	movne	r3, #0
 800987c:	b2db      	uxtb	r3, r3
 800987e:	461a      	mov	r2, r3
 8009880:	79fb      	ldrb	r3, [r7, #7]
 8009882:	429a      	cmp	r2, r3
 8009884:	d113      	bne.n	80098ae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800988a:	f043 0220 	orr.w	r2, r3, #32
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2220      	movs	r2, #32
 8009896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e00f      	b.n	80098ce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	699a      	ldr	r2, [r3, #24]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	4013      	ands	r3, r2
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	bf0c      	ite	eq
 80098be:	2301      	moveq	r3, #1
 80098c0:	2300      	movne	r3, #0
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	461a      	mov	r2, r3
 80098c6:	79fb      	ldrb	r3, [r7, #7]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d0b4      	beq.n	8009836 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	60f8      	str	r0, [r7, #12]
 80098de:	60b9      	str	r1, [r7, #8]
 80098e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80098e2:	e033      	b.n	800994c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	68b9      	ldr	r1, [r7, #8]
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f000 f87f 	bl	80099ec <I2C_IsErrorOccurred>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e031      	b.n	800995c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098fe:	d025      	beq.n	800994c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009900:	f7fd fc54 	bl	80071ac <HAL_GetTick>
 8009904:	4602      	mov	r2, r0
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	429a      	cmp	r2, r3
 800990e:	d302      	bcc.n	8009916 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d11a      	bne.n	800994c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	699b      	ldr	r3, [r3, #24]
 800991c:	f003 0302 	and.w	r3, r3, #2
 8009920:	2b02      	cmp	r3, #2
 8009922:	d013      	beq.n	800994c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009928:	f043 0220 	orr.w	r2, r3, #32
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2220      	movs	r2, #32
 8009934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	e007      	b.n	800995c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	f003 0302 	and.w	r3, r3, #2
 8009956:	2b02      	cmp	r3, #2
 8009958:	d1c4      	bne.n	80098e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009970:	e02f      	b.n	80099d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	68b9      	ldr	r1, [r7, #8]
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f000 f838 	bl	80099ec <I2C_IsErrorOccurred>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e02d      	b.n	80099e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009986:	f7fd fc11 	bl	80071ac <HAL_GetTick>
 800998a:	4602      	mov	r2, r0
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	429a      	cmp	r2, r3
 8009994:	d302      	bcc.n	800999c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d11a      	bne.n	80099d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	f003 0320 	and.w	r3, r3, #32
 80099a6:	2b20      	cmp	r3, #32
 80099a8:	d013      	beq.n	80099d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099ae:	f043 0220 	orr.w	r2, r3, #32
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2220      	movs	r2, #32
 80099ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e007      	b.n	80099e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	f003 0320 	and.w	r3, r3, #32
 80099dc:	2b20      	cmp	r3, #32
 80099de:	d1c8      	bne.n	8009972 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
	...

080099ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b08a      	sub	sp, #40	@ 0x28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099f8:	2300      	movs	r3, #0
 80099fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a06:	2300      	movs	r3, #0
 8009a08:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	f003 0310 	and.w	r3, r3, #16
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d068      	beq.n	8009aea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2210      	movs	r2, #16
 8009a1e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a20:	e049      	b.n	8009ab6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a28:	d045      	beq.n	8009ab6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009a2a:	f7fd fbbf 	bl	80071ac <HAL_GetTick>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d302      	bcc.n	8009a40 <I2C_IsErrorOccurred+0x54>
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d13a      	bne.n	8009ab6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a52:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a62:	d121      	bne.n	8009aa8 <I2C_IsErrorOccurred+0xbc>
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a6a:	d01d      	beq.n	8009aa8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009a6c:	7cfb      	ldrb	r3, [r7, #19]
 8009a6e:	2b20      	cmp	r3, #32
 8009a70:	d01a      	beq.n	8009aa8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	685a      	ldr	r2, [r3, #4]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a80:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009a82:	f7fd fb93 	bl	80071ac <HAL_GetTick>
 8009a86:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a88:	e00e      	b.n	8009aa8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009a8a:	f7fd fb8f 	bl	80071ac <HAL_GetTick>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	2b19      	cmp	r3, #25
 8009a96:	d907      	bls.n	8009aa8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	f043 0320 	orr.w	r3, r3, #32
 8009a9e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009aa6:	e006      	b.n	8009ab6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	f003 0320 	and.w	r3, r3, #32
 8009ab2:	2b20      	cmp	r3, #32
 8009ab4:	d1e9      	bne.n	8009a8a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	f003 0320 	and.w	r3, r3, #32
 8009ac0:	2b20      	cmp	r3, #32
 8009ac2:	d003      	beq.n	8009acc <I2C_IsErrorOccurred+0xe0>
 8009ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d0aa      	beq.n	8009a22 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009acc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d103      	bne.n	8009adc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2220      	movs	r2, #32
 8009ada:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	f043 0304 	orr.w	r3, r3, #4
 8009ae2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	699b      	ldr	r3, [r3, #24]
 8009af0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00b      	beq.n	8009b14 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009afc:	6a3b      	ldr	r3, [r7, #32]
 8009afe:	f043 0301 	orr.w	r3, r3, #1
 8009b02:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00b      	beq.n	8009b36 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009b1e:	6a3b      	ldr	r3, [r7, #32]
 8009b20:	f043 0308 	orr.w	r3, r3, #8
 8009b24:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009b2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00b      	beq.n	8009b58 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	f043 0302 	orr.w	r3, r3, #2
 8009b46:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009b58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d01c      	beq.n	8009b9a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f7ff fe3b 	bl	80097dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	6859      	ldr	r1, [r3, #4]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	4b0d      	ldr	r3, [pc, #52]	@ (8009ba8 <I2C_IsErrorOccurred+0x1bc>)
 8009b72:	400b      	ands	r3, r1
 8009b74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2220      	movs	r2, #32
 8009b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3728      	adds	r7, #40	@ 0x28
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	fe00e800 	.word	0xfe00e800

08009bac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b087      	sub	sp, #28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	607b      	str	r3, [r7, #4]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	817b      	strh	r3, [r7, #10]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bbe:	897b      	ldrh	r3, [r7, #10]
 8009bc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009bc4:	7a7b      	ldrb	r3, [r7, #9]
 8009bc6:	041b      	lsls	r3, r3, #16
 8009bc8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bcc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bda:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	685a      	ldr	r2, [r3, #4]
 8009be2:	6a3b      	ldr	r3, [r7, #32]
 8009be4:	0d5b      	lsrs	r3, r3, #21
 8009be6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009bea:	4b08      	ldr	r3, [pc, #32]	@ (8009c0c <I2C_TransferConfig+0x60>)
 8009bec:	430b      	orrs	r3, r1
 8009bee:	43db      	mvns	r3, r3
 8009bf0:	ea02 0103 	and.w	r1, r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	697a      	ldr	r2, [r7, #20]
 8009bfa:	430a      	orrs	r2, r1
 8009bfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009bfe:	bf00      	nop
 8009c00:	371c      	adds	r7, #28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	03ff63ff 	.word	0x03ff63ff

08009c10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b20      	cmp	r3, #32
 8009c24:	d138      	bne.n	8009c98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d101      	bne.n	8009c34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009c30:	2302      	movs	r3, #2
 8009c32:	e032      	b.n	8009c9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2224      	movs	r2, #36	@ 0x24
 8009c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f022 0201 	bic.w	r2, r2, #1
 8009c52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009c62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	6819      	ldr	r1, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	683a      	ldr	r2, [r7, #0]
 8009c70:	430a      	orrs	r2, r1
 8009c72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f042 0201 	orr.w	r2, r2, #1
 8009c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2220      	movs	r2, #32
 8009c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	e000      	b.n	8009c9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c98:	2302      	movs	r3, #2
  }
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b085      	sub	sp, #20
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	2b20      	cmp	r3, #32
 8009cba:	d139      	bne.n	8009d30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d101      	bne.n	8009cca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009cc6:	2302      	movs	r3, #2
 8009cc8:	e033      	b.n	8009d32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2224      	movs	r2, #36	@ 0x24
 8009cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f022 0201 	bic.w	r2, r2, #1
 8009ce8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009cf8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	021b      	lsls	r3, r3, #8
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f042 0201 	orr.w	r2, r2, #1
 8009d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2220      	movs	r2, #32
 8009d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e000      	b.n	8009d32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009d30:	2302      	movs	r3, #2
  }
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
	...

08009d40 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8009d48:	4b05      	ldr	r3, [pc, #20]	@ (8009d60 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	4904      	ldr	r1, [pc, #16]	@ (8009d60 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	604b      	str	r3, [r1, #4]
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr
 8009d60:	40010000 	.word	0x40010000

08009d64 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d01e      	beq.n	8009db4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8009d76:	4b13      	ldr	r3, [pc, #76]	@ (8009dc4 <HAL_IPCC_Init+0x60>)
 8009d78:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d102      	bne.n	8009d8c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7f8 fd90 	bl	80028ac <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8009d8c:	68b8      	ldr	r0, [r7, #8]
 8009d8e:	f000 f85b 	bl	8009e48 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f82c 	bl	8009dfc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8009db2:	e001      	b.n	8009db8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8009db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	58000c00 	.word	0x58000c00

08009dc8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8009dd6:	bf00      	nop
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009de2:	b480      	push	{r7}
 8009de4:	b085      	sub	sp, #20
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	60f8      	str	r0, [r7, #12]
 8009dea:	60b9      	str	r1, [r7, #8]
 8009dec:	4613      	mov	r3, r2
 8009dee:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8009df0:	bf00      	nop
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009e04:	2300      	movs	r3, #0
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	e00f      	b.n	8009e2a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	4a0b      	ldr	r2, [pc, #44]	@ (8009e40 <IPCC_SetDefaultCallbacks+0x44>)
 8009e14:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	3306      	adds	r3, #6
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	4a08      	ldr	r2, [pc, #32]	@ (8009e44 <IPCC_SetDefaultCallbacks+0x48>)
 8009e22:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	3301      	adds	r3, #1
 8009e28:	60fb      	str	r3, [r7, #12]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2b05      	cmp	r3, #5
 8009e2e:	d9ec      	bls.n	8009e0a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8009e30:	bf00      	nop
 8009e32:	bf00      	nop
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	08009dc9 	.word	0x08009dc9
 8009e44:	08009de3 	.word	0x08009de3

08009e48 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8009e5c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	223f      	movs	r2, #63	@ 0x3f
 8009e62:	609a      	str	r2, [r3, #8]
}
 8009e64:	bf00      	nop
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d101      	bne.n	8009e82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e0c0      	b.n	800a004 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d106      	bne.n	8009e9c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f00e fd78 	bl	801898c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2203      	movs	r2, #3
 8009ea0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f007 f804 	bl	8010eb6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009eae:	2300      	movs	r3, #0
 8009eb0:	73fb      	strb	r3, [r7, #15]
 8009eb2:	e03e      	b.n	8009f32 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009eb4:	7bfa      	ldrb	r2, [r7, #15]
 8009eb6:	6879      	ldr	r1, [r7, #4]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	00db      	lsls	r3, r3, #3
 8009ec0:	440b      	add	r3, r1
 8009ec2:	3311      	adds	r3, #17
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009ec8:	7bfa      	ldrb	r2, [r7, #15]
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	00db      	lsls	r3, r3, #3
 8009ed4:	440b      	add	r3, r1
 8009ed6:	3310      	adds	r3, #16
 8009ed8:	7bfa      	ldrb	r2, [r7, #15]
 8009eda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009edc:	7bfa      	ldrb	r2, [r7, #15]
 8009ede:	6879      	ldr	r1, [r7, #4]
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4413      	add	r3, r2
 8009ee6:	00db      	lsls	r3, r3, #3
 8009ee8:	440b      	add	r3, r1
 8009eea:	3313      	adds	r3, #19
 8009eec:	2200      	movs	r2, #0
 8009eee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009ef0:	7bfa      	ldrb	r2, [r7, #15]
 8009ef2:	6879      	ldr	r1, [r7, #4]
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	4413      	add	r3, r2
 8009efa:	00db      	lsls	r3, r3, #3
 8009efc:	440b      	add	r3, r1
 8009efe:	3320      	adds	r3, #32
 8009f00:	2200      	movs	r2, #0
 8009f02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009f04:	7bfa      	ldrb	r2, [r7, #15]
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	4413      	add	r3, r2
 8009f0e:	00db      	lsls	r3, r3, #3
 8009f10:	440b      	add	r3, r1
 8009f12:	3324      	adds	r3, #36	@ 0x24
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
 8009f1a:	6879      	ldr	r1, [r7, #4]
 8009f1c:	1c5a      	adds	r2, r3, #1
 8009f1e:	4613      	mov	r3, r2
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	4413      	add	r3, r2
 8009f24:	00db      	lsls	r3, r3, #3
 8009f26:	440b      	add	r3, r1
 8009f28:	2200      	movs	r2, #0
 8009f2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f2c:	7bfb      	ldrb	r3, [r7, #15]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	73fb      	strb	r3, [r7, #15]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	791b      	ldrb	r3, [r3, #4]
 8009f36:	7bfa      	ldrb	r2, [r7, #15]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d3bb      	bcc.n	8009eb4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	73fb      	strb	r3, [r7, #15]
 8009f40:	e044      	b.n	8009fcc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009f42:	7bfa      	ldrb	r2, [r7, #15]
 8009f44:	6879      	ldr	r1, [r7, #4]
 8009f46:	4613      	mov	r3, r2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	4413      	add	r3, r2
 8009f4c:	00db      	lsls	r3, r3, #3
 8009f4e:	440b      	add	r3, r1
 8009f50:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009f58:	7bfa      	ldrb	r2, [r7, #15]
 8009f5a:	6879      	ldr	r1, [r7, #4]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	00db      	lsls	r3, r3, #3
 8009f64:	440b      	add	r3, r1
 8009f66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f6a:	7bfa      	ldrb	r2, [r7, #15]
 8009f6c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009f6e:	7bfa      	ldrb	r2, [r7, #15]
 8009f70:	6879      	ldr	r1, [r7, #4]
 8009f72:	4613      	mov	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	00db      	lsls	r3, r3, #3
 8009f7a:	440b      	add	r3, r1
 8009f7c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8009f80:	2200      	movs	r2, #0
 8009f82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009f84:	7bfa      	ldrb	r2, [r7, #15]
 8009f86:	6879      	ldr	r1, [r7, #4]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4413      	add	r3, r2
 8009f8e:	00db      	lsls	r3, r3, #3
 8009f90:	440b      	add	r3, r1
 8009f92:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8009f96:	2200      	movs	r2, #0
 8009f98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009f9a:	7bfa      	ldrb	r2, [r7, #15]
 8009f9c:	6879      	ldr	r1, [r7, #4]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	00db      	lsls	r3, r3, #3
 8009fa6:	440b      	add	r3, r1
 8009fa8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009fac:	2200      	movs	r2, #0
 8009fae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009fb0:	7bfa      	ldrb	r2, [r7, #15]
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	00db      	lsls	r3, r3, #3
 8009fbc:	440b      	add	r3, r1
 8009fbe:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	73fb      	strb	r3, [r7, #15]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	791b      	ldrb	r3, [r3, #4]
 8009fd0:	7bfa      	ldrb	r2, [r7, #15]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d3b5      	bcc.n	8009f42 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6818      	ldr	r0, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	3304      	adds	r3, #4
 8009fde:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009fe2:	f006 ff83 	bl	8010eec <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	7a9b      	ldrb	r3, [r3, #10]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d102      	bne.n	800a002 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f001 fc0e 	bl	800b81e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d101      	bne.n	800a022 <HAL_PCD_Start+0x16>
 800a01e:	2302      	movs	r3, #2
 800a020:	e012      	b.n	800a048 <HAL_PCD_Start+0x3c>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4618      	mov	r0, r3
 800a030:	f006 ff2a 	bl	8010e88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4618      	mov	r0, r3
 800a03a:	f008 fd07 	bl	8012a4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f008 fd0c 	bl	8012a7a <USB_ReadInterrupts>
 800a062:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d003      	beq.n	800a076 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fb06 	bl	800a680 <PCD_EP_ISR_Handler>

    return;
 800a074:	e110      	b.n	800a298 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d013      	beq.n	800a0a8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a088:	b29a      	uxth	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a092:	b292      	uxth	r2, r2
 800a094:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f00e fd04 	bl	8018aa6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a09e:	2100      	movs	r1, #0
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f8fc 	bl	800a29e <HAL_PCD_SetAddress>

    return;
 800a0a6:	e0f7      	b.n	800a298 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00c      	beq.n	800a0cc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a0c4:	b292      	uxth	r2, r2
 800a0c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a0ca:	e0e5      	b.n	800a298 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00c      	beq.n	800a0f0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a0e8:	b292      	uxth	r2, r2
 800a0ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a0ee:	e0d3      	b.n	800a298 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d034      	beq.n	800a164 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a102:	b29a      	uxth	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f022 0204 	bic.w	r2, r2, #4
 800a10c:	b292      	uxth	r2, r2
 800a10e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f022 0208 	bic.w	r2, r2, #8
 800a124:	b292      	uxth	r2, r2
 800a126:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a130:	2b01      	cmp	r3, #1
 800a132:	d107      	bne.n	800a144 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a13c:	2100      	movs	r1, #0
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f00e fea6 	bl	8018e90 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f00e fce7 	bl	8018b18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a152:	b29a      	uxth	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a15c:	b292      	uxth	r2, r2
 800a15e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a162:	e099      	b.n	800a298 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d027      	beq.n	800a1be <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a176:	b29a      	uxth	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f042 0208 	orr.w	r2, r2, #8
 800a180:	b292      	uxth	r2, r2
 800a182:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a18e:	b29a      	uxth	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a198:	b292      	uxth	r2, r2
 800a19a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f042 0204 	orr.w	r2, r2, #4
 800a1b0:	b292      	uxth	r2, r2
 800a1b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f00e fc94 	bl	8018ae4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a1bc:	e06c      	b.n	800a298 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d040      	beq.n	800a24a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a1da:	b292      	uxth	r2, r2
 800a1dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d12b      	bne.n	800a242 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f042 0204 	orr.w	r2, r2, #4
 800a1fc:	b292      	uxth	r2, r2
 800a1fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f042 0208 	orr.w	r2, r2, #8
 800a214:	b292      	uxth	r2, r2
 800a216:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2201      	movs	r2, #1
 800a21e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	089b      	lsrs	r3, r3, #2
 800a22e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a238:	2101      	movs	r1, #1
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f00e fe28 	bl	8018e90 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a240:	e02a      	b.n	800a298 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f00e fc4e 	bl	8018ae4 <HAL_PCD_SuspendCallback>
    return;
 800a248:	e026      	b.n	800a298 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00f      	beq.n	800a274 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a266:	b292      	uxth	r2, r2
 800a268:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f00e fc0c 	bl	8018a8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a272:	e011      	b.n	800a298 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00c      	beq.n	800a298 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a286:	b29a      	uxth	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a290:	b292      	uxth	r2, r2
 800a292:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a296:	bf00      	nop
  }
}
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b082      	sub	sp, #8
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d101      	bne.n	800a2b8 <HAL_PCD_SetAddress+0x1a>
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	e012      	b.n	800a2de <HAL_PCD_SetAddress+0x40>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	78fa      	ldrb	r2, [r7, #3]
 800a2c4:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	78fa      	ldrb	r2, [r7, #3]
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f008 fba8 	bl	8012a24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b084      	sub	sp, #16
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	4608      	mov	r0, r1
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	70fb      	strb	r3, [r7, #3]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	803b      	strh	r3, [r7, #0]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800a300:	2300      	movs	r3, #0
 800a302:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	da0e      	bge.n	800a32a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a30c:	78fb      	ldrb	r3, [r7, #3]
 800a30e:	f003 0207 	and.w	r2, r3, #7
 800a312:	4613      	mov	r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	00db      	lsls	r3, r3, #3
 800a31a:	3310      	adds	r3, #16
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	4413      	add	r3, r2
 800a320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2201      	movs	r2, #1
 800a326:	705a      	strb	r2, [r3, #1]
 800a328:	e00e      	b.n	800a348 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a32a:	78fb      	ldrb	r3, [r7, #3]
 800a32c:	f003 0207 	and.w	r2, r3, #7
 800a330:	4613      	mov	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4413      	add	r3, r2
 800a336:	00db      	lsls	r3, r3, #3
 800a338:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	4413      	add	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a348:	78fb      	ldrb	r3, [r7, #3]
 800a34a:	f003 0307 	and.w	r3, r3, #7
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800a354:	883b      	ldrh	r3, [r7, #0]
 800a356:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	78ba      	ldrb	r2, [r7, #2]
 800a362:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a364:	78bb      	ldrb	r3, [r7, #2]
 800a366:	2b02      	cmp	r3, #2
 800a368:	d102      	bne.n	800a370 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a376:	2b01      	cmp	r3, #1
 800a378:	d101      	bne.n	800a37e <HAL_PCD_EP_Open+0x98>
 800a37a:	2302      	movs	r3, #2
 800a37c:	e00e      	b.n	800a39c <HAL_PCD_EP_Open+0xb6>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68f9      	ldr	r1, [r7, #12]
 800a38c:	4618      	mov	r0, r3
 800a38e:	f006 fdcb 	bl	8010f28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800a39a:	7afb      	ldrb	r3, [r7, #11]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a3b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	da0e      	bge.n	800a3d6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3b8:	78fb      	ldrb	r3, [r7, #3]
 800a3ba:	f003 0207 	and.w	r2, r3, #7
 800a3be:	4613      	mov	r3, r2
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	4413      	add	r3, r2
 800a3c4:	00db      	lsls	r3, r3, #3
 800a3c6:	3310      	adds	r3, #16
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	705a      	strb	r2, [r3, #1]
 800a3d4:	e00e      	b.n	800a3f4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3d6:	78fb      	ldrb	r3, [r7, #3]
 800a3d8:	f003 0207 	and.w	r2, r3, #7
 800a3dc:	4613      	mov	r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4413      	add	r3, r2
 800a3e2:	00db      	lsls	r3, r3, #3
 800a3e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a3f4:	78fb      	ldrb	r3, [r7, #3]
 800a3f6:	f003 0307 	and.w	r3, r3, #7
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a406:	2b01      	cmp	r3, #1
 800a408:	d101      	bne.n	800a40e <HAL_PCD_EP_Close+0x6a>
 800a40a:	2302      	movs	r3, #2
 800a40c:	e00e      	b.n	800a42c <HAL_PCD_EP_Close+0x88>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2201      	movs	r2, #1
 800a412:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68f9      	ldr	r1, [r7, #12]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f007 fa6b 	bl	80118f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b086      	sub	sp, #24
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	607a      	str	r2, [r7, #4]
 800a43e:	603b      	str	r3, [r7, #0]
 800a440:	460b      	mov	r3, r1
 800a442:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a444:	7afb      	ldrb	r3, [r7, #11]
 800a446:	f003 0207 	and.w	r2, r3, #7
 800a44a:	4613      	mov	r3, r2
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	4413      	add	r3, r2
 800a450:	00db      	lsls	r3, r3, #3
 800a452:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	4413      	add	r3, r2
 800a45a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	683a      	ldr	r2, [r7, #0]
 800a466:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	2200      	movs	r2, #0
 800a46c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	2200      	movs	r2, #0
 800a472:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a474:	7afb      	ldrb	r3, [r7, #11]
 800a476:	f003 0307 	and.w	r3, r3, #7
 800a47a:	b2da      	uxtb	r2, r3
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	6979      	ldr	r1, [r7, #20]
 800a486:	4618      	mov	r0, r3
 800a488:	f007 fc23 	bl	8011cd2 <USB_EPStartXfer>

  return HAL_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3718      	adds	r7, #24
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a496:	b480      	push	{r7}
 800a498:	b083      	sub	sp, #12
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	460b      	mov	r3, r1
 800a4a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a4a2:	78fb      	ldrb	r3, [r7, #3]
 800a4a4:	f003 0207 	and.w	r2, r3, #7
 800a4a8:	6879      	ldr	r1, [r7, #4]
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	4413      	add	r3, r2
 800a4b0:	00db      	lsls	r3, r3, #3
 800a4b2:	440b      	add	r3, r1
 800a4b4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a4b8:	681b      	ldr	r3, [r3, #0]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	370c      	adds	r7, #12
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b086      	sub	sp, #24
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	60f8      	str	r0, [r7, #12]
 800a4ce:	607a      	str	r2, [r7, #4]
 800a4d0:	603b      	str	r3, [r7, #0]
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4d6:	7afb      	ldrb	r3, [r7, #11]
 800a4d8:	f003 0207 	and.w	r2, r3, #7
 800a4dc:	4613      	mov	r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	4413      	add	r3, r2
 800a4e2:	00db      	lsls	r3, r3, #3
 800a4e4:	3310      	adds	r3, #16
 800a4e6:	68fa      	ldr	r2, [r7, #12]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	683a      	ldr	r2, [r7, #0]
 800a4f6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	2200      	movs	r2, #0
 800a50a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	2201      	movs	r2, #1
 800a510:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a512:	7afb      	ldrb	r3, [r7, #11]
 800a514:	f003 0307 	and.w	r3, r3, #7
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	6979      	ldr	r1, [r7, #20]
 800a524:	4618      	mov	r0, r3
 800a526:	f007 fbd4 	bl	8011cd2 <USB_EPStartXfer>

  return HAL_OK;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3718      	adds	r7, #24
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	460b      	mov	r3, r1
 800a53e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a540:	78fb      	ldrb	r3, [r7, #3]
 800a542:	f003 0307 	and.w	r3, r3, #7
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	7912      	ldrb	r2, [r2, #4]
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d901      	bls.n	800a552 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e03e      	b.n	800a5d0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a552:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a556:	2b00      	cmp	r3, #0
 800a558:	da0e      	bge.n	800a578 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a55a:	78fb      	ldrb	r3, [r7, #3]
 800a55c:	f003 0207 	and.w	r2, r3, #7
 800a560:	4613      	mov	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	00db      	lsls	r3, r3, #3
 800a568:	3310      	adds	r3, #16
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	4413      	add	r3, r2
 800a56e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2201      	movs	r2, #1
 800a574:	705a      	strb	r2, [r3, #1]
 800a576:	e00c      	b.n	800a592 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a578:	78fa      	ldrb	r2, [r7, #3]
 800a57a:	4613      	mov	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4413      	add	r3, r2
 800a580:	00db      	lsls	r3, r3, #3
 800a582:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	4413      	add	r3, r2
 800a58a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2201      	movs	r2, #1
 800a596:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a598:	78fb      	ldrb	r3, [r7, #3]
 800a59a:	f003 0307 	and.w	r3, r3, #7
 800a59e:	b2da      	uxtb	r2, r3
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d101      	bne.n	800a5b2 <HAL_PCD_EP_SetStall+0x7e>
 800a5ae:	2302      	movs	r3, #2
 800a5b0:	e00e      	b.n	800a5d0 <HAL_PCD_EP_SetStall+0x9c>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68f9      	ldr	r1, [r7, #12]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f008 f935 	bl	8012830 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a5e4:	78fb      	ldrb	r3, [r7, #3]
 800a5e6:	f003 030f 	and.w	r3, r3, #15
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	7912      	ldrb	r2, [r2, #4]
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d901      	bls.n	800a5f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e040      	b.n	800a678 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a5f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	da0e      	bge.n	800a61c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5fe:	78fb      	ldrb	r3, [r7, #3]
 800a600:	f003 0207 	and.w	r2, r3, #7
 800a604:	4613      	mov	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	00db      	lsls	r3, r3, #3
 800a60c:	3310      	adds	r3, #16
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	4413      	add	r3, r2
 800a612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2201      	movs	r2, #1
 800a618:	705a      	strb	r2, [r3, #1]
 800a61a:	e00e      	b.n	800a63a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a61c:	78fb      	ldrb	r3, [r7, #3]
 800a61e:	f003 0207 	and.w	r2, r3, #7
 800a622:	4613      	mov	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4413      	add	r3, r2
 800a628:	00db      	lsls	r3, r3, #3
 800a62a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	4413      	add	r3, r2
 800a632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2200      	movs	r2, #0
 800a63e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a640:	78fb      	ldrb	r3, [r7, #3]
 800a642:	f003 0307 	and.w	r3, r3, #7
 800a646:	b2da      	uxtb	r2, r3
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a652:	2b01      	cmp	r3, #1
 800a654:	d101      	bne.n	800a65a <HAL_PCD_EP_ClrStall+0x82>
 800a656:	2302      	movs	r3, #2
 800a658:	e00e      	b.n	800a678 <HAL_PCD_EP_ClrStall+0xa0>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2201      	movs	r2, #1
 800a65e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68f9      	ldr	r1, [r7, #12]
 800a668:	4618      	mov	r0, r3
 800a66a:	f008 f932 	bl	80128d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b092      	sub	sp, #72	@ 0x48
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a688:	e333      	b.n	800acf2 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a692:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a694:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a696:	b2db      	uxtb	r3, r3
 800a698:	f003 030f 	and.w	r3, r3, #15
 800a69c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800a6a0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f040 8108 	bne.w	800a8ba <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a6aa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a6ac:	f003 0310 	and.w	r3, r3, #16
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d14c      	bne.n	800a74e <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	881b      	ldrh	r3, [r3, #0]
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a6c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6c4:	813b      	strh	r3, [r7, #8]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	893b      	ldrh	r3, [r7, #8]
 800a6cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	3310      	adds	r3, #16
 800a6dc:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	00db      	lsls	r3, r3, #3
 800a6f0:	4413      	add	r3, r2
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	6812      	ldr	r2, [r2, #0]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a6fc:	881b      	ldrh	r3, [r3, #0]
 800a6fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a704:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a708:	695a      	ldr	r2, [r3, #20]
 800a70a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a70c:	69db      	ldr	r3, [r3, #28]
 800a70e:	441a      	add	r2, r3
 800a710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a712:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a714:	2100      	movs	r1, #0
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f00e f99d 	bl	8018a56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	7b1b      	ldrb	r3, [r3, #12]
 800a720:	b2db      	uxtb	r3, r3
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 82e5 	beq.w	800acf2 <PCD_EP_ISR_Handler+0x672>
 800a728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a72a:	699b      	ldr	r3, [r3, #24]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f040 82e0 	bne.w	800acf2 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	7b1b      	ldrb	r3, [r3, #12]
 800a736:	b2db      	uxtb	r3, r3
 800a738:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a73c:	b2da      	uxtb	r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	731a      	strb	r2, [r3, #12]
 800a74c:	e2d1      	b.n	800acf2 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a754:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	881b      	ldrh	r3, [r3, #0]
 800a75c:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a75e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a764:	2b00      	cmp	r3, #0
 800a766:	d032      	beq.n	800a7ce <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a770:	b29b      	uxth	r3, r3
 800a772:	461a      	mov	r2, r3
 800a774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	4413      	add	r3, r2
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	6812      	ldr	r2, [r2, #0]
 800a780:	4413      	add	r3, r2
 800a782:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a786:	881b      	ldrh	r3, [r3, #0]
 800a788:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a78c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a78e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6818      	ldr	r0, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800a79a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a79c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a79e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7a0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	f008 f9bb 	bl	8012b1e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	881b      	ldrh	r3, [r3, #0]
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	817b      	strh	r3, [r7, #10]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	897a      	ldrh	r2, [r7, #10]
 800a7be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a7c2:	b292      	uxth	r2, r2
 800a7c4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f00e f918 	bl	80189fc <HAL_PCD_SetupStageCallback>
 800a7cc:	e291      	b.n	800acf2 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a7ce:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f280 828d 	bge.w	800acf2 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	881b      	ldrh	r3, [r3, #0]
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a7e4:	4013      	ands	r3, r2
 800a7e6:	81fb      	strh	r3, [r7, #14]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	89fa      	ldrh	r2, [r7, #14]
 800a7ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a7f2:	b292      	uxth	r2, r2
 800a7f4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	461a      	mov	r2, r3
 800a802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	00db      	lsls	r3, r3, #3
 800a808:	4413      	add	r3, r2
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	6812      	ldr	r2, [r2, #0]
 800a80e:	4413      	add	r3, r2
 800a810:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a814:	881b      	ldrh	r3, [r3, #0]
 800a816:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a81a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a81c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a81e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a820:	69db      	ldr	r3, [r3, #28]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d019      	beq.n	800a85a <PCD_EP_ISR_Handler+0x1da>
 800a826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a828:	695b      	ldr	r3, [r3, #20]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d015      	beq.n	800a85a <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6818      	ldr	r0, [r3, #0]
 800a832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a834:	6959      	ldr	r1, [r3, #20]
 800a836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a838:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a83a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a83c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a83e:	b29b      	uxth	r3, r3
 800a840:	f008 f96d 	bl	8012b1e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a846:	695a      	ldr	r2, [r3, #20]
 800a848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a84a:	69db      	ldr	r3, [r3, #28]
 800a84c:	441a      	add	r2, r3
 800a84e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a850:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a852:	2100      	movs	r1, #0
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f00e f8e3 	bl	8018a20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	881b      	ldrh	r3, [r3, #0]
 800a860:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800a862:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f040 8242 	bne.w	800acf2 <PCD_EP_ISR_Handler+0x672>
 800a86e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a870:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a874:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a878:	f000 823b 	beq.w	800acf2 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	881b      	ldrh	r3, [r3, #0]
 800a882:	b29b      	uxth	r3, r3
 800a884:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a88c:	81bb      	strh	r3, [r7, #12]
 800a88e:	89bb      	ldrh	r3, [r7, #12]
 800a890:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a894:	81bb      	strh	r3, [r7, #12]
 800a896:	89bb      	ldrh	r3, [r7, #12]
 800a898:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a89c:	81bb      	strh	r3, [r7, #12]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	89bb      	ldrh	r3, [r7, #12]
 800a8a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	8013      	strh	r3, [r2, #0]
 800a8b8:	e21b      	b.n	800acf2 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	4413      	add	r3, r2
 800a8c8:	881b      	ldrh	r3, [r3, #0]
 800a8ca:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a8cc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f280 80f1 	bge.w	800aab8 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	4413      	add	r3, r2
 800a8e4:	881b      	ldrh	r3, [r3, #0]
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4413      	add	r3, r2
 800a8fe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a900:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a904:	b292      	uxth	r2, r2
 800a906:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a908:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800a90c:	4613      	mov	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	4413      	add	r3, r2
 800a912:	00db      	lsls	r3, r3, #3
 800a914:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	4413      	add	r3, r2
 800a91c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a91e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a920:	7b1b      	ldrb	r3, [r3, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d123      	bne.n	800a96e <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a92e:	b29b      	uxth	r3, r3
 800a930:	461a      	mov	r2, r3
 800a932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	00db      	lsls	r3, r3, #3
 800a938:	4413      	add	r3, r2
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	6812      	ldr	r2, [r2, #0]
 800a93e:	4413      	add	r3, r2
 800a940:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a944:	881b      	ldrh	r3, [r3, #0]
 800a946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a94a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800a94e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a952:	2b00      	cmp	r3, #0
 800a954:	f000 808b 	beq.w	800aa6e <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6818      	ldr	r0, [r3, #0]
 800a95c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a95e:	6959      	ldr	r1, [r3, #20]
 800a960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a962:	88da      	ldrh	r2, [r3, #6]
 800a964:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a968:	f008 f8d9 	bl	8012b1e <USB_ReadPMA>
 800a96c:	e07f      	b.n	800aa6e <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a96e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a970:	78db      	ldrb	r3, [r3, #3]
 800a972:	2b02      	cmp	r3, #2
 800a974:	d109      	bne.n	800a98a <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a976:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a978:	461a      	mov	r2, r3
 800a97a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 f9c6 	bl	800ad0e <HAL_PCD_EP_DB_Receive>
 800a982:	4603      	mov	r3, r0
 800a984:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a988:	e071      	b.n	800aa6e <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	881b      	ldrh	r3, [r3, #0]
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9a4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	441a      	add	r2, r3
 800a9b4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a9b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	881b      	ldrh	r3, [r3, #0]
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d022      	beq.n	800aa2a <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	00db      	lsls	r3, r3, #3
 800a9f6:	4413      	add	r3, r2
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	6812      	ldr	r2, [r2, #0]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aa02:	881b      	ldrh	r3, [r3, #0]
 800aa04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa08:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800aa0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d02c      	beq.n	800aa6e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6818      	ldr	r0, [r3, #0]
 800aa18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa1a:	6959      	ldr	r1, [r3, #20]
 800aa1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa1e:	891a      	ldrh	r2, [r3, #8]
 800aa20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800aa24:	f008 f87b 	bl	8012b1e <USB_ReadPMA>
 800aa28:	e021      	b.n	800aa6e <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	461a      	mov	r2, r3
 800aa36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	00db      	lsls	r3, r3, #3
 800aa3c:	4413      	add	r3, r2
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	6812      	ldr	r2, [r2, #0]
 800aa42:	4413      	add	r3, r2
 800aa44:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa48:	881b      	ldrh	r3, [r3, #0]
 800aa4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa4e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800aa52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d009      	beq.n	800aa6e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6818      	ldr	r0, [r3, #0]
 800aa5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa60:	6959      	ldr	r1, [r3, #20]
 800aa62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa64:	895a      	ldrh	r2, [r3, #10]
 800aa66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800aa6a:	f008 f858 	bl	8012b1e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800aa6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa70:	69da      	ldr	r2, [r3, #28]
 800aa72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800aa76:	441a      	add	r2, r3
 800aa78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa7a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800aa7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa7e:	695a      	ldr	r2, [r3, #20]
 800aa80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800aa84:	441a      	add	r2, r3
 800aa86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa88:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800aa8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d005      	beq.n	800aa9e <PCD_EP_ISR_Handler+0x41e>
 800aa92:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800aa96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d206      	bcs.n	800aaac <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800aa9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f00d ffbb 	bl	8018a20 <HAL_PCD_DataOutStageCallback>
 800aaaa:	e005      	b.n	800aab8 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aab2:	4618      	mov	r0, r3
 800aab4:	f007 f90d 	bl	8011cd2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800aab8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aaba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f000 8117 	beq.w	800acf2 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800aac4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800aac8:	4613      	mov	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	4413      	add	r3, r2
 800aace:	00db      	lsls	r3, r3, #3
 800aad0:	3310      	adds	r3, #16
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	4413      	add	r3, r2
 800aad6:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	461a      	mov	r2, r3
 800aade:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4413      	add	r3, r2
 800aae6:	881b      	ldrh	r3, [r3, #0]
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800aaee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaf2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	461a      	mov	r2, r3
 800aafa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	441a      	add	r2, r3
 800ab02:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ab04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800ab10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab12:	78db      	ldrb	r3, [r3, #3]
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	f040 80a1 	bne.w	800ac5c <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800ab1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800ab20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab22:	7b1b      	ldrb	r3, [r3, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 8092 	beq.w	800ac4e <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ab2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d046      	beq.n	800abc2 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ab34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab36:	785b      	ldrb	r3, [r3, #1]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d126      	bne.n	800ab8a <PCD_EP_ISR_Handler+0x50a>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	617b      	str	r3, [r7, #20]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	4413      	add	r3, r2
 800ab52:	617b      	str	r3, [r7, #20]
 800ab54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	00da      	lsls	r2, r3, #3
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ab62:	613b      	str	r3, [r7, #16]
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	801a      	strh	r2, [r3, #0]
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	881b      	ldrh	r3, [r3, #0]
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab82:	b29a      	uxth	r2, r3
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	801a      	strh	r2, [r3, #0]
 800ab88:	e061      	b.n	800ac4e <PCD_EP_ISR_Handler+0x5ce>
 800ab8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab8c:	785b      	ldrb	r3, [r3, #1]
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d15d      	bne.n	800ac4e <PCD_EP_ISR_Handler+0x5ce>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	61fb      	str	r3, [r7, #28]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	461a      	mov	r2, r3
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	4413      	add	r3, r2
 800aba8:	61fb      	str	r3, [r7, #28]
 800abaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	00da      	lsls	r2, r3, #3
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	4413      	add	r3, r2
 800abb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800abb8:	61bb      	str	r3, [r7, #24]
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	2200      	movs	r2, #0
 800abbe:	801a      	strh	r2, [r3, #0]
 800abc0:	e045      	b.n	800ac4e <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800abc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abca:	785b      	ldrb	r3, [r3, #1]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d126      	bne.n	800ac1e <PCD_EP_ISR_Handler+0x59e>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	627b      	str	r3, [r7, #36]	@ 0x24
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abde:	b29b      	uxth	r3, r3
 800abe0:	461a      	mov	r2, r3
 800abe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe4:	4413      	add	r3, r2
 800abe6:	627b      	str	r3, [r7, #36]	@ 0x24
 800abe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	00da      	lsls	r2, r3, #3
 800abee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf0:	4413      	add	r3, r2
 800abf2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800abf6:	623b      	str	r3, [r7, #32]
 800abf8:	6a3b      	ldr	r3, [r7, #32]
 800abfa:	881b      	ldrh	r3, [r3, #0]
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac02:	b29a      	uxth	r2, r3
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	801a      	strh	r2, [r3, #0]
 800ac08:	6a3b      	ldr	r3, [r7, #32]
 800ac0a:	881b      	ldrh	r3, [r3, #0]
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac16:	b29a      	uxth	r2, r3
 800ac18:	6a3b      	ldr	r3, [r7, #32]
 800ac1a:	801a      	strh	r2, [r3, #0]
 800ac1c:	e017      	b.n	800ac4e <PCD_EP_ISR_Handler+0x5ce>
 800ac1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac20:	785b      	ldrb	r3, [r3, #1]
 800ac22:	2b01      	cmp	r3, #1
 800ac24:	d113      	bne.n	800ac4e <PCD_EP_ISR_Handler+0x5ce>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	461a      	mov	r2, r3
 800ac32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac34:	4413      	add	r3, r2
 800ac36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	00da      	lsls	r2, r3, #3
 800ac3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac40:	4413      	add	r3, r2
 800ac42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ac46:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ac4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	4619      	mov	r1, r3
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f00d fefe 	bl	8018a56 <HAL_PCD_DataInStageCallback>
 800ac5a:	e04a      	b.n	800acf2 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800ac5c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ac5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d13f      	bne.n	800ace6 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	461a      	mov	r2, r3
 800ac72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	00db      	lsls	r3, r3, #3
 800ac78:	4413      	add	r3, r2
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	6812      	ldr	r2, [r2, #0]
 800ac7e:	4413      	add	r3, r2
 800ac80:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ac84:	881b      	ldrh	r3, [r3, #0]
 800ac86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac8a:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800ac8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac8e:	699a      	ldr	r2, [r3, #24]
 800ac90:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d906      	bls.n	800aca4 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800ac96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac98:	699a      	ldr	r2, [r3, #24]
 800ac9a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ac9c:	1ad2      	subs	r2, r2, r3
 800ac9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aca0:	619a      	str	r2, [r3, #24]
 800aca2:	e002      	b.n	800acaa <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800aca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aca6:	2200      	movs	r2, #0
 800aca8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800acaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acac:	699b      	ldr	r3, [r3, #24]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d106      	bne.n	800acc0 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800acb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	4619      	mov	r1, r3
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f00d fecc 	bl	8018a56 <HAL_PCD_DataInStageCallback>
 800acbe:	e018      	b.n	800acf2 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800acc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acc2:	695a      	ldr	r2, [r3, #20]
 800acc4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800acc6:	441a      	add	r2, r3
 800acc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acca:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800accc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acce:	69da      	ldr	r2, [r3, #28]
 800acd0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800acd2:	441a      	add	r2, r3
 800acd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acd6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800acde:	4618      	mov	r0, r3
 800ace0:	f006 fff7 	bl	8011cd2 <USB_EPStartXfer>
 800ace4:	e005      	b.n	800acf2 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800ace6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ace8:	461a      	mov	r2, r3
 800acea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 f917 	bl	800af20 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	b21b      	sxth	r3, r3
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	f6ff acc3 	blt.w	800a68a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3748      	adds	r7, #72	@ 0x48
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b088      	sub	sp, #32
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	60f8      	str	r0, [r7, #12]
 800ad16:	60b9      	str	r1, [r7, #8]
 800ad18:	4613      	mov	r3, r2
 800ad1a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ad1c:	88fb      	ldrh	r3, [r7, #6]
 800ad1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d07c      	beq.n	800ae20 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	461a      	mov	r2, r3
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	00db      	lsls	r3, r3, #3
 800ad38:	4413      	add	r3, r2
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	6812      	ldr	r2, [r2, #0]
 800ad3e:	4413      	add	r3, r2
 800ad40:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ad44:	881b      	ldrh	r3, [r3, #0]
 800ad46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad4a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	699a      	ldr	r2, [r3, #24]
 800ad50:	8b7b      	ldrh	r3, [r7, #26]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d306      	bcc.n	800ad64 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	699a      	ldr	r2, [r3, #24]
 800ad5a:	8b7b      	ldrh	r3, [r7, #26]
 800ad5c:	1ad2      	subs	r2, r2, r3
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	619a      	str	r2, [r3, #24]
 800ad62:	e002      	b.n	800ad6a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	2200      	movs	r2, #0
 800ad68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	699b      	ldr	r3, [r3, #24]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d123      	bne.n	800adba <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	461a      	mov	r2, r3
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	4413      	add	r3, r2
 800ad80:	881b      	ldrh	r3, [r3, #0]
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad8c:	833b      	strh	r3, [r7, #24]
 800ad8e:	8b3b      	ldrh	r3, [r7, #24]
 800ad90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ad94:	833b      	strh	r3, [r7, #24]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	441a      	add	r2, r3
 800ada4:	8b3b      	ldrh	r3, [r7, #24]
 800ada6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800adba:	88fb      	ldrh	r3, [r7, #6]
 800adbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d01f      	beq.n	800ae04 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	461a      	mov	r2, r3
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4413      	add	r3, r2
 800add2:	881b      	ldrh	r3, [r3, #0]
 800add4:	b29b      	uxth	r3, r3
 800add6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800adda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adde:	82fb      	strh	r3, [r7, #22]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	461a      	mov	r2, r3
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	441a      	add	r2, r3
 800adee:	8afb      	ldrh	r3, [r7, #22]
 800adf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adfc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800ae04:	8b7b      	ldrh	r3, [r7, #26]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 8085 	beq.w	800af16 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6818      	ldr	r0, [r3, #0]
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	6959      	ldr	r1, [r3, #20]
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	891a      	ldrh	r2, [r3, #8]
 800ae18:	8b7b      	ldrh	r3, [r7, #26]
 800ae1a:	f007 fe80 	bl	8012b1e <USB_ReadPMA>
 800ae1e:	e07a      	b.n	800af16 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	00db      	lsls	r3, r3, #3
 800ae32:	4413      	add	r3, r2
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	6812      	ldr	r2, [r2, #0]
 800ae38:	4413      	add	r3, r2
 800ae3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ae3e:	881b      	ldrh	r3, [r3, #0]
 800ae40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae44:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	699a      	ldr	r2, [r3, #24]
 800ae4a:	8b7b      	ldrh	r3, [r7, #26]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d306      	bcc.n	800ae5e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	699a      	ldr	r2, [r3, #24]
 800ae54:	8b7b      	ldrh	r3, [r7, #26]
 800ae56:	1ad2      	subs	r2, r2, r3
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	619a      	str	r2, [r3, #24]
 800ae5c:	e002      	b.n	800ae64 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	2200      	movs	r2, #0
 800ae62:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d123      	bne.n	800aeb4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	461a      	mov	r2, r3
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4413      	add	r3, r2
 800ae7a:	881b      	ldrh	r3, [r3, #0]
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae86:	83fb      	strh	r3, [r7, #30]
 800ae88:	8bfb      	ldrh	r3, [r7, #30]
 800ae8a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ae8e:	83fb      	strh	r3, [r7, #30]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	461a      	mov	r2, r3
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	441a      	add	r2, r3
 800ae9e:	8bfb      	ldrh	r3, [r7, #30]
 800aea0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aea4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aea8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aeac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800aeb4:	88fb      	ldrh	r3, [r7, #6]
 800aeb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d11f      	bne.n	800aefe <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	461a      	mov	r2, r3
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	4413      	add	r3, r2
 800aecc:	881b      	ldrh	r3, [r3, #0]
 800aece:	b29b      	uxth	r3, r3
 800aed0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aed8:	83bb      	strh	r3, [r7, #28]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	461a      	mov	r2, r3
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	441a      	add	r2, r3
 800aee8:	8bbb      	ldrh	r3, [r7, #28]
 800aeea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aeee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aef6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800aefe:	8b7b      	ldrh	r3, [r7, #26]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d008      	beq.n	800af16 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6818      	ldr	r0, [r3, #0]
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	6959      	ldr	r1, [r3, #20]
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	895a      	ldrh	r2, [r3, #10]
 800af10:	8b7b      	ldrh	r3, [r7, #26]
 800af12:	f007 fe04 	bl	8012b1e <USB_ReadPMA>
    }
  }

  return count;
 800af16:	8b7b      	ldrh	r3, [r7, #26]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3720      	adds	r7, #32
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b0a6      	sub	sp, #152	@ 0x98
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	4613      	mov	r3, r2
 800af2c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800af2e:	88fb      	ldrh	r3, [r7, #6]
 800af30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af34:	2b00      	cmp	r3, #0
 800af36:	f000 81f7 	beq.w	800b328 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af42:	b29b      	uxth	r3, r3
 800af44:	461a      	mov	r2, r3
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	00db      	lsls	r3, r3, #3
 800af4c:	4413      	add	r3, r2
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	6812      	ldr	r2, [r2, #0]
 800af52:	4413      	add	r3, r2
 800af54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800af58:	881b      	ldrh	r3, [r3, #0]
 800af5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af5e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	699a      	ldr	r2, [r3, #24]
 800af66:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d907      	bls.n	800af7e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	699a      	ldr	r2, [r3, #24]
 800af72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800af76:	1ad2      	subs	r2, r2, r3
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	619a      	str	r2, [r3, #24]
 800af7c:	e002      	b.n	800af84 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	2200      	movs	r2, #0
 800af82:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f040 80e1 	bne.w	800b150 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	785b      	ldrb	r3, [r3, #1]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d126      	bne.n	800afe4 <HAL_PCD_EP_DB_Transmit+0xc4>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	633b      	str	r3, [r7, #48]	@ 0x30
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	461a      	mov	r2, r3
 800afa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afaa:	4413      	add	r3, r2
 800afac:	633b      	str	r3, [r7, #48]	@ 0x30
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	00da      	lsls	r2, r3, #3
 800afb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb6:	4413      	add	r3, r2
 800afb8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800afbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800afbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afc0:	881b      	ldrh	r3, [r3, #0]
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800afc8:	b29a      	uxth	r2, r3
 800afca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afcc:	801a      	strh	r2, [r3, #0]
 800afce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afd0:	881b      	ldrh	r3, [r3, #0]
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afdc:	b29a      	uxth	r2, r3
 800afde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe0:	801a      	strh	r2, [r3, #0]
 800afe2:	e01a      	b.n	800b01a <HAL_PCD_EP_DB_Transmit+0xfa>
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	785b      	ldrb	r3, [r3, #1]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d116      	bne.n	800b01a <HAL_PCD_EP_DB_Transmit+0xfa>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800affa:	b29b      	uxth	r3, r3
 800affc:	461a      	mov	r2, r3
 800affe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b000:	4413      	add	r3, r2
 800b002:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	00da      	lsls	r2, r3, #3
 800b00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00c:	4413      	add	r3, r2
 800b00e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b012:	637b      	str	r3, [r7, #52]	@ 0x34
 800b014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b016:	2200      	movs	r2, #0
 800b018:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	785b      	ldrb	r3, [r3, #1]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d126      	bne.n	800b076 <HAL_PCD_EP_DB_Transmit+0x156>
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	623b      	str	r3, [r7, #32]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b036:	b29b      	uxth	r3, r3
 800b038:	461a      	mov	r2, r3
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	4413      	add	r3, r2
 800b03e:	623b      	str	r3, [r7, #32]
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	00da      	lsls	r2, r3, #3
 800b046:	6a3b      	ldr	r3, [r7, #32]
 800b048:	4413      	add	r3, r2
 800b04a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b04e:	61fb      	str	r3, [r7, #28]
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	881b      	ldrh	r3, [r3, #0]
 800b054:	b29b      	uxth	r3, r3
 800b056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	801a      	strh	r2, [r3, #0]
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	881b      	ldrh	r3, [r3, #0]
 800b064:	b29b      	uxth	r3, r3
 800b066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b06a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b06e:	b29a      	uxth	r2, r3
 800b070:	69fb      	ldr	r3, [r7, #28]
 800b072:	801a      	strh	r2, [r3, #0]
 800b074:	e017      	b.n	800b0a6 <HAL_PCD_EP_DB_Transmit+0x186>
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	785b      	ldrb	r3, [r3, #1]
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d113      	bne.n	800b0a6 <HAL_PCD_EP_DB_Transmit+0x186>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b086:	b29b      	uxth	r3, r3
 800b088:	461a      	mov	r2, r3
 800b08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b08c:	4413      	add	r3, r2
 800b08e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	00da      	lsls	r2, r3, #3
 800b096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b098:	4413      	add	r3, r2
 800b09a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b09e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	78db      	ldrb	r3, [r3, #3]
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d123      	bne.n	800b0f6 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4413      	add	r3, r2
 800b0bc:	881b      	ldrh	r3, [r3, #0]
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0c8:	837b      	strh	r3, [r7, #26]
 800b0ca:	8b7b      	ldrh	r3, [r7, #26]
 800b0cc:	f083 0320 	eor.w	r3, r3, #32
 800b0d0:	837b      	strh	r3, [r7, #26]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	441a      	add	r2, r3
 800b0e0:	8b7b      	ldrh	r3, [r7, #26]
 800b0e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f00d fcaa 	bl	8018a56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b102:	88fb      	ldrh	r3, [r7, #6]
 800b104:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d01f      	beq.n	800b14c <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	461a      	mov	r2, r3
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4413      	add	r3, r2
 800b11a:	881b      	ldrh	r3, [r3, #0]
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b126:	833b      	strh	r3, [r7, #24]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	461a      	mov	r2, r3
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	441a      	add	r2, r3
 800b136:	8b3b      	ldrh	r3, [r7, #24]
 800b138:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b13c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b140:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b148:	b29b      	uxth	r3, r3
 800b14a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	e31f      	b.n	800b790 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b150:	88fb      	ldrh	r3, [r7, #6]
 800b152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b156:	2b00      	cmp	r3, #0
 800b158:	d021      	beq.n	800b19e <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	461a      	mov	r2, r3
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b174:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	461a      	mov	r2, r3
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	441a      	add	r2, r3
 800b186:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b18a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b18e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b192:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	f040 82ca 	bne.w	800b73e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	695a      	ldr	r2, [r3, #20]
 800b1ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b1b2:	441a      	add	r2, r3
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	69da      	ldr	r2, [r3, #28]
 800b1bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b1c0:	441a      	add	r2, r3
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	6a1a      	ldr	r2, [r3, #32]
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	691b      	ldr	r3, [r3, #16]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d309      	bcc.n	800b1e6 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	691b      	ldr	r3, [r3, #16]
 800b1d6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	6a1a      	ldr	r2, [r3, #32]
 800b1dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b1de:	1ad2      	subs	r2, r2, r3
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	621a      	str	r2, [r3, #32]
 800b1e4:	e015      	b.n	800b212 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	6a1b      	ldr	r3, [r3, #32]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d107      	bne.n	800b1fe <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800b1ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b1f2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b1fc:	e009      	b.n	800b212 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	2200      	movs	r2, #0
 800b202:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	6a1b      	ldr	r3, [r3, #32]
 800b20a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	2200      	movs	r2, #0
 800b210:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	785b      	ldrb	r3, [r3, #1]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d15f      	bne.n	800b2da <HAL_PCD_EP_DB_Transmit+0x3ba>
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b228:	b29b      	uxth	r3, r3
 800b22a:	461a      	mov	r2, r3
 800b22c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b22e:	4413      	add	r3, r2
 800b230:	643b      	str	r3, [r7, #64]	@ 0x40
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	00da      	lsls	r2, r3, #3
 800b238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b23a:	4413      	add	r3, r2
 800b23c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b240:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b244:	881b      	ldrh	r3, [r3, #0]
 800b246:	b29b      	uxth	r3, r3
 800b248:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b250:	801a      	strh	r2, [r3, #0]
 800b252:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b254:	2b00      	cmp	r3, #0
 800b256:	d10a      	bne.n	800b26e <HAL_PCD_EP_DB_Transmit+0x34e>
 800b258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b25a:	881b      	ldrh	r3, [r3, #0]
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b266:	b29a      	uxth	r2, r3
 800b268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b26a:	801a      	strh	r2, [r3, #0]
 800b26c:	e051      	b.n	800b312 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b26e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b270:	2b3e      	cmp	r3, #62	@ 0x3e
 800b272:	d816      	bhi.n	800b2a2 <HAL_PCD_EP_DB_Transmit+0x382>
 800b274:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b276:	085b      	lsrs	r3, r3, #1
 800b278:	653b      	str	r3, [r7, #80]	@ 0x50
 800b27a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b27c:	f003 0301 	and.w	r3, r3, #1
 800b280:	2b00      	cmp	r3, #0
 800b282:	d002      	beq.n	800b28a <HAL_PCD_EP_DB_Transmit+0x36a>
 800b284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b286:	3301      	adds	r3, #1
 800b288:	653b      	str	r3, [r7, #80]	@ 0x50
 800b28a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b28c:	881b      	ldrh	r3, [r3, #0]
 800b28e:	b29a      	uxth	r2, r3
 800b290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b292:	b29b      	uxth	r3, r3
 800b294:	029b      	lsls	r3, r3, #10
 800b296:	b29b      	uxth	r3, r3
 800b298:	4313      	orrs	r3, r2
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b29e:	801a      	strh	r2, [r3, #0]
 800b2a0:	e037      	b.n	800b312 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b2a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b2a4:	095b      	lsrs	r3, r3, #5
 800b2a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b2a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b2aa:	f003 031f 	and.w	r3, r3, #31
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d102      	bne.n	800b2b8 <HAL_PCD_EP_DB_Transmit+0x398>
 800b2b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b2b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ba:	881b      	ldrh	r3, [r3, #0]
 800b2bc:	b29a      	uxth	r2, r3
 800b2be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	029b      	lsls	r3, r3, #10
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2d6:	801a      	strh	r2, [r3, #0]
 800b2d8:	e01b      	b.n	800b312 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	785b      	ldrb	r3, [r3, #1]
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d117      	bne.n	800b312 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2f6:	4413      	add	r3, r2
 800b2f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	00da      	lsls	r2, r3, #3
 800b300:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b302:	4413      	add	r3, r2
 800b304:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b308:	647b      	str	r3, [r7, #68]	@ 0x44
 800b30a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b310:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6818      	ldr	r0, [r3, #0]
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	6959      	ldr	r1, [r3, #20]
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	891a      	ldrh	r2, [r3, #8]
 800b31e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b320:	b29b      	uxth	r3, r3
 800b322:	f007 fbba 	bl	8012a9a <USB_WritePMA>
 800b326:	e20a      	b.n	800b73e <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b330:	b29b      	uxth	r3, r3
 800b332:	461a      	mov	r2, r3
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	00db      	lsls	r3, r3, #3
 800b33a:	4413      	add	r3, r2
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	6812      	ldr	r2, [r2, #0]
 800b340:	4413      	add	r3, r2
 800b342:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b346:	881b      	ldrh	r3, [r3, #0]
 800b348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b34c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	699a      	ldr	r2, [r3, #24]
 800b354:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b358:	429a      	cmp	r2, r3
 800b35a:	d307      	bcc.n	800b36c <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	699a      	ldr	r2, [r3, #24]
 800b360:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b364:	1ad2      	subs	r2, r2, r3
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	619a      	str	r2, [r3, #24]
 800b36a:	e002      	b.n	800b372 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	2200      	movs	r2, #0
 800b370:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	699b      	ldr	r3, [r3, #24]
 800b376:	2b00      	cmp	r3, #0
 800b378:	f040 80f6 	bne.w	800b568 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	785b      	ldrb	r3, [r3, #1]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d126      	bne.n	800b3d2 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	677b      	str	r3, [r7, #116]	@ 0x74
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b392:	b29b      	uxth	r3, r3
 800b394:	461a      	mov	r2, r3
 800b396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b398:	4413      	add	r3, r2
 800b39a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	00da      	lsls	r2, r3, #3
 800b3a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3a4:	4413      	add	r3, r2
 800b3a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b3aa:	673b      	str	r3, [r7, #112]	@ 0x70
 800b3ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3ae:	881b      	ldrh	r3, [r3, #0]
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3b6:	b29a      	uxth	r2, r3
 800b3b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3ba:	801a      	strh	r2, [r3, #0]
 800b3bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3be:	881b      	ldrh	r3, [r3, #0]
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3ce:	801a      	strh	r2, [r3, #0]
 800b3d0:	e01a      	b.n	800b408 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	785b      	ldrb	r3, [r3, #1]
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d116      	bne.n	800b408 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b3ee:	4413      	add	r3, r2
 800b3f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	00da      	lsls	r2, r3, #3
 800b3f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b3fa:	4413      	add	r3, r2
 800b3fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b400:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b402:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b404:	2200      	movs	r2, #0
 800b406:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	785b      	ldrb	r3, [r3, #1]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d12f      	bne.n	800b478 <HAL_PCD_EP_DB_Transmit+0x558>
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b428:	b29b      	uxth	r3, r3
 800b42a:	461a      	mov	r2, r3
 800b42c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b430:	4413      	add	r3, r2
 800b432:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	00da      	lsls	r2, r3, #3
 800b43c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b440:	4413      	add	r3, r2
 800b442:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b446:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b44a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b44e:	881b      	ldrh	r3, [r3, #0]
 800b450:	b29b      	uxth	r3, r3
 800b452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b456:	b29a      	uxth	r2, r3
 800b458:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b45c:	801a      	strh	r2, [r3, #0]
 800b45e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b462:	881b      	ldrh	r3, [r3, #0]
 800b464:	b29b      	uxth	r3, r3
 800b466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b46a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b46e:	b29a      	uxth	r2, r3
 800b470:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b474:	801a      	strh	r2, [r3, #0]
 800b476:	e01c      	b.n	800b4b2 <HAL_PCD_EP_DB_Transmit+0x592>
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	785b      	ldrb	r3, [r3, #1]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d118      	bne.n	800b4b2 <HAL_PCD_EP_DB_Transmit+0x592>
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b488:	b29b      	uxth	r3, r3
 800b48a:	461a      	mov	r2, r3
 800b48c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b490:	4413      	add	r3, r2
 800b492:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	00da      	lsls	r2, r3, #3
 800b49c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b4a0:	4413      	add	r3, r2
 800b4a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b4a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b4aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	78db      	ldrb	r3, [r3, #3]
 800b4b6:	2b02      	cmp	r3, #2
 800b4b8:	d127      	bne.n	800b50a <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	881b      	ldrh	r3, [r3, #0]
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4d4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b4d8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b4dc:	f083 0320 	eor.w	r3, r3, #32
 800b4e0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	441a      	add	r2, r3
 800b4f2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b4f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b506:	b29b      	uxth	r3, r3
 800b508:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	4619      	mov	r1, r3
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f00d faa0 	bl	8018a56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b516:	88fb      	ldrh	r3, [r7, #6]
 800b518:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d121      	bne.n	800b564 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	461a      	mov	r2, r3
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	4413      	add	r3, r2
 800b52e:	881b      	ldrh	r3, [r3, #0]
 800b530:	b29b      	uxth	r3, r3
 800b532:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b53a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	461a      	mov	r2, r3
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	441a      	add	r2, r3
 800b54c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b550:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b554:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b558:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b55c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b560:	b29b      	uxth	r3, r3
 800b562:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b564:	2300      	movs	r3, #0
 800b566:	e113      	b.n	800b790 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b568:	88fb      	ldrh	r3, [r7, #6]
 800b56a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d121      	bne.n	800b5b6 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	461a      	mov	r2, r3
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	4413      	add	r3, r2
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	b29b      	uxth	r3, r3
 800b584:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b58c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	461a      	mov	r2, r3
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	441a      	add	r2, r3
 800b59e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b5a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b5ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	f040 80be 	bne.w	800b73e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	695a      	ldr	r2, [r3, #20]
 800b5c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5ca:	441a      	add	r2, r3
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	69da      	ldr	r2, [r3, #28]
 800b5d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5d8:	441a      	add	r2, r3
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	6a1a      	ldr	r2, [r3, #32]
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	691b      	ldr	r3, [r3, #16]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d309      	bcc.n	800b5fe <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	691b      	ldr	r3, [r3, #16]
 800b5ee:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	6a1a      	ldr	r2, [r3, #32]
 800b5f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5f6:	1ad2      	subs	r2, r2, r3
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	621a      	str	r2, [r3, #32]
 800b5fc:	e015      	b.n	800b62a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	6a1b      	ldr	r3, [r3, #32]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d107      	bne.n	800b616 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800b606:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b60a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	2200      	movs	r2, #0
 800b610:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b614:	e009      	b.n	800b62a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	6a1b      	ldr	r3, [r3, #32]
 800b61a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	2200      	movs	r2, #0
 800b620:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	2200      	movs	r2, #0
 800b626:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	785b      	ldrb	r3, [r3, #1]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d15f      	bne.n	800b6f8 <HAL_PCD_EP_DB_Transmit+0x7d8>
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b646:	b29b      	uxth	r3, r3
 800b648:	461a      	mov	r2, r3
 800b64a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b64c:	4413      	add	r3, r2
 800b64e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	00da      	lsls	r2, r3, #3
 800b656:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b658:	4413      	add	r3, r2
 800b65a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b65e:	667b      	str	r3, [r7, #100]	@ 0x64
 800b660:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b662:	881b      	ldrh	r3, [r3, #0]
 800b664:	b29b      	uxth	r3, r3
 800b666:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b66a:	b29a      	uxth	r2, r3
 800b66c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b66e:	801a      	strh	r2, [r3, #0]
 800b670:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b672:	2b00      	cmp	r3, #0
 800b674:	d10a      	bne.n	800b68c <HAL_PCD_EP_DB_Transmit+0x76c>
 800b676:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b678:	881b      	ldrh	r3, [r3, #0]
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b684:	b29a      	uxth	r2, r3
 800b686:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b688:	801a      	strh	r2, [r3, #0]
 800b68a:	e04e      	b.n	800b72a <HAL_PCD_EP_DB_Transmit+0x80a>
 800b68c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b68e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b690:	d816      	bhi.n	800b6c0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800b692:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b694:	085b      	lsrs	r3, r3, #1
 800b696:	663b      	str	r3, [r7, #96]	@ 0x60
 800b698:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b69a:	f003 0301 	and.w	r3, r3, #1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d002      	beq.n	800b6a8 <HAL_PCD_EP_DB_Transmit+0x788>
 800b6a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	663b      	str	r3, [r7, #96]	@ 0x60
 800b6a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6aa:	881b      	ldrh	r3, [r3, #0]
 800b6ac:	b29a      	uxth	r2, r3
 800b6ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	029b      	lsls	r3, r3, #10
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6bc:	801a      	strh	r2, [r3, #0]
 800b6be:	e034      	b.n	800b72a <HAL_PCD_EP_DB_Transmit+0x80a>
 800b6c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6c2:	095b      	lsrs	r3, r3, #5
 800b6c4:	663b      	str	r3, [r7, #96]	@ 0x60
 800b6c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6c8:	f003 031f 	and.w	r3, r3, #31
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d102      	bne.n	800b6d6 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800b6d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	663b      	str	r3, [r7, #96]	@ 0x60
 800b6d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6d8:	881b      	ldrh	r3, [r3, #0]
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	029b      	lsls	r3, r3, #10
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6f4:	801a      	strh	r2, [r3, #0]
 800b6f6:	e018      	b.n	800b72a <HAL_PCD_EP_DB_Transmit+0x80a>
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	785b      	ldrb	r3, [r3, #1]
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d114      	bne.n	800b72a <HAL_PCD_EP_DB_Transmit+0x80a>
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b708:	b29b      	uxth	r3, r3
 800b70a:	461a      	mov	r2, r3
 800b70c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b70e:	4413      	add	r3, r2
 800b710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	00da      	lsls	r2, r3, #3
 800b718:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b71a:	4413      	add	r3, r2
 800b71c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b720:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b722:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b724:	b29a      	uxth	r2, r3
 800b726:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b728:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6818      	ldr	r0, [r3, #0]
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	6959      	ldr	r1, [r3, #20]
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	895a      	ldrh	r2, [r3, #10]
 800b736:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b738:	b29b      	uxth	r3, r3
 800b73a:	f007 f9ae 	bl	8012a9a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	461a      	mov	r2, r3
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	4413      	add	r3, r2
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	b29b      	uxth	r3, r3
 800b750:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b754:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b758:	82fb      	strh	r3, [r7, #22]
 800b75a:	8afb      	ldrh	r3, [r7, #22]
 800b75c:	f083 0310 	eor.w	r3, r3, #16
 800b760:	82fb      	strh	r3, [r7, #22]
 800b762:	8afb      	ldrh	r3, [r7, #22]
 800b764:	f083 0320 	eor.w	r3, r3, #32
 800b768:	82fb      	strh	r3, [r7, #22]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	461a      	mov	r2, r3
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	441a      	add	r2, r3
 800b778:	8afb      	ldrh	r3, [r7, #22]
 800b77a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b77e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800b78e:	2300      	movs	r3, #0
}
 800b790:	4618      	mov	r0, r3
 800b792:	3798      	adds	r7, #152	@ 0x98
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b798:	b480      	push	{r7}
 800b79a:	b087      	sub	sp, #28
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	607b      	str	r3, [r7, #4]
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	817b      	strh	r3, [r7, #10]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b7aa:	897b      	ldrh	r3, [r7, #10]
 800b7ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00b      	beq.n	800b7ce <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b7b6:	897b      	ldrh	r3, [r7, #10]
 800b7b8:	f003 0207 	and.w	r2, r3, #7
 800b7bc:	4613      	mov	r3, r2
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	4413      	add	r3, r2
 800b7c2:	00db      	lsls	r3, r3, #3
 800b7c4:	3310      	adds	r3, #16
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	617b      	str	r3, [r7, #20]
 800b7cc:	e009      	b.n	800b7e2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b7ce:	897a      	ldrh	r2, [r7, #10]
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4413      	add	r3, r2
 800b7d6:	00db      	lsls	r3, r3, #3
 800b7d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	4413      	add	r3, r2
 800b7e0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b7e2:	893b      	ldrh	r3, [r7, #8]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d107      	bne.n	800b7f8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	80da      	strh	r2, [r3, #6]
 800b7f6:	e00b      	b.n	800b810 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	b29a      	uxth	r2, r3
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	0c1b      	lsrs	r3, r3, #16
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	371c      	adds	r7, #28
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr

0800b81e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b81e:	b480      	push	{r7}
 800b820:	b085      	sub	sp, #20
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b842:	b29b      	uxth	r3, r3
 800b844:	f043 0301 	orr.w	r3, r3, #1
 800b848:	b29a      	uxth	r2, r3
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b856:	b29b      	uxth	r3, r3
 800b858:	f043 0302 	orr.w	r3, r3, #2
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800b864:	2300      	movs	r3, #0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3714      	adds	r7, #20
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
	...

0800b874 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b874:	b480      	push	{r7}
 800b876:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b878:	4b05      	ldr	r3, [pc, #20]	@ (800b890 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a04      	ldr	r2, [pc, #16]	@ (800b890 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b87e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b882:	6013      	str	r3, [r2, #0]
}
 800b884:	bf00      	nop
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	58000400 	.word	0x58000400

0800b894 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b894:	b480      	push	{r7}
 800b896:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800b898:	4b04      	ldr	r3, [pc, #16]	@ (800b8ac <HAL_PWREx_GetVoltageRange+0x18>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop
 800b8ac:	58000400 	.word	0x58000400

0800b8b0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800b8b4:	4b05      	ldr	r3, [pc, #20]	@ (800b8cc <HAL_PWREx_EnableVddUSB+0x1c>)
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	4a04      	ldr	r2, [pc, #16]	@ (800b8cc <HAL_PWREx_EnableVddUSB+0x1c>)
 800b8ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b8be:	6053      	str	r3, [r2, #4]
}
 800b8c0:	bf00      	nop
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	58000400 	.word	0x58000400

0800b8d0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800b8d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b8de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b8e2:	d101      	bne.n	800b8e8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	e000      	b.n	800b8ea <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800b8e8:	2300      	movs	r3, #0
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <LL_RCC_HSE_Enable>:
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800b8f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b902:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b906:	6013      	str	r3, [r2, #0]
}
 800b908:	bf00      	nop
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <LL_RCC_HSE_Disable>:
{
 800b912:	b480      	push	{r7}
 800b914:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800b916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b920:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b924:	6013      	str	r3, [r2, #0]
}
 800b926:	bf00      	nop
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <LL_RCC_HSE_IsReady>:
{
 800b930:	b480      	push	{r7}
 800b932:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800b934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b93e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b942:	d101      	bne.n	800b948 <LL_RCC_HSE_IsReady+0x18>
 800b944:	2301      	movs	r3, #1
 800b946:	e000      	b.n	800b94a <LL_RCC_HSE_IsReady+0x1a>
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <LL_RCC_HSI_Enable>:
{
 800b954:	b480      	push	{r7}
 800b956:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b962:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b966:	6013      	str	r3, [r2, #0]
}
 800b968:	bf00      	nop
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr

0800b972 <LL_RCC_HSI_Disable>:
{
 800b972:	b480      	push	{r7}
 800b974:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800b976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b984:	6013      	str	r3, [r2, #0]
}
 800b986:	bf00      	nop
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <LL_RCC_HSI_IsReady>:
{
 800b990:	b480      	push	{r7}
 800b992:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800b994:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b99e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9a2:	d101      	bne.n	800b9a8 <LL_RCC_HSI_IsReady+0x18>
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e000      	b.n	800b9aa <LL_RCC_HSI_IsReady+0x1a>
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <LL_RCC_HSI_SetCalibTrimming>:
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800b9bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	061b      	lsls	r3, r3, #24
 800b9ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	604b      	str	r3, [r1, #4]
}
 800b9d2:	bf00      	nop
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <LL_RCC_HSI48_Enable>:
{
 800b9de:	b480      	push	{r7}
 800b9e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b9e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b9ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9ee:	f043 0301 	orr.w	r3, r3, #1
 800b9f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800b9f6:	bf00      	nop
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <LL_RCC_HSI48_Disable>:
{
 800ba00:	b480      	push	{r7}
 800ba02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800ba04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ba0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba10:	f023 0301 	bic.w	r3, r3, #1
 800ba14:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800ba18:	bf00      	nop
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <LL_RCC_HSI48_IsReady>:
{
 800ba22:	b480      	push	{r7}
 800ba24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800ba26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ba2e:	f003 0302 	and.w	r3, r3, #2
 800ba32:	2b02      	cmp	r3, #2
 800ba34:	d101      	bne.n	800ba3a <LL_RCC_HSI48_IsReady+0x18>
 800ba36:	2301      	movs	r3, #1
 800ba38:	e000      	b.n	800ba3c <LL_RCC_HSI48_IsReady+0x1a>
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr

0800ba46 <LL_RCC_LSE_Enable>:
{
 800ba46:	b480      	push	{r7}
 800ba48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ba4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba56:	f043 0301 	orr.w	r3, r3, #1
 800ba5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ba5e:	bf00      	nop
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <LL_RCC_LSE_Disable>:
{
 800ba68:	b480      	push	{r7}
 800ba6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ba6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba78:	f023 0301 	bic.w	r3, r3, #1
 800ba7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ba80:	bf00      	nop
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr

0800ba8a <LL_RCC_LSE_EnableBypass>:
{
 800ba8a:	b480      	push	{r7}
 800ba8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ba8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba9a:	f043 0304 	orr.w	r3, r3, #4
 800ba9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800baa2:	bf00      	nop
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <LL_RCC_LSE_DisableBypass>:
{
 800baac:	b480      	push	{r7}
 800baae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bab8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800babc:	f023 0304 	bic.w	r3, r3, #4
 800bac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bac4:	bf00      	nop
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr

0800bace <LL_RCC_LSE_IsReady>:
{
 800bace:	b480      	push	{r7}
 800bad0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800bad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bada:	f003 0302 	and.w	r3, r3, #2
 800bade:	2b02      	cmp	r3, #2
 800bae0:	d101      	bne.n	800bae6 <LL_RCC_LSE_IsReady+0x18>
 800bae2:	2301      	movs	r3, #1
 800bae4:	e000      	b.n	800bae8 <LL_RCC_LSE_IsReady+0x1a>
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr

0800baf2 <LL_RCC_LSI1_Enable>:
{
 800baf2:	b480      	push	{r7}
 800baf4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800baf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bafa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bafe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bb02:	f043 0301 	orr.w	r3, r3, #1
 800bb06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bb0a:	bf00      	nop
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <LL_RCC_LSI1_Disable>:
{
 800bb14:	b480      	push	{r7}
 800bb16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800bb18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bb20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bb24:	f023 0301 	bic.w	r3, r3, #1
 800bb28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bb2c:	bf00      	nop
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr

0800bb36 <LL_RCC_LSI1_IsReady>:
{
 800bb36:	b480      	push	{r7}
 800bb38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800bb3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bb42:	f003 0302 	and.w	r3, r3, #2
 800bb46:	2b02      	cmp	r3, #2
 800bb48:	d101      	bne.n	800bb4e <LL_RCC_LSI1_IsReady+0x18>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e000      	b.n	800bb50 <LL_RCC_LSI1_IsReady+0x1a>
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <LL_RCC_LSI2_Enable>:
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800bb5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bb66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bb6a:	f043 0304 	orr.w	r3, r3, #4
 800bb6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bb72:	bf00      	nop
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <LL_RCC_LSI2_Disable>:
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800bb80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bb88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bb8c:	f023 0304 	bic.w	r3, r3, #4
 800bb90:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bb94:	bf00      	nop
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <LL_RCC_LSI2_IsReady>:
{
 800bb9e:	b480      	push	{r7}
 800bba0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800bba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bbaa:	f003 0308 	and.w	r3, r3, #8
 800bbae:	2b08      	cmp	r3, #8
 800bbb0:	d101      	bne.n	800bbb6 <LL_RCC_LSI2_IsReady+0x18>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e000      	b.n	800bbb8 <LL_RCC_LSI2_IsReady+0x1a>
 800bbb6:	2300      	movs	r3, #0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr

0800bbc2 <LL_RCC_LSI2_SetTrimming>:
{
 800bbc2:	b480      	push	{r7}
 800bbc4:	b083      	sub	sp, #12
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800bbca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bbd2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	021b      	lsls	r3, r3, #8
 800bbda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800bbe4:	bf00      	nop
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <LL_RCC_MSI_Enable>:
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800bbf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bbfe:	f043 0301 	orr.w	r3, r3, #1
 800bc02:	6013      	str	r3, [r2, #0]
}
 800bc04:	bf00      	nop
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <LL_RCC_MSI_Disable>:
{
 800bc0e:	b480      	push	{r7}
 800bc10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800bc12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc1c:	f023 0301 	bic.w	r3, r3, #1
 800bc20:	6013      	str	r3, [r2, #0]
}
 800bc22:	bf00      	nop
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <LL_RCC_MSI_IsReady>:
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800bc30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f003 0302 	and.w	r3, r3, #2
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d101      	bne.n	800bc42 <LL_RCC_MSI_IsReady+0x16>
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e000      	b.n	800bc44 <LL_RCC_MSI_IsReady+0x18>
 800bc42:	2300      	movs	r3, #0
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <LL_RCC_MSI_SetRange>:
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b083      	sub	sp, #12
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800bc56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bc60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	4313      	orrs	r3, r2
 800bc68:	600b      	str	r3, [r1, #0]
}
 800bc6a:	bf00      	nop
 800bc6c:	370c      	adds	r7, #12
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr

0800bc76 <LL_RCC_MSI_GetRange>:
{
 800bc76:	b480      	push	{r7}
 800bc78:	b083      	sub	sp, #12
 800bc7a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800bc7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc86:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2bb0      	cmp	r3, #176	@ 0xb0
 800bc8c:	d901      	bls.n	800bc92 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800bc8e:	23b0      	movs	r3, #176	@ 0xb0
 800bc90:	607b      	str	r3, [r7, #4]
  return msiRange;
 800bc92:	687b      	ldr	r3, [r7, #4]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	370c      	adds	r7, #12
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <LL_RCC_MSI_SetCalibTrimming>:
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800bca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	021b      	lsls	r3, r3, #8
 800bcb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	604b      	str	r3, [r1, #4]
}
 800bcbe:	bf00      	nop
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <LL_RCC_SetSysClkSource>:
{
 800bcca:	b480      	push	{r7}
 800bccc:	b083      	sub	sp, #12
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800bcd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	f023 0203 	bic.w	r2, r3, #3
 800bcdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	608b      	str	r3, [r1, #8]
}
 800bce6:	bf00      	nop
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr

0800bcf2 <LL_RCC_GetSysClkSource>:
{
 800bcf2:	b480      	push	{r7}
 800bcf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800bcf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	f003 030c 	and.w	r3, r3, #12
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr

0800bd0a <LL_RCC_SetAHBPrescaler>:
{
 800bd0a:	b480      	push	{r7}
 800bd0c:	b083      	sub	sp, #12
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800bd12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bd1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4313      	orrs	r3, r2
 800bd24:	608b      	str	r3, [r1, #8]
}
 800bd26:	bf00      	nop
 800bd28:	370c      	adds	r7, #12
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr

0800bd32 <LL_C2_RCC_SetAHBPrescaler>:
{
 800bd32:	b480      	push	{r7}
 800bd34:	b083      	sub	sp, #12
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800bd3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bd42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bd46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800bd52:	bf00      	nop
 800bd54:	370c      	adds	r7, #12
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr

0800bd5e <LL_RCC_SetAHB4Prescaler>:
{
 800bd5e:	b480      	push	{r7}
 800bd60:	b083      	sub	sp, #12
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800bd66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bd6e:	f023 020f 	bic.w	r2, r3, #15
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	091b      	lsrs	r3, r3, #4
 800bd76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800bd80:	bf00      	nop
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr

0800bd8c <LL_RCC_SetAPB1Prescaler>:
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800bd94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bd9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4313      	orrs	r3, r2
 800bda6:	608b      	str	r3, [r1, #8]
}
 800bda8:	bf00      	nop
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <LL_RCC_SetAPB2Prescaler>:
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800bdbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bdc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	608b      	str	r3, [r1, #8]
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <LL_RCC_GetAHBPrescaler>:
{
 800bddc:	b480      	push	{r7}
 800bdde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800bde0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <LL_RCC_GetAHB4Prescaler>:
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800bdf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdfc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800be00:	011b      	lsls	r3, r3, #4
 800be02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800be06:	4618      	mov	r0, r3
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <LL_RCC_GetAPB1Prescaler>:
{
 800be10:	b480      	push	{r7}
 800be12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800be14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800be1e:	4618      	mov	r0, r3
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <LL_RCC_GetAPB2Prescaler>:
{
 800be28:	b480      	push	{r7}
 800be2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800be2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800be36:	4618      	mov	r0, r3
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800be40:	b480      	push	{r7}
 800be42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800be44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800be52:	6013      	str	r3, [r2, #0]
}
 800be54:	bf00      	nop
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr

0800be5e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800be5e:	b480      	push	{r7}
 800be60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800be62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800be70:	6013      	str	r3, [r2, #0]
}
 800be72:	bf00      	nop
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800be7c:	b480      	push	{r7}
 800be7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800be80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be8e:	d101      	bne.n	800be94 <LL_RCC_PLL_IsReady+0x18>
 800be90:	2301      	movs	r3, #1
 800be92:	e000      	b.n	800be96 <LL_RCC_PLL_IsReady+0x1a>
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800bea0:	b480      	push	{r7}
 800bea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800bea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bea8:	68db      	ldr	r3, [r3, #12]
 800beaa:	0a1b      	lsrs	r3, r3, #8
 800beac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr

0800beba <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800beba:	b480      	push	{r7}
 800bebc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800bebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800bec8:	4618      	mov	r0, r3
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800bed2:	b480      	push	{r7}
 800bed4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800bed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr

0800beea <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800beea:	b480      	push	{r7}
 800beec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800beee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	f003 0303 	and.w	r3, r3, #3
}
 800bef8:	4618      	mov	r0, r3
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr

0800bf02 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800bf02:	b480      	push	{r7}
 800bf04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800bf06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf14:	d101      	bne.n	800bf1a <LL_RCC_IsActiveFlag_HPRE+0x18>
 800bf16:	2301      	movs	r3, #1
 800bf18:	e000      	b.n	800bf1c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800bf1a:	2300      	movs	r3, #0
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr

0800bf26 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800bf26:	b480      	push	{r7}
 800bf28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800bf2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bf32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf3a:	d101      	bne.n	800bf40 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	e000      	b.n	800bf42 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800bf40:	2300      	movs	r3, #0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800bf50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf54:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bf58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf60:	d101      	bne.n	800bf66 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800bf62:	2301      	movs	r3, #1
 800bf64:	e000      	b.n	800bf68 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr

0800bf72 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800bf72:	b480      	push	{r7}
 800bf74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800bf76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf84:	d101      	bne.n	800bf8a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800bf86:	2301      	movs	r3, #1
 800bf88:	e000      	b.n	800bf8c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr

0800bf96 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800bf96:	b480      	push	{r7}
 800bf98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800bf9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bfa4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bfa8:	d101      	bne.n	800bfae <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e000      	b.n	800bfb0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800bfae:	2300      	movs	r3, #0
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
	...

0800bfbc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bfbc:	b590      	push	{r4, r7, lr}
 800bfbe:	b08d      	sub	sp, #52	@ 0x34
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d101      	bne.n	800bfce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	e363      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f003 0320 	and.w	r3, r3, #32
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	f000 808d 	beq.w	800c0f6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bfdc:	f7ff fe89 	bl	800bcf2 <LL_RCC_GetSysClkSource>
 800bfe0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bfe2:	f7ff ff82 	bl	800beea <LL_RCC_PLL_GetMainSource>
 800bfe6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800bfe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d005      	beq.n	800bffa <HAL_RCC_OscConfig+0x3e>
 800bfee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bff0:	2b0c      	cmp	r3, #12
 800bff2:	d147      	bne.n	800c084 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800bff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d144      	bne.n	800c084 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	69db      	ldr	r3, [r3, #28]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d101      	bne.n	800c006 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800c002:	2301      	movs	r3, #1
 800c004:	e347      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c00a:	f7ff fe34 	bl	800bc76 <LL_RCC_MSI_GetRange>
 800c00e:	4603      	mov	r3, r0
 800c010:	429c      	cmp	r4, r3
 800c012:	d914      	bls.n	800c03e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c018:	4618      	mov	r0, r3
 800c01a:	f000 fd2f 	bl	800ca7c <RCC_SetFlashLatencyFromMSIRange>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d001      	beq.n	800c028 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800c024:	2301      	movs	r3, #1
 800c026:	e336      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7ff fe0e 	bl	800bc4e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a1b      	ldr	r3, [r3, #32]
 800c036:	4618      	mov	r0, r3
 800c038:	f7ff fe32 	bl	800bca0 <LL_RCC_MSI_SetCalibTrimming>
 800c03c:	e013      	b.n	800c066 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c042:	4618      	mov	r0, r3
 800c044:	f7ff fe03 	bl	800bc4e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a1b      	ldr	r3, [r3, #32]
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7ff fe27 	bl	800bca0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c056:	4618      	mov	r0, r3
 800c058:	f000 fd10 	bl	800ca7c <RCC_SetFlashLatencyFromMSIRange>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d001      	beq.n	800c066 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800c062:	2301      	movs	r3, #1
 800c064:	e317      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c066:	f000 fcc9 	bl	800c9fc <HAL_RCC_GetHCLKFreq>
 800c06a:	4603      	mov	r3, r0
 800c06c:	4aa4      	ldr	r2, [pc, #656]	@ (800c300 <HAL_RCC_OscConfig+0x344>)
 800c06e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c070:	4ba4      	ldr	r3, [pc, #656]	@ (800c304 <HAL_RCC_OscConfig+0x348>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4618      	mov	r0, r3
 800c076:	f7fb f84b 	bl	8007110 <HAL_InitTick>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d039      	beq.n	800c0f4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	e308      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	69db      	ldr	r3, [r3, #28]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d01e      	beq.n	800c0ca <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c08c:	f7ff fdb0 	bl	800bbf0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c090:	f7fb f88c 	bl	80071ac <HAL_GetTick>
 800c094:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800c096:	e008      	b.n	800c0aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c098:	f7fb f888 	bl	80071ac <HAL_GetTick>
 800c09c:	4602      	mov	r2, r0
 800c09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a0:	1ad3      	subs	r3, r2, r3
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	d901      	bls.n	800c0aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c0a6:	2303      	movs	r3, #3
 800c0a8:	e2f5      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800c0aa:	f7ff fdbf 	bl	800bc2c <LL_RCC_MSI_IsReady>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d0f1      	beq.n	800c098 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7ff fdc8 	bl	800bc4e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a1b      	ldr	r3, [r3, #32]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7ff fdec 	bl	800bca0 <LL_RCC_MSI_SetCalibTrimming>
 800c0c8:	e015      	b.n	800c0f6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c0ca:	f7ff fda0 	bl	800bc0e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c0ce:	f7fb f86d 	bl	80071ac <HAL_GetTick>
 800c0d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800c0d4:	e008      	b.n	800c0e8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c0d6:	f7fb f869 	bl	80071ac <HAL_GetTick>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0de:	1ad3      	subs	r3, r2, r3
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	d901      	bls.n	800c0e8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800c0e4:	2303      	movs	r3, #3
 800c0e6:	e2d6      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800c0e8:	f7ff fda0 	bl	800bc2c <LL_RCC_MSI_IsReady>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1f1      	bne.n	800c0d6 <HAL_RCC_OscConfig+0x11a>
 800c0f2:	e000      	b.n	800c0f6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c0f4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f003 0301 	and.w	r3, r3, #1
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d047      	beq.n	800c192 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c102:	f7ff fdf6 	bl	800bcf2 <LL_RCC_GetSysClkSource>
 800c106:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c108:	f7ff feef 	bl	800beea <LL_RCC_PLL_GetMainSource>
 800c10c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c10e:	6a3b      	ldr	r3, [r7, #32]
 800c110:	2b08      	cmp	r3, #8
 800c112:	d005      	beq.n	800c120 <HAL_RCC_OscConfig+0x164>
 800c114:	6a3b      	ldr	r3, [r7, #32]
 800c116:	2b0c      	cmp	r3, #12
 800c118:	d108      	bne.n	800c12c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	2b03      	cmp	r3, #3
 800c11e:	d105      	bne.n	800c12c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d134      	bne.n	800c192 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800c128:	2301      	movs	r3, #1
 800c12a:	e2b4      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c134:	d102      	bne.n	800c13c <HAL_RCC_OscConfig+0x180>
 800c136:	f7ff fbdd 	bl	800b8f4 <LL_RCC_HSE_Enable>
 800c13a:	e001      	b.n	800c140 <HAL_RCC_OscConfig+0x184>
 800c13c:	f7ff fbe9 	bl	800b912 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d012      	beq.n	800c16e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c148:	f7fb f830 	bl	80071ac <HAL_GetTick>
 800c14c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800c14e:	e008      	b.n	800c162 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c150:	f7fb f82c 	bl	80071ac <HAL_GetTick>
 800c154:	4602      	mov	r2, r0
 800c156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c158:	1ad3      	subs	r3, r2, r3
 800c15a:	2b64      	cmp	r3, #100	@ 0x64
 800c15c:	d901      	bls.n	800c162 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800c15e:	2303      	movs	r3, #3
 800c160:	e299      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800c162:	f7ff fbe5 	bl	800b930 <LL_RCC_HSE_IsReady>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d0f1      	beq.n	800c150 <HAL_RCC_OscConfig+0x194>
 800c16c:	e011      	b.n	800c192 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c16e:	f7fb f81d 	bl	80071ac <HAL_GetTick>
 800c172:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800c174:	e008      	b.n	800c188 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c176:	f7fb f819 	bl	80071ac <HAL_GetTick>
 800c17a:	4602      	mov	r2, r0
 800c17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c17e:	1ad3      	subs	r3, r2, r3
 800c180:	2b64      	cmp	r3, #100	@ 0x64
 800c182:	d901      	bls.n	800c188 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c184:	2303      	movs	r3, #3
 800c186:	e286      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800c188:	f7ff fbd2 	bl	800b930 <LL_RCC_HSE_IsReady>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d1f1      	bne.n	800c176 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f003 0302 	and.w	r3, r3, #2
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d04c      	beq.n	800c238 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c19e:	f7ff fda8 	bl	800bcf2 <LL_RCC_GetSysClkSource>
 800c1a2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c1a4:	f7ff fea1 	bl	800beea <LL_RCC_PLL_GetMainSource>
 800c1a8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c1aa:	69bb      	ldr	r3, [r7, #24]
 800c1ac:	2b04      	cmp	r3, #4
 800c1ae:	d005      	beq.n	800c1bc <HAL_RCC_OscConfig+0x200>
 800c1b0:	69bb      	ldr	r3, [r7, #24]
 800c1b2:	2b0c      	cmp	r3, #12
 800c1b4:	d10e      	bne.n	800c1d4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	2b02      	cmp	r3, #2
 800c1ba:	d10b      	bne.n	800c1d4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d101      	bne.n	800c1c8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	e266      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	691b      	ldr	r3, [r3, #16]
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7ff fbf1 	bl	800b9b4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c1d2:	e031      	b.n	800c238 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d019      	beq.n	800c210 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c1dc:	f7ff fbba 	bl	800b954 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1e0:	f7fa ffe4 	bl	80071ac <HAL_GetTick>
 800c1e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c1e6:	e008      	b.n	800c1fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c1e8:	f7fa ffe0 	bl	80071ac <HAL_GetTick>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f0:	1ad3      	subs	r3, r2, r3
 800c1f2:	2b02      	cmp	r3, #2
 800c1f4:	d901      	bls.n	800c1fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	e24d      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c1fa:	f7ff fbc9 	bl	800b990 <LL_RCC_HSI_IsReady>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b00      	cmp	r3, #0
 800c202:	d0f1      	beq.n	800c1e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	691b      	ldr	r3, [r3, #16]
 800c208:	4618      	mov	r0, r3
 800c20a:	f7ff fbd3 	bl	800b9b4 <LL_RCC_HSI_SetCalibTrimming>
 800c20e:	e013      	b.n	800c238 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c210:	f7ff fbaf 	bl	800b972 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c214:	f7fa ffca 	bl	80071ac <HAL_GetTick>
 800c218:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c21a:	e008      	b.n	800c22e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c21c:	f7fa ffc6 	bl	80071ac <HAL_GetTick>
 800c220:	4602      	mov	r2, r0
 800c222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c224:	1ad3      	subs	r3, r2, r3
 800c226:	2b02      	cmp	r3, #2
 800c228:	d901      	bls.n	800c22e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800c22a:	2303      	movs	r3, #3
 800c22c:	e233      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c22e:	f7ff fbaf 	bl	800b990 <LL_RCC_HSI_IsReady>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1f1      	bne.n	800c21c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 0308 	and.w	r3, r3, #8
 800c240:	2b00      	cmp	r3, #0
 800c242:	d106      	bne.n	800c252 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f000 80a3 	beq.w	800c398 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	695b      	ldr	r3, [r3, #20]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d076      	beq.n	800c348 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f003 0310 	and.w	r3, r3, #16
 800c262:	2b00      	cmp	r3, #0
 800c264:	d046      	beq.n	800c2f4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c266:	f7ff fc66 	bl	800bb36 <LL_RCC_LSI1_IsReady>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d113      	bne.n	800c298 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c270:	f7ff fc3f 	bl	800baf2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c274:	f7fa ff9a 	bl	80071ac <HAL_GetTick>
 800c278:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c27a:	e008      	b.n	800c28e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c27c:	f7fa ff96 	bl	80071ac <HAL_GetTick>
 800c280:	4602      	mov	r2, r0
 800c282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	2b02      	cmp	r3, #2
 800c288:	d901      	bls.n	800c28e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800c28a:	2303      	movs	r3, #3
 800c28c:	e203      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c28e:	f7ff fc52 	bl	800bb36 <LL_RCC_LSI1_IsReady>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d0f1      	beq.n	800c27c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c298:	f7ff fc5f 	bl	800bb5a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c29c:	f7fa ff86 	bl	80071ac <HAL_GetTick>
 800c2a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c2a2:	e008      	b.n	800c2b6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c2a4:	f7fa ff82 	bl	80071ac <HAL_GetTick>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	2b03      	cmp	r3, #3
 800c2b0:	d901      	bls.n	800c2b6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800c2b2:	2303      	movs	r3, #3
 800c2b4:	e1ef      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c2b6:	f7ff fc72 	bl	800bb9e <LL_RCC_LSI2_IsReady>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d0f1      	beq.n	800c2a4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	699b      	ldr	r3, [r3, #24]
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7ff fc7c 	bl	800bbc2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c2ca:	f7ff fc23 	bl	800bb14 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2ce:	f7fa ff6d 	bl	80071ac <HAL_GetTick>
 800c2d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c2d4:	e008      	b.n	800c2e8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c2d6:	f7fa ff69 	bl	80071ac <HAL_GetTick>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2de:	1ad3      	subs	r3, r2, r3
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	d901      	bls.n	800c2e8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800c2e4:	2303      	movs	r3, #3
 800c2e6:	e1d6      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c2e8:	f7ff fc25 	bl	800bb36 <LL_RCC_LSI1_IsReady>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1f1      	bne.n	800c2d6 <HAL_RCC_OscConfig+0x31a>
 800c2f2:	e051      	b.n	800c398 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c2f4:	f7ff fbfd 	bl	800baf2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2f8:	f7fa ff58 	bl	80071ac <HAL_GetTick>
 800c2fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c2fe:	e00c      	b.n	800c31a <HAL_RCC_OscConfig+0x35e>
 800c300:	2000002c 	.word	0x2000002c
 800c304:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c308:	f7fa ff50 	bl	80071ac <HAL_GetTick>
 800c30c:	4602      	mov	r2, r0
 800c30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c310:	1ad3      	subs	r3, r2, r3
 800c312:	2b02      	cmp	r3, #2
 800c314:	d901      	bls.n	800c31a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800c316:	2303      	movs	r3, #3
 800c318:	e1bd      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c31a:	f7ff fc0c 	bl	800bb36 <LL_RCC_LSI1_IsReady>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d0f1      	beq.n	800c308 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c324:	f7ff fc2a 	bl	800bb7c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c328:	e008      	b.n	800c33c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c32a:	f7fa ff3f 	bl	80071ac <HAL_GetTick>
 800c32e:	4602      	mov	r2, r0
 800c330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c332:	1ad3      	subs	r3, r2, r3
 800c334:	2b03      	cmp	r3, #3
 800c336:	d901      	bls.n	800c33c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800c338:	2303      	movs	r3, #3
 800c33a:	e1ac      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c33c:	f7ff fc2f 	bl	800bb9e <LL_RCC_LSI2_IsReady>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d1f1      	bne.n	800c32a <HAL_RCC_OscConfig+0x36e>
 800c346:	e027      	b.n	800c398 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c348:	f7ff fc18 	bl	800bb7c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c34c:	f7fa ff2e 	bl	80071ac <HAL_GetTick>
 800c350:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c352:	e008      	b.n	800c366 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c354:	f7fa ff2a 	bl	80071ac <HAL_GetTick>
 800c358:	4602      	mov	r2, r0
 800c35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35c:	1ad3      	subs	r3, r2, r3
 800c35e:	2b03      	cmp	r3, #3
 800c360:	d901      	bls.n	800c366 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c362:	2303      	movs	r3, #3
 800c364:	e197      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c366:	f7ff fc1a 	bl	800bb9e <LL_RCC_LSI2_IsReady>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d1f1      	bne.n	800c354 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800c370:	f7ff fbd0 	bl	800bb14 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c374:	f7fa ff1a 	bl	80071ac <HAL_GetTick>
 800c378:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c37a:	e008      	b.n	800c38e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c37c:	f7fa ff16 	bl	80071ac <HAL_GetTick>
 800c380:	4602      	mov	r2, r0
 800c382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c384:	1ad3      	subs	r3, r2, r3
 800c386:	2b02      	cmp	r3, #2
 800c388:	d901      	bls.n	800c38e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800c38a:	2303      	movs	r3, #3
 800c38c:	e183      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c38e:	f7ff fbd2 	bl	800bb36 <LL_RCC_LSI1_IsReady>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d1f1      	bne.n	800c37c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f003 0304 	and.w	r3, r3, #4
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d05b      	beq.n	800c45c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c3a4:	4ba7      	ldr	r3, [pc, #668]	@ (800c644 <HAL_RCC_OscConfig+0x688>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d114      	bne.n	800c3da <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c3b0:	f7ff fa60 	bl	800b874 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c3b4:	f7fa fefa 	bl	80071ac <HAL_GetTick>
 800c3b8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c3ba:	e008      	b.n	800c3ce <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c3bc:	f7fa fef6 	bl	80071ac <HAL_GetTick>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3c4:	1ad3      	subs	r3, r2, r3
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	d901      	bls.n	800c3ce <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	e163      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c3ce:	4b9d      	ldr	r3, [pc, #628]	@ (800c644 <HAL_RCC_OscConfig+0x688>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d0f0      	beq.n	800c3bc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d102      	bne.n	800c3e8 <HAL_RCC_OscConfig+0x42c>
 800c3e2:	f7ff fb30 	bl	800ba46 <LL_RCC_LSE_Enable>
 800c3e6:	e00c      	b.n	800c402 <HAL_RCC_OscConfig+0x446>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	2b05      	cmp	r3, #5
 800c3ee:	d104      	bne.n	800c3fa <HAL_RCC_OscConfig+0x43e>
 800c3f0:	f7ff fb4b 	bl	800ba8a <LL_RCC_LSE_EnableBypass>
 800c3f4:	f7ff fb27 	bl	800ba46 <LL_RCC_LSE_Enable>
 800c3f8:	e003      	b.n	800c402 <HAL_RCC_OscConfig+0x446>
 800c3fa:	f7ff fb35 	bl	800ba68 <LL_RCC_LSE_Disable>
 800c3fe:	f7ff fb55 	bl	800baac <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d014      	beq.n	800c434 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c40a:	f7fa fecf 	bl	80071ac <HAL_GetTick>
 800c40e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c410:	e00a      	b.n	800c428 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c412:	f7fa fecb 	bl	80071ac <HAL_GetTick>
 800c416:	4602      	mov	r2, r0
 800c418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41a:	1ad3      	subs	r3, r2, r3
 800c41c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c420:	4293      	cmp	r3, r2
 800c422:	d901      	bls.n	800c428 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800c424:	2303      	movs	r3, #3
 800c426:	e136      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c428:	f7ff fb51 	bl	800bace <LL_RCC_LSE_IsReady>
 800c42c:	4603      	mov	r3, r0
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d0ef      	beq.n	800c412 <HAL_RCC_OscConfig+0x456>
 800c432:	e013      	b.n	800c45c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c434:	f7fa feba 	bl	80071ac <HAL_GetTick>
 800c438:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c43a:	e00a      	b.n	800c452 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c43c:	f7fa feb6 	bl	80071ac <HAL_GetTick>
 800c440:	4602      	mov	r2, r0
 800c442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c444:	1ad3      	subs	r3, r2, r3
 800c446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d901      	bls.n	800c452 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800c44e:	2303      	movs	r3, #3
 800c450:	e121      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c452:	f7ff fb3c 	bl	800bace <LL_RCC_LSE_IsReady>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1ef      	bne.n	800c43c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c464:	2b00      	cmp	r3, #0
 800c466:	d02c      	beq.n	800c4c2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d014      	beq.n	800c49a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c470:	f7ff fab5 	bl	800b9de <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c474:	f7fa fe9a 	bl	80071ac <HAL_GetTick>
 800c478:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c47a:	e008      	b.n	800c48e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c47c:	f7fa fe96 	bl	80071ac <HAL_GetTick>
 800c480:	4602      	mov	r2, r0
 800c482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c484:	1ad3      	subs	r3, r2, r3
 800c486:	2b02      	cmp	r3, #2
 800c488:	d901      	bls.n	800c48e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800c48a:	2303      	movs	r3, #3
 800c48c:	e103      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c48e:	f7ff fac8 	bl	800ba22 <LL_RCC_HSI48_IsReady>
 800c492:	4603      	mov	r3, r0
 800c494:	2b00      	cmp	r3, #0
 800c496:	d0f1      	beq.n	800c47c <HAL_RCC_OscConfig+0x4c0>
 800c498:	e013      	b.n	800c4c2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c49a:	f7ff fab1 	bl	800ba00 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c49e:	f7fa fe85 	bl	80071ac <HAL_GetTick>
 800c4a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c4a4:	e008      	b.n	800c4b8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c4a6:	f7fa fe81 	bl	80071ac <HAL_GetTick>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ae:	1ad3      	subs	r3, r2, r3
 800c4b0:	2b02      	cmp	r3, #2
 800c4b2:	d901      	bls.n	800c4b8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800c4b4:	2303      	movs	r3, #3
 800c4b6:	e0ee      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c4b8:	f7ff fab3 	bl	800ba22 <LL_RCC_HSI48_IsReady>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d1f1      	bne.n	800c4a6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	f000 80e4 	beq.w	800c694 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c4cc:	f7ff fc11 	bl	800bcf2 <LL_RCC_GetSysClkSource>
 800c4d0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800c4d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	f040 80b4 	bne.w	800c64c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f003 0203 	and.w	r2, r3, #3
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d123      	bne.n	800c53a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d11c      	bne.n	800c53a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	0a1b      	lsrs	r3, r3, #8
 800c504:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d114      	bne.n	800c53a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d10d      	bne.n	800c53a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c528:	429a      	cmp	r2, r3
 800c52a:	d106      	bne.n	800c53a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c536:	429a      	cmp	r2, r3
 800c538:	d05d      	beq.n	800c5f6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	2b0c      	cmp	r3, #12
 800c53e:	d058      	beq.n	800c5f2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d001      	beq.n	800c552 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800c54e:	2301      	movs	r3, #1
 800c550:	e0a1      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c552:	f7ff fc84 	bl	800be5e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c556:	f7fa fe29 	bl	80071ac <HAL_GetTick>
 800c55a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c55c:	e008      	b.n	800c570 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c55e:	f7fa fe25 	bl	80071ac <HAL_GetTick>
 800c562:	4602      	mov	r2, r0
 800c564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d901      	bls.n	800c570 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800c56c:	2303      	movs	r3, #3
 800c56e:	e092      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d1ef      	bne.n	800c55e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c57e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c582:	68da      	ldr	r2, [r3, #12]
 800c584:	4b30      	ldr	r3, [pc, #192]	@ (800c648 <HAL_RCC_OscConfig+0x68c>)
 800c586:	4013      	ands	r3, r2
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c590:	4311      	orrs	r1, r2
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c596:	0212      	lsls	r2, r2, #8
 800c598:	4311      	orrs	r1, r2
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c59e:	4311      	orrs	r1, r2
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c5a4:	4311      	orrs	r1, r2
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c5aa:	430a      	orrs	r2, r1
 800c5ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c5b4:	f7ff fc44 	bl	800be40 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c5b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c5c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c5c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c5c8:	f7fa fdf0 	bl	80071ac <HAL_GetTick>
 800c5cc:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c5ce:	e008      	b.n	800c5e2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c5d0:	f7fa fdec 	bl	80071ac <HAL_GetTick>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	d901      	bls.n	800c5e2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800c5de:	2303      	movs	r3, #3
 800c5e0:	e059      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c5e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d0ef      	beq.n	800c5d0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c5f0:	e050      	b.n	800c694 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e04f      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c5f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c600:	2b00      	cmp	r3, #0
 800c602:	d147      	bne.n	800c694 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c604:	f7ff fc1c 	bl	800be40 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c616:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c618:	f7fa fdc8 	bl	80071ac <HAL_GetTick>
 800c61c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c61e:	e008      	b.n	800c632 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c620:	f7fa fdc4 	bl	80071ac <HAL_GetTick>
 800c624:	4602      	mov	r2, r0
 800c626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c628:	1ad3      	subs	r3, r2, r3
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d901      	bls.n	800c632 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800c62e:	2303      	movs	r3, #3
 800c630:	e031      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d0ef      	beq.n	800c620 <HAL_RCC_OscConfig+0x664>
 800c640:	e028      	b.n	800c694 <HAL_RCC_OscConfig+0x6d8>
 800c642:	bf00      	nop
 800c644:	58000400 	.word	0x58000400
 800c648:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	2b0c      	cmp	r3, #12
 800c650:	d01e      	beq.n	800c690 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c652:	f7ff fc04 	bl	800be5e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c656:	f7fa fda9 	bl	80071ac <HAL_GetTick>
 800c65a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c65c:	e008      	b.n	800c670 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c65e:	f7fa fda5 	bl	80071ac <HAL_GetTick>
 800c662:	4602      	mov	r2, r0
 800c664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c666:	1ad3      	subs	r3, r2, r3
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d901      	bls.n	800c670 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800c66c:	2303      	movs	r3, #3
 800c66e:	e012      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d1ef      	bne.n	800c65e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800c67e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c682:	68da      	ldr	r2, [r3, #12]
 800c684:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c688:	4b05      	ldr	r3, [pc, #20]	@ (800c6a0 <HAL_RCC_OscConfig+0x6e4>)
 800c68a:	4013      	ands	r3, r2
 800c68c:	60cb      	str	r3, [r1, #12]
 800c68e:	e001      	b.n	800c694 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c690:	2301      	movs	r3, #1
 800c692:	e000      	b.n	800c696 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800c694:	2300      	movs	r3, #0
}
 800c696:	4618      	mov	r0, r3
 800c698:	3734      	adds	r7, #52	@ 0x34
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd90      	pop	{r4, r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	eefefffc 	.word	0xeefefffc

0800c6a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d101      	bne.n	800c6b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e12d      	b.n	800c914 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c6b8:	4b98      	ldr	r3, [pc, #608]	@ (800c91c <HAL_RCC_ClockConfig+0x278>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f003 0307 	and.w	r3, r3, #7
 800c6c0:	683a      	ldr	r2, [r7, #0]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d91b      	bls.n	800c6fe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6c6:	4b95      	ldr	r3, [pc, #596]	@ (800c91c <HAL_RCC_ClockConfig+0x278>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f023 0207 	bic.w	r2, r3, #7
 800c6ce:	4993      	ldr	r1, [pc, #588]	@ (800c91c <HAL_RCC_ClockConfig+0x278>)
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6d6:	f7fa fd69 	bl	80071ac <HAL_GetTick>
 800c6da:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6dc:	e008      	b.n	800c6f0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c6de:	f7fa fd65 	bl	80071ac <HAL_GetTick>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	2b02      	cmp	r3, #2
 800c6ea:	d901      	bls.n	800c6f0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800c6ec:	2303      	movs	r3, #3
 800c6ee:	e111      	b.n	800c914 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6f0:	4b8a      	ldr	r3, [pc, #552]	@ (800c91c <HAL_RCC_ClockConfig+0x278>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f003 0307 	and.w	r3, r3, #7
 800c6f8:	683a      	ldr	r2, [r7, #0]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d1ef      	bne.n	800c6de <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f003 0302 	and.w	r3, r3, #2
 800c706:	2b00      	cmp	r3, #0
 800c708:	d016      	beq.n	800c738 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	4618      	mov	r0, r3
 800c710:	f7ff fafb 	bl	800bd0a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c714:	f7fa fd4a 	bl	80071ac <HAL_GetTick>
 800c718:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c71a:	e008      	b.n	800c72e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c71c:	f7fa fd46 	bl	80071ac <HAL_GetTick>
 800c720:	4602      	mov	r2, r0
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	2b02      	cmp	r3, #2
 800c728:	d901      	bls.n	800c72e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800c72a:	2303      	movs	r3, #3
 800c72c:	e0f2      	b.n	800c914 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c72e:	f7ff fbe8 	bl	800bf02 <LL_RCC_IsActiveFlag_HPRE>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d0f1      	beq.n	800c71c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 0320 	and.w	r3, r3, #32
 800c740:	2b00      	cmp	r3, #0
 800c742:	d016      	beq.n	800c772 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	695b      	ldr	r3, [r3, #20]
 800c748:	4618      	mov	r0, r3
 800c74a:	f7ff faf2 	bl	800bd32 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c74e:	f7fa fd2d 	bl	80071ac <HAL_GetTick>
 800c752:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c754:	e008      	b.n	800c768 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c756:	f7fa fd29 	bl	80071ac <HAL_GetTick>
 800c75a:	4602      	mov	r2, r0
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	1ad3      	subs	r3, r2, r3
 800c760:	2b02      	cmp	r3, #2
 800c762:	d901      	bls.n	800c768 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800c764:	2303      	movs	r3, #3
 800c766:	e0d5      	b.n	800c914 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c768:	f7ff fbdd 	bl	800bf26 <LL_RCC_IsActiveFlag_C2HPRE>
 800c76c:	4603      	mov	r3, r0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d0f1      	beq.n	800c756 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d016      	beq.n	800c7ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	699b      	ldr	r3, [r3, #24]
 800c782:	4618      	mov	r0, r3
 800c784:	f7ff faeb 	bl	800bd5e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c788:	f7fa fd10 	bl	80071ac <HAL_GetTick>
 800c78c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c78e:	e008      	b.n	800c7a2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c790:	f7fa fd0c 	bl	80071ac <HAL_GetTick>
 800c794:	4602      	mov	r2, r0
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	1ad3      	subs	r3, r2, r3
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	d901      	bls.n	800c7a2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800c79e:	2303      	movs	r3, #3
 800c7a0:	e0b8      	b.n	800c914 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c7a2:	f7ff fbd3 	bl	800bf4c <LL_RCC_IsActiveFlag_SHDHPRE>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d0f1      	beq.n	800c790 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 0304 	and.w	r3, r3, #4
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d016      	beq.n	800c7e6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7ff fae5 	bl	800bd8c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c7c2:	f7fa fcf3 	bl	80071ac <HAL_GetTick>
 800c7c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c7c8:	e008      	b.n	800c7dc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c7ca:	f7fa fcef 	bl	80071ac <HAL_GetTick>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	1ad3      	subs	r3, r2, r3
 800c7d4:	2b02      	cmp	r3, #2
 800c7d6:	d901      	bls.n	800c7dc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800c7d8:	2303      	movs	r3, #3
 800c7da:	e09b      	b.n	800c914 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c7dc:	f7ff fbc9 	bl	800bf72 <LL_RCC_IsActiveFlag_PPRE1>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d0f1      	beq.n	800c7ca <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f003 0308 	and.w	r3, r3, #8
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d017      	beq.n	800c822 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	691b      	ldr	r3, [r3, #16]
 800c7f6:	00db      	lsls	r3, r3, #3
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7ff fadb 	bl	800bdb4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c7fe:	f7fa fcd5 	bl	80071ac <HAL_GetTick>
 800c802:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c804:	e008      	b.n	800c818 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c806:	f7fa fcd1 	bl	80071ac <HAL_GetTick>
 800c80a:	4602      	mov	r2, r0
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	1ad3      	subs	r3, r2, r3
 800c810:	2b02      	cmp	r3, #2
 800c812:	d901      	bls.n	800c818 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800c814:	2303      	movs	r3, #3
 800c816:	e07d      	b.n	800c914 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c818:	f7ff fbbd 	bl	800bf96 <LL_RCC_IsActiveFlag_PPRE2>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d0f1      	beq.n	800c806 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f003 0301 	and.w	r3, r3, #1
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d043      	beq.n	800c8b6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	2b02      	cmp	r3, #2
 800c834:	d106      	bne.n	800c844 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800c836:	f7ff f87b 	bl	800b930 <LL_RCC_HSE_IsReady>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d11e      	bne.n	800c87e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c840:	2301      	movs	r3, #1
 800c842:	e067      	b.n	800c914 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	2b03      	cmp	r3, #3
 800c84a:	d106      	bne.n	800c85a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800c84c:	f7ff fb16 	bl	800be7c <LL_RCC_PLL_IsReady>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d113      	bne.n	800c87e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c856:	2301      	movs	r3, #1
 800c858:	e05c      	b.n	800c914 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d106      	bne.n	800c870 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800c862:	f7ff f9e3 	bl	800bc2c <LL_RCC_MSI_IsReady>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d108      	bne.n	800c87e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c86c:	2301      	movs	r3, #1
 800c86e:	e051      	b.n	800c914 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800c870:	f7ff f88e 	bl	800b990 <LL_RCC_HSI_IsReady>
 800c874:	4603      	mov	r3, r0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d101      	bne.n	800c87e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c87a:	2301      	movs	r3, #1
 800c87c:	e04a      	b.n	800c914 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	4618      	mov	r0, r3
 800c884:	f7ff fa21 	bl	800bcca <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c888:	f7fa fc90 	bl	80071ac <HAL_GetTick>
 800c88c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c88e:	e00a      	b.n	800c8a6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c890:	f7fa fc8c 	bl	80071ac <HAL_GetTick>
 800c894:	4602      	mov	r2, r0
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d901      	bls.n	800c8a6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800c8a2:	2303      	movs	r3, #3
 800c8a4:	e036      	b.n	800c914 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c8a6:	f7ff fa24 	bl	800bcf2 <LL_RCC_GetSysClkSource>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d1ec      	bne.n	800c890 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c8b6:	4b19      	ldr	r3, [pc, #100]	@ (800c91c <HAL_RCC_ClockConfig+0x278>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f003 0307 	and.w	r3, r3, #7
 800c8be:	683a      	ldr	r2, [r7, #0]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d21b      	bcs.n	800c8fc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8c4:	4b15      	ldr	r3, [pc, #84]	@ (800c91c <HAL_RCC_ClockConfig+0x278>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f023 0207 	bic.w	r2, r3, #7
 800c8cc:	4913      	ldr	r1, [pc, #76]	@ (800c91c <HAL_RCC_ClockConfig+0x278>)
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c8d4:	f7fa fc6a 	bl	80071ac <HAL_GetTick>
 800c8d8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8da:	e008      	b.n	800c8ee <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c8dc:	f7fa fc66 	bl	80071ac <HAL_GetTick>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	1ad3      	subs	r3, r2, r3
 800c8e6:	2b02      	cmp	r3, #2
 800c8e8:	d901      	bls.n	800c8ee <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800c8ea:	2303      	movs	r3, #3
 800c8ec:	e012      	b.n	800c914 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8ee:	4b0b      	ldr	r3, [pc, #44]	@ (800c91c <HAL_RCC_ClockConfig+0x278>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f003 0307 	and.w	r3, r3, #7
 800c8f6:	683a      	ldr	r2, [r7, #0]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d1ef      	bne.n	800c8dc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c8fc:	f000 f87e 	bl	800c9fc <HAL_RCC_GetHCLKFreq>
 800c900:	4603      	mov	r3, r0
 800c902:	4a07      	ldr	r2, [pc, #28]	@ (800c920 <HAL_RCC_ClockConfig+0x27c>)
 800c904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800c906:	f7fa fc5d 	bl	80071c4 <HAL_GetTickPrio>
 800c90a:	4603      	mov	r3, r0
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fa fbff 	bl	8007110 <HAL_InitTick>
 800c912:	4603      	mov	r3, r0
}
 800c914:	4618      	mov	r0, r3
 800c916:	3710      	adds	r7, #16
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	58004000 	.word	0x58004000
 800c920:	2000002c 	.word	0x2000002c

0800c924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c924:	b590      	push	{r4, r7, lr}
 800c926:	b085      	sub	sp, #20
 800c928:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c92a:	f7ff f9e2 	bl	800bcf2 <LL_RCC_GetSysClkSource>
 800c92e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d10a      	bne.n	800c94c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c936:	f7ff f99e 	bl	800bc76 <LL_RCC_MSI_GetRange>
 800c93a:	4603      	mov	r3, r0
 800c93c:	091b      	lsrs	r3, r3, #4
 800c93e:	f003 030f 	and.w	r3, r3, #15
 800c942:	4a2b      	ldr	r2, [pc, #172]	@ (800c9f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c948:	60fb      	str	r3, [r7, #12]
 800c94a:	e04b      	b.n	800c9e4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2b04      	cmp	r3, #4
 800c950:	d102      	bne.n	800c958 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c952:	4b28      	ldr	r3, [pc, #160]	@ (800c9f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c954:	60fb      	str	r3, [r7, #12]
 800c956:	e045      	b.n	800c9e4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2b08      	cmp	r3, #8
 800c95c:	d10a      	bne.n	800c974 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c95e:	f7fe ffb7 	bl	800b8d0 <LL_RCC_HSE_IsEnabledDiv2>
 800c962:	4603      	mov	r3, r0
 800c964:	2b01      	cmp	r3, #1
 800c966:	d102      	bne.n	800c96e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800c968:	4b22      	ldr	r3, [pc, #136]	@ (800c9f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c96a:	60fb      	str	r3, [r7, #12]
 800c96c:	e03a      	b.n	800c9e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800c96e:	4b22      	ldr	r3, [pc, #136]	@ (800c9f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800c970:	60fb      	str	r3, [r7, #12]
 800c972:	e037      	b.n	800c9e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800c974:	f7ff fab9 	bl	800beea <LL_RCC_PLL_GetMainSource>
 800c978:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	2b02      	cmp	r3, #2
 800c97e:	d003      	beq.n	800c988 <HAL_RCC_GetSysClockFreq+0x64>
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	2b03      	cmp	r3, #3
 800c984:	d003      	beq.n	800c98e <HAL_RCC_GetSysClockFreq+0x6a>
 800c986:	e00d      	b.n	800c9a4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800c988:	4b1a      	ldr	r3, [pc, #104]	@ (800c9f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c98a:	60bb      	str	r3, [r7, #8]
        break;
 800c98c:	e015      	b.n	800c9ba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c98e:	f7fe ff9f 	bl	800b8d0 <LL_RCC_HSE_IsEnabledDiv2>
 800c992:	4603      	mov	r3, r0
 800c994:	2b01      	cmp	r3, #1
 800c996:	d102      	bne.n	800c99e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800c998:	4b16      	ldr	r3, [pc, #88]	@ (800c9f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c99a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800c99c:	e00d      	b.n	800c9ba <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800c99e:	4b16      	ldr	r3, [pc, #88]	@ (800c9f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800c9a0:	60bb      	str	r3, [r7, #8]
        break;
 800c9a2:	e00a      	b.n	800c9ba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c9a4:	f7ff f967 	bl	800bc76 <LL_RCC_MSI_GetRange>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	091b      	lsrs	r3, r3, #4
 800c9ac:	f003 030f 	and.w	r3, r3, #15
 800c9b0:	4a0f      	ldr	r2, [pc, #60]	@ (800c9f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c9b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9b6:	60bb      	str	r3, [r7, #8]
        break;
 800c9b8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800c9ba:	f7ff fa71 	bl	800bea0 <LL_RCC_PLL_GetN>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	fb03 f402 	mul.w	r4, r3, r2
 800c9c6:	f7ff fa84 	bl	800bed2 <LL_RCC_PLL_GetDivider>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	091b      	lsrs	r3, r3, #4
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	fbb4 f4f3 	udiv	r4, r4, r3
 800c9d4:	f7ff fa71 	bl	800beba <LL_RCC_PLL_GetR>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	0f5b      	lsrs	r3, r3, #29
 800c9dc:	3301      	adds	r3, #1
 800c9de:	fbb4 f3f3 	udiv	r3, r4, r3
 800c9e2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3714      	adds	r7, #20
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd90      	pop	{r4, r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	08021d9c 	.word	0x08021d9c
 800c9f4:	00f42400 	.word	0x00f42400
 800c9f8:	01e84800 	.word	0x01e84800

0800c9fc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c9fc:	b598      	push	{r3, r4, r7, lr}
 800c9fe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ca00:	f7ff ff90 	bl	800c924 <HAL_RCC_GetSysClockFreq>
 800ca04:	4604      	mov	r4, r0
 800ca06:	f7ff f9e9 	bl	800bddc <LL_RCC_GetAHBPrescaler>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	091b      	lsrs	r3, r3, #4
 800ca0e:	f003 030f 	and.w	r3, r3, #15
 800ca12:	4a03      	ldr	r2, [pc, #12]	@ (800ca20 <HAL_RCC_GetHCLKFreq+0x24>)
 800ca14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca18:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	bd98      	pop	{r3, r4, r7, pc}
 800ca20:	08021d3c 	.word	0x08021d3c

0800ca24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ca24:	b598      	push	{r3, r4, r7, lr}
 800ca26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800ca28:	f7ff ffe8 	bl	800c9fc <HAL_RCC_GetHCLKFreq>
 800ca2c:	4604      	mov	r4, r0
 800ca2e:	f7ff f9ef 	bl	800be10 <LL_RCC_GetAPB1Prescaler>
 800ca32:	4603      	mov	r3, r0
 800ca34:	0a1b      	lsrs	r3, r3, #8
 800ca36:	f003 0307 	and.w	r3, r3, #7
 800ca3a:	4a04      	ldr	r2, [pc, #16]	@ (800ca4c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ca3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca40:	f003 031f 	and.w	r3, r3, #31
 800ca44:	fa24 f303 	lsr.w	r3, r4, r3
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	bd98      	pop	{r3, r4, r7, pc}
 800ca4c:	08021d7c 	.word	0x08021d7c

0800ca50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ca50:	b598      	push	{r3, r4, r7, lr}
 800ca52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800ca54:	f7ff ffd2 	bl	800c9fc <HAL_RCC_GetHCLKFreq>
 800ca58:	4604      	mov	r4, r0
 800ca5a:	f7ff f9e5 	bl	800be28 <LL_RCC_GetAPB2Prescaler>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	0adb      	lsrs	r3, r3, #11
 800ca62:	f003 0307 	and.w	r3, r3, #7
 800ca66:	4a04      	ldr	r2, [pc, #16]	@ (800ca78 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ca68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca6c:	f003 031f 	and.w	r3, r3, #31
 800ca70:	fa24 f303 	lsr.w	r3, r4, r3
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	bd98      	pop	{r3, r4, r7, pc}
 800ca78:	08021d7c 	.word	0x08021d7c

0800ca7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800ca7c:	b590      	push	{r4, r7, lr}
 800ca7e:	b085      	sub	sp, #20
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2bb0      	cmp	r3, #176	@ 0xb0
 800ca88:	d903      	bls.n	800ca92 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800ca8a:	4b15      	ldr	r3, [pc, #84]	@ (800cae0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ca8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca8e:	60fb      	str	r3, [r7, #12]
 800ca90:	e007      	b.n	800caa2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	091b      	lsrs	r3, r3, #4
 800ca96:	f003 030f 	and.w	r3, r3, #15
 800ca9a:	4a11      	ldr	r2, [pc, #68]	@ (800cae0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ca9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caa0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800caa2:	f7ff f9a7 	bl	800bdf4 <LL_RCC_GetAHB4Prescaler>
 800caa6:	4603      	mov	r3, r0
 800caa8:	091b      	lsrs	r3, r3, #4
 800caaa:	f003 030f 	and.w	r3, r3, #15
 800caae:	4a0d      	ldr	r2, [pc, #52]	@ (800cae4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800cab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	fbb2 f3f3 	udiv	r3, r2, r3
 800caba:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	4a0a      	ldr	r2, [pc, #40]	@ (800cae8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800cac0:	fba2 2303 	umull	r2, r3, r2, r3
 800cac4:	0c9c      	lsrs	r4, r3, #18
 800cac6:	f7fe fee5 	bl	800b894 <HAL_PWREx_GetVoltageRange>
 800caca:	4603      	mov	r3, r0
 800cacc:	4619      	mov	r1, r3
 800cace:	4620      	mov	r0, r4
 800cad0:	f000 f80c 	bl	800caec <RCC_SetFlashLatency>
 800cad4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3714      	adds	r7, #20
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd90      	pop	{r4, r7, pc}
 800cade:	bf00      	nop
 800cae0:	08021d9c 	.word	0x08021d9c
 800cae4:	08021d3c 	.word	0x08021d3c
 800cae8:	431bde83 	.word	0x431bde83

0800caec <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800caec:	b590      	push	{r4, r7, lr}
 800caee:	b093      	sub	sp, #76	@ 0x4c
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800caf6:	4b37      	ldr	r3, [pc, #220]	@ (800cbd4 <RCC_SetFlashLatency+0xe8>)
 800caf8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800cafc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cafe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800cb02:	4a35      	ldr	r2, [pc, #212]	@ (800cbd8 <RCC_SetFlashLatency+0xec>)
 800cb04:	f107 031c 	add.w	r3, r7, #28
 800cb08:	ca07      	ldmia	r2, {r0, r1, r2}
 800cb0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800cb0e:	4b33      	ldr	r3, [pc, #204]	@ (800cbdc <RCC_SetFlashLatency+0xf0>)
 800cb10:	f107 040c 	add.w	r4, r7, #12
 800cb14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cb16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb24:	d11a      	bne.n	800cb5c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800cb26:	2300      	movs	r3, #0
 800cb28:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb2a:	e013      	b.n	800cb54 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800cb2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	3348      	adds	r3, #72	@ 0x48
 800cb32:	443b      	add	r3, r7
 800cb34:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800cb38:	687a      	ldr	r2, [r7, #4]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d807      	bhi.n	800cb4e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800cb3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	3348      	adds	r3, #72	@ 0x48
 800cb44:	443b      	add	r3, r7
 800cb46:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800cb4a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800cb4c:	e020      	b.n	800cb90 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800cb4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb50:	3301      	adds	r3, #1
 800cb52:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb56:	2b03      	cmp	r3, #3
 800cb58:	d9e8      	bls.n	800cb2c <RCC_SetFlashLatency+0x40>
 800cb5a:	e019      	b.n	800cb90 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb60:	e013      	b.n	800cb8a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800cb62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	3348      	adds	r3, #72	@ 0x48
 800cb68:	443b      	add	r3, r7
 800cb6a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d807      	bhi.n	800cb84 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800cb74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	3348      	adds	r3, #72	@ 0x48
 800cb7a:	443b      	add	r3, r7
 800cb7c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800cb80:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800cb82:	e005      	b.n	800cb90 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800cb84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb86:	3301      	adds	r3, #1
 800cb88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb8c:	2b02      	cmp	r3, #2
 800cb8e:	d9e8      	bls.n	800cb62 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800cb90:	4b13      	ldr	r3, [pc, #76]	@ (800cbe0 <RCC_SetFlashLatency+0xf4>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f023 0207 	bic.w	r2, r3, #7
 800cb98:	4911      	ldr	r1, [pc, #68]	@ (800cbe0 <RCC_SetFlashLatency+0xf4>)
 800cb9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cba0:	f7fa fb04 	bl	80071ac <HAL_GetTick>
 800cba4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800cba6:	e008      	b.n	800cbba <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cba8:	f7fa fb00 	bl	80071ac <HAL_GetTick>
 800cbac:	4602      	mov	r2, r0
 800cbae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb0:	1ad3      	subs	r3, r2, r3
 800cbb2:	2b02      	cmp	r3, #2
 800cbb4:	d901      	bls.n	800cbba <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800cbb6:	2303      	movs	r3, #3
 800cbb8:	e007      	b.n	800cbca <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800cbba:	4b09      	ldr	r3, [pc, #36]	@ (800cbe0 <RCC_SetFlashLatency+0xf4>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f003 0307 	and.w	r3, r3, #7
 800cbc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d1ef      	bne.n	800cba8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	374c      	adds	r7, #76	@ 0x4c
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd90      	pop	{r4, r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	0801fb28 	.word	0x0801fb28
 800cbd8:	0801fb38 	.word	0x0801fb38
 800cbdc:	0801fb44 	.word	0x0801fb44
 800cbe0:	58004000 	.word	0x58004000

0800cbe4 <LL_RCC_LSE_IsEnabled>:
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800cbe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cbec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbf0:	f003 0301 	and.w	r3, r3, #1
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d101      	bne.n	800cbfc <LL_RCC_LSE_IsEnabled+0x18>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e000      	b.n	800cbfe <LL_RCC_LSE_IsEnabled+0x1a>
 800cbfc:	2300      	movs	r3, #0
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <LL_RCC_LSE_IsReady>:
{
 800cc08:	b480      	push	{r7}
 800cc0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800cc0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc14:	f003 0302 	and.w	r3, r3, #2
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	d101      	bne.n	800cc20 <LL_RCC_LSE_IsReady+0x18>
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	e000      	b.n	800cc22 <LL_RCC_LSE_IsReady+0x1a>
 800cc20:	2300      	movs	r3, #0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr

0800cc2c <LL_RCC_SetRFWKPClockSource>:
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800cc34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cc3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800cc40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	4313      	orrs	r3, r2
 800cc48:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800cc4c:	bf00      	nop
 800cc4e:	370c      	adds	r7, #12
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr

0800cc58 <LL_RCC_SetSMPSClockSource>:
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b083      	sub	sp, #12
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800cc60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc66:	f023 0203 	bic.w	r2, r3, #3
 800cc6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4313      	orrs	r3, r2
 800cc72:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800cc74:	bf00      	nop
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <LL_RCC_SetSMPSPrescaler>:
{
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800cc88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc8e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800cc92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800cc9c:	bf00      	nop
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <LL_RCC_SetUSARTClockSource>:
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800ccb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ccb8:	f023 0203 	bic.w	r2, r3, #3
 800ccbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800ccc8:	bf00      	nop
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <LL_RCC_SetLPUARTClockSource>:
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b083      	sub	sp, #12
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800ccdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cce4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cce8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800ccf4:	bf00      	nop
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr

0800cd00 <LL_RCC_SetI2CClockSource>:
{
 800cd00:	b480      	push	{r7}
 800cd02:	b083      	sub	sp, #12
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800cd08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	091b      	lsrs	r3, r3, #4
 800cd14:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800cd18:	43db      	mvns	r3, r3
 800cd1a:	401a      	ands	r2, r3
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	011b      	lsls	r3, r3, #4
 800cd20:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800cd24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cd2e:	bf00      	nop
 800cd30:	370c      	adds	r7, #12
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr

0800cd3a <LL_RCC_SetLPTIMClockSource>:
{
 800cd3a:	b480      	push	{r7}
 800cd3c:	b083      	sub	sp, #12
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800cd42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd46:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	0c1b      	lsrs	r3, r3, #16
 800cd4e:	041b      	lsls	r3, r3, #16
 800cd50:	43db      	mvns	r3, r3
 800cd52:	401a      	ands	r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	041b      	lsls	r3, r3, #16
 800cd58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cd62:	bf00      	nop
 800cd64:	370c      	adds	r7, #12
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr

0800cd6e <LL_RCC_SetSAIClockSource>:
{
 800cd6e:	b480      	push	{r7}
 800cd70:	b083      	sub	sp, #12
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800cd76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800cd82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cd8e:	bf00      	nop
 800cd90:	370c      	adds	r7, #12
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr

0800cd9a <LL_RCC_SetRNGClockSource>:
{
 800cd9a:	b480      	push	{r7}
 800cd9c:	b083      	sub	sp, #12
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800cda2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cda6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdaa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800cdae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cdba:	bf00      	nop
 800cdbc:	370c      	adds	r7, #12
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr

0800cdc6 <LL_RCC_SetCLK48ClockSource>:
{
 800cdc6:	b480      	push	{r7}
 800cdc8:	b083      	sub	sp, #12
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800cdce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cdd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdd6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800cdda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	4313      	orrs	r3, r2
 800cde2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cde6:	bf00      	nop
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr

0800cdf2 <LL_RCC_SetUSBClockSource>:
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b082      	sub	sp, #8
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f7ff ffe3 	bl	800cdc6 <LL_RCC_SetCLK48ClockSource>
}
 800ce00:	bf00      	nop
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <LL_RCC_SetADCClockSource>:
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800ce10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce18:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800ce1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4313      	orrs	r3, r2
 800ce24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800ce28:	bf00      	nop
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <LL_RCC_SetRTCClockSource>:
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800ce3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ce48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800ce54:	bf00      	nop
 800ce56:	370c      	adds	r7, #12
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <LL_RCC_GetRTCClockSource>:
{
 800ce60:	b480      	push	{r7}
 800ce62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800ce64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr

0800ce7a <LL_RCC_ForceBackupDomainReset>:
{
 800ce7a:	b480      	push	{r7}
 800ce7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800ce7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ce8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ce8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ce92:	bf00      	nop
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <LL_RCC_ReleaseBackupDomainReset>:
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800cea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cea8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ceac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ceb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ceb4:	bf00      	nop
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr

0800cebe <LL_RCC_PLLSAI1_Enable>:
{
 800cebe:	b480      	push	{r7}
 800cec0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800cec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cecc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ced0:	6013      	str	r3, [r2, #0]
}
 800ced2:	bf00      	nop
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <LL_RCC_PLLSAI1_Disable>:
{
 800cedc:	b480      	push	{r7}
 800cede:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800cee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ceea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ceee:	6013      	str	r3, [r2, #0]
}
 800cef0:	bf00      	nop
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr

0800cefa <LL_RCC_PLLSAI1_IsReady>:
{
 800cefa:	b480      	push	{r7}
 800cefc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800cefe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf0c:	d101      	bne.n	800cf12 <LL_RCC_PLLSAI1_IsReady+0x18>
 800cf0e:	2301      	movs	r3, #1
 800cf10:	e000      	b.n	800cf14 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800cf12:	2300      	movs	r3, #0
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr

0800cf1e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b088      	sub	sp, #32
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800cf26:	2300      	movs	r3, #0
 800cf28:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d034      	beq.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf3e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800cf42:	d021      	beq.n	800cf88 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800cf44:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800cf48:	d81b      	bhi.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cf4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cf4e:	d01d      	beq.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800cf50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cf54:	d815      	bhi.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d00b      	beq.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800cf5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cf5e:	d110      	bne.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800cf60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cf6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cf6e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800cf70:	e00d      	b.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	3304      	adds	r3, #4
 800cf76:	4618      	mov	r0, r3
 800cf78:	f000 f947 	bl	800d20a <RCCEx_PLLSAI1_ConfigNP>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800cf80:	e005      	b.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800cf82:	2301      	movs	r3, #1
 800cf84:	77fb      	strb	r3, [r7, #31]
        break;
 800cf86:	e002      	b.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800cf88:	bf00      	nop
 800cf8a:	e000      	b.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800cf8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf8e:	7ffb      	ldrb	r3, [r7, #31]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d105      	bne.n	800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7ff fee8 	bl	800cd6e <LL_RCC_SetSAIClockSource>
 800cf9e:	e001      	b.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfa0:	7ffb      	ldrb	r3, [r7, #31]
 800cfa2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d046      	beq.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800cfb0:	f7ff ff56 	bl	800ce60 <LL_RCC_GetRTCClockSource>
 800cfb4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfba:	69ba      	ldr	r2, [r7, #24]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d03c      	beq.n	800d03a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800cfc0:	f7fe fc58 	bl	800b874 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d105      	bne.n	800cfd6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7ff ff30 	bl	800ce34 <LL_RCC_SetRTCClockSource>
 800cfd4:	e02e      	b.n	800d034 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800cfd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfde:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800cfe0:	f7ff ff4b 	bl	800ce7a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800cfe4:	f7ff ff5a 	bl	800ce9c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cff2:	4313      	orrs	r3, r2
 800cff4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800cff6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800d000:	f7ff fdf0 	bl	800cbe4 <LL_RCC_LSE_IsEnabled>
 800d004:	4603      	mov	r3, r0
 800d006:	2b01      	cmp	r3, #1
 800d008:	d114      	bne.n	800d034 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d00a:	f7fa f8cf 	bl	80071ac <HAL_GetTick>
 800d00e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800d010:	e00b      	b.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d012:	f7fa f8cb 	bl	80071ac <HAL_GetTick>
 800d016:	4602      	mov	r2, r0
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	1ad3      	subs	r3, r2, r3
 800d01c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d020:	4293      	cmp	r3, r2
 800d022:	d902      	bls.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800d024:	2303      	movs	r3, #3
 800d026:	77fb      	strb	r3, [r7, #31]
              break;
 800d028:	e004      	b.n	800d034 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800d02a:	f7ff fded 	bl	800cc08 <LL_RCC_LSE_IsReady>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b01      	cmp	r3, #1
 800d032:	d1ee      	bne.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800d034:	7ffb      	ldrb	r3, [r7, #31]
 800d036:	77bb      	strb	r3, [r7, #30]
 800d038:	e001      	b.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d03a:	7ffb      	ldrb	r3, [r7, #31]
 800d03c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f003 0301 	and.w	r3, r3, #1
 800d046:	2b00      	cmp	r3, #0
 800d048:	d004      	beq.n	800d054 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	699b      	ldr	r3, [r3, #24]
 800d04e:	4618      	mov	r0, r3
 800d050:	f7ff fe2a 	bl	800cca8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f003 0302 	and.w	r3, r3, #2
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d004      	beq.n	800d06a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	69db      	ldr	r3, [r3, #28]
 800d064:	4618      	mov	r0, r3
 800d066:	f7ff fe35 	bl	800ccd4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f003 0310 	and.w	r3, r3, #16
 800d072:	2b00      	cmp	r3, #0
 800d074:	d004      	beq.n	800d080 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7ff fe5d 	bl	800cd3a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f003 0320 	and.w	r3, r3, #32
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d004      	beq.n	800d096 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d090:	4618      	mov	r0, r3
 800d092:	f7ff fe52 	bl	800cd3a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f003 0304 	and.w	r3, r3, #4
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d004      	beq.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6a1b      	ldr	r3, [r3, #32]
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7ff fe2a 	bl	800cd00 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f003 0308 	and.w	r3, r3, #8
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d004      	beq.n	800d0c2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7ff fe1f 	bl	800cd00 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d022      	beq.n	800d114 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7ff fe8d 	bl	800cdf2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d0e0:	d107      	bne.n	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800d0e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d0ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d0f0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d0fa:	d10b      	bne.n	800d114 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	3304      	adds	r3, #4
 800d100:	4618      	mov	r0, r3
 800d102:	f000 f8dd 	bl	800d2c0 <RCCEx_PLLSAI1_ConfigNQ>
 800d106:	4603      	mov	r3, r0
 800d108:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d10a:	7ffb      	ldrb	r3, [r7, #31]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d001      	beq.n	800d114 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800d110:	7ffb      	ldrb	r3, [r7, #31]
 800d112:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d02b      	beq.n	800d178 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d128:	d008      	beq.n	800d13c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d12e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d132:	d003      	beq.n	800d13c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d105      	bne.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d140:	4618      	mov	r0, r3
 800d142:	f7ff fe2a 	bl	800cd9a <LL_RCC_SetRNGClockSource>
 800d146:	e00a      	b.n	800d15e <HAL_RCCEx_PeriphCLKConfig+0x240>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d14c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d150:	60fb      	str	r3, [r7, #12]
 800d152:	2000      	movs	r0, #0
 800d154:	f7ff fe21 	bl	800cd9a <LL_RCC_SetRNGClockSource>
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f7ff fe34 	bl	800cdc6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d162:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800d166:	d107      	bne.n	800d178 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800d168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d176:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d180:	2b00      	cmp	r3, #0
 800d182:	d022      	beq.n	800d1ca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d188:	4618      	mov	r0, r3
 800d18a:	f7ff fe3d 	bl	800ce08 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d196:	d107      	bne.n	800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d19c:	68db      	ldr	r3, [r3, #12]
 800d19e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d1a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d1a6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1b0:	d10b      	bne.n	800d1ca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	3304      	adds	r3, #4
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f000 f8dd 	bl	800d376 <RCCEx_PLLSAI1_ConfigNR>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d1c0:	7ffb      	ldrb	r3, [r7, #31]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d001      	beq.n	800d1ca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800d1c6:	7ffb      	ldrb	r3, [r7, #31]
 800d1c8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d004      	beq.n	800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7ff fd26 	bl	800cc2c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d009      	beq.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7ff fd45 	bl	800cc80 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7ff fd2c 	bl	800cc58 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800d200:	7fbb      	ldrb	r3, [r7, #30]
}
 800d202:	4618      	mov	r0, r3
 800d204:	3720      	adds	r7, #32
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b084      	sub	sp, #16
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d212:	2300      	movs	r3, #0
 800d214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d216:	f7ff fe61 	bl	800cedc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d21a:	f7f9 ffc7 	bl	80071ac <HAL_GetTick>
 800d21e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d220:	e009      	b.n	800d236 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d222:	f7f9 ffc3 	bl	80071ac <HAL_GetTick>
 800d226:	4602      	mov	r2, r0
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	1ad3      	subs	r3, r2, r3
 800d22c:	2b02      	cmp	r3, #2
 800d22e:	d902      	bls.n	800d236 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d230:	2303      	movs	r3, #3
 800d232:	73fb      	strb	r3, [r7, #15]
      break;
 800d234:	e004      	b.n	800d240 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d236:	f7ff fe60 	bl	800cefa <LL_RCC_PLLSAI1_IsReady>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d1f0      	bne.n	800d222 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d240:	7bfb      	ldrb	r3, [r7, #15]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d137      	bne.n	800d2b6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	021b      	lsls	r3, r3, #8
 800d256:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d25a:	4313      	orrs	r3, r2
 800d25c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d25e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d262:	691b      	ldr	r3, [r3, #16]
 800d264:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d270:	4313      	orrs	r3, r2
 800d272:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d274:	f7ff fe23 	bl	800cebe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d278:	f7f9 ff98 	bl	80071ac <HAL_GetTick>
 800d27c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d27e:	e009      	b.n	800d294 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d280:	f7f9 ff94 	bl	80071ac <HAL_GetTick>
 800d284:	4602      	mov	r2, r0
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	1ad3      	subs	r3, r2, r3
 800d28a:	2b02      	cmp	r3, #2
 800d28c:	d902      	bls.n	800d294 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d28e:	2303      	movs	r3, #3
 800d290:	73fb      	strb	r3, [r7, #15]
        break;
 800d292:	e004      	b.n	800d29e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d294:	f7ff fe31 	bl	800cefa <LL_RCC_PLLSAI1_IsReady>
 800d298:	4603      	mov	r3, r0
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d1f0      	bne.n	800d280 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d29e:	7bfb      	ldrb	r3, [r7, #15]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d108      	bne.n	800d2b6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d2a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2a8:	691a      	ldr	r2, [r3, #16]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	691b      	ldr	r3, [r3, #16]
 800d2ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3710      	adds	r7, #16
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d2cc:	f7ff fe06 	bl	800cedc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d2d0:	f7f9 ff6c 	bl	80071ac <HAL_GetTick>
 800d2d4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d2d6:	e009      	b.n	800d2ec <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d2d8:	f7f9 ff68 	bl	80071ac <HAL_GetTick>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	1ad3      	subs	r3, r2, r3
 800d2e2:	2b02      	cmp	r3, #2
 800d2e4:	d902      	bls.n	800d2ec <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d2e6:	2303      	movs	r3, #3
 800d2e8:	73fb      	strb	r3, [r7, #15]
      break;
 800d2ea:	e004      	b.n	800d2f6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d2ec:	f7ff fe05 	bl	800cefa <LL_RCC_PLLSAI1_IsReady>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d1f0      	bne.n	800d2d8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d2f6:	7bfb      	ldrb	r3, [r7, #15]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d137      	bne.n	800d36c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d2fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d300:	691b      	ldr	r3, [r3, #16]
 800d302:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	021b      	lsls	r3, r3, #8
 800d30c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d310:	4313      	orrs	r3, r2
 800d312:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d318:	691b      	ldr	r3, [r3, #16]
 800d31a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	689b      	ldr	r3, [r3, #8]
 800d322:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d326:	4313      	orrs	r3, r2
 800d328:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d32a:	f7ff fdc8 	bl	800cebe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d32e:	f7f9 ff3d 	bl	80071ac <HAL_GetTick>
 800d332:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d334:	e009      	b.n	800d34a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d336:	f7f9 ff39 	bl	80071ac <HAL_GetTick>
 800d33a:	4602      	mov	r2, r0
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	2b02      	cmp	r3, #2
 800d342:	d902      	bls.n	800d34a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d344:	2303      	movs	r3, #3
 800d346:	73fb      	strb	r3, [r7, #15]
        break;
 800d348:	e004      	b.n	800d354 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d34a:	f7ff fdd6 	bl	800cefa <LL_RCC_PLLSAI1_IsReady>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b01      	cmp	r3, #1
 800d352:	d1f0      	bne.n	800d336 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800d354:	7bfb      	ldrb	r3, [r7, #15]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d108      	bne.n	800d36c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d35a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d35e:	691a      	ldr	r2, [r3, #16]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	691b      	ldr	r3, [r3, #16]
 800d364:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d368:	4313      	orrs	r3, r2
 800d36a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b084      	sub	sp, #16
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d37e:	2300      	movs	r3, #0
 800d380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d382:	f7ff fdab 	bl	800cedc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d386:	f7f9 ff11 	bl	80071ac <HAL_GetTick>
 800d38a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d38c:	e009      	b.n	800d3a2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d38e:	f7f9 ff0d 	bl	80071ac <HAL_GetTick>
 800d392:	4602      	mov	r2, r0
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	1ad3      	subs	r3, r2, r3
 800d398:	2b02      	cmp	r3, #2
 800d39a:	d902      	bls.n	800d3a2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800d39c:	2303      	movs	r3, #3
 800d39e:	73fb      	strb	r3, [r7, #15]
      break;
 800d3a0:	e004      	b.n	800d3ac <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d3a2:	f7ff fdaa 	bl	800cefa <LL_RCC_PLLSAI1_IsReady>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d1f0      	bne.n	800d38e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800d3ac:	7bfb      	ldrb	r3, [r7, #15]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d137      	bne.n	800d422 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d3b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3b6:	691b      	ldr	r3, [r3, #16]
 800d3b8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	021b      	lsls	r3, r3, #8
 800d3c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d3ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3ce:	691b      	ldr	r3, [r3, #16]
 800d3d0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	68db      	ldr	r3, [r3, #12]
 800d3d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d3e0:	f7ff fd6d 	bl	800cebe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3e4:	f7f9 fee2 	bl	80071ac <HAL_GetTick>
 800d3e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d3ea:	e009      	b.n	800d400 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d3ec:	f7f9 fede 	bl	80071ac <HAL_GetTick>
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	1ad3      	subs	r3, r2, r3
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	d902      	bls.n	800d400 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d3fa:	2303      	movs	r3, #3
 800d3fc:	73fb      	strb	r3, [r7, #15]
        break;
 800d3fe:	e004      	b.n	800d40a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d400:	f7ff fd7b 	bl	800cefa <LL_RCC_PLLSAI1_IsReady>
 800d404:	4603      	mov	r3, r0
 800d406:	2b01      	cmp	r3, #1
 800d408:	d1f0      	bne.n	800d3ec <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d40a:	7bfb      	ldrb	r3, [r7, #15]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d108      	bne.n	800d422 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d414:	691a      	ldr	r2, [r3, #16]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	691b      	ldr	r3, [r3, #16]
 800d41a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d41e:	4313      	orrs	r3, r2
 800d420:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d422:	7bfb      	ldrb	r3, [r7, #15]
}
 800d424:	4618      	mov	r0, r3
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d101      	bne.n	800d43e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800d43a:	2301      	movs	r3, #1
 800d43c:	e09f      	b.n	800d57e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d444:	b2db      	uxtb	r3, r3
 800d446:	2b00      	cmp	r3, #0
 800d448:	d106      	bne.n	800d458 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f7f6 f8e8 	bl	8003628 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2202      	movs	r2, #2
 800d45c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d460:	4b49      	ldr	r3, [pc, #292]	@ (800d588 <HAL_RTC_Init+0x15c>)
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	f003 0310 	and.w	r3, r3, #16
 800d468:	2b10      	cmp	r3, #16
 800d46a:	d07e      	beq.n	800d56a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	22ca      	movs	r2, #202	@ 0xca
 800d472:	625a      	str	r2, [r3, #36]	@ 0x24
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2253      	movs	r2, #83	@ 0x53
 800d47a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 fa1d 	bl	800d8bc <RTC_EnterInitMode>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d00a      	beq.n	800d49e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	22ff      	movs	r2, #255	@ 0xff
 800d48e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2204      	movs	r2, #4
 800d494:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800d498:	2301      	movs	r3, #1
 800d49a:	73fb      	strb	r3, [r7, #15]
 800d49c:	e067      	b.n	800d56e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	689b      	ldr	r3, [r3, #8]
 800d4a4:	687a      	ldr	r2, [r7, #4]
 800d4a6:	6812      	ldr	r2, [r2, #0]
 800d4a8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d4ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d4b0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	6899      	ldr	r1, [r3, #8]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	685a      	ldr	r2, [r3, #4]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	691b      	ldr	r3, [r3, #16]
 800d4c0:	431a      	orrs	r2, r3
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	699b      	ldr	r3, [r3, #24]
 800d4c6:	431a      	orrs	r2, r3
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	430a      	orrs	r2, r1
 800d4ce:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	68d2      	ldr	r2, [r2, #12]
 800d4d8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	6919      	ldr	r1, [r3, #16]
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	041a      	lsls	r2, r3, #16
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	430a      	orrs	r2, r1
 800d4ec:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	68da      	ldr	r2, [r3, #12]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d4fc:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f022 0203 	bic.w	r2, r2, #3
 800d50c:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	69da      	ldr	r2, [r3, #28]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	695b      	ldr	r3, [r3, #20]
 800d51c:	431a      	orrs	r2, r3
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	430a      	orrs	r2, r1
 800d524:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	689b      	ldr	r3, [r3, #8]
 800d52c:	f003 0320 	and.w	r3, r3, #32
 800d530:	2b00      	cmp	r3, #0
 800d532:	d113      	bne.n	800d55c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 f99b 	bl	800d870 <HAL_RTC_WaitForSynchro>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d00d      	beq.n	800d55c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	22ff      	movs	r2, #255	@ 0xff
 800d546:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2204      	movs	r2, #4
 800d54c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800d558:	2301      	movs	r3, #1
 800d55a:	e010      	b.n	800d57e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	22ff      	movs	r2, #255	@ 0xff
 800d562:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800d564:	2300      	movs	r3, #0
 800d566:	73fb      	strb	r3, [r7, #15]
 800d568:	e001      	b.n	800d56e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800d56a:	2300      	movs	r3, #0
 800d56c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d56e:	7bfb      	ldrb	r3, [r7, #15]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d103      	bne.n	800d57c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2201      	movs	r2, #1
 800d578:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800d57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3710      	adds	r7, #16
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	40002800 	.word	0x40002800

0800d58c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d58c:	b590      	push	{r4, r7, lr}
 800d58e:	b087      	sub	sp, #28
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d101      	bne.n	800d5a6 <HAL_RTC_SetTime+0x1a>
 800d5a2:	2302      	movs	r3, #2
 800d5a4:	e0b2      	b.n	800d70c <HAL_RTC_SetTime+0x180>
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	2202      	movs	r2, #2
 800d5b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d126      	bne.n	800d60a <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	689b      	ldr	r3, [r3, #8]
 800d5c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d102      	bne.n	800d5d0 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f000 f99b 	bl	800d910 <RTC_ByteToBcd2>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	785b      	ldrb	r3, [r3, #1]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f000 f994 	bl	800d910 <RTC_ByteToBcd2>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d5ec:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	789b      	ldrb	r3, [r3, #2]
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f000 f98c 	bl	800d910 <RTC_ByteToBcd2>
 800d5f8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d5fa:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	78db      	ldrb	r3, [r3, #3]
 800d602:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d604:	4313      	orrs	r3, r2
 800d606:	617b      	str	r3, [r7, #20]
 800d608:	e018      	b.n	800d63c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	689b      	ldr	r3, [r3, #8]
 800d610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d614:	2b00      	cmp	r3, #0
 800d616:	d102      	bne.n	800d61e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	2200      	movs	r2, #0
 800d61c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	785b      	ldrb	r3, [r3, #1]
 800d628:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d62a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d62c:	68ba      	ldr	r2, [r7, #8]
 800d62e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d630:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	78db      	ldrb	r3, [r3, #3]
 800d636:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d638:	4313      	orrs	r3, r2
 800d63a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	22ca      	movs	r2, #202	@ 0xca
 800d642:	625a      	str	r2, [r3, #36]	@ 0x24
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2253      	movs	r2, #83	@ 0x53
 800d64a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f000 f935 	bl	800d8bc <RTC_EnterInitMode>
 800d652:	4603      	mov	r3, r0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d00d      	beq.n	800d674 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	22ff      	movs	r2, #255	@ 0xff
 800d65e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2204      	movs	r2, #4
 800d664:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2200      	movs	r2, #0
 800d66c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d670:	2301      	movs	r3, #1
 800d672:	e04b      	b.n	800d70c <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681a      	ldr	r2, [r3, #0]
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800d67e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800d682:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	689a      	ldr	r2, [r3, #8]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d692:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	6899      	ldr	r1, [r3, #8]
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	68da      	ldr	r2, [r3, #12]
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	691b      	ldr	r3, [r3, #16]
 800d6a2:	431a      	orrs	r2, r3
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	430a      	orrs	r2, r1
 800d6aa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	68da      	ldr	r2, [r3, #12]
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d6ba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	f003 0320 	and.w	r3, r3, #32
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d113      	bne.n	800d6f2 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d6ca:	68f8      	ldr	r0, [r7, #12]
 800d6cc:	f000 f8d0 	bl	800d870 <HAL_RTC_WaitForSynchro>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00d      	beq.n	800d6f2 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	22ff      	movs	r2, #255	@ 0xff
 800d6dc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2204      	movs	r2, #4
 800d6e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	e00c      	b.n	800d70c <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	22ff      	movs	r2, #255	@ 0xff
 800d6f8:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2200      	movs	r2, #0
 800d706:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800d70a:	2300      	movs	r3, #0
  }
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	371c      	adds	r7, #28
 800d710:	46bd      	mov	sp, r7
 800d712:	bd90      	pop	{r4, r7, pc}

0800d714 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d714:	b590      	push	{r4, r7, lr}
 800d716:	b087      	sub	sp, #28
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d726:	2b01      	cmp	r3, #1
 800d728:	d101      	bne.n	800d72e <HAL_RTC_SetDate+0x1a>
 800d72a:	2302      	movs	r3, #2
 800d72c:	e09c      	b.n	800d868 <HAL_RTC_SetDate+0x154>
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2201      	movs	r2, #1
 800d732:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2202      	movs	r2, #2
 800d73a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d10e      	bne.n	800d762 <HAL_RTC_SetDate+0x4e>
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	785b      	ldrb	r3, [r3, #1]
 800d748:	f003 0310 	and.w	r3, r3, #16
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d008      	beq.n	800d762 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	785b      	ldrb	r3, [r3, #1]
 800d754:	f023 0310 	bic.w	r3, r3, #16
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	330a      	adds	r3, #10
 800d75c:	b2da      	uxtb	r2, r3
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d11c      	bne.n	800d7a2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	78db      	ldrb	r3, [r3, #3]
 800d76c:	4618      	mov	r0, r3
 800d76e:	f000 f8cf 	bl	800d910 <RTC_ByteToBcd2>
 800d772:	4603      	mov	r3, r0
 800d774:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	785b      	ldrb	r3, [r3, #1]
 800d77a:	4618      	mov	r0, r3
 800d77c:	f000 f8c8 	bl	800d910 <RTC_ByteToBcd2>
 800d780:	4603      	mov	r3, r0
 800d782:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d784:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	789b      	ldrb	r3, [r3, #2]
 800d78a:	4618      	mov	r0, r3
 800d78c:	f000 f8c0 	bl	800d910 <RTC_ByteToBcd2>
 800d790:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d792:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d79c:	4313      	orrs	r3, r2
 800d79e:	617b      	str	r3, [r7, #20]
 800d7a0:	e00e      	b.n	800d7c0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	78db      	ldrb	r3, [r3, #3]
 800d7a6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	785b      	ldrb	r3, [r3, #1]
 800d7ac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d7ae:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800d7b0:	68ba      	ldr	r2, [r7, #8]
 800d7b2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800d7b4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	22ca      	movs	r2, #202	@ 0xca
 800d7c6:	625a      	str	r2, [r3, #36]	@ 0x24
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2253      	movs	r2, #83	@ 0x53
 800d7ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d7d0:	68f8      	ldr	r0, [r7, #12]
 800d7d2:	f000 f873 	bl	800d8bc <RTC_EnterInitMode>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d00d      	beq.n	800d7f8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	22ff      	movs	r2, #255	@ 0xff
 800d7e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	2204      	movs	r2, #4
 800d7e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	e037      	b.n	800d868 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681a      	ldr	r2, [r3, #0]
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d802:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d806:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	68da      	ldr	r2, [r3, #12]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d816:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	689b      	ldr	r3, [r3, #8]
 800d81e:	f003 0320 	and.w	r3, r3, #32
 800d822:	2b00      	cmp	r3, #0
 800d824:	d113      	bne.n	800d84e <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d826:	68f8      	ldr	r0, [r7, #12]
 800d828:	f000 f822 	bl	800d870 <HAL_RTC_WaitForSynchro>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00d      	beq.n	800d84e <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	22ff      	movs	r2, #255	@ 0xff
 800d838:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2204      	movs	r2, #4
 800d83e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2200      	movs	r2, #0
 800d846:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d84a:	2301      	movs	r3, #1
 800d84c:	e00c      	b.n	800d868 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	22ff      	movs	r2, #255	@ 0xff
 800d854:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2201      	movs	r2, #1
 800d85a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2200      	movs	r2, #0
 800d862:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800d866:	2300      	movs	r3, #0
  }
}
 800d868:	4618      	mov	r0, r3
 800d86a:	371c      	adds	r7, #28
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd90      	pop	{r4, r7, pc}

0800d870 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68da      	ldr	r2, [r3, #12]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800d886:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800d888:	f7f9 fc90 	bl	80071ac <HAL_GetTick>
 800d88c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d88e:	e009      	b.n	800d8a4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d890:	f7f9 fc8c 	bl	80071ac <HAL_GetTick>
 800d894:	4602      	mov	r2, r0
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	1ad3      	subs	r3, r2, r3
 800d89a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d89e:	d901      	bls.n	800d8a4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800d8a0:	2303      	movs	r3, #3
 800d8a2:	e007      	b.n	800d8b4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	f003 0320 	and.w	r3, r3, #32
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d0ee      	beq.n	800d890 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800d8b2:	2300      	movs	r3, #0
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d119      	bne.n	800d906 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d8da:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d8dc:	f7f9 fc66 	bl	80071ac <HAL_GetTick>
 800d8e0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d8e2:	e009      	b.n	800d8f8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d8e4:	f7f9 fc62 	bl	80071ac <HAL_GetTick>
 800d8e8:	4602      	mov	r2, r0
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	1ad3      	subs	r3, r2, r3
 800d8ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d8f2:	d901      	bls.n	800d8f8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800d8f4:	2303      	movs	r3, #3
 800d8f6:	e007      	b.n	800d908 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	68db      	ldr	r3, [r3, #12]
 800d8fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d902:	2b00      	cmp	r3, #0
 800d904:	d0ee      	beq.n	800d8e4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3710      	adds	r7, #16
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d910:	b480      	push	{r7}
 800d912:	b085      	sub	sp, #20
 800d914:	af00      	add	r7, sp, #0
 800d916:	4603      	mov	r3, r0
 800d918:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d91a:	2300      	movs	r3, #0
 800d91c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800d91e:	79fb      	ldrb	r3, [r7, #7]
 800d920:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800d922:	e005      	b.n	800d930 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	3301      	adds	r3, #1
 800d928:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800d92a:	7afb      	ldrb	r3, [r7, #11]
 800d92c:	3b0a      	subs	r3, #10
 800d92e:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800d930:	7afb      	ldrb	r3, [r7, #11]
 800d932:	2b09      	cmp	r3, #9
 800d934:	d8f6      	bhi.n	800d924 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	011b      	lsls	r3, r3, #4
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	7afb      	ldrb	r3, [r7, #11]
 800d940:	4313      	orrs	r3, r2
 800d942:	b2db      	uxtb	r3, r3
}
 800d944:	4618      	mov	r0, r3
 800d946:	3714      	adds	r7, #20
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr

0800d950 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b086      	sub	sp, #24
 800d954:	af00      	add	r7, sp, #0
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d962:	2b01      	cmp	r3, #1
 800d964:	d101      	bne.n	800d96a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800d966:	2302      	movs	r3, #2
 800d968:	e0a8      	b.n	800dabc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2201      	movs	r2, #1
 800d96e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2202      	movs	r2, #2
 800d976:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	22ca      	movs	r2, #202	@ 0xca
 800d980:	625a      	str	r2, [r3, #36]	@ 0x24
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	2253      	movs	r2, #83	@ 0x53
 800d988:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d994:	2b00      	cmp	r3, #0
 800d996:	d020      	beq.n	800d9da <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800d998:	f7f9 fc08 	bl	80071ac <HAL_GetTick>
 800d99c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800d99e:	e015      	b.n	800d9cc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d9a0:	f7f9 fc04 	bl	80071ac <HAL_GetTick>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	1ad3      	subs	r3, r2, r3
 800d9aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d9ae:	d90d      	bls.n	800d9cc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	22ff      	movs	r2, #255	@ 0xff
 800d9b6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2203      	movs	r2, #3
 800d9bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800d9c8:	2303      	movs	r3, #3
 800d9ca:	e077      	b.n	800dabc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	68db      	ldr	r3, [r3, #12]
 800d9d2:	f003 0304 	and.w	r3, r3, #4
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d1e2      	bne.n	800d9a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	689a      	ldr	r2, [r3, #8]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d9e8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	b2da      	uxtb	r2, r3
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800d9fa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800d9fc:	f7f9 fbd6 	bl	80071ac <HAL_GetTick>
 800da00:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800da02:	e015      	b.n	800da30 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800da04:	f7f9 fbd2 	bl	80071ac <HAL_GetTick>
 800da08:	4602      	mov	r2, r0
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800da12:	d90d      	bls.n	800da30 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	22ff      	movs	r2, #255	@ 0xff
 800da1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2203      	movs	r2, #3
 800da20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2200      	movs	r2, #0
 800da28:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800da2c:	2303      	movs	r3, #3
 800da2e:	e045      	b.n	800dabc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	68db      	ldr	r3, [r3, #12]
 800da36:	f003 0304 	and.w	r3, r3, #4
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d0e2      	beq.n	800da04 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	68ba      	ldr	r2, [r7, #8]
 800da44:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	689a      	ldr	r2, [r3, #8]
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	f022 0207 	bic.w	r2, r2, #7
 800da54:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	6899      	ldr	r1, [r3, #8]
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	430a      	orrs	r2, r1
 800da64:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800da66:	4b17      	ldr	r3, [pc, #92]	@ (800dac4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800da68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da6c:	4a15      	ldr	r2, [pc, #84]	@ (800dac4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800da6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800da72:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800da76:	4b13      	ldr	r3, [pc, #76]	@ (800dac4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4a12      	ldr	r2, [pc, #72]	@ (800dac4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800da7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800da80:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	689a      	ldr	r2, [r3, #8]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800da90:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	689a      	ldr	r2, [r3, #8]
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800daa0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	22ff      	movs	r2, #255	@ 0xff
 800daa8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2201      	movs	r2, #1
 800daae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2200      	movs	r2, #0
 800dab6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800daba:	2300      	movs	r3, #0
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3718      	adds	r7, #24
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}
 800dac4:	58000800 	.word	0x58000800

0800dac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d101      	bne.n	800dada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dad6:	2301      	movs	r3, #1
 800dad8:	e095      	b.n	800dc06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d108      	bne.n	800daf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800daea:	d009      	beq.n	800db00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2200      	movs	r2, #0
 800daf0:	61da      	str	r2, [r3, #28]
 800daf2:	e005      	b.n	800db00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2200      	movs	r2, #0
 800daf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2200      	movs	r2, #0
 800dafe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d106      	bne.n	800db20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f7f5 fe2c 	bl	8003778 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2202      	movs	r2, #2
 800db24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800db36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800db40:	d902      	bls.n	800db48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800db42:	2300      	movs	r3, #0
 800db44:	60fb      	str	r3, [r7, #12]
 800db46:	e002      	b.n	800db4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800db48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800db4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800db56:	d007      	beq.n	800db68 <HAL_SPI_Init+0xa0>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	68db      	ldr	r3, [r3, #12]
 800db5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800db60:	d002      	beq.n	800db68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2200      	movs	r2, #0
 800db66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800db78:	431a      	orrs	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	f003 0302 	and.w	r3, r3, #2
 800db82:	431a      	orrs	r2, r3
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	695b      	ldr	r3, [r3, #20]
 800db88:	f003 0301 	and.w	r3, r3, #1
 800db8c:	431a      	orrs	r2, r3
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	699b      	ldr	r3, [r3, #24]
 800db92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800db96:	431a      	orrs	r2, r3
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	69db      	ldr	r3, [r3, #28]
 800db9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dba0:	431a      	orrs	r2, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6a1b      	ldr	r3, [r3, #32]
 800dba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dbaa:	ea42 0103 	orr.w	r1, r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbb2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	430a      	orrs	r2, r1
 800dbbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	699b      	ldr	r3, [r3, #24]
 800dbc2:	0c1b      	lsrs	r3, r3, #16
 800dbc4:	f003 0204 	and.w	r2, r3, #4
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbcc:	f003 0310 	and.w	r3, r3, #16
 800dbd0:	431a      	orrs	r2, r3
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbd6:	f003 0308 	and.w	r3, r3, #8
 800dbda:	431a      	orrs	r2, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800dbe4:	ea42 0103 	orr.w	r1, r2, r3
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	430a      	orrs	r2, r1
 800dbf4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2201      	movs	r2, #1
 800dc00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800dc04:	2300      	movs	r3, #0
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3710      	adds	r7, #16
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b088      	sub	sp, #32
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	60f8      	str	r0, [r7, #12]
 800dc16:	60b9      	str	r1, [r7, #8]
 800dc18:	603b      	str	r3, [r7, #0]
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc1e:	f7f9 fac5 	bl	80071ac <HAL_GetTick>
 800dc22:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800dc24:	88fb      	ldrh	r3, [r7, #6]
 800dc26:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d001      	beq.n	800dc38 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800dc34:	2302      	movs	r3, #2
 800dc36:	e15c      	b.n	800def2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d002      	beq.n	800dc44 <HAL_SPI_Transmit+0x36>
 800dc3e:	88fb      	ldrh	r3, [r7, #6]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d101      	bne.n	800dc48 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800dc44:	2301      	movs	r3, #1
 800dc46:	e154      	b.n	800def2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d101      	bne.n	800dc56 <HAL_SPI_Transmit+0x48>
 800dc52:	2302      	movs	r3, #2
 800dc54:	e14d      	b.n	800def2 <HAL_SPI_Transmit+0x2e4>
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2203      	movs	r2, #3
 800dc62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	68ba      	ldr	r2, [r7, #8]
 800dc70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	88fa      	ldrh	r2, [r7, #6]
 800dc76:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	88fa      	ldrh	r2, [r7, #6]
 800dc7c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2200      	movs	r2, #0
 800dc82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2200      	movs	r2, #0
 800dc88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2200      	movs	r2, #0
 800dc98:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	689b      	ldr	r3, [r3, #8]
 800dca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dca8:	d10f      	bne.n	800dcca <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	681a      	ldr	r2, [r3, #0]
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dcb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dcc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcd4:	2b40      	cmp	r3, #64	@ 0x40
 800dcd6:	d007      	beq.n	800dce8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dce6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dcf0:	d952      	bls.n	800dd98 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d002      	beq.n	800dd00 <HAL_SPI_Transmit+0xf2>
 800dcfa:	8b7b      	ldrh	r3, [r7, #26]
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	d145      	bne.n	800dd8c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd04:	881a      	ldrh	r2, [r3, #0]
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd10:	1c9a      	adds	r2, r3, #2
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	b29a      	uxth	r2, r3
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800dd24:	e032      	b.n	800dd8c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	f003 0302 	and.w	r3, r3, #2
 800dd30:	2b02      	cmp	r3, #2
 800dd32:	d112      	bne.n	800dd5a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd38:	881a      	ldrh	r2, [r3, #0]
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd44:	1c9a      	adds	r2, r3, #2
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	3b01      	subs	r3, #1
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800dd58:	e018      	b.n	800dd8c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd5a:	f7f9 fa27 	bl	80071ac <HAL_GetTick>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	69fb      	ldr	r3, [r7, #28]
 800dd62:	1ad3      	subs	r3, r2, r3
 800dd64:	683a      	ldr	r2, [r7, #0]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d803      	bhi.n	800dd72 <HAL_SPI_Transmit+0x164>
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd70:	d102      	bne.n	800dd78 <HAL_SPI_Transmit+0x16a>
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d109      	bne.n	800dd8c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2200      	movs	r2, #0
 800dd84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800dd88:	2303      	movs	r3, #3
 800dd8a:	e0b2      	b.n	800def2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d1c7      	bne.n	800dd26 <HAL_SPI_Transmit+0x118>
 800dd96:	e083      	b.n	800dea0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d002      	beq.n	800dda6 <HAL_SPI_Transmit+0x198>
 800dda0:	8b7b      	ldrh	r3, [r7, #26]
 800dda2:	2b01      	cmp	r3, #1
 800dda4:	d177      	bne.n	800de96 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d912      	bls.n	800ddd6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddb4:	881a      	ldrh	r2, [r3, #0]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddc0:	1c9a      	adds	r2, r3, #2
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	3b02      	subs	r3, #2
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ddd4:	e05f      	b.n	800de96 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	330c      	adds	r3, #12
 800dde0:	7812      	ldrb	r2, [r2, #0]
 800dde2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dde8:	1c5a      	adds	r2, r3, #1
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	b29a      	uxth	r2, r3
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ddfc:	e04b      	b.n	800de96 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	689b      	ldr	r3, [r3, #8]
 800de04:	f003 0302 	and.w	r3, r3, #2
 800de08:	2b02      	cmp	r3, #2
 800de0a:	d12b      	bne.n	800de64 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800de10:	b29b      	uxth	r3, r3
 800de12:	2b01      	cmp	r3, #1
 800de14:	d912      	bls.n	800de3c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de1a:	881a      	ldrh	r2, [r3, #0]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de26:	1c9a      	adds	r2, r3, #2
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800de30:	b29b      	uxth	r3, r3
 800de32:	3b02      	subs	r3, #2
 800de34:	b29a      	uxth	r2, r3
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800de3a:	e02c      	b.n	800de96 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	330c      	adds	r3, #12
 800de46:	7812      	ldrb	r2, [r2, #0]
 800de48:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de4e:	1c5a      	adds	r2, r3, #1
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800de58:	b29b      	uxth	r3, r3
 800de5a:	3b01      	subs	r3, #1
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800de62:	e018      	b.n	800de96 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de64:	f7f9 f9a2 	bl	80071ac <HAL_GetTick>
 800de68:	4602      	mov	r2, r0
 800de6a:	69fb      	ldr	r3, [r7, #28]
 800de6c:	1ad3      	subs	r3, r2, r3
 800de6e:	683a      	ldr	r2, [r7, #0]
 800de70:	429a      	cmp	r2, r3
 800de72:	d803      	bhi.n	800de7c <HAL_SPI_Transmit+0x26e>
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de7a:	d102      	bne.n	800de82 <HAL_SPI_Transmit+0x274>
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d109      	bne.n	800de96 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	2201      	movs	r2, #1
 800de86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2200      	movs	r2, #0
 800de8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800de92:	2303      	movs	r3, #3
 800de94:	e02d      	b.n	800def2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d1ae      	bne.n	800ddfe <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dea0:	69fa      	ldr	r2, [r7, #28]
 800dea2:	6839      	ldr	r1, [r7, #0]
 800dea4:	68f8      	ldr	r0, [r7, #12]
 800dea6:	f000 fe09 	bl	800eabc <SPI_EndRxTxTransaction>
 800deaa:	4603      	mov	r3, r0
 800deac:	2b00      	cmp	r3, #0
 800deae:	d002      	beq.n	800deb6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2220      	movs	r2, #32
 800deb4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	689b      	ldr	r3, [r3, #8]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d10a      	bne.n	800ded4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800debe:	2300      	movs	r3, #0
 800dec0:	617b      	str	r3, [r7, #20]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	68db      	ldr	r3, [r3, #12]
 800dec8:	617b      	str	r3, [r7, #20]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	689b      	ldr	r3, [r3, #8]
 800ded0:	617b      	str	r3, [r7, #20]
 800ded2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2201      	movs	r2, #1
 800ded8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	2200      	movs	r2, #0
 800dee0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d001      	beq.n	800def0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800deec:	2301      	movs	r3, #1
 800deee:	e000      	b.n	800def2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800def0:	2300      	movs	r3, #0
  }
}
 800def2:	4618      	mov	r0, r3
 800def4:	3720      	adds	r7, #32
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800defa:	b580      	push	{r7, lr}
 800defc:	b088      	sub	sp, #32
 800defe:	af02      	add	r7, sp, #8
 800df00:	60f8      	str	r0, [r7, #12]
 800df02:	60b9      	str	r1, [r7, #8]
 800df04:	603b      	str	r3, [r7, #0]
 800df06:	4613      	mov	r3, r2
 800df08:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800df10:	b2db      	uxtb	r3, r3
 800df12:	2b01      	cmp	r3, #1
 800df14:	d001      	beq.n	800df1a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800df16:	2302      	movs	r3, #2
 800df18:	e123      	b.n	800e162 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d002      	beq.n	800df26 <HAL_SPI_Receive+0x2c>
 800df20:	88fb      	ldrh	r3, [r7, #6]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d101      	bne.n	800df2a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800df26:	2301      	movs	r3, #1
 800df28:	e11b      	b.n	800e162 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800df32:	d112      	bne.n	800df5a <HAL_SPI_Receive+0x60>
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d10e      	bne.n	800df5a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2204      	movs	r2, #4
 800df40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800df44:	88fa      	ldrh	r2, [r7, #6]
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	9300      	str	r3, [sp, #0]
 800df4a:	4613      	mov	r3, r2
 800df4c:	68ba      	ldr	r2, [r7, #8]
 800df4e:	68b9      	ldr	r1, [r7, #8]
 800df50:	68f8      	ldr	r0, [r7, #12]
 800df52:	f000 f90a 	bl	800e16a <HAL_SPI_TransmitReceive>
 800df56:	4603      	mov	r3, r0
 800df58:	e103      	b.n	800e162 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800df5a:	f7f9 f927 	bl	80071ac <HAL_GetTick>
 800df5e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800df66:	2b01      	cmp	r3, #1
 800df68:	d101      	bne.n	800df6e <HAL_SPI_Receive+0x74>
 800df6a:	2302      	movs	r3, #2
 800df6c:	e0f9      	b.n	800e162 <HAL_SPI_Receive+0x268>
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2201      	movs	r2, #1
 800df72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2204      	movs	r2, #4
 800df7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2200      	movs	r2, #0
 800df82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	68ba      	ldr	r2, [r7, #8]
 800df88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	88fa      	ldrh	r2, [r7, #6]
 800df8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	88fa      	ldrh	r2, [r7, #6]
 800df96:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2200      	movs	r2, #0
 800df9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dfc0:	d908      	bls.n	800dfd4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	685a      	ldr	r2, [r3, #4]
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800dfd0:	605a      	str	r2, [r3, #4]
 800dfd2:	e007      	b.n	800dfe4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	685a      	ldr	r2, [r3, #4]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800dfe2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	689b      	ldr	r3, [r3, #8]
 800dfe8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dfec:	d10f      	bne.n	800e00e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	681a      	ldr	r2, [r3, #0]
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dffc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e00c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e018:	2b40      	cmp	r3, #64	@ 0x40
 800e01a:	d007      	beq.n	800e02c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e02a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e034:	d875      	bhi.n	800e122 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e036:	e037      	b.n	800e0a8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	689b      	ldr	r3, [r3, #8]
 800e03e:	f003 0301 	and.w	r3, r3, #1
 800e042:	2b01      	cmp	r3, #1
 800e044:	d117      	bne.n	800e076 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f103 020c 	add.w	r2, r3, #12
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e052:	7812      	ldrb	r2, [r2, #0]
 800e054:	b2d2      	uxtb	r2, r2
 800e056:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e05c:	1c5a      	adds	r2, r3, #1
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e068:	b29b      	uxth	r3, r3
 800e06a:	3b01      	subs	r3, #1
 800e06c:	b29a      	uxth	r2, r3
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e074:	e018      	b.n	800e0a8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e076:	f7f9 f899 	bl	80071ac <HAL_GetTick>
 800e07a:	4602      	mov	r2, r0
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	1ad3      	subs	r3, r2, r3
 800e080:	683a      	ldr	r2, [r7, #0]
 800e082:	429a      	cmp	r2, r3
 800e084:	d803      	bhi.n	800e08e <HAL_SPI_Receive+0x194>
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e08c:	d102      	bne.n	800e094 <HAL_SPI_Receive+0x19a>
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d109      	bne.n	800e0a8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2201      	movs	r2, #1
 800e098:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e0a4:	2303      	movs	r3, #3
 800e0a6:	e05c      	b.n	800e162 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d1c1      	bne.n	800e038 <HAL_SPI_Receive+0x13e>
 800e0b4:	e03b      	b.n	800e12e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	689b      	ldr	r3, [r3, #8]
 800e0bc:	f003 0301 	and.w	r3, r3, #1
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d115      	bne.n	800e0f0 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	68da      	ldr	r2, [r3, #12]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0ce:	b292      	uxth	r2, r2
 800e0d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0d6:	1c9a      	adds	r2, r3, #2
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	3b01      	subs	r3, #1
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e0ee:	e018      	b.n	800e122 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0f0:	f7f9 f85c 	bl	80071ac <HAL_GetTick>
 800e0f4:	4602      	mov	r2, r0
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	1ad3      	subs	r3, r2, r3
 800e0fa:	683a      	ldr	r2, [r7, #0]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d803      	bhi.n	800e108 <HAL_SPI_Receive+0x20e>
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e106:	d102      	bne.n	800e10e <HAL_SPI_Receive+0x214>
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d109      	bne.n	800e122 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2201      	movs	r2, #1
 800e112:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	2200      	movs	r2, #0
 800e11a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e11e:	2303      	movs	r3, #3
 800e120:	e01f      	b.n	800e162 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e128:	b29b      	uxth	r3, r3
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d1c3      	bne.n	800e0b6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e12e:	697a      	ldr	r2, [r7, #20]
 800e130:	6839      	ldr	r1, [r7, #0]
 800e132:	68f8      	ldr	r0, [r7, #12]
 800e134:	f000 fc6a 	bl	800ea0c <SPI_EndRxTransaction>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d002      	beq.n	800e144 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2220      	movs	r2, #32
 800e142:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2201      	movs	r2, #1
 800e148:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2200      	movs	r2, #0
 800e150:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d001      	beq.n	800e160 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800e15c:	2301      	movs	r3, #1
 800e15e:	e000      	b.n	800e162 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800e160:	2300      	movs	r3, #0
  }
}
 800e162:	4618      	mov	r0, r3
 800e164:	3718      	adds	r7, #24
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}

0800e16a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e16a:	b580      	push	{r7, lr}
 800e16c:	b08a      	sub	sp, #40	@ 0x28
 800e16e:	af00      	add	r7, sp, #0
 800e170:	60f8      	str	r0, [r7, #12]
 800e172:	60b9      	str	r1, [r7, #8]
 800e174:	607a      	str	r2, [r7, #4]
 800e176:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e178:	2301      	movs	r3, #1
 800e17a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e17c:	f7f9 f816 	bl	80071ac <HAL_GetTick>
 800e180:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e188:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800e190:	887b      	ldrh	r3, [r7, #2]
 800e192:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800e194:	887b      	ldrh	r3, [r7, #2]
 800e196:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e198:	7ffb      	ldrb	r3, [r7, #31]
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d00c      	beq.n	800e1b8 <HAL_SPI_TransmitReceive+0x4e>
 800e19e:	69bb      	ldr	r3, [r7, #24]
 800e1a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e1a4:	d106      	bne.n	800e1b4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	689b      	ldr	r3, [r3, #8]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d102      	bne.n	800e1b4 <HAL_SPI_TransmitReceive+0x4a>
 800e1ae:	7ffb      	ldrb	r3, [r7, #31]
 800e1b0:	2b04      	cmp	r3, #4
 800e1b2:	d001      	beq.n	800e1b8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800e1b4:	2302      	movs	r3, #2
 800e1b6:	e1f3      	b.n	800e5a0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d005      	beq.n	800e1ca <HAL_SPI_TransmitReceive+0x60>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d002      	beq.n	800e1ca <HAL_SPI_TransmitReceive+0x60>
 800e1c4:	887b      	ldrh	r3, [r7, #2]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d101      	bne.n	800e1ce <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	e1e8      	b.n	800e5a0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e1d4:	2b01      	cmp	r3, #1
 800e1d6:	d101      	bne.n	800e1dc <HAL_SPI_TransmitReceive+0x72>
 800e1d8:	2302      	movs	r3, #2
 800e1da:	e1e1      	b.n	800e5a0 <HAL_SPI_TransmitReceive+0x436>
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2201      	movs	r2, #1
 800e1e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e1ea:	b2db      	uxtb	r3, r3
 800e1ec:	2b04      	cmp	r3, #4
 800e1ee:	d003      	beq.n	800e1f8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2205      	movs	r2, #5
 800e1f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	887a      	ldrh	r2, [r7, #2]
 800e208:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	887a      	ldrh	r2, [r7, #2]
 800e210:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	68ba      	ldr	r2, [r7, #8]
 800e218:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	887a      	ldrh	r2, [r7, #2]
 800e21e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	887a      	ldrh	r2, [r7, #2]
 800e224:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2200      	movs	r2, #0
 800e22a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2200      	movs	r2, #0
 800e230:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e23a:	d802      	bhi.n	800e242 <HAL_SPI_TransmitReceive+0xd8>
 800e23c:	8abb      	ldrh	r3, [r7, #20]
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d908      	bls.n	800e254 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	685a      	ldr	r2, [r3, #4]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e250:	605a      	str	r2, [r3, #4]
 800e252:	e007      	b.n	800e264 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	685a      	ldr	r2, [r3, #4]
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e262:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e26e:	2b40      	cmp	r3, #64	@ 0x40
 800e270:	d007      	beq.n	800e282 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e280:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	68db      	ldr	r3, [r3, #12]
 800e286:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e28a:	f240 8083 	bls.w	800e394 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	685b      	ldr	r3, [r3, #4]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d002      	beq.n	800e29c <HAL_SPI_TransmitReceive+0x132>
 800e296:	8afb      	ldrh	r3, [r7, #22]
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d16f      	bne.n	800e37c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2a0:	881a      	ldrh	r2, [r3, #0]
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2ac:	1c9a      	adds	r2, r3, #2
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	3b01      	subs	r3, #1
 800e2ba:	b29a      	uxth	r2, r3
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e2c0:	e05c      	b.n	800e37c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	689b      	ldr	r3, [r3, #8]
 800e2c8:	f003 0302 	and.w	r3, r3, #2
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	d11b      	bne.n	800e308 <HAL_SPI_TransmitReceive+0x19e>
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d016      	beq.n	800e308 <HAL_SPI_TransmitReceive+0x19e>
 800e2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d113      	bne.n	800e308 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2e4:	881a      	ldrh	r2, [r3, #0]
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2f0:	1c9a      	adds	r2, r3, #2
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	3b01      	subs	r3, #1
 800e2fe:	b29a      	uxth	r2, r3
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e304:	2300      	movs	r3, #0
 800e306:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	f003 0301 	and.w	r3, r3, #1
 800e312:	2b01      	cmp	r3, #1
 800e314:	d11c      	bne.n	800e350 <HAL_SPI_TransmitReceive+0x1e6>
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d016      	beq.n	800e350 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	68da      	ldr	r2, [r3, #12]
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e32c:	b292      	uxth	r2, r2
 800e32e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e334:	1c9a      	adds	r2, r3, #2
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e340:	b29b      	uxth	r3, r3
 800e342:	3b01      	subs	r3, #1
 800e344:	b29a      	uxth	r2, r3
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e34c:	2301      	movs	r3, #1
 800e34e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e350:	f7f8 ff2c 	bl	80071ac <HAL_GetTick>
 800e354:	4602      	mov	r2, r0
 800e356:	6a3b      	ldr	r3, [r7, #32]
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d80d      	bhi.n	800e37c <HAL_SPI_TransmitReceive+0x212>
 800e360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e366:	d009      	beq.n	800e37c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2201      	movs	r2, #1
 800e36c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	2200      	movs	r2, #0
 800e374:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800e378:	2303      	movs	r3, #3
 800e37a:	e111      	b.n	800e5a0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e380:	b29b      	uxth	r3, r3
 800e382:	2b00      	cmp	r3, #0
 800e384:	d19d      	bne.n	800e2c2 <HAL_SPI_TransmitReceive+0x158>
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d197      	bne.n	800e2c2 <HAL_SPI_TransmitReceive+0x158>
 800e392:	e0e5      	b.n	800e560 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d003      	beq.n	800e3a4 <HAL_SPI_TransmitReceive+0x23a>
 800e39c:	8afb      	ldrh	r3, [r7, #22]
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	f040 80d1 	bne.w	800e546 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e3a8:	b29b      	uxth	r3, r3
 800e3aa:	2b01      	cmp	r3, #1
 800e3ac:	d912      	bls.n	800e3d4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3b2:	881a      	ldrh	r2, [r3, #0]
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3be:	1c9a      	adds	r2, r3, #2
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	3b02      	subs	r3, #2
 800e3cc:	b29a      	uxth	r2, r3
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e3d2:	e0b8      	b.n	800e546 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	330c      	adds	r3, #12
 800e3de:	7812      	ldrb	r2, [r2, #0]
 800e3e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3e6:	1c5a      	adds	r2, r3, #1
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	3b01      	subs	r3, #1
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e3fa:	e0a4      	b.n	800e546 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	689b      	ldr	r3, [r3, #8]
 800e402:	f003 0302 	and.w	r3, r3, #2
 800e406:	2b02      	cmp	r3, #2
 800e408:	d134      	bne.n	800e474 <HAL_SPI_TransmitReceive+0x30a>
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e40e:	b29b      	uxth	r3, r3
 800e410:	2b00      	cmp	r3, #0
 800e412:	d02f      	beq.n	800e474 <HAL_SPI_TransmitReceive+0x30a>
 800e414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e416:	2b01      	cmp	r3, #1
 800e418:	d12c      	bne.n	800e474 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e41e:	b29b      	uxth	r3, r3
 800e420:	2b01      	cmp	r3, #1
 800e422:	d912      	bls.n	800e44a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e428:	881a      	ldrh	r2, [r3, #0]
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e434:	1c9a      	adds	r2, r3, #2
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e43e:	b29b      	uxth	r3, r3
 800e440:	3b02      	subs	r3, #2
 800e442:	b29a      	uxth	r2, r3
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e448:	e012      	b.n	800e470 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	330c      	adds	r3, #12
 800e454:	7812      	ldrb	r2, [r2, #0]
 800e456:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e45c:	1c5a      	adds	r2, r3, #1
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e466:	b29b      	uxth	r3, r3
 800e468:	3b01      	subs	r3, #1
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e470:	2300      	movs	r3, #0
 800e472:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	689b      	ldr	r3, [r3, #8]
 800e47a:	f003 0301 	and.w	r3, r3, #1
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d148      	bne.n	800e514 <HAL_SPI_TransmitReceive+0x3aa>
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e488:	b29b      	uxth	r3, r3
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d042      	beq.n	800e514 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e494:	b29b      	uxth	r3, r3
 800e496:	2b01      	cmp	r3, #1
 800e498:	d923      	bls.n	800e4e2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	68da      	ldr	r2, [r3, #12]
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4a4:	b292      	uxth	r2, r2
 800e4a6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4ac:	1c9a      	adds	r2, r3, #2
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e4b8:	b29b      	uxth	r3, r3
 800e4ba:	3b02      	subs	r3, #2
 800e4bc:	b29a      	uxth	r2, r3
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e4ca:	b29b      	uxth	r3, r3
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d81f      	bhi.n	800e510 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	685a      	ldr	r2, [r3, #4]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e4de:	605a      	str	r2, [r3, #4]
 800e4e0:	e016      	b.n	800e510 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	f103 020c 	add.w	r2, r3, #12
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4ee:	7812      	ldrb	r2, [r2, #0]
 800e4f0:	b2d2      	uxtb	r2, r2
 800e4f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4f8:	1c5a      	adds	r2, r3, #1
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e504:	b29b      	uxth	r3, r3
 800e506:	3b01      	subs	r3, #1
 800e508:	b29a      	uxth	r2, r3
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e510:	2301      	movs	r3, #1
 800e512:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e514:	f7f8 fe4a 	bl	80071ac <HAL_GetTick>
 800e518:	4602      	mov	r2, r0
 800e51a:	6a3b      	ldr	r3, [r7, #32]
 800e51c:	1ad3      	subs	r3, r2, r3
 800e51e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e520:	429a      	cmp	r2, r3
 800e522:	d803      	bhi.n	800e52c <HAL_SPI_TransmitReceive+0x3c2>
 800e524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e52a:	d102      	bne.n	800e532 <HAL_SPI_TransmitReceive+0x3c8>
 800e52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d109      	bne.n	800e546 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2201      	movs	r2, #1
 800e536:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2200      	movs	r2, #0
 800e53e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800e542:	2303      	movs	r3, #3
 800e544:	e02c      	b.n	800e5a0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	f47f af55 	bne.w	800e3fc <HAL_SPI_TransmitReceive+0x292>
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e558:	b29b      	uxth	r3, r3
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	f47f af4e 	bne.w	800e3fc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e560:	6a3a      	ldr	r2, [r7, #32]
 800e562:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e564:	68f8      	ldr	r0, [r7, #12]
 800e566:	f000 faa9 	bl	800eabc <SPI_EndRxTxTransaction>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d008      	beq.n	800e582 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2220      	movs	r2, #32
 800e574:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2200      	movs	r2, #0
 800e57a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e57e:	2301      	movs	r3, #1
 800e580:	e00e      	b.n	800e5a0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2201      	movs	r2, #1
 800e586:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2200      	movs	r2, #0
 800e58e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e596:	2b00      	cmp	r3, #0
 800e598:	d001      	beq.n	800e59e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800e59a:	2301      	movs	r3, #1
 800e59c:	e000      	b.n	800e5a0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800e59e:	2300      	movs	r3, #0
  }
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3728      	adds	r7, #40	@ 0x28
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b088      	sub	sp, #32
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	685b      	ldr	r3, [r3, #4]
 800e5b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	689b      	ldr	r3, [r3, #8]
 800e5be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d10e      	bne.n	800e5e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d009      	beq.n	800e5e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d004      	beq.n	800e5e8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	4798      	blx	r3
    return;
 800e5e6:	e0ce      	b.n	800e786 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e5e8:	69bb      	ldr	r3, [r7, #24]
 800e5ea:	f003 0302 	and.w	r3, r3, #2
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d009      	beq.n	800e606 <HAL_SPI_IRQHandler+0x5e>
 800e5f2:	69fb      	ldr	r3, [r7, #28]
 800e5f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d004      	beq.n	800e606 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	4798      	blx	r3
    return;
 800e604:	e0bf      	b.n	800e786 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e606:	69bb      	ldr	r3, [r7, #24]
 800e608:	f003 0320 	and.w	r3, r3, #32
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d10a      	bne.n	800e626 <HAL_SPI_IRQHandler+0x7e>
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e616:	2b00      	cmp	r3, #0
 800e618:	d105      	bne.n	800e626 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e620:	2b00      	cmp	r3, #0
 800e622:	f000 80b0 	beq.w	800e786 <HAL_SPI_IRQHandler+0x1de>
 800e626:	69fb      	ldr	r3, [r7, #28]
 800e628:	f003 0320 	and.w	r3, r3, #32
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	f000 80aa 	beq.w	800e786 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d023      	beq.n	800e684 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e642:	b2db      	uxtb	r3, r3
 800e644:	2b03      	cmp	r3, #3
 800e646:	d011      	beq.n	800e66c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e64c:	f043 0204 	orr.w	r2, r3, #4
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e654:	2300      	movs	r3, #0
 800e656:	617b      	str	r3, [r7, #20]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	68db      	ldr	r3, [r3, #12]
 800e65e:	617b      	str	r3, [r7, #20]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	689b      	ldr	r3, [r3, #8]
 800e666:	617b      	str	r3, [r7, #20]
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	e00b      	b.n	800e684 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e66c:	2300      	movs	r3, #0
 800e66e:	613b      	str	r3, [r7, #16]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	68db      	ldr	r3, [r3, #12]
 800e676:	613b      	str	r3, [r7, #16]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	689b      	ldr	r3, [r3, #8]
 800e67e:	613b      	str	r3, [r7, #16]
 800e680:	693b      	ldr	r3, [r7, #16]
        return;
 800e682:	e080      	b.n	800e786 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e684:	69bb      	ldr	r3, [r7, #24]
 800e686:	f003 0320 	and.w	r3, r3, #32
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d014      	beq.n	800e6b8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e692:	f043 0201 	orr.w	r2, r3, #1
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e69a:	2300      	movs	r3, #0
 800e69c:	60fb      	str	r3, [r7, #12]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	689b      	ldr	r3, [r3, #8]
 800e6a4:	60fb      	str	r3, [r7, #12]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e6b4:	601a      	str	r2, [r3, #0]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d00c      	beq.n	800e6dc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e6c6:	f043 0208 	orr.w	r2, r3, #8
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	60bb      	str	r3, [r7, #8]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	60bb      	str	r3, [r7, #8]
 800e6da:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d04f      	beq.n	800e784 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	685a      	ldr	r2, [r3, #4]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e6f2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	f003 0302 	and.w	r3, r3, #2
 800e702:	2b00      	cmp	r3, #0
 800e704:	d104      	bne.n	800e710 <HAL_SPI_IRQHandler+0x168>
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	f003 0301 	and.w	r3, r3, #1
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d034      	beq.n	800e77a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	685a      	ldr	r2, [r3, #4]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f022 0203 	bic.w	r2, r2, #3
 800e71e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e724:	2b00      	cmp	r3, #0
 800e726:	d011      	beq.n	800e74c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e72c:	4a17      	ldr	r2, [pc, #92]	@ (800e78c <HAL_SPI_IRQHandler+0x1e4>)
 800e72e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e734:	4618      	mov	r0, r3
 800e736:	f7fa f98f 	bl	8008a58 <HAL_DMA_Abort_IT>
 800e73a:	4603      	mov	r3, r0
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d005      	beq.n	800e74c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e744:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e750:	2b00      	cmp	r3, #0
 800e752:	d016      	beq.n	800e782 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e758:	4a0c      	ldr	r2, [pc, #48]	@ (800e78c <HAL_SPI_IRQHandler+0x1e4>)
 800e75a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e760:	4618      	mov	r0, r3
 800e762:	f7fa f979 	bl	8008a58 <HAL_DMA_Abort_IT>
 800e766:	4603      	mov	r3, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d00a      	beq.n	800e782 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e770:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800e778:	e003      	b.n	800e782 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f000 f808 	bl	800e790 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e780:	e000      	b.n	800e784 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800e782:	bf00      	nop
    return;
 800e784:	bf00      	nop
  }
}
 800e786:	3720      	adds	r7, #32
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}
 800e78c:	0800e7a5 	.word	0x0800e7a5

0800e790 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e798:	bf00      	nop
 800e79a:	370c      	adds	r7, #12
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr

0800e7a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b084      	sub	sp, #16
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e7c0:	68f8      	ldr	r0, [r7, #12]
 800e7c2:	f7ff ffe5 	bl	800e790 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e7c6:	bf00      	nop
 800e7c8:	3710      	adds	r7, #16
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
	...

0800e7d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b088      	sub	sp, #32
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	603b      	str	r3, [r7, #0]
 800e7dc:	4613      	mov	r3, r2
 800e7de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e7e0:	f7f8 fce4 	bl	80071ac <HAL_GetTick>
 800e7e4:	4602      	mov	r2, r0
 800e7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7e8:	1a9b      	subs	r3, r3, r2
 800e7ea:	683a      	ldr	r2, [r7, #0]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e7f0:	f7f8 fcdc 	bl	80071ac <HAL_GetTick>
 800e7f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e7f6:	4b39      	ldr	r3, [pc, #228]	@ (800e8dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	015b      	lsls	r3, r3, #5
 800e7fc:	0d1b      	lsrs	r3, r3, #20
 800e7fe:	69fa      	ldr	r2, [r7, #28]
 800e800:	fb02 f303 	mul.w	r3, r2, r3
 800e804:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e806:	e054      	b.n	800e8b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e80e:	d050      	beq.n	800e8b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e810:	f7f8 fccc 	bl	80071ac <HAL_GetTick>
 800e814:	4602      	mov	r2, r0
 800e816:	69bb      	ldr	r3, [r7, #24]
 800e818:	1ad3      	subs	r3, r2, r3
 800e81a:	69fa      	ldr	r2, [r7, #28]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d902      	bls.n	800e826 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d13d      	bne.n	800e8a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	685a      	ldr	r2, [r3, #4]
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e834:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e83e:	d111      	bne.n	800e864 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	689b      	ldr	r3, [r3, #8]
 800e844:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e848:	d004      	beq.n	800e854 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	689b      	ldr	r3, [r3, #8]
 800e84e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e852:	d107      	bne.n	800e864 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e862:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e868:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e86c:	d10f      	bne.n	800e88e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	681a      	ldr	r2, [r3, #0]
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e87c:	601a      	str	r2, [r3, #0]
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	681a      	ldr	r2, [r3, #0]
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e88c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2201      	movs	r2, #1
 800e892:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2200      	movs	r2, #0
 800e89a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800e89e:	2303      	movs	r3, #3
 800e8a0:	e017      	b.n	800e8d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d101      	bne.n	800e8ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	3b01      	subs	r3, #1
 800e8b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	689a      	ldr	r2, [r3, #8]
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	4013      	ands	r3, r2
 800e8bc:	68ba      	ldr	r2, [r7, #8]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	bf0c      	ite	eq
 800e8c2:	2301      	moveq	r3, #1
 800e8c4:	2300      	movne	r3, #0
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	79fb      	ldrb	r3, [r7, #7]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d19b      	bne.n	800e808 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e8d0:	2300      	movs	r3, #0
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3720      	adds	r7, #32
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
 800e8da:	bf00      	nop
 800e8dc:	2000002c 	.word	0x2000002c

0800e8e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b08a      	sub	sp, #40	@ 0x28
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	607a      	str	r2, [r7, #4]
 800e8ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e8f2:	f7f8 fc5b 	bl	80071ac <HAL_GetTick>
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8fa:	1a9b      	subs	r3, r3, r2
 800e8fc:	683a      	ldr	r2, [r7, #0]
 800e8fe:	4413      	add	r3, r2
 800e900:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800e902:	f7f8 fc53 	bl	80071ac <HAL_GetTick>
 800e906:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	330c      	adds	r3, #12
 800e90e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e910:	4b3d      	ldr	r3, [pc, #244]	@ (800ea08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	4613      	mov	r3, r2
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	4413      	add	r3, r2
 800e91a:	00da      	lsls	r2, r3, #3
 800e91c:	1ad3      	subs	r3, r2, r3
 800e91e:	0d1b      	lsrs	r3, r3, #20
 800e920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e922:	fb02 f303 	mul.w	r3, r2, r3
 800e926:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e928:	e060      	b.n	800e9ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e930:	d107      	bne.n	800e942 <SPI_WaitFifoStateUntilTimeout+0x62>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d104      	bne.n	800e942 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e938:	69fb      	ldr	r3, [r7, #28]
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	b2db      	uxtb	r3, r3
 800e93e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e940:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e948:	d050      	beq.n	800e9ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e94a:	f7f8 fc2f 	bl	80071ac <HAL_GetTick>
 800e94e:	4602      	mov	r2, r0
 800e950:	6a3b      	ldr	r3, [r7, #32]
 800e952:	1ad3      	subs	r3, r2, r3
 800e954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e956:	429a      	cmp	r2, r3
 800e958:	d902      	bls.n	800e960 <SPI_WaitFifoStateUntilTimeout+0x80>
 800e95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d13d      	bne.n	800e9dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	685a      	ldr	r2, [r3, #4]
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e96e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	685b      	ldr	r3, [r3, #4]
 800e974:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e978:	d111      	bne.n	800e99e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e982:	d004      	beq.n	800e98e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	689b      	ldr	r3, [r3, #8]
 800e988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e98c:	d107      	bne.n	800e99e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e99c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e9a6:	d10f      	bne.n	800e9c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e9b6:	601a      	str	r2, [r3, #0]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	681a      	ldr	r2, [r3, #0]
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e9c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800e9d8:	2303      	movs	r3, #3
 800e9da:	e010      	b.n	800e9fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e9dc:	69bb      	ldr	r3, [r7, #24]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d101      	bne.n	800e9e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800e9e6:	69bb      	ldr	r3, [r7, #24]
 800e9e8:	3b01      	subs	r3, #1
 800e9ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	689a      	ldr	r2, [r3, #8]
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	4013      	ands	r3, r2
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d196      	bne.n	800e92a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800e9fc:	2300      	movs	r3, #0
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3728      	adds	r7, #40	@ 0x28
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	2000002c 	.word	0x2000002c

0800ea0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b086      	sub	sp, #24
 800ea10:	af02      	add	r7, sp, #8
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ea20:	d111      	bne.n	800ea46 <SPI_EndRxTransaction+0x3a>
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	689b      	ldr	r3, [r3, #8]
 800ea26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ea2a:	d004      	beq.n	800ea36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	689b      	ldr	r3, [r3, #8]
 800ea30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ea34:	d107      	bne.n	800ea46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ea44:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	9300      	str	r3, [sp, #0]
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	2180      	movs	r1, #128	@ 0x80
 800ea50:	68f8      	ldr	r0, [r7, #12]
 800ea52:	f7ff febd 	bl	800e7d0 <SPI_WaitFlagStateUntilTimeout>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d007      	beq.n	800ea6c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea60:	f043 0220 	orr.w	r2, r3, #32
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ea68:	2303      	movs	r3, #3
 800ea6a:	e023      	b.n	800eab4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ea74:	d11d      	bne.n	800eab2 <SPI_EndRxTransaction+0xa6>
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ea7e:	d004      	beq.n	800ea8a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	689b      	ldr	r3, [r3, #8]
 800ea84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ea88:	d113      	bne.n	800eab2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	9300      	str	r3, [sp, #0]
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	2200      	movs	r2, #0
 800ea92:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ea96:	68f8      	ldr	r0, [r7, #12]
 800ea98:	f7ff ff22 	bl	800e8e0 <SPI_WaitFifoStateUntilTimeout>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d007      	beq.n	800eab2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eaa6:	f043 0220 	orr.w	r2, r3, #32
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800eaae:	2303      	movs	r3, #3
 800eab0:	e000      	b.n	800eab4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800eab2:	2300      	movs	r3, #0
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3710      	adds	r7, #16
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b086      	sub	sp, #24
 800eac0:	af02      	add	r7, sp, #8
 800eac2:	60f8      	str	r0, [r7, #12]
 800eac4:	60b9      	str	r1, [r7, #8]
 800eac6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	2200      	movs	r2, #0
 800ead0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800ead4:	68f8      	ldr	r0, [r7, #12]
 800ead6:	f7ff ff03 	bl	800e8e0 <SPI_WaitFifoStateUntilTimeout>
 800eada:	4603      	mov	r3, r0
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d007      	beq.n	800eaf0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eae4:	f043 0220 	orr.w	r2, r3, #32
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800eaec:	2303      	movs	r3, #3
 800eaee:	e027      	b.n	800eb40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	9300      	str	r3, [sp, #0]
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	2180      	movs	r1, #128	@ 0x80
 800eafa:	68f8      	ldr	r0, [r7, #12]
 800eafc:	f7ff fe68 	bl	800e7d0 <SPI_WaitFlagStateUntilTimeout>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d007      	beq.n	800eb16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eb0a:	f043 0220 	orr.w	r2, r3, #32
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800eb12:	2303      	movs	r3, #3
 800eb14:	e014      	b.n	800eb40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	9300      	str	r3, [sp, #0]
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800eb22:	68f8      	ldr	r0, [r7, #12]
 800eb24:	f7ff fedc 	bl	800e8e0 <SPI_WaitFifoStateUntilTimeout>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d007      	beq.n	800eb3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eb32:	f043 0220 	orr.w	r2, r3, #32
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800eb3a:	2303      	movs	r3, #3
 800eb3c:	e000      	b.n	800eb40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800eb3e:	2300      	movs	r3, #0
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3710      	adds	r7, #16
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d101      	bne.n	800eb5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eb56:	2301      	movs	r3, #1
 800eb58:	e049      	b.n	800ebee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d106      	bne.n	800eb74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f7f7 fe46 	bl	8006800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2202      	movs	r2, #2
 800eb78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	3304      	adds	r3, #4
 800eb84:	4619      	mov	r1, r3
 800eb86:	4610      	mov	r0, r2
 800eb88:	f000 fafc 	bl	800f184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2201      	movs	r2, #1
 800eb90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2201      	movs	r2, #1
 800eb98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2201      	movs	r2, #1
 800eba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2201      	movs	r2, #1
 800eba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2201      	movs	r2, #1
 800ebd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ebec:	2300      	movs	r3, #0
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
	...

0800ebf8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b085      	sub	sp, #20
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ec06:	b2db      	uxtb	r3, r3
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d001      	beq.n	800ec10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	e02e      	b.n	800ec6e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2202      	movs	r2, #2
 800ec14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4a17      	ldr	r2, [pc, #92]	@ (800ec7c <HAL_TIM_Base_Start+0x84>)
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	d004      	beq.n	800ec2c <HAL_TIM_Base_Start+0x34>
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec2a:	d115      	bne.n	800ec58 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	689a      	ldr	r2, [r3, #8]
 800ec32:	4b13      	ldr	r3, [pc, #76]	@ (800ec80 <HAL_TIM_Base_Start+0x88>)
 800ec34:	4013      	ands	r3, r2
 800ec36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2b06      	cmp	r3, #6
 800ec3c:	d015      	beq.n	800ec6a <HAL_TIM_Base_Start+0x72>
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ec44:	d011      	beq.n	800ec6a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f042 0201 	orr.w	r2, r2, #1
 800ec54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec56:	e008      	b.n	800ec6a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f042 0201 	orr.w	r2, r2, #1
 800ec66:	601a      	str	r2, [r3, #0]
 800ec68:	e000      	b.n	800ec6c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ec6c:	2300      	movs	r3, #0
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3714      	adds	r7, #20
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr
 800ec7a:	bf00      	nop
 800ec7c:	40012c00 	.word	0x40012c00
 800ec80:	00010007 	.word	0x00010007

0800ec84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b085      	sub	sp, #20
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d001      	beq.n	800ec9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ec98:	2301      	movs	r3, #1
 800ec9a:	e036      	b.n	800ed0a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2202      	movs	r2, #2
 800eca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	68da      	ldr	r2, [r3, #12]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f042 0201 	orr.w	r2, r2, #1
 800ecb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4a17      	ldr	r2, [pc, #92]	@ (800ed18 <HAL_TIM_Base_Start_IT+0x94>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d004      	beq.n	800ecc8 <HAL_TIM_Base_Start_IT+0x44>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ecc6:	d115      	bne.n	800ecf4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	689a      	ldr	r2, [r3, #8]
 800ecce:	4b13      	ldr	r3, [pc, #76]	@ (800ed1c <HAL_TIM_Base_Start_IT+0x98>)
 800ecd0:	4013      	ands	r3, r2
 800ecd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2b06      	cmp	r3, #6
 800ecd8:	d015      	beq.n	800ed06 <HAL_TIM_Base_Start_IT+0x82>
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ece0:	d011      	beq.n	800ed06 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f042 0201 	orr.w	r2, r2, #1
 800ecf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecf2:	e008      	b.n	800ed06 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f042 0201 	orr.w	r2, r2, #1
 800ed02:	601a      	str	r2, [r3, #0]
 800ed04:	e000      	b.n	800ed08 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ed08:	2300      	movs	r3, #0
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3714      	adds	r7, #20
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed14:	4770      	bx	lr
 800ed16:	bf00      	nop
 800ed18:	40012c00 	.word	0x40012c00
 800ed1c:	00010007 	.word	0x00010007

0800ed20 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b083      	sub	sp, #12
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	68da      	ldr	r2, [r3, #12]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	f022 0201 	bic.w	r2, r2, #1
 800ed36:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	6a1a      	ldr	r2, [r3, #32]
 800ed3e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ed42:	4013      	ands	r3, r2
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d10f      	bne.n	800ed68 <HAL_TIM_Base_Stop_IT+0x48>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	6a1a      	ldr	r2, [r3, #32]
 800ed4e:	f240 4344 	movw	r3, #1092	@ 0x444
 800ed52:	4013      	ands	r3, r2
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d107      	bne.n	800ed68 <HAL_TIM_Base_Stop_IT+0x48>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f022 0201 	bic.w	r2, r2, #1
 800ed66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800ed70:	2300      	movs	r3, #0
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	370c      	adds	r7, #12
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr

0800ed7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ed7e:	b580      	push	{r7, lr}
 800ed80:	b084      	sub	sp, #16
 800ed82:	af00      	add	r7, sp, #0
 800ed84:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	68db      	ldr	r3, [r3, #12]
 800ed8c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	691b      	ldr	r3, [r3, #16]
 800ed94:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	f003 0302 	and.w	r3, r3, #2
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d020      	beq.n	800ede2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f003 0302 	and.w	r3, r3, #2
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d01b      	beq.n	800ede2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	f06f 0202 	mvn.w	r2, #2
 800edb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2201      	movs	r2, #1
 800edb8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	699b      	ldr	r3, [r3, #24]
 800edc0:	f003 0303 	and.w	r3, r3, #3
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d003      	beq.n	800edd0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f000 f9bc 	bl	800f146 <HAL_TIM_IC_CaptureCallback>
 800edce:	e005      	b.n	800eddc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f000 f9ae 	bl	800f132 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 f9bf 	bl	800f15a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2200      	movs	r2, #0
 800ede0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	f003 0304 	and.w	r3, r3, #4
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d020      	beq.n	800ee2e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	f003 0304 	and.w	r3, r3, #4
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d01b      	beq.n	800ee2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f06f 0204 	mvn.w	r2, #4
 800edfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2202      	movs	r2, #2
 800ee04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	699b      	ldr	r3, [r3, #24]
 800ee0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d003      	beq.n	800ee1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 f996 	bl	800f146 <HAL_TIM_IC_CaptureCallback>
 800ee1a:	e005      	b.n	800ee28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f000 f988 	bl	800f132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f000 f999 	bl	800f15a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	f003 0308 	and.w	r3, r3, #8
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d020      	beq.n	800ee7a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f003 0308 	and.w	r3, r3, #8
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d01b      	beq.n	800ee7a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	f06f 0208 	mvn.w	r2, #8
 800ee4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2204      	movs	r2, #4
 800ee50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	69db      	ldr	r3, [r3, #28]
 800ee58:	f003 0303 	and.w	r3, r3, #3
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d003      	beq.n	800ee68 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f000 f970 	bl	800f146 <HAL_TIM_IC_CaptureCallback>
 800ee66:	e005      	b.n	800ee74 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f000 f962 	bl	800f132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f000 f973 	bl	800f15a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2200      	movs	r2, #0
 800ee78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	f003 0310 	and.w	r3, r3, #16
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d020      	beq.n	800eec6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f003 0310 	and.w	r3, r3, #16
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d01b      	beq.n	800eec6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f06f 0210 	mvn.w	r2, #16
 800ee96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2208      	movs	r2, #8
 800ee9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	69db      	ldr	r3, [r3, #28]
 800eea4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d003      	beq.n	800eeb4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f000 f94a 	bl	800f146 <HAL_TIM_IC_CaptureCallback>
 800eeb2:	e005      	b.n	800eec0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f000 f93c 	bl	800f132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f000 f94d 	bl	800f15a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2200      	movs	r2, #0
 800eec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	f003 0301 	and.w	r3, r3, #1
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d00c      	beq.n	800eeea <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f003 0301 	and.w	r3, r3, #1
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d007      	beq.n	800eeea <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f06f 0201 	mvn.w	r2, #1
 800eee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f000 f91a 	bl	800f11e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d104      	bne.n	800eefe <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d00c      	beq.n	800ef18 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d007      	beq.n	800ef18 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ef10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f000 faac 	bl	800f470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d00c      	beq.n	800ef3c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d007      	beq.n	800ef3c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ef34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f000 faa4 	bl	800f484 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d00c      	beq.n	800ef60 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d007      	beq.n	800ef60 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ef58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 f907 	bl	800f16e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	f003 0320 	and.w	r3, r3, #32
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d00c      	beq.n	800ef84 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f003 0320 	and.w	r3, r3, #32
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d007      	beq.n	800ef84 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f06f 0220 	mvn.w	r2, #32
 800ef7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f000 fa6c 	bl	800f45c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ef84:	bf00      	nop
 800ef86:	3710      	adds	r7, #16
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b084      	sub	sp, #16
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ef96:	2300      	movs	r3, #0
 800ef98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	d101      	bne.n	800efa8 <HAL_TIM_ConfigClockSource+0x1c>
 800efa4:	2302      	movs	r3, #2
 800efa6:	e0b6      	b.n	800f116 <HAL_TIM_ConfigClockSource+0x18a>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2201      	movs	r2, #1
 800efac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2202      	movs	r2, #2
 800efb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	689b      	ldr	r3, [r3, #8]
 800efbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800efc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800efca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800efd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	68ba      	ldr	r2, [r7, #8]
 800efda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800efe4:	d03e      	beq.n	800f064 <HAL_TIM_ConfigClockSource+0xd8>
 800efe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800efea:	f200 8087 	bhi.w	800f0fc <HAL_TIM_ConfigClockSource+0x170>
 800efee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eff2:	f000 8086 	beq.w	800f102 <HAL_TIM_ConfigClockSource+0x176>
 800eff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800effa:	d87f      	bhi.n	800f0fc <HAL_TIM_ConfigClockSource+0x170>
 800effc:	2b70      	cmp	r3, #112	@ 0x70
 800effe:	d01a      	beq.n	800f036 <HAL_TIM_ConfigClockSource+0xaa>
 800f000:	2b70      	cmp	r3, #112	@ 0x70
 800f002:	d87b      	bhi.n	800f0fc <HAL_TIM_ConfigClockSource+0x170>
 800f004:	2b60      	cmp	r3, #96	@ 0x60
 800f006:	d050      	beq.n	800f0aa <HAL_TIM_ConfigClockSource+0x11e>
 800f008:	2b60      	cmp	r3, #96	@ 0x60
 800f00a:	d877      	bhi.n	800f0fc <HAL_TIM_ConfigClockSource+0x170>
 800f00c:	2b50      	cmp	r3, #80	@ 0x50
 800f00e:	d03c      	beq.n	800f08a <HAL_TIM_ConfigClockSource+0xfe>
 800f010:	2b50      	cmp	r3, #80	@ 0x50
 800f012:	d873      	bhi.n	800f0fc <HAL_TIM_ConfigClockSource+0x170>
 800f014:	2b40      	cmp	r3, #64	@ 0x40
 800f016:	d058      	beq.n	800f0ca <HAL_TIM_ConfigClockSource+0x13e>
 800f018:	2b40      	cmp	r3, #64	@ 0x40
 800f01a:	d86f      	bhi.n	800f0fc <HAL_TIM_ConfigClockSource+0x170>
 800f01c:	2b30      	cmp	r3, #48	@ 0x30
 800f01e:	d064      	beq.n	800f0ea <HAL_TIM_ConfigClockSource+0x15e>
 800f020:	2b30      	cmp	r3, #48	@ 0x30
 800f022:	d86b      	bhi.n	800f0fc <HAL_TIM_ConfigClockSource+0x170>
 800f024:	2b20      	cmp	r3, #32
 800f026:	d060      	beq.n	800f0ea <HAL_TIM_ConfigClockSource+0x15e>
 800f028:	2b20      	cmp	r3, #32
 800f02a:	d867      	bhi.n	800f0fc <HAL_TIM_ConfigClockSource+0x170>
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d05c      	beq.n	800f0ea <HAL_TIM_ConfigClockSource+0x15e>
 800f030:	2b10      	cmp	r3, #16
 800f032:	d05a      	beq.n	800f0ea <HAL_TIM_ConfigClockSource+0x15e>
 800f034:	e062      	b.n	800f0fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f046:	f000 f989 	bl	800f35c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	689b      	ldr	r3, [r3, #8]
 800f050:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f058:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	68ba      	ldr	r2, [r7, #8]
 800f060:	609a      	str	r2, [r3, #8]
      break;
 800f062:	e04f      	b.n	800f104 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f074:	f000 f972 	bl	800f35c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	689a      	ldr	r2, [r3, #8]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f086:	609a      	str	r2, [r3, #8]
      break;
 800f088:	e03c      	b.n	800f104 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f096:	461a      	mov	r2, r3
 800f098:	f000 f8e4 	bl	800f264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	2150      	movs	r1, #80	@ 0x50
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f000 f93d 	bl	800f322 <TIM_ITRx_SetConfig>
      break;
 800f0a8:	e02c      	b.n	800f104 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	f000 f903 	bl	800f2c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	2160      	movs	r1, #96	@ 0x60
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f000 f92d 	bl	800f322 <TIM_ITRx_SetConfig>
      break;
 800f0c8:	e01c      	b.n	800f104 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	f000 f8c4 	bl	800f264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	2140      	movs	r1, #64	@ 0x40
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f000 f91d 	bl	800f322 <TIM_ITRx_SetConfig>
      break;
 800f0e8:	e00c      	b.n	800f104 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681a      	ldr	r2, [r3, #0]
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	4610      	mov	r0, r2
 800f0f6:	f000 f914 	bl	800f322 <TIM_ITRx_SetConfig>
      break;
 800f0fa:	e003      	b.n	800f104 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	73fb      	strb	r3, [r7, #15]
      break;
 800f100:	e000      	b.n	800f104 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800f102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2201      	movs	r2, #1
 800f108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f114:	7bfb      	ldrb	r3, [r7, #15]
}
 800f116:	4618      	mov	r0, r3
 800f118:	3710      	adds	r7, #16
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}

0800f11e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f11e:	b480      	push	{r7}
 800f120:	b083      	sub	sp, #12
 800f122:	af00      	add	r7, sp, #0
 800f124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f126:	bf00      	nop
 800f128:	370c      	adds	r7, #12
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr

0800f132 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f132:	b480      	push	{r7}
 800f134:	b083      	sub	sp, #12
 800f136:	af00      	add	r7, sp, #0
 800f138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f13a:	bf00      	nop
 800f13c:	370c      	adds	r7, #12
 800f13e:	46bd      	mov	sp, r7
 800f140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f144:	4770      	bx	lr

0800f146 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f146:	b480      	push	{r7}
 800f148:	b083      	sub	sp, #12
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f14e:	bf00      	nop
 800f150:	370c      	adds	r7, #12
 800f152:	46bd      	mov	sp, r7
 800f154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f158:	4770      	bx	lr

0800f15a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f15a:	b480      	push	{r7}
 800f15c:	b083      	sub	sp, #12
 800f15e:	af00      	add	r7, sp, #0
 800f160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f162:	bf00      	nop
 800f164:	370c      	adds	r7, #12
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr

0800f16e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f16e:	b480      	push	{r7}
 800f170:	b083      	sub	sp, #12
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f176:	bf00      	nop
 800f178:	370c      	adds	r7, #12
 800f17a:	46bd      	mov	sp, r7
 800f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f180:	4770      	bx	lr
	...

0800f184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f184:	b480      	push	{r7}
 800f186:	b085      	sub	sp, #20
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	4a30      	ldr	r2, [pc, #192]	@ (800f258 <TIM_Base_SetConfig+0xd4>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d003      	beq.n	800f1a4 <TIM_Base_SetConfig+0x20>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f1a2:	d108      	bne.n	800f1b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f1aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	68fa      	ldr	r2, [r7, #12]
 800f1b2:	4313      	orrs	r3, r2
 800f1b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4a27      	ldr	r2, [pc, #156]	@ (800f258 <TIM_Base_SetConfig+0xd4>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d00b      	beq.n	800f1d6 <TIM_Base_SetConfig+0x52>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f1c4:	d007      	beq.n	800f1d6 <TIM_Base_SetConfig+0x52>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4a24      	ldr	r2, [pc, #144]	@ (800f25c <TIM_Base_SetConfig+0xd8>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d003      	beq.n	800f1d6 <TIM_Base_SetConfig+0x52>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	4a23      	ldr	r2, [pc, #140]	@ (800f260 <TIM_Base_SetConfig+0xdc>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d108      	bne.n	800f1e8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f1dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	68db      	ldr	r3, [r3, #12]
 800f1e2:	68fa      	ldr	r2, [r7, #12]
 800f1e4:	4313      	orrs	r3, r2
 800f1e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	695b      	ldr	r3, [r3, #20]
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	68fa      	ldr	r2, [r7, #12]
 800f1fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	689a      	ldr	r2, [r3, #8]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	681a      	ldr	r2, [r3, #0]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	4a12      	ldr	r2, [pc, #72]	@ (800f258 <TIM_Base_SetConfig+0xd4>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d007      	beq.n	800f224 <TIM_Base_SetConfig+0xa0>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	4a11      	ldr	r2, [pc, #68]	@ (800f25c <TIM_Base_SetConfig+0xd8>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d003      	beq.n	800f224 <TIM_Base_SetConfig+0xa0>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	4a10      	ldr	r2, [pc, #64]	@ (800f260 <TIM_Base_SetConfig+0xdc>)
 800f220:	4293      	cmp	r3, r2
 800f222:	d103      	bne.n	800f22c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	691a      	ldr	r2, [r3, #16]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2201      	movs	r2, #1
 800f230:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	691b      	ldr	r3, [r3, #16]
 800f236:	f003 0301 	and.w	r3, r3, #1
 800f23a:	2b01      	cmp	r3, #1
 800f23c:	d105      	bne.n	800f24a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	691b      	ldr	r3, [r3, #16]
 800f242:	f023 0201 	bic.w	r2, r3, #1
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	611a      	str	r2, [r3, #16]
  }
}
 800f24a:	bf00      	nop
 800f24c:	3714      	adds	r7, #20
 800f24e:	46bd      	mov	sp, r7
 800f250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f254:	4770      	bx	lr
 800f256:	bf00      	nop
 800f258:	40012c00 	.word	0x40012c00
 800f25c:	40014400 	.word	0x40014400
 800f260:	40014800 	.word	0x40014800

0800f264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f264:	b480      	push	{r7}
 800f266:	b087      	sub	sp, #28
 800f268:	af00      	add	r7, sp, #0
 800f26a:	60f8      	str	r0, [r7, #12]
 800f26c:	60b9      	str	r1, [r7, #8]
 800f26e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	6a1b      	ldr	r3, [r3, #32]
 800f274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	6a1b      	ldr	r3, [r3, #32]
 800f27a:	f023 0201 	bic.w	r2, r3, #1
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	699b      	ldr	r3, [r3, #24]
 800f286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f28e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	011b      	lsls	r3, r3, #4
 800f294:	693a      	ldr	r2, [r7, #16]
 800f296:	4313      	orrs	r3, r2
 800f298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	f023 030a 	bic.w	r3, r3, #10
 800f2a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f2a2:	697a      	ldr	r2, [r7, #20]
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	4313      	orrs	r3, r2
 800f2a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	693a      	ldr	r2, [r7, #16]
 800f2ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	697a      	ldr	r2, [r7, #20]
 800f2b4:	621a      	str	r2, [r3, #32]
}
 800f2b6:	bf00      	nop
 800f2b8:	371c      	adds	r7, #28
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr

0800f2c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f2c2:	b480      	push	{r7}
 800f2c4:	b087      	sub	sp, #28
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	60f8      	str	r0, [r7, #12]
 800f2ca:	60b9      	str	r1, [r7, #8]
 800f2cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	6a1b      	ldr	r3, [r3, #32]
 800f2d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	6a1b      	ldr	r3, [r3, #32]
 800f2d8:	f023 0210 	bic.w	r2, r3, #16
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	699b      	ldr	r3, [r3, #24]
 800f2e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f2e6:	693b      	ldr	r3, [r7, #16]
 800f2e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f2ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	031b      	lsls	r3, r3, #12
 800f2f2:	693a      	ldr	r2, [r7, #16]
 800f2f4:	4313      	orrs	r3, r2
 800f2f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f2fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	011b      	lsls	r3, r3, #4
 800f304:	697a      	ldr	r2, [r7, #20]
 800f306:	4313      	orrs	r3, r2
 800f308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	693a      	ldr	r2, [r7, #16]
 800f30e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	697a      	ldr	r2, [r7, #20]
 800f314:	621a      	str	r2, [r3, #32]
}
 800f316:	bf00      	nop
 800f318:	371c      	adds	r7, #28
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr

0800f322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f322:	b480      	push	{r7}
 800f324:	b085      	sub	sp, #20
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
 800f32a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	689b      	ldr	r3, [r3, #8]
 800f330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f338:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f33c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f33e:	683a      	ldr	r2, [r7, #0]
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	4313      	orrs	r3, r2
 800f344:	f043 0307 	orr.w	r3, r3, #7
 800f348:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	68fa      	ldr	r2, [r7, #12]
 800f34e:	609a      	str	r2, [r3, #8]
}
 800f350:	bf00      	nop
 800f352:	3714      	adds	r7, #20
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr

0800f35c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f35c:	b480      	push	{r7}
 800f35e:	b087      	sub	sp, #28
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	60b9      	str	r1, [r7, #8]
 800f366:	607a      	str	r2, [r7, #4]
 800f368:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	689b      	ldr	r3, [r3, #8]
 800f36e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f376:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	021a      	lsls	r2, r3, #8
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	431a      	orrs	r2, r3
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	4313      	orrs	r3, r2
 800f384:	697a      	ldr	r2, [r7, #20]
 800f386:	4313      	orrs	r3, r2
 800f388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	697a      	ldr	r2, [r7, #20]
 800f38e:	609a      	str	r2, [r3, #8]
}
 800f390:	bf00      	nop
 800f392:	371c      	adds	r7, #28
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr

0800f39c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f39c:	b480      	push	{r7}
 800f39e:	b085      	sub	sp, #20
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f3ac:	2b01      	cmp	r3, #1
 800f3ae:	d101      	bne.n	800f3b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f3b0:	2302      	movs	r3, #2
 800f3b2:	e04a      	b.n	800f44a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2202      	movs	r2, #2
 800f3c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	685b      	ldr	r3, [r3, #4]
 800f3ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	689b      	ldr	r3, [r3, #8]
 800f3d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	4a1f      	ldr	r2, [pc, #124]	@ (800f458 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d108      	bne.n	800f3f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f3e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	68fa      	ldr	r2, [r7, #12]
 800f3ec:	4313      	orrs	r3, r2
 800f3ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f3f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	4313      	orrs	r3, r2
 800f400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	68fa      	ldr	r2, [r7, #12]
 800f408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	4a12      	ldr	r2, [pc, #72]	@ (800f458 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f410:	4293      	cmp	r3, r2
 800f412:	d004      	beq.n	800f41e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f41c:	d10c      	bne.n	800f438 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f424:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	689b      	ldr	r3, [r3, #8]
 800f42a:	68ba      	ldr	r2, [r7, #8]
 800f42c:	4313      	orrs	r3, r2
 800f42e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	68ba      	ldr	r2, [r7, #8]
 800f436:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2201      	movs	r2, #1
 800f43c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2200      	movs	r2, #0
 800f444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f448:	2300      	movs	r3, #0
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	3714      	adds	r7, #20
 800f44e:	46bd      	mov	sp, r7
 800f450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f454:	4770      	bx	lr
 800f456:	bf00      	nop
 800f458:	40012c00 	.word	0x40012c00

0800f45c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b083      	sub	sp, #12
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f464:	bf00      	nop
 800f466:	370c      	adds	r7, #12
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f470:	b480      	push	{r7}
 800f472:	b083      	sub	sp, #12
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f478:	bf00      	nop
 800f47a:	370c      	adds	r7, #12
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr

0800f484 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f484:	b480      	push	{r7}
 800f486:	b083      	sub	sp, #12
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f48c:	bf00      	nop
 800f48e:	370c      	adds	r7, #12
 800f490:	46bd      	mov	sp, r7
 800f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f496:	4770      	bx	lr

0800f498 <LL_RCC_GetUSARTClockSource>:
{
 800f498:	b480      	push	{r7}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800f4a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f4a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	4013      	ands	r3, r2
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	370c      	adds	r7, #12
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr

0800f4b8 <LL_RCC_GetLPUARTClockSource>:
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b083      	sub	sp, #12
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800f4c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f4c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	4013      	ands	r3, r2
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	370c      	adds	r7, #12
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d6:	4770      	bx	lr

0800f4d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d101      	bne.n	800f4ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	e042      	b.n	800f570 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d106      	bne.n	800f502 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f7f7 fc49 	bl	8006d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	2224      	movs	r2, #36	@ 0x24
 800f506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	681a      	ldr	r2, [r3, #0]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	f022 0201 	bic.w	r2, r2, #1
 800f518:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d002      	beq.n	800f528 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f000 ff56 	bl	80103d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f000 fd2b 	bl	800ff84 <UART_SetConfig>
 800f52e:	4603      	mov	r3, r0
 800f530:	2b01      	cmp	r3, #1
 800f532:	d101      	bne.n	800f538 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f534:	2301      	movs	r3, #1
 800f536:	e01b      	b.n	800f570 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	685a      	ldr	r2, [r3, #4]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	689a      	ldr	r2, [r3, #8]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f556:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	681a      	ldr	r2, [r3, #0]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f042 0201 	orr.w	r2, r2, #1
 800f566:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f000 ffd5 	bl	8010518 <UART_CheckIdleState>
 800f56e:	4603      	mov	r3, r0
}
 800f570:	4618      	mov	r0, r3
 800f572:	3708      	adds	r7, #8
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}

0800f578 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d101      	bne.n	800f58a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800f586:	2301      	movs	r3, #1
 800f588:	e031      	b.n	800f5ee <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	2224      	movs	r2, #36	@ 0x24
 800f58e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	681a      	ldr	r2, [r3, #0]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	f022 0201 	bic.w	r2, r2, #1
 800f5a0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f7f7 fc94 	bl	8006ee8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f5ec:	2300      	movs	r3, #0
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
	...

0800f5f8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b08a      	sub	sp, #40	@ 0x28
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	4613      	mov	r3, r2
 800f604:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f60c:	2b20      	cmp	r3, #32
 800f60e:	d137      	bne.n	800f680 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d002      	beq.n	800f61c <HAL_UART_Receive_DMA+0x24>
 800f616:	88fb      	ldrh	r3, [r7, #6]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d101      	bne.n	800f620 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f61c:	2301      	movs	r3, #1
 800f61e:	e030      	b.n	800f682 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	2200      	movs	r2, #0
 800f624:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	4a18      	ldr	r2, [pc, #96]	@ (800f68c <HAL_UART_Receive_DMA+0x94>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d01f      	beq.n	800f670 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	685b      	ldr	r3, [r3, #4]
 800f636:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d018      	beq.n	800f670 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	e853 3f00 	ldrex	r3, [r3]
 800f64a:	613b      	str	r3, [r7, #16]
   return(result);
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f652:	627b      	str	r3, [r7, #36]	@ 0x24
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	461a      	mov	r2, r3
 800f65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f65c:	623b      	str	r3, [r7, #32]
 800f65e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f660:	69f9      	ldr	r1, [r7, #28]
 800f662:	6a3a      	ldr	r2, [r7, #32]
 800f664:	e841 2300 	strex	r3, r2, [r1]
 800f668:	61bb      	str	r3, [r7, #24]
   return(result);
 800f66a:	69bb      	ldr	r3, [r7, #24]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d1e6      	bne.n	800f63e <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f670:	88fb      	ldrh	r3, [r7, #6]
 800f672:	461a      	mov	r2, r3
 800f674:	68b9      	ldr	r1, [r7, #8]
 800f676:	68f8      	ldr	r0, [r7, #12]
 800f678:	f001 f866 	bl	8010748 <UART_Start_Receive_DMA>
 800f67c:	4603      	mov	r3, r0
 800f67e:	e000      	b.n	800f682 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f680:	2302      	movs	r3, #2
  }
}
 800f682:	4618      	mov	r0, r3
 800f684:	3728      	adds	r7, #40	@ 0x28
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	40008000 	.word	0x40008000

0800f690 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b0a0      	sub	sp, #128	@ 0x80
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f69e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f6a0:	e853 3f00 	ldrex	r3, [r3]
 800f6a4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f6a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f6a8:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800f6ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f6b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f6b8:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ba:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f6bc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f6be:	e841 2300 	strex	r3, r2, [r1]
 800f6c2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f6c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d1e6      	bne.n	800f698 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	3308      	adds	r3, #8
 800f6d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f6d4:	e853 3f00 	ldrex	r3, [r3]
 800f6d8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f6da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f6dc:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800f6e0:	f023 0301 	bic.w	r3, r3, #1
 800f6e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	3308      	adds	r3, #8
 800f6ec:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f6ee:	657a      	str	r2, [r7, #84]	@ 0x54
 800f6f0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f6f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f6f6:	e841 2300 	strex	r3, r2, [r1]
 800f6fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f6fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d1e3      	bne.n	800f6ca <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f706:	2b01      	cmp	r3, #1
 800f708:	d118      	bne.n	800f73c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f712:	e853 3f00 	ldrex	r3, [r3]
 800f716:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f71a:	f023 0310 	bic.w	r3, r3, #16
 800f71e:	677b      	str	r3, [r7, #116]	@ 0x74
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	461a      	mov	r2, r3
 800f726:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f728:	643b      	str	r3, [r7, #64]	@ 0x40
 800f72a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f72c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f72e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f730:	e841 2300 	strex	r3, r2, [r1]
 800f734:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d1e6      	bne.n	800f70a <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	689b      	ldr	r3, [r3, #8]
 800f742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f746:	2b80      	cmp	r3, #128	@ 0x80
 800f748:	d137      	bne.n	800f7ba <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	3308      	adds	r3, #8
 800f750:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f752:	6a3b      	ldr	r3, [r7, #32]
 800f754:	e853 3f00 	ldrex	r3, [r3]
 800f758:	61fb      	str	r3, [r7, #28]
   return(result);
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f760:	673b      	str	r3, [r7, #112]	@ 0x70
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	3308      	adds	r3, #8
 800f768:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f76a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f76c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f76e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f770:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f772:	e841 2300 	strex	r3, r2, [r1]
 800f776:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d1e5      	bne.n	800f74a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f782:	2b00      	cmp	r3, #0
 800f784:	d019      	beq.n	800f7ba <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f78a:	2200      	movs	r2, #0
 800f78c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f792:	4618      	mov	r0, r3
 800f794:	f7f9 f901 	bl	800899a <HAL_DMA_Abort>
 800f798:	4603      	mov	r3, r0
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d00d      	beq.n	800f7ba <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7f9 fa66 	bl	8008c74 <HAL_DMA_GetError>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	2b20      	cmp	r3, #32
 800f7ac:	d105      	bne.n	800f7ba <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2210      	movs	r2, #16
 800f7b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800f7b6:	2303      	movs	r3, #3
 800f7b8:	e073      	b.n	800f8a2 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	689b      	ldr	r3, [r3, #8]
 800f7c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7c4:	2b40      	cmp	r3, #64	@ 0x40
 800f7c6:	d13b      	bne.n	800f840 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	3308      	adds	r3, #8
 800f7ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	e853 3f00 	ldrex	r3, [r3]
 800f7d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f7de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	3308      	adds	r3, #8
 800f7e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f7e8:	61ba      	str	r2, [r7, #24]
 800f7ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7ec:	6979      	ldr	r1, [r7, #20]
 800f7ee:	69ba      	ldr	r2, [r7, #24]
 800f7f0:	e841 2300 	strex	r3, r2, [r1]
 800f7f4:	613b      	str	r3, [r7, #16]
   return(result);
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d1e5      	bne.n	800f7c8 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f802:	2b00      	cmp	r3, #0
 800f804:	d01c      	beq.n	800f840 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f80c:	2200      	movs	r2, #0
 800f80e:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f816:	4618      	mov	r0, r3
 800f818:	f7f9 f8bf 	bl	800899a <HAL_DMA_Abort>
 800f81c:	4603      	mov	r3, r0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d00e      	beq.n	800f840 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f828:	4618      	mov	r0, r3
 800f82a:	f7f9 fa23 	bl	8008c74 <HAL_DMA_GetError>
 800f82e:	4603      	mov	r3, r0
 800f830:	2b20      	cmp	r3, #32
 800f832:	d105      	bne.n	800f840 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2210      	movs	r2, #16
 800f838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800f83c:	2303      	movs	r3, #3
 800f83e:	e030      	b.n	800f8a2 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2200      	movs	r2, #0
 800f844:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2200      	movs	r2, #0
 800f84c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	220f      	movs	r2, #15
 800f856:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f85c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f860:	d107      	bne.n	800f872 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	699a      	ldr	r2, [r3, #24]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	f042 0210 	orr.w	r2, r2, #16
 800f870:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	699a      	ldr	r2, [r3, #24]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	f042 0208 	orr.w	r2, r2, #8
 800f880:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2220      	movs	r2, #32
 800f886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2220      	movs	r2, #32
 800f88e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2200      	movs	r2, #0
 800f896:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2200      	movs	r2, #0
 800f89c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800f8a0:	2300      	movs	r3, #0
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3780      	adds	r7, #128	@ 0x80
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
	...

0800f8ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b0ba      	sub	sp, #232	@ 0xe8
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	69db      	ldr	r3, [r3, #28]
 800f8ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	689b      	ldr	r3, [r3, #8]
 800f8ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f8d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f8d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f8da:	4013      	ands	r3, r2
 800f8dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f8e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d11b      	bne.n	800f920 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f8e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8ec:	f003 0320 	and.w	r3, r3, #32
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d015      	beq.n	800f920 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f8f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8f8:	f003 0320 	and.w	r3, r3, #32
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d105      	bne.n	800f90c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d009      	beq.n	800f920 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f910:	2b00      	cmp	r3, #0
 800f912:	f000 8300 	beq.w	800ff16 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	4798      	blx	r3
      }
      return;
 800f91e:	e2fa      	b.n	800ff16 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f920:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f924:	2b00      	cmp	r3, #0
 800f926:	f000 8123 	beq.w	800fb70 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f92a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f92e:	4b8d      	ldr	r3, [pc, #564]	@ (800fb64 <HAL_UART_IRQHandler+0x2b8>)
 800f930:	4013      	ands	r3, r2
 800f932:	2b00      	cmp	r3, #0
 800f934:	d106      	bne.n	800f944 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f936:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f93a:	4b8b      	ldr	r3, [pc, #556]	@ (800fb68 <HAL_UART_IRQHandler+0x2bc>)
 800f93c:	4013      	ands	r3, r2
 800f93e:	2b00      	cmp	r3, #0
 800f940:	f000 8116 	beq.w	800fb70 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f948:	f003 0301 	and.w	r3, r3, #1
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d011      	beq.n	800f974 <HAL_UART_IRQHandler+0xc8>
 800f950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d00b      	beq.n	800f974 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2201      	movs	r2, #1
 800f962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f96a:	f043 0201 	orr.w	r2, r3, #1
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f978:	f003 0302 	and.w	r3, r3, #2
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d011      	beq.n	800f9a4 <HAL_UART_IRQHandler+0xf8>
 800f980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f984:	f003 0301 	and.w	r3, r3, #1
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d00b      	beq.n	800f9a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	2202      	movs	r2, #2
 800f992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f99a:	f043 0204 	orr.w	r2, r3, #4
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f9a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f9a8:	f003 0304 	and.w	r3, r3, #4
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d011      	beq.n	800f9d4 <HAL_UART_IRQHandler+0x128>
 800f9b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f9b4:	f003 0301 	and.w	r3, r3, #1
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d00b      	beq.n	800f9d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	2204      	movs	r2, #4
 800f9c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9ca:	f043 0202 	orr.w	r2, r3, #2
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f9d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f9d8:	f003 0308 	and.w	r3, r3, #8
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d017      	beq.n	800fa10 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f9e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f9e4:	f003 0320 	and.w	r3, r3, #32
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d105      	bne.n	800f9f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f9ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f9f0:	4b5c      	ldr	r3, [pc, #368]	@ (800fb64 <HAL_UART_IRQHandler+0x2b8>)
 800f9f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d00b      	beq.n	800fa10 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2208      	movs	r2, #8
 800f9fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa06:	f043 0208 	orr.w	r2, r3, #8
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fa10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d012      	beq.n	800fa42 <HAL_UART_IRQHandler+0x196>
 800fa1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d00c      	beq.n	800fa42 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fa30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa38:	f043 0220 	orr.w	r2, r3, #32
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f000 8266 	beq.w	800ff1a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fa4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa52:	f003 0320 	and.w	r3, r3, #32
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d013      	beq.n	800fa82 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fa5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa5e:	f003 0320 	and.w	r3, r3, #32
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d105      	bne.n	800fa72 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fa66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fa6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d007      	beq.n	800fa82 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d003      	beq.n	800fa82 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	689b      	ldr	r3, [r3, #8]
 800fa92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa96:	2b40      	cmp	r3, #64	@ 0x40
 800fa98:	d005      	beq.n	800faa6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fa9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fa9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d054      	beq.n	800fb50 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f000 ff35 	bl	8010916 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	689b      	ldr	r3, [r3, #8]
 800fab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fab6:	2b40      	cmp	r3, #64	@ 0x40
 800fab8:	d146      	bne.n	800fb48 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	3308      	adds	r3, #8
 800fac0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fac8:	e853 3f00 	ldrex	r3, [r3]
 800facc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fad4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fad8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	3308      	adds	r3, #8
 800fae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fae6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800faea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800faf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800faf6:	e841 2300 	strex	r3, r2, [r1]
 800fafa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fafe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d1d9      	bne.n	800faba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d017      	beq.n	800fb40 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb16:	4a15      	ldr	r2, [pc, #84]	@ (800fb6c <HAL_UART_IRQHandler+0x2c0>)
 800fb18:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7f8 ff99 	bl	8008a58 <HAL_DMA_Abort_IT>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d019      	beq.n	800fb60 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb34:	687a      	ldr	r2, [r7, #4]
 800fb36:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fb3a:	4610      	mov	r0, r2
 800fb3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb3e:	e00f      	b.n	800fb60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f000 fa09 	bl	800ff58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb46:	e00b      	b.n	800fb60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f000 fa05 	bl	800ff58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb4e:	e007      	b.n	800fb60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 fa01 	bl	800ff58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fb5e:	e1dc      	b.n	800ff1a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb60:	bf00      	nop
    return;
 800fb62:	e1da      	b.n	800ff1a <HAL_UART_IRQHandler+0x66e>
 800fb64:	10000001 	.word	0x10000001
 800fb68:	04000120 	.word	0x04000120
 800fb6c:	08010bcd 	.word	0x08010bcd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb74:	2b01      	cmp	r3, #1
 800fb76:	f040 8170 	bne.w	800fe5a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fb7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb7e:	f003 0310 	and.w	r3, r3, #16
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	f000 8169 	beq.w	800fe5a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fb88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb8c:	f003 0310 	and.w	r3, r3, #16
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	f000 8162 	beq.w	800fe5a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2210      	movs	r2, #16
 800fb9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	689b      	ldr	r3, [r3, #8]
 800fba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fba8:	2b40      	cmp	r3, #64	@ 0x40
 800fbaa:	f040 80d8 	bne.w	800fd5e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	685b      	ldr	r3, [r3, #4]
 800fbb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fbbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	f000 80af 	beq.w	800fd24 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fbcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	f080 80a7 	bcs.w	800fd24 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fbdc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f003 0320 	and.w	r3, r3, #32
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	f040 8087 	bne.w	800fd02 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fc00:	e853 3f00 	ldrex	r3, [r3]
 800fc04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fc08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fc0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fc10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	461a      	mov	r2, r3
 800fc1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fc1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fc22:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fc2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fc2e:	e841 2300 	strex	r3, r2, [r1]
 800fc32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fc36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d1da      	bne.n	800fbf4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	3308      	adds	r3, #8
 800fc44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fc48:	e853 3f00 	ldrex	r3, [r3]
 800fc4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fc4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fc50:	f023 0301 	bic.w	r3, r3, #1
 800fc54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	3308      	adds	r3, #8
 800fc5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fc62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fc66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fc6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fc6e:	e841 2300 	strex	r3, r2, [r1]
 800fc72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fc74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d1e1      	bne.n	800fc3e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	3308      	adds	r3, #8
 800fc80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fc84:	e853 3f00 	ldrex	r3, [r3]
 800fc88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fc8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fc8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fc90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	3308      	adds	r3, #8
 800fc9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fc9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fca0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fca2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fca4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fca6:	e841 2300 	strex	r3, r2, [r1]
 800fcaa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fcac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d1e3      	bne.n	800fc7a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2220      	movs	r2, #32
 800fcb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcc8:	e853 3f00 	ldrex	r3, [r3]
 800fccc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fcce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fcd0:	f023 0310 	bic.w	r3, r3, #16
 800fcd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	461a      	mov	r2, r3
 800fcde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fce2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fce4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fce8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fcea:	e841 2300 	strex	r3, r2, [r1]
 800fcee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fcf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d1e4      	bne.n	800fcc0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7f8 fe4c 	bl	800899a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2202      	movs	r2, #2
 800fd06:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fd14:	b29b      	uxth	r3, r3
 800fd16:	1ad3      	subs	r3, r2, r3
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f000 f925 	bl	800ff6c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800fd22:	e0fc      	b.n	800ff1e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fd2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	f040 80f5 	bne.w	800ff1e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	f003 0320 	and.w	r3, r3, #32
 800fd42:	2b20      	cmp	r3, #32
 800fd44:	f040 80eb 	bne.w	800ff1e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2202      	movs	r2, #2
 800fd4c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fd54:	4619      	mov	r1, r3
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 f908 	bl	800ff6c <HAL_UARTEx_RxEventCallback>
      return;
 800fd5c:	e0df      	b.n	800ff1e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fd6a:	b29b      	uxth	r3, r3
 800fd6c:	1ad3      	subs	r3, r2, r3
 800fd6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fd78:	b29b      	uxth	r3, r3
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	f000 80d1 	beq.w	800ff22 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800fd80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	f000 80cc 	beq.w	800ff22 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd92:	e853 3f00 	ldrex	r3, [r3]
 800fd96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fd98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fd9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	461a      	mov	r2, r3
 800fda8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fdac:	647b      	str	r3, [r7, #68]	@ 0x44
 800fdae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fdb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fdb4:	e841 2300 	strex	r3, r2, [r1]
 800fdb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fdba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d1e4      	bne.n	800fd8a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	3308      	adds	r3, #8
 800fdc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdca:	e853 3f00 	ldrex	r3, [r3]
 800fdce:	623b      	str	r3, [r7, #32]
   return(result);
 800fdd0:	6a3b      	ldr	r3, [r7, #32]
 800fdd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fdd6:	f023 0301 	bic.w	r3, r3, #1
 800fdda:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	3308      	adds	r3, #8
 800fde4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fde8:	633a      	str	r2, [r7, #48]	@ 0x30
 800fdea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fdee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdf0:	e841 2300 	strex	r3, r2, [r1]
 800fdf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fdf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d1e1      	bne.n	800fdc0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2220      	movs	r2, #32
 800fe00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2200      	movs	r2, #0
 800fe08:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	e853 3f00 	ldrex	r3, [r3]
 800fe1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f023 0310 	bic.w	r3, r3, #16
 800fe24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fe32:	61fb      	str	r3, [r7, #28]
 800fe34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe36:	69b9      	ldr	r1, [r7, #24]
 800fe38:	69fa      	ldr	r2, [r7, #28]
 800fe3a:	e841 2300 	strex	r3, r2, [r1]
 800fe3e:	617b      	str	r3, [r7, #20]
   return(result);
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d1e4      	bne.n	800fe10 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2202      	movs	r2, #2
 800fe4a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fe4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fe50:	4619      	mov	r1, r3
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f000 f88a 	bl	800ff6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fe58:	e063      	b.n	800ff22 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fe5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d00e      	beq.n	800fe84 <HAL_UART_IRQHandler+0x5d8>
 800fe66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fe6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d008      	beq.n	800fe84 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800fe7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f000 fee2 	bl	8010c46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe82:	e051      	b.n	800ff28 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fe84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d014      	beq.n	800feba <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fe90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d105      	bne.n	800fea8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fe9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fea0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d008      	beq.n	800feba <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800feac:	2b00      	cmp	r3, #0
 800feae:	d03a      	beq.n	800ff26 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	4798      	blx	r3
    }
    return;
 800feb8:	e035      	b.n	800ff26 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800feba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800febe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d009      	beq.n	800feda <HAL_UART_IRQHandler+0x62e>
 800fec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800feca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d003      	beq.n	800feda <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f000 fe8c 	bl	8010bf0 <UART_EndTransmit_IT>
    return;
 800fed8:	e026      	b.n	800ff28 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800feda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fede:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d009      	beq.n	800fefa <HAL_UART_IRQHandler+0x64e>
 800fee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800feea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d003      	beq.n	800fefa <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f000 febb 	bl	8010c6e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fef8:	e016      	b.n	800ff28 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fefa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fefe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d010      	beq.n	800ff28 <HAL_UART_IRQHandler+0x67c>
 800ff06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	da0c      	bge.n	800ff28 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f000 fea3 	bl	8010c5a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ff14:	e008      	b.n	800ff28 <HAL_UART_IRQHandler+0x67c>
      return;
 800ff16:	bf00      	nop
 800ff18:	e006      	b.n	800ff28 <HAL_UART_IRQHandler+0x67c>
    return;
 800ff1a:	bf00      	nop
 800ff1c:	e004      	b.n	800ff28 <HAL_UART_IRQHandler+0x67c>
      return;
 800ff1e:	bf00      	nop
 800ff20:	e002      	b.n	800ff28 <HAL_UART_IRQHandler+0x67c>
      return;
 800ff22:	bf00      	nop
 800ff24:	e000      	b.n	800ff28 <HAL_UART_IRQHandler+0x67c>
    return;
 800ff26:	bf00      	nop
  }
}
 800ff28:	37e8      	adds	r7, #232	@ 0xe8
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
 800ff2e:	bf00      	nop

0800ff30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ff30:	b480      	push	{r7}
 800ff32:	b083      	sub	sp, #12
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ff38:	bf00      	nop
 800ff3a:	370c      	adds	r7, #12
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr

0800ff44 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ff4c:	bf00      	nop
 800ff4e:	370c      	adds	r7, #12
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr

0800ff58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b083      	sub	sp, #12
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ff60:	bf00      	nop
 800ff62:	370c      	adds	r7, #12
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr

0800ff6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b083      	sub	sp, #12
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	460b      	mov	r3, r1
 800ff76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ff78:	bf00      	nop
 800ff7a:	370c      	adds	r7, #12
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff82:	4770      	bx	lr

0800ff84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ff84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ff88:	b08c      	sub	sp, #48	@ 0x30
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	689a      	ldr	r2, [r3, #8]
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	691b      	ldr	r3, [r3, #16]
 800ff9c:	431a      	orrs	r2, r3
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	695b      	ldr	r3, [r3, #20]
 800ffa2:	431a      	orrs	r2, r3
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	69db      	ldr	r3, [r3, #28]
 800ffa8:	4313      	orrs	r3, r2
 800ffaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	681a      	ldr	r2, [r3, #0]
 800ffb2:	4baf      	ldr	r3, [pc, #700]	@ (8010270 <UART_SetConfig+0x2ec>)
 800ffb4:	4013      	ands	r3, r2
 800ffb6:	697a      	ldr	r2, [r7, #20]
 800ffb8:	6812      	ldr	r2, [r2, #0]
 800ffba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ffbc:	430b      	orrs	r3, r1
 800ffbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	68da      	ldr	r2, [r3, #12]
 800ffce:	697b      	ldr	r3, [r7, #20]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	430a      	orrs	r2, r1
 800ffd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	699b      	ldr	r3, [r3, #24]
 800ffda:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4aa4      	ldr	r2, [pc, #656]	@ (8010274 <UART_SetConfig+0x2f0>)
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d004      	beq.n	800fff0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	6a1b      	ldr	r3, [r3, #32]
 800ffea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ffec:	4313      	orrs	r3, r2
 800ffee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fff0:	697b      	ldr	r3, [r7, #20]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	689b      	ldr	r3, [r3, #8]
 800fff6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800fffa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800fffe:	697a      	ldr	r2, [r7, #20]
 8010000:	6812      	ldr	r2, [r2, #0]
 8010002:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010004:	430b      	orrs	r3, r1
 8010006:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801000e:	f023 010f 	bic.w	r1, r3, #15
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	430a      	orrs	r2, r1
 801001c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	4a95      	ldr	r2, [pc, #596]	@ (8010278 <UART_SetConfig+0x2f4>)
 8010024:	4293      	cmp	r3, r2
 8010026:	d125      	bne.n	8010074 <UART_SetConfig+0xf0>
 8010028:	2003      	movs	r0, #3
 801002a:	f7ff fa35 	bl	800f498 <LL_RCC_GetUSARTClockSource>
 801002e:	4603      	mov	r3, r0
 8010030:	2b03      	cmp	r3, #3
 8010032:	d81b      	bhi.n	801006c <UART_SetConfig+0xe8>
 8010034:	a201      	add	r2, pc, #4	@ (adr r2, 801003c <UART_SetConfig+0xb8>)
 8010036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801003a:	bf00      	nop
 801003c:	0801004d 	.word	0x0801004d
 8010040:	0801005d 	.word	0x0801005d
 8010044:	08010055 	.word	0x08010055
 8010048:	08010065 	.word	0x08010065
 801004c:	2301      	movs	r3, #1
 801004e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010052:	e042      	b.n	80100da <UART_SetConfig+0x156>
 8010054:	2302      	movs	r3, #2
 8010056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801005a:	e03e      	b.n	80100da <UART_SetConfig+0x156>
 801005c:	2304      	movs	r3, #4
 801005e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010062:	e03a      	b.n	80100da <UART_SetConfig+0x156>
 8010064:	2308      	movs	r3, #8
 8010066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801006a:	e036      	b.n	80100da <UART_SetConfig+0x156>
 801006c:	2310      	movs	r3, #16
 801006e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010072:	e032      	b.n	80100da <UART_SetConfig+0x156>
 8010074:	697b      	ldr	r3, [r7, #20]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	4a7e      	ldr	r2, [pc, #504]	@ (8010274 <UART_SetConfig+0x2f0>)
 801007a:	4293      	cmp	r3, r2
 801007c:	d12a      	bne.n	80100d4 <UART_SetConfig+0x150>
 801007e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8010082:	f7ff fa19 	bl	800f4b8 <LL_RCC_GetLPUARTClockSource>
 8010086:	4603      	mov	r3, r0
 8010088:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801008c:	d01a      	beq.n	80100c4 <UART_SetConfig+0x140>
 801008e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010092:	d81b      	bhi.n	80100cc <UART_SetConfig+0x148>
 8010094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010098:	d00c      	beq.n	80100b4 <UART_SetConfig+0x130>
 801009a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801009e:	d815      	bhi.n	80100cc <UART_SetConfig+0x148>
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d003      	beq.n	80100ac <UART_SetConfig+0x128>
 80100a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80100a8:	d008      	beq.n	80100bc <UART_SetConfig+0x138>
 80100aa:	e00f      	b.n	80100cc <UART_SetConfig+0x148>
 80100ac:	2300      	movs	r3, #0
 80100ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100b2:	e012      	b.n	80100da <UART_SetConfig+0x156>
 80100b4:	2302      	movs	r3, #2
 80100b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100ba:	e00e      	b.n	80100da <UART_SetConfig+0x156>
 80100bc:	2304      	movs	r3, #4
 80100be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100c2:	e00a      	b.n	80100da <UART_SetConfig+0x156>
 80100c4:	2308      	movs	r3, #8
 80100c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100ca:	e006      	b.n	80100da <UART_SetConfig+0x156>
 80100cc:	2310      	movs	r3, #16
 80100ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100d2:	e002      	b.n	80100da <UART_SetConfig+0x156>
 80100d4:	2310      	movs	r3, #16
 80100d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	4a65      	ldr	r2, [pc, #404]	@ (8010274 <UART_SetConfig+0x2f0>)
 80100e0:	4293      	cmp	r3, r2
 80100e2:	f040 8097 	bne.w	8010214 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80100e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80100ea:	2b08      	cmp	r3, #8
 80100ec:	d823      	bhi.n	8010136 <UART_SetConfig+0x1b2>
 80100ee:	a201      	add	r2, pc, #4	@ (adr r2, 80100f4 <UART_SetConfig+0x170>)
 80100f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f4:	08010119 	.word	0x08010119
 80100f8:	08010137 	.word	0x08010137
 80100fc:	08010121 	.word	0x08010121
 8010100:	08010137 	.word	0x08010137
 8010104:	08010127 	.word	0x08010127
 8010108:	08010137 	.word	0x08010137
 801010c:	08010137 	.word	0x08010137
 8010110:	08010137 	.word	0x08010137
 8010114:	0801012f 	.word	0x0801012f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010118:	f7fc fc84 	bl	800ca24 <HAL_RCC_GetPCLK1Freq>
 801011c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801011e:	e010      	b.n	8010142 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010120:	4b56      	ldr	r3, [pc, #344]	@ (801027c <UART_SetConfig+0x2f8>)
 8010122:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010124:	e00d      	b.n	8010142 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010126:	f7fc fbfd 	bl	800c924 <HAL_RCC_GetSysClockFreq>
 801012a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801012c:	e009      	b.n	8010142 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801012e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010132:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010134:	e005      	b.n	8010142 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8010136:	2300      	movs	r3, #0
 8010138:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801013a:	2301      	movs	r3, #1
 801013c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010140:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010144:	2b00      	cmp	r3, #0
 8010146:	f000 812b 	beq.w	80103a0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801014e:	4a4c      	ldr	r2, [pc, #304]	@ (8010280 <UART_SetConfig+0x2fc>)
 8010150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010154:	461a      	mov	r2, r3
 8010156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010158:	fbb3 f3f2 	udiv	r3, r3, r2
 801015c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	685a      	ldr	r2, [r3, #4]
 8010162:	4613      	mov	r3, r2
 8010164:	005b      	lsls	r3, r3, #1
 8010166:	4413      	add	r3, r2
 8010168:	69ba      	ldr	r2, [r7, #24]
 801016a:	429a      	cmp	r2, r3
 801016c:	d305      	bcc.n	801017a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010174:	69ba      	ldr	r2, [r7, #24]
 8010176:	429a      	cmp	r2, r3
 8010178:	d903      	bls.n	8010182 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801017a:	2301      	movs	r3, #1
 801017c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010180:	e10e      	b.n	80103a0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010184:	2200      	movs	r2, #0
 8010186:	60bb      	str	r3, [r7, #8]
 8010188:	60fa      	str	r2, [r7, #12]
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801018e:	4a3c      	ldr	r2, [pc, #240]	@ (8010280 <UART_SetConfig+0x2fc>)
 8010190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010194:	b29b      	uxth	r3, r3
 8010196:	2200      	movs	r2, #0
 8010198:	603b      	str	r3, [r7, #0]
 801019a:	607a      	str	r2, [r7, #4]
 801019c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80101a4:	f7f0 fd48 	bl	8000c38 <__aeabi_uldivmod>
 80101a8:	4602      	mov	r2, r0
 80101aa:	460b      	mov	r3, r1
 80101ac:	4610      	mov	r0, r2
 80101ae:	4619      	mov	r1, r3
 80101b0:	f04f 0200 	mov.w	r2, #0
 80101b4:	f04f 0300 	mov.w	r3, #0
 80101b8:	020b      	lsls	r3, r1, #8
 80101ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80101be:	0202      	lsls	r2, r0, #8
 80101c0:	6979      	ldr	r1, [r7, #20]
 80101c2:	6849      	ldr	r1, [r1, #4]
 80101c4:	0849      	lsrs	r1, r1, #1
 80101c6:	2000      	movs	r0, #0
 80101c8:	460c      	mov	r4, r1
 80101ca:	4605      	mov	r5, r0
 80101cc:	eb12 0804 	adds.w	r8, r2, r4
 80101d0:	eb43 0905 	adc.w	r9, r3, r5
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	2200      	movs	r2, #0
 80101da:	469a      	mov	sl, r3
 80101dc:	4693      	mov	fp, r2
 80101de:	4652      	mov	r2, sl
 80101e0:	465b      	mov	r3, fp
 80101e2:	4640      	mov	r0, r8
 80101e4:	4649      	mov	r1, r9
 80101e6:	f7f0 fd27 	bl	8000c38 <__aeabi_uldivmod>
 80101ea:	4602      	mov	r2, r0
 80101ec:	460b      	mov	r3, r1
 80101ee:	4613      	mov	r3, r2
 80101f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80101f2:	6a3b      	ldr	r3, [r7, #32]
 80101f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80101f8:	d308      	bcc.n	801020c <UART_SetConfig+0x288>
 80101fa:	6a3b      	ldr	r3, [r7, #32]
 80101fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010200:	d204      	bcs.n	801020c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	6a3a      	ldr	r2, [r7, #32]
 8010208:	60da      	str	r2, [r3, #12]
 801020a:	e0c9      	b.n	80103a0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801020c:	2301      	movs	r3, #1
 801020e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010212:	e0c5      	b.n	80103a0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	69db      	ldr	r3, [r3, #28]
 8010218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801021c:	d16d      	bne.n	80102fa <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801021e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010222:	3b01      	subs	r3, #1
 8010224:	2b07      	cmp	r3, #7
 8010226:	d82d      	bhi.n	8010284 <UART_SetConfig+0x300>
 8010228:	a201      	add	r2, pc, #4	@ (adr r2, 8010230 <UART_SetConfig+0x2ac>)
 801022a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801022e:	bf00      	nop
 8010230:	08010251 	.word	0x08010251
 8010234:	08010259 	.word	0x08010259
 8010238:	08010285 	.word	0x08010285
 801023c:	0801025f 	.word	0x0801025f
 8010240:	08010285 	.word	0x08010285
 8010244:	08010285 	.word	0x08010285
 8010248:	08010285 	.word	0x08010285
 801024c:	08010267 	.word	0x08010267
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010250:	f7fc fbfe 	bl	800ca50 <HAL_RCC_GetPCLK2Freq>
 8010254:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010256:	e01b      	b.n	8010290 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010258:	4b08      	ldr	r3, [pc, #32]	@ (801027c <UART_SetConfig+0x2f8>)
 801025a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801025c:	e018      	b.n	8010290 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801025e:	f7fc fb61 	bl	800c924 <HAL_RCC_GetSysClockFreq>
 8010262:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010264:	e014      	b.n	8010290 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801026a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801026c:	e010      	b.n	8010290 <UART_SetConfig+0x30c>
 801026e:	bf00      	nop
 8010270:	cfff69f3 	.word	0xcfff69f3
 8010274:	40008000 	.word	0x40008000
 8010278:	40013800 	.word	0x40013800
 801027c:	00f42400 	.word	0x00f42400
 8010280:	08021ddc 	.word	0x08021ddc
      default:
        pclk = 0U;
 8010284:	2300      	movs	r3, #0
 8010286:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010288:	2301      	movs	r3, #1
 801028a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801028e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010292:	2b00      	cmp	r3, #0
 8010294:	f000 8084 	beq.w	80103a0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801029c:	4a4b      	ldr	r2, [pc, #300]	@ (80103cc <UART_SetConfig+0x448>)
 801029e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102a2:	461a      	mov	r2, r3
 80102a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80102aa:	005a      	lsls	r2, r3, #1
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	085b      	lsrs	r3, r3, #1
 80102b2:	441a      	add	r2, r3
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80102bc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80102be:	6a3b      	ldr	r3, [r7, #32]
 80102c0:	2b0f      	cmp	r3, #15
 80102c2:	d916      	bls.n	80102f2 <UART_SetConfig+0x36e>
 80102c4:	6a3b      	ldr	r3, [r7, #32]
 80102c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80102ca:	d212      	bcs.n	80102f2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80102cc:	6a3b      	ldr	r3, [r7, #32]
 80102ce:	b29b      	uxth	r3, r3
 80102d0:	f023 030f 	bic.w	r3, r3, #15
 80102d4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80102d6:	6a3b      	ldr	r3, [r7, #32]
 80102d8:	085b      	lsrs	r3, r3, #1
 80102da:	b29b      	uxth	r3, r3
 80102dc:	f003 0307 	and.w	r3, r3, #7
 80102e0:	b29a      	uxth	r2, r3
 80102e2:	8bfb      	ldrh	r3, [r7, #30]
 80102e4:	4313      	orrs	r3, r2
 80102e6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	8bfa      	ldrh	r2, [r7, #30]
 80102ee:	60da      	str	r2, [r3, #12]
 80102f0:	e056      	b.n	80103a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80102f2:	2301      	movs	r3, #1
 80102f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80102f8:	e052      	b.n	80103a0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80102fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80102fe:	3b01      	subs	r3, #1
 8010300:	2b07      	cmp	r3, #7
 8010302:	d822      	bhi.n	801034a <UART_SetConfig+0x3c6>
 8010304:	a201      	add	r2, pc, #4	@ (adr r2, 801030c <UART_SetConfig+0x388>)
 8010306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801030a:	bf00      	nop
 801030c:	0801032d 	.word	0x0801032d
 8010310:	08010335 	.word	0x08010335
 8010314:	0801034b 	.word	0x0801034b
 8010318:	0801033b 	.word	0x0801033b
 801031c:	0801034b 	.word	0x0801034b
 8010320:	0801034b 	.word	0x0801034b
 8010324:	0801034b 	.word	0x0801034b
 8010328:	08010343 	.word	0x08010343
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801032c:	f7fc fb90 	bl	800ca50 <HAL_RCC_GetPCLK2Freq>
 8010330:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010332:	e010      	b.n	8010356 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010334:	4b26      	ldr	r3, [pc, #152]	@ (80103d0 <UART_SetConfig+0x44c>)
 8010336:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010338:	e00d      	b.n	8010356 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801033a:	f7fc faf3 	bl	800c924 <HAL_RCC_GetSysClockFreq>
 801033e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010340:	e009      	b.n	8010356 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010346:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010348:	e005      	b.n	8010356 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801034a:	2300      	movs	r3, #0
 801034c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801034e:	2301      	movs	r3, #1
 8010350:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010354:	bf00      	nop
    }

    if (pclk != 0U)
 8010356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010358:	2b00      	cmp	r3, #0
 801035a:	d021      	beq.n	80103a0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010360:	4a1a      	ldr	r2, [pc, #104]	@ (80103cc <UART_SetConfig+0x448>)
 8010362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010366:	461a      	mov	r2, r3
 8010368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801036a:	fbb3 f2f2 	udiv	r2, r3, r2
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	685b      	ldr	r3, [r3, #4]
 8010372:	085b      	lsrs	r3, r3, #1
 8010374:	441a      	add	r2, r3
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	685b      	ldr	r3, [r3, #4]
 801037a:	fbb2 f3f3 	udiv	r3, r2, r3
 801037e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010380:	6a3b      	ldr	r3, [r7, #32]
 8010382:	2b0f      	cmp	r3, #15
 8010384:	d909      	bls.n	801039a <UART_SetConfig+0x416>
 8010386:	6a3b      	ldr	r3, [r7, #32]
 8010388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801038c:	d205      	bcs.n	801039a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801038e:	6a3b      	ldr	r3, [r7, #32]
 8010390:	b29a      	uxth	r2, r3
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	60da      	str	r2, [r3, #12]
 8010398:	e002      	b.n	80103a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801039a:	2301      	movs	r3, #1
 801039c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	2201      	movs	r2, #1
 80103a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	2201      	movs	r2, #1
 80103ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	2200      	movs	r2, #0
 80103b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	2200      	movs	r2, #0
 80103ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80103bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3730      	adds	r7, #48	@ 0x30
 80103c4:	46bd      	mov	sp, r7
 80103c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80103ca:	bf00      	nop
 80103cc:	08021ddc 	.word	0x08021ddc
 80103d0:	00f42400 	.word	0x00f42400

080103d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80103d4:	b480      	push	{r7}
 80103d6:	b083      	sub	sp, #12
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103e0:	f003 0308 	and.w	r3, r3, #8
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d00a      	beq.n	80103fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	685b      	ldr	r3, [r3, #4]
 80103ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	430a      	orrs	r2, r1
 80103fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010402:	f003 0301 	and.w	r3, r3, #1
 8010406:	2b00      	cmp	r3, #0
 8010408:	d00a      	beq.n	8010420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	430a      	orrs	r2, r1
 801041e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010424:	f003 0302 	and.w	r3, r3, #2
 8010428:	2b00      	cmp	r3, #0
 801042a:	d00a      	beq.n	8010442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	430a      	orrs	r2, r1
 8010440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010446:	f003 0304 	and.w	r3, r3, #4
 801044a:	2b00      	cmp	r3, #0
 801044c:	d00a      	beq.n	8010464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	430a      	orrs	r2, r1
 8010462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010468:	f003 0310 	and.w	r3, r3, #16
 801046c:	2b00      	cmp	r3, #0
 801046e:	d00a      	beq.n	8010486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	689b      	ldr	r3, [r3, #8]
 8010476:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	430a      	orrs	r2, r1
 8010484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801048a:	f003 0320 	and.w	r3, r3, #32
 801048e:	2b00      	cmp	r3, #0
 8010490:	d00a      	beq.n	80104a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	689b      	ldr	r3, [r3, #8]
 8010498:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	430a      	orrs	r2, r1
 80104a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d01a      	beq.n	80104ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	430a      	orrs	r2, r1
 80104c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80104d2:	d10a      	bne.n	80104ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	430a      	orrs	r2, r1
 80104e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d00a      	beq.n	801050c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	430a      	orrs	r2, r1
 801050a:	605a      	str	r2, [r3, #4]
  }
}
 801050c:	bf00      	nop
 801050e:	370c      	adds	r7, #12
 8010510:	46bd      	mov	sp, r7
 8010512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010516:	4770      	bx	lr

08010518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b098      	sub	sp, #96	@ 0x60
 801051c:	af02      	add	r7, sp, #8
 801051e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2200      	movs	r2, #0
 8010524:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010528:	f7f6 fe40 	bl	80071ac <HAL_GetTick>
 801052c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f003 0308 	and.w	r3, r3, #8
 8010538:	2b08      	cmp	r3, #8
 801053a:	d12f      	bne.n	801059c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801053c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010540:	9300      	str	r3, [sp, #0]
 8010542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010544:	2200      	movs	r2, #0
 8010546:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f000 f88e 	bl	801066c <UART_WaitOnFlagUntilTimeout>
 8010550:	4603      	mov	r3, r0
 8010552:	2b00      	cmp	r3, #0
 8010554:	d022      	beq.n	801059c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801055c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801055e:	e853 3f00 	ldrex	r3, [r3]
 8010562:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010566:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801056a:	653b      	str	r3, [r7, #80]	@ 0x50
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	461a      	mov	r2, r3
 8010572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010574:	647b      	str	r3, [r7, #68]	@ 0x44
 8010576:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010578:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801057a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801057c:	e841 2300 	strex	r3, r2, [r1]
 8010580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010584:	2b00      	cmp	r3, #0
 8010586:	d1e6      	bne.n	8010556 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2220      	movs	r2, #32
 801058c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2200      	movs	r2, #0
 8010594:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010598:	2303      	movs	r3, #3
 801059a:	e063      	b.n	8010664 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	f003 0304 	and.w	r3, r3, #4
 80105a6:	2b04      	cmp	r3, #4
 80105a8:	d149      	bne.n	801063e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80105aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80105ae:	9300      	str	r3, [sp, #0]
 80105b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105b2:	2200      	movs	r2, #0
 80105b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f000 f857 	bl	801066c <UART_WaitOnFlagUntilTimeout>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d03c      	beq.n	801063e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105cc:	e853 3f00 	ldrex	r3, [r3]
 80105d0:	623b      	str	r3, [r7, #32]
   return(result);
 80105d2:	6a3b      	ldr	r3, [r7, #32]
 80105d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80105d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	461a      	mov	r2, r3
 80105e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80105e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80105e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80105e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80105ea:	e841 2300 	strex	r3, r2, [r1]
 80105ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80105f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d1e6      	bne.n	80105c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	3308      	adds	r3, #8
 80105fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	e853 3f00 	ldrex	r3, [r3]
 8010604:	60fb      	str	r3, [r7, #12]
   return(result);
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f023 0301 	bic.w	r3, r3, #1
 801060c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	3308      	adds	r3, #8
 8010614:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010616:	61fa      	str	r2, [r7, #28]
 8010618:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061a:	69b9      	ldr	r1, [r7, #24]
 801061c:	69fa      	ldr	r2, [r7, #28]
 801061e:	e841 2300 	strex	r3, r2, [r1]
 8010622:	617b      	str	r3, [r7, #20]
   return(result);
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d1e5      	bne.n	80105f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2220      	movs	r2, #32
 801062e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2200      	movs	r2, #0
 8010636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801063a:	2303      	movs	r3, #3
 801063c:	e012      	b.n	8010664 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2220      	movs	r2, #32
 8010642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2220      	movs	r2, #32
 801064a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2200      	movs	r2, #0
 8010652:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2200      	movs	r2, #0
 8010658:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2200      	movs	r2, #0
 801065e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010662:	2300      	movs	r3, #0
}
 8010664:	4618      	mov	r0, r3
 8010666:	3758      	adds	r7, #88	@ 0x58
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b084      	sub	sp, #16
 8010670:	af00      	add	r7, sp, #0
 8010672:	60f8      	str	r0, [r7, #12]
 8010674:	60b9      	str	r1, [r7, #8]
 8010676:	603b      	str	r3, [r7, #0]
 8010678:	4613      	mov	r3, r2
 801067a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801067c:	e04f      	b.n	801071e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801067e:	69bb      	ldr	r3, [r7, #24]
 8010680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010684:	d04b      	beq.n	801071e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010686:	f7f6 fd91 	bl	80071ac <HAL_GetTick>
 801068a:	4602      	mov	r2, r0
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	1ad3      	subs	r3, r2, r3
 8010690:	69ba      	ldr	r2, [r7, #24]
 8010692:	429a      	cmp	r2, r3
 8010694:	d302      	bcc.n	801069c <UART_WaitOnFlagUntilTimeout+0x30>
 8010696:	69bb      	ldr	r3, [r7, #24]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d101      	bne.n	80106a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801069c:	2303      	movs	r3, #3
 801069e:	e04e      	b.n	801073e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	f003 0304 	and.w	r3, r3, #4
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d037      	beq.n	801071e <UART_WaitOnFlagUntilTimeout+0xb2>
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	2b80      	cmp	r3, #128	@ 0x80
 80106b2:	d034      	beq.n	801071e <UART_WaitOnFlagUntilTimeout+0xb2>
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	2b40      	cmp	r3, #64	@ 0x40
 80106b8:	d031      	beq.n	801071e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	69db      	ldr	r3, [r3, #28]
 80106c0:	f003 0308 	and.w	r3, r3, #8
 80106c4:	2b08      	cmp	r3, #8
 80106c6:	d110      	bne.n	80106ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	2208      	movs	r2, #8
 80106ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80106d0:	68f8      	ldr	r0, [r7, #12]
 80106d2:	f000 f920 	bl	8010916 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2208      	movs	r2, #8
 80106da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	2200      	movs	r2, #0
 80106e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80106e6:	2301      	movs	r3, #1
 80106e8:	e029      	b.n	801073e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	69db      	ldr	r3, [r3, #28]
 80106f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80106f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80106f8:	d111      	bne.n	801071e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010702:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010704:	68f8      	ldr	r0, [r7, #12]
 8010706:	f000 f906 	bl	8010916 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	2220      	movs	r2, #32
 801070e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	2200      	movs	r2, #0
 8010716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801071a:	2303      	movs	r3, #3
 801071c:	e00f      	b.n	801073e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	69da      	ldr	r2, [r3, #28]
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	4013      	ands	r3, r2
 8010728:	68ba      	ldr	r2, [r7, #8]
 801072a:	429a      	cmp	r2, r3
 801072c:	bf0c      	ite	eq
 801072e:	2301      	moveq	r3, #1
 8010730:	2300      	movne	r3, #0
 8010732:	b2db      	uxtb	r3, r3
 8010734:	461a      	mov	r2, r3
 8010736:	79fb      	ldrb	r3, [r7, #7]
 8010738:	429a      	cmp	r2, r3
 801073a:	d0a0      	beq.n	801067e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801073c:	2300      	movs	r3, #0
}
 801073e:	4618      	mov	r0, r3
 8010740:	3710      	adds	r7, #16
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}
	...

08010748 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b096      	sub	sp, #88	@ 0x58
 801074c:	af00      	add	r7, sp, #0
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	4613      	mov	r3, r2
 8010754:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	68ba      	ldr	r2, [r7, #8]
 801075a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	88fa      	ldrh	r2, [r7, #6]
 8010760:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2200      	movs	r2, #0
 8010768:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2222      	movs	r2, #34	@ 0x22
 8010770:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801077a:	2b00      	cmp	r3, #0
 801077c:	d02d      	beq.n	80107da <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010784:	4a40      	ldr	r2, [pc, #256]	@ (8010888 <UART_Start_Receive_DMA+0x140>)
 8010786:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801078e:	4a3f      	ldr	r2, [pc, #252]	@ (801088c <UART_Start_Receive_DMA+0x144>)
 8010790:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010798:	4a3d      	ldr	r2, [pc, #244]	@ (8010890 <UART_Start_Receive_DMA+0x148>)
 801079a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80107a2:	2200      	movs	r2, #0
 80107a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	3324      	adds	r3, #36	@ 0x24
 80107b2:	4619      	mov	r1, r3
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80107b8:	461a      	mov	r2, r3
 80107ba:	88fb      	ldrh	r3, [r7, #6]
 80107bc:	f7f8 f872 	bl	80088a4 <HAL_DMA_Start_IT>
 80107c0:	4603      	mov	r3, r0
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d009      	beq.n	80107da <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	2210      	movs	r2, #16
 80107ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2220      	movs	r2, #32
 80107d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80107d6:	2301      	movs	r3, #1
 80107d8:	e051      	b.n	801087e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	691b      	ldr	r3, [r3, #16]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d018      	beq.n	8010814 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107ea:	e853 3f00 	ldrex	r3, [r3]
 80107ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80107f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80107f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	461a      	mov	r2, r3
 80107fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010800:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010802:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010804:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010806:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010808:	e841 2300 	strex	r3, r2, [r1]
 801080c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801080e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010810:	2b00      	cmp	r3, #0
 8010812:	d1e6      	bne.n	80107e2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	3308      	adds	r3, #8
 801081a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801081c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801081e:	e853 3f00 	ldrex	r3, [r3]
 8010822:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010826:	f043 0301 	orr.w	r3, r3, #1
 801082a:	653b      	str	r3, [r7, #80]	@ 0x50
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	3308      	adds	r3, #8
 8010832:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010834:	637a      	str	r2, [r7, #52]	@ 0x34
 8010836:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010838:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801083a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801083c:	e841 2300 	strex	r3, r2, [r1]
 8010840:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010844:	2b00      	cmp	r3, #0
 8010846:	d1e5      	bne.n	8010814 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	3308      	adds	r3, #8
 801084e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	e853 3f00 	ldrex	r3, [r3]
 8010856:	613b      	str	r3, [r7, #16]
   return(result);
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801085e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	3308      	adds	r3, #8
 8010866:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010868:	623a      	str	r2, [r7, #32]
 801086a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801086c:	69f9      	ldr	r1, [r7, #28]
 801086e:	6a3a      	ldr	r2, [r7, #32]
 8010870:	e841 2300 	strex	r3, r2, [r1]
 8010874:	61bb      	str	r3, [r7, #24]
   return(result);
 8010876:	69bb      	ldr	r3, [r7, #24]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d1e5      	bne.n	8010848 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 801087c:	2300      	movs	r3, #0
}
 801087e:	4618      	mov	r0, r3
 8010880:	3758      	adds	r7, #88	@ 0x58
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}
 8010886:	bf00      	nop
 8010888:	080109e3 	.word	0x080109e3
 801088c:	08010b0f 	.word	0x08010b0f
 8010890:	08010b4d 	.word	0x08010b4d

08010894 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010894:	b480      	push	{r7}
 8010896:	b08f      	sub	sp, #60	@ 0x3c
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108a2:	6a3b      	ldr	r3, [r7, #32]
 80108a4:	e853 3f00 	ldrex	r3, [r3]
 80108a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80108aa:	69fb      	ldr	r3, [r7, #28]
 80108ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80108b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	461a      	mov	r2, r3
 80108b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80108bc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80108c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80108c2:	e841 2300 	strex	r3, r2, [r1]
 80108c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80108c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d1e6      	bne.n	801089c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	3308      	adds	r3, #8
 80108d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	e853 3f00 	ldrex	r3, [r3]
 80108dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80108e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	3308      	adds	r3, #8
 80108ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108ee:	61ba      	str	r2, [r7, #24]
 80108f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108f2:	6979      	ldr	r1, [r7, #20]
 80108f4:	69ba      	ldr	r2, [r7, #24]
 80108f6:	e841 2300 	strex	r3, r2, [r1]
 80108fa:	613b      	str	r3, [r7, #16]
   return(result);
 80108fc:	693b      	ldr	r3, [r7, #16]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d1e5      	bne.n	80108ce <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2220      	movs	r2, #32
 8010906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801090a:	bf00      	nop
 801090c:	373c      	adds	r7, #60	@ 0x3c
 801090e:	46bd      	mov	sp, r7
 8010910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010914:	4770      	bx	lr

08010916 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010916:	b480      	push	{r7}
 8010918:	b095      	sub	sp, #84	@ 0x54
 801091a:	af00      	add	r7, sp, #0
 801091c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010926:	e853 3f00 	ldrex	r3, [r3]
 801092a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801092c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801092e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	461a      	mov	r2, r3
 801093a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801093c:	643b      	str	r3, [r7, #64]	@ 0x40
 801093e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010940:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010942:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010944:	e841 2300 	strex	r3, r2, [r1]
 8010948:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801094a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801094c:	2b00      	cmp	r3, #0
 801094e:	d1e6      	bne.n	801091e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	3308      	adds	r3, #8
 8010956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010958:	6a3b      	ldr	r3, [r7, #32]
 801095a:	e853 3f00 	ldrex	r3, [r3]
 801095e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010966:	f023 0301 	bic.w	r3, r3, #1
 801096a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	3308      	adds	r3, #8
 8010972:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010974:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010976:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010978:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801097a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801097c:	e841 2300 	strex	r3, r2, [r1]
 8010980:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010984:	2b00      	cmp	r3, #0
 8010986:	d1e3      	bne.n	8010950 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801098c:	2b01      	cmp	r3, #1
 801098e:	d118      	bne.n	80109c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	e853 3f00 	ldrex	r3, [r3]
 801099c:	60bb      	str	r3, [r7, #8]
   return(result);
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	f023 0310 	bic.w	r3, r3, #16
 80109a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	461a      	mov	r2, r3
 80109ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109ae:	61bb      	str	r3, [r7, #24]
 80109b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109b2:	6979      	ldr	r1, [r7, #20]
 80109b4:	69ba      	ldr	r2, [r7, #24]
 80109b6:	e841 2300 	strex	r3, r2, [r1]
 80109ba:	613b      	str	r3, [r7, #16]
   return(result);
 80109bc:	693b      	ldr	r3, [r7, #16]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d1e6      	bne.n	8010990 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2220      	movs	r2, #32
 80109c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2200      	movs	r2, #0
 80109ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2200      	movs	r2, #0
 80109d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80109d6:	bf00      	nop
 80109d8:	3754      	adds	r7, #84	@ 0x54
 80109da:	46bd      	mov	sp, r7
 80109dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e0:	4770      	bx	lr

080109e2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80109e2:	b580      	push	{r7, lr}
 80109e4:	b09c      	sub	sp, #112	@ 0x70
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109ee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	f003 0320 	and.w	r3, r3, #32
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d171      	bne.n	8010ae2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80109fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a00:	2200      	movs	r2, #0
 8010a02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a0e:	e853 3f00 	ldrex	r3, [r3]
 8010a12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010a14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010a1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010a1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	461a      	mov	r2, r3
 8010a22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010a24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010a26:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010a2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010a2c:	e841 2300 	strex	r3, r2, [r1]
 8010a30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010a32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d1e6      	bne.n	8010a06 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	3308      	adds	r3, #8
 8010a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a42:	e853 3f00 	ldrex	r3, [r3]
 8010a46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a4a:	f023 0301 	bic.w	r3, r3, #1
 8010a4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8010a50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	3308      	adds	r3, #8
 8010a56:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010a58:	647a      	str	r2, [r7, #68]	@ 0x44
 8010a5a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010a5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010a60:	e841 2300 	strex	r3, r2, [r1]
 8010a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d1e5      	bne.n	8010a38 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	3308      	adds	r3, #8
 8010a72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a76:	e853 3f00 	ldrex	r3, [r3]
 8010a7a:	623b      	str	r3, [r7, #32]
   return(result);
 8010a7c:	6a3b      	ldr	r3, [r7, #32]
 8010a7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a82:	663b      	str	r3, [r7, #96]	@ 0x60
 8010a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	3308      	adds	r3, #8
 8010a8a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010a8c:	633a      	str	r2, [r7, #48]	@ 0x30
 8010a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010a92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a94:	e841 2300 	strex	r3, r2, [r1]
 8010a98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d1e5      	bne.n	8010a6c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010aa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010aa2:	2220      	movs	r2, #32
 8010aa4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010aa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	d118      	bne.n	8010ae2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	e853 3f00 	ldrex	r3, [r3]
 8010abc:	60fb      	str	r3, [r7, #12]
   return(result);
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	f023 0310 	bic.w	r3, r3, #16
 8010ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010ac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	461a      	mov	r2, r3
 8010acc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ace:	61fb      	str	r3, [r7, #28]
 8010ad0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ad2:	69b9      	ldr	r1, [r7, #24]
 8010ad4:	69fa      	ldr	r2, [r7, #28]
 8010ad6:	e841 2300 	strex	r3, r2, [r1]
 8010ada:	617b      	str	r3, [r7, #20]
   return(result);
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d1e6      	bne.n	8010ab0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010ae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ae8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010aea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010aec:	2b01      	cmp	r3, #1
 8010aee:	d107      	bne.n	8010b00 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010af0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010af2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010af6:	4619      	mov	r1, r3
 8010af8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010afa:	f7ff fa37 	bl	800ff6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010afe:	e002      	b.n	8010b06 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8010b00:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010b02:	f7f6 fa23 	bl	8006f4c <HAL_UART_RxCpltCallback>
}
 8010b06:	bf00      	nop
 8010b08:	3770      	adds	r7, #112	@ 0x70
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}

08010b0e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010b0e:	b580      	push	{r7, lr}
 8010b10:	b084      	sub	sp, #16
 8010b12:	af00      	add	r7, sp, #0
 8010b14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b1a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	2201      	movs	r2, #1
 8010b20:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	d109      	bne.n	8010b3e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010b30:	085b      	lsrs	r3, r3, #1
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	4619      	mov	r1, r3
 8010b36:	68f8      	ldr	r0, [r7, #12]
 8010b38:	f7ff fa18 	bl	800ff6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010b3c:	e002      	b.n	8010b44 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010b3e:	68f8      	ldr	r0, [r7, #12]
 8010b40:	f7ff fa00 	bl	800ff44 <HAL_UART_RxHalfCpltCallback>
}
 8010b44:	bf00      	nop
 8010b46:	3710      	adds	r7, #16
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b086      	sub	sp, #24
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b58:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b60:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010b68:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	689b      	ldr	r3, [r3, #8]
 8010b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010b74:	2b80      	cmp	r3, #128	@ 0x80
 8010b76:	d109      	bne.n	8010b8c <UART_DMAError+0x40>
 8010b78:	693b      	ldr	r3, [r7, #16]
 8010b7a:	2b21      	cmp	r3, #33	@ 0x21
 8010b7c:	d106      	bne.n	8010b8c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	2200      	movs	r2, #0
 8010b82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010b86:	6978      	ldr	r0, [r7, #20]
 8010b88:	f7ff fe84 	bl	8010894 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	689b      	ldr	r3, [r3, #8]
 8010b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b96:	2b40      	cmp	r3, #64	@ 0x40
 8010b98:	d109      	bne.n	8010bae <UART_DMAError+0x62>
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	2b22      	cmp	r3, #34	@ 0x22
 8010b9e:	d106      	bne.n	8010bae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010ba8:	6978      	ldr	r0, [r7, #20]
 8010baa:	f7ff feb4 	bl	8010916 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010bb4:	f043 0210 	orr.w	r2, r3, #16
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010bbe:	6978      	ldr	r0, [r7, #20]
 8010bc0:	f7ff f9ca 	bl	800ff58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010bc4:	bf00      	nop
 8010bc6:	3718      	adds	r7, #24
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}

08010bcc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b084      	sub	sp, #16
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	2200      	movs	r2, #0
 8010bde:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010be2:	68f8      	ldr	r0, [r7, #12]
 8010be4:	f7ff f9b8 	bl	800ff58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010be8:	bf00      	nop
 8010bea:	3710      	adds	r7, #16
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}

08010bf0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b088      	sub	sp, #32
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	e853 3f00 	ldrex	r3, [r3]
 8010c04:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c0c:	61fb      	str	r3, [r7, #28]
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	461a      	mov	r2, r3
 8010c14:	69fb      	ldr	r3, [r7, #28]
 8010c16:	61bb      	str	r3, [r7, #24]
 8010c18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c1a:	6979      	ldr	r1, [r7, #20]
 8010c1c:	69ba      	ldr	r2, [r7, #24]
 8010c1e:	e841 2300 	strex	r3, r2, [r1]
 8010c22:	613b      	str	r3, [r7, #16]
   return(result);
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d1e6      	bne.n	8010bf8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2220      	movs	r2, #32
 8010c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2200      	movs	r2, #0
 8010c36:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f7ff f979 	bl	800ff30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c3e:	bf00      	nop
 8010c40:	3720      	adds	r7, #32
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010c46:	b480      	push	{r7}
 8010c48:	b083      	sub	sp, #12
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010c4e:	bf00      	nop
 8010c50:	370c      	adds	r7, #12
 8010c52:	46bd      	mov	sp, r7
 8010c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c58:	4770      	bx	lr

08010c5a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010c5a:	b480      	push	{r7}
 8010c5c:	b083      	sub	sp, #12
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010c62:	bf00      	nop
 8010c64:	370c      	adds	r7, #12
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr

08010c6e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010c6e:	b480      	push	{r7}
 8010c70:	b083      	sub	sp, #12
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010c76:	bf00      	nop
 8010c78:	370c      	adds	r7, #12
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c80:	4770      	bx	lr

08010c82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010c82:	b480      	push	{r7}
 8010c84:	b085      	sub	sp, #20
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d101      	bne.n	8010c98 <HAL_UARTEx_DisableFifoMode+0x16>
 8010c94:	2302      	movs	r3, #2
 8010c96:	e027      	b.n	8010ce8 <HAL_UARTEx_DisableFifoMode+0x66>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2224      	movs	r2, #36	@ 0x24
 8010ca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	681a      	ldr	r2, [r3, #0]
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	f022 0201 	bic.w	r2, r2, #1
 8010cbe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010cc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	68fa      	ldr	r2, [r7, #12]
 8010cd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2220      	movs	r2, #32
 8010cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010ce6:	2300      	movs	r3, #0
}
 8010ce8:	4618      	mov	r0, r3
 8010cea:	3714      	adds	r7, #20
 8010cec:	46bd      	mov	sp, r7
 8010cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf2:	4770      	bx	lr

08010cf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b084      	sub	sp, #16
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
 8010cfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010d04:	2b01      	cmp	r3, #1
 8010d06:	d101      	bne.n	8010d0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010d08:	2302      	movs	r3, #2
 8010d0a:	e02d      	b.n	8010d68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2201      	movs	r2, #1
 8010d10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2224      	movs	r2, #36	@ 0x24
 8010d18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	681a      	ldr	r2, [r3, #0]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	f022 0201 	bic.w	r2, r2, #1
 8010d32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	689b      	ldr	r3, [r3, #8]
 8010d3a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	683a      	ldr	r2, [r7, #0]
 8010d44:	430a      	orrs	r2, r1
 8010d46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f000 f84f 	bl	8010dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	68fa      	ldr	r2, [r7, #12]
 8010d54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2220      	movs	r2, #32
 8010d5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2200      	movs	r2, #0
 8010d62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010d66:	2300      	movs	r3, #0
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3710      	adds	r7, #16
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}

08010d70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b084      	sub	sp, #16
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
 8010d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	d101      	bne.n	8010d88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010d84:	2302      	movs	r3, #2
 8010d86:	e02d      	b.n	8010de4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2201      	movs	r2, #1
 8010d8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2224      	movs	r2, #36	@ 0x24
 8010d94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	681a      	ldr	r2, [r3, #0]
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	f022 0201 	bic.w	r2, r2, #1
 8010dae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	689b      	ldr	r3, [r3, #8]
 8010db6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	683a      	ldr	r2, [r7, #0]
 8010dc0:	430a      	orrs	r2, r1
 8010dc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f000 f811 	bl	8010dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	68fa      	ldr	r2, [r7, #12]
 8010dd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2220      	movs	r2, #32
 8010dd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010de2:	2300      	movs	r3, #0
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3710      	adds	r7, #16
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}

08010dec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b085      	sub	sp, #20
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d108      	bne.n	8010e0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2201      	movs	r2, #1
 8010e00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2201      	movs	r2, #1
 8010e08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010e0c:	e031      	b.n	8010e72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010e0e:	2308      	movs	r3, #8
 8010e10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010e12:	2308      	movs	r3, #8
 8010e14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	689b      	ldr	r3, [r3, #8]
 8010e1c:	0e5b      	lsrs	r3, r3, #25
 8010e1e:	b2db      	uxtb	r3, r3
 8010e20:	f003 0307 	and.w	r3, r3, #7
 8010e24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	689b      	ldr	r3, [r3, #8]
 8010e2c:	0f5b      	lsrs	r3, r3, #29
 8010e2e:	b2db      	uxtb	r3, r3
 8010e30:	f003 0307 	and.w	r3, r3, #7
 8010e34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010e36:	7bbb      	ldrb	r3, [r7, #14]
 8010e38:	7b3a      	ldrb	r2, [r7, #12]
 8010e3a:	4911      	ldr	r1, [pc, #68]	@ (8010e80 <UARTEx_SetNbDataToProcess+0x94>)
 8010e3c:	5c8a      	ldrb	r2, [r1, r2]
 8010e3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010e42:	7b3a      	ldrb	r2, [r7, #12]
 8010e44:	490f      	ldr	r1, [pc, #60]	@ (8010e84 <UARTEx_SetNbDataToProcess+0x98>)
 8010e46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010e48:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e4c:	b29a      	uxth	r2, r3
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010e54:	7bfb      	ldrb	r3, [r7, #15]
 8010e56:	7b7a      	ldrb	r2, [r7, #13]
 8010e58:	4909      	ldr	r1, [pc, #36]	@ (8010e80 <UARTEx_SetNbDataToProcess+0x94>)
 8010e5a:	5c8a      	ldrb	r2, [r1, r2]
 8010e5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010e60:	7b7a      	ldrb	r2, [r7, #13]
 8010e62:	4908      	ldr	r1, [pc, #32]	@ (8010e84 <UARTEx_SetNbDataToProcess+0x98>)
 8010e64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010e66:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e6a:	b29a      	uxth	r2, r3
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010e72:	bf00      	nop
 8010e74:	3714      	adds	r7, #20
 8010e76:	46bd      	mov	sp, r7
 8010e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7c:	4770      	bx	lr
 8010e7e:	bf00      	nop
 8010e80:	08021df4 	.word	0x08021df4
 8010e84:	08021dfc 	.word	0x08021dfc

08010e88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8010e88:	b480      	push	{r7}
 8010e8a:	b085      	sub	sp, #20
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2200      	movs	r2, #0
 8010e94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010e98:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8010e9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	b29a      	uxth	r2, r3
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8010ea8:	2300      	movs	r3, #0
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3714      	adds	r7, #20
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb4:	4770      	bx	lr

08010eb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8010eb6:	b480      	push	{r7}
 8010eb8:	b085      	sub	sp, #20
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010ebe:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8010ec2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8010eca:	b29a      	uxth	r2, r3
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	b29b      	uxth	r3, r3
 8010ed0:	43db      	mvns	r3, r3
 8010ed2:	b29b      	uxth	r3, r3
 8010ed4:	4013      	ands	r3, r2
 8010ed6:	b29a      	uxth	r2, r3
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8010ede:	2300      	movs	r3, #0
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3714      	adds	r7, #20
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr

08010eec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8010eec:	b480      	push	{r7}
 8010eee:	b085      	sub	sp, #20
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	60f8      	str	r0, [r7, #12]
 8010ef4:	1d3b      	adds	r3, r7, #4
 8010ef6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	2201      	movs	r2, #1
 8010efe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	2200      	movs	r2, #0
 8010f06:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	2200      	movs	r2, #0
 8010f16:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8010f1a:	2300      	movs	r3, #0
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3714      	adds	r7, #20
 8010f20:	46bd      	mov	sp, r7
 8010f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f26:	4770      	bx	lr

08010f28 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b0a7      	sub	sp, #156	@ 0x9c
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
 8010f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8010f32:	2300      	movs	r3, #0
 8010f34:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8010f38:	687a      	ldr	r2, [r7, #4]
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	4413      	add	r3, r2
 8010f42:	881b      	ldrh	r3, [r3, #0]
 8010f44:	b29b      	uxth	r3, r3
 8010f46:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8010f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010f4e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	78db      	ldrb	r3, [r3, #3]
 8010f56:	2b03      	cmp	r3, #3
 8010f58:	d81f      	bhi.n	8010f9a <USB_ActivateEndpoint+0x72>
 8010f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8010f60 <USB_ActivateEndpoint+0x38>)
 8010f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f60:	08010f71 	.word	0x08010f71
 8010f64:	08010f8d 	.word	0x08010f8d
 8010f68:	08010fa3 	.word	0x08010fa3
 8010f6c:	08010f7f 	.word	0x08010f7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8010f70:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010f74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010f78:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8010f7c:	e012      	b.n	8010fa4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8010f7e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010f82:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8010f86:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8010f8a:	e00b      	b.n	8010fa4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8010f8c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010f90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8010f94:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8010f98:	e004      	b.n	8010fa4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8010fa0:	e000      	b.n	8010fa4 <USB_ActivateEndpoint+0x7c>
      break;
 8010fa2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8010fa4:	687a      	ldr	r2, [r7, #4]
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	781b      	ldrb	r3, [r3, #0]
 8010faa:	009b      	lsls	r3, r3, #2
 8010fac:	441a      	add	r2, r3
 8010fae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010fb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010fc2:	b29b      	uxth	r3, r3
 8010fc4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8010fc6:	687a      	ldr	r2, [r7, #4]
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	781b      	ldrb	r3, [r3, #0]
 8010fcc:	009b      	lsls	r3, r3, #2
 8010fce:	4413      	add	r3, r2
 8010fd0:	881b      	ldrh	r3, [r3, #0]
 8010fd2:	b29b      	uxth	r3, r3
 8010fd4:	b21b      	sxth	r3, r3
 8010fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010fde:	b21a      	sxth	r2, r3
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	781b      	ldrb	r3, [r3, #0]
 8010fe4:	b21b      	sxth	r3, r3
 8010fe6:	4313      	orrs	r3, r2
 8010fe8:	b21b      	sxth	r3, r3
 8010fea:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8010fee:	687a      	ldr	r2, [r7, #4]
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	781b      	ldrb	r3, [r3, #0]
 8010ff4:	009b      	lsls	r3, r3, #2
 8010ff6:	441a      	add	r2, r3
 8010ff8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8010ffc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011000:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011004:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801100c:	b29b      	uxth	r3, r3
 801100e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	7b1b      	ldrb	r3, [r3, #12]
 8011014:	2b00      	cmp	r3, #0
 8011016:	f040 8180 	bne.w	801131a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	785b      	ldrb	r3, [r3, #1]
 801101e:	2b00      	cmp	r3, #0
 8011020:	f000 8084 	beq.w	801112c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	61bb      	str	r3, [r7, #24]
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801102e:	b29b      	uxth	r3, r3
 8011030:	461a      	mov	r2, r3
 8011032:	69bb      	ldr	r3, [r7, #24]
 8011034:	4413      	add	r3, r2
 8011036:	61bb      	str	r3, [r7, #24]
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	781b      	ldrb	r3, [r3, #0]
 801103c:	00da      	lsls	r2, r3, #3
 801103e:	69bb      	ldr	r3, [r7, #24]
 8011040:	4413      	add	r3, r2
 8011042:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011046:	617b      	str	r3, [r7, #20]
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	88db      	ldrh	r3, [r3, #6]
 801104c:	085b      	lsrs	r3, r3, #1
 801104e:	b29b      	uxth	r3, r3
 8011050:	005b      	lsls	r3, r3, #1
 8011052:	b29a      	uxth	r2, r3
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011058:	687a      	ldr	r2, [r7, #4]
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	009b      	lsls	r3, r3, #2
 8011060:	4413      	add	r3, r2
 8011062:	881b      	ldrh	r3, [r3, #0]
 8011064:	827b      	strh	r3, [r7, #18]
 8011066:	8a7b      	ldrh	r3, [r7, #18]
 8011068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801106c:	2b00      	cmp	r3, #0
 801106e:	d01b      	beq.n	80110a8 <USB_ActivateEndpoint+0x180>
 8011070:	687a      	ldr	r2, [r7, #4]
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	781b      	ldrb	r3, [r3, #0]
 8011076:	009b      	lsls	r3, r3, #2
 8011078:	4413      	add	r3, r2
 801107a:	881b      	ldrh	r3, [r3, #0]
 801107c:	b29b      	uxth	r3, r3
 801107e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011086:	823b      	strh	r3, [r7, #16]
 8011088:	687a      	ldr	r2, [r7, #4]
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	781b      	ldrb	r3, [r3, #0]
 801108e:	009b      	lsls	r3, r3, #2
 8011090:	441a      	add	r2, r3
 8011092:	8a3b      	ldrh	r3, [r7, #16]
 8011094:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011098:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801109c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80110a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80110a4:	b29b      	uxth	r3, r3
 80110a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	78db      	ldrb	r3, [r3, #3]
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d020      	beq.n	80110f2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80110b0:	687a      	ldr	r2, [r7, #4]
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	781b      	ldrb	r3, [r3, #0]
 80110b6:	009b      	lsls	r3, r3, #2
 80110b8:	4413      	add	r3, r2
 80110ba:	881b      	ldrh	r3, [r3, #0]
 80110bc:	b29b      	uxth	r3, r3
 80110be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80110c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80110c6:	81bb      	strh	r3, [r7, #12]
 80110c8:	89bb      	ldrh	r3, [r7, #12]
 80110ca:	f083 0320 	eor.w	r3, r3, #32
 80110ce:	81bb      	strh	r3, [r7, #12]
 80110d0:	687a      	ldr	r2, [r7, #4]
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	009b      	lsls	r3, r3, #2
 80110d8:	441a      	add	r2, r3
 80110da:	89bb      	ldrh	r3, [r7, #12]
 80110dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80110e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80110e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80110e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110ec:	b29b      	uxth	r3, r3
 80110ee:	8013      	strh	r3, [r2, #0]
 80110f0:	e3f9      	b.n	80118e6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80110f2:	687a      	ldr	r2, [r7, #4]
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	009b      	lsls	r3, r3, #2
 80110fa:	4413      	add	r3, r2
 80110fc:	881b      	ldrh	r3, [r3, #0]
 80110fe:	b29b      	uxth	r3, r3
 8011100:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011108:	81fb      	strh	r3, [r7, #14]
 801110a:	687a      	ldr	r2, [r7, #4]
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	009b      	lsls	r3, r3, #2
 8011112:	441a      	add	r2, r3
 8011114:	89fb      	ldrh	r3, [r7, #14]
 8011116:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801111a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801111e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011126:	b29b      	uxth	r3, r3
 8011128:	8013      	strh	r3, [r2, #0]
 801112a:	e3dc      	b.n	80118e6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011136:	b29b      	uxth	r3, r3
 8011138:	461a      	mov	r2, r3
 801113a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801113c:	4413      	add	r3, r2
 801113e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	781b      	ldrb	r3, [r3, #0]
 8011144:	00da      	lsls	r2, r3, #3
 8011146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011148:	4413      	add	r3, r2
 801114a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	88db      	ldrh	r3, [r3, #6]
 8011154:	085b      	lsrs	r3, r3, #1
 8011156:	b29b      	uxth	r3, r3
 8011158:	005b      	lsls	r3, r3, #1
 801115a:	b29a      	uxth	r2, r3
 801115c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801115e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801116a:	b29b      	uxth	r3, r3
 801116c:	461a      	mov	r2, r3
 801116e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011170:	4413      	add	r3, r2
 8011172:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	00da      	lsls	r2, r3, #3
 801117a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801117c:	4413      	add	r3, r2
 801117e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011182:	627b      	str	r3, [r7, #36]	@ 0x24
 8011184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011186:	881b      	ldrh	r3, [r3, #0]
 8011188:	b29b      	uxth	r3, r3
 801118a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801118e:	b29a      	uxth	r2, r3
 8011190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011192:	801a      	strh	r2, [r3, #0]
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	691b      	ldr	r3, [r3, #16]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d10a      	bne.n	80111b2 <USB_ActivateEndpoint+0x28a>
 801119c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801119e:	881b      	ldrh	r3, [r3, #0]
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111aa:	b29a      	uxth	r2, r3
 80111ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ae:	801a      	strh	r2, [r3, #0]
 80111b0:	e041      	b.n	8011236 <USB_ActivateEndpoint+0x30e>
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	691b      	ldr	r3, [r3, #16]
 80111b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80111b8:	d81c      	bhi.n	80111f4 <USB_ActivateEndpoint+0x2cc>
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	691b      	ldr	r3, [r3, #16]
 80111be:	085b      	lsrs	r3, r3, #1
 80111c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	691b      	ldr	r3, [r3, #16]
 80111c8:	f003 0301 	and.w	r3, r3, #1
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d004      	beq.n	80111da <USB_ActivateEndpoint+0x2b2>
 80111d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80111d4:	3301      	adds	r3, #1
 80111d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80111da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111dc:	881b      	ldrh	r3, [r3, #0]
 80111de:	b29a      	uxth	r2, r3
 80111e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80111e4:	b29b      	uxth	r3, r3
 80111e6:	029b      	lsls	r3, r3, #10
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	4313      	orrs	r3, r2
 80111ec:	b29a      	uxth	r2, r3
 80111ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111f0:	801a      	strh	r2, [r3, #0]
 80111f2:	e020      	b.n	8011236 <USB_ActivateEndpoint+0x30e>
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	691b      	ldr	r3, [r3, #16]
 80111f8:	095b      	lsrs	r3, r3, #5
 80111fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	691b      	ldr	r3, [r3, #16]
 8011202:	f003 031f 	and.w	r3, r3, #31
 8011206:	2b00      	cmp	r3, #0
 8011208:	d104      	bne.n	8011214 <USB_ActivateEndpoint+0x2ec>
 801120a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801120e:	3b01      	subs	r3, #1
 8011210:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011216:	881b      	ldrh	r3, [r3, #0]
 8011218:	b29a      	uxth	r2, r3
 801121a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801121e:	b29b      	uxth	r3, r3
 8011220:	029b      	lsls	r3, r3, #10
 8011222:	b29b      	uxth	r3, r3
 8011224:	4313      	orrs	r3, r2
 8011226:	b29b      	uxth	r3, r3
 8011228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801122c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011230:	b29a      	uxth	r2, r3
 8011232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011234:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011236:	687a      	ldr	r2, [r7, #4]
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	009b      	lsls	r3, r3, #2
 801123e:	4413      	add	r3, r2
 8011240:	881b      	ldrh	r3, [r3, #0]
 8011242:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011244:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801124a:	2b00      	cmp	r3, #0
 801124c:	d01b      	beq.n	8011286 <USB_ActivateEndpoint+0x35e>
 801124e:	687a      	ldr	r2, [r7, #4]
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	009b      	lsls	r3, r3, #2
 8011256:	4413      	add	r3, r2
 8011258:	881b      	ldrh	r3, [r3, #0]
 801125a:	b29b      	uxth	r3, r3
 801125c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011264:	843b      	strh	r3, [r7, #32]
 8011266:	687a      	ldr	r2, [r7, #4]
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	009b      	lsls	r3, r3, #2
 801126e:	441a      	add	r2, r3
 8011270:	8c3b      	ldrh	r3, [r7, #32]
 8011272:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011276:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801127a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801127e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011282:	b29b      	uxth	r3, r3
 8011284:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d124      	bne.n	80112d8 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	009b      	lsls	r3, r3, #2
 8011296:	4413      	add	r3, r2
 8011298:	881b      	ldrh	r3, [r3, #0]
 801129a:	b29b      	uxth	r3, r3
 801129c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80112a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80112a4:	83bb      	strh	r3, [r7, #28]
 80112a6:	8bbb      	ldrh	r3, [r7, #28]
 80112a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80112ac:	83bb      	strh	r3, [r7, #28]
 80112ae:	8bbb      	ldrh	r3, [r7, #28]
 80112b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80112b4:	83bb      	strh	r3, [r7, #28]
 80112b6:	687a      	ldr	r2, [r7, #4]
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	781b      	ldrb	r3, [r3, #0]
 80112bc:	009b      	lsls	r3, r3, #2
 80112be:	441a      	add	r2, r3
 80112c0:	8bbb      	ldrh	r3, [r7, #28]
 80112c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80112c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80112ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80112ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	8013      	strh	r3, [r2, #0]
 80112d6:	e306      	b.n	80118e6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80112d8:	687a      	ldr	r2, [r7, #4]
 80112da:	683b      	ldr	r3, [r7, #0]
 80112dc:	781b      	ldrb	r3, [r3, #0]
 80112de:	009b      	lsls	r3, r3, #2
 80112e0:	4413      	add	r3, r2
 80112e2:	881b      	ldrh	r3, [r3, #0]
 80112e4:	b29b      	uxth	r3, r3
 80112e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80112ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80112ee:	83fb      	strh	r3, [r7, #30]
 80112f0:	8bfb      	ldrh	r3, [r7, #30]
 80112f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80112f6:	83fb      	strh	r3, [r7, #30]
 80112f8:	687a      	ldr	r2, [r7, #4]
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	009b      	lsls	r3, r3, #2
 8011300:	441a      	add	r2, r3
 8011302:	8bfb      	ldrh	r3, [r7, #30]
 8011304:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011308:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801130c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011314:	b29b      	uxth	r3, r3
 8011316:	8013      	strh	r3, [r2, #0]
 8011318:	e2e5      	b.n	80118e6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	78db      	ldrb	r3, [r3, #3]
 801131e:	2b02      	cmp	r3, #2
 8011320:	d11e      	bne.n	8011360 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	781b      	ldrb	r3, [r3, #0]
 8011328:	009b      	lsls	r3, r3, #2
 801132a:	4413      	add	r3, r2
 801132c:	881b      	ldrh	r3, [r3, #0]
 801132e:	b29b      	uxth	r3, r3
 8011330:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011338:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 801133c:	687a      	ldr	r2, [r7, #4]
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	781b      	ldrb	r3, [r3, #0]
 8011342:	009b      	lsls	r3, r3, #2
 8011344:	441a      	add	r2, r3
 8011346:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 801134a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801134e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011352:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801135a:	b29b      	uxth	r3, r3
 801135c:	8013      	strh	r3, [r2, #0]
 801135e:	e01d      	b.n	801139c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011360:	687a      	ldr	r2, [r7, #4]
 8011362:	683b      	ldr	r3, [r7, #0]
 8011364:	781b      	ldrb	r3, [r3, #0]
 8011366:	009b      	lsls	r3, r3, #2
 8011368:	4413      	add	r3, r2
 801136a:	881b      	ldrh	r3, [r3, #0]
 801136c:	b29b      	uxth	r3, r3
 801136e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8011372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011376:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 801137a:	687a      	ldr	r2, [r7, #4]
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	781b      	ldrb	r3, [r3, #0]
 8011380:	009b      	lsls	r3, r3, #2
 8011382:	441a      	add	r2, r3
 8011384:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8011388:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801138c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011390:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011398:	b29b      	uxth	r3, r3
 801139a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80113a6:	b29b      	uxth	r3, r3
 80113a8:	461a      	mov	r2, r3
 80113aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80113ac:	4413      	add	r3, r2
 80113ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	00da      	lsls	r2, r3, #3
 80113b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80113b8:	4413      	add	r3, r2
 80113ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80113be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	891b      	ldrh	r3, [r3, #8]
 80113c4:	085b      	lsrs	r3, r3, #1
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	005b      	lsls	r3, r3, #1
 80113ca:	b29a      	uxth	r2, r3
 80113cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80113ce:	801a      	strh	r2, [r3, #0]
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80113da:	b29b      	uxth	r3, r3
 80113dc:	461a      	mov	r2, r3
 80113de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80113e0:	4413      	add	r3, r2
 80113e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	00da      	lsls	r2, r3, #3
 80113ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80113ec:	4413      	add	r3, r2
 80113ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80113f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	895b      	ldrh	r3, [r3, #10]
 80113f8:	085b      	lsrs	r3, r3, #1
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	005b      	lsls	r3, r3, #1
 80113fe:	b29a      	uxth	r2, r3
 8011400:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011402:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	785b      	ldrb	r3, [r3, #1]
 8011408:	2b00      	cmp	r3, #0
 801140a:	f040 81af 	bne.w	801176c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801140e:	687a      	ldr	r2, [r7, #4]
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	4413      	add	r3, r2
 8011418:	881b      	ldrh	r3, [r3, #0]
 801141a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 801141e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8011422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011426:	2b00      	cmp	r3, #0
 8011428:	d01d      	beq.n	8011466 <USB_ActivateEndpoint+0x53e>
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	009b      	lsls	r3, r3, #2
 8011432:	4413      	add	r3, r2
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	b29b      	uxth	r3, r3
 8011438:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801143c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011440:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8011444:	687a      	ldr	r2, [r7, #4]
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	781b      	ldrb	r3, [r3, #0]
 801144a:	009b      	lsls	r3, r3, #2
 801144c:	441a      	add	r2, r3
 801144e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8011452:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011456:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801145a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801145e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011462:	b29b      	uxth	r3, r3
 8011464:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	781b      	ldrb	r3, [r3, #0]
 801146c:	009b      	lsls	r3, r3, #2
 801146e:	4413      	add	r3, r2
 8011470:	881b      	ldrh	r3, [r3, #0]
 8011472:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8011476:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801147a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801147e:	2b00      	cmp	r3, #0
 8011480:	d01d      	beq.n	80114be <USB_ActivateEndpoint+0x596>
 8011482:	687a      	ldr	r2, [r7, #4]
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	009b      	lsls	r3, r3, #2
 801148a:	4413      	add	r3, r2
 801148c:	881b      	ldrh	r3, [r3, #0]
 801148e:	b29b      	uxth	r3, r3
 8011490:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011498:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 801149c:	687a      	ldr	r2, [r7, #4]
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	781b      	ldrb	r3, [r3, #0]
 80114a2:	009b      	lsls	r3, r3, #2
 80114a4:	441a      	add	r2, r3
 80114a6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80114aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80114ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80114b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80114b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80114ba:	b29b      	uxth	r3, r3
 80114bc:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	785b      	ldrb	r3, [r3, #1]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d16b      	bne.n	801159e <USB_ActivateEndpoint+0x676>
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	461a      	mov	r2, r3
 80114d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114d6:	4413      	add	r3, r2
 80114d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80114da:	683b      	ldr	r3, [r7, #0]
 80114dc:	781b      	ldrb	r3, [r3, #0]
 80114de:	00da      	lsls	r2, r3, #3
 80114e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114e2:	4413      	add	r3, r2
 80114e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80114e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80114ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80114ec:	881b      	ldrh	r3, [r3, #0]
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80114f4:	b29a      	uxth	r2, r3
 80114f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80114f8:	801a      	strh	r2, [r3, #0]
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	691b      	ldr	r3, [r3, #16]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d10a      	bne.n	8011518 <USB_ActivateEndpoint+0x5f0>
 8011502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011504:	881b      	ldrh	r3, [r3, #0]
 8011506:	b29b      	uxth	r3, r3
 8011508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801150c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011510:	b29a      	uxth	r2, r3
 8011512:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011514:	801a      	strh	r2, [r3, #0]
 8011516:	e05d      	b.n	80115d4 <USB_ActivateEndpoint+0x6ac>
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	691b      	ldr	r3, [r3, #16]
 801151c:	2b3e      	cmp	r3, #62	@ 0x3e
 801151e:	d81c      	bhi.n	801155a <USB_ActivateEndpoint+0x632>
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	691b      	ldr	r3, [r3, #16]
 8011524:	085b      	lsrs	r3, r3, #1
 8011526:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	691b      	ldr	r3, [r3, #16]
 801152e:	f003 0301 	and.w	r3, r3, #1
 8011532:	2b00      	cmp	r3, #0
 8011534:	d004      	beq.n	8011540 <USB_ActivateEndpoint+0x618>
 8011536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801153a:	3301      	adds	r3, #1
 801153c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011540:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011542:	881b      	ldrh	r3, [r3, #0]
 8011544:	b29a      	uxth	r2, r3
 8011546:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801154a:	b29b      	uxth	r3, r3
 801154c:	029b      	lsls	r3, r3, #10
 801154e:	b29b      	uxth	r3, r3
 8011550:	4313      	orrs	r3, r2
 8011552:	b29a      	uxth	r2, r3
 8011554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011556:	801a      	strh	r2, [r3, #0]
 8011558:	e03c      	b.n	80115d4 <USB_ActivateEndpoint+0x6ac>
 801155a:	683b      	ldr	r3, [r7, #0]
 801155c:	691b      	ldr	r3, [r3, #16]
 801155e:	095b      	lsrs	r3, r3, #5
 8011560:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	691b      	ldr	r3, [r3, #16]
 8011568:	f003 031f 	and.w	r3, r3, #31
 801156c:	2b00      	cmp	r3, #0
 801156e:	d104      	bne.n	801157a <USB_ActivateEndpoint+0x652>
 8011570:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011574:	3b01      	subs	r3, #1
 8011576:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801157a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801157c:	881b      	ldrh	r3, [r3, #0]
 801157e:	b29a      	uxth	r2, r3
 8011580:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011584:	b29b      	uxth	r3, r3
 8011586:	029b      	lsls	r3, r3, #10
 8011588:	b29b      	uxth	r3, r3
 801158a:	4313      	orrs	r3, r2
 801158c:	b29b      	uxth	r3, r3
 801158e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011596:	b29a      	uxth	r2, r3
 8011598:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801159a:	801a      	strh	r2, [r3, #0]
 801159c:	e01a      	b.n	80115d4 <USB_ActivateEndpoint+0x6ac>
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	785b      	ldrb	r3, [r3, #1]
 80115a2:	2b01      	cmp	r3, #1
 80115a4:	d116      	bne.n	80115d4 <USB_ActivateEndpoint+0x6ac>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80115b0:	b29b      	uxth	r3, r3
 80115b2:	461a      	mov	r2, r3
 80115b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80115b6:	4413      	add	r3, r2
 80115b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	00da      	lsls	r2, r3, #3
 80115c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80115c2:	4413      	add	r3, r2
 80115c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80115c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	691b      	ldr	r3, [r3, #16]
 80115ce:	b29a      	uxth	r2, r3
 80115d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115d2:	801a      	strh	r2, [r3, #0]
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	785b      	ldrb	r3, [r3, #1]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d16b      	bne.n	80116b8 <USB_ActivateEndpoint+0x790>
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80115ea:	b29b      	uxth	r3, r3
 80115ec:	461a      	mov	r2, r3
 80115ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115f0:	4413      	add	r3, r2
 80115f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	781b      	ldrb	r3, [r3, #0]
 80115f8:	00da      	lsls	r2, r3, #3
 80115fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115fc:	4413      	add	r3, r2
 80115fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011602:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011606:	881b      	ldrh	r3, [r3, #0]
 8011608:	b29b      	uxth	r3, r3
 801160a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801160e:	b29a      	uxth	r2, r3
 8011610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011612:	801a      	strh	r2, [r3, #0]
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	691b      	ldr	r3, [r3, #16]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d10a      	bne.n	8011632 <USB_ActivateEndpoint+0x70a>
 801161c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801161e:	881b      	ldrh	r3, [r3, #0]
 8011620:	b29b      	uxth	r3, r3
 8011622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801162a:	b29a      	uxth	r2, r3
 801162c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801162e:	801a      	strh	r2, [r3, #0]
 8011630:	e05b      	b.n	80116ea <USB_ActivateEndpoint+0x7c2>
 8011632:	683b      	ldr	r3, [r7, #0]
 8011634:	691b      	ldr	r3, [r3, #16]
 8011636:	2b3e      	cmp	r3, #62	@ 0x3e
 8011638:	d81c      	bhi.n	8011674 <USB_ActivateEndpoint+0x74c>
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	691b      	ldr	r3, [r3, #16]
 801163e:	085b      	lsrs	r3, r3, #1
 8011640:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	691b      	ldr	r3, [r3, #16]
 8011648:	f003 0301 	and.w	r3, r3, #1
 801164c:	2b00      	cmp	r3, #0
 801164e:	d004      	beq.n	801165a <USB_ActivateEndpoint+0x732>
 8011650:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011654:	3301      	adds	r3, #1
 8011656:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801165a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801165c:	881b      	ldrh	r3, [r3, #0]
 801165e:	b29a      	uxth	r2, r3
 8011660:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011664:	b29b      	uxth	r3, r3
 8011666:	029b      	lsls	r3, r3, #10
 8011668:	b29b      	uxth	r3, r3
 801166a:	4313      	orrs	r3, r2
 801166c:	b29a      	uxth	r2, r3
 801166e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011670:	801a      	strh	r2, [r3, #0]
 8011672:	e03a      	b.n	80116ea <USB_ActivateEndpoint+0x7c2>
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	691b      	ldr	r3, [r3, #16]
 8011678:	095b      	lsrs	r3, r3, #5
 801167a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	691b      	ldr	r3, [r3, #16]
 8011682:	f003 031f 	and.w	r3, r3, #31
 8011686:	2b00      	cmp	r3, #0
 8011688:	d104      	bne.n	8011694 <USB_ActivateEndpoint+0x76c>
 801168a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801168e:	3b01      	subs	r3, #1
 8011690:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011696:	881b      	ldrh	r3, [r3, #0]
 8011698:	b29a      	uxth	r2, r3
 801169a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801169e:	b29b      	uxth	r3, r3
 80116a0:	029b      	lsls	r3, r3, #10
 80116a2:	b29b      	uxth	r3, r3
 80116a4:	4313      	orrs	r3, r2
 80116a6:	b29b      	uxth	r3, r3
 80116a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116b0:	b29a      	uxth	r2, r3
 80116b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116b4:	801a      	strh	r2, [r3, #0]
 80116b6:	e018      	b.n	80116ea <USB_ActivateEndpoint+0x7c2>
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	785b      	ldrb	r3, [r3, #1]
 80116bc:	2b01      	cmp	r3, #1
 80116be:	d114      	bne.n	80116ea <USB_ActivateEndpoint+0x7c2>
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80116c6:	b29b      	uxth	r3, r3
 80116c8:	461a      	mov	r2, r3
 80116ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116cc:	4413      	add	r3, r2
 80116ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	00da      	lsls	r2, r3, #3
 80116d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116d8:	4413      	add	r3, r2
 80116da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80116de:	643b      	str	r3, [r7, #64]	@ 0x40
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	691b      	ldr	r3, [r3, #16]
 80116e4:	b29a      	uxth	r2, r3
 80116e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116e8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80116ea:	687a      	ldr	r2, [r7, #4]
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	781b      	ldrb	r3, [r3, #0]
 80116f0:	009b      	lsls	r3, r3, #2
 80116f2:	4413      	add	r3, r2
 80116f4:	881b      	ldrh	r3, [r3, #0]
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80116fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011700:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011702:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011704:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011708:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801170a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801170c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011710:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011712:	687a      	ldr	r2, [r7, #4]
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	009b      	lsls	r3, r3, #2
 801171a:	441a      	add	r2, r3
 801171c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801171e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011722:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801172a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801172e:	b29b      	uxth	r3, r3
 8011730:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011732:	687a      	ldr	r2, [r7, #4]
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	009b      	lsls	r3, r3, #2
 801173a:	4413      	add	r3, r2
 801173c:	881b      	ldrh	r3, [r3, #0]
 801173e:	b29b      	uxth	r3, r3
 8011740:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011744:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011748:	86bb      	strh	r3, [r7, #52]	@ 0x34
 801174a:	687a      	ldr	r2, [r7, #4]
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	781b      	ldrb	r3, [r3, #0]
 8011750:	009b      	lsls	r3, r3, #2
 8011752:	441a      	add	r2, r3
 8011754:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011756:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801175a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801175e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011766:	b29b      	uxth	r3, r3
 8011768:	8013      	strh	r3, [r2, #0]
 801176a:	e0bc      	b.n	80118e6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801176c:	687a      	ldr	r2, [r7, #4]
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	009b      	lsls	r3, r3, #2
 8011774:	4413      	add	r3, r2
 8011776:	881b      	ldrh	r3, [r3, #0]
 8011778:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 801177c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8011780:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011784:	2b00      	cmp	r3, #0
 8011786:	d01d      	beq.n	80117c4 <USB_ActivateEndpoint+0x89c>
 8011788:	687a      	ldr	r2, [r7, #4]
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	009b      	lsls	r3, r3, #2
 8011790:	4413      	add	r3, r2
 8011792:	881b      	ldrh	r3, [r3, #0]
 8011794:	b29b      	uxth	r3, r3
 8011796:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801179a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801179e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80117a2:	687a      	ldr	r2, [r7, #4]
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	781b      	ldrb	r3, [r3, #0]
 80117a8:	009b      	lsls	r3, r3, #2
 80117aa:	441a      	add	r2, r3
 80117ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80117b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80117b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80117b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80117bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117c0:	b29b      	uxth	r3, r3
 80117c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	781b      	ldrb	r3, [r3, #0]
 80117ca:	009b      	lsls	r3, r3, #2
 80117cc:	4413      	add	r3, r2
 80117ce:	881b      	ldrh	r3, [r3, #0]
 80117d0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80117d4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80117d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d01d      	beq.n	801181c <USB_ActivateEndpoint+0x8f4>
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	009b      	lsls	r3, r3, #2
 80117e8:	4413      	add	r3, r2
 80117ea:	881b      	ldrh	r3, [r3, #0]
 80117ec:	b29b      	uxth	r3, r3
 80117ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80117f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80117f6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80117fa:	687a      	ldr	r2, [r7, #4]
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	781b      	ldrb	r3, [r3, #0]
 8011800:	009b      	lsls	r3, r3, #2
 8011802:	441a      	add	r2, r3
 8011804:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8011808:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801180c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011810:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011814:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011818:	b29b      	uxth	r3, r3
 801181a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	78db      	ldrb	r3, [r3, #3]
 8011820:	2b01      	cmp	r3, #1
 8011822:	d024      	beq.n	801186e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	009b      	lsls	r3, r3, #2
 801182c:	4413      	add	r3, r2
 801182e:	881b      	ldrh	r3, [r3, #0]
 8011830:	b29b      	uxth	r3, r3
 8011832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011836:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801183a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 801183e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011842:	f083 0320 	eor.w	r3, r3, #32
 8011846:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 801184a:	687a      	ldr	r2, [r7, #4]
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	009b      	lsls	r3, r3, #2
 8011852:	441a      	add	r2, r3
 8011854:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011858:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801185c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011860:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011868:	b29b      	uxth	r3, r3
 801186a:	8013      	strh	r3, [r2, #0]
 801186c:	e01d      	b.n	80118aa <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	781b      	ldrb	r3, [r3, #0]
 8011874:	009b      	lsls	r3, r3, #2
 8011876:	4413      	add	r3, r2
 8011878:	881b      	ldrh	r3, [r3, #0]
 801187a:	b29b      	uxth	r3, r3
 801187c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011880:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011884:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8011888:	687a      	ldr	r2, [r7, #4]
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	781b      	ldrb	r3, [r3, #0]
 801188e:	009b      	lsls	r3, r3, #2
 8011890:	441a      	add	r2, r3
 8011892:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8011896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801189a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801189e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80118a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118a6:	b29b      	uxth	r3, r3
 80118a8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80118aa:	687a      	ldr	r2, [r7, #4]
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	781b      	ldrb	r3, [r3, #0]
 80118b0:	009b      	lsls	r3, r3, #2
 80118b2:	4413      	add	r3, r2
 80118b4:	881b      	ldrh	r3, [r3, #0]
 80118b6:	b29b      	uxth	r3, r3
 80118b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80118bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80118c0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80118c4:	687a      	ldr	r2, [r7, #4]
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	781b      	ldrb	r3, [r3, #0]
 80118ca:	009b      	lsls	r3, r3, #2
 80118cc:	441a      	add	r2, r3
 80118ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80118d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80118d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80118da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80118de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80118e6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	379c      	adds	r7, #156	@ 0x9c
 80118ee:	46bd      	mov	sp, r7
 80118f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f4:	4770      	bx	lr
 80118f6:	bf00      	nop

080118f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80118f8:	b480      	push	{r7}
 80118fa:	b08d      	sub	sp, #52	@ 0x34
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
 8011900:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	7b1b      	ldrb	r3, [r3, #12]
 8011906:	2b00      	cmp	r3, #0
 8011908:	f040 808e 	bne.w	8011a28 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	785b      	ldrb	r3, [r3, #1]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d044      	beq.n	801199e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011914:	687a      	ldr	r2, [r7, #4]
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	781b      	ldrb	r3, [r3, #0]
 801191a:	009b      	lsls	r3, r3, #2
 801191c:	4413      	add	r3, r2
 801191e:	881b      	ldrh	r3, [r3, #0]
 8011920:	81bb      	strh	r3, [r7, #12]
 8011922:	89bb      	ldrh	r3, [r7, #12]
 8011924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011928:	2b00      	cmp	r3, #0
 801192a:	d01b      	beq.n	8011964 <USB_DeactivateEndpoint+0x6c>
 801192c:	687a      	ldr	r2, [r7, #4]
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	781b      	ldrb	r3, [r3, #0]
 8011932:	009b      	lsls	r3, r3, #2
 8011934:	4413      	add	r3, r2
 8011936:	881b      	ldrh	r3, [r3, #0]
 8011938:	b29b      	uxth	r3, r3
 801193a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801193e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011942:	817b      	strh	r3, [r7, #10]
 8011944:	687a      	ldr	r2, [r7, #4]
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	781b      	ldrb	r3, [r3, #0]
 801194a:	009b      	lsls	r3, r3, #2
 801194c:	441a      	add	r2, r3
 801194e:	897b      	ldrh	r3, [r7, #10]
 8011950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801195c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011960:	b29b      	uxth	r3, r3
 8011962:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011964:	687a      	ldr	r2, [r7, #4]
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	009b      	lsls	r3, r3, #2
 801196c:	4413      	add	r3, r2
 801196e:	881b      	ldrh	r3, [r3, #0]
 8011970:	b29b      	uxth	r3, r3
 8011972:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011976:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801197a:	813b      	strh	r3, [r7, #8]
 801197c:	687a      	ldr	r2, [r7, #4]
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	781b      	ldrb	r3, [r3, #0]
 8011982:	009b      	lsls	r3, r3, #2
 8011984:	441a      	add	r2, r3
 8011986:	893b      	ldrh	r3, [r7, #8]
 8011988:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801198c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011998:	b29b      	uxth	r3, r3
 801199a:	8013      	strh	r3, [r2, #0]
 801199c:	e192      	b.n	8011cc4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801199e:	687a      	ldr	r2, [r7, #4]
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	009b      	lsls	r3, r3, #2
 80119a6:	4413      	add	r3, r2
 80119a8:	881b      	ldrh	r3, [r3, #0]
 80119aa:	827b      	strh	r3, [r7, #18]
 80119ac:	8a7b      	ldrh	r3, [r7, #18]
 80119ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d01b      	beq.n	80119ee <USB_DeactivateEndpoint+0xf6>
 80119b6:	687a      	ldr	r2, [r7, #4]
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	781b      	ldrb	r3, [r3, #0]
 80119bc:	009b      	lsls	r3, r3, #2
 80119be:	4413      	add	r3, r2
 80119c0:	881b      	ldrh	r3, [r3, #0]
 80119c2:	b29b      	uxth	r3, r3
 80119c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80119c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80119cc:	823b      	strh	r3, [r7, #16]
 80119ce:	687a      	ldr	r2, [r7, #4]
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	009b      	lsls	r3, r3, #2
 80119d6:	441a      	add	r2, r3
 80119d8:	8a3b      	ldrh	r3, [r7, #16]
 80119da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80119de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80119e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80119e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80119ee:	687a      	ldr	r2, [r7, #4]
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	009b      	lsls	r3, r3, #2
 80119f6:	4413      	add	r3, r2
 80119f8:	881b      	ldrh	r3, [r3, #0]
 80119fa:	b29b      	uxth	r3, r3
 80119fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a04:	81fb      	strh	r3, [r7, #14]
 8011a06:	687a      	ldr	r2, [r7, #4]
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	781b      	ldrb	r3, [r3, #0]
 8011a0c:	009b      	lsls	r3, r3, #2
 8011a0e:	441a      	add	r2, r3
 8011a10:	89fb      	ldrh	r3, [r7, #14]
 8011a12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a22:	b29b      	uxth	r3, r3
 8011a24:	8013      	strh	r3, [r2, #0]
 8011a26:	e14d      	b.n	8011cc4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	785b      	ldrb	r3, [r3, #1]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	f040 80a5 	bne.w	8011b7c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011a32:	687a      	ldr	r2, [r7, #4]
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	781b      	ldrb	r3, [r3, #0]
 8011a38:	009b      	lsls	r3, r3, #2
 8011a3a:	4413      	add	r3, r2
 8011a3c:	881b      	ldrh	r3, [r3, #0]
 8011a3e:	843b      	strh	r3, [r7, #32]
 8011a40:	8c3b      	ldrh	r3, [r7, #32]
 8011a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d01b      	beq.n	8011a82 <USB_DeactivateEndpoint+0x18a>
 8011a4a:	687a      	ldr	r2, [r7, #4]
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	009b      	lsls	r3, r3, #2
 8011a52:	4413      	add	r3, r2
 8011a54:	881b      	ldrh	r3, [r3, #0]
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a60:	83fb      	strh	r3, [r7, #30]
 8011a62:	687a      	ldr	r2, [r7, #4]
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	781b      	ldrb	r3, [r3, #0]
 8011a68:	009b      	lsls	r3, r3, #2
 8011a6a:	441a      	add	r2, r3
 8011a6c:	8bfb      	ldrh	r3, [r7, #30]
 8011a6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011a82:	687a      	ldr	r2, [r7, #4]
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	781b      	ldrb	r3, [r3, #0]
 8011a88:	009b      	lsls	r3, r3, #2
 8011a8a:	4413      	add	r3, r2
 8011a8c:	881b      	ldrh	r3, [r3, #0]
 8011a8e:	83bb      	strh	r3, [r7, #28]
 8011a90:	8bbb      	ldrh	r3, [r7, #28]
 8011a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d01b      	beq.n	8011ad2 <USB_DeactivateEndpoint+0x1da>
 8011a9a:	687a      	ldr	r2, [r7, #4]
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	781b      	ldrb	r3, [r3, #0]
 8011aa0:	009b      	lsls	r3, r3, #2
 8011aa2:	4413      	add	r3, r2
 8011aa4:	881b      	ldrh	r3, [r3, #0]
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ab0:	837b      	strh	r3, [r7, #26]
 8011ab2:	687a      	ldr	r2, [r7, #4]
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	781b      	ldrb	r3, [r3, #0]
 8011ab8:	009b      	lsls	r3, r3, #2
 8011aba:	441a      	add	r2, r3
 8011abc:	8b7b      	ldrh	r3, [r7, #26]
 8011abe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011ac2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011aca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011ad2:	687a      	ldr	r2, [r7, #4]
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	009b      	lsls	r3, r3, #2
 8011ada:	4413      	add	r3, r2
 8011adc:	881b      	ldrh	r3, [r3, #0]
 8011ade:	b29b      	uxth	r3, r3
 8011ae0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ae8:	833b      	strh	r3, [r7, #24]
 8011aea:	687a      	ldr	r2, [r7, #4]
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	781b      	ldrb	r3, [r3, #0]
 8011af0:	009b      	lsls	r3, r3, #2
 8011af2:	441a      	add	r2, r3
 8011af4:	8b3b      	ldrh	r3, [r7, #24]
 8011af6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011afa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011afe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011b0a:	687a      	ldr	r2, [r7, #4]
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	781b      	ldrb	r3, [r3, #0]
 8011b10:	009b      	lsls	r3, r3, #2
 8011b12:	4413      	add	r3, r2
 8011b14:	881b      	ldrh	r3, [r3, #0]
 8011b16:	b29b      	uxth	r3, r3
 8011b18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b20:	82fb      	strh	r3, [r7, #22]
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	781b      	ldrb	r3, [r3, #0]
 8011b28:	009b      	lsls	r3, r3, #2
 8011b2a:	441a      	add	r2, r3
 8011b2c:	8afb      	ldrh	r3, [r7, #22]
 8011b2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011b42:	687a      	ldr	r2, [r7, #4]
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	009b      	lsls	r3, r3, #2
 8011b4a:	4413      	add	r3, r2
 8011b4c:	881b      	ldrh	r3, [r3, #0]
 8011b4e:	b29b      	uxth	r3, r3
 8011b50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011b58:	82bb      	strh	r3, [r7, #20]
 8011b5a:	687a      	ldr	r2, [r7, #4]
 8011b5c:	683b      	ldr	r3, [r7, #0]
 8011b5e:	781b      	ldrb	r3, [r3, #0]
 8011b60:	009b      	lsls	r3, r3, #2
 8011b62:	441a      	add	r2, r3
 8011b64:	8abb      	ldrh	r3, [r7, #20]
 8011b66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b76:	b29b      	uxth	r3, r3
 8011b78:	8013      	strh	r3, [r2, #0]
 8011b7a:	e0a3      	b.n	8011cc4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011b7c:	687a      	ldr	r2, [r7, #4]
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	009b      	lsls	r3, r3, #2
 8011b84:	4413      	add	r3, r2
 8011b86:	881b      	ldrh	r3, [r3, #0]
 8011b88:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8011b8a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011b8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d01b      	beq.n	8011bcc <USB_DeactivateEndpoint+0x2d4>
 8011b94:	687a      	ldr	r2, [r7, #4]
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	781b      	ldrb	r3, [r3, #0]
 8011b9a:	009b      	lsls	r3, r3, #2
 8011b9c:	4413      	add	r3, r2
 8011b9e:	881b      	ldrh	r3, [r3, #0]
 8011ba0:	b29b      	uxth	r3, r3
 8011ba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011baa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8011bac:	687a      	ldr	r2, [r7, #4]
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	781b      	ldrb	r3, [r3, #0]
 8011bb2:	009b      	lsls	r3, r3, #2
 8011bb4:	441a      	add	r2, r3
 8011bb6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011bb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011bbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011bc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011bcc:	687a      	ldr	r2, [r7, #4]
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	009b      	lsls	r3, r3, #2
 8011bd4:	4413      	add	r3, r2
 8011bd6:	881b      	ldrh	r3, [r3, #0]
 8011bd8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8011bda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d01b      	beq.n	8011c1c <USB_DeactivateEndpoint+0x324>
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	009b      	lsls	r3, r3, #2
 8011bec:	4413      	add	r3, r2
 8011bee:	881b      	ldrh	r3, [r3, #0]
 8011bf0:	b29b      	uxth	r3, r3
 8011bf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011bfa:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011bfc:	687a      	ldr	r2, [r7, #4]
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	009b      	lsls	r3, r3, #2
 8011c04:	441a      	add	r2, r3
 8011c06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011c08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011c18:	b29b      	uxth	r3, r3
 8011c1a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011c1c:	687a      	ldr	r2, [r7, #4]
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	009b      	lsls	r3, r3, #2
 8011c24:	4413      	add	r3, r2
 8011c26:	881b      	ldrh	r3, [r3, #0]
 8011c28:	b29b      	uxth	r3, r3
 8011c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c32:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011c34:	687a      	ldr	r2, [r7, #4]
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	009b      	lsls	r3, r3, #2
 8011c3c:	441a      	add	r2, r3
 8011c3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011c40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c50:	b29b      	uxth	r3, r3
 8011c52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011c54:	687a      	ldr	r2, [r7, #4]
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	781b      	ldrb	r3, [r3, #0]
 8011c5a:	009b      	lsls	r3, r3, #2
 8011c5c:	4413      	add	r3, r2
 8011c5e:	881b      	ldrh	r3, [r3, #0]
 8011c60:	b29b      	uxth	r3, r3
 8011c62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011c6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011c6c:	687a      	ldr	r2, [r7, #4]
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	781b      	ldrb	r3, [r3, #0]
 8011c72:	009b      	lsls	r3, r3, #2
 8011c74:	441a      	add	r2, r3
 8011c76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011c78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c88:	b29b      	uxth	r3, r3
 8011c8a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011c8c:	687a      	ldr	r2, [r7, #4]
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	781b      	ldrb	r3, [r3, #0]
 8011c92:	009b      	lsls	r3, r3, #2
 8011c94:	4413      	add	r3, r2
 8011c96:	881b      	ldrh	r3, [r3, #0]
 8011c98:	b29b      	uxth	r3, r3
 8011c9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ca2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011ca4:	687a      	ldr	r2, [r7, #4]
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	781b      	ldrb	r3, [r3, #0]
 8011caa:	009b      	lsls	r3, r3, #2
 8011cac:	441a      	add	r2, r3
 8011cae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011cb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011cb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011cbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cc0:	b29b      	uxth	r3, r3
 8011cc2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011cc4:	2300      	movs	r3, #0
}
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	3734      	adds	r7, #52	@ 0x34
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd0:	4770      	bx	lr

08011cd2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011cd2:	b580      	push	{r7, lr}
 8011cd4:	b0ac      	sub	sp, #176	@ 0xb0
 8011cd6:	af00      	add	r7, sp, #0
 8011cd8:	6078      	str	r0, [r7, #4]
 8011cda:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	785b      	ldrb	r3, [r3, #1]
 8011ce0:	2b01      	cmp	r3, #1
 8011ce2:	f040 84ca 	bne.w	801267a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	699a      	ldr	r2, [r3, #24]
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	691b      	ldr	r3, [r3, #16]
 8011cee:	429a      	cmp	r2, r3
 8011cf0:	d904      	bls.n	8011cfc <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	691b      	ldr	r3, [r3, #16]
 8011cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011cfa:	e003      	b.n	8011d04 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8011cfc:	683b      	ldr	r3, [r7, #0]
 8011cfe:	699b      	ldr	r3, [r3, #24]
 8011d00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	7b1b      	ldrb	r3, [r3, #12]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d122      	bne.n	8011d52 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	6959      	ldr	r1, [r3, #20]
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	88da      	ldrh	r2, [r3, #6]
 8011d14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011d18:	b29b      	uxth	r3, r3
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f000 febd 	bl	8012a9a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	613b      	str	r3, [r7, #16]
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011d2a:	b29b      	uxth	r3, r3
 8011d2c:	461a      	mov	r2, r3
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	4413      	add	r3, r2
 8011d32:	613b      	str	r3, [r7, #16]
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	781b      	ldrb	r3, [r3, #0]
 8011d38:	00da      	lsls	r2, r3, #3
 8011d3a:	693b      	ldr	r3, [r7, #16]
 8011d3c:	4413      	add	r3, r2
 8011d3e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011d42:	60fb      	str	r3, [r7, #12]
 8011d44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011d48:	b29a      	uxth	r2, r3
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	801a      	strh	r2, [r3, #0]
 8011d4e:	f000 bc6f 	b.w	8012630 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	78db      	ldrb	r3, [r3, #3]
 8011d56:	2b02      	cmp	r3, #2
 8011d58:	f040 831e 	bne.w	8012398 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	6a1a      	ldr	r2, [r3, #32]
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	691b      	ldr	r3, [r3, #16]
 8011d64:	429a      	cmp	r2, r3
 8011d66:	f240 82cf 	bls.w	8012308 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011d6a:	687a      	ldr	r2, [r7, #4]
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	009b      	lsls	r3, r3, #2
 8011d72:	4413      	add	r3, r2
 8011d74:	881b      	ldrh	r3, [r3, #0]
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d80:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8011d84:	687a      	ldr	r2, [r7, #4]
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	781b      	ldrb	r3, [r3, #0]
 8011d8a:	009b      	lsls	r3, r3, #2
 8011d8c:	441a      	add	r2, r3
 8011d8e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8011d92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d9a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011da2:	b29b      	uxth	r3, r3
 8011da4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	6a1a      	ldr	r2, [r3, #32]
 8011daa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011dae:	1ad2      	subs	r2, r2, r3
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011db4:	687a      	ldr	r2, [r7, #4]
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	4413      	add	r3, r2
 8011dbe:	881b      	ldrh	r3, [r3, #0]
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	f000 814f 	beq.w	801206a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	633b      	str	r3, [r7, #48]	@ 0x30
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	785b      	ldrb	r3, [r3, #1]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d16b      	bne.n	8011eb0 <USB_EPStartXfer+0x1de>
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011de2:	b29b      	uxth	r3, r3
 8011de4:	461a      	mov	r2, r3
 8011de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011de8:	4413      	add	r3, r2
 8011dea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	781b      	ldrb	r3, [r3, #0]
 8011df0:	00da      	lsls	r2, r3, #3
 8011df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011df4:	4413      	add	r3, r2
 8011df6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8011dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dfe:	881b      	ldrh	r3, [r3, #0]
 8011e00:	b29b      	uxth	r3, r3
 8011e02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011e06:	b29a      	uxth	r2, r3
 8011e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e0a:	801a      	strh	r2, [r3, #0]
 8011e0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d10a      	bne.n	8011e2a <USB_EPStartXfer+0x158>
 8011e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e16:	881b      	ldrh	r3, [r3, #0]
 8011e18:	b29b      	uxth	r3, r3
 8011e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e22:	b29a      	uxth	r2, r3
 8011e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e26:	801a      	strh	r2, [r3, #0]
 8011e28:	e05b      	b.n	8011ee2 <USB_EPStartXfer+0x210>
 8011e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8011e30:	d81c      	bhi.n	8011e6c <USB_EPStartXfer+0x19a>
 8011e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e36:	085b      	lsrs	r3, r3, #1
 8011e38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011e3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e40:	f003 0301 	and.w	r3, r3, #1
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d004      	beq.n	8011e52 <USB_EPStartXfer+0x180>
 8011e48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011e4c:	3301      	adds	r3, #1
 8011e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e54:	881b      	ldrh	r3, [r3, #0]
 8011e56:	b29a      	uxth	r2, r3
 8011e58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011e5c:	b29b      	uxth	r3, r3
 8011e5e:	029b      	lsls	r3, r3, #10
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	4313      	orrs	r3, r2
 8011e64:	b29a      	uxth	r2, r3
 8011e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e68:	801a      	strh	r2, [r3, #0]
 8011e6a:	e03a      	b.n	8011ee2 <USB_EPStartXfer+0x210>
 8011e6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e70:	095b      	lsrs	r3, r3, #5
 8011e72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e7a:	f003 031f 	and.w	r3, r3, #31
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d104      	bne.n	8011e8c <USB_EPStartXfer+0x1ba>
 8011e82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011e86:	3b01      	subs	r3, #1
 8011e88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e8e:	881b      	ldrh	r3, [r3, #0]
 8011e90:	b29a      	uxth	r2, r3
 8011e92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011e96:	b29b      	uxth	r3, r3
 8011e98:	029b      	lsls	r3, r3, #10
 8011e9a:	b29b      	uxth	r3, r3
 8011e9c:	4313      	orrs	r3, r2
 8011e9e:	b29b      	uxth	r3, r3
 8011ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011ea8:	b29a      	uxth	r2, r3
 8011eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eac:	801a      	strh	r2, [r3, #0]
 8011eae:	e018      	b.n	8011ee2 <USB_EPStartXfer+0x210>
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	785b      	ldrb	r3, [r3, #1]
 8011eb4:	2b01      	cmp	r3, #1
 8011eb6:	d114      	bne.n	8011ee2 <USB_EPStartXfer+0x210>
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011ebe:	b29b      	uxth	r3, r3
 8011ec0:	461a      	mov	r2, r3
 8011ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ec4:	4413      	add	r3, r2
 8011ec6:	633b      	str	r3, [r7, #48]	@ 0x30
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	781b      	ldrb	r3, [r3, #0]
 8011ecc:	00da      	lsls	r2, r3, #3
 8011ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ed0:	4413      	add	r3, r2
 8011ed2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011edc:	b29a      	uxth	r2, r3
 8011ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ee0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	895b      	ldrh	r3, [r3, #10]
 8011ee6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	6959      	ldr	r1, [r3, #20]
 8011eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011ef2:	b29b      	uxth	r3, r3
 8011ef4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f000 fdce 	bl	8012a9a <USB_WritePMA>
            ep->xfer_buff += len;
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	695a      	ldr	r2, [r3, #20]
 8011f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f06:	441a      	add	r2, r3
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	6a1a      	ldr	r2, [r3, #32]
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	691b      	ldr	r3, [r3, #16]
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d907      	bls.n	8011f28 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	6a1a      	ldr	r2, [r3, #32]
 8011f1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f20:	1ad2      	subs	r2, r2, r3
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	621a      	str	r2, [r3, #32]
 8011f26:	e006      	b.n	8011f36 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	6a1b      	ldr	r3, [r3, #32]
 8011f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	2200      	movs	r2, #0
 8011f34:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	785b      	ldrb	r3, [r3, #1]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d16b      	bne.n	8012016 <USB_EPStartXfer+0x344>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	61bb      	str	r3, [r7, #24]
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011f48:	b29b      	uxth	r3, r3
 8011f4a:	461a      	mov	r2, r3
 8011f4c:	69bb      	ldr	r3, [r7, #24]
 8011f4e:	4413      	add	r3, r2
 8011f50:	61bb      	str	r3, [r7, #24]
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	781b      	ldrb	r3, [r3, #0]
 8011f56:	00da      	lsls	r2, r3, #3
 8011f58:	69bb      	ldr	r3, [r7, #24]
 8011f5a:	4413      	add	r3, r2
 8011f5c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011f60:	617b      	str	r3, [r7, #20]
 8011f62:	697b      	ldr	r3, [r7, #20]
 8011f64:	881b      	ldrh	r3, [r3, #0]
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011f6c:	b29a      	uxth	r2, r3
 8011f6e:	697b      	ldr	r3, [r7, #20]
 8011f70:	801a      	strh	r2, [r3, #0]
 8011f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d10a      	bne.n	8011f90 <USB_EPStartXfer+0x2be>
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	881b      	ldrh	r3, [r3, #0]
 8011f7e:	b29b      	uxth	r3, r3
 8011f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f88:	b29a      	uxth	r2, r3
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	801a      	strh	r2, [r3, #0]
 8011f8e:	e05d      	b.n	801204c <USB_EPStartXfer+0x37a>
 8011f90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f94:	2b3e      	cmp	r3, #62	@ 0x3e
 8011f96:	d81c      	bhi.n	8011fd2 <USB_EPStartXfer+0x300>
 8011f98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f9c:	085b      	lsrs	r3, r3, #1
 8011f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011fa6:	f003 0301 	and.w	r3, r3, #1
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d004      	beq.n	8011fb8 <USB_EPStartXfer+0x2e6>
 8011fae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011fb2:	3301      	adds	r3, #1
 8011fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	881b      	ldrh	r3, [r3, #0]
 8011fbc:	b29a      	uxth	r2, r3
 8011fbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011fc2:	b29b      	uxth	r3, r3
 8011fc4:	029b      	lsls	r3, r3, #10
 8011fc6:	b29b      	uxth	r3, r3
 8011fc8:	4313      	orrs	r3, r2
 8011fca:	b29a      	uxth	r2, r3
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	801a      	strh	r2, [r3, #0]
 8011fd0:	e03c      	b.n	801204c <USB_EPStartXfer+0x37a>
 8011fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011fd6:	095b      	lsrs	r3, r3, #5
 8011fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011fdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011fe0:	f003 031f 	and.w	r3, r3, #31
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d104      	bne.n	8011ff2 <USB_EPStartXfer+0x320>
 8011fe8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011fec:	3b01      	subs	r3, #1
 8011fee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	881b      	ldrh	r3, [r3, #0]
 8011ff6:	b29a      	uxth	r2, r3
 8011ff8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011ffc:	b29b      	uxth	r3, r3
 8011ffe:	029b      	lsls	r3, r3, #10
 8012000:	b29b      	uxth	r3, r3
 8012002:	4313      	orrs	r3, r2
 8012004:	b29b      	uxth	r3, r3
 8012006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801200a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801200e:	b29a      	uxth	r2, r3
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	801a      	strh	r2, [r3, #0]
 8012014:	e01a      	b.n	801204c <USB_EPStartXfer+0x37a>
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	785b      	ldrb	r3, [r3, #1]
 801201a:	2b01      	cmp	r3, #1
 801201c:	d116      	bne.n	801204c <USB_EPStartXfer+0x37a>
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	623b      	str	r3, [r7, #32]
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012028:	b29b      	uxth	r3, r3
 801202a:	461a      	mov	r2, r3
 801202c:	6a3b      	ldr	r3, [r7, #32]
 801202e:	4413      	add	r3, r2
 8012030:	623b      	str	r3, [r7, #32]
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	00da      	lsls	r2, r3, #3
 8012038:	6a3b      	ldr	r3, [r7, #32]
 801203a:	4413      	add	r3, r2
 801203c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012040:	61fb      	str	r3, [r7, #28]
 8012042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012046:	b29a      	uxth	r2, r3
 8012048:	69fb      	ldr	r3, [r7, #28]
 801204a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	891b      	ldrh	r3, [r3, #8]
 8012050:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	6959      	ldr	r1, [r3, #20]
 8012058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801205c:	b29b      	uxth	r3, r3
 801205e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f000 fd19 	bl	8012a9a <USB_WritePMA>
 8012068:	e2e2      	b.n	8012630 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	785b      	ldrb	r3, [r3, #1]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d16b      	bne.n	801214a <USB_EPStartXfer+0x478>
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801207c:	b29b      	uxth	r3, r3
 801207e:	461a      	mov	r2, r3
 8012080:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012082:	4413      	add	r3, r2
 8012084:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	781b      	ldrb	r3, [r3, #0]
 801208a:	00da      	lsls	r2, r3, #3
 801208c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801208e:	4413      	add	r3, r2
 8012090:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012094:	647b      	str	r3, [r7, #68]	@ 0x44
 8012096:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012098:	881b      	ldrh	r3, [r3, #0]
 801209a:	b29b      	uxth	r3, r3
 801209c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80120a0:	b29a      	uxth	r2, r3
 80120a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120a4:	801a      	strh	r2, [r3, #0]
 80120a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d10a      	bne.n	80120c4 <USB_EPStartXfer+0x3f2>
 80120ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120b0:	881b      	ldrh	r3, [r3, #0]
 80120b2:	b29b      	uxth	r3, r3
 80120b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120bc:	b29a      	uxth	r2, r3
 80120be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120c0:	801a      	strh	r2, [r3, #0]
 80120c2:	e05d      	b.n	8012180 <USB_EPStartXfer+0x4ae>
 80120c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80120ca:	d81c      	bhi.n	8012106 <USB_EPStartXfer+0x434>
 80120cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120d0:	085b      	lsrs	r3, r3, #1
 80120d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80120d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120da:	f003 0301 	and.w	r3, r3, #1
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d004      	beq.n	80120ec <USB_EPStartXfer+0x41a>
 80120e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80120e6:	3301      	adds	r3, #1
 80120e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80120ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120ee:	881b      	ldrh	r3, [r3, #0]
 80120f0:	b29a      	uxth	r2, r3
 80120f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80120f6:	b29b      	uxth	r3, r3
 80120f8:	029b      	lsls	r3, r3, #10
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	4313      	orrs	r3, r2
 80120fe:	b29a      	uxth	r2, r3
 8012100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012102:	801a      	strh	r2, [r3, #0]
 8012104:	e03c      	b.n	8012180 <USB_EPStartXfer+0x4ae>
 8012106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801210a:	095b      	lsrs	r3, r3, #5
 801210c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012114:	f003 031f 	and.w	r3, r3, #31
 8012118:	2b00      	cmp	r3, #0
 801211a:	d104      	bne.n	8012126 <USB_EPStartXfer+0x454>
 801211c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012120:	3b01      	subs	r3, #1
 8012122:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012126:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012128:	881b      	ldrh	r3, [r3, #0]
 801212a:	b29a      	uxth	r2, r3
 801212c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012130:	b29b      	uxth	r3, r3
 8012132:	029b      	lsls	r3, r3, #10
 8012134:	b29b      	uxth	r3, r3
 8012136:	4313      	orrs	r3, r2
 8012138:	b29b      	uxth	r3, r3
 801213a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801213e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012142:	b29a      	uxth	r2, r3
 8012144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012146:	801a      	strh	r2, [r3, #0]
 8012148:	e01a      	b.n	8012180 <USB_EPStartXfer+0x4ae>
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	785b      	ldrb	r3, [r3, #1]
 801214e:	2b01      	cmp	r3, #1
 8012150:	d116      	bne.n	8012180 <USB_EPStartXfer+0x4ae>
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	653b      	str	r3, [r7, #80]	@ 0x50
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801215c:	b29b      	uxth	r3, r3
 801215e:	461a      	mov	r2, r3
 8012160:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012162:	4413      	add	r3, r2
 8012164:	653b      	str	r3, [r7, #80]	@ 0x50
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	781b      	ldrb	r3, [r3, #0]
 801216a:	00da      	lsls	r2, r3, #3
 801216c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801216e:	4413      	add	r3, r2
 8012170:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012174:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801217a:	b29a      	uxth	r2, r3
 801217c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801217e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012180:	683b      	ldr	r3, [r7, #0]
 8012182:	891b      	ldrh	r3, [r3, #8]
 8012184:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	6959      	ldr	r1, [r3, #20]
 801218c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012190:	b29b      	uxth	r3, r3
 8012192:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012196:	6878      	ldr	r0, [r7, #4]
 8012198:	f000 fc7f 	bl	8012a9a <USB_WritePMA>
            ep->xfer_buff += len;
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	695a      	ldr	r2, [r3, #20]
 80121a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121a4:	441a      	add	r2, r3
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	6a1a      	ldr	r2, [r3, #32]
 80121ae:	683b      	ldr	r3, [r7, #0]
 80121b0:	691b      	ldr	r3, [r3, #16]
 80121b2:	429a      	cmp	r2, r3
 80121b4:	d907      	bls.n	80121c6 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	6a1a      	ldr	r2, [r3, #32]
 80121ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121be:	1ad2      	subs	r2, r2, r3
 80121c0:	683b      	ldr	r3, [r7, #0]
 80121c2:	621a      	str	r2, [r3, #32]
 80121c4:	e006      	b.n	80121d4 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80121c6:	683b      	ldr	r3, [r7, #0]
 80121c8:	6a1b      	ldr	r3, [r3, #32]
 80121ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80121ce:	683b      	ldr	r3, [r7, #0]
 80121d0:	2200      	movs	r2, #0
 80121d2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80121d8:	683b      	ldr	r3, [r7, #0]
 80121da:	785b      	ldrb	r3, [r3, #1]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d16b      	bne.n	80122b8 <USB_EPStartXfer+0x5e6>
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80121ea:	b29b      	uxth	r3, r3
 80121ec:	461a      	mov	r2, r3
 80121ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121f0:	4413      	add	r3, r2
 80121f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80121f4:	683b      	ldr	r3, [r7, #0]
 80121f6:	781b      	ldrb	r3, [r3, #0]
 80121f8:	00da      	lsls	r2, r3, #3
 80121fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121fc:	4413      	add	r3, r2
 80121fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012202:	637b      	str	r3, [r7, #52]	@ 0x34
 8012204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012206:	881b      	ldrh	r3, [r3, #0]
 8012208:	b29b      	uxth	r3, r3
 801220a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801220e:	b29a      	uxth	r2, r3
 8012210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012212:	801a      	strh	r2, [r3, #0]
 8012214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012218:	2b00      	cmp	r3, #0
 801221a:	d10a      	bne.n	8012232 <USB_EPStartXfer+0x560>
 801221c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801221e:	881b      	ldrh	r3, [r3, #0]
 8012220:	b29b      	uxth	r3, r3
 8012222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801222a:	b29a      	uxth	r2, r3
 801222c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801222e:	801a      	strh	r2, [r3, #0]
 8012230:	e05b      	b.n	80122ea <USB_EPStartXfer+0x618>
 8012232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012236:	2b3e      	cmp	r3, #62	@ 0x3e
 8012238:	d81c      	bhi.n	8012274 <USB_EPStartXfer+0x5a2>
 801223a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801223e:	085b      	lsrs	r3, r3, #1
 8012240:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012248:	f003 0301 	and.w	r3, r3, #1
 801224c:	2b00      	cmp	r3, #0
 801224e:	d004      	beq.n	801225a <USB_EPStartXfer+0x588>
 8012250:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012254:	3301      	adds	r3, #1
 8012256:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801225a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801225c:	881b      	ldrh	r3, [r3, #0]
 801225e:	b29a      	uxth	r2, r3
 8012260:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012264:	b29b      	uxth	r3, r3
 8012266:	029b      	lsls	r3, r3, #10
 8012268:	b29b      	uxth	r3, r3
 801226a:	4313      	orrs	r3, r2
 801226c:	b29a      	uxth	r2, r3
 801226e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012270:	801a      	strh	r2, [r3, #0]
 8012272:	e03a      	b.n	80122ea <USB_EPStartXfer+0x618>
 8012274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012278:	095b      	lsrs	r3, r3, #5
 801227a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801227e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012282:	f003 031f 	and.w	r3, r3, #31
 8012286:	2b00      	cmp	r3, #0
 8012288:	d104      	bne.n	8012294 <USB_EPStartXfer+0x5c2>
 801228a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801228e:	3b01      	subs	r3, #1
 8012290:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012296:	881b      	ldrh	r3, [r3, #0]
 8012298:	b29a      	uxth	r2, r3
 801229a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801229e:	b29b      	uxth	r3, r3
 80122a0:	029b      	lsls	r3, r3, #10
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	4313      	orrs	r3, r2
 80122a6:	b29b      	uxth	r3, r3
 80122a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80122ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80122b0:	b29a      	uxth	r2, r3
 80122b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122b4:	801a      	strh	r2, [r3, #0]
 80122b6:	e018      	b.n	80122ea <USB_EPStartXfer+0x618>
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	785b      	ldrb	r3, [r3, #1]
 80122bc:	2b01      	cmp	r3, #1
 80122be:	d114      	bne.n	80122ea <USB_EPStartXfer+0x618>
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80122c6:	b29b      	uxth	r3, r3
 80122c8:	461a      	mov	r2, r3
 80122ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80122cc:	4413      	add	r3, r2
 80122ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	781b      	ldrb	r3, [r3, #0]
 80122d4:	00da      	lsls	r2, r3, #3
 80122d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80122d8:	4413      	add	r3, r2
 80122da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80122de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80122e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122e4:	b29a      	uxth	r2, r3
 80122e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	895b      	ldrh	r3, [r3, #10]
 80122ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	6959      	ldr	r1, [r3, #20]
 80122f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122fa:	b29b      	uxth	r3, r3
 80122fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f000 fbca 	bl	8012a9a <USB_WritePMA>
 8012306:	e193      	b.n	8012630 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	6a1b      	ldr	r3, [r3, #32]
 801230c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8012310:	687a      	ldr	r2, [r7, #4]
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	781b      	ldrb	r3, [r3, #0]
 8012316:	009b      	lsls	r3, r3, #2
 8012318:	4413      	add	r3, r2
 801231a:	881b      	ldrh	r3, [r3, #0]
 801231c:	b29b      	uxth	r3, r3
 801231e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8012322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012326:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 801232a:	687a      	ldr	r2, [r7, #4]
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	781b      	ldrb	r3, [r3, #0]
 8012330:	009b      	lsls	r3, r3, #2
 8012332:	441a      	add	r2, r3
 8012334:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8012338:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801233c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012340:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012348:	b29b      	uxth	r3, r3
 801234a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012356:	b29b      	uxth	r3, r3
 8012358:	461a      	mov	r2, r3
 801235a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801235c:	4413      	add	r3, r2
 801235e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	781b      	ldrb	r3, [r3, #0]
 8012364:	00da      	lsls	r2, r3, #3
 8012366:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012368:	4413      	add	r3, r2
 801236a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801236e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012374:	b29a      	uxth	r2, r3
 8012376:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012378:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	891b      	ldrh	r3, [r3, #8]
 801237e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	6959      	ldr	r1, [r3, #20]
 8012386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801238a:	b29b      	uxth	r3, r3
 801238c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f000 fb82 	bl	8012a9a <USB_WritePMA>
 8012396:	e14b      	b.n	8012630 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	6a1a      	ldr	r2, [r3, #32]
 801239c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123a0:	1ad2      	subs	r2, r2, r3
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80123a6:	687a      	ldr	r2, [r7, #4]
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	009b      	lsls	r3, r3, #2
 80123ae:	4413      	add	r3, r2
 80123b0:	881b      	ldrh	r3, [r3, #0]
 80123b2:	b29b      	uxth	r3, r3
 80123b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	f000 809a 	beq.w	80124f2 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	785b      	ldrb	r3, [r3, #1]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d16b      	bne.n	80124a2 <USB_EPStartXfer+0x7d0>
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80123d4:	b29b      	uxth	r3, r3
 80123d6:	461a      	mov	r2, r3
 80123d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80123da:	4413      	add	r3, r2
 80123dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	00da      	lsls	r2, r3, #3
 80123e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80123e6:	4413      	add	r3, r2
 80123e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80123ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80123ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80123f0:	881b      	ldrh	r3, [r3, #0]
 80123f2:	b29b      	uxth	r3, r3
 80123f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80123f8:	b29a      	uxth	r2, r3
 80123fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80123fc:	801a      	strh	r2, [r3, #0]
 80123fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012402:	2b00      	cmp	r3, #0
 8012404:	d10a      	bne.n	801241c <USB_EPStartXfer+0x74a>
 8012406:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012408:	881b      	ldrh	r3, [r3, #0]
 801240a:	b29b      	uxth	r3, r3
 801240c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012414:	b29a      	uxth	r2, r3
 8012416:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012418:	801a      	strh	r2, [r3, #0]
 801241a:	e05b      	b.n	80124d4 <USB_EPStartXfer+0x802>
 801241c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012420:	2b3e      	cmp	r3, #62	@ 0x3e
 8012422:	d81c      	bhi.n	801245e <USB_EPStartXfer+0x78c>
 8012424:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012428:	085b      	lsrs	r3, r3, #1
 801242a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801242e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012432:	f003 0301 	and.w	r3, r3, #1
 8012436:	2b00      	cmp	r3, #0
 8012438:	d004      	beq.n	8012444 <USB_EPStartXfer+0x772>
 801243a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801243e:	3301      	adds	r3, #1
 8012440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012444:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012446:	881b      	ldrh	r3, [r3, #0]
 8012448:	b29a      	uxth	r2, r3
 801244a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801244e:	b29b      	uxth	r3, r3
 8012450:	029b      	lsls	r3, r3, #10
 8012452:	b29b      	uxth	r3, r3
 8012454:	4313      	orrs	r3, r2
 8012456:	b29a      	uxth	r2, r3
 8012458:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801245a:	801a      	strh	r2, [r3, #0]
 801245c:	e03a      	b.n	80124d4 <USB_EPStartXfer+0x802>
 801245e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012462:	095b      	lsrs	r3, r3, #5
 8012464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801246c:	f003 031f 	and.w	r3, r3, #31
 8012470:	2b00      	cmp	r3, #0
 8012472:	d104      	bne.n	801247e <USB_EPStartXfer+0x7ac>
 8012474:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012478:	3b01      	subs	r3, #1
 801247a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801247e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012480:	881b      	ldrh	r3, [r3, #0]
 8012482:	b29a      	uxth	r2, r3
 8012484:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012488:	b29b      	uxth	r3, r3
 801248a:	029b      	lsls	r3, r3, #10
 801248c:	b29b      	uxth	r3, r3
 801248e:	4313      	orrs	r3, r2
 8012490:	b29b      	uxth	r3, r3
 8012492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801249a:	b29a      	uxth	r2, r3
 801249c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801249e:	801a      	strh	r2, [r3, #0]
 80124a0:	e018      	b.n	80124d4 <USB_EPStartXfer+0x802>
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	785b      	ldrb	r3, [r3, #1]
 80124a6:	2b01      	cmp	r3, #1
 80124a8:	d114      	bne.n	80124d4 <USB_EPStartXfer+0x802>
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80124b0:	b29b      	uxth	r3, r3
 80124b2:	461a      	mov	r2, r3
 80124b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80124b6:	4413      	add	r3, r2
 80124b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	781b      	ldrb	r3, [r3, #0]
 80124be:	00da      	lsls	r2, r3, #3
 80124c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80124c2:	4413      	add	r3, r2
 80124c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80124c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80124ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124ce:	b29a      	uxth	r2, r3
 80124d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80124d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	895b      	ldrh	r3, [r3, #10]
 80124d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	6959      	ldr	r1, [r3, #20]
 80124e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124e4:	b29b      	uxth	r3, r3
 80124e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	f000 fad5 	bl	8012a9a <USB_WritePMA>
 80124f0:	e09e      	b.n	8012630 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	785b      	ldrb	r3, [r3, #1]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d16b      	bne.n	80125d2 <USB_EPStartXfer+0x900>
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012504:	b29b      	uxth	r3, r3
 8012506:	461a      	mov	r2, r3
 8012508:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801250a:	4413      	add	r3, r2
 801250c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	00da      	lsls	r2, r3, #3
 8012514:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012516:	4413      	add	r3, r2
 8012518:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801251c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801251e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012520:	881b      	ldrh	r3, [r3, #0]
 8012522:	b29b      	uxth	r3, r3
 8012524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012528:	b29a      	uxth	r2, r3
 801252a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801252c:	801a      	strh	r2, [r3, #0]
 801252e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012532:	2b00      	cmp	r3, #0
 8012534:	d10a      	bne.n	801254c <USB_EPStartXfer+0x87a>
 8012536:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012538:	881b      	ldrh	r3, [r3, #0]
 801253a:	b29b      	uxth	r3, r3
 801253c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012544:	b29a      	uxth	r2, r3
 8012546:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012548:	801a      	strh	r2, [r3, #0]
 801254a:	e063      	b.n	8012614 <USB_EPStartXfer+0x942>
 801254c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012550:	2b3e      	cmp	r3, #62	@ 0x3e
 8012552:	d81c      	bhi.n	801258e <USB_EPStartXfer+0x8bc>
 8012554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012558:	085b      	lsrs	r3, r3, #1
 801255a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801255e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012562:	f003 0301 	and.w	r3, r3, #1
 8012566:	2b00      	cmp	r3, #0
 8012568:	d004      	beq.n	8012574 <USB_EPStartXfer+0x8a2>
 801256a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801256e:	3301      	adds	r3, #1
 8012570:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012574:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012576:	881b      	ldrh	r3, [r3, #0]
 8012578:	b29a      	uxth	r2, r3
 801257a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801257e:	b29b      	uxth	r3, r3
 8012580:	029b      	lsls	r3, r3, #10
 8012582:	b29b      	uxth	r3, r3
 8012584:	4313      	orrs	r3, r2
 8012586:	b29a      	uxth	r2, r3
 8012588:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801258a:	801a      	strh	r2, [r3, #0]
 801258c:	e042      	b.n	8012614 <USB_EPStartXfer+0x942>
 801258e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012592:	095b      	lsrs	r3, r3, #5
 8012594:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012598:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801259c:	f003 031f 	and.w	r3, r3, #31
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d104      	bne.n	80125ae <USB_EPStartXfer+0x8dc>
 80125a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80125a8:	3b01      	subs	r3, #1
 80125aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80125ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80125b0:	881b      	ldrh	r3, [r3, #0]
 80125b2:	b29a      	uxth	r2, r3
 80125b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80125b8:	b29b      	uxth	r3, r3
 80125ba:	029b      	lsls	r3, r3, #10
 80125bc:	b29b      	uxth	r3, r3
 80125be:	4313      	orrs	r3, r2
 80125c0:	b29b      	uxth	r3, r3
 80125c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80125c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80125ca:	b29a      	uxth	r2, r3
 80125cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80125ce:	801a      	strh	r2, [r3, #0]
 80125d0:	e020      	b.n	8012614 <USB_EPStartXfer+0x942>
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	785b      	ldrb	r3, [r3, #1]
 80125d6:	2b01      	cmp	r3, #1
 80125d8:	d11c      	bne.n	8012614 <USB_EPStartXfer+0x942>
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	461a      	mov	r2, r3
 80125ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80125ee:	4413      	add	r3, r2
 80125f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	00da      	lsls	r2, r3, #3
 80125fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80125fe:	4413      	add	r3, r2
 8012600:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012604:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012608:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801260c:	b29a      	uxth	r2, r3
 801260e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012612:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	891b      	ldrh	r3, [r3, #8]
 8012618:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	6959      	ldr	r1, [r3, #20]
 8012620:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012624:	b29b      	uxth	r3, r3
 8012626:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f000 fa35 	bl	8012a9a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012630:	687a      	ldr	r2, [r7, #4]
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	781b      	ldrb	r3, [r3, #0]
 8012636:	009b      	lsls	r3, r3, #2
 8012638:	4413      	add	r3, r2
 801263a:	881b      	ldrh	r3, [r3, #0]
 801263c:	b29b      	uxth	r3, r3
 801263e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012642:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012646:	817b      	strh	r3, [r7, #10]
 8012648:	897b      	ldrh	r3, [r7, #10]
 801264a:	f083 0310 	eor.w	r3, r3, #16
 801264e:	817b      	strh	r3, [r7, #10]
 8012650:	897b      	ldrh	r3, [r7, #10]
 8012652:	f083 0320 	eor.w	r3, r3, #32
 8012656:	817b      	strh	r3, [r7, #10]
 8012658:	687a      	ldr	r2, [r7, #4]
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	781b      	ldrb	r3, [r3, #0]
 801265e:	009b      	lsls	r3, r3, #2
 8012660:	441a      	add	r2, r3
 8012662:	897b      	ldrh	r3, [r7, #10]
 8012664:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012668:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801266c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012674:	b29b      	uxth	r3, r3
 8012676:	8013      	strh	r3, [r2, #0]
 8012678:	e0d5      	b.n	8012826 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	7b1b      	ldrb	r3, [r3, #12]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d156      	bne.n	8012730 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	699b      	ldr	r3, [r3, #24]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d122      	bne.n	80126d0 <USB_EPStartXfer+0x9fe>
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	78db      	ldrb	r3, [r3, #3]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d11e      	bne.n	80126d0 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8012692:	687a      	ldr	r2, [r7, #4]
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	781b      	ldrb	r3, [r3, #0]
 8012698:	009b      	lsls	r3, r3, #2
 801269a:	4413      	add	r3, r2
 801269c:	881b      	ldrh	r3, [r3, #0]
 801269e:	b29b      	uxth	r3, r3
 80126a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80126a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80126a8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80126ac:	687a      	ldr	r2, [r7, #4]
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	781b      	ldrb	r3, [r3, #0]
 80126b2:	009b      	lsls	r3, r3, #2
 80126b4:	441a      	add	r2, r3
 80126b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80126ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80126be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80126c2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80126c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126ca:	b29b      	uxth	r3, r3
 80126cc:	8013      	strh	r3, [r2, #0]
 80126ce:	e01d      	b.n	801270c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 80126d0:	687a      	ldr	r2, [r7, #4]
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	781b      	ldrb	r3, [r3, #0]
 80126d6:	009b      	lsls	r3, r3, #2
 80126d8:	4413      	add	r3, r2
 80126da:	881b      	ldrh	r3, [r3, #0]
 80126dc:	b29b      	uxth	r3, r3
 80126de:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80126e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80126e6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80126ea:	687a      	ldr	r2, [r7, #4]
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	781b      	ldrb	r3, [r3, #0]
 80126f0:	009b      	lsls	r3, r3, #2
 80126f2:	441a      	add	r2, r3
 80126f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80126f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80126fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012700:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012708:	b29b      	uxth	r3, r3
 801270a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	699a      	ldr	r2, [r3, #24]
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	691b      	ldr	r3, [r3, #16]
 8012714:	429a      	cmp	r2, r3
 8012716:	d907      	bls.n	8012728 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	699a      	ldr	r2, [r3, #24]
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	691b      	ldr	r3, [r3, #16]
 8012720:	1ad2      	subs	r2, r2, r3
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	619a      	str	r2, [r3, #24]
 8012726:	e054      	b.n	80127d2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	2200      	movs	r2, #0
 801272c:	619a      	str	r2, [r3, #24]
 801272e:	e050      	b.n	80127d2 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	78db      	ldrb	r3, [r3, #3]
 8012734:	2b02      	cmp	r3, #2
 8012736:	d142      	bne.n	80127be <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	69db      	ldr	r3, [r3, #28]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d048      	beq.n	80127d2 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012740:	687a      	ldr	r2, [r7, #4]
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	781b      	ldrb	r3, [r3, #0]
 8012746:	009b      	lsls	r3, r3, #2
 8012748:	4413      	add	r3, r2
 801274a:	881b      	ldrh	r3, [r3, #0]
 801274c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012750:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012758:	2b00      	cmp	r3, #0
 801275a:	d005      	beq.n	8012768 <USB_EPStartXfer+0xa96>
 801275c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012764:	2b00      	cmp	r3, #0
 8012766:	d10b      	bne.n	8012780 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012768:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 801276c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012770:	2b00      	cmp	r3, #0
 8012772:	d12e      	bne.n	80127d2 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012774:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801277c:	2b00      	cmp	r3, #0
 801277e:	d128      	bne.n	80127d2 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8012780:	687a      	ldr	r2, [r7, #4]
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	781b      	ldrb	r3, [r3, #0]
 8012786:	009b      	lsls	r3, r3, #2
 8012788:	4413      	add	r3, r2
 801278a:	881b      	ldrh	r3, [r3, #0]
 801278c:	b29b      	uxth	r3, r3
 801278e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012796:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 801279a:	687a      	ldr	r2, [r7, #4]
 801279c:	683b      	ldr	r3, [r7, #0]
 801279e:	781b      	ldrb	r3, [r3, #0]
 80127a0:	009b      	lsls	r3, r3, #2
 80127a2:	441a      	add	r2, r3
 80127a4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 80127a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80127ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80127b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80127b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80127b8:	b29b      	uxth	r3, r3
 80127ba:	8013      	strh	r3, [r2, #0]
 80127bc:	e009      	b.n	80127d2 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80127be:	683b      	ldr	r3, [r7, #0]
 80127c0:	78db      	ldrb	r3, [r3, #3]
 80127c2:	2b01      	cmp	r3, #1
 80127c4:	d103      	bne.n	80127ce <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	2200      	movs	r2, #0
 80127ca:	619a      	str	r2, [r3, #24]
 80127cc:	e001      	b.n	80127d2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 80127ce:	2301      	movs	r3, #1
 80127d0:	e02a      	b.n	8012828 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80127d2:	687a      	ldr	r2, [r7, #4]
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	009b      	lsls	r3, r3, #2
 80127da:	4413      	add	r3, r2
 80127dc:	881b      	ldrh	r3, [r3, #0]
 80127de:	b29b      	uxth	r3, r3
 80127e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80127e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80127e8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80127ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80127f0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80127f4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80127f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80127fc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012800:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012804:	687a      	ldr	r2, [r7, #4]
 8012806:	683b      	ldr	r3, [r7, #0]
 8012808:	781b      	ldrb	r3, [r3, #0]
 801280a:	009b      	lsls	r3, r3, #2
 801280c:	441a      	add	r2, r3
 801280e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801281a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801281e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012822:	b29b      	uxth	r3, r3
 8012824:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012826:	2300      	movs	r3, #0
}
 8012828:	4618      	mov	r0, r3
 801282a:	37b0      	adds	r7, #176	@ 0xb0
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}

08012830 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012830:	b480      	push	{r7}
 8012832:	b085      	sub	sp, #20
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	785b      	ldrb	r3, [r3, #1]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d020      	beq.n	8012884 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012842:	687a      	ldr	r2, [r7, #4]
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	781b      	ldrb	r3, [r3, #0]
 8012848:	009b      	lsls	r3, r3, #2
 801284a:	4413      	add	r3, r2
 801284c:	881b      	ldrh	r3, [r3, #0]
 801284e:	b29b      	uxth	r3, r3
 8012850:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012858:	81bb      	strh	r3, [r7, #12]
 801285a:	89bb      	ldrh	r3, [r7, #12]
 801285c:	f083 0310 	eor.w	r3, r3, #16
 8012860:	81bb      	strh	r3, [r7, #12]
 8012862:	687a      	ldr	r2, [r7, #4]
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	781b      	ldrb	r3, [r3, #0]
 8012868:	009b      	lsls	r3, r3, #2
 801286a:	441a      	add	r2, r3
 801286c:	89bb      	ldrh	r3, [r7, #12]
 801286e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801287a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801287e:	b29b      	uxth	r3, r3
 8012880:	8013      	strh	r3, [r2, #0]
 8012882:	e01f      	b.n	80128c4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012884:	687a      	ldr	r2, [r7, #4]
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	009b      	lsls	r3, r3, #2
 801288c:	4413      	add	r3, r2
 801288e:	881b      	ldrh	r3, [r3, #0]
 8012890:	b29b      	uxth	r3, r3
 8012892:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801289a:	81fb      	strh	r3, [r7, #14]
 801289c:	89fb      	ldrh	r3, [r7, #14]
 801289e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80128a2:	81fb      	strh	r3, [r7, #14]
 80128a4:	687a      	ldr	r2, [r7, #4]
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	781b      	ldrb	r3, [r3, #0]
 80128aa:	009b      	lsls	r3, r3, #2
 80128ac:	441a      	add	r2, r3
 80128ae:	89fb      	ldrh	r3, [r7, #14]
 80128b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80128b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80128b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80128bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80128c0:	b29b      	uxth	r3, r3
 80128c2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80128c4:	2300      	movs	r3, #0
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	3714      	adds	r7, #20
 80128ca:	46bd      	mov	sp, r7
 80128cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d0:	4770      	bx	lr

080128d2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80128d2:	b480      	push	{r7}
 80128d4:	b087      	sub	sp, #28
 80128d6:	af00      	add	r7, sp, #0
 80128d8:	6078      	str	r0, [r7, #4]
 80128da:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	785b      	ldrb	r3, [r3, #1]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d04c      	beq.n	801297e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80128e4:	687a      	ldr	r2, [r7, #4]
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	781b      	ldrb	r3, [r3, #0]
 80128ea:	009b      	lsls	r3, r3, #2
 80128ec:	4413      	add	r3, r2
 80128ee:	881b      	ldrh	r3, [r3, #0]
 80128f0:	823b      	strh	r3, [r7, #16]
 80128f2:	8a3b      	ldrh	r3, [r7, #16]
 80128f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d01b      	beq.n	8012934 <USB_EPClearStall+0x62>
 80128fc:	687a      	ldr	r2, [r7, #4]
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	009b      	lsls	r3, r3, #2
 8012904:	4413      	add	r3, r2
 8012906:	881b      	ldrh	r3, [r3, #0]
 8012908:	b29b      	uxth	r3, r3
 801290a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801290e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012912:	81fb      	strh	r3, [r7, #14]
 8012914:	687a      	ldr	r2, [r7, #4]
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	781b      	ldrb	r3, [r3, #0]
 801291a:	009b      	lsls	r3, r3, #2
 801291c:	441a      	add	r2, r3
 801291e:	89fb      	ldrh	r3, [r7, #14]
 8012920:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012924:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801292c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012930:	b29b      	uxth	r3, r3
 8012932:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	78db      	ldrb	r3, [r3, #3]
 8012938:	2b01      	cmp	r3, #1
 801293a:	d06c      	beq.n	8012a16 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801293c:	687a      	ldr	r2, [r7, #4]
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	009b      	lsls	r3, r3, #2
 8012944:	4413      	add	r3, r2
 8012946:	881b      	ldrh	r3, [r3, #0]
 8012948:	b29b      	uxth	r3, r3
 801294a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801294e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012952:	81bb      	strh	r3, [r7, #12]
 8012954:	89bb      	ldrh	r3, [r7, #12]
 8012956:	f083 0320 	eor.w	r3, r3, #32
 801295a:	81bb      	strh	r3, [r7, #12]
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	009b      	lsls	r3, r3, #2
 8012964:	441a      	add	r2, r3
 8012966:	89bb      	ldrh	r3, [r7, #12]
 8012968:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801296c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012978:	b29b      	uxth	r3, r3
 801297a:	8013      	strh	r3, [r2, #0]
 801297c:	e04b      	b.n	8012a16 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	781b      	ldrb	r3, [r3, #0]
 8012984:	009b      	lsls	r3, r3, #2
 8012986:	4413      	add	r3, r2
 8012988:	881b      	ldrh	r3, [r3, #0]
 801298a:	82fb      	strh	r3, [r7, #22]
 801298c:	8afb      	ldrh	r3, [r7, #22]
 801298e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012992:	2b00      	cmp	r3, #0
 8012994:	d01b      	beq.n	80129ce <USB_EPClearStall+0xfc>
 8012996:	687a      	ldr	r2, [r7, #4]
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	781b      	ldrb	r3, [r3, #0]
 801299c:	009b      	lsls	r3, r3, #2
 801299e:	4413      	add	r3, r2
 80129a0:	881b      	ldrh	r3, [r3, #0]
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80129a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80129ac:	82bb      	strh	r3, [r7, #20]
 80129ae:	687a      	ldr	r2, [r7, #4]
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	009b      	lsls	r3, r3, #2
 80129b6:	441a      	add	r2, r3
 80129b8:	8abb      	ldrh	r3, [r7, #20]
 80129ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80129be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80129c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80129c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80129ca:	b29b      	uxth	r3, r3
 80129cc:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80129ce:	687a      	ldr	r2, [r7, #4]
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	781b      	ldrb	r3, [r3, #0]
 80129d4:	009b      	lsls	r3, r3, #2
 80129d6:	4413      	add	r3, r2
 80129d8:	881b      	ldrh	r3, [r3, #0]
 80129da:	b29b      	uxth	r3, r3
 80129dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80129e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80129e4:	827b      	strh	r3, [r7, #18]
 80129e6:	8a7b      	ldrh	r3, [r7, #18]
 80129e8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80129ec:	827b      	strh	r3, [r7, #18]
 80129ee:	8a7b      	ldrh	r3, [r7, #18]
 80129f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80129f4:	827b      	strh	r3, [r7, #18]
 80129f6:	687a      	ldr	r2, [r7, #4]
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	781b      	ldrb	r3, [r3, #0]
 80129fc:	009b      	lsls	r3, r3, #2
 80129fe:	441a      	add	r2, r3
 8012a00:	8a7b      	ldrh	r3, [r7, #18]
 8012a02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012a06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a12:	b29b      	uxth	r3, r3
 8012a14:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012a16:	2300      	movs	r3, #0
}
 8012a18:	4618      	mov	r0, r3
 8012a1a:	371c      	adds	r7, #28
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a22:	4770      	bx	lr

08012a24 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012a24:	b480      	push	{r7}
 8012a26:	b083      	sub	sp, #12
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
 8012a2c:	460b      	mov	r3, r1
 8012a2e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012a30:	78fb      	ldrb	r3, [r7, #3]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d103      	bne.n	8012a3e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	2280      	movs	r2, #128	@ 0x80
 8012a3a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8012a3e:	2300      	movs	r3, #0
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	370c      	adds	r7, #12
 8012a44:	46bd      	mov	sp, r7
 8012a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4a:	4770      	bx	lr

08012a4c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8012a4c:	b480      	push	{r7}
 8012a4e:	b083      	sub	sp, #12
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8012a5a:	b29b      	uxth	r3, r3
 8012a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a64:	b29a      	uxth	r2, r3
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8012a6c:	2300      	movs	r3, #0
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	370c      	adds	r7, #12
 8012a72:	46bd      	mov	sp, r7
 8012a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a78:	4770      	bx	lr

08012a7a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8012a7a:	b480      	push	{r7}
 8012a7c:	b085      	sub	sp, #20
 8012a7e:	af00      	add	r7, sp, #0
 8012a80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8012a88:	b29b      	uxth	r3, r3
 8012a8a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012a8c:	68fb      	ldr	r3, [r7, #12]
}
 8012a8e:	4618      	mov	r0, r3
 8012a90:	3714      	adds	r7, #20
 8012a92:	46bd      	mov	sp, r7
 8012a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a98:	4770      	bx	lr

08012a9a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012a9a:	b480      	push	{r7}
 8012a9c:	b08b      	sub	sp, #44	@ 0x2c
 8012a9e:	af00      	add	r7, sp, #0
 8012aa0:	60f8      	str	r0, [r7, #12]
 8012aa2:	60b9      	str	r1, [r7, #8]
 8012aa4:	4611      	mov	r1, r2
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	460b      	mov	r3, r1
 8012aaa:	80fb      	strh	r3, [r7, #6]
 8012aac:	4613      	mov	r3, r2
 8012aae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012ab0:	88bb      	ldrh	r3, [r7, #4]
 8012ab2:	3301      	adds	r3, #1
 8012ab4:	085b      	lsrs	r3, r3, #1
 8012ab6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012ac0:	88fa      	ldrh	r2, [r7, #6]
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	4413      	add	r3, r2
 8012ac6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012aca:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012acc:	69bb      	ldr	r3, [r7, #24]
 8012ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ad0:	e01b      	b.n	8012b0a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8012ad2:	69fb      	ldr	r3, [r7, #28]
 8012ad4:	781b      	ldrb	r3, [r3, #0]
 8012ad6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8012ad8:	69fb      	ldr	r3, [r7, #28]
 8012ada:	3301      	adds	r3, #1
 8012adc:	781b      	ldrb	r3, [r3, #0]
 8012ade:	021b      	lsls	r3, r3, #8
 8012ae0:	b21a      	sxth	r2, r3
 8012ae2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012ae6:	4313      	orrs	r3, r2
 8012ae8:	b21b      	sxth	r3, r3
 8012aea:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8012aec:	6a3b      	ldr	r3, [r7, #32]
 8012aee:	8a7a      	ldrh	r2, [r7, #18]
 8012af0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012af2:	6a3b      	ldr	r3, [r7, #32]
 8012af4:	3302      	adds	r3, #2
 8012af6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012af8:	69fb      	ldr	r3, [r7, #28]
 8012afa:	3301      	adds	r3, #1
 8012afc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8012afe:	69fb      	ldr	r3, [r7, #28]
 8012b00:	3301      	adds	r3, #1
 8012b02:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b06:	3b01      	subs	r3, #1
 8012b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d1e0      	bne.n	8012ad2 <USB_WritePMA+0x38>
  }
}
 8012b10:	bf00      	nop
 8012b12:	bf00      	nop
 8012b14:	372c      	adds	r7, #44	@ 0x2c
 8012b16:	46bd      	mov	sp, r7
 8012b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1c:	4770      	bx	lr

08012b1e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012b1e:	b480      	push	{r7}
 8012b20:	b08b      	sub	sp, #44	@ 0x2c
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	60f8      	str	r0, [r7, #12]
 8012b26:	60b9      	str	r1, [r7, #8]
 8012b28:	4611      	mov	r1, r2
 8012b2a:	461a      	mov	r2, r3
 8012b2c:	460b      	mov	r3, r1
 8012b2e:	80fb      	strh	r3, [r7, #6]
 8012b30:	4613      	mov	r3, r2
 8012b32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012b34:	88bb      	ldrh	r3, [r7, #4]
 8012b36:	085b      	lsrs	r3, r3, #1
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012b44:	88fa      	ldrh	r2, [r7, #6]
 8012b46:	697b      	ldr	r3, [r7, #20]
 8012b48:	4413      	add	r3, r2
 8012b4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012b4e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012b50:	69bb      	ldr	r3, [r7, #24]
 8012b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b54:	e018      	b.n	8012b88 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8012b56:	6a3b      	ldr	r3, [r7, #32]
 8012b58:	881b      	ldrh	r3, [r3, #0]
 8012b5a:	b29b      	uxth	r3, r3
 8012b5c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012b5e:	6a3b      	ldr	r3, [r7, #32]
 8012b60:	3302      	adds	r3, #2
 8012b62:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012b64:	693b      	ldr	r3, [r7, #16]
 8012b66:	b2da      	uxtb	r2, r3
 8012b68:	69fb      	ldr	r3, [r7, #28]
 8012b6a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012b6c:	69fb      	ldr	r3, [r7, #28]
 8012b6e:	3301      	adds	r3, #1
 8012b70:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8012b72:	693b      	ldr	r3, [r7, #16]
 8012b74:	0a1b      	lsrs	r3, r3, #8
 8012b76:	b2da      	uxtb	r2, r3
 8012b78:	69fb      	ldr	r3, [r7, #28]
 8012b7a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012b7c:	69fb      	ldr	r3, [r7, #28]
 8012b7e:	3301      	adds	r3, #1
 8012b80:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b84:	3b01      	subs	r3, #1
 8012b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d1e3      	bne.n	8012b56 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012b8e:	88bb      	ldrh	r3, [r7, #4]
 8012b90:	f003 0301 	and.w	r3, r3, #1
 8012b94:	b29b      	uxth	r3, r3
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d007      	beq.n	8012baa <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8012b9a:	6a3b      	ldr	r3, [r7, #32]
 8012b9c:	881b      	ldrh	r3, [r3, #0]
 8012b9e:	b29b      	uxth	r3, r3
 8012ba0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012ba2:	693b      	ldr	r3, [r7, #16]
 8012ba4:	b2da      	uxtb	r2, r3
 8012ba6:	69fb      	ldr	r3, [r7, #28]
 8012ba8:	701a      	strb	r2, [r3, #0]
  }
}
 8012baa:	bf00      	nop
 8012bac:	372c      	adds	r7, #44	@ 0x2c
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb4:	4770      	bx	lr
	...

08012bb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b084      	sub	sp, #16
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	460b      	mov	r3, r1
 8012bc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012bc4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8012bc8:	f006 f998 	bl	8018efc <USBD_static_malloc>
 8012bcc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d109      	bne.n	8012be8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	32b0      	adds	r2, #176	@ 0xb0
 8012bde:	2100      	movs	r1, #0
 8012be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012be4:	2302      	movs	r3, #2
 8012be6:	e0d4      	b.n	8012d92 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012be8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8012bec:	2100      	movs	r1, #0
 8012bee:	68f8      	ldr	r0, [r7, #12]
 8012bf0:	f008 fba3 	bl	801b33a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	32b0      	adds	r2, #176	@ 0xb0
 8012bfe:	68f9      	ldr	r1, [r7, #12]
 8012c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	32b0      	adds	r2, #176	@ 0xb0
 8012c0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	7c1b      	ldrb	r3, [r3, #16]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d138      	bne.n	8012c92 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012c20:	4b5e      	ldr	r3, [pc, #376]	@ (8012d9c <USBD_CDC_Init+0x1e4>)
 8012c22:	7819      	ldrb	r1, [r3, #0]
 8012c24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012c28:	2202      	movs	r2, #2
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f006 f80d 	bl	8018c4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012c30:	4b5a      	ldr	r3, [pc, #360]	@ (8012d9c <USBD_CDC_Init+0x1e4>)
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	f003 020f 	and.w	r2, r3, #15
 8012c38:	6879      	ldr	r1, [r7, #4]
 8012c3a:	4613      	mov	r3, r2
 8012c3c:	009b      	lsls	r3, r3, #2
 8012c3e:	4413      	add	r3, r2
 8012c40:	009b      	lsls	r3, r3, #2
 8012c42:	440b      	add	r3, r1
 8012c44:	3324      	adds	r3, #36	@ 0x24
 8012c46:	2201      	movs	r2, #1
 8012c48:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012c4a:	4b55      	ldr	r3, [pc, #340]	@ (8012da0 <USBD_CDC_Init+0x1e8>)
 8012c4c:	7819      	ldrb	r1, [r3, #0]
 8012c4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012c52:	2202      	movs	r2, #2
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f005 fff8 	bl	8018c4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012c5a:	4b51      	ldr	r3, [pc, #324]	@ (8012da0 <USBD_CDC_Init+0x1e8>)
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	f003 020f 	and.w	r2, r3, #15
 8012c62:	6879      	ldr	r1, [r7, #4]
 8012c64:	4613      	mov	r3, r2
 8012c66:	009b      	lsls	r3, r3, #2
 8012c68:	4413      	add	r3, r2
 8012c6a:	009b      	lsls	r3, r3, #2
 8012c6c:	440b      	add	r3, r1
 8012c6e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012c72:	2201      	movs	r2, #1
 8012c74:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012c76:	4b4b      	ldr	r3, [pc, #300]	@ (8012da4 <USBD_CDC_Init+0x1ec>)
 8012c78:	781b      	ldrb	r3, [r3, #0]
 8012c7a:	f003 020f 	and.w	r2, r3, #15
 8012c7e:	6879      	ldr	r1, [r7, #4]
 8012c80:	4613      	mov	r3, r2
 8012c82:	009b      	lsls	r3, r3, #2
 8012c84:	4413      	add	r3, r2
 8012c86:	009b      	lsls	r3, r3, #2
 8012c88:	440b      	add	r3, r1
 8012c8a:	3326      	adds	r3, #38	@ 0x26
 8012c8c:	2210      	movs	r2, #16
 8012c8e:	801a      	strh	r2, [r3, #0]
 8012c90:	e035      	b.n	8012cfe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012c92:	4b42      	ldr	r3, [pc, #264]	@ (8012d9c <USBD_CDC_Init+0x1e4>)
 8012c94:	7819      	ldrb	r1, [r3, #0]
 8012c96:	2340      	movs	r3, #64	@ 0x40
 8012c98:	2202      	movs	r2, #2
 8012c9a:	6878      	ldr	r0, [r7, #4]
 8012c9c:	f005 ffd5 	bl	8018c4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012ca0:	4b3e      	ldr	r3, [pc, #248]	@ (8012d9c <USBD_CDC_Init+0x1e4>)
 8012ca2:	781b      	ldrb	r3, [r3, #0]
 8012ca4:	f003 020f 	and.w	r2, r3, #15
 8012ca8:	6879      	ldr	r1, [r7, #4]
 8012caa:	4613      	mov	r3, r2
 8012cac:	009b      	lsls	r3, r3, #2
 8012cae:	4413      	add	r3, r2
 8012cb0:	009b      	lsls	r3, r3, #2
 8012cb2:	440b      	add	r3, r1
 8012cb4:	3324      	adds	r3, #36	@ 0x24
 8012cb6:	2201      	movs	r2, #1
 8012cb8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012cba:	4b39      	ldr	r3, [pc, #228]	@ (8012da0 <USBD_CDC_Init+0x1e8>)
 8012cbc:	7819      	ldrb	r1, [r3, #0]
 8012cbe:	2340      	movs	r3, #64	@ 0x40
 8012cc0:	2202      	movs	r2, #2
 8012cc2:	6878      	ldr	r0, [r7, #4]
 8012cc4:	f005 ffc1 	bl	8018c4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012cc8:	4b35      	ldr	r3, [pc, #212]	@ (8012da0 <USBD_CDC_Init+0x1e8>)
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	f003 020f 	and.w	r2, r3, #15
 8012cd0:	6879      	ldr	r1, [r7, #4]
 8012cd2:	4613      	mov	r3, r2
 8012cd4:	009b      	lsls	r3, r3, #2
 8012cd6:	4413      	add	r3, r2
 8012cd8:	009b      	lsls	r3, r3, #2
 8012cda:	440b      	add	r3, r1
 8012cdc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012ce0:	2201      	movs	r2, #1
 8012ce2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8012da4 <USBD_CDC_Init+0x1ec>)
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	f003 020f 	and.w	r2, r3, #15
 8012cec:	6879      	ldr	r1, [r7, #4]
 8012cee:	4613      	mov	r3, r2
 8012cf0:	009b      	lsls	r3, r3, #2
 8012cf2:	4413      	add	r3, r2
 8012cf4:	009b      	lsls	r3, r3, #2
 8012cf6:	440b      	add	r3, r1
 8012cf8:	3326      	adds	r3, #38	@ 0x26
 8012cfa:	2210      	movs	r2, #16
 8012cfc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012cfe:	4b29      	ldr	r3, [pc, #164]	@ (8012da4 <USBD_CDC_Init+0x1ec>)
 8012d00:	7819      	ldrb	r1, [r3, #0]
 8012d02:	2308      	movs	r3, #8
 8012d04:	2203      	movs	r2, #3
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	f005 ff9f 	bl	8018c4a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012d0c:	4b25      	ldr	r3, [pc, #148]	@ (8012da4 <USBD_CDC_Init+0x1ec>)
 8012d0e:	781b      	ldrb	r3, [r3, #0]
 8012d10:	f003 020f 	and.w	r2, r3, #15
 8012d14:	6879      	ldr	r1, [r7, #4]
 8012d16:	4613      	mov	r3, r2
 8012d18:	009b      	lsls	r3, r3, #2
 8012d1a:	4413      	add	r3, r2
 8012d1c:	009b      	lsls	r3, r3, #2
 8012d1e:	440b      	add	r3, r1
 8012d20:	3324      	adds	r3, #36	@ 0x24
 8012d22:	2201      	movs	r2, #1
 8012d24:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	2200      	movs	r2, #0
 8012d2a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012d34:	687a      	ldr	r2, [r7, #4]
 8012d36:	33b0      	adds	r3, #176	@ 0xb0
 8012d38:	009b      	lsls	r3, r3, #2
 8012d3a:	4413      	add	r3, r2
 8012d3c:	685b      	ldr	r3, [r3, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	2200      	movs	r2, #0
 8012d46:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d101      	bne.n	8012d60 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012d5c:	2302      	movs	r3, #2
 8012d5e:	e018      	b.n	8012d92 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	7c1b      	ldrb	r3, [r3, #16]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d10a      	bne.n	8012d7e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012d68:	4b0d      	ldr	r3, [pc, #52]	@ (8012da0 <USBD_CDC_Init+0x1e8>)
 8012d6a:	7819      	ldrb	r1, [r3, #0]
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012d72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f006 f856 	bl	8018e28 <USBD_LL_PrepareReceive>
 8012d7c:	e008      	b.n	8012d90 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012d7e:	4b08      	ldr	r3, [pc, #32]	@ (8012da0 <USBD_CDC_Init+0x1e8>)
 8012d80:	7819      	ldrb	r1, [r3, #0]
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012d88:	2340      	movs	r3, #64	@ 0x40
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f006 f84c 	bl	8018e28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012d90:	2300      	movs	r3, #0
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3710      	adds	r7, #16
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}
 8012d9a:	bf00      	nop
 8012d9c:	200000bf 	.word	0x200000bf
 8012da0:	200000c0 	.word	0x200000c0
 8012da4:	200000c1 	.word	0x200000c1

08012da8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	460b      	mov	r3, r1
 8012db2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012db4:	4b3a      	ldr	r3, [pc, #232]	@ (8012ea0 <USBD_CDC_DeInit+0xf8>)
 8012db6:	781b      	ldrb	r3, [r3, #0]
 8012db8:	4619      	mov	r1, r3
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f005 ff6b 	bl	8018c96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012dc0:	4b37      	ldr	r3, [pc, #220]	@ (8012ea0 <USBD_CDC_DeInit+0xf8>)
 8012dc2:	781b      	ldrb	r3, [r3, #0]
 8012dc4:	f003 020f 	and.w	r2, r3, #15
 8012dc8:	6879      	ldr	r1, [r7, #4]
 8012dca:	4613      	mov	r3, r2
 8012dcc:	009b      	lsls	r3, r3, #2
 8012dce:	4413      	add	r3, r2
 8012dd0:	009b      	lsls	r3, r3, #2
 8012dd2:	440b      	add	r3, r1
 8012dd4:	3324      	adds	r3, #36	@ 0x24
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8012dda:	4b32      	ldr	r3, [pc, #200]	@ (8012ea4 <USBD_CDC_DeInit+0xfc>)
 8012ddc:	781b      	ldrb	r3, [r3, #0]
 8012dde:	4619      	mov	r1, r3
 8012de0:	6878      	ldr	r0, [r7, #4]
 8012de2:	f005 ff58 	bl	8018c96 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012de6:	4b2f      	ldr	r3, [pc, #188]	@ (8012ea4 <USBD_CDC_DeInit+0xfc>)
 8012de8:	781b      	ldrb	r3, [r3, #0]
 8012dea:	f003 020f 	and.w	r2, r3, #15
 8012dee:	6879      	ldr	r1, [r7, #4]
 8012df0:	4613      	mov	r3, r2
 8012df2:	009b      	lsls	r3, r3, #2
 8012df4:	4413      	add	r3, r2
 8012df6:	009b      	lsls	r3, r3, #2
 8012df8:	440b      	add	r3, r1
 8012dfa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012dfe:	2200      	movs	r2, #0
 8012e00:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012e02:	4b29      	ldr	r3, [pc, #164]	@ (8012ea8 <USBD_CDC_DeInit+0x100>)
 8012e04:	781b      	ldrb	r3, [r3, #0]
 8012e06:	4619      	mov	r1, r3
 8012e08:	6878      	ldr	r0, [r7, #4]
 8012e0a:	f005 ff44 	bl	8018c96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8012e0e:	4b26      	ldr	r3, [pc, #152]	@ (8012ea8 <USBD_CDC_DeInit+0x100>)
 8012e10:	781b      	ldrb	r3, [r3, #0]
 8012e12:	f003 020f 	and.w	r2, r3, #15
 8012e16:	6879      	ldr	r1, [r7, #4]
 8012e18:	4613      	mov	r3, r2
 8012e1a:	009b      	lsls	r3, r3, #2
 8012e1c:	4413      	add	r3, r2
 8012e1e:	009b      	lsls	r3, r3, #2
 8012e20:	440b      	add	r3, r1
 8012e22:	3324      	adds	r3, #36	@ 0x24
 8012e24:	2200      	movs	r2, #0
 8012e26:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012e28:	4b1f      	ldr	r3, [pc, #124]	@ (8012ea8 <USBD_CDC_DeInit+0x100>)
 8012e2a:	781b      	ldrb	r3, [r3, #0]
 8012e2c:	f003 020f 	and.w	r2, r3, #15
 8012e30:	6879      	ldr	r1, [r7, #4]
 8012e32:	4613      	mov	r3, r2
 8012e34:	009b      	lsls	r3, r3, #2
 8012e36:	4413      	add	r3, r2
 8012e38:	009b      	lsls	r3, r3, #2
 8012e3a:	440b      	add	r3, r1
 8012e3c:	3326      	adds	r3, #38	@ 0x26
 8012e3e:	2200      	movs	r2, #0
 8012e40:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	32b0      	adds	r2, #176	@ 0xb0
 8012e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d01f      	beq.n	8012e94 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012e5a:	687a      	ldr	r2, [r7, #4]
 8012e5c:	33b0      	adds	r3, #176	@ 0xb0
 8012e5e:	009b      	lsls	r3, r3, #2
 8012e60:	4413      	add	r3, r2
 8012e62:	685b      	ldr	r3, [r3, #4]
 8012e64:	685b      	ldr	r3, [r3, #4]
 8012e66:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	32b0      	adds	r2, #176	@ 0xb0
 8012e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e76:	4618      	mov	r0, r3
 8012e78:	f006 f84e 	bl	8018f18 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	32b0      	adds	r2, #176	@ 0xb0
 8012e86:	2100      	movs	r1, #0
 8012e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	2200      	movs	r2, #0
 8012e90:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012e94:	2300      	movs	r3, #0
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3708      	adds	r7, #8
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd80      	pop	{r7, pc}
 8012e9e:	bf00      	nop
 8012ea0:	200000bf 	.word	0x200000bf
 8012ea4:	200000c0 	.word	0x200000c0
 8012ea8:	200000c1 	.word	0x200000c1

08012eac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b086      	sub	sp, #24
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
 8012eb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	32b0      	adds	r2, #176	@ 0xb0
 8012ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ec4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012eca:	2300      	movs	r3, #0
 8012ecc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012ed2:	693b      	ldr	r3, [r7, #16]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d101      	bne.n	8012edc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012ed8:	2303      	movs	r3, #3
 8012eda:	e0bf      	b.n	801305c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012edc:	683b      	ldr	r3, [r7, #0]
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d050      	beq.n	8012f8a <USBD_CDC_Setup+0xde>
 8012ee8:	2b20      	cmp	r3, #32
 8012eea:	f040 80af 	bne.w	801304c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	88db      	ldrh	r3, [r3, #6]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d03a      	beq.n	8012f6c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	781b      	ldrb	r3, [r3, #0]
 8012efa:	b25b      	sxtb	r3, r3
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	da1b      	bge.n	8012f38 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	33b0      	adds	r3, #176	@ 0xb0
 8012f0a:	009b      	lsls	r3, r3, #2
 8012f0c:	4413      	add	r3, r2
 8012f0e:	685b      	ldr	r3, [r3, #4]
 8012f10:	689b      	ldr	r3, [r3, #8]
 8012f12:	683a      	ldr	r2, [r7, #0]
 8012f14:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012f16:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012f18:	683a      	ldr	r2, [r7, #0]
 8012f1a:	88d2      	ldrh	r2, [r2, #6]
 8012f1c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	88db      	ldrh	r3, [r3, #6]
 8012f22:	2b07      	cmp	r3, #7
 8012f24:	bf28      	it	cs
 8012f26:	2307      	movcs	r3, #7
 8012f28:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	89fa      	ldrh	r2, [r7, #14]
 8012f2e:	4619      	mov	r1, r3
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f001 fd2b 	bl	801498c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012f36:	e090      	b.n	801305a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8012f38:	683b      	ldr	r3, [r7, #0]
 8012f3a:	785a      	ldrb	r2, [r3, #1]
 8012f3c:	693b      	ldr	r3, [r7, #16]
 8012f3e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	88db      	ldrh	r3, [r3, #6]
 8012f46:	2b3f      	cmp	r3, #63	@ 0x3f
 8012f48:	d803      	bhi.n	8012f52 <USBD_CDC_Setup+0xa6>
 8012f4a:	683b      	ldr	r3, [r7, #0]
 8012f4c:	88db      	ldrh	r3, [r3, #6]
 8012f4e:	b2da      	uxtb	r2, r3
 8012f50:	e000      	b.n	8012f54 <USBD_CDC_Setup+0xa8>
 8012f52:	2240      	movs	r2, #64	@ 0x40
 8012f54:	693b      	ldr	r3, [r7, #16]
 8012f56:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8012f5a:	6939      	ldr	r1, [r7, #16]
 8012f5c:	693b      	ldr	r3, [r7, #16]
 8012f5e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8012f62:	461a      	mov	r2, r3
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f001 fd3d 	bl	80149e4 <USBD_CtlPrepareRx>
      break;
 8012f6a:	e076      	b.n	801305a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012f72:	687a      	ldr	r2, [r7, #4]
 8012f74:	33b0      	adds	r3, #176	@ 0xb0
 8012f76:	009b      	lsls	r3, r3, #2
 8012f78:	4413      	add	r3, r2
 8012f7a:	685b      	ldr	r3, [r3, #4]
 8012f7c:	689b      	ldr	r3, [r3, #8]
 8012f7e:	683a      	ldr	r2, [r7, #0]
 8012f80:	7850      	ldrb	r0, [r2, #1]
 8012f82:	2200      	movs	r2, #0
 8012f84:	6839      	ldr	r1, [r7, #0]
 8012f86:	4798      	blx	r3
      break;
 8012f88:	e067      	b.n	801305a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012f8a:	683b      	ldr	r3, [r7, #0]
 8012f8c:	785b      	ldrb	r3, [r3, #1]
 8012f8e:	2b0b      	cmp	r3, #11
 8012f90:	d851      	bhi.n	8013036 <USBD_CDC_Setup+0x18a>
 8012f92:	a201      	add	r2, pc, #4	@ (adr r2, 8012f98 <USBD_CDC_Setup+0xec>)
 8012f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f98:	08012fc9 	.word	0x08012fc9
 8012f9c:	08013045 	.word	0x08013045
 8012fa0:	08013037 	.word	0x08013037
 8012fa4:	08013037 	.word	0x08013037
 8012fa8:	08013037 	.word	0x08013037
 8012fac:	08013037 	.word	0x08013037
 8012fb0:	08013037 	.word	0x08013037
 8012fb4:	08013037 	.word	0x08013037
 8012fb8:	08013037 	.word	0x08013037
 8012fbc:	08013037 	.word	0x08013037
 8012fc0:	08012ff3 	.word	0x08012ff3
 8012fc4:	0801301d 	.word	0x0801301d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012fce:	b2db      	uxtb	r3, r3
 8012fd0:	2b03      	cmp	r3, #3
 8012fd2:	d107      	bne.n	8012fe4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012fd4:	f107 030a 	add.w	r3, r7, #10
 8012fd8:	2202      	movs	r2, #2
 8012fda:	4619      	mov	r1, r3
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	f001 fcd5 	bl	801498c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012fe2:	e032      	b.n	801304a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012fe4:	6839      	ldr	r1, [r7, #0]
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f001 fc53 	bl	8014892 <USBD_CtlError>
            ret = USBD_FAIL;
 8012fec:	2303      	movs	r3, #3
 8012fee:	75fb      	strb	r3, [r7, #23]
          break;
 8012ff0:	e02b      	b.n	801304a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ff8:	b2db      	uxtb	r3, r3
 8012ffa:	2b03      	cmp	r3, #3
 8012ffc:	d107      	bne.n	801300e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012ffe:	f107 030d 	add.w	r3, r7, #13
 8013002:	2201      	movs	r2, #1
 8013004:	4619      	mov	r1, r3
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f001 fcc0 	bl	801498c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801300c:	e01d      	b.n	801304a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801300e:	6839      	ldr	r1, [r7, #0]
 8013010:	6878      	ldr	r0, [r7, #4]
 8013012:	f001 fc3e 	bl	8014892 <USBD_CtlError>
            ret = USBD_FAIL;
 8013016:	2303      	movs	r3, #3
 8013018:	75fb      	strb	r3, [r7, #23]
          break;
 801301a:	e016      	b.n	801304a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013022:	b2db      	uxtb	r3, r3
 8013024:	2b03      	cmp	r3, #3
 8013026:	d00f      	beq.n	8013048 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8013028:	6839      	ldr	r1, [r7, #0]
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f001 fc31 	bl	8014892 <USBD_CtlError>
            ret = USBD_FAIL;
 8013030:	2303      	movs	r3, #3
 8013032:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013034:	e008      	b.n	8013048 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013036:	6839      	ldr	r1, [r7, #0]
 8013038:	6878      	ldr	r0, [r7, #4]
 801303a:	f001 fc2a 	bl	8014892 <USBD_CtlError>
          ret = USBD_FAIL;
 801303e:	2303      	movs	r3, #3
 8013040:	75fb      	strb	r3, [r7, #23]
          break;
 8013042:	e002      	b.n	801304a <USBD_CDC_Setup+0x19e>
          break;
 8013044:	bf00      	nop
 8013046:	e008      	b.n	801305a <USBD_CDC_Setup+0x1ae>
          break;
 8013048:	bf00      	nop
      }
      break;
 801304a:	e006      	b.n	801305a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801304c:	6839      	ldr	r1, [r7, #0]
 801304e:	6878      	ldr	r0, [r7, #4]
 8013050:	f001 fc1f 	bl	8014892 <USBD_CtlError>
      ret = USBD_FAIL;
 8013054:	2303      	movs	r3, #3
 8013056:	75fb      	strb	r3, [r7, #23]
      break;
 8013058:	bf00      	nop
  }

  return (uint8_t)ret;
 801305a:	7dfb      	ldrb	r3, [r7, #23]
}
 801305c:	4618      	mov	r0, r3
 801305e:	3718      	adds	r7, #24
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}

08013064 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b084      	sub	sp, #16
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
 801306c:	460b      	mov	r3, r1
 801306e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013076:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	32b0      	adds	r2, #176	@ 0xb0
 8013082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d101      	bne.n	801308e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801308a:	2303      	movs	r3, #3
 801308c:	e065      	b.n	801315a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	32b0      	adds	r2, #176	@ 0xb0
 8013098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801309c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801309e:	78fb      	ldrb	r3, [r7, #3]
 80130a0:	f003 020f 	and.w	r2, r3, #15
 80130a4:	6879      	ldr	r1, [r7, #4]
 80130a6:	4613      	mov	r3, r2
 80130a8:	009b      	lsls	r3, r3, #2
 80130aa:	4413      	add	r3, r2
 80130ac:	009b      	lsls	r3, r3, #2
 80130ae:	440b      	add	r3, r1
 80130b0:	3318      	adds	r3, #24
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d02f      	beq.n	8013118 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80130b8:	78fb      	ldrb	r3, [r7, #3]
 80130ba:	f003 020f 	and.w	r2, r3, #15
 80130be:	6879      	ldr	r1, [r7, #4]
 80130c0:	4613      	mov	r3, r2
 80130c2:	009b      	lsls	r3, r3, #2
 80130c4:	4413      	add	r3, r2
 80130c6:	009b      	lsls	r3, r3, #2
 80130c8:	440b      	add	r3, r1
 80130ca:	3318      	adds	r3, #24
 80130cc:	681a      	ldr	r2, [r3, #0]
 80130ce:	78fb      	ldrb	r3, [r7, #3]
 80130d0:	f003 010f 	and.w	r1, r3, #15
 80130d4:	68f8      	ldr	r0, [r7, #12]
 80130d6:	460b      	mov	r3, r1
 80130d8:	009b      	lsls	r3, r3, #2
 80130da:	440b      	add	r3, r1
 80130dc:	00db      	lsls	r3, r3, #3
 80130de:	4403      	add	r3, r0
 80130e0:	3320      	adds	r3, #32
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80130e8:	fb01 f303 	mul.w	r3, r1, r3
 80130ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d112      	bne.n	8013118 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80130f2:	78fb      	ldrb	r3, [r7, #3]
 80130f4:	f003 020f 	and.w	r2, r3, #15
 80130f8:	6879      	ldr	r1, [r7, #4]
 80130fa:	4613      	mov	r3, r2
 80130fc:	009b      	lsls	r3, r3, #2
 80130fe:	4413      	add	r3, r2
 8013100:	009b      	lsls	r3, r3, #2
 8013102:	440b      	add	r3, r1
 8013104:	3318      	adds	r3, #24
 8013106:	2200      	movs	r2, #0
 8013108:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801310a:	78f9      	ldrb	r1, [r7, #3]
 801310c:	2300      	movs	r3, #0
 801310e:	2200      	movs	r2, #0
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	f005 fe68 	bl	8018de6 <USBD_LL_Transmit>
 8013116:	e01f      	b.n	8013158 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8013118:	68bb      	ldr	r3, [r7, #8]
 801311a:	2200      	movs	r2, #0
 801311c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013126:	687a      	ldr	r2, [r7, #4]
 8013128:	33b0      	adds	r3, #176	@ 0xb0
 801312a:	009b      	lsls	r3, r3, #2
 801312c:	4413      	add	r3, r2
 801312e:	685b      	ldr	r3, [r3, #4]
 8013130:	691b      	ldr	r3, [r3, #16]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d010      	beq.n	8013158 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801313c:	687a      	ldr	r2, [r7, #4]
 801313e:	33b0      	adds	r3, #176	@ 0xb0
 8013140:	009b      	lsls	r3, r3, #2
 8013142:	4413      	add	r3, r2
 8013144:	685b      	ldr	r3, [r3, #4]
 8013146:	691b      	ldr	r3, [r3, #16]
 8013148:	68ba      	ldr	r2, [r7, #8]
 801314a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801314e:	68ba      	ldr	r2, [r7, #8]
 8013150:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8013154:	78fa      	ldrb	r2, [r7, #3]
 8013156:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013158:	2300      	movs	r3, #0
}
 801315a:	4618      	mov	r0, r3
 801315c:	3710      	adds	r7, #16
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}

08013162 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013162:	b580      	push	{r7, lr}
 8013164:	b084      	sub	sp, #16
 8013166:	af00      	add	r7, sp, #0
 8013168:	6078      	str	r0, [r7, #4]
 801316a:	460b      	mov	r3, r1
 801316c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	32b0      	adds	r2, #176	@ 0xb0
 8013178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801317c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	32b0      	adds	r2, #176	@ 0xb0
 8013188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d101      	bne.n	8013194 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013190:	2303      	movs	r3, #3
 8013192:	e01a      	b.n	80131ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013194:	78fb      	ldrb	r3, [r7, #3]
 8013196:	4619      	mov	r1, r3
 8013198:	6878      	ldr	r0, [r7, #4]
 801319a:	f005 fe66 	bl	8018e6a <USBD_LL_GetRxDataSize>
 801319e:	4602      	mov	r2, r0
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80131ac:	687a      	ldr	r2, [r7, #4]
 80131ae:	33b0      	adds	r3, #176	@ 0xb0
 80131b0:	009b      	lsls	r3, r3, #2
 80131b2:	4413      	add	r3, r2
 80131b4:	685b      	ldr	r3, [r3, #4]
 80131b6:	68db      	ldr	r3, [r3, #12]
 80131b8:	68fa      	ldr	r2, [r7, #12]
 80131ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80131be:	68fa      	ldr	r2, [r7, #12]
 80131c0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80131c4:	4611      	mov	r1, r2
 80131c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80131c8:	2300      	movs	r3, #0
}
 80131ca:	4618      	mov	r0, r3
 80131cc:	3710      	adds	r7, #16
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}

080131d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80131d2:	b580      	push	{r7, lr}
 80131d4:	b084      	sub	sp, #16
 80131d6:	af00      	add	r7, sp, #0
 80131d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	32b0      	adds	r2, #176	@ 0xb0
 80131e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d101      	bne.n	80131f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80131f0:	2303      	movs	r3, #3
 80131f2:	e024      	b.n	801323e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80131fa:	687a      	ldr	r2, [r7, #4]
 80131fc:	33b0      	adds	r3, #176	@ 0xb0
 80131fe:	009b      	lsls	r3, r3, #2
 8013200:	4413      	add	r3, r2
 8013202:	685b      	ldr	r3, [r3, #4]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d019      	beq.n	801323c <USBD_CDC_EP0_RxReady+0x6a>
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801320e:	2bff      	cmp	r3, #255	@ 0xff
 8013210:	d014      	beq.n	801323c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013218:	687a      	ldr	r2, [r7, #4]
 801321a:	33b0      	adds	r3, #176	@ 0xb0
 801321c:	009b      	lsls	r3, r3, #2
 801321e:	4413      	add	r3, r2
 8013220:	685b      	ldr	r3, [r3, #4]
 8013222:	689b      	ldr	r3, [r3, #8]
 8013224:	68fa      	ldr	r2, [r7, #12]
 8013226:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801322a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801322c:	68fa      	ldr	r2, [r7, #12]
 801322e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013232:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	22ff      	movs	r2, #255	@ 0xff
 8013238:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801323c:	2300      	movs	r3, #0
}
 801323e:	4618      	mov	r0, r3
 8013240:	3710      	adds	r7, #16
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}
	...

08013248 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b086      	sub	sp, #24
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013250:	2182      	movs	r1, #130	@ 0x82
 8013252:	4818      	ldr	r0, [pc, #96]	@ (80132b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013254:	f000 fcbd 	bl	8013bd2 <USBD_GetEpDesc>
 8013258:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801325a:	2101      	movs	r1, #1
 801325c:	4815      	ldr	r0, [pc, #84]	@ (80132b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801325e:	f000 fcb8 	bl	8013bd2 <USBD_GetEpDesc>
 8013262:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013264:	2181      	movs	r1, #129	@ 0x81
 8013266:	4813      	ldr	r0, [pc, #76]	@ (80132b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013268:	f000 fcb3 	bl	8013bd2 <USBD_GetEpDesc>
 801326c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d002      	beq.n	801327a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013274:	697b      	ldr	r3, [r7, #20]
 8013276:	2210      	movs	r2, #16
 8013278:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801327a:	693b      	ldr	r3, [r7, #16]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d006      	beq.n	801328e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	2200      	movs	r2, #0
 8013284:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013288:	711a      	strb	r2, [r3, #4]
 801328a:	2200      	movs	r2, #0
 801328c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d006      	beq.n	80132a2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	2200      	movs	r2, #0
 8013298:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801329c:	711a      	strb	r2, [r3, #4]
 801329e:	2200      	movs	r2, #0
 80132a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	2243      	movs	r2, #67	@ 0x43
 80132a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80132a8:	4b02      	ldr	r3, [pc, #8]	@ (80132b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80132aa:	4618      	mov	r0, r3
 80132ac:	3718      	adds	r7, #24
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}
 80132b2:	bf00      	nop
 80132b4:	2000007c 	.word	0x2000007c

080132b8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b086      	sub	sp, #24
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80132c0:	2182      	movs	r1, #130	@ 0x82
 80132c2:	4818      	ldr	r0, [pc, #96]	@ (8013324 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80132c4:	f000 fc85 	bl	8013bd2 <USBD_GetEpDesc>
 80132c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80132ca:	2101      	movs	r1, #1
 80132cc:	4815      	ldr	r0, [pc, #84]	@ (8013324 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80132ce:	f000 fc80 	bl	8013bd2 <USBD_GetEpDesc>
 80132d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80132d4:	2181      	movs	r1, #129	@ 0x81
 80132d6:	4813      	ldr	r0, [pc, #76]	@ (8013324 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80132d8:	f000 fc7b 	bl	8013bd2 <USBD_GetEpDesc>
 80132dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d002      	beq.n	80132ea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80132e4:	697b      	ldr	r3, [r7, #20]
 80132e6:	2210      	movs	r2, #16
 80132e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80132ea:	693b      	ldr	r3, [r7, #16]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d006      	beq.n	80132fe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80132f0:	693b      	ldr	r3, [r7, #16]
 80132f2:	2200      	movs	r2, #0
 80132f4:	711a      	strb	r2, [r3, #4]
 80132f6:	2200      	movs	r2, #0
 80132f8:	f042 0202 	orr.w	r2, r2, #2
 80132fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d006      	beq.n	8013312 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	2200      	movs	r2, #0
 8013308:	711a      	strb	r2, [r3, #4]
 801330a:	2200      	movs	r2, #0
 801330c:	f042 0202 	orr.w	r2, r2, #2
 8013310:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	2243      	movs	r2, #67	@ 0x43
 8013316:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013318:	4b02      	ldr	r3, [pc, #8]	@ (8013324 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801331a:	4618      	mov	r0, r3
 801331c:	3718      	adds	r7, #24
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop
 8013324:	2000007c 	.word	0x2000007c

08013328 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b086      	sub	sp, #24
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013330:	2182      	movs	r1, #130	@ 0x82
 8013332:	4818      	ldr	r0, [pc, #96]	@ (8013394 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013334:	f000 fc4d 	bl	8013bd2 <USBD_GetEpDesc>
 8013338:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801333a:	2101      	movs	r1, #1
 801333c:	4815      	ldr	r0, [pc, #84]	@ (8013394 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801333e:	f000 fc48 	bl	8013bd2 <USBD_GetEpDesc>
 8013342:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013344:	2181      	movs	r1, #129	@ 0x81
 8013346:	4813      	ldr	r0, [pc, #76]	@ (8013394 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013348:	f000 fc43 	bl	8013bd2 <USBD_GetEpDesc>
 801334c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801334e:	697b      	ldr	r3, [r7, #20]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d002      	beq.n	801335a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013354:	697b      	ldr	r3, [r7, #20]
 8013356:	2210      	movs	r2, #16
 8013358:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801335a:	693b      	ldr	r3, [r7, #16]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d006      	beq.n	801336e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	2200      	movs	r2, #0
 8013364:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013368:	711a      	strb	r2, [r3, #4]
 801336a:	2200      	movs	r2, #0
 801336c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d006      	beq.n	8013382 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	2200      	movs	r2, #0
 8013378:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801337c:	711a      	strb	r2, [r3, #4]
 801337e:	2200      	movs	r2, #0
 8013380:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	2243      	movs	r2, #67	@ 0x43
 8013386:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013388:	4b02      	ldr	r3, [pc, #8]	@ (8013394 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801338a:	4618      	mov	r0, r3
 801338c:	3718      	adds	r7, #24
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
 8013392:	bf00      	nop
 8013394:	2000007c 	.word	0x2000007c

08013398 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013398:	b480      	push	{r7}
 801339a:	b083      	sub	sp, #12
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	220a      	movs	r2, #10
 80133a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80133a6:	4b03      	ldr	r3, [pc, #12]	@ (80133b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80133a8:	4618      	mov	r0, r3
 80133aa:	370c      	adds	r7, #12
 80133ac:	46bd      	mov	sp, r7
 80133ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b2:	4770      	bx	lr
 80133b4:	20000038 	.word	0x20000038

080133b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80133b8:	b480      	push	{r7}
 80133ba:	b083      	sub	sp, #12
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d101      	bne.n	80133cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80133c8:	2303      	movs	r3, #3
 80133ca:	e009      	b.n	80133e0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80133d2:	687a      	ldr	r2, [r7, #4]
 80133d4:	33b0      	adds	r3, #176	@ 0xb0
 80133d6:	009b      	lsls	r3, r3, #2
 80133d8:	4413      	add	r3, r2
 80133da:	683a      	ldr	r2, [r7, #0]
 80133dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80133de:	2300      	movs	r3, #0
}
 80133e0:	4618      	mov	r0, r3
 80133e2:	370c      	adds	r7, #12
 80133e4:	46bd      	mov	sp, r7
 80133e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ea:	4770      	bx	lr

080133ec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80133ec:	b480      	push	{r7}
 80133ee:	b087      	sub	sp, #28
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	60f8      	str	r0, [r7, #12]
 80133f4:	60b9      	str	r1, [r7, #8]
 80133f6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	32b0      	adds	r2, #176	@ 0xb0
 8013402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013406:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d101      	bne.n	8013412 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801340e:	2303      	movs	r3, #3
 8013410:	e008      	b.n	8013424 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	68ba      	ldr	r2, [r7, #8]
 8013416:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801341a:	697b      	ldr	r3, [r7, #20]
 801341c:	687a      	ldr	r2, [r7, #4]
 801341e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8013422:	2300      	movs	r3, #0
}
 8013424:	4618      	mov	r0, r3
 8013426:	371c      	adds	r7, #28
 8013428:	46bd      	mov	sp, r7
 801342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342e:	4770      	bx	lr

08013430 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013430:	b480      	push	{r7}
 8013432:	b085      	sub	sp, #20
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	32b0      	adds	r2, #176	@ 0xb0
 8013444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013448:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d101      	bne.n	8013454 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013450:	2303      	movs	r3, #3
 8013452:	e004      	b.n	801345e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	683a      	ldr	r2, [r7, #0]
 8013458:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801345c:	2300      	movs	r3, #0
}
 801345e:	4618      	mov	r0, r3
 8013460:	3714      	adds	r7, #20
 8013462:	46bd      	mov	sp, r7
 8013464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013468:	4770      	bx	lr
	...

0801346c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b084      	sub	sp, #16
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	32b0      	adds	r2, #176	@ 0xb0
 801347e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013482:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013484:	2301      	movs	r3, #1
 8013486:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d101      	bne.n	8013492 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801348e:	2303      	movs	r3, #3
 8013490:	e025      	b.n	80134de <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013498:	2b00      	cmp	r3, #0
 801349a:	d11f      	bne.n	80134dc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801349c:	68bb      	ldr	r3, [r7, #8]
 801349e:	2201      	movs	r2, #1
 80134a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80134a4:	4b10      	ldr	r3, [pc, #64]	@ (80134e8 <USBD_CDC_TransmitPacket+0x7c>)
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	f003 020f 	and.w	r2, r3, #15
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80134b2:	6878      	ldr	r0, [r7, #4]
 80134b4:	4613      	mov	r3, r2
 80134b6:	009b      	lsls	r3, r3, #2
 80134b8:	4413      	add	r3, r2
 80134ba:	009b      	lsls	r3, r3, #2
 80134bc:	4403      	add	r3, r0
 80134be:	3318      	adds	r3, #24
 80134c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80134c2:	4b09      	ldr	r3, [pc, #36]	@ (80134e8 <USBD_CDC_TransmitPacket+0x7c>)
 80134c4:	7819      	ldrb	r1, [r3, #0]
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80134cc:	68bb      	ldr	r3, [r7, #8]
 80134ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80134d2:	6878      	ldr	r0, [r7, #4]
 80134d4:	f005 fc87 	bl	8018de6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80134d8:	2300      	movs	r3, #0
 80134da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80134dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80134de:	4618      	mov	r0, r3
 80134e0:	3710      	adds	r7, #16
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}
 80134e6:	bf00      	nop
 80134e8:	200000bf 	.word	0x200000bf

080134ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b084      	sub	sp, #16
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	32b0      	adds	r2, #176	@ 0xb0
 80134fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013502:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	32b0      	adds	r2, #176	@ 0xb0
 801350e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d101      	bne.n	801351a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013516:	2303      	movs	r3, #3
 8013518:	e018      	b.n	801354c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	7c1b      	ldrb	r3, [r3, #16]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d10a      	bne.n	8013538 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013522:	4b0c      	ldr	r3, [pc, #48]	@ (8013554 <USBD_CDC_ReceivePacket+0x68>)
 8013524:	7819      	ldrb	r1, [r3, #0]
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801352c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013530:	6878      	ldr	r0, [r7, #4]
 8013532:	f005 fc79 	bl	8018e28 <USBD_LL_PrepareReceive>
 8013536:	e008      	b.n	801354a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013538:	4b06      	ldr	r3, [pc, #24]	@ (8013554 <USBD_CDC_ReceivePacket+0x68>)
 801353a:	7819      	ldrb	r1, [r3, #0]
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013542:	2340      	movs	r3, #64	@ 0x40
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f005 fc6f 	bl	8018e28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801354a:	2300      	movs	r3, #0
}
 801354c:	4618      	mov	r0, r3
 801354e:	3710      	adds	r7, #16
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}
 8013554:	200000c0 	.word	0x200000c0

08013558 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b086      	sub	sp, #24
 801355c:	af00      	add	r7, sp, #0
 801355e:	60f8      	str	r0, [r7, #12]
 8013560:	60b9      	str	r1, [r7, #8]
 8013562:	4613      	mov	r3, r2
 8013564:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d101      	bne.n	8013570 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801356c:	2303      	movs	r3, #3
 801356e:	e01f      	b.n	80135b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	2200      	movs	r2, #0
 8013574:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	2200      	movs	r2, #0
 801357c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	2200      	movs	r2, #0
 8013584:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013588:	68bb      	ldr	r3, [r7, #8]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d003      	beq.n	8013596 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	68ba      	ldr	r2, [r7, #8]
 8013592:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	2201      	movs	r2, #1
 801359a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	79fa      	ldrb	r2, [r7, #7]
 80135a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80135a4:	68f8      	ldr	r0, [r7, #12]
 80135a6:	f005 fad3 	bl	8018b50 <USBD_LL_Init>
 80135aa:	4603      	mov	r3, r0
 80135ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80135ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80135b0:	4618      	mov	r0, r3
 80135b2:	3718      	adds	r7, #24
 80135b4:	46bd      	mov	sp, r7
 80135b6:	bd80      	pop	{r7, pc}

080135b8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b084      	sub	sp, #16
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
 80135c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80135c2:	2300      	movs	r3, #0
 80135c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d101      	bne.n	80135d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80135cc:	2303      	movs	r3, #3
 80135ce:	e025      	b.n	801361c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	683a      	ldr	r2, [r7, #0]
 80135d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	32ae      	adds	r2, #174	@ 0xae
 80135e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d00f      	beq.n	801360c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	32ae      	adds	r2, #174	@ 0xae
 80135f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135fc:	f107 020e 	add.w	r2, r7, #14
 8013600:	4610      	mov	r0, r2
 8013602:	4798      	blx	r3
 8013604:	4602      	mov	r2, r0
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013612:	1c5a      	adds	r2, r3, #1
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801361a:	2300      	movs	r3, #0
}
 801361c:	4618      	mov	r0, r3
 801361e:	3710      	adds	r7, #16
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}

08013624 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b082      	sub	sp, #8
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f005 faf1 	bl	8018c14 <USBD_LL_Start>
 8013632:	4603      	mov	r3, r0
}
 8013634:	4618      	mov	r0, r3
 8013636:	3708      	adds	r7, #8
 8013638:	46bd      	mov	sp, r7
 801363a:	bd80      	pop	{r7, pc}

0801363c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801363c:	b480      	push	{r7}
 801363e:	b083      	sub	sp, #12
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013644:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013646:	4618      	mov	r0, r3
 8013648:	370c      	adds	r7, #12
 801364a:	46bd      	mov	sp, r7
 801364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013650:	4770      	bx	lr

08013652 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013652:	b580      	push	{r7, lr}
 8013654:	b084      	sub	sp, #16
 8013656:	af00      	add	r7, sp, #0
 8013658:	6078      	str	r0, [r7, #4]
 801365a:	460b      	mov	r3, r1
 801365c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801365e:	2300      	movs	r3, #0
 8013660:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013668:	2b00      	cmp	r3, #0
 801366a:	d009      	beq.n	8013680 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	78fa      	ldrb	r2, [r7, #3]
 8013676:	4611      	mov	r1, r2
 8013678:	6878      	ldr	r0, [r7, #4]
 801367a:	4798      	blx	r3
 801367c:	4603      	mov	r3, r0
 801367e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013680:	7bfb      	ldrb	r3, [r7, #15]
}
 8013682:	4618      	mov	r0, r3
 8013684:	3710      	adds	r7, #16
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}

0801368a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801368a:	b580      	push	{r7, lr}
 801368c:	b084      	sub	sp, #16
 801368e:	af00      	add	r7, sp, #0
 8013690:	6078      	str	r0, [r7, #4]
 8013692:	460b      	mov	r3, r1
 8013694:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013696:	2300      	movs	r3, #0
 8013698:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80136a0:	685b      	ldr	r3, [r3, #4]
 80136a2:	78fa      	ldrb	r2, [r7, #3]
 80136a4:	4611      	mov	r1, r2
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	4798      	blx	r3
 80136aa:	4603      	mov	r3, r0
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d001      	beq.n	80136b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80136b0:	2303      	movs	r3, #3
 80136b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80136b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80136b6:	4618      	mov	r0, r3
 80136b8:	3710      	adds	r7, #16
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bd80      	pop	{r7, pc}

080136be <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80136be:	b580      	push	{r7, lr}
 80136c0:	b084      	sub	sp, #16
 80136c2:	af00      	add	r7, sp, #0
 80136c4:	6078      	str	r0, [r7, #4]
 80136c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80136ce:	6839      	ldr	r1, [r7, #0]
 80136d0:	4618      	mov	r0, r3
 80136d2:	f001 f8a4 	bl	801481e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	2201      	movs	r2, #1
 80136da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80136e4:	461a      	mov	r2, r3
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80136f2:	f003 031f 	and.w	r3, r3, #31
 80136f6:	2b02      	cmp	r3, #2
 80136f8:	d01a      	beq.n	8013730 <USBD_LL_SetupStage+0x72>
 80136fa:	2b02      	cmp	r3, #2
 80136fc:	d822      	bhi.n	8013744 <USBD_LL_SetupStage+0x86>
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d002      	beq.n	8013708 <USBD_LL_SetupStage+0x4a>
 8013702:	2b01      	cmp	r3, #1
 8013704:	d00a      	beq.n	801371c <USBD_LL_SetupStage+0x5e>
 8013706:	e01d      	b.n	8013744 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801370e:	4619      	mov	r1, r3
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f000 fad1 	bl	8013cb8 <USBD_StdDevReq>
 8013716:	4603      	mov	r3, r0
 8013718:	73fb      	strb	r3, [r7, #15]
      break;
 801371a:	e020      	b.n	801375e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013722:	4619      	mov	r1, r3
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f000 fb39 	bl	8013d9c <USBD_StdItfReq>
 801372a:	4603      	mov	r3, r0
 801372c:	73fb      	strb	r3, [r7, #15]
      break;
 801372e:	e016      	b.n	801375e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013736:	4619      	mov	r1, r3
 8013738:	6878      	ldr	r0, [r7, #4]
 801373a:	f000 fb9b 	bl	8013e74 <USBD_StdEPReq>
 801373e:	4603      	mov	r3, r0
 8013740:	73fb      	strb	r3, [r7, #15]
      break;
 8013742:	e00c      	b.n	801375e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801374a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801374e:	b2db      	uxtb	r3, r3
 8013750:	4619      	mov	r1, r3
 8013752:	6878      	ldr	r0, [r7, #4]
 8013754:	f005 fabe 	bl	8018cd4 <USBD_LL_StallEP>
 8013758:	4603      	mov	r3, r0
 801375a:	73fb      	strb	r3, [r7, #15]
      break;
 801375c:	bf00      	nop
  }

  return ret;
 801375e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013760:	4618      	mov	r0, r3
 8013762:	3710      	adds	r7, #16
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}

08013768 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b086      	sub	sp, #24
 801376c:	af00      	add	r7, sp, #0
 801376e:	60f8      	str	r0, [r7, #12]
 8013770:	460b      	mov	r3, r1
 8013772:	607a      	str	r2, [r7, #4]
 8013774:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013776:	2300      	movs	r3, #0
 8013778:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801377a:	7afb      	ldrb	r3, [r7, #11]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d16e      	bne.n	801385e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013786:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801378e:	2b03      	cmp	r3, #3
 8013790:	f040 8098 	bne.w	80138c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013794:	693b      	ldr	r3, [r7, #16]
 8013796:	689a      	ldr	r2, [r3, #8]
 8013798:	693b      	ldr	r3, [r7, #16]
 801379a:	68db      	ldr	r3, [r3, #12]
 801379c:	429a      	cmp	r2, r3
 801379e:	d913      	bls.n	80137c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	689a      	ldr	r2, [r3, #8]
 80137a4:	693b      	ldr	r3, [r7, #16]
 80137a6:	68db      	ldr	r3, [r3, #12]
 80137a8:	1ad2      	subs	r2, r2, r3
 80137aa:	693b      	ldr	r3, [r7, #16]
 80137ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80137ae:	693b      	ldr	r3, [r7, #16]
 80137b0:	68da      	ldr	r2, [r3, #12]
 80137b2:	693b      	ldr	r3, [r7, #16]
 80137b4:	689b      	ldr	r3, [r3, #8]
 80137b6:	4293      	cmp	r3, r2
 80137b8:	bf28      	it	cs
 80137ba:	4613      	movcs	r3, r2
 80137bc:	461a      	mov	r2, r3
 80137be:	6879      	ldr	r1, [r7, #4]
 80137c0:	68f8      	ldr	r0, [r7, #12]
 80137c2:	f001 f92c 	bl	8014a1e <USBD_CtlContinueRx>
 80137c6:	e07d      	b.n	80138c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80137ce:	f003 031f 	and.w	r3, r3, #31
 80137d2:	2b02      	cmp	r3, #2
 80137d4:	d014      	beq.n	8013800 <USBD_LL_DataOutStage+0x98>
 80137d6:	2b02      	cmp	r3, #2
 80137d8:	d81d      	bhi.n	8013816 <USBD_LL_DataOutStage+0xae>
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d002      	beq.n	80137e4 <USBD_LL_DataOutStage+0x7c>
 80137de:	2b01      	cmp	r3, #1
 80137e0:	d003      	beq.n	80137ea <USBD_LL_DataOutStage+0x82>
 80137e2:	e018      	b.n	8013816 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80137e4:	2300      	movs	r3, #0
 80137e6:	75bb      	strb	r3, [r7, #22]
            break;
 80137e8:	e018      	b.n	801381c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80137f0:	b2db      	uxtb	r3, r3
 80137f2:	4619      	mov	r1, r3
 80137f4:	68f8      	ldr	r0, [r7, #12]
 80137f6:	f000 f9d2 	bl	8013b9e <USBD_CoreFindIF>
 80137fa:	4603      	mov	r3, r0
 80137fc:	75bb      	strb	r3, [r7, #22]
            break;
 80137fe:	e00d      	b.n	801381c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013806:	b2db      	uxtb	r3, r3
 8013808:	4619      	mov	r1, r3
 801380a:	68f8      	ldr	r0, [r7, #12]
 801380c:	f000 f9d4 	bl	8013bb8 <USBD_CoreFindEP>
 8013810:	4603      	mov	r3, r0
 8013812:	75bb      	strb	r3, [r7, #22]
            break;
 8013814:	e002      	b.n	801381c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013816:	2300      	movs	r3, #0
 8013818:	75bb      	strb	r3, [r7, #22]
            break;
 801381a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801381c:	7dbb      	ldrb	r3, [r7, #22]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d119      	bne.n	8013856 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013828:	b2db      	uxtb	r3, r3
 801382a:	2b03      	cmp	r3, #3
 801382c:	d113      	bne.n	8013856 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801382e:	7dba      	ldrb	r2, [r7, #22]
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	32ae      	adds	r2, #174	@ 0xae
 8013834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013838:	691b      	ldr	r3, [r3, #16]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d00b      	beq.n	8013856 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801383e:	7dba      	ldrb	r2, [r7, #22]
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013846:	7dba      	ldrb	r2, [r7, #22]
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	32ae      	adds	r2, #174	@ 0xae
 801384c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013850:	691b      	ldr	r3, [r3, #16]
 8013852:	68f8      	ldr	r0, [r7, #12]
 8013854:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013856:	68f8      	ldr	r0, [r7, #12]
 8013858:	f001 f8f2 	bl	8014a40 <USBD_CtlSendStatus>
 801385c:	e032      	b.n	80138c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801385e:	7afb      	ldrb	r3, [r7, #11]
 8013860:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013864:	b2db      	uxtb	r3, r3
 8013866:	4619      	mov	r1, r3
 8013868:	68f8      	ldr	r0, [r7, #12]
 801386a:	f000 f9a5 	bl	8013bb8 <USBD_CoreFindEP>
 801386e:	4603      	mov	r3, r0
 8013870:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013872:	7dbb      	ldrb	r3, [r7, #22]
 8013874:	2bff      	cmp	r3, #255	@ 0xff
 8013876:	d025      	beq.n	80138c4 <USBD_LL_DataOutStage+0x15c>
 8013878:	7dbb      	ldrb	r3, [r7, #22]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d122      	bne.n	80138c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013884:	b2db      	uxtb	r3, r3
 8013886:	2b03      	cmp	r3, #3
 8013888:	d117      	bne.n	80138ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801388a:	7dba      	ldrb	r2, [r7, #22]
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	32ae      	adds	r2, #174	@ 0xae
 8013890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013894:	699b      	ldr	r3, [r3, #24]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d00f      	beq.n	80138ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801389a:	7dba      	ldrb	r2, [r7, #22]
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80138a2:	7dba      	ldrb	r2, [r7, #22]
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	32ae      	adds	r2, #174	@ 0xae
 80138a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138ac:	699b      	ldr	r3, [r3, #24]
 80138ae:	7afa      	ldrb	r2, [r7, #11]
 80138b0:	4611      	mov	r1, r2
 80138b2:	68f8      	ldr	r0, [r7, #12]
 80138b4:	4798      	blx	r3
 80138b6:	4603      	mov	r3, r0
 80138b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80138ba:	7dfb      	ldrb	r3, [r7, #23]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d001      	beq.n	80138c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80138c0:	7dfb      	ldrb	r3, [r7, #23]
 80138c2:	e000      	b.n	80138c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80138c4:	2300      	movs	r3, #0
}
 80138c6:	4618      	mov	r0, r3
 80138c8:	3718      	adds	r7, #24
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bd80      	pop	{r7, pc}

080138ce <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80138ce:	b580      	push	{r7, lr}
 80138d0:	b086      	sub	sp, #24
 80138d2:	af00      	add	r7, sp, #0
 80138d4:	60f8      	str	r0, [r7, #12]
 80138d6:	460b      	mov	r3, r1
 80138d8:	607a      	str	r2, [r7, #4]
 80138da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80138dc:	7afb      	ldrb	r3, [r7, #11]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d16f      	bne.n	80139c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	3314      	adds	r3, #20
 80138e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80138ee:	2b02      	cmp	r3, #2
 80138f0:	d15a      	bne.n	80139a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80138f2:	693b      	ldr	r3, [r7, #16]
 80138f4:	689a      	ldr	r2, [r3, #8]
 80138f6:	693b      	ldr	r3, [r7, #16]
 80138f8:	68db      	ldr	r3, [r3, #12]
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d914      	bls.n	8013928 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80138fe:	693b      	ldr	r3, [r7, #16]
 8013900:	689a      	ldr	r2, [r3, #8]
 8013902:	693b      	ldr	r3, [r7, #16]
 8013904:	68db      	ldr	r3, [r3, #12]
 8013906:	1ad2      	subs	r2, r2, r3
 8013908:	693b      	ldr	r3, [r7, #16]
 801390a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801390c:	693b      	ldr	r3, [r7, #16]
 801390e:	689b      	ldr	r3, [r3, #8]
 8013910:	461a      	mov	r2, r3
 8013912:	6879      	ldr	r1, [r7, #4]
 8013914:	68f8      	ldr	r0, [r7, #12]
 8013916:	f001 f854 	bl	80149c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801391a:	2300      	movs	r3, #0
 801391c:	2200      	movs	r2, #0
 801391e:	2100      	movs	r1, #0
 8013920:	68f8      	ldr	r0, [r7, #12]
 8013922:	f005 fa81 	bl	8018e28 <USBD_LL_PrepareReceive>
 8013926:	e03f      	b.n	80139a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	68da      	ldr	r2, [r3, #12]
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	689b      	ldr	r3, [r3, #8]
 8013930:	429a      	cmp	r2, r3
 8013932:	d11c      	bne.n	801396e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013934:	693b      	ldr	r3, [r7, #16]
 8013936:	685a      	ldr	r2, [r3, #4]
 8013938:	693b      	ldr	r3, [r7, #16]
 801393a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801393c:	429a      	cmp	r2, r3
 801393e:	d316      	bcc.n	801396e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013940:	693b      	ldr	r3, [r7, #16]
 8013942:	685a      	ldr	r2, [r3, #4]
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801394a:	429a      	cmp	r2, r3
 801394c:	d20f      	bcs.n	801396e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801394e:	2200      	movs	r2, #0
 8013950:	2100      	movs	r1, #0
 8013952:	68f8      	ldr	r0, [r7, #12]
 8013954:	f001 f835 	bl	80149c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	2200      	movs	r2, #0
 801395c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013960:	2300      	movs	r3, #0
 8013962:	2200      	movs	r2, #0
 8013964:	2100      	movs	r1, #0
 8013966:	68f8      	ldr	r0, [r7, #12]
 8013968:	f005 fa5e 	bl	8018e28 <USBD_LL_PrepareReceive>
 801396c:	e01c      	b.n	80139a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013974:	b2db      	uxtb	r3, r3
 8013976:	2b03      	cmp	r3, #3
 8013978:	d10f      	bne.n	801399a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013980:	68db      	ldr	r3, [r3, #12]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d009      	beq.n	801399a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	2200      	movs	r2, #0
 801398a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013994:	68db      	ldr	r3, [r3, #12]
 8013996:	68f8      	ldr	r0, [r7, #12]
 8013998:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801399a:	2180      	movs	r1, #128	@ 0x80
 801399c:	68f8      	ldr	r0, [r7, #12]
 801399e:	f005 f999 	bl	8018cd4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80139a2:	68f8      	ldr	r0, [r7, #12]
 80139a4:	f001 f85f 	bl	8014a66 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d03a      	beq.n	8013a28 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80139b2:	68f8      	ldr	r0, [r7, #12]
 80139b4:	f7ff fe42 	bl	801363c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	2200      	movs	r2, #0
 80139bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80139c0:	e032      	b.n	8013a28 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80139c2:	7afb      	ldrb	r3, [r7, #11]
 80139c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80139c8:	b2db      	uxtb	r3, r3
 80139ca:	4619      	mov	r1, r3
 80139cc:	68f8      	ldr	r0, [r7, #12]
 80139ce:	f000 f8f3 	bl	8013bb8 <USBD_CoreFindEP>
 80139d2:	4603      	mov	r3, r0
 80139d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80139d6:	7dfb      	ldrb	r3, [r7, #23]
 80139d8:	2bff      	cmp	r3, #255	@ 0xff
 80139da:	d025      	beq.n	8013a28 <USBD_LL_DataInStage+0x15a>
 80139dc:	7dfb      	ldrb	r3, [r7, #23]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d122      	bne.n	8013a28 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80139e8:	b2db      	uxtb	r3, r3
 80139ea:	2b03      	cmp	r3, #3
 80139ec:	d11c      	bne.n	8013a28 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80139ee:	7dfa      	ldrb	r2, [r7, #23]
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	32ae      	adds	r2, #174	@ 0xae
 80139f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139f8:	695b      	ldr	r3, [r3, #20]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d014      	beq.n	8013a28 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80139fe:	7dfa      	ldrb	r2, [r7, #23]
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013a06:	7dfa      	ldrb	r2, [r7, #23]
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	32ae      	adds	r2, #174	@ 0xae
 8013a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a10:	695b      	ldr	r3, [r3, #20]
 8013a12:	7afa      	ldrb	r2, [r7, #11]
 8013a14:	4611      	mov	r1, r2
 8013a16:	68f8      	ldr	r0, [r7, #12]
 8013a18:	4798      	blx	r3
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013a1e:	7dbb      	ldrb	r3, [r7, #22]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d001      	beq.n	8013a28 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013a24:	7dbb      	ldrb	r3, [r7, #22]
 8013a26:	e000      	b.n	8013a2a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013a28:	2300      	movs	r3, #0
}
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	3718      	adds	r7, #24
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	bd80      	pop	{r7, pc}

08013a32 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013a32:	b580      	push	{r7, lr}
 8013a34:	b084      	sub	sp, #16
 8013a36:	af00      	add	r7, sp, #0
 8013a38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	2201      	movs	r2, #1
 8013a42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	2200      	movs	r2, #0
 8013a4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	2200      	movs	r2, #0
 8013a52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	2200      	movs	r2, #0
 8013a58:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	2200      	movs	r2, #0
 8013a60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d014      	beq.n	8013a98 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a74:	685b      	ldr	r3, [r3, #4]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d00e      	beq.n	8013a98 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a80:	685b      	ldr	r3, [r3, #4]
 8013a82:	687a      	ldr	r2, [r7, #4]
 8013a84:	6852      	ldr	r2, [r2, #4]
 8013a86:	b2d2      	uxtb	r2, r2
 8013a88:	4611      	mov	r1, r2
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	4798      	blx	r3
 8013a8e:	4603      	mov	r3, r0
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d001      	beq.n	8013a98 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013a94:	2303      	movs	r3, #3
 8013a96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013a98:	2340      	movs	r3, #64	@ 0x40
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	2100      	movs	r1, #0
 8013a9e:	6878      	ldr	r0, [r7, #4]
 8013aa0:	f005 f8d3 	bl	8018c4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	2201      	movs	r2, #1
 8013aa8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	2240      	movs	r2, #64	@ 0x40
 8013ab0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013ab4:	2340      	movs	r3, #64	@ 0x40
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	2180      	movs	r1, #128	@ 0x80
 8013aba:	6878      	ldr	r0, [r7, #4]
 8013abc:	f005 f8c5 	bl	8018c4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	2201      	movs	r2, #1
 8013ac4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	2240      	movs	r2, #64	@ 0x40
 8013aca:	621a      	str	r2, [r3, #32]

  return ret;
 8013acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	3710      	adds	r7, #16
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	bd80      	pop	{r7, pc}

08013ad6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013ad6:	b480      	push	{r7}
 8013ad8:	b083      	sub	sp, #12
 8013ada:	af00      	add	r7, sp, #0
 8013adc:	6078      	str	r0, [r7, #4]
 8013ade:	460b      	mov	r3, r1
 8013ae0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	78fa      	ldrb	r2, [r7, #3]
 8013ae6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013ae8:	2300      	movs	r3, #0
}
 8013aea:	4618      	mov	r0, r3
 8013aec:	370c      	adds	r7, #12
 8013aee:	46bd      	mov	sp, r7
 8013af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af4:	4770      	bx	lr

08013af6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013af6:	b480      	push	{r7}
 8013af8:	b083      	sub	sp, #12
 8013afa:	af00      	add	r7, sp, #0
 8013afc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b04:	b2db      	uxtb	r3, r3
 8013b06:	2b04      	cmp	r3, #4
 8013b08:	d006      	beq.n	8013b18 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b10:	b2da      	uxtb	r2, r3
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	2204      	movs	r2, #4
 8013b1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013b20:	2300      	movs	r3, #0
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	370c      	adds	r7, #12
 8013b26:	46bd      	mov	sp, r7
 8013b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2c:	4770      	bx	lr

08013b2e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013b2e:	b480      	push	{r7}
 8013b30:	b083      	sub	sp, #12
 8013b32:	af00      	add	r7, sp, #0
 8013b34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b3c:	b2db      	uxtb	r3, r3
 8013b3e:	2b04      	cmp	r3, #4
 8013b40:	d106      	bne.n	8013b50 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013b48:	b2da      	uxtb	r2, r3
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013b50:	2300      	movs	r3, #0
}
 8013b52:	4618      	mov	r0, r3
 8013b54:	370c      	adds	r7, #12
 8013b56:	46bd      	mov	sp, r7
 8013b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5c:	4770      	bx	lr

08013b5e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013b5e:	b580      	push	{r7, lr}
 8013b60:	b082      	sub	sp, #8
 8013b62:	af00      	add	r7, sp, #0
 8013b64:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b6c:	b2db      	uxtb	r3, r3
 8013b6e:	2b03      	cmp	r3, #3
 8013b70:	d110      	bne.n	8013b94 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d00b      	beq.n	8013b94 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b82:	69db      	ldr	r3, [r3, #28]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d005      	beq.n	8013b94 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b8e:	69db      	ldr	r3, [r3, #28]
 8013b90:	6878      	ldr	r0, [r7, #4]
 8013b92:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013b94:	2300      	movs	r3, #0
}
 8013b96:	4618      	mov	r0, r3
 8013b98:	3708      	adds	r7, #8
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bd80      	pop	{r7, pc}

08013b9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013b9e:	b480      	push	{r7}
 8013ba0:	b083      	sub	sp, #12
 8013ba2:	af00      	add	r7, sp, #0
 8013ba4:	6078      	str	r0, [r7, #4]
 8013ba6:	460b      	mov	r3, r1
 8013ba8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013baa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	370c      	adds	r7, #12
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb6:	4770      	bx	lr

08013bb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013bb8:	b480      	push	{r7}
 8013bba:	b083      	sub	sp, #12
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
 8013bc0:	460b      	mov	r3, r1
 8013bc2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013bc4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	370c      	adds	r7, #12
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd0:	4770      	bx	lr

08013bd2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013bd2:	b580      	push	{r7, lr}
 8013bd4:	b086      	sub	sp, #24
 8013bd6:	af00      	add	r7, sp, #0
 8013bd8:	6078      	str	r0, [r7, #4]
 8013bda:	460b      	mov	r3, r1
 8013bdc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013be6:	2300      	movs	r3, #0
 8013be8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	885b      	ldrh	r3, [r3, #2]
 8013bee:	b29b      	uxth	r3, r3
 8013bf0:	68fa      	ldr	r2, [r7, #12]
 8013bf2:	7812      	ldrb	r2, [r2, #0]
 8013bf4:	4293      	cmp	r3, r2
 8013bf6:	d91f      	bls.n	8013c38 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	781b      	ldrb	r3, [r3, #0]
 8013bfc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013bfe:	e013      	b.n	8013c28 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013c00:	f107 030a 	add.w	r3, r7, #10
 8013c04:	4619      	mov	r1, r3
 8013c06:	6978      	ldr	r0, [r7, #20]
 8013c08:	f000 f81b 	bl	8013c42 <USBD_GetNextDesc>
 8013c0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013c0e:	697b      	ldr	r3, [r7, #20]
 8013c10:	785b      	ldrb	r3, [r3, #1]
 8013c12:	2b05      	cmp	r3, #5
 8013c14:	d108      	bne.n	8013c28 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013c16:	697b      	ldr	r3, [r7, #20]
 8013c18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013c1a:	693b      	ldr	r3, [r7, #16]
 8013c1c:	789b      	ldrb	r3, [r3, #2]
 8013c1e:	78fa      	ldrb	r2, [r7, #3]
 8013c20:	429a      	cmp	r2, r3
 8013c22:	d008      	beq.n	8013c36 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013c24:	2300      	movs	r3, #0
 8013c26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	885b      	ldrh	r3, [r3, #2]
 8013c2c:	b29a      	uxth	r2, r3
 8013c2e:	897b      	ldrh	r3, [r7, #10]
 8013c30:	429a      	cmp	r2, r3
 8013c32:	d8e5      	bhi.n	8013c00 <USBD_GetEpDesc+0x2e>
 8013c34:	e000      	b.n	8013c38 <USBD_GetEpDesc+0x66>
          break;
 8013c36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013c38:	693b      	ldr	r3, [r7, #16]
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3718      	adds	r7, #24
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}

08013c42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013c42:	b480      	push	{r7}
 8013c44:	b085      	sub	sp, #20
 8013c46:	af00      	add	r7, sp, #0
 8013c48:	6078      	str	r0, [r7, #4]
 8013c4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013c50:	683b      	ldr	r3, [r7, #0]
 8013c52:	881b      	ldrh	r3, [r3, #0]
 8013c54:	68fa      	ldr	r2, [r7, #12]
 8013c56:	7812      	ldrb	r2, [r2, #0]
 8013c58:	4413      	add	r3, r2
 8013c5a:	b29a      	uxth	r2, r3
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	781b      	ldrb	r3, [r3, #0]
 8013c64:	461a      	mov	r2, r3
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	4413      	add	r3, r2
 8013c6a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013c6c:	68fb      	ldr	r3, [r7, #12]
}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	3714      	adds	r7, #20
 8013c72:	46bd      	mov	sp, r7
 8013c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c78:	4770      	bx	lr

08013c7a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013c7a:	b480      	push	{r7}
 8013c7c:	b087      	sub	sp, #28
 8013c7e:	af00      	add	r7, sp, #0
 8013c80:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013c86:	697b      	ldr	r3, [r7, #20]
 8013c88:	781b      	ldrb	r3, [r3, #0]
 8013c8a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013c8c:	697b      	ldr	r3, [r7, #20]
 8013c8e:	3301      	adds	r3, #1
 8013c90:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013c92:	697b      	ldr	r3, [r7, #20]
 8013c94:	781b      	ldrb	r3, [r3, #0]
 8013c96:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013c98:	8a3b      	ldrh	r3, [r7, #16]
 8013c9a:	021b      	lsls	r3, r3, #8
 8013c9c:	b21a      	sxth	r2, r3
 8013c9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013ca2:	4313      	orrs	r3, r2
 8013ca4:	b21b      	sxth	r3, r3
 8013ca6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013ca8:	89fb      	ldrh	r3, [r7, #14]
}
 8013caa:	4618      	mov	r0, r3
 8013cac:	371c      	adds	r7, #28
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb4:	4770      	bx	lr
	...

08013cb8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b084      	sub	sp, #16
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
 8013cc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	781b      	ldrb	r3, [r3, #0]
 8013cca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013cce:	2b40      	cmp	r3, #64	@ 0x40
 8013cd0:	d005      	beq.n	8013cde <USBD_StdDevReq+0x26>
 8013cd2:	2b40      	cmp	r3, #64	@ 0x40
 8013cd4:	d857      	bhi.n	8013d86 <USBD_StdDevReq+0xce>
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d00f      	beq.n	8013cfa <USBD_StdDevReq+0x42>
 8013cda:	2b20      	cmp	r3, #32
 8013cdc:	d153      	bne.n	8013d86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	32ae      	adds	r2, #174	@ 0xae
 8013ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cec:	689b      	ldr	r3, [r3, #8]
 8013cee:	6839      	ldr	r1, [r7, #0]
 8013cf0:	6878      	ldr	r0, [r7, #4]
 8013cf2:	4798      	blx	r3
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8013cf8:	e04a      	b.n	8013d90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013cfa:	683b      	ldr	r3, [r7, #0]
 8013cfc:	785b      	ldrb	r3, [r3, #1]
 8013cfe:	2b09      	cmp	r3, #9
 8013d00:	d83b      	bhi.n	8013d7a <USBD_StdDevReq+0xc2>
 8013d02:	a201      	add	r2, pc, #4	@ (adr r2, 8013d08 <USBD_StdDevReq+0x50>)
 8013d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d08:	08013d5d 	.word	0x08013d5d
 8013d0c:	08013d71 	.word	0x08013d71
 8013d10:	08013d7b 	.word	0x08013d7b
 8013d14:	08013d67 	.word	0x08013d67
 8013d18:	08013d7b 	.word	0x08013d7b
 8013d1c:	08013d3b 	.word	0x08013d3b
 8013d20:	08013d31 	.word	0x08013d31
 8013d24:	08013d7b 	.word	0x08013d7b
 8013d28:	08013d53 	.word	0x08013d53
 8013d2c:	08013d45 	.word	0x08013d45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013d30:	6839      	ldr	r1, [r7, #0]
 8013d32:	6878      	ldr	r0, [r7, #4]
 8013d34:	f000 fa3c 	bl	80141b0 <USBD_GetDescriptor>
          break;
 8013d38:	e024      	b.n	8013d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013d3a:	6839      	ldr	r1, [r7, #0]
 8013d3c:	6878      	ldr	r0, [r7, #4]
 8013d3e:	f000 fbcb 	bl	80144d8 <USBD_SetAddress>
          break;
 8013d42:	e01f      	b.n	8013d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013d44:	6839      	ldr	r1, [r7, #0]
 8013d46:	6878      	ldr	r0, [r7, #4]
 8013d48:	f000 fc0a 	bl	8014560 <USBD_SetConfig>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	73fb      	strb	r3, [r7, #15]
          break;
 8013d50:	e018      	b.n	8013d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013d52:	6839      	ldr	r1, [r7, #0]
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f000 fcad 	bl	80146b4 <USBD_GetConfig>
          break;
 8013d5a:	e013      	b.n	8013d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013d5c:	6839      	ldr	r1, [r7, #0]
 8013d5e:	6878      	ldr	r0, [r7, #4]
 8013d60:	f000 fcde 	bl	8014720 <USBD_GetStatus>
          break;
 8013d64:	e00e      	b.n	8013d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013d66:	6839      	ldr	r1, [r7, #0]
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f000 fd0d 	bl	8014788 <USBD_SetFeature>
          break;
 8013d6e:	e009      	b.n	8013d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013d70:	6839      	ldr	r1, [r7, #0]
 8013d72:	6878      	ldr	r0, [r7, #4]
 8013d74:	f000 fd31 	bl	80147da <USBD_ClrFeature>
          break;
 8013d78:	e004      	b.n	8013d84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013d7a:	6839      	ldr	r1, [r7, #0]
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f000 fd88 	bl	8014892 <USBD_CtlError>
          break;
 8013d82:	bf00      	nop
      }
      break;
 8013d84:	e004      	b.n	8013d90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013d86:	6839      	ldr	r1, [r7, #0]
 8013d88:	6878      	ldr	r0, [r7, #4]
 8013d8a:	f000 fd82 	bl	8014892 <USBD_CtlError>
      break;
 8013d8e:	bf00      	nop
  }

  return ret;
 8013d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d92:	4618      	mov	r0, r3
 8013d94:	3710      	adds	r7, #16
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd80      	pop	{r7, pc}
 8013d9a:	bf00      	nop

08013d9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b084      	sub	sp, #16
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
 8013da4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013da6:	2300      	movs	r3, #0
 8013da8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013daa:	683b      	ldr	r3, [r7, #0]
 8013dac:	781b      	ldrb	r3, [r3, #0]
 8013dae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013db2:	2b40      	cmp	r3, #64	@ 0x40
 8013db4:	d005      	beq.n	8013dc2 <USBD_StdItfReq+0x26>
 8013db6:	2b40      	cmp	r3, #64	@ 0x40
 8013db8:	d852      	bhi.n	8013e60 <USBD_StdItfReq+0xc4>
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d001      	beq.n	8013dc2 <USBD_StdItfReq+0x26>
 8013dbe:	2b20      	cmp	r3, #32
 8013dc0:	d14e      	bne.n	8013e60 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013dc8:	b2db      	uxtb	r3, r3
 8013dca:	3b01      	subs	r3, #1
 8013dcc:	2b02      	cmp	r3, #2
 8013dce:	d840      	bhi.n	8013e52 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013dd0:	683b      	ldr	r3, [r7, #0]
 8013dd2:	889b      	ldrh	r3, [r3, #4]
 8013dd4:	b2db      	uxtb	r3, r3
 8013dd6:	2b01      	cmp	r3, #1
 8013dd8:	d836      	bhi.n	8013e48 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013dda:	683b      	ldr	r3, [r7, #0]
 8013ddc:	889b      	ldrh	r3, [r3, #4]
 8013dde:	b2db      	uxtb	r3, r3
 8013de0:	4619      	mov	r1, r3
 8013de2:	6878      	ldr	r0, [r7, #4]
 8013de4:	f7ff fedb 	bl	8013b9e <USBD_CoreFindIF>
 8013de8:	4603      	mov	r3, r0
 8013dea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013dec:	7bbb      	ldrb	r3, [r7, #14]
 8013dee:	2bff      	cmp	r3, #255	@ 0xff
 8013df0:	d01d      	beq.n	8013e2e <USBD_StdItfReq+0x92>
 8013df2:	7bbb      	ldrb	r3, [r7, #14]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d11a      	bne.n	8013e2e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013df8:	7bba      	ldrb	r2, [r7, #14]
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	32ae      	adds	r2, #174	@ 0xae
 8013dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e02:	689b      	ldr	r3, [r3, #8]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d00f      	beq.n	8013e28 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013e08:	7bba      	ldrb	r2, [r7, #14]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013e10:	7bba      	ldrb	r2, [r7, #14]
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	32ae      	adds	r2, #174	@ 0xae
 8013e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e1a:	689b      	ldr	r3, [r3, #8]
 8013e1c:	6839      	ldr	r1, [r7, #0]
 8013e1e:	6878      	ldr	r0, [r7, #4]
 8013e20:	4798      	blx	r3
 8013e22:	4603      	mov	r3, r0
 8013e24:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013e26:	e004      	b.n	8013e32 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013e28:	2303      	movs	r3, #3
 8013e2a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013e2c:	e001      	b.n	8013e32 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013e2e:	2303      	movs	r3, #3
 8013e30:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	88db      	ldrh	r3, [r3, #6]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d110      	bne.n	8013e5c <USBD_StdItfReq+0xc0>
 8013e3a:	7bfb      	ldrb	r3, [r7, #15]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d10d      	bne.n	8013e5c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013e40:	6878      	ldr	r0, [r7, #4]
 8013e42:	f000 fdfd 	bl	8014a40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013e46:	e009      	b.n	8013e5c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013e48:	6839      	ldr	r1, [r7, #0]
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f000 fd21 	bl	8014892 <USBD_CtlError>
          break;
 8013e50:	e004      	b.n	8013e5c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8013e52:	6839      	ldr	r1, [r7, #0]
 8013e54:	6878      	ldr	r0, [r7, #4]
 8013e56:	f000 fd1c 	bl	8014892 <USBD_CtlError>
          break;
 8013e5a:	e000      	b.n	8013e5e <USBD_StdItfReq+0xc2>
          break;
 8013e5c:	bf00      	nop
      }
      break;
 8013e5e:	e004      	b.n	8013e6a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013e60:	6839      	ldr	r1, [r7, #0]
 8013e62:	6878      	ldr	r0, [r7, #4]
 8013e64:	f000 fd15 	bl	8014892 <USBD_CtlError>
      break;
 8013e68:	bf00      	nop
  }

  return ret;
 8013e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3710      	adds	r7, #16
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}

08013e74 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013e7e:	2300      	movs	r3, #0
 8013e80:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013e82:	683b      	ldr	r3, [r7, #0]
 8013e84:	889b      	ldrh	r3, [r3, #4]
 8013e86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013e88:	683b      	ldr	r3, [r7, #0]
 8013e8a:	781b      	ldrb	r3, [r3, #0]
 8013e8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013e90:	2b40      	cmp	r3, #64	@ 0x40
 8013e92:	d007      	beq.n	8013ea4 <USBD_StdEPReq+0x30>
 8013e94:	2b40      	cmp	r3, #64	@ 0x40
 8013e96:	f200 817f 	bhi.w	8014198 <USBD_StdEPReq+0x324>
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d02a      	beq.n	8013ef4 <USBD_StdEPReq+0x80>
 8013e9e:	2b20      	cmp	r3, #32
 8013ea0:	f040 817a 	bne.w	8014198 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013ea4:	7bbb      	ldrb	r3, [r7, #14]
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f7ff fe85 	bl	8013bb8 <USBD_CoreFindEP>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013eb2:	7b7b      	ldrb	r3, [r7, #13]
 8013eb4:	2bff      	cmp	r3, #255	@ 0xff
 8013eb6:	f000 8174 	beq.w	80141a2 <USBD_StdEPReq+0x32e>
 8013eba:	7b7b      	ldrb	r3, [r7, #13]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	f040 8170 	bne.w	80141a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013ec2:	7b7a      	ldrb	r2, [r7, #13]
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013eca:	7b7a      	ldrb	r2, [r7, #13]
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	32ae      	adds	r2, #174	@ 0xae
 8013ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ed4:	689b      	ldr	r3, [r3, #8]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	f000 8163 	beq.w	80141a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013edc:	7b7a      	ldrb	r2, [r7, #13]
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	32ae      	adds	r2, #174	@ 0xae
 8013ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ee6:	689b      	ldr	r3, [r3, #8]
 8013ee8:	6839      	ldr	r1, [r7, #0]
 8013eea:	6878      	ldr	r0, [r7, #4]
 8013eec:	4798      	blx	r3
 8013eee:	4603      	mov	r3, r0
 8013ef0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013ef2:	e156      	b.n	80141a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013ef4:	683b      	ldr	r3, [r7, #0]
 8013ef6:	785b      	ldrb	r3, [r3, #1]
 8013ef8:	2b03      	cmp	r3, #3
 8013efa:	d008      	beq.n	8013f0e <USBD_StdEPReq+0x9a>
 8013efc:	2b03      	cmp	r3, #3
 8013efe:	f300 8145 	bgt.w	801418c <USBD_StdEPReq+0x318>
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	f000 809b 	beq.w	801403e <USBD_StdEPReq+0x1ca>
 8013f08:	2b01      	cmp	r3, #1
 8013f0a:	d03c      	beq.n	8013f86 <USBD_StdEPReq+0x112>
 8013f0c:	e13e      	b.n	801418c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f14:	b2db      	uxtb	r3, r3
 8013f16:	2b02      	cmp	r3, #2
 8013f18:	d002      	beq.n	8013f20 <USBD_StdEPReq+0xac>
 8013f1a:	2b03      	cmp	r3, #3
 8013f1c:	d016      	beq.n	8013f4c <USBD_StdEPReq+0xd8>
 8013f1e:	e02c      	b.n	8013f7a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013f20:	7bbb      	ldrb	r3, [r7, #14]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d00d      	beq.n	8013f42 <USBD_StdEPReq+0xce>
 8013f26:	7bbb      	ldrb	r3, [r7, #14]
 8013f28:	2b80      	cmp	r3, #128	@ 0x80
 8013f2a:	d00a      	beq.n	8013f42 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013f2c:	7bbb      	ldrb	r3, [r7, #14]
 8013f2e:	4619      	mov	r1, r3
 8013f30:	6878      	ldr	r0, [r7, #4]
 8013f32:	f004 fecf 	bl	8018cd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013f36:	2180      	movs	r1, #128	@ 0x80
 8013f38:	6878      	ldr	r0, [r7, #4]
 8013f3a:	f004 fecb 	bl	8018cd4 <USBD_LL_StallEP>
 8013f3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013f40:	e020      	b.n	8013f84 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8013f42:	6839      	ldr	r1, [r7, #0]
 8013f44:	6878      	ldr	r0, [r7, #4]
 8013f46:	f000 fca4 	bl	8014892 <USBD_CtlError>
              break;
 8013f4a:	e01b      	b.n	8013f84 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	885b      	ldrh	r3, [r3, #2]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d10e      	bne.n	8013f72 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013f54:	7bbb      	ldrb	r3, [r7, #14]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d00b      	beq.n	8013f72 <USBD_StdEPReq+0xfe>
 8013f5a:	7bbb      	ldrb	r3, [r7, #14]
 8013f5c:	2b80      	cmp	r3, #128	@ 0x80
 8013f5e:	d008      	beq.n	8013f72 <USBD_StdEPReq+0xfe>
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	88db      	ldrh	r3, [r3, #6]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d104      	bne.n	8013f72 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013f68:	7bbb      	ldrb	r3, [r7, #14]
 8013f6a:	4619      	mov	r1, r3
 8013f6c:	6878      	ldr	r0, [r7, #4]
 8013f6e:	f004 feb1 	bl	8018cd4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013f72:	6878      	ldr	r0, [r7, #4]
 8013f74:	f000 fd64 	bl	8014a40 <USBD_CtlSendStatus>

              break;
 8013f78:	e004      	b.n	8013f84 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8013f7a:	6839      	ldr	r1, [r7, #0]
 8013f7c:	6878      	ldr	r0, [r7, #4]
 8013f7e:	f000 fc88 	bl	8014892 <USBD_CtlError>
              break;
 8013f82:	bf00      	nop
          }
          break;
 8013f84:	e107      	b.n	8014196 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f8c:	b2db      	uxtb	r3, r3
 8013f8e:	2b02      	cmp	r3, #2
 8013f90:	d002      	beq.n	8013f98 <USBD_StdEPReq+0x124>
 8013f92:	2b03      	cmp	r3, #3
 8013f94:	d016      	beq.n	8013fc4 <USBD_StdEPReq+0x150>
 8013f96:	e04b      	b.n	8014030 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013f98:	7bbb      	ldrb	r3, [r7, #14]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d00d      	beq.n	8013fba <USBD_StdEPReq+0x146>
 8013f9e:	7bbb      	ldrb	r3, [r7, #14]
 8013fa0:	2b80      	cmp	r3, #128	@ 0x80
 8013fa2:	d00a      	beq.n	8013fba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013fa4:	7bbb      	ldrb	r3, [r7, #14]
 8013fa6:	4619      	mov	r1, r3
 8013fa8:	6878      	ldr	r0, [r7, #4]
 8013faa:	f004 fe93 	bl	8018cd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013fae:	2180      	movs	r1, #128	@ 0x80
 8013fb0:	6878      	ldr	r0, [r7, #4]
 8013fb2:	f004 fe8f 	bl	8018cd4 <USBD_LL_StallEP>
 8013fb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013fb8:	e040      	b.n	801403c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013fba:	6839      	ldr	r1, [r7, #0]
 8013fbc:	6878      	ldr	r0, [r7, #4]
 8013fbe:	f000 fc68 	bl	8014892 <USBD_CtlError>
              break;
 8013fc2:	e03b      	b.n	801403c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	885b      	ldrh	r3, [r3, #2]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d136      	bne.n	801403a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013fcc:	7bbb      	ldrb	r3, [r7, #14]
 8013fce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d004      	beq.n	8013fe0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013fd6:	7bbb      	ldrb	r3, [r7, #14]
 8013fd8:	4619      	mov	r1, r3
 8013fda:	6878      	ldr	r0, [r7, #4]
 8013fdc:	f004 fe99 	bl	8018d12 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013fe0:	6878      	ldr	r0, [r7, #4]
 8013fe2:	f000 fd2d 	bl	8014a40 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013fe6:	7bbb      	ldrb	r3, [r7, #14]
 8013fe8:	4619      	mov	r1, r3
 8013fea:	6878      	ldr	r0, [r7, #4]
 8013fec:	f7ff fde4 	bl	8013bb8 <USBD_CoreFindEP>
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013ff4:	7b7b      	ldrb	r3, [r7, #13]
 8013ff6:	2bff      	cmp	r3, #255	@ 0xff
 8013ff8:	d01f      	beq.n	801403a <USBD_StdEPReq+0x1c6>
 8013ffa:	7b7b      	ldrb	r3, [r7, #13]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d11c      	bne.n	801403a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014000:	7b7a      	ldrb	r2, [r7, #13]
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014008:	7b7a      	ldrb	r2, [r7, #13]
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	32ae      	adds	r2, #174	@ 0xae
 801400e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014012:	689b      	ldr	r3, [r3, #8]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d010      	beq.n	801403a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014018:	7b7a      	ldrb	r2, [r7, #13]
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	32ae      	adds	r2, #174	@ 0xae
 801401e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014022:	689b      	ldr	r3, [r3, #8]
 8014024:	6839      	ldr	r1, [r7, #0]
 8014026:	6878      	ldr	r0, [r7, #4]
 8014028:	4798      	blx	r3
 801402a:	4603      	mov	r3, r0
 801402c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801402e:	e004      	b.n	801403a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014030:	6839      	ldr	r1, [r7, #0]
 8014032:	6878      	ldr	r0, [r7, #4]
 8014034:	f000 fc2d 	bl	8014892 <USBD_CtlError>
              break;
 8014038:	e000      	b.n	801403c <USBD_StdEPReq+0x1c8>
              break;
 801403a:	bf00      	nop
          }
          break;
 801403c:	e0ab      	b.n	8014196 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014044:	b2db      	uxtb	r3, r3
 8014046:	2b02      	cmp	r3, #2
 8014048:	d002      	beq.n	8014050 <USBD_StdEPReq+0x1dc>
 801404a:	2b03      	cmp	r3, #3
 801404c:	d032      	beq.n	80140b4 <USBD_StdEPReq+0x240>
 801404e:	e097      	b.n	8014180 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014050:	7bbb      	ldrb	r3, [r7, #14]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d007      	beq.n	8014066 <USBD_StdEPReq+0x1f2>
 8014056:	7bbb      	ldrb	r3, [r7, #14]
 8014058:	2b80      	cmp	r3, #128	@ 0x80
 801405a:	d004      	beq.n	8014066 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801405c:	6839      	ldr	r1, [r7, #0]
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	f000 fc17 	bl	8014892 <USBD_CtlError>
                break;
 8014064:	e091      	b.n	801418a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014066:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801406a:	2b00      	cmp	r3, #0
 801406c:	da0b      	bge.n	8014086 <USBD_StdEPReq+0x212>
 801406e:	7bbb      	ldrb	r3, [r7, #14]
 8014070:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014074:	4613      	mov	r3, r2
 8014076:	009b      	lsls	r3, r3, #2
 8014078:	4413      	add	r3, r2
 801407a:	009b      	lsls	r3, r3, #2
 801407c:	3310      	adds	r3, #16
 801407e:	687a      	ldr	r2, [r7, #4]
 8014080:	4413      	add	r3, r2
 8014082:	3304      	adds	r3, #4
 8014084:	e00b      	b.n	801409e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014086:	7bbb      	ldrb	r3, [r7, #14]
 8014088:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801408c:	4613      	mov	r3, r2
 801408e:	009b      	lsls	r3, r3, #2
 8014090:	4413      	add	r3, r2
 8014092:	009b      	lsls	r3, r3, #2
 8014094:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014098:	687a      	ldr	r2, [r7, #4]
 801409a:	4413      	add	r3, r2
 801409c:	3304      	adds	r3, #4
 801409e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80140a0:	68bb      	ldr	r3, [r7, #8]
 80140a2:	2200      	movs	r2, #0
 80140a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80140a6:	68bb      	ldr	r3, [r7, #8]
 80140a8:	2202      	movs	r2, #2
 80140aa:	4619      	mov	r1, r3
 80140ac:	6878      	ldr	r0, [r7, #4]
 80140ae:	f000 fc6d 	bl	801498c <USBD_CtlSendData>
              break;
 80140b2:	e06a      	b.n	801418a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80140b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	da11      	bge.n	80140e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80140bc:	7bbb      	ldrb	r3, [r7, #14]
 80140be:	f003 020f 	and.w	r2, r3, #15
 80140c2:	6879      	ldr	r1, [r7, #4]
 80140c4:	4613      	mov	r3, r2
 80140c6:	009b      	lsls	r3, r3, #2
 80140c8:	4413      	add	r3, r2
 80140ca:	009b      	lsls	r3, r3, #2
 80140cc:	440b      	add	r3, r1
 80140ce:	3324      	adds	r3, #36	@ 0x24
 80140d0:	881b      	ldrh	r3, [r3, #0]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d117      	bne.n	8014106 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80140d6:	6839      	ldr	r1, [r7, #0]
 80140d8:	6878      	ldr	r0, [r7, #4]
 80140da:	f000 fbda 	bl	8014892 <USBD_CtlError>
                  break;
 80140de:	e054      	b.n	801418a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80140e0:	7bbb      	ldrb	r3, [r7, #14]
 80140e2:	f003 020f 	and.w	r2, r3, #15
 80140e6:	6879      	ldr	r1, [r7, #4]
 80140e8:	4613      	mov	r3, r2
 80140ea:	009b      	lsls	r3, r3, #2
 80140ec:	4413      	add	r3, r2
 80140ee:	009b      	lsls	r3, r3, #2
 80140f0:	440b      	add	r3, r1
 80140f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80140f6:	881b      	ldrh	r3, [r3, #0]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d104      	bne.n	8014106 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80140fc:	6839      	ldr	r1, [r7, #0]
 80140fe:	6878      	ldr	r0, [r7, #4]
 8014100:	f000 fbc7 	bl	8014892 <USBD_CtlError>
                  break;
 8014104:	e041      	b.n	801418a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014106:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801410a:	2b00      	cmp	r3, #0
 801410c:	da0b      	bge.n	8014126 <USBD_StdEPReq+0x2b2>
 801410e:	7bbb      	ldrb	r3, [r7, #14]
 8014110:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014114:	4613      	mov	r3, r2
 8014116:	009b      	lsls	r3, r3, #2
 8014118:	4413      	add	r3, r2
 801411a:	009b      	lsls	r3, r3, #2
 801411c:	3310      	adds	r3, #16
 801411e:	687a      	ldr	r2, [r7, #4]
 8014120:	4413      	add	r3, r2
 8014122:	3304      	adds	r3, #4
 8014124:	e00b      	b.n	801413e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014126:	7bbb      	ldrb	r3, [r7, #14]
 8014128:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801412c:	4613      	mov	r3, r2
 801412e:	009b      	lsls	r3, r3, #2
 8014130:	4413      	add	r3, r2
 8014132:	009b      	lsls	r3, r3, #2
 8014134:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014138:	687a      	ldr	r2, [r7, #4]
 801413a:	4413      	add	r3, r2
 801413c:	3304      	adds	r3, #4
 801413e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014140:	7bbb      	ldrb	r3, [r7, #14]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d002      	beq.n	801414c <USBD_StdEPReq+0x2d8>
 8014146:	7bbb      	ldrb	r3, [r7, #14]
 8014148:	2b80      	cmp	r3, #128	@ 0x80
 801414a:	d103      	bne.n	8014154 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	2200      	movs	r2, #0
 8014150:	601a      	str	r2, [r3, #0]
 8014152:	e00e      	b.n	8014172 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014154:	7bbb      	ldrb	r3, [r7, #14]
 8014156:	4619      	mov	r1, r3
 8014158:	6878      	ldr	r0, [r7, #4]
 801415a:	f004 fdf9 	bl	8018d50 <USBD_LL_IsStallEP>
 801415e:	4603      	mov	r3, r0
 8014160:	2b00      	cmp	r3, #0
 8014162:	d003      	beq.n	801416c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014164:	68bb      	ldr	r3, [r7, #8]
 8014166:	2201      	movs	r2, #1
 8014168:	601a      	str	r2, [r3, #0]
 801416a:	e002      	b.n	8014172 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	2200      	movs	r2, #0
 8014170:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	2202      	movs	r2, #2
 8014176:	4619      	mov	r1, r3
 8014178:	6878      	ldr	r0, [r7, #4]
 801417a:	f000 fc07 	bl	801498c <USBD_CtlSendData>
              break;
 801417e:	e004      	b.n	801418a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014180:	6839      	ldr	r1, [r7, #0]
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f000 fb85 	bl	8014892 <USBD_CtlError>
              break;
 8014188:	bf00      	nop
          }
          break;
 801418a:	e004      	b.n	8014196 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801418c:	6839      	ldr	r1, [r7, #0]
 801418e:	6878      	ldr	r0, [r7, #4]
 8014190:	f000 fb7f 	bl	8014892 <USBD_CtlError>
          break;
 8014194:	bf00      	nop
      }
      break;
 8014196:	e005      	b.n	80141a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014198:	6839      	ldr	r1, [r7, #0]
 801419a:	6878      	ldr	r0, [r7, #4]
 801419c:	f000 fb79 	bl	8014892 <USBD_CtlError>
      break;
 80141a0:	e000      	b.n	80141a4 <USBD_StdEPReq+0x330>
      break;
 80141a2:	bf00      	nop
  }

  return ret;
 80141a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80141a6:	4618      	mov	r0, r3
 80141a8:	3710      	adds	r7, #16
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}
	...

080141b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b084      	sub	sp, #16
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
 80141b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80141ba:	2300      	movs	r3, #0
 80141bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80141be:	2300      	movs	r3, #0
 80141c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80141c2:	2300      	movs	r3, #0
 80141c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80141c6:	683b      	ldr	r3, [r7, #0]
 80141c8:	885b      	ldrh	r3, [r3, #2]
 80141ca:	0a1b      	lsrs	r3, r3, #8
 80141cc:	b29b      	uxth	r3, r3
 80141ce:	3b01      	subs	r3, #1
 80141d0:	2b0e      	cmp	r3, #14
 80141d2:	f200 8152 	bhi.w	801447a <USBD_GetDescriptor+0x2ca>
 80141d6:	a201      	add	r2, pc, #4	@ (adr r2, 80141dc <USBD_GetDescriptor+0x2c>)
 80141d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141dc:	0801424d 	.word	0x0801424d
 80141e0:	08014265 	.word	0x08014265
 80141e4:	080142a5 	.word	0x080142a5
 80141e8:	0801447b 	.word	0x0801447b
 80141ec:	0801447b 	.word	0x0801447b
 80141f0:	0801441b 	.word	0x0801441b
 80141f4:	08014447 	.word	0x08014447
 80141f8:	0801447b 	.word	0x0801447b
 80141fc:	0801447b 	.word	0x0801447b
 8014200:	0801447b 	.word	0x0801447b
 8014204:	0801447b 	.word	0x0801447b
 8014208:	0801447b 	.word	0x0801447b
 801420c:	0801447b 	.word	0x0801447b
 8014210:	0801447b 	.word	0x0801447b
 8014214:	08014219 	.word	0x08014219
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801421e:	69db      	ldr	r3, [r3, #28]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d00b      	beq.n	801423c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801422a:	69db      	ldr	r3, [r3, #28]
 801422c:	687a      	ldr	r2, [r7, #4]
 801422e:	7c12      	ldrb	r2, [r2, #16]
 8014230:	f107 0108 	add.w	r1, r7, #8
 8014234:	4610      	mov	r0, r2
 8014236:	4798      	blx	r3
 8014238:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801423a:	e126      	b.n	801448a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801423c:	6839      	ldr	r1, [r7, #0]
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	f000 fb27 	bl	8014892 <USBD_CtlError>
        err++;
 8014244:	7afb      	ldrb	r3, [r7, #11]
 8014246:	3301      	adds	r3, #1
 8014248:	72fb      	strb	r3, [r7, #11]
      break;
 801424a:	e11e      	b.n	801448a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	687a      	ldr	r2, [r7, #4]
 8014256:	7c12      	ldrb	r2, [r2, #16]
 8014258:	f107 0108 	add.w	r1, r7, #8
 801425c:	4610      	mov	r0, r2
 801425e:	4798      	blx	r3
 8014260:	60f8      	str	r0, [r7, #12]
      break;
 8014262:	e112      	b.n	801448a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	7c1b      	ldrb	r3, [r3, #16]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d10d      	bne.n	8014288 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014274:	f107 0208 	add.w	r2, r7, #8
 8014278:	4610      	mov	r0, r2
 801427a:	4798      	blx	r3
 801427c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	3301      	adds	r3, #1
 8014282:	2202      	movs	r2, #2
 8014284:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014286:	e100      	b.n	801448a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014290:	f107 0208 	add.w	r2, r7, #8
 8014294:	4610      	mov	r0, r2
 8014296:	4798      	blx	r3
 8014298:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	3301      	adds	r3, #1
 801429e:	2202      	movs	r2, #2
 80142a0:	701a      	strb	r2, [r3, #0]
      break;
 80142a2:	e0f2      	b.n	801448a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80142a4:	683b      	ldr	r3, [r7, #0]
 80142a6:	885b      	ldrh	r3, [r3, #2]
 80142a8:	b2db      	uxtb	r3, r3
 80142aa:	2b05      	cmp	r3, #5
 80142ac:	f200 80ac 	bhi.w	8014408 <USBD_GetDescriptor+0x258>
 80142b0:	a201      	add	r2, pc, #4	@ (adr r2, 80142b8 <USBD_GetDescriptor+0x108>)
 80142b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142b6:	bf00      	nop
 80142b8:	080142d1 	.word	0x080142d1
 80142bc:	08014305 	.word	0x08014305
 80142c0:	08014339 	.word	0x08014339
 80142c4:	0801436d 	.word	0x0801436d
 80142c8:	080143a1 	.word	0x080143a1
 80142cc:	080143d5 	.word	0x080143d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80142d6:	685b      	ldr	r3, [r3, #4]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d00b      	beq.n	80142f4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80142e2:	685b      	ldr	r3, [r3, #4]
 80142e4:	687a      	ldr	r2, [r7, #4]
 80142e6:	7c12      	ldrb	r2, [r2, #16]
 80142e8:	f107 0108 	add.w	r1, r7, #8
 80142ec:	4610      	mov	r0, r2
 80142ee:	4798      	blx	r3
 80142f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80142f2:	e091      	b.n	8014418 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80142f4:	6839      	ldr	r1, [r7, #0]
 80142f6:	6878      	ldr	r0, [r7, #4]
 80142f8:	f000 facb 	bl	8014892 <USBD_CtlError>
            err++;
 80142fc:	7afb      	ldrb	r3, [r7, #11]
 80142fe:	3301      	adds	r3, #1
 8014300:	72fb      	strb	r3, [r7, #11]
          break;
 8014302:	e089      	b.n	8014418 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801430a:	689b      	ldr	r3, [r3, #8]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d00b      	beq.n	8014328 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014316:	689b      	ldr	r3, [r3, #8]
 8014318:	687a      	ldr	r2, [r7, #4]
 801431a:	7c12      	ldrb	r2, [r2, #16]
 801431c:	f107 0108 	add.w	r1, r7, #8
 8014320:	4610      	mov	r0, r2
 8014322:	4798      	blx	r3
 8014324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014326:	e077      	b.n	8014418 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014328:	6839      	ldr	r1, [r7, #0]
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f000 fab1 	bl	8014892 <USBD_CtlError>
            err++;
 8014330:	7afb      	ldrb	r3, [r7, #11]
 8014332:	3301      	adds	r3, #1
 8014334:	72fb      	strb	r3, [r7, #11]
          break;
 8014336:	e06f      	b.n	8014418 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801433e:	68db      	ldr	r3, [r3, #12]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d00b      	beq.n	801435c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801434a:	68db      	ldr	r3, [r3, #12]
 801434c:	687a      	ldr	r2, [r7, #4]
 801434e:	7c12      	ldrb	r2, [r2, #16]
 8014350:	f107 0108 	add.w	r1, r7, #8
 8014354:	4610      	mov	r0, r2
 8014356:	4798      	blx	r3
 8014358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801435a:	e05d      	b.n	8014418 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801435c:	6839      	ldr	r1, [r7, #0]
 801435e:	6878      	ldr	r0, [r7, #4]
 8014360:	f000 fa97 	bl	8014892 <USBD_CtlError>
            err++;
 8014364:	7afb      	ldrb	r3, [r7, #11]
 8014366:	3301      	adds	r3, #1
 8014368:	72fb      	strb	r3, [r7, #11]
          break;
 801436a:	e055      	b.n	8014418 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014372:	691b      	ldr	r3, [r3, #16]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d00b      	beq.n	8014390 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801437e:	691b      	ldr	r3, [r3, #16]
 8014380:	687a      	ldr	r2, [r7, #4]
 8014382:	7c12      	ldrb	r2, [r2, #16]
 8014384:	f107 0108 	add.w	r1, r7, #8
 8014388:	4610      	mov	r0, r2
 801438a:	4798      	blx	r3
 801438c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801438e:	e043      	b.n	8014418 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014390:	6839      	ldr	r1, [r7, #0]
 8014392:	6878      	ldr	r0, [r7, #4]
 8014394:	f000 fa7d 	bl	8014892 <USBD_CtlError>
            err++;
 8014398:	7afb      	ldrb	r3, [r7, #11]
 801439a:	3301      	adds	r3, #1
 801439c:	72fb      	strb	r3, [r7, #11]
          break;
 801439e:	e03b      	b.n	8014418 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143a6:	695b      	ldr	r3, [r3, #20]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d00b      	beq.n	80143c4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143b2:	695b      	ldr	r3, [r3, #20]
 80143b4:	687a      	ldr	r2, [r7, #4]
 80143b6:	7c12      	ldrb	r2, [r2, #16]
 80143b8:	f107 0108 	add.w	r1, r7, #8
 80143bc:	4610      	mov	r0, r2
 80143be:	4798      	blx	r3
 80143c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80143c2:	e029      	b.n	8014418 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80143c4:	6839      	ldr	r1, [r7, #0]
 80143c6:	6878      	ldr	r0, [r7, #4]
 80143c8:	f000 fa63 	bl	8014892 <USBD_CtlError>
            err++;
 80143cc:	7afb      	ldrb	r3, [r7, #11]
 80143ce:	3301      	adds	r3, #1
 80143d0:	72fb      	strb	r3, [r7, #11]
          break;
 80143d2:	e021      	b.n	8014418 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143da:	699b      	ldr	r3, [r3, #24]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d00b      	beq.n	80143f8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143e6:	699b      	ldr	r3, [r3, #24]
 80143e8:	687a      	ldr	r2, [r7, #4]
 80143ea:	7c12      	ldrb	r2, [r2, #16]
 80143ec:	f107 0108 	add.w	r1, r7, #8
 80143f0:	4610      	mov	r0, r2
 80143f2:	4798      	blx	r3
 80143f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80143f6:	e00f      	b.n	8014418 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80143f8:	6839      	ldr	r1, [r7, #0]
 80143fa:	6878      	ldr	r0, [r7, #4]
 80143fc:	f000 fa49 	bl	8014892 <USBD_CtlError>
            err++;
 8014400:	7afb      	ldrb	r3, [r7, #11]
 8014402:	3301      	adds	r3, #1
 8014404:	72fb      	strb	r3, [r7, #11]
          break;
 8014406:	e007      	b.n	8014418 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014408:	6839      	ldr	r1, [r7, #0]
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	f000 fa41 	bl	8014892 <USBD_CtlError>
          err++;
 8014410:	7afb      	ldrb	r3, [r7, #11]
 8014412:	3301      	adds	r3, #1
 8014414:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014416:	bf00      	nop
      }
      break;
 8014418:	e037      	b.n	801448a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	7c1b      	ldrb	r3, [r3, #16]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d109      	bne.n	8014436 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801442a:	f107 0208 	add.w	r2, r7, #8
 801442e:	4610      	mov	r0, r2
 8014430:	4798      	blx	r3
 8014432:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014434:	e029      	b.n	801448a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014436:	6839      	ldr	r1, [r7, #0]
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f000 fa2a 	bl	8014892 <USBD_CtlError>
        err++;
 801443e:	7afb      	ldrb	r3, [r7, #11]
 8014440:	3301      	adds	r3, #1
 8014442:	72fb      	strb	r3, [r7, #11]
      break;
 8014444:	e021      	b.n	801448a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	7c1b      	ldrb	r3, [r3, #16]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d10d      	bne.n	801446a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014456:	f107 0208 	add.w	r2, r7, #8
 801445a:	4610      	mov	r0, r2
 801445c:	4798      	blx	r3
 801445e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	3301      	adds	r3, #1
 8014464:	2207      	movs	r2, #7
 8014466:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014468:	e00f      	b.n	801448a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801446a:	6839      	ldr	r1, [r7, #0]
 801446c:	6878      	ldr	r0, [r7, #4]
 801446e:	f000 fa10 	bl	8014892 <USBD_CtlError>
        err++;
 8014472:	7afb      	ldrb	r3, [r7, #11]
 8014474:	3301      	adds	r3, #1
 8014476:	72fb      	strb	r3, [r7, #11]
      break;
 8014478:	e007      	b.n	801448a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801447a:	6839      	ldr	r1, [r7, #0]
 801447c:	6878      	ldr	r0, [r7, #4]
 801447e:	f000 fa08 	bl	8014892 <USBD_CtlError>
      err++;
 8014482:	7afb      	ldrb	r3, [r7, #11]
 8014484:	3301      	adds	r3, #1
 8014486:	72fb      	strb	r3, [r7, #11]
      break;
 8014488:	bf00      	nop
  }

  if (err != 0U)
 801448a:	7afb      	ldrb	r3, [r7, #11]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d11e      	bne.n	80144ce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014490:	683b      	ldr	r3, [r7, #0]
 8014492:	88db      	ldrh	r3, [r3, #6]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d016      	beq.n	80144c6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014498:	893b      	ldrh	r3, [r7, #8]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d00e      	beq.n	80144bc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801449e:	683b      	ldr	r3, [r7, #0]
 80144a0:	88da      	ldrh	r2, [r3, #6]
 80144a2:	893b      	ldrh	r3, [r7, #8]
 80144a4:	4293      	cmp	r3, r2
 80144a6:	bf28      	it	cs
 80144a8:	4613      	movcs	r3, r2
 80144aa:	b29b      	uxth	r3, r3
 80144ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80144ae:	893b      	ldrh	r3, [r7, #8]
 80144b0:	461a      	mov	r2, r3
 80144b2:	68f9      	ldr	r1, [r7, #12]
 80144b4:	6878      	ldr	r0, [r7, #4]
 80144b6:	f000 fa69 	bl	801498c <USBD_CtlSendData>
 80144ba:	e009      	b.n	80144d0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80144bc:	6839      	ldr	r1, [r7, #0]
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	f000 f9e7 	bl	8014892 <USBD_CtlError>
 80144c4:	e004      	b.n	80144d0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80144c6:	6878      	ldr	r0, [r7, #4]
 80144c8:	f000 faba 	bl	8014a40 <USBD_CtlSendStatus>
 80144cc:	e000      	b.n	80144d0 <USBD_GetDescriptor+0x320>
    return;
 80144ce:	bf00      	nop
  }
}
 80144d0:	3710      	adds	r7, #16
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}
 80144d6:	bf00      	nop

080144d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b084      	sub	sp, #16
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
 80144e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	889b      	ldrh	r3, [r3, #4]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d131      	bne.n	801454e <USBD_SetAddress+0x76>
 80144ea:	683b      	ldr	r3, [r7, #0]
 80144ec:	88db      	ldrh	r3, [r3, #6]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d12d      	bne.n	801454e <USBD_SetAddress+0x76>
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	885b      	ldrh	r3, [r3, #2]
 80144f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80144f8:	d829      	bhi.n	801454e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80144fa:	683b      	ldr	r3, [r7, #0]
 80144fc:	885b      	ldrh	r3, [r3, #2]
 80144fe:	b2db      	uxtb	r3, r3
 8014500:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014504:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801450c:	b2db      	uxtb	r3, r3
 801450e:	2b03      	cmp	r3, #3
 8014510:	d104      	bne.n	801451c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014512:	6839      	ldr	r1, [r7, #0]
 8014514:	6878      	ldr	r0, [r7, #4]
 8014516:	f000 f9bc 	bl	8014892 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801451a:	e01d      	b.n	8014558 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	7bfa      	ldrb	r2, [r7, #15]
 8014520:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014524:	7bfb      	ldrb	r3, [r7, #15]
 8014526:	4619      	mov	r1, r3
 8014528:	6878      	ldr	r0, [r7, #4]
 801452a:	f004 fc3d 	bl	8018da8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f000 fa86 	bl	8014a40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014534:	7bfb      	ldrb	r3, [r7, #15]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d004      	beq.n	8014544 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	2202      	movs	r2, #2
 801453e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014542:	e009      	b.n	8014558 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	2201      	movs	r2, #1
 8014548:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801454c:	e004      	b.n	8014558 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801454e:	6839      	ldr	r1, [r7, #0]
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f000 f99e 	bl	8014892 <USBD_CtlError>
  }
}
 8014556:	bf00      	nop
 8014558:	bf00      	nop
 801455a:	3710      	adds	r7, #16
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}

08014560 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b084      	sub	sp, #16
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
 8014568:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801456a:	2300      	movs	r3, #0
 801456c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801456e:	683b      	ldr	r3, [r7, #0]
 8014570:	885b      	ldrh	r3, [r3, #2]
 8014572:	b2da      	uxtb	r2, r3
 8014574:	4b4e      	ldr	r3, [pc, #312]	@ (80146b0 <USBD_SetConfig+0x150>)
 8014576:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014578:	4b4d      	ldr	r3, [pc, #308]	@ (80146b0 <USBD_SetConfig+0x150>)
 801457a:	781b      	ldrb	r3, [r3, #0]
 801457c:	2b01      	cmp	r3, #1
 801457e:	d905      	bls.n	801458c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014580:	6839      	ldr	r1, [r7, #0]
 8014582:	6878      	ldr	r0, [r7, #4]
 8014584:	f000 f985 	bl	8014892 <USBD_CtlError>
    return USBD_FAIL;
 8014588:	2303      	movs	r3, #3
 801458a:	e08c      	b.n	80146a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014592:	b2db      	uxtb	r3, r3
 8014594:	2b02      	cmp	r3, #2
 8014596:	d002      	beq.n	801459e <USBD_SetConfig+0x3e>
 8014598:	2b03      	cmp	r3, #3
 801459a:	d029      	beq.n	80145f0 <USBD_SetConfig+0x90>
 801459c:	e075      	b.n	801468a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801459e:	4b44      	ldr	r3, [pc, #272]	@ (80146b0 <USBD_SetConfig+0x150>)
 80145a0:	781b      	ldrb	r3, [r3, #0]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d020      	beq.n	80145e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80145a6:	4b42      	ldr	r3, [pc, #264]	@ (80146b0 <USBD_SetConfig+0x150>)
 80145a8:	781b      	ldrb	r3, [r3, #0]
 80145aa:	461a      	mov	r2, r3
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80145b0:	4b3f      	ldr	r3, [pc, #252]	@ (80146b0 <USBD_SetConfig+0x150>)
 80145b2:	781b      	ldrb	r3, [r3, #0]
 80145b4:	4619      	mov	r1, r3
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f7ff f84b 	bl	8013652 <USBD_SetClassConfig>
 80145bc:	4603      	mov	r3, r0
 80145be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80145c0:	7bfb      	ldrb	r3, [r7, #15]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d008      	beq.n	80145d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80145c6:	6839      	ldr	r1, [r7, #0]
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f000 f962 	bl	8014892 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2202      	movs	r2, #2
 80145d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80145d6:	e065      	b.n	80146a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	f000 fa31 	bl	8014a40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	2203      	movs	r2, #3
 80145e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80145e6:	e05d      	b.n	80146a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f000 fa29 	bl	8014a40 <USBD_CtlSendStatus>
      break;
 80145ee:	e059      	b.n	80146a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80145f0:	4b2f      	ldr	r3, [pc, #188]	@ (80146b0 <USBD_SetConfig+0x150>)
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d112      	bne.n	801461e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	2202      	movs	r2, #2
 80145fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014600:	4b2b      	ldr	r3, [pc, #172]	@ (80146b0 <USBD_SetConfig+0x150>)
 8014602:	781b      	ldrb	r3, [r3, #0]
 8014604:	461a      	mov	r2, r3
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801460a:	4b29      	ldr	r3, [pc, #164]	@ (80146b0 <USBD_SetConfig+0x150>)
 801460c:	781b      	ldrb	r3, [r3, #0]
 801460e:	4619      	mov	r1, r3
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	f7ff f83a 	bl	801368a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014616:	6878      	ldr	r0, [r7, #4]
 8014618:	f000 fa12 	bl	8014a40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801461c:	e042      	b.n	80146a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801461e:	4b24      	ldr	r3, [pc, #144]	@ (80146b0 <USBD_SetConfig+0x150>)
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	461a      	mov	r2, r3
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	685b      	ldr	r3, [r3, #4]
 8014628:	429a      	cmp	r2, r3
 801462a:	d02a      	beq.n	8014682 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	685b      	ldr	r3, [r3, #4]
 8014630:	b2db      	uxtb	r3, r3
 8014632:	4619      	mov	r1, r3
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f7ff f828 	bl	801368a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801463a:	4b1d      	ldr	r3, [pc, #116]	@ (80146b0 <USBD_SetConfig+0x150>)
 801463c:	781b      	ldrb	r3, [r3, #0]
 801463e:	461a      	mov	r2, r3
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014644:	4b1a      	ldr	r3, [pc, #104]	@ (80146b0 <USBD_SetConfig+0x150>)
 8014646:	781b      	ldrb	r3, [r3, #0]
 8014648:	4619      	mov	r1, r3
 801464a:	6878      	ldr	r0, [r7, #4]
 801464c:	f7ff f801 	bl	8013652 <USBD_SetClassConfig>
 8014650:	4603      	mov	r3, r0
 8014652:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014654:	7bfb      	ldrb	r3, [r7, #15]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d00f      	beq.n	801467a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801465a:	6839      	ldr	r1, [r7, #0]
 801465c:	6878      	ldr	r0, [r7, #4]
 801465e:	f000 f918 	bl	8014892 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	685b      	ldr	r3, [r3, #4]
 8014666:	b2db      	uxtb	r3, r3
 8014668:	4619      	mov	r1, r3
 801466a:	6878      	ldr	r0, [r7, #4]
 801466c:	f7ff f80d 	bl	801368a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2202      	movs	r2, #2
 8014674:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014678:	e014      	b.n	80146a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801467a:	6878      	ldr	r0, [r7, #4]
 801467c:	f000 f9e0 	bl	8014a40 <USBD_CtlSendStatus>
      break;
 8014680:	e010      	b.n	80146a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014682:	6878      	ldr	r0, [r7, #4]
 8014684:	f000 f9dc 	bl	8014a40 <USBD_CtlSendStatus>
      break;
 8014688:	e00c      	b.n	80146a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801468a:	6839      	ldr	r1, [r7, #0]
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f000 f900 	bl	8014892 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014692:	4b07      	ldr	r3, [pc, #28]	@ (80146b0 <USBD_SetConfig+0x150>)
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	4619      	mov	r1, r3
 8014698:	6878      	ldr	r0, [r7, #4]
 801469a:	f7fe fff6 	bl	801368a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801469e:	2303      	movs	r3, #3
 80146a0:	73fb      	strb	r3, [r7, #15]
      break;
 80146a2:	bf00      	nop
  }

  return ret;
 80146a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80146a6:	4618      	mov	r0, r3
 80146a8:	3710      	adds	r7, #16
 80146aa:	46bd      	mov	sp, r7
 80146ac:	bd80      	pop	{r7, pc}
 80146ae:	bf00      	nop
 80146b0:	2000145c 	.word	0x2000145c

080146b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b082      	sub	sp, #8
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	6078      	str	r0, [r7, #4]
 80146bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	88db      	ldrh	r3, [r3, #6]
 80146c2:	2b01      	cmp	r3, #1
 80146c4:	d004      	beq.n	80146d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80146c6:	6839      	ldr	r1, [r7, #0]
 80146c8:	6878      	ldr	r0, [r7, #4]
 80146ca:	f000 f8e2 	bl	8014892 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80146ce:	e023      	b.n	8014718 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80146d6:	b2db      	uxtb	r3, r3
 80146d8:	2b02      	cmp	r3, #2
 80146da:	dc02      	bgt.n	80146e2 <USBD_GetConfig+0x2e>
 80146dc:	2b00      	cmp	r3, #0
 80146de:	dc03      	bgt.n	80146e8 <USBD_GetConfig+0x34>
 80146e0:	e015      	b.n	801470e <USBD_GetConfig+0x5a>
 80146e2:	2b03      	cmp	r3, #3
 80146e4:	d00b      	beq.n	80146fe <USBD_GetConfig+0x4a>
 80146e6:	e012      	b.n	801470e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	2200      	movs	r2, #0
 80146ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	3308      	adds	r3, #8
 80146f2:	2201      	movs	r2, #1
 80146f4:	4619      	mov	r1, r3
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f000 f948 	bl	801498c <USBD_CtlSendData>
        break;
 80146fc:	e00c      	b.n	8014718 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	3304      	adds	r3, #4
 8014702:	2201      	movs	r2, #1
 8014704:	4619      	mov	r1, r3
 8014706:	6878      	ldr	r0, [r7, #4]
 8014708:	f000 f940 	bl	801498c <USBD_CtlSendData>
        break;
 801470c:	e004      	b.n	8014718 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801470e:	6839      	ldr	r1, [r7, #0]
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	f000 f8be 	bl	8014892 <USBD_CtlError>
        break;
 8014716:	bf00      	nop
}
 8014718:	bf00      	nop
 801471a:	3708      	adds	r7, #8
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}

08014720 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b082      	sub	sp, #8
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
 8014728:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014730:	b2db      	uxtb	r3, r3
 8014732:	3b01      	subs	r3, #1
 8014734:	2b02      	cmp	r3, #2
 8014736:	d81e      	bhi.n	8014776 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014738:	683b      	ldr	r3, [r7, #0]
 801473a:	88db      	ldrh	r3, [r3, #6]
 801473c:	2b02      	cmp	r3, #2
 801473e:	d004      	beq.n	801474a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014740:	6839      	ldr	r1, [r7, #0]
 8014742:	6878      	ldr	r0, [r7, #4]
 8014744:	f000 f8a5 	bl	8014892 <USBD_CtlError>
        break;
 8014748:	e01a      	b.n	8014780 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	2201      	movs	r2, #1
 801474e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014756:	2b00      	cmp	r3, #0
 8014758:	d005      	beq.n	8014766 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	68db      	ldr	r3, [r3, #12]
 801475e:	f043 0202 	orr.w	r2, r3, #2
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	330c      	adds	r3, #12
 801476a:	2202      	movs	r2, #2
 801476c:	4619      	mov	r1, r3
 801476e:	6878      	ldr	r0, [r7, #4]
 8014770:	f000 f90c 	bl	801498c <USBD_CtlSendData>
      break;
 8014774:	e004      	b.n	8014780 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014776:	6839      	ldr	r1, [r7, #0]
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	f000 f88a 	bl	8014892 <USBD_CtlError>
      break;
 801477e:	bf00      	nop
  }
}
 8014780:	bf00      	nop
 8014782:	3708      	adds	r7, #8
 8014784:	46bd      	mov	sp, r7
 8014786:	bd80      	pop	{r7, pc}

08014788 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b082      	sub	sp, #8
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
 8014790:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	885b      	ldrh	r3, [r3, #2]
 8014796:	2b01      	cmp	r3, #1
 8014798:	d107      	bne.n	80147aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	2201      	movs	r2, #1
 801479e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80147a2:	6878      	ldr	r0, [r7, #4]
 80147a4:	f000 f94c 	bl	8014a40 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80147a8:	e013      	b.n	80147d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	885b      	ldrh	r3, [r3, #2]
 80147ae:	2b02      	cmp	r3, #2
 80147b0:	d10b      	bne.n	80147ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	889b      	ldrh	r3, [r3, #4]
 80147b6:	0a1b      	lsrs	r3, r3, #8
 80147b8:	b29b      	uxth	r3, r3
 80147ba:	b2da      	uxtb	r2, r3
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f000 f93c 	bl	8014a40 <USBD_CtlSendStatus>
}
 80147c8:	e003      	b.n	80147d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80147ca:	6839      	ldr	r1, [r7, #0]
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f000 f860 	bl	8014892 <USBD_CtlError>
}
 80147d2:	bf00      	nop
 80147d4:	3708      	adds	r7, #8
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}

080147da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147da:	b580      	push	{r7, lr}
 80147dc:	b082      	sub	sp, #8
 80147de:	af00      	add	r7, sp, #0
 80147e0:	6078      	str	r0, [r7, #4]
 80147e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80147ea:	b2db      	uxtb	r3, r3
 80147ec:	3b01      	subs	r3, #1
 80147ee:	2b02      	cmp	r3, #2
 80147f0:	d80b      	bhi.n	801480a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	885b      	ldrh	r3, [r3, #2]
 80147f6:	2b01      	cmp	r3, #1
 80147f8:	d10c      	bne.n	8014814 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	2200      	movs	r2, #0
 80147fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	f000 f91c 	bl	8014a40 <USBD_CtlSendStatus>
      }
      break;
 8014808:	e004      	b.n	8014814 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801480a:	6839      	ldr	r1, [r7, #0]
 801480c:	6878      	ldr	r0, [r7, #4]
 801480e:	f000 f840 	bl	8014892 <USBD_CtlError>
      break;
 8014812:	e000      	b.n	8014816 <USBD_ClrFeature+0x3c>
      break;
 8014814:	bf00      	nop
  }
}
 8014816:	bf00      	nop
 8014818:	3708      	adds	r7, #8
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}

0801481e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801481e:	b580      	push	{r7, lr}
 8014820:	b084      	sub	sp, #16
 8014822:	af00      	add	r7, sp, #0
 8014824:	6078      	str	r0, [r7, #4]
 8014826:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014828:	683b      	ldr	r3, [r7, #0]
 801482a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	781a      	ldrb	r2, [r3, #0]
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	3301      	adds	r3, #1
 8014838:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	781a      	ldrb	r2, [r3, #0]
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	3301      	adds	r3, #1
 8014846:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014848:	68f8      	ldr	r0, [r7, #12]
 801484a:	f7ff fa16 	bl	8013c7a <SWAPBYTE>
 801484e:	4603      	mov	r3, r0
 8014850:	461a      	mov	r2, r3
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	3301      	adds	r3, #1
 801485a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	3301      	adds	r3, #1
 8014860:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014862:	68f8      	ldr	r0, [r7, #12]
 8014864:	f7ff fa09 	bl	8013c7a <SWAPBYTE>
 8014868:	4603      	mov	r3, r0
 801486a:	461a      	mov	r2, r3
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	3301      	adds	r3, #1
 8014874:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	3301      	adds	r3, #1
 801487a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801487c:	68f8      	ldr	r0, [r7, #12]
 801487e:	f7ff f9fc 	bl	8013c7a <SWAPBYTE>
 8014882:	4603      	mov	r3, r0
 8014884:	461a      	mov	r2, r3
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	80da      	strh	r2, [r3, #6]
}
 801488a:	bf00      	nop
 801488c:	3710      	adds	r7, #16
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}

08014892 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014892:	b580      	push	{r7, lr}
 8014894:	b082      	sub	sp, #8
 8014896:	af00      	add	r7, sp, #0
 8014898:	6078      	str	r0, [r7, #4]
 801489a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801489c:	2180      	movs	r1, #128	@ 0x80
 801489e:	6878      	ldr	r0, [r7, #4]
 80148a0:	f004 fa18 	bl	8018cd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80148a4:	2100      	movs	r1, #0
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f004 fa14 	bl	8018cd4 <USBD_LL_StallEP>
}
 80148ac:	bf00      	nop
 80148ae:	3708      	adds	r7, #8
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}

080148b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b086      	sub	sp, #24
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	60f8      	str	r0, [r7, #12]
 80148bc:	60b9      	str	r1, [r7, #8]
 80148be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80148c0:	2300      	movs	r3, #0
 80148c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d042      	beq.n	8014950 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80148ce:	6938      	ldr	r0, [r7, #16]
 80148d0:	f000 f842 	bl	8014958 <USBD_GetLen>
 80148d4:	4603      	mov	r3, r0
 80148d6:	3301      	adds	r3, #1
 80148d8:	005b      	lsls	r3, r3, #1
 80148da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80148de:	d808      	bhi.n	80148f2 <USBD_GetString+0x3e>
 80148e0:	6938      	ldr	r0, [r7, #16]
 80148e2:	f000 f839 	bl	8014958 <USBD_GetLen>
 80148e6:	4603      	mov	r3, r0
 80148e8:	3301      	adds	r3, #1
 80148ea:	b29b      	uxth	r3, r3
 80148ec:	005b      	lsls	r3, r3, #1
 80148ee:	b29a      	uxth	r2, r3
 80148f0:	e001      	b.n	80148f6 <USBD_GetString+0x42>
 80148f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80148fa:	7dfb      	ldrb	r3, [r7, #23]
 80148fc:	68ba      	ldr	r2, [r7, #8]
 80148fe:	4413      	add	r3, r2
 8014900:	687a      	ldr	r2, [r7, #4]
 8014902:	7812      	ldrb	r2, [r2, #0]
 8014904:	701a      	strb	r2, [r3, #0]
  idx++;
 8014906:	7dfb      	ldrb	r3, [r7, #23]
 8014908:	3301      	adds	r3, #1
 801490a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801490c:	7dfb      	ldrb	r3, [r7, #23]
 801490e:	68ba      	ldr	r2, [r7, #8]
 8014910:	4413      	add	r3, r2
 8014912:	2203      	movs	r2, #3
 8014914:	701a      	strb	r2, [r3, #0]
  idx++;
 8014916:	7dfb      	ldrb	r3, [r7, #23]
 8014918:	3301      	adds	r3, #1
 801491a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801491c:	e013      	b.n	8014946 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801491e:	7dfb      	ldrb	r3, [r7, #23]
 8014920:	68ba      	ldr	r2, [r7, #8]
 8014922:	4413      	add	r3, r2
 8014924:	693a      	ldr	r2, [r7, #16]
 8014926:	7812      	ldrb	r2, [r2, #0]
 8014928:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801492a:	693b      	ldr	r3, [r7, #16]
 801492c:	3301      	adds	r3, #1
 801492e:	613b      	str	r3, [r7, #16]
    idx++;
 8014930:	7dfb      	ldrb	r3, [r7, #23]
 8014932:	3301      	adds	r3, #1
 8014934:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014936:	7dfb      	ldrb	r3, [r7, #23]
 8014938:	68ba      	ldr	r2, [r7, #8]
 801493a:	4413      	add	r3, r2
 801493c:	2200      	movs	r2, #0
 801493e:	701a      	strb	r2, [r3, #0]
    idx++;
 8014940:	7dfb      	ldrb	r3, [r7, #23]
 8014942:	3301      	adds	r3, #1
 8014944:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	781b      	ldrb	r3, [r3, #0]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d1e7      	bne.n	801491e <USBD_GetString+0x6a>
 801494e:	e000      	b.n	8014952 <USBD_GetString+0x9e>
    return;
 8014950:	bf00      	nop
  }
}
 8014952:	3718      	adds	r7, #24
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}

08014958 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014958:	b480      	push	{r7}
 801495a:	b085      	sub	sp, #20
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014960:	2300      	movs	r3, #0
 8014962:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014968:	e005      	b.n	8014976 <USBD_GetLen+0x1e>
  {
    len++;
 801496a:	7bfb      	ldrb	r3, [r7, #15]
 801496c:	3301      	adds	r3, #1
 801496e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	3301      	adds	r3, #1
 8014974:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014976:	68bb      	ldr	r3, [r7, #8]
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d1f5      	bne.n	801496a <USBD_GetLen+0x12>
  }

  return len;
 801497e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014980:	4618      	mov	r0, r3
 8014982:	3714      	adds	r7, #20
 8014984:	46bd      	mov	sp, r7
 8014986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498a:	4770      	bx	lr

0801498c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b084      	sub	sp, #16
 8014990:	af00      	add	r7, sp, #0
 8014992:	60f8      	str	r0, [r7, #12]
 8014994:	60b9      	str	r1, [r7, #8]
 8014996:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	2202      	movs	r2, #2
 801499c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	687a      	ldr	r2, [r7, #4]
 80149a4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	687a      	ldr	r2, [r7, #4]
 80149aa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	68ba      	ldr	r2, [r7, #8]
 80149b0:	2100      	movs	r1, #0
 80149b2:	68f8      	ldr	r0, [r7, #12]
 80149b4:	f004 fa17 	bl	8018de6 <USBD_LL_Transmit>

  return USBD_OK;
 80149b8:	2300      	movs	r3, #0
}
 80149ba:	4618      	mov	r0, r3
 80149bc:	3710      	adds	r7, #16
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}

080149c2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80149c2:	b580      	push	{r7, lr}
 80149c4:	b084      	sub	sp, #16
 80149c6:	af00      	add	r7, sp, #0
 80149c8:	60f8      	str	r0, [r7, #12]
 80149ca:	60b9      	str	r1, [r7, #8]
 80149cc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	68ba      	ldr	r2, [r7, #8]
 80149d2:	2100      	movs	r1, #0
 80149d4:	68f8      	ldr	r0, [r7, #12]
 80149d6:	f004 fa06 	bl	8018de6 <USBD_LL_Transmit>

  return USBD_OK;
 80149da:	2300      	movs	r3, #0
}
 80149dc:	4618      	mov	r0, r3
 80149de:	3710      	adds	r7, #16
 80149e0:	46bd      	mov	sp, r7
 80149e2:	bd80      	pop	{r7, pc}

080149e4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b084      	sub	sp, #16
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	60f8      	str	r0, [r7, #12]
 80149ec:	60b9      	str	r1, [r7, #8]
 80149ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	2203      	movs	r2, #3
 80149f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	687a      	ldr	r2, [r7, #4]
 80149fc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	687a      	ldr	r2, [r7, #4]
 8014a04:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	68ba      	ldr	r2, [r7, #8]
 8014a0c:	2100      	movs	r1, #0
 8014a0e:	68f8      	ldr	r0, [r7, #12]
 8014a10:	f004 fa0a 	bl	8018e28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014a14:	2300      	movs	r3, #0
}
 8014a16:	4618      	mov	r0, r3
 8014a18:	3710      	adds	r7, #16
 8014a1a:	46bd      	mov	sp, r7
 8014a1c:	bd80      	pop	{r7, pc}

08014a1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014a1e:	b580      	push	{r7, lr}
 8014a20:	b084      	sub	sp, #16
 8014a22:	af00      	add	r7, sp, #0
 8014a24:	60f8      	str	r0, [r7, #12]
 8014a26:	60b9      	str	r1, [r7, #8]
 8014a28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	68ba      	ldr	r2, [r7, #8]
 8014a2e:	2100      	movs	r1, #0
 8014a30:	68f8      	ldr	r0, [r7, #12]
 8014a32:	f004 f9f9 	bl	8018e28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014a36:	2300      	movs	r3, #0
}
 8014a38:	4618      	mov	r0, r3
 8014a3a:	3710      	adds	r7, #16
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	bd80      	pop	{r7, pc}

08014a40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b082      	sub	sp, #8
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2204      	movs	r2, #4
 8014a4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014a50:	2300      	movs	r3, #0
 8014a52:	2200      	movs	r2, #0
 8014a54:	2100      	movs	r1, #0
 8014a56:	6878      	ldr	r0, [r7, #4]
 8014a58:	f004 f9c5 	bl	8018de6 <USBD_LL_Transmit>

  return USBD_OK;
 8014a5c:	2300      	movs	r3, #0
}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3708      	adds	r7, #8
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}

08014a66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014a66:	b580      	push	{r7, lr}
 8014a68:	b082      	sub	sp, #8
 8014a6a:	af00      	add	r7, sp, #0
 8014a6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	2205      	movs	r2, #5
 8014a72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014a76:	2300      	movs	r3, #0
 8014a78:	2200      	movs	r2, #0
 8014a7a:	2100      	movs	r1, #0
 8014a7c:	6878      	ldr	r0, [r7, #4]
 8014a7e:	f004 f9d3 	bl	8018e28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014a82:	2300      	movs	r3, #0
}
 8014a84:	4618      	mov	r0, r3
 8014a86:	3708      	adds	r7, #8
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}

08014a8c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b088      	sub	sp, #32
 8014a90:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8014a92:	2300      	movs	r3, #0
 8014a94:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014a96:	f107 0308 	add.w	r3, r7, #8
 8014a9a:	2218      	movs	r2, #24
 8014a9c:	2100      	movs	r1, #0
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	f001 f92d 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014aa4:	233f      	movs	r3, #63	@ 0x3f
 8014aa6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8014aa8:	2381      	movs	r3, #129	@ 0x81
 8014aaa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8014aac:	1dfb      	adds	r3, r7, #7
 8014aae:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014ab4:	f107 0308 	add.w	r3, r7, #8
 8014ab8:	2100      	movs	r1, #0
 8014aba:	4618      	mov	r0, r3
 8014abc:	f001 fba8 	bl	8016210 <hci_send_req>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	da01      	bge.n	8014aca <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8014ac6:	23ff      	movs	r3, #255	@ 0xff
 8014ac8:	e000      	b.n	8014acc <aci_gap_set_non_discoverable+0x40>
  return status;
 8014aca:	79fb      	ldrb	r3, [r7, #7]
}
 8014acc:	4618      	mov	r0, r3
 8014ace:	3720      	adds	r7, #32
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	bd80      	pop	{r7, pc}

08014ad4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8014ad4:	b5b0      	push	{r4, r5, r7, lr}
 8014ad6:	b0ce      	sub	sp, #312	@ 0x138
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	4605      	mov	r5, r0
 8014adc:	460c      	mov	r4, r1
 8014ade:	4610      	mov	r0, r2
 8014ae0:	4619      	mov	r1, r3
 8014ae2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ae6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8014aea:	462a      	mov	r2, r5
 8014aec:	701a      	strb	r2, [r3, #0]
 8014aee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014af2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014af6:	4622      	mov	r2, r4
 8014af8:	801a      	strh	r2, [r3, #0]
 8014afa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014afe:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8014b02:	4602      	mov	r2, r0
 8014b04:	801a      	strh	r2, [r3, #0]
 8014b06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b0a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8014b0e:	460a      	mov	r2, r1
 8014b10:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8014b12:	f107 0310 	add.w	r3, r7, #16
 8014b16:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8014b1a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8014b1e:	3308      	adds	r3, #8
 8014b20:	f107 0210 	add.w	r2, r7, #16
 8014b24:	4413      	add	r3, r2
 8014b26:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8014b2a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014b2e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014b32:	4413      	add	r3, r2
 8014b34:	3309      	adds	r3, #9
 8014b36:	f107 0210 	add.w	r2, r7, #16
 8014b3a:	4413      	add	r3, r2
 8014b3c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014b40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b44:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014b48:	2200      	movs	r2, #0
 8014b4a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8014b52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b56:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014b5a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8014b5e:	7812      	ldrb	r2, [r2, #0]
 8014b60:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014b62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b66:	3301      	adds	r3, #1
 8014b68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8014b6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b70:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014b74:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8014b78:	8812      	ldrh	r2, [r2, #0]
 8014b7a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8014b7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b82:	3302      	adds	r3, #2
 8014b84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8014b88:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b8c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014b90:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8014b94:	8812      	ldrh	r2, [r2, #0]
 8014b96:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8014b9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b9e:	3302      	adds	r3, #2
 8014ba0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8014ba4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014ba8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014bac:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8014bb0:	7812      	ldrb	r2, [r2, #0]
 8014bb2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014bb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014bb8:	3301      	adds	r3, #1
 8014bba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8014bbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014bc2:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8014bc6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014bc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014bcc:	3301      	adds	r3, #1
 8014bce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8014bd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014bd6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014bda:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8014bdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014be0:	3301      	adds	r3, #1
 8014be2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8014be6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014bea:	3308      	adds	r3, #8
 8014bec:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014bf0:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	f001 f872 	bl	8015cde <Osal_MemCpy>
    index_input += Local_Name_Length;
 8014bfa:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8014bfe:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014c02:	4413      	add	r3, r2
 8014c04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8014c08:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014c0c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014c10:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8014c12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c16:	3301      	adds	r3, #1
 8014c18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8014c1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014c20:	3301      	adds	r3, #1
 8014c22:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014c26:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	f001 f857 	bl	8015cde <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8014c30:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014c34:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014c38:	4413      	add	r3, r2
 8014c3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8014c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014c42:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8014c46:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8014c48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c4c:	3302      	adds	r3, #2
 8014c4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8014c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014c56:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8014c5a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8014c5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c60:	3302      	adds	r3, #2
 8014c62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014c66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014c6a:	2218      	movs	r2, #24
 8014c6c:	2100      	movs	r1, #0
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f001 f845 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014c74:	233f      	movs	r3, #63	@ 0x3f
 8014c76:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8014c7a:	2383      	movs	r3, #131	@ 0x83
 8014c7c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014c80:	f107 0310 	add.w	r3, r7, #16
 8014c84:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c8c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014c90:	f107 030f 	add.w	r3, r7, #15
 8014c94:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014c98:	2301      	movs	r3, #1
 8014c9a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014c9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014ca2:	2100      	movs	r1, #0
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f001 fab3 	bl	8016210 <hci_send_req>
 8014caa:	4603      	mov	r3, r0
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	da01      	bge.n	8014cb4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8014cb0:	23ff      	movs	r3, #255	@ 0xff
 8014cb2:	e004      	b.n	8014cbe <aci_gap_set_discoverable+0x1ea>
  return status;
 8014cb4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cb8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014cbc:	781b      	ldrb	r3, [r3, #0]
}
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bdb0      	pop	{r4, r5, r7, pc}

08014cc8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b0cc      	sub	sp, #304	@ 0x130
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	4602      	mov	r2, r0
 8014cd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014cd4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014cd8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8014cda:	f107 0310 	add.w	r3, r7, #16
 8014cde:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014ce2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014ce6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014cea:	2200      	movs	r2, #0
 8014cec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014cee:	2300      	movs	r3, #0
 8014cf0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8014cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014cf8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014cfc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014d00:	7812      	ldrb	r2, [r2, #0]
 8014d02:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014d04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d08:	3301      	adds	r3, #1
 8014d0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014d0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014d12:	2218      	movs	r2, #24
 8014d14:	2100      	movs	r1, #0
 8014d16:	4618      	mov	r0, r3
 8014d18:	f000 fff1 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014d1c:	233f      	movs	r3, #63	@ 0x3f
 8014d1e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8014d22:	2385      	movs	r3, #133	@ 0x85
 8014d24:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014d28:	f107 0310 	add.w	r3, r7, #16
 8014d2c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014d30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d34:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014d38:	f107 030f 	add.w	r3, r7, #15
 8014d3c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014d40:	2301      	movs	r3, #1
 8014d42:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014d46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014d4a:	2100      	movs	r1, #0
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f001 fa5f 	bl	8016210 <hci_send_req>
 8014d52:	4603      	mov	r3, r0
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	da01      	bge.n	8014d5c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8014d58:	23ff      	movs	r3, #255	@ 0xff
 8014d5a:	e004      	b.n	8014d66 <aci_gap_set_io_capability+0x9e>
  return status;
 8014d5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d60:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014d64:	781b      	ldrb	r3, [r3, #0]
}
 8014d66:	4618      	mov	r0, r3
 8014d68:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}

08014d70 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8014d70:	b5b0      	push	{r4, r5, r7, lr}
 8014d72:	b0cc      	sub	sp, #304	@ 0x130
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	4605      	mov	r5, r0
 8014d78:	460c      	mov	r4, r1
 8014d7a:	4610      	mov	r0, r2
 8014d7c:	4619      	mov	r1, r3
 8014d7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d82:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014d86:	462a      	mov	r2, r5
 8014d88:	701a      	strb	r2, [r3, #0]
 8014d8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d8e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014d92:	4622      	mov	r2, r4
 8014d94:	701a      	strb	r2, [r3, #0]
 8014d96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d9a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8014d9e:	4602      	mov	r2, r0
 8014da0:	701a      	strb	r2, [r3, #0]
 8014da2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014da6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014daa:	460a      	mov	r2, r1
 8014dac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8014dae:	f107 0310 	add.w	r3, r7, #16
 8014db2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014db6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014dba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8014dc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014dcc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014dd0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014dd4:	7812      	ldrb	r2, [r2, #0]
 8014dd6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014dd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ddc:	3301      	adds	r3, #1
 8014dde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8014de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014de6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014dea:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014dee:	7812      	ldrb	r2, [r2, #0]
 8014df0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8014df2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014df6:	3301      	adds	r3, #1
 8014df8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8014dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014e00:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014e04:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8014e08:	7812      	ldrb	r2, [r2, #0]
 8014e0a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8014e0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e10:	3301      	adds	r3, #1
 8014e12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8014e16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014e1a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014e1e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8014e22:	7812      	ldrb	r2, [r2, #0]
 8014e24:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8014e26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e2a:	3301      	adds	r3, #1
 8014e2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8014e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014e34:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8014e38:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8014e3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e3e:	3301      	adds	r3, #1
 8014e40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8014e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014e48:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8014e4c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014e4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e52:	3301      	adds	r3, #1
 8014e54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8014e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014e5c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8014e60:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014e62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e66:	3301      	adds	r3, #1
 8014e68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8014e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014e70:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8014e74:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8014e78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e7c:	3304      	adds	r3, #4
 8014e7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8014e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014e86:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8014e8a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8014e8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e90:	3301      	adds	r3, #1
 8014e92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014e96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014e9a:	2218      	movs	r2, #24
 8014e9c:	2100      	movs	r1, #0
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f000 ff2d 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014ea4:	233f      	movs	r3, #63	@ 0x3f
 8014ea6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8014eaa:	2386      	movs	r3, #134	@ 0x86
 8014eac:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014eb0:	f107 0310 	add.w	r3, r7, #16
 8014eb4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014eb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ebc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014ec0:	f107 030f 	add.w	r3, r7, #15
 8014ec4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014ec8:	2301      	movs	r3, #1
 8014eca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014ece:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014ed2:	2100      	movs	r1, #0
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f001 f99b 	bl	8016210 <hci_send_req>
 8014eda:	4603      	mov	r3, r0
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	da01      	bge.n	8014ee4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8014ee0:	23ff      	movs	r3, #255	@ 0xff
 8014ee2:	e004      	b.n	8014eee <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8014ee4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014ee8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014eec:	781b      	ldrb	r3, [r3, #0]
}
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	bdb0      	pop	{r4, r5, r7, pc}

08014ef8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b0cc      	sub	sp, #304	@ 0x130
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	4602      	mov	r2, r0
 8014f00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f04:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014f08:	6019      	str	r1, [r3, #0]
 8014f0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f0e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014f12:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8014f14:	f107 0310 	add.w	r3, r7, #16
 8014f18:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014f1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f20:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014f24:	2200      	movs	r2, #0
 8014f26:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8014f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014f32:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014f36:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014f3a:	8812      	ldrh	r2, [r2, #0]
 8014f3c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014f3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f42:	3302      	adds	r3, #2
 8014f44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8014f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014f4c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014f50:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8014f54:	6812      	ldr	r2, [r2, #0]
 8014f56:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8014f5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f5e:	3304      	adds	r3, #4
 8014f60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014f64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014f68:	2218      	movs	r2, #24
 8014f6a:	2100      	movs	r1, #0
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f000 fec6 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014f72:	233f      	movs	r3, #63	@ 0x3f
 8014f74:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8014f78:	2388      	movs	r3, #136	@ 0x88
 8014f7a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014f7e:	f107 0310 	add.w	r3, r7, #16
 8014f82:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014f86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f8a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014f8e:	f107 030f 	add.w	r3, r7, #15
 8014f92:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014f96:	2301      	movs	r3, #1
 8014f98:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014f9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014fa0:	2100      	movs	r1, #0
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f001 f934 	bl	8016210 <hci_send_req>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	da01      	bge.n	8014fb2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8014fae:	23ff      	movs	r3, #255	@ 0xff
 8014fb0:	e004      	b.n	8014fbc <aci_gap_pass_key_resp+0xc4>
  return status;
 8014fb2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014fb6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014fba:	781b      	ldrb	r3, [r3, #0]
}
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}

08014fc6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8014fc6:	b590      	push	{r4, r7, lr}
 8014fc8:	b0cd      	sub	sp, #308	@ 0x134
 8014fca:	af00      	add	r7, sp, #0
 8014fcc:	4604      	mov	r4, r0
 8014fce:	4608      	mov	r0, r1
 8014fd0:	4611      	mov	r1, r2
 8014fd2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014fd6:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8014fda:	6013      	str	r3, [r2, #0]
 8014fdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014fe0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014fe4:	4622      	mov	r2, r4
 8014fe6:	701a      	strb	r2, [r3, #0]
 8014fe8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014fec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014ff0:	4602      	mov	r2, r0
 8014ff2:	701a      	strb	r2, [r3, #0]
 8014ff4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014ff8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8014ffc:	460a      	mov	r2, r1
 8014ffe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8015000:	f107 0310 	add.w	r3, r7, #16
 8015004:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015008:	f107 0308 	add.w	r3, r7, #8
 801500c:	2207      	movs	r2, #7
 801500e:	2100      	movs	r1, #0
 8015010:	4618      	mov	r0, r3
 8015012:	f000 fe74 	bl	8015cfe <Osal_MemSet>
  int index_input = 0;
 8015016:	2300      	movs	r3, #0
 8015018:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 801501c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015020:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015024:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015028:	7812      	ldrb	r2, [r2, #0]
 801502a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801502c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015030:	3301      	adds	r3, #1
 8015032:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8015036:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801503a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801503e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015042:	7812      	ldrb	r2, [r2, #0]
 8015044:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015046:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801504a:	3301      	adds	r3, #1
 801504c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8015050:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015054:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015058:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 801505c:	7812      	ldrb	r2, [r2, #0]
 801505e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8015060:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015064:	3301      	adds	r3, #1
 8015066:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801506a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801506e:	2218      	movs	r2, #24
 8015070:	2100      	movs	r1, #0
 8015072:	4618      	mov	r0, r3
 8015074:	f000 fe43 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015078:	233f      	movs	r3, #63	@ 0x3f
 801507a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 801507e:	238a      	movs	r3, #138	@ 0x8a
 8015080:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015084:	f107 0310 	add.w	r3, r7, #16
 8015088:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801508c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015090:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8015094:	f107 0308 	add.w	r3, r7, #8
 8015098:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 801509c:	2307      	movs	r3, #7
 801509e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80150a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80150a6:	2100      	movs	r1, #0
 80150a8:	4618      	mov	r0, r3
 80150aa:	f001 f8b1 	bl	8016210 <hci_send_req>
 80150ae:	4603      	mov	r3, r0
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	da01      	bge.n	80150b8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80150b4:	23ff      	movs	r3, #255	@ 0xff
 80150b6:	e02e      	b.n	8015116 <aci_gap_init+0x150>
  if ( resp.Status )
 80150b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150bc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80150c0:	781b      	ldrb	r3, [r3, #0]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d005      	beq.n	80150d2 <aci_gap_init+0x10c>
    return resp.Status;
 80150c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150ca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80150ce:	781b      	ldrb	r3, [r3, #0]
 80150d0:	e021      	b.n	8015116 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80150d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80150da:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80150de:	b29a      	uxth	r2, r3
 80150e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150e4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80150ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150f0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80150f4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80150f8:	b29a      	uxth	r2, r3
 80150fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80150fe:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8015100:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015104:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015108:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 801510c:	b29a      	uxth	r2, r3
 801510e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8015112:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015114:	2300      	movs	r3, #0
}
 8015116:	4618      	mov	r0, r3
 8015118:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 801511c:	46bd      	mov	sp, r7
 801511e:	bd90      	pop	{r4, r7, pc}

08015120 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b0cc      	sub	sp, #304	@ 0x130
 8015124:	af00      	add	r7, sp, #0
 8015126:	4602      	mov	r2, r0
 8015128:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801512c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015130:	6019      	str	r1, [r3, #0]
 8015132:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015136:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801513a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 801513c:	f107 0310 	add.w	r3, r7, #16
 8015140:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015144:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015148:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801514c:	2200      	movs	r2, #0
 801514e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015150:	2300      	movs	r3, #0
 8015152:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8015156:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801515a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801515e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015162:	7812      	ldrb	r2, [r2, #0]
 8015164:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015166:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801516a:	3301      	adds	r3, #1
 801516c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8015170:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015174:	1c58      	adds	r0, r3, #1
 8015176:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801517a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801517e:	781a      	ldrb	r2, [r3, #0]
 8015180:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015184:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015188:	6819      	ldr	r1, [r3, #0]
 801518a:	f000 fda8 	bl	8015cde <Osal_MemCpy>
  index_input += AdvDataLen;
 801518e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015192:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015196:	781b      	ldrb	r3, [r3, #0]
 8015198:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801519c:	4413      	add	r3, r2
 801519e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80151a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80151a6:	2218      	movs	r2, #24
 80151a8:	2100      	movs	r1, #0
 80151aa:	4618      	mov	r0, r3
 80151ac:	f000 fda7 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x3f;
 80151b0:	233f      	movs	r3, #63	@ 0x3f
 80151b2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80151b6:	238e      	movs	r3, #142	@ 0x8e
 80151b8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80151bc:	f107 0310 	add.w	r3, r7, #16
 80151c0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80151c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80151cc:	f107 030f 	add.w	r3, r7, #15
 80151d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80151d4:	2301      	movs	r3, #1
 80151d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80151da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80151de:	2100      	movs	r1, #0
 80151e0:	4618      	mov	r0, r3
 80151e2:	f001 f815 	bl	8016210 <hci_send_req>
 80151e6:	4603      	mov	r3, r0
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	da01      	bge.n	80151f0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80151ec:	23ff      	movs	r3, #255	@ 0xff
 80151ee:	e004      	b.n	80151fa <aci_gap_update_adv_data+0xda>
  return status;
 80151f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151f4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80151f8:	781b      	ldrb	r3, [r3, #0]
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}

08015204 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b088      	sub	sp, #32
 8015208:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801520a:	2300      	movs	r3, #0
 801520c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801520e:	f107 0308 	add.w	r3, r7, #8
 8015212:	2218      	movs	r2, #24
 8015214:	2100      	movs	r1, #0
 8015216:	4618      	mov	r0, r3
 8015218:	f000 fd71 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x3f;
 801521c:	233f      	movs	r3, #63	@ 0x3f
 801521e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8015220:	2392      	movs	r3, #146	@ 0x92
 8015222:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015224:	1dfb      	adds	r3, r7, #7
 8015226:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015228:	2301      	movs	r3, #1
 801522a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801522c:	f107 0308 	add.w	r3, r7, #8
 8015230:	2100      	movs	r1, #0
 8015232:	4618      	mov	r0, r3
 8015234:	f000 ffec 	bl	8016210 <hci_send_req>
 8015238:	4603      	mov	r3, r0
 801523a:	2b00      	cmp	r3, #0
 801523c:	da01      	bge.n	8015242 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 801523e:	23ff      	movs	r3, #255	@ 0xff
 8015240:	e000      	b.n	8015244 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8015242:	79fb      	ldrb	r3, [r7, #7]
}
 8015244:	4618      	mov	r0, r3
 8015246:	3720      	adds	r7, #32
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}

0801524c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b0cc      	sub	sp, #304	@ 0x130
 8015250:	af00      	add	r7, sp, #0
 8015252:	4602      	mov	r2, r0
 8015254:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015258:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801525c:	801a      	strh	r2, [r3, #0]
 801525e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015262:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8015266:	460a      	mov	r2, r1
 8015268:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 801526a:	f107 0310 	add.w	r3, r7, #16
 801526e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015272:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015276:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801527a:	2200      	movs	r2, #0
 801527c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801527e:	2300      	movs	r3, #0
 8015280:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8015284:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015288:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801528c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015290:	8812      	ldrh	r2, [r2, #0]
 8015292:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015294:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015298:	3302      	adds	r3, #2
 801529a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 801529e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80152a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80152a6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80152aa:	7812      	ldrb	r2, [r2, #0]
 80152ac:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80152ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152b2:	3301      	adds	r3, #1
 80152b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80152b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80152bc:	2218      	movs	r2, #24
 80152be:	2100      	movs	r1, #0
 80152c0:	4618      	mov	r0, r3
 80152c2:	f000 fd1c 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x3f;
 80152c6:	233f      	movs	r3, #63	@ 0x3f
 80152c8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80152cc:	23a5      	movs	r3, #165	@ 0xa5
 80152ce:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80152d2:	f107 0310 	add.w	r3, r7, #16
 80152d6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80152da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152de:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80152e2:	f107 030f 	add.w	r3, r7, #15
 80152e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80152ea:	2301      	movs	r3, #1
 80152ec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80152f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80152f4:	2100      	movs	r1, #0
 80152f6:	4618      	mov	r0, r3
 80152f8:	f000 ff8a 	bl	8016210 <hci_send_req>
 80152fc:	4603      	mov	r3, r0
 80152fe:	2b00      	cmp	r3, #0
 8015300:	da01      	bge.n	8015306 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8015302:	23ff      	movs	r3, #255	@ 0xff
 8015304:	e004      	b.n	8015310 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8015306:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801530a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801530e:	781b      	ldrb	r3, [r3, #0]
}
 8015310:	4618      	mov	r0, r3
 8015312:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015316:	46bd      	mov	sp, r7
 8015318:	bd80      	pop	{r7, pc}

0801531a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 801531a:	b580      	push	{r7, lr}
 801531c:	b088      	sub	sp, #32
 801531e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8015320:	2300      	movs	r3, #0
 8015322:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015324:	f107 0308 	add.w	r3, r7, #8
 8015328:	2218      	movs	r2, #24
 801532a:	2100      	movs	r1, #0
 801532c:	4618      	mov	r0, r3
 801532e:	f000 fce6 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015332:	233f      	movs	r3, #63	@ 0x3f
 8015334:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8015336:	f240 1301 	movw	r3, #257	@ 0x101
 801533a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801533c:	1dfb      	adds	r3, r7, #7
 801533e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015340:	2301      	movs	r3, #1
 8015342:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015344:	f107 0308 	add.w	r3, r7, #8
 8015348:	2100      	movs	r1, #0
 801534a:	4618      	mov	r0, r3
 801534c:	f000 ff60 	bl	8016210 <hci_send_req>
 8015350:	4603      	mov	r3, r0
 8015352:	2b00      	cmp	r3, #0
 8015354:	da01      	bge.n	801535a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8015356:	23ff      	movs	r3, #255	@ 0xff
 8015358:	e000      	b.n	801535c <aci_gatt_init+0x42>
  return status;
 801535a:	79fb      	ldrb	r3, [r7, #7]
}
 801535c:	4618      	mov	r0, r3
 801535e:	3720      	adds	r7, #32
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}

08015364 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8015364:	b590      	push	{r4, r7, lr}
 8015366:	b0cf      	sub	sp, #316	@ 0x13c
 8015368:	af00      	add	r7, sp, #0
 801536a:	4604      	mov	r4, r0
 801536c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8015370:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8015374:	6001      	str	r1, [r0, #0]
 8015376:	4610      	mov	r0, r2
 8015378:	4619      	mov	r1, r3
 801537a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801537e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8015382:	4622      	mov	r2, r4
 8015384:	701a      	strb	r2, [r3, #0]
 8015386:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801538a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801538e:	4602      	mov	r2, r0
 8015390:	701a      	strb	r2, [r3, #0]
 8015392:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015396:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801539a:	460a      	mov	r2, r1
 801539c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 801539e:	f107 0310 	add.w	r3, r7, #16
 80153a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80153a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80153aa:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80153ae:	781b      	ldrb	r3, [r3, #0]
 80153b0:	2b01      	cmp	r3, #1
 80153b2:	d00a      	beq.n	80153ca <aci_gatt_add_service+0x66>
 80153b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80153b8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80153bc:	781b      	ldrb	r3, [r3, #0]
 80153be:	2b02      	cmp	r3, #2
 80153c0:	d101      	bne.n	80153c6 <aci_gatt_add_service+0x62>
 80153c2:	2311      	movs	r3, #17
 80153c4:	e002      	b.n	80153cc <aci_gatt_add_service+0x68>
 80153c6:	2301      	movs	r3, #1
 80153c8:	e000      	b.n	80153cc <aci_gatt_add_service+0x68>
 80153ca:	2303      	movs	r3, #3
 80153cc:	f107 0210 	add.w	r2, r7, #16
 80153d0:	4413      	add	r3, r2
 80153d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80153d6:	f107 030c 	add.w	r3, r7, #12
 80153da:	2203      	movs	r2, #3
 80153dc:	2100      	movs	r1, #0
 80153de:	4618      	mov	r0, r3
 80153e0:	f000 fc8d 	bl	8015cfe <Osal_MemSet>
  int index_input = 0;
 80153e4:	2300      	movs	r3, #0
 80153e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80153ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80153ee:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80153f2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80153f6:	7812      	ldrb	r2, [r2, #0]
 80153f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80153fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153fe:	3301      	adds	r3, #1
 8015400:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8015404:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015408:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801540c:	781b      	ldrb	r3, [r3, #0]
 801540e:	2b01      	cmp	r3, #1
 8015410:	d002      	beq.n	8015418 <aci_gatt_add_service+0xb4>
 8015412:	2b02      	cmp	r3, #2
 8015414:	d004      	beq.n	8015420 <aci_gatt_add_service+0xbc>
 8015416:	e007      	b.n	8015428 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8015418:	2302      	movs	r3, #2
 801541a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 801541e:	e005      	b.n	801542c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8015420:	2310      	movs	r3, #16
 8015422:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8015426:	e001      	b.n	801542c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8015428:	2397      	movs	r3, #151	@ 0x97
 801542a:	e06c      	b.n	8015506 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 801542c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015430:	1c58      	adds	r0, r3, #1
 8015432:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8015436:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801543a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801543e:	6819      	ldr	r1, [r3, #0]
 8015440:	f000 fc4d 	bl	8015cde <Osal_MemCpy>
    index_input += size;
 8015444:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8015448:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801544c:	4413      	add	r3, r2
 801544e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8015452:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015456:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801545a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 801545e:	7812      	ldrb	r2, [r2, #0]
 8015460:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8015462:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015466:	3301      	adds	r3, #1
 8015468:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 801546c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015470:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8015474:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8015478:	7812      	ldrb	r2, [r2, #0]
 801547a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 801547c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015480:	3301      	adds	r3, #1
 8015482:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015486:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801548a:	2218      	movs	r2, #24
 801548c:	2100      	movs	r1, #0
 801548e:	4618      	mov	r0, r3
 8015490:	f000 fc35 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015494:	233f      	movs	r3, #63	@ 0x3f
 8015496:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 801549a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 801549e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80154a2:	f107 0310 	add.w	r3, r7, #16
 80154a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80154aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80154ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80154b2:	f107 030c 	add.w	r3, r7, #12
 80154b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80154ba:	2303      	movs	r3, #3
 80154bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80154c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80154c4:	2100      	movs	r1, #0
 80154c6:	4618      	mov	r0, r3
 80154c8:	f000 fea2 	bl	8016210 <hci_send_req>
 80154cc:	4603      	mov	r3, r0
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	da01      	bge.n	80154d6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80154d2:	23ff      	movs	r3, #255	@ 0xff
 80154d4:	e017      	b.n	8015506 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80154d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80154da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80154de:	781b      	ldrb	r3, [r3, #0]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d005      	beq.n	80154f0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80154e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80154e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80154ec:	781b      	ldrb	r3, [r3, #0]
 80154ee:	e00a      	b.n	8015506 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80154f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80154f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80154f8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80154fc:	b29a      	uxth	r2, r3
 80154fe:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8015502:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015504:	2300      	movs	r3, #0
}
 8015506:	4618      	mov	r0, r3
 8015508:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 801550c:	46bd      	mov	sp, r7
 801550e:	bd90      	pop	{r4, r7, pc}

08015510 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8015510:	b590      	push	{r4, r7, lr}
 8015512:	b0d1      	sub	sp, #324	@ 0x144
 8015514:	af00      	add	r7, sp, #0
 8015516:	4604      	mov	r4, r0
 8015518:	4608      	mov	r0, r1
 801551a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 801551e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8015522:	600a      	str	r2, [r1, #0]
 8015524:	4619      	mov	r1, r3
 8015526:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801552a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801552e:	4622      	mov	r2, r4
 8015530:	801a      	strh	r2, [r3, #0]
 8015532:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015536:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801553a:	4602      	mov	r2, r0
 801553c:	701a      	strb	r2, [r3, #0]
 801553e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015542:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8015546:	460a      	mov	r2, r1
 8015548:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 801554a:	f107 0318 	add.w	r3, r7, #24
 801554e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8015552:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015556:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801555a:	781b      	ldrb	r3, [r3, #0]
 801555c:	2b01      	cmp	r3, #1
 801555e:	d00a      	beq.n	8015576 <aci_gatt_add_char+0x66>
 8015560:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015564:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8015568:	781b      	ldrb	r3, [r3, #0]
 801556a:	2b02      	cmp	r3, #2
 801556c:	d101      	bne.n	8015572 <aci_gatt_add_char+0x62>
 801556e:	2313      	movs	r3, #19
 8015570:	e002      	b.n	8015578 <aci_gatt_add_char+0x68>
 8015572:	2303      	movs	r3, #3
 8015574:	e000      	b.n	8015578 <aci_gatt_add_char+0x68>
 8015576:	2305      	movs	r3, #5
 8015578:	f107 0218 	add.w	r2, r7, #24
 801557c:	4413      	add	r3, r2
 801557e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015582:	f107 0314 	add.w	r3, r7, #20
 8015586:	2203      	movs	r2, #3
 8015588:	2100      	movs	r1, #0
 801558a:	4618      	mov	r0, r3
 801558c:	f000 fbb7 	bl	8015cfe <Osal_MemSet>
  int index_input = 0;
 8015590:	2300      	movs	r3, #0
 8015592:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8015596:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801559a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801559e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80155a2:	8812      	ldrh	r2, [r2, #0]
 80155a4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80155a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80155aa:	3302      	adds	r3, #2
 80155ac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80155b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80155b4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80155b8:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80155bc:	7812      	ldrb	r2, [r2, #0]
 80155be:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80155c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80155c4:	3301      	adds	r3, #1
 80155c6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80155ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80155ce:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80155d2:	781b      	ldrb	r3, [r3, #0]
 80155d4:	2b01      	cmp	r3, #1
 80155d6:	d002      	beq.n	80155de <aci_gatt_add_char+0xce>
 80155d8:	2b02      	cmp	r3, #2
 80155da:	d004      	beq.n	80155e6 <aci_gatt_add_char+0xd6>
 80155dc:	e007      	b.n	80155ee <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80155de:	2302      	movs	r3, #2
 80155e0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80155e4:	e005      	b.n	80155f2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80155e6:	2310      	movs	r3, #16
 80155e8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80155ec:	e001      	b.n	80155f2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80155ee:	2397      	movs	r3, #151	@ 0x97
 80155f0:	e091      	b.n	8015716 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80155f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80155f6:	1cd8      	adds	r0, r3, #3
 80155f8:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80155fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015600:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8015604:	6819      	ldr	r1, [r3, #0]
 8015606:	f000 fb6a 	bl	8015cde <Osal_MemCpy>
    index_input += size;
 801560a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801560e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8015612:	4413      	add	r3, r2
 8015614:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8015618:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801561c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8015620:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8015624:	8812      	ldrh	r2, [r2, #0]
 8015626:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8015628:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801562c:	3302      	adds	r3, #2
 801562e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8015632:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015636:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 801563a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 801563c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015640:	3301      	adds	r3, #1
 8015642:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8015646:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801564a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 801564e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8015650:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015654:	3301      	adds	r3, #1
 8015656:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 801565a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801565e:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8015662:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8015664:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015668:	3301      	adds	r3, #1
 801566a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 801566e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015672:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8015676:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8015678:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801567c:	3301      	adds	r3, #1
 801567e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8015682:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015686:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 801568a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 801568c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015690:	3301      	adds	r3, #1
 8015692:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015696:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801569a:	2218      	movs	r2, #24
 801569c:	2100      	movs	r1, #0
 801569e:	4618      	mov	r0, r3
 80156a0:	f000 fb2d 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x3f;
 80156a4:	233f      	movs	r3, #63	@ 0x3f
 80156a6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80156aa:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80156ae:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80156b2:	f107 0318 	add.w	r3, r7, #24
 80156b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80156ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80156be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80156c2:	f107 0314 	add.w	r3, r7, #20
 80156c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80156ca:	2303      	movs	r3, #3
 80156cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80156d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80156d4:	2100      	movs	r1, #0
 80156d6:	4618      	mov	r0, r3
 80156d8:	f000 fd9a 	bl	8016210 <hci_send_req>
 80156dc:	4603      	mov	r3, r0
 80156de:	2b00      	cmp	r3, #0
 80156e0:	da01      	bge.n	80156e6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80156e2:	23ff      	movs	r3, #255	@ 0xff
 80156e4:	e017      	b.n	8015716 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80156e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80156ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80156ee:	781b      	ldrb	r3, [r3, #0]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d005      	beq.n	8015700 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80156f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80156f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80156fc:	781b      	ldrb	r3, [r3, #0]
 80156fe:	e00a      	b.n	8015716 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8015700:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015704:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015708:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801570c:	b29a      	uxth	r2, r3
 801570e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8015712:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015714:	2300      	movs	r3, #0
}
 8015716:	4618      	mov	r0, r3
 8015718:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 801571c:	46bd      	mov	sp, r7
 801571e:	bd90      	pop	{r4, r7, pc}

08015720 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8015720:	b5b0      	push	{r4, r5, r7, lr}
 8015722:	b0cc      	sub	sp, #304	@ 0x130
 8015724:	af00      	add	r7, sp, #0
 8015726:	4605      	mov	r5, r0
 8015728:	460c      	mov	r4, r1
 801572a:	4610      	mov	r0, r2
 801572c:	4619      	mov	r1, r3
 801572e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015732:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015736:	462a      	mov	r2, r5
 8015738:	801a      	strh	r2, [r3, #0]
 801573a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801573e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015742:	4622      	mov	r2, r4
 8015744:	801a      	strh	r2, [r3, #0]
 8015746:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801574a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 801574e:	4602      	mov	r2, r0
 8015750:	701a      	strb	r2, [r3, #0]
 8015752:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015756:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 801575a:	460a      	mov	r2, r1
 801575c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 801575e:	f107 0310 	add.w	r3, r7, #16
 8015762:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015766:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801576a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801576e:	2200      	movs	r2, #0
 8015770:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015772:	2300      	movs	r3, #0
 8015774:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8015778:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801577c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015780:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015784:	8812      	ldrh	r2, [r2, #0]
 8015786:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015788:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801578c:	3302      	adds	r3, #2
 801578e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8015792:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015796:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801579a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 801579e:	8812      	ldrh	r2, [r2, #0]
 80157a0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80157a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157a6:	3302      	adds	r3, #2
 80157a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 80157ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80157b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80157b4:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80157b8:	7812      	ldrb	r2, [r2, #0]
 80157ba:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80157bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157c0:	3301      	adds	r3, #1
 80157c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80157c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80157ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80157ce:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80157d2:	7812      	ldrb	r2, [r2, #0]
 80157d4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80157d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157da:	3301      	adds	r3, #1
 80157dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80157e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80157e4:	1d98      	adds	r0, r3, #6
 80157e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80157ea:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80157ee:	781b      	ldrb	r3, [r3, #0]
 80157f0:	461a      	mov	r2, r3
 80157f2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80157f6:	f000 fa72 	bl	8015cde <Osal_MemCpy>
  index_input += Char_Value_Length;
 80157fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80157fe:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8015802:	781b      	ldrb	r3, [r3, #0]
 8015804:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015808:	4413      	add	r3, r2
 801580a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801580e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015812:	2218      	movs	r2, #24
 8015814:	2100      	movs	r1, #0
 8015816:	4618      	mov	r0, r3
 8015818:	f000 fa71 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x3f;
 801581c:	233f      	movs	r3, #63	@ 0x3f
 801581e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8015822:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8015826:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801582a:	f107 0310 	add.w	r3, r7, #16
 801582e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015832:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015836:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801583a:	f107 030f 	add.w	r3, r7, #15
 801583e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015842:	2301      	movs	r3, #1
 8015844:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015848:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801584c:	2100      	movs	r1, #0
 801584e:	4618      	mov	r0, r3
 8015850:	f000 fcde 	bl	8016210 <hci_send_req>
 8015854:	4603      	mov	r3, r0
 8015856:	2b00      	cmp	r3, #0
 8015858:	da01      	bge.n	801585e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 801585a:	23ff      	movs	r3, #255	@ 0xff
 801585c:	e004      	b.n	8015868 <aci_gatt_update_char_value+0x148>
  return status;
 801585e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015862:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015866:	781b      	ldrb	r3, [r3, #0]
}
 8015868:	4618      	mov	r0, r3
 801586a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801586e:	46bd      	mov	sp, r7
 8015870:	bdb0      	pop	{r4, r5, r7, pc}

08015872 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8015872:	b580      	push	{r7, lr}
 8015874:	b0cc      	sub	sp, #304	@ 0x130
 8015876:	af00      	add	r7, sp, #0
 8015878:	4602      	mov	r2, r0
 801587a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801587e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015882:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8015884:	f107 0310 	add.w	r3, r7, #16
 8015888:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801588c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015890:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015894:	2200      	movs	r2, #0
 8015896:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015898:	2300      	movs	r3, #0
 801589a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 801589e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80158a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80158a6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80158aa:	8812      	ldrh	r2, [r2, #0]
 80158ac:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80158ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80158b2:	3302      	adds	r3, #2
 80158b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80158b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80158bc:	2218      	movs	r2, #24
 80158be:	2100      	movs	r1, #0
 80158c0:	4618      	mov	r0, r3
 80158c2:	f000 fa1c 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x3f;
 80158c6:	233f      	movs	r3, #63	@ 0x3f
 80158c8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80158cc:	f240 1325 	movw	r3, #293	@ 0x125
 80158d0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80158d4:	f107 0310 	add.w	r3, r7, #16
 80158d8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80158dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80158e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80158e4:	f107 030f 	add.w	r3, r7, #15
 80158e8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80158ec:	2301      	movs	r3, #1
 80158ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80158f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80158f6:	2100      	movs	r1, #0
 80158f8:	4618      	mov	r0, r3
 80158fa:	f000 fc89 	bl	8016210 <hci_send_req>
 80158fe:	4603      	mov	r3, r0
 8015900:	2b00      	cmp	r3, #0
 8015902:	da01      	bge.n	8015908 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8015904:	23ff      	movs	r3, #255	@ 0xff
 8015906:	e004      	b.n	8015912 <aci_gatt_confirm_indication+0xa0>
  return status;
 8015908:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801590c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015910:	781b      	ldrb	r3, [r3, #0]
}
 8015912:	4618      	mov	r0, r3
 8015914:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015918:	46bd      	mov	sp, r7
 801591a:	bd80      	pop	{r7, pc}

0801591c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b0cc      	sub	sp, #304	@ 0x130
 8015920:	af00      	add	r7, sp, #0
 8015922:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015926:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801592a:	601a      	str	r2, [r3, #0]
 801592c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015930:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015934:	4602      	mov	r2, r0
 8015936:	701a      	strb	r2, [r3, #0]
 8015938:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801593c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015940:	460a      	mov	r2, r1
 8015942:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8015944:	f107 0310 	add.w	r3, r7, #16
 8015948:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801594c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015950:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015954:	2200      	movs	r2, #0
 8015956:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015958:	2300      	movs	r3, #0
 801595a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 801595e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015962:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015966:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801596a:	7812      	ldrb	r2, [r2, #0]
 801596c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801596e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015972:	3301      	adds	r3, #1
 8015974:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8015978:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801597c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015980:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015984:	7812      	ldrb	r2, [r2, #0]
 8015986:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015988:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801598c:	3301      	adds	r3, #1
 801598e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8015992:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015996:	1c98      	adds	r0, r3, #2
 8015998:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801599c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80159a0:	781a      	ldrb	r2, [r3, #0]
 80159a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80159a6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80159aa:	6819      	ldr	r1, [r3, #0]
 80159ac:	f000 f997 	bl	8015cde <Osal_MemCpy>
  index_input += Length;
 80159b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80159b4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80159b8:	781b      	ldrb	r3, [r3, #0]
 80159ba:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80159be:	4413      	add	r3, r2
 80159c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80159c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80159c8:	2218      	movs	r2, #24
 80159ca:	2100      	movs	r1, #0
 80159cc:	4618      	mov	r0, r3
 80159ce:	f000 f996 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x3f;
 80159d2:	233f      	movs	r3, #63	@ 0x3f
 80159d4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80159d8:	230c      	movs	r3, #12
 80159da:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80159de:	f107 0310 	add.w	r3, r7, #16
 80159e2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80159e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80159ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80159ee:	f107 030f 	add.w	r3, r7, #15
 80159f2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80159f6:	2301      	movs	r3, #1
 80159f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80159fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015a00:	2100      	movs	r1, #0
 8015a02:	4618      	mov	r0, r3
 8015a04:	f000 fc04 	bl	8016210 <hci_send_req>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	da01      	bge.n	8015a12 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8015a0e:	23ff      	movs	r3, #255	@ 0xff
 8015a10:	e004      	b.n	8015a1c <aci_hal_write_config_data+0x100>
  return status;
 8015a12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a16:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015a1a:	781b      	ldrb	r3, [r3, #0]
}
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015a22:	46bd      	mov	sp, r7
 8015a24:	bd80      	pop	{r7, pc}

08015a26 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8015a26:	b580      	push	{r7, lr}
 8015a28:	b0cc      	sub	sp, #304	@ 0x130
 8015a2a:	af00      	add	r7, sp, #0
 8015a2c:	4602      	mov	r2, r0
 8015a2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a32:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015a36:	701a      	strb	r2, [r3, #0]
 8015a38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a3c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015a40:	460a      	mov	r2, r1
 8015a42:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8015a44:	f107 0310 	add.w	r3, r7, #16
 8015a48:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015a4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a50:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015a54:	2200      	movs	r2, #0
 8015a56:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015a58:	2300      	movs	r3, #0
 8015a5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8015a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015a62:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015a66:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015a6a:	7812      	ldrb	r2, [r2, #0]
 8015a6c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015a6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a72:	3301      	adds	r3, #1
 8015a74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8015a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015a7c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015a80:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015a84:	7812      	ldrb	r2, [r2, #0]
 8015a86:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015a88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a8c:	3301      	adds	r3, #1
 8015a8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015a92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015a96:	2218      	movs	r2, #24
 8015a98:	2100      	movs	r1, #0
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f000 f92f 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015aa0:	233f      	movs	r3, #63	@ 0x3f
 8015aa2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8015aa6:	230f      	movs	r3, #15
 8015aa8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015aac:	f107 0310 	add.w	r3, r7, #16
 8015ab0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ab8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015abc:	f107 030f 	add.w	r3, r7, #15
 8015ac0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015ac4:	2301      	movs	r3, #1
 8015ac6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015aca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015ace:	2100      	movs	r1, #0
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	f000 fb9d 	bl	8016210 <hci_send_req>
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	da01      	bge.n	8015ae0 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8015adc:	23ff      	movs	r3, #255	@ 0xff
 8015ade:	e004      	b.n	8015aea <aci_hal_set_tx_power_level+0xc4>
  return status;
 8015ae0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ae4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015ae8:	781b      	ldrb	r3, [r3, #0]
}
 8015aea:	4618      	mov	r0, r3
 8015aec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd80      	pop	{r7, pc}

08015af4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b0cc      	sub	sp, #304	@ 0x130
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	4602      	mov	r2, r0
 8015afc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b00:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015b04:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8015b06:	f107 0310 	add.w	r3, r7, #16
 8015b0a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015b0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b12:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015b16:	2200      	movs	r2, #0
 8015b18:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8015b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015b24:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015b28:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015b2c:	8812      	ldrh	r2, [r2, #0]
 8015b2e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015b30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b34:	3302      	adds	r3, #2
 8015b36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015b3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015b3e:	2218      	movs	r2, #24
 8015b40:	2100      	movs	r1, #0
 8015b42:	4618      	mov	r0, r3
 8015b44:	f000 f8db 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015b48:	233f      	movs	r3, #63	@ 0x3f
 8015b4a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8015b4e:	2318      	movs	r3, #24
 8015b50:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015b54:	f107 0310 	add.w	r3, r7, #16
 8015b58:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015b5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b60:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015b64:	f107 030f 	add.w	r3, r7, #15
 8015b68:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015b6c:	2301      	movs	r3, #1
 8015b6e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015b72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015b76:	2100      	movs	r1, #0
 8015b78:	4618      	mov	r0, r3
 8015b7a:	f000 fb49 	bl	8016210 <hci_send_req>
 8015b7e:	4603      	mov	r3, r0
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	da01      	bge.n	8015b88 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8015b84:	23ff      	movs	r3, #255	@ 0xff
 8015b86:	e004      	b.n	8015b92 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8015b88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b8c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015b90:	781b      	ldrb	r3, [r3, #0]
}
 8015b92:	4618      	mov	r0, r3
 8015b94:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	bd80      	pop	{r7, pc}

08015b9c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b088      	sub	sp, #32
 8015ba0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015ba6:	f107 0308 	add.w	r3, r7, #8
 8015baa:	2218      	movs	r2, #24
 8015bac:	2100      	movs	r1, #0
 8015bae:	4618      	mov	r0, r3
 8015bb0:	f000 f8a5 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x03;
 8015bb4:	2303      	movs	r3, #3
 8015bb6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8015bb8:	2303      	movs	r3, #3
 8015bba:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015bbc:	1dfb      	adds	r3, r7, #7
 8015bbe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015bc0:	2301      	movs	r3, #1
 8015bc2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015bc4:	f107 0308 	add.w	r3, r7, #8
 8015bc8:	2100      	movs	r1, #0
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f000 fb20 	bl	8016210 <hci_send_req>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	da01      	bge.n	8015bda <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8015bd6:	23ff      	movs	r3, #255	@ 0xff
 8015bd8:	e000      	b.n	8015bdc <hci_reset+0x40>
  return status;
 8015bda:	79fb      	ldrb	r3, [r7, #7]
}
 8015bdc:	4618      	mov	r0, r3
 8015bde:	3720      	adds	r7, #32
 8015be0:	46bd      	mov	sp, r7
 8015be2:	bd80      	pop	{r7, pc}

08015be4 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8015be4:	b590      	push	{r4, r7, lr}
 8015be6:	b0cd      	sub	sp, #308	@ 0x134
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	4604      	mov	r4, r0
 8015bec:	4608      	mov	r0, r1
 8015bee:	4611      	mov	r1, r2
 8015bf0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015bf4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015bf8:	4622      	mov	r2, r4
 8015bfa:	701a      	strb	r2, [r3, #0]
 8015bfc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c00:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015c04:	4602      	mov	r2, r0
 8015c06:	701a      	strb	r2, [r3, #0]
 8015c08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c0c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8015c10:	460a      	mov	r2, r1
 8015c12:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8015c14:	f107 0310 	add.w	r3, r7, #16
 8015c18:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015c1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c20:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015c24:	2200      	movs	r2, #0
 8015c26:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015c28:	2300      	movs	r3, #0
 8015c2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8015c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015c32:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015c36:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015c3a:	7812      	ldrb	r2, [r2, #0]
 8015c3c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015c3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c42:	3301      	adds	r3, #1
 8015c44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8015c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015c4c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015c50:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015c54:	7812      	ldrb	r2, [r2, #0]
 8015c56:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015c58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c5c:	3301      	adds	r3, #1
 8015c5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8015c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015c66:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015c6a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8015c6e:	7812      	ldrb	r2, [r2, #0]
 8015c70:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8015c72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c76:	3301      	adds	r3, #1
 8015c78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015c7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015c80:	2218      	movs	r2, #24
 8015c82:	2100      	movs	r1, #0
 8015c84:	4618      	mov	r0, r3
 8015c86:	f000 f83a 	bl	8015cfe <Osal_MemSet>
  rq.ogf = 0x08;
 8015c8a:	2308      	movs	r3, #8
 8015c8c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8015c90:	2331      	movs	r3, #49	@ 0x31
 8015c92:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015c96:	f107 0310 	add.w	r3, r7, #16
 8015c9a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015c9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ca2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015ca6:	f107 030f 	add.w	r3, r7, #15
 8015caa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015cae:	2301      	movs	r3, #1
 8015cb0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015cb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015cb8:	2100      	movs	r1, #0
 8015cba:	4618      	mov	r0, r3
 8015cbc:	f000 faa8 	bl	8016210 <hci_send_req>
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	da01      	bge.n	8015cca <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8015cc6:	23ff      	movs	r3, #255	@ 0xff
 8015cc8:	e004      	b.n	8015cd4 <hci_le_set_default_phy+0xf0>
  return status;
 8015cca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015cce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015cd2:	781b      	ldrb	r3, [r3, #0]
}
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	bd90      	pop	{r4, r7, pc}

08015cde <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8015cde:	b580      	push	{r7, lr}
 8015ce0:	b084      	sub	sp, #16
 8015ce2:	af00      	add	r7, sp, #0
 8015ce4:	60f8      	str	r0, [r7, #12]
 8015ce6:	60b9      	str	r1, [r7, #8]
 8015ce8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8015cea:	687a      	ldr	r2, [r7, #4]
 8015cec:	68b9      	ldr	r1, [r7, #8]
 8015cee:	68f8      	ldr	r0, [r7, #12]
 8015cf0:	f005 fc3f 	bl	801b572 <memcpy>
 8015cf4:	4603      	mov	r3, r0
}
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	3710      	adds	r7, #16
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd80      	pop	{r7, pc}

08015cfe <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8015cfe:	b580      	push	{r7, lr}
 8015d00:	b084      	sub	sp, #16
 8015d02:	af00      	add	r7, sp, #0
 8015d04:	60f8      	str	r0, [r7, #12]
 8015d06:	60b9      	str	r1, [r7, #8]
 8015d08:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8015d0a:	687a      	ldr	r2, [r7, #4]
 8015d0c:	68b9      	ldr	r1, [r7, #8]
 8015d0e:	68f8      	ldr	r0, [r7, #12]
 8015d10:	f005 fb13 	bl	801b33a <memset>
 8015d14:	4603      	mov	r3, r0
}
 8015d16:	4618      	mov	r0, r3
 8015d18:	3710      	adds	r7, #16
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bd80      	pop	{r7, pc}

08015d1e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8015d1e:	b480      	push	{r7}
 8015d20:	af00      	add	r7, sp, #0
  return;
 8015d22:	bf00      	nop
}
 8015d24:	46bd      	mov	sp, r7
 8015d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2a:	4770      	bx	lr

08015d2c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8015d2c:	b480      	push	{r7}
 8015d2e:	af00      	add	r7, sp, #0
  return;
 8015d30:	bf00      	nop
}
 8015d32:	46bd      	mov	sp, r7
 8015d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d38:	4770      	bx	lr

08015d3a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8015d3a:	b480      	push	{r7}
 8015d3c:	af00      	add	r7, sp, #0
  return;
 8015d3e:	bf00      	nop
}
 8015d40:	46bd      	mov	sp, r7
 8015d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d46:	4770      	bx	lr

08015d48 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8015d48:	b480      	push	{r7}
 8015d4a:	af00      	add	r7, sp, #0
  return;
 8015d4c:	bf00      	nop
}
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d54:	4770      	bx	lr

08015d56 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8015d56:	b480      	push	{r7}
 8015d58:	af00      	add	r7, sp, #0
  return;
 8015d5a:	bf00      	nop
}
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d62:	4770      	bx	lr

08015d64 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8015d64:	b480      	push	{r7}
 8015d66:	af00      	add	r7, sp, #0
  return;
 8015d68:	bf00      	nop
}
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d70:	4770      	bx	lr

08015d72 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8015d72:	b480      	push	{r7}
 8015d74:	af00      	add	r7, sp, #0
  return;
 8015d76:	bf00      	nop
}
 8015d78:	46bd      	mov	sp, r7
 8015d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d7e:	4770      	bx	lr

08015d80 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8015d80:	b480      	push	{r7}
 8015d82:	af00      	add	r7, sp, #0
  return;
 8015d84:	bf00      	nop
}
 8015d86:	46bd      	mov	sp, r7
 8015d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8c:	4770      	bx	lr

08015d8e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8015d8e:	b480      	push	{r7}
 8015d90:	af00      	add	r7, sp, #0
  return;
 8015d92:	bf00      	nop
}
 8015d94:	46bd      	mov	sp, r7
 8015d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d9a:	4770      	bx	lr

08015d9c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8015d9c:	b480      	push	{r7}
 8015d9e:	af00      	add	r7, sp, #0
  return;
 8015da0:	bf00      	nop
}
 8015da2:	46bd      	mov	sp, r7
 8015da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015da8:	4770      	bx	lr

08015daa <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8015daa:	b480      	push	{r7}
 8015dac:	af00      	add	r7, sp, #0
  return;
 8015dae:	bf00      	nop
}
 8015db0:	46bd      	mov	sp, r7
 8015db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db6:	4770      	bx	lr

08015db8 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8015db8:	b480      	push	{r7}
 8015dba:	af00      	add	r7, sp, #0
  return;
 8015dbc:	bf00      	nop
}
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc4:	4770      	bx	lr

08015dc6 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8015dc6:	b480      	push	{r7}
 8015dc8:	af00      	add	r7, sp, #0
  return;
 8015dca:	bf00      	nop
}
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd2:	4770      	bx	lr

08015dd4 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8015dd4:	b480      	push	{r7}
 8015dd6:	af00      	add	r7, sp, #0
  return;
 8015dd8:	bf00      	nop
}
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de0:	4770      	bx	lr

08015de2 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8015de2:	b480      	push	{r7}
 8015de4:	af00      	add	r7, sp, #0
  return;
 8015de6:	bf00      	nop
}
 8015de8:	46bd      	mov	sp, r7
 8015dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dee:	4770      	bx	lr

08015df0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8015df0:	b480      	push	{r7}
 8015df2:	af00      	add	r7, sp, #0
  return;
 8015df4:	bf00      	nop
}
 8015df6:	46bd      	mov	sp, r7
 8015df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfc:	4770      	bx	lr

08015dfe <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8015dfe:	b480      	push	{r7}
 8015e00:	af00      	add	r7, sp, #0
  return;
 8015e02:	bf00      	nop
}
 8015e04:	46bd      	mov	sp, r7
 8015e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0a:	4770      	bx	lr

08015e0c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8015e10:	4b04      	ldr	r3, [pc, #16]	@ (8015e24 <SVCCTL_Init+0x18>)
 8015e12:	2200      	movs	r2, #0
 8015e14:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8015e16:	4b04      	ldr	r3, [pc, #16]	@ (8015e28 <SVCCTL_Init+0x1c>)
 8015e18:	2200      	movs	r2, #0
 8015e1a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8015e1c:	f000 f806 	bl	8015e2c <SVCCTL_SvcInit>

  return;
 8015e20:	bf00      	nop
}
 8015e22:	bd80      	pop	{r7, pc}
 8015e24:	20000320 	.word	0x20000320
 8015e28:	20000340 	.word	0x20000340

08015e2c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8015e2c:	b580      	push	{r7, lr}
 8015e2e:	af00      	add	r7, sp, #0
  BAS_Init();
 8015e30:	f7ff ff75 	bl	8015d1e <BAS_Init>

  BLS_Init();
 8015e34:	f7ff ff7a 	bl	8015d2c <BLS_Init>

  CRS_STM_Init();
 8015e38:	f7ff ff7f 	bl	8015d3a <CRS_STM_Init>

  DIS_Init();
 8015e3c:	f7ff ff84 	bl	8015d48 <DIS_Init>

  EDS_STM_Init();
 8015e40:	f7ff ff89 	bl	8015d56 <EDS_STM_Init>

  HIDS_Init();
 8015e44:	f7ff ff8e 	bl	8015d64 <HIDS_Init>

  HRS_Init();
 8015e48:	f7ff ff93 	bl	8015d72 <HRS_Init>

  HTS_Init();
 8015e4c:	f7ff ff98 	bl	8015d80 <HTS_Init>

  IAS_Init();
 8015e50:	f7ff ff9d 	bl	8015d8e <IAS_Init>

  LLS_Init();
 8015e54:	f7ff ffa2 	bl	8015d9c <LLS_Init>

  TPS_Init();
 8015e58:	f7ff ffa7 	bl	8015daa <TPS_Init>

  MOTENV_STM_Init();
 8015e5c:	f7ff ffac 	bl	8015db8 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8015e60:	f7ff ffb1 	bl	8015dc6 <P2PS_STM_Init>

  ZDD_STM_Init();
 8015e64:	f7ff ffb6 	bl	8015dd4 <ZDD_STM_Init>

  OTAS_STM_Init();
 8015e68:	f7ff ffbb 	bl	8015de2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8015e6c:	f7ff ffc7 	bl	8015dfe <BVOPUS_STM_Init>

  MESH_Init();
 8015e70:	f7ff ffbe 	bl	8015df0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8015e74:	f002 f844 	bl	8017f00 <SVCCTL_InitCustomSvc>
  
  return;
 8015e78:	bf00      	nop
}
 8015e7a:	bd80      	pop	{r7, pc}

08015e7c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8015e7c:	b480      	push	{r7}
 8015e7e:	b083      	sub	sp, #12
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8015e84:	4b09      	ldr	r3, [pc, #36]	@ (8015eac <SVCCTL_RegisterSvcHandler+0x30>)
 8015e86:	7f1b      	ldrb	r3, [r3, #28]
 8015e88:	4619      	mov	r1, r3
 8015e8a:	4a08      	ldr	r2, [pc, #32]	@ (8015eac <SVCCTL_RegisterSvcHandler+0x30>)
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8015e92:	4b06      	ldr	r3, [pc, #24]	@ (8015eac <SVCCTL_RegisterSvcHandler+0x30>)
 8015e94:	7f1b      	ldrb	r3, [r3, #28]
 8015e96:	3301      	adds	r3, #1
 8015e98:	b2da      	uxtb	r2, r3
 8015e9a:	4b04      	ldr	r3, [pc, #16]	@ (8015eac <SVCCTL_RegisterSvcHandler+0x30>)
 8015e9c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8015e9e:	bf00      	nop
}
 8015ea0:	370c      	adds	r7, #12
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea8:	4770      	bx	lr
 8015eaa:	bf00      	nop
 8015eac:	20000320 	.word	0x20000320

08015eb0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b086      	sub	sp, #24
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	3301      	adds	r3, #1
 8015ebc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8015ec2:	693b      	ldr	r3, [r7, #16]
 8015ec4:	781b      	ldrb	r3, [r3, #0]
 8015ec6:	2bff      	cmp	r3, #255	@ 0xff
 8015ec8:	d125      	bne.n	8015f16 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8015eca:	693b      	ldr	r3, [r7, #16]
 8015ecc:	3302      	adds	r3, #2
 8015ece:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	881b      	ldrh	r3, [r3, #0]
 8015ed4:	b29b      	uxth	r3, r3
 8015ed6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015eda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8015ede:	d118      	bne.n	8015f12 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	757b      	strb	r3, [r7, #21]
 8015ee4:	e00d      	b.n	8015f02 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8015ee6:	7d7b      	ldrb	r3, [r7, #21]
 8015ee8:	4a1a      	ldr	r2, [pc, #104]	@ (8015f54 <SVCCTL_UserEvtRx+0xa4>)
 8015eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	4798      	blx	r3
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8015ef6:	7dfb      	ldrb	r3, [r7, #23]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d108      	bne.n	8015f0e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8015efc:	7d7b      	ldrb	r3, [r7, #21]
 8015efe:	3301      	adds	r3, #1
 8015f00:	757b      	strb	r3, [r7, #21]
 8015f02:	4b14      	ldr	r3, [pc, #80]	@ (8015f54 <SVCCTL_UserEvtRx+0xa4>)
 8015f04:	7f1b      	ldrb	r3, [r3, #28]
 8015f06:	7d7a      	ldrb	r2, [r7, #21]
 8015f08:	429a      	cmp	r2, r3
 8015f0a:	d3ec      	bcc.n	8015ee6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8015f0c:	e002      	b.n	8015f14 <SVCCTL_UserEvtRx+0x64>
              break;
 8015f0e:	bf00      	nop
          break;
 8015f10:	e000      	b.n	8015f14 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8015f12:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8015f14:	e000      	b.n	8015f18 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8015f16:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8015f18:	7dfb      	ldrb	r3, [r7, #23]
 8015f1a:	2b02      	cmp	r3, #2
 8015f1c:	d00f      	beq.n	8015f3e <SVCCTL_UserEvtRx+0x8e>
 8015f1e:	2b02      	cmp	r3, #2
 8015f20:	dc10      	bgt.n	8015f44 <SVCCTL_UserEvtRx+0x94>
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d002      	beq.n	8015f2c <SVCCTL_UserEvtRx+0x7c>
 8015f26:	2b01      	cmp	r3, #1
 8015f28:	d006      	beq.n	8015f38 <SVCCTL_UserEvtRx+0x88>
 8015f2a:	e00b      	b.n	8015f44 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	f001 fc7f 	bl	8017830 <SVCCTL_App_Notification>
 8015f32:	4603      	mov	r3, r0
 8015f34:	75bb      	strb	r3, [r7, #22]
      break;
 8015f36:	e008      	b.n	8015f4a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8015f38:	2301      	movs	r3, #1
 8015f3a:	75bb      	strb	r3, [r7, #22]
      break;
 8015f3c:	e005      	b.n	8015f4a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8015f3e:	2300      	movs	r3, #0
 8015f40:	75bb      	strb	r3, [r7, #22]
      break;
 8015f42:	e002      	b.n	8015f4a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8015f44:	2301      	movs	r3, #1
 8015f46:	75bb      	strb	r3, [r7, #22]
      break;
 8015f48:	bf00      	nop
  }

  return (return_status);
 8015f4a:	7dbb      	ldrb	r3, [r7, #22]
}
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	3718      	adds	r7, #24
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}
 8015f54:	20000320 	.word	0x20000320

08015f58 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b088      	sub	sp, #32
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015f60:	f107 030c 	add.w	r3, r7, #12
 8015f64:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8015f6c:	69fb      	ldr	r3, [r7, #28]
 8015f6e:	212e      	movs	r1, #46	@ 0x2e
 8015f70:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8015f74:	f000 fae8 	bl	8016548 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015f78:	69fb      	ldr	r3, [r7, #28]
 8015f7a:	330b      	adds	r3, #11
 8015f7c:	78db      	ldrb	r3, [r3, #3]
}
 8015f7e:	4618      	mov	r0, r3
 8015f80:	3720      	adds	r7, #32
 8015f82:	46bd      	mov	sp, r7
 8015f84:	bd80      	pop	{r7, pc}

08015f86 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8015f86:	b580      	push	{r7, lr}
 8015f88:	b088      	sub	sp, #32
 8015f8a:	af00      	add	r7, sp, #0
 8015f8c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015f8e:	f107 030c 	add.w	r3, r7, #12
 8015f92:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8015f9a:	69fb      	ldr	r3, [r7, #28]
 8015f9c:	210f      	movs	r1, #15
 8015f9e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8015fa2:	f000 fad1 	bl	8016548 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015fa6:	69fb      	ldr	r3, [r7, #28]
 8015fa8:	330b      	adds	r3, #11
 8015faa:	78db      	ldrb	r3, [r3, #3]
}
 8015fac:	4618      	mov	r0, r3
 8015fae:	3720      	adds	r7, #32
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	bd80      	pop	{r7, pc}

08015fb4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b088      	sub	sp, #32
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015fbc:	f107 030c 	add.w	r3, r7, #12
 8015fc0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8015fc2:	69fb      	ldr	r3, [r7, #28]
 8015fc4:	687a      	ldr	r2, [r7, #4]
 8015fc6:	2110      	movs	r1, #16
 8015fc8:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8015fcc:	f000 fabc 	bl	8016548 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015fd0:	69fb      	ldr	r3, [r7, #28]
 8015fd2:	330b      	adds	r3, #11
 8015fd4:	78db      	ldrb	r3, [r3, #3]
}
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	3720      	adds	r7, #32
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd80      	pop	{r7, pc}
	...

08015fe0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8015fe0:	b480      	push	{r7}
 8015fe2:	b08b      	sub	sp, #44	@ 0x2c
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8015fe8:	2300      	movs	r3, #0
 8015fea:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8015fec:	2300      	movs	r3, #0
 8015fee:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8016000:	2300      	movs	r3, #0
 8016002:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8016004:	2300      	movs	r3, #0
 8016006:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8016008:	4b4a      	ldr	r3, [pc, #296]	@ (8016134 <SHCI_GetWirelessFwInfo+0x154>)
 801600a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801600c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016010:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	009b      	lsls	r3, r3, #2
 8016016:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 801601a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8016022:	68bb      	ldr	r3, [r7, #8]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	4a44      	ldr	r2, [pc, #272]	@ (8016138 <SHCI_GetWirelessFwInfo+0x158>)
 8016028:	4293      	cmp	r3, r2
 801602a:	d10f      	bne.n	801604c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 801602c:	68bb      	ldr	r3, [r7, #8]
 801602e:	695b      	ldr	r3, [r3, #20]
 8016030:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8016032:	68bb      	ldr	r3, [r7, #8]
 8016034:	699b      	ldr	r3, [r3, #24]
 8016036:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8016038:	68bb      	ldr	r3, [r7, #8]
 801603a:	69db      	ldr	r3, [r3, #28]
 801603c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 801603e:	68bb      	ldr	r3, [r7, #8]
 8016040:	68db      	ldr	r3, [r3, #12]
 8016042:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8016044:	68bb      	ldr	r3, [r7, #8]
 8016046:	691b      	ldr	r3, [r3, #16]
 8016048:	617b      	str	r3, [r7, #20]
 801604a:	e01a      	b.n	8016082 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 801604c:	693b      	ldr	r3, [r7, #16]
 801604e:	009b      	lsls	r3, r3, #2
 8016050:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8016054:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8016058:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	691b      	ldr	r3, [r3, #16]
 8016060:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	695b      	ldr	r3, [r3, #20]
 8016068:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	699b      	ldr	r3, [r3, #24]
 8016070:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	685b      	ldr	r3, [r3, #4]
 8016078:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	689b      	ldr	r3, [r3, #8]
 8016080:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8016082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016084:	0e1b      	lsrs	r3, r3, #24
 8016086:	b2da      	uxtb	r2, r3
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801608c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801608e:	0c1b      	lsrs	r3, r3, #16
 8016090:	b2da      	uxtb	r2, r3
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8016096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016098:	0a1b      	lsrs	r3, r3, #8
 801609a:	b2da      	uxtb	r2, r3
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80160a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160a2:	091b      	lsrs	r3, r3, #4
 80160a4:	b2db      	uxtb	r3, r3
 80160a6:	f003 030f 	and.w	r3, r3, #15
 80160aa:	b2da      	uxtb	r2, r3
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80160b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160b2:	b2db      	uxtb	r3, r3
 80160b4:	f003 030f 	and.w	r3, r3, #15
 80160b8:	b2da      	uxtb	r2, r3
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80160be:	6a3b      	ldr	r3, [r7, #32]
 80160c0:	0e1b      	lsrs	r3, r3, #24
 80160c2:	b2da      	uxtb	r2, r3
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80160c8:	6a3b      	ldr	r3, [r7, #32]
 80160ca:	0c1b      	lsrs	r3, r3, #16
 80160cc:	b2da      	uxtb	r2, r3
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80160d2:	6a3b      	ldr	r3, [r7, #32]
 80160d4:	0a1b      	lsrs	r3, r3, #8
 80160d6:	b2da      	uxtb	r2, r3
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80160dc:	6a3b      	ldr	r3, [r7, #32]
 80160de:	b2da      	uxtb	r2, r3
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80160e4:	69fb      	ldr	r3, [r7, #28]
 80160e6:	b2da      	uxtb	r2, r3
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80160ec:	69bb      	ldr	r3, [r7, #24]
 80160ee:	0e1b      	lsrs	r3, r3, #24
 80160f0:	b2da      	uxtb	r2, r3
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80160f6:	69bb      	ldr	r3, [r7, #24]
 80160f8:	0c1b      	lsrs	r3, r3, #16
 80160fa:	b2da      	uxtb	r2, r3
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8016100:	69bb      	ldr	r3, [r7, #24]
 8016102:	0a1b      	lsrs	r3, r3, #8
 8016104:	b2da      	uxtb	r2, r3
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801610a:	697b      	ldr	r3, [r7, #20]
 801610c:	0e1b      	lsrs	r3, r3, #24
 801610e:	b2da      	uxtb	r2, r3
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8016114:	697b      	ldr	r3, [r7, #20]
 8016116:	0c1b      	lsrs	r3, r3, #16
 8016118:	b2da      	uxtb	r2, r3
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801611e:	697b      	ldr	r3, [r7, #20]
 8016120:	b2da      	uxtb	r2, r3
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8016126:	2300      	movs	r3, #0
}
 8016128:	4618      	mov	r0, r3
 801612a:	372c      	adds	r7, #44	@ 0x2c
 801612c:	46bd      	mov	sp, r7
 801612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016132:	4770      	bx	lr
 8016134:	58004000 	.word	0x58004000
 8016138:	a94656b9 	.word	0xa94656b9

0801613c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 801613c:	b580      	push	{r7, lr}
 801613e:	b082      	sub	sp, #8
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
 8016144:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8016146:	683b      	ldr	r3, [r7, #0]
 8016148:	685b      	ldr	r3, [r3, #4]
 801614a:	4a08      	ldr	r2, [pc, #32]	@ (801616c <hci_init+0x30>)
 801614c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 801614e:	4a08      	ldr	r2, [pc, #32]	@ (8016170 <hci_init+0x34>)
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8016154:	4806      	ldr	r0, [pc, #24]	@ (8016170 <hci_init+0x34>)
 8016156:	f000 f979 	bl	801644c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801615a:	683b      	ldr	r3, [r7, #0]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	4618      	mov	r0, r3
 8016160:	f000 f8da 	bl	8016318 <TlInit>

  return;
 8016164:	bf00      	nop
}
 8016166:	3708      	adds	r7, #8
 8016168:	46bd      	mov	sp, r7
 801616a:	bd80      	pop	{r7, pc}
 801616c:	20001488 	.word	0x20001488
 8016170:	20001460 	.word	0x20001460

08016174 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8016174:	b580      	push	{r7, lr}
 8016176:	b084      	sub	sp, #16
 8016178:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801617a:	4822      	ldr	r0, [pc, #136]	@ (8016204 <hci_user_evt_proc+0x90>)
 801617c:	f000 fd32 	bl	8016be4 <LST_is_empty>
 8016180:	4603      	mov	r3, r0
 8016182:	2b00      	cmp	r3, #0
 8016184:	d12b      	bne.n	80161de <hci_user_evt_proc+0x6a>
 8016186:	4b20      	ldr	r3, [pc, #128]	@ (8016208 <hci_user_evt_proc+0x94>)
 8016188:	781b      	ldrb	r3, [r3, #0]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d027      	beq.n	80161de <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801618e:	f107 030c 	add.w	r3, r7, #12
 8016192:	4619      	mov	r1, r3
 8016194:	481b      	ldr	r0, [pc, #108]	@ (8016204 <hci_user_evt_proc+0x90>)
 8016196:	f000 fdb4 	bl	8016d02 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801619a:	4b1c      	ldr	r3, [pc, #112]	@ (801620c <hci_user_evt_proc+0x98>)
 801619c:	69db      	ldr	r3, [r3, #28]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d00c      	beq.n	80161bc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80161a6:	2301      	movs	r3, #1
 80161a8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80161aa:	4b18      	ldr	r3, [pc, #96]	@ (801620c <hci_user_evt_proc+0x98>)
 80161ac:	69db      	ldr	r3, [r3, #28]
 80161ae:	1d3a      	adds	r2, r7, #4
 80161b0:	4610      	mov	r0, r2
 80161b2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80161b4:	793a      	ldrb	r2, [r7, #4]
 80161b6:	4b14      	ldr	r3, [pc, #80]	@ (8016208 <hci_user_evt_proc+0x94>)
 80161b8:	701a      	strb	r2, [r3, #0]
 80161ba:	e002      	b.n	80161c2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80161bc:	4b12      	ldr	r3, [pc, #72]	@ (8016208 <hci_user_evt_proc+0x94>)
 80161be:	2201      	movs	r2, #1
 80161c0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80161c2:	4b11      	ldr	r3, [pc, #68]	@ (8016208 <hci_user_evt_proc+0x94>)
 80161c4:	781b      	ldrb	r3, [r3, #0]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d004      	beq.n	80161d4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	4618      	mov	r0, r3
 80161ce:	f000 fc0d 	bl	80169ec <TL_MM_EvtDone>
 80161d2:	e004      	b.n	80161de <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	4619      	mov	r1, r3
 80161d8:	480a      	ldr	r0, [pc, #40]	@ (8016204 <hci_user_evt_proc+0x90>)
 80161da:	f000 fd25 	bl	8016c28 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80161de:	4809      	ldr	r0, [pc, #36]	@ (8016204 <hci_user_evt_proc+0x90>)
 80161e0:	f000 fd00 	bl	8016be4 <LST_is_empty>
 80161e4:	4603      	mov	r3, r0
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d107      	bne.n	80161fa <hci_user_evt_proc+0x86>
 80161ea:	4b07      	ldr	r3, [pc, #28]	@ (8016208 <hci_user_evt_proc+0x94>)
 80161ec:	781b      	ldrb	r3, [r3, #0]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d003      	beq.n	80161fa <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80161f2:	4804      	ldr	r0, [pc, #16]	@ (8016204 <hci_user_evt_proc+0x90>)
 80161f4:	f001 fd50 	bl	8017c98 <hci_notify_asynch_evt>
  }


  return;
 80161f8:	bf00      	nop
 80161fa:	bf00      	nop
}
 80161fc:	3710      	adds	r7, #16
 80161fe:	46bd      	mov	sp, r7
 8016200:	bd80      	pop	{r7, pc}
 8016202:	bf00      	nop
 8016204:	20000348 	.word	0x20000348
 8016208:	20000354 	.word	0x20000354
 801620c:	20001460 	.word	0x20001460

08016210 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8016210:	b580      	push	{r7, lr}
 8016212:	b088      	sub	sp, #32
 8016214:	af00      	add	r7, sp, #0
 8016216:	6078      	str	r0, [r7, #4]
 8016218:	460b      	mov	r3, r1
 801621a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 801621c:	2000      	movs	r0, #0
 801621e:	f000 f8d1 	bl	80163c4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8016222:	2300      	movs	r3, #0
 8016224:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	885b      	ldrh	r3, [r3, #2]
 801622a:	b21b      	sxth	r3, r3
 801622c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016230:	b21a      	sxth	r2, r3
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	881b      	ldrh	r3, [r3, #0]
 8016236:	029b      	lsls	r3, r3, #10
 8016238:	b21b      	sxth	r3, r3
 801623a:	4313      	orrs	r3, r2
 801623c:	b21b      	sxth	r3, r3
 801623e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8016240:	4b33      	ldr	r3, [pc, #204]	@ (8016310 <hci_send_req+0x100>)
 8016242:	2201      	movs	r2, #1
 8016244:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	68db      	ldr	r3, [r3, #12]
 801624a:	b2d9      	uxtb	r1, r3
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	689a      	ldr	r2, [r3, #8]
 8016250:	8bbb      	ldrh	r3, [r7, #28]
 8016252:	4618      	mov	r0, r3
 8016254:	f000 f890 	bl	8016378 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8016258:	e04e      	b.n	80162f8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 801625a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 801625e:	f001 fd32 	bl	8017cc6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8016262:	e043      	b.n	80162ec <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8016264:	f107 030c 	add.w	r3, r7, #12
 8016268:	4619      	mov	r1, r3
 801626a:	482a      	ldr	r0, [pc, #168]	@ (8016314 <hci_send_req+0x104>)
 801626c:	f000 fd49 	bl	8016d02 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	7a5b      	ldrb	r3, [r3, #9]
 8016274:	2b0f      	cmp	r3, #15
 8016276:	d114      	bne.n	80162a2 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	330b      	adds	r3, #11
 801627c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 801627e:	693b      	ldr	r3, [r7, #16]
 8016280:	885b      	ldrh	r3, [r3, #2]
 8016282:	b29b      	uxth	r3, r3
 8016284:	8bba      	ldrh	r2, [r7, #28]
 8016286:	429a      	cmp	r2, r3
 8016288:	d104      	bne.n	8016294 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	691b      	ldr	r3, [r3, #16]
 801628e:	693a      	ldr	r2, [r7, #16]
 8016290:	7812      	ldrb	r2, [r2, #0]
 8016292:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8016294:	693b      	ldr	r3, [r7, #16]
 8016296:	785b      	ldrb	r3, [r3, #1]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d027      	beq.n	80162ec <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801629c:	2301      	movs	r3, #1
 801629e:	77fb      	strb	r3, [r7, #31]
 80162a0:	e024      	b.n	80162ec <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	330b      	adds	r3, #11
 80162a6:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80162a8:	69bb      	ldr	r3, [r7, #24]
 80162aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80162ae:	b29b      	uxth	r3, r3
 80162b0:	8bba      	ldrh	r2, [r7, #28]
 80162b2:	429a      	cmp	r2, r3
 80162b4:	d114      	bne.n	80162e0 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	7a9b      	ldrb	r3, [r3, #10]
 80162ba:	3b03      	subs	r3, #3
 80162bc:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	695a      	ldr	r2, [r3, #20]
 80162c2:	7dfb      	ldrb	r3, [r7, #23]
 80162c4:	429a      	cmp	r2, r3
 80162c6:	bfa8      	it	ge
 80162c8:	461a      	movge	r2, r3
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	6918      	ldr	r0, [r3, #16]
 80162d2:	69bb      	ldr	r3, [r7, #24]
 80162d4:	1cd9      	adds	r1, r3, #3
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	695b      	ldr	r3, [r3, #20]
 80162da:	461a      	mov	r2, r3
 80162dc:	f005 f949 	bl	801b572 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80162e0:	69bb      	ldr	r3, [r7, #24]
 80162e2:	781b      	ldrb	r3, [r3, #0]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d001      	beq.n	80162ec <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80162e8:	2301      	movs	r3, #1
 80162ea:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80162ec:	4809      	ldr	r0, [pc, #36]	@ (8016314 <hci_send_req+0x104>)
 80162ee:	f000 fc79 	bl	8016be4 <LST_is_empty>
 80162f2:	4603      	mov	r3, r0
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d0b5      	beq.n	8016264 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80162f8:	7ffb      	ldrb	r3, [r7, #31]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d0ad      	beq.n	801625a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80162fe:	2001      	movs	r0, #1
 8016300:	f000 f860 	bl	80163c4 <NotifyCmdStatus>

  return 0;
 8016304:	2300      	movs	r3, #0
}
 8016306:	4618      	mov	r0, r3
 8016308:	3720      	adds	r7, #32
 801630a:	46bd      	mov	sp, r7
 801630c:	bd80      	pop	{r7, pc}
 801630e:	bf00      	nop
 8016310:	2000148c 	.word	0x2000148c
 8016314:	20001480 	.word	0x20001480

08016318 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b086      	sub	sp, #24
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8016320:	480f      	ldr	r0, [pc, #60]	@ (8016360 <TlInit+0x48>)
 8016322:	f000 fc4f 	bl	8016bc4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8016326:	4a0f      	ldr	r2, [pc, #60]	@ (8016364 <TlInit+0x4c>)
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 801632c:	480e      	ldr	r0, [pc, #56]	@ (8016368 <TlInit+0x50>)
 801632e:	f000 fc49 	bl	8016bc4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8016332:	4b0e      	ldr	r3, [pc, #56]	@ (801636c <TlInit+0x54>)
 8016334:	2201      	movs	r2, #1
 8016336:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8016338:	4b0d      	ldr	r3, [pc, #52]	@ (8016370 <TlInit+0x58>)
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d00a      	beq.n	8016356 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8016344:	4b0b      	ldr	r3, [pc, #44]	@ (8016374 <TlInit+0x5c>)
 8016346:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8016348:	4b09      	ldr	r3, [pc, #36]	@ (8016370 <TlInit+0x58>)
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	f107 0208 	add.w	r2, r7, #8
 8016350:	4610      	mov	r0, r2
 8016352:	4798      	blx	r3
  }

  return;
 8016354:	bf00      	nop
 8016356:	bf00      	nop
}
 8016358:	3718      	adds	r7, #24
 801635a:	46bd      	mov	sp, r7
 801635c:	bd80      	pop	{r7, pc}
 801635e:	bf00      	nop
 8016360:	20001480 	.word	0x20001480
 8016364:	20000350 	.word	0x20000350
 8016368:	20000348 	.word	0x20000348
 801636c:	20000354 	.word	0x20000354
 8016370:	20001460 	.word	0x20001460
 8016374:	08016405 	.word	0x08016405

08016378 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8016378:	b580      	push	{r7, lr}
 801637a:	b082      	sub	sp, #8
 801637c:	af00      	add	r7, sp, #0
 801637e:	4603      	mov	r3, r0
 8016380:	603a      	str	r2, [r7, #0]
 8016382:	80fb      	strh	r3, [r7, #6]
 8016384:	460b      	mov	r3, r1
 8016386:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8016388:	4b0c      	ldr	r3, [pc, #48]	@ (80163bc <SendCmd+0x44>)
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	88fa      	ldrh	r2, [r7, #6]
 801638e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8016392:	4b0a      	ldr	r3, [pc, #40]	@ (80163bc <SendCmd+0x44>)
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	797a      	ldrb	r2, [r7, #5]
 8016398:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 801639a:	4b08      	ldr	r3, [pc, #32]	@ (80163bc <SendCmd+0x44>)
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	330c      	adds	r3, #12
 80163a0:	797a      	ldrb	r2, [r7, #5]
 80163a2:	6839      	ldr	r1, [r7, #0]
 80163a4:	4618      	mov	r0, r3
 80163a6:	f005 f8e4 	bl	801b572 <memcpy>

  hciContext.io.Send(0,0);
 80163aa:	4b05      	ldr	r3, [pc, #20]	@ (80163c0 <SendCmd+0x48>)
 80163ac:	691b      	ldr	r3, [r3, #16]
 80163ae:	2100      	movs	r1, #0
 80163b0:	2000      	movs	r0, #0
 80163b2:	4798      	blx	r3

  return;
 80163b4:	bf00      	nop
}
 80163b6:	3708      	adds	r7, #8
 80163b8:	46bd      	mov	sp, r7
 80163ba:	bd80      	pop	{r7, pc}
 80163bc:	20000350 	.word	0x20000350
 80163c0:	20001460 	.word	0x20001460

080163c4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b082      	sub	sp, #8
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	4603      	mov	r3, r0
 80163cc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80163ce:	79fb      	ldrb	r3, [r7, #7]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d108      	bne.n	80163e6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80163d4:	4b0a      	ldr	r3, [pc, #40]	@ (8016400 <NotifyCmdStatus+0x3c>)
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d00d      	beq.n	80163f8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80163dc:	4b08      	ldr	r3, [pc, #32]	@ (8016400 <NotifyCmdStatus+0x3c>)
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	2000      	movs	r0, #0
 80163e2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80163e4:	e008      	b.n	80163f8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80163e6:	4b06      	ldr	r3, [pc, #24]	@ (8016400 <NotifyCmdStatus+0x3c>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d004      	beq.n	80163f8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80163ee:	4b04      	ldr	r3, [pc, #16]	@ (8016400 <NotifyCmdStatus+0x3c>)
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	2001      	movs	r0, #1
 80163f4:	4798      	blx	r3
  return;
 80163f6:	bf00      	nop
 80163f8:	bf00      	nop
}
 80163fa:	3708      	adds	r7, #8
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}
 8016400:	20001488 	.word	0x20001488

08016404 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b082      	sub	sp, #8
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	7a5b      	ldrb	r3, [r3, #9]
 8016410:	2b0f      	cmp	r3, #15
 8016412:	d003      	beq.n	801641c <TlEvtReceived+0x18>
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	7a5b      	ldrb	r3, [r3, #9]
 8016418:	2b0e      	cmp	r3, #14
 801641a:	d107      	bne.n	801642c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 801641c:	6879      	ldr	r1, [r7, #4]
 801641e:	4809      	ldr	r0, [pc, #36]	@ (8016444 <TlEvtReceived+0x40>)
 8016420:	f000 fc28 	bl	8016c74 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8016424:	2000      	movs	r0, #0
 8016426:	f001 fc43 	bl	8017cb0 <hci_cmd_resp_release>
 801642a:	e006      	b.n	801643a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 801642c:	6879      	ldr	r1, [r7, #4]
 801642e:	4806      	ldr	r0, [pc, #24]	@ (8016448 <TlEvtReceived+0x44>)
 8016430:	f000 fc20 	bl	8016c74 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8016434:	4804      	ldr	r0, [pc, #16]	@ (8016448 <TlEvtReceived+0x44>)
 8016436:	f001 fc2f 	bl	8017c98 <hci_notify_asynch_evt>
  }

  return;
 801643a:	bf00      	nop
}
 801643c:	3708      	adds	r7, #8
 801643e:	46bd      	mov	sp, r7
 8016440:	bd80      	pop	{r7, pc}
 8016442:	bf00      	nop
 8016444:	20001480 	.word	0x20001480
 8016448:	20000348 	.word	0x20000348

0801644c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 801644c:	b480      	push	{r7}
 801644e:	b083      	sub	sp, #12
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	4a05      	ldr	r2, [pc, #20]	@ (801646c <hci_register_io_bus+0x20>)
 8016458:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	4a04      	ldr	r2, [pc, #16]	@ (8016470 <hci_register_io_bus+0x24>)
 801645e:	611a      	str	r2, [r3, #16]

  return;
 8016460:	bf00      	nop
}
 8016462:	370c      	adds	r7, #12
 8016464:	46bd      	mov	sp, r7
 8016466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801646a:	4770      	bx	lr
 801646c:	08016765 	.word	0x08016765
 8016470:	080167cd 	.word	0x080167cd

08016474 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b082      	sub	sp, #8
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
 801647c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801647e:	683b      	ldr	r3, [r7, #0]
 8016480:	685b      	ldr	r3, [r3, #4]
 8016482:	4a08      	ldr	r2, [pc, #32]	@ (80164a4 <shci_init+0x30>)
 8016484:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8016486:	4a08      	ldr	r2, [pc, #32]	@ (80164a8 <shci_init+0x34>)
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 801648c:	4806      	ldr	r0, [pc, #24]	@ (80164a8 <shci_init+0x34>)
 801648e:	f000 f915 	bl	80166bc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8016492:	683b      	ldr	r3, [r7, #0]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	4618      	mov	r0, r3
 8016498:	f000 f898 	bl	80165cc <TlInit>

  return;
 801649c:	bf00      	nop
}
 801649e:	3708      	adds	r7, #8
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}
 80164a4:	200014b0 	.word	0x200014b0
 80164a8:	20001490 	.word	0x20001490

080164ac <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b084      	sub	sp, #16
 80164b0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80164b2:	4822      	ldr	r0, [pc, #136]	@ (801653c <shci_user_evt_proc+0x90>)
 80164b4:	f000 fb96 	bl	8016be4 <LST_is_empty>
 80164b8:	4603      	mov	r3, r0
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d12b      	bne.n	8016516 <shci_user_evt_proc+0x6a>
 80164be:	4b20      	ldr	r3, [pc, #128]	@ (8016540 <shci_user_evt_proc+0x94>)
 80164c0:	781b      	ldrb	r3, [r3, #0]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d027      	beq.n	8016516 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80164c6:	f107 030c 	add.w	r3, r7, #12
 80164ca:	4619      	mov	r1, r3
 80164cc:	481b      	ldr	r0, [pc, #108]	@ (801653c <shci_user_evt_proc+0x90>)
 80164ce:	f000 fc18 	bl	8016d02 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80164d2:	4b1c      	ldr	r3, [pc, #112]	@ (8016544 <shci_user_evt_proc+0x98>)
 80164d4:	69db      	ldr	r3, [r3, #28]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d00c      	beq.n	80164f4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80164de:	2301      	movs	r3, #1
 80164e0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80164e2:	4b18      	ldr	r3, [pc, #96]	@ (8016544 <shci_user_evt_proc+0x98>)
 80164e4:	69db      	ldr	r3, [r3, #28]
 80164e6:	1d3a      	adds	r2, r7, #4
 80164e8:	4610      	mov	r0, r2
 80164ea:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80164ec:	793a      	ldrb	r2, [r7, #4]
 80164ee:	4b14      	ldr	r3, [pc, #80]	@ (8016540 <shci_user_evt_proc+0x94>)
 80164f0:	701a      	strb	r2, [r3, #0]
 80164f2:	e002      	b.n	80164fa <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80164f4:	4b12      	ldr	r3, [pc, #72]	@ (8016540 <shci_user_evt_proc+0x94>)
 80164f6:	2201      	movs	r2, #1
 80164f8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80164fa:	4b11      	ldr	r3, [pc, #68]	@ (8016540 <shci_user_evt_proc+0x94>)
 80164fc:	781b      	ldrb	r3, [r3, #0]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d004      	beq.n	801650c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	4618      	mov	r0, r3
 8016506:	f000 fa71 	bl	80169ec <TL_MM_EvtDone>
 801650a:	e004      	b.n	8016516 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	4619      	mov	r1, r3
 8016510:	480a      	ldr	r0, [pc, #40]	@ (801653c <shci_user_evt_proc+0x90>)
 8016512:	f000 fb89 	bl	8016c28 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8016516:	4809      	ldr	r0, [pc, #36]	@ (801653c <shci_user_evt_proc+0x90>)
 8016518:	f000 fb64 	bl	8016be4 <LST_is_empty>
 801651c:	4603      	mov	r3, r0
 801651e:	2b00      	cmp	r3, #0
 8016520:	d107      	bne.n	8016532 <shci_user_evt_proc+0x86>
 8016522:	4b07      	ldr	r3, [pc, #28]	@ (8016540 <shci_user_evt_proc+0x94>)
 8016524:	781b      	ldrb	r3, [r3, #0]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d003      	beq.n	8016532 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 801652a:	4804      	ldr	r0, [pc, #16]	@ (801653c <shci_user_evt_proc+0x90>)
 801652c:	f7eb f940 	bl	80017b0 <shci_notify_asynch_evt>
  }


  return;
 8016530:	bf00      	nop
 8016532:	bf00      	nop
}
 8016534:	3710      	adds	r7, #16
 8016536:	46bd      	mov	sp, r7
 8016538:	bd80      	pop	{r7, pc}
 801653a:	bf00      	nop
 801653c:	20000358 	.word	0x20000358
 8016540:	20000368 	.word	0x20000368
 8016544:	20001490 	.word	0x20001490

08016548 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b084      	sub	sp, #16
 801654c:	af00      	add	r7, sp, #0
 801654e:	60ba      	str	r2, [r7, #8]
 8016550:	607b      	str	r3, [r7, #4]
 8016552:	4603      	mov	r3, r0
 8016554:	81fb      	strh	r3, [r7, #14]
 8016556:	460b      	mov	r3, r1
 8016558:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 801655a:	2000      	movs	r0, #0
 801655c:	f000 f868 	bl	8016630 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8016560:	4b17      	ldr	r3, [pc, #92]	@ (80165c0 <shci_send+0x78>)
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	89fa      	ldrh	r2, [r7, #14]
 8016566:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 801656a:	4b15      	ldr	r3, [pc, #84]	@ (80165c0 <shci_send+0x78>)
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	7b7a      	ldrb	r2, [r7, #13]
 8016570:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8016572:	4b13      	ldr	r3, [pc, #76]	@ (80165c0 <shci_send+0x78>)
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	330c      	adds	r3, #12
 8016578:	7b7a      	ldrb	r2, [r7, #13]
 801657a:	68b9      	ldr	r1, [r7, #8]
 801657c:	4618      	mov	r0, r3
 801657e:	f004 fff8 	bl	801b572 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8016582:	4b10      	ldr	r3, [pc, #64]	@ (80165c4 <shci_send+0x7c>)
 8016584:	2201      	movs	r2, #1
 8016586:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8016588:	4b0f      	ldr	r3, [pc, #60]	@ (80165c8 <shci_send+0x80>)
 801658a:	691b      	ldr	r3, [r3, #16]
 801658c:	2100      	movs	r1, #0
 801658e:	2000      	movs	r0, #0
 8016590:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8016592:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8016596:	f7eb f922 	bl	80017de <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	f103 0008 	add.w	r0, r3, #8
 80165a0:	4b07      	ldr	r3, [pc, #28]	@ (80165c0 <shci_send+0x78>)
 80165a2:	6819      	ldr	r1, [r3, #0]
 80165a4:	4b06      	ldr	r3, [pc, #24]	@ (80165c0 <shci_send+0x78>)
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	789b      	ldrb	r3, [r3, #2]
 80165aa:	3303      	adds	r3, #3
 80165ac:	461a      	mov	r2, r3
 80165ae:	f004 ffe0 	bl	801b572 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80165b2:	2001      	movs	r0, #1
 80165b4:	f000 f83c 	bl	8016630 <Cmd_SetStatus>

  return;
 80165b8:	bf00      	nop
}
 80165ba:	3710      	adds	r7, #16
 80165bc:	46bd      	mov	sp, r7
 80165be:	bd80      	pop	{r7, pc}
 80165c0:	20000364 	.word	0x20000364
 80165c4:	200014b4 	.word	0x200014b4
 80165c8:	20001490 	.word	0x20001490

080165cc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b086      	sub	sp, #24
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80165d4:	4a10      	ldr	r2, [pc, #64]	@ (8016618 <TlInit+0x4c>)
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80165da:	4810      	ldr	r0, [pc, #64]	@ (801661c <TlInit+0x50>)
 80165dc:	f000 faf2 	bl	8016bc4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80165e0:	2001      	movs	r0, #1
 80165e2:	f000 f825 	bl	8016630 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80165e6:	4b0e      	ldr	r3, [pc, #56]	@ (8016620 <TlInit+0x54>)
 80165e8:	2201      	movs	r2, #1
 80165ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80165ec:	4b0d      	ldr	r3, [pc, #52]	@ (8016624 <TlInit+0x58>)
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d00c      	beq.n	801660e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80165f8:	4b0b      	ldr	r3, [pc, #44]	@ (8016628 <TlInit+0x5c>)
 80165fa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80165fc:	4b0b      	ldr	r3, [pc, #44]	@ (801662c <TlInit+0x60>)
 80165fe:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8016600:	4b08      	ldr	r3, [pc, #32]	@ (8016624 <TlInit+0x58>)
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	f107 020c 	add.w	r2, r7, #12
 8016608:	4610      	mov	r0, r2
 801660a:	4798      	blx	r3
  }

  return;
 801660c:	bf00      	nop
 801660e:	bf00      	nop
}
 8016610:	3718      	adds	r7, #24
 8016612:	46bd      	mov	sp, r7
 8016614:	bd80      	pop	{r7, pc}
 8016616:	bf00      	nop
 8016618:	20000364 	.word	0x20000364
 801661c:	20000358 	.word	0x20000358
 8016620:	20000368 	.word	0x20000368
 8016624:	20001490 	.word	0x20001490
 8016628:	08016681 	.word	0x08016681
 801662c:	08016699 	.word	0x08016699

08016630 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b082      	sub	sp, #8
 8016634:	af00      	add	r7, sp, #0
 8016636:	4603      	mov	r3, r0
 8016638:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 801663a:	79fb      	ldrb	r3, [r7, #7]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d10b      	bne.n	8016658 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8016640:	4b0d      	ldr	r3, [pc, #52]	@ (8016678 <Cmd_SetStatus+0x48>)
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d003      	beq.n	8016650 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8016648:	4b0b      	ldr	r3, [pc, #44]	@ (8016678 <Cmd_SetStatus+0x48>)
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	2000      	movs	r0, #0
 801664e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8016650:	4b0a      	ldr	r3, [pc, #40]	@ (801667c <Cmd_SetStatus+0x4c>)
 8016652:	2200      	movs	r2, #0
 8016654:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8016656:	e00b      	b.n	8016670 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8016658:	4b08      	ldr	r3, [pc, #32]	@ (801667c <Cmd_SetStatus+0x4c>)
 801665a:	2201      	movs	r2, #1
 801665c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 801665e:	4b06      	ldr	r3, [pc, #24]	@ (8016678 <Cmd_SetStatus+0x48>)
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d004      	beq.n	8016670 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8016666:	4b04      	ldr	r3, [pc, #16]	@ (8016678 <Cmd_SetStatus+0x48>)
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	2001      	movs	r0, #1
 801666c:	4798      	blx	r3
  return;
 801666e:	bf00      	nop
 8016670:	bf00      	nop
}
 8016672:	3708      	adds	r7, #8
 8016674:	46bd      	mov	sp, r7
 8016676:	bd80      	pop	{r7, pc}
 8016678:	200014b0 	.word	0x200014b0
 801667c:	20000360 	.word	0x20000360

08016680 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b082      	sub	sp, #8
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8016688:	2000      	movs	r0, #0
 801668a:	f7eb f89d 	bl	80017c8 <shci_cmd_resp_release>

  return;
 801668e:	bf00      	nop
}
 8016690:	3708      	adds	r7, #8
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}
	...

08016698 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b082      	sub	sp, #8
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80166a0:	6879      	ldr	r1, [r7, #4]
 80166a2:	4805      	ldr	r0, [pc, #20]	@ (80166b8 <TlUserEvtReceived+0x20>)
 80166a4:	f000 fae6 	bl	8016c74 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80166a8:	4803      	ldr	r0, [pc, #12]	@ (80166b8 <TlUserEvtReceived+0x20>)
 80166aa:	f7eb f881 	bl	80017b0 <shci_notify_asynch_evt>

  return;
 80166ae:	bf00      	nop
}
 80166b0:	3708      	adds	r7, #8
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}
 80166b6:	bf00      	nop
 80166b8:	20000358 	.word	0x20000358

080166bc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80166bc:	b480      	push	{r7}
 80166be:	b083      	sub	sp, #12
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	4a05      	ldr	r2, [pc, #20]	@ (80166dc <shci_register_io_bus+0x20>)
 80166c8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	4a04      	ldr	r2, [pc, #16]	@ (80166e0 <shci_register_io_bus+0x24>)
 80166ce:	611a      	str	r2, [r3, #16]

  return;
 80166d0:	bf00      	nop
}
 80166d2:	370c      	adds	r7, #12
 80166d4:	46bd      	mov	sp, r7
 80166d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166da:	4770      	bx	lr
 80166dc:	08016879 	.word	0x08016879
 80166e0:	080168cd 	.word	0x080168cd

080166e4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80166e8:	f001 fe30 	bl	801834c <HW_IPCC_Enable>

  return;
 80166ec:	bf00      	nop
}
 80166ee:	bd80      	pop	{r7, pc}

080166f0 <TL_Init>:


void TL_Init( void )
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80166f4:	4b10      	ldr	r3, [pc, #64]	@ (8016738 <TL_Init+0x48>)
 80166f6:	4a11      	ldr	r2, [pc, #68]	@ (801673c <TL_Init+0x4c>)
 80166f8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80166fa:	4b0f      	ldr	r3, [pc, #60]	@ (8016738 <TL_Init+0x48>)
 80166fc:	4a10      	ldr	r2, [pc, #64]	@ (8016740 <TL_Init+0x50>)
 80166fe:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8016700:	4b0d      	ldr	r3, [pc, #52]	@ (8016738 <TL_Init+0x48>)
 8016702:	4a10      	ldr	r2, [pc, #64]	@ (8016744 <TL_Init+0x54>)
 8016704:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8016706:	4b0c      	ldr	r3, [pc, #48]	@ (8016738 <TL_Init+0x48>)
 8016708:	4a0f      	ldr	r2, [pc, #60]	@ (8016748 <TL_Init+0x58>)
 801670a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 801670c:	4b0a      	ldr	r3, [pc, #40]	@ (8016738 <TL_Init+0x48>)
 801670e:	4a0f      	ldr	r2, [pc, #60]	@ (801674c <TL_Init+0x5c>)
 8016710:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8016712:	4b09      	ldr	r3, [pc, #36]	@ (8016738 <TL_Init+0x48>)
 8016714:	4a0e      	ldr	r2, [pc, #56]	@ (8016750 <TL_Init+0x60>)
 8016716:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8016718:	4b07      	ldr	r3, [pc, #28]	@ (8016738 <TL_Init+0x48>)
 801671a:	4a0e      	ldr	r2, [pc, #56]	@ (8016754 <TL_Init+0x64>)
 801671c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 801671e:	4b06      	ldr	r3, [pc, #24]	@ (8016738 <TL_Init+0x48>)
 8016720:	4a0d      	ldr	r2, [pc, #52]	@ (8016758 <TL_Init+0x68>)
 8016722:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8016724:	4b04      	ldr	r3, [pc, #16]	@ (8016738 <TL_Init+0x48>)
 8016726:	4a0d      	ldr	r2, [pc, #52]	@ (801675c <TL_Init+0x6c>)
 8016728:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 801672a:	4b03      	ldr	r3, [pc, #12]	@ (8016738 <TL_Init+0x48>)
 801672c:	4a0c      	ldr	r2, [pc, #48]	@ (8016760 <TL_Init+0x70>)
 801672e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8016730:	f001 fe20 	bl	8018374 <HW_IPCC_Init>

  return;
 8016734:	bf00      	nop
}
 8016736:	bd80      	pop	{r7, pc}
 8016738:	20030000 	.word	0x20030000
 801673c:	20030028 	.word	0x20030028
 8016740:	20030048 	.word	0x20030048
 8016744:	20030058 	.word	0x20030058
 8016748:	20030068 	.word	0x20030068
 801674c:	20030070 	.word	0x20030070
 8016750:	20030078 	.word	0x20030078
 8016754:	20030080 	.word	0x20030080
 8016758:	2003009c 	.word	0x2003009c
 801675c:	200300a0 	.word	0x200300a0
 8016760:	200300ac 	.word	0x200300ac

08016764 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8016764:	b580      	push	{r7, lr}
 8016766:	b084      	sub	sp, #16
 8016768:	af00      	add	r7, sp, #0
 801676a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8016770:	4811      	ldr	r0, [pc, #68]	@ (80167b8 <TL_BLE_Init+0x54>)
 8016772:	f000 fa27 	bl	8016bc4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8016776:	4b11      	ldr	r3, [pc, #68]	@ (80167bc <TL_BLE_Init+0x58>)
 8016778:	685b      	ldr	r3, [r3, #4]
 801677a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	689a      	ldr	r2, [r3, #8]
 8016780:	68bb      	ldr	r3, [r7, #8]
 8016782:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	68da      	ldr	r2, [r3, #12]
 8016788:	68bb      	ldr	r3, [r7, #8]
 801678a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 801678c:	68bb      	ldr	r3, [r7, #8]
 801678e:	4a0c      	ldr	r2, [pc, #48]	@ (80167c0 <TL_BLE_Init+0x5c>)
 8016790:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8016792:	68bb      	ldr	r3, [r7, #8]
 8016794:	4a08      	ldr	r2, [pc, #32]	@ (80167b8 <TL_BLE_Init+0x54>)
 8016796:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8016798:	f001 fe02 	bl	80183a0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	4a08      	ldr	r2, [pc, #32]	@ (80167c4 <TL_BLE_Init+0x60>)
 80167a2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	685b      	ldr	r3, [r3, #4]
 80167a8:	4a07      	ldr	r2, [pc, #28]	@ (80167c8 <TL_BLE_Init+0x64>)
 80167aa:	6013      	str	r3, [r2, #0]

  return 0;
 80167ac:	2300      	movs	r3, #0
}
 80167ae:	4618      	mov	r0, r3
 80167b0:	3710      	adds	r7, #16
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}
 80167b6:	bf00      	nop
 80167b8:	200300c8 	.word	0x200300c8
 80167bc:	20030000 	.word	0x20030000
 80167c0:	20030a58 	.word	0x20030a58
 80167c4:	200014c0 	.word	0x200014c0
 80167c8:	200014c4 	.word	0x200014c4

080167cc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b082      	sub	sp, #8
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	6078      	str	r0, [r7, #4]
 80167d4:	460b      	mov	r3, r1
 80167d6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80167d8:	4b09      	ldr	r3, [pc, #36]	@ (8016800 <TL_BLE_SendCmd+0x34>)
 80167da:	685b      	ldr	r3, [r3, #4]
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	2201      	movs	r2, #1
 80167e0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80167e2:	4b07      	ldr	r3, [pc, #28]	@ (8016800 <TL_BLE_SendCmd+0x34>)
 80167e4:	685b      	ldr	r3, [r3, #4]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	4619      	mov	r1, r3
 80167ea:	2001      	movs	r0, #1
 80167ec:	f000 f96c 	bl	8016ac8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80167f0:	f001 fde0 	bl	80183b4 <HW_IPCC_BLE_SendCmd>

  return 0;
 80167f4:	2300      	movs	r3, #0
}
 80167f6:	4618      	mov	r0, r3
 80167f8:	3708      	adds	r7, #8
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}
 80167fe:	bf00      	nop
 8016800:	20030000 	.word	0x20030000

08016804 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b082      	sub	sp, #8
 8016808:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 801680a:	e01c      	b.n	8016846 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 801680c:	1d3b      	adds	r3, r7, #4
 801680e:	4619      	mov	r1, r3
 8016810:	4812      	ldr	r0, [pc, #72]	@ (801685c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016812:	f000 fa76 	bl	8016d02 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	7a5b      	ldrb	r3, [r3, #9]
 801681a:	2b0f      	cmp	r3, #15
 801681c:	d003      	beq.n	8016826 <HW_IPCC_BLE_RxEvtNot+0x22>
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	7a5b      	ldrb	r3, [r3, #9]
 8016822:	2b0e      	cmp	r3, #14
 8016824:	d105      	bne.n	8016832 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	4619      	mov	r1, r3
 801682a:	2002      	movs	r0, #2
 801682c:	f000 f94c 	bl	8016ac8 <OutputDbgTrace>
 8016830:	e004      	b.n	801683c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	4619      	mov	r1, r3
 8016836:	2003      	movs	r0, #3
 8016838:	f000 f946 	bl	8016ac8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 801683c:	4b08      	ldr	r3, [pc, #32]	@ (8016860 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	687a      	ldr	r2, [r7, #4]
 8016842:	4610      	mov	r0, r2
 8016844:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8016846:	4805      	ldr	r0, [pc, #20]	@ (801685c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016848:	f000 f9cc 	bl	8016be4 <LST_is_empty>
 801684c:	4603      	mov	r3, r0
 801684e:	2b00      	cmp	r3, #0
 8016850:	d0dc      	beq.n	801680c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8016852:	bf00      	nop
}
 8016854:	3708      	adds	r7, #8
 8016856:	46bd      	mov	sp, r7
 8016858:	bd80      	pop	{r7, pc}
 801685a:	bf00      	nop
 801685c:	200300c8 	.word	0x200300c8
 8016860:	200014c0 	.word	0x200014c0

08016864 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8016864:	b580      	push	{r7, lr}
 8016866:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8016868:	4b02      	ldr	r3, [pc, #8]	@ (8016874 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	4798      	blx	r3

  return;
 801686e:	bf00      	nop
}
 8016870:	bd80      	pop	{r7, pc}
 8016872:	bf00      	nop
 8016874:	200014c4 	.word	0x200014c4

08016878 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b084      	sub	sp, #16
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8016884:	480d      	ldr	r0, [pc, #52]	@ (80168bc <TL_SYS_Init+0x44>)
 8016886:	f000 f99d 	bl	8016bc4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 801688a:	4b0d      	ldr	r3, [pc, #52]	@ (80168c0 <TL_SYS_Init+0x48>)
 801688c:	68db      	ldr	r3, [r3, #12]
 801688e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	689a      	ldr	r2, [r3, #8]
 8016894:	68bb      	ldr	r3, [r7, #8]
 8016896:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8016898:	68bb      	ldr	r3, [r7, #8]
 801689a:	4a08      	ldr	r2, [pc, #32]	@ (80168bc <TL_SYS_Init+0x44>)
 801689c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801689e:	f001 fdab 	bl	80183f8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	4a07      	ldr	r2, [pc, #28]	@ (80168c4 <TL_SYS_Init+0x4c>)
 80168a8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	685b      	ldr	r3, [r3, #4]
 80168ae:	4a06      	ldr	r2, [pc, #24]	@ (80168c8 <TL_SYS_Init+0x50>)
 80168b0:	6013      	str	r3, [r2, #0]

  return 0;
 80168b2:	2300      	movs	r3, #0
}
 80168b4:	4618      	mov	r0, r3
 80168b6:	3710      	adds	r7, #16
 80168b8:	46bd      	mov	sp, r7
 80168ba:	bd80      	pop	{r7, pc}
 80168bc:	200300d0 	.word	0x200300d0
 80168c0:	20030000 	.word	0x20030000
 80168c4:	200014c8 	.word	0x200014c8
 80168c8:	200014cc 	.word	0x200014cc

080168cc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80168cc:	b580      	push	{r7, lr}
 80168ce:	b082      	sub	sp, #8
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]
 80168d4:	460b      	mov	r3, r1
 80168d6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80168d8:	4b09      	ldr	r3, [pc, #36]	@ (8016900 <TL_SYS_SendCmd+0x34>)
 80168da:	68db      	ldr	r3, [r3, #12]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	2210      	movs	r2, #16
 80168e0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80168e2:	4b07      	ldr	r3, [pc, #28]	@ (8016900 <TL_SYS_SendCmd+0x34>)
 80168e4:	68db      	ldr	r3, [r3, #12]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	4619      	mov	r1, r3
 80168ea:	2004      	movs	r0, #4
 80168ec:	f000 f8ec 	bl	8016ac8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80168f0:	f001 fd8c 	bl	801840c <HW_IPCC_SYS_SendCmd>

  return 0;
 80168f4:	2300      	movs	r3, #0
}
 80168f6:	4618      	mov	r0, r3
 80168f8:	3708      	adds	r7, #8
 80168fa:	46bd      	mov	sp, r7
 80168fc:	bd80      	pop	{r7, pc}
 80168fe:	bf00      	nop
 8016900:	20030000 	.word	0x20030000

08016904 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8016904:	b580      	push	{r7, lr}
 8016906:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016908:	4b07      	ldr	r3, [pc, #28]	@ (8016928 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801690a:	68db      	ldr	r3, [r3, #12]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	4619      	mov	r1, r3
 8016910:	2005      	movs	r0, #5
 8016912:	f000 f8d9 	bl	8016ac8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016916:	4b05      	ldr	r3, [pc, #20]	@ (801692c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	4a03      	ldr	r2, [pc, #12]	@ (8016928 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801691c:	68d2      	ldr	r2, [r2, #12]
 801691e:	6812      	ldr	r2, [r2, #0]
 8016920:	4610      	mov	r0, r2
 8016922:	4798      	blx	r3

  return;
 8016924:	bf00      	nop
}
 8016926:	bd80      	pop	{r7, pc}
 8016928:	20030000 	.word	0x20030000
 801692c:	200014c8 	.word	0x200014c8

08016930 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b082      	sub	sp, #8
 8016934:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016936:	e00e      	b.n	8016956 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8016938:	1d3b      	adds	r3, r7, #4
 801693a:	4619      	mov	r1, r3
 801693c:	480b      	ldr	r0, [pc, #44]	@ (801696c <HW_IPCC_SYS_EvtNot+0x3c>)
 801693e:	f000 f9e0 	bl	8016d02 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	4619      	mov	r1, r3
 8016946:	2006      	movs	r0, #6
 8016948:	f000 f8be 	bl	8016ac8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 801694c:	4b08      	ldr	r3, [pc, #32]	@ (8016970 <HW_IPCC_SYS_EvtNot+0x40>)
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	687a      	ldr	r2, [r7, #4]
 8016952:	4610      	mov	r0, r2
 8016954:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016956:	4805      	ldr	r0, [pc, #20]	@ (801696c <HW_IPCC_SYS_EvtNot+0x3c>)
 8016958:	f000 f944 	bl	8016be4 <LST_is_empty>
 801695c:	4603      	mov	r3, r0
 801695e:	2b00      	cmp	r3, #0
 8016960:	d0ea      	beq.n	8016938 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8016962:	bf00      	nop
}
 8016964:	3708      	adds	r7, #8
 8016966:	46bd      	mov	sp, r7
 8016968:	bd80      	pop	{r7, pc}
 801696a:	bf00      	nop
 801696c:	200300d0 	.word	0x200300d0
 8016970:	200014cc 	.word	0x200014cc

08016974 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8016974:	b580      	push	{r7, lr}
 8016976:	b082      	sub	sp, #8
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 801697c:	4817      	ldr	r0, [pc, #92]	@ (80169dc <TL_MM_Init+0x68>)
 801697e:	f000 f921 	bl	8016bc4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8016982:	4817      	ldr	r0, [pc, #92]	@ (80169e0 <TL_MM_Init+0x6c>)
 8016984:	f000 f91e 	bl	8016bc4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8016988:	4b16      	ldr	r3, [pc, #88]	@ (80169e4 <TL_MM_Init+0x70>)
 801698a:	691b      	ldr	r3, [r3, #16]
 801698c:	4a16      	ldr	r2, [pc, #88]	@ (80169e8 <TL_MM_Init+0x74>)
 801698e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8016990:	4b15      	ldr	r3, [pc, #84]	@ (80169e8 <TL_MM_Init+0x74>)
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	687a      	ldr	r2, [r7, #4]
 8016996:	6892      	ldr	r2, [r2, #8]
 8016998:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801699a:	4b13      	ldr	r3, [pc, #76]	@ (80169e8 <TL_MM_Init+0x74>)
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	687a      	ldr	r2, [r7, #4]
 80169a0:	68d2      	ldr	r2, [r2, #12]
 80169a2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80169a4:	4b10      	ldr	r3, [pc, #64]	@ (80169e8 <TL_MM_Init+0x74>)
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	4a0c      	ldr	r2, [pc, #48]	@ (80169dc <TL_MM_Init+0x68>)
 80169aa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80169ac:	4b0e      	ldr	r3, [pc, #56]	@ (80169e8 <TL_MM_Init+0x74>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	687a      	ldr	r2, [r7, #4]
 80169b2:	6812      	ldr	r2, [r2, #0]
 80169b4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80169b6:	4b0c      	ldr	r3, [pc, #48]	@ (80169e8 <TL_MM_Init+0x74>)
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	687a      	ldr	r2, [r7, #4]
 80169bc:	6852      	ldr	r2, [r2, #4]
 80169be:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80169c0:	4b09      	ldr	r3, [pc, #36]	@ (80169e8 <TL_MM_Init+0x74>)
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	687a      	ldr	r2, [r7, #4]
 80169c6:	6912      	ldr	r2, [r2, #16]
 80169c8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80169ca:	4b07      	ldr	r3, [pc, #28]	@ (80169e8 <TL_MM_Init+0x74>)
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	687a      	ldr	r2, [r7, #4]
 80169d0:	6952      	ldr	r2, [r2, #20]
 80169d2:	619a      	str	r2, [r3, #24]

  return;
 80169d4:	bf00      	nop
}
 80169d6:	3708      	adds	r7, #8
 80169d8:	46bd      	mov	sp, r7
 80169da:	bd80      	pop	{r7, pc}
 80169dc:	200300b8 	.word	0x200300b8
 80169e0:	200014b8 	.word	0x200014b8
 80169e4:	20030000 	.word	0x20030000
 80169e8:	200014d0 	.word	0x200014d0

080169ec <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b082      	sub	sp, #8
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80169f4:	6879      	ldr	r1, [r7, #4]
 80169f6:	4807      	ldr	r0, [pc, #28]	@ (8016a14 <TL_MM_EvtDone+0x28>)
 80169f8:	f000 f93c 	bl	8016c74 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80169fc:	6879      	ldr	r1, [r7, #4]
 80169fe:	2000      	movs	r0, #0
 8016a00:	f000 f862 	bl	8016ac8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8016a04:	4804      	ldr	r0, [pc, #16]	@ (8016a18 <TL_MM_EvtDone+0x2c>)
 8016a06:	f001 fd27 	bl	8018458 <HW_IPCC_MM_SendFreeBuf>

  return;
 8016a0a:	bf00      	nop
}
 8016a0c:	3708      	adds	r7, #8
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	bd80      	pop	{r7, pc}
 8016a12:	bf00      	nop
 8016a14:	200014b8 	.word	0x200014b8
 8016a18:	08016a1d 	.word	0x08016a1d

08016a1c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b082      	sub	sp, #8
 8016a20:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016a22:	e00c      	b.n	8016a3e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8016a24:	1d3b      	adds	r3, r7, #4
 8016a26:	4619      	mov	r1, r3
 8016a28:	480a      	ldr	r0, [pc, #40]	@ (8016a54 <SendFreeBuf+0x38>)
 8016a2a:	f000 f96a 	bl	8016d02 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8016a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8016a58 <SendFreeBuf+0x3c>)
 8016a30:	691b      	ldr	r3, [r3, #16]
 8016a32:	691b      	ldr	r3, [r3, #16]
 8016a34:	687a      	ldr	r2, [r7, #4]
 8016a36:	4611      	mov	r1, r2
 8016a38:	4618      	mov	r0, r3
 8016a3a:	f000 f91b 	bl	8016c74 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016a3e:	4805      	ldr	r0, [pc, #20]	@ (8016a54 <SendFreeBuf+0x38>)
 8016a40:	f000 f8d0 	bl	8016be4 <LST_is_empty>
 8016a44:	4603      	mov	r3, r0
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d0ec      	beq.n	8016a24 <SendFreeBuf+0x8>
  }

  return;
 8016a4a:	bf00      	nop
}
 8016a4c:	3708      	adds	r7, #8
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bd80      	pop	{r7, pc}
 8016a52:	bf00      	nop
 8016a54:	200014b8 	.word	0x200014b8
 8016a58:	20030000 	.word	0x20030000

08016a5c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8016a60:	4805      	ldr	r0, [pc, #20]	@ (8016a78 <TL_TRACES_Init+0x1c>)
 8016a62:	f000 f8af 	bl	8016bc4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8016a66:	4b05      	ldr	r3, [pc, #20]	@ (8016a7c <TL_TRACES_Init+0x20>)
 8016a68:	695b      	ldr	r3, [r3, #20]
 8016a6a:	4a03      	ldr	r2, [pc, #12]	@ (8016a78 <TL_TRACES_Init+0x1c>)
 8016a6c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8016a6e:	f001 fd29 	bl	80184c4 <HW_IPCC_TRACES_Init>

  return;
 8016a72:	bf00      	nop
}
 8016a74:	bd80      	pop	{r7, pc}
 8016a76:	bf00      	nop
 8016a78:	200300c0 	.word	0x200300c0
 8016a7c:	20030000 	.word	0x20030000

08016a80 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b082      	sub	sp, #8
 8016a84:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016a86:	e008      	b.n	8016a9a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8016a88:	1d3b      	adds	r3, r7, #4
 8016a8a:	4619      	mov	r1, r3
 8016a8c:	4808      	ldr	r0, [pc, #32]	@ (8016ab0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016a8e:	f000 f938 	bl	8016d02 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	4618      	mov	r0, r3
 8016a96:	f000 f80d 	bl	8016ab4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016a9a:	4805      	ldr	r0, [pc, #20]	@ (8016ab0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016a9c:	f000 f8a2 	bl	8016be4 <LST_is_empty>
 8016aa0:	4603      	mov	r3, r0
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d0f0      	beq.n	8016a88 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8016aa6:	bf00      	nop
}
 8016aa8:	3708      	adds	r7, #8
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	bd80      	pop	{r7, pc}
 8016aae:	bf00      	nop
 8016ab0:	200300c0 	.word	0x200300c0

08016ab4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8016ab4:	b480      	push	{r7}
 8016ab6:	b083      	sub	sp, #12
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8016abc:	bf00      	nop
 8016abe:	370c      	adds	r7, #12
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac6:	4770      	bx	lr

08016ac8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8016ac8:	b480      	push	{r7}
 8016aca:	b087      	sub	sp, #28
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	4603      	mov	r3, r0
 8016ad0:	6039      	str	r1, [r7, #0]
 8016ad2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8016ad4:	79fb      	ldrb	r3, [r7, #7]
 8016ad6:	2b06      	cmp	r3, #6
 8016ad8:	d845      	bhi.n	8016b66 <OutputDbgTrace+0x9e>
 8016ada:	a201      	add	r2, pc, #4	@ (adr r2, 8016ae0 <OutputDbgTrace+0x18>)
 8016adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ae0:	08016afd 	.word	0x08016afd
 8016ae4:	08016b21 	.word	0x08016b21
 8016ae8:	08016b27 	.word	0x08016b27
 8016aec:	08016b3b 	.word	0x08016b3b
 8016af0:	08016b47 	.word	0x08016b47
 8016af4:	08016b4d 	.word	0x08016b4d
 8016af8:	08016b5b 	.word	0x08016b5b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016afc:	683b      	ldr	r3, [r7, #0]
 8016afe:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016b00:	697b      	ldr	r3, [r7, #20]
 8016b02:	7a5b      	ldrb	r3, [r3, #9]
 8016b04:	2bff      	cmp	r3, #255	@ 0xff
 8016b06:	d005      	beq.n	8016b14 <OutputDbgTrace+0x4c>
 8016b08:	2bff      	cmp	r3, #255	@ 0xff
 8016b0a:	dc05      	bgt.n	8016b18 <OutputDbgTrace+0x50>
 8016b0c:	2b0e      	cmp	r3, #14
 8016b0e:	d005      	beq.n	8016b1c <OutputDbgTrace+0x54>
 8016b10:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8016b12:	e001      	b.n	8016b18 <OutputDbgTrace+0x50>
          break;
 8016b14:	bf00      	nop
 8016b16:	e027      	b.n	8016b68 <OutputDbgTrace+0xa0>
          break;
 8016b18:	bf00      	nop
 8016b1a:	e025      	b.n	8016b68 <OutputDbgTrace+0xa0>
          break;
 8016b1c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8016b1e:	e023      	b.n	8016b68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016b20:	683b      	ldr	r3, [r7, #0]
 8016b22:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016b24:	e020      	b.n	8016b68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016b26:	683b      	ldr	r3, [r7, #0]
 8016b28:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016b2a:	697b      	ldr	r3, [r7, #20]
 8016b2c:	7a5b      	ldrb	r3, [r3, #9]
 8016b2e:	2b0e      	cmp	r3, #14
 8016b30:	d001      	beq.n	8016b36 <OutputDbgTrace+0x6e>
 8016b32:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8016b34:	e000      	b.n	8016b38 <OutputDbgTrace+0x70>
          break;
 8016b36:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016b38:	e016      	b.n	8016b68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016b3a:	683b      	ldr	r3, [r7, #0]
 8016b3c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016b3e:	697b      	ldr	r3, [r7, #20]
 8016b40:	7a5b      	ldrb	r3, [r3, #9]
 8016b42:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016b44:	e010      	b.n	8016b68 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016b46:	683b      	ldr	r3, [r7, #0]
 8016b48:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016b4a:	e00d      	b.n	8016b68 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8016b4c:	683b      	ldr	r3, [r7, #0]
 8016b4e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8016b50:	693b      	ldr	r3, [r7, #16]
 8016b52:	785b      	ldrb	r3, [r3, #1]
 8016b54:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8016b56:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016b58:	e006      	b.n	8016b68 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016b5a:	683b      	ldr	r3, [r7, #0]
 8016b5c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016b5e:	697b      	ldr	r3, [r7, #20]
 8016b60:	7a5b      	ldrb	r3, [r3, #9]
 8016b62:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016b64:	e000      	b.n	8016b68 <OutputDbgTrace+0xa0>

    default:
      break;
 8016b66:	bf00      	nop
  }

  return;
 8016b68:	bf00      	nop
}
 8016b6a:	371c      	adds	r7, #28
 8016b6c:	46bd      	mov	sp, r7
 8016b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b72:	4770      	bx	lr

08016b74 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8016b74:	b480      	push	{r7}
 8016b76:	b085      	sub	sp, #20
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8016b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8016bbc <OTP_Read+0x48>)
 8016b80:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016b82:	e002      	b.n	8016b8a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	3b08      	subs	r3, #8
 8016b88:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	3307      	adds	r3, #7
 8016b8e:	781b      	ldrb	r3, [r3, #0]
 8016b90:	79fa      	ldrb	r2, [r7, #7]
 8016b92:	429a      	cmp	r2, r3
 8016b94:	d003      	beq.n	8016b9e <OTP_Read+0x2a>
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	4a09      	ldr	r2, [pc, #36]	@ (8016bc0 <OTP_Read+0x4c>)
 8016b9a:	4293      	cmp	r3, r2
 8016b9c:	d1f2      	bne.n	8016b84 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	3307      	adds	r3, #7
 8016ba2:	781b      	ldrb	r3, [r3, #0]
 8016ba4:	79fa      	ldrb	r2, [r7, #7]
 8016ba6:	429a      	cmp	r2, r3
 8016ba8:	d001      	beq.n	8016bae <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8016baa:	2300      	movs	r3, #0
 8016bac:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8016bae:	68fb      	ldr	r3, [r7, #12]
}
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	3714      	adds	r7, #20
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bba:	4770      	bx	lr
 8016bbc:	1fff73f8 	.word	0x1fff73f8
 8016bc0:	1fff7000 	.word	0x1fff7000

08016bc4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8016bc4:	b480      	push	{r7}
 8016bc6:	b083      	sub	sp, #12
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	687a      	ldr	r2, [r7, #4]
 8016bd0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	687a      	ldr	r2, [r7, #4]
 8016bd6:	605a      	str	r2, [r3, #4]
}
 8016bd8:	bf00      	nop
 8016bda:	370c      	adds	r7, #12
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be2:	4770      	bx	lr

08016be4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8016be4:	b480      	push	{r7}
 8016be6:	b087      	sub	sp, #28
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016bec:	f3ef 8310 	mrs	r3, PRIMASK
 8016bf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8016bf2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016bf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016bf6:	b672      	cpsid	i
}
 8016bf8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	687a      	ldr	r2, [r7, #4]
 8016c00:	429a      	cmp	r2, r3
 8016c02:	d102      	bne.n	8016c0a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8016c04:	2301      	movs	r3, #1
 8016c06:	75fb      	strb	r3, [r7, #23]
 8016c08:	e001      	b.n	8016c0e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	75fb      	strb	r3, [r7, #23]
 8016c0e:	693b      	ldr	r3, [r7, #16]
 8016c10:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c12:	68bb      	ldr	r3, [r7, #8]
 8016c14:	f383 8810 	msr	PRIMASK, r3
}
 8016c18:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8016c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	371c      	adds	r7, #28
 8016c20:	46bd      	mov	sp, r7
 8016c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c26:	4770      	bx	lr

08016c28 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8016c28:	b480      	push	{r7}
 8016c2a:	b087      	sub	sp, #28
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
 8016c30:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c32:	f3ef 8310 	mrs	r3, PRIMASK
 8016c36:	60fb      	str	r3, [r7, #12]
  return(result);
 8016c38:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016c3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016c3c:	b672      	cpsid	i
}
 8016c3e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	681a      	ldr	r2, [r3, #0]
 8016c44:	683b      	ldr	r3, [r7, #0]
 8016c46:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8016c48:	683b      	ldr	r3, [r7, #0]
 8016c4a:	687a      	ldr	r2, [r7, #4]
 8016c4c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	683a      	ldr	r2, [r7, #0]
 8016c52:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8016c54:	683b      	ldr	r3, [r7, #0]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	683a      	ldr	r2, [r7, #0]
 8016c5a:	605a      	str	r2, [r3, #4]
 8016c5c:	697b      	ldr	r3, [r7, #20]
 8016c5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c60:	693b      	ldr	r3, [r7, #16]
 8016c62:	f383 8810 	msr	PRIMASK, r3
}
 8016c66:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016c68:	bf00      	nop
 8016c6a:	371c      	adds	r7, #28
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c72:	4770      	bx	lr

08016c74 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8016c74:	b480      	push	{r7}
 8016c76:	b087      	sub	sp, #28
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
 8016c7c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8016c82:	60fb      	str	r3, [r7, #12]
  return(result);
 8016c84:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016c86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016c88:	b672      	cpsid	i
}
 8016c8a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8016c8c:	683b      	ldr	r3, [r7, #0]
 8016c8e:	687a      	ldr	r2, [r7, #4]
 8016c90:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	685a      	ldr	r2, [r3, #4]
 8016c96:	683b      	ldr	r3, [r7, #0]
 8016c98:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	683a      	ldr	r2, [r7, #0]
 8016c9e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8016ca0:	683b      	ldr	r3, [r7, #0]
 8016ca2:	685b      	ldr	r3, [r3, #4]
 8016ca4:	683a      	ldr	r2, [r7, #0]
 8016ca6:	601a      	str	r2, [r3, #0]
 8016ca8:	697b      	ldr	r3, [r7, #20]
 8016caa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cac:	693b      	ldr	r3, [r7, #16]
 8016cae:	f383 8810 	msr	PRIMASK, r3
}
 8016cb2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016cb4:	bf00      	nop
 8016cb6:	371c      	adds	r7, #28
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cbe:	4770      	bx	lr

08016cc0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8016cc0:	b480      	push	{r7}
 8016cc2:	b087      	sub	sp, #28
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8016ccc:	60fb      	str	r3, [r7, #12]
  return(result);
 8016cce:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016cd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016cd2:	b672      	cpsid	i
}
 8016cd4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	685b      	ldr	r3, [r3, #4]
 8016cda:	687a      	ldr	r2, [r7, #4]
 8016cdc:	6812      	ldr	r2, [r2, #0]
 8016cde:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	687a      	ldr	r2, [r7, #4]
 8016ce6:	6852      	ldr	r2, [r2, #4]
 8016ce8:	605a      	str	r2, [r3, #4]
 8016cea:	697b      	ldr	r3, [r7, #20]
 8016cec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cee:	693b      	ldr	r3, [r7, #16]
 8016cf0:	f383 8810 	msr	PRIMASK, r3
}
 8016cf4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016cf6:	bf00      	nop
 8016cf8:	371c      	adds	r7, #28
 8016cfa:	46bd      	mov	sp, r7
 8016cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d00:	4770      	bx	lr

08016d02 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8016d02:	b580      	push	{r7, lr}
 8016d04:	b086      	sub	sp, #24
 8016d06:	af00      	add	r7, sp, #0
 8016d08:	6078      	str	r0, [r7, #4]
 8016d0a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8016d10:	60fb      	str	r3, [r7, #12]
  return(result);
 8016d12:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016d14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016d16:	b672      	cpsid	i
}
 8016d18:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	681a      	ldr	r2, [r3, #0]
 8016d1e:	683b      	ldr	r3, [r7, #0]
 8016d20:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	4618      	mov	r0, r3
 8016d28:	f7ff ffca 	bl	8016cc0 <LST_remove_node>
 8016d2c:	697b      	ldr	r3, [r7, #20]
 8016d2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d30:	693b      	ldr	r3, [r7, #16]
 8016d32:	f383 8810 	msr	PRIMASK, r3
}
 8016d36:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016d38:	bf00      	nop
 8016d3a:	3718      	adds	r7, #24
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	bd80      	pop	{r7, pc}

08016d40 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b082      	sub	sp, #8
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8016d48:	6878      	ldr	r0, [r7, #4]
 8016d4a:	f7ea fcf0 	bl	800172e <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8016d4e:	bf00      	nop
 8016d50:	3708      	adds	r7, #8
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}

08016d56 <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8016d56:	b580      	push	{r7, lr}
 8016d58:	b082      	sub	sp, #8
 8016d5a:	af00      	add	r7, sp, #0
 8016d5c:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8016d5e:	e002      	b.n	8016d66 <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8016d60:	2001      	movs	r0, #1
 8016d62:	f7ff ffed 	bl	8016d40 <SPIF_Delay>
  while (Handle->Lock)
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	7b1b      	ldrb	r3, [r3, #12]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d1f8      	bne.n	8016d60 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	2201      	movs	r2, #1
 8016d72:	731a      	strb	r2, [r3, #12]
}
 8016d74:	bf00      	nop
 8016d76:	3708      	adds	r7, #8
 8016d78:	46bd      	mov	sp, r7
 8016d7a:	bd80      	pop	{r7, pc}

08016d7c <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8016d7c:	b480      	push	{r7}
 8016d7e:	b083      	sub	sp, #12
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	2200      	movs	r2, #0
 8016d88:	731a      	strb	r2, [r3, #12]
}
 8016d8a:	bf00      	nop
 8016d8c:	370c      	adds	r7, #12
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d94:	4770      	bx	lr

08016d96 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8016d96:	b580      	push	{r7, lr}
 8016d98:	b084      	sub	sp, #16
 8016d9a:	af00      	add	r7, sp, #0
 8016d9c:	6078      	str	r0, [r7, #4]
 8016d9e:	460b      	mov	r3, r1
 8016da0:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	6858      	ldr	r0, [r3, #4]
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	691b      	ldr	r3, [r3, #16]
 8016daa:	b29b      	uxth	r3, r3
 8016dac:	78fa      	ldrb	r2, [r7, #3]
 8016dae:	4619      	mov	r1, r3
 8016db0:	f7f2 fa74 	bl	800929c <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 8016db4:	2300      	movs	r3, #0
 8016db6:	60fb      	str	r3, [r7, #12]
 8016db8:	e002      	b.n	8016dc0 <SPIF_CsPin+0x2a>
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	3301      	adds	r3, #1
 8016dbe:	60fb      	str	r3, [r7, #12]
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	2b09      	cmp	r3, #9
 8016dc4:	ddf9      	ble.n	8016dba <SPIF_CsPin+0x24>
}
 8016dc6:	bf00      	nop
 8016dc8:	bf00      	nop
 8016dca:	3710      	adds	r7, #16
 8016dcc:	46bd      	mov	sp, r7
 8016dce:	bd80      	pop	{r7, pc}

08016dd0 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b088      	sub	sp, #32
 8016dd4:	af02      	add	r7, sp, #8
 8016dd6:	60f8      	str	r0, [r7, #12]
 8016dd8:	60b9      	str	r1, [r7, #8]
 8016dda:	607a      	str	r2, [r7, #4]
 8016ddc:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8016dde:	2300      	movs	r3, #0
 8016de0:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	6818      	ldr	r0, [r3, #0]
 8016de6:	683b      	ldr	r3, [r7, #0]
 8016de8:	b29a      	uxth	r2, r3
 8016dea:	6a3b      	ldr	r3, [r7, #32]
 8016dec:	9300      	str	r3, [sp, #0]
 8016dee:	4613      	mov	r3, r2
 8016df0:	687a      	ldr	r2, [r7, #4]
 8016df2:	68b9      	ldr	r1, [r7, #8]
 8016df4:	f7f7 f9b9 	bl	800e16a <HAL_SPI_TransmitReceive>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d101      	bne.n	8016e02 <SPIF_TransmitReceive+0x32>
  {
    retVal = true;
 8016dfe:	2301      	movs	r3, #1
 8016e00:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8016e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e04:	4618      	mov	r0, r3
 8016e06:	3718      	adds	r7, #24
 8016e08:	46bd      	mov	sp, r7
 8016e0a:	bd80      	pop	{r7, pc}

08016e0c <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8016e0c:	b580      	push	{r7, lr}
 8016e0e:	b086      	sub	sp, #24
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	60f8      	str	r0, [r7, #12]
 8016e14:	60b9      	str	r1, [r7, #8]
 8016e16:	607a      	str	r2, [r7, #4]
 8016e18:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	6818      	ldr	r0, [r3, #0]
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	b29a      	uxth	r2, r3
 8016e26:	683b      	ldr	r3, [r7, #0]
 8016e28:	68b9      	ldr	r1, [r7, #8]
 8016e2a:	f7f6 fef0 	bl	800dc0e <HAL_SPI_Transmit>
 8016e2e:	4603      	mov	r3, r0
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d101      	bne.n	8016e38 <SPIF_Transmit+0x2c>
  {
    retVal = true;
 8016e34:	2301      	movs	r3, #1
 8016e36:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8016e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	3718      	adds	r7, #24
 8016e3e:	46bd      	mov	sp, r7
 8016e40:	bd80      	pop	{r7, pc}

08016e42 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8016e42:	b580      	push	{r7, lr}
 8016e44:	b086      	sub	sp, #24
 8016e46:	af00      	add	r7, sp, #0
 8016e48:	60f8      	str	r0, [r7, #12]
 8016e4a:	60b9      	str	r1, [r7, #8]
 8016e4c:	607a      	str	r2, [r7, #4]
 8016e4e:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8016e50:	2300      	movs	r3, #0
 8016e52:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	6818      	ldr	r0, [r3, #0]
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	b29a      	uxth	r2, r3
 8016e5c:	683b      	ldr	r3, [r7, #0]
 8016e5e:	68b9      	ldr	r1, [r7, #8]
 8016e60:	f7f7 f84b 	bl	800defa <HAL_SPI_Receive>
 8016e64:	4603      	mov	r3, r0
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d101      	bne.n	8016e6e <SPIF_Receive+0x2c>
  {
    retVal = true;
 8016e6a:	2301      	movs	r3, #1
 8016e6c:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8016e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e70:	4618      	mov	r0, r3
 8016e72:	3718      	adds	r7, #24
 8016e74:	46bd      	mov	sp, r7
 8016e76:	bd80      	pop	{r7, pc}

08016e78 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b084      	sub	sp, #16
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8016e80:	2301      	movs	r3, #1
 8016e82:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 8016e84:	2306      	movs	r3, #6
 8016e86:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8016e88:	2100      	movs	r1, #0
 8016e8a:	6878      	ldr	r0, [r7, #4]
 8016e8c:	f7ff ff83 	bl	8016d96 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8016e90:	f107 010c 	add.w	r1, r7, #12
 8016e94:	2364      	movs	r3, #100	@ 0x64
 8016e96:	2201      	movs	r2, #1
 8016e98:	6878      	ldr	r0, [r7, #4]
 8016e9a:	f7ff ffb7 	bl	8016e0c <SPIF_Transmit>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	f083 0301 	eor.w	r3, r3, #1
 8016ea4:	b2db      	uxtb	r3, r3
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d001      	beq.n	8016eae <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 8016eaa:	2300      	movs	r3, #0
 8016eac:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8016eae:	2101      	movs	r1, #1
 8016eb0:	6878      	ldr	r0, [r7, #4]
 8016eb2:	f7ff ff70 	bl	8016d96 <SPIF_CsPin>
  return retVal;
 8016eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016eb8:	4618      	mov	r0, r3
 8016eba:	3710      	adds	r7, #16
 8016ebc:	46bd      	mov	sp, r7
 8016ebe:	bd80      	pop	{r7, pc}

08016ec0 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8016ec0:	b580      	push	{r7, lr}
 8016ec2:	b084      	sub	sp, #16
 8016ec4:	af00      	add	r7, sp, #0
 8016ec6:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8016ec8:	2301      	movs	r3, #1
 8016eca:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 8016ecc:	2304      	movs	r3, #4
 8016ece:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8016ed0:	2100      	movs	r1, #0
 8016ed2:	6878      	ldr	r0, [r7, #4]
 8016ed4:	f7ff ff5f 	bl	8016d96 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8016ed8:	f107 010c 	add.w	r1, r7, #12
 8016edc:	2364      	movs	r3, #100	@ 0x64
 8016ede:	2201      	movs	r2, #1
 8016ee0:	6878      	ldr	r0, [r7, #4]
 8016ee2:	f7ff ff93 	bl	8016e0c <SPIF_Transmit>
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	f083 0301 	eor.w	r3, r3, #1
 8016eec:	b2db      	uxtb	r3, r3
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d001      	beq.n	8016ef6 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8016ef6:	2101      	movs	r1, #1
 8016ef8:	6878      	ldr	r0, [r7, #4]
 8016efa:	f7ff ff4c 	bl	8016d96 <SPIF_CsPin>
  return retVal;
 8016efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f00:	4618      	mov	r0, r3
 8016f02:	3710      	adds	r7, #16
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd80      	pop	{r7, pc}

08016f08 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b086      	sub	sp, #24
 8016f0c:	af02      	add	r7, sp, #8
 8016f0e:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 8016f10:	2300      	movs	r3, #0
 8016f12:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 8016f14:	f24a 5305 	movw	r3, #42245	@ 0xa505
 8016f18:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 8016f1a:	2100      	movs	r1, #0
 8016f1c:	6878      	ldr	r0, [r7, #4]
 8016f1e:	f7ff ff3a 	bl	8016d96 <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 8016f22:	f107 0208 	add.w	r2, r7, #8
 8016f26:	f107 010c 	add.w	r1, r7, #12
 8016f2a:	2364      	movs	r3, #100	@ 0x64
 8016f2c:	9300      	str	r3, [sp, #0]
 8016f2e:	2302      	movs	r3, #2
 8016f30:	6878      	ldr	r0, [r7, #4]
 8016f32:	f7ff ff4d 	bl	8016dd0 <SPIF_TransmitReceive>
 8016f36:	4603      	mov	r3, r0
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d001      	beq.n	8016f40 <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 8016f3c:	7a7b      	ldrb	r3, [r7, #9]
 8016f3e:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 8016f40:	2101      	movs	r1, #1
 8016f42:	6878      	ldr	r0, [r7, #4]
 8016f44:	f7ff ff27 	bl	8016d96 <SPIF_CsPin>
  return retVal;
 8016f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	3710      	adds	r7, #16
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	bd80      	pop	{r7, pc}

08016f52 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 8016f52:	b580      	push	{r7, lr}
 8016f54:	b084      	sub	sp, #16
 8016f56:	af00      	add	r7, sp, #0
 8016f58:	6078      	str	r0, [r7, #4]
 8016f5a:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 8016f60:	f7f0 f924 	bl	80071ac <HAL_GetTick>
 8016f64:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 8016f66:	2001      	movs	r0, #1
 8016f68:	f7ff feea 	bl	8016d40 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 8016f6c:	f7f0 f91e 	bl	80071ac <HAL_GetTick>
 8016f70:	4602      	mov	r2, r0
 8016f72:	68bb      	ldr	r3, [r7, #8]
 8016f74:	1ad3      	subs	r3, r2, r3
 8016f76:	683a      	ldr	r2, [r7, #0]
 8016f78:	429a      	cmp	r2, r3
 8016f7a:	d90a      	bls.n	8016f92 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 8016f7c:	6878      	ldr	r0, [r7, #4]
 8016f7e:	f7ff ffc3 	bl	8016f08 <SPIF_ReadReg1>
 8016f82:	4603      	mov	r3, r0
 8016f84:	f003 0301 	and.w	r3, r3, #1
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d1ec      	bne.n	8016f66 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 8016f8c:	2301      	movs	r3, #1
 8016f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8016f90:	e000      	b.n	8016f94 <SPIF_WaitForWriting+0x42>
      break;
 8016f92:	bf00      	nop
    }
  }
  return retVal;
 8016f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f96:	4618      	mov	r0, r3
 8016f98:	3710      	adds	r7, #16
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	bd80      	pop	{r7, pc}
	...

08016fa0 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b088      	sub	sp, #32
 8016fa4:	af02      	add	r7, sp, #8
 8016fa6:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8016fa8:	f06f 0360 	mvn.w	r3, #96	@ 0x60
 8016fac:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 8016fae:	2300      	movs	r3, #0
 8016fb0:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 8016fb2:	2100      	movs	r1, #0
 8016fb4:	6878      	ldr	r0, [r7, #4]
 8016fb6:	f7ff feee 	bl	8016d96 <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 8016fba:	f107 020c 	add.w	r2, r7, #12
 8016fbe:	f107 0110 	add.w	r1, r7, #16
 8016fc2:	2364      	movs	r3, #100	@ 0x64
 8016fc4:	9300      	str	r3, [sp, #0]
 8016fc6:	2304      	movs	r3, #4
 8016fc8:	6878      	ldr	r0, [r7, #4]
 8016fca:	f7ff ff01 	bl	8016dd0 <SPIF_TransmitReceive>
 8016fce:	4603      	mov	r3, r0
 8016fd0:	f083 0301 	eor.w	r3, r3, #1
 8016fd4:	b2db      	uxtb	r3, r3
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d004      	beq.n	8016fe4 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 8016fda:	2101      	movs	r1, #1
 8016fdc:	6878      	ldr	r0, [r7, #4]
 8016fde:	f7ff feda 	bl	8016d96 <SPIF_CsPin>
      break;
 8016fe2:	e16f      	b.n	80172c4 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8016fe4:	2101      	movs	r1, #1
 8016fe6:	6878      	ldr	r0, [r7, #4]
 8016fe8:	f7ff fed5 	bl	8016d96 <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8016fec:	7b7a      	ldrb	r2, [r7, #13]
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 8016ff2:	7bba      	ldrb	r2, [r7, #14]
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8016ff8:	7bfa      	ldrb	r2, [r7, #15]
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	7a1b      	ldrb	r3, [r3, #8]
 8017002:	2bef      	cmp	r3, #239	@ 0xef
 8017004:	f000 80f0 	beq.w	80171e8 <SPIF_FindChip+0x248>
 8017008:	2bef      	cmp	r3, #239	@ 0xef
 801700a:	f300 80e9 	bgt.w	80171e0 <SPIF_FindChip+0x240>
 801700e:	2bc8      	cmp	r3, #200	@ 0xc8
 8017010:	f300 80e6 	bgt.w	80171e0 <SPIF_FindChip+0x240>
 8017014:	2b85      	cmp	r3, #133	@ 0x85
 8017016:	da0c      	bge.n	8017032 <SPIF_FindChip+0x92>
 8017018:	2b62      	cmp	r3, #98	@ 0x62
 801701a:	f000 80e7 	beq.w	80171ec <SPIF_FindChip+0x24c>
 801701e:	2b62      	cmp	r3, #98	@ 0x62
 8017020:	f300 80de 	bgt.w	80171e0 <SPIF_FindChip+0x240>
 8017024:	2b20      	cmp	r3, #32
 8017026:	f300 80d9 	bgt.w	80171dc <SPIF_FindChip+0x23c>
 801702a:	2b00      	cmp	r3, #0
 801702c:	f300 8090 	bgt.w	8017150 <SPIF_FindChip+0x1b0>
 8017030:	e0d6      	b.n	80171e0 <SPIF_FindChip+0x240>
 8017032:	3b85      	subs	r3, #133	@ 0x85
 8017034:	2b43      	cmp	r3, #67	@ 0x43
 8017036:	f200 80d3 	bhi.w	80171e0 <SPIF_FindChip+0x240>
 801703a:	a201      	add	r2, pc, #4	@ (adr r2, 8017040 <SPIF_FindChip+0xa0>)
 801703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017040:	080171f1 	.word	0x080171f1
 8017044:	080171e1 	.word	0x080171e1
 8017048:	080171e1 	.word	0x080171e1
 801704c:	080171e1 	.word	0x080171e1
 8017050:	080171f1 	.word	0x080171f1
 8017054:	080171e1 	.word	0x080171e1
 8017058:	080171e1 	.word	0x080171e1
 801705c:	080171f1 	.word	0x080171f1
 8017060:	080171e1 	.word	0x080171e1
 8017064:	080171e1 	.word	0x080171e1
 8017068:	080171e1 	.word	0x080171e1
 801706c:	080171e1 	.word	0x080171e1
 8017070:	080171e1 	.word	0x080171e1
 8017074:	080171e1 	.word	0x080171e1
 8017078:	080171e1 	.word	0x080171e1
 801707c:	080171e1 	.word	0x080171e1
 8017080:	080171e1 	.word	0x080171e1
 8017084:	080171e1 	.word	0x080171e1
 8017088:	080171e1 	.word	0x080171e1
 801708c:	080171e1 	.word	0x080171e1
 8017090:	080171e1 	.word	0x080171e1
 8017094:	080171e1 	.word	0x080171e1
 8017098:	080171e1 	.word	0x080171e1
 801709c:	080171e1 	.word	0x080171e1
 80170a0:	080171f1 	.word	0x080171f1
 80170a4:	080171e1 	.word	0x080171e1
 80170a8:	080171e1 	.word	0x080171e1
 80170ac:	080171e1 	.word	0x080171e1
 80170b0:	080171f1 	.word	0x080171f1
 80170b4:	080171e1 	.word	0x080171e1
 80170b8:	080171e1 	.word	0x080171e1
 80170bc:	080171e1 	.word	0x080171e1
 80170c0:	080171e1 	.word	0x080171e1
 80170c4:	080171e1 	.word	0x080171e1
 80170c8:	080171e1 	.word	0x080171e1
 80170cc:	080171e1 	.word	0x080171e1
 80170d0:	080171e1 	.word	0x080171e1
 80170d4:	080171e1 	.word	0x080171e1
 80170d8:	080171e1 	.word	0x080171e1
 80170dc:	080171e1 	.word	0x080171e1
 80170e0:	080171f1 	.word	0x080171f1
 80170e4:	080171e1 	.word	0x080171e1
 80170e8:	080171e1 	.word	0x080171e1
 80170ec:	080171e1 	.word	0x080171e1
 80170f0:	080171e1 	.word	0x080171e1
 80170f4:	080171e1 	.word	0x080171e1
 80170f8:	080171e1 	.word	0x080171e1
 80170fc:	080171e1 	.word	0x080171e1
 8017100:	080171e1 	.word	0x080171e1
 8017104:	080171e1 	.word	0x080171e1
 8017108:	080171e1 	.word	0x080171e1
 801710c:	080171e1 	.word	0x080171e1
 8017110:	080171e1 	.word	0x080171e1
 8017114:	080171e1 	.word	0x080171e1
 8017118:	080171e1 	.word	0x080171e1
 801711c:	080171e1 	.word	0x080171e1
 8017120:	080171e1 	.word	0x080171e1
 8017124:	080171e1 	.word	0x080171e1
 8017128:	080171f1 	.word	0x080171f1
 801712c:	080171e1 	.word	0x080171e1
 8017130:	080171e1 	.word	0x080171e1
 8017134:	080171f1 	.word	0x080171f1
 8017138:	080171e1 	.word	0x080171e1
 801713c:	080171e1 	.word	0x080171e1
 8017140:	080171e1 	.word	0x080171e1
 8017144:	080171e1 	.word	0x080171e1
 8017148:	080171e1 	.word	0x080171e1
 801714c:	080171f1 	.word	0x080171f1
 8017150:	3b01      	subs	r3, #1
 8017152:	2b1f      	cmp	r3, #31
 8017154:	d844      	bhi.n	80171e0 <SPIF_FindChip+0x240>
 8017156:	a201      	add	r2, pc, #4	@ (adr r2, 801715c <SPIF_FindChip+0x1bc>)
 8017158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801715c:	080171f5 	.word	0x080171f5
 8017160:	080171e1 	.word	0x080171e1
 8017164:	080171e1 	.word	0x080171e1
 8017168:	080171f5 	.word	0x080171f5
 801716c:	080171e1 	.word	0x080171e1
 8017170:	080171e1 	.word	0x080171e1
 8017174:	080171e1 	.word	0x080171e1
 8017178:	080171e1 	.word	0x080171e1
 801717c:	080171e1 	.word	0x080171e1
 8017180:	080171e1 	.word	0x080171e1
 8017184:	080171e1 	.word	0x080171e1
 8017188:	080171e1 	.word	0x080171e1
 801718c:	080171e1 	.word	0x080171e1
 8017190:	080171e1 	.word	0x080171e1
 8017194:	080171e1 	.word	0x080171e1
 8017198:	080171e1 	.word	0x080171e1
 801719c:	080171e1 	.word	0x080171e1
 80171a0:	080171e1 	.word	0x080171e1
 80171a4:	080171e1 	.word	0x080171e1
 80171a8:	080171e1 	.word	0x080171e1
 80171ac:	080171e1 	.word	0x080171e1
 80171b0:	080171e1 	.word	0x080171e1
 80171b4:	080171e1 	.word	0x080171e1
 80171b8:	080171e1 	.word	0x080171e1
 80171bc:	080171e1 	.word	0x080171e1
 80171c0:	080171e1 	.word	0x080171e1
 80171c4:	080171e1 	.word	0x080171e1
 80171c8:	080171f5 	.word	0x080171f5
 80171cc:	080171e1 	.word	0x080171e1
 80171d0:	080171e1 	.word	0x080171e1
 80171d4:	080171e1 	.word	0x080171e1
 80171d8:	080171f5 	.word	0x080171f5
 80171dc:	2b37      	cmp	r3, #55	@ 0x37
 80171de:	d00b      	beq.n	80171f8 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	2200      	movs	r2, #0
 80171e4:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 80171e6:	e008      	b.n	80171fa <SPIF_FindChip+0x25a>
      break;
 80171e8:	bf00      	nop
 80171ea:	e006      	b.n	80171fa <SPIF_FindChip+0x25a>
      break;
 80171ec:	bf00      	nop
 80171ee:	e004      	b.n	80171fa <SPIF_FindChip+0x25a>
      break;
 80171f0:	bf00      	nop
 80171f2:	e002      	b.n	80171fa <SPIF_FindChip+0x25a>
      break;
 80171f4:	bf00      	nop
 80171f6:	e000      	b.n	80171fa <SPIF_FindChip+0x25a>
      break;
 80171f8:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	7a5b      	ldrb	r3, [r3, #9]
 80171fe:	3b11      	subs	r3, #17
 8017200:	2b0f      	cmp	r3, #15
 8017202:	d84e      	bhi.n	80172a2 <SPIF_FindChip+0x302>
 8017204:	a201      	add	r2, pc, #4	@ (adr r2, 801720c <SPIF_FindChip+0x26c>)
 8017206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801720a:	bf00      	nop
 801720c:	0801724d 	.word	0x0801724d
 8017210:	08017255 	.word	0x08017255
 8017214:	0801725d 	.word	0x0801725d
 8017218:	08017265 	.word	0x08017265
 801721c:	0801726d 	.word	0x0801726d
 8017220:	08017275 	.word	0x08017275
 8017224:	0801727d 	.word	0x0801727d
 8017228:	08017285 	.word	0x08017285
 801722c:	0801728f 	.word	0x0801728f
 8017230:	080172a3 	.word	0x080172a3
 8017234:	080172a3 	.word	0x080172a3
 8017238:	080172a3 	.word	0x080172a3
 801723c:	080172a3 	.word	0x080172a3
 8017240:	080172a3 	.word	0x080172a3
 8017244:	080172a3 	.word	0x080172a3
 8017248:	08017299 	.word	0x08017299
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	2202      	movs	r2, #2
 8017250:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 8017252:	e02a      	b.n	80172aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	2204      	movs	r2, #4
 8017258:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 801725a:	e026      	b.n	80172aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	2208      	movs	r2, #8
 8017260:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 8017262:	e022      	b.n	80172aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	2210      	movs	r2, #16
 8017268:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 801726a:	e01e      	b.n	80172aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	2220      	movs	r2, #32
 8017270:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 8017272:	e01a      	b.n	80172aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	2240      	movs	r2, #64	@ 0x40
 8017278:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 801727a:	e016      	b.n	80172aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	2280      	movs	r2, #128	@ 0x80
 8017280:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 8017282:	e012      	b.n	80172aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801728a:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 801728c:	e00d      	b.n	80172aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017294:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 8017296:	e008      	b.n	80172aa <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801729e:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 80172a0:	e003      	b.n	80172aa <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	2200      	movs	r2, #0
 80172a6:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 80172a8:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	69db      	ldr	r3, [r3, #28]
 80172ae:	011a      	lsls	r2, r3, #4
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	699b      	ldr	r3, [r3, #24]
 80172b8:	031b      	lsls	r3, r3, #12
 80172ba:	0a1a      	lsrs	r2, r3, #8
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 80172c0:	2301      	movs	r3, #1
 80172c2:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 80172c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80172c6:	4618      	mov	r0, r3
 80172c8:	3718      	adds	r7, #24
 80172ca:	46bd      	mov	sp, r7
 80172cc:	bd80      	pop	{r7, pc}
 80172ce:	bf00      	nop

080172d0 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b08a      	sub	sp, #40	@ 0x28
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	60f8      	str	r0, [r7, #12]
 80172d8:	60b9      	str	r1, [r7, #8]
 80172da:	607a      	str	r2, [r7, #4]
 80172dc:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80172de:	2300      	movs	r3, #0
 80172e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 80172e4:	2300      	movs	r3, #0
 80172e6:	623b      	str	r3, [r7, #32]
 80172e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172ea:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80172ee:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	695b      	ldr	r3, [r3, #20]
 80172f4:	68ba      	ldr	r2, [r7, #8]
 80172f6:	429a      	cmp	r2, r3
 80172f8:	f080 8084 	bcs.w	8017404 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 80172fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172fe:	2bff      	cmp	r3, #255	@ 0xff
 8017300:	f200 8082 	bhi.w	8017408 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8017304:	683a      	ldr	r2, [r7, #0]
 8017306:	69fb      	ldr	r3, [r7, #28]
 8017308:	429a      	cmp	r2, r3
 801730a:	d901      	bls.n	8017310 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 801730c:	69fb      	ldr	r3, [r7, #28]
 801730e:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 8017310:	68bb      	ldr	r3, [r7, #8]
 8017312:	021b      	lsls	r3, r3, #8
 8017314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017316:	4413      	add	r3, r2
 8017318:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 801731a:	68f8      	ldr	r0, [r7, #12]
 801731c:	f7ff fdac 	bl	8016e78 <SPIF_WriteEnable>
 8017320:	4603      	mov	r3, r0
 8017322:	f083 0301 	eor.w	r3, r3, #1
 8017326:	b2db      	uxtb	r3, r3
 8017328:	2b00      	cmp	r3, #0
 801732a:	d16f      	bne.n	801740c <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 801732c:	2100      	movs	r1, #0
 801732e:	68f8      	ldr	r0, [r7, #12]
 8017330:	f7ff fd31 	bl	8016d96 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	69db      	ldr	r3, [r3, #28]
 8017338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801733c:	d322      	bcc.n	8017384 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 801733e:	2312      	movs	r3, #18
 8017340:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 8017342:	6a3b      	ldr	r3, [r7, #32]
 8017344:	0e1b      	lsrs	r3, r3, #24
 8017346:	b2db      	uxtb	r3, r3
 8017348:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 801734a:	6a3b      	ldr	r3, [r7, #32]
 801734c:	0c1b      	lsrs	r3, r3, #16
 801734e:	b2db      	uxtb	r3, r3
 8017350:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 8017352:	6a3b      	ldr	r3, [r7, #32]
 8017354:	0a1b      	lsrs	r3, r3, #8
 8017356:	b2db      	uxtb	r3, r3
 8017358:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 801735a:	6a3b      	ldr	r3, [r7, #32]
 801735c:	b2db      	uxtb	r3, r3
 801735e:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017360:	f107 0114 	add.w	r1, r7, #20
 8017364:	2364      	movs	r3, #100	@ 0x64
 8017366:	2205      	movs	r2, #5
 8017368:	68f8      	ldr	r0, [r7, #12]
 801736a:	f7ff fd4f 	bl	8016e0c <SPIF_Transmit>
 801736e:	4603      	mov	r3, r0
 8017370:	f083 0301 	eor.w	r3, r3, #1
 8017374:	b2db      	uxtb	r3, r3
 8017376:	2b00      	cmp	r3, #0
 8017378:	d023      	beq.n	80173c2 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 801737a:	2101      	movs	r1, #1
 801737c:	68f8      	ldr	r0, [r7, #12]
 801737e:	f7ff fd0a 	bl	8016d96 <SPIF_CsPin>
        break;
 8017382:	e044      	b.n	801740e <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8017384:	2302      	movs	r3, #2
 8017386:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 8017388:	6a3b      	ldr	r3, [r7, #32]
 801738a:	0c1b      	lsrs	r3, r3, #16
 801738c:	b2db      	uxtb	r3, r3
 801738e:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 8017390:	6a3b      	ldr	r3, [r7, #32]
 8017392:	0a1b      	lsrs	r3, r3, #8
 8017394:	b2db      	uxtb	r3, r3
 8017396:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8017398:	6a3b      	ldr	r3, [r7, #32]
 801739a:	b2db      	uxtb	r3, r3
 801739c:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 801739e:	f107 0114 	add.w	r1, r7, #20
 80173a2:	2364      	movs	r3, #100	@ 0x64
 80173a4:	2204      	movs	r2, #4
 80173a6:	68f8      	ldr	r0, [r7, #12]
 80173a8:	f7ff fd30 	bl	8016e0c <SPIF_Transmit>
 80173ac:	4603      	mov	r3, r0
 80173ae:	f083 0301 	eor.w	r3, r3, #1
 80173b2:	b2db      	uxtb	r3, r3
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d004      	beq.n	80173c2 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 80173b8:	2101      	movs	r1, #1
 80173ba:	68f8      	ldr	r0, [r7, #12]
 80173bc:	f7ff fceb 	bl	8016d96 <SPIF_CsPin>
        break;
 80173c0:	e025      	b.n	801740e <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 80173c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80173c6:	683a      	ldr	r2, [r7, #0]
 80173c8:	6879      	ldr	r1, [r7, #4]
 80173ca:	68f8      	ldr	r0, [r7, #12]
 80173cc:	f7ff fd1e 	bl	8016e0c <SPIF_Transmit>
 80173d0:	4603      	mov	r3, r0
 80173d2:	f083 0301 	eor.w	r3, r3, #1
 80173d6:	b2db      	uxtb	r3, r3
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d004      	beq.n	80173e6 <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 80173dc:	2101      	movs	r1, #1
 80173de:	68f8      	ldr	r0, [r7, #12]
 80173e0:	f7ff fcd9 	bl	8016d96 <SPIF_CsPin>
      break;
 80173e4:	e013      	b.n	801740e <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 80173e6:	2101      	movs	r1, #1
 80173e8:	68f8      	ldr	r0, [r7, #12]
 80173ea:	f7ff fcd4 	bl	8016d96 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 80173ee:	2164      	movs	r1, #100	@ 0x64
 80173f0:	68f8      	ldr	r0, [r7, #12]
 80173f2:	f7ff fdae 	bl	8016f52 <SPIF_WaitForWriting>
 80173f6:	4603      	mov	r3, r0
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d008      	beq.n	801740e <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 80173fc:	2301      	movs	r3, #1
 80173fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017402:	e004      	b.n	801740e <SPIF_WriteFn+0x13e>
      break;
 8017404:	bf00      	nop
 8017406:	e002      	b.n	801740e <SPIF_WriteFn+0x13e>
      break;
 8017408:	bf00      	nop
 801740a:	e000      	b.n	801740e <SPIF_WriteFn+0x13e>
      break;
 801740c:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 801740e:	68f8      	ldr	r0, [r7, #12]
 8017410:	f7ff fd56 	bl	8016ec0 <SPIF_WriteDisable>
  return retVal;
 8017414:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8017418:	4618      	mov	r0, r3
 801741a:	3728      	adds	r7, #40	@ 0x28
 801741c:	46bd      	mov	sp, r7
 801741e:	bd80      	pop	{r7, pc}

08017420 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8017420:	b580      	push	{r7, lr}
 8017422:	b086      	sub	sp, #24
 8017424:	af00      	add	r7, sp, #0
 8017426:	60f8      	str	r0, [r7, #12]
 8017428:	60b9      	str	r1, [r7, #8]
 801742a:	607a      	str	r2, [r7, #4]
 801742c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801742e:	2300      	movs	r3, #0
 8017430:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 8017432:	2100      	movs	r1, #0
 8017434:	68f8      	ldr	r0, [r7, #12]
 8017436:	f7ff fcae 	bl	8016d96 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	69db      	ldr	r3, [r3, #28]
 801743e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017442:	d322      	bcc.n	801748a <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 8017444:	2313      	movs	r3, #19
 8017446:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 8017448:	68bb      	ldr	r3, [r7, #8]
 801744a:	0e1b      	lsrs	r3, r3, #24
 801744c:	b2db      	uxtb	r3, r3
 801744e:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 8017450:	68bb      	ldr	r3, [r7, #8]
 8017452:	0c1b      	lsrs	r3, r3, #16
 8017454:	b2db      	uxtb	r3, r3
 8017456:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 8017458:	68bb      	ldr	r3, [r7, #8]
 801745a:	0a1b      	lsrs	r3, r3, #8
 801745c:	b2db      	uxtb	r3, r3
 801745e:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 8017460:	68bb      	ldr	r3, [r7, #8]
 8017462:	b2db      	uxtb	r3, r3
 8017464:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017466:	f107 0110 	add.w	r1, r7, #16
 801746a:	2364      	movs	r3, #100	@ 0x64
 801746c:	2205      	movs	r2, #5
 801746e:	68f8      	ldr	r0, [r7, #12]
 8017470:	f7ff fccc 	bl	8016e0c <SPIF_Transmit>
 8017474:	4603      	mov	r3, r0
 8017476:	f083 0301 	eor.w	r3, r3, #1
 801747a:	b2db      	uxtb	r3, r3
 801747c:	2b00      	cmp	r3, #0
 801747e:	d023      	beq.n	80174c8 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8017480:	2101      	movs	r1, #1
 8017482:	68f8      	ldr	r0, [r7, #12]
 8017484:	f7ff fc87 	bl	8016d96 <SPIF_CsPin>
        break;
 8017488:	e036      	b.n	80174f8 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 801748a:	2303      	movs	r3, #3
 801748c:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 801748e:	68bb      	ldr	r3, [r7, #8]
 8017490:	0c1b      	lsrs	r3, r3, #16
 8017492:	b2db      	uxtb	r3, r3
 8017494:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8017496:	68bb      	ldr	r3, [r7, #8]
 8017498:	0a1b      	lsrs	r3, r3, #8
 801749a:	b2db      	uxtb	r3, r3
 801749c:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 801749e:	68bb      	ldr	r3, [r7, #8]
 80174a0:	b2db      	uxtb	r3, r3
 80174a2:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80174a4:	f107 0110 	add.w	r1, r7, #16
 80174a8:	2364      	movs	r3, #100	@ 0x64
 80174aa:	2204      	movs	r2, #4
 80174ac:	68f8      	ldr	r0, [r7, #12]
 80174ae:	f7ff fcad 	bl	8016e0c <SPIF_Transmit>
 80174b2:	4603      	mov	r3, r0
 80174b4:	f083 0301 	eor.w	r3, r3, #1
 80174b8:	b2db      	uxtb	r3, r3
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d004      	beq.n	80174c8 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 80174be:	2101      	movs	r1, #1
 80174c0:	68f8      	ldr	r0, [r7, #12]
 80174c2:	f7ff fc68 	bl	8016d96 <SPIF_CsPin>
        break;
 80174c6:	e017      	b.n	80174f8 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 80174c8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80174cc:	683a      	ldr	r2, [r7, #0]
 80174ce:	6879      	ldr	r1, [r7, #4]
 80174d0:	68f8      	ldr	r0, [r7, #12]
 80174d2:	f7ff fcb6 	bl	8016e42 <SPIF_Receive>
 80174d6:	4603      	mov	r3, r0
 80174d8:	f083 0301 	eor.w	r3, r3, #1
 80174dc:	b2db      	uxtb	r3, r3
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d004      	beq.n	80174ec <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 80174e2:	2101      	movs	r1, #1
 80174e4:	68f8      	ldr	r0, [r7, #12]
 80174e6:	f7ff fc56 	bl	8016d96 <SPIF_CsPin>
      break;
 80174ea:	e005      	b.n	80174f8 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 80174ec:	2101      	movs	r1, #1
 80174ee:	68f8      	ldr	r0, [r7, #12]
 80174f0:	f7ff fc51 	bl	8016d96 <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 80174f4:	2301      	movs	r3, #1
 80174f6:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 80174f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80174fa:	4618      	mov	r0, r3
 80174fc:	3718      	adds	r7, #24
 80174fe:	46bd      	mov	sp, r7
 8017500:	bd80      	pop	{r7, pc}

08017502 <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8017502:	b580      	push	{r7, lr}
 8017504:	b086      	sub	sp, #24
 8017506:	af00      	add	r7, sp, #0
 8017508:	60f8      	str	r0, [r7, #12]
 801750a:	60b9      	str	r1, [r7, #8]
 801750c:	607a      	str	r2, [r7, #4]
 801750e:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8017510:	2300      	movs	r3, #0
 8017512:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	2b00      	cmp	r3, #0
 8017518:	d03a      	beq.n	8017590 <SPIF_Init+0x8e>
 801751a:	68bb      	ldr	r3, [r7, #8]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d037      	beq.n	8017590 <SPIF_Init+0x8e>
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d034      	beq.n	8017590 <SPIF_Init+0x8e>
 8017526:	68fb      	ldr	r3, [r7, #12]
 8017528:	7a9b      	ldrb	r3, [r3, #10]
 801752a:	2b01      	cmp	r3, #1
 801752c:	d030      	beq.n	8017590 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 801752e:	2220      	movs	r2, #32
 8017530:	2100      	movs	r1, #0
 8017532:	68f8      	ldr	r0, [r7, #12]
 8017534:	f003 ff01 	bl	801b33a <memset>
    Handle->HSpi = HSpi;
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	68ba      	ldr	r2, [r7, #8]
 801753c:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	687a      	ldr	r2, [r7, #4]
 8017542:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 8017544:	887a      	ldrh	r2, [r7, #2]
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 801754a:	2101      	movs	r1, #1
 801754c:	68f8      	ldr	r0, [r7, #12]
 801754e:	f7ff fc22 	bl	8016d96 <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 8017552:	e002      	b.n	801755a <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 8017554:	2001      	movs	r0, #1
 8017556:	f7ff fbf3 	bl	8016d40 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 801755a:	f7ef fe27 	bl	80071ac <HAL_GetTick>
 801755e:	4603      	mov	r3, r0
 8017560:	2b13      	cmp	r3, #19
 8017562:	d9f7      	bls.n	8017554 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 8017564:	68f8      	ldr	r0, [r7, #12]
 8017566:	f7ff fcab 	bl	8016ec0 <SPIF_WriteDisable>
 801756a:	4603      	mov	r3, r0
 801756c:	f083 0301 	eor.w	r3, r3, #1
 8017570:	b2db      	uxtb	r3, r3
 8017572:	2b00      	cmp	r3, #0
 8017574:	d10b      	bne.n	801758e <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 8017576:	68f8      	ldr	r0, [r7, #12]
 8017578:	f7ff fd12 	bl	8016fa0 <SPIF_FindChip>
 801757c:	4603      	mov	r3, r0
 801757e:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8017580:	7dfb      	ldrb	r3, [r7, #23]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d004      	beq.n	8017590 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	2201      	movs	r2, #1
 801758a:	729a      	strb	r2, [r3, #10]
 801758c:	e000      	b.n	8017590 <SPIF_Init+0x8e>
      break;
 801758e:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8017590:	7dfb      	ldrb	r3, [r7, #23]
}
 8017592:	4618      	mov	r0, r3
 8017594:	3718      	adds	r7, #24
 8017596:	46bd      	mov	sp, r7
 8017598:	bd80      	pop	{r7, pc}

0801759a <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 801759a:	b580      	push	{r7, lr}
 801759c:	b086      	sub	sp, #24
 801759e:	af00      	add	r7, sp, #0
 80175a0:	6078      	str	r0, [r7, #4]
 80175a2:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 80175a4:	6878      	ldr	r0, [r7, #4]
 80175a6:	f7ff fbd6 	bl	8016d56 <SPIF_Lock>
  bool retVal = false;
 80175aa:	2300      	movs	r3, #0
 80175ac:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 80175ae:	683b      	ldr	r3, [r7, #0]
 80175b0:	031b      	lsls	r3, r3, #12
 80175b2:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	699b      	ldr	r3, [r3, #24]
 80175b8:	683a      	ldr	r2, [r7, #0]
 80175ba:	429a      	cmp	r2, r3
 80175bc:	d262      	bcs.n	8017684 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 80175be:	6878      	ldr	r0, [r7, #4]
 80175c0:	f7ff fc5a 	bl	8016e78 <SPIF_WriteEnable>
 80175c4:	4603      	mov	r3, r0
 80175c6:	f083 0301 	eor.w	r3, r3, #1
 80175ca:	b2db      	uxtb	r3, r3
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d15b      	bne.n	8017688 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80175d0:	2100      	movs	r1, #0
 80175d2:	6878      	ldr	r0, [r7, #4]
 80175d4:	f7ff fbdf 	bl	8016d96 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	69db      	ldr	r3, [r3, #28]
 80175dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80175e0:	d322      	bcc.n	8017628 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 80175e2:	2321      	movs	r3, #33	@ 0x21
 80175e4:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 80175e6:	693b      	ldr	r3, [r7, #16]
 80175e8:	0e1b      	lsrs	r3, r3, #24
 80175ea:	b2db      	uxtb	r3, r3
 80175ec:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 80175ee:	693b      	ldr	r3, [r7, #16]
 80175f0:	0c1b      	lsrs	r3, r3, #16
 80175f2:	b2db      	uxtb	r3, r3
 80175f4:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 80175f6:	693b      	ldr	r3, [r7, #16]
 80175f8:	0a1b      	lsrs	r3, r3, #8
 80175fa:	b2db      	uxtb	r3, r3
 80175fc:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 80175fe:	693b      	ldr	r3, [r7, #16]
 8017600:	b2db      	uxtb	r3, r3
 8017602:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017604:	f107 0108 	add.w	r1, r7, #8
 8017608:	2364      	movs	r3, #100	@ 0x64
 801760a:	2205      	movs	r2, #5
 801760c:	6878      	ldr	r0, [r7, #4]
 801760e:	f7ff fbfd 	bl	8016e0c <SPIF_Transmit>
 8017612:	4603      	mov	r3, r0
 8017614:	f083 0301 	eor.w	r3, r3, #1
 8017618:	b2db      	uxtb	r3, r3
 801761a:	2b00      	cmp	r3, #0
 801761c:	d023      	beq.n	8017666 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 801761e:	2101      	movs	r1, #1
 8017620:	6878      	ldr	r0, [r7, #4]
 8017622:	f7ff fbb8 	bl	8016d96 <SPIF_CsPin>
        break;
 8017626:	e030      	b.n	801768a <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 8017628:	2320      	movs	r3, #32
 801762a:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 801762c:	693b      	ldr	r3, [r7, #16]
 801762e:	0c1b      	lsrs	r3, r3, #16
 8017630:	b2db      	uxtb	r3, r3
 8017632:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8017634:	693b      	ldr	r3, [r7, #16]
 8017636:	0a1b      	lsrs	r3, r3, #8
 8017638:	b2db      	uxtb	r3, r3
 801763a:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 801763c:	693b      	ldr	r3, [r7, #16]
 801763e:	b2db      	uxtb	r3, r3
 8017640:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8017642:	f107 0108 	add.w	r1, r7, #8
 8017646:	2364      	movs	r3, #100	@ 0x64
 8017648:	2204      	movs	r2, #4
 801764a:	6878      	ldr	r0, [r7, #4]
 801764c:	f7ff fbde 	bl	8016e0c <SPIF_Transmit>
 8017650:	4603      	mov	r3, r0
 8017652:	f083 0301 	eor.w	r3, r3, #1
 8017656:	b2db      	uxtb	r3, r3
 8017658:	2b00      	cmp	r3, #0
 801765a:	d004      	beq.n	8017666 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 801765c:	2101      	movs	r1, #1
 801765e:	6878      	ldr	r0, [r7, #4]
 8017660:	f7ff fb99 	bl	8016d96 <SPIF_CsPin>
        break;
 8017664:	e011      	b.n	801768a <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8017666:	2101      	movs	r1, #1
 8017668:	6878      	ldr	r0, [r7, #4]
 801766a:	f7ff fb94 	bl	8016d96 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 801766e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017672:	6878      	ldr	r0, [r7, #4]
 8017674:	f7ff fc6d 	bl	8016f52 <SPIF_WaitForWriting>
 8017678:	4603      	mov	r3, r0
 801767a:	2b00      	cmp	r3, #0
 801767c:	d005      	beq.n	801768a <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 801767e:	2301      	movs	r3, #1
 8017680:	75fb      	strb	r3, [r7, #23]
 8017682:	e002      	b.n	801768a <SPIF_EraseSector+0xf0>
      break;
 8017684:	bf00      	nop
 8017686:	e000      	b.n	801768a <SPIF_EraseSector+0xf0>
      break;
 8017688:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 801768a:	6878      	ldr	r0, [r7, #4]
 801768c:	f7ff fc18 	bl	8016ec0 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8017690:	6878      	ldr	r0, [r7, #4]
 8017692:	f7ff fb73 	bl	8016d7c <SPIF_UnLock>
  return retVal;
 8017696:	7dfb      	ldrb	r3, [r7, #23]
}
 8017698:	4618      	mov	r0, r3
 801769a:	3718      	adds	r7, #24
 801769c:	46bd      	mov	sp, r7
 801769e:	bd80      	pop	{r7, pc}

080176a0 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b088      	sub	sp, #32
 80176a4:	af02      	add	r7, sp, #8
 80176a6:	60f8      	str	r0, [r7, #12]
 80176a8:	60b9      	str	r1, [r7, #8]
 80176aa:	607a      	str	r2, [r7, #4]
 80176ac:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 80176ae:	68f8      	ldr	r0, [r7, #12]
 80176b0:	f7ff fb51 	bl	8016d56 <SPIF_Lock>
  bool retVal = false;
 80176b4:	2300      	movs	r3, #0
 80176b6:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 80176b8:	6a3b      	ldr	r3, [r7, #32]
 80176ba:	9300      	str	r3, [sp, #0]
 80176bc:	683b      	ldr	r3, [r7, #0]
 80176be:	687a      	ldr	r2, [r7, #4]
 80176c0:	68b9      	ldr	r1, [r7, #8]
 80176c2:	68f8      	ldr	r0, [r7, #12]
 80176c4:	f7ff fe04 	bl	80172d0 <SPIF_WriteFn>
 80176c8:	4603      	mov	r3, r0
 80176ca:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 80176cc:	68f8      	ldr	r0, [r7, #12]
 80176ce:	f7ff fb55 	bl	8016d7c <SPIF_UnLock>
  return retVal;
 80176d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80176d4:	4618      	mov	r0, r3
 80176d6:	3718      	adds	r7, #24
 80176d8:	46bd      	mov	sp, r7
 80176da:	bd80      	pop	{r7, pc}

080176dc <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80176dc:	b580      	push	{r7, lr}
 80176de:	b088      	sub	sp, #32
 80176e0:	af00      	add	r7, sp, #0
 80176e2:	60f8      	str	r0, [r7, #12]
 80176e4:	60b9      	str	r1, [r7, #8]
 80176e6:	607a      	str	r2, [r7, #4]
 80176e8:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 80176ea:	68f8      	ldr	r0, [r7, #12]
 80176ec:	f7ff fb33 	bl	8016d56 <SPIF_Lock>
  bool retVal = false;
 80176f0:	2300      	movs	r3, #0
 80176f2:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 80176f4:	68bb      	ldr	r3, [r7, #8]
 80176f6:	021b      	lsls	r3, r3, #8
 80176f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80176fa:	4413      	add	r3, r2
 80176fc:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 80176fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017700:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8017704:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 8017706:	683a      	ldr	r2, [r7, #0]
 8017708:	697b      	ldr	r3, [r7, #20]
 801770a:	429a      	cmp	r2, r3
 801770c:	d901      	bls.n	8017712 <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 801770e:	697b      	ldr	r3, [r7, #20]
 8017710:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 8017712:	683b      	ldr	r3, [r7, #0]
 8017714:	687a      	ldr	r2, [r7, #4]
 8017716:	69b9      	ldr	r1, [r7, #24]
 8017718:	68f8      	ldr	r0, [r7, #12]
 801771a:	f7ff fe81 	bl	8017420 <SPIF_ReadFn>
 801771e:	4603      	mov	r3, r0
 8017720:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 8017722:	68f8      	ldr	r0, [r7, #12]
 8017724:	f7ff fb2a 	bl	8016d7c <SPIF_UnLock>
  return retVal;
 8017728:	7ffb      	ldrb	r3, [r7, #31]
}
 801772a:	4618      	mov	r0, r3
 801772c:	3720      	adds	r7, #32
 801772e:	46bd      	mov	sp, r7
 8017730:	bd80      	pop	{r7, pc}
	...

08017734 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8017734:	b480      	push	{r7}
 8017736:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8017738:	4b03      	ldr	r3, [pc, #12]	@ (8017748 <LL_FLASH_GetUDN+0x14>)
 801773a:	681b      	ldr	r3, [r3, #0]
}
 801773c:	4618      	mov	r0, r3
 801773e:	46bd      	mov	sp, r7
 8017740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017744:	4770      	bx	lr
 8017746:	bf00      	nop
 8017748:	1fff7580 	.word	0x1fff7580

0801774c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 801774c:	b480      	push	{r7}
 801774e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8017750:	4b03      	ldr	r3, [pc, #12]	@ (8017760 <LL_FLASH_GetDeviceID+0x14>)
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	b2db      	uxtb	r3, r3
}
 8017756:	4618      	mov	r0, r3
 8017758:	46bd      	mov	sp, r7
 801775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801775e:	4770      	bx	lr
 8017760:	1fff7584 	.word	0x1fff7584

08017764 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8017764:	b480      	push	{r7}
 8017766:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8017768:	4b03      	ldr	r3, [pc, #12]	@ (8017778 <LL_FLASH_GetSTCompanyID+0x14>)
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	0a1b      	lsrs	r3, r3, #8
}
 801776e:	4618      	mov	r0, r3
 8017770:	46bd      	mov	sp, r7
 8017772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017776:	4770      	bx	lr
 8017778:	1fff7584 	.word	0x1fff7584

0801777c <APP_BLE_Init>:
/* USER CODE BEGIN EV */
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 801777c:	b5b0      	push	{r4, r5, r7, lr}
 801777e:	b090      	sub	sp, #64	@ 0x40
 8017780:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017782:	2392      	movs	r3, #146	@ 0x92
 8017784:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8017788:	4b25      	ldr	r3, [pc, #148]	@ (8017820 <APP_BLE_Init+0xa4>)
 801778a:	1d3c      	adds	r4, r7, #4
 801778c:	461d      	mov	r5, r3
 801778e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801779a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801779e:	c403      	stmia	r4!, {r0, r1}
 80177a0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80177a2:	f000 f921 	bl	80179e8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80177a6:	2101      	movs	r1, #1
 80177a8:	2002      	movs	r0, #2
 80177aa:	f001 fc03 	bl	8018fb4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80177ae:	4a1d      	ldr	r2, [pc, #116]	@ (8017824 <APP_BLE_Init+0xa8>)
 80177b0:	2100      	movs	r1, #0
 80177b2:	2002      	movs	r0, #2
 80177b4:	f001 fd2a 	bl	801920c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80177b8:	1d3b      	adds	r3, r7, #4
 80177ba:	4618      	mov	r0, r3
 80177bc:	f7fe fbcc 	bl	8015f58 <SHCI_C2_BLE_Init>
 80177c0:	4603      	mov	r3, r0
 80177c2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 80177c6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d001      	beq.n	80177d2 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80177ce:	f7eb fa85 	bl	8002cdc <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80177d2:	f000 f91f 	bl	8017a14 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80177d6:	f7fe fb19 	bl	8015e0c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80177da:	4b13      	ldr	r3, [pc, #76]	@ (8017828 <APP_BLE_Init+0xac>)
 80177dc:	2200      	movs	r2, #0
 80177de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80177e2:	4b11      	ldr	r3, [pc, #68]	@ (8017828 <APP_BLE_Init+0xac>)
 80177e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80177e8:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80177ea:	4a10      	ldr	r2, [pc, #64]	@ (801782c <APP_BLE_Init+0xb0>)
 80177ec:	2100      	movs	r1, #0
 80177ee:	2001      	movs	r0, #1
 80177f0:	f001 fd0c 	bl	801920c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80177f4:	2006      	movs	r0, #6
 80177f6:	f7fe f97d 	bl	8015af4 <aci_hal_set_radio_activity_mask>
 80177fa:	4603      	mov	r3, r0
 80177fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8017800:	f000 fad4 	bl	8017dac <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8017804:	4b08      	ldr	r3, [pc, #32]	@ (8017828 <APP_BLE_Init+0xac>)
 8017806:	2200      	movs	r2, #0
 8017808:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 801780a:	4b07      	ldr	r3, [pc, #28]	@ (8017828 <APP_BLE_Init+0xac>)
 801780c:	2200      	movs	r2, #0
 801780e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8017810:	2001      	movs	r0, #1
 8017812:	f000 f9b3 	bl	8017b7c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
  /* USER CODE END APP_BLE_Init_2 */

  return;
 8017816:	bf00      	nop
}
 8017818:	3740      	adds	r7, #64	@ 0x40
 801781a:	46bd      	mov	sp, r7
 801781c:	bdb0      	pop	{r4, r5, r7, pc}
 801781e:	bf00      	nop
 8017820:	0801fb54 	.word	0x0801fb54
 8017824:	08016175 	.word	0x08016175
 8017828:	200014dc 	.word	0x200014dc
 801782c:	08017c65 	.word	0x08017c65

08017830 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b08c      	sub	sp, #48	@ 0x30
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8017838:	2392      	movs	r3, #146	@ 0x92
 801783a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  /* PAIRING */

  /* USER CODE BEGIN SVCCTL_App_Notification */
  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	3301      	adds	r3, #1
 8017842:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8017844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017846:	781b      	ldrb	r3, [r3, #0]
 8017848:	2bff      	cmp	r3, #255	@ 0xff
 801784a:	d05c      	beq.n	8017906 <SVCCTL_App_Notification+0xd6>
 801784c:	2bff      	cmp	r3, #255	@ 0xff
 801784e:	f300 80bd 	bgt.w	80179cc <SVCCTL_App_Notification+0x19c>
 8017852:	2b3e      	cmp	r3, #62	@ 0x3e
 8017854:	d02b      	beq.n	80178ae <SVCCTL_App_Notification+0x7e>
 8017856:	2b3e      	cmp	r3, #62	@ 0x3e
 8017858:	f300 80b8 	bgt.w	80179cc <SVCCTL_App_Notification+0x19c>
 801785c:	2b05      	cmp	r3, #5
 801785e:	d002      	beq.n	8017866 <SVCCTL_App_Notification+0x36>
 8017860:	2b10      	cmp	r3, #16
 8017862:	d020      	beq.n	80178a6 <SVCCTL_App_Notification+0x76>
      /* USER CODE END EVENT_PCKT */

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/
      /* USER CODE END ECODE_DEFAULT*/
      break;
 8017864:	e0b2      	b.n	80179cc <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8017866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017868:	3302      	adds	r3, #2
 801786a:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017872:	b29a      	uxth	r2, r3
 8017874:	4b59      	ldr	r3, [pc, #356]	@ (80179dc <SVCCTL_App_Notification+0x1ac>)
 8017876:	8adb      	ldrh	r3, [r3, #22]
 8017878:	429a      	cmp	r2, r3
 801787a:	d106      	bne.n	801788a <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 801787c:	4b57      	ldr	r3, [pc, #348]	@ (80179dc <SVCCTL_App_Notification+0x1ac>)
 801787e:	2200      	movs	r2, #0
 8017880:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017882:	4b56      	ldr	r3, [pc, #344]	@ (80179dc <SVCCTL_App_Notification+0x1ac>)
 8017884:	2200      	movs	r2, #0
 8017886:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 801788a:	2001      	movs	r0, #1
 801788c:	f000 f976 	bl	8017b7c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8017890:	4b53      	ldr	r3, [pc, #332]	@ (80179e0 <SVCCTL_App_Notification+0x1b0>)
 8017892:	2201      	movs	r2, #1
 8017894:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8017896:	4b51      	ldr	r3, [pc, #324]	@ (80179dc <SVCCTL_App_Notification+0x1ac>)
 8017898:	8ada      	ldrh	r2, [r3, #22]
 801789a:	4b51      	ldr	r3, [pc, #324]	@ (80179e0 <SVCCTL_App_Notification+0x1b0>)
 801789c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 801789e:	4850      	ldr	r0, [pc, #320]	@ (80179e0 <SVCCTL_App_Notification+0x1b0>)
 80178a0:	f000 fa70 	bl	8017d84 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80178a4:	e095      	b.n	80179d2 <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 80178a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178a8:	3302      	adds	r3, #2
 80178aa:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 80178ac:	e091      	b.n	80179d2 <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80178ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178b0:	3302      	adds	r3, #2
 80178b2:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 80178b4:	69bb      	ldr	r3, [r7, #24]
 80178b6:	781b      	ldrb	r3, [r3, #0]
 80178b8:	2b01      	cmp	r3, #1
 80178ba:	d001      	beq.n	80178c0 <SVCCTL_App_Notification+0x90>
 80178bc:	2b03      	cmp	r3, #3
          break;
 80178be:	e021      	b.n	8017904 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80178c0:	69bb      	ldr	r3, [r7, #24]
 80178c2:	3301      	adds	r3, #1
 80178c4:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80178c6:	4b45      	ldr	r3, [pc, #276]	@ (80179dc <SVCCTL_App_Notification+0x1ac>)
 80178c8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80178cc:	2b04      	cmp	r3, #4
 80178ce:	d104      	bne.n	80178da <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80178d0:	4b42      	ldr	r3, [pc, #264]	@ (80179dc <SVCCTL_App_Notification+0x1ac>)
 80178d2:	2206      	movs	r2, #6
 80178d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80178d8:	e003      	b.n	80178e2 <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80178da:	4b40      	ldr	r3, [pc, #256]	@ (80179dc <SVCCTL_App_Notification+0x1ac>)
 80178dc:	2205      	movs	r2, #5
 80178de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80178e2:	697b      	ldr	r3, [r7, #20]
 80178e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80178e8:	b29a      	uxth	r2, r3
 80178ea:	4b3c      	ldr	r3, [pc, #240]	@ (80179dc <SVCCTL_App_Notification+0x1ac>)
 80178ec:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80178ee:	4b3c      	ldr	r3, [pc, #240]	@ (80179e0 <SVCCTL_App_Notification+0x1b0>)
 80178f0:	2200      	movs	r2, #0
 80178f2:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80178f4:	4b39      	ldr	r3, [pc, #228]	@ (80179dc <SVCCTL_App_Notification+0x1ac>)
 80178f6:	8ada      	ldrh	r2, [r3, #22]
 80178f8:	4b39      	ldr	r3, [pc, #228]	@ (80179e0 <SVCCTL_App_Notification+0x1b0>)
 80178fa:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80178fc:	4838      	ldr	r0, [pc, #224]	@ (80179e0 <SVCCTL_App_Notification+0x1b0>)
 80178fe:	f000 fa41 	bl	8017d84 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8017902:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8017904:	e065      	b.n	80179d2 <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8017906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017908:	3302      	adds	r3, #2
 801790a:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 801790c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801790e:	881b      	ldrh	r3, [r3, #0]
 8017910:	b29b      	uxth	r3, r3
 8017912:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8017916:	4293      	cmp	r3, r2
 8017918:	d048      	beq.n	80179ac <SVCCTL_App_Notification+0x17c>
 801791a:	f640 420e 	movw	r2, #3086	@ 0xc0e
 801791e:	4293      	cmp	r3, r2
 8017920:	dc56      	bgt.n	80179d0 <SVCCTL_App_Notification+0x1a0>
 8017922:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017926:	d04b      	beq.n	80179c0 <SVCCTL_App_Notification+0x190>
 8017928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801792c:	dc50      	bgt.n	80179d0 <SVCCTL_App_Notification+0x1a0>
 801792e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8017932:	4293      	cmp	r3, r2
 8017934:	dc4c      	bgt.n	80179d0 <SVCCTL_App_Notification+0x1a0>
 8017936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801793a:	dc04      	bgt.n	8017946 <SVCCTL_App_Notification+0x116>
 801793c:	2b04      	cmp	r3, #4
 801793e:	d041      	beq.n	80179c4 <SVCCTL_App_Notification+0x194>
 8017940:	2b06      	cmp	r3, #6
 8017942:	d039      	beq.n	80179b8 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017944:	e044      	b.n	80179d0 <SVCCTL_App_Notification+0x1a0>
 8017946:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 801794a:	2b09      	cmp	r3, #9
 801794c:	d840      	bhi.n	80179d0 <SVCCTL_App_Notification+0x1a0>
 801794e:	a201      	add	r2, pc, #4	@ (adr r2, 8017954 <SVCCTL_App_Notification+0x124>)
 8017950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017954:	080179a5 	.word	0x080179a5
 8017958:	0801797d 	.word	0x0801797d
 801795c:	080179d1 	.word	0x080179d1
 8017960:	080179d1 	.word	0x080179d1
 8017964:	080179d1 	.word	0x080179d1
 8017968:	080179d1 	.word	0x080179d1
 801796c:	080179c9 	.word	0x080179c9
 8017970:	080179d1 	.word	0x080179d1
 8017974:	08017991 	.word	0x08017991
 8017978:	080179c9 	.word	0x080179c9
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 801797c:	4b17      	ldr	r3, [pc, #92]	@ (80179dc <SVCCTL_App_Notification+0x1ac>)
 801797e:	8adb      	ldrh	r3, [r3, #22]
 8017980:	4918      	ldr	r1, [pc, #96]	@ (80179e4 <SVCCTL_App_Notification+0x1b4>)
 8017982:	4618      	mov	r0, r3
 8017984:	f7fd fab8 	bl	8014ef8 <aci_gap_pass_key_resp>
 8017988:	4603      	mov	r3, r0
 801798a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 801798e:	e01c      	b.n	80179ca <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8017990:	4b12      	ldr	r3, [pc, #72]	@ (80179dc <SVCCTL_App_Notification+0x1ac>)
 8017992:	8adb      	ldrh	r3, [r3, #22]
 8017994:	2101      	movs	r1, #1
 8017996:	4618      	mov	r0, r3
 8017998:	f7fd fc58 	bl	801524c <aci_gap_numeric_comparison_value_confirm_yesno>
 801799c:	4603      	mov	r3, r0
 801799e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 80179a2:	e012      	b.n	80179ca <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80179a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179a6:	3302      	adds	r3, #2
 80179a8:	623b      	str	r3, [r7, #32]
          break;
 80179aa:	e00e      	b.n	80179ca <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80179ac:	4b0b      	ldr	r3, [pc, #44]	@ (80179dc <SVCCTL_App_Notification+0x1ac>)
 80179ae:	8adb      	ldrh	r3, [r3, #22]
 80179b0:	4618      	mov	r0, r3
 80179b2:	f7fd ff5e 	bl	8015872 <aci_gatt_confirm_indication>
        break;
 80179b6:	e008      	b.n	80179ca <SVCCTL_App_Notification+0x19a>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 80179b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179ba:	3302      	adds	r3, #2
 80179bc:	61fb      	str	r3, [r7, #28]
          break;
 80179be:	e004      	b.n	80179ca <SVCCTL_App_Notification+0x19a>
          break;
 80179c0:	bf00      	nop
 80179c2:	e005      	b.n	80179d0 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80179c4:	bf00      	nop
 80179c6:	e003      	b.n	80179d0 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80179c8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80179ca:	e001      	b.n	80179d0 <SVCCTL_App_Notification+0x1a0>
      break;
 80179cc:	bf00      	nop
 80179ce:	e000      	b.n	80179d2 <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80179d0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80179d2:	2301      	movs	r3, #1
}
 80179d4:	4618      	mov	r0, r3
 80179d6:	3730      	adds	r7, #48	@ 0x30
 80179d8:	46bd      	mov	sp, r7
 80179da:	bd80      	pop	{r7, pc}
 80179dc:	200014dc 	.word	0x200014dc
 80179e0:	20001560 	.word	0x20001560
 80179e4:	0001b207 	.word	0x0001b207

080179e8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b082      	sub	sp, #8
 80179ec:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80179ee:	4b06      	ldr	r3, [pc, #24]	@ (8017a08 <Ble_Tl_Init+0x20>)
 80179f0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80179f2:	4b06      	ldr	r3, [pc, #24]	@ (8017a0c <Ble_Tl_Init+0x24>)
 80179f4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80179f6:	463b      	mov	r3, r7
 80179f8:	4619      	mov	r1, r3
 80179fa:	4805      	ldr	r0, [pc, #20]	@ (8017a10 <Ble_Tl_Init+0x28>)
 80179fc:	f7fe fb9e 	bl	801613c <hci_init>

  return;
 8017a00:	bf00      	nop
}
 8017a02:	3708      	adds	r7, #8
 8017a04:	46bd      	mov	sp, r7
 8017a06:	bd80      	pop	{r7, pc}
 8017a08:	200300d8 	.word	0x200300d8
 8017a0c:	08017d15 	.word	0x08017d15
 8017a10:	08017cdd 	.word	0x08017cdd

08017a14 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8017a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a16:	b08d      	sub	sp, #52	@ 0x34
 8017a18:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8017a1a:	2300      	movs	r3, #0
 8017a1c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017a1e:	2392      	movs	r3, #146	@ 0x92
 8017a20:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8017a22:	f7fe f8bb 	bl	8015b9c <hci_reset>
 8017a26:	4603      	mov	r3, r0
 8017a28:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8017a2a:	f000 f8d7 	bl	8017bdc <BleGetBdAddress>
 8017a2e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8017a30:	693a      	ldr	r2, [r7, #16]
 8017a32:	2106      	movs	r1, #6
 8017a34:	2000      	movs	r0, #0
 8017a36:	f7fd ff71 	bl	801591c <aci_hal_write_config_data>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8017a3e:	4a4a      	ldr	r2, [pc, #296]	@ (8017b68 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8017a40:	2110      	movs	r1, #16
 8017a42:	2018      	movs	r0, #24
 8017a44:	f7fd ff6a 	bl	801591c <aci_hal_write_config_data>
 8017a48:	4603      	mov	r3, r0
 8017a4a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8017a4c:	4a47      	ldr	r2, [pc, #284]	@ (8017b6c <Ble_Hci_Gap_Gatt_Init+0x158>)
 8017a4e:	2110      	movs	r1, #16
 8017a50:	2008      	movs	r0, #8
 8017a52:	f7fd ff63 	bl	801591c <aci_hal_write_config_data>
 8017a56:	4603      	mov	r3, r0
 8017a58:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8017a5a:	2118      	movs	r1, #24
 8017a5c:	2001      	movs	r0, #1
 8017a5e:	f7fd ffe2 	bl	8015a26 <aci_hal_set_tx_power_level>
 8017a62:	4603      	mov	r3, r0
 8017a64:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8017a66:	f7fd fc58 	bl	801531a <aci_gatt_init>
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8017a6e:	2300      	movs	r3, #0
 8017a70:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8017a72:	7bfb      	ldrb	r3, [r7, #15]
 8017a74:	f043 0301 	orr.w	r3, r3, #1
 8017a78:	73fb      	strb	r3, [r7, #15]
#endif /* BLE_CFG_CENTRAL == 1 */

/* USER CODE BEGIN Role_Mngt*/
/* USER CODE END Role_Mngt */

  if (role > 0)
 8017a7a:	7bfb      	ldrb	r3, [r7, #15]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d01f      	beq.n	8017ac0 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8017a80:	4b3b      	ldr	r3, [pc, #236]	@ (8017b70 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8017a82:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8017a84:	1dba      	adds	r2, r7, #6
 8017a86:	7bf8      	ldrb	r0, [r7, #15]
 8017a88:	1cbb      	adds	r3, r7, #2
 8017a8a:	9301      	str	r3, [sp, #4]
 8017a8c:	1d3b      	adds	r3, r7, #4
 8017a8e:	9300      	str	r3, [sp, #0]
 8017a90:	4613      	mov	r3, r2
 8017a92:	2208      	movs	r2, #8
 8017a94:	2100      	movs	r1, #0
 8017a96:	f7fd fa96 	bl	8014fc6 <aci_gap_init>
 8017a9a:	4603      	mov	r3, r0
 8017a9c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8017a9e:	88fc      	ldrh	r4, [r7, #6]
 8017aa0:	88bd      	ldrh	r5, [r7, #4]
 8017aa2:	68b8      	ldr	r0, [r7, #8]
 8017aa4:	f7e8 fbbc 	bl	8000220 <strlen>
 8017aa8:	4603      	mov	r3, r0
 8017aaa:	b2da      	uxtb	r2, r3
 8017aac:	68bb      	ldr	r3, [r7, #8]
 8017aae:	9300      	str	r3, [sp, #0]
 8017ab0:	4613      	mov	r3, r2
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	4629      	mov	r1, r5
 8017ab6:	4620      	mov	r0, r4
 8017ab8:	f7fd fe32 	bl	8015720 <aci_gatt_update_char_value>
 8017abc:	4603      	mov	r3, r0
 8017abe:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8017ac0:	88f8      	ldrh	r0, [r7, #6]
 8017ac2:	8879      	ldrh	r1, [r7, #2]
 8017ac4:	463b      	mov	r3, r7
 8017ac6:	9300      	str	r3, [sp, #0]
 8017ac8:	2302      	movs	r3, #2
 8017aca:	2200      	movs	r2, #0
 8017acc:	f7fd fe28 	bl	8015720 <aci_gatt_update_char_value>
 8017ad0:	4603      	mov	r3, r0
 8017ad2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8017ad4:	2202      	movs	r2, #2
 8017ad6:	2102      	movs	r1, #2
 8017ad8:	2000      	movs	r0, #0
 8017ada:	f7fe f883 	bl	8015be4 <hci_le_set_default_phy>
 8017ade:	4603      	mov	r3, r0
 8017ae0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8017ae2:	4b24      	ldr	r3, [pc, #144]	@ (8017b74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ae4:	2201      	movs	r2, #1
 8017ae6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8017ae8:	4b22      	ldr	r3, [pc, #136]	@ (8017b74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017aea:	781b      	ldrb	r3, [r3, #0]
 8017aec:	4618      	mov	r0, r3
 8017aee:	f7fd f8eb 	bl	8014cc8 <aci_gap_set_io_capability>
 8017af2:	4603      	mov	r3, r0
 8017af4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8017af6:	4b1f      	ldr	r3, [pc, #124]	@ (8017b74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017af8:	2201      	movs	r2, #1
 8017afa:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8017afc:	4b1d      	ldr	r3, [pc, #116]	@ (8017b74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017afe:	2208      	movs	r2, #8
 8017b00:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8017b02:	4b1c      	ldr	r3, [pc, #112]	@ (8017b74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b04:	2210      	movs	r2, #16
 8017b06:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8017b08:	4b1a      	ldr	r3, [pc, #104]	@ (8017b74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b0a:	2200      	movs	r2, #0
 8017b0c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8017b0e:	4b19      	ldr	r3, [pc, #100]	@ (8017b74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b10:	4a19      	ldr	r2, [pc, #100]	@ (8017b78 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8017b12:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8017b14:	4b17      	ldr	r3, [pc, #92]	@ (8017b74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b16:	2200      	movs	r2, #0
 8017b18:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8017b1a:	4b16      	ldr	r3, [pc, #88]	@ (8017b74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b1c:	789c      	ldrb	r4, [r3, #2]
 8017b1e:	4b15      	ldr	r3, [pc, #84]	@ (8017b74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b20:	785d      	ldrb	r5, [r3, #1]
 8017b22:	4b14      	ldr	r3, [pc, #80]	@ (8017b74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b24:	791b      	ldrb	r3, [r3, #4]
 8017b26:	4a13      	ldr	r2, [pc, #76]	@ (8017b74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b28:	7952      	ldrb	r2, [r2, #5]
 8017b2a:	4912      	ldr	r1, [pc, #72]	@ (8017b74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b2c:	78c9      	ldrb	r1, [r1, #3]
 8017b2e:	4811      	ldr	r0, [pc, #68]	@ (8017b74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b30:	6880      	ldr	r0, [r0, #8]
 8017b32:	2600      	movs	r6, #0
 8017b34:	9604      	str	r6, [sp, #16]
 8017b36:	9003      	str	r0, [sp, #12]
 8017b38:	9102      	str	r1, [sp, #8]
 8017b3a:	9201      	str	r2, [sp, #4]
 8017b3c:	9300      	str	r3, [sp, #0]
 8017b3e:	2300      	movs	r3, #0
 8017b40:	2201      	movs	r2, #1
 8017b42:	4629      	mov	r1, r5
 8017b44:	4620      	mov	r0, r4
 8017b46:	f7fd f913 	bl	8014d70 <aci_gap_set_authentication_requirement>
 8017b4a:	4603      	mov	r3, r0
 8017b4c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8017b4e:	4b09      	ldr	r3, [pc, #36]	@ (8017b74 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b50:	789b      	ldrb	r3, [r3, #2]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d003      	beq.n	8017b5e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8017b56:	f7fd fb55 	bl	8015204 <aci_gap_configure_filter_accept_list>
 8017b5a:	4603      	mov	r3, r0
 8017b5c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8017b5e:	bf00      	nop
 8017b60:	371c      	adds	r7, #28
 8017b62:	46bd      	mov	sp, r7
 8017b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b66:	bf00      	nop
 8017b68:	08021e0c 	.word	0x08021e0c
 8017b6c:	08021e1c 	.word	0x08021e1c
 8017b70:	0801fb90 	.word	0x0801fb90
 8017b74:	200014dc 	.word	0x200014dc
 8017b78:	0001b207 	.word	0x0001b207

08017b7c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8017b7c:	b580      	push	{r7, lr}
 8017b7e:	b08c      	sub	sp, #48	@ 0x30
 8017b80:	af08      	add	r7, sp, #32
 8017b82:	4603      	mov	r3, r0
 8017b84:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017b86:	2392      	movs	r3, #146	@ 0x92
 8017b88:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8017b8a:	4a12      	ldr	r2, [pc, #72]	@ (8017bd4 <Adv_Request+0x58>)
 8017b8c:	79fb      	ldrb	r3, [r7, #7]
 8017b8e:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8017b92:	2300      	movs	r3, #0
 8017b94:	9306      	str	r3, [sp, #24]
 8017b96:	2300      	movs	r3, #0
 8017b98:	9305      	str	r3, [sp, #20]
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	9304      	str	r3, [sp, #16]
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	9303      	str	r3, [sp, #12]
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	9302      	str	r3, [sp, #8]
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	9301      	str	r3, [sp, #4]
 8017baa:	2300      	movs	r3, #0
 8017bac:	9300      	str	r3, [sp, #0]
 8017bae:	2300      	movs	r3, #0
 8017bb0:	22a0      	movs	r2, #160	@ 0xa0
 8017bb2:	2180      	movs	r1, #128	@ 0x80
 8017bb4:	2000      	movs	r0, #0
 8017bb6:	f7fc ff8d 	bl	8014ad4 <aci_gap_set_discoverable>
 8017bba:	4603      	mov	r3, r0
 8017bbc:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8017bbe:	4906      	ldr	r1, [pc, #24]	@ (8017bd8 <Adv_Request+0x5c>)
 8017bc0:	200e      	movs	r0, #14
 8017bc2:	f7fd faad 	bl	8015120 <aci_gap_update_adv_data>
 8017bc6:	4603      	mov	r3, r0
 8017bc8:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8017bca:	bf00      	nop
}
 8017bcc:	3710      	adds	r7, #16
 8017bce:	46bd      	mov	sp, r7
 8017bd0:	bd80      	pop	{r7, pc}
 8017bd2:	bf00      	nop
 8017bd4:	200014dc 	.word	0x200014dc
 8017bd8:	200000c4 	.word	0x200000c4

08017bdc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8017bdc:	b580      	push	{r7, lr}
 8017bde:	b086      	sub	sp, #24
 8017be0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8017be2:	f7ff fda7 	bl	8017734 <LL_FLASH_GetUDN>
 8017be6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8017be8:	693b      	ldr	r3, [r7, #16]
 8017bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017bee:	d023      	beq.n	8017c38 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8017bf0:	f7ff fdb8 	bl	8017764 <LL_FLASH_GetSTCompanyID>
 8017bf4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8017bf6:	f7ff fda9 	bl	801774c <LL_FLASH_GetDeviceID>
 8017bfa:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8017bfc:	693b      	ldr	r3, [r7, #16]
 8017bfe:	b2da      	uxtb	r2, r3
 8017c00:	4b16      	ldr	r3, [pc, #88]	@ (8017c5c <BleGetBdAddress+0x80>)
 8017c02:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8017c04:	693b      	ldr	r3, [r7, #16]
 8017c06:	0a1b      	lsrs	r3, r3, #8
 8017c08:	b2da      	uxtb	r2, r3
 8017c0a:	4b14      	ldr	r3, [pc, #80]	@ (8017c5c <BleGetBdAddress+0x80>)
 8017c0c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	b2da      	uxtb	r2, r3
 8017c12:	4b12      	ldr	r3, [pc, #72]	@ (8017c5c <BleGetBdAddress+0x80>)
 8017c14:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8017c16:	68bb      	ldr	r3, [r7, #8]
 8017c18:	b2da      	uxtb	r2, r3
 8017c1a:	4b10      	ldr	r3, [pc, #64]	@ (8017c5c <BleGetBdAddress+0x80>)
 8017c1c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8017c1e:	68bb      	ldr	r3, [r7, #8]
 8017c20:	0a1b      	lsrs	r3, r3, #8
 8017c22:	b2da      	uxtb	r2, r3
 8017c24:	4b0d      	ldr	r3, [pc, #52]	@ (8017c5c <BleGetBdAddress+0x80>)
 8017c26:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8017c28:	68bb      	ldr	r3, [r7, #8]
 8017c2a:	0c1b      	lsrs	r3, r3, #16
 8017c2c:	b2da      	uxtb	r2, r3
 8017c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8017c5c <BleGetBdAddress+0x80>)
 8017c30:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8017c32:	4b0a      	ldr	r3, [pc, #40]	@ (8017c5c <BleGetBdAddress+0x80>)
 8017c34:	617b      	str	r3, [r7, #20]
 8017c36:	e00b      	b.n	8017c50 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8017c38:	2000      	movs	r0, #0
 8017c3a:	f7fe ff9b 	bl	8016b74 <OTP_Read>
 8017c3e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d002      	beq.n	8017c4c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	617b      	str	r3, [r7, #20]
 8017c4a:	e001      	b.n	8017c50 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8017c4c:	4b04      	ldr	r3, [pc, #16]	@ (8017c60 <BleGetBdAddress+0x84>)
 8017c4e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8017c50:	697b      	ldr	r3, [r7, #20]
}
 8017c52:	4618      	mov	r0, r3
 8017c54:	3718      	adds	r7, #24
 8017c56:	46bd      	mov	sp, r7
 8017c58:	bd80      	pop	{r7, pc}
 8017c5a:	bf00      	nop
 8017c5c:	200014d4 	.word	0x200014d4
 8017c60:	08021e04 	.word	0x08021e04

08017c64 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8017c64:	b580      	push	{r7, lr}
 8017c66:	b082      	sub	sp, #8
 8017c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8017c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8017c94 <Adv_Cancel+0x30>)
 8017c6c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8017c70:	2b05      	cmp	r3, #5
 8017c72:	d00a      	beq.n	8017c8a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017c74:	2392      	movs	r3, #146	@ 0x92
 8017c76:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8017c78:	f7fc ff08 	bl	8014a8c <aci_gap_set_non_discoverable>
 8017c7c:	4603      	mov	r3, r0
 8017c7e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017c80:	4b04      	ldr	r3, [pc, #16]	@ (8017c94 <Adv_Cancel+0x30>)
 8017c82:	2200      	movs	r2, #0
 8017c84:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8017c88:	bf00      	nop
 8017c8a:	bf00      	nop
}
 8017c8c:	3708      	adds	r7, #8
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	bd80      	pop	{r7, pc}
 8017c92:	bf00      	nop
 8017c94:	200014dc 	.word	0x200014dc

08017c98 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	b082      	sub	sp, #8
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8017ca0:	2100      	movs	r1, #0
 8017ca2:	2002      	movs	r0, #2
 8017ca4:	f001 fad4 	bl	8019250 <UTIL_SEQ_SetTask>

  return;
 8017ca8:	bf00      	nop
}
 8017caa:	3708      	adds	r7, #8
 8017cac:	46bd      	mov	sp, r7
 8017cae:	bd80      	pop	{r7, pc}

08017cb0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8017cb0:	b580      	push	{r7, lr}
 8017cb2:	b082      	sub	sp, #8
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8017cb8:	2001      	movs	r0, #1
 8017cba:	f001 fb35 	bl	8019328 <UTIL_SEQ_SetEvt>

  return;
 8017cbe:	bf00      	nop
}
 8017cc0:	3708      	adds	r7, #8
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	bd80      	pop	{r7, pc}

08017cc6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8017cc6:	b580      	push	{r7, lr}
 8017cc8:	b082      	sub	sp, #8
 8017cca:	af00      	add	r7, sp, #0
 8017ccc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8017cce:	2001      	movs	r0, #1
 8017cd0:	f001 fb4a 	bl	8019368 <UTIL_SEQ_WaitEvt>

  return;
 8017cd4:	bf00      	nop
}
 8017cd6:	3708      	adds	r7, #8
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	bd80      	pop	{r7, pc}

08017cdc <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8017cdc:	b580      	push	{r7, lr}
 8017cde:	b084      	sub	sp, #16
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	685b      	ldr	r3, [r3, #4]
 8017cec:	3308      	adds	r3, #8
 8017cee:	4618      	mov	r0, r3
 8017cf0:	f7fe f8de 	bl	8015eb0 <SVCCTL_UserEvtRx>
 8017cf4:	4603      	mov	r3, r0
 8017cf6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8017cf8:	7afb      	ldrb	r3, [r7, #11]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d003      	beq.n	8017d06 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	2201      	movs	r2, #1
 8017d02:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8017d04:	e003      	b.n	8017d0e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	2200      	movs	r2, #0
 8017d0a:	701a      	strb	r2, [r3, #0]
  return;
 8017d0c:	bf00      	nop
}
 8017d0e:	3710      	adds	r7, #16
 8017d10:	46bd      	mov	sp, r7
 8017d12:	bd80      	pop	{r7, pc}

08017d14 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8017d14:	b580      	push	{r7, lr}
 8017d16:	b084      	sub	sp, #16
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8017d1e:	79fb      	ldrb	r3, [r7, #7]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d002      	beq.n	8017d2a <BLE_StatusNot+0x16>
 8017d24:	2b01      	cmp	r3, #1
 8017d26:	d006      	beq.n	8017d36 <BLE_StatusNot+0x22>
      break;

    default:
      /* USER CODE BEGIN Status */
      /* USER CODE END Status */
      break;
 8017d28:	e00b      	b.n	8017d42 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8017d2a:	2307      	movs	r3, #7
 8017d2c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8017d2e:	68f8      	ldr	r0, [r7, #12]
 8017d30:	f001 faba 	bl	80192a8 <UTIL_SEQ_PauseTask>
      break;
 8017d34:	e005      	b.n	8017d42 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8017d36:	2307      	movs	r3, #7
 8017d38:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8017d3a:	68f8      	ldr	r0, [r7, #12]
 8017d3c:	f001 fad4 	bl	80192e8 <UTIL_SEQ_ResumeTask>
      break;
 8017d40:	bf00      	nop
  }

  return;
 8017d42:	bf00      	nop
}
 8017d44:	3710      	adds	r7, #16
 8017d46:	46bd      	mov	sp, r7
 8017d48:	bd80      	pop	{r7, pc}
	...

08017d4c <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8017d4c:	b480      	push	{r7}
 8017d4e:	b083      	sub	sp, #12
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	781b      	ldrb	r3, [r3, #0]
 8017d58:	2b03      	cmp	r3, #3
 8017d5a:	d80b      	bhi.n	8017d74 <Custom_STM_App_Notification+0x28>
 8017d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8017d64 <Custom_STM_App_Notification+0x18>)
 8017d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d62:	bf00      	nop
 8017d64:	08017d75 	.word	0x08017d75
 8017d68:	08017d75 	.word	0x08017d75
 8017d6c:	08017d75 	.word	0x08017d75
 8017d70:	08017d75 	.word	0x08017d75

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8017d74:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8017d76:	bf00      	nop
}
 8017d78:	370c      	adds	r7, #12
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d80:	4770      	bx	lr
 8017d82:	bf00      	nop

08017d84 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8017d84:	b480      	push	{r7}
 8017d86:	b083      	sub	sp, #12
 8017d88:	af00      	add	r7, sp, #0
 8017d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	781b      	ldrb	r3, [r3, #0]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d002      	beq.n	8017d9a <Custom_APP_Notification+0x16>
 8017d94:	2b01      	cmp	r3, #1
 8017d96:	d002      	beq.n	8017d9e <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8017d98:	e002      	b.n	8017da0 <Custom_APP_Notification+0x1c>
      break;
 8017d9a:	bf00      	nop
 8017d9c:	e000      	b.n	8017da0 <Custom_APP_Notification+0x1c>
      break;
 8017d9e:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8017da0:	bf00      	nop
}
 8017da2:	370c      	adds	r7, #12
 8017da4:	46bd      	mov	sp, r7
 8017da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017daa:	4770      	bx	lr

08017dac <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8017dac:	b480      	push	{r7}
 8017dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8017db0:	bf00      	nop
}
 8017db2:	46bd      	mov	sp, r7
 8017db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db8:	4770      	bx	lr
	...

08017dbc <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b08c      	sub	sp, #48	@ 0x30
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	3301      	adds	r3, #1
 8017dce:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8017dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dd2:	781b      	ldrb	r3, [r3, #0]
 8017dd4:	2bff      	cmp	r3, #255	@ 0xff
 8017dd6:	f040 808a 	bne.w	8017eee <Custom_STM_Event_Handler+0x132>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8017dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ddc:	3302      	adds	r3, #2
 8017dde:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8017de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017de2:	881b      	ldrh	r3, [r3, #0]
 8017de4:	b29b      	uxth	r3, r3
 8017de6:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8017dea:	2b1a      	cmp	r3, #26
 8017dec:	d87b      	bhi.n	8017ee6 <Custom_STM_Event_Handler+0x12a>
 8017dee:	a201      	add	r2, pc, #4	@ (adr r2, 8017df4 <Custom_STM_Event_Handler+0x38>)
 8017df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017df4:	08017e61 	.word	0x08017e61
 8017df8:	08017ee7 	.word	0x08017ee7
 8017dfc:	08017ee7 	.word	0x08017ee7
 8017e00:	08017ee7 	.word	0x08017ee7
 8017e04:	08017ee7 	.word	0x08017ee7
 8017e08:	08017ee7 	.word	0x08017ee7
 8017e0c:	08017ee7 	.word	0x08017ee7
 8017e10:	08017ee7 	.word	0x08017ee7
 8017e14:	08017ee7 	.word	0x08017ee7
 8017e18:	08017ee7 	.word	0x08017ee7
 8017e1c:	08017ee7 	.word	0x08017ee7
 8017e20:	08017ee7 	.word	0x08017ee7
 8017e24:	08017ee7 	.word	0x08017ee7
 8017e28:	08017ee7 	.word	0x08017ee7
 8017e2c:	08017ee7 	.word	0x08017ee7
 8017e30:	08017ee7 	.word	0x08017ee7
 8017e34:	08017ee7 	.word	0x08017ee7
 8017e38:	08017ee7 	.word	0x08017ee7
 8017e3c:	08017ee7 	.word	0x08017ee7
 8017e40:	08017ee7 	.word	0x08017ee7
 8017e44:	08017ee7 	.word	0x08017ee7
 8017e48:	08017ee7 	.word	0x08017ee7
 8017e4c:	08017ee7 	.word	0x08017ee7
 8017e50:	08017ee7 	.word	0x08017ee7
 8017e54:	08017ee7 	.word	0x08017ee7
 8017e58:	08017ee7 	.word	0x08017ee7
 8017e5c:	08017ec9 	.word	0x08017ec9
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8017e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e62:	3302      	adds	r3, #2
 8017e64:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSendnumHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8017e66:	69fb      	ldr	r3, [r7, #28]
 8017e68:	885b      	ldrh	r3, [r3, #2]
 8017e6a:	b29b      	uxth	r3, r3
 8017e6c:	461a      	mov	r2, r3
 8017e6e:	4b23      	ldr	r3, [pc, #140]	@ (8017efc <Custom_STM_Event_Handler+0x140>)
 8017e70:	889b      	ldrh	r3, [r3, #4]
 8017e72:	3302      	adds	r3, #2
 8017e74:	429a      	cmp	r2, r3
 8017e76:	d119      	bne.n	8017eac <Custom_STM_Event_Handler+0xf0>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8017e78:	2301      	movs	r3, #1
 8017e7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8017e7e:	69fb      	ldr	r3, [r7, #28]
 8017e80:	7a1b      	ldrb	r3, [r3, #8]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d002      	beq.n	8017e8c <Custom_STM_Event_Handler+0xd0>
 8017e86:	2b01      	cmp	r3, #1
 8017e88:	d008      	beq.n	8017e9c <Custom_STM_Event_Handler+0xe0>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 8017e8a:	e01c      	b.n	8017ec6 <Custom_STM_Event_Handler+0x10a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SENDNUM_NOTIFY_DISABLED_EVT;
 8017e8c:	2302      	movs	r3, #2
 8017e8e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8017e90:	f107 0308 	add.w	r3, r7, #8
 8017e94:	4618      	mov	r0, r3
 8017e96:	f7ff ff59 	bl	8017d4c <Custom_STM_App_Notification>
                break;
 8017e9a:	e014      	b.n	8017ec6 <Custom_STM_Event_Handler+0x10a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SENDNUM_NOTIFY_ENABLED_EVT;
 8017e9c:	2301      	movs	r3, #1
 8017e9e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8017ea0:	f107 0308 	add.w	r3, r7, #8
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f7ff ff51 	bl	8017d4c <Custom_STM_App_Notification>
                break;
 8017eaa:	e00c      	b.n	8017ec6 <Custom_STM_Event_Handler+0x10a>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomSendnumHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8017eac:	69fb      	ldr	r3, [r7, #28]
 8017eae:	885b      	ldrh	r3, [r3, #2]
 8017eb0:	b29b      	uxth	r3, r3
 8017eb2:	461a      	mov	r2, r3
 8017eb4:	4b11      	ldr	r3, [pc, #68]	@ (8017efc <Custom_STM_Event_Handler+0x140>)
 8017eb6:	885b      	ldrh	r3, [r3, #2]
 8017eb8:	3301      	adds	r3, #1
 8017eba:	429a      	cmp	r2, r3
 8017ebc:	d115      	bne.n	8017eea <Custom_STM_Event_Handler+0x12e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8017ebe:	2301      	movs	r3, #1
 8017ec0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8017ec4:	e011      	b.n	8017eea <Custom_STM_Event_Handler+0x12e>
 8017ec6:	e010      	b.n	8017eea <Custom_STM_Event_Handler+0x12e>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8017ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017eca:	3302      	adds	r3, #2
 8017ecc:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8017ece:	2303      	movs	r3, #3
 8017ed0:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8017ed2:	6a3b      	ldr	r3, [r7, #32]
 8017ed4:	881b      	ldrh	r3, [r3, #0]
 8017ed6:	b29b      	uxth	r3, r3
 8017ed8:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8017eda:	f107 0308 	add.w	r3, r7, #8
 8017ede:	4618      	mov	r0, r3
 8017ee0:	f7ff ff34 	bl	8017d4c <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8017ee4:	e002      	b.n	8017eec <Custom_STM_Event_Handler+0x130>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8017ee6:	bf00      	nop
 8017ee8:	e002      	b.n	8017ef0 <Custom_STM_Event_Handler+0x134>
          break;
 8017eea:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017eec:	e000      	b.n	8017ef0 <Custom_STM_Event_Handler+0x134>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8017eee:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8017ef0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	3730      	adds	r7, #48	@ 0x30
 8017ef8:	46bd      	mov	sp, r7
 8017efa:	bd80      	pop	{r7, pc}
 8017efc:	20001564 	.word	0x20001564

08017f00 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8017f00:	b580      	push	{r7, lr}
 8017f02:	b08c      	sub	sp, #48	@ 0x30
 8017f04:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017f06:	2392      	movs	r3, #146	@ 0x92
 8017f08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8017f0a:	484f      	ldr	r0, [pc, #316]	@ (8018048 <SVCCTL_InitCustomSvc+0x148>)
 8017f0c:	f7fd ffb6 	bl	8015e7c <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8017f10:	2306      	movs	r3, #6
 8017f12:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BPSERVICE_UUID(uuid.Char_UUID_128);
 8017f14:	238f      	movs	r3, #143	@ 0x8f
 8017f16:	713b      	strb	r3, [r7, #4]
 8017f18:	23e5      	movs	r3, #229	@ 0xe5
 8017f1a:	717b      	strb	r3, [r7, #5]
 8017f1c:	23b3      	movs	r3, #179	@ 0xb3
 8017f1e:	71bb      	strb	r3, [r7, #6]
 8017f20:	23d5      	movs	r3, #213	@ 0xd5
 8017f22:	71fb      	strb	r3, [r7, #7]
 8017f24:	232e      	movs	r3, #46	@ 0x2e
 8017f26:	723b      	strb	r3, [r7, #8]
 8017f28:	237f      	movs	r3, #127	@ 0x7f
 8017f2a:	727b      	strb	r3, [r7, #9]
 8017f2c:	234a      	movs	r3, #74	@ 0x4a
 8017f2e:	72bb      	strb	r3, [r7, #10]
 8017f30:	2398      	movs	r3, #152	@ 0x98
 8017f32:	72fb      	strb	r3, [r7, #11]
 8017f34:	232a      	movs	r3, #42	@ 0x2a
 8017f36:	733b      	strb	r3, [r7, #12]
 8017f38:	2348      	movs	r3, #72	@ 0x48
 8017f3a:	737b      	strb	r3, [r7, #13]
 8017f3c:	237a      	movs	r3, #122	@ 0x7a
 8017f3e:	73bb      	strb	r3, [r7, #14]
 8017f40:	23cc      	movs	r3, #204	@ 0xcc
 8017f42:	73fb      	strb	r3, [r7, #15]
 8017f44:	2300      	movs	r3, #0
 8017f46:	743b      	strb	r3, [r7, #16]
 8017f48:	2300      	movs	r3, #0
 8017f4a:	747b      	strb	r3, [r7, #17]
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	74bb      	strb	r3, [r7, #18]
 8017f50:	2300      	movs	r3, #0
 8017f52:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8017f54:	7dbb      	ldrb	r3, [r7, #22]
 8017f56:	1d39      	adds	r1, r7, #4
 8017f58:	4a3c      	ldr	r2, [pc, #240]	@ (801804c <SVCCTL_InitCustomSvc+0x14c>)
 8017f5a:	9200      	str	r2, [sp, #0]
 8017f5c:	2201      	movs	r2, #1
 8017f5e:	2002      	movs	r0, #2
 8017f60:	f7fd fa00 	bl	8015364 <aci_gatt_add_service>
 8017f64:	4603      	mov	r3, r0
 8017f66:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  charWrite
   */
  COPY_CHARWRITE_UUID(uuid.Char_UUID_128);
 8017f68:	2319      	movs	r3, #25
 8017f6a:	713b      	strb	r3, [r7, #4]
 8017f6c:	23ed      	movs	r3, #237	@ 0xed
 8017f6e:	717b      	strb	r3, [r7, #5]
 8017f70:	2382      	movs	r3, #130	@ 0x82
 8017f72:	71bb      	strb	r3, [r7, #6]
 8017f74:	23ae      	movs	r3, #174	@ 0xae
 8017f76:	71fb      	strb	r3, [r7, #7]
 8017f78:	23ed      	movs	r3, #237	@ 0xed
 8017f7a:	723b      	strb	r3, [r7, #8]
 8017f7c:	2321      	movs	r3, #33	@ 0x21
 8017f7e:	727b      	strb	r3, [r7, #9]
 8017f80:	234c      	movs	r3, #76	@ 0x4c
 8017f82:	72bb      	strb	r3, [r7, #10]
 8017f84:	239d      	movs	r3, #157	@ 0x9d
 8017f86:	72fb      	strb	r3, [r7, #11]
 8017f88:	2341      	movs	r3, #65	@ 0x41
 8017f8a:	733b      	strb	r3, [r7, #12]
 8017f8c:	2345      	movs	r3, #69	@ 0x45
 8017f8e:	737b      	strb	r3, [r7, #13]
 8017f90:	2322      	movs	r3, #34	@ 0x22
 8017f92:	73bb      	strb	r3, [r7, #14]
 8017f94:	238e      	movs	r3, #142	@ 0x8e
 8017f96:	73fb      	strb	r3, [r7, #15]
 8017f98:	2300      	movs	r3, #0
 8017f9a:	743b      	strb	r3, [r7, #16]
 8017f9c:	2300      	movs	r3, #0
 8017f9e:	747b      	strb	r3, [r7, #17]
 8017fa0:	2300      	movs	r3, #0
 8017fa2:	74bb      	strb	r3, [r7, #18]
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBpserviceHdle,
 8017fa8:	4b28      	ldr	r3, [pc, #160]	@ (801804c <SVCCTL_InitCustomSvc+0x14c>)
 8017faa:	8818      	ldrh	r0, [r3, #0]
 8017fac:	4b28      	ldr	r3, [pc, #160]	@ (8018050 <SVCCTL_InitCustomSvc+0x150>)
 8017fae:	881b      	ldrh	r3, [r3, #0]
 8017fb0:	1d3a      	adds	r2, r7, #4
 8017fb2:	4928      	ldr	r1, [pc, #160]	@ (8018054 <SVCCTL_InitCustomSvc+0x154>)
 8017fb4:	9105      	str	r1, [sp, #20]
 8017fb6:	2100      	movs	r1, #0
 8017fb8:	9104      	str	r1, [sp, #16]
 8017fba:	2110      	movs	r1, #16
 8017fbc:	9103      	str	r1, [sp, #12]
 8017fbe:	2101      	movs	r1, #1
 8017fc0:	9102      	str	r1, [sp, #8]
 8017fc2:	2100      	movs	r1, #0
 8017fc4:	9101      	str	r1, [sp, #4]
 8017fc6:	2108      	movs	r1, #8
 8017fc8:	9100      	str	r1, [sp, #0]
 8017fca:	2102      	movs	r1, #2
 8017fcc:	f7fd faa0 	bl	8015510 <aci_gatt_add_char>
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  sendnum
   */
  COPY_SENDNUM_UUID(uuid.Char_UUID_128);
 8017fd4:	2319      	movs	r3, #25
 8017fd6:	713b      	strb	r3, [r7, #4]
 8017fd8:	23ed      	movs	r3, #237	@ 0xed
 8017fda:	717b      	strb	r3, [r7, #5]
 8017fdc:	2382      	movs	r3, #130	@ 0x82
 8017fde:	71bb      	strb	r3, [r7, #6]
 8017fe0:	23ae      	movs	r3, #174	@ 0xae
 8017fe2:	71fb      	strb	r3, [r7, #7]
 8017fe4:	23ed      	movs	r3, #237	@ 0xed
 8017fe6:	723b      	strb	r3, [r7, #8]
 8017fe8:	2321      	movs	r3, #33	@ 0x21
 8017fea:	727b      	strb	r3, [r7, #9]
 8017fec:	234c      	movs	r3, #76	@ 0x4c
 8017fee:	72bb      	strb	r3, [r7, #10]
 8017ff0:	239d      	movs	r3, #157	@ 0x9d
 8017ff2:	72fb      	strb	r3, [r7, #11]
 8017ff4:	2341      	movs	r3, #65	@ 0x41
 8017ff6:	733b      	strb	r3, [r7, #12]
 8017ff8:	2345      	movs	r3, #69	@ 0x45
 8017ffa:	737b      	strb	r3, [r7, #13]
 8017ffc:	2322      	movs	r3, #34	@ 0x22
 8017ffe:	73bb      	strb	r3, [r7, #14]
 8018000:	238e      	movs	r3, #142	@ 0x8e
 8018002:	73fb      	strb	r3, [r7, #15]
 8018004:	2301      	movs	r3, #1
 8018006:	743b      	strb	r3, [r7, #16]
 8018008:	2300      	movs	r3, #0
 801800a:	747b      	strb	r3, [r7, #17]
 801800c:	2300      	movs	r3, #0
 801800e:	74bb      	strb	r3, [r7, #18]
 8018010:	2300      	movs	r3, #0
 8018012:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBpserviceHdle,
 8018014:	4b0d      	ldr	r3, [pc, #52]	@ (801804c <SVCCTL_InitCustomSvc+0x14c>)
 8018016:	8818      	ldrh	r0, [r3, #0]
 8018018:	4b0f      	ldr	r3, [pc, #60]	@ (8018058 <SVCCTL_InitCustomSvc+0x158>)
 801801a:	881b      	ldrh	r3, [r3, #0]
 801801c:	1d3a      	adds	r2, r7, #4
 801801e:	490f      	ldr	r1, [pc, #60]	@ (801805c <SVCCTL_InitCustomSvc+0x15c>)
 8018020:	9105      	str	r1, [sp, #20]
 8018022:	2100      	movs	r1, #0
 8018024:	9104      	str	r1, [sp, #16]
 8018026:	2110      	movs	r1, #16
 8018028:	9103      	str	r1, [sp, #12]
 801802a:	2107      	movs	r1, #7
 801802c:	9102      	str	r1, [sp, #8]
 801802e:	2100      	movs	r1, #0
 8018030:	9101      	str	r1, [sp, #4]
 8018032:	2110      	movs	r1, #16
 8018034:	9100      	str	r1, [sp, #0]
 8018036:	2102      	movs	r1, #2
 8018038:	f7fd fa6a 	bl	8015510 <aci_gatt_add_char>
 801803c:	4603      	mov	r3, r0
 801803e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8018040:	bf00      	nop
}
 8018042:	3718      	adds	r7, #24
 8018044:	46bd      	mov	sp, r7
 8018046:	bd80      	pop	{r7, pc}
 8018048:	08017dbd 	.word	0x08017dbd
 801804c:	20001564 	.word	0x20001564
 8018050:	200000d2 	.word	0x200000d2
 8018054:	20001566 	.word	0x20001566
 8018058:	200000d4 	.word	0x200000d4
 801805c:	20001568 	.word	0x20001568

08018060 <LL_PWR_EnableBootC2>:
{
 8018060:	b480      	push	{r7}
 8018062:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8018064:	4b05      	ldr	r3, [pc, #20]	@ (801807c <LL_PWR_EnableBootC2+0x1c>)
 8018066:	68db      	ldr	r3, [r3, #12]
 8018068:	4a04      	ldr	r2, [pc, #16]	@ (801807c <LL_PWR_EnableBootC2+0x1c>)
 801806a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801806e:	60d3      	str	r3, [r2, #12]
}
 8018070:	bf00      	nop
 8018072:	46bd      	mov	sp, r7
 8018074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018078:	4770      	bx	lr
 801807a:	bf00      	nop
 801807c:	58000400 	.word	0x58000400

08018080 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8018080:	b480      	push	{r7}
 8018082:	b083      	sub	sp, #12
 8018084:	af00      	add	r7, sp, #0
 8018086:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8018088:	4b06      	ldr	r3, [pc, #24]	@ (80180a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801808a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 801808e:	4905      	ldr	r1, [pc, #20]	@ (80180a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	4313      	orrs	r3, r2
 8018094:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8018098:	bf00      	nop
 801809a:	370c      	adds	r7, #12
 801809c:	46bd      	mov	sp, r7
 801809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180a2:	4770      	bx	lr
 80180a4:	58000800 	.word	0x58000800

080180a8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80180a8:	b480      	push	{r7}
 80180aa:	b083      	sub	sp, #12
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80180b0:	4b05      	ldr	r3, [pc, #20]	@ (80180c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80180b2:	6a1a      	ldr	r2, [r3, #32]
 80180b4:	4904      	ldr	r1, [pc, #16]	@ (80180c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	4313      	orrs	r3, r2
 80180ba:	620b      	str	r3, [r1, #32]
}
 80180bc:	bf00      	nop
 80180be:	370c      	adds	r7, #12
 80180c0:	46bd      	mov	sp, r7
 80180c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c6:	4770      	bx	lr
 80180c8:	58000800 	.word	0x58000800

080180cc <LL_AHB3_GRP1_EnableClock>:
{
 80180cc:	b480      	push	{r7}
 80180ce:	b085      	sub	sp, #20
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80180d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80180d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80180da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	4313      	orrs	r3, r2
 80180e2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80180e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80180e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	4013      	ands	r3, r2
 80180ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80180f0:	68fb      	ldr	r3, [r7, #12]
}
 80180f2:	bf00      	nop
 80180f4:	3714      	adds	r7, #20
 80180f6:	46bd      	mov	sp, r7
 80180f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180fc:	4770      	bx	lr

080180fe <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80180fe:	b480      	push	{r7}
 8018100:	b085      	sub	sp, #20
 8018102:	af00      	add	r7, sp, #0
 8018104:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8018106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801810a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 801810e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	4313      	orrs	r3, r2
 8018116:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801811a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801811e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	4013      	ands	r3, r2
 8018126:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018128:	68fb      	ldr	r3, [r7, #12]
}
 801812a:	bf00      	nop
 801812c:	3714      	adds	r7, #20
 801812e:	46bd      	mov	sp, r7
 8018130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018134:	4770      	bx	lr

08018136 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8018136:	b480      	push	{r7}
 8018138:	b083      	sub	sp, #12
 801813a:	af00      	add	r7, sp, #0
 801813c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	601a      	str	r2, [r3, #0]
}
 801814a:	bf00      	nop
 801814c:	370c      	adds	r7, #12
 801814e:	46bd      	mov	sp, r7
 8018150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018154:	4770      	bx	lr

08018156 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8018156:	b480      	push	{r7}
 8018158:	b083      	sub	sp, #12
 801815a:	af00      	add	r7, sp, #0
 801815c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	f043 0201 	orr.w	r2, r3, #1
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	601a      	str	r2, [r3, #0]
}
 801816a:	bf00      	nop
 801816c:	370c      	adds	r7, #12
 801816e:	46bd      	mov	sp, r7
 8018170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018174:	4770      	bx	lr

08018176 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018176:	b480      	push	{r7}
 8018178:	b083      	sub	sp, #12
 801817a:	af00      	add	r7, sp, #0
 801817c:	6078      	str	r0, [r7, #4]
 801817e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	685a      	ldr	r2, [r3, #4]
 8018184:	683b      	ldr	r3, [r7, #0]
 8018186:	041b      	lsls	r3, r3, #16
 8018188:	43db      	mvns	r3, r3
 801818a:	401a      	ands	r2, r3
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	605a      	str	r2, [r3, #4]
}
 8018190:	bf00      	nop
 8018192:	370c      	adds	r7, #12
 8018194:	46bd      	mov	sp, r7
 8018196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801819a:	4770      	bx	lr

0801819c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801819c:	b480      	push	{r7}
 801819e:	b083      	sub	sp, #12
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	6078      	str	r0, [r7, #4]
 80181a4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	685a      	ldr	r2, [r3, #4]
 80181aa:	683b      	ldr	r3, [r7, #0]
 80181ac:	041b      	lsls	r3, r3, #16
 80181ae:	431a      	orrs	r2, r3
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	605a      	str	r2, [r3, #4]
}
 80181b4:	bf00      	nop
 80181b6:	370c      	adds	r7, #12
 80181b8:	46bd      	mov	sp, r7
 80181ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181be:	4770      	bx	lr

080181c0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80181c0:	b480      	push	{r7}
 80181c2:	b083      	sub	sp, #12
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	6078      	str	r0, [r7, #4]
 80181c8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	685a      	ldr	r2, [r3, #4]
 80181ce:	683b      	ldr	r3, [r7, #0]
 80181d0:	43db      	mvns	r3, r3
 80181d2:	401a      	ands	r2, r3
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	605a      	str	r2, [r3, #4]
}
 80181d8:	bf00      	nop
 80181da:	370c      	adds	r7, #12
 80181dc:	46bd      	mov	sp, r7
 80181de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e2:	4770      	bx	lr

080181e4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80181e4:	b480      	push	{r7}
 80181e6:	b083      	sub	sp, #12
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	6078      	str	r0, [r7, #4]
 80181ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	683a      	ldr	r2, [r7, #0]
 80181f2:	609a      	str	r2, [r3, #8]
}
 80181f4:	bf00      	nop
 80181f6:	370c      	adds	r7, #12
 80181f8:	46bd      	mov	sp, r7
 80181fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181fe:	4770      	bx	lr

08018200 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018200:	b480      	push	{r7}
 8018202:	b083      	sub	sp, #12
 8018204:	af00      	add	r7, sp, #0
 8018206:	6078      	str	r0, [r7, #4]
 8018208:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 801820a:	683b      	ldr	r3, [r7, #0]
 801820c:	041a      	lsls	r2, r3, #16
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	609a      	str	r2, [r3, #8]
}
 8018212:	bf00      	nop
 8018214:	370c      	adds	r7, #12
 8018216:	46bd      	mov	sp, r7
 8018218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801821c:	4770      	bx	lr

0801821e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801821e:	b480      	push	{r7}
 8018220:	b083      	sub	sp, #12
 8018222:	af00      	add	r7, sp, #0
 8018224:	6078      	str	r0, [r7, #4]
 8018226:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	68da      	ldr	r2, [r3, #12]
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	4013      	ands	r3, r2
 8018230:	683a      	ldr	r2, [r7, #0]
 8018232:	429a      	cmp	r2, r3
 8018234:	d101      	bne.n	801823a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8018236:	2301      	movs	r3, #1
 8018238:	e000      	b.n	801823c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801823a:	2300      	movs	r3, #0
}
 801823c:	4618      	mov	r0, r3
 801823e:	370c      	adds	r7, #12
 8018240:	46bd      	mov	sp, r7
 8018242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018246:	4770      	bx	lr

08018248 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8018248:	b480      	push	{r7}
 801824a:	b083      	sub	sp, #12
 801824c:	af00      	add	r7, sp, #0
 801824e:	6078      	str	r0, [r7, #4]
 8018250:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	69da      	ldr	r2, [r3, #28]
 8018256:	683b      	ldr	r3, [r7, #0]
 8018258:	4013      	ands	r3, r2
 801825a:	683a      	ldr	r2, [r7, #0]
 801825c:	429a      	cmp	r2, r3
 801825e:	d101      	bne.n	8018264 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8018260:	2301      	movs	r3, #1
 8018262:	e000      	b.n	8018266 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8018264:	2300      	movs	r3, #0
}
 8018266:	4618      	mov	r0, r3
 8018268:	370c      	adds	r7, #12
 801826a:	46bd      	mov	sp, r7
 801826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018270:	4770      	bx	lr
	...

08018274 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8018274:	b580      	push	{r7, lr}
 8018276:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8018278:	2102      	movs	r1, #2
 801827a:	4818      	ldr	r0, [pc, #96]	@ (80182dc <HW_IPCC_Rx_Handler+0x68>)
 801827c:	f7ff ffe4 	bl	8018248 <LL_C2_IPCC_IsActiveFlag_CHx>
 8018280:	4603      	mov	r3, r0
 8018282:	2b00      	cmp	r3, #0
 8018284:	d008      	beq.n	8018298 <HW_IPCC_Rx_Handler+0x24>
 8018286:	4b15      	ldr	r3, [pc, #84]	@ (80182dc <HW_IPCC_Rx_Handler+0x68>)
 8018288:	685b      	ldr	r3, [r3, #4]
 801828a:	f003 0302 	and.w	r3, r3, #2
 801828e:	2b00      	cmp	r3, #0
 8018290:	d102      	bne.n	8018298 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8018292:	f000 f8d5 	bl	8018440 <HW_IPCC_SYS_EvtHandler>
 8018296:	e01e      	b.n	80182d6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8018298:	2101      	movs	r1, #1
 801829a:	4810      	ldr	r0, [pc, #64]	@ (80182dc <HW_IPCC_Rx_Handler+0x68>)
 801829c:	f7ff ffd4 	bl	8018248 <LL_C2_IPCC_IsActiveFlag_CHx>
 80182a0:	4603      	mov	r3, r0
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d008      	beq.n	80182b8 <HW_IPCC_Rx_Handler+0x44>
 80182a6:	4b0d      	ldr	r3, [pc, #52]	@ (80182dc <HW_IPCC_Rx_Handler+0x68>)
 80182a8:	685b      	ldr	r3, [r3, #4]
 80182aa:	f003 0301 	and.w	r3, r3, #1
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d102      	bne.n	80182b8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80182b2:	f000 f889 	bl	80183c8 <HW_IPCC_BLE_EvtHandler>
 80182b6:	e00e      	b.n	80182d6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80182b8:	2108      	movs	r1, #8
 80182ba:	4808      	ldr	r0, [pc, #32]	@ (80182dc <HW_IPCC_Rx_Handler+0x68>)
 80182bc:	f7ff ffc4 	bl	8018248 <LL_C2_IPCC_IsActiveFlag_CHx>
 80182c0:	4603      	mov	r3, r0
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d008      	beq.n	80182d8 <HW_IPCC_Rx_Handler+0x64>
 80182c6:	4b05      	ldr	r3, [pc, #20]	@ (80182dc <HW_IPCC_Rx_Handler+0x68>)
 80182c8:	685b      	ldr	r3, [r3, #4]
 80182ca:	f003 0308 	and.w	r3, r3, #8
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d102      	bne.n	80182d8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80182d2:	f000 f901 	bl	80184d8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80182d6:	bf00      	nop
 80182d8:	bf00      	nop
}
 80182da:	bd80      	pop	{r7, pc}
 80182dc:	58000c00 	.word	0x58000c00

080182e0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80182e0:	b580      	push	{r7, lr}
 80182e2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80182e4:	2102      	movs	r1, #2
 80182e6:	4818      	ldr	r0, [pc, #96]	@ (8018348 <HW_IPCC_Tx_Handler+0x68>)
 80182e8:	f7ff ff99 	bl	801821e <LL_C1_IPCC_IsActiveFlag_CHx>
 80182ec:	4603      	mov	r3, r0
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d108      	bne.n	8018304 <HW_IPCC_Tx_Handler+0x24>
 80182f2:	4b15      	ldr	r3, [pc, #84]	@ (8018348 <HW_IPCC_Tx_Handler+0x68>)
 80182f4:	685b      	ldr	r3, [r3, #4]
 80182f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d102      	bne.n	8018304 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80182fe:	f000 f893 	bl	8018428 <HW_IPCC_SYS_CmdEvtHandler>
 8018302:	e01e      	b.n	8018342 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8018304:	2108      	movs	r1, #8
 8018306:	4810      	ldr	r0, [pc, #64]	@ (8018348 <HW_IPCC_Tx_Handler+0x68>)
 8018308:	f7ff ff89 	bl	801821e <LL_C1_IPCC_IsActiveFlag_CHx>
 801830c:	4603      	mov	r3, r0
 801830e:	2b00      	cmp	r3, #0
 8018310:	d108      	bne.n	8018324 <HW_IPCC_Tx_Handler+0x44>
 8018312:	4b0d      	ldr	r3, [pc, #52]	@ (8018348 <HW_IPCC_Tx_Handler+0x68>)
 8018314:	685b      	ldr	r3, [r3, #4]
 8018316:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801831a:	2b00      	cmp	r3, #0
 801831c:	d102      	bne.n	8018324 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 801831e:	f000 f8bd 	bl	801849c <HW_IPCC_MM_FreeBufHandler>
 8018322:	e00e      	b.n	8018342 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8018324:	2120      	movs	r1, #32
 8018326:	4808      	ldr	r0, [pc, #32]	@ (8018348 <HW_IPCC_Tx_Handler+0x68>)
 8018328:	f7ff ff79 	bl	801821e <LL_C1_IPCC_IsActiveFlag_CHx>
 801832c:	4603      	mov	r3, r0
 801832e:	2b00      	cmp	r3, #0
 8018330:	d108      	bne.n	8018344 <HW_IPCC_Tx_Handler+0x64>
 8018332:	4b05      	ldr	r3, [pc, #20]	@ (8018348 <HW_IPCC_Tx_Handler+0x68>)
 8018334:	685b      	ldr	r3, [r3, #4]
 8018336:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801833a:	2b00      	cmp	r3, #0
 801833c:	d102      	bne.n	8018344 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 801833e:	f000 f84f 	bl	80183e0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8018342:	bf00      	nop
 8018344:	bf00      	nop
}
 8018346:	bd80      	pop	{r7, pc}
 8018348:	58000c00 	.word	0x58000c00

0801834c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 801834c:	b580      	push	{r7, lr}
 801834e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8018350:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8018354:	f7ff fed3 	bl	80180fe <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8018358:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801835c:	f7ff fea4 	bl	80180a8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8018360:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8018364:	f7ff fe8c 	bl	8018080 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8018368:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801836a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 801836c:	f7ff fe78 	bl	8018060 <LL_PWR_EnableBootC2>

  return;
 8018370:	bf00      	nop
}
 8018372:	bd80      	pop	{r7, pc}

08018374 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8018374:	b580      	push	{r7, lr}
 8018376:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8018378:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 801837c:	f7ff fea6 	bl	80180cc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8018380:	4806      	ldr	r0, [pc, #24]	@ (801839c <HW_IPCC_Init+0x28>)
 8018382:	f7ff fee8 	bl	8018156 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8018386:	4805      	ldr	r0, [pc, #20]	@ (801839c <HW_IPCC_Init+0x28>)
 8018388:	f7ff fed5 	bl	8018136 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 801838c:	202c      	movs	r0, #44	@ 0x2c
 801838e:	f7f0 f906 	bl	800859e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8018392:	202d      	movs	r0, #45	@ 0x2d
 8018394:	f7f0 f903 	bl	800859e <HAL_NVIC_EnableIRQ>

  return;
 8018398:	bf00      	nop
}
 801839a:	bd80      	pop	{r7, pc}
 801839c:	58000c00 	.word	0x58000c00

080183a0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80183a4:	2101      	movs	r1, #1
 80183a6:	4802      	ldr	r0, [pc, #8]	@ (80183b0 <HW_IPCC_BLE_Init+0x10>)
 80183a8:	f7ff ff0a 	bl	80181c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80183ac:	bf00      	nop
}
 80183ae:	bd80      	pop	{r7, pc}
 80183b0:	58000c00 	.word	0x58000c00

080183b4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80183b4:	b580      	push	{r7, lr}
 80183b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80183b8:	2101      	movs	r1, #1
 80183ba:	4802      	ldr	r0, [pc, #8]	@ (80183c4 <HW_IPCC_BLE_SendCmd+0x10>)
 80183bc:	f7ff ff20 	bl	8018200 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80183c0:	bf00      	nop
}
 80183c2:	bd80      	pop	{r7, pc}
 80183c4:	58000c00 	.word	0x58000c00

080183c8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80183cc:	f7fe fa1a 	bl	8016804 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80183d0:	2101      	movs	r1, #1
 80183d2:	4802      	ldr	r0, [pc, #8]	@ (80183dc <HW_IPCC_BLE_EvtHandler+0x14>)
 80183d4:	f7ff ff06 	bl	80181e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80183d8:	bf00      	nop
}
 80183da:	bd80      	pop	{r7, pc}
 80183dc:	58000c00 	.word	0x58000c00

080183e0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80183e4:	2120      	movs	r1, #32
 80183e6:	4803      	ldr	r0, [pc, #12]	@ (80183f4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80183e8:	f7ff fed8 	bl	801819c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80183ec:	f7fe fa3a 	bl	8016864 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80183f0:	bf00      	nop
}
 80183f2:	bd80      	pop	{r7, pc}
 80183f4:	58000c00 	.word	0x58000c00

080183f8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80183fc:	2102      	movs	r1, #2
 80183fe:	4802      	ldr	r0, [pc, #8]	@ (8018408 <HW_IPCC_SYS_Init+0x10>)
 8018400:	f7ff fede 	bl	80181c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8018404:	bf00      	nop
}
 8018406:	bd80      	pop	{r7, pc}
 8018408:	58000c00 	.word	0x58000c00

0801840c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 801840c:	b580      	push	{r7, lr}
 801840e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8018410:	2102      	movs	r1, #2
 8018412:	4804      	ldr	r0, [pc, #16]	@ (8018424 <HW_IPCC_SYS_SendCmd+0x18>)
 8018414:	f7ff fef4 	bl	8018200 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8018418:	2102      	movs	r1, #2
 801841a:	4802      	ldr	r0, [pc, #8]	@ (8018424 <HW_IPCC_SYS_SendCmd+0x18>)
 801841c:	f7ff feab 	bl	8018176 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8018420:	bf00      	nop
}
 8018422:	bd80      	pop	{r7, pc}
 8018424:	58000c00 	.word	0x58000c00

08018428 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8018428:	b580      	push	{r7, lr}
 801842a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801842c:	2102      	movs	r1, #2
 801842e:	4803      	ldr	r0, [pc, #12]	@ (801843c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8018430:	f7ff feb4 	bl	801819c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8018434:	f7fe fa66 	bl	8016904 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8018438:	bf00      	nop
}
 801843a:	bd80      	pop	{r7, pc}
 801843c:	58000c00 	.word	0x58000c00

08018440 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8018440:	b580      	push	{r7, lr}
 8018442:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8018444:	f7fe fa74 	bl	8016930 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8018448:	2102      	movs	r1, #2
 801844a:	4802      	ldr	r0, [pc, #8]	@ (8018454 <HW_IPCC_SYS_EvtHandler+0x14>)
 801844c:	f7ff feca 	bl	80181e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8018450:	bf00      	nop
}
 8018452:	bd80      	pop	{r7, pc}
 8018454:	58000c00 	.word	0x58000c00

08018458 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8018458:	b580      	push	{r7, lr}
 801845a:	b082      	sub	sp, #8
 801845c:	af00      	add	r7, sp, #0
 801845e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8018460:	2108      	movs	r1, #8
 8018462:	480c      	ldr	r0, [pc, #48]	@ (8018494 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018464:	f7ff fedb 	bl	801821e <LL_C1_IPCC_IsActiveFlag_CHx>
 8018468:	4603      	mov	r3, r0
 801846a:	2b00      	cmp	r3, #0
 801846c:	d007      	beq.n	801847e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801846e:	4a0a      	ldr	r2, [pc, #40]	@ (8018498 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018474:	2108      	movs	r1, #8
 8018476:	4807      	ldr	r0, [pc, #28]	@ (8018494 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018478:	f7ff fe7d 	bl	8018176 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 801847c:	e006      	b.n	801848c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018482:	2108      	movs	r1, #8
 8018484:	4803      	ldr	r0, [pc, #12]	@ (8018494 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018486:	f7ff febb 	bl	8018200 <LL_C1_IPCC_SetFlag_CHx>
  return;
 801848a:	bf00      	nop
}
 801848c:	3708      	adds	r7, #8
 801848e:	46bd      	mov	sp, r7
 8018490:	bd80      	pop	{r7, pc}
 8018492:	bf00      	nop
 8018494:	58000c00 	.word	0x58000c00
 8018498:	2000156c 	.word	0x2000156c

0801849c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 801849c:	b580      	push	{r7, lr}
 801849e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80184a0:	2108      	movs	r1, #8
 80184a2:	4806      	ldr	r0, [pc, #24]	@ (80184bc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80184a4:	f7ff fe7a 	bl	801819c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80184a8:	4b05      	ldr	r3, [pc, #20]	@ (80184c0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80184ae:	2108      	movs	r1, #8
 80184b0:	4802      	ldr	r0, [pc, #8]	@ (80184bc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80184b2:	f7ff fea5 	bl	8018200 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80184b6:	bf00      	nop
}
 80184b8:	bd80      	pop	{r7, pc}
 80184ba:	bf00      	nop
 80184bc:	58000c00 	.word	0x58000c00
 80184c0:	2000156c 	.word	0x2000156c

080184c4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80184c8:	2108      	movs	r1, #8
 80184ca:	4802      	ldr	r0, [pc, #8]	@ (80184d4 <HW_IPCC_TRACES_Init+0x10>)
 80184cc:	f7ff fe78 	bl	80181c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80184d0:	bf00      	nop
}
 80184d2:	bd80      	pop	{r7, pc}
 80184d4:	58000c00 	.word	0x58000c00

080184d8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80184dc:	f7fe fad0 	bl	8016a80 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80184e0:	2108      	movs	r1, #8
 80184e2:	4802      	ldr	r0, [pc, #8]	@ (80184ec <HW_IPCC_TRACES_EvtHandler+0x14>)
 80184e4:	f7ff fe7e 	bl	80181e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80184e8:	bf00      	nop
}
 80184ea:	bd80      	pop	{r7, pc}
 80184ec:	58000c00 	.word	0x58000c00

080184f0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80184f4:	2200      	movs	r2, #0
 80184f6:	4912      	ldr	r1, [pc, #72]	@ (8018540 <MX_USB_Device_Init+0x50>)
 80184f8:	4812      	ldr	r0, [pc, #72]	@ (8018544 <MX_USB_Device_Init+0x54>)
 80184fa:	f7fb f82d 	bl	8013558 <USBD_Init>
 80184fe:	4603      	mov	r3, r0
 8018500:	2b00      	cmp	r3, #0
 8018502:	d001      	beq.n	8018508 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8018504:	f7ea fbea 	bl	8002cdc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8018508:	490f      	ldr	r1, [pc, #60]	@ (8018548 <MX_USB_Device_Init+0x58>)
 801850a:	480e      	ldr	r0, [pc, #56]	@ (8018544 <MX_USB_Device_Init+0x54>)
 801850c:	f7fb f854 	bl	80135b8 <USBD_RegisterClass>
 8018510:	4603      	mov	r3, r0
 8018512:	2b00      	cmp	r3, #0
 8018514:	d001      	beq.n	801851a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8018516:	f7ea fbe1 	bl	8002cdc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801851a:	490c      	ldr	r1, [pc, #48]	@ (801854c <MX_USB_Device_Init+0x5c>)
 801851c:	4809      	ldr	r0, [pc, #36]	@ (8018544 <MX_USB_Device_Init+0x54>)
 801851e:	f7fa ff4b 	bl	80133b8 <USBD_CDC_RegisterInterface>
 8018522:	4603      	mov	r3, r0
 8018524:	2b00      	cmp	r3, #0
 8018526:	d001      	beq.n	801852c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8018528:	f7ea fbd8 	bl	8002cdc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801852c:	4805      	ldr	r0, [pc, #20]	@ (8018544 <MX_USB_Device_Init+0x54>)
 801852e:	f7fb f879 	bl	8013624 <USBD_Start>
 8018532:	4603      	mov	r3, r0
 8018534:	2b00      	cmp	r3, #0
 8018536:	d001      	beq.n	801853c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8018538:	f7ea fbd0 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801853c:	bf00      	nop
 801853e:	bd80      	pop	{r7, pc}
 8018540:	200000ec 	.word	0x200000ec
 8018544:	20001570 	.word	0x20001570
 8018548:	20000044 	.word	0x20000044
 801854c:	200000d8 	.word	0x200000d8

08018550 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018550:	b580      	push	{r7, lr}
 8018552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018554:	2200      	movs	r2, #0
 8018556:	4905      	ldr	r1, [pc, #20]	@ (801856c <CDC_Init_FS+0x1c>)
 8018558:	4805      	ldr	r0, [pc, #20]	@ (8018570 <CDC_Init_FS+0x20>)
 801855a:	f7fa ff47 	bl	80133ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801855e:	4905      	ldr	r1, [pc, #20]	@ (8018574 <CDC_Init_FS+0x24>)
 8018560:	4803      	ldr	r0, [pc, #12]	@ (8018570 <CDC_Init_FS+0x20>)
 8018562:	f7fa ff65 	bl	8013430 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018566:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018568:	4618      	mov	r0, r3
 801856a:	bd80      	pop	{r7, pc}
 801856c:	2000204c 	.word	0x2000204c
 8018570:	20001570 	.word	0x20001570
 8018574:	2000184c 	.word	0x2000184c

08018578 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018578:	b480      	push	{r7}
 801857a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801857c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801857e:	4618      	mov	r0, r3
 8018580:	46bd      	mov	sp, r7
 8018582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018586:	4770      	bx	lr

08018588 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018588:	b480      	push	{r7}
 801858a:	b083      	sub	sp, #12
 801858c:	af00      	add	r7, sp, #0
 801858e:	4603      	mov	r3, r0
 8018590:	6039      	str	r1, [r7, #0]
 8018592:	71fb      	strb	r3, [r7, #7]
 8018594:	4613      	mov	r3, r2
 8018596:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018598:	79fb      	ldrb	r3, [r7, #7]
 801859a:	2b23      	cmp	r3, #35	@ 0x23
 801859c:	d84a      	bhi.n	8018634 <CDC_Control_FS+0xac>
 801859e:	a201      	add	r2, pc, #4	@ (adr r2, 80185a4 <CDC_Control_FS+0x1c>)
 80185a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185a4:	08018635 	.word	0x08018635
 80185a8:	08018635 	.word	0x08018635
 80185ac:	08018635 	.word	0x08018635
 80185b0:	08018635 	.word	0x08018635
 80185b4:	08018635 	.word	0x08018635
 80185b8:	08018635 	.word	0x08018635
 80185bc:	08018635 	.word	0x08018635
 80185c0:	08018635 	.word	0x08018635
 80185c4:	08018635 	.word	0x08018635
 80185c8:	08018635 	.word	0x08018635
 80185cc:	08018635 	.word	0x08018635
 80185d0:	08018635 	.word	0x08018635
 80185d4:	08018635 	.word	0x08018635
 80185d8:	08018635 	.word	0x08018635
 80185dc:	08018635 	.word	0x08018635
 80185e0:	08018635 	.word	0x08018635
 80185e4:	08018635 	.word	0x08018635
 80185e8:	08018635 	.word	0x08018635
 80185ec:	08018635 	.word	0x08018635
 80185f0:	08018635 	.word	0x08018635
 80185f4:	08018635 	.word	0x08018635
 80185f8:	08018635 	.word	0x08018635
 80185fc:	08018635 	.word	0x08018635
 8018600:	08018635 	.word	0x08018635
 8018604:	08018635 	.word	0x08018635
 8018608:	08018635 	.word	0x08018635
 801860c:	08018635 	.word	0x08018635
 8018610:	08018635 	.word	0x08018635
 8018614:	08018635 	.word	0x08018635
 8018618:	08018635 	.word	0x08018635
 801861c:	08018635 	.word	0x08018635
 8018620:	08018635 	.word	0x08018635
 8018624:	08018635 	.word	0x08018635
 8018628:	08018635 	.word	0x08018635
 801862c:	08018635 	.word	0x08018635
 8018630:	08018635 	.word	0x08018635
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018634:	bf00      	nop
  }

  return (USBD_OK);
 8018636:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018638:	4618      	mov	r0, r3
 801863a:	370c      	adds	r7, #12
 801863c:	46bd      	mov	sp, r7
 801863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018642:	4770      	bx	lr

08018644 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018644:	b580      	push	{r7, lr}
 8018646:	b084      	sub	sp, #16
 8018648:	af00      	add	r7, sp, #0
 801864a:	6078      	str	r0, [r7, #4]
 801864c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801864e:	6879      	ldr	r1, [r7, #4]
 8018650:	480f      	ldr	r0, [pc, #60]	@ (8018690 <CDC_Receive_FS+0x4c>)
 8018652:	f7fa feed 	bl	8013430 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018656:	480e      	ldr	r0, [pc, #56]	@ (8018690 <CDC_Receive_FS+0x4c>)
 8018658:	f7fa ff48 	bl	80134ec <USBD_CDC_ReceivePacket>

  memset (usbbuffer, '\0', 64);  // clear the buffer
 801865c:	2240      	movs	r2, #64	@ 0x40
 801865e:	2100      	movs	r1, #0
 8018660:	480c      	ldr	r0, [pc, #48]	@ (8018694 <CDC_Receive_FS+0x50>)
 8018662:	f002 fe6a 	bl	801b33a <memset>
  uint8_t len = (uint8_t)*Len;
 8018666:	683b      	ldr	r3, [r7, #0]
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	73fb      	strb	r3, [r7, #15]
  memcpy((uint8_t *) usbbuffer,(uint8_t *) Buf, len);  // copy the data to the buffer
 801866c:	7bfb      	ldrb	r3, [r7, #15]
 801866e:	461a      	mov	r2, r3
 8018670:	6879      	ldr	r1, [r7, #4]
 8018672:	4808      	ldr	r0, [pc, #32]	@ (8018694 <CDC_Receive_FS+0x50>)
 8018674:	f002 ff7d 	bl	801b572 <memcpy>
  memset(Buf, '\0', len);
 8018678:	7bfb      	ldrb	r3, [r7, #15]
 801867a:	461a      	mov	r2, r3
 801867c:	2100      	movs	r1, #0
 801867e:	6878      	ldr	r0, [r7, #4]
 8018680:	f002 fe5b 	bl	801b33a <memset>
  return (USBD_OK);
 8018684:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018686:	4618      	mov	r0, r3
 8018688:	3710      	adds	r7, #16
 801868a:	46bd      	mov	sp, r7
 801868c:	bd80      	pop	{r7, pc}
 801868e:	bf00      	nop
 8018690:	20001570 	.word	0x20001570
 8018694:	20000af4 	.word	0x20000af4

08018698 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8018698:	b580      	push	{r7, lr}
 801869a:	b084      	sub	sp, #16
 801869c:	af00      	add	r7, sp, #0
 801869e:	6078      	str	r0, [r7, #4]
 80186a0:	460b      	mov	r3, r1
 80186a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80186a4:	2300      	movs	r3, #0
 80186a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80186a8:	4b0d      	ldr	r3, [pc, #52]	@ (80186e0 <CDC_Transmit_FS+0x48>)
 80186aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80186ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80186b0:	68bb      	ldr	r3, [r7, #8]
 80186b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d001      	beq.n	80186be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80186ba:	2301      	movs	r3, #1
 80186bc:	e00b      	b.n	80186d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80186be:	887b      	ldrh	r3, [r7, #2]
 80186c0:	461a      	mov	r2, r3
 80186c2:	6879      	ldr	r1, [r7, #4]
 80186c4:	4806      	ldr	r0, [pc, #24]	@ (80186e0 <CDC_Transmit_FS+0x48>)
 80186c6:	f7fa fe91 	bl	80133ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80186ca:	4805      	ldr	r0, [pc, #20]	@ (80186e0 <CDC_Transmit_FS+0x48>)
 80186cc:	f7fa fece 	bl	801346c <USBD_CDC_TransmitPacket>
 80186d0:	4603      	mov	r3, r0
 80186d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80186d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80186d6:	4618      	mov	r0, r3
 80186d8:	3710      	adds	r7, #16
 80186da:	46bd      	mov	sp, r7
 80186dc:	bd80      	pop	{r7, pc}
 80186de:	bf00      	nop
 80186e0:	20001570 	.word	0x20001570

080186e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80186e4:	b480      	push	{r7}
 80186e6:	b087      	sub	sp, #28
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	60f8      	str	r0, [r7, #12]
 80186ec:	60b9      	str	r1, [r7, #8]
 80186ee:	4613      	mov	r3, r2
 80186f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80186f2:	2300      	movs	r3, #0
 80186f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80186f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80186fa:	4618      	mov	r0, r3
 80186fc:	371c      	adds	r7, #28
 80186fe:	46bd      	mov	sp, r7
 8018700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018704:	4770      	bx	lr
	...

08018708 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018708:	b480      	push	{r7}
 801870a:	b083      	sub	sp, #12
 801870c:	af00      	add	r7, sp, #0
 801870e:	4603      	mov	r3, r0
 8018710:	6039      	str	r1, [r7, #0]
 8018712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8018714:	683b      	ldr	r3, [r7, #0]
 8018716:	2212      	movs	r2, #18
 8018718:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801871a:	4b03      	ldr	r3, [pc, #12]	@ (8018728 <USBD_CDC_DeviceDescriptor+0x20>)
}
 801871c:	4618      	mov	r0, r3
 801871e:	370c      	adds	r7, #12
 8018720:	46bd      	mov	sp, r7
 8018722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018726:	4770      	bx	lr
 8018728:	2000010c 	.word	0x2000010c

0801872c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801872c:	b480      	push	{r7}
 801872e:	b083      	sub	sp, #12
 8018730:	af00      	add	r7, sp, #0
 8018732:	4603      	mov	r3, r0
 8018734:	6039      	str	r1, [r7, #0]
 8018736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018738:	683b      	ldr	r3, [r7, #0]
 801873a:	2204      	movs	r2, #4
 801873c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801873e:	4b03      	ldr	r3, [pc, #12]	@ (801874c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8018740:	4618      	mov	r0, r3
 8018742:	370c      	adds	r7, #12
 8018744:	46bd      	mov	sp, r7
 8018746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801874a:	4770      	bx	lr
 801874c:	20000120 	.word	0x20000120

08018750 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018750:	b580      	push	{r7, lr}
 8018752:	b082      	sub	sp, #8
 8018754:	af00      	add	r7, sp, #0
 8018756:	4603      	mov	r3, r0
 8018758:	6039      	str	r1, [r7, #0]
 801875a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801875c:	79fb      	ldrb	r3, [r7, #7]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d105      	bne.n	801876e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018762:	683a      	ldr	r2, [r7, #0]
 8018764:	4907      	ldr	r1, [pc, #28]	@ (8018784 <USBD_CDC_ProductStrDescriptor+0x34>)
 8018766:	4808      	ldr	r0, [pc, #32]	@ (8018788 <USBD_CDC_ProductStrDescriptor+0x38>)
 8018768:	f7fc f8a4 	bl	80148b4 <USBD_GetString>
 801876c:	e004      	b.n	8018778 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801876e:	683a      	ldr	r2, [r7, #0]
 8018770:	4904      	ldr	r1, [pc, #16]	@ (8018784 <USBD_CDC_ProductStrDescriptor+0x34>)
 8018772:	4805      	ldr	r0, [pc, #20]	@ (8018788 <USBD_CDC_ProductStrDescriptor+0x38>)
 8018774:	f7fc f89e 	bl	80148b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018778:	4b02      	ldr	r3, [pc, #8]	@ (8018784 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801877a:	4618      	mov	r0, r3
 801877c:	3708      	adds	r7, #8
 801877e:	46bd      	mov	sp, r7
 8018780:	bd80      	pop	{r7, pc}
 8018782:	bf00      	nop
 8018784:	2000284c 	.word	0x2000284c
 8018788:	0801fb98 	.word	0x0801fb98

0801878c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b082      	sub	sp, #8
 8018790:	af00      	add	r7, sp, #0
 8018792:	4603      	mov	r3, r0
 8018794:	6039      	str	r1, [r7, #0]
 8018796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018798:	683a      	ldr	r2, [r7, #0]
 801879a:	4904      	ldr	r1, [pc, #16]	@ (80187ac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801879c:	4804      	ldr	r0, [pc, #16]	@ (80187b0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801879e:	f7fc f889 	bl	80148b4 <USBD_GetString>
  return USBD_StrDesc;
 80187a2:	4b02      	ldr	r3, [pc, #8]	@ (80187ac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80187a4:	4618      	mov	r0, r3
 80187a6:	3708      	adds	r7, #8
 80187a8:	46bd      	mov	sp, r7
 80187aa:	bd80      	pop	{r7, pc}
 80187ac:	2000284c 	.word	0x2000284c
 80187b0:	0801fbb0 	.word	0x0801fbb0

080187b4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b082      	sub	sp, #8
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	4603      	mov	r3, r0
 80187bc:	6039      	str	r1, [r7, #0]
 80187be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80187c0:	683b      	ldr	r3, [r7, #0]
 80187c2:	221a      	movs	r2, #26
 80187c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80187c6:	f000 f843 	bl	8018850 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80187ca:	4b02      	ldr	r3, [pc, #8]	@ (80187d4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80187cc:	4618      	mov	r0, r3
 80187ce:	3708      	adds	r7, #8
 80187d0:	46bd      	mov	sp, r7
 80187d2:	bd80      	pop	{r7, pc}
 80187d4:	20000124 	.word	0x20000124

080187d8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80187d8:	b580      	push	{r7, lr}
 80187da:	b082      	sub	sp, #8
 80187dc:	af00      	add	r7, sp, #0
 80187de:	4603      	mov	r3, r0
 80187e0:	6039      	str	r1, [r7, #0]
 80187e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80187e4:	79fb      	ldrb	r3, [r7, #7]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d105      	bne.n	80187f6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80187ea:	683a      	ldr	r2, [r7, #0]
 80187ec:	4907      	ldr	r1, [pc, #28]	@ (801880c <USBD_CDC_ConfigStrDescriptor+0x34>)
 80187ee:	4808      	ldr	r0, [pc, #32]	@ (8018810 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80187f0:	f7fc f860 	bl	80148b4 <USBD_GetString>
 80187f4:	e004      	b.n	8018800 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80187f6:	683a      	ldr	r2, [r7, #0]
 80187f8:	4904      	ldr	r1, [pc, #16]	@ (801880c <USBD_CDC_ConfigStrDescriptor+0x34>)
 80187fa:	4805      	ldr	r0, [pc, #20]	@ (8018810 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80187fc:	f7fc f85a 	bl	80148b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018800:	4b02      	ldr	r3, [pc, #8]	@ (801880c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8018802:	4618      	mov	r0, r3
 8018804:	3708      	adds	r7, #8
 8018806:	46bd      	mov	sp, r7
 8018808:	bd80      	pop	{r7, pc}
 801880a:	bf00      	nop
 801880c:	2000284c 	.word	0x2000284c
 8018810:	0801fbc4 	.word	0x0801fbc4

08018814 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018814:	b580      	push	{r7, lr}
 8018816:	b082      	sub	sp, #8
 8018818:	af00      	add	r7, sp, #0
 801881a:	4603      	mov	r3, r0
 801881c:	6039      	str	r1, [r7, #0]
 801881e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018820:	79fb      	ldrb	r3, [r7, #7]
 8018822:	2b00      	cmp	r3, #0
 8018824:	d105      	bne.n	8018832 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018826:	683a      	ldr	r2, [r7, #0]
 8018828:	4907      	ldr	r1, [pc, #28]	@ (8018848 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801882a:	4808      	ldr	r0, [pc, #32]	@ (801884c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801882c:	f7fc f842 	bl	80148b4 <USBD_GetString>
 8018830:	e004      	b.n	801883c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018832:	683a      	ldr	r2, [r7, #0]
 8018834:	4904      	ldr	r1, [pc, #16]	@ (8018848 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8018836:	4805      	ldr	r0, [pc, #20]	@ (801884c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8018838:	f7fc f83c 	bl	80148b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801883c:	4b02      	ldr	r3, [pc, #8]	@ (8018848 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801883e:	4618      	mov	r0, r3
 8018840:	3708      	adds	r7, #8
 8018842:	46bd      	mov	sp, r7
 8018844:	bd80      	pop	{r7, pc}
 8018846:	bf00      	nop
 8018848:	2000284c 	.word	0x2000284c
 801884c:	0801fbd0 	.word	0x0801fbd0

08018850 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018850:	b580      	push	{r7, lr}
 8018852:	b084      	sub	sp, #16
 8018854:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018856:	4b0f      	ldr	r3, [pc, #60]	@ (8018894 <Get_SerialNum+0x44>)
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801885c:	4b0e      	ldr	r3, [pc, #56]	@ (8018898 <Get_SerialNum+0x48>)
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018862:	4b0e      	ldr	r3, [pc, #56]	@ (801889c <Get_SerialNum+0x4c>)
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018868:	68fa      	ldr	r2, [r7, #12]
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	4413      	add	r3, r2
 801886e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	2b00      	cmp	r3, #0
 8018874:	d009      	beq.n	801888a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018876:	2208      	movs	r2, #8
 8018878:	4909      	ldr	r1, [pc, #36]	@ (80188a0 <Get_SerialNum+0x50>)
 801887a:	68f8      	ldr	r0, [r7, #12]
 801887c:	f000 f814 	bl	80188a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018880:	2204      	movs	r2, #4
 8018882:	4908      	ldr	r1, [pc, #32]	@ (80188a4 <Get_SerialNum+0x54>)
 8018884:	68b8      	ldr	r0, [r7, #8]
 8018886:	f000 f80f 	bl	80188a8 <IntToUnicode>
  }
}
 801888a:	bf00      	nop
 801888c:	3710      	adds	r7, #16
 801888e:	46bd      	mov	sp, r7
 8018890:	bd80      	pop	{r7, pc}
 8018892:	bf00      	nop
 8018894:	1fff7590 	.word	0x1fff7590
 8018898:	1fff7594 	.word	0x1fff7594
 801889c:	1fff7598 	.word	0x1fff7598
 80188a0:	20000126 	.word	0x20000126
 80188a4:	20000136 	.word	0x20000136

080188a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80188a8:	b480      	push	{r7}
 80188aa:	b087      	sub	sp, #28
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	60f8      	str	r0, [r7, #12]
 80188b0:	60b9      	str	r1, [r7, #8]
 80188b2:	4613      	mov	r3, r2
 80188b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80188b6:	2300      	movs	r3, #0
 80188b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80188ba:	2300      	movs	r3, #0
 80188bc:	75fb      	strb	r3, [r7, #23]
 80188be:	e027      	b.n	8018910 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	0f1b      	lsrs	r3, r3, #28
 80188c4:	2b09      	cmp	r3, #9
 80188c6:	d80b      	bhi.n	80188e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	0f1b      	lsrs	r3, r3, #28
 80188cc:	b2da      	uxtb	r2, r3
 80188ce:	7dfb      	ldrb	r3, [r7, #23]
 80188d0:	005b      	lsls	r3, r3, #1
 80188d2:	4619      	mov	r1, r3
 80188d4:	68bb      	ldr	r3, [r7, #8]
 80188d6:	440b      	add	r3, r1
 80188d8:	3230      	adds	r2, #48	@ 0x30
 80188da:	b2d2      	uxtb	r2, r2
 80188dc:	701a      	strb	r2, [r3, #0]
 80188de:	e00a      	b.n	80188f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	0f1b      	lsrs	r3, r3, #28
 80188e4:	b2da      	uxtb	r2, r3
 80188e6:	7dfb      	ldrb	r3, [r7, #23]
 80188e8:	005b      	lsls	r3, r3, #1
 80188ea:	4619      	mov	r1, r3
 80188ec:	68bb      	ldr	r3, [r7, #8]
 80188ee:	440b      	add	r3, r1
 80188f0:	3237      	adds	r2, #55	@ 0x37
 80188f2:	b2d2      	uxtb	r2, r2
 80188f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	011b      	lsls	r3, r3, #4
 80188fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80188fc:	7dfb      	ldrb	r3, [r7, #23]
 80188fe:	005b      	lsls	r3, r3, #1
 8018900:	3301      	adds	r3, #1
 8018902:	68ba      	ldr	r2, [r7, #8]
 8018904:	4413      	add	r3, r2
 8018906:	2200      	movs	r2, #0
 8018908:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801890a:	7dfb      	ldrb	r3, [r7, #23]
 801890c:	3301      	adds	r3, #1
 801890e:	75fb      	strb	r3, [r7, #23]
 8018910:	7dfa      	ldrb	r2, [r7, #23]
 8018912:	79fb      	ldrb	r3, [r7, #7]
 8018914:	429a      	cmp	r2, r3
 8018916:	d3d3      	bcc.n	80188c0 <IntToUnicode+0x18>
  }
}
 8018918:	bf00      	nop
 801891a:	bf00      	nop
 801891c:	371c      	adds	r7, #28
 801891e:	46bd      	mov	sp, r7
 8018920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018924:	4770      	bx	lr

08018926 <LL_AHB2_GRP1_EnableClock>:
{
 8018926:	b480      	push	{r7}
 8018928:	b085      	sub	sp, #20
 801892a:	af00      	add	r7, sp, #0
 801892c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801892e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018932:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018934:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	4313      	orrs	r3, r2
 801893c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801893e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018942:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	4013      	ands	r3, r2
 8018948:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801894a:	68fb      	ldr	r3, [r7, #12]
}
 801894c:	bf00      	nop
 801894e:	3714      	adds	r7, #20
 8018950:	46bd      	mov	sp, r7
 8018952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018956:	4770      	bx	lr

08018958 <LL_APB1_GRP1_EnableClock>:
{
 8018958:	b480      	push	{r7}
 801895a:	b085      	sub	sp, #20
 801895c:	af00      	add	r7, sp, #0
 801895e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8018960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018964:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018966:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	4313      	orrs	r3, r2
 801896e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8018970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018974:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	4013      	ands	r3, r2
 801897a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801897c:	68fb      	ldr	r3, [r7, #12]
}
 801897e:	bf00      	nop
 8018980:	3714      	adds	r7, #20
 8018982:	46bd      	mov	sp, r7
 8018984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018988:	4770      	bx	lr
	...

0801898c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801898c:	b580      	push	{r7, lr}
 801898e:	b088      	sub	sp, #32
 8018990:	af00      	add	r7, sp, #0
 8018992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018994:	f107 030c 	add.w	r3, r7, #12
 8018998:	2200      	movs	r2, #0
 801899a:	601a      	str	r2, [r3, #0]
 801899c:	605a      	str	r2, [r3, #4]
 801899e:	609a      	str	r2, [r3, #8]
 80189a0:	60da      	str	r2, [r3, #12]
 80189a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	4a13      	ldr	r2, [pc, #76]	@ (80189f8 <HAL_PCD_MspInit+0x6c>)
 80189aa:	4293      	cmp	r3, r2
 80189ac:	d120      	bne.n	80189f0 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80189ae:	2001      	movs	r0, #1
 80189b0:	f7ff ffb9 	bl	8018926 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80189b4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80189b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80189ba:	2302      	movs	r3, #2
 80189bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80189be:	2300      	movs	r3, #0
 80189c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80189c2:	2300      	movs	r3, #0
 80189c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80189c6:	230a      	movs	r3, #10
 80189c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80189ca:	f107 030c 	add.w	r3, r7, #12
 80189ce:	4619      	mov	r1, r3
 80189d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80189d4:	f7f0 f9fc 	bl	8008dd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80189d8:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80189dc:	f7ff ffbc 	bl	8018958 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80189e0:	2200      	movs	r2, #0
 80189e2:	2105      	movs	r1, #5
 80189e4:	2014      	movs	r0, #20
 80189e6:	f7ef fdc0 	bl	800856a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80189ea:	2014      	movs	r0, #20
 80189ec:	f7ef fdd7 	bl	800859e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80189f0:	bf00      	nop
 80189f2:	3720      	adds	r7, #32
 80189f4:	46bd      	mov	sp, r7
 80189f6:	bd80      	pop	{r7, pc}
 80189f8:	40006800 	.word	0x40006800

080189fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80189fc:	b580      	push	{r7, lr}
 80189fe:	b082      	sub	sp, #8
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8018a10:	4619      	mov	r1, r3
 8018a12:	4610      	mov	r0, r2
 8018a14:	f7fa fe53 	bl	80136be <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8018a18:	bf00      	nop
 8018a1a:	3708      	adds	r7, #8
 8018a1c:	46bd      	mov	sp, r7
 8018a1e:	bd80      	pop	{r7, pc}

08018a20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b082      	sub	sp, #8
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	6078      	str	r0, [r7, #4]
 8018a28:	460b      	mov	r3, r1
 8018a2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018a32:	78fa      	ldrb	r2, [r7, #3]
 8018a34:	6879      	ldr	r1, [r7, #4]
 8018a36:	4613      	mov	r3, r2
 8018a38:	009b      	lsls	r3, r3, #2
 8018a3a:	4413      	add	r3, r2
 8018a3c:	00db      	lsls	r3, r3, #3
 8018a3e:	440b      	add	r3, r1
 8018a40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018a44:	681a      	ldr	r2, [r3, #0]
 8018a46:	78fb      	ldrb	r3, [r7, #3]
 8018a48:	4619      	mov	r1, r3
 8018a4a:	f7fa fe8d 	bl	8013768 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8018a4e:	bf00      	nop
 8018a50:	3708      	adds	r7, #8
 8018a52:	46bd      	mov	sp, r7
 8018a54:	bd80      	pop	{r7, pc}

08018a56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018a56:	b580      	push	{r7, lr}
 8018a58:	b082      	sub	sp, #8
 8018a5a:	af00      	add	r7, sp, #0
 8018a5c:	6078      	str	r0, [r7, #4]
 8018a5e:	460b      	mov	r3, r1
 8018a60:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018a68:	78fa      	ldrb	r2, [r7, #3]
 8018a6a:	6879      	ldr	r1, [r7, #4]
 8018a6c:	4613      	mov	r3, r2
 8018a6e:	009b      	lsls	r3, r3, #2
 8018a70:	4413      	add	r3, r2
 8018a72:	00db      	lsls	r3, r3, #3
 8018a74:	440b      	add	r3, r1
 8018a76:	3324      	adds	r3, #36	@ 0x24
 8018a78:	681a      	ldr	r2, [r3, #0]
 8018a7a:	78fb      	ldrb	r3, [r7, #3]
 8018a7c:	4619      	mov	r1, r3
 8018a7e:	f7fa ff26 	bl	80138ce <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8018a82:	bf00      	nop
 8018a84:	3708      	adds	r7, #8
 8018a86:	46bd      	mov	sp, r7
 8018a88:	bd80      	pop	{r7, pc}

08018a8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018a8a:	b580      	push	{r7, lr}
 8018a8c:	b082      	sub	sp, #8
 8018a8e:	af00      	add	r7, sp, #0
 8018a90:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018a98:	4618      	mov	r0, r3
 8018a9a:	f7fb f860 	bl	8013b5e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8018a9e:	bf00      	nop
 8018aa0:	3708      	adds	r7, #8
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	bd80      	pop	{r7, pc}

08018aa6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018aa6:	b580      	push	{r7, lr}
 8018aa8:	b084      	sub	sp, #16
 8018aaa:	af00      	add	r7, sp, #0
 8018aac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018aae:	2301      	movs	r3, #1
 8018ab0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	795b      	ldrb	r3, [r3, #5]
 8018ab6:	2b02      	cmp	r3, #2
 8018ab8:	d001      	beq.n	8018abe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8018aba:	f7ea f90f 	bl	8002cdc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018ac4:	7bfa      	ldrb	r2, [r7, #15]
 8018ac6:	4611      	mov	r1, r2
 8018ac8:	4618      	mov	r0, r3
 8018aca:	f7fb f804 	bl	8013ad6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	f7fa ffac 	bl	8013a32 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8018ada:	bf00      	nop
 8018adc:	3710      	adds	r7, #16
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	bd80      	pop	{r7, pc}
	...

08018ae4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ae4:	b580      	push	{r7, lr}
 8018ae6:	b082      	sub	sp, #8
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018af2:	4618      	mov	r0, r3
 8018af4:	f7fa ffff 	bl	8013af6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	7a5b      	ldrb	r3, [r3, #9]
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d005      	beq.n	8018b0c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018b00:	4b04      	ldr	r3, [pc, #16]	@ (8018b14 <HAL_PCD_SuspendCallback+0x30>)
 8018b02:	691b      	ldr	r3, [r3, #16]
 8018b04:	4a03      	ldr	r2, [pc, #12]	@ (8018b14 <HAL_PCD_SuspendCallback+0x30>)
 8018b06:	f043 0306 	orr.w	r3, r3, #6
 8018b0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8018b0c:	bf00      	nop
 8018b0e:	3708      	adds	r7, #8
 8018b10:	46bd      	mov	sp, r7
 8018b12:	bd80      	pop	{r7, pc}
 8018b14:	e000ed00 	.word	0xe000ed00

08018b18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b082      	sub	sp, #8
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	7a5b      	ldrb	r3, [r3, #9]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d007      	beq.n	8018b38 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018b28:	4b08      	ldr	r3, [pc, #32]	@ (8018b4c <HAL_PCD_ResumeCallback+0x34>)
 8018b2a:	691b      	ldr	r3, [r3, #16]
 8018b2c:	4a07      	ldr	r2, [pc, #28]	@ (8018b4c <HAL_PCD_ResumeCallback+0x34>)
 8018b2e:	f023 0306 	bic.w	r3, r3, #6
 8018b32:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8018b34:	f000 f9fa 	bl	8018f2c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018b3e:	4618      	mov	r0, r3
 8018b40:	f7fa fff5 	bl	8013b2e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8018b44:	bf00      	nop
 8018b46:	3708      	adds	r7, #8
 8018b48:	46bd      	mov	sp, r7
 8018b4a:	bd80      	pop	{r7, pc}
 8018b4c:	e000ed00 	.word	0xe000ed00

08018b50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b082      	sub	sp, #8
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8018b58:	4a2c      	ldr	r2, [pc, #176]	@ (8018c0c <USBD_LL_Init+0xbc>)
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	4a2a      	ldr	r2, [pc, #168]	@ (8018c0c <USBD_LL_Init+0xbc>)
 8018b64:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8018b68:	f7f2 fea2 	bl	800b8b0 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8018b6c:	4b27      	ldr	r3, [pc, #156]	@ (8018c0c <USBD_LL_Init+0xbc>)
 8018b6e:	4a28      	ldr	r2, [pc, #160]	@ (8018c10 <USBD_LL_Init+0xc0>)
 8018b70:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8018b72:	4b26      	ldr	r3, [pc, #152]	@ (8018c0c <USBD_LL_Init+0xbc>)
 8018b74:	2208      	movs	r2, #8
 8018b76:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8018b78:	4b24      	ldr	r3, [pc, #144]	@ (8018c0c <USBD_LL_Init+0xbc>)
 8018b7a:	2202      	movs	r2, #2
 8018b7c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018b7e:	4b23      	ldr	r3, [pc, #140]	@ (8018c0c <USBD_LL_Init+0xbc>)
 8018b80:	2202      	movs	r2, #2
 8018b82:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8018b84:	4b21      	ldr	r3, [pc, #132]	@ (8018c0c <USBD_LL_Init+0xbc>)
 8018b86:	2200      	movs	r2, #0
 8018b88:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8018b8a:	4b20      	ldr	r3, [pc, #128]	@ (8018c0c <USBD_LL_Init+0xbc>)
 8018b8c:	2200      	movs	r2, #0
 8018b8e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8018b90:	4b1e      	ldr	r3, [pc, #120]	@ (8018c0c <USBD_LL_Init+0xbc>)
 8018b92:	2200      	movs	r2, #0
 8018b94:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8018b96:	4b1d      	ldr	r3, [pc, #116]	@ (8018c0c <USBD_LL_Init+0xbc>)
 8018b98:	2200      	movs	r2, #0
 8018b9a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8018b9c:	481b      	ldr	r0, [pc, #108]	@ (8018c0c <USBD_LL_Init+0xbc>)
 8018b9e:	f7f1 f967 	bl	8009e70 <HAL_PCD_Init>
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d001      	beq.n	8018bac <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8018ba8:	f7ea f898 	bl	8002cdc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018bb2:	2318      	movs	r3, #24
 8018bb4:	2200      	movs	r2, #0
 8018bb6:	2100      	movs	r1, #0
 8018bb8:	f7f2 fdee 	bl	800b798 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018bc2:	2358      	movs	r3, #88	@ 0x58
 8018bc4:	2200      	movs	r2, #0
 8018bc6:	2180      	movs	r1, #128	@ 0x80
 8018bc8:	f7f2 fde6 	bl	800b798 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018bd2:	23c0      	movs	r3, #192	@ 0xc0
 8018bd4:	2200      	movs	r2, #0
 8018bd6:	2181      	movs	r1, #129	@ 0x81
 8018bd8:	f7f2 fdde 	bl	800b798 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018be2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8018be6:	2200      	movs	r2, #0
 8018be8:	2101      	movs	r1, #1
 8018bea:	f7f2 fdd5 	bl	800b798 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018bf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018bf8:	2200      	movs	r2, #0
 8018bfa:	2182      	movs	r1, #130	@ 0x82
 8018bfc:	f7f2 fdcc 	bl	800b798 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8018c00:	2300      	movs	r3, #0
}
 8018c02:	4618      	mov	r0, r3
 8018c04:	3708      	adds	r7, #8
 8018c06:	46bd      	mov	sp, r7
 8018c08:	bd80      	pop	{r7, pc}
 8018c0a:	bf00      	nop
 8018c0c:	20002a4c 	.word	0x20002a4c
 8018c10:	40006800 	.word	0x40006800

08018c14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018c14:	b580      	push	{r7, lr}
 8018c16:	b084      	sub	sp, #16
 8018c18:	af00      	add	r7, sp, #0
 8018c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c1c:	2300      	movs	r3, #0
 8018c1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c20:	2300      	movs	r3, #0
 8018c22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018c2a:	4618      	mov	r0, r3
 8018c2c:	f7f1 f9ee 	bl	800a00c <HAL_PCD_Start>
 8018c30:	4603      	mov	r3, r0
 8018c32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c34:	7bfb      	ldrb	r3, [r7, #15]
 8018c36:	4618      	mov	r0, r3
 8018c38:	f000 f97e 	bl	8018f38 <USBD_Get_USB_Status>
 8018c3c:	4603      	mov	r3, r0
 8018c3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018c40:	7bbb      	ldrb	r3, [r7, #14]
}
 8018c42:	4618      	mov	r0, r3
 8018c44:	3710      	adds	r7, #16
 8018c46:	46bd      	mov	sp, r7
 8018c48:	bd80      	pop	{r7, pc}

08018c4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018c4a:	b580      	push	{r7, lr}
 8018c4c:	b084      	sub	sp, #16
 8018c4e:	af00      	add	r7, sp, #0
 8018c50:	6078      	str	r0, [r7, #4]
 8018c52:	4608      	mov	r0, r1
 8018c54:	4611      	mov	r1, r2
 8018c56:	461a      	mov	r2, r3
 8018c58:	4603      	mov	r3, r0
 8018c5a:	70fb      	strb	r3, [r7, #3]
 8018c5c:	460b      	mov	r3, r1
 8018c5e:	70bb      	strb	r3, [r7, #2]
 8018c60:	4613      	mov	r3, r2
 8018c62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c64:	2300      	movs	r3, #0
 8018c66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c68:	2300      	movs	r3, #0
 8018c6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018c72:	78bb      	ldrb	r3, [r7, #2]
 8018c74:	883a      	ldrh	r2, [r7, #0]
 8018c76:	78f9      	ldrb	r1, [r7, #3]
 8018c78:	f7f1 fb35 	bl	800a2e6 <HAL_PCD_EP_Open>
 8018c7c:	4603      	mov	r3, r0
 8018c7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c80:	7bfb      	ldrb	r3, [r7, #15]
 8018c82:	4618      	mov	r0, r3
 8018c84:	f000 f958 	bl	8018f38 <USBD_Get_USB_Status>
 8018c88:	4603      	mov	r3, r0
 8018c8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8018c8e:	4618      	mov	r0, r3
 8018c90:	3710      	adds	r7, #16
 8018c92:	46bd      	mov	sp, r7
 8018c94:	bd80      	pop	{r7, pc}

08018c96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018c96:	b580      	push	{r7, lr}
 8018c98:	b084      	sub	sp, #16
 8018c9a:	af00      	add	r7, sp, #0
 8018c9c:	6078      	str	r0, [r7, #4]
 8018c9e:	460b      	mov	r3, r1
 8018ca0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ca2:	2300      	movs	r3, #0
 8018ca4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ca6:	2300      	movs	r3, #0
 8018ca8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018cb0:	78fa      	ldrb	r2, [r7, #3]
 8018cb2:	4611      	mov	r1, r2
 8018cb4:	4618      	mov	r0, r3
 8018cb6:	f7f1 fb75 	bl	800a3a4 <HAL_PCD_EP_Close>
 8018cba:	4603      	mov	r3, r0
 8018cbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018cbe:	7bfb      	ldrb	r3, [r7, #15]
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	f000 f939 	bl	8018f38 <USBD_Get_USB_Status>
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018cca:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ccc:	4618      	mov	r0, r3
 8018cce:	3710      	adds	r7, #16
 8018cd0:	46bd      	mov	sp, r7
 8018cd2:	bd80      	pop	{r7, pc}

08018cd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018cd4:	b580      	push	{r7, lr}
 8018cd6:	b084      	sub	sp, #16
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	6078      	str	r0, [r7, #4]
 8018cdc:	460b      	mov	r3, r1
 8018cde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018cee:	78fa      	ldrb	r2, [r7, #3]
 8018cf0:	4611      	mov	r1, r2
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	f7f1 fc1e 	bl	800a534 <HAL_PCD_EP_SetStall>
 8018cf8:	4603      	mov	r3, r0
 8018cfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018cfc:	7bfb      	ldrb	r3, [r7, #15]
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f000 f91a 	bl	8018f38 <USBD_Get_USB_Status>
 8018d04:	4603      	mov	r3, r0
 8018d06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018d08:	7bbb      	ldrb	r3, [r7, #14]
}
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	3710      	adds	r7, #16
 8018d0e:	46bd      	mov	sp, r7
 8018d10:	bd80      	pop	{r7, pc}

08018d12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018d12:	b580      	push	{r7, lr}
 8018d14:	b084      	sub	sp, #16
 8018d16:	af00      	add	r7, sp, #0
 8018d18:	6078      	str	r0, [r7, #4]
 8018d1a:	460b      	mov	r3, r1
 8018d1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018d1e:	2300      	movs	r3, #0
 8018d20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d22:	2300      	movs	r3, #0
 8018d24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018d2c:	78fa      	ldrb	r2, [r7, #3]
 8018d2e:	4611      	mov	r1, r2
 8018d30:	4618      	mov	r0, r3
 8018d32:	f7f1 fc51 	bl	800a5d8 <HAL_PCD_EP_ClrStall>
 8018d36:	4603      	mov	r3, r0
 8018d38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018d3a:	7bfb      	ldrb	r3, [r7, #15]
 8018d3c:	4618      	mov	r0, r3
 8018d3e:	f000 f8fb 	bl	8018f38 <USBD_Get_USB_Status>
 8018d42:	4603      	mov	r3, r0
 8018d44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018d46:	7bbb      	ldrb	r3, [r7, #14]
}
 8018d48:	4618      	mov	r0, r3
 8018d4a:	3710      	adds	r7, #16
 8018d4c:	46bd      	mov	sp, r7
 8018d4e:	bd80      	pop	{r7, pc}

08018d50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018d50:	b480      	push	{r7}
 8018d52:	b085      	sub	sp, #20
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	6078      	str	r0, [r7, #4]
 8018d58:	460b      	mov	r3, r1
 8018d5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018d62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018d64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	da0b      	bge.n	8018d84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018d6c:	78fb      	ldrb	r3, [r7, #3]
 8018d6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018d72:	68f9      	ldr	r1, [r7, #12]
 8018d74:	4613      	mov	r3, r2
 8018d76:	009b      	lsls	r3, r3, #2
 8018d78:	4413      	add	r3, r2
 8018d7a:	00db      	lsls	r3, r3, #3
 8018d7c:	440b      	add	r3, r1
 8018d7e:	3312      	adds	r3, #18
 8018d80:	781b      	ldrb	r3, [r3, #0]
 8018d82:	e00b      	b.n	8018d9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018d84:	78fb      	ldrb	r3, [r7, #3]
 8018d86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018d8a:	68f9      	ldr	r1, [r7, #12]
 8018d8c:	4613      	mov	r3, r2
 8018d8e:	009b      	lsls	r3, r3, #2
 8018d90:	4413      	add	r3, r2
 8018d92:	00db      	lsls	r3, r3, #3
 8018d94:	440b      	add	r3, r1
 8018d96:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8018d9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	3714      	adds	r7, #20
 8018da0:	46bd      	mov	sp, r7
 8018da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da6:	4770      	bx	lr

08018da8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b084      	sub	sp, #16
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
 8018db0:	460b      	mov	r3, r1
 8018db2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018db4:	2300      	movs	r3, #0
 8018db6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018db8:	2300      	movs	r3, #0
 8018dba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018dc2:	78fa      	ldrb	r2, [r7, #3]
 8018dc4:	4611      	mov	r1, r2
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7f1 fa69 	bl	800a29e <HAL_PCD_SetAddress>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018dd0:	7bfb      	ldrb	r3, [r7, #15]
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	f000 f8b0 	bl	8018f38 <USBD_Get_USB_Status>
 8018dd8:	4603      	mov	r3, r0
 8018dda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ddc:	7bbb      	ldrb	r3, [r7, #14]
}
 8018dde:	4618      	mov	r0, r3
 8018de0:	3710      	adds	r7, #16
 8018de2:	46bd      	mov	sp, r7
 8018de4:	bd80      	pop	{r7, pc}

08018de6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018de6:	b580      	push	{r7, lr}
 8018de8:	b086      	sub	sp, #24
 8018dea:	af00      	add	r7, sp, #0
 8018dec:	60f8      	str	r0, [r7, #12]
 8018dee:	607a      	str	r2, [r7, #4]
 8018df0:	603b      	str	r3, [r7, #0]
 8018df2:	460b      	mov	r3, r1
 8018df4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018df6:	2300      	movs	r3, #0
 8018df8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018dfa:	2300      	movs	r3, #0
 8018dfc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018e04:	7af9      	ldrb	r1, [r7, #11]
 8018e06:	683b      	ldr	r3, [r7, #0]
 8018e08:	687a      	ldr	r2, [r7, #4]
 8018e0a:	f7f1 fb5c 	bl	800a4c6 <HAL_PCD_EP_Transmit>
 8018e0e:	4603      	mov	r3, r0
 8018e10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e12:	7dfb      	ldrb	r3, [r7, #23]
 8018e14:	4618      	mov	r0, r3
 8018e16:	f000 f88f 	bl	8018f38 <USBD_Get_USB_Status>
 8018e1a:	4603      	mov	r3, r0
 8018e1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018e1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8018e20:	4618      	mov	r0, r3
 8018e22:	3718      	adds	r7, #24
 8018e24:	46bd      	mov	sp, r7
 8018e26:	bd80      	pop	{r7, pc}

08018e28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018e28:	b580      	push	{r7, lr}
 8018e2a:	b086      	sub	sp, #24
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	60f8      	str	r0, [r7, #12]
 8018e30:	607a      	str	r2, [r7, #4]
 8018e32:	603b      	str	r3, [r7, #0]
 8018e34:	460b      	mov	r3, r1
 8018e36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018e38:	2300      	movs	r3, #0
 8018e3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018e46:	7af9      	ldrb	r1, [r7, #11]
 8018e48:	683b      	ldr	r3, [r7, #0]
 8018e4a:	687a      	ldr	r2, [r7, #4]
 8018e4c:	f7f1 faf2 	bl	800a434 <HAL_PCD_EP_Receive>
 8018e50:	4603      	mov	r3, r0
 8018e52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e54:	7dfb      	ldrb	r3, [r7, #23]
 8018e56:	4618      	mov	r0, r3
 8018e58:	f000 f86e 	bl	8018f38 <USBD_Get_USB_Status>
 8018e5c:	4603      	mov	r3, r0
 8018e5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018e60:	7dbb      	ldrb	r3, [r7, #22]
}
 8018e62:	4618      	mov	r0, r3
 8018e64:	3718      	adds	r7, #24
 8018e66:	46bd      	mov	sp, r7
 8018e68:	bd80      	pop	{r7, pc}

08018e6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018e6a:	b580      	push	{r7, lr}
 8018e6c:	b082      	sub	sp, #8
 8018e6e:	af00      	add	r7, sp, #0
 8018e70:	6078      	str	r0, [r7, #4]
 8018e72:	460b      	mov	r3, r1
 8018e74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018e7c:	78fa      	ldrb	r2, [r7, #3]
 8018e7e:	4611      	mov	r1, r2
 8018e80:	4618      	mov	r0, r3
 8018e82:	f7f1 fb08 	bl	800a496 <HAL_PCD_EP_GetRxCount>
 8018e86:	4603      	mov	r3, r0
}
 8018e88:	4618      	mov	r0, r3
 8018e8a:	3708      	adds	r7, #8
 8018e8c:	46bd      	mov	sp, r7
 8018e8e:	bd80      	pop	{r7, pc}

08018e90 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e90:	b580      	push	{r7, lr}
 8018e92:	b082      	sub	sp, #8
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	6078      	str	r0, [r7, #4]
 8018e98:	460b      	mov	r3, r1
 8018e9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8018e9c:	78fb      	ldrb	r3, [r7, #3]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d002      	beq.n	8018ea8 <HAL_PCDEx_LPM_Callback+0x18>
 8018ea2:	2b01      	cmp	r3, #1
 8018ea4:	d013      	beq.n	8018ece <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8018ea6:	e023      	b.n	8018ef0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	7a5b      	ldrb	r3, [r3, #9]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d007      	beq.n	8018ec0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8018eb0:	f000 f83c 	bl	8018f2c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018eb4:	4b10      	ldr	r3, [pc, #64]	@ (8018ef8 <HAL_PCDEx_LPM_Callback+0x68>)
 8018eb6:	691b      	ldr	r3, [r3, #16]
 8018eb8:	4a0f      	ldr	r2, [pc, #60]	@ (8018ef8 <HAL_PCDEx_LPM_Callback+0x68>)
 8018eba:	f023 0306 	bic.w	r3, r3, #6
 8018ebe:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	f7fa fe31 	bl	8013b2e <USBD_LL_Resume>
    break;
 8018ecc:	e010      	b.n	8018ef0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018ed4:	4618      	mov	r0, r3
 8018ed6:	f7fa fe0e 	bl	8013af6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	7a5b      	ldrb	r3, [r3, #9]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d005      	beq.n	8018eee <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018ee2:	4b05      	ldr	r3, [pc, #20]	@ (8018ef8 <HAL_PCDEx_LPM_Callback+0x68>)
 8018ee4:	691b      	ldr	r3, [r3, #16]
 8018ee6:	4a04      	ldr	r2, [pc, #16]	@ (8018ef8 <HAL_PCDEx_LPM_Callback+0x68>)
 8018ee8:	f043 0306 	orr.w	r3, r3, #6
 8018eec:	6113      	str	r3, [r2, #16]
    break;
 8018eee:	bf00      	nop
}
 8018ef0:	bf00      	nop
 8018ef2:	3708      	adds	r7, #8
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	bd80      	pop	{r7, pc}
 8018ef8:	e000ed00 	.word	0xe000ed00

08018efc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018efc:	b480      	push	{r7}
 8018efe:	b083      	sub	sp, #12
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018f04:	4b03      	ldr	r3, [pc, #12]	@ (8018f14 <USBD_static_malloc+0x18>)
}
 8018f06:	4618      	mov	r0, r3
 8018f08:	370c      	adds	r7, #12
 8018f0a:	46bd      	mov	sp, r7
 8018f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f10:	4770      	bx	lr
 8018f12:	bf00      	nop
 8018f14:	20002d28 	.word	0x20002d28

08018f18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018f18:	b480      	push	{r7}
 8018f1a:	b083      	sub	sp, #12
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8018f20:	bf00      	nop
 8018f22:	370c      	adds	r7, #12
 8018f24:	46bd      	mov	sp, r7
 8018f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f2a:	4770      	bx	lr

08018f2c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8018f30:	f7e9 fe36 	bl	8002ba0 <SystemClock_Config>
}
 8018f34:	bf00      	nop
 8018f36:	bd80      	pop	{r7, pc}

08018f38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018f38:	b480      	push	{r7}
 8018f3a:	b085      	sub	sp, #20
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	4603      	mov	r3, r0
 8018f40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f42:	2300      	movs	r3, #0
 8018f44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018f46:	79fb      	ldrb	r3, [r7, #7]
 8018f48:	2b03      	cmp	r3, #3
 8018f4a:	d817      	bhi.n	8018f7c <USBD_Get_USB_Status+0x44>
 8018f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8018f54 <USBD_Get_USB_Status+0x1c>)
 8018f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f52:	bf00      	nop
 8018f54:	08018f65 	.word	0x08018f65
 8018f58:	08018f6b 	.word	0x08018f6b
 8018f5c:	08018f71 	.word	0x08018f71
 8018f60:	08018f77 	.word	0x08018f77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018f64:	2300      	movs	r3, #0
 8018f66:	73fb      	strb	r3, [r7, #15]
    break;
 8018f68:	e00b      	b.n	8018f82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018f6a:	2303      	movs	r3, #3
 8018f6c:	73fb      	strb	r3, [r7, #15]
    break;
 8018f6e:	e008      	b.n	8018f82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018f70:	2301      	movs	r3, #1
 8018f72:	73fb      	strb	r3, [r7, #15]
    break;
 8018f74:	e005      	b.n	8018f82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018f76:	2303      	movs	r3, #3
 8018f78:	73fb      	strb	r3, [r7, #15]
    break;
 8018f7a:	e002      	b.n	8018f82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018f7c:	2303      	movs	r3, #3
 8018f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8018f80:	bf00      	nop
  }
  return usb_status;
 8018f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f84:	4618      	mov	r0, r3
 8018f86:	3714      	adds	r7, #20
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f8e:	4770      	bx	lr

08018f90 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8018f90:	b480      	push	{r7}
 8018f92:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8018f94:	4b05      	ldr	r3, [pc, #20]	@ (8018fac <UTIL_LPM_Init+0x1c>)
 8018f96:	2200      	movs	r2, #0
 8018f98:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8018f9a:	4b05      	ldr	r3, [pc, #20]	@ (8018fb0 <UTIL_LPM_Init+0x20>)
 8018f9c:	2200      	movs	r2, #0
 8018f9e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8018fa0:	bf00      	nop
 8018fa2:	46bd      	mov	sp, r7
 8018fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fa8:	4770      	bx	lr
 8018faa:	bf00      	nop
 8018fac:	20002f48 	.word	0x20002f48
 8018fb0:	20002f4c 	.word	0x20002f4c

08018fb4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8018fb4:	b480      	push	{r7}
 8018fb6:	b087      	sub	sp, #28
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	6078      	str	r0, [r7, #4]
 8018fbc:	460b      	mov	r3, r1
 8018fbe:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8018fc4:	613b      	str	r3, [r7, #16]
  return(result);
 8018fc6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8018fc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018fca:	b672      	cpsid	i
}
 8018fcc:	bf00      	nop
  
  switch(state)
 8018fce:	78fb      	ldrb	r3, [r7, #3]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d008      	beq.n	8018fe6 <UTIL_LPM_SetOffMode+0x32>
 8018fd4:	2b01      	cmp	r3, #1
 8018fd6:	d10e      	bne.n	8018ff6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8018fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8019010 <UTIL_LPM_SetOffMode+0x5c>)
 8018fda:	681a      	ldr	r2, [r3, #0]
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	4313      	orrs	r3, r2
 8018fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8019010 <UTIL_LPM_SetOffMode+0x5c>)
 8018fe2:	6013      	str	r3, [r2, #0]
      break;
 8018fe4:	e008      	b.n	8018ff8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	43da      	mvns	r2, r3
 8018fea:	4b09      	ldr	r3, [pc, #36]	@ (8019010 <UTIL_LPM_SetOffMode+0x5c>)
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	4013      	ands	r3, r2
 8018ff0:	4a07      	ldr	r2, [pc, #28]	@ (8019010 <UTIL_LPM_SetOffMode+0x5c>)
 8018ff2:	6013      	str	r3, [r2, #0]
      break;
 8018ff4:	e000      	b.n	8018ff8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8018ff6:	bf00      	nop
 8018ff8:	697b      	ldr	r3, [r7, #20]
 8018ffa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ffc:	68fb      	ldr	r3, [r7, #12]
 8018ffe:	f383 8810 	msr	PRIMASK, r3
}
 8019002:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019004:	bf00      	nop
 8019006:	371c      	adds	r7, #28
 8019008:	46bd      	mov	sp, r7
 801900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801900e:	4770      	bx	lr
 8019010:	20002f4c 	.word	0x20002f4c

08019014 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8019014:	b580      	push	{r7, lr}
 8019016:	b090      	sub	sp, #64	@ 0x40
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801901c:	4b73      	ldr	r3, [pc, #460]	@ (80191ec <UTIL_SEQ_Run+0x1d8>)
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8019022:	4b72      	ldr	r3, [pc, #456]	@ (80191ec <UTIL_SEQ_Run+0x1d8>)
 8019024:	681a      	ldr	r2, [r3, #0]
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	4013      	ands	r3, r2
 801902a:	4a70      	ldr	r2, [pc, #448]	@ (80191ec <UTIL_SEQ_Run+0x1d8>)
 801902c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801902e:	4b70      	ldr	r3, [pc, #448]	@ (80191f0 <UTIL_SEQ_Run+0x1dc>)
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8019034:	4b6f      	ldr	r3, [pc, #444]	@ (80191f4 <UTIL_SEQ_Run+0x1e0>)
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801903a:	4b6f      	ldr	r3, [pc, #444]	@ (80191f8 <UTIL_SEQ_Run+0x1e4>)
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8019040:	4b6e      	ldr	r3, [pc, #440]	@ (80191fc <UTIL_SEQ_Run+0x1e8>)
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019046:	e08d      	b.n	8019164 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8019048:	2300      	movs	r3, #0
 801904a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801904c:	e002      	b.n	8019054 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801904e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019050:	3301      	adds	r3, #1
 8019052:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019054:	4a6a      	ldr	r2, [pc, #424]	@ (8019200 <UTIL_SEQ_Run+0x1ec>)
 8019056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019058:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801905c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801905e:	401a      	ands	r2, r3
 8019060:	4b62      	ldr	r3, [pc, #392]	@ (80191ec <UTIL_SEQ_Run+0x1d8>)
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	4013      	ands	r3, r2
 8019066:	2b00      	cmp	r3, #0
 8019068:	d0f1      	beq.n	801904e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801906a:	4a65      	ldr	r2, [pc, #404]	@ (8019200 <UTIL_SEQ_Run+0x1ec>)
 801906c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801906e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019074:	401a      	ands	r2, r3
 8019076:	4b5d      	ldr	r3, [pc, #372]	@ (80191ec <UTIL_SEQ_Run+0x1d8>)
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	4013      	ands	r3, r2
 801907c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801907e:	4a60      	ldr	r2, [pc, #384]	@ (8019200 <UTIL_SEQ_Run+0x1ec>)
 8019080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019082:	00db      	lsls	r3, r3, #3
 8019084:	4413      	add	r3, r2
 8019086:	685a      	ldr	r2, [r3, #4]
 8019088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801908a:	4013      	ands	r3, r2
 801908c:	2b00      	cmp	r3, #0
 801908e:	d106      	bne.n	801909e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8019090:	4a5b      	ldr	r2, [pc, #364]	@ (8019200 <UTIL_SEQ_Run+0x1ec>)
 8019092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019094:	00db      	lsls	r3, r3, #3
 8019096:	4413      	add	r3, r2
 8019098:	f04f 32ff 	mov.w	r2, #4294967295
 801909c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801909e:	4a58      	ldr	r2, [pc, #352]	@ (8019200 <UTIL_SEQ_Run+0x1ec>)
 80190a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190a2:	00db      	lsls	r3, r3, #3
 80190a4:	4413      	add	r3, r2
 80190a6:	685a      	ldr	r2, [r3, #4]
 80190a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190aa:	4013      	ands	r3, r2
 80190ac:	4618      	mov	r0, r3
 80190ae:	f000 f9b3 	bl	8019418 <SEQ_BitPosition>
 80190b2:	4603      	mov	r3, r0
 80190b4:	461a      	mov	r2, r3
 80190b6:	4b53      	ldr	r3, [pc, #332]	@ (8019204 <UTIL_SEQ_Run+0x1f0>)
 80190b8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80190ba:	4a51      	ldr	r2, [pc, #324]	@ (8019200 <UTIL_SEQ_Run+0x1ec>)
 80190bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190be:	00db      	lsls	r3, r3, #3
 80190c0:	4413      	add	r3, r2
 80190c2:	685a      	ldr	r2, [r3, #4]
 80190c4:	4b4f      	ldr	r3, [pc, #316]	@ (8019204 <UTIL_SEQ_Run+0x1f0>)
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	2101      	movs	r1, #1
 80190ca:	fa01 f303 	lsl.w	r3, r1, r3
 80190ce:	43db      	mvns	r3, r3
 80190d0:	401a      	ands	r2, r3
 80190d2:	494b      	ldr	r1, [pc, #300]	@ (8019200 <UTIL_SEQ_Run+0x1ec>)
 80190d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190d6:	00db      	lsls	r3, r3, #3
 80190d8:	440b      	add	r3, r1
 80190da:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80190dc:	f3ef 8310 	mrs	r3, PRIMASK
 80190e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80190e2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80190e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80190e6:	b672      	cpsid	i
}
 80190e8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80190ea:	4b46      	ldr	r3, [pc, #280]	@ (8019204 <UTIL_SEQ_Run+0x1f0>)
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	2201      	movs	r2, #1
 80190f0:	fa02 f303 	lsl.w	r3, r2, r3
 80190f4:	43da      	mvns	r2, r3
 80190f6:	4b3e      	ldr	r3, [pc, #248]	@ (80191f0 <UTIL_SEQ_Run+0x1dc>)
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	4013      	ands	r3, r2
 80190fc:	4a3c      	ldr	r2, [pc, #240]	@ (80191f0 <UTIL_SEQ_Run+0x1dc>)
 80190fe:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8019100:	2301      	movs	r3, #1
 8019102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019104:	e013      	b.n	801912e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8019106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019108:	3b01      	subs	r3, #1
 801910a:	4a3d      	ldr	r2, [pc, #244]	@ (8019200 <UTIL_SEQ_Run+0x1ec>)
 801910c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8019110:	4b3c      	ldr	r3, [pc, #240]	@ (8019204 <UTIL_SEQ_Run+0x1f0>)
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	2201      	movs	r2, #1
 8019116:	fa02 f303 	lsl.w	r3, r2, r3
 801911a:	43da      	mvns	r2, r3
 801911c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801911e:	3b01      	subs	r3, #1
 8019120:	400a      	ands	r2, r1
 8019122:	4937      	ldr	r1, [pc, #220]	@ (8019200 <UTIL_SEQ_Run+0x1ec>)
 8019124:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8019128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801912a:	3b01      	subs	r3, #1
 801912c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801912e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019130:	2b00      	cmp	r3, #0
 8019132:	d1e8      	bne.n	8019106 <UTIL_SEQ_Run+0xf2>
 8019134:	6a3b      	ldr	r3, [r7, #32]
 8019136:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019138:	697b      	ldr	r3, [r7, #20]
 801913a:	f383 8810 	msr	PRIMASK, r3
}
 801913e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8019140:	4b30      	ldr	r3, [pc, #192]	@ (8019204 <UTIL_SEQ_Run+0x1f0>)
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	4a30      	ldr	r2, [pc, #192]	@ (8019208 <UTIL_SEQ_Run+0x1f4>)
 8019146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801914a:	4798      	blx	r3

    local_taskset = TaskSet;
 801914c:	4b28      	ldr	r3, [pc, #160]	@ (80191f0 <UTIL_SEQ_Run+0x1dc>)
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8019152:	4b28      	ldr	r3, [pc, #160]	@ (80191f4 <UTIL_SEQ_Run+0x1e0>)
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8019158:	4b27      	ldr	r3, [pc, #156]	@ (80191f8 <UTIL_SEQ_Run+0x1e4>)
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801915e:	4b27      	ldr	r3, [pc, #156]	@ (80191fc <UTIL_SEQ_Run+0x1e8>)
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019164:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019168:	401a      	ands	r2, r3
 801916a:	4b20      	ldr	r3, [pc, #128]	@ (80191ec <UTIL_SEQ_Run+0x1d8>)
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	4013      	ands	r3, r2
 8019170:	2b00      	cmp	r3, #0
 8019172:	d005      	beq.n	8019180 <UTIL_SEQ_Run+0x16c>
 8019174:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019178:	4013      	ands	r3, r2
 801917a:	2b00      	cmp	r3, #0
 801917c:	f43f af64 	beq.w	8019048 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8019180:	4b20      	ldr	r3, [pc, #128]	@ (8019204 <UTIL_SEQ_Run+0x1f0>)
 8019182:	f04f 32ff 	mov.w	r2, #4294967295
 8019186:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8019188:	f000 f938 	bl	80193fc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801918c:	f3ef 8310 	mrs	r3, PRIMASK
 8019190:	613b      	str	r3, [r7, #16]
  return(result);
 8019192:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8019194:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019196:	b672      	cpsid	i
}
 8019198:	bf00      	nop
  local_taskset = TaskSet;
 801919a:	4b15      	ldr	r3, [pc, #84]	@ (80191f0 <UTIL_SEQ_Run+0x1dc>)
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80191a0:	4b14      	ldr	r3, [pc, #80]	@ (80191f4 <UTIL_SEQ_Run+0x1e0>)
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80191a6:	4b14      	ldr	r3, [pc, #80]	@ (80191f8 <UTIL_SEQ_Run+0x1e4>)
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80191ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80191ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191b0:	401a      	ands	r2, r3
 80191b2:	4b0e      	ldr	r3, [pc, #56]	@ (80191ec <UTIL_SEQ_Run+0x1d8>)
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	4013      	ands	r3, r2
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d107      	bne.n	80191cc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80191bc:	4b0f      	ldr	r3, [pc, #60]	@ (80191fc <UTIL_SEQ_Run+0x1e8>)
 80191be:	681a      	ldr	r2, [r3, #0]
 80191c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80191c2:	4013      	ands	r3, r2
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d101      	bne.n	80191cc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80191c8:	f7e8 fade 	bl	8001788 <UTIL_SEQ_Idle>
 80191cc:	69fb      	ldr	r3, [r7, #28]
 80191ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	f383 8810 	msr	PRIMASK, r3
}
 80191d6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80191d8:	f000 f917 	bl	801940a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80191dc:	4a03      	ldr	r2, [pc, #12]	@ (80191ec <UTIL_SEQ_Run+0x1d8>)
 80191de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191e0:	6013      	str	r3, [r2, #0]

  return;
 80191e2:	bf00      	nop
}
 80191e4:	3740      	adds	r7, #64	@ 0x40
 80191e6:	46bd      	mov	sp, r7
 80191e8:	bd80      	pop	{r7, pc}
 80191ea:	bf00      	nop
 80191ec:	20000144 	.word	0x20000144
 80191f0:	20002f50 	.word	0x20002f50
 80191f4:	20002f54 	.word	0x20002f54
 80191f8:	20000140 	.word	0x20000140
 80191fc:	20002f58 	.word	0x20002f58
 8019200:	20002fe0 	.word	0x20002fe0
 8019204:	20002f5c 	.word	0x20002f5c
 8019208:	20002f60 	.word	0x20002f60

0801920c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b088      	sub	sp, #32
 8019210:	af00      	add	r7, sp, #0
 8019212:	60f8      	str	r0, [r7, #12]
 8019214:	60b9      	str	r1, [r7, #8]
 8019216:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019218:	f3ef 8310 	mrs	r3, PRIMASK
 801921c:	617b      	str	r3, [r7, #20]
  return(result);
 801921e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8019220:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019222:	b672      	cpsid	i
}
 8019224:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8019226:	68f8      	ldr	r0, [r7, #12]
 8019228:	f000 f8f6 	bl	8019418 <SEQ_BitPosition>
 801922c:	4603      	mov	r3, r0
 801922e:	4619      	mov	r1, r3
 8019230:	4a06      	ldr	r2, [pc, #24]	@ (801924c <UTIL_SEQ_RegTask+0x40>)
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8019238:	69fb      	ldr	r3, [r7, #28]
 801923a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801923c:	69bb      	ldr	r3, [r7, #24]
 801923e:	f383 8810 	msr	PRIMASK, r3
}
 8019242:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8019244:	bf00      	nop
}
 8019246:	3720      	adds	r7, #32
 8019248:	46bd      	mov	sp, r7
 801924a:	bd80      	pop	{r7, pc}
 801924c:	20002f60 	.word	0x20002f60

08019250 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8019250:	b480      	push	{r7}
 8019252:	b087      	sub	sp, #28
 8019254:	af00      	add	r7, sp, #0
 8019256:	6078      	str	r0, [r7, #4]
 8019258:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801925a:	f3ef 8310 	mrs	r3, PRIMASK
 801925e:	60fb      	str	r3, [r7, #12]
  return(result);
 8019260:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019262:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019264:	b672      	cpsid	i
}
 8019266:	bf00      	nop

  TaskSet |= TaskId_bm;
 8019268:	4b0d      	ldr	r3, [pc, #52]	@ (80192a0 <UTIL_SEQ_SetTask+0x50>)
 801926a:	681a      	ldr	r2, [r3, #0]
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	4313      	orrs	r3, r2
 8019270:	4a0b      	ldr	r2, [pc, #44]	@ (80192a0 <UTIL_SEQ_SetTask+0x50>)
 8019272:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8019274:	4a0b      	ldr	r2, [pc, #44]	@ (80192a4 <UTIL_SEQ_SetTask+0x54>)
 8019276:	683b      	ldr	r3, [r7, #0]
 8019278:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	431a      	orrs	r2, r3
 8019280:	4908      	ldr	r1, [pc, #32]	@ (80192a4 <UTIL_SEQ_SetTask+0x54>)
 8019282:	683b      	ldr	r3, [r7, #0]
 8019284:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8019288:	697b      	ldr	r3, [r7, #20]
 801928a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801928c:	693b      	ldr	r3, [r7, #16]
 801928e:	f383 8810 	msr	PRIMASK, r3
}
 8019292:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019294:	bf00      	nop
}
 8019296:	371c      	adds	r7, #28
 8019298:	46bd      	mov	sp, r7
 801929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801929e:	4770      	bx	lr
 80192a0:	20002f50 	.word	0x20002f50
 80192a4:	20002fe0 	.word	0x20002fe0

080192a8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80192a8:	b480      	push	{r7}
 80192aa:	b087      	sub	sp, #28
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192b0:	f3ef 8310 	mrs	r3, PRIMASK
 80192b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80192b6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80192b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80192ba:	b672      	cpsid	i
}
 80192bc:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	43da      	mvns	r2, r3
 80192c2:	4b08      	ldr	r3, [pc, #32]	@ (80192e4 <UTIL_SEQ_PauseTask+0x3c>)
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	4013      	ands	r3, r2
 80192c8:	4a06      	ldr	r2, [pc, #24]	@ (80192e4 <UTIL_SEQ_PauseTask+0x3c>)
 80192ca:	6013      	str	r3, [r2, #0]
 80192cc:	697b      	ldr	r3, [r7, #20]
 80192ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192d0:	693b      	ldr	r3, [r7, #16]
 80192d2:	f383 8810 	msr	PRIMASK, r3
}
 80192d6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80192d8:	bf00      	nop
}
 80192da:	371c      	adds	r7, #28
 80192dc:	46bd      	mov	sp, r7
 80192de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e2:	4770      	bx	lr
 80192e4:	20000140 	.word	0x20000140

080192e8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80192e8:	b480      	push	{r7}
 80192ea:	b087      	sub	sp, #28
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192f0:	f3ef 8310 	mrs	r3, PRIMASK
 80192f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80192f6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80192f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80192fa:	b672      	cpsid	i
}
 80192fc:	bf00      	nop

  TaskMask |= TaskId_bm;
 80192fe:	4b09      	ldr	r3, [pc, #36]	@ (8019324 <UTIL_SEQ_ResumeTask+0x3c>)
 8019300:	681a      	ldr	r2, [r3, #0]
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	4313      	orrs	r3, r2
 8019306:	4a07      	ldr	r2, [pc, #28]	@ (8019324 <UTIL_SEQ_ResumeTask+0x3c>)
 8019308:	6013      	str	r3, [r2, #0]
 801930a:	697b      	ldr	r3, [r7, #20]
 801930c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801930e:	693b      	ldr	r3, [r7, #16]
 8019310:	f383 8810 	msr	PRIMASK, r3
}
 8019314:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019316:	bf00      	nop
}
 8019318:	371c      	adds	r7, #28
 801931a:	46bd      	mov	sp, r7
 801931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019320:	4770      	bx	lr
 8019322:	bf00      	nop
 8019324:	20000140 	.word	0x20000140

08019328 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8019328:	b480      	push	{r7}
 801932a:	b087      	sub	sp, #28
 801932c:	af00      	add	r7, sp, #0
 801932e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019330:	f3ef 8310 	mrs	r3, PRIMASK
 8019334:	60fb      	str	r3, [r7, #12]
  return(result);
 8019336:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019338:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801933a:	b672      	cpsid	i
}
 801933c:	bf00      	nop

  EvtSet |= EvtId_bm;
 801933e:	4b09      	ldr	r3, [pc, #36]	@ (8019364 <UTIL_SEQ_SetEvt+0x3c>)
 8019340:	681a      	ldr	r2, [r3, #0]
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	4313      	orrs	r3, r2
 8019346:	4a07      	ldr	r2, [pc, #28]	@ (8019364 <UTIL_SEQ_SetEvt+0x3c>)
 8019348:	6013      	str	r3, [r2, #0]
 801934a:	697b      	ldr	r3, [r7, #20]
 801934c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801934e:	693b      	ldr	r3, [r7, #16]
 8019350:	f383 8810 	msr	PRIMASK, r3
}
 8019354:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019356:	bf00      	nop
}
 8019358:	371c      	adds	r7, #28
 801935a:	46bd      	mov	sp, r7
 801935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019360:	4770      	bx	lr
 8019362:	bf00      	nop
 8019364:	20002f54 	.word	0x20002f54

08019368 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8019368:	b580      	push	{r7, lr}
 801936a:	b088      	sub	sp, #32
 801936c:	af00      	add	r7, sp, #0
 801936e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8019370:	4b1f      	ldr	r3, [pc, #124]	@ (80193f0 <UTIL_SEQ_WaitEvt+0x88>)
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8019376:	4b1e      	ldr	r3, [pc, #120]	@ (80193f0 <UTIL_SEQ_WaitEvt+0x88>)
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801937e:	d102      	bne.n	8019386 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8019380:	2300      	movs	r3, #0
 8019382:	61fb      	str	r3, [r7, #28]
 8019384:	e005      	b.n	8019392 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8019386:	4b1a      	ldr	r3, [pc, #104]	@ (80193f0 <UTIL_SEQ_WaitEvt+0x88>)
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	2201      	movs	r2, #1
 801938c:	fa02 f303 	lsl.w	r3, r2, r3
 8019390:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8019392:	4b18      	ldr	r3, [pc, #96]	@ (80193f4 <UTIL_SEQ_WaitEvt+0x8c>)
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8019398:	4a16      	ldr	r2, [pc, #88]	@ (80193f4 <UTIL_SEQ_WaitEvt+0x8c>)
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801939e:	e003      	b.n	80193a8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80193a0:	6879      	ldr	r1, [r7, #4]
 80193a2:	69f8      	ldr	r0, [r7, #28]
 80193a4:	f7e8 f9f7 	bl	8001796 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80193a8:	4b13      	ldr	r3, [pc, #76]	@ (80193f8 <UTIL_SEQ_WaitEvt+0x90>)
 80193aa:	681a      	ldr	r2, [r3, #0]
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	4013      	ands	r3, r2
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d0f5      	beq.n	80193a0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80193b4:	4a0e      	ldr	r2, [pc, #56]	@ (80193f0 <UTIL_SEQ_WaitEvt+0x88>)
 80193b6:	69bb      	ldr	r3, [r7, #24]
 80193b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193ba:	f3ef 8310 	mrs	r3, PRIMASK
 80193be:	60bb      	str	r3, [r7, #8]
  return(result);
 80193c0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80193c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80193c4:	b672      	cpsid	i
}
 80193c6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	43da      	mvns	r2, r3
 80193cc:	4b0a      	ldr	r3, [pc, #40]	@ (80193f8 <UTIL_SEQ_WaitEvt+0x90>)
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	4013      	ands	r3, r2
 80193d2:	4a09      	ldr	r2, [pc, #36]	@ (80193f8 <UTIL_SEQ_WaitEvt+0x90>)
 80193d4:	6013      	str	r3, [r2, #0]
 80193d6:	693b      	ldr	r3, [r7, #16]
 80193d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	f383 8810 	msr	PRIMASK, r3
}
 80193e0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80193e2:	4a04      	ldr	r2, [pc, #16]	@ (80193f4 <UTIL_SEQ_WaitEvt+0x8c>)
 80193e4:	697b      	ldr	r3, [r7, #20]
 80193e6:	6013      	str	r3, [r2, #0]
  return;
 80193e8:	bf00      	nop
}
 80193ea:	3720      	adds	r7, #32
 80193ec:	46bd      	mov	sp, r7
 80193ee:	bd80      	pop	{r7, pc}
 80193f0:	20002f5c 	.word	0x20002f5c
 80193f4:	20002f58 	.word	0x20002f58
 80193f8:	20002f54 	.word	0x20002f54

080193fc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80193fc:	b480      	push	{r7}
 80193fe:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019400:	bf00      	nop
}
 8019402:	46bd      	mov	sp, r7
 8019404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019408:	4770      	bx	lr

0801940a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801940a:	b480      	push	{r7}
 801940c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801940e:	bf00      	nop
}
 8019410:	46bd      	mov	sp, r7
 8019412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019416:	4770      	bx	lr

08019418 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8019418:	b480      	push	{r7}
 801941a:	b085      	sub	sp, #20
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	2b00      	cmp	r3, #0
 8019428:	d101      	bne.n	801942e <SEQ_BitPosition+0x16>
    return 32U;
 801942a:	2320      	movs	r3, #32
 801942c:	e003      	b.n	8019436 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	fab3 f383 	clz	r3, r3
 8019434:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 8019436:	f1c3 031f 	rsb	r3, r3, #31
 801943a:	b2db      	uxtb	r3, r3
}
 801943c:	4618      	mov	r0, r3
 801943e:	3714      	adds	r7, #20
 8019440:	46bd      	mov	sp, r7
 8019442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019446:	4770      	bx	lr

08019448 <atoi>:
 8019448:	220a      	movs	r2, #10
 801944a:	2100      	movs	r1, #0
 801944c:	f000 bfa6 	b.w	801a39c <strtol>

08019450 <malloc>:
 8019450:	4b02      	ldr	r3, [pc, #8]	@ (801945c <malloc+0xc>)
 8019452:	4601      	mov	r1, r0
 8019454:	6818      	ldr	r0, [r3, #0]
 8019456:	f000 b82d 	b.w	80194b4 <_malloc_r>
 801945a:	bf00      	nop
 801945c:	200002c0 	.word	0x200002c0

08019460 <free>:
 8019460:	4b02      	ldr	r3, [pc, #8]	@ (801946c <free+0xc>)
 8019462:	4601      	mov	r1, r0
 8019464:	6818      	ldr	r0, [r3, #0]
 8019466:	f002 bf0b 	b.w	801c280 <_free_r>
 801946a:	bf00      	nop
 801946c:	200002c0 	.word	0x200002c0

08019470 <sbrk_aligned>:
 8019470:	b570      	push	{r4, r5, r6, lr}
 8019472:	4e0f      	ldr	r6, [pc, #60]	@ (80194b0 <sbrk_aligned+0x40>)
 8019474:	460c      	mov	r4, r1
 8019476:	6831      	ldr	r1, [r6, #0]
 8019478:	4605      	mov	r5, r0
 801947a:	b911      	cbnz	r1, 8019482 <sbrk_aligned+0x12>
 801947c:	f002 f822 	bl	801b4c4 <_sbrk_r>
 8019480:	6030      	str	r0, [r6, #0]
 8019482:	4621      	mov	r1, r4
 8019484:	4628      	mov	r0, r5
 8019486:	f002 f81d 	bl	801b4c4 <_sbrk_r>
 801948a:	1c43      	adds	r3, r0, #1
 801948c:	d103      	bne.n	8019496 <sbrk_aligned+0x26>
 801948e:	f04f 34ff 	mov.w	r4, #4294967295
 8019492:	4620      	mov	r0, r4
 8019494:	bd70      	pop	{r4, r5, r6, pc}
 8019496:	1cc4      	adds	r4, r0, #3
 8019498:	f024 0403 	bic.w	r4, r4, #3
 801949c:	42a0      	cmp	r0, r4
 801949e:	d0f8      	beq.n	8019492 <sbrk_aligned+0x22>
 80194a0:	1a21      	subs	r1, r4, r0
 80194a2:	4628      	mov	r0, r5
 80194a4:	f002 f80e 	bl	801b4c4 <_sbrk_r>
 80194a8:	3001      	adds	r0, #1
 80194aa:	d1f2      	bne.n	8019492 <sbrk_aligned+0x22>
 80194ac:	e7ef      	b.n	801948e <sbrk_aligned+0x1e>
 80194ae:	bf00      	nop
 80194b0:	20002fe8 	.word	0x20002fe8

080194b4 <_malloc_r>:
 80194b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80194b8:	1ccd      	adds	r5, r1, #3
 80194ba:	f025 0503 	bic.w	r5, r5, #3
 80194be:	3508      	adds	r5, #8
 80194c0:	2d0c      	cmp	r5, #12
 80194c2:	bf38      	it	cc
 80194c4:	250c      	movcc	r5, #12
 80194c6:	2d00      	cmp	r5, #0
 80194c8:	4606      	mov	r6, r0
 80194ca:	db01      	blt.n	80194d0 <_malloc_r+0x1c>
 80194cc:	42a9      	cmp	r1, r5
 80194ce:	d904      	bls.n	80194da <_malloc_r+0x26>
 80194d0:	230c      	movs	r3, #12
 80194d2:	6033      	str	r3, [r6, #0]
 80194d4:	2000      	movs	r0, #0
 80194d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80194da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80195b0 <_malloc_r+0xfc>
 80194de:	f000 f869 	bl	80195b4 <__malloc_lock>
 80194e2:	f8d8 3000 	ldr.w	r3, [r8]
 80194e6:	461c      	mov	r4, r3
 80194e8:	bb44      	cbnz	r4, 801953c <_malloc_r+0x88>
 80194ea:	4629      	mov	r1, r5
 80194ec:	4630      	mov	r0, r6
 80194ee:	f7ff ffbf 	bl	8019470 <sbrk_aligned>
 80194f2:	1c43      	adds	r3, r0, #1
 80194f4:	4604      	mov	r4, r0
 80194f6:	d158      	bne.n	80195aa <_malloc_r+0xf6>
 80194f8:	f8d8 4000 	ldr.w	r4, [r8]
 80194fc:	4627      	mov	r7, r4
 80194fe:	2f00      	cmp	r7, #0
 8019500:	d143      	bne.n	801958a <_malloc_r+0xd6>
 8019502:	2c00      	cmp	r4, #0
 8019504:	d04b      	beq.n	801959e <_malloc_r+0xea>
 8019506:	6823      	ldr	r3, [r4, #0]
 8019508:	4639      	mov	r1, r7
 801950a:	4630      	mov	r0, r6
 801950c:	eb04 0903 	add.w	r9, r4, r3
 8019510:	f001 ffd8 	bl	801b4c4 <_sbrk_r>
 8019514:	4581      	cmp	r9, r0
 8019516:	d142      	bne.n	801959e <_malloc_r+0xea>
 8019518:	6821      	ldr	r1, [r4, #0]
 801951a:	1a6d      	subs	r5, r5, r1
 801951c:	4629      	mov	r1, r5
 801951e:	4630      	mov	r0, r6
 8019520:	f7ff ffa6 	bl	8019470 <sbrk_aligned>
 8019524:	3001      	adds	r0, #1
 8019526:	d03a      	beq.n	801959e <_malloc_r+0xea>
 8019528:	6823      	ldr	r3, [r4, #0]
 801952a:	442b      	add	r3, r5
 801952c:	6023      	str	r3, [r4, #0]
 801952e:	f8d8 3000 	ldr.w	r3, [r8]
 8019532:	685a      	ldr	r2, [r3, #4]
 8019534:	bb62      	cbnz	r2, 8019590 <_malloc_r+0xdc>
 8019536:	f8c8 7000 	str.w	r7, [r8]
 801953a:	e00f      	b.n	801955c <_malloc_r+0xa8>
 801953c:	6822      	ldr	r2, [r4, #0]
 801953e:	1b52      	subs	r2, r2, r5
 8019540:	d420      	bmi.n	8019584 <_malloc_r+0xd0>
 8019542:	2a0b      	cmp	r2, #11
 8019544:	d917      	bls.n	8019576 <_malloc_r+0xc2>
 8019546:	1961      	adds	r1, r4, r5
 8019548:	42a3      	cmp	r3, r4
 801954a:	6025      	str	r5, [r4, #0]
 801954c:	bf18      	it	ne
 801954e:	6059      	strne	r1, [r3, #4]
 8019550:	6863      	ldr	r3, [r4, #4]
 8019552:	bf08      	it	eq
 8019554:	f8c8 1000 	streq.w	r1, [r8]
 8019558:	5162      	str	r2, [r4, r5]
 801955a:	604b      	str	r3, [r1, #4]
 801955c:	4630      	mov	r0, r6
 801955e:	f000 f82f 	bl	80195c0 <__malloc_unlock>
 8019562:	f104 000b 	add.w	r0, r4, #11
 8019566:	1d23      	adds	r3, r4, #4
 8019568:	f020 0007 	bic.w	r0, r0, #7
 801956c:	1ac2      	subs	r2, r0, r3
 801956e:	bf1c      	itt	ne
 8019570:	1a1b      	subne	r3, r3, r0
 8019572:	50a3      	strne	r3, [r4, r2]
 8019574:	e7af      	b.n	80194d6 <_malloc_r+0x22>
 8019576:	6862      	ldr	r2, [r4, #4]
 8019578:	42a3      	cmp	r3, r4
 801957a:	bf0c      	ite	eq
 801957c:	f8c8 2000 	streq.w	r2, [r8]
 8019580:	605a      	strne	r2, [r3, #4]
 8019582:	e7eb      	b.n	801955c <_malloc_r+0xa8>
 8019584:	4623      	mov	r3, r4
 8019586:	6864      	ldr	r4, [r4, #4]
 8019588:	e7ae      	b.n	80194e8 <_malloc_r+0x34>
 801958a:	463c      	mov	r4, r7
 801958c:	687f      	ldr	r7, [r7, #4]
 801958e:	e7b6      	b.n	80194fe <_malloc_r+0x4a>
 8019590:	461a      	mov	r2, r3
 8019592:	685b      	ldr	r3, [r3, #4]
 8019594:	42a3      	cmp	r3, r4
 8019596:	d1fb      	bne.n	8019590 <_malloc_r+0xdc>
 8019598:	2300      	movs	r3, #0
 801959a:	6053      	str	r3, [r2, #4]
 801959c:	e7de      	b.n	801955c <_malloc_r+0xa8>
 801959e:	230c      	movs	r3, #12
 80195a0:	6033      	str	r3, [r6, #0]
 80195a2:	4630      	mov	r0, r6
 80195a4:	f000 f80c 	bl	80195c0 <__malloc_unlock>
 80195a8:	e794      	b.n	80194d4 <_malloc_r+0x20>
 80195aa:	6005      	str	r5, [r0, #0]
 80195ac:	e7d6      	b.n	801955c <_malloc_r+0xa8>
 80195ae:	bf00      	nop
 80195b0:	20002fec 	.word	0x20002fec

080195b4 <__malloc_lock>:
 80195b4:	4801      	ldr	r0, [pc, #4]	@ (80195bc <__malloc_lock+0x8>)
 80195b6:	f001 bfd2 	b.w	801b55e <__retarget_lock_acquire_recursive>
 80195ba:	bf00      	nop
 80195bc:	20003130 	.word	0x20003130

080195c0 <__malloc_unlock>:
 80195c0:	4801      	ldr	r0, [pc, #4]	@ (80195c8 <__malloc_unlock+0x8>)
 80195c2:	f001 bfcd 	b.w	801b560 <__retarget_lock_release_recursive>
 80195c6:	bf00      	nop
 80195c8:	20003130 	.word	0x20003130

080195cc <sulp>:
 80195cc:	b570      	push	{r4, r5, r6, lr}
 80195ce:	4604      	mov	r4, r0
 80195d0:	460d      	mov	r5, r1
 80195d2:	ec45 4b10 	vmov	d0, r4, r5
 80195d6:	4616      	mov	r6, r2
 80195d8:	f003 fd5c 	bl	801d094 <__ulp>
 80195dc:	ec51 0b10 	vmov	r0, r1, d0
 80195e0:	b17e      	cbz	r6, 8019602 <sulp+0x36>
 80195e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80195e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	dd09      	ble.n	8019602 <sulp+0x36>
 80195ee:	051b      	lsls	r3, r3, #20
 80195f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80195f4:	2400      	movs	r4, #0
 80195f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80195fa:	4622      	mov	r2, r4
 80195fc:	462b      	mov	r3, r5
 80195fe:	f7e6 ffd3 	bl	80005a8 <__aeabi_dmul>
 8019602:	ec41 0b10 	vmov	d0, r0, r1
 8019606:	bd70      	pop	{r4, r5, r6, pc}

08019608 <_strtod_l>:
 8019608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801960c:	b09f      	sub	sp, #124	@ 0x7c
 801960e:	460c      	mov	r4, r1
 8019610:	9217      	str	r2, [sp, #92]	@ 0x5c
 8019612:	2200      	movs	r2, #0
 8019614:	921a      	str	r2, [sp, #104]	@ 0x68
 8019616:	9005      	str	r0, [sp, #20]
 8019618:	f04f 0a00 	mov.w	sl, #0
 801961c:	f04f 0b00 	mov.w	fp, #0
 8019620:	460a      	mov	r2, r1
 8019622:	9219      	str	r2, [sp, #100]	@ 0x64
 8019624:	7811      	ldrb	r1, [r2, #0]
 8019626:	292b      	cmp	r1, #43	@ 0x2b
 8019628:	d04a      	beq.n	80196c0 <_strtod_l+0xb8>
 801962a:	d838      	bhi.n	801969e <_strtod_l+0x96>
 801962c:	290d      	cmp	r1, #13
 801962e:	d832      	bhi.n	8019696 <_strtod_l+0x8e>
 8019630:	2908      	cmp	r1, #8
 8019632:	d832      	bhi.n	801969a <_strtod_l+0x92>
 8019634:	2900      	cmp	r1, #0
 8019636:	d03b      	beq.n	80196b0 <_strtod_l+0xa8>
 8019638:	2200      	movs	r2, #0
 801963a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801963c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801963e:	782a      	ldrb	r2, [r5, #0]
 8019640:	2a30      	cmp	r2, #48	@ 0x30
 8019642:	f040 80b3 	bne.w	80197ac <_strtod_l+0x1a4>
 8019646:	786a      	ldrb	r2, [r5, #1]
 8019648:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801964c:	2a58      	cmp	r2, #88	@ 0x58
 801964e:	d16e      	bne.n	801972e <_strtod_l+0x126>
 8019650:	9302      	str	r3, [sp, #8]
 8019652:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019654:	9301      	str	r3, [sp, #4]
 8019656:	ab1a      	add	r3, sp, #104	@ 0x68
 8019658:	9300      	str	r3, [sp, #0]
 801965a:	4a8e      	ldr	r2, [pc, #568]	@ (8019894 <_strtod_l+0x28c>)
 801965c:	9805      	ldr	r0, [sp, #20]
 801965e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8019660:	a919      	add	r1, sp, #100	@ 0x64
 8019662:	f002 febf 	bl	801c3e4 <__gethex>
 8019666:	f010 060f 	ands.w	r6, r0, #15
 801966a:	4604      	mov	r4, r0
 801966c:	d005      	beq.n	801967a <_strtod_l+0x72>
 801966e:	2e06      	cmp	r6, #6
 8019670:	d128      	bne.n	80196c4 <_strtod_l+0xbc>
 8019672:	3501      	adds	r5, #1
 8019674:	2300      	movs	r3, #0
 8019676:	9519      	str	r5, [sp, #100]	@ 0x64
 8019678:	930b      	str	r3, [sp, #44]	@ 0x2c
 801967a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801967c:	2b00      	cmp	r3, #0
 801967e:	f040 858e 	bne.w	801a19e <_strtod_l+0xb96>
 8019682:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019684:	b1cb      	cbz	r3, 80196ba <_strtod_l+0xb2>
 8019686:	4652      	mov	r2, sl
 8019688:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801968c:	ec43 2b10 	vmov	d0, r2, r3
 8019690:	b01f      	add	sp, #124	@ 0x7c
 8019692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019696:	2920      	cmp	r1, #32
 8019698:	d1ce      	bne.n	8019638 <_strtod_l+0x30>
 801969a:	3201      	adds	r2, #1
 801969c:	e7c1      	b.n	8019622 <_strtod_l+0x1a>
 801969e:	292d      	cmp	r1, #45	@ 0x2d
 80196a0:	d1ca      	bne.n	8019638 <_strtod_l+0x30>
 80196a2:	2101      	movs	r1, #1
 80196a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80196a6:	1c51      	adds	r1, r2, #1
 80196a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80196aa:	7852      	ldrb	r2, [r2, #1]
 80196ac:	2a00      	cmp	r2, #0
 80196ae:	d1c5      	bne.n	801963c <_strtod_l+0x34>
 80196b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80196b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	f040 8570 	bne.w	801a19a <_strtod_l+0xb92>
 80196ba:	4652      	mov	r2, sl
 80196bc:	465b      	mov	r3, fp
 80196be:	e7e5      	b.n	801968c <_strtod_l+0x84>
 80196c0:	2100      	movs	r1, #0
 80196c2:	e7ef      	b.n	80196a4 <_strtod_l+0x9c>
 80196c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80196c6:	b13a      	cbz	r2, 80196d8 <_strtod_l+0xd0>
 80196c8:	2135      	movs	r1, #53	@ 0x35
 80196ca:	a81c      	add	r0, sp, #112	@ 0x70
 80196cc:	f003 fddc 	bl	801d288 <__copybits>
 80196d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80196d2:	9805      	ldr	r0, [sp, #20]
 80196d4:	f003 f9aa 	bl	801ca2c <_Bfree>
 80196d8:	3e01      	subs	r6, #1
 80196da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80196dc:	2e04      	cmp	r6, #4
 80196de:	d806      	bhi.n	80196ee <_strtod_l+0xe6>
 80196e0:	e8df f006 	tbb	[pc, r6]
 80196e4:	201d0314 	.word	0x201d0314
 80196e8:	14          	.byte	0x14
 80196e9:	00          	.byte	0x00
 80196ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80196ee:	05e1      	lsls	r1, r4, #23
 80196f0:	bf48      	it	mi
 80196f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80196f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80196fa:	0d1b      	lsrs	r3, r3, #20
 80196fc:	051b      	lsls	r3, r3, #20
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d1bb      	bne.n	801967a <_strtod_l+0x72>
 8019702:	f001 ff01 	bl	801b508 <__errno>
 8019706:	2322      	movs	r3, #34	@ 0x22
 8019708:	6003      	str	r3, [r0, #0]
 801970a:	e7b6      	b.n	801967a <_strtod_l+0x72>
 801970c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8019710:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8019714:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8019718:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801971c:	e7e7      	b.n	80196ee <_strtod_l+0xe6>
 801971e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801989c <_strtod_l+0x294>
 8019722:	e7e4      	b.n	80196ee <_strtod_l+0xe6>
 8019724:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8019728:	f04f 3aff 	mov.w	sl, #4294967295
 801972c:	e7df      	b.n	80196ee <_strtod_l+0xe6>
 801972e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019730:	1c5a      	adds	r2, r3, #1
 8019732:	9219      	str	r2, [sp, #100]	@ 0x64
 8019734:	785b      	ldrb	r3, [r3, #1]
 8019736:	2b30      	cmp	r3, #48	@ 0x30
 8019738:	d0f9      	beq.n	801972e <_strtod_l+0x126>
 801973a:	2b00      	cmp	r3, #0
 801973c:	d09d      	beq.n	801967a <_strtod_l+0x72>
 801973e:	2301      	movs	r3, #1
 8019740:	9309      	str	r3, [sp, #36]	@ 0x24
 8019742:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019744:	930c      	str	r3, [sp, #48]	@ 0x30
 8019746:	2300      	movs	r3, #0
 8019748:	9308      	str	r3, [sp, #32]
 801974a:	930a      	str	r3, [sp, #40]	@ 0x28
 801974c:	461f      	mov	r7, r3
 801974e:	220a      	movs	r2, #10
 8019750:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8019752:	7805      	ldrb	r5, [r0, #0]
 8019754:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8019758:	b2d9      	uxtb	r1, r3
 801975a:	2909      	cmp	r1, #9
 801975c:	d928      	bls.n	80197b0 <_strtod_l+0x1a8>
 801975e:	494e      	ldr	r1, [pc, #312]	@ (8019898 <_strtod_l+0x290>)
 8019760:	2201      	movs	r2, #1
 8019762:	f001 fdf2 	bl	801b34a <strncmp>
 8019766:	2800      	cmp	r0, #0
 8019768:	d032      	beq.n	80197d0 <_strtod_l+0x1c8>
 801976a:	2000      	movs	r0, #0
 801976c:	462a      	mov	r2, r5
 801976e:	4681      	mov	r9, r0
 8019770:	463d      	mov	r5, r7
 8019772:	4603      	mov	r3, r0
 8019774:	2a65      	cmp	r2, #101	@ 0x65
 8019776:	d001      	beq.n	801977c <_strtod_l+0x174>
 8019778:	2a45      	cmp	r2, #69	@ 0x45
 801977a:	d114      	bne.n	80197a6 <_strtod_l+0x19e>
 801977c:	b91d      	cbnz	r5, 8019786 <_strtod_l+0x17e>
 801977e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019780:	4302      	orrs	r2, r0
 8019782:	d095      	beq.n	80196b0 <_strtod_l+0xa8>
 8019784:	2500      	movs	r5, #0
 8019786:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8019788:	1c62      	adds	r2, r4, #1
 801978a:	9219      	str	r2, [sp, #100]	@ 0x64
 801978c:	7862      	ldrb	r2, [r4, #1]
 801978e:	2a2b      	cmp	r2, #43	@ 0x2b
 8019790:	d077      	beq.n	8019882 <_strtod_l+0x27a>
 8019792:	2a2d      	cmp	r2, #45	@ 0x2d
 8019794:	d07b      	beq.n	801988e <_strtod_l+0x286>
 8019796:	f04f 0c00 	mov.w	ip, #0
 801979a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801979e:	2909      	cmp	r1, #9
 80197a0:	f240 8082 	bls.w	80198a8 <_strtod_l+0x2a0>
 80197a4:	9419      	str	r4, [sp, #100]	@ 0x64
 80197a6:	f04f 0800 	mov.w	r8, #0
 80197aa:	e0a2      	b.n	80198f2 <_strtod_l+0x2ea>
 80197ac:	2300      	movs	r3, #0
 80197ae:	e7c7      	b.n	8019740 <_strtod_l+0x138>
 80197b0:	2f08      	cmp	r7, #8
 80197b2:	bfd5      	itete	le
 80197b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80197b6:	9908      	ldrgt	r1, [sp, #32]
 80197b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80197bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80197c0:	f100 0001 	add.w	r0, r0, #1
 80197c4:	bfd4      	ite	le
 80197c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80197c8:	9308      	strgt	r3, [sp, #32]
 80197ca:	3701      	adds	r7, #1
 80197cc:	9019      	str	r0, [sp, #100]	@ 0x64
 80197ce:	e7bf      	b.n	8019750 <_strtod_l+0x148>
 80197d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80197d2:	1c5a      	adds	r2, r3, #1
 80197d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80197d6:	785a      	ldrb	r2, [r3, #1]
 80197d8:	b37f      	cbz	r7, 801983a <_strtod_l+0x232>
 80197da:	4681      	mov	r9, r0
 80197dc:	463d      	mov	r5, r7
 80197de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80197e2:	2b09      	cmp	r3, #9
 80197e4:	d912      	bls.n	801980c <_strtod_l+0x204>
 80197e6:	2301      	movs	r3, #1
 80197e8:	e7c4      	b.n	8019774 <_strtod_l+0x16c>
 80197ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80197ec:	1c5a      	adds	r2, r3, #1
 80197ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80197f0:	785a      	ldrb	r2, [r3, #1]
 80197f2:	3001      	adds	r0, #1
 80197f4:	2a30      	cmp	r2, #48	@ 0x30
 80197f6:	d0f8      	beq.n	80197ea <_strtod_l+0x1e2>
 80197f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80197fc:	2b08      	cmp	r3, #8
 80197fe:	f200 84d3 	bhi.w	801a1a8 <_strtod_l+0xba0>
 8019802:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019804:	930c      	str	r3, [sp, #48]	@ 0x30
 8019806:	4681      	mov	r9, r0
 8019808:	2000      	movs	r0, #0
 801980a:	4605      	mov	r5, r0
 801980c:	3a30      	subs	r2, #48	@ 0x30
 801980e:	f100 0301 	add.w	r3, r0, #1
 8019812:	d02a      	beq.n	801986a <_strtod_l+0x262>
 8019814:	4499      	add	r9, r3
 8019816:	eb00 0c05 	add.w	ip, r0, r5
 801981a:	462b      	mov	r3, r5
 801981c:	210a      	movs	r1, #10
 801981e:	4563      	cmp	r3, ip
 8019820:	d10d      	bne.n	801983e <_strtod_l+0x236>
 8019822:	1c69      	adds	r1, r5, #1
 8019824:	4401      	add	r1, r0
 8019826:	4428      	add	r0, r5
 8019828:	2808      	cmp	r0, #8
 801982a:	dc16      	bgt.n	801985a <_strtod_l+0x252>
 801982c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801982e:	230a      	movs	r3, #10
 8019830:	fb03 2300 	mla	r3, r3, r0, r2
 8019834:	930a      	str	r3, [sp, #40]	@ 0x28
 8019836:	2300      	movs	r3, #0
 8019838:	e018      	b.n	801986c <_strtod_l+0x264>
 801983a:	4638      	mov	r0, r7
 801983c:	e7da      	b.n	80197f4 <_strtod_l+0x1ec>
 801983e:	2b08      	cmp	r3, #8
 8019840:	f103 0301 	add.w	r3, r3, #1
 8019844:	dc03      	bgt.n	801984e <_strtod_l+0x246>
 8019846:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019848:	434e      	muls	r6, r1
 801984a:	960a      	str	r6, [sp, #40]	@ 0x28
 801984c:	e7e7      	b.n	801981e <_strtod_l+0x216>
 801984e:	2b10      	cmp	r3, #16
 8019850:	bfde      	ittt	le
 8019852:	9e08      	ldrle	r6, [sp, #32]
 8019854:	434e      	mulle	r6, r1
 8019856:	9608      	strle	r6, [sp, #32]
 8019858:	e7e1      	b.n	801981e <_strtod_l+0x216>
 801985a:	280f      	cmp	r0, #15
 801985c:	dceb      	bgt.n	8019836 <_strtod_l+0x22e>
 801985e:	9808      	ldr	r0, [sp, #32]
 8019860:	230a      	movs	r3, #10
 8019862:	fb03 2300 	mla	r3, r3, r0, r2
 8019866:	9308      	str	r3, [sp, #32]
 8019868:	e7e5      	b.n	8019836 <_strtod_l+0x22e>
 801986a:	4629      	mov	r1, r5
 801986c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801986e:	1c50      	adds	r0, r2, #1
 8019870:	9019      	str	r0, [sp, #100]	@ 0x64
 8019872:	7852      	ldrb	r2, [r2, #1]
 8019874:	4618      	mov	r0, r3
 8019876:	460d      	mov	r5, r1
 8019878:	e7b1      	b.n	80197de <_strtod_l+0x1d6>
 801987a:	f04f 0900 	mov.w	r9, #0
 801987e:	2301      	movs	r3, #1
 8019880:	e77d      	b.n	801977e <_strtod_l+0x176>
 8019882:	f04f 0c00 	mov.w	ip, #0
 8019886:	1ca2      	adds	r2, r4, #2
 8019888:	9219      	str	r2, [sp, #100]	@ 0x64
 801988a:	78a2      	ldrb	r2, [r4, #2]
 801988c:	e785      	b.n	801979a <_strtod_l+0x192>
 801988e:	f04f 0c01 	mov.w	ip, #1
 8019892:	e7f8      	b.n	8019886 <_strtod_l+0x27e>
 8019894:	08021e44 	.word	0x08021e44
 8019898:	08021e2c 	.word	0x08021e2c
 801989c:	7ff00000 	.word	0x7ff00000
 80198a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80198a2:	1c51      	adds	r1, r2, #1
 80198a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80198a6:	7852      	ldrb	r2, [r2, #1]
 80198a8:	2a30      	cmp	r2, #48	@ 0x30
 80198aa:	d0f9      	beq.n	80198a0 <_strtod_l+0x298>
 80198ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80198b0:	2908      	cmp	r1, #8
 80198b2:	f63f af78 	bhi.w	80197a6 <_strtod_l+0x19e>
 80198b6:	3a30      	subs	r2, #48	@ 0x30
 80198b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80198ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80198bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80198be:	f04f 080a 	mov.w	r8, #10
 80198c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80198c4:	1c56      	adds	r6, r2, #1
 80198c6:	9619      	str	r6, [sp, #100]	@ 0x64
 80198c8:	7852      	ldrb	r2, [r2, #1]
 80198ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80198ce:	f1be 0f09 	cmp.w	lr, #9
 80198d2:	d939      	bls.n	8019948 <_strtod_l+0x340>
 80198d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80198d6:	1a76      	subs	r6, r6, r1
 80198d8:	2e08      	cmp	r6, #8
 80198da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80198de:	dc03      	bgt.n	80198e8 <_strtod_l+0x2e0>
 80198e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80198e2:	4588      	cmp	r8, r1
 80198e4:	bfa8      	it	ge
 80198e6:	4688      	movge	r8, r1
 80198e8:	f1bc 0f00 	cmp.w	ip, #0
 80198ec:	d001      	beq.n	80198f2 <_strtod_l+0x2ea>
 80198ee:	f1c8 0800 	rsb	r8, r8, #0
 80198f2:	2d00      	cmp	r5, #0
 80198f4:	d14e      	bne.n	8019994 <_strtod_l+0x38c>
 80198f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80198f8:	4308      	orrs	r0, r1
 80198fa:	f47f aebe 	bne.w	801967a <_strtod_l+0x72>
 80198fe:	2b00      	cmp	r3, #0
 8019900:	f47f aed6 	bne.w	80196b0 <_strtod_l+0xa8>
 8019904:	2a69      	cmp	r2, #105	@ 0x69
 8019906:	d028      	beq.n	801995a <_strtod_l+0x352>
 8019908:	dc25      	bgt.n	8019956 <_strtod_l+0x34e>
 801990a:	2a49      	cmp	r2, #73	@ 0x49
 801990c:	d025      	beq.n	801995a <_strtod_l+0x352>
 801990e:	2a4e      	cmp	r2, #78	@ 0x4e
 8019910:	f47f aece 	bne.w	80196b0 <_strtod_l+0xa8>
 8019914:	499b      	ldr	r1, [pc, #620]	@ (8019b84 <_strtod_l+0x57c>)
 8019916:	a819      	add	r0, sp, #100	@ 0x64
 8019918:	f002 ff86 	bl	801c828 <__match>
 801991c:	2800      	cmp	r0, #0
 801991e:	f43f aec7 	beq.w	80196b0 <_strtod_l+0xa8>
 8019922:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019924:	781b      	ldrb	r3, [r3, #0]
 8019926:	2b28      	cmp	r3, #40	@ 0x28
 8019928:	d12e      	bne.n	8019988 <_strtod_l+0x380>
 801992a:	4997      	ldr	r1, [pc, #604]	@ (8019b88 <_strtod_l+0x580>)
 801992c:	aa1c      	add	r2, sp, #112	@ 0x70
 801992e:	a819      	add	r0, sp, #100	@ 0x64
 8019930:	f002 ff8e 	bl	801c850 <__hexnan>
 8019934:	2805      	cmp	r0, #5
 8019936:	d127      	bne.n	8019988 <_strtod_l+0x380>
 8019938:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801993a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801993e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8019942:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8019946:	e698      	b.n	801967a <_strtod_l+0x72>
 8019948:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801994a:	fb08 2101 	mla	r1, r8, r1, r2
 801994e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8019952:	920e      	str	r2, [sp, #56]	@ 0x38
 8019954:	e7b5      	b.n	80198c2 <_strtod_l+0x2ba>
 8019956:	2a6e      	cmp	r2, #110	@ 0x6e
 8019958:	e7da      	b.n	8019910 <_strtod_l+0x308>
 801995a:	498c      	ldr	r1, [pc, #560]	@ (8019b8c <_strtod_l+0x584>)
 801995c:	a819      	add	r0, sp, #100	@ 0x64
 801995e:	f002 ff63 	bl	801c828 <__match>
 8019962:	2800      	cmp	r0, #0
 8019964:	f43f aea4 	beq.w	80196b0 <_strtod_l+0xa8>
 8019968:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801996a:	4989      	ldr	r1, [pc, #548]	@ (8019b90 <_strtod_l+0x588>)
 801996c:	3b01      	subs	r3, #1
 801996e:	a819      	add	r0, sp, #100	@ 0x64
 8019970:	9319      	str	r3, [sp, #100]	@ 0x64
 8019972:	f002 ff59 	bl	801c828 <__match>
 8019976:	b910      	cbnz	r0, 801997e <_strtod_l+0x376>
 8019978:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801997a:	3301      	adds	r3, #1
 801997c:	9319      	str	r3, [sp, #100]	@ 0x64
 801997e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8019ba0 <_strtod_l+0x598>
 8019982:	f04f 0a00 	mov.w	sl, #0
 8019986:	e678      	b.n	801967a <_strtod_l+0x72>
 8019988:	4882      	ldr	r0, [pc, #520]	@ (8019b94 <_strtod_l+0x58c>)
 801998a:	f001 fe01 	bl	801b590 <nan>
 801998e:	ec5b ab10 	vmov	sl, fp, d0
 8019992:	e672      	b.n	801967a <_strtod_l+0x72>
 8019994:	eba8 0309 	sub.w	r3, r8, r9
 8019998:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801999a:	9309      	str	r3, [sp, #36]	@ 0x24
 801999c:	2f00      	cmp	r7, #0
 801999e:	bf08      	it	eq
 80199a0:	462f      	moveq	r7, r5
 80199a2:	2d10      	cmp	r5, #16
 80199a4:	462c      	mov	r4, r5
 80199a6:	bfa8      	it	ge
 80199a8:	2410      	movge	r4, #16
 80199aa:	f7e6 fd83 	bl	80004b4 <__aeabi_ui2d>
 80199ae:	2d09      	cmp	r5, #9
 80199b0:	4682      	mov	sl, r0
 80199b2:	468b      	mov	fp, r1
 80199b4:	dc13      	bgt.n	80199de <_strtod_l+0x3d6>
 80199b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	f43f ae5e 	beq.w	801967a <_strtod_l+0x72>
 80199be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199c0:	dd78      	ble.n	8019ab4 <_strtod_l+0x4ac>
 80199c2:	2b16      	cmp	r3, #22
 80199c4:	dc5f      	bgt.n	8019a86 <_strtod_l+0x47e>
 80199c6:	4974      	ldr	r1, [pc, #464]	@ (8019b98 <_strtod_l+0x590>)
 80199c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80199cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80199d0:	4652      	mov	r2, sl
 80199d2:	465b      	mov	r3, fp
 80199d4:	f7e6 fde8 	bl	80005a8 <__aeabi_dmul>
 80199d8:	4682      	mov	sl, r0
 80199da:	468b      	mov	fp, r1
 80199dc:	e64d      	b.n	801967a <_strtod_l+0x72>
 80199de:	4b6e      	ldr	r3, [pc, #440]	@ (8019b98 <_strtod_l+0x590>)
 80199e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80199e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80199e8:	f7e6 fdde 	bl	80005a8 <__aeabi_dmul>
 80199ec:	4682      	mov	sl, r0
 80199ee:	9808      	ldr	r0, [sp, #32]
 80199f0:	468b      	mov	fp, r1
 80199f2:	f7e6 fd5f 	bl	80004b4 <__aeabi_ui2d>
 80199f6:	4602      	mov	r2, r0
 80199f8:	460b      	mov	r3, r1
 80199fa:	4650      	mov	r0, sl
 80199fc:	4659      	mov	r1, fp
 80199fe:	f7e6 fc1d 	bl	800023c <__adddf3>
 8019a02:	2d0f      	cmp	r5, #15
 8019a04:	4682      	mov	sl, r0
 8019a06:	468b      	mov	fp, r1
 8019a08:	ddd5      	ble.n	80199b6 <_strtod_l+0x3ae>
 8019a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a0c:	1b2c      	subs	r4, r5, r4
 8019a0e:	441c      	add	r4, r3
 8019a10:	2c00      	cmp	r4, #0
 8019a12:	f340 8096 	ble.w	8019b42 <_strtod_l+0x53a>
 8019a16:	f014 030f 	ands.w	r3, r4, #15
 8019a1a:	d00a      	beq.n	8019a32 <_strtod_l+0x42a>
 8019a1c:	495e      	ldr	r1, [pc, #376]	@ (8019b98 <_strtod_l+0x590>)
 8019a1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019a22:	4652      	mov	r2, sl
 8019a24:	465b      	mov	r3, fp
 8019a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a2a:	f7e6 fdbd 	bl	80005a8 <__aeabi_dmul>
 8019a2e:	4682      	mov	sl, r0
 8019a30:	468b      	mov	fp, r1
 8019a32:	f034 040f 	bics.w	r4, r4, #15
 8019a36:	d073      	beq.n	8019b20 <_strtod_l+0x518>
 8019a38:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8019a3c:	dd48      	ble.n	8019ad0 <_strtod_l+0x4c8>
 8019a3e:	2400      	movs	r4, #0
 8019a40:	46a0      	mov	r8, r4
 8019a42:	940a      	str	r4, [sp, #40]	@ 0x28
 8019a44:	46a1      	mov	r9, r4
 8019a46:	9a05      	ldr	r2, [sp, #20]
 8019a48:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8019ba0 <_strtod_l+0x598>
 8019a4c:	2322      	movs	r3, #34	@ 0x22
 8019a4e:	6013      	str	r3, [r2, #0]
 8019a50:	f04f 0a00 	mov.w	sl, #0
 8019a54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	f43f ae0f 	beq.w	801967a <_strtod_l+0x72>
 8019a5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019a5e:	9805      	ldr	r0, [sp, #20]
 8019a60:	f002 ffe4 	bl	801ca2c <_Bfree>
 8019a64:	9805      	ldr	r0, [sp, #20]
 8019a66:	4649      	mov	r1, r9
 8019a68:	f002 ffe0 	bl	801ca2c <_Bfree>
 8019a6c:	9805      	ldr	r0, [sp, #20]
 8019a6e:	4641      	mov	r1, r8
 8019a70:	f002 ffdc 	bl	801ca2c <_Bfree>
 8019a74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019a76:	9805      	ldr	r0, [sp, #20]
 8019a78:	f002 ffd8 	bl	801ca2c <_Bfree>
 8019a7c:	9805      	ldr	r0, [sp, #20]
 8019a7e:	4621      	mov	r1, r4
 8019a80:	f002 ffd4 	bl	801ca2c <_Bfree>
 8019a84:	e5f9      	b.n	801967a <_strtod_l+0x72>
 8019a86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019a88:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8019a8c:	4293      	cmp	r3, r2
 8019a8e:	dbbc      	blt.n	8019a0a <_strtod_l+0x402>
 8019a90:	4c41      	ldr	r4, [pc, #260]	@ (8019b98 <_strtod_l+0x590>)
 8019a92:	f1c5 050f 	rsb	r5, r5, #15
 8019a96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8019a9a:	4652      	mov	r2, sl
 8019a9c:	465b      	mov	r3, fp
 8019a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019aa2:	f7e6 fd81 	bl	80005a8 <__aeabi_dmul>
 8019aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019aa8:	1b5d      	subs	r5, r3, r5
 8019aaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8019aae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019ab2:	e78f      	b.n	80199d4 <_strtod_l+0x3cc>
 8019ab4:	3316      	adds	r3, #22
 8019ab6:	dba8      	blt.n	8019a0a <_strtod_l+0x402>
 8019ab8:	4b37      	ldr	r3, [pc, #220]	@ (8019b98 <_strtod_l+0x590>)
 8019aba:	eba9 0808 	sub.w	r8, r9, r8
 8019abe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8019ac2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8019ac6:	4650      	mov	r0, sl
 8019ac8:	4659      	mov	r1, fp
 8019aca:	f7e6 fe97 	bl	80007fc <__aeabi_ddiv>
 8019ace:	e783      	b.n	80199d8 <_strtod_l+0x3d0>
 8019ad0:	4b32      	ldr	r3, [pc, #200]	@ (8019b9c <_strtod_l+0x594>)
 8019ad2:	9308      	str	r3, [sp, #32]
 8019ad4:	2300      	movs	r3, #0
 8019ad6:	1124      	asrs	r4, r4, #4
 8019ad8:	4650      	mov	r0, sl
 8019ada:	4659      	mov	r1, fp
 8019adc:	461e      	mov	r6, r3
 8019ade:	2c01      	cmp	r4, #1
 8019ae0:	dc21      	bgt.n	8019b26 <_strtod_l+0x51e>
 8019ae2:	b10b      	cbz	r3, 8019ae8 <_strtod_l+0x4e0>
 8019ae4:	4682      	mov	sl, r0
 8019ae6:	468b      	mov	fp, r1
 8019ae8:	492c      	ldr	r1, [pc, #176]	@ (8019b9c <_strtod_l+0x594>)
 8019aea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8019aee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8019af2:	4652      	mov	r2, sl
 8019af4:	465b      	mov	r3, fp
 8019af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019afa:	f7e6 fd55 	bl	80005a8 <__aeabi_dmul>
 8019afe:	4b28      	ldr	r3, [pc, #160]	@ (8019ba0 <_strtod_l+0x598>)
 8019b00:	460a      	mov	r2, r1
 8019b02:	400b      	ands	r3, r1
 8019b04:	4927      	ldr	r1, [pc, #156]	@ (8019ba4 <_strtod_l+0x59c>)
 8019b06:	428b      	cmp	r3, r1
 8019b08:	4682      	mov	sl, r0
 8019b0a:	d898      	bhi.n	8019a3e <_strtod_l+0x436>
 8019b0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8019b10:	428b      	cmp	r3, r1
 8019b12:	bf86      	itte	hi
 8019b14:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8019ba8 <_strtod_l+0x5a0>
 8019b18:	f04f 3aff 	movhi.w	sl, #4294967295
 8019b1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8019b20:	2300      	movs	r3, #0
 8019b22:	9308      	str	r3, [sp, #32]
 8019b24:	e07a      	b.n	8019c1c <_strtod_l+0x614>
 8019b26:	07e2      	lsls	r2, r4, #31
 8019b28:	d505      	bpl.n	8019b36 <_strtod_l+0x52e>
 8019b2a:	9b08      	ldr	r3, [sp, #32]
 8019b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b30:	f7e6 fd3a 	bl	80005a8 <__aeabi_dmul>
 8019b34:	2301      	movs	r3, #1
 8019b36:	9a08      	ldr	r2, [sp, #32]
 8019b38:	3208      	adds	r2, #8
 8019b3a:	3601      	adds	r6, #1
 8019b3c:	1064      	asrs	r4, r4, #1
 8019b3e:	9208      	str	r2, [sp, #32]
 8019b40:	e7cd      	b.n	8019ade <_strtod_l+0x4d6>
 8019b42:	d0ed      	beq.n	8019b20 <_strtod_l+0x518>
 8019b44:	4264      	negs	r4, r4
 8019b46:	f014 020f 	ands.w	r2, r4, #15
 8019b4a:	d00a      	beq.n	8019b62 <_strtod_l+0x55a>
 8019b4c:	4b12      	ldr	r3, [pc, #72]	@ (8019b98 <_strtod_l+0x590>)
 8019b4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019b52:	4650      	mov	r0, sl
 8019b54:	4659      	mov	r1, fp
 8019b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b5a:	f7e6 fe4f 	bl	80007fc <__aeabi_ddiv>
 8019b5e:	4682      	mov	sl, r0
 8019b60:	468b      	mov	fp, r1
 8019b62:	1124      	asrs	r4, r4, #4
 8019b64:	d0dc      	beq.n	8019b20 <_strtod_l+0x518>
 8019b66:	2c1f      	cmp	r4, #31
 8019b68:	dd20      	ble.n	8019bac <_strtod_l+0x5a4>
 8019b6a:	2400      	movs	r4, #0
 8019b6c:	46a0      	mov	r8, r4
 8019b6e:	940a      	str	r4, [sp, #40]	@ 0x28
 8019b70:	46a1      	mov	r9, r4
 8019b72:	9a05      	ldr	r2, [sp, #20]
 8019b74:	2322      	movs	r3, #34	@ 0x22
 8019b76:	f04f 0a00 	mov.w	sl, #0
 8019b7a:	f04f 0b00 	mov.w	fp, #0
 8019b7e:	6013      	str	r3, [r2, #0]
 8019b80:	e768      	b.n	8019a54 <_strtod_l+0x44c>
 8019b82:	bf00      	nop
 8019b84:	08021f8e 	.word	0x08021f8e
 8019b88:	08021e30 	.word	0x08021e30
 8019b8c:	08021f86 	.word	0x08021f86
 8019b90:	08022072 	.word	0x08022072
 8019b94:	0802206e 	.word	0x0802206e
 8019b98:	080221d8 	.word	0x080221d8
 8019b9c:	080221b0 	.word	0x080221b0
 8019ba0:	7ff00000 	.word	0x7ff00000
 8019ba4:	7ca00000 	.word	0x7ca00000
 8019ba8:	7fefffff 	.word	0x7fefffff
 8019bac:	f014 0310 	ands.w	r3, r4, #16
 8019bb0:	bf18      	it	ne
 8019bb2:	236a      	movne	r3, #106	@ 0x6a
 8019bb4:	4ea9      	ldr	r6, [pc, #676]	@ (8019e5c <_strtod_l+0x854>)
 8019bb6:	9308      	str	r3, [sp, #32]
 8019bb8:	4650      	mov	r0, sl
 8019bba:	4659      	mov	r1, fp
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	07e2      	lsls	r2, r4, #31
 8019bc0:	d504      	bpl.n	8019bcc <_strtod_l+0x5c4>
 8019bc2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019bc6:	f7e6 fcef 	bl	80005a8 <__aeabi_dmul>
 8019bca:	2301      	movs	r3, #1
 8019bcc:	1064      	asrs	r4, r4, #1
 8019bce:	f106 0608 	add.w	r6, r6, #8
 8019bd2:	d1f4      	bne.n	8019bbe <_strtod_l+0x5b6>
 8019bd4:	b10b      	cbz	r3, 8019bda <_strtod_l+0x5d2>
 8019bd6:	4682      	mov	sl, r0
 8019bd8:	468b      	mov	fp, r1
 8019bda:	9b08      	ldr	r3, [sp, #32]
 8019bdc:	b1b3      	cbz	r3, 8019c0c <_strtod_l+0x604>
 8019bde:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8019be2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	4659      	mov	r1, fp
 8019bea:	dd0f      	ble.n	8019c0c <_strtod_l+0x604>
 8019bec:	2b1f      	cmp	r3, #31
 8019bee:	dd55      	ble.n	8019c9c <_strtod_l+0x694>
 8019bf0:	2b34      	cmp	r3, #52	@ 0x34
 8019bf2:	bfde      	ittt	le
 8019bf4:	f04f 33ff 	movle.w	r3, #4294967295
 8019bf8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8019bfc:	4093      	lslle	r3, r2
 8019bfe:	f04f 0a00 	mov.w	sl, #0
 8019c02:	bfcc      	ite	gt
 8019c04:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8019c08:	ea03 0b01 	andle.w	fp, r3, r1
 8019c0c:	2200      	movs	r2, #0
 8019c0e:	2300      	movs	r3, #0
 8019c10:	4650      	mov	r0, sl
 8019c12:	4659      	mov	r1, fp
 8019c14:	f7e6 ff30 	bl	8000a78 <__aeabi_dcmpeq>
 8019c18:	2800      	cmp	r0, #0
 8019c1a:	d1a6      	bne.n	8019b6a <_strtod_l+0x562>
 8019c1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019c1e:	9300      	str	r3, [sp, #0]
 8019c20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019c22:	9805      	ldr	r0, [sp, #20]
 8019c24:	462b      	mov	r3, r5
 8019c26:	463a      	mov	r2, r7
 8019c28:	f002 ff68 	bl	801cafc <__s2b>
 8019c2c:	900a      	str	r0, [sp, #40]	@ 0x28
 8019c2e:	2800      	cmp	r0, #0
 8019c30:	f43f af05 	beq.w	8019a3e <_strtod_l+0x436>
 8019c34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019c36:	2a00      	cmp	r2, #0
 8019c38:	eba9 0308 	sub.w	r3, r9, r8
 8019c3c:	bfa8      	it	ge
 8019c3e:	2300      	movge	r3, #0
 8019c40:	9312      	str	r3, [sp, #72]	@ 0x48
 8019c42:	2400      	movs	r4, #0
 8019c44:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8019c48:	9316      	str	r3, [sp, #88]	@ 0x58
 8019c4a:	46a0      	mov	r8, r4
 8019c4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019c4e:	9805      	ldr	r0, [sp, #20]
 8019c50:	6859      	ldr	r1, [r3, #4]
 8019c52:	f002 feab 	bl	801c9ac <_Balloc>
 8019c56:	4681      	mov	r9, r0
 8019c58:	2800      	cmp	r0, #0
 8019c5a:	f43f aef4 	beq.w	8019a46 <_strtod_l+0x43e>
 8019c5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019c60:	691a      	ldr	r2, [r3, #16]
 8019c62:	3202      	adds	r2, #2
 8019c64:	f103 010c 	add.w	r1, r3, #12
 8019c68:	0092      	lsls	r2, r2, #2
 8019c6a:	300c      	adds	r0, #12
 8019c6c:	f001 fc81 	bl	801b572 <memcpy>
 8019c70:	ec4b ab10 	vmov	d0, sl, fp
 8019c74:	9805      	ldr	r0, [sp, #20]
 8019c76:	aa1c      	add	r2, sp, #112	@ 0x70
 8019c78:	a91b      	add	r1, sp, #108	@ 0x6c
 8019c7a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8019c7e:	f003 fa79 	bl	801d174 <__d2b>
 8019c82:	901a      	str	r0, [sp, #104]	@ 0x68
 8019c84:	2800      	cmp	r0, #0
 8019c86:	f43f aede 	beq.w	8019a46 <_strtod_l+0x43e>
 8019c8a:	9805      	ldr	r0, [sp, #20]
 8019c8c:	2101      	movs	r1, #1
 8019c8e:	f002 ffcb 	bl	801cc28 <__i2b>
 8019c92:	4680      	mov	r8, r0
 8019c94:	b948      	cbnz	r0, 8019caa <_strtod_l+0x6a2>
 8019c96:	f04f 0800 	mov.w	r8, #0
 8019c9a:	e6d4      	b.n	8019a46 <_strtod_l+0x43e>
 8019c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8019ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8019ca4:	ea03 0a0a 	and.w	sl, r3, sl
 8019ca8:	e7b0      	b.n	8019c0c <_strtod_l+0x604>
 8019caa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8019cac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8019cae:	2d00      	cmp	r5, #0
 8019cb0:	bfab      	itete	ge
 8019cb2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8019cb4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8019cb6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8019cb8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8019cba:	bfac      	ite	ge
 8019cbc:	18ef      	addge	r7, r5, r3
 8019cbe:	1b5e      	sublt	r6, r3, r5
 8019cc0:	9b08      	ldr	r3, [sp, #32]
 8019cc2:	1aed      	subs	r5, r5, r3
 8019cc4:	4415      	add	r5, r2
 8019cc6:	4b66      	ldr	r3, [pc, #408]	@ (8019e60 <_strtod_l+0x858>)
 8019cc8:	3d01      	subs	r5, #1
 8019cca:	429d      	cmp	r5, r3
 8019ccc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8019cd0:	da50      	bge.n	8019d74 <_strtod_l+0x76c>
 8019cd2:	1b5b      	subs	r3, r3, r5
 8019cd4:	2b1f      	cmp	r3, #31
 8019cd6:	eba2 0203 	sub.w	r2, r2, r3
 8019cda:	f04f 0101 	mov.w	r1, #1
 8019cde:	dc3d      	bgt.n	8019d5c <_strtod_l+0x754>
 8019ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8019ce4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019ce6:	2300      	movs	r3, #0
 8019ce8:	9310      	str	r3, [sp, #64]	@ 0x40
 8019cea:	18bd      	adds	r5, r7, r2
 8019cec:	9b08      	ldr	r3, [sp, #32]
 8019cee:	42af      	cmp	r7, r5
 8019cf0:	4416      	add	r6, r2
 8019cf2:	441e      	add	r6, r3
 8019cf4:	463b      	mov	r3, r7
 8019cf6:	bfa8      	it	ge
 8019cf8:	462b      	movge	r3, r5
 8019cfa:	42b3      	cmp	r3, r6
 8019cfc:	bfa8      	it	ge
 8019cfe:	4633      	movge	r3, r6
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	bfc2      	ittt	gt
 8019d04:	1aed      	subgt	r5, r5, r3
 8019d06:	1af6      	subgt	r6, r6, r3
 8019d08:	1aff      	subgt	r7, r7, r3
 8019d0a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	dd16      	ble.n	8019d3e <_strtod_l+0x736>
 8019d10:	4641      	mov	r1, r8
 8019d12:	9805      	ldr	r0, [sp, #20]
 8019d14:	461a      	mov	r2, r3
 8019d16:	f003 f847 	bl	801cda8 <__pow5mult>
 8019d1a:	4680      	mov	r8, r0
 8019d1c:	2800      	cmp	r0, #0
 8019d1e:	d0ba      	beq.n	8019c96 <_strtod_l+0x68e>
 8019d20:	4601      	mov	r1, r0
 8019d22:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8019d24:	9805      	ldr	r0, [sp, #20]
 8019d26:	f002 ff95 	bl	801cc54 <__multiply>
 8019d2a:	900e      	str	r0, [sp, #56]	@ 0x38
 8019d2c:	2800      	cmp	r0, #0
 8019d2e:	f43f ae8a 	beq.w	8019a46 <_strtod_l+0x43e>
 8019d32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019d34:	9805      	ldr	r0, [sp, #20]
 8019d36:	f002 fe79 	bl	801ca2c <_Bfree>
 8019d3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019d3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8019d3e:	2d00      	cmp	r5, #0
 8019d40:	dc1d      	bgt.n	8019d7e <_strtod_l+0x776>
 8019d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	dd23      	ble.n	8019d90 <_strtod_l+0x788>
 8019d48:	4649      	mov	r1, r9
 8019d4a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8019d4c:	9805      	ldr	r0, [sp, #20]
 8019d4e:	f003 f82b 	bl	801cda8 <__pow5mult>
 8019d52:	4681      	mov	r9, r0
 8019d54:	b9e0      	cbnz	r0, 8019d90 <_strtod_l+0x788>
 8019d56:	f04f 0900 	mov.w	r9, #0
 8019d5a:	e674      	b.n	8019a46 <_strtod_l+0x43e>
 8019d5c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8019d60:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8019d64:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8019d68:	35e2      	adds	r5, #226	@ 0xe2
 8019d6a:	fa01 f305 	lsl.w	r3, r1, r5
 8019d6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8019d70:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019d72:	e7ba      	b.n	8019cea <_strtod_l+0x6e2>
 8019d74:	2300      	movs	r3, #0
 8019d76:	9310      	str	r3, [sp, #64]	@ 0x40
 8019d78:	2301      	movs	r3, #1
 8019d7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019d7c:	e7b5      	b.n	8019cea <_strtod_l+0x6e2>
 8019d7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019d80:	9805      	ldr	r0, [sp, #20]
 8019d82:	462a      	mov	r2, r5
 8019d84:	f003 f86a 	bl	801ce5c <__lshift>
 8019d88:	901a      	str	r0, [sp, #104]	@ 0x68
 8019d8a:	2800      	cmp	r0, #0
 8019d8c:	d1d9      	bne.n	8019d42 <_strtod_l+0x73a>
 8019d8e:	e65a      	b.n	8019a46 <_strtod_l+0x43e>
 8019d90:	2e00      	cmp	r6, #0
 8019d92:	dd07      	ble.n	8019da4 <_strtod_l+0x79c>
 8019d94:	4649      	mov	r1, r9
 8019d96:	9805      	ldr	r0, [sp, #20]
 8019d98:	4632      	mov	r2, r6
 8019d9a:	f003 f85f 	bl	801ce5c <__lshift>
 8019d9e:	4681      	mov	r9, r0
 8019da0:	2800      	cmp	r0, #0
 8019da2:	d0d8      	beq.n	8019d56 <_strtod_l+0x74e>
 8019da4:	2f00      	cmp	r7, #0
 8019da6:	dd08      	ble.n	8019dba <_strtod_l+0x7b2>
 8019da8:	4641      	mov	r1, r8
 8019daa:	9805      	ldr	r0, [sp, #20]
 8019dac:	463a      	mov	r2, r7
 8019dae:	f003 f855 	bl	801ce5c <__lshift>
 8019db2:	4680      	mov	r8, r0
 8019db4:	2800      	cmp	r0, #0
 8019db6:	f43f ae46 	beq.w	8019a46 <_strtod_l+0x43e>
 8019dba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019dbc:	9805      	ldr	r0, [sp, #20]
 8019dbe:	464a      	mov	r2, r9
 8019dc0:	f003 f8d4 	bl	801cf6c <__mdiff>
 8019dc4:	4604      	mov	r4, r0
 8019dc6:	2800      	cmp	r0, #0
 8019dc8:	f43f ae3d 	beq.w	8019a46 <_strtod_l+0x43e>
 8019dcc:	68c3      	ldr	r3, [r0, #12]
 8019dce:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019dd0:	2300      	movs	r3, #0
 8019dd2:	60c3      	str	r3, [r0, #12]
 8019dd4:	4641      	mov	r1, r8
 8019dd6:	f003 f8ad 	bl	801cf34 <__mcmp>
 8019dda:	2800      	cmp	r0, #0
 8019ddc:	da46      	bge.n	8019e6c <_strtod_l+0x864>
 8019dde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019de0:	ea53 030a 	orrs.w	r3, r3, sl
 8019de4:	d16c      	bne.n	8019ec0 <_strtod_l+0x8b8>
 8019de6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d168      	bne.n	8019ec0 <_strtod_l+0x8b8>
 8019dee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019df2:	0d1b      	lsrs	r3, r3, #20
 8019df4:	051b      	lsls	r3, r3, #20
 8019df6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019dfa:	d961      	bls.n	8019ec0 <_strtod_l+0x8b8>
 8019dfc:	6963      	ldr	r3, [r4, #20]
 8019dfe:	b913      	cbnz	r3, 8019e06 <_strtod_l+0x7fe>
 8019e00:	6923      	ldr	r3, [r4, #16]
 8019e02:	2b01      	cmp	r3, #1
 8019e04:	dd5c      	ble.n	8019ec0 <_strtod_l+0x8b8>
 8019e06:	4621      	mov	r1, r4
 8019e08:	2201      	movs	r2, #1
 8019e0a:	9805      	ldr	r0, [sp, #20]
 8019e0c:	f003 f826 	bl	801ce5c <__lshift>
 8019e10:	4641      	mov	r1, r8
 8019e12:	4604      	mov	r4, r0
 8019e14:	f003 f88e 	bl	801cf34 <__mcmp>
 8019e18:	2800      	cmp	r0, #0
 8019e1a:	dd51      	ble.n	8019ec0 <_strtod_l+0x8b8>
 8019e1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019e20:	9a08      	ldr	r2, [sp, #32]
 8019e22:	0d1b      	lsrs	r3, r3, #20
 8019e24:	051b      	lsls	r3, r3, #20
 8019e26:	2a00      	cmp	r2, #0
 8019e28:	d06b      	beq.n	8019f02 <_strtod_l+0x8fa>
 8019e2a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019e2e:	d868      	bhi.n	8019f02 <_strtod_l+0x8fa>
 8019e30:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8019e34:	f67f ae9d 	bls.w	8019b72 <_strtod_l+0x56a>
 8019e38:	4b0a      	ldr	r3, [pc, #40]	@ (8019e64 <_strtod_l+0x85c>)
 8019e3a:	4650      	mov	r0, sl
 8019e3c:	4659      	mov	r1, fp
 8019e3e:	2200      	movs	r2, #0
 8019e40:	f7e6 fbb2 	bl	80005a8 <__aeabi_dmul>
 8019e44:	4b08      	ldr	r3, [pc, #32]	@ (8019e68 <_strtod_l+0x860>)
 8019e46:	400b      	ands	r3, r1
 8019e48:	4682      	mov	sl, r0
 8019e4a:	468b      	mov	fp, r1
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	f47f ae05 	bne.w	8019a5c <_strtod_l+0x454>
 8019e52:	9a05      	ldr	r2, [sp, #20]
 8019e54:	2322      	movs	r3, #34	@ 0x22
 8019e56:	6013      	str	r3, [r2, #0]
 8019e58:	e600      	b.n	8019a5c <_strtod_l+0x454>
 8019e5a:	bf00      	nop
 8019e5c:	08021e58 	.word	0x08021e58
 8019e60:	fffffc02 	.word	0xfffffc02
 8019e64:	39500000 	.word	0x39500000
 8019e68:	7ff00000 	.word	0x7ff00000
 8019e6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8019e70:	d165      	bne.n	8019f3e <_strtod_l+0x936>
 8019e72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019e74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019e78:	b35a      	cbz	r2, 8019ed2 <_strtod_l+0x8ca>
 8019e7a:	4a9f      	ldr	r2, [pc, #636]	@ (801a0f8 <_strtod_l+0xaf0>)
 8019e7c:	4293      	cmp	r3, r2
 8019e7e:	d12b      	bne.n	8019ed8 <_strtod_l+0x8d0>
 8019e80:	9b08      	ldr	r3, [sp, #32]
 8019e82:	4651      	mov	r1, sl
 8019e84:	b303      	cbz	r3, 8019ec8 <_strtod_l+0x8c0>
 8019e86:	4b9d      	ldr	r3, [pc, #628]	@ (801a0fc <_strtod_l+0xaf4>)
 8019e88:	465a      	mov	r2, fp
 8019e8a:	4013      	ands	r3, r2
 8019e8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8019e90:	f04f 32ff 	mov.w	r2, #4294967295
 8019e94:	d81b      	bhi.n	8019ece <_strtod_l+0x8c6>
 8019e96:	0d1b      	lsrs	r3, r3, #20
 8019e98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8019ea0:	4299      	cmp	r1, r3
 8019ea2:	d119      	bne.n	8019ed8 <_strtod_l+0x8d0>
 8019ea4:	4b96      	ldr	r3, [pc, #600]	@ (801a100 <_strtod_l+0xaf8>)
 8019ea6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019ea8:	429a      	cmp	r2, r3
 8019eaa:	d102      	bne.n	8019eb2 <_strtod_l+0x8aa>
 8019eac:	3101      	adds	r1, #1
 8019eae:	f43f adca 	beq.w	8019a46 <_strtod_l+0x43e>
 8019eb2:	4b92      	ldr	r3, [pc, #584]	@ (801a0fc <_strtod_l+0xaf4>)
 8019eb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019eb6:	401a      	ands	r2, r3
 8019eb8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8019ebc:	f04f 0a00 	mov.w	sl, #0
 8019ec0:	9b08      	ldr	r3, [sp, #32]
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d1b8      	bne.n	8019e38 <_strtod_l+0x830>
 8019ec6:	e5c9      	b.n	8019a5c <_strtod_l+0x454>
 8019ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8019ecc:	e7e8      	b.n	8019ea0 <_strtod_l+0x898>
 8019ece:	4613      	mov	r3, r2
 8019ed0:	e7e6      	b.n	8019ea0 <_strtod_l+0x898>
 8019ed2:	ea53 030a 	orrs.w	r3, r3, sl
 8019ed6:	d0a1      	beq.n	8019e1c <_strtod_l+0x814>
 8019ed8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019eda:	b1db      	cbz	r3, 8019f14 <_strtod_l+0x90c>
 8019edc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019ede:	4213      	tst	r3, r2
 8019ee0:	d0ee      	beq.n	8019ec0 <_strtod_l+0x8b8>
 8019ee2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019ee4:	9a08      	ldr	r2, [sp, #32]
 8019ee6:	4650      	mov	r0, sl
 8019ee8:	4659      	mov	r1, fp
 8019eea:	b1bb      	cbz	r3, 8019f1c <_strtod_l+0x914>
 8019eec:	f7ff fb6e 	bl	80195cc <sulp>
 8019ef0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019ef4:	ec53 2b10 	vmov	r2, r3, d0
 8019ef8:	f7e6 f9a0 	bl	800023c <__adddf3>
 8019efc:	4682      	mov	sl, r0
 8019efe:	468b      	mov	fp, r1
 8019f00:	e7de      	b.n	8019ec0 <_strtod_l+0x8b8>
 8019f02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8019f06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8019f0a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8019f0e:	f04f 3aff 	mov.w	sl, #4294967295
 8019f12:	e7d5      	b.n	8019ec0 <_strtod_l+0x8b8>
 8019f14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019f16:	ea13 0f0a 	tst.w	r3, sl
 8019f1a:	e7e1      	b.n	8019ee0 <_strtod_l+0x8d8>
 8019f1c:	f7ff fb56 	bl	80195cc <sulp>
 8019f20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019f24:	ec53 2b10 	vmov	r2, r3, d0
 8019f28:	f7e6 f986 	bl	8000238 <__aeabi_dsub>
 8019f2c:	2200      	movs	r2, #0
 8019f2e:	2300      	movs	r3, #0
 8019f30:	4682      	mov	sl, r0
 8019f32:	468b      	mov	fp, r1
 8019f34:	f7e6 fda0 	bl	8000a78 <__aeabi_dcmpeq>
 8019f38:	2800      	cmp	r0, #0
 8019f3a:	d0c1      	beq.n	8019ec0 <_strtod_l+0x8b8>
 8019f3c:	e619      	b.n	8019b72 <_strtod_l+0x56a>
 8019f3e:	4641      	mov	r1, r8
 8019f40:	4620      	mov	r0, r4
 8019f42:	f003 f96f 	bl	801d224 <__ratio>
 8019f46:	ec57 6b10 	vmov	r6, r7, d0
 8019f4a:	2200      	movs	r2, #0
 8019f4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8019f50:	4630      	mov	r0, r6
 8019f52:	4639      	mov	r1, r7
 8019f54:	f7e6 fda4 	bl	8000aa0 <__aeabi_dcmple>
 8019f58:	2800      	cmp	r0, #0
 8019f5a:	d06f      	beq.n	801a03c <_strtod_l+0xa34>
 8019f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d17a      	bne.n	801a058 <_strtod_l+0xa50>
 8019f62:	f1ba 0f00 	cmp.w	sl, #0
 8019f66:	d158      	bne.n	801a01a <_strtod_l+0xa12>
 8019f68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d15a      	bne.n	801a028 <_strtod_l+0xa20>
 8019f72:	4b64      	ldr	r3, [pc, #400]	@ (801a104 <_strtod_l+0xafc>)
 8019f74:	2200      	movs	r2, #0
 8019f76:	4630      	mov	r0, r6
 8019f78:	4639      	mov	r1, r7
 8019f7a:	f7e6 fd87 	bl	8000a8c <__aeabi_dcmplt>
 8019f7e:	2800      	cmp	r0, #0
 8019f80:	d159      	bne.n	801a036 <_strtod_l+0xa2e>
 8019f82:	4630      	mov	r0, r6
 8019f84:	4639      	mov	r1, r7
 8019f86:	4b60      	ldr	r3, [pc, #384]	@ (801a108 <_strtod_l+0xb00>)
 8019f88:	2200      	movs	r2, #0
 8019f8a:	f7e6 fb0d 	bl	80005a8 <__aeabi_dmul>
 8019f8e:	4606      	mov	r6, r0
 8019f90:	460f      	mov	r7, r1
 8019f92:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8019f96:	9606      	str	r6, [sp, #24]
 8019f98:	9307      	str	r3, [sp, #28]
 8019f9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019f9e:	4d57      	ldr	r5, [pc, #348]	@ (801a0fc <_strtod_l+0xaf4>)
 8019fa0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8019fa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019fa6:	401d      	ands	r5, r3
 8019fa8:	4b58      	ldr	r3, [pc, #352]	@ (801a10c <_strtod_l+0xb04>)
 8019faa:	429d      	cmp	r5, r3
 8019fac:	f040 80b2 	bne.w	801a114 <_strtod_l+0xb0c>
 8019fb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019fb2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8019fb6:	ec4b ab10 	vmov	d0, sl, fp
 8019fba:	f003 f86b 	bl	801d094 <__ulp>
 8019fbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019fc2:	ec51 0b10 	vmov	r0, r1, d0
 8019fc6:	f7e6 faef 	bl	80005a8 <__aeabi_dmul>
 8019fca:	4652      	mov	r2, sl
 8019fcc:	465b      	mov	r3, fp
 8019fce:	f7e6 f935 	bl	800023c <__adddf3>
 8019fd2:	460b      	mov	r3, r1
 8019fd4:	4949      	ldr	r1, [pc, #292]	@ (801a0fc <_strtod_l+0xaf4>)
 8019fd6:	4a4e      	ldr	r2, [pc, #312]	@ (801a110 <_strtod_l+0xb08>)
 8019fd8:	4019      	ands	r1, r3
 8019fda:	4291      	cmp	r1, r2
 8019fdc:	4682      	mov	sl, r0
 8019fde:	d942      	bls.n	801a066 <_strtod_l+0xa5e>
 8019fe0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019fe2:	4b47      	ldr	r3, [pc, #284]	@ (801a100 <_strtod_l+0xaf8>)
 8019fe4:	429a      	cmp	r2, r3
 8019fe6:	d103      	bne.n	8019ff0 <_strtod_l+0x9e8>
 8019fe8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019fea:	3301      	adds	r3, #1
 8019fec:	f43f ad2b 	beq.w	8019a46 <_strtod_l+0x43e>
 8019ff0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801a100 <_strtod_l+0xaf8>
 8019ff4:	f04f 3aff 	mov.w	sl, #4294967295
 8019ff8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019ffa:	9805      	ldr	r0, [sp, #20]
 8019ffc:	f002 fd16 	bl	801ca2c <_Bfree>
 801a000:	9805      	ldr	r0, [sp, #20]
 801a002:	4649      	mov	r1, r9
 801a004:	f002 fd12 	bl	801ca2c <_Bfree>
 801a008:	9805      	ldr	r0, [sp, #20]
 801a00a:	4641      	mov	r1, r8
 801a00c:	f002 fd0e 	bl	801ca2c <_Bfree>
 801a010:	9805      	ldr	r0, [sp, #20]
 801a012:	4621      	mov	r1, r4
 801a014:	f002 fd0a 	bl	801ca2c <_Bfree>
 801a018:	e618      	b.n	8019c4c <_strtod_l+0x644>
 801a01a:	f1ba 0f01 	cmp.w	sl, #1
 801a01e:	d103      	bne.n	801a028 <_strtod_l+0xa20>
 801a020:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a022:	2b00      	cmp	r3, #0
 801a024:	f43f ada5 	beq.w	8019b72 <_strtod_l+0x56a>
 801a028:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801a0d8 <_strtod_l+0xad0>
 801a02c:	4f35      	ldr	r7, [pc, #212]	@ (801a104 <_strtod_l+0xafc>)
 801a02e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a032:	2600      	movs	r6, #0
 801a034:	e7b1      	b.n	8019f9a <_strtod_l+0x992>
 801a036:	4f34      	ldr	r7, [pc, #208]	@ (801a108 <_strtod_l+0xb00>)
 801a038:	2600      	movs	r6, #0
 801a03a:	e7aa      	b.n	8019f92 <_strtod_l+0x98a>
 801a03c:	4b32      	ldr	r3, [pc, #200]	@ (801a108 <_strtod_l+0xb00>)
 801a03e:	4630      	mov	r0, r6
 801a040:	4639      	mov	r1, r7
 801a042:	2200      	movs	r2, #0
 801a044:	f7e6 fab0 	bl	80005a8 <__aeabi_dmul>
 801a048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a04a:	4606      	mov	r6, r0
 801a04c:	460f      	mov	r7, r1
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d09f      	beq.n	8019f92 <_strtod_l+0x98a>
 801a052:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801a056:	e7a0      	b.n	8019f9a <_strtod_l+0x992>
 801a058:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801a0e0 <_strtod_l+0xad8>
 801a05c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a060:	ec57 6b17 	vmov	r6, r7, d7
 801a064:	e799      	b.n	8019f9a <_strtod_l+0x992>
 801a066:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801a06a:	9b08      	ldr	r3, [sp, #32]
 801a06c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801a070:	2b00      	cmp	r3, #0
 801a072:	d1c1      	bne.n	8019ff8 <_strtod_l+0x9f0>
 801a074:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a078:	0d1b      	lsrs	r3, r3, #20
 801a07a:	051b      	lsls	r3, r3, #20
 801a07c:	429d      	cmp	r5, r3
 801a07e:	d1bb      	bne.n	8019ff8 <_strtod_l+0x9f0>
 801a080:	4630      	mov	r0, r6
 801a082:	4639      	mov	r1, r7
 801a084:	f7e6 fdf0 	bl	8000c68 <__aeabi_d2lz>
 801a088:	f7e6 fa60 	bl	800054c <__aeabi_l2d>
 801a08c:	4602      	mov	r2, r0
 801a08e:	460b      	mov	r3, r1
 801a090:	4630      	mov	r0, r6
 801a092:	4639      	mov	r1, r7
 801a094:	f7e6 f8d0 	bl	8000238 <__aeabi_dsub>
 801a098:	460b      	mov	r3, r1
 801a09a:	4602      	mov	r2, r0
 801a09c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801a0a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801a0a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a0a6:	ea46 060a 	orr.w	r6, r6, sl
 801a0aa:	431e      	orrs	r6, r3
 801a0ac:	d06f      	beq.n	801a18e <_strtod_l+0xb86>
 801a0ae:	a30e      	add	r3, pc, #56	@ (adr r3, 801a0e8 <_strtod_l+0xae0>)
 801a0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0b4:	f7e6 fcea 	bl	8000a8c <__aeabi_dcmplt>
 801a0b8:	2800      	cmp	r0, #0
 801a0ba:	f47f accf 	bne.w	8019a5c <_strtod_l+0x454>
 801a0be:	a30c      	add	r3, pc, #48	@ (adr r3, 801a0f0 <_strtod_l+0xae8>)
 801a0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a0c8:	f7e6 fcfe 	bl	8000ac8 <__aeabi_dcmpgt>
 801a0cc:	2800      	cmp	r0, #0
 801a0ce:	d093      	beq.n	8019ff8 <_strtod_l+0x9f0>
 801a0d0:	e4c4      	b.n	8019a5c <_strtod_l+0x454>
 801a0d2:	bf00      	nop
 801a0d4:	f3af 8000 	nop.w
 801a0d8:	00000000 	.word	0x00000000
 801a0dc:	bff00000 	.word	0xbff00000
 801a0e0:	00000000 	.word	0x00000000
 801a0e4:	3ff00000 	.word	0x3ff00000
 801a0e8:	94a03595 	.word	0x94a03595
 801a0ec:	3fdfffff 	.word	0x3fdfffff
 801a0f0:	35afe535 	.word	0x35afe535
 801a0f4:	3fe00000 	.word	0x3fe00000
 801a0f8:	000fffff 	.word	0x000fffff
 801a0fc:	7ff00000 	.word	0x7ff00000
 801a100:	7fefffff 	.word	0x7fefffff
 801a104:	3ff00000 	.word	0x3ff00000
 801a108:	3fe00000 	.word	0x3fe00000
 801a10c:	7fe00000 	.word	0x7fe00000
 801a110:	7c9fffff 	.word	0x7c9fffff
 801a114:	9b08      	ldr	r3, [sp, #32]
 801a116:	b323      	cbz	r3, 801a162 <_strtod_l+0xb5a>
 801a118:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801a11c:	d821      	bhi.n	801a162 <_strtod_l+0xb5a>
 801a11e:	a328      	add	r3, pc, #160	@ (adr r3, 801a1c0 <_strtod_l+0xbb8>)
 801a120:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a124:	4630      	mov	r0, r6
 801a126:	4639      	mov	r1, r7
 801a128:	f7e6 fcba 	bl	8000aa0 <__aeabi_dcmple>
 801a12c:	b1a0      	cbz	r0, 801a158 <_strtod_l+0xb50>
 801a12e:	4639      	mov	r1, r7
 801a130:	4630      	mov	r0, r6
 801a132:	f7e6 fd11 	bl	8000b58 <__aeabi_d2uiz>
 801a136:	2801      	cmp	r0, #1
 801a138:	bf38      	it	cc
 801a13a:	2001      	movcc	r0, #1
 801a13c:	f7e6 f9ba 	bl	80004b4 <__aeabi_ui2d>
 801a140:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a142:	4606      	mov	r6, r0
 801a144:	460f      	mov	r7, r1
 801a146:	b9fb      	cbnz	r3, 801a188 <_strtod_l+0xb80>
 801a148:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a14c:	9014      	str	r0, [sp, #80]	@ 0x50
 801a14e:	9315      	str	r3, [sp, #84]	@ 0x54
 801a150:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801a154:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a158:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a15a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801a15e:	1b5b      	subs	r3, r3, r5
 801a160:	9311      	str	r3, [sp, #68]	@ 0x44
 801a162:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801a166:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801a16a:	f002 ff93 	bl	801d094 <__ulp>
 801a16e:	4650      	mov	r0, sl
 801a170:	ec53 2b10 	vmov	r2, r3, d0
 801a174:	4659      	mov	r1, fp
 801a176:	f7e6 fa17 	bl	80005a8 <__aeabi_dmul>
 801a17a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801a17e:	f7e6 f85d 	bl	800023c <__adddf3>
 801a182:	4682      	mov	sl, r0
 801a184:	468b      	mov	fp, r1
 801a186:	e770      	b.n	801a06a <_strtod_l+0xa62>
 801a188:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801a18c:	e7e0      	b.n	801a150 <_strtod_l+0xb48>
 801a18e:	a30e      	add	r3, pc, #56	@ (adr r3, 801a1c8 <_strtod_l+0xbc0>)
 801a190:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a194:	f7e6 fc7a 	bl	8000a8c <__aeabi_dcmplt>
 801a198:	e798      	b.n	801a0cc <_strtod_l+0xac4>
 801a19a:	2300      	movs	r3, #0
 801a19c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a19e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a1a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a1a2:	6013      	str	r3, [r2, #0]
 801a1a4:	f7ff ba6d 	b.w	8019682 <_strtod_l+0x7a>
 801a1a8:	2a65      	cmp	r2, #101	@ 0x65
 801a1aa:	f43f ab66 	beq.w	801987a <_strtod_l+0x272>
 801a1ae:	2a45      	cmp	r2, #69	@ 0x45
 801a1b0:	f43f ab63 	beq.w	801987a <_strtod_l+0x272>
 801a1b4:	2301      	movs	r3, #1
 801a1b6:	f7ff bb9e 	b.w	80198f6 <_strtod_l+0x2ee>
 801a1ba:	bf00      	nop
 801a1bc:	f3af 8000 	nop.w
 801a1c0:	ffc00000 	.word	0xffc00000
 801a1c4:	41dfffff 	.word	0x41dfffff
 801a1c8:	94a03595 	.word	0x94a03595
 801a1cc:	3fcfffff 	.word	0x3fcfffff

0801a1d0 <_strtod_r>:
 801a1d0:	4b01      	ldr	r3, [pc, #4]	@ (801a1d8 <_strtod_r+0x8>)
 801a1d2:	f7ff ba19 	b.w	8019608 <_strtod_l>
 801a1d6:	bf00      	nop
 801a1d8:	20000154 	.word	0x20000154

0801a1dc <strtof>:
 801a1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1e0:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 801a2a0 <strtof+0xc4>
 801a1e4:	4b29      	ldr	r3, [pc, #164]	@ (801a28c <strtof+0xb0>)
 801a1e6:	460a      	mov	r2, r1
 801a1e8:	ed2d 8b02 	vpush	{d8}
 801a1ec:	4601      	mov	r1, r0
 801a1ee:	f8d8 0000 	ldr.w	r0, [r8]
 801a1f2:	f7ff fa09 	bl	8019608 <_strtod_l>
 801a1f6:	ec55 4b10 	vmov	r4, r5, d0
 801a1fa:	4622      	mov	r2, r4
 801a1fc:	462b      	mov	r3, r5
 801a1fe:	4620      	mov	r0, r4
 801a200:	4629      	mov	r1, r5
 801a202:	f7e6 fc6b 	bl	8000adc <__aeabi_dcmpun>
 801a206:	b190      	cbz	r0, 801a22e <strtof+0x52>
 801a208:	2d00      	cmp	r5, #0
 801a20a:	4821      	ldr	r0, [pc, #132]	@ (801a290 <strtof+0xb4>)
 801a20c:	da09      	bge.n	801a222 <strtof+0x46>
 801a20e:	f001 f9c7 	bl	801b5a0 <nanf>
 801a212:	eeb1 8a40 	vneg.f32	s16, s0
 801a216:	eeb0 0a48 	vmov.f32	s0, s16
 801a21a:	ecbd 8b02 	vpop	{d8}
 801a21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a222:	ecbd 8b02 	vpop	{d8}
 801a226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a22a:	f001 b9b9 	b.w	801b5a0 <nanf>
 801a22e:	4620      	mov	r0, r4
 801a230:	4629      	mov	r1, r5
 801a232:	f7e6 fcb1 	bl	8000b98 <__aeabi_d2f>
 801a236:	ee08 0a10 	vmov	s16, r0
 801a23a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 801a294 <strtof+0xb8>
 801a23e:	eeb0 7ac8 	vabs.f32	s14, s16
 801a242:	eeb4 7a67 	vcmp.f32	s14, s15
 801a246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a24a:	dd11      	ble.n	801a270 <strtof+0x94>
 801a24c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 801a250:	4b11      	ldr	r3, [pc, #68]	@ (801a298 <strtof+0xbc>)
 801a252:	f04f 32ff 	mov.w	r2, #4294967295
 801a256:	4620      	mov	r0, r4
 801a258:	4639      	mov	r1, r7
 801a25a:	f7e6 fc3f 	bl	8000adc <__aeabi_dcmpun>
 801a25e:	b980      	cbnz	r0, 801a282 <strtof+0xa6>
 801a260:	4b0d      	ldr	r3, [pc, #52]	@ (801a298 <strtof+0xbc>)
 801a262:	f04f 32ff 	mov.w	r2, #4294967295
 801a266:	4620      	mov	r0, r4
 801a268:	4639      	mov	r1, r7
 801a26a:	f7e6 fc19 	bl	8000aa0 <__aeabi_dcmple>
 801a26e:	b940      	cbnz	r0, 801a282 <strtof+0xa6>
 801a270:	ee18 3a10 	vmov	r3, s16
 801a274:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801a278:	d1cd      	bne.n	801a216 <strtof+0x3a>
 801a27a:	4b08      	ldr	r3, [pc, #32]	@ (801a29c <strtof+0xc0>)
 801a27c:	402b      	ands	r3, r5
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d0c9      	beq.n	801a216 <strtof+0x3a>
 801a282:	f8d8 3000 	ldr.w	r3, [r8]
 801a286:	2222      	movs	r2, #34	@ 0x22
 801a288:	601a      	str	r2, [r3, #0]
 801a28a:	e7c4      	b.n	801a216 <strtof+0x3a>
 801a28c:	20000154 	.word	0x20000154
 801a290:	0802206e 	.word	0x0802206e
 801a294:	7f7fffff 	.word	0x7f7fffff
 801a298:	7fefffff 	.word	0x7fefffff
 801a29c:	7ff00000 	.word	0x7ff00000
 801a2a0:	200002c0 	.word	0x200002c0

0801a2a4 <_strtol_l.constprop.0>:
 801a2a4:	2b24      	cmp	r3, #36	@ 0x24
 801a2a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2aa:	4686      	mov	lr, r0
 801a2ac:	4690      	mov	r8, r2
 801a2ae:	d801      	bhi.n	801a2b4 <_strtol_l.constprop.0+0x10>
 801a2b0:	2b01      	cmp	r3, #1
 801a2b2:	d106      	bne.n	801a2c2 <_strtol_l.constprop.0+0x1e>
 801a2b4:	f001 f928 	bl	801b508 <__errno>
 801a2b8:	2316      	movs	r3, #22
 801a2ba:	6003      	str	r3, [r0, #0]
 801a2bc:	2000      	movs	r0, #0
 801a2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2c2:	4834      	ldr	r0, [pc, #208]	@ (801a394 <_strtol_l.constprop.0+0xf0>)
 801a2c4:	460d      	mov	r5, r1
 801a2c6:	462a      	mov	r2, r5
 801a2c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a2cc:	5d06      	ldrb	r6, [r0, r4]
 801a2ce:	f016 0608 	ands.w	r6, r6, #8
 801a2d2:	d1f8      	bne.n	801a2c6 <_strtol_l.constprop.0+0x22>
 801a2d4:	2c2d      	cmp	r4, #45	@ 0x2d
 801a2d6:	d12d      	bne.n	801a334 <_strtol_l.constprop.0+0x90>
 801a2d8:	782c      	ldrb	r4, [r5, #0]
 801a2da:	2601      	movs	r6, #1
 801a2dc:	1c95      	adds	r5, r2, #2
 801a2de:	f033 0210 	bics.w	r2, r3, #16
 801a2e2:	d109      	bne.n	801a2f8 <_strtol_l.constprop.0+0x54>
 801a2e4:	2c30      	cmp	r4, #48	@ 0x30
 801a2e6:	d12a      	bne.n	801a33e <_strtol_l.constprop.0+0x9a>
 801a2e8:	782a      	ldrb	r2, [r5, #0]
 801a2ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801a2ee:	2a58      	cmp	r2, #88	@ 0x58
 801a2f0:	d125      	bne.n	801a33e <_strtol_l.constprop.0+0x9a>
 801a2f2:	786c      	ldrb	r4, [r5, #1]
 801a2f4:	2310      	movs	r3, #16
 801a2f6:	3502      	adds	r5, #2
 801a2f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801a2fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a300:	2200      	movs	r2, #0
 801a302:	fbbc f9f3 	udiv	r9, ip, r3
 801a306:	4610      	mov	r0, r2
 801a308:	fb03 ca19 	mls	sl, r3, r9, ip
 801a30c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801a310:	2f09      	cmp	r7, #9
 801a312:	d81b      	bhi.n	801a34c <_strtol_l.constprop.0+0xa8>
 801a314:	463c      	mov	r4, r7
 801a316:	42a3      	cmp	r3, r4
 801a318:	dd27      	ble.n	801a36a <_strtol_l.constprop.0+0xc6>
 801a31a:	1c57      	adds	r7, r2, #1
 801a31c:	d007      	beq.n	801a32e <_strtol_l.constprop.0+0x8a>
 801a31e:	4581      	cmp	r9, r0
 801a320:	d320      	bcc.n	801a364 <_strtol_l.constprop.0+0xc0>
 801a322:	d101      	bne.n	801a328 <_strtol_l.constprop.0+0x84>
 801a324:	45a2      	cmp	sl, r4
 801a326:	db1d      	blt.n	801a364 <_strtol_l.constprop.0+0xc0>
 801a328:	fb00 4003 	mla	r0, r0, r3, r4
 801a32c:	2201      	movs	r2, #1
 801a32e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a332:	e7eb      	b.n	801a30c <_strtol_l.constprop.0+0x68>
 801a334:	2c2b      	cmp	r4, #43	@ 0x2b
 801a336:	bf04      	itt	eq
 801a338:	782c      	ldrbeq	r4, [r5, #0]
 801a33a:	1c95      	addeq	r5, r2, #2
 801a33c:	e7cf      	b.n	801a2de <_strtol_l.constprop.0+0x3a>
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d1da      	bne.n	801a2f8 <_strtol_l.constprop.0+0x54>
 801a342:	2c30      	cmp	r4, #48	@ 0x30
 801a344:	bf0c      	ite	eq
 801a346:	2308      	moveq	r3, #8
 801a348:	230a      	movne	r3, #10
 801a34a:	e7d5      	b.n	801a2f8 <_strtol_l.constprop.0+0x54>
 801a34c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801a350:	2f19      	cmp	r7, #25
 801a352:	d801      	bhi.n	801a358 <_strtol_l.constprop.0+0xb4>
 801a354:	3c37      	subs	r4, #55	@ 0x37
 801a356:	e7de      	b.n	801a316 <_strtol_l.constprop.0+0x72>
 801a358:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801a35c:	2f19      	cmp	r7, #25
 801a35e:	d804      	bhi.n	801a36a <_strtol_l.constprop.0+0xc6>
 801a360:	3c57      	subs	r4, #87	@ 0x57
 801a362:	e7d8      	b.n	801a316 <_strtol_l.constprop.0+0x72>
 801a364:	f04f 32ff 	mov.w	r2, #4294967295
 801a368:	e7e1      	b.n	801a32e <_strtol_l.constprop.0+0x8a>
 801a36a:	1c53      	adds	r3, r2, #1
 801a36c:	d108      	bne.n	801a380 <_strtol_l.constprop.0+0xdc>
 801a36e:	2322      	movs	r3, #34	@ 0x22
 801a370:	f8ce 3000 	str.w	r3, [lr]
 801a374:	4660      	mov	r0, ip
 801a376:	f1b8 0f00 	cmp.w	r8, #0
 801a37a:	d0a0      	beq.n	801a2be <_strtol_l.constprop.0+0x1a>
 801a37c:	1e69      	subs	r1, r5, #1
 801a37e:	e006      	b.n	801a38e <_strtol_l.constprop.0+0xea>
 801a380:	b106      	cbz	r6, 801a384 <_strtol_l.constprop.0+0xe0>
 801a382:	4240      	negs	r0, r0
 801a384:	f1b8 0f00 	cmp.w	r8, #0
 801a388:	d099      	beq.n	801a2be <_strtol_l.constprop.0+0x1a>
 801a38a:	2a00      	cmp	r2, #0
 801a38c:	d1f6      	bne.n	801a37c <_strtol_l.constprop.0+0xd8>
 801a38e:	f8c8 1000 	str.w	r1, [r8]
 801a392:	e794      	b.n	801a2be <_strtol_l.constprop.0+0x1a>
 801a394:	08021e81 	.word	0x08021e81

0801a398 <_strtol_r>:
 801a398:	f7ff bf84 	b.w	801a2a4 <_strtol_l.constprop.0>

0801a39c <strtol>:
 801a39c:	4613      	mov	r3, r2
 801a39e:	460a      	mov	r2, r1
 801a3a0:	4601      	mov	r1, r0
 801a3a2:	4802      	ldr	r0, [pc, #8]	@ (801a3ac <strtol+0x10>)
 801a3a4:	6800      	ldr	r0, [r0, #0]
 801a3a6:	f7ff bf7d 	b.w	801a2a4 <_strtol_l.constprop.0>
 801a3aa:	bf00      	nop
 801a3ac:	200002c0 	.word	0x200002c0

0801a3b0 <__cvt>:
 801a3b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a3b4:	ec57 6b10 	vmov	r6, r7, d0
 801a3b8:	2f00      	cmp	r7, #0
 801a3ba:	460c      	mov	r4, r1
 801a3bc:	4619      	mov	r1, r3
 801a3be:	463b      	mov	r3, r7
 801a3c0:	bfbb      	ittet	lt
 801a3c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801a3c6:	461f      	movlt	r7, r3
 801a3c8:	2300      	movge	r3, #0
 801a3ca:	232d      	movlt	r3, #45	@ 0x2d
 801a3cc:	700b      	strb	r3, [r1, #0]
 801a3ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a3d0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801a3d4:	4691      	mov	r9, r2
 801a3d6:	f023 0820 	bic.w	r8, r3, #32
 801a3da:	bfbc      	itt	lt
 801a3dc:	4632      	movlt	r2, r6
 801a3de:	4616      	movlt	r6, r2
 801a3e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a3e4:	d005      	beq.n	801a3f2 <__cvt+0x42>
 801a3e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801a3ea:	d100      	bne.n	801a3ee <__cvt+0x3e>
 801a3ec:	3401      	adds	r4, #1
 801a3ee:	2102      	movs	r1, #2
 801a3f0:	e000      	b.n	801a3f4 <__cvt+0x44>
 801a3f2:	2103      	movs	r1, #3
 801a3f4:	ab03      	add	r3, sp, #12
 801a3f6:	9301      	str	r3, [sp, #4]
 801a3f8:	ab02      	add	r3, sp, #8
 801a3fa:	9300      	str	r3, [sp, #0]
 801a3fc:	ec47 6b10 	vmov	d0, r6, r7
 801a400:	4653      	mov	r3, sl
 801a402:	4622      	mov	r2, r4
 801a404:	f001 f978 	bl	801b6f8 <_dtoa_r>
 801a408:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801a40c:	4605      	mov	r5, r0
 801a40e:	d119      	bne.n	801a444 <__cvt+0x94>
 801a410:	f019 0f01 	tst.w	r9, #1
 801a414:	d00e      	beq.n	801a434 <__cvt+0x84>
 801a416:	eb00 0904 	add.w	r9, r0, r4
 801a41a:	2200      	movs	r2, #0
 801a41c:	2300      	movs	r3, #0
 801a41e:	4630      	mov	r0, r6
 801a420:	4639      	mov	r1, r7
 801a422:	f7e6 fb29 	bl	8000a78 <__aeabi_dcmpeq>
 801a426:	b108      	cbz	r0, 801a42c <__cvt+0x7c>
 801a428:	f8cd 900c 	str.w	r9, [sp, #12]
 801a42c:	2230      	movs	r2, #48	@ 0x30
 801a42e:	9b03      	ldr	r3, [sp, #12]
 801a430:	454b      	cmp	r3, r9
 801a432:	d31e      	bcc.n	801a472 <__cvt+0xc2>
 801a434:	9b03      	ldr	r3, [sp, #12]
 801a436:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a438:	1b5b      	subs	r3, r3, r5
 801a43a:	4628      	mov	r0, r5
 801a43c:	6013      	str	r3, [r2, #0]
 801a43e:	b004      	add	sp, #16
 801a440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a444:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a448:	eb00 0904 	add.w	r9, r0, r4
 801a44c:	d1e5      	bne.n	801a41a <__cvt+0x6a>
 801a44e:	7803      	ldrb	r3, [r0, #0]
 801a450:	2b30      	cmp	r3, #48	@ 0x30
 801a452:	d10a      	bne.n	801a46a <__cvt+0xba>
 801a454:	2200      	movs	r2, #0
 801a456:	2300      	movs	r3, #0
 801a458:	4630      	mov	r0, r6
 801a45a:	4639      	mov	r1, r7
 801a45c:	f7e6 fb0c 	bl	8000a78 <__aeabi_dcmpeq>
 801a460:	b918      	cbnz	r0, 801a46a <__cvt+0xba>
 801a462:	f1c4 0401 	rsb	r4, r4, #1
 801a466:	f8ca 4000 	str.w	r4, [sl]
 801a46a:	f8da 3000 	ldr.w	r3, [sl]
 801a46e:	4499      	add	r9, r3
 801a470:	e7d3      	b.n	801a41a <__cvt+0x6a>
 801a472:	1c59      	adds	r1, r3, #1
 801a474:	9103      	str	r1, [sp, #12]
 801a476:	701a      	strb	r2, [r3, #0]
 801a478:	e7d9      	b.n	801a42e <__cvt+0x7e>

0801a47a <__exponent>:
 801a47a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a47c:	2900      	cmp	r1, #0
 801a47e:	bfba      	itte	lt
 801a480:	4249      	neglt	r1, r1
 801a482:	232d      	movlt	r3, #45	@ 0x2d
 801a484:	232b      	movge	r3, #43	@ 0x2b
 801a486:	2909      	cmp	r1, #9
 801a488:	7002      	strb	r2, [r0, #0]
 801a48a:	7043      	strb	r3, [r0, #1]
 801a48c:	dd29      	ble.n	801a4e2 <__exponent+0x68>
 801a48e:	f10d 0307 	add.w	r3, sp, #7
 801a492:	461d      	mov	r5, r3
 801a494:	270a      	movs	r7, #10
 801a496:	461a      	mov	r2, r3
 801a498:	fbb1 f6f7 	udiv	r6, r1, r7
 801a49c:	fb07 1416 	mls	r4, r7, r6, r1
 801a4a0:	3430      	adds	r4, #48	@ 0x30
 801a4a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 801a4a6:	460c      	mov	r4, r1
 801a4a8:	2c63      	cmp	r4, #99	@ 0x63
 801a4aa:	f103 33ff 	add.w	r3, r3, #4294967295
 801a4ae:	4631      	mov	r1, r6
 801a4b0:	dcf1      	bgt.n	801a496 <__exponent+0x1c>
 801a4b2:	3130      	adds	r1, #48	@ 0x30
 801a4b4:	1e94      	subs	r4, r2, #2
 801a4b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a4ba:	1c41      	adds	r1, r0, #1
 801a4bc:	4623      	mov	r3, r4
 801a4be:	42ab      	cmp	r3, r5
 801a4c0:	d30a      	bcc.n	801a4d8 <__exponent+0x5e>
 801a4c2:	f10d 0309 	add.w	r3, sp, #9
 801a4c6:	1a9b      	subs	r3, r3, r2
 801a4c8:	42ac      	cmp	r4, r5
 801a4ca:	bf88      	it	hi
 801a4cc:	2300      	movhi	r3, #0
 801a4ce:	3302      	adds	r3, #2
 801a4d0:	4403      	add	r3, r0
 801a4d2:	1a18      	subs	r0, r3, r0
 801a4d4:	b003      	add	sp, #12
 801a4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a4dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 801a4e0:	e7ed      	b.n	801a4be <__exponent+0x44>
 801a4e2:	2330      	movs	r3, #48	@ 0x30
 801a4e4:	3130      	adds	r1, #48	@ 0x30
 801a4e6:	7083      	strb	r3, [r0, #2]
 801a4e8:	70c1      	strb	r1, [r0, #3]
 801a4ea:	1d03      	adds	r3, r0, #4
 801a4ec:	e7f1      	b.n	801a4d2 <__exponent+0x58>
	...

0801a4f0 <_printf_float>:
 801a4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4f4:	b08d      	sub	sp, #52	@ 0x34
 801a4f6:	460c      	mov	r4, r1
 801a4f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a4fc:	4616      	mov	r6, r2
 801a4fe:	461f      	mov	r7, r3
 801a500:	4605      	mov	r5, r0
 801a502:	f000 ffa7 	bl	801b454 <_localeconv_r>
 801a506:	6803      	ldr	r3, [r0, #0]
 801a508:	9304      	str	r3, [sp, #16]
 801a50a:	4618      	mov	r0, r3
 801a50c:	f7e5 fe88 	bl	8000220 <strlen>
 801a510:	2300      	movs	r3, #0
 801a512:	930a      	str	r3, [sp, #40]	@ 0x28
 801a514:	f8d8 3000 	ldr.w	r3, [r8]
 801a518:	9005      	str	r0, [sp, #20]
 801a51a:	3307      	adds	r3, #7
 801a51c:	f023 0307 	bic.w	r3, r3, #7
 801a520:	f103 0208 	add.w	r2, r3, #8
 801a524:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a528:	f8d4 b000 	ldr.w	fp, [r4]
 801a52c:	f8c8 2000 	str.w	r2, [r8]
 801a530:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a534:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801a538:	9307      	str	r3, [sp, #28]
 801a53a:	f8cd 8018 	str.w	r8, [sp, #24]
 801a53e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801a542:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a546:	4b9c      	ldr	r3, [pc, #624]	@ (801a7b8 <_printf_float+0x2c8>)
 801a548:	f04f 32ff 	mov.w	r2, #4294967295
 801a54c:	f7e6 fac6 	bl	8000adc <__aeabi_dcmpun>
 801a550:	bb70      	cbnz	r0, 801a5b0 <_printf_float+0xc0>
 801a552:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a556:	4b98      	ldr	r3, [pc, #608]	@ (801a7b8 <_printf_float+0x2c8>)
 801a558:	f04f 32ff 	mov.w	r2, #4294967295
 801a55c:	f7e6 faa0 	bl	8000aa0 <__aeabi_dcmple>
 801a560:	bb30      	cbnz	r0, 801a5b0 <_printf_float+0xc0>
 801a562:	2200      	movs	r2, #0
 801a564:	2300      	movs	r3, #0
 801a566:	4640      	mov	r0, r8
 801a568:	4649      	mov	r1, r9
 801a56a:	f7e6 fa8f 	bl	8000a8c <__aeabi_dcmplt>
 801a56e:	b110      	cbz	r0, 801a576 <_printf_float+0x86>
 801a570:	232d      	movs	r3, #45	@ 0x2d
 801a572:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a576:	4a91      	ldr	r2, [pc, #580]	@ (801a7bc <_printf_float+0x2cc>)
 801a578:	4b91      	ldr	r3, [pc, #580]	@ (801a7c0 <_printf_float+0x2d0>)
 801a57a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a57e:	bf94      	ite	ls
 801a580:	4690      	movls	r8, r2
 801a582:	4698      	movhi	r8, r3
 801a584:	2303      	movs	r3, #3
 801a586:	6123      	str	r3, [r4, #16]
 801a588:	f02b 0304 	bic.w	r3, fp, #4
 801a58c:	6023      	str	r3, [r4, #0]
 801a58e:	f04f 0900 	mov.w	r9, #0
 801a592:	9700      	str	r7, [sp, #0]
 801a594:	4633      	mov	r3, r6
 801a596:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a598:	4621      	mov	r1, r4
 801a59a:	4628      	mov	r0, r5
 801a59c:	f000 f9d2 	bl	801a944 <_printf_common>
 801a5a0:	3001      	adds	r0, #1
 801a5a2:	f040 808d 	bne.w	801a6c0 <_printf_float+0x1d0>
 801a5a6:	f04f 30ff 	mov.w	r0, #4294967295
 801a5aa:	b00d      	add	sp, #52	@ 0x34
 801a5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5b0:	4642      	mov	r2, r8
 801a5b2:	464b      	mov	r3, r9
 801a5b4:	4640      	mov	r0, r8
 801a5b6:	4649      	mov	r1, r9
 801a5b8:	f7e6 fa90 	bl	8000adc <__aeabi_dcmpun>
 801a5bc:	b140      	cbz	r0, 801a5d0 <_printf_float+0xe0>
 801a5be:	464b      	mov	r3, r9
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	bfbc      	itt	lt
 801a5c4:	232d      	movlt	r3, #45	@ 0x2d
 801a5c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a5ca:	4a7e      	ldr	r2, [pc, #504]	@ (801a7c4 <_printf_float+0x2d4>)
 801a5cc:	4b7e      	ldr	r3, [pc, #504]	@ (801a7c8 <_printf_float+0x2d8>)
 801a5ce:	e7d4      	b.n	801a57a <_printf_float+0x8a>
 801a5d0:	6863      	ldr	r3, [r4, #4]
 801a5d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801a5d6:	9206      	str	r2, [sp, #24]
 801a5d8:	1c5a      	adds	r2, r3, #1
 801a5da:	d13b      	bne.n	801a654 <_printf_float+0x164>
 801a5dc:	2306      	movs	r3, #6
 801a5de:	6063      	str	r3, [r4, #4]
 801a5e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801a5e4:	2300      	movs	r3, #0
 801a5e6:	6022      	str	r2, [r4, #0]
 801a5e8:	9303      	str	r3, [sp, #12]
 801a5ea:	ab0a      	add	r3, sp, #40	@ 0x28
 801a5ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a5f0:	ab09      	add	r3, sp, #36	@ 0x24
 801a5f2:	9300      	str	r3, [sp, #0]
 801a5f4:	6861      	ldr	r1, [r4, #4]
 801a5f6:	ec49 8b10 	vmov	d0, r8, r9
 801a5fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a5fe:	4628      	mov	r0, r5
 801a600:	f7ff fed6 	bl	801a3b0 <__cvt>
 801a604:	9b06      	ldr	r3, [sp, #24]
 801a606:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a608:	2b47      	cmp	r3, #71	@ 0x47
 801a60a:	4680      	mov	r8, r0
 801a60c:	d129      	bne.n	801a662 <_printf_float+0x172>
 801a60e:	1cc8      	adds	r0, r1, #3
 801a610:	db02      	blt.n	801a618 <_printf_float+0x128>
 801a612:	6863      	ldr	r3, [r4, #4]
 801a614:	4299      	cmp	r1, r3
 801a616:	dd41      	ble.n	801a69c <_printf_float+0x1ac>
 801a618:	f1aa 0a02 	sub.w	sl, sl, #2
 801a61c:	fa5f fa8a 	uxtb.w	sl, sl
 801a620:	3901      	subs	r1, #1
 801a622:	4652      	mov	r2, sl
 801a624:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a628:	9109      	str	r1, [sp, #36]	@ 0x24
 801a62a:	f7ff ff26 	bl	801a47a <__exponent>
 801a62e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a630:	1813      	adds	r3, r2, r0
 801a632:	2a01      	cmp	r2, #1
 801a634:	4681      	mov	r9, r0
 801a636:	6123      	str	r3, [r4, #16]
 801a638:	dc02      	bgt.n	801a640 <_printf_float+0x150>
 801a63a:	6822      	ldr	r2, [r4, #0]
 801a63c:	07d2      	lsls	r2, r2, #31
 801a63e:	d501      	bpl.n	801a644 <_printf_float+0x154>
 801a640:	3301      	adds	r3, #1
 801a642:	6123      	str	r3, [r4, #16]
 801a644:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d0a2      	beq.n	801a592 <_printf_float+0xa2>
 801a64c:	232d      	movs	r3, #45	@ 0x2d
 801a64e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a652:	e79e      	b.n	801a592 <_printf_float+0xa2>
 801a654:	9a06      	ldr	r2, [sp, #24]
 801a656:	2a47      	cmp	r2, #71	@ 0x47
 801a658:	d1c2      	bne.n	801a5e0 <_printf_float+0xf0>
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	d1c0      	bne.n	801a5e0 <_printf_float+0xf0>
 801a65e:	2301      	movs	r3, #1
 801a660:	e7bd      	b.n	801a5de <_printf_float+0xee>
 801a662:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a666:	d9db      	bls.n	801a620 <_printf_float+0x130>
 801a668:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801a66c:	d118      	bne.n	801a6a0 <_printf_float+0x1b0>
 801a66e:	2900      	cmp	r1, #0
 801a670:	6863      	ldr	r3, [r4, #4]
 801a672:	dd0b      	ble.n	801a68c <_printf_float+0x19c>
 801a674:	6121      	str	r1, [r4, #16]
 801a676:	b913      	cbnz	r3, 801a67e <_printf_float+0x18e>
 801a678:	6822      	ldr	r2, [r4, #0]
 801a67a:	07d0      	lsls	r0, r2, #31
 801a67c:	d502      	bpl.n	801a684 <_printf_float+0x194>
 801a67e:	3301      	adds	r3, #1
 801a680:	440b      	add	r3, r1
 801a682:	6123      	str	r3, [r4, #16]
 801a684:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a686:	f04f 0900 	mov.w	r9, #0
 801a68a:	e7db      	b.n	801a644 <_printf_float+0x154>
 801a68c:	b913      	cbnz	r3, 801a694 <_printf_float+0x1a4>
 801a68e:	6822      	ldr	r2, [r4, #0]
 801a690:	07d2      	lsls	r2, r2, #31
 801a692:	d501      	bpl.n	801a698 <_printf_float+0x1a8>
 801a694:	3302      	adds	r3, #2
 801a696:	e7f4      	b.n	801a682 <_printf_float+0x192>
 801a698:	2301      	movs	r3, #1
 801a69a:	e7f2      	b.n	801a682 <_printf_float+0x192>
 801a69c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801a6a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a6a2:	4299      	cmp	r1, r3
 801a6a4:	db05      	blt.n	801a6b2 <_printf_float+0x1c2>
 801a6a6:	6823      	ldr	r3, [r4, #0]
 801a6a8:	6121      	str	r1, [r4, #16]
 801a6aa:	07d8      	lsls	r0, r3, #31
 801a6ac:	d5ea      	bpl.n	801a684 <_printf_float+0x194>
 801a6ae:	1c4b      	adds	r3, r1, #1
 801a6b0:	e7e7      	b.n	801a682 <_printf_float+0x192>
 801a6b2:	2900      	cmp	r1, #0
 801a6b4:	bfd4      	ite	le
 801a6b6:	f1c1 0202 	rsble	r2, r1, #2
 801a6ba:	2201      	movgt	r2, #1
 801a6bc:	4413      	add	r3, r2
 801a6be:	e7e0      	b.n	801a682 <_printf_float+0x192>
 801a6c0:	6823      	ldr	r3, [r4, #0]
 801a6c2:	055a      	lsls	r2, r3, #21
 801a6c4:	d407      	bmi.n	801a6d6 <_printf_float+0x1e6>
 801a6c6:	6923      	ldr	r3, [r4, #16]
 801a6c8:	4642      	mov	r2, r8
 801a6ca:	4631      	mov	r1, r6
 801a6cc:	4628      	mov	r0, r5
 801a6ce:	47b8      	blx	r7
 801a6d0:	3001      	adds	r0, #1
 801a6d2:	d12b      	bne.n	801a72c <_printf_float+0x23c>
 801a6d4:	e767      	b.n	801a5a6 <_printf_float+0xb6>
 801a6d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a6da:	f240 80dd 	bls.w	801a898 <_printf_float+0x3a8>
 801a6de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a6e2:	2200      	movs	r2, #0
 801a6e4:	2300      	movs	r3, #0
 801a6e6:	f7e6 f9c7 	bl	8000a78 <__aeabi_dcmpeq>
 801a6ea:	2800      	cmp	r0, #0
 801a6ec:	d033      	beq.n	801a756 <_printf_float+0x266>
 801a6ee:	4a37      	ldr	r2, [pc, #220]	@ (801a7cc <_printf_float+0x2dc>)
 801a6f0:	2301      	movs	r3, #1
 801a6f2:	4631      	mov	r1, r6
 801a6f4:	4628      	mov	r0, r5
 801a6f6:	47b8      	blx	r7
 801a6f8:	3001      	adds	r0, #1
 801a6fa:	f43f af54 	beq.w	801a5a6 <_printf_float+0xb6>
 801a6fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a702:	4543      	cmp	r3, r8
 801a704:	db02      	blt.n	801a70c <_printf_float+0x21c>
 801a706:	6823      	ldr	r3, [r4, #0]
 801a708:	07d8      	lsls	r0, r3, #31
 801a70a:	d50f      	bpl.n	801a72c <_printf_float+0x23c>
 801a70c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a710:	4631      	mov	r1, r6
 801a712:	4628      	mov	r0, r5
 801a714:	47b8      	blx	r7
 801a716:	3001      	adds	r0, #1
 801a718:	f43f af45 	beq.w	801a5a6 <_printf_float+0xb6>
 801a71c:	f04f 0900 	mov.w	r9, #0
 801a720:	f108 38ff 	add.w	r8, r8, #4294967295
 801a724:	f104 0a1a 	add.w	sl, r4, #26
 801a728:	45c8      	cmp	r8, r9
 801a72a:	dc09      	bgt.n	801a740 <_printf_float+0x250>
 801a72c:	6823      	ldr	r3, [r4, #0]
 801a72e:	079b      	lsls	r3, r3, #30
 801a730:	f100 8103 	bmi.w	801a93a <_printf_float+0x44a>
 801a734:	68e0      	ldr	r0, [r4, #12]
 801a736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a738:	4298      	cmp	r0, r3
 801a73a:	bfb8      	it	lt
 801a73c:	4618      	movlt	r0, r3
 801a73e:	e734      	b.n	801a5aa <_printf_float+0xba>
 801a740:	2301      	movs	r3, #1
 801a742:	4652      	mov	r2, sl
 801a744:	4631      	mov	r1, r6
 801a746:	4628      	mov	r0, r5
 801a748:	47b8      	blx	r7
 801a74a:	3001      	adds	r0, #1
 801a74c:	f43f af2b 	beq.w	801a5a6 <_printf_float+0xb6>
 801a750:	f109 0901 	add.w	r9, r9, #1
 801a754:	e7e8      	b.n	801a728 <_printf_float+0x238>
 801a756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a758:	2b00      	cmp	r3, #0
 801a75a:	dc39      	bgt.n	801a7d0 <_printf_float+0x2e0>
 801a75c:	4a1b      	ldr	r2, [pc, #108]	@ (801a7cc <_printf_float+0x2dc>)
 801a75e:	2301      	movs	r3, #1
 801a760:	4631      	mov	r1, r6
 801a762:	4628      	mov	r0, r5
 801a764:	47b8      	blx	r7
 801a766:	3001      	adds	r0, #1
 801a768:	f43f af1d 	beq.w	801a5a6 <_printf_float+0xb6>
 801a76c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801a770:	ea59 0303 	orrs.w	r3, r9, r3
 801a774:	d102      	bne.n	801a77c <_printf_float+0x28c>
 801a776:	6823      	ldr	r3, [r4, #0]
 801a778:	07d9      	lsls	r1, r3, #31
 801a77a:	d5d7      	bpl.n	801a72c <_printf_float+0x23c>
 801a77c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a780:	4631      	mov	r1, r6
 801a782:	4628      	mov	r0, r5
 801a784:	47b8      	blx	r7
 801a786:	3001      	adds	r0, #1
 801a788:	f43f af0d 	beq.w	801a5a6 <_printf_float+0xb6>
 801a78c:	f04f 0a00 	mov.w	sl, #0
 801a790:	f104 0b1a 	add.w	fp, r4, #26
 801a794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a796:	425b      	negs	r3, r3
 801a798:	4553      	cmp	r3, sl
 801a79a:	dc01      	bgt.n	801a7a0 <_printf_float+0x2b0>
 801a79c:	464b      	mov	r3, r9
 801a79e:	e793      	b.n	801a6c8 <_printf_float+0x1d8>
 801a7a0:	2301      	movs	r3, #1
 801a7a2:	465a      	mov	r2, fp
 801a7a4:	4631      	mov	r1, r6
 801a7a6:	4628      	mov	r0, r5
 801a7a8:	47b8      	blx	r7
 801a7aa:	3001      	adds	r0, #1
 801a7ac:	f43f aefb 	beq.w	801a5a6 <_printf_float+0xb6>
 801a7b0:	f10a 0a01 	add.w	sl, sl, #1
 801a7b4:	e7ee      	b.n	801a794 <_printf_float+0x2a4>
 801a7b6:	bf00      	nop
 801a7b8:	7fefffff 	.word	0x7fefffff
 801a7bc:	08021f81 	.word	0x08021f81
 801a7c0:	08021f85 	.word	0x08021f85
 801a7c4:	08021f89 	.word	0x08021f89
 801a7c8:	08021f8d 	.word	0x08021f8d
 801a7cc:	08021f91 	.word	0x08021f91
 801a7d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a7d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a7d6:	4553      	cmp	r3, sl
 801a7d8:	bfa8      	it	ge
 801a7da:	4653      	movge	r3, sl
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	4699      	mov	r9, r3
 801a7e0:	dc36      	bgt.n	801a850 <_printf_float+0x360>
 801a7e2:	f04f 0b00 	mov.w	fp, #0
 801a7e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a7ea:	f104 021a 	add.w	r2, r4, #26
 801a7ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a7f0:	9306      	str	r3, [sp, #24]
 801a7f2:	eba3 0309 	sub.w	r3, r3, r9
 801a7f6:	455b      	cmp	r3, fp
 801a7f8:	dc31      	bgt.n	801a85e <_printf_float+0x36e>
 801a7fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a7fc:	459a      	cmp	sl, r3
 801a7fe:	dc3a      	bgt.n	801a876 <_printf_float+0x386>
 801a800:	6823      	ldr	r3, [r4, #0]
 801a802:	07da      	lsls	r2, r3, #31
 801a804:	d437      	bmi.n	801a876 <_printf_float+0x386>
 801a806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a808:	ebaa 0903 	sub.w	r9, sl, r3
 801a80c:	9b06      	ldr	r3, [sp, #24]
 801a80e:	ebaa 0303 	sub.w	r3, sl, r3
 801a812:	4599      	cmp	r9, r3
 801a814:	bfa8      	it	ge
 801a816:	4699      	movge	r9, r3
 801a818:	f1b9 0f00 	cmp.w	r9, #0
 801a81c:	dc33      	bgt.n	801a886 <_printf_float+0x396>
 801a81e:	f04f 0800 	mov.w	r8, #0
 801a822:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a826:	f104 0b1a 	add.w	fp, r4, #26
 801a82a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a82c:	ebaa 0303 	sub.w	r3, sl, r3
 801a830:	eba3 0309 	sub.w	r3, r3, r9
 801a834:	4543      	cmp	r3, r8
 801a836:	f77f af79 	ble.w	801a72c <_printf_float+0x23c>
 801a83a:	2301      	movs	r3, #1
 801a83c:	465a      	mov	r2, fp
 801a83e:	4631      	mov	r1, r6
 801a840:	4628      	mov	r0, r5
 801a842:	47b8      	blx	r7
 801a844:	3001      	adds	r0, #1
 801a846:	f43f aeae 	beq.w	801a5a6 <_printf_float+0xb6>
 801a84a:	f108 0801 	add.w	r8, r8, #1
 801a84e:	e7ec      	b.n	801a82a <_printf_float+0x33a>
 801a850:	4642      	mov	r2, r8
 801a852:	4631      	mov	r1, r6
 801a854:	4628      	mov	r0, r5
 801a856:	47b8      	blx	r7
 801a858:	3001      	adds	r0, #1
 801a85a:	d1c2      	bne.n	801a7e2 <_printf_float+0x2f2>
 801a85c:	e6a3      	b.n	801a5a6 <_printf_float+0xb6>
 801a85e:	2301      	movs	r3, #1
 801a860:	4631      	mov	r1, r6
 801a862:	4628      	mov	r0, r5
 801a864:	9206      	str	r2, [sp, #24]
 801a866:	47b8      	blx	r7
 801a868:	3001      	adds	r0, #1
 801a86a:	f43f ae9c 	beq.w	801a5a6 <_printf_float+0xb6>
 801a86e:	9a06      	ldr	r2, [sp, #24]
 801a870:	f10b 0b01 	add.w	fp, fp, #1
 801a874:	e7bb      	b.n	801a7ee <_printf_float+0x2fe>
 801a876:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a87a:	4631      	mov	r1, r6
 801a87c:	4628      	mov	r0, r5
 801a87e:	47b8      	blx	r7
 801a880:	3001      	adds	r0, #1
 801a882:	d1c0      	bne.n	801a806 <_printf_float+0x316>
 801a884:	e68f      	b.n	801a5a6 <_printf_float+0xb6>
 801a886:	9a06      	ldr	r2, [sp, #24]
 801a888:	464b      	mov	r3, r9
 801a88a:	4442      	add	r2, r8
 801a88c:	4631      	mov	r1, r6
 801a88e:	4628      	mov	r0, r5
 801a890:	47b8      	blx	r7
 801a892:	3001      	adds	r0, #1
 801a894:	d1c3      	bne.n	801a81e <_printf_float+0x32e>
 801a896:	e686      	b.n	801a5a6 <_printf_float+0xb6>
 801a898:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a89c:	f1ba 0f01 	cmp.w	sl, #1
 801a8a0:	dc01      	bgt.n	801a8a6 <_printf_float+0x3b6>
 801a8a2:	07db      	lsls	r3, r3, #31
 801a8a4:	d536      	bpl.n	801a914 <_printf_float+0x424>
 801a8a6:	2301      	movs	r3, #1
 801a8a8:	4642      	mov	r2, r8
 801a8aa:	4631      	mov	r1, r6
 801a8ac:	4628      	mov	r0, r5
 801a8ae:	47b8      	blx	r7
 801a8b0:	3001      	adds	r0, #1
 801a8b2:	f43f ae78 	beq.w	801a5a6 <_printf_float+0xb6>
 801a8b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a8ba:	4631      	mov	r1, r6
 801a8bc:	4628      	mov	r0, r5
 801a8be:	47b8      	blx	r7
 801a8c0:	3001      	adds	r0, #1
 801a8c2:	f43f ae70 	beq.w	801a5a6 <_printf_float+0xb6>
 801a8c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a8ca:	2200      	movs	r2, #0
 801a8cc:	2300      	movs	r3, #0
 801a8ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a8d2:	f7e6 f8d1 	bl	8000a78 <__aeabi_dcmpeq>
 801a8d6:	b9c0      	cbnz	r0, 801a90a <_printf_float+0x41a>
 801a8d8:	4653      	mov	r3, sl
 801a8da:	f108 0201 	add.w	r2, r8, #1
 801a8de:	4631      	mov	r1, r6
 801a8e0:	4628      	mov	r0, r5
 801a8e2:	47b8      	blx	r7
 801a8e4:	3001      	adds	r0, #1
 801a8e6:	d10c      	bne.n	801a902 <_printf_float+0x412>
 801a8e8:	e65d      	b.n	801a5a6 <_printf_float+0xb6>
 801a8ea:	2301      	movs	r3, #1
 801a8ec:	465a      	mov	r2, fp
 801a8ee:	4631      	mov	r1, r6
 801a8f0:	4628      	mov	r0, r5
 801a8f2:	47b8      	blx	r7
 801a8f4:	3001      	adds	r0, #1
 801a8f6:	f43f ae56 	beq.w	801a5a6 <_printf_float+0xb6>
 801a8fa:	f108 0801 	add.w	r8, r8, #1
 801a8fe:	45d0      	cmp	r8, sl
 801a900:	dbf3      	blt.n	801a8ea <_printf_float+0x3fa>
 801a902:	464b      	mov	r3, r9
 801a904:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801a908:	e6df      	b.n	801a6ca <_printf_float+0x1da>
 801a90a:	f04f 0800 	mov.w	r8, #0
 801a90e:	f104 0b1a 	add.w	fp, r4, #26
 801a912:	e7f4      	b.n	801a8fe <_printf_float+0x40e>
 801a914:	2301      	movs	r3, #1
 801a916:	4642      	mov	r2, r8
 801a918:	e7e1      	b.n	801a8de <_printf_float+0x3ee>
 801a91a:	2301      	movs	r3, #1
 801a91c:	464a      	mov	r2, r9
 801a91e:	4631      	mov	r1, r6
 801a920:	4628      	mov	r0, r5
 801a922:	47b8      	blx	r7
 801a924:	3001      	adds	r0, #1
 801a926:	f43f ae3e 	beq.w	801a5a6 <_printf_float+0xb6>
 801a92a:	f108 0801 	add.w	r8, r8, #1
 801a92e:	68e3      	ldr	r3, [r4, #12]
 801a930:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a932:	1a5b      	subs	r3, r3, r1
 801a934:	4543      	cmp	r3, r8
 801a936:	dcf0      	bgt.n	801a91a <_printf_float+0x42a>
 801a938:	e6fc      	b.n	801a734 <_printf_float+0x244>
 801a93a:	f04f 0800 	mov.w	r8, #0
 801a93e:	f104 0919 	add.w	r9, r4, #25
 801a942:	e7f4      	b.n	801a92e <_printf_float+0x43e>

0801a944 <_printf_common>:
 801a944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a948:	4616      	mov	r6, r2
 801a94a:	4698      	mov	r8, r3
 801a94c:	688a      	ldr	r2, [r1, #8]
 801a94e:	690b      	ldr	r3, [r1, #16]
 801a950:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a954:	4293      	cmp	r3, r2
 801a956:	bfb8      	it	lt
 801a958:	4613      	movlt	r3, r2
 801a95a:	6033      	str	r3, [r6, #0]
 801a95c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a960:	4607      	mov	r7, r0
 801a962:	460c      	mov	r4, r1
 801a964:	b10a      	cbz	r2, 801a96a <_printf_common+0x26>
 801a966:	3301      	adds	r3, #1
 801a968:	6033      	str	r3, [r6, #0]
 801a96a:	6823      	ldr	r3, [r4, #0]
 801a96c:	0699      	lsls	r1, r3, #26
 801a96e:	bf42      	ittt	mi
 801a970:	6833      	ldrmi	r3, [r6, #0]
 801a972:	3302      	addmi	r3, #2
 801a974:	6033      	strmi	r3, [r6, #0]
 801a976:	6825      	ldr	r5, [r4, #0]
 801a978:	f015 0506 	ands.w	r5, r5, #6
 801a97c:	d106      	bne.n	801a98c <_printf_common+0x48>
 801a97e:	f104 0a19 	add.w	sl, r4, #25
 801a982:	68e3      	ldr	r3, [r4, #12]
 801a984:	6832      	ldr	r2, [r6, #0]
 801a986:	1a9b      	subs	r3, r3, r2
 801a988:	42ab      	cmp	r3, r5
 801a98a:	dc26      	bgt.n	801a9da <_printf_common+0x96>
 801a98c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a990:	6822      	ldr	r2, [r4, #0]
 801a992:	3b00      	subs	r3, #0
 801a994:	bf18      	it	ne
 801a996:	2301      	movne	r3, #1
 801a998:	0692      	lsls	r2, r2, #26
 801a99a:	d42b      	bmi.n	801a9f4 <_printf_common+0xb0>
 801a99c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a9a0:	4641      	mov	r1, r8
 801a9a2:	4638      	mov	r0, r7
 801a9a4:	47c8      	blx	r9
 801a9a6:	3001      	adds	r0, #1
 801a9a8:	d01e      	beq.n	801a9e8 <_printf_common+0xa4>
 801a9aa:	6823      	ldr	r3, [r4, #0]
 801a9ac:	6922      	ldr	r2, [r4, #16]
 801a9ae:	f003 0306 	and.w	r3, r3, #6
 801a9b2:	2b04      	cmp	r3, #4
 801a9b4:	bf02      	ittt	eq
 801a9b6:	68e5      	ldreq	r5, [r4, #12]
 801a9b8:	6833      	ldreq	r3, [r6, #0]
 801a9ba:	1aed      	subeq	r5, r5, r3
 801a9bc:	68a3      	ldr	r3, [r4, #8]
 801a9be:	bf0c      	ite	eq
 801a9c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a9c4:	2500      	movne	r5, #0
 801a9c6:	4293      	cmp	r3, r2
 801a9c8:	bfc4      	itt	gt
 801a9ca:	1a9b      	subgt	r3, r3, r2
 801a9cc:	18ed      	addgt	r5, r5, r3
 801a9ce:	2600      	movs	r6, #0
 801a9d0:	341a      	adds	r4, #26
 801a9d2:	42b5      	cmp	r5, r6
 801a9d4:	d11a      	bne.n	801aa0c <_printf_common+0xc8>
 801a9d6:	2000      	movs	r0, #0
 801a9d8:	e008      	b.n	801a9ec <_printf_common+0xa8>
 801a9da:	2301      	movs	r3, #1
 801a9dc:	4652      	mov	r2, sl
 801a9de:	4641      	mov	r1, r8
 801a9e0:	4638      	mov	r0, r7
 801a9e2:	47c8      	blx	r9
 801a9e4:	3001      	adds	r0, #1
 801a9e6:	d103      	bne.n	801a9f0 <_printf_common+0xac>
 801a9e8:	f04f 30ff 	mov.w	r0, #4294967295
 801a9ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9f0:	3501      	adds	r5, #1
 801a9f2:	e7c6      	b.n	801a982 <_printf_common+0x3e>
 801a9f4:	18e1      	adds	r1, r4, r3
 801a9f6:	1c5a      	adds	r2, r3, #1
 801a9f8:	2030      	movs	r0, #48	@ 0x30
 801a9fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a9fe:	4422      	add	r2, r4
 801aa00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801aa04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801aa08:	3302      	adds	r3, #2
 801aa0a:	e7c7      	b.n	801a99c <_printf_common+0x58>
 801aa0c:	2301      	movs	r3, #1
 801aa0e:	4622      	mov	r2, r4
 801aa10:	4641      	mov	r1, r8
 801aa12:	4638      	mov	r0, r7
 801aa14:	47c8      	blx	r9
 801aa16:	3001      	adds	r0, #1
 801aa18:	d0e6      	beq.n	801a9e8 <_printf_common+0xa4>
 801aa1a:	3601      	adds	r6, #1
 801aa1c:	e7d9      	b.n	801a9d2 <_printf_common+0x8e>
	...

0801aa20 <_printf_i>:
 801aa20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aa24:	7e0f      	ldrb	r7, [r1, #24]
 801aa26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801aa28:	2f78      	cmp	r7, #120	@ 0x78
 801aa2a:	4691      	mov	r9, r2
 801aa2c:	4680      	mov	r8, r0
 801aa2e:	460c      	mov	r4, r1
 801aa30:	469a      	mov	sl, r3
 801aa32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801aa36:	d807      	bhi.n	801aa48 <_printf_i+0x28>
 801aa38:	2f62      	cmp	r7, #98	@ 0x62
 801aa3a:	d80a      	bhi.n	801aa52 <_printf_i+0x32>
 801aa3c:	2f00      	cmp	r7, #0
 801aa3e:	f000 80d2 	beq.w	801abe6 <_printf_i+0x1c6>
 801aa42:	2f58      	cmp	r7, #88	@ 0x58
 801aa44:	f000 80b9 	beq.w	801abba <_printf_i+0x19a>
 801aa48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801aa4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801aa50:	e03a      	b.n	801aac8 <_printf_i+0xa8>
 801aa52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801aa56:	2b15      	cmp	r3, #21
 801aa58:	d8f6      	bhi.n	801aa48 <_printf_i+0x28>
 801aa5a:	a101      	add	r1, pc, #4	@ (adr r1, 801aa60 <_printf_i+0x40>)
 801aa5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aa60:	0801aab9 	.word	0x0801aab9
 801aa64:	0801aacd 	.word	0x0801aacd
 801aa68:	0801aa49 	.word	0x0801aa49
 801aa6c:	0801aa49 	.word	0x0801aa49
 801aa70:	0801aa49 	.word	0x0801aa49
 801aa74:	0801aa49 	.word	0x0801aa49
 801aa78:	0801aacd 	.word	0x0801aacd
 801aa7c:	0801aa49 	.word	0x0801aa49
 801aa80:	0801aa49 	.word	0x0801aa49
 801aa84:	0801aa49 	.word	0x0801aa49
 801aa88:	0801aa49 	.word	0x0801aa49
 801aa8c:	0801abcd 	.word	0x0801abcd
 801aa90:	0801aaf7 	.word	0x0801aaf7
 801aa94:	0801ab87 	.word	0x0801ab87
 801aa98:	0801aa49 	.word	0x0801aa49
 801aa9c:	0801aa49 	.word	0x0801aa49
 801aaa0:	0801abef 	.word	0x0801abef
 801aaa4:	0801aa49 	.word	0x0801aa49
 801aaa8:	0801aaf7 	.word	0x0801aaf7
 801aaac:	0801aa49 	.word	0x0801aa49
 801aab0:	0801aa49 	.word	0x0801aa49
 801aab4:	0801ab8f 	.word	0x0801ab8f
 801aab8:	6833      	ldr	r3, [r6, #0]
 801aaba:	1d1a      	adds	r2, r3, #4
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	6032      	str	r2, [r6, #0]
 801aac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801aac4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801aac8:	2301      	movs	r3, #1
 801aaca:	e09d      	b.n	801ac08 <_printf_i+0x1e8>
 801aacc:	6833      	ldr	r3, [r6, #0]
 801aace:	6820      	ldr	r0, [r4, #0]
 801aad0:	1d19      	adds	r1, r3, #4
 801aad2:	6031      	str	r1, [r6, #0]
 801aad4:	0606      	lsls	r6, r0, #24
 801aad6:	d501      	bpl.n	801aadc <_printf_i+0xbc>
 801aad8:	681d      	ldr	r5, [r3, #0]
 801aada:	e003      	b.n	801aae4 <_printf_i+0xc4>
 801aadc:	0645      	lsls	r5, r0, #25
 801aade:	d5fb      	bpl.n	801aad8 <_printf_i+0xb8>
 801aae0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801aae4:	2d00      	cmp	r5, #0
 801aae6:	da03      	bge.n	801aaf0 <_printf_i+0xd0>
 801aae8:	232d      	movs	r3, #45	@ 0x2d
 801aaea:	426d      	negs	r5, r5
 801aaec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801aaf0:	4859      	ldr	r0, [pc, #356]	@ (801ac58 <_printf_i+0x238>)
 801aaf2:	230a      	movs	r3, #10
 801aaf4:	e011      	b.n	801ab1a <_printf_i+0xfa>
 801aaf6:	6821      	ldr	r1, [r4, #0]
 801aaf8:	6833      	ldr	r3, [r6, #0]
 801aafa:	0608      	lsls	r0, r1, #24
 801aafc:	f853 5b04 	ldr.w	r5, [r3], #4
 801ab00:	d402      	bmi.n	801ab08 <_printf_i+0xe8>
 801ab02:	0649      	lsls	r1, r1, #25
 801ab04:	bf48      	it	mi
 801ab06:	b2ad      	uxthmi	r5, r5
 801ab08:	2f6f      	cmp	r7, #111	@ 0x6f
 801ab0a:	4853      	ldr	r0, [pc, #332]	@ (801ac58 <_printf_i+0x238>)
 801ab0c:	6033      	str	r3, [r6, #0]
 801ab0e:	bf14      	ite	ne
 801ab10:	230a      	movne	r3, #10
 801ab12:	2308      	moveq	r3, #8
 801ab14:	2100      	movs	r1, #0
 801ab16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ab1a:	6866      	ldr	r6, [r4, #4]
 801ab1c:	60a6      	str	r6, [r4, #8]
 801ab1e:	2e00      	cmp	r6, #0
 801ab20:	bfa2      	ittt	ge
 801ab22:	6821      	ldrge	r1, [r4, #0]
 801ab24:	f021 0104 	bicge.w	r1, r1, #4
 801ab28:	6021      	strge	r1, [r4, #0]
 801ab2a:	b90d      	cbnz	r5, 801ab30 <_printf_i+0x110>
 801ab2c:	2e00      	cmp	r6, #0
 801ab2e:	d04b      	beq.n	801abc8 <_printf_i+0x1a8>
 801ab30:	4616      	mov	r6, r2
 801ab32:	fbb5 f1f3 	udiv	r1, r5, r3
 801ab36:	fb03 5711 	mls	r7, r3, r1, r5
 801ab3a:	5dc7      	ldrb	r7, [r0, r7]
 801ab3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ab40:	462f      	mov	r7, r5
 801ab42:	42bb      	cmp	r3, r7
 801ab44:	460d      	mov	r5, r1
 801ab46:	d9f4      	bls.n	801ab32 <_printf_i+0x112>
 801ab48:	2b08      	cmp	r3, #8
 801ab4a:	d10b      	bne.n	801ab64 <_printf_i+0x144>
 801ab4c:	6823      	ldr	r3, [r4, #0]
 801ab4e:	07df      	lsls	r7, r3, #31
 801ab50:	d508      	bpl.n	801ab64 <_printf_i+0x144>
 801ab52:	6923      	ldr	r3, [r4, #16]
 801ab54:	6861      	ldr	r1, [r4, #4]
 801ab56:	4299      	cmp	r1, r3
 801ab58:	bfde      	ittt	le
 801ab5a:	2330      	movle	r3, #48	@ 0x30
 801ab5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ab60:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ab64:	1b92      	subs	r2, r2, r6
 801ab66:	6122      	str	r2, [r4, #16]
 801ab68:	f8cd a000 	str.w	sl, [sp]
 801ab6c:	464b      	mov	r3, r9
 801ab6e:	aa03      	add	r2, sp, #12
 801ab70:	4621      	mov	r1, r4
 801ab72:	4640      	mov	r0, r8
 801ab74:	f7ff fee6 	bl	801a944 <_printf_common>
 801ab78:	3001      	adds	r0, #1
 801ab7a:	d14a      	bne.n	801ac12 <_printf_i+0x1f2>
 801ab7c:	f04f 30ff 	mov.w	r0, #4294967295
 801ab80:	b004      	add	sp, #16
 801ab82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab86:	6823      	ldr	r3, [r4, #0]
 801ab88:	f043 0320 	orr.w	r3, r3, #32
 801ab8c:	6023      	str	r3, [r4, #0]
 801ab8e:	4833      	ldr	r0, [pc, #204]	@ (801ac5c <_printf_i+0x23c>)
 801ab90:	2778      	movs	r7, #120	@ 0x78
 801ab92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ab96:	6823      	ldr	r3, [r4, #0]
 801ab98:	6831      	ldr	r1, [r6, #0]
 801ab9a:	061f      	lsls	r7, r3, #24
 801ab9c:	f851 5b04 	ldr.w	r5, [r1], #4
 801aba0:	d402      	bmi.n	801aba8 <_printf_i+0x188>
 801aba2:	065f      	lsls	r7, r3, #25
 801aba4:	bf48      	it	mi
 801aba6:	b2ad      	uxthmi	r5, r5
 801aba8:	6031      	str	r1, [r6, #0]
 801abaa:	07d9      	lsls	r1, r3, #31
 801abac:	bf44      	itt	mi
 801abae:	f043 0320 	orrmi.w	r3, r3, #32
 801abb2:	6023      	strmi	r3, [r4, #0]
 801abb4:	b11d      	cbz	r5, 801abbe <_printf_i+0x19e>
 801abb6:	2310      	movs	r3, #16
 801abb8:	e7ac      	b.n	801ab14 <_printf_i+0xf4>
 801abba:	4827      	ldr	r0, [pc, #156]	@ (801ac58 <_printf_i+0x238>)
 801abbc:	e7e9      	b.n	801ab92 <_printf_i+0x172>
 801abbe:	6823      	ldr	r3, [r4, #0]
 801abc0:	f023 0320 	bic.w	r3, r3, #32
 801abc4:	6023      	str	r3, [r4, #0]
 801abc6:	e7f6      	b.n	801abb6 <_printf_i+0x196>
 801abc8:	4616      	mov	r6, r2
 801abca:	e7bd      	b.n	801ab48 <_printf_i+0x128>
 801abcc:	6833      	ldr	r3, [r6, #0]
 801abce:	6825      	ldr	r5, [r4, #0]
 801abd0:	6961      	ldr	r1, [r4, #20]
 801abd2:	1d18      	adds	r0, r3, #4
 801abd4:	6030      	str	r0, [r6, #0]
 801abd6:	062e      	lsls	r6, r5, #24
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	d501      	bpl.n	801abe0 <_printf_i+0x1c0>
 801abdc:	6019      	str	r1, [r3, #0]
 801abde:	e002      	b.n	801abe6 <_printf_i+0x1c6>
 801abe0:	0668      	lsls	r0, r5, #25
 801abe2:	d5fb      	bpl.n	801abdc <_printf_i+0x1bc>
 801abe4:	8019      	strh	r1, [r3, #0]
 801abe6:	2300      	movs	r3, #0
 801abe8:	6123      	str	r3, [r4, #16]
 801abea:	4616      	mov	r6, r2
 801abec:	e7bc      	b.n	801ab68 <_printf_i+0x148>
 801abee:	6833      	ldr	r3, [r6, #0]
 801abf0:	1d1a      	adds	r2, r3, #4
 801abf2:	6032      	str	r2, [r6, #0]
 801abf4:	681e      	ldr	r6, [r3, #0]
 801abf6:	6862      	ldr	r2, [r4, #4]
 801abf8:	2100      	movs	r1, #0
 801abfa:	4630      	mov	r0, r6
 801abfc:	f7e5 fac0 	bl	8000180 <memchr>
 801ac00:	b108      	cbz	r0, 801ac06 <_printf_i+0x1e6>
 801ac02:	1b80      	subs	r0, r0, r6
 801ac04:	6060      	str	r0, [r4, #4]
 801ac06:	6863      	ldr	r3, [r4, #4]
 801ac08:	6123      	str	r3, [r4, #16]
 801ac0a:	2300      	movs	r3, #0
 801ac0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ac10:	e7aa      	b.n	801ab68 <_printf_i+0x148>
 801ac12:	6923      	ldr	r3, [r4, #16]
 801ac14:	4632      	mov	r2, r6
 801ac16:	4649      	mov	r1, r9
 801ac18:	4640      	mov	r0, r8
 801ac1a:	47d0      	blx	sl
 801ac1c:	3001      	adds	r0, #1
 801ac1e:	d0ad      	beq.n	801ab7c <_printf_i+0x15c>
 801ac20:	6823      	ldr	r3, [r4, #0]
 801ac22:	079b      	lsls	r3, r3, #30
 801ac24:	d413      	bmi.n	801ac4e <_printf_i+0x22e>
 801ac26:	68e0      	ldr	r0, [r4, #12]
 801ac28:	9b03      	ldr	r3, [sp, #12]
 801ac2a:	4298      	cmp	r0, r3
 801ac2c:	bfb8      	it	lt
 801ac2e:	4618      	movlt	r0, r3
 801ac30:	e7a6      	b.n	801ab80 <_printf_i+0x160>
 801ac32:	2301      	movs	r3, #1
 801ac34:	4632      	mov	r2, r6
 801ac36:	4649      	mov	r1, r9
 801ac38:	4640      	mov	r0, r8
 801ac3a:	47d0      	blx	sl
 801ac3c:	3001      	adds	r0, #1
 801ac3e:	d09d      	beq.n	801ab7c <_printf_i+0x15c>
 801ac40:	3501      	adds	r5, #1
 801ac42:	68e3      	ldr	r3, [r4, #12]
 801ac44:	9903      	ldr	r1, [sp, #12]
 801ac46:	1a5b      	subs	r3, r3, r1
 801ac48:	42ab      	cmp	r3, r5
 801ac4a:	dcf2      	bgt.n	801ac32 <_printf_i+0x212>
 801ac4c:	e7eb      	b.n	801ac26 <_printf_i+0x206>
 801ac4e:	2500      	movs	r5, #0
 801ac50:	f104 0619 	add.w	r6, r4, #25
 801ac54:	e7f5      	b.n	801ac42 <_printf_i+0x222>
 801ac56:	bf00      	nop
 801ac58:	08021f93 	.word	0x08021f93
 801ac5c:	08021fa4 	.word	0x08021fa4

0801ac60 <_scanf_float>:
 801ac60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac64:	b087      	sub	sp, #28
 801ac66:	4617      	mov	r7, r2
 801ac68:	9303      	str	r3, [sp, #12]
 801ac6a:	688b      	ldr	r3, [r1, #8]
 801ac6c:	1e5a      	subs	r2, r3, #1
 801ac6e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801ac72:	bf81      	itttt	hi
 801ac74:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801ac78:	eb03 0b05 	addhi.w	fp, r3, r5
 801ac7c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801ac80:	608b      	strhi	r3, [r1, #8]
 801ac82:	680b      	ldr	r3, [r1, #0]
 801ac84:	460a      	mov	r2, r1
 801ac86:	f04f 0500 	mov.w	r5, #0
 801ac8a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801ac8e:	f842 3b1c 	str.w	r3, [r2], #28
 801ac92:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801ac96:	4680      	mov	r8, r0
 801ac98:	460c      	mov	r4, r1
 801ac9a:	bf98      	it	ls
 801ac9c:	f04f 0b00 	movls.w	fp, #0
 801aca0:	9201      	str	r2, [sp, #4]
 801aca2:	4616      	mov	r6, r2
 801aca4:	46aa      	mov	sl, r5
 801aca6:	46a9      	mov	r9, r5
 801aca8:	9502      	str	r5, [sp, #8]
 801acaa:	68a2      	ldr	r2, [r4, #8]
 801acac:	b152      	cbz	r2, 801acc4 <_scanf_float+0x64>
 801acae:	683b      	ldr	r3, [r7, #0]
 801acb0:	781b      	ldrb	r3, [r3, #0]
 801acb2:	2b4e      	cmp	r3, #78	@ 0x4e
 801acb4:	d864      	bhi.n	801ad80 <_scanf_float+0x120>
 801acb6:	2b40      	cmp	r3, #64	@ 0x40
 801acb8:	d83c      	bhi.n	801ad34 <_scanf_float+0xd4>
 801acba:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801acbe:	b2c8      	uxtb	r0, r1
 801acc0:	280e      	cmp	r0, #14
 801acc2:	d93a      	bls.n	801ad3a <_scanf_float+0xda>
 801acc4:	f1b9 0f00 	cmp.w	r9, #0
 801acc8:	d003      	beq.n	801acd2 <_scanf_float+0x72>
 801acca:	6823      	ldr	r3, [r4, #0]
 801accc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801acd0:	6023      	str	r3, [r4, #0]
 801acd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801acd6:	f1ba 0f01 	cmp.w	sl, #1
 801acda:	f200 8117 	bhi.w	801af0c <_scanf_float+0x2ac>
 801acde:	9b01      	ldr	r3, [sp, #4]
 801ace0:	429e      	cmp	r6, r3
 801ace2:	f200 8108 	bhi.w	801aef6 <_scanf_float+0x296>
 801ace6:	2001      	movs	r0, #1
 801ace8:	b007      	add	sp, #28
 801acea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acee:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801acf2:	2a0d      	cmp	r2, #13
 801acf4:	d8e6      	bhi.n	801acc4 <_scanf_float+0x64>
 801acf6:	a101      	add	r1, pc, #4	@ (adr r1, 801acfc <_scanf_float+0x9c>)
 801acf8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801acfc:	0801ae43 	.word	0x0801ae43
 801ad00:	0801acc5 	.word	0x0801acc5
 801ad04:	0801acc5 	.word	0x0801acc5
 801ad08:	0801acc5 	.word	0x0801acc5
 801ad0c:	0801aea3 	.word	0x0801aea3
 801ad10:	0801ae7b 	.word	0x0801ae7b
 801ad14:	0801acc5 	.word	0x0801acc5
 801ad18:	0801acc5 	.word	0x0801acc5
 801ad1c:	0801ae51 	.word	0x0801ae51
 801ad20:	0801acc5 	.word	0x0801acc5
 801ad24:	0801acc5 	.word	0x0801acc5
 801ad28:	0801acc5 	.word	0x0801acc5
 801ad2c:	0801acc5 	.word	0x0801acc5
 801ad30:	0801ae09 	.word	0x0801ae09
 801ad34:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801ad38:	e7db      	b.n	801acf2 <_scanf_float+0x92>
 801ad3a:	290e      	cmp	r1, #14
 801ad3c:	d8c2      	bhi.n	801acc4 <_scanf_float+0x64>
 801ad3e:	a001      	add	r0, pc, #4	@ (adr r0, 801ad44 <_scanf_float+0xe4>)
 801ad40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801ad44:	0801adf9 	.word	0x0801adf9
 801ad48:	0801acc5 	.word	0x0801acc5
 801ad4c:	0801adf9 	.word	0x0801adf9
 801ad50:	0801ae8f 	.word	0x0801ae8f
 801ad54:	0801acc5 	.word	0x0801acc5
 801ad58:	0801ada1 	.word	0x0801ada1
 801ad5c:	0801addf 	.word	0x0801addf
 801ad60:	0801addf 	.word	0x0801addf
 801ad64:	0801addf 	.word	0x0801addf
 801ad68:	0801addf 	.word	0x0801addf
 801ad6c:	0801addf 	.word	0x0801addf
 801ad70:	0801addf 	.word	0x0801addf
 801ad74:	0801addf 	.word	0x0801addf
 801ad78:	0801addf 	.word	0x0801addf
 801ad7c:	0801addf 	.word	0x0801addf
 801ad80:	2b6e      	cmp	r3, #110	@ 0x6e
 801ad82:	d809      	bhi.n	801ad98 <_scanf_float+0x138>
 801ad84:	2b60      	cmp	r3, #96	@ 0x60
 801ad86:	d8b2      	bhi.n	801acee <_scanf_float+0x8e>
 801ad88:	2b54      	cmp	r3, #84	@ 0x54
 801ad8a:	d07b      	beq.n	801ae84 <_scanf_float+0x224>
 801ad8c:	2b59      	cmp	r3, #89	@ 0x59
 801ad8e:	d199      	bne.n	801acc4 <_scanf_float+0x64>
 801ad90:	2d07      	cmp	r5, #7
 801ad92:	d197      	bne.n	801acc4 <_scanf_float+0x64>
 801ad94:	2508      	movs	r5, #8
 801ad96:	e02c      	b.n	801adf2 <_scanf_float+0x192>
 801ad98:	2b74      	cmp	r3, #116	@ 0x74
 801ad9a:	d073      	beq.n	801ae84 <_scanf_float+0x224>
 801ad9c:	2b79      	cmp	r3, #121	@ 0x79
 801ad9e:	e7f6      	b.n	801ad8e <_scanf_float+0x12e>
 801ada0:	6821      	ldr	r1, [r4, #0]
 801ada2:	05c8      	lsls	r0, r1, #23
 801ada4:	d51b      	bpl.n	801adde <_scanf_float+0x17e>
 801ada6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801adaa:	6021      	str	r1, [r4, #0]
 801adac:	f109 0901 	add.w	r9, r9, #1
 801adb0:	f1bb 0f00 	cmp.w	fp, #0
 801adb4:	d003      	beq.n	801adbe <_scanf_float+0x15e>
 801adb6:	3201      	adds	r2, #1
 801adb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801adbc:	60a2      	str	r2, [r4, #8]
 801adbe:	68a3      	ldr	r3, [r4, #8]
 801adc0:	3b01      	subs	r3, #1
 801adc2:	60a3      	str	r3, [r4, #8]
 801adc4:	6923      	ldr	r3, [r4, #16]
 801adc6:	3301      	adds	r3, #1
 801adc8:	6123      	str	r3, [r4, #16]
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	3b01      	subs	r3, #1
 801adce:	2b00      	cmp	r3, #0
 801add0:	607b      	str	r3, [r7, #4]
 801add2:	f340 8087 	ble.w	801aee4 <_scanf_float+0x284>
 801add6:	683b      	ldr	r3, [r7, #0]
 801add8:	3301      	adds	r3, #1
 801adda:	603b      	str	r3, [r7, #0]
 801addc:	e765      	b.n	801acaa <_scanf_float+0x4a>
 801adde:	eb1a 0105 	adds.w	r1, sl, r5
 801ade2:	f47f af6f 	bne.w	801acc4 <_scanf_float+0x64>
 801ade6:	6822      	ldr	r2, [r4, #0]
 801ade8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801adec:	6022      	str	r2, [r4, #0]
 801adee:	460d      	mov	r5, r1
 801adf0:	468a      	mov	sl, r1
 801adf2:	f806 3b01 	strb.w	r3, [r6], #1
 801adf6:	e7e2      	b.n	801adbe <_scanf_float+0x15e>
 801adf8:	6822      	ldr	r2, [r4, #0]
 801adfa:	0610      	lsls	r0, r2, #24
 801adfc:	f57f af62 	bpl.w	801acc4 <_scanf_float+0x64>
 801ae00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801ae04:	6022      	str	r2, [r4, #0]
 801ae06:	e7f4      	b.n	801adf2 <_scanf_float+0x192>
 801ae08:	f1ba 0f00 	cmp.w	sl, #0
 801ae0c:	d10e      	bne.n	801ae2c <_scanf_float+0x1cc>
 801ae0e:	f1b9 0f00 	cmp.w	r9, #0
 801ae12:	d10e      	bne.n	801ae32 <_scanf_float+0x1d2>
 801ae14:	6822      	ldr	r2, [r4, #0]
 801ae16:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801ae1a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801ae1e:	d108      	bne.n	801ae32 <_scanf_float+0x1d2>
 801ae20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801ae24:	6022      	str	r2, [r4, #0]
 801ae26:	f04f 0a01 	mov.w	sl, #1
 801ae2a:	e7e2      	b.n	801adf2 <_scanf_float+0x192>
 801ae2c:	f1ba 0f02 	cmp.w	sl, #2
 801ae30:	d055      	beq.n	801aede <_scanf_float+0x27e>
 801ae32:	2d01      	cmp	r5, #1
 801ae34:	d002      	beq.n	801ae3c <_scanf_float+0x1dc>
 801ae36:	2d04      	cmp	r5, #4
 801ae38:	f47f af44 	bne.w	801acc4 <_scanf_float+0x64>
 801ae3c:	3501      	adds	r5, #1
 801ae3e:	b2ed      	uxtb	r5, r5
 801ae40:	e7d7      	b.n	801adf2 <_scanf_float+0x192>
 801ae42:	f1ba 0f01 	cmp.w	sl, #1
 801ae46:	f47f af3d 	bne.w	801acc4 <_scanf_float+0x64>
 801ae4a:	f04f 0a02 	mov.w	sl, #2
 801ae4e:	e7d0      	b.n	801adf2 <_scanf_float+0x192>
 801ae50:	b97d      	cbnz	r5, 801ae72 <_scanf_float+0x212>
 801ae52:	f1b9 0f00 	cmp.w	r9, #0
 801ae56:	f47f af38 	bne.w	801acca <_scanf_float+0x6a>
 801ae5a:	6822      	ldr	r2, [r4, #0]
 801ae5c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801ae60:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801ae64:	f040 8108 	bne.w	801b078 <_scanf_float+0x418>
 801ae68:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801ae6c:	6022      	str	r2, [r4, #0]
 801ae6e:	2501      	movs	r5, #1
 801ae70:	e7bf      	b.n	801adf2 <_scanf_float+0x192>
 801ae72:	2d03      	cmp	r5, #3
 801ae74:	d0e2      	beq.n	801ae3c <_scanf_float+0x1dc>
 801ae76:	2d05      	cmp	r5, #5
 801ae78:	e7de      	b.n	801ae38 <_scanf_float+0x1d8>
 801ae7a:	2d02      	cmp	r5, #2
 801ae7c:	f47f af22 	bne.w	801acc4 <_scanf_float+0x64>
 801ae80:	2503      	movs	r5, #3
 801ae82:	e7b6      	b.n	801adf2 <_scanf_float+0x192>
 801ae84:	2d06      	cmp	r5, #6
 801ae86:	f47f af1d 	bne.w	801acc4 <_scanf_float+0x64>
 801ae8a:	2507      	movs	r5, #7
 801ae8c:	e7b1      	b.n	801adf2 <_scanf_float+0x192>
 801ae8e:	6822      	ldr	r2, [r4, #0]
 801ae90:	0591      	lsls	r1, r2, #22
 801ae92:	f57f af17 	bpl.w	801acc4 <_scanf_float+0x64>
 801ae96:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801ae9a:	6022      	str	r2, [r4, #0]
 801ae9c:	f8cd 9008 	str.w	r9, [sp, #8]
 801aea0:	e7a7      	b.n	801adf2 <_scanf_float+0x192>
 801aea2:	6822      	ldr	r2, [r4, #0]
 801aea4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801aea8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801aeac:	d006      	beq.n	801aebc <_scanf_float+0x25c>
 801aeae:	0550      	lsls	r0, r2, #21
 801aeb0:	f57f af08 	bpl.w	801acc4 <_scanf_float+0x64>
 801aeb4:	f1b9 0f00 	cmp.w	r9, #0
 801aeb8:	f000 80de 	beq.w	801b078 <_scanf_float+0x418>
 801aebc:	0591      	lsls	r1, r2, #22
 801aebe:	bf58      	it	pl
 801aec0:	9902      	ldrpl	r1, [sp, #8]
 801aec2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801aec6:	bf58      	it	pl
 801aec8:	eba9 0101 	subpl.w	r1, r9, r1
 801aecc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801aed0:	bf58      	it	pl
 801aed2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801aed6:	6022      	str	r2, [r4, #0]
 801aed8:	f04f 0900 	mov.w	r9, #0
 801aedc:	e789      	b.n	801adf2 <_scanf_float+0x192>
 801aede:	f04f 0a03 	mov.w	sl, #3
 801aee2:	e786      	b.n	801adf2 <_scanf_float+0x192>
 801aee4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801aee8:	4639      	mov	r1, r7
 801aeea:	4640      	mov	r0, r8
 801aeec:	4798      	blx	r3
 801aeee:	2800      	cmp	r0, #0
 801aef0:	f43f aedb 	beq.w	801acaa <_scanf_float+0x4a>
 801aef4:	e6e6      	b.n	801acc4 <_scanf_float+0x64>
 801aef6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801aefa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801aefe:	463a      	mov	r2, r7
 801af00:	4640      	mov	r0, r8
 801af02:	4798      	blx	r3
 801af04:	6923      	ldr	r3, [r4, #16]
 801af06:	3b01      	subs	r3, #1
 801af08:	6123      	str	r3, [r4, #16]
 801af0a:	e6e8      	b.n	801acde <_scanf_float+0x7e>
 801af0c:	1e6b      	subs	r3, r5, #1
 801af0e:	2b06      	cmp	r3, #6
 801af10:	d824      	bhi.n	801af5c <_scanf_float+0x2fc>
 801af12:	2d02      	cmp	r5, #2
 801af14:	d836      	bhi.n	801af84 <_scanf_float+0x324>
 801af16:	9b01      	ldr	r3, [sp, #4]
 801af18:	429e      	cmp	r6, r3
 801af1a:	f67f aee4 	bls.w	801ace6 <_scanf_float+0x86>
 801af1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801af22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801af26:	463a      	mov	r2, r7
 801af28:	4640      	mov	r0, r8
 801af2a:	4798      	blx	r3
 801af2c:	6923      	ldr	r3, [r4, #16]
 801af2e:	3b01      	subs	r3, #1
 801af30:	6123      	str	r3, [r4, #16]
 801af32:	e7f0      	b.n	801af16 <_scanf_float+0x2b6>
 801af34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801af38:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801af3c:	463a      	mov	r2, r7
 801af3e:	4640      	mov	r0, r8
 801af40:	4798      	blx	r3
 801af42:	6923      	ldr	r3, [r4, #16]
 801af44:	3b01      	subs	r3, #1
 801af46:	6123      	str	r3, [r4, #16]
 801af48:	f10a 3aff 	add.w	sl, sl, #4294967295
 801af4c:	fa5f fa8a 	uxtb.w	sl, sl
 801af50:	f1ba 0f02 	cmp.w	sl, #2
 801af54:	d1ee      	bne.n	801af34 <_scanf_float+0x2d4>
 801af56:	3d03      	subs	r5, #3
 801af58:	b2ed      	uxtb	r5, r5
 801af5a:	1b76      	subs	r6, r6, r5
 801af5c:	6823      	ldr	r3, [r4, #0]
 801af5e:	05da      	lsls	r2, r3, #23
 801af60:	d530      	bpl.n	801afc4 <_scanf_float+0x364>
 801af62:	055b      	lsls	r3, r3, #21
 801af64:	d511      	bpl.n	801af8a <_scanf_float+0x32a>
 801af66:	9b01      	ldr	r3, [sp, #4]
 801af68:	429e      	cmp	r6, r3
 801af6a:	f67f aebc 	bls.w	801ace6 <_scanf_float+0x86>
 801af6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801af72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801af76:	463a      	mov	r2, r7
 801af78:	4640      	mov	r0, r8
 801af7a:	4798      	blx	r3
 801af7c:	6923      	ldr	r3, [r4, #16]
 801af7e:	3b01      	subs	r3, #1
 801af80:	6123      	str	r3, [r4, #16]
 801af82:	e7f0      	b.n	801af66 <_scanf_float+0x306>
 801af84:	46aa      	mov	sl, r5
 801af86:	46b3      	mov	fp, r6
 801af88:	e7de      	b.n	801af48 <_scanf_float+0x2e8>
 801af8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801af8e:	6923      	ldr	r3, [r4, #16]
 801af90:	2965      	cmp	r1, #101	@ 0x65
 801af92:	f103 33ff 	add.w	r3, r3, #4294967295
 801af96:	f106 35ff 	add.w	r5, r6, #4294967295
 801af9a:	6123      	str	r3, [r4, #16]
 801af9c:	d00c      	beq.n	801afb8 <_scanf_float+0x358>
 801af9e:	2945      	cmp	r1, #69	@ 0x45
 801afa0:	d00a      	beq.n	801afb8 <_scanf_float+0x358>
 801afa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801afa6:	463a      	mov	r2, r7
 801afa8:	4640      	mov	r0, r8
 801afaa:	4798      	blx	r3
 801afac:	6923      	ldr	r3, [r4, #16]
 801afae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801afb2:	3b01      	subs	r3, #1
 801afb4:	1eb5      	subs	r5, r6, #2
 801afb6:	6123      	str	r3, [r4, #16]
 801afb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801afbc:	463a      	mov	r2, r7
 801afbe:	4640      	mov	r0, r8
 801afc0:	4798      	blx	r3
 801afc2:	462e      	mov	r6, r5
 801afc4:	6822      	ldr	r2, [r4, #0]
 801afc6:	f012 0210 	ands.w	r2, r2, #16
 801afca:	d001      	beq.n	801afd0 <_scanf_float+0x370>
 801afcc:	2000      	movs	r0, #0
 801afce:	e68b      	b.n	801ace8 <_scanf_float+0x88>
 801afd0:	7032      	strb	r2, [r6, #0]
 801afd2:	6823      	ldr	r3, [r4, #0]
 801afd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801afd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801afdc:	d11c      	bne.n	801b018 <_scanf_float+0x3b8>
 801afde:	9b02      	ldr	r3, [sp, #8]
 801afe0:	454b      	cmp	r3, r9
 801afe2:	eba3 0209 	sub.w	r2, r3, r9
 801afe6:	d123      	bne.n	801b030 <_scanf_float+0x3d0>
 801afe8:	9901      	ldr	r1, [sp, #4]
 801afea:	2200      	movs	r2, #0
 801afec:	4640      	mov	r0, r8
 801afee:	f7ff f8ef 	bl	801a1d0 <_strtod_r>
 801aff2:	9b03      	ldr	r3, [sp, #12]
 801aff4:	6821      	ldr	r1, [r4, #0]
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	f011 0f02 	tst.w	r1, #2
 801affc:	ec57 6b10 	vmov	r6, r7, d0
 801b000:	f103 0204 	add.w	r2, r3, #4
 801b004:	d01f      	beq.n	801b046 <_scanf_float+0x3e6>
 801b006:	9903      	ldr	r1, [sp, #12]
 801b008:	600a      	str	r2, [r1, #0]
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	e9c3 6700 	strd	r6, r7, [r3]
 801b010:	68e3      	ldr	r3, [r4, #12]
 801b012:	3301      	adds	r3, #1
 801b014:	60e3      	str	r3, [r4, #12]
 801b016:	e7d9      	b.n	801afcc <_scanf_float+0x36c>
 801b018:	9b04      	ldr	r3, [sp, #16]
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d0e4      	beq.n	801afe8 <_scanf_float+0x388>
 801b01e:	9905      	ldr	r1, [sp, #20]
 801b020:	230a      	movs	r3, #10
 801b022:	3101      	adds	r1, #1
 801b024:	4640      	mov	r0, r8
 801b026:	f7ff f9b7 	bl	801a398 <_strtol_r>
 801b02a:	9b04      	ldr	r3, [sp, #16]
 801b02c:	9e05      	ldr	r6, [sp, #20]
 801b02e:	1ac2      	subs	r2, r0, r3
 801b030:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801b034:	429e      	cmp	r6, r3
 801b036:	bf28      	it	cs
 801b038:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801b03c:	4910      	ldr	r1, [pc, #64]	@ (801b080 <_scanf_float+0x420>)
 801b03e:	4630      	mov	r0, r6
 801b040:	f000 f918 	bl	801b274 <siprintf>
 801b044:	e7d0      	b.n	801afe8 <_scanf_float+0x388>
 801b046:	f011 0f04 	tst.w	r1, #4
 801b04a:	9903      	ldr	r1, [sp, #12]
 801b04c:	600a      	str	r2, [r1, #0]
 801b04e:	d1dc      	bne.n	801b00a <_scanf_float+0x3aa>
 801b050:	681d      	ldr	r5, [r3, #0]
 801b052:	4632      	mov	r2, r6
 801b054:	463b      	mov	r3, r7
 801b056:	4630      	mov	r0, r6
 801b058:	4639      	mov	r1, r7
 801b05a:	f7e5 fd3f 	bl	8000adc <__aeabi_dcmpun>
 801b05e:	b128      	cbz	r0, 801b06c <_scanf_float+0x40c>
 801b060:	4808      	ldr	r0, [pc, #32]	@ (801b084 <_scanf_float+0x424>)
 801b062:	f000 fa9d 	bl	801b5a0 <nanf>
 801b066:	ed85 0a00 	vstr	s0, [r5]
 801b06a:	e7d1      	b.n	801b010 <_scanf_float+0x3b0>
 801b06c:	4630      	mov	r0, r6
 801b06e:	4639      	mov	r1, r7
 801b070:	f7e5 fd92 	bl	8000b98 <__aeabi_d2f>
 801b074:	6028      	str	r0, [r5, #0]
 801b076:	e7cb      	b.n	801b010 <_scanf_float+0x3b0>
 801b078:	f04f 0900 	mov.w	r9, #0
 801b07c:	e629      	b.n	801acd2 <_scanf_float+0x72>
 801b07e:	bf00      	nop
 801b080:	08021fb5 	.word	0x08021fb5
 801b084:	0802206e 	.word	0x0802206e

0801b088 <std>:
 801b088:	2300      	movs	r3, #0
 801b08a:	b510      	push	{r4, lr}
 801b08c:	4604      	mov	r4, r0
 801b08e:	e9c0 3300 	strd	r3, r3, [r0]
 801b092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b096:	6083      	str	r3, [r0, #8]
 801b098:	8181      	strh	r1, [r0, #12]
 801b09a:	6643      	str	r3, [r0, #100]	@ 0x64
 801b09c:	81c2      	strh	r2, [r0, #14]
 801b09e:	6183      	str	r3, [r0, #24]
 801b0a0:	4619      	mov	r1, r3
 801b0a2:	2208      	movs	r2, #8
 801b0a4:	305c      	adds	r0, #92	@ 0x5c
 801b0a6:	f000 f948 	bl	801b33a <memset>
 801b0aa:	4b0d      	ldr	r3, [pc, #52]	@ (801b0e0 <std+0x58>)
 801b0ac:	6263      	str	r3, [r4, #36]	@ 0x24
 801b0ae:	4b0d      	ldr	r3, [pc, #52]	@ (801b0e4 <std+0x5c>)
 801b0b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b0b2:	4b0d      	ldr	r3, [pc, #52]	@ (801b0e8 <std+0x60>)
 801b0b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b0b6:	4b0d      	ldr	r3, [pc, #52]	@ (801b0ec <std+0x64>)
 801b0b8:	6323      	str	r3, [r4, #48]	@ 0x30
 801b0ba:	4b0d      	ldr	r3, [pc, #52]	@ (801b0f0 <std+0x68>)
 801b0bc:	6224      	str	r4, [r4, #32]
 801b0be:	429c      	cmp	r4, r3
 801b0c0:	d006      	beq.n	801b0d0 <std+0x48>
 801b0c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b0c6:	4294      	cmp	r4, r2
 801b0c8:	d002      	beq.n	801b0d0 <std+0x48>
 801b0ca:	33d0      	adds	r3, #208	@ 0xd0
 801b0cc:	429c      	cmp	r4, r3
 801b0ce:	d105      	bne.n	801b0dc <std+0x54>
 801b0d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0d8:	f000 ba40 	b.w	801b55c <__retarget_lock_init_recursive>
 801b0dc:	bd10      	pop	{r4, pc}
 801b0de:	bf00      	nop
 801b0e0:	0801b2b5 	.word	0x0801b2b5
 801b0e4:	0801b2d7 	.word	0x0801b2d7
 801b0e8:	0801b30f 	.word	0x0801b30f
 801b0ec:	0801b333 	.word	0x0801b333
 801b0f0:	20002ff0 	.word	0x20002ff0

0801b0f4 <stdio_exit_handler>:
 801b0f4:	4a02      	ldr	r2, [pc, #8]	@ (801b100 <stdio_exit_handler+0xc>)
 801b0f6:	4903      	ldr	r1, [pc, #12]	@ (801b104 <stdio_exit_handler+0x10>)
 801b0f8:	4803      	ldr	r0, [pc, #12]	@ (801b108 <stdio_exit_handler+0x14>)
 801b0fa:	f000 b869 	b.w	801b1d0 <_fwalk_sglue>
 801b0fe:	bf00      	nop
 801b100:	20000148 	.word	0x20000148
 801b104:	0801d965 	.word	0x0801d965
 801b108:	200002c4 	.word	0x200002c4

0801b10c <cleanup_stdio>:
 801b10c:	6841      	ldr	r1, [r0, #4]
 801b10e:	4b0c      	ldr	r3, [pc, #48]	@ (801b140 <cleanup_stdio+0x34>)
 801b110:	4299      	cmp	r1, r3
 801b112:	b510      	push	{r4, lr}
 801b114:	4604      	mov	r4, r0
 801b116:	d001      	beq.n	801b11c <cleanup_stdio+0x10>
 801b118:	f002 fc24 	bl	801d964 <_fflush_r>
 801b11c:	68a1      	ldr	r1, [r4, #8]
 801b11e:	4b09      	ldr	r3, [pc, #36]	@ (801b144 <cleanup_stdio+0x38>)
 801b120:	4299      	cmp	r1, r3
 801b122:	d002      	beq.n	801b12a <cleanup_stdio+0x1e>
 801b124:	4620      	mov	r0, r4
 801b126:	f002 fc1d 	bl	801d964 <_fflush_r>
 801b12a:	68e1      	ldr	r1, [r4, #12]
 801b12c:	4b06      	ldr	r3, [pc, #24]	@ (801b148 <cleanup_stdio+0x3c>)
 801b12e:	4299      	cmp	r1, r3
 801b130:	d004      	beq.n	801b13c <cleanup_stdio+0x30>
 801b132:	4620      	mov	r0, r4
 801b134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b138:	f002 bc14 	b.w	801d964 <_fflush_r>
 801b13c:	bd10      	pop	{r4, pc}
 801b13e:	bf00      	nop
 801b140:	20002ff0 	.word	0x20002ff0
 801b144:	20003058 	.word	0x20003058
 801b148:	200030c0 	.word	0x200030c0

0801b14c <global_stdio_init.part.0>:
 801b14c:	b510      	push	{r4, lr}
 801b14e:	4b0b      	ldr	r3, [pc, #44]	@ (801b17c <global_stdio_init.part.0+0x30>)
 801b150:	4c0b      	ldr	r4, [pc, #44]	@ (801b180 <global_stdio_init.part.0+0x34>)
 801b152:	4a0c      	ldr	r2, [pc, #48]	@ (801b184 <global_stdio_init.part.0+0x38>)
 801b154:	601a      	str	r2, [r3, #0]
 801b156:	4620      	mov	r0, r4
 801b158:	2200      	movs	r2, #0
 801b15a:	2104      	movs	r1, #4
 801b15c:	f7ff ff94 	bl	801b088 <std>
 801b160:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b164:	2201      	movs	r2, #1
 801b166:	2109      	movs	r1, #9
 801b168:	f7ff ff8e 	bl	801b088 <std>
 801b16c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b170:	2202      	movs	r2, #2
 801b172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b176:	2112      	movs	r1, #18
 801b178:	f7ff bf86 	b.w	801b088 <std>
 801b17c:	20003128 	.word	0x20003128
 801b180:	20002ff0 	.word	0x20002ff0
 801b184:	0801b0f5 	.word	0x0801b0f5

0801b188 <__sfp_lock_acquire>:
 801b188:	4801      	ldr	r0, [pc, #4]	@ (801b190 <__sfp_lock_acquire+0x8>)
 801b18a:	f000 b9e8 	b.w	801b55e <__retarget_lock_acquire_recursive>
 801b18e:	bf00      	nop
 801b190:	20003131 	.word	0x20003131

0801b194 <__sfp_lock_release>:
 801b194:	4801      	ldr	r0, [pc, #4]	@ (801b19c <__sfp_lock_release+0x8>)
 801b196:	f000 b9e3 	b.w	801b560 <__retarget_lock_release_recursive>
 801b19a:	bf00      	nop
 801b19c:	20003131 	.word	0x20003131

0801b1a0 <__sinit>:
 801b1a0:	b510      	push	{r4, lr}
 801b1a2:	4604      	mov	r4, r0
 801b1a4:	f7ff fff0 	bl	801b188 <__sfp_lock_acquire>
 801b1a8:	6a23      	ldr	r3, [r4, #32]
 801b1aa:	b11b      	cbz	r3, 801b1b4 <__sinit+0x14>
 801b1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1b0:	f7ff bff0 	b.w	801b194 <__sfp_lock_release>
 801b1b4:	4b04      	ldr	r3, [pc, #16]	@ (801b1c8 <__sinit+0x28>)
 801b1b6:	6223      	str	r3, [r4, #32]
 801b1b8:	4b04      	ldr	r3, [pc, #16]	@ (801b1cc <__sinit+0x2c>)
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d1f5      	bne.n	801b1ac <__sinit+0xc>
 801b1c0:	f7ff ffc4 	bl	801b14c <global_stdio_init.part.0>
 801b1c4:	e7f2      	b.n	801b1ac <__sinit+0xc>
 801b1c6:	bf00      	nop
 801b1c8:	0801b10d 	.word	0x0801b10d
 801b1cc:	20003128 	.word	0x20003128

0801b1d0 <_fwalk_sglue>:
 801b1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b1d4:	4607      	mov	r7, r0
 801b1d6:	4688      	mov	r8, r1
 801b1d8:	4614      	mov	r4, r2
 801b1da:	2600      	movs	r6, #0
 801b1dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b1e0:	f1b9 0901 	subs.w	r9, r9, #1
 801b1e4:	d505      	bpl.n	801b1f2 <_fwalk_sglue+0x22>
 801b1e6:	6824      	ldr	r4, [r4, #0]
 801b1e8:	2c00      	cmp	r4, #0
 801b1ea:	d1f7      	bne.n	801b1dc <_fwalk_sglue+0xc>
 801b1ec:	4630      	mov	r0, r6
 801b1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b1f2:	89ab      	ldrh	r3, [r5, #12]
 801b1f4:	2b01      	cmp	r3, #1
 801b1f6:	d907      	bls.n	801b208 <_fwalk_sglue+0x38>
 801b1f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b1fc:	3301      	adds	r3, #1
 801b1fe:	d003      	beq.n	801b208 <_fwalk_sglue+0x38>
 801b200:	4629      	mov	r1, r5
 801b202:	4638      	mov	r0, r7
 801b204:	47c0      	blx	r8
 801b206:	4306      	orrs	r6, r0
 801b208:	3568      	adds	r5, #104	@ 0x68
 801b20a:	e7e9      	b.n	801b1e0 <_fwalk_sglue+0x10>

0801b20c <sniprintf>:
 801b20c:	b40c      	push	{r2, r3}
 801b20e:	b530      	push	{r4, r5, lr}
 801b210:	4b17      	ldr	r3, [pc, #92]	@ (801b270 <sniprintf+0x64>)
 801b212:	1e0c      	subs	r4, r1, #0
 801b214:	681d      	ldr	r5, [r3, #0]
 801b216:	b09d      	sub	sp, #116	@ 0x74
 801b218:	da08      	bge.n	801b22c <sniprintf+0x20>
 801b21a:	238b      	movs	r3, #139	@ 0x8b
 801b21c:	602b      	str	r3, [r5, #0]
 801b21e:	f04f 30ff 	mov.w	r0, #4294967295
 801b222:	b01d      	add	sp, #116	@ 0x74
 801b224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b228:	b002      	add	sp, #8
 801b22a:	4770      	bx	lr
 801b22c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b230:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b234:	bf14      	ite	ne
 801b236:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b23a:	4623      	moveq	r3, r4
 801b23c:	9304      	str	r3, [sp, #16]
 801b23e:	9307      	str	r3, [sp, #28]
 801b240:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b244:	9002      	str	r0, [sp, #8]
 801b246:	9006      	str	r0, [sp, #24]
 801b248:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b24c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b24e:	ab21      	add	r3, sp, #132	@ 0x84
 801b250:	a902      	add	r1, sp, #8
 801b252:	4628      	mov	r0, r5
 801b254:	9301      	str	r3, [sp, #4]
 801b256:	f002 f8c3 	bl	801d3e0 <_svfiprintf_r>
 801b25a:	1c43      	adds	r3, r0, #1
 801b25c:	bfbc      	itt	lt
 801b25e:	238b      	movlt	r3, #139	@ 0x8b
 801b260:	602b      	strlt	r3, [r5, #0]
 801b262:	2c00      	cmp	r4, #0
 801b264:	d0dd      	beq.n	801b222 <sniprintf+0x16>
 801b266:	9b02      	ldr	r3, [sp, #8]
 801b268:	2200      	movs	r2, #0
 801b26a:	701a      	strb	r2, [r3, #0]
 801b26c:	e7d9      	b.n	801b222 <sniprintf+0x16>
 801b26e:	bf00      	nop
 801b270:	200002c0 	.word	0x200002c0

0801b274 <siprintf>:
 801b274:	b40e      	push	{r1, r2, r3}
 801b276:	b500      	push	{lr}
 801b278:	b09c      	sub	sp, #112	@ 0x70
 801b27a:	ab1d      	add	r3, sp, #116	@ 0x74
 801b27c:	9002      	str	r0, [sp, #8]
 801b27e:	9006      	str	r0, [sp, #24]
 801b280:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b284:	4809      	ldr	r0, [pc, #36]	@ (801b2ac <siprintf+0x38>)
 801b286:	9107      	str	r1, [sp, #28]
 801b288:	9104      	str	r1, [sp, #16]
 801b28a:	4909      	ldr	r1, [pc, #36]	@ (801b2b0 <siprintf+0x3c>)
 801b28c:	f853 2b04 	ldr.w	r2, [r3], #4
 801b290:	9105      	str	r1, [sp, #20]
 801b292:	6800      	ldr	r0, [r0, #0]
 801b294:	9301      	str	r3, [sp, #4]
 801b296:	a902      	add	r1, sp, #8
 801b298:	f002 f8a2 	bl	801d3e0 <_svfiprintf_r>
 801b29c:	9b02      	ldr	r3, [sp, #8]
 801b29e:	2200      	movs	r2, #0
 801b2a0:	701a      	strb	r2, [r3, #0]
 801b2a2:	b01c      	add	sp, #112	@ 0x70
 801b2a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b2a8:	b003      	add	sp, #12
 801b2aa:	4770      	bx	lr
 801b2ac:	200002c0 	.word	0x200002c0
 801b2b0:	ffff0208 	.word	0xffff0208

0801b2b4 <__sread>:
 801b2b4:	b510      	push	{r4, lr}
 801b2b6:	460c      	mov	r4, r1
 801b2b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2bc:	f000 f8f0 	bl	801b4a0 <_read_r>
 801b2c0:	2800      	cmp	r0, #0
 801b2c2:	bfab      	itete	ge
 801b2c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b2c6:	89a3      	ldrhlt	r3, [r4, #12]
 801b2c8:	181b      	addge	r3, r3, r0
 801b2ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b2ce:	bfac      	ite	ge
 801b2d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b2d2:	81a3      	strhlt	r3, [r4, #12]
 801b2d4:	bd10      	pop	{r4, pc}

0801b2d6 <__swrite>:
 801b2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2da:	461f      	mov	r7, r3
 801b2dc:	898b      	ldrh	r3, [r1, #12]
 801b2de:	05db      	lsls	r3, r3, #23
 801b2e0:	4605      	mov	r5, r0
 801b2e2:	460c      	mov	r4, r1
 801b2e4:	4616      	mov	r6, r2
 801b2e6:	d505      	bpl.n	801b2f4 <__swrite+0x1e>
 801b2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2ec:	2302      	movs	r3, #2
 801b2ee:	2200      	movs	r2, #0
 801b2f0:	f000 f8c4 	bl	801b47c <_lseek_r>
 801b2f4:	89a3      	ldrh	r3, [r4, #12]
 801b2f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b2fe:	81a3      	strh	r3, [r4, #12]
 801b300:	4632      	mov	r2, r6
 801b302:	463b      	mov	r3, r7
 801b304:	4628      	mov	r0, r5
 801b306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b30a:	f000 b8eb 	b.w	801b4e4 <_write_r>

0801b30e <__sseek>:
 801b30e:	b510      	push	{r4, lr}
 801b310:	460c      	mov	r4, r1
 801b312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b316:	f000 f8b1 	bl	801b47c <_lseek_r>
 801b31a:	1c43      	adds	r3, r0, #1
 801b31c:	89a3      	ldrh	r3, [r4, #12]
 801b31e:	bf15      	itete	ne
 801b320:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b322:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b326:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b32a:	81a3      	strheq	r3, [r4, #12]
 801b32c:	bf18      	it	ne
 801b32e:	81a3      	strhne	r3, [r4, #12]
 801b330:	bd10      	pop	{r4, pc}

0801b332 <__sclose>:
 801b332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b336:	f000 b891 	b.w	801b45c <_close_r>

0801b33a <memset>:
 801b33a:	4402      	add	r2, r0
 801b33c:	4603      	mov	r3, r0
 801b33e:	4293      	cmp	r3, r2
 801b340:	d100      	bne.n	801b344 <memset+0xa>
 801b342:	4770      	bx	lr
 801b344:	f803 1b01 	strb.w	r1, [r3], #1
 801b348:	e7f9      	b.n	801b33e <memset+0x4>

0801b34a <strncmp>:
 801b34a:	b510      	push	{r4, lr}
 801b34c:	b16a      	cbz	r2, 801b36a <strncmp+0x20>
 801b34e:	3901      	subs	r1, #1
 801b350:	1884      	adds	r4, r0, r2
 801b352:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b356:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b35a:	429a      	cmp	r2, r3
 801b35c:	d103      	bne.n	801b366 <strncmp+0x1c>
 801b35e:	42a0      	cmp	r0, r4
 801b360:	d001      	beq.n	801b366 <strncmp+0x1c>
 801b362:	2a00      	cmp	r2, #0
 801b364:	d1f5      	bne.n	801b352 <strncmp+0x8>
 801b366:	1ad0      	subs	r0, r2, r3
 801b368:	bd10      	pop	{r4, pc}
 801b36a:	4610      	mov	r0, r2
 801b36c:	e7fc      	b.n	801b368 <strncmp+0x1e>
	...

0801b370 <strtok>:
 801b370:	4b16      	ldr	r3, [pc, #88]	@ (801b3cc <strtok+0x5c>)
 801b372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b376:	681f      	ldr	r7, [r3, #0]
 801b378:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801b37a:	4605      	mov	r5, r0
 801b37c:	460e      	mov	r6, r1
 801b37e:	b9ec      	cbnz	r4, 801b3bc <strtok+0x4c>
 801b380:	2050      	movs	r0, #80	@ 0x50
 801b382:	f7fe f865 	bl	8019450 <malloc>
 801b386:	4602      	mov	r2, r0
 801b388:	6478      	str	r0, [r7, #68]	@ 0x44
 801b38a:	b920      	cbnz	r0, 801b396 <strtok+0x26>
 801b38c:	4b10      	ldr	r3, [pc, #64]	@ (801b3d0 <strtok+0x60>)
 801b38e:	4811      	ldr	r0, [pc, #68]	@ (801b3d4 <strtok+0x64>)
 801b390:	215b      	movs	r1, #91	@ 0x5b
 801b392:	f000 f90b 	bl	801b5ac <__assert_func>
 801b396:	e9c0 4400 	strd	r4, r4, [r0]
 801b39a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801b39e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801b3a2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801b3a6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801b3aa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801b3ae:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801b3b2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801b3b6:	6184      	str	r4, [r0, #24]
 801b3b8:	7704      	strb	r4, [r0, #28]
 801b3ba:	6244      	str	r4, [r0, #36]	@ 0x24
 801b3bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b3be:	4631      	mov	r1, r6
 801b3c0:	4628      	mov	r0, r5
 801b3c2:	2301      	movs	r3, #1
 801b3c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b3c8:	f000 b806 	b.w	801b3d8 <__strtok_r>
 801b3cc:	200002c0 	.word	0x200002c0
 801b3d0:	08021fba 	.word	0x08021fba
 801b3d4:	08021fd1 	.word	0x08021fd1

0801b3d8 <__strtok_r>:
 801b3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b3da:	4604      	mov	r4, r0
 801b3dc:	b908      	cbnz	r0, 801b3e2 <__strtok_r+0xa>
 801b3de:	6814      	ldr	r4, [r2, #0]
 801b3e0:	b144      	cbz	r4, 801b3f4 <__strtok_r+0x1c>
 801b3e2:	4620      	mov	r0, r4
 801b3e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 801b3e8:	460f      	mov	r7, r1
 801b3ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 801b3ee:	b91e      	cbnz	r6, 801b3f8 <__strtok_r+0x20>
 801b3f0:	b965      	cbnz	r5, 801b40c <__strtok_r+0x34>
 801b3f2:	6015      	str	r5, [r2, #0]
 801b3f4:	2000      	movs	r0, #0
 801b3f6:	e005      	b.n	801b404 <__strtok_r+0x2c>
 801b3f8:	42b5      	cmp	r5, r6
 801b3fa:	d1f6      	bne.n	801b3ea <__strtok_r+0x12>
 801b3fc:	2b00      	cmp	r3, #0
 801b3fe:	d1f0      	bne.n	801b3e2 <__strtok_r+0xa>
 801b400:	6014      	str	r4, [r2, #0]
 801b402:	7003      	strb	r3, [r0, #0]
 801b404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b406:	461c      	mov	r4, r3
 801b408:	e00c      	b.n	801b424 <__strtok_r+0x4c>
 801b40a:	b915      	cbnz	r5, 801b412 <__strtok_r+0x3a>
 801b40c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b410:	460e      	mov	r6, r1
 801b412:	f816 5b01 	ldrb.w	r5, [r6], #1
 801b416:	42ab      	cmp	r3, r5
 801b418:	d1f7      	bne.n	801b40a <__strtok_r+0x32>
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d0f3      	beq.n	801b406 <__strtok_r+0x2e>
 801b41e:	2300      	movs	r3, #0
 801b420:	f804 3c01 	strb.w	r3, [r4, #-1]
 801b424:	6014      	str	r4, [r2, #0]
 801b426:	e7ed      	b.n	801b404 <__strtok_r+0x2c>

0801b428 <strstr>:
 801b428:	780a      	ldrb	r2, [r1, #0]
 801b42a:	b570      	push	{r4, r5, r6, lr}
 801b42c:	b96a      	cbnz	r2, 801b44a <strstr+0x22>
 801b42e:	bd70      	pop	{r4, r5, r6, pc}
 801b430:	429a      	cmp	r2, r3
 801b432:	d109      	bne.n	801b448 <strstr+0x20>
 801b434:	460c      	mov	r4, r1
 801b436:	4605      	mov	r5, r0
 801b438:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	d0f6      	beq.n	801b42e <strstr+0x6>
 801b440:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b444:	429e      	cmp	r6, r3
 801b446:	d0f7      	beq.n	801b438 <strstr+0x10>
 801b448:	3001      	adds	r0, #1
 801b44a:	7803      	ldrb	r3, [r0, #0]
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d1ef      	bne.n	801b430 <strstr+0x8>
 801b450:	4618      	mov	r0, r3
 801b452:	e7ec      	b.n	801b42e <strstr+0x6>

0801b454 <_localeconv_r>:
 801b454:	4800      	ldr	r0, [pc, #0]	@ (801b458 <_localeconv_r+0x4>)
 801b456:	4770      	bx	lr
 801b458:	20000244 	.word	0x20000244

0801b45c <_close_r>:
 801b45c:	b538      	push	{r3, r4, r5, lr}
 801b45e:	4d06      	ldr	r5, [pc, #24]	@ (801b478 <_close_r+0x1c>)
 801b460:	2300      	movs	r3, #0
 801b462:	4604      	mov	r4, r0
 801b464:	4608      	mov	r0, r1
 801b466:	602b      	str	r3, [r5, #0]
 801b468:	f7eb f83e 	bl	80064e8 <_close>
 801b46c:	1c43      	adds	r3, r0, #1
 801b46e:	d102      	bne.n	801b476 <_close_r+0x1a>
 801b470:	682b      	ldr	r3, [r5, #0]
 801b472:	b103      	cbz	r3, 801b476 <_close_r+0x1a>
 801b474:	6023      	str	r3, [r4, #0]
 801b476:	bd38      	pop	{r3, r4, r5, pc}
 801b478:	2000312c 	.word	0x2000312c

0801b47c <_lseek_r>:
 801b47c:	b538      	push	{r3, r4, r5, lr}
 801b47e:	4d07      	ldr	r5, [pc, #28]	@ (801b49c <_lseek_r+0x20>)
 801b480:	4604      	mov	r4, r0
 801b482:	4608      	mov	r0, r1
 801b484:	4611      	mov	r1, r2
 801b486:	2200      	movs	r2, #0
 801b488:	602a      	str	r2, [r5, #0]
 801b48a:	461a      	mov	r2, r3
 801b48c:	f7eb f853 	bl	8006536 <_lseek>
 801b490:	1c43      	adds	r3, r0, #1
 801b492:	d102      	bne.n	801b49a <_lseek_r+0x1e>
 801b494:	682b      	ldr	r3, [r5, #0]
 801b496:	b103      	cbz	r3, 801b49a <_lseek_r+0x1e>
 801b498:	6023      	str	r3, [r4, #0]
 801b49a:	bd38      	pop	{r3, r4, r5, pc}
 801b49c:	2000312c 	.word	0x2000312c

0801b4a0 <_read_r>:
 801b4a0:	b538      	push	{r3, r4, r5, lr}
 801b4a2:	4d07      	ldr	r5, [pc, #28]	@ (801b4c0 <_read_r+0x20>)
 801b4a4:	4604      	mov	r4, r0
 801b4a6:	4608      	mov	r0, r1
 801b4a8:	4611      	mov	r1, r2
 801b4aa:	2200      	movs	r2, #0
 801b4ac:	602a      	str	r2, [r5, #0]
 801b4ae:	461a      	mov	r2, r3
 801b4b0:	f7ea ffe1 	bl	8006476 <_read>
 801b4b4:	1c43      	adds	r3, r0, #1
 801b4b6:	d102      	bne.n	801b4be <_read_r+0x1e>
 801b4b8:	682b      	ldr	r3, [r5, #0]
 801b4ba:	b103      	cbz	r3, 801b4be <_read_r+0x1e>
 801b4bc:	6023      	str	r3, [r4, #0]
 801b4be:	bd38      	pop	{r3, r4, r5, pc}
 801b4c0:	2000312c 	.word	0x2000312c

0801b4c4 <_sbrk_r>:
 801b4c4:	b538      	push	{r3, r4, r5, lr}
 801b4c6:	4d06      	ldr	r5, [pc, #24]	@ (801b4e0 <_sbrk_r+0x1c>)
 801b4c8:	2300      	movs	r3, #0
 801b4ca:	4604      	mov	r4, r0
 801b4cc:	4608      	mov	r0, r1
 801b4ce:	602b      	str	r3, [r5, #0]
 801b4d0:	f7eb f83e 	bl	8006550 <_sbrk>
 801b4d4:	1c43      	adds	r3, r0, #1
 801b4d6:	d102      	bne.n	801b4de <_sbrk_r+0x1a>
 801b4d8:	682b      	ldr	r3, [r5, #0]
 801b4da:	b103      	cbz	r3, 801b4de <_sbrk_r+0x1a>
 801b4dc:	6023      	str	r3, [r4, #0]
 801b4de:	bd38      	pop	{r3, r4, r5, pc}
 801b4e0:	2000312c 	.word	0x2000312c

0801b4e4 <_write_r>:
 801b4e4:	b538      	push	{r3, r4, r5, lr}
 801b4e6:	4d07      	ldr	r5, [pc, #28]	@ (801b504 <_write_r+0x20>)
 801b4e8:	4604      	mov	r4, r0
 801b4ea:	4608      	mov	r0, r1
 801b4ec:	4611      	mov	r1, r2
 801b4ee:	2200      	movs	r2, #0
 801b4f0:	602a      	str	r2, [r5, #0]
 801b4f2:	461a      	mov	r2, r3
 801b4f4:	f7ea ffdc 	bl	80064b0 <_write>
 801b4f8:	1c43      	adds	r3, r0, #1
 801b4fa:	d102      	bne.n	801b502 <_write_r+0x1e>
 801b4fc:	682b      	ldr	r3, [r5, #0]
 801b4fe:	b103      	cbz	r3, 801b502 <_write_r+0x1e>
 801b500:	6023      	str	r3, [r4, #0]
 801b502:	bd38      	pop	{r3, r4, r5, pc}
 801b504:	2000312c 	.word	0x2000312c

0801b508 <__errno>:
 801b508:	4b01      	ldr	r3, [pc, #4]	@ (801b510 <__errno+0x8>)
 801b50a:	6818      	ldr	r0, [r3, #0]
 801b50c:	4770      	bx	lr
 801b50e:	bf00      	nop
 801b510:	200002c0 	.word	0x200002c0

0801b514 <__libc_init_array>:
 801b514:	b570      	push	{r4, r5, r6, lr}
 801b516:	4d0d      	ldr	r5, [pc, #52]	@ (801b54c <__libc_init_array+0x38>)
 801b518:	4c0d      	ldr	r4, [pc, #52]	@ (801b550 <__libc_init_array+0x3c>)
 801b51a:	1b64      	subs	r4, r4, r5
 801b51c:	10a4      	asrs	r4, r4, #2
 801b51e:	2600      	movs	r6, #0
 801b520:	42a6      	cmp	r6, r4
 801b522:	d109      	bne.n	801b538 <__libc_init_array+0x24>
 801b524:	4d0b      	ldr	r5, [pc, #44]	@ (801b554 <__libc_init_array+0x40>)
 801b526:	4c0c      	ldr	r4, [pc, #48]	@ (801b558 <__libc_init_array+0x44>)
 801b528:	f004 f99a 	bl	801f860 <_init>
 801b52c:	1b64      	subs	r4, r4, r5
 801b52e:	10a4      	asrs	r4, r4, #2
 801b530:	2600      	movs	r6, #0
 801b532:	42a6      	cmp	r6, r4
 801b534:	d105      	bne.n	801b542 <__libc_init_array+0x2e>
 801b536:	bd70      	pop	{r4, r5, r6, pc}
 801b538:	f855 3b04 	ldr.w	r3, [r5], #4
 801b53c:	4798      	blx	r3
 801b53e:	3601      	adds	r6, #1
 801b540:	e7ee      	b.n	801b520 <__libc_init_array+0xc>
 801b542:	f855 3b04 	ldr.w	r3, [r5], #4
 801b546:	4798      	blx	r3
 801b548:	3601      	adds	r6, #1
 801b54a:	e7f2      	b.n	801b532 <__libc_init_array+0x1e>
 801b54c:	080224b0 	.word	0x080224b0
 801b550:	080224b0 	.word	0x080224b0
 801b554:	080224b0 	.word	0x080224b0
 801b558:	080224b4 	.word	0x080224b4

0801b55c <__retarget_lock_init_recursive>:
 801b55c:	4770      	bx	lr

0801b55e <__retarget_lock_acquire_recursive>:
 801b55e:	4770      	bx	lr

0801b560 <__retarget_lock_release_recursive>:
 801b560:	4770      	bx	lr

0801b562 <strcpy>:
 801b562:	4603      	mov	r3, r0
 801b564:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b568:	f803 2b01 	strb.w	r2, [r3], #1
 801b56c:	2a00      	cmp	r2, #0
 801b56e:	d1f9      	bne.n	801b564 <strcpy+0x2>
 801b570:	4770      	bx	lr

0801b572 <memcpy>:
 801b572:	440a      	add	r2, r1
 801b574:	4291      	cmp	r1, r2
 801b576:	f100 33ff 	add.w	r3, r0, #4294967295
 801b57a:	d100      	bne.n	801b57e <memcpy+0xc>
 801b57c:	4770      	bx	lr
 801b57e:	b510      	push	{r4, lr}
 801b580:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b584:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b588:	4291      	cmp	r1, r2
 801b58a:	d1f9      	bne.n	801b580 <memcpy+0xe>
 801b58c:	bd10      	pop	{r4, pc}
	...

0801b590 <nan>:
 801b590:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801b598 <nan+0x8>
 801b594:	4770      	bx	lr
 801b596:	bf00      	nop
 801b598:	00000000 	.word	0x00000000
 801b59c:	7ff80000 	.word	0x7ff80000

0801b5a0 <nanf>:
 801b5a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801b5a8 <nanf+0x8>
 801b5a4:	4770      	bx	lr
 801b5a6:	bf00      	nop
 801b5a8:	7fc00000 	.word	0x7fc00000

0801b5ac <__assert_func>:
 801b5ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b5ae:	4614      	mov	r4, r2
 801b5b0:	461a      	mov	r2, r3
 801b5b2:	4b09      	ldr	r3, [pc, #36]	@ (801b5d8 <__assert_func+0x2c>)
 801b5b4:	681b      	ldr	r3, [r3, #0]
 801b5b6:	4605      	mov	r5, r0
 801b5b8:	68d8      	ldr	r0, [r3, #12]
 801b5ba:	b954      	cbnz	r4, 801b5d2 <__assert_func+0x26>
 801b5bc:	4b07      	ldr	r3, [pc, #28]	@ (801b5dc <__assert_func+0x30>)
 801b5be:	461c      	mov	r4, r3
 801b5c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b5c4:	9100      	str	r1, [sp, #0]
 801b5c6:	462b      	mov	r3, r5
 801b5c8:	4905      	ldr	r1, [pc, #20]	@ (801b5e0 <__assert_func+0x34>)
 801b5ca:	f002 f9f3 	bl	801d9b4 <fiprintf>
 801b5ce:	f002 fab1 	bl	801db34 <abort>
 801b5d2:	4b04      	ldr	r3, [pc, #16]	@ (801b5e4 <__assert_func+0x38>)
 801b5d4:	e7f4      	b.n	801b5c0 <__assert_func+0x14>
 801b5d6:	bf00      	nop
 801b5d8:	200002c0 	.word	0x200002c0
 801b5dc:	0802206e 	.word	0x0802206e
 801b5e0:	08022040 	.word	0x08022040
 801b5e4:	08022033 	.word	0x08022033

0801b5e8 <quorem>:
 801b5e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5ec:	6903      	ldr	r3, [r0, #16]
 801b5ee:	690c      	ldr	r4, [r1, #16]
 801b5f0:	42a3      	cmp	r3, r4
 801b5f2:	4607      	mov	r7, r0
 801b5f4:	db7e      	blt.n	801b6f4 <quorem+0x10c>
 801b5f6:	3c01      	subs	r4, #1
 801b5f8:	f101 0814 	add.w	r8, r1, #20
 801b5fc:	00a3      	lsls	r3, r4, #2
 801b5fe:	f100 0514 	add.w	r5, r0, #20
 801b602:	9300      	str	r3, [sp, #0]
 801b604:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b608:	9301      	str	r3, [sp, #4]
 801b60a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b60e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b612:	3301      	adds	r3, #1
 801b614:	429a      	cmp	r2, r3
 801b616:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b61a:	fbb2 f6f3 	udiv	r6, r2, r3
 801b61e:	d32e      	bcc.n	801b67e <quorem+0x96>
 801b620:	f04f 0a00 	mov.w	sl, #0
 801b624:	46c4      	mov	ip, r8
 801b626:	46ae      	mov	lr, r5
 801b628:	46d3      	mov	fp, sl
 801b62a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b62e:	b298      	uxth	r0, r3
 801b630:	fb06 a000 	mla	r0, r6, r0, sl
 801b634:	0c02      	lsrs	r2, r0, #16
 801b636:	0c1b      	lsrs	r3, r3, #16
 801b638:	fb06 2303 	mla	r3, r6, r3, r2
 801b63c:	f8de 2000 	ldr.w	r2, [lr]
 801b640:	b280      	uxth	r0, r0
 801b642:	b292      	uxth	r2, r2
 801b644:	1a12      	subs	r2, r2, r0
 801b646:	445a      	add	r2, fp
 801b648:	f8de 0000 	ldr.w	r0, [lr]
 801b64c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b650:	b29b      	uxth	r3, r3
 801b652:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801b656:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801b65a:	b292      	uxth	r2, r2
 801b65c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801b660:	45e1      	cmp	r9, ip
 801b662:	f84e 2b04 	str.w	r2, [lr], #4
 801b666:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801b66a:	d2de      	bcs.n	801b62a <quorem+0x42>
 801b66c:	9b00      	ldr	r3, [sp, #0]
 801b66e:	58eb      	ldr	r3, [r5, r3]
 801b670:	b92b      	cbnz	r3, 801b67e <quorem+0x96>
 801b672:	9b01      	ldr	r3, [sp, #4]
 801b674:	3b04      	subs	r3, #4
 801b676:	429d      	cmp	r5, r3
 801b678:	461a      	mov	r2, r3
 801b67a:	d32f      	bcc.n	801b6dc <quorem+0xf4>
 801b67c:	613c      	str	r4, [r7, #16]
 801b67e:	4638      	mov	r0, r7
 801b680:	f001 fc58 	bl	801cf34 <__mcmp>
 801b684:	2800      	cmp	r0, #0
 801b686:	db25      	blt.n	801b6d4 <quorem+0xec>
 801b688:	4629      	mov	r1, r5
 801b68a:	2000      	movs	r0, #0
 801b68c:	f858 2b04 	ldr.w	r2, [r8], #4
 801b690:	f8d1 c000 	ldr.w	ip, [r1]
 801b694:	fa1f fe82 	uxth.w	lr, r2
 801b698:	fa1f f38c 	uxth.w	r3, ip
 801b69c:	eba3 030e 	sub.w	r3, r3, lr
 801b6a0:	4403      	add	r3, r0
 801b6a2:	0c12      	lsrs	r2, r2, #16
 801b6a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801b6a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801b6ac:	b29b      	uxth	r3, r3
 801b6ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b6b2:	45c1      	cmp	r9, r8
 801b6b4:	f841 3b04 	str.w	r3, [r1], #4
 801b6b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b6bc:	d2e6      	bcs.n	801b68c <quorem+0xa4>
 801b6be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b6c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b6c6:	b922      	cbnz	r2, 801b6d2 <quorem+0xea>
 801b6c8:	3b04      	subs	r3, #4
 801b6ca:	429d      	cmp	r5, r3
 801b6cc:	461a      	mov	r2, r3
 801b6ce:	d30b      	bcc.n	801b6e8 <quorem+0x100>
 801b6d0:	613c      	str	r4, [r7, #16]
 801b6d2:	3601      	adds	r6, #1
 801b6d4:	4630      	mov	r0, r6
 801b6d6:	b003      	add	sp, #12
 801b6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6dc:	6812      	ldr	r2, [r2, #0]
 801b6de:	3b04      	subs	r3, #4
 801b6e0:	2a00      	cmp	r2, #0
 801b6e2:	d1cb      	bne.n	801b67c <quorem+0x94>
 801b6e4:	3c01      	subs	r4, #1
 801b6e6:	e7c6      	b.n	801b676 <quorem+0x8e>
 801b6e8:	6812      	ldr	r2, [r2, #0]
 801b6ea:	3b04      	subs	r3, #4
 801b6ec:	2a00      	cmp	r2, #0
 801b6ee:	d1ef      	bne.n	801b6d0 <quorem+0xe8>
 801b6f0:	3c01      	subs	r4, #1
 801b6f2:	e7ea      	b.n	801b6ca <quorem+0xe2>
 801b6f4:	2000      	movs	r0, #0
 801b6f6:	e7ee      	b.n	801b6d6 <quorem+0xee>

0801b6f8 <_dtoa_r>:
 801b6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6fc:	69c7      	ldr	r7, [r0, #28]
 801b6fe:	b099      	sub	sp, #100	@ 0x64
 801b700:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b704:	ec55 4b10 	vmov	r4, r5, d0
 801b708:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801b70a:	9109      	str	r1, [sp, #36]	@ 0x24
 801b70c:	4683      	mov	fp, r0
 801b70e:	920e      	str	r2, [sp, #56]	@ 0x38
 801b710:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b712:	b97f      	cbnz	r7, 801b734 <_dtoa_r+0x3c>
 801b714:	2010      	movs	r0, #16
 801b716:	f7fd fe9b 	bl	8019450 <malloc>
 801b71a:	4602      	mov	r2, r0
 801b71c:	f8cb 001c 	str.w	r0, [fp, #28]
 801b720:	b920      	cbnz	r0, 801b72c <_dtoa_r+0x34>
 801b722:	4ba7      	ldr	r3, [pc, #668]	@ (801b9c0 <_dtoa_r+0x2c8>)
 801b724:	21ef      	movs	r1, #239	@ 0xef
 801b726:	48a7      	ldr	r0, [pc, #668]	@ (801b9c4 <_dtoa_r+0x2cc>)
 801b728:	f7ff ff40 	bl	801b5ac <__assert_func>
 801b72c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801b730:	6007      	str	r7, [r0, #0]
 801b732:	60c7      	str	r7, [r0, #12]
 801b734:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b738:	6819      	ldr	r1, [r3, #0]
 801b73a:	b159      	cbz	r1, 801b754 <_dtoa_r+0x5c>
 801b73c:	685a      	ldr	r2, [r3, #4]
 801b73e:	604a      	str	r2, [r1, #4]
 801b740:	2301      	movs	r3, #1
 801b742:	4093      	lsls	r3, r2
 801b744:	608b      	str	r3, [r1, #8]
 801b746:	4658      	mov	r0, fp
 801b748:	f001 f970 	bl	801ca2c <_Bfree>
 801b74c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b750:	2200      	movs	r2, #0
 801b752:	601a      	str	r2, [r3, #0]
 801b754:	1e2b      	subs	r3, r5, #0
 801b756:	bfb9      	ittee	lt
 801b758:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801b75c:	9303      	strlt	r3, [sp, #12]
 801b75e:	2300      	movge	r3, #0
 801b760:	6033      	strge	r3, [r6, #0]
 801b762:	9f03      	ldr	r7, [sp, #12]
 801b764:	4b98      	ldr	r3, [pc, #608]	@ (801b9c8 <_dtoa_r+0x2d0>)
 801b766:	bfbc      	itt	lt
 801b768:	2201      	movlt	r2, #1
 801b76a:	6032      	strlt	r2, [r6, #0]
 801b76c:	43bb      	bics	r3, r7
 801b76e:	d112      	bne.n	801b796 <_dtoa_r+0x9e>
 801b770:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b772:	f242 730f 	movw	r3, #9999	@ 0x270f
 801b776:	6013      	str	r3, [r2, #0]
 801b778:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b77c:	4323      	orrs	r3, r4
 801b77e:	f000 854d 	beq.w	801c21c <_dtoa_r+0xb24>
 801b782:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b784:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801b9dc <_dtoa_r+0x2e4>
 801b788:	2b00      	cmp	r3, #0
 801b78a:	f000 854f 	beq.w	801c22c <_dtoa_r+0xb34>
 801b78e:	f10a 0303 	add.w	r3, sl, #3
 801b792:	f000 bd49 	b.w	801c228 <_dtoa_r+0xb30>
 801b796:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b79a:	2200      	movs	r2, #0
 801b79c:	ec51 0b17 	vmov	r0, r1, d7
 801b7a0:	2300      	movs	r3, #0
 801b7a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801b7a6:	f7e5 f967 	bl	8000a78 <__aeabi_dcmpeq>
 801b7aa:	4680      	mov	r8, r0
 801b7ac:	b158      	cbz	r0, 801b7c6 <_dtoa_r+0xce>
 801b7ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b7b0:	2301      	movs	r3, #1
 801b7b2:	6013      	str	r3, [r2, #0]
 801b7b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b7b6:	b113      	cbz	r3, 801b7be <_dtoa_r+0xc6>
 801b7b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801b7ba:	4b84      	ldr	r3, [pc, #528]	@ (801b9cc <_dtoa_r+0x2d4>)
 801b7bc:	6013      	str	r3, [r2, #0]
 801b7be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801b9e0 <_dtoa_r+0x2e8>
 801b7c2:	f000 bd33 	b.w	801c22c <_dtoa_r+0xb34>
 801b7c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801b7ca:	aa16      	add	r2, sp, #88	@ 0x58
 801b7cc:	a917      	add	r1, sp, #92	@ 0x5c
 801b7ce:	4658      	mov	r0, fp
 801b7d0:	f001 fcd0 	bl	801d174 <__d2b>
 801b7d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801b7d8:	4681      	mov	r9, r0
 801b7da:	2e00      	cmp	r6, #0
 801b7dc:	d077      	beq.n	801b8ce <_dtoa_r+0x1d6>
 801b7de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b7e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801b7e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b7e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b7ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801b7f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801b7f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801b7f8:	4619      	mov	r1, r3
 801b7fa:	2200      	movs	r2, #0
 801b7fc:	4b74      	ldr	r3, [pc, #464]	@ (801b9d0 <_dtoa_r+0x2d8>)
 801b7fe:	f7e4 fd1b 	bl	8000238 <__aeabi_dsub>
 801b802:	a369      	add	r3, pc, #420	@ (adr r3, 801b9a8 <_dtoa_r+0x2b0>)
 801b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b808:	f7e4 fece 	bl	80005a8 <__aeabi_dmul>
 801b80c:	a368      	add	r3, pc, #416	@ (adr r3, 801b9b0 <_dtoa_r+0x2b8>)
 801b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b812:	f7e4 fd13 	bl	800023c <__adddf3>
 801b816:	4604      	mov	r4, r0
 801b818:	4630      	mov	r0, r6
 801b81a:	460d      	mov	r5, r1
 801b81c:	f7e4 fe5a 	bl	80004d4 <__aeabi_i2d>
 801b820:	a365      	add	r3, pc, #404	@ (adr r3, 801b9b8 <_dtoa_r+0x2c0>)
 801b822:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b826:	f7e4 febf 	bl	80005a8 <__aeabi_dmul>
 801b82a:	4602      	mov	r2, r0
 801b82c:	460b      	mov	r3, r1
 801b82e:	4620      	mov	r0, r4
 801b830:	4629      	mov	r1, r5
 801b832:	f7e4 fd03 	bl	800023c <__adddf3>
 801b836:	4604      	mov	r4, r0
 801b838:	460d      	mov	r5, r1
 801b83a:	f7e5 f965 	bl	8000b08 <__aeabi_d2iz>
 801b83e:	2200      	movs	r2, #0
 801b840:	4607      	mov	r7, r0
 801b842:	2300      	movs	r3, #0
 801b844:	4620      	mov	r0, r4
 801b846:	4629      	mov	r1, r5
 801b848:	f7e5 f920 	bl	8000a8c <__aeabi_dcmplt>
 801b84c:	b140      	cbz	r0, 801b860 <_dtoa_r+0x168>
 801b84e:	4638      	mov	r0, r7
 801b850:	f7e4 fe40 	bl	80004d4 <__aeabi_i2d>
 801b854:	4622      	mov	r2, r4
 801b856:	462b      	mov	r3, r5
 801b858:	f7e5 f90e 	bl	8000a78 <__aeabi_dcmpeq>
 801b85c:	b900      	cbnz	r0, 801b860 <_dtoa_r+0x168>
 801b85e:	3f01      	subs	r7, #1
 801b860:	2f16      	cmp	r7, #22
 801b862:	d851      	bhi.n	801b908 <_dtoa_r+0x210>
 801b864:	4b5b      	ldr	r3, [pc, #364]	@ (801b9d4 <_dtoa_r+0x2dc>)
 801b866:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b86e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b872:	f7e5 f90b 	bl	8000a8c <__aeabi_dcmplt>
 801b876:	2800      	cmp	r0, #0
 801b878:	d048      	beq.n	801b90c <_dtoa_r+0x214>
 801b87a:	3f01      	subs	r7, #1
 801b87c:	2300      	movs	r3, #0
 801b87e:	9312      	str	r3, [sp, #72]	@ 0x48
 801b880:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b882:	1b9b      	subs	r3, r3, r6
 801b884:	1e5a      	subs	r2, r3, #1
 801b886:	bf44      	itt	mi
 801b888:	f1c3 0801 	rsbmi	r8, r3, #1
 801b88c:	2300      	movmi	r3, #0
 801b88e:	9208      	str	r2, [sp, #32]
 801b890:	bf54      	ite	pl
 801b892:	f04f 0800 	movpl.w	r8, #0
 801b896:	9308      	strmi	r3, [sp, #32]
 801b898:	2f00      	cmp	r7, #0
 801b89a:	db39      	blt.n	801b910 <_dtoa_r+0x218>
 801b89c:	9b08      	ldr	r3, [sp, #32]
 801b89e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801b8a0:	443b      	add	r3, r7
 801b8a2:	9308      	str	r3, [sp, #32]
 801b8a4:	2300      	movs	r3, #0
 801b8a6:	930a      	str	r3, [sp, #40]	@ 0x28
 801b8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8aa:	2b09      	cmp	r3, #9
 801b8ac:	d864      	bhi.n	801b978 <_dtoa_r+0x280>
 801b8ae:	2b05      	cmp	r3, #5
 801b8b0:	bfc4      	itt	gt
 801b8b2:	3b04      	subgt	r3, #4
 801b8b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801b8b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8b8:	f1a3 0302 	sub.w	r3, r3, #2
 801b8bc:	bfcc      	ite	gt
 801b8be:	2400      	movgt	r4, #0
 801b8c0:	2401      	movle	r4, #1
 801b8c2:	2b03      	cmp	r3, #3
 801b8c4:	d863      	bhi.n	801b98e <_dtoa_r+0x296>
 801b8c6:	e8df f003 	tbb	[pc, r3]
 801b8ca:	372a      	.short	0x372a
 801b8cc:	5535      	.short	0x5535
 801b8ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801b8d2:	441e      	add	r6, r3
 801b8d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801b8d8:	2b20      	cmp	r3, #32
 801b8da:	bfc1      	itttt	gt
 801b8dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801b8e0:	409f      	lslgt	r7, r3
 801b8e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801b8e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 801b8ea:	bfd6      	itet	le
 801b8ec:	f1c3 0320 	rsble	r3, r3, #32
 801b8f0:	ea47 0003 	orrgt.w	r0, r7, r3
 801b8f4:	fa04 f003 	lslle.w	r0, r4, r3
 801b8f8:	f7e4 fddc 	bl	80004b4 <__aeabi_ui2d>
 801b8fc:	2201      	movs	r2, #1
 801b8fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801b902:	3e01      	subs	r6, #1
 801b904:	9214      	str	r2, [sp, #80]	@ 0x50
 801b906:	e777      	b.n	801b7f8 <_dtoa_r+0x100>
 801b908:	2301      	movs	r3, #1
 801b90a:	e7b8      	b.n	801b87e <_dtoa_r+0x186>
 801b90c:	9012      	str	r0, [sp, #72]	@ 0x48
 801b90e:	e7b7      	b.n	801b880 <_dtoa_r+0x188>
 801b910:	427b      	negs	r3, r7
 801b912:	930a      	str	r3, [sp, #40]	@ 0x28
 801b914:	2300      	movs	r3, #0
 801b916:	eba8 0807 	sub.w	r8, r8, r7
 801b91a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b91c:	e7c4      	b.n	801b8a8 <_dtoa_r+0x1b0>
 801b91e:	2300      	movs	r3, #0
 801b920:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b924:	2b00      	cmp	r3, #0
 801b926:	dc35      	bgt.n	801b994 <_dtoa_r+0x29c>
 801b928:	2301      	movs	r3, #1
 801b92a:	9300      	str	r3, [sp, #0]
 801b92c:	9307      	str	r3, [sp, #28]
 801b92e:	461a      	mov	r2, r3
 801b930:	920e      	str	r2, [sp, #56]	@ 0x38
 801b932:	e00b      	b.n	801b94c <_dtoa_r+0x254>
 801b934:	2301      	movs	r3, #1
 801b936:	e7f3      	b.n	801b920 <_dtoa_r+0x228>
 801b938:	2300      	movs	r3, #0
 801b93a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b93c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b93e:	18fb      	adds	r3, r7, r3
 801b940:	9300      	str	r3, [sp, #0]
 801b942:	3301      	adds	r3, #1
 801b944:	2b01      	cmp	r3, #1
 801b946:	9307      	str	r3, [sp, #28]
 801b948:	bfb8      	it	lt
 801b94a:	2301      	movlt	r3, #1
 801b94c:	f8db 001c 	ldr.w	r0, [fp, #28]
 801b950:	2100      	movs	r1, #0
 801b952:	2204      	movs	r2, #4
 801b954:	f102 0514 	add.w	r5, r2, #20
 801b958:	429d      	cmp	r5, r3
 801b95a:	d91f      	bls.n	801b99c <_dtoa_r+0x2a4>
 801b95c:	6041      	str	r1, [r0, #4]
 801b95e:	4658      	mov	r0, fp
 801b960:	f001 f824 	bl	801c9ac <_Balloc>
 801b964:	4682      	mov	sl, r0
 801b966:	2800      	cmp	r0, #0
 801b968:	d13c      	bne.n	801b9e4 <_dtoa_r+0x2ec>
 801b96a:	4b1b      	ldr	r3, [pc, #108]	@ (801b9d8 <_dtoa_r+0x2e0>)
 801b96c:	4602      	mov	r2, r0
 801b96e:	f240 11af 	movw	r1, #431	@ 0x1af
 801b972:	e6d8      	b.n	801b726 <_dtoa_r+0x2e>
 801b974:	2301      	movs	r3, #1
 801b976:	e7e0      	b.n	801b93a <_dtoa_r+0x242>
 801b978:	2401      	movs	r4, #1
 801b97a:	2300      	movs	r3, #0
 801b97c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b97e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b980:	f04f 33ff 	mov.w	r3, #4294967295
 801b984:	9300      	str	r3, [sp, #0]
 801b986:	9307      	str	r3, [sp, #28]
 801b988:	2200      	movs	r2, #0
 801b98a:	2312      	movs	r3, #18
 801b98c:	e7d0      	b.n	801b930 <_dtoa_r+0x238>
 801b98e:	2301      	movs	r3, #1
 801b990:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b992:	e7f5      	b.n	801b980 <_dtoa_r+0x288>
 801b994:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b996:	9300      	str	r3, [sp, #0]
 801b998:	9307      	str	r3, [sp, #28]
 801b99a:	e7d7      	b.n	801b94c <_dtoa_r+0x254>
 801b99c:	3101      	adds	r1, #1
 801b99e:	0052      	lsls	r2, r2, #1
 801b9a0:	e7d8      	b.n	801b954 <_dtoa_r+0x25c>
 801b9a2:	bf00      	nop
 801b9a4:	f3af 8000 	nop.w
 801b9a8:	636f4361 	.word	0x636f4361
 801b9ac:	3fd287a7 	.word	0x3fd287a7
 801b9b0:	8b60c8b3 	.word	0x8b60c8b3
 801b9b4:	3fc68a28 	.word	0x3fc68a28
 801b9b8:	509f79fb 	.word	0x509f79fb
 801b9bc:	3fd34413 	.word	0x3fd34413
 801b9c0:	08021fba 	.word	0x08021fba
 801b9c4:	0802207c 	.word	0x0802207c
 801b9c8:	7ff00000 	.word	0x7ff00000
 801b9cc:	08021f92 	.word	0x08021f92
 801b9d0:	3ff80000 	.word	0x3ff80000
 801b9d4:	080221d8 	.word	0x080221d8
 801b9d8:	080220d4 	.word	0x080220d4
 801b9dc:	08022078 	.word	0x08022078
 801b9e0:	08021f91 	.word	0x08021f91
 801b9e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b9e8:	6018      	str	r0, [r3, #0]
 801b9ea:	9b07      	ldr	r3, [sp, #28]
 801b9ec:	2b0e      	cmp	r3, #14
 801b9ee:	f200 80a4 	bhi.w	801bb3a <_dtoa_r+0x442>
 801b9f2:	2c00      	cmp	r4, #0
 801b9f4:	f000 80a1 	beq.w	801bb3a <_dtoa_r+0x442>
 801b9f8:	2f00      	cmp	r7, #0
 801b9fa:	dd33      	ble.n	801ba64 <_dtoa_r+0x36c>
 801b9fc:	4bad      	ldr	r3, [pc, #692]	@ (801bcb4 <_dtoa_r+0x5bc>)
 801b9fe:	f007 020f 	and.w	r2, r7, #15
 801ba02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ba06:	ed93 7b00 	vldr	d7, [r3]
 801ba0a:	05f8      	lsls	r0, r7, #23
 801ba0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ba10:	ea4f 1427 	mov.w	r4, r7, asr #4
 801ba14:	d516      	bpl.n	801ba44 <_dtoa_r+0x34c>
 801ba16:	4ba8      	ldr	r3, [pc, #672]	@ (801bcb8 <_dtoa_r+0x5c0>)
 801ba18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ba1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ba20:	f7e4 feec 	bl	80007fc <__aeabi_ddiv>
 801ba24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ba28:	f004 040f 	and.w	r4, r4, #15
 801ba2c:	2603      	movs	r6, #3
 801ba2e:	4da2      	ldr	r5, [pc, #648]	@ (801bcb8 <_dtoa_r+0x5c0>)
 801ba30:	b954      	cbnz	r4, 801ba48 <_dtoa_r+0x350>
 801ba32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ba36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ba3a:	f7e4 fedf 	bl	80007fc <__aeabi_ddiv>
 801ba3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ba42:	e028      	b.n	801ba96 <_dtoa_r+0x39e>
 801ba44:	2602      	movs	r6, #2
 801ba46:	e7f2      	b.n	801ba2e <_dtoa_r+0x336>
 801ba48:	07e1      	lsls	r1, r4, #31
 801ba4a:	d508      	bpl.n	801ba5e <_dtoa_r+0x366>
 801ba4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ba50:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ba54:	f7e4 fda8 	bl	80005a8 <__aeabi_dmul>
 801ba58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ba5c:	3601      	adds	r6, #1
 801ba5e:	1064      	asrs	r4, r4, #1
 801ba60:	3508      	adds	r5, #8
 801ba62:	e7e5      	b.n	801ba30 <_dtoa_r+0x338>
 801ba64:	f000 80d2 	beq.w	801bc0c <_dtoa_r+0x514>
 801ba68:	427c      	negs	r4, r7
 801ba6a:	4b92      	ldr	r3, [pc, #584]	@ (801bcb4 <_dtoa_r+0x5bc>)
 801ba6c:	4d92      	ldr	r5, [pc, #584]	@ (801bcb8 <_dtoa_r+0x5c0>)
 801ba6e:	f004 020f 	and.w	r2, r4, #15
 801ba72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ba7e:	f7e4 fd93 	bl	80005a8 <__aeabi_dmul>
 801ba82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ba86:	1124      	asrs	r4, r4, #4
 801ba88:	2300      	movs	r3, #0
 801ba8a:	2602      	movs	r6, #2
 801ba8c:	2c00      	cmp	r4, #0
 801ba8e:	f040 80b2 	bne.w	801bbf6 <_dtoa_r+0x4fe>
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d1d3      	bne.n	801ba3e <_dtoa_r+0x346>
 801ba96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ba98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	f000 80b7 	beq.w	801bc10 <_dtoa_r+0x518>
 801baa2:	4b86      	ldr	r3, [pc, #536]	@ (801bcbc <_dtoa_r+0x5c4>)
 801baa4:	2200      	movs	r2, #0
 801baa6:	4620      	mov	r0, r4
 801baa8:	4629      	mov	r1, r5
 801baaa:	f7e4 ffef 	bl	8000a8c <__aeabi_dcmplt>
 801baae:	2800      	cmp	r0, #0
 801bab0:	f000 80ae 	beq.w	801bc10 <_dtoa_r+0x518>
 801bab4:	9b07      	ldr	r3, [sp, #28]
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	f000 80aa 	beq.w	801bc10 <_dtoa_r+0x518>
 801babc:	9b00      	ldr	r3, [sp, #0]
 801babe:	2b00      	cmp	r3, #0
 801bac0:	dd37      	ble.n	801bb32 <_dtoa_r+0x43a>
 801bac2:	1e7b      	subs	r3, r7, #1
 801bac4:	9304      	str	r3, [sp, #16]
 801bac6:	4620      	mov	r0, r4
 801bac8:	4b7d      	ldr	r3, [pc, #500]	@ (801bcc0 <_dtoa_r+0x5c8>)
 801baca:	2200      	movs	r2, #0
 801bacc:	4629      	mov	r1, r5
 801bace:	f7e4 fd6b 	bl	80005a8 <__aeabi_dmul>
 801bad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bad6:	9c00      	ldr	r4, [sp, #0]
 801bad8:	3601      	adds	r6, #1
 801bada:	4630      	mov	r0, r6
 801badc:	f7e4 fcfa 	bl	80004d4 <__aeabi_i2d>
 801bae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bae4:	f7e4 fd60 	bl	80005a8 <__aeabi_dmul>
 801bae8:	4b76      	ldr	r3, [pc, #472]	@ (801bcc4 <_dtoa_r+0x5cc>)
 801baea:	2200      	movs	r2, #0
 801baec:	f7e4 fba6 	bl	800023c <__adddf3>
 801baf0:	4605      	mov	r5, r0
 801baf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801baf6:	2c00      	cmp	r4, #0
 801baf8:	f040 808d 	bne.w	801bc16 <_dtoa_r+0x51e>
 801bafc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb00:	4b71      	ldr	r3, [pc, #452]	@ (801bcc8 <_dtoa_r+0x5d0>)
 801bb02:	2200      	movs	r2, #0
 801bb04:	f7e4 fb98 	bl	8000238 <__aeabi_dsub>
 801bb08:	4602      	mov	r2, r0
 801bb0a:	460b      	mov	r3, r1
 801bb0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bb10:	462a      	mov	r2, r5
 801bb12:	4633      	mov	r3, r6
 801bb14:	f7e4 ffd8 	bl	8000ac8 <__aeabi_dcmpgt>
 801bb18:	2800      	cmp	r0, #0
 801bb1a:	f040 828b 	bne.w	801c034 <_dtoa_r+0x93c>
 801bb1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb22:	462a      	mov	r2, r5
 801bb24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801bb28:	f7e4 ffb0 	bl	8000a8c <__aeabi_dcmplt>
 801bb2c:	2800      	cmp	r0, #0
 801bb2e:	f040 8128 	bne.w	801bd82 <_dtoa_r+0x68a>
 801bb32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801bb36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801bb3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	f2c0 815a 	blt.w	801bdf6 <_dtoa_r+0x6fe>
 801bb42:	2f0e      	cmp	r7, #14
 801bb44:	f300 8157 	bgt.w	801bdf6 <_dtoa_r+0x6fe>
 801bb48:	4b5a      	ldr	r3, [pc, #360]	@ (801bcb4 <_dtoa_r+0x5bc>)
 801bb4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801bb4e:	ed93 7b00 	vldr	d7, [r3]
 801bb52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	ed8d 7b00 	vstr	d7, [sp]
 801bb5a:	da03      	bge.n	801bb64 <_dtoa_r+0x46c>
 801bb5c:	9b07      	ldr	r3, [sp, #28]
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	f340 8101 	ble.w	801bd66 <_dtoa_r+0x66e>
 801bb64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801bb68:	4656      	mov	r6, sl
 801bb6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bb6e:	4620      	mov	r0, r4
 801bb70:	4629      	mov	r1, r5
 801bb72:	f7e4 fe43 	bl	80007fc <__aeabi_ddiv>
 801bb76:	f7e4 ffc7 	bl	8000b08 <__aeabi_d2iz>
 801bb7a:	4680      	mov	r8, r0
 801bb7c:	f7e4 fcaa 	bl	80004d4 <__aeabi_i2d>
 801bb80:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bb84:	f7e4 fd10 	bl	80005a8 <__aeabi_dmul>
 801bb88:	4602      	mov	r2, r0
 801bb8a:	460b      	mov	r3, r1
 801bb8c:	4620      	mov	r0, r4
 801bb8e:	4629      	mov	r1, r5
 801bb90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801bb94:	f7e4 fb50 	bl	8000238 <__aeabi_dsub>
 801bb98:	f806 4b01 	strb.w	r4, [r6], #1
 801bb9c:	9d07      	ldr	r5, [sp, #28]
 801bb9e:	eba6 040a 	sub.w	r4, r6, sl
 801bba2:	42a5      	cmp	r5, r4
 801bba4:	4602      	mov	r2, r0
 801bba6:	460b      	mov	r3, r1
 801bba8:	f040 8117 	bne.w	801bdda <_dtoa_r+0x6e2>
 801bbac:	f7e4 fb46 	bl	800023c <__adddf3>
 801bbb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bbb4:	4604      	mov	r4, r0
 801bbb6:	460d      	mov	r5, r1
 801bbb8:	f7e4 ff86 	bl	8000ac8 <__aeabi_dcmpgt>
 801bbbc:	2800      	cmp	r0, #0
 801bbbe:	f040 80f9 	bne.w	801bdb4 <_dtoa_r+0x6bc>
 801bbc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bbc6:	4620      	mov	r0, r4
 801bbc8:	4629      	mov	r1, r5
 801bbca:	f7e4 ff55 	bl	8000a78 <__aeabi_dcmpeq>
 801bbce:	b118      	cbz	r0, 801bbd8 <_dtoa_r+0x4e0>
 801bbd0:	f018 0f01 	tst.w	r8, #1
 801bbd4:	f040 80ee 	bne.w	801bdb4 <_dtoa_r+0x6bc>
 801bbd8:	4649      	mov	r1, r9
 801bbda:	4658      	mov	r0, fp
 801bbdc:	f000 ff26 	bl	801ca2c <_Bfree>
 801bbe0:	2300      	movs	r3, #0
 801bbe2:	7033      	strb	r3, [r6, #0]
 801bbe4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bbe6:	3701      	adds	r7, #1
 801bbe8:	601f      	str	r7, [r3, #0]
 801bbea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	f000 831d 	beq.w	801c22c <_dtoa_r+0xb34>
 801bbf2:	601e      	str	r6, [r3, #0]
 801bbf4:	e31a      	b.n	801c22c <_dtoa_r+0xb34>
 801bbf6:	07e2      	lsls	r2, r4, #31
 801bbf8:	d505      	bpl.n	801bc06 <_dtoa_r+0x50e>
 801bbfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bbfe:	f7e4 fcd3 	bl	80005a8 <__aeabi_dmul>
 801bc02:	3601      	adds	r6, #1
 801bc04:	2301      	movs	r3, #1
 801bc06:	1064      	asrs	r4, r4, #1
 801bc08:	3508      	adds	r5, #8
 801bc0a:	e73f      	b.n	801ba8c <_dtoa_r+0x394>
 801bc0c:	2602      	movs	r6, #2
 801bc0e:	e742      	b.n	801ba96 <_dtoa_r+0x39e>
 801bc10:	9c07      	ldr	r4, [sp, #28]
 801bc12:	9704      	str	r7, [sp, #16]
 801bc14:	e761      	b.n	801bada <_dtoa_r+0x3e2>
 801bc16:	4b27      	ldr	r3, [pc, #156]	@ (801bcb4 <_dtoa_r+0x5bc>)
 801bc18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801bc1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bc1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bc22:	4454      	add	r4, sl
 801bc24:	2900      	cmp	r1, #0
 801bc26:	d053      	beq.n	801bcd0 <_dtoa_r+0x5d8>
 801bc28:	4928      	ldr	r1, [pc, #160]	@ (801bccc <_dtoa_r+0x5d4>)
 801bc2a:	2000      	movs	r0, #0
 801bc2c:	f7e4 fde6 	bl	80007fc <__aeabi_ddiv>
 801bc30:	4633      	mov	r3, r6
 801bc32:	462a      	mov	r2, r5
 801bc34:	f7e4 fb00 	bl	8000238 <__aeabi_dsub>
 801bc38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bc3c:	4656      	mov	r6, sl
 801bc3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bc42:	f7e4 ff61 	bl	8000b08 <__aeabi_d2iz>
 801bc46:	4605      	mov	r5, r0
 801bc48:	f7e4 fc44 	bl	80004d4 <__aeabi_i2d>
 801bc4c:	4602      	mov	r2, r0
 801bc4e:	460b      	mov	r3, r1
 801bc50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bc54:	f7e4 faf0 	bl	8000238 <__aeabi_dsub>
 801bc58:	3530      	adds	r5, #48	@ 0x30
 801bc5a:	4602      	mov	r2, r0
 801bc5c:	460b      	mov	r3, r1
 801bc5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bc62:	f806 5b01 	strb.w	r5, [r6], #1
 801bc66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bc6a:	f7e4 ff0f 	bl	8000a8c <__aeabi_dcmplt>
 801bc6e:	2800      	cmp	r0, #0
 801bc70:	d171      	bne.n	801bd56 <_dtoa_r+0x65e>
 801bc72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bc76:	4911      	ldr	r1, [pc, #68]	@ (801bcbc <_dtoa_r+0x5c4>)
 801bc78:	2000      	movs	r0, #0
 801bc7a:	f7e4 fadd 	bl	8000238 <__aeabi_dsub>
 801bc7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bc82:	f7e4 ff03 	bl	8000a8c <__aeabi_dcmplt>
 801bc86:	2800      	cmp	r0, #0
 801bc88:	f040 8095 	bne.w	801bdb6 <_dtoa_r+0x6be>
 801bc8c:	42a6      	cmp	r6, r4
 801bc8e:	f43f af50 	beq.w	801bb32 <_dtoa_r+0x43a>
 801bc92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801bc96:	4b0a      	ldr	r3, [pc, #40]	@ (801bcc0 <_dtoa_r+0x5c8>)
 801bc98:	2200      	movs	r2, #0
 801bc9a:	f7e4 fc85 	bl	80005a8 <__aeabi_dmul>
 801bc9e:	4b08      	ldr	r3, [pc, #32]	@ (801bcc0 <_dtoa_r+0x5c8>)
 801bca0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bca4:	2200      	movs	r2, #0
 801bca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bcaa:	f7e4 fc7d 	bl	80005a8 <__aeabi_dmul>
 801bcae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bcb2:	e7c4      	b.n	801bc3e <_dtoa_r+0x546>
 801bcb4:	080221d8 	.word	0x080221d8
 801bcb8:	080221b0 	.word	0x080221b0
 801bcbc:	3ff00000 	.word	0x3ff00000
 801bcc0:	40240000 	.word	0x40240000
 801bcc4:	401c0000 	.word	0x401c0000
 801bcc8:	40140000 	.word	0x40140000
 801bccc:	3fe00000 	.word	0x3fe00000
 801bcd0:	4631      	mov	r1, r6
 801bcd2:	4628      	mov	r0, r5
 801bcd4:	f7e4 fc68 	bl	80005a8 <__aeabi_dmul>
 801bcd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bcdc:	9415      	str	r4, [sp, #84]	@ 0x54
 801bcde:	4656      	mov	r6, sl
 801bce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bce4:	f7e4 ff10 	bl	8000b08 <__aeabi_d2iz>
 801bce8:	4605      	mov	r5, r0
 801bcea:	f7e4 fbf3 	bl	80004d4 <__aeabi_i2d>
 801bcee:	4602      	mov	r2, r0
 801bcf0:	460b      	mov	r3, r1
 801bcf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bcf6:	f7e4 fa9f 	bl	8000238 <__aeabi_dsub>
 801bcfa:	3530      	adds	r5, #48	@ 0x30
 801bcfc:	f806 5b01 	strb.w	r5, [r6], #1
 801bd00:	4602      	mov	r2, r0
 801bd02:	460b      	mov	r3, r1
 801bd04:	42a6      	cmp	r6, r4
 801bd06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bd0a:	f04f 0200 	mov.w	r2, #0
 801bd0e:	d124      	bne.n	801bd5a <_dtoa_r+0x662>
 801bd10:	4bac      	ldr	r3, [pc, #688]	@ (801bfc4 <_dtoa_r+0x8cc>)
 801bd12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801bd16:	f7e4 fa91 	bl	800023c <__adddf3>
 801bd1a:	4602      	mov	r2, r0
 801bd1c:	460b      	mov	r3, r1
 801bd1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd22:	f7e4 fed1 	bl	8000ac8 <__aeabi_dcmpgt>
 801bd26:	2800      	cmp	r0, #0
 801bd28:	d145      	bne.n	801bdb6 <_dtoa_r+0x6be>
 801bd2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bd2e:	49a5      	ldr	r1, [pc, #660]	@ (801bfc4 <_dtoa_r+0x8cc>)
 801bd30:	2000      	movs	r0, #0
 801bd32:	f7e4 fa81 	bl	8000238 <__aeabi_dsub>
 801bd36:	4602      	mov	r2, r0
 801bd38:	460b      	mov	r3, r1
 801bd3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd3e:	f7e4 fea5 	bl	8000a8c <__aeabi_dcmplt>
 801bd42:	2800      	cmp	r0, #0
 801bd44:	f43f aef5 	beq.w	801bb32 <_dtoa_r+0x43a>
 801bd48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801bd4a:	1e73      	subs	r3, r6, #1
 801bd4c:	9315      	str	r3, [sp, #84]	@ 0x54
 801bd4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801bd52:	2b30      	cmp	r3, #48	@ 0x30
 801bd54:	d0f8      	beq.n	801bd48 <_dtoa_r+0x650>
 801bd56:	9f04      	ldr	r7, [sp, #16]
 801bd58:	e73e      	b.n	801bbd8 <_dtoa_r+0x4e0>
 801bd5a:	4b9b      	ldr	r3, [pc, #620]	@ (801bfc8 <_dtoa_r+0x8d0>)
 801bd5c:	f7e4 fc24 	bl	80005a8 <__aeabi_dmul>
 801bd60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bd64:	e7bc      	b.n	801bce0 <_dtoa_r+0x5e8>
 801bd66:	d10c      	bne.n	801bd82 <_dtoa_r+0x68a>
 801bd68:	4b98      	ldr	r3, [pc, #608]	@ (801bfcc <_dtoa_r+0x8d4>)
 801bd6a:	2200      	movs	r2, #0
 801bd6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bd70:	f7e4 fc1a 	bl	80005a8 <__aeabi_dmul>
 801bd74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bd78:	f7e4 fe9c 	bl	8000ab4 <__aeabi_dcmpge>
 801bd7c:	2800      	cmp	r0, #0
 801bd7e:	f000 8157 	beq.w	801c030 <_dtoa_r+0x938>
 801bd82:	2400      	movs	r4, #0
 801bd84:	4625      	mov	r5, r4
 801bd86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bd88:	43db      	mvns	r3, r3
 801bd8a:	9304      	str	r3, [sp, #16]
 801bd8c:	4656      	mov	r6, sl
 801bd8e:	2700      	movs	r7, #0
 801bd90:	4621      	mov	r1, r4
 801bd92:	4658      	mov	r0, fp
 801bd94:	f000 fe4a 	bl	801ca2c <_Bfree>
 801bd98:	2d00      	cmp	r5, #0
 801bd9a:	d0dc      	beq.n	801bd56 <_dtoa_r+0x65e>
 801bd9c:	b12f      	cbz	r7, 801bdaa <_dtoa_r+0x6b2>
 801bd9e:	42af      	cmp	r7, r5
 801bda0:	d003      	beq.n	801bdaa <_dtoa_r+0x6b2>
 801bda2:	4639      	mov	r1, r7
 801bda4:	4658      	mov	r0, fp
 801bda6:	f000 fe41 	bl	801ca2c <_Bfree>
 801bdaa:	4629      	mov	r1, r5
 801bdac:	4658      	mov	r0, fp
 801bdae:	f000 fe3d 	bl	801ca2c <_Bfree>
 801bdb2:	e7d0      	b.n	801bd56 <_dtoa_r+0x65e>
 801bdb4:	9704      	str	r7, [sp, #16]
 801bdb6:	4633      	mov	r3, r6
 801bdb8:	461e      	mov	r6, r3
 801bdba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bdbe:	2a39      	cmp	r2, #57	@ 0x39
 801bdc0:	d107      	bne.n	801bdd2 <_dtoa_r+0x6da>
 801bdc2:	459a      	cmp	sl, r3
 801bdc4:	d1f8      	bne.n	801bdb8 <_dtoa_r+0x6c0>
 801bdc6:	9a04      	ldr	r2, [sp, #16]
 801bdc8:	3201      	adds	r2, #1
 801bdca:	9204      	str	r2, [sp, #16]
 801bdcc:	2230      	movs	r2, #48	@ 0x30
 801bdce:	f88a 2000 	strb.w	r2, [sl]
 801bdd2:	781a      	ldrb	r2, [r3, #0]
 801bdd4:	3201      	adds	r2, #1
 801bdd6:	701a      	strb	r2, [r3, #0]
 801bdd8:	e7bd      	b.n	801bd56 <_dtoa_r+0x65e>
 801bdda:	4b7b      	ldr	r3, [pc, #492]	@ (801bfc8 <_dtoa_r+0x8d0>)
 801bddc:	2200      	movs	r2, #0
 801bdde:	f7e4 fbe3 	bl	80005a8 <__aeabi_dmul>
 801bde2:	2200      	movs	r2, #0
 801bde4:	2300      	movs	r3, #0
 801bde6:	4604      	mov	r4, r0
 801bde8:	460d      	mov	r5, r1
 801bdea:	f7e4 fe45 	bl	8000a78 <__aeabi_dcmpeq>
 801bdee:	2800      	cmp	r0, #0
 801bdf0:	f43f aebb 	beq.w	801bb6a <_dtoa_r+0x472>
 801bdf4:	e6f0      	b.n	801bbd8 <_dtoa_r+0x4e0>
 801bdf6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bdf8:	2a00      	cmp	r2, #0
 801bdfa:	f000 80db 	beq.w	801bfb4 <_dtoa_r+0x8bc>
 801bdfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801be00:	2a01      	cmp	r2, #1
 801be02:	f300 80bf 	bgt.w	801bf84 <_dtoa_r+0x88c>
 801be06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801be08:	2a00      	cmp	r2, #0
 801be0a:	f000 80b7 	beq.w	801bf7c <_dtoa_r+0x884>
 801be0e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801be12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801be14:	4646      	mov	r6, r8
 801be16:	9a08      	ldr	r2, [sp, #32]
 801be18:	2101      	movs	r1, #1
 801be1a:	441a      	add	r2, r3
 801be1c:	4658      	mov	r0, fp
 801be1e:	4498      	add	r8, r3
 801be20:	9208      	str	r2, [sp, #32]
 801be22:	f000 ff01 	bl	801cc28 <__i2b>
 801be26:	4605      	mov	r5, r0
 801be28:	b15e      	cbz	r6, 801be42 <_dtoa_r+0x74a>
 801be2a:	9b08      	ldr	r3, [sp, #32]
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	dd08      	ble.n	801be42 <_dtoa_r+0x74a>
 801be30:	42b3      	cmp	r3, r6
 801be32:	9a08      	ldr	r2, [sp, #32]
 801be34:	bfa8      	it	ge
 801be36:	4633      	movge	r3, r6
 801be38:	eba8 0803 	sub.w	r8, r8, r3
 801be3c:	1af6      	subs	r6, r6, r3
 801be3e:	1ad3      	subs	r3, r2, r3
 801be40:	9308      	str	r3, [sp, #32]
 801be42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801be44:	b1f3      	cbz	r3, 801be84 <_dtoa_r+0x78c>
 801be46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801be48:	2b00      	cmp	r3, #0
 801be4a:	f000 80b7 	beq.w	801bfbc <_dtoa_r+0x8c4>
 801be4e:	b18c      	cbz	r4, 801be74 <_dtoa_r+0x77c>
 801be50:	4629      	mov	r1, r5
 801be52:	4622      	mov	r2, r4
 801be54:	4658      	mov	r0, fp
 801be56:	f000 ffa7 	bl	801cda8 <__pow5mult>
 801be5a:	464a      	mov	r2, r9
 801be5c:	4601      	mov	r1, r0
 801be5e:	4605      	mov	r5, r0
 801be60:	4658      	mov	r0, fp
 801be62:	f000 fef7 	bl	801cc54 <__multiply>
 801be66:	4649      	mov	r1, r9
 801be68:	9004      	str	r0, [sp, #16]
 801be6a:	4658      	mov	r0, fp
 801be6c:	f000 fdde 	bl	801ca2c <_Bfree>
 801be70:	9b04      	ldr	r3, [sp, #16]
 801be72:	4699      	mov	r9, r3
 801be74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801be76:	1b1a      	subs	r2, r3, r4
 801be78:	d004      	beq.n	801be84 <_dtoa_r+0x78c>
 801be7a:	4649      	mov	r1, r9
 801be7c:	4658      	mov	r0, fp
 801be7e:	f000 ff93 	bl	801cda8 <__pow5mult>
 801be82:	4681      	mov	r9, r0
 801be84:	2101      	movs	r1, #1
 801be86:	4658      	mov	r0, fp
 801be88:	f000 fece 	bl	801cc28 <__i2b>
 801be8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801be8e:	4604      	mov	r4, r0
 801be90:	2b00      	cmp	r3, #0
 801be92:	f000 81cf 	beq.w	801c234 <_dtoa_r+0xb3c>
 801be96:	461a      	mov	r2, r3
 801be98:	4601      	mov	r1, r0
 801be9a:	4658      	mov	r0, fp
 801be9c:	f000 ff84 	bl	801cda8 <__pow5mult>
 801bea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bea2:	2b01      	cmp	r3, #1
 801bea4:	4604      	mov	r4, r0
 801bea6:	f300 8095 	bgt.w	801bfd4 <_dtoa_r+0x8dc>
 801beaa:	9b02      	ldr	r3, [sp, #8]
 801beac:	2b00      	cmp	r3, #0
 801beae:	f040 8087 	bne.w	801bfc0 <_dtoa_r+0x8c8>
 801beb2:	9b03      	ldr	r3, [sp, #12]
 801beb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801beb8:	2b00      	cmp	r3, #0
 801beba:	f040 8089 	bne.w	801bfd0 <_dtoa_r+0x8d8>
 801bebe:	9b03      	ldr	r3, [sp, #12]
 801bec0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801bec4:	0d1b      	lsrs	r3, r3, #20
 801bec6:	051b      	lsls	r3, r3, #20
 801bec8:	b12b      	cbz	r3, 801bed6 <_dtoa_r+0x7de>
 801beca:	9b08      	ldr	r3, [sp, #32]
 801becc:	3301      	adds	r3, #1
 801bece:	9308      	str	r3, [sp, #32]
 801bed0:	f108 0801 	add.w	r8, r8, #1
 801bed4:	2301      	movs	r3, #1
 801bed6:	930a      	str	r3, [sp, #40]	@ 0x28
 801bed8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801beda:	2b00      	cmp	r3, #0
 801bedc:	f000 81b0 	beq.w	801c240 <_dtoa_r+0xb48>
 801bee0:	6923      	ldr	r3, [r4, #16]
 801bee2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801bee6:	6918      	ldr	r0, [r3, #16]
 801bee8:	f000 fe52 	bl	801cb90 <__hi0bits>
 801beec:	f1c0 0020 	rsb	r0, r0, #32
 801bef0:	9b08      	ldr	r3, [sp, #32]
 801bef2:	4418      	add	r0, r3
 801bef4:	f010 001f 	ands.w	r0, r0, #31
 801bef8:	d077      	beq.n	801bfea <_dtoa_r+0x8f2>
 801befa:	f1c0 0320 	rsb	r3, r0, #32
 801befe:	2b04      	cmp	r3, #4
 801bf00:	dd6b      	ble.n	801bfda <_dtoa_r+0x8e2>
 801bf02:	9b08      	ldr	r3, [sp, #32]
 801bf04:	f1c0 001c 	rsb	r0, r0, #28
 801bf08:	4403      	add	r3, r0
 801bf0a:	4480      	add	r8, r0
 801bf0c:	4406      	add	r6, r0
 801bf0e:	9308      	str	r3, [sp, #32]
 801bf10:	f1b8 0f00 	cmp.w	r8, #0
 801bf14:	dd05      	ble.n	801bf22 <_dtoa_r+0x82a>
 801bf16:	4649      	mov	r1, r9
 801bf18:	4642      	mov	r2, r8
 801bf1a:	4658      	mov	r0, fp
 801bf1c:	f000 ff9e 	bl	801ce5c <__lshift>
 801bf20:	4681      	mov	r9, r0
 801bf22:	9b08      	ldr	r3, [sp, #32]
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	dd05      	ble.n	801bf34 <_dtoa_r+0x83c>
 801bf28:	4621      	mov	r1, r4
 801bf2a:	461a      	mov	r2, r3
 801bf2c:	4658      	mov	r0, fp
 801bf2e:	f000 ff95 	bl	801ce5c <__lshift>
 801bf32:	4604      	mov	r4, r0
 801bf34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d059      	beq.n	801bfee <_dtoa_r+0x8f6>
 801bf3a:	4621      	mov	r1, r4
 801bf3c:	4648      	mov	r0, r9
 801bf3e:	f000 fff9 	bl	801cf34 <__mcmp>
 801bf42:	2800      	cmp	r0, #0
 801bf44:	da53      	bge.n	801bfee <_dtoa_r+0x8f6>
 801bf46:	1e7b      	subs	r3, r7, #1
 801bf48:	9304      	str	r3, [sp, #16]
 801bf4a:	4649      	mov	r1, r9
 801bf4c:	2300      	movs	r3, #0
 801bf4e:	220a      	movs	r2, #10
 801bf50:	4658      	mov	r0, fp
 801bf52:	f000 fd8d 	bl	801ca70 <__multadd>
 801bf56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bf58:	4681      	mov	r9, r0
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	f000 8172 	beq.w	801c244 <_dtoa_r+0xb4c>
 801bf60:	2300      	movs	r3, #0
 801bf62:	4629      	mov	r1, r5
 801bf64:	220a      	movs	r2, #10
 801bf66:	4658      	mov	r0, fp
 801bf68:	f000 fd82 	bl	801ca70 <__multadd>
 801bf6c:	9b00      	ldr	r3, [sp, #0]
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	4605      	mov	r5, r0
 801bf72:	dc67      	bgt.n	801c044 <_dtoa_r+0x94c>
 801bf74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf76:	2b02      	cmp	r3, #2
 801bf78:	dc41      	bgt.n	801bffe <_dtoa_r+0x906>
 801bf7a:	e063      	b.n	801c044 <_dtoa_r+0x94c>
 801bf7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bf7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801bf82:	e746      	b.n	801be12 <_dtoa_r+0x71a>
 801bf84:	9b07      	ldr	r3, [sp, #28]
 801bf86:	1e5c      	subs	r4, r3, #1
 801bf88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bf8a:	42a3      	cmp	r3, r4
 801bf8c:	bfbf      	itttt	lt
 801bf8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801bf90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801bf92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801bf94:	1ae3      	sublt	r3, r4, r3
 801bf96:	bfb4      	ite	lt
 801bf98:	18d2      	addlt	r2, r2, r3
 801bf9a:	1b1c      	subge	r4, r3, r4
 801bf9c:	9b07      	ldr	r3, [sp, #28]
 801bf9e:	bfbc      	itt	lt
 801bfa0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801bfa2:	2400      	movlt	r4, #0
 801bfa4:	2b00      	cmp	r3, #0
 801bfa6:	bfb5      	itete	lt
 801bfa8:	eba8 0603 	sublt.w	r6, r8, r3
 801bfac:	9b07      	ldrge	r3, [sp, #28]
 801bfae:	2300      	movlt	r3, #0
 801bfb0:	4646      	movge	r6, r8
 801bfb2:	e730      	b.n	801be16 <_dtoa_r+0x71e>
 801bfb4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801bfb6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801bfb8:	4646      	mov	r6, r8
 801bfba:	e735      	b.n	801be28 <_dtoa_r+0x730>
 801bfbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bfbe:	e75c      	b.n	801be7a <_dtoa_r+0x782>
 801bfc0:	2300      	movs	r3, #0
 801bfc2:	e788      	b.n	801bed6 <_dtoa_r+0x7de>
 801bfc4:	3fe00000 	.word	0x3fe00000
 801bfc8:	40240000 	.word	0x40240000
 801bfcc:	40140000 	.word	0x40140000
 801bfd0:	9b02      	ldr	r3, [sp, #8]
 801bfd2:	e780      	b.n	801bed6 <_dtoa_r+0x7de>
 801bfd4:	2300      	movs	r3, #0
 801bfd6:	930a      	str	r3, [sp, #40]	@ 0x28
 801bfd8:	e782      	b.n	801bee0 <_dtoa_r+0x7e8>
 801bfda:	d099      	beq.n	801bf10 <_dtoa_r+0x818>
 801bfdc:	9a08      	ldr	r2, [sp, #32]
 801bfde:	331c      	adds	r3, #28
 801bfe0:	441a      	add	r2, r3
 801bfe2:	4498      	add	r8, r3
 801bfe4:	441e      	add	r6, r3
 801bfe6:	9208      	str	r2, [sp, #32]
 801bfe8:	e792      	b.n	801bf10 <_dtoa_r+0x818>
 801bfea:	4603      	mov	r3, r0
 801bfec:	e7f6      	b.n	801bfdc <_dtoa_r+0x8e4>
 801bfee:	9b07      	ldr	r3, [sp, #28]
 801bff0:	9704      	str	r7, [sp, #16]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	dc20      	bgt.n	801c038 <_dtoa_r+0x940>
 801bff6:	9300      	str	r3, [sp, #0]
 801bff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bffa:	2b02      	cmp	r3, #2
 801bffc:	dd1e      	ble.n	801c03c <_dtoa_r+0x944>
 801bffe:	9b00      	ldr	r3, [sp, #0]
 801c000:	2b00      	cmp	r3, #0
 801c002:	f47f aec0 	bne.w	801bd86 <_dtoa_r+0x68e>
 801c006:	4621      	mov	r1, r4
 801c008:	2205      	movs	r2, #5
 801c00a:	4658      	mov	r0, fp
 801c00c:	f000 fd30 	bl	801ca70 <__multadd>
 801c010:	4601      	mov	r1, r0
 801c012:	4604      	mov	r4, r0
 801c014:	4648      	mov	r0, r9
 801c016:	f000 ff8d 	bl	801cf34 <__mcmp>
 801c01a:	2800      	cmp	r0, #0
 801c01c:	f77f aeb3 	ble.w	801bd86 <_dtoa_r+0x68e>
 801c020:	4656      	mov	r6, sl
 801c022:	2331      	movs	r3, #49	@ 0x31
 801c024:	f806 3b01 	strb.w	r3, [r6], #1
 801c028:	9b04      	ldr	r3, [sp, #16]
 801c02a:	3301      	adds	r3, #1
 801c02c:	9304      	str	r3, [sp, #16]
 801c02e:	e6ae      	b.n	801bd8e <_dtoa_r+0x696>
 801c030:	9c07      	ldr	r4, [sp, #28]
 801c032:	9704      	str	r7, [sp, #16]
 801c034:	4625      	mov	r5, r4
 801c036:	e7f3      	b.n	801c020 <_dtoa_r+0x928>
 801c038:	9b07      	ldr	r3, [sp, #28]
 801c03a:	9300      	str	r3, [sp, #0]
 801c03c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c03e:	2b00      	cmp	r3, #0
 801c040:	f000 8104 	beq.w	801c24c <_dtoa_r+0xb54>
 801c044:	2e00      	cmp	r6, #0
 801c046:	dd05      	ble.n	801c054 <_dtoa_r+0x95c>
 801c048:	4629      	mov	r1, r5
 801c04a:	4632      	mov	r2, r6
 801c04c:	4658      	mov	r0, fp
 801c04e:	f000 ff05 	bl	801ce5c <__lshift>
 801c052:	4605      	mov	r5, r0
 801c054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c056:	2b00      	cmp	r3, #0
 801c058:	d05a      	beq.n	801c110 <_dtoa_r+0xa18>
 801c05a:	6869      	ldr	r1, [r5, #4]
 801c05c:	4658      	mov	r0, fp
 801c05e:	f000 fca5 	bl	801c9ac <_Balloc>
 801c062:	4606      	mov	r6, r0
 801c064:	b928      	cbnz	r0, 801c072 <_dtoa_r+0x97a>
 801c066:	4b84      	ldr	r3, [pc, #528]	@ (801c278 <_dtoa_r+0xb80>)
 801c068:	4602      	mov	r2, r0
 801c06a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801c06e:	f7ff bb5a 	b.w	801b726 <_dtoa_r+0x2e>
 801c072:	692a      	ldr	r2, [r5, #16]
 801c074:	3202      	adds	r2, #2
 801c076:	0092      	lsls	r2, r2, #2
 801c078:	f105 010c 	add.w	r1, r5, #12
 801c07c:	300c      	adds	r0, #12
 801c07e:	f7ff fa78 	bl	801b572 <memcpy>
 801c082:	2201      	movs	r2, #1
 801c084:	4631      	mov	r1, r6
 801c086:	4658      	mov	r0, fp
 801c088:	f000 fee8 	bl	801ce5c <__lshift>
 801c08c:	f10a 0301 	add.w	r3, sl, #1
 801c090:	9307      	str	r3, [sp, #28]
 801c092:	9b00      	ldr	r3, [sp, #0]
 801c094:	4453      	add	r3, sl
 801c096:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c098:	9b02      	ldr	r3, [sp, #8]
 801c09a:	f003 0301 	and.w	r3, r3, #1
 801c09e:	462f      	mov	r7, r5
 801c0a0:	930a      	str	r3, [sp, #40]	@ 0x28
 801c0a2:	4605      	mov	r5, r0
 801c0a4:	9b07      	ldr	r3, [sp, #28]
 801c0a6:	4621      	mov	r1, r4
 801c0a8:	3b01      	subs	r3, #1
 801c0aa:	4648      	mov	r0, r9
 801c0ac:	9300      	str	r3, [sp, #0]
 801c0ae:	f7ff fa9b 	bl	801b5e8 <quorem>
 801c0b2:	4639      	mov	r1, r7
 801c0b4:	9002      	str	r0, [sp, #8]
 801c0b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c0ba:	4648      	mov	r0, r9
 801c0bc:	f000 ff3a 	bl	801cf34 <__mcmp>
 801c0c0:	462a      	mov	r2, r5
 801c0c2:	9008      	str	r0, [sp, #32]
 801c0c4:	4621      	mov	r1, r4
 801c0c6:	4658      	mov	r0, fp
 801c0c8:	f000 ff50 	bl	801cf6c <__mdiff>
 801c0cc:	68c2      	ldr	r2, [r0, #12]
 801c0ce:	4606      	mov	r6, r0
 801c0d0:	bb02      	cbnz	r2, 801c114 <_dtoa_r+0xa1c>
 801c0d2:	4601      	mov	r1, r0
 801c0d4:	4648      	mov	r0, r9
 801c0d6:	f000 ff2d 	bl	801cf34 <__mcmp>
 801c0da:	4602      	mov	r2, r0
 801c0dc:	4631      	mov	r1, r6
 801c0de:	4658      	mov	r0, fp
 801c0e0:	920e      	str	r2, [sp, #56]	@ 0x38
 801c0e2:	f000 fca3 	bl	801ca2c <_Bfree>
 801c0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c0e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c0ea:	9e07      	ldr	r6, [sp, #28]
 801c0ec:	ea43 0102 	orr.w	r1, r3, r2
 801c0f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c0f2:	4319      	orrs	r1, r3
 801c0f4:	d110      	bne.n	801c118 <_dtoa_r+0xa20>
 801c0f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c0fa:	d029      	beq.n	801c150 <_dtoa_r+0xa58>
 801c0fc:	9b08      	ldr	r3, [sp, #32]
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	dd02      	ble.n	801c108 <_dtoa_r+0xa10>
 801c102:	9b02      	ldr	r3, [sp, #8]
 801c104:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801c108:	9b00      	ldr	r3, [sp, #0]
 801c10a:	f883 8000 	strb.w	r8, [r3]
 801c10e:	e63f      	b.n	801bd90 <_dtoa_r+0x698>
 801c110:	4628      	mov	r0, r5
 801c112:	e7bb      	b.n	801c08c <_dtoa_r+0x994>
 801c114:	2201      	movs	r2, #1
 801c116:	e7e1      	b.n	801c0dc <_dtoa_r+0x9e4>
 801c118:	9b08      	ldr	r3, [sp, #32]
 801c11a:	2b00      	cmp	r3, #0
 801c11c:	db04      	blt.n	801c128 <_dtoa_r+0xa30>
 801c11e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c120:	430b      	orrs	r3, r1
 801c122:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c124:	430b      	orrs	r3, r1
 801c126:	d120      	bne.n	801c16a <_dtoa_r+0xa72>
 801c128:	2a00      	cmp	r2, #0
 801c12a:	dded      	ble.n	801c108 <_dtoa_r+0xa10>
 801c12c:	4649      	mov	r1, r9
 801c12e:	2201      	movs	r2, #1
 801c130:	4658      	mov	r0, fp
 801c132:	f000 fe93 	bl	801ce5c <__lshift>
 801c136:	4621      	mov	r1, r4
 801c138:	4681      	mov	r9, r0
 801c13a:	f000 fefb 	bl	801cf34 <__mcmp>
 801c13e:	2800      	cmp	r0, #0
 801c140:	dc03      	bgt.n	801c14a <_dtoa_r+0xa52>
 801c142:	d1e1      	bne.n	801c108 <_dtoa_r+0xa10>
 801c144:	f018 0f01 	tst.w	r8, #1
 801c148:	d0de      	beq.n	801c108 <_dtoa_r+0xa10>
 801c14a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c14e:	d1d8      	bne.n	801c102 <_dtoa_r+0xa0a>
 801c150:	9a00      	ldr	r2, [sp, #0]
 801c152:	2339      	movs	r3, #57	@ 0x39
 801c154:	7013      	strb	r3, [r2, #0]
 801c156:	4633      	mov	r3, r6
 801c158:	461e      	mov	r6, r3
 801c15a:	3b01      	subs	r3, #1
 801c15c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c160:	2a39      	cmp	r2, #57	@ 0x39
 801c162:	d052      	beq.n	801c20a <_dtoa_r+0xb12>
 801c164:	3201      	adds	r2, #1
 801c166:	701a      	strb	r2, [r3, #0]
 801c168:	e612      	b.n	801bd90 <_dtoa_r+0x698>
 801c16a:	2a00      	cmp	r2, #0
 801c16c:	dd07      	ble.n	801c17e <_dtoa_r+0xa86>
 801c16e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c172:	d0ed      	beq.n	801c150 <_dtoa_r+0xa58>
 801c174:	9a00      	ldr	r2, [sp, #0]
 801c176:	f108 0301 	add.w	r3, r8, #1
 801c17a:	7013      	strb	r3, [r2, #0]
 801c17c:	e608      	b.n	801bd90 <_dtoa_r+0x698>
 801c17e:	9b07      	ldr	r3, [sp, #28]
 801c180:	9a07      	ldr	r2, [sp, #28]
 801c182:	f803 8c01 	strb.w	r8, [r3, #-1]
 801c186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c188:	4293      	cmp	r3, r2
 801c18a:	d028      	beq.n	801c1de <_dtoa_r+0xae6>
 801c18c:	4649      	mov	r1, r9
 801c18e:	2300      	movs	r3, #0
 801c190:	220a      	movs	r2, #10
 801c192:	4658      	mov	r0, fp
 801c194:	f000 fc6c 	bl	801ca70 <__multadd>
 801c198:	42af      	cmp	r7, r5
 801c19a:	4681      	mov	r9, r0
 801c19c:	f04f 0300 	mov.w	r3, #0
 801c1a0:	f04f 020a 	mov.w	r2, #10
 801c1a4:	4639      	mov	r1, r7
 801c1a6:	4658      	mov	r0, fp
 801c1a8:	d107      	bne.n	801c1ba <_dtoa_r+0xac2>
 801c1aa:	f000 fc61 	bl	801ca70 <__multadd>
 801c1ae:	4607      	mov	r7, r0
 801c1b0:	4605      	mov	r5, r0
 801c1b2:	9b07      	ldr	r3, [sp, #28]
 801c1b4:	3301      	adds	r3, #1
 801c1b6:	9307      	str	r3, [sp, #28]
 801c1b8:	e774      	b.n	801c0a4 <_dtoa_r+0x9ac>
 801c1ba:	f000 fc59 	bl	801ca70 <__multadd>
 801c1be:	4629      	mov	r1, r5
 801c1c0:	4607      	mov	r7, r0
 801c1c2:	2300      	movs	r3, #0
 801c1c4:	220a      	movs	r2, #10
 801c1c6:	4658      	mov	r0, fp
 801c1c8:	f000 fc52 	bl	801ca70 <__multadd>
 801c1cc:	4605      	mov	r5, r0
 801c1ce:	e7f0      	b.n	801c1b2 <_dtoa_r+0xaba>
 801c1d0:	9b00      	ldr	r3, [sp, #0]
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	bfcc      	ite	gt
 801c1d6:	461e      	movgt	r6, r3
 801c1d8:	2601      	movle	r6, #1
 801c1da:	4456      	add	r6, sl
 801c1dc:	2700      	movs	r7, #0
 801c1de:	4649      	mov	r1, r9
 801c1e0:	2201      	movs	r2, #1
 801c1e2:	4658      	mov	r0, fp
 801c1e4:	f000 fe3a 	bl	801ce5c <__lshift>
 801c1e8:	4621      	mov	r1, r4
 801c1ea:	4681      	mov	r9, r0
 801c1ec:	f000 fea2 	bl	801cf34 <__mcmp>
 801c1f0:	2800      	cmp	r0, #0
 801c1f2:	dcb0      	bgt.n	801c156 <_dtoa_r+0xa5e>
 801c1f4:	d102      	bne.n	801c1fc <_dtoa_r+0xb04>
 801c1f6:	f018 0f01 	tst.w	r8, #1
 801c1fa:	d1ac      	bne.n	801c156 <_dtoa_r+0xa5e>
 801c1fc:	4633      	mov	r3, r6
 801c1fe:	461e      	mov	r6, r3
 801c200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c204:	2a30      	cmp	r2, #48	@ 0x30
 801c206:	d0fa      	beq.n	801c1fe <_dtoa_r+0xb06>
 801c208:	e5c2      	b.n	801bd90 <_dtoa_r+0x698>
 801c20a:	459a      	cmp	sl, r3
 801c20c:	d1a4      	bne.n	801c158 <_dtoa_r+0xa60>
 801c20e:	9b04      	ldr	r3, [sp, #16]
 801c210:	3301      	adds	r3, #1
 801c212:	9304      	str	r3, [sp, #16]
 801c214:	2331      	movs	r3, #49	@ 0x31
 801c216:	f88a 3000 	strb.w	r3, [sl]
 801c21a:	e5b9      	b.n	801bd90 <_dtoa_r+0x698>
 801c21c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c21e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801c27c <_dtoa_r+0xb84>
 801c222:	b11b      	cbz	r3, 801c22c <_dtoa_r+0xb34>
 801c224:	f10a 0308 	add.w	r3, sl, #8
 801c228:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801c22a:	6013      	str	r3, [r2, #0]
 801c22c:	4650      	mov	r0, sl
 801c22e:	b019      	add	sp, #100	@ 0x64
 801c230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c236:	2b01      	cmp	r3, #1
 801c238:	f77f ae37 	ble.w	801beaa <_dtoa_r+0x7b2>
 801c23c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c23e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c240:	2001      	movs	r0, #1
 801c242:	e655      	b.n	801bef0 <_dtoa_r+0x7f8>
 801c244:	9b00      	ldr	r3, [sp, #0]
 801c246:	2b00      	cmp	r3, #0
 801c248:	f77f aed6 	ble.w	801bff8 <_dtoa_r+0x900>
 801c24c:	4656      	mov	r6, sl
 801c24e:	4621      	mov	r1, r4
 801c250:	4648      	mov	r0, r9
 801c252:	f7ff f9c9 	bl	801b5e8 <quorem>
 801c256:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c25a:	f806 8b01 	strb.w	r8, [r6], #1
 801c25e:	9b00      	ldr	r3, [sp, #0]
 801c260:	eba6 020a 	sub.w	r2, r6, sl
 801c264:	4293      	cmp	r3, r2
 801c266:	ddb3      	ble.n	801c1d0 <_dtoa_r+0xad8>
 801c268:	4649      	mov	r1, r9
 801c26a:	2300      	movs	r3, #0
 801c26c:	220a      	movs	r2, #10
 801c26e:	4658      	mov	r0, fp
 801c270:	f000 fbfe 	bl	801ca70 <__multadd>
 801c274:	4681      	mov	r9, r0
 801c276:	e7ea      	b.n	801c24e <_dtoa_r+0xb56>
 801c278:	080220d4 	.word	0x080220d4
 801c27c:	0802206f 	.word	0x0802206f

0801c280 <_free_r>:
 801c280:	b538      	push	{r3, r4, r5, lr}
 801c282:	4605      	mov	r5, r0
 801c284:	2900      	cmp	r1, #0
 801c286:	d041      	beq.n	801c30c <_free_r+0x8c>
 801c288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c28c:	1f0c      	subs	r4, r1, #4
 801c28e:	2b00      	cmp	r3, #0
 801c290:	bfb8      	it	lt
 801c292:	18e4      	addlt	r4, r4, r3
 801c294:	f7fd f98e 	bl	80195b4 <__malloc_lock>
 801c298:	4a1d      	ldr	r2, [pc, #116]	@ (801c310 <_free_r+0x90>)
 801c29a:	6813      	ldr	r3, [r2, #0]
 801c29c:	b933      	cbnz	r3, 801c2ac <_free_r+0x2c>
 801c29e:	6063      	str	r3, [r4, #4]
 801c2a0:	6014      	str	r4, [r2, #0]
 801c2a2:	4628      	mov	r0, r5
 801c2a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c2a8:	f7fd b98a 	b.w	80195c0 <__malloc_unlock>
 801c2ac:	42a3      	cmp	r3, r4
 801c2ae:	d908      	bls.n	801c2c2 <_free_r+0x42>
 801c2b0:	6820      	ldr	r0, [r4, #0]
 801c2b2:	1821      	adds	r1, r4, r0
 801c2b4:	428b      	cmp	r3, r1
 801c2b6:	bf01      	itttt	eq
 801c2b8:	6819      	ldreq	r1, [r3, #0]
 801c2ba:	685b      	ldreq	r3, [r3, #4]
 801c2bc:	1809      	addeq	r1, r1, r0
 801c2be:	6021      	streq	r1, [r4, #0]
 801c2c0:	e7ed      	b.n	801c29e <_free_r+0x1e>
 801c2c2:	461a      	mov	r2, r3
 801c2c4:	685b      	ldr	r3, [r3, #4]
 801c2c6:	b10b      	cbz	r3, 801c2cc <_free_r+0x4c>
 801c2c8:	42a3      	cmp	r3, r4
 801c2ca:	d9fa      	bls.n	801c2c2 <_free_r+0x42>
 801c2cc:	6811      	ldr	r1, [r2, #0]
 801c2ce:	1850      	adds	r0, r2, r1
 801c2d0:	42a0      	cmp	r0, r4
 801c2d2:	d10b      	bne.n	801c2ec <_free_r+0x6c>
 801c2d4:	6820      	ldr	r0, [r4, #0]
 801c2d6:	4401      	add	r1, r0
 801c2d8:	1850      	adds	r0, r2, r1
 801c2da:	4283      	cmp	r3, r0
 801c2dc:	6011      	str	r1, [r2, #0]
 801c2de:	d1e0      	bne.n	801c2a2 <_free_r+0x22>
 801c2e0:	6818      	ldr	r0, [r3, #0]
 801c2e2:	685b      	ldr	r3, [r3, #4]
 801c2e4:	6053      	str	r3, [r2, #4]
 801c2e6:	4408      	add	r0, r1
 801c2e8:	6010      	str	r0, [r2, #0]
 801c2ea:	e7da      	b.n	801c2a2 <_free_r+0x22>
 801c2ec:	d902      	bls.n	801c2f4 <_free_r+0x74>
 801c2ee:	230c      	movs	r3, #12
 801c2f0:	602b      	str	r3, [r5, #0]
 801c2f2:	e7d6      	b.n	801c2a2 <_free_r+0x22>
 801c2f4:	6820      	ldr	r0, [r4, #0]
 801c2f6:	1821      	adds	r1, r4, r0
 801c2f8:	428b      	cmp	r3, r1
 801c2fa:	bf04      	itt	eq
 801c2fc:	6819      	ldreq	r1, [r3, #0]
 801c2fe:	685b      	ldreq	r3, [r3, #4]
 801c300:	6063      	str	r3, [r4, #4]
 801c302:	bf04      	itt	eq
 801c304:	1809      	addeq	r1, r1, r0
 801c306:	6021      	streq	r1, [r4, #0]
 801c308:	6054      	str	r4, [r2, #4]
 801c30a:	e7ca      	b.n	801c2a2 <_free_r+0x22>
 801c30c:	bd38      	pop	{r3, r4, r5, pc}
 801c30e:	bf00      	nop
 801c310:	20002fec 	.word	0x20002fec

0801c314 <rshift>:
 801c314:	6903      	ldr	r3, [r0, #16]
 801c316:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c31a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c31e:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c322:	f100 0414 	add.w	r4, r0, #20
 801c326:	dd45      	ble.n	801c3b4 <rshift+0xa0>
 801c328:	f011 011f 	ands.w	r1, r1, #31
 801c32c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c330:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c334:	d10c      	bne.n	801c350 <rshift+0x3c>
 801c336:	f100 0710 	add.w	r7, r0, #16
 801c33a:	4629      	mov	r1, r5
 801c33c:	42b1      	cmp	r1, r6
 801c33e:	d334      	bcc.n	801c3aa <rshift+0x96>
 801c340:	1a9b      	subs	r3, r3, r2
 801c342:	009b      	lsls	r3, r3, #2
 801c344:	1eea      	subs	r2, r5, #3
 801c346:	4296      	cmp	r6, r2
 801c348:	bf38      	it	cc
 801c34a:	2300      	movcc	r3, #0
 801c34c:	4423      	add	r3, r4
 801c34e:	e015      	b.n	801c37c <rshift+0x68>
 801c350:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c354:	f1c1 0820 	rsb	r8, r1, #32
 801c358:	40cf      	lsrs	r7, r1
 801c35a:	f105 0e04 	add.w	lr, r5, #4
 801c35e:	46a1      	mov	r9, r4
 801c360:	4576      	cmp	r6, lr
 801c362:	46f4      	mov	ip, lr
 801c364:	d815      	bhi.n	801c392 <rshift+0x7e>
 801c366:	1a9a      	subs	r2, r3, r2
 801c368:	0092      	lsls	r2, r2, #2
 801c36a:	3a04      	subs	r2, #4
 801c36c:	3501      	adds	r5, #1
 801c36e:	42ae      	cmp	r6, r5
 801c370:	bf38      	it	cc
 801c372:	2200      	movcc	r2, #0
 801c374:	18a3      	adds	r3, r4, r2
 801c376:	50a7      	str	r7, [r4, r2]
 801c378:	b107      	cbz	r7, 801c37c <rshift+0x68>
 801c37a:	3304      	adds	r3, #4
 801c37c:	1b1a      	subs	r2, r3, r4
 801c37e:	42a3      	cmp	r3, r4
 801c380:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c384:	bf08      	it	eq
 801c386:	2300      	moveq	r3, #0
 801c388:	6102      	str	r2, [r0, #16]
 801c38a:	bf08      	it	eq
 801c38c:	6143      	streq	r3, [r0, #20]
 801c38e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c392:	f8dc c000 	ldr.w	ip, [ip]
 801c396:	fa0c fc08 	lsl.w	ip, ip, r8
 801c39a:	ea4c 0707 	orr.w	r7, ip, r7
 801c39e:	f849 7b04 	str.w	r7, [r9], #4
 801c3a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c3a6:	40cf      	lsrs	r7, r1
 801c3a8:	e7da      	b.n	801c360 <rshift+0x4c>
 801c3aa:	f851 cb04 	ldr.w	ip, [r1], #4
 801c3ae:	f847 cf04 	str.w	ip, [r7, #4]!
 801c3b2:	e7c3      	b.n	801c33c <rshift+0x28>
 801c3b4:	4623      	mov	r3, r4
 801c3b6:	e7e1      	b.n	801c37c <rshift+0x68>

0801c3b8 <__hexdig_fun>:
 801c3b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801c3bc:	2b09      	cmp	r3, #9
 801c3be:	d802      	bhi.n	801c3c6 <__hexdig_fun+0xe>
 801c3c0:	3820      	subs	r0, #32
 801c3c2:	b2c0      	uxtb	r0, r0
 801c3c4:	4770      	bx	lr
 801c3c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801c3ca:	2b05      	cmp	r3, #5
 801c3cc:	d801      	bhi.n	801c3d2 <__hexdig_fun+0x1a>
 801c3ce:	3847      	subs	r0, #71	@ 0x47
 801c3d0:	e7f7      	b.n	801c3c2 <__hexdig_fun+0xa>
 801c3d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801c3d6:	2b05      	cmp	r3, #5
 801c3d8:	d801      	bhi.n	801c3de <__hexdig_fun+0x26>
 801c3da:	3827      	subs	r0, #39	@ 0x27
 801c3dc:	e7f1      	b.n	801c3c2 <__hexdig_fun+0xa>
 801c3de:	2000      	movs	r0, #0
 801c3e0:	4770      	bx	lr
	...

0801c3e4 <__gethex>:
 801c3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3e8:	b085      	sub	sp, #20
 801c3ea:	468a      	mov	sl, r1
 801c3ec:	9302      	str	r3, [sp, #8]
 801c3ee:	680b      	ldr	r3, [r1, #0]
 801c3f0:	9001      	str	r0, [sp, #4]
 801c3f2:	4690      	mov	r8, r2
 801c3f4:	1c9c      	adds	r4, r3, #2
 801c3f6:	46a1      	mov	r9, r4
 801c3f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 801c3fc:	2830      	cmp	r0, #48	@ 0x30
 801c3fe:	d0fa      	beq.n	801c3f6 <__gethex+0x12>
 801c400:	eba9 0303 	sub.w	r3, r9, r3
 801c404:	f1a3 0b02 	sub.w	fp, r3, #2
 801c408:	f7ff ffd6 	bl	801c3b8 <__hexdig_fun>
 801c40c:	4605      	mov	r5, r0
 801c40e:	2800      	cmp	r0, #0
 801c410:	d168      	bne.n	801c4e4 <__gethex+0x100>
 801c412:	49a0      	ldr	r1, [pc, #640]	@ (801c694 <__gethex+0x2b0>)
 801c414:	2201      	movs	r2, #1
 801c416:	4648      	mov	r0, r9
 801c418:	f7fe ff97 	bl	801b34a <strncmp>
 801c41c:	4607      	mov	r7, r0
 801c41e:	2800      	cmp	r0, #0
 801c420:	d167      	bne.n	801c4f2 <__gethex+0x10e>
 801c422:	f899 0001 	ldrb.w	r0, [r9, #1]
 801c426:	4626      	mov	r6, r4
 801c428:	f7ff ffc6 	bl	801c3b8 <__hexdig_fun>
 801c42c:	2800      	cmp	r0, #0
 801c42e:	d062      	beq.n	801c4f6 <__gethex+0x112>
 801c430:	4623      	mov	r3, r4
 801c432:	7818      	ldrb	r0, [r3, #0]
 801c434:	2830      	cmp	r0, #48	@ 0x30
 801c436:	4699      	mov	r9, r3
 801c438:	f103 0301 	add.w	r3, r3, #1
 801c43c:	d0f9      	beq.n	801c432 <__gethex+0x4e>
 801c43e:	f7ff ffbb 	bl	801c3b8 <__hexdig_fun>
 801c442:	fab0 f580 	clz	r5, r0
 801c446:	096d      	lsrs	r5, r5, #5
 801c448:	f04f 0b01 	mov.w	fp, #1
 801c44c:	464a      	mov	r2, r9
 801c44e:	4616      	mov	r6, r2
 801c450:	3201      	adds	r2, #1
 801c452:	7830      	ldrb	r0, [r6, #0]
 801c454:	f7ff ffb0 	bl	801c3b8 <__hexdig_fun>
 801c458:	2800      	cmp	r0, #0
 801c45a:	d1f8      	bne.n	801c44e <__gethex+0x6a>
 801c45c:	498d      	ldr	r1, [pc, #564]	@ (801c694 <__gethex+0x2b0>)
 801c45e:	2201      	movs	r2, #1
 801c460:	4630      	mov	r0, r6
 801c462:	f7fe ff72 	bl	801b34a <strncmp>
 801c466:	2800      	cmp	r0, #0
 801c468:	d13f      	bne.n	801c4ea <__gethex+0x106>
 801c46a:	b944      	cbnz	r4, 801c47e <__gethex+0x9a>
 801c46c:	1c74      	adds	r4, r6, #1
 801c46e:	4622      	mov	r2, r4
 801c470:	4616      	mov	r6, r2
 801c472:	3201      	adds	r2, #1
 801c474:	7830      	ldrb	r0, [r6, #0]
 801c476:	f7ff ff9f 	bl	801c3b8 <__hexdig_fun>
 801c47a:	2800      	cmp	r0, #0
 801c47c:	d1f8      	bne.n	801c470 <__gethex+0x8c>
 801c47e:	1ba4      	subs	r4, r4, r6
 801c480:	00a7      	lsls	r7, r4, #2
 801c482:	7833      	ldrb	r3, [r6, #0]
 801c484:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801c488:	2b50      	cmp	r3, #80	@ 0x50
 801c48a:	d13e      	bne.n	801c50a <__gethex+0x126>
 801c48c:	7873      	ldrb	r3, [r6, #1]
 801c48e:	2b2b      	cmp	r3, #43	@ 0x2b
 801c490:	d033      	beq.n	801c4fa <__gethex+0x116>
 801c492:	2b2d      	cmp	r3, #45	@ 0x2d
 801c494:	d034      	beq.n	801c500 <__gethex+0x11c>
 801c496:	1c71      	adds	r1, r6, #1
 801c498:	2400      	movs	r4, #0
 801c49a:	7808      	ldrb	r0, [r1, #0]
 801c49c:	f7ff ff8c 	bl	801c3b8 <__hexdig_fun>
 801c4a0:	1e43      	subs	r3, r0, #1
 801c4a2:	b2db      	uxtb	r3, r3
 801c4a4:	2b18      	cmp	r3, #24
 801c4a6:	d830      	bhi.n	801c50a <__gethex+0x126>
 801c4a8:	f1a0 0210 	sub.w	r2, r0, #16
 801c4ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c4b0:	f7ff ff82 	bl	801c3b8 <__hexdig_fun>
 801c4b4:	f100 3cff 	add.w	ip, r0, #4294967295
 801c4b8:	fa5f fc8c 	uxtb.w	ip, ip
 801c4bc:	f1bc 0f18 	cmp.w	ip, #24
 801c4c0:	f04f 030a 	mov.w	r3, #10
 801c4c4:	d91e      	bls.n	801c504 <__gethex+0x120>
 801c4c6:	b104      	cbz	r4, 801c4ca <__gethex+0xe6>
 801c4c8:	4252      	negs	r2, r2
 801c4ca:	4417      	add	r7, r2
 801c4cc:	f8ca 1000 	str.w	r1, [sl]
 801c4d0:	b1ed      	cbz	r5, 801c50e <__gethex+0x12a>
 801c4d2:	f1bb 0f00 	cmp.w	fp, #0
 801c4d6:	bf0c      	ite	eq
 801c4d8:	2506      	moveq	r5, #6
 801c4da:	2500      	movne	r5, #0
 801c4dc:	4628      	mov	r0, r5
 801c4de:	b005      	add	sp, #20
 801c4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4e4:	2500      	movs	r5, #0
 801c4e6:	462c      	mov	r4, r5
 801c4e8:	e7b0      	b.n	801c44c <__gethex+0x68>
 801c4ea:	2c00      	cmp	r4, #0
 801c4ec:	d1c7      	bne.n	801c47e <__gethex+0x9a>
 801c4ee:	4627      	mov	r7, r4
 801c4f0:	e7c7      	b.n	801c482 <__gethex+0x9e>
 801c4f2:	464e      	mov	r6, r9
 801c4f4:	462f      	mov	r7, r5
 801c4f6:	2501      	movs	r5, #1
 801c4f8:	e7c3      	b.n	801c482 <__gethex+0x9e>
 801c4fa:	2400      	movs	r4, #0
 801c4fc:	1cb1      	adds	r1, r6, #2
 801c4fe:	e7cc      	b.n	801c49a <__gethex+0xb6>
 801c500:	2401      	movs	r4, #1
 801c502:	e7fb      	b.n	801c4fc <__gethex+0x118>
 801c504:	fb03 0002 	mla	r0, r3, r2, r0
 801c508:	e7ce      	b.n	801c4a8 <__gethex+0xc4>
 801c50a:	4631      	mov	r1, r6
 801c50c:	e7de      	b.n	801c4cc <__gethex+0xe8>
 801c50e:	eba6 0309 	sub.w	r3, r6, r9
 801c512:	3b01      	subs	r3, #1
 801c514:	4629      	mov	r1, r5
 801c516:	2b07      	cmp	r3, #7
 801c518:	dc0a      	bgt.n	801c530 <__gethex+0x14c>
 801c51a:	9801      	ldr	r0, [sp, #4]
 801c51c:	f000 fa46 	bl	801c9ac <_Balloc>
 801c520:	4604      	mov	r4, r0
 801c522:	b940      	cbnz	r0, 801c536 <__gethex+0x152>
 801c524:	4b5c      	ldr	r3, [pc, #368]	@ (801c698 <__gethex+0x2b4>)
 801c526:	4602      	mov	r2, r0
 801c528:	21e4      	movs	r1, #228	@ 0xe4
 801c52a:	485c      	ldr	r0, [pc, #368]	@ (801c69c <__gethex+0x2b8>)
 801c52c:	f7ff f83e 	bl	801b5ac <__assert_func>
 801c530:	3101      	adds	r1, #1
 801c532:	105b      	asrs	r3, r3, #1
 801c534:	e7ef      	b.n	801c516 <__gethex+0x132>
 801c536:	f100 0a14 	add.w	sl, r0, #20
 801c53a:	2300      	movs	r3, #0
 801c53c:	4655      	mov	r5, sl
 801c53e:	469b      	mov	fp, r3
 801c540:	45b1      	cmp	r9, r6
 801c542:	d337      	bcc.n	801c5b4 <__gethex+0x1d0>
 801c544:	f845 bb04 	str.w	fp, [r5], #4
 801c548:	eba5 050a 	sub.w	r5, r5, sl
 801c54c:	10ad      	asrs	r5, r5, #2
 801c54e:	6125      	str	r5, [r4, #16]
 801c550:	4658      	mov	r0, fp
 801c552:	f000 fb1d 	bl	801cb90 <__hi0bits>
 801c556:	016d      	lsls	r5, r5, #5
 801c558:	f8d8 6000 	ldr.w	r6, [r8]
 801c55c:	1a2d      	subs	r5, r5, r0
 801c55e:	42b5      	cmp	r5, r6
 801c560:	dd54      	ble.n	801c60c <__gethex+0x228>
 801c562:	1bad      	subs	r5, r5, r6
 801c564:	4629      	mov	r1, r5
 801c566:	4620      	mov	r0, r4
 801c568:	f000 feb1 	bl	801d2ce <__any_on>
 801c56c:	4681      	mov	r9, r0
 801c56e:	b178      	cbz	r0, 801c590 <__gethex+0x1ac>
 801c570:	1e6b      	subs	r3, r5, #1
 801c572:	1159      	asrs	r1, r3, #5
 801c574:	f003 021f 	and.w	r2, r3, #31
 801c578:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801c57c:	f04f 0901 	mov.w	r9, #1
 801c580:	fa09 f202 	lsl.w	r2, r9, r2
 801c584:	420a      	tst	r2, r1
 801c586:	d003      	beq.n	801c590 <__gethex+0x1ac>
 801c588:	454b      	cmp	r3, r9
 801c58a:	dc36      	bgt.n	801c5fa <__gethex+0x216>
 801c58c:	f04f 0902 	mov.w	r9, #2
 801c590:	4629      	mov	r1, r5
 801c592:	4620      	mov	r0, r4
 801c594:	f7ff febe 	bl	801c314 <rshift>
 801c598:	442f      	add	r7, r5
 801c59a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c59e:	42bb      	cmp	r3, r7
 801c5a0:	da42      	bge.n	801c628 <__gethex+0x244>
 801c5a2:	9801      	ldr	r0, [sp, #4]
 801c5a4:	4621      	mov	r1, r4
 801c5a6:	f000 fa41 	bl	801ca2c <_Bfree>
 801c5aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c5ac:	2300      	movs	r3, #0
 801c5ae:	6013      	str	r3, [r2, #0]
 801c5b0:	25a3      	movs	r5, #163	@ 0xa3
 801c5b2:	e793      	b.n	801c4dc <__gethex+0xf8>
 801c5b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801c5b8:	2a2e      	cmp	r2, #46	@ 0x2e
 801c5ba:	d012      	beq.n	801c5e2 <__gethex+0x1fe>
 801c5bc:	2b20      	cmp	r3, #32
 801c5be:	d104      	bne.n	801c5ca <__gethex+0x1e6>
 801c5c0:	f845 bb04 	str.w	fp, [r5], #4
 801c5c4:	f04f 0b00 	mov.w	fp, #0
 801c5c8:	465b      	mov	r3, fp
 801c5ca:	7830      	ldrb	r0, [r6, #0]
 801c5cc:	9303      	str	r3, [sp, #12]
 801c5ce:	f7ff fef3 	bl	801c3b8 <__hexdig_fun>
 801c5d2:	9b03      	ldr	r3, [sp, #12]
 801c5d4:	f000 000f 	and.w	r0, r0, #15
 801c5d8:	4098      	lsls	r0, r3
 801c5da:	ea4b 0b00 	orr.w	fp, fp, r0
 801c5de:	3304      	adds	r3, #4
 801c5e0:	e7ae      	b.n	801c540 <__gethex+0x15c>
 801c5e2:	45b1      	cmp	r9, r6
 801c5e4:	d8ea      	bhi.n	801c5bc <__gethex+0x1d8>
 801c5e6:	492b      	ldr	r1, [pc, #172]	@ (801c694 <__gethex+0x2b0>)
 801c5e8:	9303      	str	r3, [sp, #12]
 801c5ea:	2201      	movs	r2, #1
 801c5ec:	4630      	mov	r0, r6
 801c5ee:	f7fe feac 	bl	801b34a <strncmp>
 801c5f2:	9b03      	ldr	r3, [sp, #12]
 801c5f4:	2800      	cmp	r0, #0
 801c5f6:	d1e1      	bne.n	801c5bc <__gethex+0x1d8>
 801c5f8:	e7a2      	b.n	801c540 <__gethex+0x15c>
 801c5fa:	1ea9      	subs	r1, r5, #2
 801c5fc:	4620      	mov	r0, r4
 801c5fe:	f000 fe66 	bl	801d2ce <__any_on>
 801c602:	2800      	cmp	r0, #0
 801c604:	d0c2      	beq.n	801c58c <__gethex+0x1a8>
 801c606:	f04f 0903 	mov.w	r9, #3
 801c60a:	e7c1      	b.n	801c590 <__gethex+0x1ac>
 801c60c:	da09      	bge.n	801c622 <__gethex+0x23e>
 801c60e:	1b75      	subs	r5, r6, r5
 801c610:	4621      	mov	r1, r4
 801c612:	9801      	ldr	r0, [sp, #4]
 801c614:	462a      	mov	r2, r5
 801c616:	f000 fc21 	bl	801ce5c <__lshift>
 801c61a:	1b7f      	subs	r7, r7, r5
 801c61c:	4604      	mov	r4, r0
 801c61e:	f100 0a14 	add.w	sl, r0, #20
 801c622:	f04f 0900 	mov.w	r9, #0
 801c626:	e7b8      	b.n	801c59a <__gethex+0x1b6>
 801c628:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c62c:	42bd      	cmp	r5, r7
 801c62e:	dd6f      	ble.n	801c710 <__gethex+0x32c>
 801c630:	1bed      	subs	r5, r5, r7
 801c632:	42ae      	cmp	r6, r5
 801c634:	dc34      	bgt.n	801c6a0 <__gethex+0x2bc>
 801c636:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c63a:	2b02      	cmp	r3, #2
 801c63c:	d022      	beq.n	801c684 <__gethex+0x2a0>
 801c63e:	2b03      	cmp	r3, #3
 801c640:	d024      	beq.n	801c68c <__gethex+0x2a8>
 801c642:	2b01      	cmp	r3, #1
 801c644:	d115      	bne.n	801c672 <__gethex+0x28e>
 801c646:	42ae      	cmp	r6, r5
 801c648:	d113      	bne.n	801c672 <__gethex+0x28e>
 801c64a:	2e01      	cmp	r6, #1
 801c64c:	d10b      	bne.n	801c666 <__gethex+0x282>
 801c64e:	9a02      	ldr	r2, [sp, #8]
 801c650:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c654:	6013      	str	r3, [r2, #0]
 801c656:	2301      	movs	r3, #1
 801c658:	6123      	str	r3, [r4, #16]
 801c65a:	f8ca 3000 	str.w	r3, [sl]
 801c65e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c660:	2562      	movs	r5, #98	@ 0x62
 801c662:	601c      	str	r4, [r3, #0]
 801c664:	e73a      	b.n	801c4dc <__gethex+0xf8>
 801c666:	1e71      	subs	r1, r6, #1
 801c668:	4620      	mov	r0, r4
 801c66a:	f000 fe30 	bl	801d2ce <__any_on>
 801c66e:	2800      	cmp	r0, #0
 801c670:	d1ed      	bne.n	801c64e <__gethex+0x26a>
 801c672:	9801      	ldr	r0, [sp, #4]
 801c674:	4621      	mov	r1, r4
 801c676:	f000 f9d9 	bl	801ca2c <_Bfree>
 801c67a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c67c:	2300      	movs	r3, #0
 801c67e:	6013      	str	r3, [r2, #0]
 801c680:	2550      	movs	r5, #80	@ 0x50
 801c682:	e72b      	b.n	801c4dc <__gethex+0xf8>
 801c684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c686:	2b00      	cmp	r3, #0
 801c688:	d1f3      	bne.n	801c672 <__gethex+0x28e>
 801c68a:	e7e0      	b.n	801c64e <__gethex+0x26a>
 801c68c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d1dd      	bne.n	801c64e <__gethex+0x26a>
 801c692:	e7ee      	b.n	801c672 <__gethex+0x28e>
 801c694:	08021e2c 	.word	0x08021e2c
 801c698:	080220d4 	.word	0x080220d4
 801c69c:	080220e5 	.word	0x080220e5
 801c6a0:	1e6f      	subs	r7, r5, #1
 801c6a2:	f1b9 0f00 	cmp.w	r9, #0
 801c6a6:	d130      	bne.n	801c70a <__gethex+0x326>
 801c6a8:	b127      	cbz	r7, 801c6b4 <__gethex+0x2d0>
 801c6aa:	4639      	mov	r1, r7
 801c6ac:	4620      	mov	r0, r4
 801c6ae:	f000 fe0e 	bl	801d2ce <__any_on>
 801c6b2:	4681      	mov	r9, r0
 801c6b4:	117a      	asrs	r2, r7, #5
 801c6b6:	2301      	movs	r3, #1
 801c6b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801c6bc:	f007 071f 	and.w	r7, r7, #31
 801c6c0:	40bb      	lsls	r3, r7
 801c6c2:	4213      	tst	r3, r2
 801c6c4:	4629      	mov	r1, r5
 801c6c6:	4620      	mov	r0, r4
 801c6c8:	bf18      	it	ne
 801c6ca:	f049 0902 	orrne.w	r9, r9, #2
 801c6ce:	f7ff fe21 	bl	801c314 <rshift>
 801c6d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801c6d6:	1b76      	subs	r6, r6, r5
 801c6d8:	2502      	movs	r5, #2
 801c6da:	f1b9 0f00 	cmp.w	r9, #0
 801c6de:	d047      	beq.n	801c770 <__gethex+0x38c>
 801c6e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c6e4:	2b02      	cmp	r3, #2
 801c6e6:	d015      	beq.n	801c714 <__gethex+0x330>
 801c6e8:	2b03      	cmp	r3, #3
 801c6ea:	d017      	beq.n	801c71c <__gethex+0x338>
 801c6ec:	2b01      	cmp	r3, #1
 801c6ee:	d109      	bne.n	801c704 <__gethex+0x320>
 801c6f0:	f019 0f02 	tst.w	r9, #2
 801c6f4:	d006      	beq.n	801c704 <__gethex+0x320>
 801c6f6:	f8da 3000 	ldr.w	r3, [sl]
 801c6fa:	ea49 0903 	orr.w	r9, r9, r3
 801c6fe:	f019 0f01 	tst.w	r9, #1
 801c702:	d10e      	bne.n	801c722 <__gethex+0x33e>
 801c704:	f045 0510 	orr.w	r5, r5, #16
 801c708:	e032      	b.n	801c770 <__gethex+0x38c>
 801c70a:	f04f 0901 	mov.w	r9, #1
 801c70e:	e7d1      	b.n	801c6b4 <__gethex+0x2d0>
 801c710:	2501      	movs	r5, #1
 801c712:	e7e2      	b.n	801c6da <__gethex+0x2f6>
 801c714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c716:	f1c3 0301 	rsb	r3, r3, #1
 801c71a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c71c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c71e:	2b00      	cmp	r3, #0
 801c720:	d0f0      	beq.n	801c704 <__gethex+0x320>
 801c722:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c726:	f104 0314 	add.w	r3, r4, #20
 801c72a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c72e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c732:	f04f 0c00 	mov.w	ip, #0
 801c736:	4618      	mov	r0, r3
 801c738:	f853 2b04 	ldr.w	r2, [r3], #4
 801c73c:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c740:	d01b      	beq.n	801c77a <__gethex+0x396>
 801c742:	3201      	adds	r2, #1
 801c744:	6002      	str	r2, [r0, #0]
 801c746:	2d02      	cmp	r5, #2
 801c748:	f104 0314 	add.w	r3, r4, #20
 801c74c:	d13c      	bne.n	801c7c8 <__gethex+0x3e4>
 801c74e:	f8d8 2000 	ldr.w	r2, [r8]
 801c752:	3a01      	subs	r2, #1
 801c754:	42b2      	cmp	r2, r6
 801c756:	d109      	bne.n	801c76c <__gethex+0x388>
 801c758:	1171      	asrs	r1, r6, #5
 801c75a:	2201      	movs	r2, #1
 801c75c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c760:	f006 061f 	and.w	r6, r6, #31
 801c764:	fa02 f606 	lsl.w	r6, r2, r6
 801c768:	421e      	tst	r6, r3
 801c76a:	d13a      	bne.n	801c7e2 <__gethex+0x3fe>
 801c76c:	f045 0520 	orr.w	r5, r5, #32
 801c770:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c772:	601c      	str	r4, [r3, #0]
 801c774:	9b02      	ldr	r3, [sp, #8]
 801c776:	601f      	str	r7, [r3, #0]
 801c778:	e6b0      	b.n	801c4dc <__gethex+0xf8>
 801c77a:	4299      	cmp	r1, r3
 801c77c:	f843 cc04 	str.w	ip, [r3, #-4]
 801c780:	d8d9      	bhi.n	801c736 <__gethex+0x352>
 801c782:	68a3      	ldr	r3, [r4, #8]
 801c784:	459b      	cmp	fp, r3
 801c786:	db17      	blt.n	801c7b8 <__gethex+0x3d4>
 801c788:	6861      	ldr	r1, [r4, #4]
 801c78a:	9801      	ldr	r0, [sp, #4]
 801c78c:	3101      	adds	r1, #1
 801c78e:	f000 f90d 	bl	801c9ac <_Balloc>
 801c792:	4681      	mov	r9, r0
 801c794:	b918      	cbnz	r0, 801c79e <__gethex+0x3ba>
 801c796:	4b1a      	ldr	r3, [pc, #104]	@ (801c800 <__gethex+0x41c>)
 801c798:	4602      	mov	r2, r0
 801c79a:	2184      	movs	r1, #132	@ 0x84
 801c79c:	e6c5      	b.n	801c52a <__gethex+0x146>
 801c79e:	6922      	ldr	r2, [r4, #16]
 801c7a0:	3202      	adds	r2, #2
 801c7a2:	f104 010c 	add.w	r1, r4, #12
 801c7a6:	0092      	lsls	r2, r2, #2
 801c7a8:	300c      	adds	r0, #12
 801c7aa:	f7fe fee2 	bl	801b572 <memcpy>
 801c7ae:	4621      	mov	r1, r4
 801c7b0:	9801      	ldr	r0, [sp, #4]
 801c7b2:	f000 f93b 	bl	801ca2c <_Bfree>
 801c7b6:	464c      	mov	r4, r9
 801c7b8:	6923      	ldr	r3, [r4, #16]
 801c7ba:	1c5a      	adds	r2, r3, #1
 801c7bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c7c0:	6122      	str	r2, [r4, #16]
 801c7c2:	2201      	movs	r2, #1
 801c7c4:	615a      	str	r2, [r3, #20]
 801c7c6:	e7be      	b.n	801c746 <__gethex+0x362>
 801c7c8:	6922      	ldr	r2, [r4, #16]
 801c7ca:	455a      	cmp	r2, fp
 801c7cc:	dd0b      	ble.n	801c7e6 <__gethex+0x402>
 801c7ce:	2101      	movs	r1, #1
 801c7d0:	4620      	mov	r0, r4
 801c7d2:	f7ff fd9f 	bl	801c314 <rshift>
 801c7d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c7da:	3701      	adds	r7, #1
 801c7dc:	42bb      	cmp	r3, r7
 801c7de:	f6ff aee0 	blt.w	801c5a2 <__gethex+0x1be>
 801c7e2:	2501      	movs	r5, #1
 801c7e4:	e7c2      	b.n	801c76c <__gethex+0x388>
 801c7e6:	f016 061f 	ands.w	r6, r6, #31
 801c7ea:	d0fa      	beq.n	801c7e2 <__gethex+0x3fe>
 801c7ec:	4453      	add	r3, sl
 801c7ee:	f1c6 0620 	rsb	r6, r6, #32
 801c7f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c7f6:	f000 f9cb 	bl	801cb90 <__hi0bits>
 801c7fa:	42b0      	cmp	r0, r6
 801c7fc:	dbe7      	blt.n	801c7ce <__gethex+0x3ea>
 801c7fe:	e7f0      	b.n	801c7e2 <__gethex+0x3fe>
 801c800:	080220d4 	.word	0x080220d4

0801c804 <L_shift>:
 801c804:	f1c2 0208 	rsb	r2, r2, #8
 801c808:	0092      	lsls	r2, r2, #2
 801c80a:	b570      	push	{r4, r5, r6, lr}
 801c80c:	f1c2 0620 	rsb	r6, r2, #32
 801c810:	6843      	ldr	r3, [r0, #4]
 801c812:	6804      	ldr	r4, [r0, #0]
 801c814:	fa03 f506 	lsl.w	r5, r3, r6
 801c818:	432c      	orrs	r4, r5
 801c81a:	40d3      	lsrs	r3, r2
 801c81c:	6004      	str	r4, [r0, #0]
 801c81e:	f840 3f04 	str.w	r3, [r0, #4]!
 801c822:	4288      	cmp	r0, r1
 801c824:	d3f4      	bcc.n	801c810 <L_shift+0xc>
 801c826:	bd70      	pop	{r4, r5, r6, pc}

0801c828 <__match>:
 801c828:	b530      	push	{r4, r5, lr}
 801c82a:	6803      	ldr	r3, [r0, #0]
 801c82c:	3301      	adds	r3, #1
 801c82e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c832:	b914      	cbnz	r4, 801c83a <__match+0x12>
 801c834:	6003      	str	r3, [r0, #0]
 801c836:	2001      	movs	r0, #1
 801c838:	bd30      	pop	{r4, r5, pc}
 801c83a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c83e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801c842:	2d19      	cmp	r5, #25
 801c844:	bf98      	it	ls
 801c846:	3220      	addls	r2, #32
 801c848:	42a2      	cmp	r2, r4
 801c84a:	d0f0      	beq.n	801c82e <__match+0x6>
 801c84c:	2000      	movs	r0, #0
 801c84e:	e7f3      	b.n	801c838 <__match+0x10>

0801c850 <__hexnan>:
 801c850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c854:	680b      	ldr	r3, [r1, #0]
 801c856:	6801      	ldr	r1, [r0, #0]
 801c858:	115e      	asrs	r6, r3, #5
 801c85a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c85e:	f013 031f 	ands.w	r3, r3, #31
 801c862:	b087      	sub	sp, #28
 801c864:	bf18      	it	ne
 801c866:	3604      	addne	r6, #4
 801c868:	2500      	movs	r5, #0
 801c86a:	1f37      	subs	r7, r6, #4
 801c86c:	4682      	mov	sl, r0
 801c86e:	4690      	mov	r8, r2
 801c870:	9301      	str	r3, [sp, #4]
 801c872:	f846 5c04 	str.w	r5, [r6, #-4]
 801c876:	46b9      	mov	r9, r7
 801c878:	463c      	mov	r4, r7
 801c87a:	9502      	str	r5, [sp, #8]
 801c87c:	46ab      	mov	fp, r5
 801c87e:	784a      	ldrb	r2, [r1, #1]
 801c880:	1c4b      	adds	r3, r1, #1
 801c882:	9303      	str	r3, [sp, #12]
 801c884:	b342      	cbz	r2, 801c8d8 <__hexnan+0x88>
 801c886:	4610      	mov	r0, r2
 801c888:	9105      	str	r1, [sp, #20]
 801c88a:	9204      	str	r2, [sp, #16]
 801c88c:	f7ff fd94 	bl	801c3b8 <__hexdig_fun>
 801c890:	2800      	cmp	r0, #0
 801c892:	d151      	bne.n	801c938 <__hexnan+0xe8>
 801c894:	9a04      	ldr	r2, [sp, #16]
 801c896:	9905      	ldr	r1, [sp, #20]
 801c898:	2a20      	cmp	r2, #32
 801c89a:	d818      	bhi.n	801c8ce <__hexnan+0x7e>
 801c89c:	9b02      	ldr	r3, [sp, #8]
 801c89e:	459b      	cmp	fp, r3
 801c8a0:	dd13      	ble.n	801c8ca <__hexnan+0x7a>
 801c8a2:	454c      	cmp	r4, r9
 801c8a4:	d206      	bcs.n	801c8b4 <__hexnan+0x64>
 801c8a6:	2d07      	cmp	r5, #7
 801c8a8:	dc04      	bgt.n	801c8b4 <__hexnan+0x64>
 801c8aa:	462a      	mov	r2, r5
 801c8ac:	4649      	mov	r1, r9
 801c8ae:	4620      	mov	r0, r4
 801c8b0:	f7ff ffa8 	bl	801c804 <L_shift>
 801c8b4:	4544      	cmp	r4, r8
 801c8b6:	d952      	bls.n	801c95e <__hexnan+0x10e>
 801c8b8:	2300      	movs	r3, #0
 801c8ba:	f1a4 0904 	sub.w	r9, r4, #4
 801c8be:	f844 3c04 	str.w	r3, [r4, #-4]
 801c8c2:	f8cd b008 	str.w	fp, [sp, #8]
 801c8c6:	464c      	mov	r4, r9
 801c8c8:	461d      	mov	r5, r3
 801c8ca:	9903      	ldr	r1, [sp, #12]
 801c8cc:	e7d7      	b.n	801c87e <__hexnan+0x2e>
 801c8ce:	2a29      	cmp	r2, #41	@ 0x29
 801c8d0:	d157      	bne.n	801c982 <__hexnan+0x132>
 801c8d2:	3102      	adds	r1, #2
 801c8d4:	f8ca 1000 	str.w	r1, [sl]
 801c8d8:	f1bb 0f00 	cmp.w	fp, #0
 801c8dc:	d051      	beq.n	801c982 <__hexnan+0x132>
 801c8de:	454c      	cmp	r4, r9
 801c8e0:	d206      	bcs.n	801c8f0 <__hexnan+0xa0>
 801c8e2:	2d07      	cmp	r5, #7
 801c8e4:	dc04      	bgt.n	801c8f0 <__hexnan+0xa0>
 801c8e6:	462a      	mov	r2, r5
 801c8e8:	4649      	mov	r1, r9
 801c8ea:	4620      	mov	r0, r4
 801c8ec:	f7ff ff8a 	bl	801c804 <L_shift>
 801c8f0:	4544      	cmp	r4, r8
 801c8f2:	d936      	bls.n	801c962 <__hexnan+0x112>
 801c8f4:	f1a8 0204 	sub.w	r2, r8, #4
 801c8f8:	4623      	mov	r3, r4
 801c8fa:	f853 1b04 	ldr.w	r1, [r3], #4
 801c8fe:	f842 1f04 	str.w	r1, [r2, #4]!
 801c902:	429f      	cmp	r7, r3
 801c904:	d2f9      	bcs.n	801c8fa <__hexnan+0xaa>
 801c906:	1b3b      	subs	r3, r7, r4
 801c908:	f023 0303 	bic.w	r3, r3, #3
 801c90c:	3304      	adds	r3, #4
 801c90e:	3401      	adds	r4, #1
 801c910:	3e03      	subs	r6, #3
 801c912:	42b4      	cmp	r4, r6
 801c914:	bf88      	it	hi
 801c916:	2304      	movhi	r3, #4
 801c918:	4443      	add	r3, r8
 801c91a:	2200      	movs	r2, #0
 801c91c:	f843 2b04 	str.w	r2, [r3], #4
 801c920:	429f      	cmp	r7, r3
 801c922:	d2fb      	bcs.n	801c91c <__hexnan+0xcc>
 801c924:	683b      	ldr	r3, [r7, #0]
 801c926:	b91b      	cbnz	r3, 801c930 <__hexnan+0xe0>
 801c928:	4547      	cmp	r7, r8
 801c92a:	d128      	bne.n	801c97e <__hexnan+0x12e>
 801c92c:	2301      	movs	r3, #1
 801c92e:	603b      	str	r3, [r7, #0]
 801c930:	2005      	movs	r0, #5
 801c932:	b007      	add	sp, #28
 801c934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c938:	3501      	adds	r5, #1
 801c93a:	2d08      	cmp	r5, #8
 801c93c:	f10b 0b01 	add.w	fp, fp, #1
 801c940:	dd06      	ble.n	801c950 <__hexnan+0x100>
 801c942:	4544      	cmp	r4, r8
 801c944:	d9c1      	bls.n	801c8ca <__hexnan+0x7a>
 801c946:	2300      	movs	r3, #0
 801c948:	f844 3c04 	str.w	r3, [r4, #-4]
 801c94c:	2501      	movs	r5, #1
 801c94e:	3c04      	subs	r4, #4
 801c950:	6822      	ldr	r2, [r4, #0]
 801c952:	f000 000f 	and.w	r0, r0, #15
 801c956:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801c95a:	6020      	str	r0, [r4, #0]
 801c95c:	e7b5      	b.n	801c8ca <__hexnan+0x7a>
 801c95e:	2508      	movs	r5, #8
 801c960:	e7b3      	b.n	801c8ca <__hexnan+0x7a>
 801c962:	9b01      	ldr	r3, [sp, #4]
 801c964:	2b00      	cmp	r3, #0
 801c966:	d0dd      	beq.n	801c924 <__hexnan+0xd4>
 801c968:	f1c3 0320 	rsb	r3, r3, #32
 801c96c:	f04f 32ff 	mov.w	r2, #4294967295
 801c970:	40da      	lsrs	r2, r3
 801c972:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801c976:	4013      	ands	r3, r2
 801c978:	f846 3c04 	str.w	r3, [r6, #-4]
 801c97c:	e7d2      	b.n	801c924 <__hexnan+0xd4>
 801c97e:	3f04      	subs	r7, #4
 801c980:	e7d0      	b.n	801c924 <__hexnan+0xd4>
 801c982:	2004      	movs	r0, #4
 801c984:	e7d5      	b.n	801c932 <__hexnan+0xe2>

0801c986 <__ascii_mbtowc>:
 801c986:	b082      	sub	sp, #8
 801c988:	b901      	cbnz	r1, 801c98c <__ascii_mbtowc+0x6>
 801c98a:	a901      	add	r1, sp, #4
 801c98c:	b142      	cbz	r2, 801c9a0 <__ascii_mbtowc+0x1a>
 801c98e:	b14b      	cbz	r3, 801c9a4 <__ascii_mbtowc+0x1e>
 801c990:	7813      	ldrb	r3, [r2, #0]
 801c992:	600b      	str	r3, [r1, #0]
 801c994:	7812      	ldrb	r2, [r2, #0]
 801c996:	1e10      	subs	r0, r2, #0
 801c998:	bf18      	it	ne
 801c99a:	2001      	movne	r0, #1
 801c99c:	b002      	add	sp, #8
 801c99e:	4770      	bx	lr
 801c9a0:	4610      	mov	r0, r2
 801c9a2:	e7fb      	b.n	801c99c <__ascii_mbtowc+0x16>
 801c9a4:	f06f 0001 	mvn.w	r0, #1
 801c9a8:	e7f8      	b.n	801c99c <__ascii_mbtowc+0x16>
	...

0801c9ac <_Balloc>:
 801c9ac:	b570      	push	{r4, r5, r6, lr}
 801c9ae:	69c6      	ldr	r6, [r0, #28]
 801c9b0:	4604      	mov	r4, r0
 801c9b2:	460d      	mov	r5, r1
 801c9b4:	b976      	cbnz	r6, 801c9d4 <_Balloc+0x28>
 801c9b6:	2010      	movs	r0, #16
 801c9b8:	f7fc fd4a 	bl	8019450 <malloc>
 801c9bc:	4602      	mov	r2, r0
 801c9be:	61e0      	str	r0, [r4, #28]
 801c9c0:	b920      	cbnz	r0, 801c9cc <_Balloc+0x20>
 801c9c2:	4b18      	ldr	r3, [pc, #96]	@ (801ca24 <_Balloc+0x78>)
 801c9c4:	4818      	ldr	r0, [pc, #96]	@ (801ca28 <_Balloc+0x7c>)
 801c9c6:	216b      	movs	r1, #107	@ 0x6b
 801c9c8:	f7fe fdf0 	bl	801b5ac <__assert_func>
 801c9cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c9d0:	6006      	str	r6, [r0, #0]
 801c9d2:	60c6      	str	r6, [r0, #12]
 801c9d4:	69e6      	ldr	r6, [r4, #28]
 801c9d6:	68f3      	ldr	r3, [r6, #12]
 801c9d8:	b183      	cbz	r3, 801c9fc <_Balloc+0x50>
 801c9da:	69e3      	ldr	r3, [r4, #28]
 801c9dc:	68db      	ldr	r3, [r3, #12]
 801c9de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c9e2:	b9b8      	cbnz	r0, 801ca14 <_Balloc+0x68>
 801c9e4:	2101      	movs	r1, #1
 801c9e6:	fa01 f605 	lsl.w	r6, r1, r5
 801c9ea:	1d72      	adds	r2, r6, #5
 801c9ec:	0092      	lsls	r2, r2, #2
 801c9ee:	4620      	mov	r0, r4
 801c9f0:	f001 f8a7 	bl	801db42 <_calloc_r>
 801c9f4:	b160      	cbz	r0, 801ca10 <_Balloc+0x64>
 801c9f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c9fa:	e00e      	b.n	801ca1a <_Balloc+0x6e>
 801c9fc:	2221      	movs	r2, #33	@ 0x21
 801c9fe:	2104      	movs	r1, #4
 801ca00:	4620      	mov	r0, r4
 801ca02:	f001 f89e 	bl	801db42 <_calloc_r>
 801ca06:	69e3      	ldr	r3, [r4, #28]
 801ca08:	60f0      	str	r0, [r6, #12]
 801ca0a:	68db      	ldr	r3, [r3, #12]
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	d1e4      	bne.n	801c9da <_Balloc+0x2e>
 801ca10:	2000      	movs	r0, #0
 801ca12:	bd70      	pop	{r4, r5, r6, pc}
 801ca14:	6802      	ldr	r2, [r0, #0]
 801ca16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ca1a:	2300      	movs	r3, #0
 801ca1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ca20:	e7f7      	b.n	801ca12 <_Balloc+0x66>
 801ca22:	bf00      	nop
 801ca24:	08021fba 	.word	0x08021fba
 801ca28:	08022145 	.word	0x08022145

0801ca2c <_Bfree>:
 801ca2c:	b570      	push	{r4, r5, r6, lr}
 801ca2e:	69c6      	ldr	r6, [r0, #28]
 801ca30:	4605      	mov	r5, r0
 801ca32:	460c      	mov	r4, r1
 801ca34:	b976      	cbnz	r6, 801ca54 <_Bfree+0x28>
 801ca36:	2010      	movs	r0, #16
 801ca38:	f7fc fd0a 	bl	8019450 <malloc>
 801ca3c:	4602      	mov	r2, r0
 801ca3e:	61e8      	str	r0, [r5, #28]
 801ca40:	b920      	cbnz	r0, 801ca4c <_Bfree+0x20>
 801ca42:	4b09      	ldr	r3, [pc, #36]	@ (801ca68 <_Bfree+0x3c>)
 801ca44:	4809      	ldr	r0, [pc, #36]	@ (801ca6c <_Bfree+0x40>)
 801ca46:	218f      	movs	r1, #143	@ 0x8f
 801ca48:	f7fe fdb0 	bl	801b5ac <__assert_func>
 801ca4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ca50:	6006      	str	r6, [r0, #0]
 801ca52:	60c6      	str	r6, [r0, #12]
 801ca54:	b13c      	cbz	r4, 801ca66 <_Bfree+0x3a>
 801ca56:	69eb      	ldr	r3, [r5, #28]
 801ca58:	6862      	ldr	r2, [r4, #4]
 801ca5a:	68db      	ldr	r3, [r3, #12]
 801ca5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ca60:	6021      	str	r1, [r4, #0]
 801ca62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ca66:	bd70      	pop	{r4, r5, r6, pc}
 801ca68:	08021fba 	.word	0x08021fba
 801ca6c:	08022145 	.word	0x08022145

0801ca70 <__multadd>:
 801ca70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca74:	690d      	ldr	r5, [r1, #16]
 801ca76:	4607      	mov	r7, r0
 801ca78:	460c      	mov	r4, r1
 801ca7a:	461e      	mov	r6, r3
 801ca7c:	f101 0c14 	add.w	ip, r1, #20
 801ca80:	2000      	movs	r0, #0
 801ca82:	f8dc 3000 	ldr.w	r3, [ip]
 801ca86:	b299      	uxth	r1, r3
 801ca88:	fb02 6101 	mla	r1, r2, r1, r6
 801ca8c:	0c1e      	lsrs	r6, r3, #16
 801ca8e:	0c0b      	lsrs	r3, r1, #16
 801ca90:	fb02 3306 	mla	r3, r2, r6, r3
 801ca94:	b289      	uxth	r1, r1
 801ca96:	3001      	adds	r0, #1
 801ca98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ca9c:	4285      	cmp	r5, r0
 801ca9e:	f84c 1b04 	str.w	r1, [ip], #4
 801caa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801caa6:	dcec      	bgt.n	801ca82 <__multadd+0x12>
 801caa8:	b30e      	cbz	r6, 801caee <__multadd+0x7e>
 801caaa:	68a3      	ldr	r3, [r4, #8]
 801caac:	42ab      	cmp	r3, r5
 801caae:	dc19      	bgt.n	801cae4 <__multadd+0x74>
 801cab0:	6861      	ldr	r1, [r4, #4]
 801cab2:	4638      	mov	r0, r7
 801cab4:	3101      	adds	r1, #1
 801cab6:	f7ff ff79 	bl	801c9ac <_Balloc>
 801caba:	4680      	mov	r8, r0
 801cabc:	b928      	cbnz	r0, 801caca <__multadd+0x5a>
 801cabe:	4602      	mov	r2, r0
 801cac0:	4b0c      	ldr	r3, [pc, #48]	@ (801caf4 <__multadd+0x84>)
 801cac2:	480d      	ldr	r0, [pc, #52]	@ (801caf8 <__multadd+0x88>)
 801cac4:	21ba      	movs	r1, #186	@ 0xba
 801cac6:	f7fe fd71 	bl	801b5ac <__assert_func>
 801caca:	6922      	ldr	r2, [r4, #16]
 801cacc:	3202      	adds	r2, #2
 801cace:	f104 010c 	add.w	r1, r4, #12
 801cad2:	0092      	lsls	r2, r2, #2
 801cad4:	300c      	adds	r0, #12
 801cad6:	f7fe fd4c 	bl	801b572 <memcpy>
 801cada:	4621      	mov	r1, r4
 801cadc:	4638      	mov	r0, r7
 801cade:	f7ff ffa5 	bl	801ca2c <_Bfree>
 801cae2:	4644      	mov	r4, r8
 801cae4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cae8:	3501      	adds	r5, #1
 801caea:	615e      	str	r6, [r3, #20]
 801caec:	6125      	str	r5, [r4, #16]
 801caee:	4620      	mov	r0, r4
 801caf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801caf4:	080220d4 	.word	0x080220d4
 801caf8:	08022145 	.word	0x08022145

0801cafc <__s2b>:
 801cafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cb00:	460c      	mov	r4, r1
 801cb02:	4615      	mov	r5, r2
 801cb04:	461f      	mov	r7, r3
 801cb06:	2209      	movs	r2, #9
 801cb08:	3308      	adds	r3, #8
 801cb0a:	4606      	mov	r6, r0
 801cb0c:	fb93 f3f2 	sdiv	r3, r3, r2
 801cb10:	2100      	movs	r1, #0
 801cb12:	2201      	movs	r2, #1
 801cb14:	429a      	cmp	r2, r3
 801cb16:	db09      	blt.n	801cb2c <__s2b+0x30>
 801cb18:	4630      	mov	r0, r6
 801cb1a:	f7ff ff47 	bl	801c9ac <_Balloc>
 801cb1e:	b940      	cbnz	r0, 801cb32 <__s2b+0x36>
 801cb20:	4602      	mov	r2, r0
 801cb22:	4b19      	ldr	r3, [pc, #100]	@ (801cb88 <__s2b+0x8c>)
 801cb24:	4819      	ldr	r0, [pc, #100]	@ (801cb8c <__s2b+0x90>)
 801cb26:	21d3      	movs	r1, #211	@ 0xd3
 801cb28:	f7fe fd40 	bl	801b5ac <__assert_func>
 801cb2c:	0052      	lsls	r2, r2, #1
 801cb2e:	3101      	adds	r1, #1
 801cb30:	e7f0      	b.n	801cb14 <__s2b+0x18>
 801cb32:	9b08      	ldr	r3, [sp, #32]
 801cb34:	6143      	str	r3, [r0, #20]
 801cb36:	2d09      	cmp	r5, #9
 801cb38:	f04f 0301 	mov.w	r3, #1
 801cb3c:	6103      	str	r3, [r0, #16]
 801cb3e:	dd16      	ble.n	801cb6e <__s2b+0x72>
 801cb40:	f104 0909 	add.w	r9, r4, #9
 801cb44:	46c8      	mov	r8, r9
 801cb46:	442c      	add	r4, r5
 801cb48:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cb4c:	4601      	mov	r1, r0
 801cb4e:	3b30      	subs	r3, #48	@ 0x30
 801cb50:	220a      	movs	r2, #10
 801cb52:	4630      	mov	r0, r6
 801cb54:	f7ff ff8c 	bl	801ca70 <__multadd>
 801cb58:	45a0      	cmp	r8, r4
 801cb5a:	d1f5      	bne.n	801cb48 <__s2b+0x4c>
 801cb5c:	f1a5 0408 	sub.w	r4, r5, #8
 801cb60:	444c      	add	r4, r9
 801cb62:	1b2d      	subs	r5, r5, r4
 801cb64:	1963      	adds	r3, r4, r5
 801cb66:	42bb      	cmp	r3, r7
 801cb68:	db04      	blt.n	801cb74 <__s2b+0x78>
 801cb6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cb6e:	340a      	adds	r4, #10
 801cb70:	2509      	movs	r5, #9
 801cb72:	e7f6      	b.n	801cb62 <__s2b+0x66>
 801cb74:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cb78:	4601      	mov	r1, r0
 801cb7a:	3b30      	subs	r3, #48	@ 0x30
 801cb7c:	220a      	movs	r2, #10
 801cb7e:	4630      	mov	r0, r6
 801cb80:	f7ff ff76 	bl	801ca70 <__multadd>
 801cb84:	e7ee      	b.n	801cb64 <__s2b+0x68>
 801cb86:	bf00      	nop
 801cb88:	080220d4 	.word	0x080220d4
 801cb8c:	08022145 	.word	0x08022145

0801cb90 <__hi0bits>:
 801cb90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801cb94:	4603      	mov	r3, r0
 801cb96:	bf36      	itet	cc
 801cb98:	0403      	lslcc	r3, r0, #16
 801cb9a:	2000      	movcs	r0, #0
 801cb9c:	2010      	movcc	r0, #16
 801cb9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801cba2:	bf3c      	itt	cc
 801cba4:	021b      	lslcc	r3, r3, #8
 801cba6:	3008      	addcc	r0, #8
 801cba8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801cbac:	bf3c      	itt	cc
 801cbae:	011b      	lslcc	r3, r3, #4
 801cbb0:	3004      	addcc	r0, #4
 801cbb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cbb6:	bf3c      	itt	cc
 801cbb8:	009b      	lslcc	r3, r3, #2
 801cbba:	3002      	addcc	r0, #2
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	db05      	blt.n	801cbcc <__hi0bits+0x3c>
 801cbc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801cbc4:	f100 0001 	add.w	r0, r0, #1
 801cbc8:	bf08      	it	eq
 801cbca:	2020      	moveq	r0, #32
 801cbcc:	4770      	bx	lr

0801cbce <__lo0bits>:
 801cbce:	6803      	ldr	r3, [r0, #0]
 801cbd0:	4602      	mov	r2, r0
 801cbd2:	f013 0007 	ands.w	r0, r3, #7
 801cbd6:	d00b      	beq.n	801cbf0 <__lo0bits+0x22>
 801cbd8:	07d9      	lsls	r1, r3, #31
 801cbda:	d421      	bmi.n	801cc20 <__lo0bits+0x52>
 801cbdc:	0798      	lsls	r0, r3, #30
 801cbde:	bf49      	itett	mi
 801cbe0:	085b      	lsrmi	r3, r3, #1
 801cbe2:	089b      	lsrpl	r3, r3, #2
 801cbe4:	2001      	movmi	r0, #1
 801cbe6:	6013      	strmi	r3, [r2, #0]
 801cbe8:	bf5c      	itt	pl
 801cbea:	6013      	strpl	r3, [r2, #0]
 801cbec:	2002      	movpl	r0, #2
 801cbee:	4770      	bx	lr
 801cbf0:	b299      	uxth	r1, r3
 801cbf2:	b909      	cbnz	r1, 801cbf8 <__lo0bits+0x2a>
 801cbf4:	0c1b      	lsrs	r3, r3, #16
 801cbf6:	2010      	movs	r0, #16
 801cbf8:	b2d9      	uxtb	r1, r3
 801cbfa:	b909      	cbnz	r1, 801cc00 <__lo0bits+0x32>
 801cbfc:	3008      	adds	r0, #8
 801cbfe:	0a1b      	lsrs	r3, r3, #8
 801cc00:	0719      	lsls	r1, r3, #28
 801cc02:	bf04      	itt	eq
 801cc04:	091b      	lsreq	r3, r3, #4
 801cc06:	3004      	addeq	r0, #4
 801cc08:	0799      	lsls	r1, r3, #30
 801cc0a:	bf04      	itt	eq
 801cc0c:	089b      	lsreq	r3, r3, #2
 801cc0e:	3002      	addeq	r0, #2
 801cc10:	07d9      	lsls	r1, r3, #31
 801cc12:	d403      	bmi.n	801cc1c <__lo0bits+0x4e>
 801cc14:	085b      	lsrs	r3, r3, #1
 801cc16:	f100 0001 	add.w	r0, r0, #1
 801cc1a:	d003      	beq.n	801cc24 <__lo0bits+0x56>
 801cc1c:	6013      	str	r3, [r2, #0]
 801cc1e:	4770      	bx	lr
 801cc20:	2000      	movs	r0, #0
 801cc22:	4770      	bx	lr
 801cc24:	2020      	movs	r0, #32
 801cc26:	4770      	bx	lr

0801cc28 <__i2b>:
 801cc28:	b510      	push	{r4, lr}
 801cc2a:	460c      	mov	r4, r1
 801cc2c:	2101      	movs	r1, #1
 801cc2e:	f7ff febd 	bl	801c9ac <_Balloc>
 801cc32:	4602      	mov	r2, r0
 801cc34:	b928      	cbnz	r0, 801cc42 <__i2b+0x1a>
 801cc36:	4b05      	ldr	r3, [pc, #20]	@ (801cc4c <__i2b+0x24>)
 801cc38:	4805      	ldr	r0, [pc, #20]	@ (801cc50 <__i2b+0x28>)
 801cc3a:	f240 1145 	movw	r1, #325	@ 0x145
 801cc3e:	f7fe fcb5 	bl	801b5ac <__assert_func>
 801cc42:	2301      	movs	r3, #1
 801cc44:	6144      	str	r4, [r0, #20]
 801cc46:	6103      	str	r3, [r0, #16]
 801cc48:	bd10      	pop	{r4, pc}
 801cc4a:	bf00      	nop
 801cc4c:	080220d4 	.word	0x080220d4
 801cc50:	08022145 	.word	0x08022145

0801cc54 <__multiply>:
 801cc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc58:	4614      	mov	r4, r2
 801cc5a:	690a      	ldr	r2, [r1, #16]
 801cc5c:	6923      	ldr	r3, [r4, #16]
 801cc5e:	429a      	cmp	r2, r3
 801cc60:	bfa8      	it	ge
 801cc62:	4623      	movge	r3, r4
 801cc64:	460f      	mov	r7, r1
 801cc66:	bfa4      	itt	ge
 801cc68:	460c      	movge	r4, r1
 801cc6a:	461f      	movge	r7, r3
 801cc6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801cc70:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801cc74:	68a3      	ldr	r3, [r4, #8]
 801cc76:	6861      	ldr	r1, [r4, #4]
 801cc78:	eb0a 0609 	add.w	r6, sl, r9
 801cc7c:	42b3      	cmp	r3, r6
 801cc7e:	b085      	sub	sp, #20
 801cc80:	bfb8      	it	lt
 801cc82:	3101      	addlt	r1, #1
 801cc84:	f7ff fe92 	bl	801c9ac <_Balloc>
 801cc88:	b930      	cbnz	r0, 801cc98 <__multiply+0x44>
 801cc8a:	4602      	mov	r2, r0
 801cc8c:	4b44      	ldr	r3, [pc, #272]	@ (801cda0 <__multiply+0x14c>)
 801cc8e:	4845      	ldr	r0, [pc, #276]	@ (801cda4 <__multiply+0x150>)
 801cc90:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801cc94:	f7fe fc8a 	bl	801b5ac <__assert_func>
 801cc98:	f100 0514 	add.w	r5, r0, #20
 801cc9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cca0:	462b      	mov	r3, r5
 801cca2:	2200      	movs	r2, #0
 801cca4:	4543      	cmp	r3, r8
 801cca6:	d321      	bcc.n	801ccec <__multiply+0x98>
 801cca8:	f107 0114 	add.w	r1, r7, #20
 801ccac:	f104 0214 	add.w	r2, r4, #20
 801ccb0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801ccb4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801ccb8:	9302      	str	r3, [sp, #8]
 801ccba:	1b13      	subs	r3, r2, r4
 801ccbc:	3b15      	subs	r3, #21
 801ccbe:	f023 0303 	bic.w	r3, r3, #3
 801ccc2:	3304      	adds	r3, #4
 801ccc4:	f104 0715 	add.w	r7, r4, #21
 801ccc8:	42ba      	cmp	r2, r7
 801ccca:	bf38      	it	cc
 801cccc:	2304      	movcc	r3, #4
 801ccce:	9301      	str	r3, [sp, #4]
 801ccd0:	9b02      	ldr	r3, [sp, #8]
 801ccd2:	9103      	str	r1, [sp, #12]
 801ccd4:	428b      	cmp	r3, r1
 801ccd6:	d80c      	bhi.n	801ccf2 <__multiply+0x9e>
 801ccd8:	2e00      	cmp	r6, #0
 801ccda:	dd03      	ble.n	801cce4 <__multiply+0x90>
 801ccdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	d05b      	beq.n	801cd9c <__multiply+0x148>
 801cce4:	6106      	str	r6, [r0, #16]
 801cce6:	b005      	add	sp, #20
 801cce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccec:	f843 2b04 	str.w	r2, [r3], #4
 801ccf0:	e7d8      	b.n	801cca4 <__multiply+0x50>
 801ccf2:	f8b1 a000 	ldrh.w	sl, [r1]
 801ccf6:	f1ba 0f00 	cmp.w	sl, #0
 801ccfa:	d024      	beq.n	801cd46 <__multiply+0xf2>
 801ccfc:	f104 0e14 	add.w	lr, r4, #20
 801cd00:	46a9      	mov	r9, r5
 801cd02:	f04f 0c00 	mov.w	ip, #0
 801cd06:	f85e 7b04 	ldr.w	r7, [lr], #4
 801cd0a:	f8d9 3000 	ldr.w	r3, [r9]
 801cd0e:	fa1f fb87 	uxth.w	fp, r7
 801cd12:	b29b      	uxth	r3, r3
 801cd14:	fb0a 330b 	mla	r3, sl, fp, r3
 801cd18:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801cd1c:	f8d9 7000 	ldr.w	r7, [r9]
 801cd20:	4463      	add	r3, ip
 801cd22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801cd26:	fb0a c70b 	mla	r7, sl, fp, ip
 801cd2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801cd2e:	b29b      	uxth	r3, r3
 801cd30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801cd34:	4572      	cmp	r2, lr
 801cd36:	f849 3b04 	str.w	r3, [r9], #4
 801cd3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801cd3e:	d8e2      	bhi.n	801cd06 <__multiply+0xb2>
 801cd40:	9b01      	ldr	r3, [sp, #4]
 801cd42:	f845 c003 	str.w	ip, [r5, r3]
 801cd46:	9b03      	ldr	r3, [sp, #12]
 801cd48:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801cd4c:	3104      	adds	r1, #4
 801cd4e:	f1b9 0f00 	cmp.w	r9, #0
 801cd52:	d021      	beq.n	801cd98 <__multiply+0x144>
 801cd54:	682b      	ldr	r3, [r5, #0]
 801cd56:	f104 0c14 	add.w	ip, r4, #20
 801cd5a:	46ae      	mov	lr, r5
 801cd5c:	f04f 0a00 	mov.w	sl, #0
 801cd60:	f8bc b000 	ldrh.w	fp, [ip]
 801cd64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801cd68:	fb09 770b 	mla	r7, r9, fp, r7
 801cd6c:	4457      	add	r7, sl
 801cd6e:	b29b      	uxth	r3, r3
 801cd70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801cd74:	f84e 3b04 	str.w	r3, [lr], #4
 801cd78:	f85c 3b04 	ldr.w	r3, [ip], #4
 801cd7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cd80:	f8be 3000 	ldrh.w	r3, [lr]
 801cd84:	fb09 330a 	mla	r3, r9, sl, r3
 801cd88:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801cd8c:	4562      	cmp	r2, ip
 801cd8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cd92:	d8e5      	bhi.n	801cd60 <__multiply+0x10c>
 801cd94:	9f01      	ldr	r7, [sp, #4]
 801cd96:	51eb      	str	r3, [r5, r7]
 801cd98:	3504      	adds	r5, #4
 801cd9a:	e799      	b.n	801ccd0 <__multiply+0x7c>
 801cd9c:	3e01      	subs	r6, #1
 801cd9e:	e79b      	b.n	801ccd8 <__multiply+0x84>
 801cda0:	080220d4 	.word	0x080220d4
 801cda4:	08022145 	.word	0x08022145

0801cda8 <__pow5mult>:
 801cda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cdac:	4615      	mov	r5, r2
 801cdae:	f012 0203 	ands.w	r2, r2, #3
 801cdb2:	4607      	mov	r7, r0
 801cdb4:	460e      	mov	r6, r1
 801cdb6:	d007      	beq.n	801cdc8 <__pow5mult+0x20>
 801cdb8:	4c25      	ldr	r4, [pc, #148]	@ (801ce50 <__pow5mult+0xa8>)
 801cdba:	3a01      	subs	r2, #1
 801cdbc:	2300      	movs	r3, #0
 801cdbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801cdc2:	f7ff fe55 	bl	801ca70 <__multadd>
 801cdc6:	4606      	mov	r6, r0
 801cdc8:	10ad      	asrs	r5, r5, #2
 801cdca:	d03d      	beq.n	801ce48 <__pow5mult+0xa0>
 801cdcc:	69fc      	ldr	r4, [r7, #28]
 801cdce:	b97c      	cbnz	r4, 801cdf0 <__pow5mult+0x48>
 801cdd0:	2010      	movs	r0, #16
 801cdd2:	f7fc fb3d 	bl	8019450 <malloc>
 801cdd6:	4602      	mov	r2, r0
 801cdd8:	61f8      	str	r0, [r7, #28]
 801cdda:	b928      	cbnz	r0, 801cde8 <__pow5mult+0x40>
 801cddc:	4b1d      	ldr	r3, [pc, #116]	@ (801ce54 <__pow5mult+0xac>)
 801cdde:	481e      	ldr	r0, [pc, #120]	@ (801ce58 <__pow5mult+0xb0>)
 801cde0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801cde4:	f7fe fbe2 	bl	801b5ac <__assert_func>
 801cde8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cdec:	6004      	str	r4, [r0, #0]
 801cdee:	60c4      	str	r4, [r0, #12]
 801cdf0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801cdf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cdf8:	b94c      	cbnz	r4, 801ce0e <__pow5mult+0x66>
 801cdfa:	f240 2171 	movw	r1, #625	@ 0x271
 801cdfe:	4638      	mov	r0, r7
 801ce00:	f7ff ff12 	bl	801cc28 <__i2b>
 801ce04:	2300      	movs	r3, #0
 801ce06:	f8c8 0008 	str.w	r0, [r8, #8]
 801ce0a:	4604      	mov	r4, r0
 801ce0c:	6003      	str	r3, [r0, #0]
 801ce0e:	f04f 0900 	mov.w	r9, #0
 801ce12:	07eb      	lsls	r3, r5, #31
 801ce14:	d50a      	bpl.n	801ce2c <__pow5mult+0x84>
 801ce16:	4631      	mov	r1, r6
 801ce18:	4622      	mov	r2, r4
 801ce1a:	4638      	mov	r0, r7
 801ce1c:	f7ff ff1a 	bl	801cc54 <__multiply>
 801ce20:	4631      	mov	r1, r6
 801ce22:	4680      	mov	r8, r0
 801ce24:	4638      	mov	r0, r7
 801ce26:	f7ff fe01 	bl	801ca2c <_Bfree>
 801ce2a:	4646      	mov	r6, r8
 801ce2c:	106d      	asrs	r5, r5, #1
 801ce2e:	d00b      	beq.n	801ce48 <__pow5mult+0xa0>
 801ce30:	6820      	ldr	r0, [r4, #0]
 801ce32:	b938      	cbnz	r0, 801ce44 <__pow5mult+0x9c>
 801ce34:	4622      	mov	r2, r4
 801ce36:	4621      	mov	r1, r4
 801ce38:	4638      	mov	r0, r7
 801ce3a:	f7ff ff0b 	bl	801cc54 <__multiply>
 801ce3e:	6020      	str	r0, [r4, #0]
 801ce40:	f8c0 9000 	str.w	r9, [r0]
 801ce44:	4604      	mov	r4, r0
 801ce46:	e7e4      	b.n	801ce12 <__pow5mult+0x6a>
 801ce48:	4630      	mov	r0, r6
 801ce4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ce4e:	bf00      	nop
 801ce50:	080221a0 	.word	0x080221a0
 801ce54:	08021fba 	.word	0x08021fba
 801ce58:	08022145 	.word	0x08022145

0801ce5c <__lshift>:
 801ce5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce60:	460c      	mov	r4, r1
 801ce62:	6849      	ldr	r1, [r1, #4]
 801ce64:	6923      	ldr	r3, [r4, #16]
 801ce66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ce6a:	68a3      	ldr	r3, [r4, #8]
 801ce6c:	4607      	mov	r7, r0
 801ce6e:	4691      	mov	r9, r2
 801ce70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ce74:	f108 0601 	add.w	r6, r8, #1
 801ce78:	42b3      	cmp	r3, r6
 801ce7a:	db0b      	blt.n	801ce94 <__lshift+0x38>
 801ce7c:	4638      	mov	r0, r7
 801ce7e:	f7ff fd95 	bl	801c9ac <_Balloc>
 801ce82:	4605      	mov	r5, r0
 801ce84:	b948      	cbnz	r0, 801ce9a <__lshift+0x3e>
 801ce86:	4602      	mov	r2, r0
 801ce88:	4b28      	ldr	r3, [pc, #160]	@ (801cf2c <__lshift+0xd0>)
 801ce8a:	4829      	ldr	r0, [pc, #164]	@ (801cf30 <__lshift+0xd4>)
 801ce8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801ce90:	f7fe fb8c 	bl	801b5ac <__assert_func>
 801ce94:	3101      	adds	r1, #1
 801ce96:	005b      	lsls	r3, r3, #1
 801ce98:	e7ee      	b.n	801ce78 <__lshift+0x1c>
 801ce9a:	2300      	movs	r3, #0
 801ce9c:	f100 0114 	add.w	r1, r0, #20
 801cea0:	f100 0210 	add.w	r2, r0, #16
 801cea4:	4618      	mov	r0, r3
 801cea6:	4553      	cmp	r3, sl
 801cea8:	db33      	blt.n	801cf12 <__lshift+0xb6>
 801ceaa:	6920      	ldr	r0, [r4, #16]
 801ceac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ceb0:	f104 0314 	add.w	r3, r4, #20
 801ceb4:	f019 091f 	ands.w	r9, r9, #31
 801ceb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cebc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801cec0:	d02b      	beq.n	801cf1a <__lshift+0xbe>
 801cec2:	f1c9 0e20 	rsb	lr, r9, #32
 801cec6:	468a      	mov	sl, r1
 801cec8:	2200      	movs	r2, #0
 801ceca:	6818      	ldr	r0, [r3, #0]
 801cecc:	fa00 f009 	lsl.w	r0, r0, r9
 801ced0:	4310      	orrs	r0, r2
 801ced2:	f84a 0b04 	str.w	r0, [sl], #4
 801ced6:	f853 2b04 	ldr.w	r2, [r3], #4
 801ceda:	459c      	cmp	ip, r3
 801cedc:	fa22 f20e 	lsr.w	r2, r2, lr
 801cee0:	d8f3      	bhi.n	801ceca <__lshift+0x6e>
 801cee2:	ebac 0304 	sub.w	r3, ip, r4
 801cee6:	3b15      	subs	r3, #21
 801cee8:	f023 0303 	bic.w	r3, r3, #3
 801ceec:	3304      	adds	r3, #4
 801ceee:	f104 0015 	add.w	r0, r4, #21
 801cef2:	4584      	cmp	ip, r0
 801cef4:	bf38      	it	cc
 801cef6:	2304      	movcc	r3, #4
 801cef8:	50ca      	str	r2, [r1, r3]
 801cefa:	b10a      	cbz	r2, 801cf00 <__lshift+0xa4>
 801cefc:	f108 0602 	add.w	r6, r8, #2
 801cf00:	3e01      	subs	r6, #1
 801cf02:	4638      	mov	r0, r7
 801cf04:	612e      	str	r6, [r5, #16]
 801cf06:	4621      	mov	r1, r4
 801cf08:	f7ff fd90 	bl	801ca2c <_Bfree>
 801cf0c:	4628      	mov	r0, r5
 801cf0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf12:	f842 0f04 	str.w	r0, [r2, #4]!
 801cf16:	3301      	adds	r3, #1
 801cf18:	e7c5      	b.n	801cea6 <__lshift+0x4a>
 801cf1a:	3904      	subs	r1, #4
 801cf1c:	f853 2b04 	ldr.w	r2, [r3], #4
 801cf20:	f841 2f04 	str.w	r2, [r1, #4]!
 801cf24:	459c      	cmp	ip, r3
 801cf26:	d8f9      	bhi.n	801cf1c <__lshift+0xc0>
 801cf28:	e7ea      	b.n	801cf00 <__lshift+0xa4>
 801cf2a:	bf00      	nop
 801cf2c:	080220d4 	.word	0x080220d4
 801cf30:	08022145 	.word	0x08022145

0801cf34 <__mcmp>:
 801cf34:	690a      	ldr	r2, [r1, #16]
 801cf36:	4603      	mov	r3, r0
 801cf38:	6900      	ldr	r0, [r0, #16]
 801cf3a:	1a80      	subs	r0, r0, r2
 801cf3c:	b530      	push	{r4, r5, lr}
 801cf3e:	d10e      	bne.n	801cf5e <__mcmp+0x2a>
 801cf40:	3314      	adds	r3, #20
 801cf42:	3114      	adds	r1, #20
 801cf44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801cf48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801cf4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801cf50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801cf54:	4295      	cmp	r5, r2
 801cf56:	d003      	beq.n	801cf60 <__mcmp+0x2c>
 801cf58:	d205      	bcs.n	801cf66 <__mcmp+0x32>
 801cf5a:	f04f 30ff 	mov.w	r0, #4294967295
 801cf5e:	bd30      	pop	{r4, r5, pc}
 801cf60:	42a3      	cmp	r3, r4
 801cf62:	d3f3      	bcc.n	801cf4c <__mcmp+0x18>
 801cf64:	e7fb      	b.n	801cf5e <__mcmp+0x2a>
 801cf66:	2001      	movs	r0, #1
 801cf68:	e7f9      	b.n	801cf5e <__mcmp+0x2a>
	...

0801cf6c <__mdiff>:
 801cf6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf70:	4689      	mov	r9, r1
 801cf72:	4606      	mov	r6, r0
 801cf74:	4611      	mov	r1, r2
 801cf76:	4648      	mov	r0, r9
 801cf78:	4614      	mov	r4, r2
 801cf7a:	f7ff ffdb 	bl	801cf34 <__mcmp>
 801cf7e:	1e05      	subs	r5, r0, #0
 801cf80:	d112      	bne.n	801cfa8 <__mdiff+0x3c>
 801cf82:	4629      	mov	r1, r5
 801cf84:	4630      	mov	r0, r6
 801cf86:	f7ff fd11 	bl	801c9ac <_Balloc>
 801cf8a:	4602      	mov	r2, r0
 801cf8c:	b928      	cbnz	r0, 801cf9a <__mdiff+0x2e>
 801cf8e:	4b3f      	ldr	r3, [pc, #252]	@ (801d08c <__mdiff+0x120>)
 801cf90:	f240 2137 	movw	r1, #567	@ 0x237
 801cf94:	483e      	ldr	r0, [pc, #248]	@ (801d090 <__mdiff+0x124>)
 801cf96:	f7fe fb09 	bl	801b5ac <__assert_func>
 801cf9a:	2301      	movs	r3, #1
 801cf9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cfa0:	4610      	mov	r0, r2
 801cfa2:	b003      	add	sp, #12
 801cfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfa8:	bfbc      	itt	lt
 801cfaa:	464b      	movlt	r3, r9
 801cfac:	46a1      	movlt	r9, r4
 801cfae:	4630      	mov	r0, r6
 801cfb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801cfb4:	bfba      	itte	lt
 801cfb6:	461c      	movlt	r4, r3
 801cfb8:	2501      	movlt	r5, #1
 801cfba:	2500      	movge	r5, #0
 801cfbc:	f7ff fcf6 	bl	801c9ac <_Balloc>
 801cfc0:	4602      	mov	r2, r0
 801cfc2:	b918      	cbnz	r0, 801cfcc <__mdiff+0x60>
 801cfc4:	4b31      	ldr	r3, [pc, #196]	@ (801d08c <__mdiff+0x120>)
 801cfc6:	f240 2145 	movw	r1, #581	@ 0x245
 801cfca:	e7e3      	b.n	801cf94 <__mdiff+0x28>
 801cfcc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801cfd0:	6926      	ldr	r6, [r4, #16]
 801cfd2:	60c5      	str	r5, [r0, #12]
 801cfd4:	f109 0310 	add.w	r3, r9, #16
 801cfd8:	f109 0514 	add.w	r5, r9, #20
 801cfdc:	f104 0e14 	add.w	lr, r4, #20
 801cfe0:	f100 0b14 	add.w	fp, r0, #20
 801cfe4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801cfe8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801cfec:	9301      	str	r3, [sp, #4]
 801cfee:	46d9      	mov	r9, fp
 801cff0:	f04f 0c00 	mov.w	ip, #0
 801cff4:	9b01      	ldr	r3, [sp, #4]
 801cff6:	f85e 0b04 	ldr.w	r0, [lr], #4
 801cffa:	f853 af04 	ldr.w	sl, [r3, #4]!
 801cffe:	9301      	str	r3, [sp, #4]
 801d000:	fa1f f38a 	uxth.w	r3, sl
 801d004:	4619      	mov	r1, r3
 801d006:	b283      	uxth	r3, r0
 801d008:	1acb      	subs	r3, r1, r3
 801d00a:	0c00      	lsrs	r0, r0, #16
 801d00c:	4463      	add	r3, ip
 801d00e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801d012:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801d016:	b29b      	uxth	r3, r3
 801d018:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801d01c:	4576      	cmp	r6, lr
 801d01e:	f849 3b04 	str.w	r3, [r9], #4
 801d022:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d026:	d8e5      	bhi.n	801cff4 <__mdiff+0x88>
 801d028:	1b33      	subs	r3, r6, r4
 801d02a:	3b15      	subs	r3, #21
 801d02c:	f023 0303 	bic.w	r3, r3, #3
 801d030:	3415      	adds	r4, #21
 801d032:	3304      	adds	r3, #4
 801d034:	42a6      	cmp	r6, r4
 801d036:	bf38      	it	cc
 801d038:	2304      	movcc	r3, #4
 801d03a:	441d      	add	r5, r3
 801d03c:	445b      	add	r3, fp
 801d03e:	461e      	mov	r6, r3
 801d040:	462c      	mov	r4, r5
 801d042:	4544      	cmp	r4, r8
 801d044:	d30e      	bcc.n	801d064 <__mdiff+0xf8>
 801d046:	f108 0103 	add.w	r1, r8, #3
 801d04a:	1b49      	subs	r1, r1, r5
 801d04c:	f021 0103 	bic.w	r1, r1, #3
 801d050:	3d03      	subs	r5, #3
 801d052:	45a8      	cmp	r8, r5
 801d054:	bf38      	it	cc
 801d056:	2100      	movcc	r1, #0
 801d058:	440b      	add	r3, r1
 801d05a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d05e:	b191      	cbz	r1, 801d086 <__mdiff+0x11a>
 801d060:	6117      	str	r7, [r2, #16]
 801d062:	e79d      	b.n	801cfa0 <__mdiff+0x34>
 801d064:	f854 1b04 	ldr.w	r1, [r4], #4
 801d068:	46e6      	mov	lr, ip
 801d06a:	0c08      	lsrs	r0, r1, #16
 801d06c:	fa1c fc81 	uxtah	ip, ip, r1
 801d070:	4471      	add	r1, lr
 801d072:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801d076:	b289      	uxth	r1, r1
 801d078:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d07c:	f846 1b04 	str.w	r1, [r6], #4
 801d080:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d084:	e7dd      	b.n	801d042 <__mdiff+0xd6>
 801d086:	3f01      	subs	r7, #1
 801d088:	e7e7      	b.n	801d05a <__mdiff+0xee>
 801d08a:	bf00      	nop
 801d08c:	080220d4 	.word	0x080220d4
 801d090:	08022145 	.word	0x08022145

0801d094 <__ulp>:
 801d094:	b082      	sub	sp, #8
 801d096:	ed8d 0b00 	vstr	d0, [sp]
 801d09a:	9a01      	ldr	r2, [sp, #4]
 801d09c:	4b0f      	ldr	r3, [pc, #60]	@ (801d0dc <__ulp+0x48>)
 801d09e:	4013      	ands	r3, r2
 801d0a0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801d0a4:	2b00      	cmp	r3, #0
 801d0a6:	dc08      	bgt.n	801d0ba <__ulp+0x26>
 801d0a8:	425b      	negs	r3, r3
 801d0aa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801d0ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d0b2:	da04      	bge.n	801d0be <__ulp+0x2a>
 801d0b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801d0b8:	4113      	asrs	r3, r2
 801d0ba:	2200      	movs	r2, #0
 801d0bc:	e008      	b.n	801d0d0 <__ulp+0x3c>
 801d0be:	f1a2 0314 	sub.w	r3, r2, #20
 801d0c2:	2b1e      	cmp	r3, #30
 801d0c4:	bfda      	itte	le
 801d0c6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801d0ca:	40da      	lsrle	r2, r3
 801d0cc:	2201      	movgt	r2, #1
 801d0ce:	2300      	movs	r3, #0
 801d0d0:	4619      	mov	r1, r3
 801d0d2:	4610      	mov	r0, r2
 801d0d4:	ec41 0b10 	vmov	d0, r0, r1
 801d0d8:	b002      	add	sp, #8
 801d0da:	4770      	bx	lr
 801d0dc:	7ff00000 	.word	0x7ff00000

0801d0e0 <__b2d>:
 801d0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0e4:	6906      	ldr	r6, [r0, #16]
 801d0e6:	f100 0814 	add.w	r8, r0, #20
 801d0ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d0ee:	1f37      	subs	r7, r6, #4
 801d0f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d0f4:	4610      	mov	r0, r2
 801d0f6:	f7ff fd4b 	bl	801cb90 <__hi0bits>
 801d0fa:	f1c0 0320 	rsb	r3, r0, #32
 801d0fe:	280a      	cmp	r0, #10
 801d100:	600b      	str	r3, [r1, #0]
 801d102:	491b      	ldr	r1, [pc, #108]	@ (801d170 <__b2d+0x90>)
 801d104:	dc15      	bgt.n	801d132 <__b2d+0x52>
 801d106:	f1c0 0c0b 	rsb	ip, r0, #11
 801d10a:	fa22 f30c 	lsr.w	r3, r2, ip
 801d10e:	45b8      	cmp	r8, r7
 801d110:	ea43 0501 	orr.w	r5, r3, r1
 801d114:	bf34      	ite	cc
 801d116:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d11a:	2300      	movcs	r3, #0
 801d11c:	3015      	adds	r0, #21
 801d11e:	fa02 f000 	lsl.w	r0, r2, r0
 801d122:	fa23 f30c 	lsr.w	r3, r3, ip
 801d126:	4303      	orrs	r3, r0
 801d128:	461c      	mov	r4, r3
 801d12a:	ec45 4b10 	vmov	d0, r4, r5
 801d12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d132:	45b8      	cmp	r8, r7
 801d134:	bf3a      	itte	cc
 801d136:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d13a:	f1a6 0708 	subcc.w	r7, r6, #8
 801d13e:	2300      	movcs	r3, #0
 801d140:	380b      	subs	r0, #11
 801d142:	d012      	beq.n	801d16a <__b2d+0x8a>
 801d144:	f1c0 0120 	rsb	r1, r0, #32
 801d148:	fa23 f401 	lsr.w	r4, r3, r1
 801d14c:	4082      	lsls	r2, r0
 801d14e:	4322      	orrs	r2, r4
 801d150:	4547      	cmp	r7, r8
 801d152:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801d156:	bf8c      	ite	hi
 801d158:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d15c:	2200      	movls	r2, #0
 801d15e:	4083      	lsls	r3, r0
 801d160:	40ca      	lsrs	r2, r1
 801d162:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801d166:	4313      	orrs	r3, r2
 801d168:	e7de      	b.n	801d128 <__b2d+0x48>
 801d16a:	ea42 0501 	orr.w	r5, r2, r1
 801d16e:	e7db      	b.n	801d128 <__b2d+0x48>
 801d170:	3ff00000 	.word	0x3ff00000

0801d174 <__d2b>:
 801d174:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d178:	460f      	mov	r7, r1
 801d17a:	2101      	movs	r1, #1
 801d17c:	ec59 8b10 	vmov	r8, r9, d0
 801d180:	4616      	mov	r6, r2
 801d182:	f7ff fc13 	bl	801c9ac <_Balloc>
 801d186:	4604      	mov	r4, r0
 801d188:	b930      	cbnz	r0, 801d198 <__d2b+0x24>
 801d18a:	4602      	mov	r2, r0
 801d18c:	4b23      	ldr	r3, [pc, #140]	@ (801d21c <__d2b+0xa8>)
 801d18e:	4824      	ldr	r0, [pc, #144]	@ (801d220 <__d2b+0xac>)
 801d190:	f240 310f 	movw	r1, #783	@ 0x30f
 801d194:	f7fe fa0a 	bl	801b5ac <__assert_func>
 801d198:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d19c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d1a0:	b10d      	cbz	r5, 801d1a6 <__d2b+0x32>
 801d1a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d1a6:	9301      	str	r3, [sp, #4]
 801d1a8:	f1b8 0300 	subs.w	r3, r8, #0
 801d1ac:	d023      	beq.n	801d1f6 <__d2b+0x82>
 801d1ae:	4668      	mov	r0, sp
 801d1b0:	9300      	str	r3, [sp, #0]
 801d1b2:	f7ff fd0c 	bl	801cbce <__lo0bits>
 801d1b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d1ba:	b1d0      	cbz	r0, 801d1f2 <__d2b+0x7e>
 801d1bc:	f1c0 0320 	rsb	r3, r0, #32
 801d1c0:	fa02 f303 	lsl.w	r3, r2, r3
 801d1c4:	430b      	orrs	r3, r1
 801d1c6:	40c2      	lsrs	r2, r0
 801d1c8:	6163      	str	r3, [r4, #20]
 801d1ca:	9201      	str	r2, [sp, #4]
 801d1cc:	9b01      	ldr	r3, [sp, #4]
 801d1ce:	61a3      	str	r3, [r4, #24]
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	bf0c      	ite	eq
 801d1d4:	2201      	moveq	r2, #1
 801d1d6:	2202      	movne	r2, #2
 801d1d8:	6122      	str	r2, [r4, #16]
 801d1da:	b1a5      	cbz	r5, 801d206 <__d2b+0x92>
 801d1dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801d1e0:	4405      	add	r5, r0
 801d1e2:	603d      	str	r5, [r7, #0]
 801d1e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801d1e8:	6030      	str	r0, [r6, #0]
 801d1ea:	4620      	mov	r0, r4
 801d1ec:	b003      	add	sp, #12
 801d1ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d1f2:	6161      	str	r1, [r4, #20]
 801d1f4:	e7ea      	b.n	801d1cc <__d2b+0x58>
 801d1f6:	a801      	add	r0, sp, #4
 801d1f8:	f7ff fce9 	bl	801cbce <__lo0bits>
 801d1fc:	9b01      	ldr	r3, [sp, #4]
 801d1fe:	6163      	str	r3, [r4, #20]
 801d200:	3020      	adds	r0, #32
 801d202:	2201      	movs	r2, #1
 801d204:	e7e8      	b.n	801d1d8 <__d2b+0x64>
 801d206:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d20a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801d20e:	6038      	str	r0, [r7, #0]
 801d210:	6918      	ldr	r0, [r3, #16]
 801d212:	f7ff fcbd 	bl	801cb90 <__hi0bits>
 801d216:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d21a:	e7e5      	b.n	801d1e8 <__d2b+0x74>
 801d21c:	080220d4 	.word	0x080220d4
 801d220:	08022145 	.word	0x08022145

0801d224 <__ratio>:
 801d224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d228:	b085      	sub	sp, #20
 801d22a:	e9cd 1000 	strd	r1, r0, [sp]
 801d22e:	a902      	add	r1, sp, #8
 801d230:	f7ff ff56 	bl	801d0e0 <__b2d>
 801d234:	9800      	ldr	r0, [sp, #0]
 801d236:	a903      	add	r1, sp, #12
 801d238:	ec55 4b10 	vmov	r4, r5, d0
 801d23c:	f7ff ff50 	bl	801d0e0 <__b2d>
 801d240:	9b01      	ldr	r3, [sp, #4]
 801d242:	6919      	ldr	r1, [r3, #16]
 801d244:	9b00      	ldr	r3, [sp, #0]
 801d246:	691b      	ldr	r3, [r3, #16]
 801d248:	1ac9      	subs	r1, r1, r3
 801d24a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801d24e:	1a9b      	subs	r3, r3, r2
 801d250:	ec5b ab10 	vmov	sl, fp, d0
 801d254:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801d258:	2b00      	cmp	r3, #0
 801d25a:	bfce      	itee	gt
 801d25c:	462a      	movgt	r2, r5
 801d25e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d262:	465a      	movle	r2, fp
 801d264:	462f      	mov	r7, r5
 801d266:	46d9      	mov	r9, fp
 801d268:	bfcc      	ite	gt
 801d26a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d26e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801d272:	464b      	mov	r3, r9
 801d274:	4652      	mov	r2, sl
 801d276:	4620      	mov	r0, r4
 801d278:	4639      	mov	r1, r7
 801d27a:	f7e3 fabf 	bl	80007fc <__aeabi_ddiv>
 801d27e:	ec41 0b10 	vmov	d0, r0, r1
 801d282:	b005      	add	sp, #20
 801d284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d288 <__copybits>:
 801d288:	3901      	subs	r1, #1
 801d28a:	b570      	push	{r4, r5, r6, lr}
 801d28c:	1149      	asrs	r1, r1, #5
 801d28e:	6914      	ldr	r4, [r2, #16]
 801d290:	3101      	adds	r1, #1
 801d292:	f102 0314 	add.w	r3, r2, #20
 801d296:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d29a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d29e:	1f05      	subs	r5, r0, #4
 801d2a0:	42a3      	cmp	r3, r4
 801d2a2:	d30c      	bcc.n	801d2be <__copybits+0x36>
 801d2a4:	1aa3      	subs	r3, r4, r2
 801d2a6:	3b11      	subs	r3, #17
 801d2a8:	f023 0303 	bic.w	r3, r3, #3
 801d2ac:	3211      	adds	r2, #17
 801d2ae:	42a2      	cmp	r2, r4
 801d2b0:	bf88      	it	hi
 801d2b2:	2300      	movhi	r3, #0
 801d2b4:	4418      	add	r0, r3
 801d2b6:	2300      	movs	r3, #0
 801d2b8:	4288      	cmp	r0, r1
 801d2ba:	d305      	bcc.n	801d2c8 <__copybits+0x40>
 801d2bc:	bd70      	pop	{r4, r5, r6, pc}
 801d2be:	f853 6b04 	ldr.w	r6, [r3], #4
 801d2c2:	f845 6f04 	str.w	r6, [r5, #4]!
 801d2c6:	e7eb      	b.n	801d2a0 <__copybits+0x18>
 801d2c8:	f840 3b04 	str.w	r3, [r0], #4
 801d2cc:	e7f4      	b.n	801d2b8 <__copybits+0x30>

0801d2ce <__any_on>:
 801d2ce:	f100 0214 	add.w	r2, r0, #20
 801d2d2:	6900      	ldr	r0, [r0, #16]
 801d2d4:	114b      	asrs	r3, r1, #5
 801d2d6:	4298      	cmp	r0, r3
 801d2d8:	b510      	push	{r4, lr}
 801d2da:	db11      	blt.n	801d300 <__any_on+0x32>
 801d2dc:	dd0a      	ble.n	801d2f4 <__any_on+0x26>
 801d2de:	f011 011f 	ands.w	r1, r1, #31
 801d2e2:	d007      	beq.n	801d2f4 <__any_on+0x26>
 801d2e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d2e8:	fa24 f001 	lsr.w	r0, r4, r1
 801d2ec:	fa00 f101 	lsl.w	r1, r0, r1
 801d2f0:	428c      	cmp	r4, r1
 801d2f2:	d10b      	bne.n	801d30c <__any_on+0x3e>
 801d2f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d2f8:	4293      	cmp	r3, r2
 801d2fa:	d803      	bhi.n	801d304 <__any_on+0x36>
 801d2fc:	2000      	movs	r0, #0
 801d2fe:	bd10      	pop	{r4, pc}
 801d300:	4603      	mov	r3, r0
 801d302:	e7f7      	b.n	801d2f4 <__any_on+0x26>
 801d304:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d308:	2900      	cmp	r1, #0
 801d30a:	d0f5      	beq.n	801d2f8 <__any_on+0x2a>
 801d30c:	2001      	movs	r0, #1
 801d30e:	e7f6      	b.n	801d2fe <__any_on+0x30>

0801d310 <__ascii_wctomb>:
 801d310:	4603      	mov	r3, r0
 801d312:	4608      	mov	r0, r1
 801d314:	b141      	cbz	r1, 801d328 <__ascii_wctomb+0x18>
 801d316:	2aff      	cmp	r2, #255	@ 0xff
 801d318:	d904      	bls.n	801d324 <__ascii_wctomb+0x14>
 801d31a:	228a      	movs	r2, #138	@ 0x8a
 801d31c:	601a      	str	r2, [r3, #0]
 801d31e:	f04f 30ff 	mov.w	r0, #4294967295
 801d322:	4770      	bx	lr
 801d324:	700a      	strb	r2, [r1, #0]
 801d326:	2001      	movs	r0, #1
 801d328:	4770      	bx	lr

0801d32a <__ssputs_r>:
 801d32a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d32e:	688e      	ldr	r6, [r1, #8]
 801d330:	461f      	mov	r7, r3
 801d332:	42be      	cmp	r6, r7
 801d334:	680b      	ldr	r3, [r1, #0]
 801d336:	4682      	mov	sl, r0
 801d338:	460c      	mov	r4, r1
 801d33a:	4690      	mov	r8, r2
 801d33c:	d82d      	bhi.n	801d39a <__ssputs_r+0x70>
 801d33e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d342:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d346:	d026      	beq.n	801d396 <__ssputs_r+0x6c>
 801d348:	6965      	ldr	r5, [r4, #20]
 801d34a:	6909      	ldr	r1, [r1, #16]
 801d34c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d350:	eba3 0901 	sub.w	r9, r3, r1
 801d354:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d358:	1c7b      	adds	r3, r7, #1
 801d35a:	444b      	add	r3, r9
 801d35c:	106d      	asrs	r5, r5, #1
 801d35e:	429d      	cmp	r5, r3
 801d360:	bf38      	it	cc
 801d362:	461d      	movcc	r5, r3
 801d364:	0553      	lsls	r3, r2, #21
 801d366:	d527      	bpl.n	801d3b8 <__ssputs_r+0x8e>
 801d368:	4629      	mov	r1, r5
 801d36a:	f7fc f8a3 	bl	80194b4 <_malloc_r>
 801d36e:	4606      	mov	r6, r0
 801d370:	b360      	cbz	r0, 801d3cc <__ssputs_r+0xa2>
 801d372:	6921      	ldr	r1, [r4, #16]
 801d374:	464a      	mov	r2, r9
 801d376:	f7fe f8fc 	bl	801b572 <memcpy>
 801d37a:	89a3      	ldrh	r3, [r4, #12]
 801d37c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d384:	81a3      	strh	r3, [r4, #12]
 801d386:	6126      	str	r6, [r4, #16]
 801d388:	6165      	str	r5, [r4, #20]
 801d38a:	444e      	add	r6, r9
 801d38c:	eba5 0509 	sub.w	r5, r5, r9
 801d390:	6026      	str	r6, [r4, #0]
 801d392:	60a5      	str	r5, [r4, #8]
 801d394:	463e      	mov	r6, r7
 801d396:	42be      	cmp	r6, r7
 801d398:	d900      	bls.n	801d39c <__ssputs_r+0x72>
 801d39a:	463e      	mov	r6, r7
 801d39c:	6820      	ldr	r0, [r4, #0]
 801d39e:	4632      	mov	r2, r6
 801d3a0:	4641      	mov	r1, r8
 801d3a2:	f000 fbad 	bl	801db00 <memmove>
 801d3a6:	68a3      	ldr	r3, [r4, #8]
 801d3a8:	1b9b      	subs	r3, r3, r6
 801d3aa:	60a3      	str	r3, [r4, #8]
 801d3ac:	6823      	ldr	r3, [r4, #0]
 801d3ae:	4433      	add	r3, r6
 801d3b0:	6023      	str	r3, [r4, #0]
 801d3b2:	2000      	movs	r0, #0
 801d3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3b8:	462a      	mov	r2, r5
 801d3ba:	f000 fbd6 	bl	801db6a <_realloc_r>
 801d3be:	4606      	mov	r6, r0
 801d3c0:	2800      	cmp	r0, #0
 801d3c2:	d1e0      	bne.n	801d386 <__ssputs_r+0x5c>
 801d3c4:	6921      	ldr	r1, [r4, #16]
 801d3c6:	4650      	mov	r0, sl
 801d3c8:	f7fe ff5a 	bl	801c280 <_free_r>
 801d3cc:	230c      	movs	r3, #12
 801d3ce:	f8ca 3000 	str.w	r3, [sl]
 801d3d2:	89a3      	ldrh	r3, [r4, #12]
 801d3d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d3d8:	81a3      	strh	r3, [r4, #12]
 801d3da:	f04f 30ff 	mov.w	r0, #4294967295
 801d3de:	e7e9      	b.n	801d3b4 <__ssputs_r+0x8a>

0801d3e0 <_svfiprintf_r>:
 801d3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3e4:	4698      	mov	r8, r3
 801d3e6:	898b      	ldrh	r3, [r1, #12]
 801d3e8:	061b      	lsls	r3, r3, #24
 801d3ea:	b09d      	sub	sp, #116	@ 0x74
 801d3ec:	4607      	mov	r7, r0
 801d3ee:	460d      	mov	r5, r1
 801d3f0:	4614      	mov	r4, r2
 801d3f2:	d510      	bpl.n	801d416 <_svfiprintf_r+0x36>
 801d3f4:	690b      	ldr	r3, [r1, #16]
 801d3f6:	b973      	cbnz	r3, 801d416 <_svfiprintf_r+0x36>
 801d3f8:	2140      	movs	r1, #64	@ 0x40
 801d3fa:	f7fc f85b 	bl	80194b4 <_malloc_r>
 801d3fe:	6028      	str	r0, [r5, #0]
 801d400:	6128      	str	r0, [r5, #16]
 801d402:	b930      	cbnz	r0, 801d412 <_svfiprintf_r+0x32>
 801d404:	230c      	movs	r3, #12
 801d406:	603b      	str	r3, [r7, #0]
 801d408:	f04f 30ff 	mov.w	r0, #4294967295
 801d40c:	b01d      	add	sp, #116	@ 0x74
 801d40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d412:	2340      	movs	r3, #64	@ 0x40
 801d414:	616b      	str	r3, [r5, #20]
 801d416:	2300      	movs	r3, #0
 801d418:	9309      	str	r3, [sp, #36]	@ 0x24
 801d41a:	2320      	movs	r3, #32
 801d41c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d420:	f8cd 800c 	str.w	r8, [sp, #12]
 801d424:	2330      	movs	r3, #48	@ 0x30
 801d426:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d5c4 <_svfiprintf_r+0x1e4>
 801d42a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d42e:	f04f 0901 	mov.w	r9, #1
 801d432:	4623      	mov	r3, r4
 801d434:	469a      	mov	sl, r3
 801d436:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d43a:	b10a      	cbz	r2, 801d440 <_svfiprintf_r+0x60>
 801d43c:	2a25      	cmp	r2, #37	@ 0x25
 801d43e:	d1f9      	bne.n	801d434 <_svfiprintf_r+0x54>
 801d440:	ebba 0b04 	subs.w	fp, sl, r4
 801d444:	d00b      	beq.n	801d45e <_svfiprintf_r+0x7e>
 801d446:	465b      	mov	r3, fp
 801d448:	4622      	mov	r2, r4
 801d44a:	4629      	mov	r1, r5
 801d44c:	4638      	mov	r0, r7
 801d44e:	f7ff ff6c 	bl	801d32a <__ssputs_r>
 801d452:	3001      	adds	r0, #1
 801d454:	f000 80a7 	beq.w	801d5a6 <_svfiprintf_r+0x1c6>
 801d458:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d45a:	445a      	add	r2, fp
 801d45c:	9209      	str	r2, [sp, #36]	@ 0x24
 801d45e:	f89a 3000 	ldrb.w	r3, [sl]
 801d462:	2b00      	cmp	r3, #0
 801d464:	f000 809f 	beq.w	801d5a6 <_svfiprintf_r+0x1c6>
 801d468:	2300      	movs	r3, #0
 801d46a:	f04f 32ff 	mov.w	r2, #4294967295
 801d46e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d472:	f10a 0a01 	add.w	sl, sl, #1
 801d476:	9304      	str	r3, [sp, #16]
 801d478:	9307      	str	r3, [sp, #28]
 801d47a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d47e:	931a      	str	r3, [sp, #104]	@ 0x68
 801d480:	4654      	mov	r4, sl
 801d482:	2205      	movs	r2, #5
 801d484:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d488:	484e      	ldr	r0, [pc, #312]	@ (801d5c4 <_svfiprintf_r+0x1e4>)
 801d48a:	f7e2 fe79 	bl	8000180 <memchr>
 801d48e:	9a04      	ldr	r2, [sp, #16]
 801d490:	b9d8      	cbnz	r0, 801d4ca <_svfiprintf_r+0xea>
 801d492:	06d0      	lsls	r0, r2, #27
 801d494:	bf44      	itt	mi
 801d496:	2320      	movmi	r3, #32
 801d498:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d49c:	0711      	lsls	r1, r2, #28
 801d49e:	bf44      	itt	mi
 801d4a0:	232b      	movmi	r3, #43	@ 0x2b
 801d4a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d4a6:	f89a 3000 	ldrb.w	r3, [sl]
 801d4aa:	2b2a      	cmp	r3, #42	@ 0x2a
 801d4ac:	d015      	beq.n	801d4da <_svfiprintf_r+0xfa>
 801d4ae:	9a07      	ldr	r2, [sp, #28]
 801d4b0:	4654      	mov	r4, sl
 801d4b2:	2000      	movs	r0, #0
 801d4b4:	f04f 0c0a 	mov.w	ip, #10
 801d4b8:	4621      	mov	r1, r4
 801d4ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d4be:	3b30      	subs	r3, #48	@ 0x30
 801d4c0:	2b09      	cmp	r3, #9
 801d4c2:	d94b      	bls.n	801d55c <_svfiprintf_r+0x17c>
 801d4c4:	b1b0      	cbz	r0, 801d4f4 <_svfiprintf_r+0x114>
 801d4c6:	9207      	str	r2, [sp, #28]
 801d4c8:	e014      	b.n	801d4f4 <_svfiprintf_r+0x114>
 801d4ca:	eba0 0308 	sub.w	r3, r0, r8
 801d4ce:	fa09 f303 	lsl.w	r3, r9, r3
 801d4d2:	4313      	orrs	r3, r2
 801d4d4:	9304      	str	r3, [sp, #16]
 801d4d6:	46a2      	mov	sl, r4
 801d4d8:	e7d2      	b.n	801d480 <_svfiprintf_r+0xa0>
 801d4da:	9b03      	ldr	r3, [sp, #12]
 801d4dc:	1d19      	adds	r1, r3, #4
 801d4de:	681b      	ldr	r3, [r3, #0]
 801d4e0:	9103      	str	r1, [sp, #12]
 801d4e2:	2b00      	cmp	r3, #0
 801d4e4:	bfbb      	ittet	lt
 801d4e6:	425b      	neglt	r3, r3
 801d4e8:	f042 0202 	orrlt.w	r2, r2, #2
 801d4ec:	9307      	strge	r3, [sp, #28]
 801d4ee:	9307      	strlt	r3, [sp, #28]
 801d4f0:	bfb8      	it	lt
 801d4f2:	9204      	strlt	r2, [sp, #16]
 801d4f4:	7823      	ldrb	r3, [r4, #0]
 801d4f6:	2b2e      	cmp	r3, #46	@ 0x2e
 801d4f8:	d10a      	bne.n	801d510 <_svfiprintf_r+0x130>
 801d4fa:	7863      	ldrb	r3, [r4, #1]
 801d4fc:	2b2a      	cmp	r3, #42	@ 0x2a
 801d4fe:	d132      	bne.n	801d566 <_svfiprintf_r+0x186>
 801d500:	9b03      	ldr	r3, [sp, #12]
 801d502:	1d1a      	adds	r2, r3, #4
 801d504:	681b      	ldr	r3, [r3, #0]
 801d506:	9203      	str	r2, [sp, #12]
 801d508:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d50c:	3402      	adds	r4, #2
 801d50e:	9305      	str	r3, [sp, #20]
 801d510:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d5d4 <_svfiprintf_r+0x1f4>
 801d514:	7821      	ldrb	r1, [r4, #0]
 801d516:	2203      	movs	r2, #3
 801d518:	4650      	mov	r0, sl
 801d51a:	f7e2 fe31 	bl	8000180 <memchr>
 801d51e:	b138      	cbz	r0, 801d530 <_svfiprintf_r+0x150>
 801d520:	9b04      	ldr	r3, [sp, #16]
 801d522:	eba0 000a 	sub.w	r0, r0, sl
 801d526:	2240      	movs	r2, #64	@ 0x40
 801d528:	4082      	lsls	r2, r0
 801d52a:	4313      	orrs	r3, r2
 801d52c:	3401      	adds	r4, #1
 801d52e:	9304      	str	r3, [sp, #16]
 801d530:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d534:	4824      	ldr	r0, [pc, #144]	@ (801d5c8 <_svfiprintf_r+0x1e8>)
 801d536:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d53a:	2206      	movs	r2, #6
 801d53c:	f7e2 fe20 	bl	8000180 <memchr>
 801d540:	2800      	cmp	r0, #0
 801d542:	d036      	beq.n	801d5b2 <_svfiprintf_r+0x1d2>
 801d544:	4b21      	ldr	r3, [pc, #132]	@ (801d5cc <_svfiprintf_r+0x1ec>)
 801d546:	bb1b      	cbnz	r3, 801d590 <_svfiprintf_r+0x1b0>
 801d548:	9b03      	ldr	r3, [sp, #12]
 801d54a:	3307      	adds	r3, #7
 801d54c:	f023 0307 	bic.w	r3, r3, #7
 801d550:	3308      	adds	r3, #8
 801d552:	9303      	str	r3, [sp, #12]
 801d554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d556:	4433      	add	r3, r6
 801d558:	9309      	str	r3, [sp, #36]	@ 0x24
 801d55a:	e76a      	b.n	801d432 <_svfiprintf_r+0x52>
 801d55c:	fb0c 3202 	mla	r2, ip, r2, r3
 801d560:	460c      	mov	r4, r1
 801d562:	2001      	movs	r0, #1
 801d564:	e7a8      	b.n	801d4b8 <_svfiprintf_r+0xd8>
 801d566:	2300      	movs	r3, #0
 801d568:	3401      	adds	r4, #1
 801d56a:	9305      	str	r3, [sp, #20]
 801d56c:	4619      	mov	r1, r3
 801d56e:	f04f 0c0a 	mov.w	ip, #10
 801d572:	4620      	mov	r0, r4
 801d574:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d578:	3a30      	subs	r2, #48	@ 0x30
 801d57a:	2a09      	cmp	r2, #9
 801d57c:	d903      	bls.n	801d586 <_svfiprintf_r+0x1a6>
 801d57e:	2b00      	cmp	r3, #0
 801d580:	d0c6      	beq.n	801d510 <_svfiprintf_r+0x130>
 801d582:	9105      	str	r1, [sp, #20]
 801d584:	e7c4      	b.n	801d510 <_svfiprintf_r+0x130>
 801d586:	fb0c 2101 	mla	r1, ip, r1, r2
 801d58a:	4604      	mov	r4, r0
 801d58c:	2301      	movs	r3, #1
 801d58e:	e7f0      	b.n	801d572 <_svfiprintf_r+0x192>
 801d590:	ab03      	add	r3, sp, #12
 801d592:	9300      	str	r3, [sp, #0]
 801d594:	462a      	mov	r2, r5
 801d596:	4b0e      	ldr	r3, [pc, #56]	@ (801d5d0 <_svfiprintf_r+0x1f0>)
 801d598:	a904      	add	r1, sp, #16
 801d59a:	4638      	mov	r0, r7
 801d59c:	f7fc ffa8 	bl	801a4f0 <_printf_float>
 801d5a0:	1c42      	adds	r2, r0, #1
 801d5a2:	4606      	mov	r6, r0
 801d5a4:	d1d6      	bne.n	801d554 <_svfiprintf_r+0x174>
 801d5a6:	89ab      	ldrh	r3, [r5, #12]
 801d5a8:	065b      	lsls	r3, r3, #25
 801d5aa:	f53f af2d 	bmi.w	801d408 <_svfiprintf_r+0x28>
 801d5ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d5b0:	e72c      	b.n	801d40c <_svfiprintf_r+0x2c>
 801d5b2:	ab03      	add	r3, sp, #12
 801d5b4:	9300      	str	r3, [sp, #0]
 801d5b6:	462a      	mov	r2, r5
 801d5b8:	4b05      	ldr	r3, [pc, #20]	@ (801d5d0 <_svfiprintf_r+0x1f0>)
 801d5ba:	a904      	add	r1, sp, #16
 801d5bc:	4638      	mov	r0, r7
 801d5be:	f7fd fa2f 	bl	801aa20 <_printf_i>
 801d5c2:	e7ed      	b.n	801d5a0 <_svfiprintf_r+0x1c0>
 801d5c4:	080222a0 	.word	0x080222a0
 801d5c8:	080222aa 	.word	0x080222aa
 801d5cc:	0801a4f1 	.word	0x0801a4f1
 801d5d0:	0801d32b 	.word	0x0801d32b
 801d5d4:	080222a6 	.word	0x080222a6

0801d5d8 <__sfputc_r>:
 801d5d8:	6893      	ldr	r3, [r2, #8]
 801d5da:	3b01      	subs	r3, #1
 801d5dc:	2b00      	cmp	r3, #0
 801d5de:	b410      	push	{r4}
 801d5e0:	6093      	str	r3, [r2, #8]
 801d5e2:	da08      	bge.n	801d5f6 <__sfputc_r+0x1e>
 801d5e4:	6994      	ldr	r4, [r2, #24]
 801d5e6:	42a3      	cmp	r3, r4
 801d5e8:	db01      	blt.n	801d5ee <__sfputc_r+0x16>
 801d5ea:	290a      	cmp	r1, #10
 801d5ec:	d103      	bne.n	801d5f6 <__sfputc_r+0x1e>
 801d5ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d5f2:	f000 b9f1 	b.w	801d9d8 <__swbuf_r>
 801d5f6:	6813      	ldr	r3, [r2, #0]
 801d5f8:	1c58      	adds	r0, r3, #1
 801d5fa:	6010      	str	r0, [r2, #0]
 801d5fc:	7019      	strb	r1, [r3, #0]
 801d5fe:	4608      	mov	r0, r1
 801d600:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d604:	4770      	bx	lr

0801d606 <__sfputs_r>:
 801d606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d608:	4606      	mov	r6, r0
 801d60a:	460f      	mov	r7, r1
 801d60c:	4614      	mov	r4, r2
 801d60e:	18d5      	adds	r5, r2, r3
 801d610:	42ac      	cmp	r4, r5
 801d612:	d101      	bne.n	801d618 <__sfputs_r+0x12>
 801d614:	2000      	movs	r0, #0
 801d616:	e007      	b.n	801d628 <__sfputs_r+0x22>
 801d618:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d61c:	463a      	mov	r2, r7
 801d61e:	4630      	mov	r0, r6
 801d620:	f7ff ffda 	bl	801d5d8 <__sfputc_r>
 801d624:	1c43      	adds	r3, r0, #1
 801d626:	d1f3      	bne.n	801d610 <__sfputs_r+0xa>
 801d628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d62c <_vfiprintf_r>:
 801d62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d630:	460d      	mov	r5, r1
 801d632:	b09d      	sub	sp, #116	@ 0x74
 801d634:	4614      	mov	r4, r2
 801d636:	4698      	mov	r8, r3
 801d638:	4606      	mov	r6, r0
 801d63a:	b118      	cbz	r0, 801d644 <_vfiprintf_r+0x18>
 801d63c:	6a03      	ldr	r3, [r0, #32]
 801d63e:	b90b      	cbnz	r3, 801d644 <_vfiprintf_r+0x18>
 801d640:	f7fd fdae 	bl	801b1a0 <__sinit>
 801d644:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d646:	07d9      	lsls	r1, r3, #31
 801d648:	d405      	bmi.n	801d656 <_vfiprintf_r+0x2a>
 801d64a:	89ab      	ldrh	r3, [r5, #12]
 801d64c:	059a      	lsls	r2, r3, #22
 801d64e:	d402      	bmi.n	801d656 <_vfiprintf_r+0x2a>
 801d650:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d652:	f7fd ff84 	bl	801b55e <__retarget_lock_acquire_recursive>
 801d656:	89ab      	ldrh	r3, [r5, #12]
 801d658:	071b      	lsls	r3, r3, #28
 801d65a:	d501      	bpl.n	801d660 <_vfiprintf_r+0x34>
 801d65c:	692b      	ldr	r3, [r5, #16]
 801d65e:	b99b      	cbnz	r3, 801d688 <_vfiprintf_r+0x5c>
 801d660:	4629      	mov	r1, r5
 801d662:	4630      	mov	r0, r6
 801d664:	f000 f9f6 	bl	801da54 <__swsetup_r>
 801d668:	b170      	cbz	r0, 801d688 <_vfiprintf_r+0x5c>
 801d66a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d66c:	07dc      	lsls	r4, r3, #31
 801d66e:	d504      	bpl.n	801d67a <_vfiprintf_r+0x4e>
 801d670:	f04f 30ff 	mov.w	r0, #4294967295
 801d674:	b01d      	add	sp, #116	@ 0x74
 801d676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d67a:	89ab      	ldrh	r3, [r5, #12]
 801d67c:	0598      	lsls	r0, r3, #22
 801d67e:	d4f7      	bmi.n	801d670 <_vfiprintf_r+0x44>
 801d680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d682:	f7fd ff6d 	bl	801b560 <__retarget_lock_release_recursive>
 801d686:	e7f3      	b.n	801d670 <_vfiprintf_r+0x44>
 801d688:	2300      	movs	r3, #0
 801d68a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d68c:	2320      	movs	r3, #32
 801d68e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d692:	f8cd 800c 	str.w	r8, [sp, #12]
 801d696:	2330      	movs	r3, #48	@ 0x30
 801d698:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d848 <_vfiprintf_r+0x21c>
 801d69c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d6a0:	f04f 0901 	mov.w	r9, #1
 801d6a4:	4623      	mov	r3, r4
 801d6a6:	469a      	mov	sl, r3
 801d6a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d6ac:	b10a      	cbz	r2, 801d6b2 <_vfiprintf_r+0x86>
 801d6ae:	2a25      	cmp	r2, #37	@ 0x25
 801d6b0:	d1f9      	bne.n	801d6a6 <_vfiprintf_r+0x7a>
 801d6b2:	ebba 0b04 	subs.w	fp, sl, r4
 801d6b6:	d00b      	beq.n	801d6d0 <_vfiprintf_r+0xa4>
 801d6b8:	465b      	mov	r3, fp
 801d6ba:	4622      	mov	r2, r4
 801d6bc:	4629      	mov	r1, r5
 801d6be:	4630      	mov	r0, r6
 801d6c0:	f7ff ffa1 	bl	801d606 <__sfputs_r>
 801d6c4:	3001      	adds	r0, #1
 801d6c6:	f000 80a7 	beq.w	801d818 <_vfiprintf_r+0x1ec>
 801d6ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d6cc:	445a      	add	r2, fp
 801d6ce:	9209      	str	r2, [sp, #36]	@ 0x24
 801d6d0:	f89a 3000 	ldrb.w	r3, [sl]
 801d6d4:	2b00      	cmp	r3, #0
 801d6d6:	f000 809f 	beq.w	801d818 <_vfiprintf_r+0x1ec>
 801d6da:	2300      	movs	r3, #0
 801d6dc:	f04f 32ff 	mov.w	r2, #4294967295
 801d6e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d6e4:	f10a 0a01 	add.w	sl, sl, #1
 801d6e8:	9304      	str	r3, [sp, #16]
 801d6ea:	9307      	str	r3, [sp, #28]
 801d6ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d6f0:	931a      	str	r3, [sp, #104]	@ 0x68
 801d6f2:	4654      	mov	r4, sl
 801d6f4:	2205      	movs	r2, #5
 801d6f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d6fa:	4853      	ldr	r0, [pc, #332]	@ (801d848 <_vfiprintf_r+0x21c>)
 801d6fc:	f7e2 fd40 	bl	8000180 <memchr>
 801d700:	9a04      	ldr	r2, [sp, #16]
 801d702:	b9d8      	cbnz	r0, 801d73c <_vfiprintf_r+0x110>
 801d704:	06d1      	lsls	r1, r2, #27
 801d706:	bf44      	itt	mi
 801d708:	2320      	movmi	r3, #32
 801d70a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d70e:	0713      	lsls	r3, r2, #28
 801d710:	bf44      	itt	mi
 801d712:	232b      	movmi	r3, #43	@ 0x2b
 801d714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d718:	f89a 3000 	ldrb.w	r3, [sl]
 801d71c:	2b2a      	cmp	r3, #42	@ 0x2a
 801d71e:	d015      	beq.n	801d74c <_vfiprintf_r+0x120>
 801d720:	9a07      	ldr	r2, [sp, #28]
 801d722:	4654      	mov	r4, sl
 801d724:	2000      	movs	r0, #0
 801d726:	f04f 0c0a 	mov.w	ip, #10
 801d72a:	4621      	mov	r1, r4
 801d72c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d730:	3b30      	subs	r3, #48	@ 0x30
 801d732:	2b09      	cmp	r3, #9
 801d734:	d94b      	bls.n	801d7ce <_vfiprintf_r+0x1a2>
 801d736:	b1b0      	cbz	r0, 801d766 <_vfiprintf_r+0x13a>
 801d738:	9207      	str	r2, [sp, #28]
 801d73a:	e014      	b.n	801d766 <_vfiprintf_r+0x13a>
 801d73c:	eba0 0308 	sub.w	r3, r0, r8
 801d740:	fa09 f303 	lsl.w	r3, r9, r3
 801d744:	4313      	orrs	r3, r2
 801d746:	9304      	str	r3, [sp, #16]
 801d748:	46a2      	mov	sl, r4
 801d74a:	e7d2      	b.n	801d6f2 <_vfiprintf_r+0xc6>
 801d74c:	9b03      	ldr	r3, [sp, #12]
 801d74e:	1d19      	adds	r1, r3, #4
 801d750:	681b      	ldr	r3, [r3, #0]
 801d752:	9103      	str	r1, [sp, #12]
 801d754:	2b00      	cmp	r3, #0
 801d756:	bfbb      	ittet	lt
 801d758:	425b      	neglt	r3, r3
 801d75a:	f042 0202 	orrlt.w	r2, r2, #2
 801d75e:	9307      	strge	r3, [sp, #28]
 801d760:	9307      	strlt	r3, [sp, #28]
 801d762:	bfb8      	it	lt
 801d764:	9204      	strlt	r2, [sp, #16]
 801d766:	7823      	ldrb	r3, [r4, #0]
 801d768:	2b2e      	cmp	r3, #46	@ 0x2e
 801d76a:	d10a      	bne.n	801d782 <_vfiprintf_r+0x156>
 801d76c:	7863      	ldrb	r3, [r4, #1]
 801d76e:	2b2a      	cmp	r3, #42	@ 0x2a
 801d770:	d132      	bne.n	801d7d8 <_vfiprintf_r+0x1ac>
 801d772:	9b03      	ldr	r3, [sp, #12]
 801d774:	1d1a      	adds	r2, r3, #4
 801d776:	681b      	ldr	r3, [r3, #0]
 801d778:	9203      	str	r2, [sp, #12]
 801d77a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d77e:	3402      	adds	r4, #2
 801d780:	9305      	str	r3, [sp, #20]
 801d782:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d858 <_vfiprintf_r+0x22c>
 801d786:	7821      	ldrb	r1, [r4, #0]
 801d788:	2203      	movs	r2, #3
 801d78a:	4650      	mov	r0, sl
 801d78c:	f7e2 fcf8 	bl	8000180 <memchr>
 801d790:	b138      	cbz	r0, 801d7a2 <_vfiprintf_r+0x176>
 801d792:	9b04      	ldr	r3, [sp, #16]
 801d794:	eba0 000a 	sub.w	r0, r0, sl
 801d798:	2240      	movs	r2, #64	@ 0x40
 801d79a:	4082      	lsls	r2, r0
 801d79c:	4313      	orrs	r3, r2
 801d79e:	3401      	adds	r4, #1
 801d7a0:	9304      	str	r3, [sp, #16]
 801d7a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d7a6:	4829      	ldr	r0, [pc, #164]	@ (801d84c <_vfiprintf_r+0x220>)
 801d7a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d7ac:	2206      	movs	r2, #6
 801d7ae:	f7e2 fce7 	bl	8000180 <memchr>
 801d7b2:	2800      	cmp	r0, #0
 801d7b4:	d03f      	beq.n	801d836 <_vfiprintf_r+0x20a>
 801d7b6:	4b26      	ldr	r3, [pc, #152]	@ (801d850 <_vfiprintf_r+0x224>)
 801d7b8:	bb1b      	cbnz	r3, 801d802 <_vfiprintf_r+0x1d6>
 801d7ba:	9b03      	ldr	r3, [sp, #12]
 801d7bc:	3307      	adds	r3, #7
 801d7be:	f023 0307 	bic.w	r3, r3, #7
 801d7c2:	3308      	adds	r3, #8
 801d7c4:	9303      	str	r3, [sp, #12]
 801d7c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d7c8:	443b      	add	r3, r7
 801d7ca:	9309      	str	r3, [sp, #36]	@ 0x24
 801d7cc:	e76a      	b.n	801d6a4 <_vfiprintf_r+0x78>
 801d7ce:	fb0c 3202 	mla	r2, ip, r2, r3
 801d7d2:	460c      	mov	r4, r1
 801d7d4:	2001      	movs	r0, #1
 801d7d6:	e7a8      	b.n	801d72a <_vfiprintf_r+0xfe>
 801d7d8:	2300      	movs	r3, #0
 801d7da:	3401      	adds	r4, #1
 801d7dc:	9305      	str	r3, [sp, #20]
 801d7de:	4619      	mov	r1, r3
 801d7e0:	f04f 0c0a 	mov.w	ip, #10
 801d7e4:	4620      	mov	r0, r4
 801d7e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d7ea:	3a30      	subs	r2, #48	@ 0x30
 801d7ec:	2a09      	cmp	r2, #9
 801d7ee:	d903      	bls.n	801d7f8 <_vfiprintf_r+0x1cc>
 801d7f0:	2b00      	cmp	r3, #0
 801d7f2:	d0c6      	beq.n	801d782 <_vfiprintf_r+0x156>
 801d7f4:	9105      	str	r1, [sp, #20]
 801d7f6:	e7c4      	b.n	801d782 <_vfiprintf_r+0x156>
 801d7f8:	fb0c 2101 	mla	r1, ip, r1, r2
 801d7fc:	4604      	mov	r4, r0
 801d7fe:	2301      	movs	r3, #1
 801d800:	e7f0      	b.n	801d7e4 <_vfiprintf_r+0x1b8>
 801d802:	ab03      	add	r3, sp, #12
 801d804:	9300      	str	r3, [sp, #0]
 801d806:	462a      	mov	r2, r5
 801d808:	4b12      	ldr	r3, [pc, #72]	@ (801d854 <_vfiprintf_r+0x228>)
 801d80a:	a904      	add	r1, sp, #16
 801d80c:	4630      	mov	r0, r6
 801d80e:	f7fc fe6f 	bl	801a4f0 <_printf_float>
 801d812:	4607      	mov	r7, r0
 801d814:	1c78      	adds	r0, r7, #1
 801d816:	d1d6      	bne.n	801d7c6 <_vfiprintf_r+0x19a>
 801d818:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d81a:	07d9      	lsls	r1, r3, #31
 801d81c:	d405      	bmi.n	801d82a <_vfiprintf_r+0x1fe>
 801d81e:	89ab      	ldrh	r3, [r5, #12]
 801d820:	059a      	lsls	r2, r3, #22
 801d822:	d402      	bmi.n	801d82a <_vfiprintf_r+0x1fe>
 801d824:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d826:	f7fd fe9b 	bl	801b560 <__retarget_lock_release_recursive>
 801d82a:	89ab      	ldrh	r3, [r5, #12]
 801d82c:	065b      	lsls	r3, r3, #25
 801d82e:	f53f af1f 	bmi.w	801d670 <_vfiprintf_r+0x44>
 801d832:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d834:	e71e      	b.n	801d674 <_vfiprintf_r+0x48>
 801d836:	ab03      	add	r3, sp, #12
 801d838:	9300      	str	r3, [sp, #0]
 801d83a:	462a      	mov	r2, r5
 801d83c:	4b05      	ldr	r3, [pc, #20]	@ (801d854 <_vfiprintf_r+0x228>)
 801d83e:	a904      	add	r1, sp, #16
 801d840:	4630      	mov	r0, r6
 801d842:	f7fd f8ed 	bl	801aa20 <_printf_i>
 801d846:	e7e4      	b.n	801d812 <_vfiprintf_r+0x1e6>
 801d848:	080222a0 	.word	0x080222a0
 801d84c:	080222aa 	.word	0x080222aa
 801d850:	0801a4f1 	.word	0x0801a4f1
 801d854:	0801d607 	.word	0x0801d607
 801d858:	080222a6 	.word	0x080222a6

0801d85c <__sflush_r>:
 801d85c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d864:	0716      	lsls	r6, r2, #28
 801d866:	4605      	mov	r5, r0
 801d868:	460c      	mov	r4, r1
 801d86a:	d454      	bmi.n	801d916 <__sflush_r+0xba>
 801d86c:	684b      	ldr	r3, [r1, #4]
 801d86e:	2b00      	cmp	r3, #0
 801d870:	dc02      	bgt.n	801d878 <__sflush_r+0x1c>
 801d872:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d874:	2b00      	cmp	r3, #0
 801d876:	dd48      	ble.n	801d90a <__sflush_r+0xae>
 801d878:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d87a:	2e00      	cmp	r6, #0
 801d87c:	d045      	beq.n	801d90a <__sflush_r+0xae>
 801d87e:	2300      	movs	r3, #0
 801d880:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d884:	682f      	ldr	r7, [r5, #0]
 801d886:	6a21      	ldr	r1, [r4, #32]
 801d888:	602b      	str	r3, [r5, #0]
 801d88a:	d030      	beq.n	801d8ee <__sflush_r+0x92>
 801d88c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d88e:	89a3      	ldrh	r3, [r4, #12]
 801d890:	0759      	lsls	r1, r3, #29
 801d892:	d505      	bpl.n	801d8a0 <__sflush_r+0x44>
 801d894:	6863      	ldr	r3, [r4, #4]
 801d896:	1ad2      	subs	r2, r2, r3
 801d898:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d89a:	b10b      	cbz	r3, 801d8a0 <__sflush_r+0x44>
 801d89c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d89e:	1ad2      	subs	r2, r2, r3
 801d8a0:	2300      	movs	r3, #0
 801d8a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d8a4:	6a21      	ldr	r1, [r4, #32]
 801d8a6:	4628      	mov	r0, r5
 801d8a8:	47b0      	blx	r6
 801d8aa:	1c43      	adds	r3, r0, #1
 801d8ac:	89a3      	ldrh	r3, [r4, #12]
 801d8ae:	d106      	bne.n	801d8be <__sflush_r+0x62>
 801d8b0:	6829      	ldr	r1, [r5, #0]
 801d8b2:	291d      	cmp	r1, #29
 801d8b4:	d82b      	bhi.n	801d90e <__sflush_r+0xb2>
 801d8b6:	4a2a      	ldr	r2, [pc, #168]	@ (801d960 <__sflush_r+0x104>)
 801d8b8:	410a      	asrs	r2, r1
 801d8ba:	07d6      	lsls	r6, r2, #31
 801d8bc:	d427      	bmi.n	801d90e <__sflush_r+0xb2>
 801d8be:	2200      	movs	r2, #0
 801d8c0:	6062      	str	r2, [r4, #4]
 801d8c2:	04d9      	lsls	r1, r3, #19
 801d8c4:	6922      	ldr	r2, [r4, #16]
 801d8c6:	6022      	str	r2, [r4, #0]
 801d8c8:	d504      	bpl.n	801d8d4 <__sflush_r+0x78>
 801d8ca:	1c42      	adds	r2, r0, #1
 801d8cc:	d101      	bne.n	801d8d2 <__sflush_r+0x76>
 801d8ce:	682b      	ldr	r3, [r5, #0]
 801d8d0:	b903      	cbnz	r3, 801d8d4 <__sflush_r+0x78>
 801d8d2:	6560      	str	r0, [r4, #84]	@ 0x54
 801d8d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d8d6:	602f      	str	r7, [r5, #0]
 801d8d8:	b1b9      	cbz	r1, 801d90a <__sflush_r+0xae>
 801d8da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d8de:	4299      	cmp	r1, r3
 801d8e0:	d002      	beq.n	801d8e8 <__sflush_r+0x8c>
 801d8e2:	4628      	mov	r0, r5
 801d8e4:	f7fe fccc 	bl	801c280 <_free_r>
 801d8e8:	2300      	movs	r3, #0
 801d8ea:	6363      	str	r3, [r4, #52]	@ 0x34
 801d8ec:	e00d      	b.n	801d90a <__sflush_r+0xae>
 801d8ee:	2301      	movs	r3, #1
 801d8f0:	4628      	mov	r0, r5
 801d8f2:	47b0      	blx	r6
 801d8f4:	4602      	mov	r2, r0
 801d8f6:	1c50      	adds	r0, r2, #1
 801d8f8:	d1c9      	bne.n	801d88e <__sflush_r+0x32>
 801d8fa:	682b      	ldr	r3, [r5, #0]
 801d8fc:	2b00      	cmp	r3, #0
 801d8fe:	d0c6      	beq.n	801d88e <__sflush_r+0x32>
 801d900:	2b1d      	cmp	r3, #29
 801d902:	d001      	beq.n	801d908 <__sflush_r+0xac>
 801d904:	2b16      	cmp	r3, #22
 801d906:	d11e      	bne.n	801d946 <__sflush_r+0xea>
 801d908:	602f      	str	r7, [r5, #0]
 801d90a:	2000      	movs	r0, #0
 801d90c:	e022      	b.n	801d954 <__sflush_r+0xf8>
 801d90e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d912:	b21b      	sxth	r3, r3
 801d914:	e01b      	b.n	801d94e <__sflush_r+0xf2>
 801d916:	690f      	ldr	r7, [r1, #16]
 801d918:	2f00      	cmp	r7, #0
 801d91a:	d0f6      	beq.n	801d90a <__sflush_r+0xae>
 801d91c:	0793      	lsls	r3, r2, #30
 801d91e:	680e      	ldr	r6, [r1, #0]
 801d920:	bf08      	it	eq
 801d922:	694b      	ldreq	r3, [r1, #20]
 801d924:	600f      	str	r7, [r1, #0]
 801d926:	bf18      	it	ne
 801d928:	2300      	movne	r3, #0
 801d92a:	eba6 0807 	sub.w	r8, r6, r7
 801d92e:	608b      	str	r3, [r1, #8]
 801d930:	f1b8 0f00 	cmp.w	r8, #0
 801d934:	dde9      	ble.n	801d90a <__sflush_r+0xae>
 801d936:	6a21      	ldr	r1, [r4, #32]
 801d938:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d93a:	4643      	mov	r3, r8
 801d93c:	463a      	mov	r2, r7
 801d93e:	4628      	mov	r0, r5
 801d940:	47b0      	blx	r6
 801d942:	2800      	cmp	r0, #0
 801d944:	dc08      	bgt.n	801d958 <__sflush_r+0xfc>
 801d946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d94a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d94e:	81a3      	strh	r3, [r4, #12]
 801d950:	f04f 30ff 	mov.w	r0, #4294967295
 801d954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d958:	4407      	add	r7, r0
 801d95a:	eba8 0800 	sub.w	r8, r8, r0
 801d95e:	e7e7      	b.n	801d930 <__sflush_r+0xd4>
 801d960:	dfbffffe 	.word	0xdfbffffe

0801d964 <_fflush_r>:
 801d964:	b538      	push	{r3, r4, r5, lr}
 801d966:	690b      	ldr	r3, [r1, #16]
 801d968:	4605      	mov	r5, r0
 801d96a:	460c      	mov	r4, r1
 801d96c:	b913      	cbnz	r3, 801d974 <_fflush_r+0x10>
 801d96e:	2500      	movs	r5, #0
 801d970:	4628      	mov	r0, r5
 801d972:	bd38      	pop	{r3, r4, r5, pc}
 801d974:	b118      	cbz	r0, 801d97e <_fflush_r+0x1a>
 801d976:	6a03      	ldr	r3, [r0, #32]
 801d978:	b90b      	cbnz	r3, 801d97e <_fflush_r+0x1a>
 801d97a:	f7fd fc11 	bl	801b1a0 <__sinit>
 801d97e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d982:	2b00      	cmp	r3, #0
 801d984:	d0f3      	beq.n	801d96e <_fflush_r+0xa>
 801d986:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d988:	07d0      	lsls	r0, r2, #31
 801d98a:	d404      	bmi.n	801d996 <_fflush_r+0x32>
 801d98c:	0599      	lsls	r1, r3, #22
 801d98e:	d402      	bmi.n	801d996 <_fflush_r+0x32>
 801d990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d992:	f7fd fde4 	bl	801b55e <__retarget_lock_acquire_recursive>
 801d996:	4628      	mov	r0, r5
 801d998:	4621      	mov	r1, r4
 801d99a:	f7ff ff5f 	bl	801d85c <__sflush_r>
 801d99e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d9a0:	07da      	lsls	r2, r3, #31
 801d9a2:	4605      	mov	r5, r0
 801d9a4:	d4e4      	bmi.n	801d970 <_fflush_r+0xc>
 801d9a6:	89a3      	ldrh	r3, [r4, #12]
 801d9a8:	059b      	lsls	r3, r3, #22
 801d9aa:	d4e1      	bmi.n	801d970 <_fflush_r+0xc>
 801d9ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d9ae:	f7fd fdd7 	bl	801b560 <__retarget_lock_release_recursive>
 801d9b2:	e7dd      	b.n	801d970 <_fflush_r+0xc>

0801d9b4 <fiprintf>:
 801d9b4:	b40e      	push	{r1, r2, r3}
 801d9b6:	b503      	push	{r0, r1, lr}
 801d9b8:	4601      	mov	r1, r0
 801d9ba:	ab03      	add	r3, sp, #12
 801d9bc:	4805      	ldr	r0, [pc, #20]	@ (801d9d4 <fiprintf+0x20>)
 801d9be:	f853 2b04 	ldr.w	r2, [r3], #4
 801d9c2:	6800      	ldr	r0, [r0, #0]
 801d9c4:	9301      	str	r3, [sp, #4]
 801d9c6:	f7ff fe31 	bl	801d62c <_vfiprintf_r>
 801d9ca:	b002      	add	sp, #8
 801d9cc:	f85d eb04 	ldr.w	lr, [sp], #4
 801d9d0:	b003      	add	sp, #12
 801d9d2:	4770      	bx	lr
 801d9d4:	200002c0 	.word	0x200002c0

0801d9d8 <__swbuf_r>:
 801d9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d9da:	460e      	mov	r6, r1
 801d9dc:	4614      	mov	r4, r2
 801d9de:	4605      	mov	r5, r0
 801d9e0:	b118      	cbz	r0, 801d9ea <__swbuf_r+0x12>
 801d9e2:	6a03      	ldr	r3, [r0, #32]
 801d9e4:	b90b      	cbnz	r3, 801d9ea <__swbuf_r+0x12>
 801d9e6:	f7fd fbdb 	bl	801b1a0 <__sinit>
 801d9ea:	69a3      	ldr	r3, [r4, #24]
 801d9ec:	60a3      	str	r3, [r4, #8]
 801d9ee:	89a3      	ldrh	r3, [r4, #12]
 801d9f0:	071a      	lsls	r2, r3, #28
 801d9f2:	d501      	bpl.n	801d9f8 <__swbuf_r+0x20>
 801d9f4:	6923      	ldr	r3, [r4, #16]
 801d9f6:	b943      	cbnz	r3, 801da0a <__swbuf_r+0x32>
 801d9f8:	4621      	mov	r1, r4
 801d9fa:	4628      	mov	r0, r5
 801d9fc:	f000 f82a 	bl	801da54 <__swsetup_r>
 801da00:	b118      	cbz	r0, 801da0a <__swbuf_r+0x32>
 801da02:	f04f 37ff 	mov.w	r7, #4294967295
 801da06:	4638      	mov	r0, r7
 801da08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da0a:	6823      	ldr	r3, [r4, #0]
 801da0c:	6922      	ldr	r2, [r4, #16]
 801da0e:	1a98      	subs	r0, r3, r2
 801da10:	6963      	ldr	r3, [r4, #20]
 801da12:	b2f6      	uxtb	r6, r6
 801da14:	4283      	cmp	r3, r0
 801da16:	4637      	mov	r7, r6
 801da18:	dc05      	bgt.n	801da26 <__swbuf_r+0x4e>
 801da1a:	4621      	mov	r1, r4
 801da1c:	4628      	mov	r0, r5
 801da1e:	f7ff ffa1 	bl	801d964 <_fflush_r>
 801da22:	2800      	cmp	r0, #0
 801da24:	d1ed      	bne.n	801da02 <__swbuf_r+0x2a>
 801da26:	68a3      	ldr	r3, [r4, #8]
 801da28:	3b01      	subs	r3, #1
 801da2a:	60a3      	str	r3, [r4, #8]
 801da2c:	6823      	ldr	r3, [r4, #0]
 801da2e:	1c5a      	adds	r2, r3, #1
 801da30:	6022      	str	r2, [r4, #0]
 801da32:	701e      	strb	r6, [r3, #0]
 801da34:	6962      	ldr	r2, [r4, #20]
 801da36:	1c43      	adds	r3, r0, #1
 801da38:	429a      	cmp	r2, r3
 801da3a:	d004      	beq.n	801da46 <__swbuf_r+0x6e>
 801da3c:	89a3      	ldrh	r3, [r4, #12]
 801da3e:	07db      	lsls	r3, r3, #31
 801da40:	d5e1      	bpl.n	801da06 <__swbuf_r+0x2e>
 801da42:	2e0a      	cmp	r6, #10
 801da44:	d1df      	bne.n	801da06 <__swbuf_r+0x2e>
 801da46:	4621      	mov	r1, r4
 801da48:	4628      	mov	r0, r5
 801da4a:	f7ff ff8b 	bl	801d964 <_fflush_r>
 801da4e:	2800      	cmp	r0, #0
 801da50:	d0d9      	beq.n	801da06 <__swbuf_r+0x2e>
 801da52:	e7d6      	b.n	801da02 <__swbuf_r+0x2a>

0801da54 <__swsetup_r>:
 801da54:	b538      	push	{r3, r4, r5, lr}
 801da56:	4b29      	ldr	r3, [pc, #164]	@ (801dafc <__swsetup_r+0xa8>)
 801da58:	4605      	mov	r5, r0
 801da5a:	6818      	ldr	r0, [r3, #0]
 801da5c:	460c      	mov	r4, r1
 801da5e:	b118      	cbz	r0, 801da68 <__swsetup_r+0x14>
 801da60:	6a03      	ldr	r3, [r0, #32]
 801da62:	b90b      	cbnz	r3, 801da68 <__swsetup_r+0x14>
 801da64:	f7fd fb9c 	bl	801b1a0 <__sinit>
 801da68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da6c:	0719      	lsls	r1, r3, #28
 801da6e:	d422      	bmi.n	801dab6 <__swsetup_r+0x62>
 801da70:	06da      	lsls	r2, r3, #27
 801da72:	d407      	bmi.n	801da84 <__swsetup_r+0x30>
 801da74:	2209      	movs	r2, #9
 801da76:	602a      	str	r2, [r5, #0]
 801da78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da7c:	81a3      	strh	r3, [r4, #12]
 801da7e:	f04f 30ff 	mov.w	r0, #4294967295
 801da82:	e033      	b.n	801daec <__swsetup_r+0x98>
 801da84:	0758      	lsls	r0, r3, #29
 801da86:	d512      	bpl.n	801daae <__swsetup_r+0x5a>
 801da88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801da8a:	b141      	cbz	r1, 801da9e <__swsetup_r+0x4a>
 801da8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801da90:	4299      	cmp	r1, r3
 801da92:	d002      	beq.n	801da9a <__swsetup_r+0x46>
 801da94:	4628      	mov	r0, r5
 801da96:	f7fe fbf3 	bl	801c280 <_free_r>
 801da9a:	2300      	movs	r3, #0
 801da9c:	6363      	str	r3, [r4, #52]	@ 0x34
 801da9e:	89a3      	ldrh	r3, [r4, #12]
 801daa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801daa4:	81a3      	strh	r3, [r4, #12]
 801daa6:	2300      	movs	r3, #0
 801daa8:	6063      	str	r3, [r4, #4]
 801daaa:	6923      	ldr	r3, [r4, #16]
 801daac:	6023      	str	r3, [r4, #0]
 801daae:	89a3      	ldrh	r3, [r4, #12]
 801dab0:	f043 0308 	orr.w	r3, r3, #8
 801dab4:	81a3      	strh	r3, [r4, #12]
 801dab6:	6923      	ldr	r3, [r4, #16]
 801dab8:	b94b      	cbnz	r3, 801dace <__swsetup_r+0x7a>
 801daba:	89a3      	ldrh	r3, [r4, #12]
 801dabc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801dac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dac4:	d003      	beq.n	801dace <__swsetup_r+0x7a>
 801dac6:	4621      	mov	r1, r4
 801dac8:	4628      	mov	r0, r5
 801daca:	f000 f8a2 	bl	801dc12 <__smakebuf_r>
 801dace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dad2:	f013 0201 	ands.w	r2, r3, #1
 801dad6:	d00a      	beq.n	801daee <__swsetup_r+0x9a>
 801dad8:	2200      	movs	r2, #0
 801dada:	60a2      	str	r2, [r4, #8]
 801dadc:	6962      	ldr	r2, [r4, #20]
 801dade:	4252      	negs	r2, r2
 801dae0:	61a2      	str	r2, [r4, #24]
 801dae2:	6922      	ldr	r2, [r4, #16]
 801dae4:	b942      	cbnz	r2, 801daf8 <__swsetup_r+0xa4>
 801dae6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801daea:	d1c5      	bne.n	801da78 <__swsetup_r+0x24>
 801daec:	bd38      	pop	{r3, r4, r5, pc}
 801daee:	0799      	lsls	r1, r3, #30
 801daf0:	bf58      	it	pl
 801daf2:	6962      	ldrpl	r2, [r4, #20]
 801daf4:	60a2      	str	r2, [r4, #8]
 801daf6:	e7f4      	b.n	801dae2 <__swsetup_r+0x8e>
 801daf8:	2000      	movs	r0, #0
 801dafa:	e7f7      	b.n	801daec <__swsetup_r+0x98>
 801dafc:	200002c0 	.word	0x200002c0

0801db00 <memmove>:
 801db00:	4288      	cmp	r0, r1
 801db02:	b510      	push	{r4, lr}
 801db04:	eb01 0402 	add.w	r4, r1, r2
 801db08:	d902      	bls.n	801db10 <memmove+0x10>
 801db0a:	4284      	cmp	r4, r0
 801db0c:	4623      	mov	r3, r4
 801db0e:	d807      	bhi.n	801db20 <memmove+0x20>
 801db10:	1e43      	subs	r3, r0, #1
 801db12:	42a1      	cmp	r1, r4
 801db14:	d008      	beq.n	801db28 <memmove+0x28>
 801db16:	f811 2b01 	ldrb.w	r2, [r1], #1
 801db1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801db1e:	e7f8      	b.n	801db12 <memmove+0x12>
 801db20:	4402      	add	r2, r0
 801db22:	4601      	mov	r1, r0
 801db24:	428a      	cmp	r2, r1
 801db26:	d100      	bne.n	801db2a <memmove+0x2a>
 801db28:	bd10      	pop	{r4, pc}
 801db2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801db2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801db32:	e7f7      	b.n	801db24 <memmove+0x24>

0801db34 <abort>:
 801db34:	b508      	push	{r3, lr}
 801db36:	2006      	movs	r0, #6
 801db38:	f000 f8d0 	bl	801dcdc <raise>
 801db3c:	2001      	movs	r0, #1
 801db3e:	f7e8 fc8f 	bl	8006460 <_exit>

0801db42 <_calloc_r>:
 801db42:	b570      	push	{r4, r5, r6, lr}
 801db44:	fba1 5402 	umull	r5, r4, r1, r2
 801db48:	b93c      	cbnz	r4, 801db5a <_calloc_r+0x18>
 801db4a:	4629      	mov	r1, r5
 801db4c:	f7fb fcb2 	bl	80194b4 <_malloc_r>
 801db50:	4606      	mov	r6, r0
 801db52:	b928      	cbnz	r0, 801db60 <_calloc_r+0x1e>
 801db54:	2600      	movs	r6, #0
 801db56:	4630      	mov	r0, r6
 801db58:	bd70      	pop	{r4, r5, r6, pc}
 801db5a:	220c      	movs	r2, #12
 801db5c:	6002      	str	r2, [r0, #0]
 801db5e:	e7f9      	b.n	801db54 <_calloc_r+0x12>
 801db60:	462a      	mov	r2, r5
 801db62:	4621      	mov	r1, r4
 801db64:	f7fd fbe9 	bl	801b33a <memset>
 801db68:	e7f5      	b.n	801db56 <_calloc_r+0x14>

0801db6a <_realloc_r>:
 801db6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db6e:	4680      	mov	r8, r0
 801db70:	4615      	mov	r5, r2
 801db72:	460c      	mov	r4, r1
 801db74:	b921      	cbnz	r1, 801db80 <_realloc_r+0x16>
 801db76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801db7a:	4611      	mov	r1, r2
 801db7c:	f7fb bc9a 	b.w	80194b4 <_malloc_r>
 801db80:	b92a      	cbnz	r2, 801db8e <_realloc_r+0x24>
 801db82:	f7fe fb7d 	bl	801c280 <_free_r>
 801db86:	2400      	movs	r4, #0
 801db88:	4620      	mov	r0, r4
 801db8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db8e:	f000 f8e3 	bl	801dd58 <_malloc_usable_size_r>
 801db92:	4285      	cmp	r5, r0
 801db94:	4606      	mov	r6, r0
 801db96:	d802      	bhi.n	801db9e <_realloc_r+0x34>
 801db98:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801db9c:	d8f4      	bhi.n	801db88 <_realloc_r+0x1e>
 801db9e:	4629      	mov	r1, r5
 801dba0:	4640      	mov	r0, r8
 801dba2:	f7fb fc87 	bl	80194b4 <_malloc_r>
 801dba6:	4607      	mov	r7, r0
 801dba8:	2800      	cmp	r0, #0
 801dbaa:	d0ec      	beq.n	801db86 <_realloc_r+0x1c>
 801dbac:	42b5      	cmp	r5, r6
 801dbae:	462a      	mov	r2, r5
 801dbb0:	4621      	mov	r1, r4
 801dbb2:	bf28      	it	cs
 801dbb4:	4632      	movcs	r2, r6
 801dbb6:	f7fd fcdc 	bl	801b572 <memcpy>
 801dbba:	4621      	mov	r1, r4
 801dbbc:	4640      	mov	r0, r8
 801dbbe:	f7fe fb5f 	bl	801c280 <_free_r>
 801dbc2:	463c      	mov	r4, r7
 801dbc4:	e7e0      	b.n	801db88 <_realloc_r+0x1e>

0801dbc6 <__swhatbuf_r>:
 801dbc6:	b570      	push	{r4, r5, r6, lr}
 801dbc8:	460c      	mov	r4, r1
 801dbca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dbce:	2900      	cmp	r1, #0
 801dbd0:	b096      	sub	sp, #88	@ 0x58
 801dbd2:	4615      	mov	r5, r2
 801dbd4:	461e      	mov	r6, r3
 801dbd6:	da0d      	bge.n	801dbf4 <__swhatbuf_r+0x2e>
 801dbd8:	89a3      	ldrh	r3, [r4, #12]
 801dbda:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801dbde:	f04f 0100 	mov.w	r1, #0
 801dbe2:	bf14      	ite	ne
 801dbe4:	2340      	movne	r3, #64	@ 0x40
 801dbe6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801dbea:	2000      	movs	r0, #0
 801dbec:	6031      	str	r1, [r6, #0]
 801dbee:	602b      	str	r3, [r5, #0]
 801dbf0:	b016      	add	sp, #88	@ 0x58
 801dbf2:	bd70      	pop	{r4, r5, r6, pc}
 801dbf4:	466a      	mov	r2, sp
 801dbf6:	f000 f879 	bl	801dcec <_fstat_r>
 801dbfa:	2800      	cmp	r0, #0
 801dbfc:	dbec      	blt.n	801dbd8 <__swhatbuf_r+0x12>
 801dbfe:	9901      	ldr	r1, [sp, #4]
 801dc00:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801dc04:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801dc08:	4259      	negs	r1, r3
 801dc0a:	4159      	adcs	r1, r3
 801dc0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801dc10:	e7eb      	b.n	801dbea <__swhatbuf_r+0x24>

0801dc12 <__smakebuf_r>:
 801dc12:	898b      	ldrh	r3, [r1, #12]
 801dc14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dc16:	079d      	lsls	r5, r3, #30
 801dc18:	4606      	mov	r6, r0
 801dc1a:	460c      	mov	r4, r1
 801dc1c:	d507      	bpl.n	801dc2e <__smakebuf_r+0x1c>
 801dc1e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801dc22:	6023      	str	r3, [r4, #0]
 801dc24:	6123      	str	r3, [r4, #16]
 801dc26:	2301      	movs	r3, #1
 801dc28:	6163      	str	r3, [r4, #20]
 801dc2a:	b003      	add	sp, #12
 801dc2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc2e:	ab01      	add	r3, sp, #4
 801dc30:	466a      	mov	r2, sp
 801dc32:	f7ff ffc8 	bl	801dbc6 <__swhatbuf_r>
 801dc36:	9f00      	ldr	r7, [sp, #0]
 801dc38:	4605      	mov	r5, r0
 801dc3a:	4639      	mov	r1, r7
 801dc3c:	4630      	mov	r0, r6
 801dc3e:	f7fb fc39 	bl	80194b4 <_malloc_r>
 801dc42:	b948      	cbnz	r0, 801dc58 <__smakebuf_r+0x46>
 801dc44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc48:	059a      	lsls	r2, r3, #22
 801dc4a:	d4ee      	bmi.n	801dc2a <__smakebuf_r+0x18>
 801dc4c:	f023 0303 	bic.w	r3, r3, #3
 801dc50:	f043 0302 	orr.w	r3, r3, #2
 801dc54:	81a3      	strh	r3, [r4, #12]
 801dc56:	e7e2      	b.n	801dc1e <__smakebuf_r+0xc>
 801dc58:	89a3      	ldrh	r3, [r4, #12]
 801dc5a:	6020      	str	r0, [r4, #0]
 801dc5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dc60:	81a3      	strh	r3, [r4, #12]
 801dc62:	9b01      	ldr	r3, [sp, #4]
 801dc64:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801dc68:	b15b      	cbz	r3, 801dc82 <__smakebuf_r+0x70>
 801dc6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dc6e:	4630      	mov	r0, r6
 801dc70:	f000 f84e 	bl	801dd10 <_isatty_r>
 801dc74:	b128      	cbz	r0, 801dc82 <__smakebuf_r+0x70>
 801dc76:	89a3      	ldrh	r3, [r4, #12]
 801dc78:	f023 0303 	bic.w	r3, r3, #3
 801dc7c:	f043 0301 	orr.w	r3, r3, #1
 801dc80:	81a3      	strh	r3, [r4, #12]
 801dc82:	89a3      	ldrh	r3, [r4, #12]
 801dc84:	431d      	orrs	r5, r3
 801dc86:	81a5      	strh	r5, [r4, #12]
 801dc88:	e7cf      	b.n	801dc2a <__smakebuf_r+0x18>

0801dc8a <_raise_r>:
 801dc8a:	291f      	cmp	r1, #31
 801dc8c:	b538      	push	{r3, r4, r5, lr}
 801dc8e:	4605      	mov	r5, r0
 801dc90:	460c      	mov	r4, r1
 801dc92:	d904      	bls.n	801dc9e <_raise_r+0x14>
 801dc94:	2316      	movs	r3, #22
 801dc96:	6003      	str	r3, [r0, #0]
 801dc98:	f04f 30ff 	mov.w	r0, #4294967295
 801dc9c:	bd38      	pop	{r3, r4, r5, pc}
 801dc9e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801dca0:	b112      	cbz	r2, 801dca8 <_raise_r+0x1e>
 801dca2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dca6:	b94b      	cbnz	r3, 801dcbc <_raise_r+0x32>
 801dca8:	4628      	mov	r0, r5
 801dcaa:	f000 f853 	bl	801dd54 <_getpid_r>
 801dcae:	4622      	mov	r2, r4
 801dcb0:	4601      	mov	r1, r0
 801dcb2:	4628      	mov	r0, r5
 801dcb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dcb8:	f000 b83a 	b.w	801dd30 <_kill_r>
 801dcbc:	2b01      	cmp	r3, #1
 801dcbe:	d00a      	beq.n	801dcd6 <_raise_r+0x4c>
 801dcc0:	1c59      	adds	r1, r3, #1
 801dcc2:	d103      	bne.n	801dccc <_raise_r+0x42>
 801dcc4:	2316      	movs	r3, #22
 801dcc6:	6003      	str	r3, [r0, #0]
 801dcc8:	2001      	movs	r0, #1
 801dcca:	e7e7      	b.n	801dc9c <_raise_r+0x12>
 801dccc:	2100      	movs	r1, #0
 801dcce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801dcd2:	4620      	mov	r0, r4
 801dcd4:	4798      	blx	r3
 801dcd6:	2000      	movs	r0, #0
 801dcd8:	e7e0      	b.n	801dc9c <_raise_r+0x12>
	...

0801dcdc <raise>:
 801dcdc:	4b02      	ldr	r3, [pc, #8]	@ (801dce8 <raise+0xc>)
 801dcde:	4601      	mov	r1, r0
 801dce0:	6818      	ldr	r0, [r3, #0]
 801dce2:	f7ff bfd2 	b.w	801dc8a <_raise_r>
 801dce6:	bf00      	nop
 801dce8:	200002c0 	.word	0x200002c0

0801dcec <_fstat_r>:
 801dcec:	b538      	push	{r3, r4, r5, lr}
 801dcee:	4d07      	ldr	r5, [pc, #28]	@ (801dd0c <_fstat_r+0x20>)
 801dcf0:	2300      	movs	r3, #0
 801dcf2:	4604      	mov	r4, r0
 801dcf4:	4608      	mov	r0, r1
 801dcf6:	4611      	mov	r1, r2
 801dcf8:	602b      	str	r3, [r5, #0]
 801dcfa:	f7e8 fc01 	bl	8006500 <_fstat>
 801dcfe:	1c43      	adds	r3, r0, #1
 801dd00:	d102      	bne.n	801dd08 <_fstat_r+0x1c>
 801dd02:	682b      	ldr	r3, [r5, #0]
 801dd04:	b103      	cbz	r3, 801dd08 <_fstat_r+0x1c>
 801dd06:	6023      	str	r3, [r4, #0]
 801dd08:	bd38      	pop	{r3, r4, r5, pc}
 801dd0a:	bf00      	nop
 801dd0c:	2000312c 	.word	0x2000312c

0801dd10 <_isatty_r>:
 801dd10:	b538      	push	{r3, r4, r5, lr}
 801dd12:	4d06      	ldr	r5, [pc, #24]	@ (801dd2c <_isatty_r+0x1c>)
 801dd14:	2300      	movs	r3, #0
 801dd16:	4604      	mov	r4, r0
 801dd18:	4608      	mov	r0, r1
 801dd1a:	602b      	str	r3, [r5, #0]
 801dd1c:	f7e8 fc00 	bl	8006520 <_isatty>
 801dd20:	1c43      	adds	r3, r0, #1
 801dd22:	d102      	bne.n	801dd2a <_isatty_r+0x1a>
 801dd24:	682b      	ldr	r3, [r5, #0]
 801dd26:	b103      	cbz	r3, 801dd2a <_isatty_r+0x1a>
 801dd28:	6023      	str	r3, [r4, #0]
 801dd2a:	bd38      	pop	{r3, r4, r5, pc}
 801dd2c:	2000312c 	.word	0x2000312c

0801dd30 <_kill_r>:
 801dd30:	b538      	push	{r3, r4, r5, lr}
 801dd32:	4d07      	ldr	r5, [pc, #28]	@ (801dd50 <_kill_r+0x20>)
 801dd34:	2300      	movs	r3, #0
 801dd36:	4604      	mov	r4, r0
 801dd38:	4608      	mov	r0, r1
 801dd3a:	4611      	mov	r1, r2
 801dd3c:	602b      	str	r3, [r5, #0]
 801dd3e:	f7e8 fb7f 	bl	8006440 <_kill>
 801dd42:	1c43      	adds	r3, r0, #1
 801dd44:	d102      	bne.n	801dd4c <_kill_r+0x1c>
 801dd46:	682b      	ldr	r3, [r5, #0]
 801dd48:	b103      	cbz	r3, 801dd4c <_kill_r+0x1c>
 801dd4a:	6023      	str	r3, [r4, #0]
 801dd4c:	bd38      	pop	{r3, r4, r5, pc}
 801dd4e:	bf00      	nop
 801dd50:	2000312c 	.word	0x2000312c

0801dd54 <_getpid_r>:
 801dd54:	f7e8 bb6c 	b.w	8006430 <_getpid>

0801dd58 <_malloc_usable_size_r>:
 801dd58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dd5c:	1f18      	subs	r0, r3, #4
 801dd5e:	2b00      	cmp	r3, #0
 801dd60:	bfbc      	itt	lt
 801dd62:	580b      	ldrlt	r3, [r1, r0]
 801dd64:	18c0      	addlt	r0, r0, r3
 801dd66:	4770      	bx	lr

0801dd68 <cos>:
 801dd68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dd6a:	ec53 2b10 	vmov	r2, r3, d0
 801dd6e:	4826      	ldr	r0, [pc, #152]	@ (801de08 <cos+0xa0>)
 801dd70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801dd74:	4281      	cmp	r1, r0
 801dd76:	d806      	bhi.n	801dd86 <cos+0x1e>
 801dd78:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801de00 <cos+0x98>
 801dd7c:	b005      	add	sp, #20
 801dd7e:	f85d eb04 	ldr.w	lr, [sp], #4
 801dd82:	f000 b9b1 	b.w	801e0e8 <__kernel_cos>
 801dd86:	4821      	ldr	r0, [pc, #132]	@ (801de0c <cos+0xa4>)
 801dd88:	4281      	cmp	r1, r0
 801dd8a:	d908      	bls.n	801dd9e <cos+0x36>
 801dd8c:	4610      	mov	r0, r2
 801dd8e:	4619      	mov	r1, r3
 801dd90:	f7e2 fa52 	bl	8000238 <__aeabi_dsub>
 801dd94:	ec41 0b10 	vmov	d0, r0, r1
 801dd98:	b005      	add	sp, #20
 801dd9a:	f85d fb04 	ldr.w	pc, [sp], #4
 801dd9e:	4668      	mov	r0, sp
 801dda0:	f000 fb26 	bl	801e3f0 <__ieee754_rem_pio2>
 801dda4:	f000 0003 	and.w	r0, r0, #3
 801dda8:	2801      	cmp	r0, #1
 801ddaa:	d00b      	beq.n	801ddc4 <cos+0x5c>
 801ddac:	2802      	cmp	r0, #2
 801ddae:	d015      	beq.n	801dddc <cos+0x74>
 801ddb0:	b9d8      	cbnz	r0, 801ddea <cos+0x82>
 801ddb2:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ddb6:	ed9d 0b00 	vldr	d0, [sp]
 801ddba:	f000 f995 	bl	801e0e8 <__kernel_cos>
 801ddbe:	ec51 0b10 	vmov	r0, r1, d0
 801ddc2:	e7e7      	b.n	801dd94 <cos+0x2c>
 801ddc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ddc8:	ed9d 0b00 	vldr	d0, [sp]
 801ddcc:	f000 fa54 	bl	801e278 <__kernel_sin>
 801ddd0:	ec53 2b10 	vmov	r2, r3, d0
 801ddd4:	4610      	mov	r0, r2
 801ddd6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801ddda:	e7db      	b.n	801dd94 <cos+0x2c>
 801dddc:	ed9d 1b02 	vldr	d1, [sp, #8]
 801dde0:	ed9d 0b00 	vldr	d0, [sp]
 801dde4:	f000 f980 	bl	801e0e8 <__kernel_cos>
 801dde8:	e7f2      	b.n	801ddd0 <cos+0x68>
 801ddea:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ddee:	ed9d 0b00 	vldr	d0, [sp]
 801ddf2:	2001      	movs	r0, #1
 801ddf4:	f000 fa40 	bl	801e278 <__kernel_sin>
 801ddf8:	e7e1      	b.n	801ddbe <cos+0x56>
 801ddfa:	bf00      	nop
 801ddfc:	f3af 8000 	nop.w
	...
 801de08:	3fe921fb 	.word	0x3fe921fb
 801de0c:	7fefffff 	.word	0x7fefffff

0801de10 <sin>:
 801de10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801de12:	ec53 2b10 	vmov	r2, r3, d0
 801de16:	4826      	ldr	r0, [pc, #152]	@ (801deb0 <sin+0xa0>)
 801de18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801de1c:	4281      	cmp	r1, r0
 801de1e:	d807      	bhi.n	801de30 <sin+0x20>
 801de20:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801dea8 <sin+0x98>
 801de24:	2000      	movs	r0, #0
 801de26:	b005      	add	sp, #20
 801de28:	f85d eb04 	ldr.w	lr, [sp], #4
 801de2c:	f000 ba24 	b.w	801e278 <__kernel_sin>
 801de30:	4820      	ldr	r0, [pc, #128]	@ (801deb4 <sin+0xa4>)
 801de32:	4281      	cmp	r1, r0
 801de34:	d908      	bls.n	801de48 <sin+0x38>
 801de36:	4610      	mov	r0, r2
 801de38:	4619      	mov	r1, r3
 801de3a:	f7e2 f9fd 	bl	8000238 <__aeabi_dsub>
 801de3e:	ec41 0b10 	vmov	d0, r0, r1
 801de42:	b005      	add	sp, #20
 801de44:	f85d fb04 	ldr.w	pc, [sp], #4
 801de48:	4668      	mov	r0, sp
 801de4a:	f000 fad1 	bl	801e3f0 <__ieee754_rem_pio2>
 801de4e:	f000 0003 	and.w	r0, r0, #3
 801de52:	2801      	cmp	r0, #1
 801de54:	d00c      	beq.n	801de70 <sin+0x60>
 801de56:	2802      	cmp	r0, #2
 801de58:	d011      	beq.n	801de7e <sin+0x6e>
 801de5a:	b9e8      	cbnz	r0, 801de98 <sin+0x88>
 801de5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801de60:	ed9d 0b00 	vldr	d0, [sp]
 801de64:	2001      	movs	r0, #1
 801de66:	f000 fa07 	bl	801e278 <__kernel_sin>
 801de6a:	ec51 0b10 	vmov	r0, r1, d0
 801de6e:	e7e6      	b.n	801de3e <sin+0x2e>
 801de70:	ed9d 1b02 	vldr	d1, [sp, #8]
 801de74:	ed9d 0b00 	vldr	d0, [sp]
 801de78:	f000 f936 	bl	801e0e8 <__kernel_cos>
 801de7c:	e7f5      	b.n	801de6a <sin+0x5a>
 801de7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801de82:	ed9d 0b00 	vldr	d0, [sp]
 801de86:	2001      	movs	r0, #1
 801de88:	f000 f9f6 	bl	801e278 <__kernel_sin>
 801de8c:	ec53 2b10 	vmov	r2, r3, d0
 801de90:	4610      	mov	r0, r2
 801de92:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801de96:	e7d2      	b.n	801de3e <sin+0x2e>
 801de98:	ed9d 1b02 	vldr	d1, [sp, #8]
 801de9c:	ed9d 0b00 	vldr	d0, [sp]
 801dea0:	f000 f922 	bl	801e0e8 <__kernel_cos>
 801dea4:	e7f2      	b.n	801de8c <sin+0x7c>
 801dea6:	bf00      	nop
	...
 801deb0:	3fe921fb 	.word	0x3fe921fb
 801deb4:	7fefffff 	.word	0x7fefffff

0801deb8 <expf>:
 801deb8:	b508      	push	{r3, lr}
 801deba:	ed2d 8b02 	vpush	{d8}
 801debe:	eef0 8a40 	vmov.f32	s17, s0
 801dec2:	f000 fccd 	bl	801e860 <__ieee754_expf>
 801dec6:	eeb0 8a40 	vmov.f32	s16, s0
 801deca:	eeb0 0a68 	vmov.f32	s0, s17
 801dece:	f000 f87d 	bl	801dfcc <finitef>
 801ded2:	b160      	cbz	r0, 801deee <expf+0x36>
 801ded4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801df14 <expf+0x5c>
 801ded8:	eef4 8ae7 	vcmpe.f32	s17, s15
 801dedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dee0:	dd0a      	ble.n	801def8 <expf+0x40>
 801dee2:	f7fd fb11 	bl	801b508 <__errno>
 801dee6:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 801df18 <expf+0x60>
 801deea:	2322      	movs	r3, #34	@ 0x22
 801deec:	6003      	str	r3, [r0, #0]
 801deee:	eeb0 0a48 	vmov.f32	s0, s16
 801def2:	ecbd 8b02 	vpop	{d8}
 801def6:	bd08      	pop	{r3, pc}
 801def8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801df1c <expf+0x64>
 801defc:	eef4 8ae7 	vcmpe.f32	s17, s15
 801df00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df04:	d5f3      	bpl.n	801deee <expf+0x36>
 801df06:	f7fd faff 	bl	801b508 <__errno>
 801df0a:	2322      	movs	r3, #34	@ 0x22
 801df0c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 801df20 <expf+0x68>
 801df10:	6003      	str	r3, [r0, #0]
 801df12:	e7ec      	b.n	801deee <expf+0x36>
 801df14:	42b17217 	.word	0x42b17217
 801df18:	7f800000 	.word	0x7f800000
 801df1c:	c2cff1b5 	.word	0xc2cff1b5
 801df20:	00000000 	.word	0x00000000

0801df24 <fmin>:
 801df24:	b508      	push	{r3, lr}
 801df26:	ed2d 8b04 	vpush	{d8-d9}
 801df2a:	eeb0 8a40 	vmov.f32	s16, s0
 801df2e:	eef0 8a60 	vmov.f32	s17, s1
 801df32:	eeb0 9a41 	vmov.f32	s18, s2
 801df36:	eef0 9a61 	vmov.f32	s19, s3
 801df3a:	f000 f81d 	bl	801df78 <__fpclassifyd>
 801df3e:	b950      	cbnz	r0, 801df56 <fmin+0x32>
 801df40:	eeb0 8a49 	vmov.f32	s16, s18
 801df44:	eef0 8a69 	vmov.f32	s17, s19
 801df48:	eeb0 0a48 	vmov.f32	s0, s16
 801df4c:	eef0 0a68 	vmov.f32	s1, s17
 801df50:	ecbd 8b04 	vpop	{d8-d9}
 801df54:	bd08      	pop	{r3, pc}
 801df56:	eeb0 0a49 	vmov.f32	s0, s18
 801df5a:	eef0 0a69 	vmov.f32	s1, s19
 801df5e:	f000 f80b 	bl	801df78 <__fpclassifyd>
 801df62:	2800      	cmp	r0, #0
 801df64:	d0f0      	beq.n	801df48 <fmin+0x24>
 801df66:	ec53 2b19 	vmov	r2, r3, d9
 801df6a:	ec51 0b18 	vmov	r0, r1, d8
 801df6e:	f7e2 fd8d 	bl	8000a8c <__aeabi_dcmplt>
 801df72:	2800      	cmp	r0, #0
 801df74:	d0e4      	beq.n	801df40 <fmin+0x1c>
 801df76:	e7e7      	b.n	801df48 <fmin+0x24>

0801df78 <__fpclassifyd>:
 801df78:	ec51 0b10 	vmov	r0, r1, d0
 801df7c:	b510      	push	{r4, lr}
 801df7e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 801df82:	460b      	mov	r3, r1
 801df84:	d019      	beq.n	801dfba <__fpclassifyd+0x42>
 801df86:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 801df8a:	490e      	ldr	r1, [pc, #56]	@ (801dfc4 <__fpclassifyd+0x4c>)
 801df8c:	428a      	cmp	r2, r1
 801df8e:	d90e      	bls.n	801dfae <__fpclassifyd+0x36>
 801df90:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 801df94:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 801df98:	428a      	cmp	r2, r1
 801df9a:	d908      	bls.n	801dfae <__fpclassifyd+0x36>
 801df9c:	4a0a      	ldr	r2, [pc, #40]	@ (801dfc8 <__fpclassifyd+0x50>)
 801df9e:	4213      	tst	r3, r2
 801dfa0:	d007      	beq.n	801dfb2 <__fpclassifyd+0x3a>
 801dfa2:	4294      	cmp	r4, r2
 801dfa4:	d107      	bne.n	801dfb6 <__fpclassifyd+0x3e>
 801dfa6:	fab0 f080 	clz	r0, r0
 801dfaa:	0940      	lsrs	r0, r0, #5
 801dfac:	bd10      	pop	{r4, pc}
 801dfae:	2004      	movs	r0, #4
 801dfb0:	e7fc      	b.n	801dfac <__fpclassifyd+0x34>
 801dfb2:	2003      	movs	r0, #3
 801dfb4:	e7fa      	b.n	801dfac <__fpclassifyd+0x34>
 801dfb6:	2000      	movs	r0, #0
 801dfb8:	e7f8      	b.n	801dfac <__fpclassifyd+0x34>
 801dfba:	2800      	cmp	r0, #0
 801dfbc:	d1ee      	bne.n	801df9c <__fpclassifyd+0x24>
 801dfbe:	2002      	movs	r0, #2
 801dfc0:	e7f4      	b.n	801dfac <__fpclassifyd+0x34>
 801dfc2:	bf00      	nop
 801dfc4:	7fdfffff 	.word	0x7fdfffff
 801dfc8:	7ff00000 	.word	0x7ff00000

0801dfcc <finitef>:
 801dfcc:	ee10 3a10 	vmov	r3, s0
 801dfd0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801dfd4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801dfd8:	bfac      	ite	ge
 801dfda:	2000      	movge	r0, #0
 801dfdc:	2001      	movlt	r0, #1
 801dfde:	4770      	bx	lr

0801dfe0 <cosl>:
 801dfe0:	f7ff bec2 	b.w	801dd68 <cos>

0801dfe4 <sinl>:
 801dfe4:	f7ff bf14 	b.w	801de10 <sin>

0801dfe8 <acosl>:
 801dfe8:	f000 bbfe 	b.w	801e7e8 <acos>
 801dfec:	0000      	movs	r0, r0
	...

0801dff0 <floor>:
 801dff0:	ec51 0b10 	vmov	r0, r1, d0
 801dff4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801dff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dffc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801e000:	2e13      	cmp	r6, #19
 801e002:	460c      	mov	r4, r1
 801e004:	4605      	mov	r5, r0
 801e006:	4680      	mov	r8, r0
 801e008:	dc34      	bgt.n	801e074 <floor+0x84>
 801e00a:	2e00      	cmp	r6, #0
 801e00c:	da17      	bge.n	801e03e <floor+0x4e>
 801e00e:	a332      	add	r3, pc, #200	@ (adr r3, 801e0d8 <floor+0xe8>)
 801e010:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e014:	f7e2 f912 	bl	800023c <__adddf3>
 801e018:	2200      	movs	r2, #0
 801e01a:	2300      	movs	r3, #0
 801e01c:	f7e2 fd54 	bl	8000ac8 <__aeabi_dcmpgt>
 801e020:	b150      	cbz	r0, 801e038 <floor+0x48>
 801e022:	2c00      	cmp	r4, #0
 801e024:	da55      	bge.n	801e0d2 <floor+0xe2>
 801e026:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e02a:	432c      	orrs	r4, r5
 801e02c:	2500      	movs	r5, #0
 801e02e:	42ac      	cmp	r4, r5
 801e030:	4c2b      	ldr	r4, [pc, #172]	@ (801e0e0 <floor+0xf0>)
 801e032:	bf08      	it	eq
 801e034:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801e038:	4621      	mov	r1, r4
 801e03a:	4628      	mov	r0, r5
 801e03c:	e023      	b.n	801e086 <floor+0x96>
 801e03e:	4f29      	ldr	r7, [pc, #164]	@ (801e0e4 <floor+0xf4>)
 801e040:	4137      	asrs	r7, r6
 801e042:	ea01 0307 	and.w	r3, r1, r7
 801e046:	4303      	orrs	r3, r0
 801e048:	d01d      	beq.n	801e086 <floor+0x96>
 801e04a:	a323      	add	r3, pc, #140	@ (adr r3, 801e0d8 <floor+0xe8>)
 801e04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e050:	f7e2 f8f4 	bl	800023c <__adddf3>
 801e054:	2200      	movs	r2, #0
 801e056:	2300      	movs	r3, #0
 801e058:	f7e2 fd36 	bl	8000ac8 <__aeabi_dcmpgt>
 801e05c:	2800      	cmp	r0, #0
 801e05e:	d0eb      	beq.n	801e038 <floor+0x48>
 801e060:	2c00      	cmp	r4, #0
 801e062:	bfbe      	ittt	lt
 801e064:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801e068:	4133      	asrlt	r3, r6
 801e06a:	18e4      	addlt	r4, r4, r3
 801e06c:	ea24 0407 	bic.w	r4, r4, r7
 801e070:	2500      	movs	r5, #0
 801e072:	e7e1      	b.n	801e038 <floor+0x48>
 801e074:	2e33      	cmp	r6, #51	@ 0x33
 801e076:	dd0a      	ble.n	801e08e <floor+0x9e>
 801e078:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e07c:	d103      	bne.n	801e086 <floor+0x96>
 801e07e:	4602      	mov	r2, r0
 801e080:	460b      	mov	r3, r1
 801e082:	f7e2 f8db 	bl	800023c <__adddf3>
 801e086:	ec41 0b10 	vmov	d0, r0, r1
 801e08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e08e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801e092:	f04f 37ff 	mov.w	r7, #4294967295
 801e096:	40df      	lsrs	r7, r3
 801e098:	4207      	tst	r7, r0
 801e09a:	d0f4      	beq.n	801e086 <floor+0x96>
 801e09c:	a30e      	add	r3, pc, #56	@ (adr r3, 801e0d8 <floor+0xe8>)
 801e09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0a2:	f7e2 f8cb 	bl	800023c <__adddf3>
 801e0a6:	2200      	movs	r2, #0
 801e0a8:	2300      	movs	r3, #0
 801e0aa:	f7e2 fd0d 	bl	8000ac8 <__aeabi_dcmpgt>
 801e0ae:	2800      	cmp	r0, #0
 801e0b0:	d0c2      	beq.n	801e038 <floor+0x48>
 801e0b2:	2c00      	cmp	r4, #0
 801e0b4:	da0a      	bge.n	801e0cc <floor+0xdc>
 801e0b6:	2e14      	cmp	r6, #20
 801e0b8:	d101      	bne.n	801e0be <floor+0xce>
 801e0ba:	3401      	adds	r4, #1
 801e0bc:	e006      	b.n	801e0cc <floor+0xdc>
 801e0be:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e0c2:	2301      	movs	r3, #1
 801e0c4:	40b3      	lsls	r3, r6
 801e0c6:	441d      	add	r5, r3
 801e0c8:	4545      	cmp	r5, r8
 801e0ca:	d3f6      	bcc.n	801e0ba <floor+0xca>
 801e0cc:	ea25 0507 	bic.w	r5, r5, r7
 801e0d0:	e7b2      	b.n	801e038 <floor+0x48>
 801e0d2:	2500      	movs	r5, #0
 801e0d4:	462c      	mov	r4, r5
 801e0d6:	e7af      	b.n	801e038 <floor+0x48>
 801e0d8:	8800759c 	.word	0x8800759c
 801e0dc:	7e37e43c 	.word	0x7e37e43c
 801e0e0:	bff00000 	.word	0xbff00000
 801e0e4:	000fffff 	.word	0x000fffff

0801e0e8 <__kernel_cos>:
 801e0e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0ec:	ec57 6b10 	vmov	r6, r7, d0
 801e0f0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e0f4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801e0f8:	ed8d 1b00 	vstr	d1, [sp]
 801e0fc:	d206      	bcs.n	801e10c <__kernel_cos+0x24>
 801e0fe:	4630      	mov	r0, r6
 801e100:	4639      	mov	r1, r7
 801e102:	f7e2 fd01 	bl	8000b08 <__aeabi_d2iz>
 801e106:	2800      	cmp	r0, #0
 801e108:	f000 8088 	beq.w	801e21c <__kernel_cos+0x134>
 801e10c:	4632      	mov	r2, r6
 801e10e:	463b      	mov	r3, r7
 801e110:	4630      	mov	r0, r6
 801e112:	4639      	mov	r1, r7
 801e114:	f7e2 fa48 	bl	80005a8 <__aeabi_dmul>
 801e118:	4b51      	ldr	r3, [pc, #324]	@ (801e260 <__kernel_cos+0x178>)
 801e11a:	2200      	movs	r2, #0
 801e11c:	4604      	mov	r4, r0
 801e11e:	460d      	mov	r5, r1
 801e120:	f7e2 fa42 	bl	80005a8 <__aeabi_dmul>
 801e124:	a340      	add	r3, pc, #256	@ (adr r3, 801e228 <__kernel_cos+0x140>)
 801e126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e12a:	4682      	mov	sl, r0
 801e12c:	468b      	mov	fp, r1
 801e12e:	4620      	mov	r0, r4
 801e130:	4629      	mov	r1, r5
 801e132:	f7e2 fa39 	bl	80005a8 <__aeabi_dmul>
 801e136:	a33e      	add	r3, pc, #248	@ (adr r3, 801e230 <__kernel_cos+0x148>)
 801e138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e13c:	f7e2 f87e 	bl	800023c <__adddf3>
 801e140:	4622      	mov	r2, r4
 801e142:	462b      	mov	r3, r5
 801e144:	f7e2 fa30 	bl	80005a8 <__aeabi_dmul>
 801e148:	a33b      	add	r3, pc, #236	@ (adr r3, 801e238 <__kernel_cos+0x150>)
 801e14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e14e:	f7e2 f873 	bl	8000238 <__aeabi_dsub>
 801e152:	4622      	mov	r2, r4
 801e154:	462b      	mov	r3, r5
 801e156:	f7e2 fa27 	bl	80005a8 <__aeabi_dmul>
 801e15a:	a339      	add	r3, pc, #228	@ (adr r3, 801e240 <__kernel_cos+0x158>)
 801e15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e160:	f7e2 f86c 	bl	800023c <__adddf3>
 801e164:	4622      	mov	r2, r4
 801e166:	462b      	mov	r3, r5
 801e168:	f7e2 fa1e 	bl	80005a8 <__aeabi_dmul>
 801e16c:	a336      	add	r3, pc, #216	@ (adr r3, 801e248 <__kernel_cos+0x160>)
 801e16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e172:	f7e2 f861 	bl	8000238 <__aeabi_dsub>
 801e176:	4622      	mov	r2, r4
 801e178:	462b      	mov	r3, r5
 801e17a:	f7e2 fa15 	bl	80005a8 <__aeabi_dmul>
 801e17e:	a334      	add	r3, pc, #208	@ (adr r3, 801e250 <__kernel_cos+0x168>)
 801e180:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e184:	f7e2 f85a 	bl	800023c <__adddf3>
 801e188:	4622      	mov	r2, r4
 801e18a:	462b      	mov	r3, r5
 801e18c:	f7e2 fa0c 	bl	80005a8 <__aeabi_dmul>
 801e190:	4622      	mov	r2, r4
 801e192:	462b      	mov	r3, r5
 801e194:	f7e2 fa08 	bl	80005a8 <__aeabi_dmul>
 801e198:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e19c:	4604      	mov	r4, r0
 801e19e:	460d      	mov	r5, r1
 801e1a0:	4630      	mov	r0, r6
 801e1a2:	4639      	mov	r1, r7
 801e1a4:	f7e2 fa00 	bl	80005a8 <__aeabi_dmul>
 801e1a8:	460b      	mov	r3, r1
 801e1aa:	4602      	mov	r2, r0
 801e1ac:	4629      	mov	r1, r5
 801e1ae:	4620      	mov	r0, r4
 801e1b0:	f7e2 f842 	bl	8000238 <__aeabi_dsub>
 801e1b4:	4b2b      	ldr	r3, [pc, #172]	@ (801e264 <__kernel_cos+0x17c>)
 801e1b6:	4598      	cmp	r8, r3
 801e1b8:	4606      	mov	r6, r0
 801e1ba:	460f      	mov	r7, r1
 801e1bc:	d810      	bhi.n	801e1e0 <__kernel_cos+0xf8>
 801e1be:	4602      	mov	r2, r0
 801e1c0:	460b      	mov	r3, r1
 801e1c2:	4650      	mov	r0, sl
 801e1c4:	4659      	mov	r1, fp
 801e1c6:	f7e2 f837 	bl	8000238 <__aeabi_dsub>
 801e1ca:	460b      	mov	r3, r1
 801e1cc:	4926      	ldr	r1, [pc, #152]	@ (801e268 <__kernel_cos+0x180>)
 801e1ce:	4602      	mov	r2, r0
 801e1d0:	2000      	movs	r0, #0
 801e1d2:	f7e2 f831 	bl	8000238 <__aeabi_dsub>
 801e1d6:	ec41 0b10 	vmov	d0, r0, r1
 801e1da:	b003      	add	sp, #12
 801e1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1e0:	4b22      	ldr	r3, [pc, #136]	@ (801e26c <__kernel_cos+0x184>)
 801e1e2:	4921      	ldr	r1, [pc, #132]	@ (801e268 <__kernel_cos+0x180>)
 801e1e4:	4598      	cmp	r8, r3
 801e1e6:	bf8c      	ite	hi
 801e1e8:	4d21      	ldrhi	r5, [pc, #132]	@ (801e270 <__kernel_cos+0x188>)
 801e1ea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801e1ee:	2400      	movs	r4, #0
 801e1f0:	4622      	mov	r2, r4
 801e1f2:	462b      	mov	r3, r5
 801e1f4:	2000      	movs	r0, #0
 801e1f6:	f7e2 f81f 	bl	8000238 <__aeabi_dsub>
 801e1fa:	4622      	mov	r2, r4
 801e1fc:	4680      	mov	r8, r0
 801e1fe:	4689      	mov	r9, r1
 801e200:	462b      	mov	r3, r5
 801e202:	4650      	mov	r0, sl
 801e204:	4659      	mov	r1, fp
 801e206:	f7e2 f817 	bl	8000238 <__aeabi_dsub>
 801e20a:	4632      	mov	r2, r6
 801e20c:	463b      	mov	r3, r7
 801e20e:	f7e2 f813 	bl	8000238 <__aeabi_dsub>
 801e212:	4602      	mov	r2, r0
 801e214:	460b      	mov	r3, r1
 801e216:	4640      	mov	r0, r8
 801e218:	4649      	mov	r1, r9
 801e21a:	e7da      	b.n	801e1d2 <__kernel_cos+0xea>
 801e21c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801e258 <__kernel_cos+0x170>
 801e220:	e7db      	b.n	801e1da <__kernel_cos+0xf2>
 801e222:	bf00      	nop
 801e224:	f3af 8000 	nop.w
 801e228:	be8838d4 	.word	0xbe8838d4
 801e22c:	bda8fae9 	.word	0xbda8fae9
 801e230:	bdb4b1c4 	.word	0xbdb4b1c4
 801e234:	3e21ee9e 	.word	0x3e21ee9e
 801e238:	809c52ad 	.word	0x809c52ad
 801e23c:	3e927e4f 	.word	0x3e927e4f
 801e240:	19cb1590 	.word	0x19cb1590
 801e244:	3efa01a0 	.word	0x3efa01a0
 801e248:	16c15177 	.word	0x16c15177
 801e24c:	3f56c16c 	.word	0x3f56c16c
 801e250:	5555554c 	.word	0x5555554c
 801e254:	3fa55555 	.word	0x3fa55555
 801e258:	00000000 	.word	0x00000000
 801e25c:	3ff00000 	.word	0x3ff00000
 801e260:	3fe00000 	.word	0x3fe00000
 801e264:	3fd33332 	.word	0x3fd33332
 801e268:	3ff00000 	.word	0x3ff00000
 801e26c:	3fe90000 	.word	0x3fe90000
 801e270:	3fd20000 	.word	0x3fd20000
 801e274:	00000000 	.word	0x00000000

0801e278 <__kernel_sin>:
 801e278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e27c:	ec55 4b10 	vmov	r4, r5, d0
 801e280:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801e284:	b085      	sub	sp, #20
 801e286:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801e28a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801e28e:	4680      	mov	r8, r0
 801e290:	d205      	bcs.n	801e29e <__kernel_sin+0x26>
 801e292:	4620      	mov	r0, r4
 801e294:	4629      	mov	r1, r5
 801e296:	f7e2 fc37 	bl	8000b08 <__aeabi_d2iz>
 801e29a:	2800      	cmp	r0, #0
 801e29c:	d052      	beq.n	801e344 <__kernel_sin+0xcc>
 801e29e:	4622      	mov	r2, r4
 801e2a0:	462b      	mov	r3, r5
 801e2a2:	4620      	mov	r0, r4
 801e2a4:	4629      	mov	r1, r5
 801e2a6:	f7e2 f97f 	bl	80005a8 <__aeabi_dmul>
 801e2aa:	4682      	mov	sl, r0
 801e2ac:	468b      	mov	fp, r1
 801e2ae:	4602      	mov	r2, r0
 801e2b0:	460b      	mov	r3, r1
 801e2b2:	4620      	mov	r0, r4
 801e2b4:	4629      	mov	r1, r5
 801e2b6:	f7e2 f977 	bl	80005a8 <__aeabi_dmul>
 801e2ba:	a342      	add	r3, pc, #264	@ (adr r3, 801e3c4 <__kernel_sin+0x14c>)
 801e2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2c0:	e9cd 0100 	strd	r0, r1, [sp]
 801e2c4:	4650      	mov	r0, sl
 801e2c6:	4659      	mov	r1, fp
 801e2c8:	f7e2 f96e 	bl	80005a8 <__aeabi_dmul>
 801e2cc:	a33f      	add	r3, pc, #252	@ (adr r3, 801e3cc <__kernel_sin+0x154>)
 801e2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2d2:	f7e1 ffb1 	bl	8000238 <__aeabi_dsub>
 801e2d6:	4652      	mov	r2, sl
 801e2d8:	465b      	mov	r3, fp
 801e2da:	f7e2 f965 	bl	80005a8 <__aeabi_dmul>
 801e2de:	a33d      	add	r3, pc, #244	@ (adr r3, 801e3d4 <__kernel_sin+0x15c>)
 801e2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2e4:	f7e1 ffaa 	bl	800023c <__adddf3>
 801e2e8:	4652      	mov	r2, sl
 801e2ea:	465b      	mov	r3, fp
 801e2ec:	f7e2 f95c 	bl	80005a8 <__aeabi_dmul>
 801e2f0:	a33a      	add	r3, pc, #232	@ (adr r3, 801e3dc <__kernel_sin+0x164>)
 801e2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2f6:	f7e1 ff9f 	bl	8000238 <__aeabi_dsub>
 801e2fa:	4652      	mov	r2, sl
 801e2fc:	465b      	mov	r3, fp
 801e2fe:	f7e2 f953 	bl	80005a8 <__aeabi_dmul>
 801e302:	a338      	add	r3, pc, #224	@ (adr r3, 801e3e4 <__kernel_sin+0x16c>)
 801e304:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e308:	f7e1 ff98 	bl	800023c <__adddf3>
 801e30c:	4606      	mov	r6, r0
 801e30e:	460f      	mov	r7, r1
 801e310:	f1b8 0f00 	cmp.w	r8, #0
 801e314:	d11b      	bne.n	801e34e <__kernel_sin+0xd6>
 801e316:	4602      	mov	r2, r0
 801e318:	460b      	mov	r3, r1
 801e31a:	4650      	mov	r0, sl
 801e31c:	4659      	mov	r1, fp
 801e31e:	f7e2 f943 	bl	80005a8 <__aeabi_dmul>
 801e322:	a325      	add	r3, pc, #148	@ (adr r3, 801e3b8 <__kernel_sin+0x140>)
 801e324:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e328:	f7e1 ff86 	bl	8000238 <__aeabi_dsub>
 801e32c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e330:	f7e2 f93a 	bl	80005a8 <__aeabi_dmul>
 801e334:	4602      	mov	r2, r0
 801e336:	460b      	mov	r3, r1
 801e338:	4620      	mov	r0, r4
 801e33a:	4629      	mov	r1, r5
 801e33c:	f7e1 ff7e 	bl	800023c <__adddf3>
 801e340:	4604      	mov	r4, r0
 801e342:	460d      	mov	r5, r1
 801e344:	ec45 4b10 	vmov	d0, r4, r5
 801e348:	b005      	add	sp, #20
 801e34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e352:	4b1b      	ldr	r3, [pc, #108]	@ (801e3c0 <__kernel_sin+0x148>)
 801e354:	2200      	movs	r2, #0
 801e356:	f7e2 f927 	bl	80005a8 <__aeabi_dmul>
 801e35a:	4632      	mov	r2, r6
 801e35c:	4680      	mov	r8, r0
 801e35e:	4689      	mov	r9, r1
 801e360:	463b      	mov	r3, r7
 801e362:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e366:	f7e2 f91f 	bl	80005a8 <__aeabi_dmul>
 801e36a:	4602      	mov	r2, r0
 801e36c:	460b      	mov	r3, r1
 801e36e:	4640      	mov	r0, r8
 801e370:	4649      	mov	r1, r9
 801e372:	f7e1 ff61 	bl	8000238 <__aeabi_dsub>
 801e376:	4652      	mov	r2, sl
 801e378:	465b      	mov	r3, fp
 801e37a:	f7e2 f915 	bl	80005a8 <__aeabi_dmul>
 801e37e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e382:	f7e1 ff59 	bl	8000238 <__aeabi_dsub>
 801e386:	a30c      	add	r3, pc, #48	@ (adr r3, 801e3b8 <__kernel_sin+0x140>)
 801e388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e38c:	4606      	mov	r6, r0
 801e38e:	460f      	mov	r7, r1
 801e390:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e394:	f7e2 f908 	bl	80005a8 <__aeabi_dmul>
 801e398:	4602      	mov	r2, r0
 801e39a:	460b      	mov	r3, r1
 801e39c:	4630      	mov	r0, r6
 801e39e:	4639      	mov	r1, r7
 801e3a0:	f7e1 ff4c 	bl	800023c <__adddf3>
 801e3a4:	4602      	mov	r2, r0
 801e3a6:	460b      	mov	r3, r1
 801e3a8:	4620      	mov	r0, r4
 801e3aa:	4629      	mov	r1, r5
 801e3ac:	f7e1 ff44 	bl	8000238 <__aeabi_dsub>
 801e3b0:	e7c6      	b.n	801e340 <__kernel_sin+0xc8>
 801e3b2:	bf00      	nop
 801e3b4:	f3af 8000 	nop.w
 801e3b8:	55555549 	.word	0x55555549
 801e3bc:	3fc55555 	.word	0x3fc55555
 801e3c0:	3fe00000 	.word	0x3fe00000
 801e3c4:	5acfd57c 	.word	0x5acfd57c
 801e3c8:	3de5d93a 	.word	0x3de5d93a
 801e3cc:	8a2b9ceb 	.word	0x8a2b9ceb
 801e3d0:	3e5ae5e6 	.word	0x3e5ae5e6
 801e3d4:	57b1fe7d 	.word	0x57b1fe7d
 801e3d8:	3ec71de3 	.word	0x3ec71de3
 801e3dc:	19c161d5 	.word	0x19c161d5
 801e3e0:	3f2a01a0 	.word	0x3f2a01a0
 801e3e4:	1110f8a6 	.word	0x1110f8a6
 801e3e8:	3f811111 	.word	0x3f811111
 801e3ec:	00000000 	.word	0x00000000

0801e3f0 <__ieee754_rem_pio2>:
 801e3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3f4:	ec57 6b10 	vmov	r6, r7, d0
 801e3f8:	4bc5      	ldr	r3, [pc, #788]	@ (801e710 <__ieee754_rem_pio2+0x320>)
 801e3fa:	b08d      	sub	sp, #52	@ 0x34
 801e3fc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e400:	4598      	cmp	r8, r3
 801e402:	4604      	mov	r4, r0
 801e404:	9704      	str	r7, [sp, #16]
 801e406:	d807      	bhi.n	801e418 <__ieee754_rem_pio2+0x28>
 801e408:	2200      	movs	r2, #0
 801e40a:	2300      	movs	r3, #0
 801e40c:	ed80 0b00 	vstr	d0, [r0]
 801e410:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e414:	2500      	movs	r5, #0
 801e416:	e028      	b.n	801e46a <__ieee754_rem_pio2+0x7a>
 801e418:	4bbe      	ldr	r3, [pc, #760]	@ (801e714 <__ieee754_rem_pio2+0x324>)
 801e41a:	4598      	cmp	r8, r3
 801e41c:	d878      	bhi.n	801e510 <__ieee754_rem_pio2+0x120>
 801e41e:	9b04      	ldr	r3, [sp, #16]
 801e420:	4dbd      	ldr	r5, [pc, #756]	@ (801e718 <__ieee754_rem_pio2+0x328>)
 801e422:	2b00      	cmp	r3, #0
 801e424:	4630      	mov	r0, r6
 801e426:	a3ac      	add	r3, pc, #688	@ (adr r3, 801e6d8 <__ieee754_rem_pio2+0x2e8>)
 801e428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e42c:	4639      	mov	r1, r7
 801e42e:	dd38      	ble.n	801e4a2 <__ieee754_rem_pio2+0xb2>
 801e430:	f7e1 ff02 	bl	8000238 <__aeabi_dsub>
 801e434:	45a8      	cmp	r8, r5
 801e436:	4606      	mov	r6, r0
 801e438:	460f      	mov	r7, r1
 801e43a:	d01a      	beq.n	801e472 <__ieee754_rem_pio2+0x82>
 801e43c:	a3a8      	add	r3, pc, #672	@ (adr r3, 801e6e0 <__ieee754_rem_pio2+0x2f0>)
 801e43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e442:	f7e1 fef9 	bl	8000238 <__aeabi_dsub>
 801e446:	4602      	mov	r2, r0
 801e448:	460b      	mov	r3, r1
 801e44a:	4680      	mov	r8, r0
 801e44c:	4689      	mov	r9, r1
 801e44e:	4630      	mov	r0, r6
 801e450:	4639      	mov	r1, r7
 801e452:	f7e1 fef1 	bl	8000238 <__aeabi_dsub>
 801e456:	a3a2      	add	r3, pc, #648	@ (adr r3, 801e6e0 <__ieee754_rem_pio2+0x2f0>)
 801e458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e45c:	f7e1 feec 	bl	8000238 <__aeabi_dsub>
 801e460:	e9c4 8900 	strd	r8, r9, [r4]
 801e464:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e468:	2501      	movs	r5, #1
 801e46a:	4628      	mov	r0, r5
 801e46c:	b00d      	add	sp, #52	@ 0x34
 801e46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e472:	a39d      	add	r3, pc, #628	@ (adr r3, 801e6e8 <__ieee754_rem_pio2+0x2f8>)
 801e474:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e478:	f7e1 fede 	bl	8000238 <__aeabi_dsub>
 801e47c:	a39c      	add	r3, pc, #624	@ (adr r3, 801e6f0 <__ieee754_rem_pio2+0x300>)
 801e47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e482:	4606      	mov	r6, r0
 801e484:	460f      	mov	r7, r1
 801e486:	f7e1 fed7 	bl	8000238 <__aeabi_dsub>
 801e48a:	4602      	mov	r2, r0
 801e48c:	460b      	mov	r3, r1
 801e48e:	4680      	mov	r8, r0
 801e490:	4689      	mov	r9, r1
 801e492:	4630      	mov	r0, r6
 801e494:	4639      	mov	r1, r7
 801e496:	f7e1 fecf 	bl	8000238 <__aeabi_dsub>
 801e49a:	a395      	add	r3, pc, #596	@ (adr r3, 801e6f0 <__ieee754_rem_pio2+0x300>)
 801e49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4a0:	e7dc      	b.n	801e45c <__ieee754_rem_pio2+0x6c>
 801e4a2:	f7e1 fecb 	bl	800023c <__adddf3>
 801e4a6:	45a8      	cmp	r8, r5
 801e4a8:	4606      	mov	r6, r0
 801e4aa:	460f      	mov	r7, r1
 801e4ac:	d018      	beq.n	801e4e0 <__ieee754_rem_pio2+0xf0>
 801e4ae:	a38c      	add	r3, pc, #560	@ (adr r3, 801e6e0 <__ieee754_rem_pio2+0x2f0>)
 801e4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4b4:	f7e1 fec2 	bl	800023c <__adddf3>
 801e4b8:	4602      	mov	r2, r0
 801e4ba:	460b      	mov	r3, r1
 801e4bc:	4680      	mov	r8, r0
 801e4be:	4689      	mov	r9, r1
 801e4c0:	4630      	mov	r0, r6
 801e4c2:	4639      	mov	r1, r7
 801e4c4:	f7e1 feb8 	bl	8000238 <__aeabi_dsub>
 801e4c8:	a385      	add	r3, pc, #532	@ (adr r3, 801e6e0 <__ieee754_rem_pio2+0x2f0>)
 801e4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4ce:	f7e1 feb5 	bl	800023c <__adddf3>
 801e4d2:	f04f 35ff 	mov.w	r5, #4294967295
 801e4d6:	e9c4 8900 	strd	r8, r9, [r4]
 801e4da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e4de:	e7c4      	b.n	801e46a <__ieee754_rem_pio2+0x7a>
 801e4e0:	a381      	add	r3, pc, #516	@ (adr r3, 801e6e8 <__ieee754_rem_pio2+0x2f8>)
 801e4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4e6:	f7e1 fea9 	bl	800023c <__adddf3>
 801e4ea:	a381      	add	r3, pc, #516	@ (adr r3, 801e6f0 <__ieee754_rem_pio2+0x300>)
 801e4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4f0:	4606      	mov	r6, r0
 801e4f2:	460f      	mov	r7, r1
 801e4f4:	f7e1 fea2 	bl	800023c <__adddf3>
 801e4f8:	4602      	mov	r2, r0
 801e4fa:	460b      	mov	r3, r1
 801e4fc:	4680      	mov	r8, r0
 801e4fe:	4689      	mov	r9, r1
 801e500:	4630      	mov	r0, r6
 801e502:	4639      	mov	r1, r7
 801e504:	f7e1 fe98 	bl	8000238 <__aeabi_dsub>
 801e508:	a379      	add	r3, pc, #484	@ (adr r3, 801e6f0 <__ieee754_rem_pio2+0x300>)
 801e50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e50e:	e7de      	b.n	801e4ce <__ieee754_rem_pio2+0xde>
 801e510:	4b82      	ldr	r3, [pc, #520]	@ (801e71c <__ieee754_rem_pio2+0x32c>)
 801e512:	4598      	cmp	r8, r3
 801e514:	f200 80d1 	bhi.w	801e6ba <__ieee754_rem_pio2+0x2ca>
 801e518:	f000 f99a 	bl	801e850 <fabs>
 801e51c:	ec57 6b10 	vmov	r6, r7, d0
 801e520:	a375      	add	r3, pc, #468	@ (adr r3, 801e6f8 <__ieee754_rem_pio2+0x308>)
 801e522:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e526:	4630      	mov	r0, r6
 801e528:	4639      	mov	r1, r7
 801e52a:	f7e2 f83d 	bl	80005a8 <__aeabi_dmul>
 801e52e:	4b7c      	ldr	r3, [pc, #496]	@ (801e720 <__ieee754_rem_pio2+0x330>)
 801e530:	2200      	movs	r2, #0
 801e532:	f7e1 fe83 	bl	800023c <__adddf3>
 801e536:	f7e2 fae7 	bl	8000b08 <__aeabi_d2iz>
 801e53a:	4605      	mov	r5, r0
 801e53c:	f7e1 ffca 	bl	80004d4 <__aeabi_i2d>
 801e540:	4602      	mov	r2, r0
 801e542:	460b      	mov	r3, r1
 801e544:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e548:	a363      	add	r3, pc, #396	@ (adr r3, 801e6d8 <__ieee754_rem_pio2+0x2e8>)
 801e54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e54e:	f7e2 f82b 	bl	80005a8 <__aeabi_dmul>
 801e552:	4602      	mov	r2, r0
 801e554:	460b      	mov	r3, r1
 801e556:	4630      	mov	r0, r6
 801e558:	4639      	mov	r1, r7
 801e55a:	f7e1 fe6d 	bl	8000238 <__aeabi_dsub>
 801e55e:	a360      	add	r3, pc, #384	@ (adr r3, 801e6e0 <__ieee754_rem_pio2+0x2f0>)
 801e560:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e564:	4682      	mov	sl, r0
 801e566:	468b      	mov	fp, r1
 801e568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e56c:	f7e2 f81c 	bl	80005a8 <__aeabi_dmul>
 801e570:	2d1f      	cmp	r5, #31
 801e572:	4606      	mov	r6, r0
 801e574:	460f      	mov	r7, r1
 801e576:	dc0c      	bgt.n	801e592 <__ieee754_rem_pio2+0x1a2>
 801e578:	4b6a      	ldr	r3, [pc, #424]	@ (801e724 <__ieee754_rem_pio2+0x334>)
 801e57a:	1e6a      	subs	r2, r5, #1
 801e57c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e580:	4543      	cmp	r3, r8
 801e582:	d006      	beq.n	801e592 <__ieee754_rem_pio2+0x1a2>
 801e584:	4632      	mov	r2, r6
 801e586:	463b      	mov	r3, r7
 801e588:	4650      	mov	r0, sl
 801e58a:	4659      	mov	r1, fp
 801e58c:	f7e1 fe54 	bl	8000238 <__aeabi_dsub>
 801e590:	e00e      	b.n	801e5b0 <__ieee754_rem_pio2+0x1c0>
 801e592:	463b      	mov	r3, r7
 801e594:	4632      	mov	r2, r6
 801e596:	4650      	mov	r0, sl
 801e598:	4659      	mov	r1, fp
 801e59a:	f7e1 fe4d 	bl	8000238 <__aeabi_dsub>
 801e59e:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e5a2:	9305      	str	r3, [sp, #20]
 801e5a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e5a8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801e5ac:	2b10      	cmp	r3, #16
 801e5ae:	dc02      	bgt.n	801e5b6 <__ieee754_rem_pio2+0x1c6>
 801e5b0:	e9c4 0100 	strd	r0, r1, [r4]
 801e5b4:	e039      	b.n	801e62a <__ieee754_rem_pio2+0x23a>
 801e5b6:	a34c      	add	r3, pc, #304	@ (adr r3, 801e6e8 <__ieee754_rem_pio2+0x2f8>)
 801e5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e5c0:	f7e1 fff2 	bl	80005a8 <__aeabi_dmul>
 801e5c4:	4606      	mov	r6, r0
 801e5c6:	460f      	mov	r7, r1
 801e5c8:	4602      	mov	r2, r0
 801e5ca:	460b      	mov	r3, r1
 801e5cc:	4650      	mov	r0, sl
 801e5ce:	4659      	mov	r1, fp
 801e5d0:	f7e1 fe32 	bl	8000238 <__aeabi_dsub>
 801e5d4:	4602      	mov	r2, r0
 801e5d6:	460b      	mov	r3, r1
 801e5d8:	4680      	mov	r8, r0
 801e5da:	4689      	mov	r9, r1
 801e5dc:	4650      	mov	r0, sl
 801e5de:	4659      	mov	r1, fp
 801e5e0:	f7e1 fe2a 	bl	8000238 <__aeabi_dsub>
 801e5e4:	4632      	mov	r2, r6
 801e5e6:	463b      	mov	r3, r7
 801e5e8:	f7e1 fe26 	bl	8000238 <__aeabi_dsub>
 801e5ec:	a340      	add	r3, pc, #256	@ (adr r3, 801e6f0 <__ieee754_rem_pio2+0x300>)
 801e5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5f2:	4606      	mov	r6, r0
 801e5f4:	460f      	mov	r7, r1
 801e5f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e5fa:	f7e1 ffd5 	bl	80005a8 <__aeabi_dmul>
 801e5fe:	4632      	mov	r2, r6
 801e600:	463b      	mov	r3, r7
 801e602:	f7e1 fe19 	bl	8000238 <__aeabi_dsub>
 801e606:	4602      	mov	r2, r0
 801e608:	460b      	mov	r3, r1
 801e60a:	4606      	mov	r6, r0
 801e60c:	460f      	mov	r7, r1
 801e60e:	4640      	mov	r0, r8
 801e610:	4649      	mov	r1, r9
 801e612:	f7e1 fe11 	bl	8000238 <__aeabi_dsub>
 801e616:	9a05      	ldr	r2, [sp, #20]
 801e618:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e61c:	1ad3      	subs	r3, r2, r3
 801e61e:	2b31      	cmp	r3, #49	@ 0x31
 801e620:	dc20      	bgt.n	801e664 <__ieee754_rem_pio2+0x274>
 801e622:	e9c4 0100 	strd	r0, r1, [r4]
 801e626:	46c2      	mov	sl, r8
 801e628:	46cb      	mov	fp, r9
 801e62a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801e62e:	4650      	mov	r0, sl
 801e630:	4642      	mov	r2, r8
 801e632:	464b      	mov	r3, r9
 801e634:	4659      	mov	r1, fp
 801e636:	f7e1 fdff 	bl	8000238 <__aeabi_dsub>
 801e63a:	463b      	mov	r3, r7
 801e63c:	4632      	mov	r2, r6
 801e63e:	f7e1 fdfb 	bl	8000238 <__aeabi_dsub>
 801e642:	9b04      	ldr	r3, [sp, #16]
 801e644:	2b00      	cmp	r3, #0
 801e646:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e64a:	f6bf af0e 	bge.w	801e46a <__ieee754_rem_pio2+0x7a>
 801e64e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801e652:	6063      	str	r3, [r4, #4]
 801e654:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e658:	f8c4 8000 	str.w	r8, [r4]
 801e65c:	60a0      	str	r0, [r4, #8]
 801e65e:	60e3      	str	r3, [r4, #12]
 801e660:	426d      	negs	r5, r5
 801e662:	e702      	b.n	801e46a <__ieee754_rem_pio2+0x7a>
 801e664:	a326      	add	r3, pc, #152	@ (adr r3, 801e700 <__ieee754_rem_pio2+0x310>)
 801e666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e66a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e66e:	f7e1 ff9b 	bl	80005a8 <__aeabi_dmul>
 801e672:	4606      	mov	r6, r0
 801e674:	460f      	mov	r7, r1
 801e676:	4602      	mov	r2, r0
 801e678:	460b      	mov	r3, r1
 801e67a:	4640      	mov	r0, r8
 801e67c:	4649      	mov	r1, r9
 801e67e:	f7e1 fddb 	bl	8000238 <__aeabi_dsub>
 801e682:	4602      	mov	r2, r0
 801e684:	460b      	mov	r3, r1
 801e686:	4682      	mov	sl, r0
 801e688:	468b      	mov	fp, r1
 801e68a:	4640      	mov	r0, r8
 801e68c:	4649      	mov	r1, r9
 801e68e:	f7e1 fdd3 	bl	8000238 <__aeabi_dsub>
 801e692:	4632      	mov	r2, r6
 801e694:	463b      	mov	r3, r7
 801e696:	f7e1 fdcf 	bl	8000238 <__aeabi_dsub>
 801e69a:	a31b      	add	r3, pc, #108	@ (adr r3, 801e708 <__ieee754_rem_pio2+0x318>)
 801e69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6a0:	4606      	mov	r6, r0
 801e6a2:	460f      	mov	r7, r1
 801e6a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e6a8:	f7e1 ff7e 	bl	80005a8 <__aeabi_dmul>
 801e6ac:	4632      	mov	r2, r6
 801e6ae:	463b      	mov	r3, r7
 801e6b0:	f7e1 fdc2 	bl	8000238 <__aeabi_dsub>
 801e6b4:	4606      	mov	r6, r0
 801e6b6:	460f      	mov	r7, r1
 801e6b8:	e764      	b.n	801e584 <__ieee754_rem_pio2+0x194>
 801e6ba:	4b1b      	ldr	r3, [pc, #108]	@ (801e728 <__ieee754_rem_pio2+0x338>)
 801e6bc:	4598      	cmp	r8, r3
 801e6be:	d935      	bls.n	801e72c <__ieee754_rem_pio2+0x33c>
 801e6c0:	4632      	mov	r2, r6
 801e6c2:	463b      	mov	r3, r7
 801e6c4:	4630      	mov	r0, r6
 801e6c6:	4639      	mov	r1, r7
 801e6c8:	f7e1 fdb6 	bl	8000238 <__aeabi_dsub>
 801e6cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e6d0:	e9c4 0100 	strd	r0, r1, [r4]
 801e6d4:	e69e      	b.n	801e414 <__ieee754_rem_pio2+0x24>
 801e6d6:	bf00      	nop
 801e6d8:	54400000 	.word	0x54400000
 801e6dc:	3ff921fb 	.word	0x3ff921fb
 801e6e0:	1a626331 	.word	0x1a626331
 801e6e4:	3dd0b461 	.word	0x3dd0b461
 801e6e8:	1a600000 	.word	0x1a600000
 801e6ec:	3dd0b461 	.word	0x3dd0b461
 801e6f0:	2e037073 	.word	0x2e037073
 801e6f4:	3ba3198a 	.word	0x3ba3198a
 801e6f8:	6dc9c883 	.word	0x6dc9c883
 801e6fc:	3fe45f30 	.word	0x3fe45f30
 801e700:	2e000000 	.word	0x2e000000
 801e704:	3ba3198a 	.word	0x3ba3198a
 801e708:	252049c1 	.word	0x252049c1
 801e70c:	397b839a 	.word	0x397b839a
 801e710:	3fe921fb 	.word	0x3fe921fb
 801e714:	4002d97b 	.word	0x4002d97b
 801e718:	3ff921fb 	.word	0x3ff921fb
 801e71c:	413921fb 	.word	0x413921fb
 801e720:	3fe00000 	.word	0x3fe00000
 801e724:	080222b4 	.word	0x080222b4
 801e728:	7fefffff 	.word	0x7fefffff
 801e72c:	ea4f 5528 	mov.w	r5, r8, asr #20
 801e730:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801e734:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801e738:	4630      	mov	r0, r6
 801e73a:	460f      	mov	r7, r1
 801e73c:	f7e2 f9e4 	bl	8000b08 <__aeabi_d2iz>
 801e740:	f7e1 fec8 	bl	80004d4 <__aeabi_i2d>
 801e744:	4602      	mov	r2, r0
 801e746:	460b      	mov	r3, r1
 801e748:	4630      	mov	r0, r6
 801e74a:	4639      	mov	r1, r7
 801e74c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e750:	f7e1 fd72 	bl	8000238 <__aeabi_dsub>
 801e754:	4b22      	ldr	r3, [pc, #136]	@ (801e7e0 <__ieee754_rem_pio2+0x3f0>)
 801e756:	2200      	movs	r2, #0
 801e758:	f7e1 ff26 	bl	80005a8 <__aeabi_dmul>
 801e75c:	460f      	mov	r7, r1
 801e75e:	4606      	mov	r6, r0
 801e760:	f7e2 f9d2 	bl	8000b08 <__aeabi_d2iz>
 801e764:	f7e1 feb6 	bl	80004d4 <__aeabi_i2d>
 801e768:	4602      	mov	r2, r0
 801e76a:	460b      	mov	r3, r1
 801e76c:	4630      	mov	r0, r6
 801e76e:	4639      	mov	r1, r7
 801e770:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801e774:	f7e1 fd60 	bl	8000238 <__aeabi_dsub>
 801e778:	4b19      	ldr	r3, [pc, #100]	@ (801e7e0 <__ieee754_rem_pio2+0x3f0>)
 801e77a:	2200      	movs	r2, #0
 801e77c:	f7e1 ff14 	bl	80005a8 <__aeabi_dmul>
 801e780:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801e784:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801e788:	f04f 0803 	mov.w	r8, #3
 801e78c:	2600      	movs	r6, #0
 801e78e:	2700      	movs	r7, #0
 801e790:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801e794:	4632      	mov	r2, r6
 801e796:	463b      	mov	r3, r7
 801e798:	46c2      	mov	sl, r8
 801e79a:	f108 38ff 	add.w	r8, r8, #4294967295
 801e79e:	f7e2 f96b 	bl	8000a78 <__aeabi_dcmpeq>
 801e7a2:	2800      	cmp	r0, #0
 801e7a4:	d1f4      	bne.n	801e790 <__ieee754_rem_pio2+0x3a0>
 801e7a6:	4b0f      	ldr	r3, [pc, #60]	@ (801e7e4 <__ieee754_rem_pio2+0x3f4>)
 801e7a8:	9301      	str	r3, [sp, #4]
 801e7aa:	2302      	movs	r3, #2
 801e7ac:	9300      	str	r3, [sp, #0]
 801e7ae:	462a      	mov	r2, r5
 801e7b0:	4653      	mov	r3, sl
 801e7b2:	4621      	mov	r1, r4
 801e7b4:	a806      	add	r0, sp, #24
 801e7b6:	f000 f947 	bl	801ea48 <__kernel_rem_pio2>
 801e7ba:	9b04      	ldr	r3, [sp, #16]
 801e7bc:	2b00      	cmp	r3, #0
 801e7be:	4605      	mov	r5, r0
 801e7c0:	f6bf ae53 	bge.w	801e46a <__ieee754_rem_pio2+0x7a>
 801e7c4:	e9d4 2100 	ldrd	r2, r1, [r4]
 801e7c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e7cc:	e9c4 2300 	strd	r2, r3, [r4]
 801e7d0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801e7d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e7d8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801e7dc:	e740      	b.n	801e660 <__ieee754_rem_pio2+0x270>
 801e7de:	bf00      	nop
 801e7e0:	41700000 	.word	0x41700000
 801e7e4:	08022334 	.word	0x08022334

0801e7e8 <acos>:
 801e7e8:	b538      	push	{r3, r4, r5, lr}
 801e7ea:	ed2d 8b02 	vpush	{d8}
 801e7ee:	ec55 4b10 	vmov	r4, r5, d0
 801e7f2:	f000 fc81 	bl	801f0f8 <__ieee754_acos>
 801e7f6:	4622      	mov	r2, r4
 801e7f8:	462b      	mov	r3, r5
 801e7fa:	4620      	mov	r0, r4
 801e7fc:	4629      	mov	r1, r5
 801e7fe:	eeb0 8a40 	vmov.f32	s16, s0
 801e802:	eef0 8a60 	vmov.f32	s17, s1
 801e806:	f7e2 f969 	bl	8000adc <__aeabi_dcmpun>
 801e80a:	b9a8      	cbnz	r0, 801e838 <acos+0x50>
 801e80c:	ec45 4b10 	vmov	d0, r4, r5
 801e810:	f000 f81e 	bl	801e850 <fabs>
 801e814:	4b0c      	ldr	r3, [pc, #48]	@ (801e848 <acos+0x60>)
 801e816:	ec51 0b10 	vmov	r0, r1, d0
 801e81a:	2200      	movs	r2, #0
 801e81c:	f7e2 f954 	bl	8000ac8 <__aeabi_dcmpgt>
 801e820:	b150      	cbz	r0, 801e838 <acos+0x50>
 801e822:	f7fc fe71 	bl	801b508 <__errno>
 801e826:	ecbd 8b02 	vpop	{d8}
 801e82a:	2321      	movs	r3, #33	@ 0x21
 801e82c:	6003      	str	r3, [r0, #0]
 801e82e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e832:	4806      	ldr	r0, [pc, #24]	@ (801e84c <acos+0x64>)
 801e834:	f7fc beac 	b.w	801b590 <nan>
 801e838:	eeb0 0a48 	vmov.f32	s0, s16
 801e83c:	eef0 0a68 	vmov.f32	s1, s17
 801e840:	ecbd 8b02 	vpop	{d8}
 801e844:	bd38      	pop	{r3, r4, r5, pc}
 801e846:	bf00      	nop
 801e848:	3ff00000 	.word	0x3ff00000
 801e84c:	0802206e 	.word	0x0802206e

0801e850 <fabs>:
 801e850:	ec51 0b10 	vmov	r0, r1, d0
 801e854:	4602      	mov	r2, r0
 801e856:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e85a:	ec43 2b10 	vmov	d0, r2, r3
 801e85e:	4770      	bx	lr

0801e860 <__ieee754_expf>:
 801e860:	ee10 2a10 	vmov	r2, s0
 801e864:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 801e868:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801e86c:	d902      	bls.n	801e874 <__ieee754_expf+0x14>
 801e86e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e872:	4770      	bx	lr
 801e874:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801e878:	d106      	bne.n	801e888 <__ieee754_expf+0x28>
 801e87a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801e9b4 <__ieee754_expf+0x154>
 801e87e:	2900      	cmp	r1, #0
 801e880:	bf18      	it	ne
 801e882:	eeb0 0a67 	vmovne.f32	s0, s15
 801e886:	4770      	bx	lr
 801e888:	484b      	ldr	r0, [pc, #300]	@ (801e9b8 <__ieee754_expf+0x158>)
 801e88a:	4282      	cmp	r2, r0
 801e88c:	dd02      	ble.n	801e894 <__ieee754_expf+0x34>
 801e88e:	2000      	movs	r0, #0
 801e890:	f000 b8d4 	b.w	801ea3c <__math_oflowf>
 801e894:	2a00      	cmp	r2, #0
 801e896:	da05      	bge.n	801e8a4 <__ieee754_expf+0x44>
 801e898:	4a48      	ldr	r2, [pc, #288]	@ (801e9bc <__ieee754_expf+0x15c>)
 801e89a:	4293      	cmp	r3, r2
 801e89c:	d902      	bls.n	801e8a4 <__ieee754_expf+0x44>
 801e89e:	2000      	movs	r0, #0
 801e8a0:	f000 b8c6 	b.w	801ea30 <__math_uflowf>
 801e8a4:	4a46      	ldr	r2, [pc, #280]	@ (801e9c0 <__ieee754_expf+0x160>)
 801e8a6:	4293      	cmp	r3, r2
 801e8a8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801e8ac:	d952      	bls.n	801e954 <__ieee754_expf+0xf4>
 801e8ae:	4a45      	ldr	r2, [pc, #276]	@ (801e9c4 <__ieee754_expf+0x164>)
 801e8b0:	4293      	cmp	r3, r2
 801e8b2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801e8b6:	d834      	bhi.n	801e922 <__ieee754_expf+0xc2>
 801e8b8:	4b43      	ldr	r3, [pc, #268]	@ (801e9c8 <__ieee754_expf+0x168>)
 801e8ba:	4413      	add	r3, r2
 801e8bc:	ed93 7a00 	vldr	s14, [r3]
 801e8c0:	4b42      	ldr	r3, [pc, #264]	@ (801e9cc <__ieee754_expf+0x16c>)
 801e8c2:	4413      	add	r3, r2
 801e8c4:	ee30 7a47 	vsub.f32	s14, s0, s14
 801e8c8:	f1c1 0201 	rsb	r2, r1, #1
 801e8cc:	edd3 7a00 	vldr	s15, [r3]
 801e8d0:	1a52      	subs	r2, r2, r1
 801e8d2:	ee37 0a67 	vsub.f32	s0, s14, s15
 801e8d6:	ee20 6a00 	vmul.f32	s12, s0, s0
 801e8da:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 801e9d0 <__ieee754_expf+0x170>
 801e8de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801e9d4 <__ieee754_expf+0x174>
 801e8e2:	eee6 6a05 	vfma.f32	s13, s12, s10
 801e8e6:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801e9d8 <__ieee754_expf+0x178>
 801e8ea:	eea6 5a86 	vfma.f32	s10, s13, s12
 801e8ee:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801e9dc <__ieee754_expf+0x17c>
 801e8f2:	eee5 6a06 	vfma.f32	s13, s10, s12
 801e8f6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801e9e0 <__ieee754_expf+0x180>
 801e8fa:	eea6 5a86 	vfma.f32	s10, s13, s12
 801e8fe:	eef0 6a40 	vmov.f32	s13, s0
 801e902:	eee5 6a46 	vfms.f32	s13, s10, s12
 801e906:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801e90a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801e90e:	bb92      	cbnz	r2, 801e976 <__ieee754_expf+0x116>
 801e910:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801e914:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801e918:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801e91c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801e920:	4770      	bx	lr
 801e922:	4b30      	ldr	r3, [pc, #192]	@ (801e9e4 <__ieee754_expf+0x184>)
 801e924:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801e9e8 <__ieee754_expf+0x188>
 801e928:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801e9ec <__ieee754_expf+0x18c>
 801e92c:	4413      	add	r3, r2
 801e92e:	edd3 7a00 	vldr	s15, [r3]
 801e932:	eee0 7a07 	vfma.f32	s15, s0, s14
 801e936:	eeb0 7a40 	vmov.f32	s14, s0
 801e93a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e93e:	ee17 2a90 	vmov	r2, s15
 801e942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e946:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801e94a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801e9f0 <__ieee754_expf+0x190>
 801e94e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e952:	e7be      	b.n	801e8d2 <__ieee754_expf+0x72>
 801e954:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801e958:	d20b      	bcs.n	801e972 <__ieee754_expf+0x112>
 801e95a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801e9f4 <__ieee754_expf+0x194>
 801e95e:	ee70 6a26 	vadd.f32	s13, s0, s13
 801e962:	eef4 6ae5 	vcmpe.f32	s13, s11
 801e966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e96a:	dd02      	ble.n	801e972 <__ieee754_expf+0x112>
 801e96c:	ee30 0a25 	vadd.f32	s0, s0, s11
 801e970:	4770      	bx	lr
 801e972:	2200      	movs	r2, #0
 801e974:	e7af      	b.n	801e8d6 <__ieee754_expf+0x76>
 801e976:	ee36 6a66 	vsub.f32	s12, s12, s13
 801e97a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801e97e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801e982:	bfb8      	it	lt
 801e984:	3264      	addlt	r2, #100	@ 0x64
 801e986:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e98a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e98e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801e992:	ee17 3a90 	vmov	r3, s15
 801e996:	bfab      	itete	ge
 801e998:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801e99c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801e9a0:	ee00 3a10 	vmovge	s0, r3
 801e9a4:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 801e9f8 <__ieee754_expf+0x198>
 801e9a8:	bfbc      	itt	lt
 801e9aa:	ee00 3a10 	vmovlt	s0, r3
 801e9ae:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801e9b2:	4770      	bx	lr
 801e9b4:	00000000 	.word	0x00000000
 801e9b8:	42b17217 	.word	0x42b17217
 801e9bc:	42cff1b5 	.word	0x42cff1b5
 801e9c0:	3eb17218 	.word	0x3eb17218
 801e9c4:	3f851591 	.word	0x3f851591
 801e9c8:	08022444 	.word	0x08022444
 801e9cc:	0802243c 	.word	0x0802243c
 801e9d0:	3331bb4c 	.word	0x3331bb4c
 801e9d4:	b5ddea0e 	.word	0xb5ddea0e
 801e9d8:	388ab355 	.word	0x388ab355
 801e9dc:	bb360b61 	.word	0xbb360b61
 801e9e0:	3e2aaaab 	.word	0x3e2aaaab
 801e9e4:	0802244c 	.word	0x0802244c
 801e9e8:	3fb8aa3b 	.word	0x3fb8aa3b
 801e9ec:	3f317180 	.word	0x3f317180
 801e9f0:	3717f7d1 	.word	0x3717f7d1
 801e9f4:	7149f2ca 	.word	0x7149f2ca
 801e9f8:	0d800000 	.word	0x0d800000

0801e9fc <with_errnof>:
 801e9fc:	b510      	push	{r4, lr}
 801e9fe:	ed2d 8b02 	vpush	{d8}
 801ea02:	eeb0 8a40 	vmov.f32	s16, s0
 801ea06:	4604      	mov	r4, r0
 801ea08:	f7fc fd7e 	bl	801b508 <__errno>
 801ea0c:	eeb0 0a48 	vmov.f32	s0, s16
 801ea10:	ecbd 8b02 	vpop	{d8}
 801ea14:	6004      	str	r4, [r0, #0]
 801ea16:	bd10      	pop	{r4, pc}

0801ea18 <xflowf>:
 801ea18:	b130      	cbz	r0, 801ea28 <xflowf+0x10>
 801ea1a:	eef1 7a40 	vneg.f32	s15, s0
 801ea1e:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ea22:	2022      	movs	r0, #34	@ 0x22
 801ea24:	f7ff bfea 	b.w	801e9fc <with_errnof>
 801ea28:	eef0 7a40 	vmov.f32	s15, s0
 801ea2c:	e7f7      	b.n	801ea1e <xflowf+0x6>
	...

0801ea30 <__math_uflowf>:
 801ea30:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ea38 <__math_uflowf+0x8>
 801ea34:	f7ff bff0 	b.w	801ea18 <xflowf>
 801ea38:	10000000 	.word	0x10000000

0801ea3c <__math_oflowf>:
 801ea3c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ea44 <__math_oflowf+0x8>
 801ea40:	f7ff bfea 	b.w	801ea18 <xflowf>
 801ea44:	70000000 	.word	0x70000000

0801ea48 <__kernel_rem_pio2>:
 801ea48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea4c:	ed2d 8b02 	vpush	{d8}
 801ea50:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801ea54:	f112 0f14 	cmn.w	r2, #20
 801ea58:	9306      	str	r3, [sp, #24]
 801ea5a:	9104      	str	r1, [sp, #16]
 801ea5c:	4bbe      	ldr	r3, [pc, #760]	@ (801ed58 <__kernel_rem_pio2+0x310>)
 801ea5e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801ea60:	9008      	str	r0, [sp, #32]
 801ea62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ea66:	9300      	str	r3, [sp, #0]
 801ea68:	9b06      	ldr	r3, [sp, #24]
 801ea6a:	f103 33ff 	add.w	r3, r3, #4294967295
 801ea6e:	bfa8      	it	ge
 801ea70:	1ed4      	subge	r4, r2, #3
 801ea72:	9305      	str	r3, [sp, #20]
 801ea74:	bfb2      	itee	lt
 801ea76:	2400      	movlt	r4, #0
 801ea78:	2318      	movge	r3, #24
 801ea7a:	fb94 f4f3 	sdivge	r4, r4, r3
 801ea7e:	f06f 0317 	mvn.w	r3, #23
 801ea82:	fb04 3303 	mla	r3, r4, r3, r3
 801ea86:	eb03 0b02 	add.w	fp, r3, r2
 801ea8a:	9b00      	ldr	r3, [sp, #0]
 801ea8c:	9a05      	ldr	r2, [sp, #20]
 801ea8e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801ed48 <__kernel_rem_pio2+0x300>
 801ea92:	eb03 0802 	add.w	r8, r3, r2
 801ea96:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801ea98:	1aa7      	subs	r7, r4, r2
 801ea9a:	ae20      	add	r6, sp, #128	@ 0x80
 801ea9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801eaa0:	2500      	movs	r5, #0
 801eaa2:	4545      	cmp	r5, r8
 801eaa4:	dd13      	ble.n	801eace <__kernel_rem_pio2+0x86>
 801eaa6:	9b06      	ldr	r3, [sp, #24]
 801eaa8:	aa20      	add	r2, sp, #128	@ 0x80
 801eaaa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801eaae:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801eab2:	f04f 0800 	mov.w	r8, #0
 801eab6:	9b00      	ldr	r3, [sp, #0]
 801eab8:	4598      	cmp	r8, r3
 801eaba:	dc31      	bgt.n	801eb20 <__kernel_rem_pio2+0xd8>
 801eabc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801ed48 <__kernel_rem_pio2+0x300>
 801eac0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801eac4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801eac8:	462f      	mov	r7, r5
 801eaca:	2600      	movs	r6, #0
 801eacc:	e01b      	b.n	801eb06 <__kernel_rem_pio2+0xbe>
 801eace:	42ef      	cmn	r7, r5
 801ead0:	d407      	bmi.n	801eae2 <__kernel_rem_pio2+0x9a>
 801ead2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801ead6:	f7e1 fcfd 	bl	80004d4 <__aeabi_i2d>
 801eada:	e8e6 0102 	strd	r0, r1, [r6], #8
 801eade:	3501      	adds	r5, #1
 801eae0:	e7df      	b.n	801eaa2 <__kernel_rem_pio2+0x5a>
 801eae2:	ec51 0b18 	vmov	r0, r1, d8
 801eae6:	e7f8      	b.n	801eada <__kernel_rem_pio2+0x92>
 801eae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801eaec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801eaf0:	f7e1 fd5a 	bl	80005a8 <__aeabi_dmul>
 801eaf4:	4602      	mov	r2, r0
 801eaf6:	460b      	mov	r3, r1
 801eaf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eafc:	f7e1 fb9e 	bl	800023c <__adddf3>
 801eb00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eb04:	3601      	adds	r6, #1
 801eb06:	9b05      	ldr	r3, [sp, #20]
 801eb08:	429e      	cmp	r6, r3
 801eb0a:	f1a7 0708 	sub.w	r7, r7, #8
 801eb0e:	ddeb      	ble.n	801eae8 <__kernel_rem_pio2+0xa0>
 801eb10:	ed9d 7b02 	vldr	d7, [sp, #8]
 801eb14:	f108 0801 	add.w	r8, r8, #1
 801eb18:	ecaa 7b02 	vstmia	sl!, {d7}
 801eb1c:	3508      	adds	r5, #8
 801eb1e:	e7ca      	b.n	801eab6 <__kernel_rem_pio2+0x6e>
 801eb20:	9b00      	ldr	r3, [sp, #0]
 801eb22:	f8dd 8000 	ldr.w	r8, [sp]
 801eb26:	aa0c      	add	r2, sp, #48	@ 0x30
 801eb28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801eb2c:	930a      	str	r3, [sp, #40]	@ 0x28
 801eb2e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801eb30:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801eb34:	9309      	str	r3, [sp, #36]	@ 0x24
 801eb36:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801eb3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eb3c:	ab98      	add	r3, sp, #608	@ 0x260
 801eb3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801eb42:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801eb46:	ed8d 7b02 	vstr	d7, [sp, #8]
 801eb4a:	ac0c      	add	r4, sp, #48	@ 0x30
 801eb4c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801eb4e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801eb52:	46a1      	mov	r9, r4
 801eb54:	46c2      	mov	sl, r8
 801eb56:	f1ba 0f00 	cmp.w	sl, #0
 801eb5a:	f1a5 0508 	sub.w	r5, r5, #8
 801eb5e:	dc77      	bgt.n	801ec50 <__kernel_rem_pio2+0x208>
 801eb60:	4658      	mov	r0, fp
 801eb62:	ed9d 0b02 	vldr	d0, [sp, #8]
 801eb66:	f000 fd23 	bl	801f5b0 <scalbn>
 801eb6a:	ec57 6b10 	vmov	r6, r7, d0
 801eb6e:	2200      	movs	r2, #0
 801eb70:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801eb74:	4630      	mov	r0, r6
 801eb76:	4639      	mov	r1, r7
 801eb78:	f7e1 fd16 	bl	80005a8 <__aeabi_dmul>
 801eb7c:	ec41 0b10 	vmov	d0, r0, r1
 801eb80:	f7ff fa36 	bl	801dff0 <floor>
 801eb84:	4b75      	ldr	r3, [pc, #468]	@ (801ed5c <__kernel_rem_pio2+0x314>)
 801eb86:	ec51 0b10 	vmov	r0, r1, d0
 801eb8a:	2200      	movs	r2, #0
 801eb8c:	f7e1 fd0c 	bl	80005a8 <__aeabi_dmul>
 801eb90:	4602      	mov	r2, r0
 801eb92:	460b      	mov	r3, r1
 801eb94:	4630      	mov	r0, r6
 801eb96:	4639      	mov	r1, r7
 801eb98:	f7e1 fb4e 	bl	8000238 <__aeabi_dsub>
 801eb9c:	460f      	mov	r7, r1
 801eb9e:	4606      	mov	r6, r0
 801eba0:	f7e1 ffb2 	bl	8000b08 <__aeabi_d2iz>
 801eba4:	9002      	str	r0, [sp, #8]
 801eba6:	f7e1 fc95 	bl	80004d4 <__aeabi_i2d>
 801ebaa:	4602      	mov	r2, r0
 801ebac:	460b      	mov	r3, r1
 801ebae:	4630      	mov	r0, r6
 801ebb0:	4639      	mov	r1, r7
 801ebb2:	f7e1 fb41 	bl	8000238 <__aeabi_dsub>
 801ebb6:	f1bb 0f00 	cmp.w	fp, #0
 801ebba:	4606      	mov	r6, r0
 801ebbc:	460f      	mov	r7, r1
 801ebbe:	dd6c      	ble.n	801ec9a <__kernel_rem_pio2+0x252>
 801ebc0:	f108 31ff 	add.w	r1, r8, #4294967295
 801ebc4:	ab0c      	add	r3, sp, #48	@ 0x30
 801ebc6:	9d02      	ldr	r5, [sp, #8]
 801ebc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ebcc:	f1cb 0018 	rsb	r0, fp, #24
 801ebd0:	fa43 f200 	asr.w	r2, r3, r0
 801ebd4:	4415      	add	r5, r2
 801ebd6:	4082      	lsls	r2, r0
 801ebd8:	1a9b      	subs	r3, r3, r2
 801ebda:	aa0c      	add	r2, sp, #48	@ 0x30
 801ebdc:	9502      	str	r5, [sp, #8]
 801ebde:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801ebe2:	f1cb 0217 	rsb	r2, fp, #23
 801ebe6:	fa43 f902 	asr.w	r9, r3, r2
 801ebea:	f1b9 0f00 	cmp.w	r9, #0
 801ebee:	dd64      	ble.n	801ecba <__kernel_rem_pio2+0x272>
 801ebf0:	9b02      	ldr	r3, [sp, #8]
 801ebf2:	2200      	movs	r2, #0
 801ebf4:	3301      	adds	r3, #1
 801ebf6:	9302      	str	r3, [sp, #8]
 801ebf8:	4615      	mov	r5, r2
 801ebfa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801ebfe:	4590      	cmp	r8, r2
 801ec00:	f300 80b8 	bgt.w	801ed74 <__kernel_rem_pio2+0x32c>
 801ec04:	f1bb 0f00 	cmp.w	fp, #0
 801ec08:	dd07      	ble.n	801ec1a <__kernel_rem_pio2+0x1d2>
 801ec0a:	f1bb 0f01 	cmp.w	fp, #1
 801ec0e:	f000 80bf 	beq.w	801ed90 <__kernel_rem_pio2+0x348>
 801ec12:	f1bb 0f02 	cmp.w	fp, #2
 801ec16:	f000 80c6 	beq.w	801eda6 <__kernel_rem_pio2+0x35e>
 801ec1a:	f1b9 0f02 	cmp.w	r9, #2
 801ec1e:	d14c      	bne.n	801ecba <__kernel_rem_pio2+0x272>
 801ec20:	4632      	mov	r2, r6
 801ec22:	463b      	mov	r3, r7
 801ec24:	494e      	ldr	r1, [pc, #312]	@ (801ed60 <__kernel_rem_pio2+0x318>)
 801ec26:	2000      	movs	r0, #0
 801ec28:	f7e1 fb06 	bl	8000238 <__aeabi_dsub>
 801ec2c:	4606      	mov	r6, r0
 801ec2e:	460f      	mov	r7, r1
 801ec30:	2d00      	cmp	r5, #0
 801ec32:	d042      	beq.n	801ecba <__kernel_rem_pio2+0x272>
 801ec34:	4658      	mov	r0, fp
 801ec36:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801ed50 <__kernel_rem_pio2+0x308>
 801ec3a:	f000 fcb9 	bl	801f5b0 <scalbn>
 801ec3e:	4630      	mov	r0, r6
 801ec40:	4639      	mov	r1, r7
 801ec42:	ec53 2b10 	vmov	r2, r3, d0
 801ec46:	f7e1 faf7 	bl	8000238 <__aeabi_dsub>
 801ec4a:	4606      	mov	r6, r0
 801ec4c:	460f      	mov	r7, r1
 801ec4e:	e034      	b.n	801ecba <__kernel_rem_pio2+0x272>
 801ec50:	4b44      	ldr	r3, [pc, #272]	@ (801ed64 <__kernel_rem_pio2+0x31c>)
 801ec52:	2200      	movs	r2, #0
 801ec54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ec58:	f7e1 fca6 	bl	80005a8 <__aeabi_dmul>
 801ec5c:	f7e1 ff54 	bl	8000b08 <__aeabi_d2iz>
 801ec60:	f7e1 fc38 	bl	80004d4 <__aeabi_i2d>
 801ec64:	4b40      	ldr	r3, [pc, #256]	@ (801ed68 <__kernel_rem_pio2+0x320>)
 801ec66:	2200      	movs	r2, #0
 801ec68:	4606      	mov	r6, r0
 801ec6a:	460f      	mov	r7, r1
 801ec6c:	f7e1 fc9c 	bl	80005a8 <__aeabi_dmul>
 801ec70:	4602      	mov	r2, r0
 801ec72:	460b      	mov	r3, r1
 801ec74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ec78:	f7e1 fade 	bl	8000238 <__aeabi_dsub>
 801ec7c:	f7e1 ff44 	bl	8000b08 <__aeabi_d2iz>
 801ec80:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ec84:	f849 0b04 	str.w	r0, [r9], #4
 801ec88:	4639      	mov	r1, r7
 801ec8a:	4630      	mov	r0, r6
 801ec8c:	f7e1 fad6 	bl	800023c <__adddf3>
 801ec90:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ec94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec98:	e75d      	b.n	801eb56 <__kernel_rem_pio2+0x10e>
 801ec9a:	d107      	bne.n	801ecac <__kernel_rem_pio2+0x264>
 801ec9c:	f108 33ff 	add.w	r3, r8, #4294967295
 801eca0:	aa0c      	add	r2, sp, #48	@ 0x30
 801eca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801eca6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801ecaa:	e79e      	b.n	801ebea <__kernel_rem_pio2+0x1a2>
 801ecac:	4b2f      	ldr	r3, [pc, #188]	@ (801ed6c <__kernel_rem_pio2+0x324>)
 801ecae:	2200      	movs	r2, #0
 801ecb0:	f7e1 ff00 	bl	8000ab4 <__aeabi_dcmpge>
 801ecb4:	2800      	cmp	r0, #0
 801ecb6:	d143      	bne.n	801ed40 <__kernel_rem_pio2+0x2f8>
 801ecb8:	4681      	mov	r9, r0
 801ecba:	2200      	movs	r2, #0
 801ecbc:	2300      	movs	r3, #0
 801ecbe:	4630      	mov	r0, r6
 801ecc0:	4639      	mov	r1, r7
 801ecc2:	f7e1 fed9 	bl	8000a78 <__aeabi_dcmpeq>
 801ecc6:	2800      	cmp	r0, #0
 801ecc8:	f000 80bf 	beq.w	801ee4a <__kernel_rem_pio2+0x402>
 801eccc:	f108 33ff 	add.w	r3, r8, #4294967295
 801ecd0:	2200      	movs	r2, #0
 801ecd2:	9900      	ldr	r1, [sp, #0]
 801ecd4:	428b      	cmp	r3, r1
 801ecd6:	da6e      	bge.n	801edb6 <__kernel_rem_pio2+0x36e>
 801ecd8:	2a00      	cmp	r2, #0
 801ecda:	f000 8089 	beq.w	801edf0 <__kernel_rem_pio2+0x3a8>
 801ecde:	f108 38ff 	add.w	r8, r8, #4294967295
 801ece2:	ab0c      	add	r3, sp, #48	@ 0x30
 801ece4:	f1ab 0b18 	sub.w	fp, fp, #24
 801ece8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801ecec:	2b00      	cmp	r3, #0
 801ecee:	d0f6      	beq.n	801ecde <__kernel_rem_pio2+0x296>
 801ecf0:	4658      	mov	r0, fp
 801ecf2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801ed50 <__kernel_rem_pio2+0x308>
 801ecf6:	f000 fc5b 	bl	801f5b0 <scalbn>
 801ecfa:	f108 0301 	add.w	r3, r8, #1
 801ecfe:	00da      	lsls	r2, r3, #3
 801ed00:	9205      	str	r2, [sp, #20]
 801ed02:	ec55 4b10 	vmov	r4, r5, d0
 801ed06:	aa70      	add	r2, sp, #448	@ 0x1c0
 801ed08:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801ed64 <__kernel_rem_pio2+0x31c>
 801ed0c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801ed10:	4646      	mov	r6, r8
 801ed12:	f04f 0a00 	mov.w	sl, #0
 801ed16:	2e00      	cmp	r6, #0
 801ed18:	f280 80cf 	bge.w	801eeba <__kernel_rem_pio2+0x472>
 801ed1c:	4644      	mov	r4, r8
 801ed1e:	2c00      	cmp	r4, #0
 801ed20:	f2c0 80fd 	blt.w	801ef1e <__kernel_rem_pio2+0x4d6>
 801ed24:	4b12      	ldr	r3, [pc, #72]	@ (801ed70 <__kernel_rem_pio2+0x328>)
 801ed26:	461f      	mov	r7, r3
 801ed28:	ab70      	add	r3, sp, #448	@ 0x1c0
 801ed2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ed2e:	9306      	str	r3, [sp, #24]
 801ed30:	f04f 0a00 	mov.w	sl, #0
 801ed34:	f04f 0b00 	mov.w	fp, #0
 801ed38:	2600      	movs	r6, #0
 801ed3a:	eba8 0504 	sub.w	r5, r8, r4
 801ed3e:	e0e2      	b.n	801ef06 <__kernel_rem_pio2+0x4be>
 801ed40:	f04f 0902 	mov.w	r9, #2
 801ed44:	e754      	b.n	801ebf0 <__kernel_rem_pio2+0x1a8>
 801ed46:	bf00      	nop
	...
 801ed54:	3ff00000 	.word	0x3ff00000
 801ed58:	08022498 	.word	0x08022498
 801ed5c:	40200000 	.word	0x40200000
 801ed60:	3ff00000 	.word	0x3ff00000
 801ed64:	3e700000 	.word	0x3e700000
 801ed68:	41700000 	.word	0x41700000
 801ed6c:	3fe00000 	.word	0x3fe00000
 801ed70:	08022458 	.word	0x08022458
 801ed74:	f854 3b04 	ldr.w	r3, [r4], #4
 801ed78:	b945      	cbnz	r5, 801ed8c <__kernel_rem_pio2+0x344>
 801ed7a:	b123      	cbz	r3, 801ed86 <__kernel_rem_pio2+0x33e>
 801ed7c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801ed80:	f844 3c04 	str.w	r3, [r4, #-4]
 801ed84:	2301      	movs	r3, #1
 801ed86:	3201      	adds	r2, #1
 801ed88:	461d      	mov	r5, r3
 801ed8a:	e738      	b.n	801ebfe <__kernel_rem_pio2+0x1b6>
 801ed8c:	1acb      	subs	r3, r1, r3
 801ed8e:	e7f7      	b.n	801ed80 <__kernel_rem_pio2+0x338>
 801ed90:	f108 32ff 	add.w	r2, r8, #4294967295
 801ed94:	ab0c      	add	r3, sp, #48	@ 0x30
 801ed96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ed9a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801ed9e:	a90c      	add	r1, sp, #48	@ 0x30
 801eda0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801eda4:	e739      	b.n	801ec1a <__kernel_rem_pio2+0x1d2>
 801eda6:	f108 32ff 	add.w	r2, r8, #4294967295
 801edaa:	ab0c      	add	r3, sp, #48	@ 0x30
 801edac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801edb0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801edb4:	e7f3      	b.n	801ed9e <__kernel_rem_pio2+0x356>
 801edb6:	a90c      	add	r1, sp, #48	@ 0x30
 801edb8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801edbc:	3b01      	subs	r3, #1
 801edbe:	430a      	orrs	r2, r1
 801edc0:	e787      	b.n	801ecd2 <__kernel_rem_pio2+0x28a>
 801edc2:	3401      	adds	r4, #1
 801edc4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801edc8:	2a00      	cmp	r2, #0
 801edca:	d0fa      	beq.n	801edc2 <__kernel_rem_pio2+0x37a>
 801edcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801edce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801edd2:	eb0d 0503 	add.w	r5, sp, r3
 801edd6:	9b06      	ldr	r3, [sp, #24]
 801edd8:	aa20      	add	r2, sp, #128	@ 0x80
 801edda:	4443      	add	r3, r8
 801eddc:	f108 0701 	add.w	r7, r8, #1
 801ede0:	3d98      	subs	r5, #152	@ 0x98
 801ede2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801ede6:	4444      	add	r4, r8
 801ede8:	42bc      	cmp	r4, r7
 801edea:	da04      	bge.n	801edf6 <__kernel_rem_pio2+0x3ae>
 801edec:	46a0      	mov	r8, r4
 801edee:	e6a2      	b.n	801eb36 <__kernel_rem_pio2+0xee>
 801edf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801edf2:	2401      	movs	r4, #1
 801edf4:	e7e6      	b.n	801edc4 <__kernel_rem_pio2+0x37c>
 801edf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801edf8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801edfc:	f7e1 fb6a 	bl	80004d4 <__aeabi_i2d>
 801ee00:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801f0c8 <__kernel_rem_pio2+0x680>
 801ee04:	e8e6 0102 	strd	r0, r1, [r6], #8
 801ee08:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ee0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ee10:	46b2      	mov	sl, r6
 801ee12:	f04f 0800 	mov.w	r8, #0
 801ee16:	9b05      	ldr	r3, [sp, #20]
 801ee18:	4598      	cmp	r8, r3
 801ee1a:	dd05      	ble.n	801ee28 <__kernel_rem_pio2+0x3e0>
 801ee1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ee20:	3701      	adds	r7, #1
 801ee22:	eca5 7b02 	vstmia	r5!, {d7}
 801ee26:	e7df      	b.n	801ede8 <__kernel_rem_pio2+0x3a0>
 801ee28:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801ee2c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801ee30:	f7e1 fbba 	bl	80005a8 <__aeabi_dmul>
 801ee34:	4602      	mov	r2, r0
 801ee36:	460b      	mov	r3, r1
 801ee38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee3c:	f7e1 f9fe 	bl	800023c <__adddf3>
 801ee40:	f108 0801 	add.w	r8, r8, #1
 801ee44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ee48:	e7e5      	b.n	801ee16 <__kernel_rem_pio2+0x3ce>
 801ee4a:	f1cb 0000 	rsb	r0, fp, #0
 801ee4e:	ec47 6b10 	vmov	d0, r6, r7
 801ee52:	f000 fbad 	bl	801f5b0 <scalbn>
 801ee56:	ec55 4b10 	vmov	r4, r5, d0
 801ee5a:	4b9d      	ldr	r3, [pc, #628]	@ (801f0d0 <__kernel_rem_pio2+0x688>)
 801ee5c:	2200      	movs	r2, #0
 801ee5e:	4620      	mov	r0, r4
 801ee60:	4629      	mov	r1, r5
 801ee62:	f7e1 fe27 	bl	8000ab4 <__aeabi_dcmpge>
 801ee66:	b300      	cbz	r0, 801eeaa <__kernel_rem_pio2+0x462>
 801ee68:	4b9a      	ldr	r3, [pc, #616]	@ (801f0d4 <__kernel_rem_pio2+0x68c>)
 801ee6a:	2200      	movs	r2, #0
 801ee6c:	4620      	mov	r0, r4
 801ee6e:	4629      	mov	r1, r5
 801ee70:	f7e1 fb9a 	bl	80005a8 <__aeabi_dmul>
 801ee74:	f7e1 fe48 	bl	8000b08 <__aeabi_d2iz>
 801ee78:	4606      	mov	r6, r0
 801ee7a:	f7e1 fb2b 	bl	80004d4 <__aeabi_i2d>
 801ee7e:	4b94      	ldr	r3, [pc, #592]	@ (801f0d0 <__kernel_rem_pio2+0x688>)
 801ee80:	2200      	movs	r2, #0
 801ee82:	f7e1 fb91 	bl	80005a8 <__aeabi_dmul>
 801ee86:	460b      	mov	r3, r1
 801ee88:	4602      	mov	r2, r0
 801ee8a:	4629      	mov	r1, r5
 801ee8c:	4620      	mov	r0, r4
 801ee8e:	f7e1 f9d3 	bl	8000238 <__aeabi_dsub>
 801ee92:	f7e1 fe39 	bl	8000b08 <__aeabi_d2iz>
 801ee96:	ab0c      	add	r3, sp, #48	@ 0x30
 801ee98:	f10b 0b18 	add.w	fp, fp, #24
 801ee9c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801eea0:	f108 0801 	add.w	r8, r8, #1
 801eea4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801eea8:	e722      	b.n	801ecf0 <__kernel_rem_pio2+0x2a8>
 801eeaa:	4620      	mov	r0, r4
 801eeac:	4629      	mov	r1, r5
 801eeae:	f7e1 fe2b 	bl	8000b08 <__aeabi_d2iz>
 801eeb2:	ab0c      	add	r3, sp, #48	@ 0x30
 801eeb4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801eeb8:	e71a      	b.n	801ecf0 <__kernel_rem_pio2+0x2a8>
 801eeba:	ab0c      	add	r3, sp, #48	@ 0x30
 801eebc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801eec0:	f7e1 fb08 	bl	80004d4 <__aeabi_i2d>
 801eec4:	4622      	mov	r2, r4
 801eec6:	462b      	mov	r3, r5
 801eec8:	f7e1 fb6e 	bl	80005a8 <__aeabi_dmul>
 801eecc:	4652      	mov	r2, sl
 801eece:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801eed2:	465b      	mov	r3, fp
 801eed4:	4620      	mov	r0, r4
 801eed6:	4629      	mov	r1, r5
 801eed8:	f7e1 fb66 	bl	80005a8 <__aeabi_dmul>
 801eedc:	3e01      	subs	r6, #1
 801eede:	4604      	mov	r4, r0
 801eee0:	460d      	mov	r5, r1
 801eee2:	e718      	b.n	801ed16 <__kernel_rem_pio2+0x2ce>
 801eee4:	9906      	ldr	r1, [sp, #24]
 801eee6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801eeea:	9106      	str	r1, [sp, #24]
 801eeec:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801eef0:	f7e1 fb5a 	bl	80005a8 <__aeabi_dmul>
 801eef4:	4602      	mov	r2, r0
 801eef6:	460b      	mov	r3, r1
 801eef8:	4650      	mov	r0, sl
 801eefa:	4659      	mov	r1, fp
 801eefc:	f7e1 f99e 	bl	800023c <__adddf3>
 801ef00:	3601      	adds	r6, #1
 801ef02:	4682      	mov	sl, r0
 801ef04:	468b      	mov	fp, r1
 801ef06:	9b00      	ldr	r3, [sp, #0]
 801ef08:	429e      	cmp	r6, r3
 801ef0a:	dc01      	bgt.n	801ef10 <__kernel_rem_pio2+0x4c8>
 801ef0c:	42b5      	cmp	r5, r6
 801ef0e:	dae9      	bge.n	801eee4 <__kernel_rem_pio2+0x49c>
 801ef10:	ab48      	add	r3, sp, #288	@ 0x120
 801ef12:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801ef16:	e9c5 ab00 	strd	sl, fp, [r5]
 801ef1a:	3c01      	subs	r4, #1
 801ef1c:	e6ff      	b.n	801ed1e <__kernel_rem_pio2+0x2d6>
 801ef1e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801ef20:	2b02      	cmp	r3, #2
 801ef22:	dc0b      	bgt.n	801ef3c <__kernel_rem_pio2+0x4f4>
 801ef24:	2b00      	cmp	r3, #0
 801ef26:	dc39      	bgt.n	801ef9c <__kernel_rem_pio2+0x554>
 801ef28:	d05d      	beq.n	801efe6 <__kernel_rem_pio2+0x59e>
 801ef2a:	9b02      	ldr	r3, [sp, #8]
 801ef2c:	f003 0007 	and.w	r0, r3, #7
 801ef30:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801ef34:	ecbd 8b02 	vpop	{d8}
 801ef38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef3c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801ef3e:	2b03      	cmp	r3, #3
 801ef40:	d1f3      	bne.n	801ef2a <__kernel_rem_pio2+0x4e2>
 801ef42:	9b05      	ldr	r3, [sp, #20]
 801ef44:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801ef48:	eb0d 0403 	add.w	r4, sp, r3
 801ef4c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801ef50:	4625      	mov	r5, r4
 801ef52:	46c2      	mov	sl, r8
 801ef54:	f1ba 0f00 	cmp.w	sl, #0
 801ef58:	f1a5 0508 	sub.w	r5, r5, #8
 801ef5c:	dc6b      	bgt.n	801f036 <__kernel_rem_pio2+0x5ee>
 801ef5e:	4645      	mov	r5, r8
 801ef60:	2d01      	cmp	r5, #1
 801ef62:	f1a4 0408 	sub.w	r4, r4, #8
 801ef66:	f300 8087 	bgt.w	801f078 <__kernel_rem_pio2+0x630>
 801ef6a:	9c05      	ldr	r4, [sp, #20]
 801ef6c:	ab48      	add	r3, sp, #288	@ 0x120
 801ef6e:	441c      	add	r4, r3
 801ef70:	2000      	movs	r0, #0
 801ef72:	2100      	movs	r1, #0
 801ef74:	f1b8 0f01 	cmp.w	r8, #1
 801ef78:	f300 809c 	bgt.w	801f0b4 <__kernel_rem_pio2+0x66c>
 801ef7c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801ef80:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801ef84:	f1b9 0f00 	cmp.w	r9, #0
 801ef88:	f040 80a6 	bne.w	801f0d8 <__kernel_rem_pio2+0x690>
 801ef8c:	9b04      	ldr	r3, [sp, #16]
 801ef8e:	e9c3 7800 	strd	r7, r8, [r3]
 801ef92:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801ef96:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801ef9a:	e7c6      	b.n	801ef2a <__kernel_rem_pio2+0x4e2>
 801ef9c:	9d05      	ldr	r5, [sp, #20]
 801ef9e:	ab48      	add	r3, sp, #288	@ 0x120
 801efa0:	441d      	add	r5, r3
 801efa2:	4644      	mov	r4, r8
 801efa4:	2000      	movs	r0, #0
 801efa6:	2100      	movs	r1, #0
 801efa8:	2c00      	cmp	r4, #0
 801efaa:	da35      	bge.n	801f018 <__kernel_rem_pio2+0x5d0>
 801efac:	f1b9 0f00 	cmp.w	r9, #0
 801efb0:	d038      	beq.n	801f024 <__kernel_rem_pio2+0x5dc>
 801efb2:	4602      	mov	r2, r0
 801efb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801efb8:	9c04      	ldr	r4, [sp, #16]
 801efba:	e9c4 2300 	strd	r2, r3, [r4]
 801efbe:	4602      	mov	r2, r0
 801efc0:	460b      	mov	r3, r1
 801efc2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801efc6:	f7e1 f937 	bl	8000238 <__aeabi_dsub>
 801efca:	ad4a      	add	r5, sp, #296	@ 0x128
 801efcc:	2401      	movs	r4, #1
 801efce:	45a0      	cmp	r8, r4
 801efd0:	da2b      	bge.n	801f02a <__kernel_rem_pio2+0x5e2>
 801efd2:	f1b9 0f00 	cmp.w	r9, #0
 801efd6:	d002      	beq.n	801efde <__kernel_rem_pio2+0x596>
 801efd8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801efdc:	4619      	mov	r1, r3
 801efde:	9b04      	ldr	r3, [sp, #16]
 801efe0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801efe4:	e7a1      	b.n	801ef2a <__kernel_rem_pio2+0x4e2>
 801efe6:	9c05      	ldr	r4, [sp, #20]
 801efe8:	ab48      	add	r3, sp, #288	@ 0x120
 801efea:	441c      	add	r4, r3
 801efec:	2000      	movs	r0, #0
 801efee:	2100      	movs	r1, #0
 801eff0:	f1b8 0f00 	cmp.w	r8, #0
 801eff4:	da09      	bge.n	801f00a <__kernel_rem_pio2+0x5c2>
 801eff6:	f1b9 0f00 	cmp.w	r9, #0
 801effa:	d002      	beq.n	801f002 <__kernel_rem_pio2+0x5ba>
 801effc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f000:	4619      	mov	r1, r3
 801f002:	9b04      	ldr	r3, [sp, #16]
 801f004:	e9c3 0100 	strd	r0, r1, [r3]
 801f008:	e78f      	b.n	801ef2a <__kernel_rem_pio2+0x4e2>
 801f00a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f00e:	f7e1 f915 	bl	800023c <__adddf3>
 801f012:	f108 38ff 	add.w	r8, r8, #4294967295
 801f016:	e7eb      	b.n	801eff0 <__kernel_rem_pio2+0x5a8>
 801f018:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801f01c:	f7e1 f90e 	bl	800023c <__adddf3>
 801f020:	3c01      	subs	r4, #1
 801f022:	e7c1      	b.n	801efa8 <__kernel_rem_pio2+0x560>
 801f024:	4602      	mov	r2, r0
 801f026:	460b      	mov	r3, r1
 801f028:	e7c6      	b.n	801efb8 <__kernel_rem_pio2+0x570>
 801f02a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801f02e:	f7e1 f905 	bl	800023c <__adddf3>
 801f032:	3401      	adds	r4, #1
 801f034:	e7cb      	b.n	801efce <__kernel_rem_pio2+0x586>
 801f036:	ed95 7b00 	vldr	d7, [r5]
 801f03a:	ed8d 7b00 	vstr	d7, [sp]
 801f03e:	ed95 7b02 	vldr	d7, [r5, #8]
 801f042:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f046:	ec53 2b17 	vmov	r2, r3, d7
 801f04a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f04e:	f7e1 f8f5 	bl	800023c <__adddf3>
 801f052:	4602      	mov	r2, r0
 801f054:	460b      	mov	r3, r1
 801f056:	4606      	mov	r6, r0
 801f058:	460f      	mov	r7, r1
 801f05a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f05e:	f7e1 f8eb 	bl	8000238 <__aeabi_dsub>
 801f062:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f066:	f7e1 f8e9 	bl	800023c <__adddf3>
 801f06a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f06e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801f072:	e9c5 6700 	strd	r6, r7, [r5]
 801f076:	e76d      	b.n	801ef54 <__kernel_rem_pio2+0x50c>
 801f078:	ed94 7b00 	vldr	d7, [r4]
 801f07c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801f080:	ec51 0b17 	vmov	r0, r1, d7
 801f084:	4652      	mov	r2, sl
 801f086:	465b      	mov	r3, fp
 801f088:	ed8d 7b00 	vstr	d7, [sp]
 801f08c:	f7e1 f8d6 	bl	800023c <__adddf3>
 801f090:	4602      	mov	r2, r0
 801f092:	460b      	mov	r3, r1
 801f094:	4606      	mov	r6, r0
 801f096:	460f      	mov	r7, r1
 801f098:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f09c:	f7e1 f8cc 	bl	8000238 <__aeabi_dsub>
 801f0a0:	4652      	mov	r2, sl
 801f0a2:	465b      	mov	r3, fp
 801f0a4:	f7e1 f8ca 	bl	800023c <__adddf3>
 801f0a8:	3d01      	subs	r5, #1
 801f0aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801f0ae:	e9c4 6700 	strd	r6, r7, [r4]
 801f0b2:	e755      	b.n	801ef60 <__kernel_rem_pio2+0x518>
 801f0b4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f0b8:	f7e1 f8c0 	bl	800023c <__adddf3>
 801f0bc:	f108 38ff 	add.w	r8, r8, #4294967295
 801f0c0:	e758      	b.n	801ef74 <__kernel_rem_pio2+0x52c>
 801f0c2:	bf00      	nop
 801f0c4:	f3af 8000 	nop.w
	...
 801f0d0:	41700000 	.word	0x41700000
 801f0d4:	3e700000 	.word	0x3e700000
 801f0d8:	9b04      	ldr	r3, [sp, #16]
 801f0da:	9a04      	ldr	r2, [sp, #16]
 801f0dc:	601f      	str	r7, [r3, #0]
 801f0de:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801f0e2:	605c      	str	r4, [r3, #4]
 801f0e4:	609d      	str	r5, [r3, #8]
 801f0e6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f0ea:	60d3      	str	r3, [r2, #12]
 801f0ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f0f0:	6110      	str	r0, [r2, #16]
 801f0f2:	6153      	str	r3, [r2, #20]
 801f0f4:	e719      	b.n	801ef2a <__kernel_rem_pio2+0x4e2>
 801f0f6:	bf00      	nop

0801f0f8 <__ieee754_acos>:
 801f0f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0fc:	ec55 4b10 	vmov	r4, r5, d0
 801f100:	49b7      	ldr	r1, [pc, #732]	@ (801f3e0 <__ieee754_acos+0x2e8>)
 801f102:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801f106:	428b      	cmp	r3, r1
 801f108:	d919      	bls.n	801f13e <__ieee754_acos+0x46>
 801f10a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 801f10e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 801f112:	4323      	orrs	r3, r4
 801f114:	d106      	bne.n	801f124 <__ieee754_acos+0x2c>
 801f116:	2d00      	cmp	r5, #0
 801f118:	f340 8210 	ble.w	801f53c <__ieee754_acos+0x444>
 801f11c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 801f370 <__ieee754_acos+0x278>
 801f120:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f124:	4622      	mov	r2, r4
 801f126:	462b      	mov	r3, r5
 801f128:	4620      	mov	r0, r4
 801f12a:	4629      	mov	r1, r5
 801f12c:	f7e1 f884 	bl	8000238 <__aeabi_dsub>
 801f130:	4602      	mov	r2, r0
 801f132:	460b      	mov	r3, r1
 801f134:	f7e1 fb62 	bl	80007fc <__aeabi_ddiv>
 801f138:	ec41 0b10 	vmov	d0, r0, r1
 801f13c:	e7f0      	b.n	801f120 <__ieee754_acos+0x28>
 801f13e:	49a9      	ldr	r1, [pc, #676]	@ (801f3e4 <__ieee754_acos+0x2ec>)
 801f140:	428b      	cmp	r3, r1
 801f142:	f200 8085 	bhi.w	801f250 <__ieee754_acos+0x158>
 801f146:	4aa8      	ldr	r2, [pc, #672]	@ (801f3e8 <__ieee754_acos+0x2f0>)
 801f148:	4293      	cmp	r3, r2
 801f14a:	f240 81fa 	bls.w	801f542 <__ieee754_acos+0x44a>
 801f14e:	4622      	mov	r2, r4
 801f150:	462b      	mov	r3, r5
 801f152:	4620      	mov	r0, r4
 801f154:	4629      	mov	r1, r5
 801f156:	f7e1 fa27 	bl	80005a8 <__aeabi_dmul>
 801f15a:	a387      	add	r3, pc, #540	@ (adr r3, 801f378 <__ieee754_acos+0x280>)
 801f15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f160:	4606      	mov	r6, r0
 801f162:	460f      	mov	r7, r1
 801f164:	f7e1 fa20 	bl	80005a8 <__aeabi_dmul>
 801f168:	a385      	add	r3, pc, #532	@ (adr r3, 801f380 <__ieee754_acos+0x288>)
 801f16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f16e:	f7e1 f865 	bl	800023c <__adddf3>
 801f172:	4632      	mov	r2, r6
 801f174:	463b      	mov	r3, r7
 801f176:	f7e1 fa17 	bl	80005a8 <__aeabi_dmul>
 801f17a:	a383      	add	r3, pc, #524	@ (adr r3, 801f388 <__ieee754_acos+0x290>)
 801f17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f180:	f7e1 f85a 	bl	8000238 <__aeabi_dsub>
 801f184:	4632      	mov	r2, r6
 801f186:	463b      	mov	r3, r7
 801f188:	f7e1 fa0e 	bl	80005a8 <__aeabi_dmul>
 801f18c:	a380      	add	r3, pc, #512	@ (adr r3, 801f390 <__ieee754_acos+0x298>)
 801f18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f192:	f7e1 f853 	bl	800023c <__adddf3>
 801f196:	4632      	mov	r2, r6
 801f198:	463b      	mov	r3, r7
 801f19a:	f7e1 fa05 	bl	80005a8 <__aeabi_dmul>
 801f19e:	a37e      	add	r3, pc, #504	@ (adr r3, 801f398 <__ieee754_acos+0x2a0>)
 801f1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1a4:	f7e1 f848 	bl	8000238 <__aeabi_dsub>
 801f1a8:	4632      	mov	r2, r6
 801f1aa:	463b      	mov	r3, r7
 801f1ac:	f7e1 f9fc 	bl	80005a8 <__aeabi_dmul>
 801f1b0:	a37b      	add	r3, pc, #492	@ (adr r3, 801f3a0 <__ieee754_acos+0x2a8>)
 801f1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1b6:	f7e1 f841 	bl	800023c <__adddf3>
 801f1ba:	4632      	mov	r2, r6
 801f1bc:	463b      	mov	r3, r7
 801f1be:	f7e1 f9f3 	bl	80005a8 <__aeabi_dmul>
 801f1c2:	a379      	add	r3, pc, #484	@ (adr r3, 801f3a8 <__ieee754_acos+0x2b0>)
 801f1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1c8:	4680      	mov	r8, r0
 801f1ca:	4689      	mov	r9, r1
 801f1cc:	4630      	mov	r0, r6
 801f1ce:	4639      	mov	r1, r7
 801f1d0:	f7e1 f9ea 	bl	80005a8 <__aeabi_dmul>
 801f1d4:	a376      	add	r3, pc, #472	@ (adr r3, 801f3b0 <__ieee754_acos+0x2b8>)
 801f1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1da:	f7e1 f82d 	bl	8000238 <__aeabi_dsub>
 801f1de:	4632      	mov	r2, r6
 801f1e0:	463b      	mov	r3, r7
 801f1e2:	f7e1 f9e1 	bl	80005a8 <__aeabi_dmul>
 801f1e6:	a374      	add	r3, pc, #464	@ (adr r3, 801f3b8 <__ieee754_acos+0x2c0>)
 801f1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1ec:	f7e1 f826 	bl	800023c <__adddf3>
 801f1f0:	4632      	mov	r2, r6
 801f1f2:	463b      	mov	r3, r7
 801f1f4:	f7e1 f9d8 	bl	80005a8 <__aeabi_dmul>
 801f1f8:	a371      	add	r3, pc, #452	@ (adr r3, 801f3c0 <__ieee754_acos+0x2c8>)
 801f1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1fe:	f7e1 f81b 	bl	8000238 <__aeabi_dsub>
 801f202:	4632      	mov	r2, r6
 801f204:	463b      	mov	r3, r7
 801f206:	f7e1 f9cf 	bl	80005a8 <__aeabi_dmul>
 801f20a:	4b78      	ldr	r3, [pc, #480]	@ (801f3ec <__ieee754_acos+0x2f4>)
 801f20c:	2200      	movs	r2, #0
 801f20e:	f7e1 f815 	bl	800023c <__adddf3>
 801f212:	4602      	mov	r2, r0
 801f214:	460b      	mov	r3, r1
 801f216:	4640      	mov	r0, r8
 801f218:	4649      	mov	r1, r9
 801f21a:	f7e1 faef 	bl	80007fc <__aeabi_ddiv>
 801f21e:	4622      	mov	r2, r4
 801f220:	462b      	mov	r3, r5
 801f222:	f7e1 f9c1 	bl	80005a8 <__aeabi_dmul>
 801f226:	4602      	mov	r2, r0
 801f228:	460b      	mov	r3, r1
 801f22a:	a167      	add	r1, pc, #412	@ (adr r1, 801f3c8 <__ieee754_acos+0x2d0>)
 801f22c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f230:	f7e1 f802 	bl	8000238 <__aeabi_dsub>
 801f234:	4602      	mov	r2, r0
 801f236:	460b      	mov	r3, r1
 801f238:	4620      	mov	r0, r4
 801f23a:	4629      	mov	r1, r5
 801f23c:	f7e0 fffc 	bl	8000238 <__aeabi_dsub>
 801f240:	4602      	mov	r2, r0
 801f242:	460b      	mov	r3, r1
 801f244:	a162      	add	r1, pc, #392	@ (adr r1, 801f3d0 <__ieee754_acos+0x2d8>)
 801f246:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f24a:	f7e0 fff5 	bl	8000238 <__aeabi_dsub>
 801f24e:	e773      	b.n	801f138 <__ieee754_acos+0x40>
 801f250:	2d00      	cmp	r5, #0
 801f252:	f280 80cf 	bge.w	801f3f4 <__ieee754_acos+0x2fc>
 801f256:	4b65      	ldr	r3, [pc, #404]	@ (801f3ec <__ieee754_acos+0x2f4>)
 801f258:	2200      	movs	r2, #0
 801f25a:	4620      	mov	r0, r4
 801f25c:	4629      	mov	r1, r5
 801f25e:	f7e0 ffed 	bl	800023c <__adddf3>
 801f262:	4b63      	ldr	r3, [pc, #396]	@ (801f3f0 <__ieee754_acos+0x2f8>)
 801f264:	2200      	movs	r2, #0
 801f266:	f7e1 f99f 	bl	80005a8 <__aeabi_dmul>
 801f26a:	a343      	add	r3, pc, #268	@ (adr r3, 801f378 <__ieee754_acos+0x280>)
 801f26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f270:	4604      	mov	r4, r0
 801f272:	460d      	mov	r5, r1
 801f274:	f7e1 f998 	bl	80005a8 <__aeabi_dmul>
 801f278:	a341      	add	r3, pc, #260	@ (adr r3, 801f380 <__ieee754_acos+0x288>)
 801f27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f27e:	f7e0 ffdd 	bl	800023c <__adddf3>
 801f282:	4622      	mov	r2, r4
 801f284:	462b      	mov	r3, r5
 801f286:	f7e1 f98f 	bl	80005a8 <__aeabi_dmul>
 801f28a:	a33f      	add	r3, pc, #252	@ (adr r3, 801f388 <__ieee754_acos+0x290>)
 801f28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f290:	f7e0 ffd2 	bl	8000238 <__aeabi_dsub>
 801f294:	4622      	mov	r2, r4
 801f296:	462b      	mov	r3, r5
 801f298:	f7e1 f986 	bl	80005a8 <__aeabi_dmul>
 801f29c:	a33c      	add	r3, pc, #240	@ (adr r3, 801f390 <__ieee754_acos+0x298>)
 801f29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2a2:	f7e0 ffcb 	bl	800023c <__adddf3>
 801f2a6:	4622      	mov	r2, r4
 801f2a8:	462b      	mov	r3, r5
 801f2aa:	f7e1 f97d 	bl	80005a8 <__aeabi_dmul>
 801f2ae:	a33a      	add	r3, pc, #232	@ (adr r3, 801f398 <__ieee754_acos+0x2a0>)
 801f2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2b4:	f7e0 ffc0 	bl	8000238 <__aeabi_dsub>
 801f2b8:	4622      	mov	r2, r4
 801f2ba:	462b      	mov	r3, r5
 801f2bc:	f7e1 f974 	bl	80005a8 <__aeabi_dmul>
 801f2c0:	a337      	add	r3, pc, #220	@ (adr r3, 801f3a0 <__ieee754_acos+0x2a8>)
 801f2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2c6:	f7e0 ffb9 	bl	800023c <__adddf3>
 801f2ca:	4622      	mov	r2, r4
 801f2cc:	462b      	mov	r3, r5
 801f2ce:	f7e1 f96b 	bl	80005a8 <__aeabi_dmul>
 801f2d2:	a335      	add	r3, pc, #212	@ (adr r3, 801f3a8 <__ieee754_acos+0x2b0>)
 801f2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2d8:	4606      	mov	r6, r0
 801f2da:	460f      	mov	r7, r1
 801f2dc:	4620      	mov	r0, r4
 801f2de:	4629      	mov	r1, r5
 801f2e0:	f7e1 f962 	bl	80005a8 <__aeabi_dmul>
 801f2e4:	a332      	add	r3, pc, #200	@ (adr r3, 801f3b0 <__ieee754_acos+0x2b8>)
 801f2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2ea:	f7e0 ffa5 	bl	8000238 <__aeabi_dsub>
 801f2ee:	4622      	mov	r2, r4
 801f2f0:	462b      	mov	r3, r5
 801f2f2:	f7e1 f959 	bl	80005a8 <__aeabi_dmul>
 801f2f6:	a330      	add	r3, pc, #192	@ (adr r3, 801f3b8 <__ieee754_acos+0x2c0>)
 801f2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2fc:	f7e0 ff9e 	bl	800023c <__adddf3>
 801f300:	4622      	mov	r2, r4
 801f302:	462b      	mov	r3, r5
 801f304:	f7e1 f950 	bl	80005a8 <__aeabi_dmul>
 801f308:	a32d      	add	r3, pc, #180	@ (adr r3, 801f3c0 <__ieee754_acos+0x2c8>)
 801f30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f30e:	f7e0 ff93 	bl	8000238 <__aeabi_dsub>
 801f312:	4622      	mov	r2, r4
 801f314:	462b      	mov	r3, r5
 801f316:	f7e1 f947 	bl	80005a8 <__aeabi_dmul>
 801f31a:	4b34      	ldr	r3, [pc, #208]	@ (801f3ec <__ieee754_acos+0x2f4>)
 801f31c:	2200      	movs	r2, #0
 801f31e:	f7e0 ff8d 	bl	800023c <__adddf3>
 801f322:	ec45 4b10 	vmov	d0, r4, r5
 801f326:	4680      	mov	r8, r0
 801f328:	4689      	mov	r9, r1
 801f32a:	f000 f9bf 	bl	801f6ac <__ieee754_sqrt>
 801f32e:	ec55 4b10 	vmov	r4, r5, d0
 801f332:	4642      	mov	r2, r8
 801f334:	464b      	mov	r3, r9
 801f336:	4630      	mov	r0, r6
 801f338:	4639      	mov	r1, r7
 801f33a:	f7e1 fa5f 	bl	80007fc <__aeabi_ddiv>
 801f33e:	4622      	mov	r2, r4
 801f340:	462b      	mov	r3, r5
 801f342:	f7e1 f931 	bl	80005a8 <__aeabi_dmul>
 801f346:	a320      	add	r3, pc, #128	@ (adr r3, 801f3c8 <__ieee754_acos+0x2d0>)
 801f348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f34c:	f7e0 ff74 	bl	8000238 <__aeabi_dsub>
 801f350:	4622      	mov	r2, r4
 801f352:	462b      	mov	r3, r5
 801f354:	f7e0 ff72 	bl	800023c <__adddf3>
 801f358:	4602      	mov	r2, r0
 801f35a:	460b      	mov	r3, r1
 801f35c:	f7e0 ff6e 	bl	800023c <__adddf3>
 801f360:	4602      	mov	r2, r0
 801f362:	460b      	mov	r3, r1
 801f364:	a11c      	add	r1, pc, #112	@ (adr r1, 801f3d8 <__ieee754_acos+0x2e0>)
 801f366:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f36a:	e76e      	b.n	801f24a <__ieee754_acos+0x152>
 801f36c:	f3af 8000 	nop.w
	...
 801f378:	0dfdf709 	.word	0x0dfdf709
 801f37c:	3f023de1 	.word	0x3f023de1
 801f380:	7501b288 	.word	0x7501b288
 801f384:	3f49efe0 	.word	0x3f49efe0
 801f388:	b5688f3b 	.word	0xb5688f3b
 801f38c:	3fa48228 	.word	0x3fa48228
 801f390:	0e884455 	.word	0x0e884455
 801f394:	3fc9c155 	.word	0x3fc9c155
 801f398:	03eb6f7d 	.word	0x03eb6f7d
 801f39c:	3fd4d612 	.word	0x3fd4d612
 801f3a0:	55555555 	.word	0x55555555
 801f3a4:	3fc55555 	.word	0x3fc55555
 801f3a8:	b12e9282 	.word	0xb12e9282
 801f3ac:	3fb3b8c5 	.word	0x3fb3b8c5
 801f3b0:	1b8d0159 	.word	0x1b8d0159
 801f3b4:	3fe6066c 	.word	0x3fe6066c
 801f3b8:	9c598ac8 	.word	0x9c598ac8
 801f3bc:	40002ae5 	.word	0x40002ae5
 801f3c0:	1c8a2d4b 	.word	0x1c8a2d4b
 801f3c4:	40033a27 	.word	0x40033a27
 801f3c8:	33145c07 	.word	0x33145c07
 801f3cc:	3c91a626 	.word	0x3c91a626
 801f3d0:	54442d18 	.word	0x54442d18
 801f3d4:	3ff921fb 	.word	0x3ff921fb
 801f3d8:	54442d18 	.word	0x54442d18
 801f3dc:	400921fb 	.word	0x400921fb
 801f3e0:	3fefffff 	.word	0x3fefffff
 801f3e4:	3fdfffff 	.word	0x3fdfffff
 801f3e8:	3c600000 	.word	0x3c600000
 801f3ec:	3ff00000 	.word	0x3ff00000
 801f3f0:	3fe00000 	.word	0x3fe00000
 801f3f4:	4622      	mov	r2, r4
 801f3f6:	462b      	mov	r3, r5
 801f3f8:	496b      	ldr	r1, [pc, #428]	@ (801f5a8 <__ieee754_acos+0x4b0>)
 801f3fa:	2000      	movs	r0, #0
 801f3fc:	f7e0 ff1c 	bl	8000238 <__aeabi_dsub>
 801f400:	4b6a      	ldr	r3, [pc, #424]	@ (801f5ac <__ieee754_acos+0x4b4>)
 801f402:	2200      	movs	r2, #0
 801f404:	f7e1 f8d0 	bl	80005a8 <__aeabi_dmul>
 801f408:	4604      	mov	r4, r0
 801f40a:	460d      	mov	r5, r1
 801f40c:	ec45 4b10 	vmov	d0, r4, r5
 801f410:	f000 f94c 	bl	801f6ac <__ieee754_sqrt>
 801f414:	a34c      	add	r3, pc, #304	@ (adr r3, 801f548 <__ieee754_acos+0x450>)
 801f416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f41a:	4620      	mov	r0, r4
 801f41c:	4629      	mov	r1, r5
 801f41e:	ec59 8b10 	vmov	r8, r9, d0
 801f422:	f7e1 f8c1 	bl	80005a8 <__aeabi_dmul>
 801f426:	a34a      	add	r3, pc, #296	@ (adr r3, 801f550 <__ieee754_acos+0x458>)
 801f428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f42c:	f7e0 ff06 	bl	800023c <__adddf3>
 801f430:	4622      	mov	r2, r4
 801f432:	462b      	mov	r3, r5
 801f434:	f7e1 f8b8 	bl	80005a8 <__aeabi_dmul>
 801f438:	a347      	add	r3, pc, #284	@ (adr r3, 801f558 <__ieee754_acos+0x460>)
 801f43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f43e:	f7e0 fefb 	bl	8000238 <__aeabi_dsub>
 801f442:	4622      	mov	r2, r4
 801f444:	462b      	mov	r3, r5
 801f446:	f7e1 f8af 	bl	80005a8 <__aeabi_dmul>
 801f44a:	a345      	add	r3, pc, #276	@ (adr r3, 801f560 <__ieee754_acos+0x468>)
 801f44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f450:	f7e0 fef4 	bl	800023c <__adddf3>
 801f454:	4622      	mov	r2, r4
 801f456:	462b      	mov	r3, r5
 801f458:	f7e1 f8a6 	bl	80005a8 <__aeabi_dmul>
 801f45c:	a342      	add	r3, pc, #264	@ (adr r3, 801f568 <__ieee754_acos+0x470>)
 801f45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f462:	f7e0 fee9 	bl	8000238 <__aeabi_dsub>
 801f466:	4622      	mov	r2, r4
 801f468:	462b      	mov	r3, r5
 801f46a:	f7e1 f89d 	bl	80005a8 <__aeabi_dmul>
 801f46e:	a340      	add	r3, pc, #256	@ (adr r3, 801f570 <__ieee754_acos+0x478>)
 801f470:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f474:	f7e0 fee2 	bl	800023c <__adddf3>
 801f478:	4622      	mov	r2, r4
 801f47a:	462b      	mov	r3, r5
 801f47c:	f7e1 f894 	bl	80005a8 <__aeabi_dmul>
 801f480:	a33d      	add	r3, pc, #244	@ (adr r3, 801f578 <__ieee754_acos+0x480>)
 801f482:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f486:	4682      	mov	sl, r0
 801f488:	468b      	mov	fp, r1
 801f48a:	4620      	mov	r0, r4
 801f48c:	4629      	mov	r1, r5
 801f48e:	f7e1 f88b 	bl	80005a8 <__aeabi_dmul>
 801f492:	a33b      	add	r3, pc, #236	@ (adr r3, 801f580 <__ieee754_acos+0x488>)
 801f494:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f498:	f7e0 fece 	bl	8000238 <__aeabi_dsub>
 801f49c:	4622      	mov	r2, r4
 801f49e:	462b      	mov	r3, r5
 801f4a0:	f7e1 f882 	bl	80005a8 <__aeabi_dmul>
 801f4a4:	a338      	add	r3, pc, #224	@ (adr r3, 801f588 <__ieee754_acos+0x490>)
 801f4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4aa:	f7e0 fec7 	bl	800023c <__adddf3>
 801f4ae:	4622      	mov	r2, r4
 801f4b0:	462b      	mov	r3, r5
 801f4b2:	f7e1 f879 	bl	80005a8 <__aeabi_dmul>
 801f4b6:	a336      	add	r3, pc, #216	@ (adr r3, 801f590 <__ieee754_acos+0x498>)
 801f4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4bc:	f7e0 febc 	bl	8000238 <__aeabi_dsub>
 801f4c0:	4622      	mov	r2, r4
 801f4c2:	462b      	mov	r3, r5
 801f4c4:	f7e1 f870 	bl	80005a8 <__aeabi_dmul>
 801f4c8:	4b37      	ldr	r3, [pc, #220]	@ (801f5a8 <__ieee754_acos+0x4b0>)
 801f4ca:	2200      	movs	r2, #0
 801f4cc:	f7e0 feb6 	bl	800023c <__adddf3>
 801f4d0:	4602      	mov	r2, r0
 801f4d2:	460b      	mov	r3, r1
 801f4d4:	4650      	mov	r0, sl
 801f4d6:	4659      	mov	r1, fp
 801f4d8:	f7e1 f990 	bl	80007fc <__aeabi_ddiv>
 801f4dc:	4642      	mov	r2, r8
 801f4de:	464b      	mov	r3, r9
 801f4e0:	f7e1 f862 	bl	80005a8 <__aeabi_dmul>
 801f4e4:	2600      	movs	r6, #0
 801f4e6:	4682      	mov	sl, r0
 801f4e8:	468b      	mov	fp, r1
 801f4ea:	4632      	mov	r2, r6
 801f4ec:	464b      	mov	r3, r9
 801f4ee:	4630      	mov	r0, r6
 801f4f0:	4649      	mov	r1, r9
 801f4f2:	f7e1 f859 	bl	80005a8 <__aeabi_dmul>
 801f4f6:	4602      	mov	r2, r0
 801f4f8:	460b      	mov	r3, r1
 801f4fa:	4620      	mov	r0, r4
 801f4fc:	4629      	mov	r1, r5
 801f4fe:	f7e0 fe9b 	bl	8000238 <__aeabi_dsub>
 801f502:	4632      	mov	r2, r6
 801f504:	4604      	mov	r4, r0
 801f506:	460d      	mov	r5, r1
 801f508:	464b      	mov	r3, r9
 801f50a:	4640      	mov	r0, r8
 801f50c:	4649      	mov	r1, r9
 801f50e:	f7e0 fe95 	bl	800023c <__adddf3>
 801f512:	4602      	mov	r2, r0
 801f514:	460b      	mov	r3, r1
 801f516:	4620      	mov	r0, r4
 801f518:	4629      	mov	r1, r5
 801f51a:	f7e1 f96f 	bl	80007fc <__aeabi_ddiv>
 801f51e:	4602      	mov	r2, r0
 801f520:	460b      	mov	r3, r1
 801f522:	4650      	mov	r0, sl
 801f524:	4659      	mov	r1, fp
 801f526:	f7e0 fe89 	bl	800023c <__adddf3>
 801f52a:	4632      	mov	r2, r6
 801f52c:	464b      	mov	r3, r9
 801f52e:	f7e0 fe85 	bl	800023c <__adddf3>
 801f532:	4602      	mov	r2, r0
 801f534:	460b      	mov	r3, r1
 801f536:	f7e0 fe81 	bl	800023c <__adddf3>
 801f53a:	e5fd      	b.n	801f138 <__ieee754_acos+0x40>
 801f53c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 801f598 <__ieee754_acos+0x4a0>
 801f540:	e5ee      	b.n	801f120 <__ieee754_acos+0x28>
 801f542:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801f5a0 <__ieee754_acos+0x4a8>
 801f546:	e5eb      	b.n	801f120 <__ieee754_acos+0x28>
 801f548:	0dfdf709 	.word	0x0dfdf709
 801f54c:	3f023de1 	.word	0x3f023de1
 801f550:	7501b288 	.word	0x7501b288
 801f554:	3f49efe0 	.word	0x3f49efe0
 801f558:	b5688f3b 	.word	0xb5688f3b
 801f55c:	3fa48228 	.word	0x3fa48228
 801f560:	0e884455 	.word	0x0e884455
 801f564:	3fc9c155 	.word	0x3fc9c155
 801f568:	03eb6f7d 	.word	0x03eb6f7d
 801f56c:	3fd4d612 	.word	0x3fd4d612
 801f570:	55555555 	.word	0x55555555
 801f574:	3fc55555 	.word	0x3fc55555
 801f578:	b12e9282 	.word	0xb12e9282
 801f57c:	3fb3b8c5 	.word	0x3fb3b8c5
 801f580:	1b8d0159 	.word	0x1b8d0159
 801f584:	3fe6066c 	.word	0x3fe6066c
 801f588:	9c598ac8 	.word	0x9c598ac8
 801f58c:	40002ae5 	.word	0x40002ae5
 801f590:	1c8a2d4b 	.word	0x1c8a2d4b
 801f594:	40033a27 	.word	0x40033a27
 801f598:	54442d18 	.word	0x54442d18
 801f59c:	400921fb 	.word	0x400921fb
 801f5a0:	54442d18 	.word	0x54442d18
 801f5a4:	3ff921fb 	.word	0x3ff921fb
 801f5a8:	3ff00000 	.word	0x3ff00000
 801f5ac:	3fe00000 	.word	0x3fe00000

0801f5b0 <scalbn>:
 801f5b0:	b570      	push	{r4, r5, r6, lr}
 801f5b2:	ec55 4b10 	vmov	r4, r5, d0
 801f5b6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801f5ba:	4606      	mov	r6, r0
 801f5bc:	462b      	mov	r3, r5
 801f5be:	b991      	cbnz	r1, 801f5e6 <scalbn+0x36>
 801f5c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801f5c4:	4323      	orrs	r3, r4
 801f5c6:	d03d      	beq.n	801f644 <scalbn+0x94>
 801f5c8:	4b35      	ldr	r3, [pc, #212]	@ (801f6a0 <scalbn+0xf0>)
 801f5ca:	4620      	mov	r0, r4
 801f5cc:	4629      	mov	r1, r5
 801f5ce:	2200      	movs	r2, #0
 801f5d0:	f7e0 ffea 	bl	80005a8 <__aeabi_dmul>
 801f5d4:	4b33      	ldr	r3, [pc, #204]	@ (801f6a4 <scalbn+0xf4>)
 801f5d6:	429e      	cmp	r6, r3
 801f5d8:	4604      	mov	r4, r0
 801f5da:	460d      	mov	r5, r1
 801f5dc:	da0f      	bge.n	801f5fe <scalbn+0x4e>
 801f5de:	a328      	add	r3, pc, #160	@ (adr r3, 801f680 <scalbn+0xd0>)
 801f5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5e4:	e01e      	b.n	801f624 <scalbn+0x74>
 801f5e6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801f5ea:	4291      	cmp	r1, r2
 801f5ec:	d10b      	bne.n	801f606 <scalbn+0x56>
 801f5ee:	4622      	mov	r2, r4
 801f5f0:	4620      	mov	r0, r4
 801f5f2:	4629      	mov	r1, r5
 801f5f4:	f7e0 fe22 	bl	800023c <__adddf3>
 801f5f8:	4604      	mov	r4, r0
 801f5fa:	460d      	mov	r5, r1
 801f5fc:	e022      	b.n	801f644 <scalbn+0x94>
 801f5fe:	460b      	mov	r3, r1
 801f600:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801f604:	3936      	subs	r1, #54	@ 0x36
 801f606:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801f60a:	4296      	cmp	r6, r2
 801f60c:	dd0d      	ble.n	801f62a <scalbn+0x7a>
 801f60e:	2d00      	cmp	r5, #0
 801f610:	a11d      	add	r1, pc, #116	@ (adr r1, 801f688 <scalbn+0xd8>)
 801f612:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f616:	da02      	bge.n	801f61e <scalbn+0x6e>
 801f618:	a11d      	add	r1, pc, #116	@ (adr r1, 801f690 <scalbn+0xe0>)
 801f61a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f61e:	a31a      	add	r3, pc, #104	@ (adr r3, 801f688 <scalbn+0xd8>)
 801f620:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f624:	f7e0 ffc0 	bl	80005a8 <__aeabi_dmul>
 801f628:	e7e6      	b.n	801f5f8 <scalbn+0x48>
 801f62a:	1872      	adds	r2, r6, r1
 801f62c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801f630:	428a      	cmp	r2, r1
 801f632:	dcec      	bgt.n	801f60e <scalbn+0x5e>
 801f634:	2a00      	cmp	r2, #0
 801f636:	dd08      	ble.n	801f64a <scalbn+0x9a>
 801f638:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801f63c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801f640:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f644:	ec45 4b10 	vmov	d0, r4, r5
 801f648:	bd70      	pop	{r4, r5, r6, pc}
 801f64a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801f64e:	da08      	bge.n	801f662 <scalbn+0xb2>
 801f650:	2d00      	cmp	r5, #0
 801f652:	a10b      	add	r1, pc, #44	@ (adr r1, 801f680 <scalbn+0xd0>)
 801f654:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f658:	dac1      	bge.n	801f5de <scalbn+0x2e>
 801f65a:	a10f      	add	r1, pc, #60	@ (adr r1, 801f698 <scalbn+0xe8>)
 801f65c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f660:	e7bd      	b.n	801f5de <scalbn+0x2e>
 801f662:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801f666:	3236      	adds	r2, #54	@ 0x36
 801f668:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801f66c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f670:	4620      	mov	r0, r4
 801f672:	4b0d      	ldr	r3, [pc, #52]	@ (801f6a8 <scalbn+0xf8>)
 801f674:	4629      	mov	r1, r5
 801f676:	2200      	movs	r2, #0
 801f678:	e7d4      	b.n	801f624 <scalbn+0x74>
 801f67a:	bf00      	nop
 801f67c:	f3af 8000 	nop.w
 801f680:	c2f8f359 	.word	0xc2f8f359
 801f684:	01a56e1f 	.word	0x01a56e1f
 801f688:	8800759c 	.word	0x8800759c
 801f68c:	7e37e43c 	.word	0x7e37e43c
 801f690:	8800759c 	.word	0x8800759c
 801f694:	fe37e43c 	.word	0xfe37e43c
 801f698:	c2f8f359 	.word	0xc2f8f359
 801f69c:	81a56e1f 	.word	0x81a56e1f
 801f6a0:	43500000 	.word	0x43500000
 801f6a4:	ffff3cb0 	.word	0xffff3cb0
 801f6a8:	3c900000 	.word	0x3c900000

0801f6ac <__ieee754_sqrt>:
 801f6ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6b0:	4a68      	ldr	r2, [pc, #416]	@ (801f854 <__ieee754_sqrt+0x1a8>)
 801f6b2:	ec55 4b10 	vmov	r4, r5, d0
 801f6b6:	43aa      	bics	r2, r5
 801f6b8:	462b      	mov	r3, r5
 801f6ba:	4621      	mov	r1, r4
 801f6bc:	d110      	bne.n	801f6e0 <__ieee754_sqrt+0x34>
 801f6be:	4622      	mov	r2, r4
 801f6c0:	4620      	mov	r0, r4
 801f6c2:	4629      	mov	r1, r5
 801f6c4:	f7e0 ff70 	bl	80005a8 <__aeabi_dmul>
 801f6c8:	4602      	mov	r2, r0
 801f6ca:	460b      	mov	r3, r1
 801f6cc:	4620      	mov	r0, r4
 801f6ce:	4629      	mov	r1, r5
 801f6d0:	f7e0 fdb4 	bl	800023c <__adddf3>
 801f6d4:	4604      	mov	r4, r0
 801f6d6:	460d      	mov	r5, r1
 801f6d8:	ec45 4b10 	vmov	d0, r4, r5
 801f6dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6e0:	2d00      	cmp	r5, #0
 801f6e2:	dc0e      	bgt.n	801f702 <__ieee754_sqrt+0x56>
 801f6e4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801f6e8:	4322      	orrs	r2, r4
 801f6ea:	d0f5      	beq.n	801f6d8 <__ieee754_sqrt+0x2c>
 801f6ec:	b19d      	cbz	r5, 801f716 <__ieee754_sqrt+0x6a>
 801f6ee:	4622      	mov	r2, r4
 801f6f0:	4620      	mov	r0, r4
 801f6f2:	4629      	mov	r1, r5
 801f6f4:	f7e0 fda0 	bl	8000238 <__aeabi_dsub>
 801f6f8:	4602      	mov	r2, r0
 801f6fa:	460b      	mov	r3, r1
 801f6fc:	f7e1 f87e 	bl	80007fc <__aeabi_ddiv>
 801f700:	e7e8      	b.n	801f6d4 <__ieee754_sqrt+0x28>
 801f702:	152a      	asrs	r2, r5, #20
 801f704:	d115      	bne.n	801f732 <__ieee754_sqrt+0x86>
 801f706:	2000      	movs	r0, #0
 801f708:	e009      	b.n	801f71e <__ieee754_sqrt+0x72>
 801f70a:	0acb      	lsrs	r3, r1, #11
 801f70c:	3a15      	subs	r2, #21
 801f70e:	0549      	lsls	r1, r1, #21
 801f710:	2b00      	cmp	r3, #0
 801f712:	d0fa      	beq.n	801f70a <__ieee754_sqrt+0x5e>
 801f714:	e7f7      	b.n	801f706 <__ieee754_sqrt+0x5a>
 801f716:	462a      	mov	r2, r5
 801f718:	e7fa      	b.n	801f710 <__ieee754_sqrt+0x64>
 801f71a:	005b      	lsls	r3, r3, #1
 801f71c:	3001      	adds	r0, #1
 801f71e:	02dc      	lsls	r4, r3, #11
 801f720:	d5fb      	bpl.n	801f71a <__ieee754_sqrt+0x6e>
 801f722:	1e44      	subs	r4, r0, #1
 801f724:	1b12      	subs	r2, r2, r4
 801f726:	f1c0 0420 	rsb	r4, r0, #32
 801f72a:	fa21 f404 	lsr.w	r4, r1, r4
 801f72e:	4323      	orrs	r3, r4
 801f730:	4081      	lsls	r1, r0
 801f732:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f736:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801f73a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f73e:	07d2      	lsls	r2, r2, #31
 801f740:	bf5c      	itt	pl
 801f742:	005b      	lslpl	r3, r3, #1
 801f744:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801f748:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f74c:	bf58      	it	pl
 801f74e:	0049      	lslpl	r1, r1, #1
 801f750:	2600      	movs	r6, #0
 801f752:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801f756:	106d      	asrs	r5, r5, #1
 801f758:	0049      	lsls	r1, r1, #1
 801f75a:	2016      	movs	r0, #22
 801f75c:	4632      	mov	r2, r6
 801f75e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801f762:	1917      	adds	r7, r2, r4
 801f764:	429f      	cmp	r7, r3
 801f766:	bfde      	ittt	le
 801f768:	193a      	addle	r2, r7, r4
 801f76a:	1bdb      	suble	r3, r3, r7
 801f76c:	1936      	addle	r6, r6, r4
 801f76e:	0fcf      	lsrs	r7, r1, #31
 801f770:	3801      	subs	r0, #1
 801f772:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801f776:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f77a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801f77e:	d1f0      	bne.n	801f762 <__ieee754_sqrt+0xb6>
 801f780:	4604      	mov	r4, r0
 801f782:	2720      	movs	r7, #32
 801f784:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801f788:	429a      	cmp	r2, r3
 801f78a:	eb00 0e0c 	add.w	lr, r0, ip
 801f78e:	db02      	blt.n	801f796 <__ieee754_sqrt+0xea>
 801f790:	d113      	bne.n	801f7ba <__ieee754_sqrt+0x10e>
 801f792:	458e      	cmp	lr, r1
 801f794:	d811      	bhi.n	801f7ba <__ieee754_sqrt+0x10e>
 801f796:	f1be 0f00 	cmp.w	lr, #0
 801f79a:	eb0e 000c 	add.w	r0, lr, ip
 801f79e:	da42      	bge.n	801f826 <__ieee754_sqrt+0x17a>
 801f7a0:	2800      	cmp	r0, #0
 801f7a2:	db40      	blt.n	801f826 <__ieee754_sqrt+0x17a>
 801f7a4:	f102 0801 	add.w	r8, r2, #1
 801f7a8:	1a9b      	subs	r3, r3, r2
 801f7aa:	458e      	cmp	lr, r1
 801f7ac:	bf88      	it	hi
 801f7ae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801f7b2:	eba1 010e 	sub.w	r1, r1, lr
 801f7b6:	4464      	add	r4, ip
 801f7b8:	4642      	mov	r2, r8
 801f7ba:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801f7be:	3f01      	subs	r7, #1
 801f7c0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801f7c4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f7c8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801f7cc:	d1dc      	bne.n	801f788 <__ieee754_sqrt+0xdc>
 801f7ce:	4319      	orrs	r1, r3
 801f7d0:	d01b      	beq.n	801f80a <__ieee754_sqrt+0x15e>
 801f7d2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801f858 <__ieee754_sqrt+0x1ac>
 801f7d6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801f85c <__ieee754_sqrt+0x1b0>
 801f7da:	e9da 0100 	ldrd	r0, r1, [sl]
 801f7de:	e9db 2300 	ldrd	r2, r3, [fp]
 801f7e2:	f7e0 fd29 	bl	8000238 <__aeabi_dsub>
 801f7e6:	e9da 8900 	ldrd	r8, r9, [sl]
 801f7ea:	4602      	mov	r2, r0
 801f7ec:	460b      	mov	r3, r1
 801f7ee:	4640      	mov	r0, r8
 801f7f0:	4649      	mov	r1, r9
 801f7f2:	f7e1 f955 	bl	8000aa0 <__aeabi_dcmple>
 801f7f6:	b140      	cbz	r0, 801f80a <__ieee754_sqrt+0x15e>
 801f7f8:	f1b4 3fff 	cmp.w	r4, #4294967295
 801f7fc:	e9da 0100 	ldrd	r0, r1, [sl]
 801f800:	e9db 2300 	ldrd	r2, r3, [fp]
 801f804:	d111      	bne.n	801f82a <__ieee754_sqrt+0x17e>
 801f806:	3601      	adds	r6, #1
 801f808:	463c      	mov	r4, r7
 801f80a:	1072      	asrs	r2, r6, #1
 801f80c:	0863      	lsrs	r3, r4, #1
 801f80e:	07f1      	lsls	r1, r6, #31
 801f810:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801f814:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801f818:	bf48      	it	mi
 801f81a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801f81e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801f822:	4618      	mov	r0, r3
 801f824:	e756      	b.n	801f6d4 <__ieee754_sqrt+0x28>
 801f826:	4690      	mov	r8, r2
 801f828:	e7be      	b.n	801f7a8 <__ieee754_sqrt+0xfc>
 801f82a:	f7e0 fd07 	bl	800023c <__adddf3>
 801f82e:	e9da 8900 	ldrd	r8, r9, [sl]
 801f832:	4602      	mov	r2, r0
 801f834:	460b      	mov	r3, r1
 801f836:	4640      	mov	r0, r8
 801f838:	4649      	mov	r1, r9
 801f83a:	f7e1 f927 	bl	8000a8c <__aeabi_dcmplt>
 801f83e:	b120      	cbz	r0, 801f84a <__ieee754_sqrt+0x19e>
 801f840:	1ca0      	adds	r0, r4, #2
 801f842:	bf08      	it	eq
 801f844:	3601      	addeq	r6, #1
 801f846:	3402      	adds	r4, #2
 801f848:	e7df      	b.n	801f80a <__ieee754_sqrt+0x15e>
 801f84a:	1c63      	adds	r3, r4, #1
 801f84c:	f023 0401 	bic.w	r4, r3, #1
 801f850:	e7db      	b.n	801f80a <__ieee754_sqrt+0x15e>
 801f852:	bf00      	nop
 801f854:	7ff00000 	.word	0x7ff00000
 801f858:	20000318 	.word	0x20000318
 801f85c:	20000310 	.word	0x20000310

0801f860 <_init>:
 801f860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f862:	bf00      	nop
 801f864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f866:	bc08      	pop	{r3}
 801f868:	469e      	mov	lr, r3
 801f86a:	4770      	bx	lr

0801f86c <_fini>:
 801f86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f86e:	bf00      	nop
 801f870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f872:	bc08      	pop	{r3}
 801f874:	469e      	mov	lr, r3
 801f876:	4770      	bx	lr
