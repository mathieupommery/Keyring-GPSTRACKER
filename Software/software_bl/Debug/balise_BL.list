
balise_BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f708  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027f0  0801f848  0801f848  00020848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08022038  08022038  00023038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08022040  08022040  00023040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08022044  08022044  00023044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000318  20000008  08022048  00024008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000320  08022360  00024320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000358  08022395  00024358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d40  20000370  080223a6  00024370  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200030b0  080223a6  000250b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00026000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00026000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080223a6  000251e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0004c6b7  00000000  00000000  00025a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a545  00000000  00000000  0007214e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003f38  00000000  00000000  0007c698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000306b  00000000  00000000  000805d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000158da  00000000  00000000  0008363b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00054b51  00000000  00000000  00098f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011e75b  00000000  00000000  000eda66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0020c1c1  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000123ec  00000000  00000000  0020c204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000076  00000000  00000000  0021e5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000370 	.word	0x20000370
 800015c:	00000000 	.word	0x00000000
 8000160:	0801f830 	.word	0x0801f830

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000374 	.word	0x20000374
 800017c:	0801f830 	.word	0x0801f830

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fde:	4b38      	ldr	r3, [pc, #224]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fe0:	4a38      	ldr	r2, [pc, #224]	@ (80010c4 <MX_ADC1_Init+0xfc>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fe4:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fea:	4b35      	ldr	r3, [pc, #212]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff0:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ff6:	4b32      	ldr	r3, [pc, #200]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffc:	4b30      	ldr	r3, [pc, #192]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ffe:	2204      	movs	r2, #4
 8001000:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001002:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001004:	2200      	movs	r2, #0
 8001006:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001008:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800100a:	2201      	movs	r2, #1
 800100c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800100e:	4b2c      	ldr	r3, [pc, #176]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001010:	2203      	movs	r2, #3
 8001012:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001014:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800101c:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800101e:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 8001022:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001024:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001026:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800102c:	4b24      	ldr	r3, [pc, #144]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001034:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001036:	2200      	movs	r2, #0
 8001038:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800103a:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001042:	481f      	ldr	r0, [pc, #124]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001044:	f006 f9c6 	bl	80073d4 <HAL_ADC_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800104e:	f001 fe4b 	bl	8002ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001052:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <MX_ADC1_Init+0x100>)
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001056:	2306      	movs	r3, #6
 8001058:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800105a:	2307      	movs	r3, #7
 800105c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800105e:	237f      	movs	r3, #127	@ 0x7f
 8001060:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001062:	2304      	movs	r3, #4
 8001064:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4814      	ldr	r0, [pc, #80]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001070:	f006 fb94 	bl	800779c <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800107a:	f001 fe35 	bl	8002ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <MX_ADC1_Init+0x104>)
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001082:	230c      	movs	r3, #12
 8001084:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	480d      	ldr	r0, [pc, #52]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800108c:	f006 fb86 	bl	800779c <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001096:	f001 fe27 	bl	8002ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <MX_ADC1_Init+0x108>)
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800109e:	2312      	movs	r3, #18
 80010a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 80010a8:	f006 fb78 	bl	800779c <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80010b2:	f001 fe19 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000038c 	.word	0x2000038c
 80010c4:	50040000 	.word	0x50040000
 80010c8:	80000001 	.word	0x80000001
 80010cc:	c7520000 	.word	0xc7520000
 80010d0:	25b00200 	.word	0x25b00200

080010d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a22      	ldr	r2, [pc, #136]	@ (800117c <HAL_ADC_MspInit+0xa8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d13e      	bne.n	8001174 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010f6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010fa:	f7ff ff4b 	bl	8000f94 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff ff48 	bl	8000f94 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001104:	2310      	movs	r3, #16
 8001106:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001108:	2303      	movs	r3, #3
 800110a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f007 fd81 	bl	8008c20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <HAL_ADC_MspInit+0xb0>)
 8001122:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001126:	2205      	movs	r2, #5
 8001128:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001138:	2280      	movs	r2, #128	@ 0x80
 800113a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800113e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001142:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001146:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800114a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800114e:	2220      	movs	r2, #32
 8001150:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800115a:	f007 f98d 	bl	8008478 <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001164:	f001 fdc0 	bl	8002ce8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800116c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800116e:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	50040000 	.word	0x50040000
 8001180:	200003f0 	.word	0x200003f0
 8001184:	40020008 	.word	0x40020008

08001188 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a54      	ldr	r2, [pc, #336]	@ (80012e8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001198:	4293      	cmp	r3, r2
 800119a:	f040 8091 	bne.w	80012c0 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 800119e:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f996 	bl	80004d4 <__aeabi_i2d>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	a14a      	add	r1, pc, #296	@ (adr r1, 80012d8 <HAL_ADC_ConvCpltCallback+0x150>)
 80011ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011b2:	f7ff fb23 	bl	80007fc <__aeabi_ddiv>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fceb 	bl	8000b98 <__aeabi_d2f>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a4a      	ldr	r2, [pc, #296]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 80011c6:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80011c8:	4b4a      	ldr	r3, [pc, #296]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x16c>)
 80011ca:	ed93 7a00 	vldr	s14, [r3]
 80011ce:	4b4a      	ldr	r3, [pc, #296]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d8:	ee17 0a90 	vmov	r0, s15
 80011dc:	f7ff f98c 	bl	80004f8 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	f04f 0000 	mov.w	r0, #0
 80011e8:	4944      	ldr	r1, [pc, #272]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x174>)
 80011ea:	f7ff fb07 	bl	80007fc <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4690      	mov	r8, r2
 80011f4:	4699      	mov	r9, r3
 80011f6:	4b3d      	ldr	r3, [pc, #244]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80011f8:	885b      	ldrh	r3, [r3, #2]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f96a 	bl	80004d4 <__aeabi_i2d>
 8001200:	4604      	mov	r4, r0
 8001202:	460d      	mov	r5, r1
 8001204:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f975 	bl	80004f8 <__aeabi_f2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b3b      	ldr	r3, [pc, #236]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x178>)
 8001214:	f7ff faf2 	bl	80007fc <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7ff f9c2 	bl	80005a8 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4614      	mov	r4, r2
 800122a:	461d      	mov	r5, r3
 800122c:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f961 	bl	80004f8 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4620      	mov	r0, r4
 800123c:	4629      	mov	r1, r5
 800123e:	f7fe fffb 	bl	8000238 <__aeabi_dsub>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4640      	mov	r0, r8
 8001248:	4649      	mov	r1, r9
 800124a:	f7ff f9ad 	bl	80005a8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fc9f 	bl	8000b98 <__aeabi_d2f>
 800125a:	ee07 0a10 	vmov	s14, r0
 800125e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001266:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001268:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 800126e:	889b      	ldrh	r3, [r3, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f92f 	bl	80004d4 <__aeabi_i2d>
 8001276:	a31a      	add	r3, pc, #104	@ (adr r3, 80012e0 <HAL_ADC_ConvCpltCallback+0x158>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff fabe 	bl	80007fc <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	f7fe ffd6 	bl	800023c <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4614      	mov	r4, r2
 8001296:	461d      	mov	r5, r3
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f92b 	bl	80004f8 <__aeabi_f2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7ff f97d 	bl	80005a8 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc6f 	bl	8000b98 <__aeabi_d2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <HAL_ADC_ConvCpltCallback+0x180>)
 80012be:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 80012c0:	2203      	movs	r2, #3
 80012c2:	490a      	ldr	r1, [pc, #40]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80012c4:	4811      	ldr	r0, [pc, #68]	@ (800130c <HAL_ADC_ConvCpltCallback+0x184>)
 80012c6:	f006 f9d1 	bl	800766c <HAL_ADC_Start_DMA>



}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012d4:	f3af 8000 	nop.w
 80012d8:	d70a3d70 	.word	0xd70a3d70
 80012dc:	40b36323 	.word	0x40b36323
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40affe00 	.word	0x40affe00
 80012e8:	50040000 	.word	0x50040000
 80012ec:	20000888 	.word	0x20000888
 80012f0:	20000894 	.word	0x20000894
 80012f4:	20000008 	.word	0x20000008
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	40590000 	.word	0x40590000
 8001300:	40080000 	.word	0x40080000
 8001304:	20000890 	.word	0x20000890
 8001308:	20000898 	.word	0x20000898
 800130c:	2000038c 	.word	0x2000038c

08001310 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <APPD_EnableCPU2+0x34>)
 8001318:	1d3c      	adds	r4, r7, #4
 800131a:	461d      	mov	r5, r3
 800131c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001320:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001324:	c403      	stmia	r4!, {r0, r1}
 8001326:	8022      	strh	r2, [r4, #0]
 8001328:	3402      	adds	r4, #2
 800132a:	0c13      	lsrs	r3, r2, #16
 800132c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800132e:	f015 fb2d 	bl	801698c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	4618      	mov	r0, r3
 8001336:	f014 fdbe 	bl	8015eb6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800133a:	bf00      	nop
}
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bdb0      	pop	{r4, r5, r7, pc}
 8001342:	bf00      	nop
 8001344:	0801f848 	.word	0x0801f848

08001348 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <LL_C2_PWR_SetPowerMode+0x28>)
 8001352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001356:	f023 0207 	bic.w	r2, r3, #7
 800135a:	4905      	ldr	r1, [pc, #20]	@ (8001370 <LL_C2_PWR_SetPowerMode+0x28>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4313      	orrs	r3, r2
 8001360:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	58000400 	.word	0x58000400

08001374 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <LL_EXTI_EnableIT_32_63+0x24>)
 800137e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001382:	4905      	ldr	r1, [pc, #20]	@ (8001398 <LL_EXTI_EnableIT_32_63+0x24>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4313      	orrs	r3, r2
 8001388:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	58000800 	.word	0x58000800

0800139c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a8:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80013aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80013ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013b6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013c2:	4313      	orrs	r3, r2
 80013c4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	cafecafe 	.word	0xcafecafe

080013d8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80013e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80013ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001404:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <LL_DBGMCU_GetDeviceID+0x18>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e0042000 	.word	0xe0042000

0800141c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001420:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <LL_DBGMCU_GetRevisionID+0x18>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0c1b      	lsrs	r3, r3, #16
 8001426:	b29b      	uxth	r3, r3
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e0042000 	.word	0xe0042000

08001438 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <LL_LPM_EnableSleep+0x1c>)
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	4a04      	ldr	r2, [pc, #16]	@ (8001454 <LL_LPM_EnableSleep+0x1c>)
 8001442:	f023 0304 	bic.w	r3, r3, #4
 8001446:	6113      	str	r3, [r2, #16]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	22ca      	movs	r2, #202	@ 0xca
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2253      	movs	r2, #83	@ 0x53
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 0207 	bic.w	r2, r3, #7
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <MX_APPE_Config+0x18>)
 80014be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014c2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80014c4:	f000 f824 	bl	8001510 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80014c8:	f000 f829 	bl	800151e <Config_HSE>

  return;
 80014cc:	bf00      	nop
}
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	58004000 	.word	0x58004000

080014d4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80014d8:	f000 f835 	bl	8001546 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80014dc:	f000 f84e 	bl	800157c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80014e0:	4903      	ldr	r1, [pc, #12]	@ (80014f0 <MX_APPE_Init+0x1c>)
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 fe4c 	bl	8002180 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80014e8:	f000 f856 	bl	8001598 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80014ec:	bf00      	nop
}
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000be0 	.word	0x20000be0

080014f4 <Init_Smps>:

void Init_Smps(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80014f8:	bf00      	nop
}
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <Init_Exti>:

void Init_Exti(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001506:	2050      	movs	r0, #80	@ 0x50
 8001508:	f7ff ff34 	bl	8001374 <LL_EXTI_EnableIT_32_63>

  return;
 800150c:	bf00      	nop
}
 800150e:	bd80      	pop	{r7, pc}

08001510 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001514:	bf00      	nop
}
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001524:	2000      	movs	r0, #0
 8001526:	f015 fabd 	bl	8016aa4 <OTP_Read>
 800152a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	799b      	ldrb	r3, [r3, #6]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff30 	bl	800139c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800153c:	bf00      	nop
 800153e:	bf00      	nop
}
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <System_Init>:

static void System_Init(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  Init_Smps();
 800154a:	f7ff ffd3 	bl	80014f4 <Init_Smps>

  Init_Exti();
 800154e:	f7ff ffd8 	bl	8001502 <Init_Exti>

  Init_Rtc();
 8001552:	f000 f803 	bl	800155c <Init_Rtc>

  return;
 8001556:	bf00      	nop
}
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <Init_Rtc>:

static void Init_Rtc(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <Init_Rtc+0x1c>)
 8001562:	f7ff ff86 	bl	8001472 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001566:	2100      	movs	r1, #0
 8001568:	4803      	ldr	r0, [pc, #12]	@ (8001578 <Init_Rtc+0x1c>)
 800156a:	f7ff ff92 	bl	8001492 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800156e:	4802      	ldr	r0, [pc, #8]	@ (8001578 <Init_Rtc+0x1c>)
 8001570:	f7ff ff72 	bl	8001458 <LL_RTC_EnableWriteProtection>

  return;
 8001574:	bf00      	nop
}
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40002800 	.word	0x40002800

0800157c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001580:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001584:	f7ff ff28 	bl	80013d8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001588:	f017 fcea 	bl	8018f60 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800158c:	2004      	movs	r0, #4
 800158e:	f7ff fedb 	bl	8001348 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001592:	bf00      	nop
}
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800159e:	f015 f83f 	bl	8016620 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80015a2:	4a11      	ldr	r2, [pc, #68]	@ (80015e8 <appe_Tl_Init+0x50>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	2004      	movs	r0, #4
 80015a8:	f017 fe18 	bl	80191dc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <appe_Tl_Init+0x54>)
 80015ae:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <appe_Tl_Init+0x58>)
 80015b2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80015b4:	463b      	mov	r3, r7
 80015b6:	4619      	mov	r1, r3
 80015b8:	480e      	ldr	r0, [pc, #56]	@ (80015f4 <appe_Tl_Init+0x5c>)
 80015ba:	f014 fef3 	bl	80163a4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <appe_Tl_Init+0x60>)
 80015c0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <appe_Tl_Init+0x64>)
 80015c4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <appe_Tl_Init+0x68>)
 80015c8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80015ca:	f240 533c 	movw	r3, #1340	@ 0x53c
 80015ce:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4618      	mov	r0, r3
 80015d6:	f015 f965 	bl	80168a4 <TL_MM_Init>

  TL_Enable();
 80015da:	f015 f81b 	bl	8016614 <TL_Enable>

  return;
 80015de:	bf00      	nop
}
 80015e0:	3720      	adds	r7, #32
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	080163dd 	.word	0x080163dd
 80015ec:	20030734 	.word	0x20030734
 80015f0:	08001605 	.word	0x08001605
 80015f4:	0800161d 	.word	0x0800161d
 80015f8:	2003094c 	.word	0x2003094c
 80015fc:	20030840 	.word	0x20030840
 8001600:	200301f8 	.word	0x200301f8

08001604 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800160e:	bf00      	nop
}
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	330b      	adds	r3, #11
 800162a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	b29b      	uxth	r3, r3
 8001632:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001636:	2b07      	cmp	r3, #7
 8001638:	d81f      	bhi.n	800167a <APPE_SysUserEvtRx+0x5e>
 800163a:	a201      	add	r2, pc, #4	@ (adr r2, 8001640 <APPE_SysUserEvtRx+0x24>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	08001661 	.word	0x08001661
 8001644:	08001673 	.word	0x08001673
 8001648:	0800167b 	.word	0x0800167b
 800164c:	0800167b 	.word	0x0800167b
 8001650:	0800167b 	.word	0x0800167b
 8001654:	0800167b 	.word	0x0800167b
 8001658:	0800167b 	.word	0x0800167b
 800165c:	0800167b 	.word	0x0800167b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4618      	mov	r0, r3
 8001666:	f014 fc53 	bl	8015f10 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f81b 	bl	80016a6 <APPE_SysEvtReadyProcessing>
    break;
 8001670:	e004      	b.n	800167c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f806 	bl	8001684 <APPE_SysEvtError>
    break;
 8001678:	e000      	b.n	800167c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800167a:	bf00      	nop
  }

  return;
 800167c:	bf00      	nop
}
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	330b      	adds	r3, #11
 8001692:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3302      	adds	r3, #2
 8001698:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800169a:	bf00      	nop
}
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b08a      	sub	sp, #40	@ 0x28
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	330b      	adds	r3, #11
 80016ca:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	3302      	adds	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11d      	bne.n	8001716 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80016da:	f7ff fe19 	bl	8001310 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80016de:	230f      	movs	r3, #15
 80016e0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80016e2:	237f      	movs	r3, #127	@ 0x7f
 80016e4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80016e6:	f7ff fe99 	bl	800141c <LL_DBGMCU_GetRevisionID>
 80016ea:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80016f2:	f7ff fe85 	bl	8001400 <LL_DBGMCU_GetDeviceID>
 80016f6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4618      	mov	r0, r3
 8001704:	f014 fbee 	bl	8015ee4 <SHCI_C2_Config>

    APP_BLE_Init();
 8001708:	f016 f820 	bl	801774c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800170c:	2100      	movs	r1, #0
 800170e:	2001      	movs	r0, #1
 8001710:	f017 fc38 	bl	8018f84 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001714:	e007      	b.n	8001726 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d103      	bne.n	8001726 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
  return;
 8001724:	bf00      	nop
 8001726:	bf00      	nop
}
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001736:	f005 fc61 	bl	8006ffc <HAL_GetTick>
 800173a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001746:	d00a      	beq.n	800175e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001748:	f005 fc70 	bl	800702c <HAL_GetTickFreq>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001756:	e002      	b.n	800175e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001758:	f7ff fe6e 	bl	8001438 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 800175c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800175e:	f005 fc4d 	bl	8006ffc <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	429a      	cmp	r2, r3
 800176c:	d8f4      	bhi.n	8001758 <HAL_Delay+0x2a>
  }
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f017 fc30 	bl	8018fe4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800178c:	bf00      	nop
}
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f017 fc1e 	bl	8018fe4 <UTIL_SEQ_Run>
  return;
 80017a8:	bf00      	nop
}
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80017b8:	2100      	movs	r1, #0
 80017ba:	2004      	movs	r0, #4
 80017bc:	f017 fd30 	bl	8019220 <UTIL_SEQ_SetTask>
  return;
 80017c0:	bf00      	nop
}
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017d0:	2002      	movs	r0, #2
 80017d2:	f017 fd91 	bl	80192f8 <UTIL_SEQ_SetEvt>
  return;
 80017d6:	bf00      	nop
}
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017e6:	2002      	movs	r0, #2
 80017e8:	f017 fda6 	bl	8019338 <UTIL_SEQ_WaitEvt>
  return;
 80017ec:	bf00      	nop
}
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <LL_AHB1_GRP1_EnableClock>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001800:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001802:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4313      	orrs	r3, r2
 800180a:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001810:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001818:	68fb      	ldr	r3, [r7, #12]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800182a:	2004      	movs	r0, #4
 800182c:	f7ff ffe2 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001830:	2001      	movs	r0, #1
 8001832:	f7ff ffdf 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	200b      	movs	r0, #11
 800183c:	f006 fdbd 	bl	80083ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001840:	200b      	movs	r0, #11
 8001842:	f006 fdd4 	bl	80083ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	200c      	movs	r0, #12
 800184c:	f006 fdb5 	bl	80083ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001850:	200c      	movs	r0, #12
 8001852:	f006 fdcc 	bl	80083ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	200d      	movs	r0, #13
 800185c:	f006 fdad 	bl	80083ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001860:	200d      	movs	r0, #13
 8001862:	f006 fdc4 	bl	80083ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	200e      	movs	r0, #14
 800186c:	f006 fda5 	bl	80083ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001870:	200e      	movs	r0, #14
 8001872:	f006 fdbc 	bl	80083ee <HAL_NVIC_EnableIRQ>

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}

0800187a <LL_AHB2_GRP1_EnableClock>:
{
 800187a:	b480      	push	{r7}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001886:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001888:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4313      	orrs	r3, r2
 8001890:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001896:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4013      	ands	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c0:	2004      	movs	r0, #4
 80018c2:	f7ff ffda 	bl	800187a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2002      	movs	r0, #2
 80018c8:	f7ff ffd7 	bl	800187a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	2001      	movs	r0, #1
 80018ce:	f7ff ffd4 	bl	800187a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2101      	movs	r1, #1
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018da:	f007 fc07 	bl	80090ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	2183      	movs	r1, #131	@ 0x83
 80018e2:	481b      	ldr	r0, [pc, #108]	@ (8001950 <MX_GPIO_Init+0xa4>)
 80018e4:	f007 fc02 	bl	80090ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018e8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80018ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018ee:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80018f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4619      	mov	r1, r3
 80018fc:	4815      	ldr	r0, [pc, #84]	@ (8001954 <MX_GPIO_Init+0xa8>)
 80018fe:	f007 f98f 	bl	8008c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001902:	2301      	movs	r3, #1
 8001904:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4619      	mov	r1, r3
 8001916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800191a:	f007 f981 	bl	8008c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|SPI_CS_Pin;
 800191e:	2383      	movs	r3, #131	@ 0x83
 8001920:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001922:	2301      	movs	r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4807      	ldr	r0, [pc, #28]	@ (8001950 <MX_GPIO_Init+0xa4>)
 8001934:	f007 f974 	bl	8008c20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	2028      	movs	r0, #40	@ 0x28
 800193e:	f006 fd3c 	bl	80083ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001942:	2028      	movs	r0, #40	@ 0x28
 8001944:	f006 fd53 	bl	80083ee <HAL_NVIC_EnableIRQ>

}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	48000400 	.word	0x48000400
 8001954:	48000800 	.word	0x48000800

08001958 <LL_EXTI_EnableIT_0_31>:
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <LL_EXTI_EnableIT_0_31+0x24>)
 8001962:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001966:	4905      	ldr	r1, [pc, #20]	@ (800197c <LL_EXTI_EnableIT_0_31+0x24>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4313      	orrs	r3, r2
 800196c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	58000800 	.word	0x58000800

08001980 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4904      	ldr	r1, [pc, #16]	@ (80019a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]

}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	58000800 	.word	0x58000800

080019a4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019aa:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <ReadRtcSsrValue+0x3c>)
 80019ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <ReadRtcSsrValue+0x3c>)
 80019b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80019ba:	e005      	b.n	80019c8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019c0:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <ReadRtcSsrValue+0x3c>)
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d1f5      	bne.n	80019bc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80019d0:	683b      	ldr	r3, [r7, #0]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40002800 	.word	0x40002800

080019e4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	460a      	mov	r2, r1
 80019ee:	71fb      	strb	r3, [r7, #7]
 80019f0:	4613      	mov	r3, r2
 80019f2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80019f4:	79ba      	ldrb	r2, [r7, #6]
 80019f6:	491d      	ldr	r1, [pc, #116]	@ (8001a6c <LinkTimerAfter+0x88>)
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	3315      	adds	r3, #21
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d009      	beq.n	8001a22 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	4916      	ldr	r1, [pc, #88]	@ (8001a6c <LinkTimerAfter+0x88>)
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	440b      	add	r3, r1
 8001a1c:	3314      	adds	r3, #20
 8001a1e:	79fa      	ldrb	r2, [r7, #7]
 8001a20:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001a22:	79fa      	ldrb	r2, [r7, #7]
 8001a24:	4911      	ldr	r1, [pc, #68]	@ (8001a6c <LinkTimerAfter+0x88>)
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	440b      	add	r3, r1
 8001a30:	3315      	adds	r3, #21
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001a36:	79fa      	ldrb	r2, [r7, #7]
 8001a38:	490c      	ldr	r1, [pc, #48]	@ (8001a6c <LinkTimerAfter+0x88>)
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	440b      	add	r3, r1
 8001a44:	3314      	adds	r3, #20
 8001a46:	79ba      	ldrb	r2, [r7, #6]
 8001a48:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001a4a:	79ba      	ldrb	r2, [r7, #6]
 8001a4c:	4907      	ldr	r1, [pc, #28]	@ (8001a6c <LinkTimerAfter+0x88>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	440b      	add	r3, r1
 8001a58:	3315      	adds	r3, #21
 8001a5a:	79fa      	ldrb	r2, [r7, #7]
 8001a5c:	701a      	strb	r2, [r3, #0]

  return;
 8001a5e:	bf00      	nop
}
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000450 	.word	0x20000450

08001a70 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	460a      	mov	r2, r1
 8001a7a:	71fb      	strb	r3, [r7, #7]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001a80:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <LinkTimerBefore+0xb8>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	79ba      	ldrb	r2, [r7, #6]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d032      	beq.n	8001af2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001a8c:	79ba      	ldrb	r2, [r7, #6]
 8001a8e:	4927      	ldr	r1, [pc, #156]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	440b      	add	r3, r1
 8001a9a:	3314      	adds	r3, #20
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	4922      	ldr	r1, [pc, #136]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	440b      	add	r3, r1
 8001aae:	3315      	adds	r3, #21
 8001ab0:	79fa      	ldrb	r2, [r7, #7]
 8001ab2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001ab4:	79fa      	ldrb	r2, [r7, #7]
 8001ab6:	491d      	ldr	r1, [pc, #116]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3315      	adds	r3, #21
 8001ac4:	79ba      	ldrb	r2, [r7, #6]
 8001ac6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001ac8:	79fa      	ldrb	r2, [r7, #7]
 8001aca:	4918      	ldr	r1, [pc, #96]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3314      	adds	r3, #20
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001adc:	79ba      	ldrb	r2, [r7, #6]
 8001ade:	4913      	ldr	r1, [pc, #76]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	440b      	add	r3, r1
 8001aea:	3314      	adds	r3, #20
 8001aec:	79fa      	ldrb	r2, [r7, #7]
 8001aee:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001af0:	e014      	b.n	8001b1c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001af2:	79fa      	ldrb	r2, [r7, #7]
 8001af4:	490d      	ldr	r1, [pc, #52]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	440b      	add	r3, r1
 8001b00:	3315      	adds	r3, #21
 8001b02:	79ba      	ldrb	r2, [r7, #6]
 8001b04:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001b06:	79ba      	ldrb	r2, [r7, #6]
 8001b08:	4908      	ldr	r1, [pc, #32]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	440b      	add	r3, r1
 8001b14:	3314      	adds	r3, #20
 8001b16:	79fa      	ldrb	r2, [r7, #7]
 8001b18:	701a      	strb	r2, [r3, #0]
  return;
 8001b1a:	bf00      	nop
}
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	200004e0 	.word	0x200004e0
 8001b2c:	20000450 	.word	0x20000450

08001b30 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c74 <linkTimer+0x144>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b06      	cmp	r3, #6
 8001b42:	d118      	bne.n	8001b76 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b44:	4b4b      	ldr	r3, [pc, #300]	@ (8001c74 <linkTimer+0x144>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c78 <linkTimer+0x148>)
 8001b4c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001b4e:	4a49      	ldr	r2, [pc, #292]	@ (8001c74 <linkTimer+0x144>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001b54:	79fa      	ldrb	r2, [r7, #7]
 8001b56:	4949      	ldr	r1, [pc, #292]	@ (8001c7c <linkTimer+0x14c>)
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	3315      	adds	r3, #21
 8001b64:	2206      	movs	r2, #6
 8001b66:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b68:	4b45      	ldr	r3, [pc, #276]	@ (8001c80 <linkTimer+0x150>)
 8001b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	81fb      	strh	r3, [r7, #14]
 8001b74:	e078      	b.n	8001c68 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001b76:	f000 f909 	bl	8001d8c <ReturnTimeElapsed>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001b7e:	79fa      	ldrb	r2, [r7, #7]
 8001b80:	493e      	ldr	r1, [pc, #248]	@ (8001c7c <linkTimer+0x14c>)
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	440b      	add	r3, r1
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	6819      	ldr	r1, [r3, #0]
 8001b90:	89fb      	ldrh	r3, [r7, #14]
 8001b92:	79fa      	ldrb	r2, [r7, #7]
 8001b94:	4419      	add	r1, r3
 8001b96:	4839      	ldr	r0, [pc, #228]	@ (8001c7c <linkTimer+0x14c>)
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4403      	add	r3, r0
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001ba6:	79fa      	ldrb	r2, [r7, #7]
 8001ba8:	4934      	ldr	r1, [pc, #208]	@ (8001c7c <linkTimer+0x14c>)
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3308      	adds	r3, #8
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001bba:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <linkTimer+0x144>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4a2e      	ldr	r2, [pc, #184]	@ (8001c7c <linkTimer+0x14c>)
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	440b      	add	r3, r1
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3308      	adds	r3, #8
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d337      	bcc.n	8001c48 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001bd8:	4b26      	ldr	r3, [pc, #152]	@ (8001c74 <linkTimer+0x144>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001bde:	7b7a      	ldrb	r2, [r7, #13]
 8001be0:	4926      	ldr	r1, [pc, #152]	@ (8001c7c <linkTimer+0x14c>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	3315      	adds	r3, #21
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001bf2:	e013      	b.n	8001c1c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001bf4:	7b7a      	ldrb	r2, [r7, #13]
 8001bf6:	4921      	ldr	r1, [pc, #132]	@ (8001c7c <linkTimer+0x14c>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	3315      	adds	r3, #21
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001c08:	7b7a      	ldrb	r2, [r7, #13]
 8001c0a:	491c      	ldr	r1, [pc, #112]	@ (8001c7c <linkTimer+0x14c>)
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	3315      	adds	r3, #21
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001c1c:	7b3b      	ldrb	r3, [r7, #12]
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d00b      	beq.n	8001c3a <linkTimer+0x10a>
 8001c22:	7b3a      	ldrb	r2, [r7, #12]
 8001c24:	4915      	ldr	r1, [pc, #84]	@ (8001c7c <linkTimer+0x14c>)
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	440b      	add	r3, r1
 8001c30:	3308      	adds	r3, #8
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d2dc      	bcs.n	8001bf4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001c3a:	7b7a      	ldrb	r2, [r7, #13]
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fecf 	bl	80019e4 <LinkTimerAfter>
 8001c46:	e00f      	b.n	8001c68 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <linkTimer+0x144>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff0c 	bl	8001a70 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <linkTimer+0x144>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <linkTimer+0x148>)
 8001c60:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001c62:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <linkTimer+0x144>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001c68:	89fb      	ldrh	r3, [r7, #14]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200004e0 	.word	0x200004e0
 8001c78:	200004e1 	.word	0x200004e1
 8001c7c:	20000450 	.word	0x20000450
 8001c80:	200004e4 	.word	0x200004e4

08001c84 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	71fb      	strb	r3, [r7, #7]
 8001c90:	4613      	mov	r3, r2
 8001c92:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001c94:	4b39      	ldr	r3, [pc, #228]	@ (8001d7c <UnlinkTimer+0xf8>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	79fa      	ldrb	r2, [r7, #7]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d111      	bne.n	8001cc4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ca0:	4b36      	ldr	r3, [pc, #216]	@ (8001d7c <UnlinkTimer+0xf8>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4b36      	ldr	r3, [pc, #216]	@ (8001d80 <UnlinkTimer+0xfc>)
 8001ca8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001caa:	79fa      	ldrb	r2, [r7, #7]
 8001cac:	4935      	ldr	r1, [pc, #212]	@ (8001d84 <UnlinkTimer+0x100>)
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3315      	adds	r3, #21
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8001d7c <UnlinkTimer+0xf8>)
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	e03e      	b.n	8001d42 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001cc4:	79fa      	ldrb	r2, [r7, #7]
 8001cc6:	492f      	ldr	r1, [pc, #188]	@ (8001d84 <UnlinkTimer+0x100>)
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	440b      	add	r3, r1
 8001cd2:	3314      	adds	r3, #20
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001cd8:	79fa      	ldrb	r2, [r7, #7]
 8001cda:	492a      	ldr	r1, [pc, #168]	@ (8001d84 <UnlinkTimer+0x100>)
 8001cdc:	4613      	mov	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	440b      	add	r3, r1
 8001ce6:	3315      	adds	r3, #21
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001cec:	79f9      	ldrb	r1, [r7, #7]
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	4824      	ldr	r0, [pc, #144]	@ (8001d84 <UnlinkTimer+0x100>)
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	440b      	add	r3, r1
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4403      	add	r3, r0
 8001cfc:	3315      	adds	r3, #21
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b2d8      	uxtb	r0, r3
 8001d02:	4920      	ldr	r1, [pc, #128]	@ (8001d84 <UnlinkTimer+0x100>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3315      	adds	r3, #21
 8001d10:	4602      	mov	r2, r0
 8001d12:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d14:	7bbb      	ldrb	r3, [r7, #14]
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d013      	beq.n	8001d42 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001d1a:	79f9      	ldrb	r1, [r7, #7]
 8001d1c:	7bba      	ldrb	r2, [r7, #14]
 8001d1e:	4819      	ldr	r0, [pc, #100]	@ (8001d84 <UnlinkTimer+0x100>)
 8001d20:	460b      	mov	r3, r1
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	440b      	add	r3, r1
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4403      	add	r3, r0
 8001d2a:	3314      	adds	r3, #20
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b2d8      	uxtb	r0, r3
 8001d30:	4914      	ldr	r1, [pc, #80]	@ (8001d84 <UnlinkTimer+0x100>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3314      	adds	r3, #20
 8001d3e:	4602      	mov	r2, r0
 8001d40:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001d42:	79fa      	ldrb	r2, [r7, #7]
 8001d44:	490f      	ldr	r1, [pc, #60]	@ (8001d84 <UnlinkTimer+0x100>)
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	330c      	adds	r3, #12
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001d56:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <UnlinkTimer+0xf8>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b06      	cmp	r3, #6
 8001d5e:	d107      	bne.n	8001d70 <UnlinkTimer+0xec>
 8001d60:	79bb      	ldrb	r3, [r7, #6]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d104      	bne.n	8001d70 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d66:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <UnlinkTimer+0x104>)
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  return;
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
}
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	200004e0 	.word	0x200004e0
 8001d80:	200004e1 	.word	0x200004e1
 8001d84:	20000450 	.word	0x20000450
 8001d88:	200004e4 	.word	0x200004e4

08001d8c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <ReturnTimeElapsed+0x70>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9a:	d026      	beq.n	8001dea <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001d9c:	f7ff fe02 	bl	80019a4 <ReadRtcSsrValue>
 8001da0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001da2:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <ReturnTimeElapsed+0x70>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d805      	bhi.n	8001db8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001dac:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <ReturnTimeElapsed+0x70>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	e00a      	b.n	8001dce <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001db8:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <ReturnTimeElapsed+0x74>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <ReturnTimeElapsed+0x70>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001dce:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <ReturnTimeElapsed+0x78>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <ReturnTimeElapsed+0x7c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	40d3      	lsrs	r3, r2
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	e001      	b.n	8001dee <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	b29b      	uxth	r3, r3
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200004e4 	.word	0x200004e4
 8001e00:	200004ec 	.word	0x200004ec
 8001e04:	200004ea 	.word	0x200004ea
 8001e08:	200004e9 	.word	0x200004e9

08001e0c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d108      	bne.n	8001e2e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e1c:	f7ff fdc2 	bl	80019a4 <ReadRtcSsrValue>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4a21      	ldr	r2, [pc, #132]	@ (8001ea8 <RestartWakeupCounter+0x9c>)
 8001e24:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001e26:	2003      	movs	r0, #3
 8001e28:	f006 fb09 	bl	800843e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001e2c:	e039      	b.n	8001ea2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d803      	bhi.n	8001e3c <RestartWakeupCounter+0x30>
 8001e34:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <RestartWakeupCounter+0xa0>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d002      	beq.n	8001e42 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001e42:	bf00      	nop
 8001e44:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f8      	beq.n	8001e44 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001e52:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001e62:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e64:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <RestartWakeupCounter+0xa8>)
 8001e66:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e6a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001e6c:	2003      	movs	r0, #3
 8001e6e:	f006 faf4 	bl	800845a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001e72:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <RestartWakeupCounter+0xac>)
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	0c1b      	lsrs	r3, r3, #16
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	88fa      	ldrh	r2, [r7, #6]
 8001e7c:	490e      	ldr	r1, [pc, #56]	@ (8001eb8 <RestartWakeupCounter+0xac>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e82:	f7ff fd8f 	bl	80019a4 <ReadRtcSsrValue>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <RestartWakeupCounter+0x9c>)
 8001e8a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e9a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001e9c:	f3af 8000 	nop.w
  return ;
 8001ea0:	bf00      	nop
}
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200004e4 	.word	0x200004e4
 8001eac:	200004e9 	.word	0x200004e9
 8001eb0:	20000be0 	.word	0x20000be0
 8001eb4:	58000800 	.word	0x58000800
 8001eb8:	40002800 	.word	0x40002800

08001ebc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ec2:	4b45      	ldr	r3, [pc, #276]	@ (8001fd8 <RescheduleTimerList+0x11c>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ece:	d107      	bne.n	8001ee0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001ed0:	bf00      	nop
 8001ed2:	4b42      	ldr	r3, [pc, #264]	@ (8001fdc <RescheduleTimerList+0x120>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f8      	bne.n	8001ed2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fdc <RescheduleTimerList+0x120>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8001fdc <RescheduleTimerList+0x120>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eee:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe0 <RescheduleTimerList+0x124>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	493a      	ldr	r1, [pc, #232]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	3308      	adds	r3, #8
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001f0a:	f7ff ff3f 	bl	8001d8c <ReturnTimeElapsed>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d205      	bcs.n	8001f26 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f1e:	4b32      	ldr	r3, [pc, #200]	@ (8001fe8 <RescheduleTimerList+0x12c>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
 8001f24:	e04d      	b.n	8001fc2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	4a30      	ldr	r2, [pc, #192]	@ (8001fec <RescheduleTimerList+0x130>)
 8001f2a:	8812      	ldrh	r2, [r2, #0]
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	4413      	add	r3, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d906      	bls.n	8001f46 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001f38:	4b2c      	ldr	r3, [pc, #176]	@ (8001fec <RescheduleTimerList+0x130>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe8 <RescheduleTimerList+0x12c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
 8001f44:	e03d      	b.n	8001fc2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f50:	4b25      	ldr	r3, [pc, #148]	@ (8001fe8 <RescheduleTimerList+0x12c>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f56:	e034      	b.n	8001fc2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	4922      	ldr	r1, [pc, #136]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	440b      	add	r3, r1
 8001f66:	3308      	adds	r3, #8
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d20a      	bcs.n	8001f86 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	491c      	ldr	r1, [pc, #112]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	440b      	add	r3, r1
 8001f7e:	3308      	adds	r3, #8
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e013      	b.n	8001fae <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	4916      	ldr	r1, [pc, #88]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	3308      	adds	r3, #8
 8001f96:	6819      	ldr	r1, [r3, #0]
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	1ac9      	subs	r1, r1, r3
 8001f9e:	4811      	ldr	r0, [pc, #68]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4403      	add	r3, r0
 8001faa:	3308      	adds	r3, #8
 8001fac:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	490c      	ldr	r1, [pc, #48]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	440b      	add	r3, r1
 8001fbc:	3315      	adds	r3, #21
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b06      	cmp	r3, #6
 8001fc6:	d1c7      	bne.n	8001f58 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001fc8:	89bb      	ldrh	r3, [r7, #12]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff1e 	bl	8001e0c <RestartWakeupCounter>

  return ;
 8001fd0:	bf00      	nop
}
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40002800 	.word	0x40002800
 8001fdc:	20000be0 	.word	0x20000be0
 8001fe0:	200004e0 	.word	0x200004e0
 8001fe4:	20000450 	.word	0x20000450
 8001fe8:	200004e8 	.word	0x200004e8
 8001fec:	200004ee 	.word	0x200004ee

08001ff0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	@ 0x28
 8001ff4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8001ffa:	617b      	str	r3, [r7, #20]
  return(result);
 8001ffc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
}
 8002002:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002004:	4b59      	ldr	r3, [pc, #356]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	22ca      	movs	r2, #202	@ 0xca
 800200a:	625a      	str	r2, [r3, #36]	@ 0x24
 800200c:	4b57      	ldr	r3, [pc, #348]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2253      	movs	r2, #83	@ 0x53
 8002012:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002014:	4b55      	ldr	r3, [pc, #340]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	4b54      	ldr	r3, [pc, #336]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002022:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002024:	4b52      	ldr	r3, [pc, #328]	@ (8002170 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800202c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002030:	4950      	ldr	r1, [pc, #320]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	440b      	add	r3, r1
 800203c:	330c      	adds	r3, #12
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d16e      	bne.n	8002124 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002046:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800204a:	494a      	ldr	r1, [pc, #296]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800205a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800205e:	4945      	ldr	r1, [pc, #276]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	3310      	adds	r3, #16
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002070:	4b41      	ldr	r3, [pc, #260]	@ (8002178 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d04c      	beq.n	8002114 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800207a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800207e:	493d      	ldr	r1, [pc, #244]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	330d      	adds	r3, #13
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b01      	cmp	r3, #1
 8002092:	d124      	bne.n	80020de <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002094:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002098:	2101      	movs	r1, #1
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fdf2 	bl	8001c84 <UnlinkTimer>
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	f383 8810 	msr	PRIMASK, r3
}
 80020aa:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80020ac:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80020b0:	4930      	ldr	r1, [pc, #192]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	3304      	adds	r3, #4
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 f9b8 	bl	800243c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020cc:	4b27      	ldr	r3, [pc, #156]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	22ca      	movs	r2, #202	@ 0xca
 80020d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80020d4:	4b25      	ldr	r3, [pc, #148]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2253      	movs	r2, #83	@ 0x53
 80020da:	625a      	str	r2, [r3, #36]	@ 0x24
 80020dc:	e012      	b.n	8002104 <HW_TS_RTC_Wakeup_Handler+0x114>
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f383 8810 	msr	PRIMASK, r3
}
 80020e8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80020ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f920 	bl	8002334 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020f4:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	22ca      	movs	r2, #202	@ 0xca
 80020fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2253      	movs	r2, #83	@ 0x53
 8002102:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002104:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	4619      	mov	r1, r3
 800210c:	69b8      	ldr	r0, [r7, #24]
 800210e:	f000 fa1b 	bl	8002548 <HW_TS_RTC_Int_AppNot>
 8002112:	e022      	b.n	800215a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002114:	f7ff fed2 	bl	8001ebc <RescheduleTimerList>
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f383 8810 	msr	PRIMASK, r3
}
 8002122:	e01a      	b.n	800215a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002124:	bf00      	nop
 8002126:	4b11      	ldr	r3, [pc, #68]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f8      	beq.n	8002126 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002134:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002144:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002146:	4b0d      	ldr	r3, [pc, #52]	@ (800217c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002148:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f383 8810 	msr	PRIMASK, r3
}
 8002158:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800215a:	4b04      	ldr	r3, [pc, #16]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	22ff      	movs	r2, #255	@ 0xff
 8002160:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002162:	bf00      	nop
}
 8002164:	3728      	adds	r7, #40	@ 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000be0 	.word	0x20000be0
 8002170:	200004e0 	.word	0x200004e0
 8002174:	20000450 	.word	0x20000450
 8002178:	200004e8 	.word	0x200004e8
 800217c:	58000800 	.word	0x58000800

08002180 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	6039      	str	r1, [r7, #0]
 800218a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800218c:	4b5e      	ldr	r3, [pc, #376]	@ (8002308 <HW_TS_Init+0x188>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	22ca      	movs	r2, #202	@ 0xca
 8002192:	625a      	str	r2, [r3, #36]	@ 0x24
 8002194:	4b5c      	ldr	r3, [pc, #368]	@ (8002308 <HW_TS_Init+0x188>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2253      	movs	r2, #83	@ 0x53
 800219a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800219c:	4b5b      	ldr	r3, [pc, #364]	@ (800230c <HW_TS_Init+0x18c>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a5a      	ldr	r2, [pc, #360]	@ (800230c <HW_TS_Init+0x18c>)
 80021a2:	f043 0320 	orr.w	r3, r3, #32
 80021a6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80021a8:	4b58      	ldr	r3, [pc, #352]	@ (800230c <HW_TS_Init+0x18c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f1c3 0304 	rsb	r3, r3, #4
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b55      	ldr	r3, [pc, #340]	@ (8002310 <HW_TS_Init+0x190>)
 80021bc:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80021be:	4b53      	ldr	r3, [pc, #332]	@ (800230c <HW_TS_Init+0x18c>)
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80021c6:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80021ca:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	fa92 f2a2 	rbit	r2, r2
 80021d2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	2a00      	cmp	r2, #0
 80021dc:	d101      	bne.n	80021e2 <HW_TS_Init+0x62>
  {
    return 32U;
 80021de:	2220      	movs	r2, #32
 80021e0:	e003      	b.n	80021ea <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	fab2 f282 	clz	r2, r2
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	40d3      	lsrs	r3, r2
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	3301      	adds	r3, #1
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b48      	ldr	r3, [pc, #288]	@ (8002314 <HW_TS_Init+0x194>)
 80021f4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80021f6:	4b45      	ldr	r3, [pc, #276]	@ (800230c <HW_TS_Init+0x18c>)
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002200:	b29b      	uxth	r3, r3
 8002202:	3301      	adds	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	4b44      	ldr	r3, [pc, #272]	@ (8002318 <HW_TS_Init+0x198>)
 8002208:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800220a:	4b43      	ldr	r3, [pc, #268]	@ (8002318 <HW_TS_Init+0x198>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	3b01      	subs	r3, #1
 8002210:	4a40      	ldr	r2, [pc, #256]	@ (8002314 <HW_TS_Init+0x194>)
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800221c:	4a3c      	ldr	r2, [pc, #240]	@ (8002310 <HW_TS_Init+0x190>)
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	40d3      	lsrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800222a:	4293      	cmp	r3, r2
 800222c:	d904      	bls.n	8002238 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800222e:	4b3b      	ldr	r3, [pc, #236]	@ (800231c <HW_TS_Init+0x19c>)
 8002230:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002234:	801a      	strh	r2, [r3, #0]
 8002236:	e003      	b.n	8002240 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	b29a      	uxth	r2, r3
 800223c:	4b37      	ldr	r3, [pc, #220]	@ (800231c <HW_TS_Init+0x19c>)
 800223e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002240:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002244:	f7ff fb9c 	bl	8001980 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002248:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800224c:	f7ff fb84 	bl	8001958 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d13d      	bne.n	80022d2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002256:	4b32      	ldr	r3, [pc, #200]	@ (8002320 <HW_TS_Init+0x1a0>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800225c:	4b31      	ldr	r3, [pc, #196]	@ (8002324 <HW_TS_Init+0x1a4>)
 800225e:	f04f 32ff 	mov.w	r2, #4294967295
 8002262:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002264:	2300      	movs	r3, #0
 8002266:	77fb      	strb	r3, [r7, #31]
 8002268:	e00c      	b.n	8002284 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800226a:	7ffa      	ldrb	r2, [r7, #31]
 800226c:	492e      	ldr	r1, [pc, #184]	@ (8002328 <HW_TS_Init+0x1a8>)
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	330c      	adds	r3, #12
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800227e:	7ffb      	ldrb	r3, [r7, #31]
 8002280:	3301      	adds	r3, #1
 8002282:	77fb      	strb	r3, [r7, #31]
 8002284:	7ffb      	ldrb	r3, [r7, #31]
 8002286:	2b05      	cmp	r3, #5
 8002288:	d9ef      	bls.n	800226a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800228a:	4b28      	ldr	r3, [pc, #160]	@ (800232c <HW_TS_Init+0x1ac>)
 800228c:	2206      	movs	r2, #6
 800228e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002290:	4b1d      	ldr	r3, [pc, #116]	@ (8002308 <HW_TS_Init+0x188>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <HW_TS_Init+0x188>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800229e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80022a0:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <HW_TS_Init+0x188>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <HW_TS_Init+0x188>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80022b0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80022b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002330 <HW_TS_Init+0x1b0>)
 80022b4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80022b8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80022ba:	2003      	movs	r0, #3
 80022bc:	f006 f8cd 	bl	800845a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80022c0:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <HW_TS_Init+0x188>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <HW_TS_Init+0x188>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	e009      	b.n	80022e6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80022d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002308 <HW_TS_Init+0x188>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80022e0:	2003      	movs	r0, #3
 80022e2:	f006 f8ac 	bl	800843e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80022e6:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <HW_TS_Init+0x188>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	22ff      	movs	r2, #255	@ 0xff
 80022ec:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80022ee:	2200      	movs	r2, #0
 80022f0:	2103      	movs	r1, #3
 80022f2:	2003      	movs	r0, #3
 80022f4:	f006 f861 	bl	80083ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80022f8:	2003      	movs	r0, #3
 80022fa:	f006 f878 	bl	80083ee <HAL_NVIC_EnableIRQ>

  return;
 80022fe:	bf00      	nop
}
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000be0 	.word	0x20000be0
 800230c:	40002800 	.word	0x40002800
 8002310:	200004e9 	.word	0x200004e9
 8002314:	200004ea 	.word	0x200004ea
 8002318:	200004ec 	.word	0x200004ec
 800231c:	200004ee 	.word	0x200004ee
 8002320:	200004e8 	.word	0x200004e8
 8002324:	200004e4 	.word	0x200004e4
 8002328:	20000450 	.word	0x20000450
 800232c:	200004e0 	.word	0x200004e0
 8002330:	58000800 	.word	0x58000800

08002334 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800233e:	f3ef 8310 	mrs	r3, PRIMASK
 8002342:	60fb      	str	r3, [r7, #12]
  return(result);
 8002344:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002346:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002348:	b672      	cpsid	i
}
 800234a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800234c:	2003      	movs	r0, #3
 800234e:	f006 f85c 	bl	800840a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002352:	4b34      	ldr	r3, [pc, #208]	@ (8002424 <HW_TS_Stop+0xf0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	22ca      	movs	r2, #202	@ 0xca
 8002358:	625a      	str	r2, [r3, #36]	@ 0x24
 800235a:	4b32      	ldr	r3, [pc, #200]	@ (8002424 <HW_TS_Stop+0xf0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2253      	movs	r2, #83	@ 0x53
 8002360:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002362:	79fa      	ldrb	r2, [r7, #7]
 8002364:	4930      	ldr	r1, [pc, #192]	@ (8002428 <HW_TS_Stop+0xf4>)
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	330c      	adds	r3, #12
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d142      	bne.n	8002400 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fc80 	bl	8001c84 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002384:	4b29      	ldr	r3, [pc, #164]	@ (800242c <HW_TS_Stop+0xf8>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800238a:	7cfb      	ldrb	r3, [r7, #19]
 800238c:	2b06      	cmp	r3, #6
 800238e:	d12f      	bne.n	80023f0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002390:	4b27      	ldr	r3, [pc, #156]	@ (8002430 <HW_TS_Stop+0xfc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800239c:	d107      	bne.n	80023ae <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800239e:	bf00      	nop
 80023a0:	4b20      	ldr	r3, [pc, #128]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f8      	bne.n	80023a0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80023ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023bc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80023be:	bf00      	nop
 80023c0:	4b18      	ldr	r3, [pc, #96]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f8      	beq.n	80023c0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80023ce:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80023de:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80023e0:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <HW_TS_Stop+0x100>)
 80023e2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80023e6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80023e8:	2003      	movs	r0, #3
 80023ea:	f006 f836 	bl	800845a <HAL_NVIC_ClearPendingIRQ>
 80023ee:	e007      	b.n	8002400 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80023f0:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <HW_TS_Stop+0x104>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	7cfa      	ldrb	r2, [r7, #19]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80023fc:	f7ff fd5e 	bl	8001ebc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002400:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <HW_TS_Stop+0xf0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	22ff      	movs	r2, #255	@ 0xff
 8002406:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002408:	2003      	movs	r0, #3
 800240a:	f005 fff0 	bl	80083ee <HAL_NVIC_EnableIRQ>
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f383 8810 	msr	PRIMASK, r3
}
 8002418:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800241a:	bf00      	nop
}
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000be0 	.word	0x20000be0
 8002428:	20000450 	.word	0x20000450
 800242c:	200004e0 	.word	0x200004e0
 8002430:	40002800 	.word	0x40002800
 8002434:	58000800 	.word	0x58000800
 8002438:	200004e1 	.word	0x200004e1

0800243c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002448:	79fa      	ldrb	r2, [r7, #7]
 800244a:	493b      	ldr	r1, [pc, #236]	@ (8002538 <HW_TS_Start+0xfc>)
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	330c      	adds	r3, #12
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d103      	bne.n	8002468 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff66 	bl	8002334 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002468:	f3ef 8310 	mrs	r3, PRIMASK
 800246c:	60fb      	str	r3, [r7, #12]
  return(result);
 800246e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002470:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002472:	b672      	cpsid	i
}
 8002474:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002476:	2003      	movs	r0, #3
 8002478:	f005 ffc7 	bl	800840a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800247c:	4b2f      	ldr	r3, [pc, #188]	@ (800253c <HW_TS_Start+0x100>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	22ca      	movs	r2, #202	@ 0xca
 8002482:	625a      	str	r2, [r3, #36]	@ 0x24
 8002484:	4b2d      	ldr	r3, [pc, #180]	@ (800253c <HW_TS_Start+0x100>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2253      	movs	r2, #83	@ 0x53
 800248a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800248c:	79fa      	ldrb	r2, [r7, #7]
 800248e:	492a      	ldr	r1, [pc, #168]	@ (8002538 <HW_TS_Start+0xfc>)
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	440b      	add	r3, r1
 800249a:	330c      	adds	r3, #12
 800249c:	2202      	movs	r2, #2
 800249e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80024a0:	79fa      	ldrb	r2, [r7, #7]
 80024a2:	4925      	ldr	r1, [pc, #148]	@ (8002538 <HW_TS_Start+0xfc>)
 80024a4:	4613      	mov	r3, r2
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	3308      	adds	r3, #8
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80024b4:	79fa      	ldrb	r2, [r7, #7]
 80024b6:	4920      	ldr	r1, [pc, #128]	@ (8002538 <HW_TS_Start+0xfc>)
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	3304      	adds	r3, #4
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fb30 	bl	8001b30 <linkTimer>
 80024d0:	4603      	mov	r3, r0
 80024d2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80024d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <HW_TS_Start+0x104>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80024da:	4b1a      	ldr	r3, [pc, #104]	@ (8002544 <HW_TS_Start+0x108>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	7c7a      	ldrb	r2, [r7, #17]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d002      	beq.n	80024ec <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80024e6:	f7ff fce9 	bl	8001ebc <RescheduleTimerList>
 80024ea:	e013      	b.n	8002514 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80024ec:	79fa      	ldrb	r2, [r7, #7]
 80024ee:	4912      	ldr	r1, [pc, #72]	@ (8002538 <HW_TS_Start+0xfc>)
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	3308      	adds	r3, #8
 80024fc:	6819      	ldr	r1, [r3, #0]
 80024fe:	8a7b      	ldrh	r3, [r7, #18]
 8002500:	79fa      	ldrb	r2, [r7, #7]
 8002502:	1ac9      	subs	r1, r1, r3
 8002504:	480c      	ldr	r0, [pc, #48]	@ (8002538 <HW_TS_Start+0xfc>)
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4403      	add	r3, r0
 8002510:	3308      	adds	r3, #8
 8002512:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002514:	4b09      	ldr	r3, [pc, #36]	@ (800253c <HW_TS_Start+0x100>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	22ff      	movs	r2, #255	@ 0xff
 800251a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800251c:	2003      	movs	r0, #3
 800251e:	f005 ff66 	bl	80083ee <HAL_NVIC_EnableIRQ>
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f383 8810 	msr	PRIMASK, r3
}
 800252c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800252e:	bf00      	nop
}
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000450 	.word	0x20000450
 800253c:	20000be0 	.word	0x20000be0
 8002540:	200004e0 	.word	0x200004e0
 8002544:	200004e1 	.word	0x200004e1

08002548 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	460b      	mov	r3, r1
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4798      	blx	r3

  return;
 800255a:	bf00      	nop
}
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <LL_AHB2_GRP1_EnableClock>:
{
 8002562:	b480      	push	{r7}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800256a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800256e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002570:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4313      	orrs	r3, r2
 8002578:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800257a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800257e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4013      	ands	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002586:	68fb      	ldr	r3, [r7, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800259c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4013      	ands	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025b8:	68fb      	ldr	r3, [r7, #12]
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80025ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025dc:	4013      	ands	r3, r2
 80025de:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002660 <MX_I2C1_Init+0x74>)
 80025f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002664 <MX_I2C1_Init+0x78>)
 80025f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80025f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002660 <MX_I2C1_Init+0x74>)
 80025f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002668 <MX_I2C1_Init+0x7c>)
 80025fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025fc:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <MX_I2C1_Init+0x74>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002602:	4b17      	ldr	r3, [pc, #92]	@ (8002660 <MX_I2C1_Init+0x74>)
 8002604:	2201      	movs	r2, #1
 8002606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002608:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <MX_I2C1_Init+0x74>)
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800260e:	4b14      	ldr	r3, [pc, #80]	@ (8002660 <MX_I2C1_Init+0x74>)
 8002610:	2200      	movs	r2, #0
 8002612:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002614:	4b12      	ldr	r3, [pc, #72]	@ (8002660 <MX_I2C1_Init+0x74>)
 8002616:	2200      	movs	r2, #0
 8002618:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800261a:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <MX_I2C1_Init+0x74>)
 800261c:	2200      	movs	r2, #0
 800261e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002620:	4b0f      	ldr	r3, [pc, #60]	@ (8002660 <MX_I2C1_Init+0x74>)
 8002622:	2200      	movs	r2, #0
 8002624:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002626:	480e      	ldr	r0, [pc, #56]	@ (8002660 <MX_I2C1_Init+0x74>)
 8002628:	f006 fdb4 	bl	8009194 <HAL_I2C_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002632:	f000 fb59 	bl	8002ce8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002636:	2100      	movs	r1, #0
 8002638:	4809      	ldr	r0, [pc, #36]	@ (8002660 <MX_I2C1_Init+0x74>)
 800263a:	f007 f9f7 	bl	8009a2c <HAL_I2CEx_ConfigAnalogFilter>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002644:	f000 fb50 	bl	8002ce8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002648:	2100      	movs	r1, #0
 800264a:	4805      	ldr	r0, [pc, #20]	@ (8002660 <MX_I2C1_Init+0x74>)
 800264c:	f007 fa39 	bl	8009ac2 <HAL_I2CEx_ConfigDigitalFilter>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002656:	f000 fb47 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200004f0 	.word	0x200004f0
 8002664:	40005400 	.word	0x40005400
 8002668:	10707dbc 	.word	0x10707dbc

0800266c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002670:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 8002672:	4a1e      	ldr	r2, [pc, #120]	@ (80026ec <MX_I2C3_Init+0x80>)
 8002674:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300B29;
 8002676:	4b1c      	ldr	r3, [pc, #112]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 8002678:	4a1d      	ldr	r2, [pc, #116]	@ (80026f0 <MX_I2C3_Init+0x84>)
 800267a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800267c:	4b1a      	ldr	r3, [pc, #104]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002682:	4b19      	ldr	r3, [pc, #100]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 8002684:	2201      	movs	r2, #1
 8002686:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002688:	4b17      	ldr	r3, [pc, #92]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800268e:	4b16      	ldr	r3, [pc, #88]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002694:	4b14      	ldr	r3, [pc, #80]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 8002696:	2200      	movs	r2, #0
 8002698:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800269a:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 800269c:	2200      	movs	r2, #0
 800269e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026a0:	4b11      	ldr	r3, [pc, #68]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80026a6:	4810      	ldr	r0, [pc, #64]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 80026a8:	f006 fd74 	bl	8009194 <HAL_I2C_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80026b2:	f000 fb19 	bl	8002ce8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026b6:	2100      	movs	r1, #0
 80026b8:	480b      	ldr	r0, [pc, #44]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 80026ba:	f007 f9b7 	bl	8009a2c <HAL_I2CEx_ConfigAnalogFilter>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80026c4:	f000 fb10 	bl	8002ce8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80026c8:	2100      	movs	r1, #0
 80026ca:	4807      	ldr	r0, [pc, #28]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 80026cc:	f007 f9f9 	bl	8009ac2 <HAL_I2CEx_ConfigDigitalFilter>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80026d6:	f000 fb07 	bl	8002ce8 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80026da:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80026de:	f007 fa3d 	bl	8009b5c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000544 	.word	0x20000544
 80026ec:	40005c00 	.word	0x40005c00
 80026f0:	00300b29 	.word	0x00300b29

080026f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b09c      	sub	sp, #112	@ 0x70
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	2250      	movs	r2, #80	@ 0x50
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f018 fdf8 	bl	801b30a <memset>
  if(i2cHandle->Instance==I2C1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a37      	ldr	r2, [pc, #220]	@ (80027fc <HAL_I2C_MspInit+0x108>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d127      	bne.n	8002774 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002724:	2304      	movs	r3, #4
 8002726:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002728:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800272c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	4618      	mov	r0, r3
 8002734:	f00a fb01 	bl	800cd3a <HAL_RCCEx_PeriphCLKConfig>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800273e:	f000 fad3 	bl	8002ce8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002742:	2002      	movs	r0, #2
 8002744:	f7ff ff0d 	bl	8002562 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002748:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800274c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800274e:	2312      	movs	r3, #18
 8002750:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002756:	2300      	movs	r3, #0
 8002758:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800275a:	2304      	movs	r3, #4
 800275c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002762:	4619      	mov	r1, r3
 8002764:	4826      	ldr	r0, [pc, #152]	@ (8002800 <HAL_I2C_MspInit+0x10c>)
 8002766:	f006 fa5b 	bl	8008c20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800276a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800276e:	f7ff ff11 	bl	8002594 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002772:	e03e      	b.n	80027f2 <HAL_I2C_MspInit+0xfe>
  else if(i2cHandle->Instance==I2C3)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a22      	ldr	r2, [pc, #136]	@ (8002804 <HAL_I2C_MspInit+0x110>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d139      	bne.n	80027f2 <HAL_I2C_MspInit+0xfe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800277e:	2308      	movs	r3, #8
 8002780:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002782:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8002786:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002788:	f107 030c 	add.w	r3, r7, #12
 800278c:	4618      	mov	r0, r3
 800278e:	f00a fad4 	bl	800cd3a <HAL_RCCEx_PeriphCLKConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8002798:	f000 faa6 	bl	8002ce8 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279c:	2001      	movs	r0, #1
 800279e:	f7ff fee0 	bl	8002562 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a2:	2002      	movs	r0, #2
 80027a4:	f7ff fedd 	bl	8002562 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027a8:	2380      	movs	r3, #128	@ 0x80
 80027aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ac:	2312      	movs	r3, #18
 80027ae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b4:	2300      	movs	r3, #0
 80027b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027b8:	2304      	movs	r3, #4
 80027ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027c0:	4619      	mov	r1, r3
 80027c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027c6:	f006 fa2b 	bl	8008c20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027ca:	2310      	movs	r3, #16
 80027cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ce:	2312      	movs	r3, #18
 80027d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027da:	2304      	movs	r3, #4
 80027dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027e2:	4619      	mov	r1, r3
 80027e4:	4806      	ldr	r0, [pc, #24]	@ (8002800 <HAL_I2C_MspInit+0x10c>)
 80027e6:	f006 fa1b 	bl	8008c20 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80027ea:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80027ee:	f7ff fed1 	bl	8002594 <LL_APB1_GRP1_EnableClock>
}
 80027f2:	bf00      	nop
 80027f4:	3770      	adds	r7, #112	@ 0x70
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40005400 	.word	0x40005400
 8002800:	48000400 	.word	0x48000400
 8002804:	40005c00 	.word	0x40005c00

08002808 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a13      	ldr	r2, [pc, #76]	@ (8002864 <HAL_I2C_MspDeInit+0x5c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10e      	bne.n	8002838 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800281a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800281e:	f7ff fed2 	bl	80025c6 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002822:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002826:	4810      	ldr	r0, [pc, #64]	@ (8002868 <HAL_I2C_MspDeInit+0x60>)
 8002828:	f006 fb6a 	bl	8008f00 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800282c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002830:	480d      	ldr	r0, [pc, #52]	@ (8002868 <HAL_I2C_MspDeInit+0x60>)
 8002832:	f006 fb65 	bl	8008f00 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8002836:	e011      	b.n	800285c <HAL_I2C_MspDeInit+0x54>
  else if(i2cHandle->Instance==I2C3)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0b      	ldr	r2, [pc, #44]	@ (800286c <HAL_I2C_MspDeInit+0x64>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10c      	bne.n	800285c <HAL_I2C_MspDeInit+0x54>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002842:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002846:	f7ff febe 	bl	80025c6 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_7);
 800284a:	2180      	movs	r1, #128	@ 0x80
 800284c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002850:	f006 fb56 	bl	8008f00 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8002854:	2110      	movs	r1, #16
 8002856:	4804      	ldr	r0, [pc, #16]	@ (8002868 <HAL_I2C_MspDeInit+0x60>)
 8002858:	f006 fb52 	bl	8008f00 <HAL_GPIO_DeInit>
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40005400 	.word	0x40005400
 8002868:	48000400 	.word	0x48000400
 800286c:	40005c00 	.word	0x40005c00

08002870 <LL_AHB3_GRP1_EnableClock>:
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800287c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800287e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4313      	orrs	r3, r2
 8002886:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002894:	68fb      	ldr	r3, [r7, #12]
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80028a8:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <MX_IPCC_Init+0x20>)
 80028aa:	4a07      	ldr	r2, [pc, #28]	@ (80028c8 <MX_IPCC_Init+0x24>)
 80028ac:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80028ae:	4805      	ldr	r0, [pc, #20]	@ (80028c4 <MX_IPCC_Init+0x20>)
 80028b0:	f007 f966 	bl	8009b80 <HAL_IPCC_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80028ba:	f000 fa15 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000598 	.word	0x20000598
 80028c8:	58000c00 	.word	0x58000c00

080028cc <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002910 <HAL_IPCC_MspInit+0x44>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d113      	bne.n	8002906 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80028de:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80028e2:	f7ff ffc5 	bl	8002870 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	202c      	movs	r0, #44	@ 0x2c
 80028ec:	f005 fd65 	bl	80083ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80028f0:	202c      	movs	r0, #44	@ 0x2c
 80028f2:	f005 fd7c 	bl	80083ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	202d      	movs	r0, #45	@ 0x2d
 80028fc:	f005 fd5d 	bl	80083ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002900:	202d      	movs	r0, #45	@ 0x2d
 8002902:	f005 fd74 	bl	80083ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	58000c00 	.word	0x58000c00

08002914 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	3220      	adds	r2, #32
 8002924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002928:	4a05      	ldr	r2, [pc, #20]	@ (8002940 <LL_HSEM_1StepLock+0x2c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d001      	beq.n	8002932 <LL_HSEM_1StepLock+0x1e>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <LL_HSEM_1StepLock+0x20>
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	80000400 	.word	0x80000400

08002944 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002954:	d12f      	bne.n	80029b6 <HAL_GPIO_EXTI_Callback+0x72>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)== GPIO_PIN_RESET){
 8002956:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800295a:	4833      	ldr	r0, [pc, #204]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0xe4>)
 800295c:	f006 fbae 	bl	80090bc <HAL_GPIO_ReadPin>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HAL_GPIO_EXTI_Callback+0x36>

					boutonAtime=0;
 8002966:	4b31      	ldr	r3, [pc, #196]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0xe8>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
					tbtn1=HAL_GetTick();
 800296c:	f004 fb46 	bl	8006ffc <HAL_GetTick>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	4b2e      	ldr	r3, [pc, #184]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0xec>)
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	e010      	b.n	800299c <HAL_GPIO_EXTI_Callback+0x58>


				}
				else{
					BTN_A++;
 800297a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0xf0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3301      	adds	r3, #1
 8002980:	4a2c      	ldr	r2, [pc, #176]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002982:	6013      	str	r3, [r2, #0]

					boutonAtime=HAL_GetTick()-tbtn1;
 8002984:	f004 fb3a 	bl	8006ffc <HAL_GetTick>
 8002988:	4603      	mov	r3, r0
 800298a:	4a29      	ldr	r2, [pc, #164]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0xec>)
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	461a      	mov	r2, r3
 8002992:	4b26      	ldr	r3, [pc, #152]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0xe8>)
 8002994:	601a      	str	r2, [r3, #0]
					tbtn1=0;
 8002996:	4b26      	ldr	r3, [pc, #152]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0xec>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]


				}

				if(boutonAtime>=400){
 800299c:	4b23      	ldr	r3, [pc, #140]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0xe8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80029a4:	db07      	blt.n	80029b6 <HAL_GPIO_EXTI_Callback+0x72>
					BTN_A_LONG++;
 80029a6:	4b24      	ldr	r3, [pc, #144]	@ (8002a38 <HAL_GPIO_EXTI_Callback+0xf4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3301      	adds	r3, #1
 80029ac:	4a22      	ldr	r2, [pc, #136]	@ (8002a38 <HAL_GPIO_EXTI_Callback+0xf4>)
 80029ae:	6013      	str	r3, [r2, #0]
					BTN_A=0;
 80029b0:	4b20      	ldr	r3, [pc, #128]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0xf0>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
				}

	}
	if(GPIO_Pin==GPIO_PIN_15){
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029bc:	d12f      	bne.n	8002a1e <HAL_GPIO_EXTI_Callback+0xda>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)== GPIO_PIN_RESET){
 80029be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029c2:	4819      	ldr	r0, [pc, #100]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0xe4>)
 80029c4:	f006 fb7a 	bl	80090bc <HAL_GPIO_ReadPin>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_GPIO_EXTI_Callback+0x9e>

			boutonBtime=0;
 80029ce:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <HAL_GPIO_EXTI_Callback+0xf8>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
			tbtn2=HAL_GetTick();
 80029d4:	f004 fb12 	bl	8006ffc <HAL_GetTick>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	4b18      	ldr	r3, [pc, #96]	@ (8002a40 <HAL_GPIO_EXTI_Callback+0xfc>)
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	e010      	b.n	8002a04 <HAL_GPIO_EXTI_Callback+0xc0>


		}
		else{
			BTN_B++;
 80029e2:	4b18      	ldr	r3, [pc, #96]	@ (8002a44 <HAL_GPIO_EXTI_Callback+0x100>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3301      	adds	r3, #1
 80029e8:	4a16      	ldr	r2, [pc, #88]	@ (8002a44 <HAL_GPIO_EXTI_Callback+0x100>)
 80029ea:	6013      	str	r3, [r2, #0]

			boutonBtime=HAL_GetTick()-tbtn2;
 80029ec:	f004 fb06 	bl	8006ffc <HAL_GetTick>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4a13      	ldr	r2, [pc, #76]	@ (8002a40 <HAL_GPIO_EXTI_Callback+0xfc>)
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <HAL_GPIO_EXTI_Callback+0xf8>)
 80029fc:	601a      	str	r2, [r3, #0]
			tbtn2=0;
 80029fe:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]


		}

		if(boutonBtime>=400){
 8002a04:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <HAL_GPIO_EXTI_Callback+0xf8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002a0c:	db07      	blt.n	8002a1e <HAL_GPIO_EXTI_Callback+0xda>
			BTN_B_LONG++;
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <HAL_GPIO_EXTI_Callback+0x104>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	3301      	adds	r3, #1
 8002a14:	4a0c      	ldr	r2, [pc, #48]	@ (8002a48 <HAL_GPIO_EXTI_Callback+0x104>)
 8002a16:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 8002a18:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <HAL_GPIO_EXTI_Callback+0x100>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
		}



	}
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	48000800 	.word	0x48000800
 8002a2c:	20000b8c 	.word	0x20000b8c
 8002a30:	20000b94 	.word	0x20000b94
 8002a34:	20000860 	.word	0x20000860
 8002a38:	20000ba0 	.word	0x20000ba0
 8002a3c:	20000b90 	.word	0x20000b90
 8002a40:	20000b98 	.word	0x20000b98
 8002a44:	20000864 	.word	0x20000864
 8002a48:	20000b9c 	.word	0x20000b9c

08002a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a52:	f004 fa65 	bl	8006f20 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002a56:	f7fe fd2f 	bl	80014b8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a5a:	f000 f8a7 	bl	8002bac <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002a5e:	f000 f909 	bl	8002c74 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002a62:	f7ff ff1f 	bl	80028a4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8002a66:	f000 fddb 	bl	8003620 <MX_RF_Init>
  MX_GPIO_Init();
 8002a6a:	f7fe ff1f 	bl	80018ac <MX_GPIO_Init>
  MX_DMA_Init();
 8002a6e:	f7fe feda 	bl	8001826 <MX_DMA_Init>
  MX_ADC1_Init();
 8002a72:	f7fe faa9 	bl	8000fc8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002a76:	f7ff fdb9 	bl	80025ec <MX_I2C1_Init>
  MX_I2C3_Init();
 8002a7a:	f7ff fdf7 	bl	800266c <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002a7e:	f004 f82f 	bl	8006ae0 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8002a82:	f003 fd5d 	bl	8006540 <MX_TIM2_Init>
  MX_TIM16_Init();
 8002a86:	f003 fda9 	bl	80065dc <MX_TIM16_Init>
  MX_TIM17_Init();
 8002a8a:	f003 fdcf 	bl	800662c <MX_TIM17_Init>
  MX_SPI1_Init();
 8002a8e:	f000 fecd 	bl	800382c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002a92:	f004 f871 	bl	8006b78 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8002a96:	f015 fd13 	bl	80184c0 <MX_USB_Device_Init>
  MX_RTC_Init();
 8002a9a:	f000 fdf3 	bl	8003684 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Abort(&huart1);
 8002a9e:	4833      	ldr	r0, [pc, #204]	@ (8002b6c <main+0x120>)
 8002aa0:	f00c fd8e 	bl	800f5c0 <HAL_UART_Abort>
    HAL_UART_DeInit(&huart1);
 8002aa4:	4831      	ldr	r0, [pc, #196]	@ (8002b6c <main+0x120>)
 8002aa6:	f00c fcff 	bl	800f4a8 <HAL_UART_DeInit>

    HAL_I2C_DeInit(&hi2c1);
 8002aaa:	4831      	ldr	r0, [pc, #196]	@ (8002b70 <main+0x124>)
 8002aac:	f006 fc0d 	bl	80092ca <HAL_I2C_DeInit>



  	ssd1306_Init();
 8002ab0:	f001 f99e 	bl	8003df0 <ssd1306_Init>

  	HAL_Delay(10);
 8002ab4:	200a      	movs	r0, #10
 8002ab6:	f7fe fe3a 	bl	800172e <HAL_Delay>
  	ssd1306_Fill(Black);
 8002aba:	2000      	movs	r0, #0
 8002abc:	f001 fa02 	bl	8003ec4 <ssd1306_Fill>

  	ssd1306_DrawBitmap(30, 12, startimg, 72, 40, White);
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	2328      	movs	r3, #40	@ 0x28
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2348      	movs	r3, #72	@ 0x48
 8002aca:	4a2a      	ldr	r2, [pc, #168]	@ (8002b74 <main+0x128>)
 8002acc:	210c      	movs	r1, #12
 8002ace:	201e      	movs	r0, #30
 8002ad0:	f001 fc43 	bl	800435a <ssd1306_DrawBitmap>
  	ssd1306_UpdateScreen();
 8002ad4:	f001 fa0e 	bl	8003ef4 <ssd1306_UpdateScreen>


  	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8002ad8:	2203      	movs	r2, #3
 8002ada:	4927      	ldr	r1, [pc, #156]	@ (8002b78 <main+0x12c>)
 8002adc:	4827      	ldr	r0, [pc, #156]	@ (8002b7c <main+0x130>)
 8002ade:	f004 fdc5 	bl	800766c <HAL_ADC_Start_DMA>
  	HAL_TIM_Base_Start(&htim2);
 8002ae2:	4827      	ldr	r0, [pc, #156]	@ (8002b80 <main+0x134>)
 8002ae4:	f00c f820 	bl	800eb28 <HAL_TIM_Base_Start>
  	HAL_TIM_Base_Start_IT(&htim16);
 8002ae8:	4826      	ldr	r0, [pc, #152]	@ (8002b84 <main+0x138>)
 8002aea:	f00c f863 	bl	800ebb4 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim17);
 8002aee:	4826      	ldr	r0, [pc, #152]	@ (8002b88 <main+0x13c>)
 8002af0:	f00c f860 	bl	800ebb4 <HAL_TIM_Base_Start_IT>

  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8002af4:	2201      	movs	r2, #1
 8002af6:	2101      	movs	r1, #1
 8002af8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002afc:	f006 faf6 	bl	80090ec <HAL_GPIO_WritePin>

  	HAL_Delay(100);
 8002b00:	2064      	movs	r0, #100	@ 0x64
 8002b02:	f7fe fe14 	bl	800172e <HAL_Delay>
  	HAL_UART_Abort(&hlpuart1);
 8002b06:	4821      	ldr	r0, [pc, #132]	@ (8002b8c <main+0x140>)
 8002b08:	f00c fd5a 	bl	800f5c0 <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8002b0c:	2240      	movs	r2, #64	@ 0x40
 8002b0e:	4920      	ldr	r1, [pc, #128]	@ (8002b90 <main+0x144>)
 8002b10:	481e      	ldr	r0, [pc, #120]	@ (8002b8c <main+0x140>)
 8002b12:	f00c fd09 	bl	800f528 <HAL_UART_Receive_DMA>

  	memset(flashread,'1',256);
 8002b16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b1a:	2131      	movs	r1, #49	@ 0x31
 8002b1c:	481d      	ldr	r0, [pc, #116]	@ (8002b94 <main+0x148>)
 8002b1e:	f018 fbf4 	bl	801b30a <memset>
  	memset(flashwrite,'\0',256);
 8002b22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b26:	2100      	movs	r1, #0
 8002b28:	481b      	ldr	r0, [pc, #108]	@ (8002b98 <main+0x14c>)
 8002b2a:	f018 fbee 	bl	801b30a <memset>
  	memset((uint8_t *)bufferscreen ,'\0',50);
 8002b2e:	2232      	movs	r2, #50	@ 0x32
 8002b30:	2100      	movs	r1, #0
 8002b32:	481a      	ldr	r0, [pc, #104]	@ (8002b9c <main+0x150>)
 8002b34:	f018 fbe9 	bl	801b30a <memset>

  	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_7);
 8002b38:	2380      	movs	r3, #128	@ 0x80
 8002b3a:	4a19      	ldr	r2, [pc, #100]	@ (8002ba0 <main+0x154>)
 8002b3c:	4919      	ldr	r1, [pc, #100]	@ (8002ba4 <main+0x158>)
 8002b3e:	481a      	ldr	r0, [pc, #104]	@ (8002ba8 <main+0x15c>)
 8002b40:	f014 fcc7 	bl	80174d2 <SPIF_Init>



  	getindex();
 8002b44:	f001 f820 	bl	8003b88 <getindex>

  	ssd1306_Fill(Black);
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f001 f9bb 	bl	8003ec4 <ssd1306_Fill>

  	HAL_Delay(700);
 8002b4e:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002b52:	f7fe fdec 	bl	800172e <HAL_Delay>

  	//LL_HSEM_1StepLock( HSEM, 5 );
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002b56:	f7fe fcbd 	bl	80014d4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002b5a:	f7fe fe0d 	bl	8001778 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
	  statemachine();
 8002b5e:	f001 fe67 	bl	8004830 <statemachine>
	  ssd1306_UpdateScreen();
 8002b62:	f001 f9c7 	bl	8003ef4 <ssd1306_UpdateScreen>
    MX_APPE_Process();
 8002b66:	bf00      	nop
 8002b68:	e7f7      	b.n	8002b5a <main+0x10e>
 8002b6a:	bf00      	nop
 8002b6c:	200012e0 	.word	0x200012e0
 8002b70:	200004f0 	.word	0x200004f0
 8002b74:	0801fcac 	.word	0x0801fcac
 8002b78:	20000888 	.word	0x20000888
 8002b7c:	2000038c 	.word	0x2000038c
 8002b80:	20001168 	.word	0x20001168
 8002b84:	200011b4 	.word	0x200011b4
 8002b88:	20001200 	.word	0x20001200
 8002b8c:	2000124c 	.word	0x2000124c
 8002b90:	200005e0 	.word	0x200005e0
 8002b94:	2000099c 	.word	0x2000099c
 8002b98:	2000089c 	.word	0x2000089c
 8002b9c:	20000ac0 	.word	0x20000ac0
 8002ba0:	48000400 	.word	0x48000400
 8002ba4:	20000c38 	.word	0x20000c38
 8002ba8:	20000868 	.word	0x20000868

08002bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b09a      	sub	sp, #104	@ 0x68
 8002bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bb2:	f107 0320 	add.w	r3, r7, #32
 8002bb6:	2248      	movs	r2, #72	@ 0x48
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f018 fba5 	bl	801b30a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	60da      	str	r2, [r3, #12]
 8002bcc:	611a      	str	r2, [r3, #16]
 8002bce:	615a      	str	r2, [r3, #20]
 8002bd0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bd2:	4b27      	ldr	r3, [pc, #156]	@ (8002c70 <SystemClock_Config+0xc4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bda:	4a25      	ldr	r2, [pc, #148]	@ (8002c70 <SystemClock_Config+0xc4>)
 8002bdc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	4b23      	ldr	r3, [pc, #140]	@ (8002c70 <SystemClock_Config+0xc4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bf2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bfe:	2340      	movs	r3, #64	@ 0x40
 8002c00:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c02:	2302      	movs	r3, #2
 8002c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c06:	2303      	movs	r3, #3
 8002c08:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002c0a:	2310      	movs	r3, #16
 8002c0c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002c0e:	2308      	movs	r3, #8
 8002c10:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c18:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002c1c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c22:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c24:	f107 0320 	add.w	r3, r7, #32
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f009 f8d5 	bl	800bdd8 <HAL_RCC_OscConfig>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002c34:	f000 f858 	bl	8002ce8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002c38:	236f      	movs	r3, #111	@ 0x6f
 8002c3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002c4c:	2380      	movs	r3, #128	@ 0x80
 8002c4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	2103      	movs	r1, #3
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f009 fc31 	bl	800c4c0 <HAL_RCC_ClockConfig>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002c64:	f000 f840 	bl	8002ce8 <Error_Handler>
  }
}
 8002c68:	bf00      	nop
 8002c6a:	3768      	adds	r7, #104	@ 0x68
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	58000400 	.word	0x58000400

08002c74 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b094      	sub	sp, #80	@ 0x50
 8002c78:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c7a:	463b      	mov	r3, r7
 8002c7c:	2250      	movs	r2, #80	@ 0x50
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f018 fb42 	bl	801b30a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002c86:	f44f 5354 	mov.w	r3, #13568	@ 0x3500
 8002c8a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8002c8c:	2306      	movs	r3, #6
 8002c8e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002c90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c94:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002c96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c9a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002c9c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002ca0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8002ca2:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8002ca6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002ca8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002cac:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002cae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002cb4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002cb8:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002cbe:	2310      	movs	r3, #16
 8002cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cc2:	463b      	mov	r3, r7
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f00a f838 	bl	800cd3a <HAL_RCCEx_PeriphCLKConfig>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8002cd0:	f000 f80a 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock( HSEM, 5 );
 8002cd4:	2105      	movs	r1, #5
 8002cd6:	4803      	ldr	r0, [pc, #12]	@ (8002ce4 <PeriphCommonClock_Config+0x70>)
 8002cd8:	f7ff fe1c 	bl	8002914 <LL_HSEM_1StepLock>

  /* USER CODE END Smps */
}
 8002cdc:	bf00      	nop
 8002cde:	3750      	adds	r7, #80	@ 0x50
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	58001400 	.word	0x58001400

08002ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002cec:	b672      	cpsid	i
}
 8002cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cf0:	bf00      	nop
 8002cf2:	e7fd      	b.n	8002cf0 <Error_Handler+0x8>

08002cf4 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7fd fa8f 	bl	8000220 <strlen>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d801      	bhi.n	8002d0c <gps_checksum+0x18>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e038      	b.n	8002d7e <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7fd fa87 	bl	8000220 <strlen>
 8002d12:	4603      	mov	r3, r0
 8002d14:	3b04      	subs	r3, #4
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7fd fa7e 	bl	8000220 <strlen>
 8002d24:	4603      	mov	r3, r0
 8002d26:	3b03      	subs	r3, #3
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002d34:	2300      	movs	r3, #0
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	e00a      	b.n	8002d50 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	4053      	eors	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7fd fa65 	bl	8000220 <strlen>
 8002d56:	4603      	mov	r3, r0
 8002d58:	1f5a      	subs	r2, r3, #5
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d8ec      	bhi.n	8002d3a <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8002d60:	f107 0308 	add.w	r3, r7, #8
 8002d64:	2210      	movs	r2, #16
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f017 faff 	bl	801a36c <strtol>
 8002d6e:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d101      	bne.n	8002d7c <gps_checksum+0x88>
        return 1;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <gps_checksum+0x8a>
    }
    else{
        return 0;
 8002d7c:	2300      	movs	r3, #0
    }
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b0b7      	sub	sp, #220	@ 0xdc
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8002d98:	f107 0320 	add.w	r3, r7, #32
 8002d9c:	2264      	movs	r2, #100	@ 0x64
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f018 fab2 	bl	801b30a <memset>
    char *marker = strtok(inputString, ",");
 8002da6:	49c2      	ldr	r1, [pc, #776]	@ (80030b0 <nmea_GPGGA+0x328>)
 8002da8:	6838      	ldr	r0, [r7, #0]
 8002daa:	f018 fac9 	bl	801b340 <strtok>
 8002dae:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8002db2:	e027      	b.n	8002e04 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002db4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8002db8:	f7fd fa32 	bl	8000220 <strlen>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 8002dc4:	1c63      	adds	r3, r4, #1
 8002dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002dca:	4610      	mov	r0, r2
 8002dcc:	f016 fb28 	bl	8019420 <malloc>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	00a3      	lsls	r3, r4, #2
 8002dd6:	33d8      	adds	r3, #216	@ 0xd8
 8002dd8:	443b      	add	r3, r7
 8002dda:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8002dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002de2:	3b01      	subs	r3, #1
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	33d8      	adds	r3, #216	@ 0xd8
 8002de8:	443b      	add	r3, r7
 8002dea:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002dee:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f018 fb9d 	bl	801b532 <strcpy>
        marker = strtok(NULL, ",");
 8002df8:	49ad      	ldr	r1, [pc, #692]	@ (80030b0 <nmea_GPGGA+0x328>)
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	f018 faa0 	bl	801b340 <strtok>
 8002e00:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8002e04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1d3      	bne.n	8002db4 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8002e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 8002e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	332c      	adds	r3, #44	@ 0x2c
 8002e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f018 fb84 	bl	801b532 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8002e2a:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8002e2e:	2b53      	cmp	r3, #83	@ 0x53
 8002e30:	d004      	beq.n	8002e3c <nmea_GPGGA+0xb4>
 8002e32:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8002e36:	2b4e      	cmp	r3, #78	@ 0x4e
 8002e38:	f040 8159 	bne.w	80030ee <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e42:	e010      	b.n	8002e66 <nmea_GPGGA+0xde>
 8002e44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e4a:	4413      	add	r3, r2
 8002e4c:	7819      	ldrb	r1, [r3, #0]
 8002e4e:	f107 021c 	add.w	r2, r7, #28
 8002e52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e56:	4413      	add	r3, r2
 8002e58:	460a      	mov	r2, r1
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e60:	3301      	adds	r3, #1
 8002e62:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	ddea      	ble.n	8002e44 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e74:	e011      	b.n	8002e9a <nmea_GPGGA+0x112>
 8002e76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	7819      	ldrb	r1, [r3, #0]
 8002e82:	f107 0214 	add.w	r2, r7, #20
 8002e86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e8a:	4413      	add	r3, r2
 8002e8c:	460a      	mov	r2, r1
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e94:	3301      	adds	r3, #1
 8002e96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e9e:	2b05      	cmp	r3, #5
 8002ea0:	dde9      	ble.n	8002e76 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8002ea2:	f107 031c 	add.w	r3, r7, #28
 8002ea6:	220a      	movs	r2, #10
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f017 fa5e 	bl	801a36c <strtol>
 8002eb0:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f017 f976 	bl	801a1ac <strtof>
 8002ec0:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8002ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ed0:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8002ed4:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 80030b4 <nmea_GPGGA+0x32c>
 8002ed8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee0:	ee17 0a90 	vmov	r0, s15
 8002ee4:	f7fd fb08 	bl	80004f8 <__aeabi_f2d>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ef6:	e010      	b.n	8002f1a <nmea_GPGGA+0x192>
 8002ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002efa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002efe:	4413      	add	r3, r2
 8002f00:	7819      	ldrb	r1, [r3, #0]
 8002f02:	f107 0210 	add.w	r2, r7, #16
 8002f06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f0a:	4413      	add	r3, r2
 8002f0c:	460a      	mov	r2, r1
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f14:	3301      	adds	r3, #1
 8002f16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	ddea      	ble.n	8002ef8 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8002f22:	2300      	movs	r3, #0
 8002f24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f28:	e011      	b.n	8002f4e <nmea_GPGGA+0x1c6>
 8002f2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f30:	3303      	adds	r3, #3
 8002f32:	4413      	add	r3, r2
 8002f34:	7819      	ldrb	r1, [r3, #0]
 8002f36:	f107 0208 	add.w	r2, r7, #8
 8002f3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f3e:	4413      	add	r3, r2
 8002f40:	460a      	mov	r2, r1
 8002f42:	701a      	strb	r2, [r3, #0]
 8002f44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f52:	2b05      	cmp	r3, #5
 8002f54:	dde9      	ble.n	8002f2a <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8002f56:	f107 0310 	add.w	r3, r7, #16
 8002f5a:	220a      	movs	r2, #10
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f017 fa04 	bl	801a36c <strtol>
 8002f64:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8002f68:	f107 0308 	add.w	r3, r7, #8
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f017 f91c 	bl	801a1ac <strtof>
 8002f74:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8002f78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f84:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8002f88:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 80030b4 <nmea_GPGGA+0x32c>
 8002f8c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f94:	ee17 0a90 	vmov	r0, s15
 8002f98:	f7fd faae 	bl	80004f8 <__aeabi_f2d>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002fb0:	f7fd fd62 	bl	8000a78 <__aeabi_dcmpeq>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d176      	bne.n	80030a8 <nmea_GPGGA+0x320>
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002fc6:	f7fd fd57 	bl	8000a78 <__aeabi_dcmpeq>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d16b      	bne.n	80030a8 <nmea_GPGGA+0x320>
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	4b38      	ldr	r3, [pc, #224]	@ (80030b8 <nmea_GPGGA+0x330>)
 8002fd6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002fda:	f7fd fd57 	bl	8000a8c <__aeabi_dcmplt>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d061      	beq.n	80030a8 <nmea_GPGGA+0x320>
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	4b34      	ldr	r3, [pc, #208]	@ (80030bc <nmea_GPGGA+0x334>)
 8002fea:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002fee:	f7fd fd4d 	bl	8000a8c <__aeabi_dcmplt>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d057      	beq.n	80030a8 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8002ffe:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 8003008:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003010:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 800301a:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 800301c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800301e:	2100      	movs	r1, #0
 8003020:	4618      	mov	r0, r3
 8003022:	f017 f8c3 	bl	801a1ac <strtof>
 8003026:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 800302a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800302e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003036:	d102      	bne.n	800303e <nmea_GPGGA+0x2b6>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	e001      	b.n	8003042 <nmea_GPGGA+0x2ba>
 800303e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8003046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003048:	220a      	movs	r2, #10
 800304a:	2100      	movs	r1, #0
 800304c:	4618      	mov	r0, r3
 800304e:	f017 f98d 	bl	801a36c <strtol>
 8003052:	4602      	mov	r2, r0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8003058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800305a:	220a      	movs	r2, #10
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f017 f984 	bl	801a36c <strtol>
 8003064:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8003068:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800306c:	2b00      	cmp	r3, #0
 800306e:	bfcc      	ite	gt
 8003070:	2301      	movgt	r3, #1
 8003072:	2300      	movle	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 800307c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800307e:	2100      	movs	r1, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f017 f893 	bl	801a1ac <strtof>
 8003086:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 800308a:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800308e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003096:	d102      	bne.n	800309e <nmea_GPGGA+0x316>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	e001      	b.n	80030a2 <nmea_GPGGA+0x31a>
 800309e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80030a6:	e022      	b.n	80030ee <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 80030a8:	2300      	movs	r3, #0
 80030aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80030ae:	e016      	b.n	80030de <nmea_GPGGA+0x356>
 80030b0:	0801f864 	.word	0x0801f864
 80030b4:	42700000 	.word	0x42700000
 80030b8:	40568000 	.word	0x40568000
 80030bc:	40668000 	.word	0x40668000
 80030c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	33d8      	adds	r3, #216	@ 0xd8
 80030c8:	443b      	add	r3, r7
 80030ca:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f016 f9ae 	bl	8019430 <free>
 80030d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030d8:	3301      	adds	r3, #1
 80030da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80030de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80030e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030e6:	429a      	cmp	r2, r3
 80030e8:	dbea      	blt.n	80030c0 <nmea_GPGGA+0x338>
            return 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	e019      	b.n	8003122 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 80030ee:	2300      	movs	r3, #0
 80030f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030f4:	e00e      	b.n	8003114 <nmea_GPGGA+0x38c>
 80030f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	33d8      	adds	r3, #216	@ 0xd8
 80030fe:	443b      	add	r3, r7
 8003100:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8003104:	4618      	mov	r0, r3
 8003106:	f016 f993 	bl	8019430 <free>
 800310a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800310e:	3301      	adds	r3, #1
 8003110:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003114:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003118:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800311c:	429a      	cmp	r2, r3
 800311e:	dbea      	blt.n	80030f6 <nmea_GPGGA+0x36e>
    return 1;
 8003120:	2301      	movs	r3, #1
}
 8003122:	4618      	mov	r0, r3
 8003124:	37dc      	adds	r7, #220	@ 0xdc
 8003126:	46bd      	mov	sp, r7
 8003128:	bd90      	pop	{r4, r7, pc}
 800312a:	bf00      	nop

0800312c <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b0a3      	sub	sp, #140	@ 0x8c
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    memset(values, 0, sizeof(values));
 800313c:	f107 030c 	add.w	r3, r7, #12
 8003140:	2264      	movs	r2, #100	@ 0x64
 8003142:	2100      	movs	r1, #0
 8003144:	4618      	mov	r0, r3
 8003146:	f018 f8e0 	bl	801b30a <memset>
    char *marker = strtok(inputString, ",");
 800314a:	493b      	ldr	r1, [pc, #236]	@ (8003238 <nmea_GPGSA+0x10c>)
 800314c:	6838      	ldr	r0, [r7, #0]
 800314e:	f018 f8f7 	bl	801b340 <strtok>
 8003152:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 8003156:	e027      	b.n	80031a8 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003158:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800315c:	f7fd f860 	bl	8000220 <strlen>
 8003160:	4603      	mov	r3, r0
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 8003168:	1c63      	adds	r3, r4, #1
 800316a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800316e:	4610      	mov	r0, r2
 8003170:	f016 f956 	bl	8019420 <malloc>
 8003174:	4603      	mov	r3, r0
 8003176:	461a      	mov	r2, r3
 8003178:	00a3      	lsls	r3, r4, #2
 800317a:	3388      	adds	r3, #136	@ 0x88
 800317c:	443b      	add	r3, r7
 800317e:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8003182:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003186:	3b01      	subs	r3, #1
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	3388      	adds	r3, #136	@ 0x88
 800318c:	443b      	add	r3, r7
 800318e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8003192:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003196:	4618      	mov	r0, r3
 8003198:	f018 f9cb 	bl	801b532 <strcpy>
        marker = strtok(NULL, ",");
 800319c:	4926      	ldr	r1, [pc, #152]	@ (8003238 <nmea_GPGSA+0x10c>)
 800319e:	2000      	movs	r0, #0
 80031a0:	f018 f8ce 	bl	801b340 <strtok>
 80031a4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 80031a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1d3      	bne.n	8003158 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	220a      	movs	r2, #10
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f017 f8d8 	bl	801a36c <strtol>
 80031bc:	6738      	str	r0, [r7, #112]	@ 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 80031be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	bfcc      	ite	gt
 80031c4:	2301      	movgt	r3, #1
 80031c6:	2300      	movle	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	@ 0x28
    int satelliteCount = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 80031d4:	2303      	movs	r3, #3
 80031d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031d8:	e00e      	b.n	80031f8 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 80031da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	3388      	adds	r3, #136	@ 0x88
 80031e0:	443b      	add	r3, r7
 80031e2:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <nmea_GPGSA+0xc6>
            satelliteCount++;
 80031ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031ee:	3301      	adds	r3, #1
 80031f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 80031f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031f4:	3301      	adds	r3, #1
 80031f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031fa:	2b0e      	cmp	r3, #14
 80031fc:	dded      	ble.n	80031da <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003202:	625a      	str	r2, [r3, #36]	@ 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8003204:	2300      	movs	r3, #0
 8003206:	677b      	str	r3, [r7, #116]	@ 0x74
 8003208:	e00b      	b.n	8003222 <nmea_GPGSA+0xf6>
 800320a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	3388      	adds	r3, #136	@ 0x88
 8003210:	443b      	add	r3, r7
 8003212:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8003216:	4618      	mov	r0, r3
 8003218:	f016 f90a 	bl	8019430 <free>
 800321c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800321e:	3301      	adds	r3, #1
 8003220:	677b      	str	r3, [r7, #116]	@ 0x74
 8003222:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003224:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003228:	429a      	cmp	r2, r3
 800322a:	dbee      	blt.n	800320a <nmea_GPGSA+0xde>
    return 1;
 800322c:	2301      	movs	r3, #1
}
 800322e:	4618      	mov	r0, r3
 8003230:	378c      	adds	r7, #140	@ 0x8c
 8003232:	46bd      	mov	sp, r7
 8003234:	bd90      	pop	{r4, r7, pc}
 8003236:	bf00      	nop
 8003238:	0801f864 	.word	0x0801f864
 800323c:	00000000 	.word	0x00000000

08003240 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b0a1      	sub	sp, #132	@ 0x84
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 800324e:	f107 030c 	add.w	r3, r7, #12
 8003252:	2264      	movs	r2, #100	@ 0x64
 8003254:	2100      	movs	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f018 f857 	bl	801b30a <memset>
    char *marker = strtok(inputString, ",");
 800325c:	4930      	ldr	r1, [pc, #192]	@ (8003320 <nmea_GNRMC+0xe0>)
 800325e:	6838      	ldr	r0, [r7, #0]
 8003260:	f018 f86e 	bl	801b340 <strtok>
 8003264:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 8003266:	e021      	b.n	80032ac <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003268:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800326a:	f7fc ffd9 	bl	8000220 <strlen>
 800326e:	4603      	mov	r3, r0
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 8003274:	1c63      	adds	r3, r4, #1
 8003276:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003278:	4610      	mov	r0, r2
 800327a:	f016 f8d1 	bl	8019420 <malloc>
 800327e:	4603      	mov	r3, r0
 8003280:	461a      	mov	r2, r3
 8003282:	00a3      	lsls	r3, r4, #2
 8003284:	3380      	adds	r3, #128	@ 0x80
 8003286:	443b      	add	r3, r7
 8003288:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 800328c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800328e:	3b01      	subs	r3, #1
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	3380      	adds	r3, #128	@ 0x80
 8003294:	443b      	add	r3, r7
 8003296:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800329a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800329c:	4618      	mov	r0, r3
 800329e:	f018 f948 	bl	801b532 <strcpy>
        marker = strtok(NULL, ",");
 80032a2:	491f      	ldr	r1, [pc, #124]	@ (8003320 <nmea_GNRMC+0xe0>)
 80032a4:	2000      	movs	r0, #0
 80032a6:	f018 f84b 	bl	801b340 <strtok>
 80032aa:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 80032ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1da      	bne.n	8003268 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 80032b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f016 ff78 	bl	801a1ac <strtof>
 80032bc:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    gps_data->speed=speed/(1.944);
 80032c0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80032c2:	f7fd f919 	bl	80004f8 <__aeabi_f2d>
 80032c6:	a314      	add	r3, pc, #80	@ (adr r3, 8003318 <nmea_GNRMC+0xd8>)
 80032c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032cc:	f7fd fa96 	bl	80007fc <__aeabi_ddiv>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4610      	mov	r0, r2
 80032d6:	4619      	mov	r1, r3
 80032d8:	f7fd fc5e 	bl	8000b98 <__aeabi_d2f>
 80032dc:	4602      	mov	r2, r0
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	639a      	str	r2, [r3, #56]	@ 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 80032e2:	2300      	movs	r3, #0
 80032e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80032e6:	e00b      	b.n	8003300 <nmea_GNRMC+0xc0>
 80032e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	3380      	adds	r3, #128	@ 0x80
 80032ee:	443b      	add	r3, r7
 80032f0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f016 f89b 	bl	8019430 <free>
 80032fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032fc:	3301      	adds	r3, #1
 80032fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8003300:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003302:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003304:	429a      	cmp	r2, r3
 8003306:	dbef      	blt.n	80032e8 <nmea_GNRMC+0xa8>
    return 1;
 8003308:	2301      	movs	r3, #1
}
 800330a:	4618      	mov	r0, r3
 800330c:	3784      	adds	r7, #132	@ 0x84
 800330e:	46bd      	mov	sp, r7
 8003310:	bd90      	pop	{r4, r7, pc}
 8003312:	bf00      	nop
 8003314:	f3af 8000 	nop.w
 8003318:	be76c8b4 	.word	0xbe76c8b4
 800331c:	3fff1a9f 	.word	0x3fff1a9f
 8003320:	0801f864 	.word	0x0801f864

08003324 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8003324:	b590      	push	{r4, r7, lr}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 800332e:	223c      	movs	r2, #60	@ 0x3c
 8003330:	2100      	movs	r1, #0
 8003332:	484e      	ldr	r0, [pc, #312]	@ (800346c <nmea_parse+0x148>)
 8003334:	f017 ffe9 	bl	801b30a <memset>
    char * token = strtok(buffer, "$");
 8003338:	494d      	ldr	r1, [pc, #308]	@ (8003470 <nmea_parse+0x14c>)
 800333a:	6838      	ldr	r0, [r7, #0]
 800333c:	f018 f800 	bl	801b340 <strtok>
 8003340:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8003346:	e01d      	b.n	8003384 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8003348:	6978      	ldr	r0, [r7, #20]
 800334a:	f7fc ff69 	bl	8000220 <strlen>
 800334e:	4603      	mov	r3, r0
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	693c      	ldr	r4, [r7, #16]
 8003354:	1c63      	adds	r3, r4, #1
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	4610      	mov	r0, r2
 800335a:	f016 f861 	bl	8019420 <malloc>
 800335e:	4603      	mov	r3, r0
 8003360:	461a      	mov	r2, r3
 8003362:	4b42      	ldr	r3, [pc, #264]	@ (800346c <nmea_parse+0x148>)
 8003364:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	3b01      	subs	r3, #1
 800336c:	4a3f      	ldr	r2, [pc, #252]	@ (800346c <nmea_parse+0x148>)
 800336e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003372:	6979      	ldr	r1, [r7, #20]
 8003374:	4618      	mov	r0, r3
 8003376:	f018 f8dc 	bl	801b532 <strcpy>
        token = strtok(NULL, "$");
 800337a:	493d      	ldr	r1, [pc, #244]	@ (8003470 <nmea_parse+0x14c>)
 800337c:	2000      	movs	r0, #0
 800337e:	f017 ffdf 	bl	801b340 <strtok>
 8003382:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1de      	bne.n	8003348 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	e052      	b.n	8003436 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8003390:	4a36      	ldr	r2, [pc, #216]	@ (800346c <nmea_parse+0x148>)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003398:	4936      	ldr	r1, [pc, #216]	@ (8003474 <nmea_parse+0x150>)
 800339a:	4618      	mov	r0, r3
 800339c:	f018 f82c 	bl	801b3f8 <strstr>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d044      	beq.n	8003430 <nmea_parse+0x10c>
 80033a6:	4a31      	ldr	r2, [pc, #196]	@ (800346c <nmea_parse+0x148>)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fca0 	bl	8002cf4 <gps_checksum>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d03a      	beq.n	8003430 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 80033ba:	4a2c      	ldr	r2, [pc, #176]	@ (800346c <nmea_parse+0x148>)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c2:	492d      	ldr	r1, [pc, #180]	@ (8003478 <nmea_parse+0x154>)
 80033c4:	4618      	mov	r0, r3
 80033c6:	f018 f817 	bl	801b3f8 <strstr>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 80033d0:	4a26      	ldr	r2, [pc, #152]	@ (800346c <nmea_parse+0x148>)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d8:	4619      	mov	r1, r3
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff ff30 	bl	8003240 <nmea_GNRMC>
 80033e0:	e026      	b.n	8003430 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 80033e2:	4a22      	ldr	r2, [pc, #136]	@ (800346c <nmea_parse+0x148>)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ea:	4924      	ldr	r1, [pc, #144]	@ (800347c <nmea_parse+0x158>)
 80033ec:	4618      	mov	r0, r3
 80033ee:	f018 f803 	bl	801b3f8 <strstr>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 80033f8:	4a1c      	ldr	r2, [pc, #112]	@ (800346c <nmea_parse+0x148>)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003400:	4619      	mov	r1, r3
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff fe92 	bl	800312c <nmea_GPGSA>
 8003408:	e012      	b.n	8003430 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 800340a:	4a18      	ldr	r2, [pc, #96]	@ (800346c <nmea_parse+0x148>)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003412:	491b      	ldr	r1, [pc, #108]	@ (8003480 <nmea_parse+0x15c>)
 8003414:	4618      	mov	r0, r3
 8003416:	f017 ffef 	bl	801b3f8 <strstr>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8003420:	4a12      	ldr	r2, [pc, #72]	@ (800346c <nmea_parse+0x148>)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003428:	4619      	mov	r1, r3
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff fcac 	bl	8002d88 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3301      	adds	r3, #1
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	429a      	cmp	r2, r3
 800343c:	dba8      	blt.n	8003390 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 800343e:	2300      	movs	r3, #0
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	e009      	b.n	8003458 <nmea_parse+0x134>
 8003444:	4a09      	ldr	r2, [pc, #36]	@ (800346c <nmea_parse+0x148>)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344c:	4618      	mov	r0, r3
 800344e:	f015 ffef 	bl	8019430 <free>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	3301      	adds	r3, #1
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	429a      	cmp	r2, r3
 800345e:	dbf1      	blt.n	8003444 <nmea_parse+0x120>


}
 8003460:	bf00      	nop
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	bd90      	pop	{r4, r7, pc}
 800346a:	bf00      	nop
 800346c:	20000ba4 	.word	0x20000ba4
 8003470:	0801f868 	.word	0x0801f868
 8003474:	0801f86c 	.word	0x0801f86c
 8003478:	0801f870 	.word	0x0801f870
 800347c:	0801f878 	.word	0x0801f878
 8003480:	0801f880 	.word	0x0801f880
 8003484:	00000000 	.word	0x00000000

08003488 <distancecalc>:

}



double distancecalc(double lat1, double lat2, double long1, double long2){
 8003488:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800348c:	b08a      	sub	sp, #40	@ 0x28
 800348e:	af00      	add	r7, sp, #0
 8003490:	ed87 0b06 	vstr	d0, [r7, #24]
 8003494:	ed87 1b04 	vstr	d1, [r7, #16]
 8003498:	ed87 2b02 	vstr	d2, [r7, #8]
 800349c:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 80034ac:	a358      	add	r3, pc, #352	@ (adr r3, 8003610 <distancecalc+0x188>)
 80034ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034b6:	f7fd f877 	bl	80005a8 <__aeabi_dmul>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	ec43 2b17 	vmov	d7, r2, r3
 80034c2:	eeb0 0a47 	vmov.f32	s0, s14
 80034c6:	eef0 0a67 	vmov.f32	s1, s15
 80034ca:	f01a fd73 	bl	801dfb4 <sinl>
 80034ce:	ec55 4b10 	vmov	r4, r5, d0
 80034d2:	a34f      	add	r3, pc, #316	@ (adr r3, 8003610 <distancecalc+0x188>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034dc:	f7fd f864 	bl	80005a8 <__aeabi_dmul>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	ec43 2b17 	vmov	d7, r2, r3
 80034e8:	eeb0 0a47 	vmov.f32	s0, s14
 80034ec:	eef0 0a67 	vmov.f32	s1, s15
 80034f0:	f01a fd60 	bl	801dfb4 <sinl>
 80034f4:	ec53 2b10 	vmov	r2, r3, d0
 80034f8:	4620      	mov	r0, r4
 80034fa:	4629      	mov	r1, r5
 80034fc:	f7fd f854 	bl	80005a8 <__aeabi_dmul>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4614      	mov	r4, r2
 8003506:	461d      	mov	r5, r3
 8003508:	a341      	add	r3, pc, #260	@ (adr r3, 8003610 <distancecalc+0x188>)
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003512:	f7fd f849 	bl	80005a8 <__aeabi_dmul>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	ec43 2b17 	vmov	d7, r2, r3
 800351e:	eeb0 0a47 	vmov.f32	s0, s14
 8003522:	eef0 0a67 	vmov.f32	s1, s15
 8003526:	f01a fd43 	bl	801dfb0 <cosl>
 800352a:	ec59 8b10 	vmov	r8, r9, d0
 800352e:	a338      	add	r3, pc, #224	@ (adr r3, 8003610 <distancecalc+0x188>)
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003538:	f7fd f836 	bl	80005a8 <__aeabi_dmul>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	ec43 2b17 	vmov	d7, r2, r3
 8003544:	eeb0 0a47 	vmov.f32	s0, s14
 8003548:	eef0 0a67 	vmov.f32	s1, s15
 800354c:	f01a fd30 	bl	801dfb0 <cosl>
 8003550:	ec53 2b10 	vmov	r2, r3, d0
 8003554:	4640      	mov	r0, r8
 8003556:	4649      	mov	r1, r9
 8003558:	f7fd f826 	bl	80005a8 <__aeabi_dmul>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4690      	mov	r8, r2
 8003562:	4699      	mov	r9, r3
 8003564:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800356c:	f7fc fe64 	bl	8000238 <__aeabi_dsub>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	a325      	add	r3, pc, #148	@ (adr r3, 8003610 <distancecalc+0x188>)
 800357a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357e:	f7fd f813 	bl	80005a8 <__aeabi_dmul>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	ec43 2b17 	vmov	d7, r2, r3
 800358a:	eeb0 0a47 	vmov.f32	s0, s14
 800358e:	eef0 0a67 	vmov.f32	s1, s15
 8003592:	f01a fd0d 	bl	801dfb0 <cosl>
 8003596:	ec53 2b10 	vmov	r2, r3, d0
 800359a:	4640      	mov	r0, r8
 800359c:	4649      	mov	r1, r9
 800359e:	f7fd f803 	bl	80005a8 <__aeabi_dmul>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4620      	mov	r0, r4
 80035a8:	4629      	mov	r1, r5
 80035aa:	f7fc fe47 	bl	800023c <__adddf3>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	ec43 2b17 	vmov	d7, r2, r3
 80035b6:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 8003608 <distancecalc+0x180>
 80035ba:	eeb0 0a47 	vmov.f32	s0, s14
 80035be:	eef0 0a67 	vmov.f32	s1, s15
 80035c2:	f01a fc97 	bl	801def4 <fmin>
 80035c6:	eeb0 7a40 	vmov.f32	s14, s0
 80035ca:	eef0 7a60 	vmov.f32	s15, s1
 80035ce:	eeb0 0a47 	vmov.f32	s0, s14
 80035d2:	eef0 0a67 	vmov.f32	s1, s15
 80035d6:	f01a fcef 	bl	801dfb8 <acosl>
 80035da:	ec51 0b10 	vmov	r0, r1, d0
 80035de:	a30e      	add	r3, pc, #56	@ (adr r3, 8003618 <distancecalc+0x190>)
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f7fc ffe0 	bl	80005a8 <__aeabi_dmul>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 80035f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80035f8:	eeb0 0a47 	vmov.f32	s0, s14
 80035fc:	eef0 0a67 	vmov.f32	s1, s15
 8003600:	3728      	adds	r7, #40	@ 0x28
 8003602:	46bd      	mov	sp, r7
 8003604:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003608:	00000000 	.word	0x00000000
 800360c:	3ff00000 	.word	0x3ff00000
 8003610:	a2529d39 	.word	0xa2529d39
 8003614:	3f91df46 	.word	0x3f91df46
 8003618:	00000000 	.word	0x00000000
 800361c:	41584dae 	.word	0x41584dae

08003620 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800362e:	b480      	push	{r7}
 8003630:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800363e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003642:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003646:	bf00      	nop
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <LL_APB1_GRP1_EnableClock>:
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800365c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800365e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4313      	orrs	r3, r2
 8003666:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800366c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4013      	ands	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003674:	68fb      	ldr	r3, [r7, #12]
}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003698:	2300      	movs	r3, #0
 800369a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800369c:	4b2c      	ldr	r3, [pc, #176]	@ (8003750 <MX_RTC_Init+0xcc>)
 800369e:	4a2d      	ldr	r2, [pc, #180]	@ (8003754 <MX_RTC_Init+0xd0>)
 80036a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003750 <MX_RTC_Init+0xcc>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80036a8:	4b29      	ldr	r3, [pc, #164]	@ (8003750 <MX_RTC_Init+0xcc>)
 80036aa:	227f      	movs	r2, #127	@ 0x7f
 80036ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80036ae:	4b28      	ldr	r3, [pc, #160]	@ (8003750 <MX_RTC_Init+0xcc>)
 80036b0:	f641 6284 	movw	r2, #7812	@ 0x1e84
 80036b4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036b6:	4b26      	ldr	r3, [pc, #152]	@ (8003750 <MX_RTC_Init+0xcc>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036bc:	4b24      	ldr	r3, [pc, #144]	@ (8003750 <MX_RTC_Init+0xcc>)
 80036be:	2200      	movs	r2, #0
 80036c0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036c2:	4b23      	ldr	r3, [pc, #140]	@ (8003750 <MX_RTC_Init+0xcc>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80036c8:	4b21      	ldr	r3, [pc, #132]	@ (8003750 <MX_RTC_Init+0xcc>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036ce:	4820      	ldr	r0, [pc, #128]	@ (8003750 <MX_RTC_Init+0xcc>)
 80036d0:	f009 fdba 	bl	800d248 <HAL_RTC_Init>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80036da:	f7ff fb05 	bl	8002ce8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80036de:	2300      	movs	r3, #0
 80036e0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80036f6:	1d3b      	adds	r3, r7, #4
 80036f8:	2201      	movs	r2, #1
 80036fa:	4619      	mov	r1, r3
 80036fc:	4814      	ldr	r0, [pc, #80]	@ (8003750 <MX_RTC_Init+0xcc>)
 80036fe:	f009 fe53 	bl	800d3a8 <HAL_RTC_SetTime>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <MX_RTC_Init+0x88>
  {
    Error_Handler();
 8003708:	f7ff faee 	bl	8002ce8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800370c:	2301      	movs	r3, #1
 800370e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003710:	2301      	movs	r3, #1
 8003712:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003714:	2301      	movs	r3, #1
 8003716:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003718:	2300      	movs	r3, #0
 800371a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800371c:	463b      	mov	r3, r7
 800371e:	2201      	movs	r2, #1
 8003720:	4619      	mov	r1, r3
 8003722:	480b      	ldr	r0, [pc, #44]	@ (8003750 <MX_RTC_Init+0xcc>)
 8003724:	f009 ff04 	bl	800d530 <HAL_RTC_SetDate>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800372e:	f7ff fadb 	bl	8002ce8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003732:	2204      	movs	r2, #4
 8003734:	2100      	movs	r1, #0
 8003736:	4806      	ldr	r0, [pc, #24]	@ (8003750 <MX_RTC_Init+0xcc>)
 8003738:	f00a f818 	bl	800d76c <HAL_RTCEx_SetWakeUpTimer_IT>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003742:	f7ff fad1 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003746:	bf00      	nop
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000be0 	.word	0x20000be0
 8003754:	40002800 	.word	0x40002800

08003758 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b096      	sub	sp, #88	@ 0x58
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003760:	f107 0308 	add.w	r3, r7, #8
 8003764:	2250      	movs	r2, #80	@ 0x50
 8003766:	2100      	movs	r1, #0
 8003768:	4618      	mov	r0, r3
 800376a:	f017 fdce 	bl	801b30a <memset>
  if(rtcHandle->Instance==RTC)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a14      	ldr	r2, [pc, #80]	@ (80037c4 <HAL_RTC_MspInit+0x6c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d121      	bne.n	80037bc <HAL_RTC_MspInit+0x64>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

	  HAL_PWR_EnableBkUpAccess();
 8003778:	f007 ff8a 	bl	800b690 <HAL_PWR_EnableBkUpAccess>




	  HAL_PWR_EnableBkUpAccess();
 800377c:	f007 ff88 	bl	800b690 <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003780:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003784:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8003786:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800378a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800378c:	f107 0308 	add.w	r3, r7, #8
 8003790:	4618      	mov	r0, r3
 8003792:	f009 fad2 	bl	800cd3a <HAL_RCCEx_PeriphCLKConfig>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800379c:	f7ff faa4 	bl	8002ce8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80037a0:	f7ff ff45 	bl	800362e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80037a4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80037a8:	f7ff ff52 	bl	8003650 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80037ac:	2200      	movs	r2, #0
 80037ae:	2100      	movs	r1, #0
 80037b0:	2003      	movs	r0, #3
 80037b2:	f004 fe02 	bl	80083ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80037b6:	2003      	movs	r0, #3
 80037b8:	f004 fe19 	bl	80083ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80037bc:	bf00      	nop
 80037be:	3758      	adds	r7, #88	@ 0x58
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40002800 	.word	0x40002800

080037c8 <LL_AHB2_GRP1_EnableClock>:
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80037d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4313      	orrs	r3, r2
 80037de:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80037e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4013      	ands	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037ec:	68fb      	ldr	r3, [r7, #12]
}
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003802:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003806:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003808:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4313      	orrs	r3, r2
 8003810:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003816:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4013      	ands	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800381e:	68fb      	ldr	r3, [r7, #12]
}
 8003820:	bf00      	nop
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003830:	4b1b      	ldr	r3, [pc, #108]	@ (80038a0 <MX_SPI1_Init+0x74>)
 8003832:	4a1c      	ldr	r2, [pc, #112]	@ (80038a4 <MX_SPI1_Init+0x78>)
 8003834:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003836:	4b1a      	ldr	r3, [pc, #104]	@ (80038a0 <MX_SPI1_Init+0x74>)
 8003838:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800383c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800383e:	4b18      	ldr	r3, [pc, #96]	@ (80038a0 <MX_SPI1_Init+0x74>)
 8003840:	2200      	movs	r2, #0
 8003842:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003844:	4b16      	ldr	r3, [pc, #88]	@ (80038a0 <MX_SPI1_Init+0x74>)
 8003846:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800384a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800384c:	4b14      	ldr	r3, [pc, #80]	@ (80038a0 <MX_SPI1_Init+0x74>)
 800384e:	2200      	movs	r2, #0
 8003850:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003852:	4b13      	ldr	r3, [pc, #76]	@ (80038a0 <MX_SPI1_Init+0x74>)
 8003854:	2200      	movs	r2, #0
 8003856:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003858:	4b11      	ldr	r3, [pc, #68]	@ (80038a0 <MX_SPI1_Init+0x74>)
 800385a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800385e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003860:	4b0f      	ldr	r3, [pc, #60]	@ (80038a0 <MX_SPI1_Init+0x74>)
 8003862:	2210      	movs	r2, #16
 8003864:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003866:	4b0e      	ldr	r3, [pc, #56]	@ (80038a0 <MX_SPI1_Init+0x74>)
 8003868:	2200      	movs	r2, #0
 800386a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800386c:	4b0c      	ldr	r3, [pc, #48]	@ (80038a0 <MX_SPI1_Init+0x74>)
 800386e:	2200      	movs	r2, #0
 8003870:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003872:	4b0b      	ldr	r3, [pc, #44]	@ (80038a0 <MX_SPI1_Init+0x74>)
 8003874:	2200      	movs	r2, #0
 8003876:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003878:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <MX_SPI1_Init+0x74>)
 800387a:	2207      	movs	r2, #7
 800387c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800387e:	4b08      	ldr	r3, [pc, #32]	@ (80038a0 <MX_SPI1_Init+0x74>)
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003884:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <MX_SPI1_Init+0x74>)
 8003886:	2208      	movs	r2, #8
 8003888:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800388a:	4805      	ldr	r0, [pc, #20]	@ (80038a0 <MX_SPI1_Init+0x74>)
 800388c:	f00a f82a 	bl	800d8e4 <HAL_SPI_Init>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003896:	f7ff fa27 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000c38 	.word	0x20000c38
 80038a4:	40013000 	.word	0x40013000

080038a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b0:	f107 030c 	add.w	r3, r7, #12
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a46      	ldr	r2, [pc, #280]	@ (80039e0 <HAL_SPI_MspInit+0x138>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	f040 8085 	bne.w	80039d6 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038cc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80038d0:	f7ff ff93 	bl	80037fa <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d4:	2001      	movs	r0, #1
 80038d6:	f7ff ff77 	bl	80037c8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038da:	2002      	movs	r0, #2
 80038dc:	f7ff ff74 	bl	80037c8 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80038e0:	2342      	movs	r3, #66	@ 0x42
 80038e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e4:	2302      	movs	r3, #2
 80038e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038f0:	2305      	movs	r3, #5
 80038f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f4:	f107 030c 	add.w	r3, r7, #12
 80038f8:	4619      	mov	r1, r3
 80038fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038fe:	f005 f98f 	bl	8008c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003902:	2320      	movs	r3, #32
 8003904:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003906:	2302      	movs	r3, #2
 8003908:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390e:	2300      	movs	r3, #0
 8003910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003912:	2305      	movs	r3, #5
 8003914:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003916:	f107 030c 	add.w	r3, r7, #12
 800391a:	4619      	mov	r1, r3
 800391c:	4831      	ldr	r0, [pc, #196]	@ (80039e4 <HAL_SPI_MspInit+0x13c>)
 800391e:	f005 f97f 	bl	8008c20 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8003922:	4b31      	ldr	r3, [pc, #196]	@ (80039e8 <HAL_SPI_MspInit+0x140>)
 8003924:	4a31      	ldr	r2, [pc, #196]	@ (80039ec <HAL_SPI_MspInit+0x144>)
 8003926:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003928:	4b2f      	ldr	r3, [pc, #188]	@ (80039e8 <HAL_SPI_MspInit+0x140>)
 800392a:	2206      	movs	r2, #6
 800392c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800392e:	4b2e      	ldr	r3, [pc, #184]	@ (80039e8 <HAL_SPI_MspInit+0x140>)
 8003930:	2200      	movs	r2, #0
 8003932:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003934:	4b2c      	ldr	r3, [pc, #176]	@ (80039e8 <HAL_SPI_MspInit+0x140>)
 8003936:	2200      	movs	r2, #0
 8003938:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800393a:	4b2b      	ldr	r3, [pc, #172]	@ (80039e8 <HAL_SPI_MspInit+0x140>)
 800393c:	2280      	movs	r2, #128	@ 0x80
 800393e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003940:	4b29      	ldr	r3, [pc, #164]	@ (80039e8 <HAL_SPI_MspInit+0x140>)
 8003942:	2200      	movs	r2, #0
 8003944:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003946:	4b28      	ldr	r3, [pc, #160]	@ (80039e8 <HAL_SPI_MspInit+0x140>)
 8003948:	2200      	movs	r2, #0
 800394a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800394c:	4b26      	ldr	r3, [pc, #152]	@ (80039e8 <HAL_SPI_MspInit+0x140>)
 800394e:	2200      	movs	r2, #0
 8003950:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003952:	4b25      	ldr	r3, [pc, #148]	@ (80039e8 <HAL_SPI_MspInit+0x140>)
 8003954:	2200      	movs	r2, #0
 8003956:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003958:	4823      	ldr	r0, [pc, #140]	@ (80039e8 <HAL_SPI_MspInit+0x140>)
 800395a:	f004 fd8d 	bl	8008478 <HAL_DMA_Init>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8003964:	f7ff f9c0 	bl	8002ce8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a1f      	ldr	r2, [pc, #124]	@ (80039e8 <HAL_SPI_MspInit+0x140>)
 800396c:	659a      	str	r2, [r3, #88]	@ 0x58
 800396e:	4a1e      	ldr	r2, [pc, #120]	@ (80039e8 <HAL_SPI_MspInit+0x140>)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8003974:	4b1e      	ldr	r3, [pc, #120]	@ (80039f0 <HAL_SPI_MspInit+0x148>)
 8003976:	4a1f      	ldr	r2, [pc, #124]	@ (80039f4 <HAL_SPI_MspInit+0x14c>)
 8003978:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800397a:	4b1d      	ldr	r3, [pc, #116]	@ (80039f0 <HAL_SPI_MspInit+0x148>)
 800397c:	2207      	movs	r2, #7
 800397e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003980:	4b1b      	ldr	r3, [pc, #108]	@ (80039f0 <HAL_SPI_MspInit+0x148>)
 8003982:	2210      	movs	r2, #16
 8003984:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003986:	4b1a      	ldr	r3, [pc, #104]	@ (80039f0 <HAL_SPI_MspInit+0x148>)
 8003988:	2200      	movs	r2, #0
 800398a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800398c:	4b18      	ldr	r3, [pc, #96]	@ (80039f0 <HAL_SPI_MspInit+0x148>)
 800398e:	2280      	movs	r2, #128	@ 0x80
 8003990:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003992:	4b17      	ldr	r3, [pc, #92]	@ (80039f0 <HAL_SPI_MspInit+0x148>)
 8003994:	2200      	movs	r2, #0
 8003996:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003998:	4b15      	ldr	r3, [pc, #84]	@ (80039f0 <HAL_SPI_MspInit+0x148>)
 800399a:	2200      	movs	r2, #0
 800399c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800399e:	4b14      	ldr	r3, [pc, #80]	@ (80039f0 <HAL_SPI_MspInit+0x148>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039a4:	4b12      	ldr	r3, [pc, #72]	@ (80039f0 <HAL_SPI_MspInit+0x148>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80039aa:	4811      	ldr	r0, [pc, #68]	@ (80039f0 <HAL_SPI_MspInit+0x148>)
 80039ac:	f004 fd64 	bl	8008478 <HAL_DMA_Init>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80039b6:	f7ff f997 	bl	8002ce8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a0c      	ldr	r2, [pc, #48]	@ (80039f0 <HAL_SPI_MspInit+0x148>)
 80039be:	655a      	str	r2, [r3, #84]	@ 0x54
 80039c0:	4a0b      	ldr	r2, [pc, #44]	@ (80039f0 <HAL_SPI_MspInit+0x148>)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80039c6:	2200      	movs	r2, #0
 80039c8:	2100      	movs	r1, #0
 80039ca:	2022      	movs	r0, #34	@ 0x22
 80039cc:	f004 fcf5 	bl	80083ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80039d0:	2022      	movs	r0, #34	@ 0x22
 80039d2:	f004 fd0c 	bl	80083ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80039d6:	bf00      	nop
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40013000 	.word	0x40013000
 80039e4:	48000400 	.word	0x48000400
 80039e8:	20000c9c 	.word	0x20000c9c
 80039ec:	40020030 	.word	0x40020030
 80039f0:	20000cfc 	.word	0x20000cfc
 80039f4:	40020044 	.word	0x40020044

080039f8 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 80039f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039fc:	ed2d 8b02 	vpush	{d8}
 8003a00:	b0a7      	sub	sp, #156	@ 0x9c
 8003a02:	af16      	add	r7, sp, #88	@ 0x58
 8003a04:	6378      	str	r0, [r7, #52]	@ 0x34
 8003a06:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8003a0a:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 8003a0e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a10:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a12:	ed87 1a08 	vstr	s2, [r7, #32]
	int framesize=0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 8003a1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a1c:	f7fc fd6c 	bl	80004f8 <__aeabi_f2d>
 8003a20:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003a24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a26:	f7fc fd67 	bl	80004f8 <__aeabi_f2d>
 8003a2a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fc fd60 	bl	80004f8 <__aeabi_f2d>
 8003a38:	a332      	add	r3, pc, #200	@ (adr r3, 8003b04 <csvframe+0x10c>)
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	f7fc fdb3 	bl	80005a8 <__aeabi_dmul>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	ec43 2b18 	vmov	d8, r2, r3
 8003a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a52:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8003a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fc fd4c 	bl	80004f8 <__aeabi_f2d>
 8003a60:	4682      	mov	sl, r0
 8003a62:	468b      	mov	fp, r1
 8003a64:	6a38      	ldr	r0, [r7, #32]
 8003a66:	f7fc fd47 	bl	80004f8 <__aeabi_f2d>
 8003a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ae8 <csvframe+0xf0>)
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	4b1e      	ldr	r3, [pc, #120]	@ (8003aec <csvframe+0xf4>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	4b1e      	ldr	r3, [pc, #120]	@ (8003af0 <csvframe+0xf8>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	607b      	str	r3, [r7, #4]
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003af4 <csvframe+0xfc>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	461e      	mov	r6, r3
 8003a82:	4b1d      	ldr	r3, [pc, #116]	@ (8003af8 <csvframe+0x100>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	4b1c      	ldr	r3, [pc, #112]	@ (8003afc <csvframe+0x104>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8003a8e:	9214      	str	r2, [sp, #80]	@ 0x50
 8003a90:	9613      	str	r6, [sp, #76]	@ 0x4c
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	9212      	str	r2, [sp, #72]	@ 0x48
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	9211      	str	r2, [sp, #68]	@ 0x44
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	9310      	str	r3, [sp, #64]	@ 0x40
 8003a9e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	930c      	str	r3, [sp, #48]	@ 0x30
 8003aa6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8003aaa:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003aae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003ab2:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003ab6:	ed97 7b04 	vldr	d7, [r7, #16]
 8003aba:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003abe:	ed97 7b06 	vldr	d7, [r7, #24]
 8003ac2:	ed8d 7b00 	vstr	d7, [sp]
 8003ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8003b00 <csvframe+0x108>)
 8003ac8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003acc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003ace:	f017 fb85 	bl	801b1dc <sniprintf>
 8003ad2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	return framesize;
 8003ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3744      	adds	r7, #68	@ 0x44
 8003ada:	46bd      	mov	sp, r7
 8003adc:	ecbd 8b02 	vpop	{d8}
 8003ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ae4:	f3af 8000 	nop.w
 8003ae8:	20000012 	.word	0x20000012
 8003aec:	20000011 	.word	0x20000011
 8003af0:	20000010 	.word	0x20000010
 8003af4:	20000b85 	.word	0x20000b85
 8003af8:	20000b86 	.word	0x20000b86
 8003afc:	20000b84 	.word	0x20000b84
 8003b00:	0801f888 	.word	0x0801f888
 8003b04:	cccccccd 	.word	0xcccccccd
 8003b08:	400ccccc 	.word	0x400ccccc

08003b0c <storeindex>:


void storeindex(void){
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b09c      	sub	sp, #112	@ 0x70
 8003b10:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 8003b12:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003b16:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8003b18:	463b      	mov	r3, r7
 8003b1a:	2264      	movs	r2, #100	@ 0x64
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f017 fbf3 	bl	801b30a <memset>
	snprintf((char *)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 8003b24:	4b14      	ldr	r3, [pc, #80]	@ (8003b78 <storeindex+0x6c>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4b14      	ldr	r3, [pc, #80]	@ (8003b7c <storeindex+0x70>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4638      	mov	r0, r7
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	4a13      	ldr	r2, [pc, #76]	@ (8003b80 <storeindex+0x74>)
 8003b34:	2164      	movs	r1, #100	@ 0x64
 8003b36:	f017 fb51 	bl	801b1dc <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8003b3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	da00      	bge.n	8003b42 <storeindex+0x36>
 8003b40:	330f      	adds	r3, #15
 8003b42:	111b      	asrs	r3, r3, #4
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fc fcc5 	bl	80004d4 <__aeabi_i2d>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	f7fc ffd9 	bl	8000b08 <__aeabi_d2iz>
 8003b56:	4603      	mov	r3, r0
 8003b58:	4619      	mov	r1, r3
 8003b5a:	480a      	ldr	r0, [pc, #40]	@ (8003b84 <storeindex+0x78>)
 8003b5c:	f013 fd05 	bl	801756a <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8003b60:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003b62:	463a      	mov	r2, r7
 8003b64:	2300      	movs	r3, #0
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	2364      	movs	r3, #100	@ 0x64
 8003b6a:	4806      	ldr	r0, [pc, #24]	@ (8003b84 <storeindex+0x78>)
 8003b6c:	f013 fd80 	bl	8017670 <SPIF_WritePage>

}
 8003b70:	bf00      	nop
 8003b72:	3768      	adds	r7, #104	@ 0x68
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20000a9c 	.word	0x20000a9c
 8003b7c:	20000aa0 	.word	0x20000aa0
 8003b80:	0801f8dc 	.word	0x0801f8dc
 8003b84:	20000868 	.word	0x20000868

08003b88 <getindex>:

void getindex(void){
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8003b8e:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003b92:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	2300      	movs	r3, #0
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	2332      	movs	r3, #50	@ 0x32
 8003b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8003c4c <getindex+0xc4>)
 8003b9e:	482c      	ldr	r0, [pc, #176]	@ (8003c50 <getindex+0xc8>)
 8003ba0:	f013 fd84 	bl	80176ac <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 8003ba4:	220a      	movs	r2, #10
 8003ba6:	2124      	movs	r1, #36	@ 0x24
 8003ba8:	482a      	ldr	r0, [pc, #168]	@ (8003c54 <getindex+0xcc>)
 8003baa:	f017 fbae 	bl	801b30a <memset>
	memset(numbuf2,'$',10);
 8003bae:	220a      	movs	r2, #10
 8003bb0:	2124      	movs	r1, #36	@ 0x24
 8003bb2:	4829      	ldr	r0, [pc, #164]	@ (8003c58 <getindex+0xd0>)
 8003bb4:	f017 fba9 	bl	801b30a <memset>
	int cnt=0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8003bbc:	4b23      	ldr	r3, [pc, #140]	@ (8003c4c <getindex+0xc4>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	2b09      	cmp	r3, #9
 8003bc6:	dc3a      	bgt.n	8003c3e <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8003bc8:	e00b      	b.n	8003be2 <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 8003bca:	4a20      	ldr	r2, [pc, #128]	@ (8003c4c <getindex+0xc4>)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	7819      	ldrb	r1, [r3, #0]
 8003bd2:	4a20      	ldr	r2, [pc, #128]	@ (8003c54 <getindex+0xcc>)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	460a      	mov	r2, r1
 8003bda:	701a      	strb	r2, [r3, #0]
			  cnt++;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	3301      	adds	r3, #1
 8003be0:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 8003be2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c4c <getindex+0xc4>)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b24      	cmp	r3, #36	@ 0x24
 8003bec:	d1ed      	bne.n	8003bca <getindex+0x42>
		  }
		  cnt++;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8003bf8:	e00e      	b.n	8003c18 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8003bfa:	4a14      	ldr	r2, [pc, #80]	@ (8003c4c <getindex+0xc4>)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4413      	add	r3, r2
 8003c00:	7819      	ldrb	r1, [r3, #0]
 8003c02:	4a15      	ldr	r2, [pc, #84]	@ (8003c58 <getindex+0xd0>)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4413      	add	r3, r2
 8003c08:	460a      	mov	r2, r1
 8003c0a:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	3301      	adds	r3, #1
 8003c16:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8003c18:	4a0c      	ldr	r2, [pc, #48]	@ (8003c4c <getindex+0xc4>)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b24      	cmp	r3, #36	@ 0x24
 8003c22:	d1ea      	bne.n	8003bfa <getindex+0x72>
		  	  }

		 pageoffset=atoi((char *)numbuf1);
 8003c24:	480b      	ldr	r0, [pc, #44]	@ (8003c54 <getindex+0xcc>)
 8003c26:	f015 fbf7 	bl	8019418 <atoi>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c5c <getindex+0xd4>)
 8003c2e:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((char *)numbuf2);
 8003c30:	4809      	ldr	r0, [pc, #36]	@ (8003c58 <getindex+0xd0>)
 8003c32:	f015 fbf1 	bl	8019418 <atoi>
 8003c36:	4603      	mov	r3, r0
 8003c38:	4a09      	ldr	r2, [pc, #36]	@ (8003c60 <getindex+0xd8>)
 8003c3a:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8003c3c:	e001      	b.n	8003c42 <getindex+0xba>
		storeindex();
 8003c3e:	f7ff ff65 	bl	8003b0c <storeindex>
}
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000c04 	.word	0x20000c04
 8003c50:	20000868 	.word	0x20000868
 8003c54:	20000aa8 	.word	0x20000aa8
 8003c58:	20000ab4 	.word	0x20000ab4
 8003c5c:	20000a9c 	.word	0x20000a9c
 8003c60:	20000aa0 	.word	0x20000aa0

08003c64 <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 8003c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d6c <writebuffertoflash+0x108>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3301      	adds	r3, #1
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d11b      	bne.n	8003cb4 <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8003c7c:	4b3c      	ldr	r3, [pc, #240]	@ (8003d70 <writebuffertoflash+0x10c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d117      	bne.n	8003cb4 <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8003c84:	4b39      	ldr	r3, [pc, #228]	@ (8003d6c <writebuffertoflash+0x108>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	da00      	bge.n	8003c90 <writebuffertoflash+0x2c>
 8003c8e:	330f      	adds	r3, #15
 8003c90:	111b      	asrs	r3, r3, #4
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fc fc1e 	bl	80004d4 <__aeabi_i2d>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	f7fc ff32 	bl	8000b08 <__aeabi_d2iz>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4832      	ldr	r0, [pc, #200]	@ (8003d74 <writebuffertoflash+0x110>)
 8003caa:	f013 fc5e 	bl	801756a <SPIF_EraseSector>
		sectoreraseen=1;
 8003cae:	4b30      	ldr	r3, [pc, #192]	@ (8003d70 <writebuffertoflash+0x10c>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8003cb4:	4b30      	ldr	r3, [pc, #192]	@ (8003d78 <writebuffertoflash+0x114>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	4413      	add	r3, r2
 8003cbc:	2bff      	cmp	r3, #255	@ 0xff
 8003cbe:	dc11      	bgt.n	8003ce4 <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8003cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8003d6c <writebuffertoflash+0x108>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d78 <writebuffertoflash+0x114>)
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	9200      	str	r2, [sp, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	4828      	ldr	r0, [pc, #160]	@ (8003d74 <writebuffertoflash+0x110>)
 8003cd2:	f013 fccd 	bl	8017670 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8003cd6:	4b28      	ldr	r3, [pc, #160]	@ (8003d78 <writebuffertoflash+0x114>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	4413      	add	r3, r2
 8003cde:	4a26      	ldr	r2, [pc, #152]	@ (8003d78 <writebuffertoflash+0x114>)
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	e03c      	b.n	8003d5e <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 8003ce4:	4b21      	ldr	r3, [pc, #132]	@ (8003d6c <writebuffertoflash+0x108>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4b23      	ldr	r3, [pc, #140]	@ (8003d78 <writebuffertoflash+0x114>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4b20      	ldr	r3, [pc, #128]	@ (8003d78 <writebuffertoflash+0x114>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	481d      	ldr	r0, [pc, #116]	@ (8003d74 <writebuffertoflash+0x110>)
 8003d00:	f013 fcb6 	bl	8017670 <SPIF_WritePage>
		HAL_Delay(100);
 8003d04:	2064      	movs	r0, #100	@ 0x64
 8003d06:	f7fd fd12 	bl	800172e <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8003d0a:	4b18      	ldr	r3, [pc, #96]	@ (8003d6c <writebuffertoflash+0x108>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	4618      	mov	r0, r3
 8003d12:	4b19      	ldr	r3, [pc, #100]	@ (8003d78 <writebuffertoflash+0x114>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	1899      	adds	r1, r3, r2
 8003d20:	4b15      	ldr	r3, [pc, #84]	@ (8003d78 <writebuffertoflash+0x114>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	2300      	movs	r3, #0
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	4613      	mov	r3, r2
 8003d34:	460a      	mov	r2, r1
 8003d36:	4601      	mov	r1, r0
 8003d38:	480e      	ldr	r0, [pc, #56]	@ (8003d74 <writebuffertoflash+0x110>)
 8003d3a:	f013 fc99 	bl	8017670 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d6c <writebuffertoflash+0x108>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3301      	adds	r3, #1
 8003d44:	4a09      	ldr	r2, [pc, #36]	@ (8003d6c <writebuffertoflash+0x108>)
 8003d46:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8003d48:	4b09      	ldr	r3, [pc, #36]	@ (8003d70 <writebuffertoflash+0x10c>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d78 <writebuffertoflash+0x114>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	4a07      	ldr	r2, [pc, #28]	@ (8003d78 <writebuffertoflash+0x114>)
 8003d5c:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 8003d5e:	f7ff fed5 	bl	8003b0c <storeindex>

}
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000aa0 	.word	0x20000aa0
 8003d70:	20000aa4 	.word	0x20000aa4
 8003d74:	20000868 	.word	0x20000868
 8003d78:	20000a9c 	.word	0x20000a9c

08003d7c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003d80:	bf00      	nop
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
	...

08003d8c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af04      	add	r7, sp, #16
 8003d92:	4603      	mov	r3, r0
 8003d94:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003d96:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9a:	9302      	str	r3, [sp, #8]
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	1dfb      	adds	r3, r7, #7
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	2301      	movs	r3, #1
 8003da6:	2200      	movs	r2, #0
 8003da8:	2178      	movs	r1, #120	@ 0x78
 8003daa:	4803      	ldr	r0, [pc, #12]	@ (8003db8 <ssd1306_WriteCommand+0x2c>)
 8003dac:	f005 fabc 	bl	8009328 <HAL_I2C_Mem_Write>
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	20000544 	.word	0x20000544

08003dbc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af04      	add	r7, sp, #16
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f04f 32ff 	mov.w	r2, #4294967295
 8003dce:	9202      	str	r2, [sp, #8]
 8003dd0:	9301      	str	r3, [sp, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	2240      	movs	r2, #64	@ 0x40
 8003dda:	2178      	movs	r1, #120	@ 0x78
 8003ddc:	4803      	ldr	r0, [pc, #12]	@ (8003dec <ssd1306_WriteData+0x30>)
 8003dde:	f005 faa3 	bl	8009328 <HAL_I2C_Mem_Write>
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000544 	.word	0x20000544

08003df0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003df4:	f7ff ffc2 	bl	8003d7c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003df8:	2064      	movs	r0, #100	@ 0x64
 8003dfa:	f7fd fc98 	bl	800172e <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f000 fb1a 	bl	8004438 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003e04:	2020      	movs	r0, #32
 8003e06:	f7ff ffc1 	bl	8003d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	f7ff ffbe 	bl	8003d8c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003e10:	20b0      	movs	r0, #176	@ 0xb0
 8003e12:	f7ff ffbb 	bl	8003d8c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003e16:	20c8      	movs	r0, #200	@ 0xc8
 8003e18:	f7ff ffb8 	bl	8003d8c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	f7ff ffb5 	bl	8003d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003e22:	2010      	movs	r0, #16
 8003e24:	f7ff ffb2 	bl	8003d8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003e28:	2040      	movs	r0, #64	@ 0x40
 8003e2a:	f7ff ffaf 	bl	8003d8c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003e2e:	20ff      	movs	r0, #255	@ 0xff
 8003e30:	f000 faee 	bl	8004410 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003e34:	20a1      	movs	r0, #161	@ 0xa1
 8003e36:	f7ff ffa9 	bl	8003d8c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003e3a:	20a6      	movs	r0, #166	@ 0xa6
 8003e3c:	f7ff ffa6 	bl	8003d8c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003e40:	20a8      	movs	r0, #168	@ 0xa8
 8003e42:	f7ff ffa3 	bl	8003d8c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003e46:	203f      	movs	r0, #63	@ 0x3f
 8003e48:	f7ff ffa0 	bl	8003d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003e4c:	20a4      	movs	r0, #164	@ 0xa4
 8003e4e:	f7ff ff9d 	bl	8003d8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003e52:	20d3      	movs	r0, #211	@ 0xd3
 8003e54:	f7ff ff9a 	bl	8003d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003e58:	2000      	movs	r0, #0
 8003e5a:	f7ff ff97 	bl	8003d8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003e5e:	20d5      	movs	r0, #213	@ 0xd5
 8003e60:	f7ff ff94 	bl	8003d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003e64:	20f0      	movs	r0, #240	@ 0xf0
 8003e66:	f7ff ff91 	bl	8003d8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003e6a:	20d9      	movs	r0, #217	@ 0xd9
 8003e6c:	f7ff ff8e 	bl	8003d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003e70:	2022      	movs	r0, #34	@ 0x22
 8003e72:	f7ff ff8b 	bl	8003d8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003e76:	20da      	movs	r0, #218	@ 0xda
 8003e78:	f7ff ff88 	bl	8003d8c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003e7c:	2012      	movs	r0, #18
 8003e7e:	f7ff ff85 	bl	8003d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003e82:	20db      	movs	r0, #219	@ 0xdb
 8003e84:	f7ff ff82 	bl	8003d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003e88:	2020      	movs	r0, #32
 8003e8a:	f7ff ff7f 	bl	8003d8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003e8e:	208d      	movs	r0, #141	@ 0x8d
 8003e90:	f7ff ff7c 	bl	8003d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003e94:	2014      	movs	r0, #20
 8003e96:	f7ff ff79 	bl	8003d8c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	f000 facc 	bl	8004438 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	f000 f80f 	bl	8003ec4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003ea6:	f000 f825 	bl	8003ef4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003eaa:	4b05      	ldr	r3, [pc, #20]	@ (8003ec0 <ssd1306_Init+0xd0>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003eb0:	4b03      	ldr	r3, [pc, #12]	@ (8003ec0 <ssd1306_Init+0xd0>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003eb6:	4b02      	ldr	r3, [pc, #8]	@ (8003ec0 <ssd1306_Init+0xd0>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	711a      	strb	r2, [r3, #4]
}
 8003ebc:	bf00      	nop
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	2000115c 	.word	0x2000115c

08003ec4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <ssd1306_Fill+0x14>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e000      	b.n	8003eda <ssd1306_Fill+0x16>
 8003ed8:	23ff      	movs	r3, #255	@ 0xff
 8003eda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4803      	ldr	r0, [pc, #12]	@ (8003ef0 <ssd1306_Fill+0x2c>)
 8003ee2:	f017 fa12 	bl	801b30a <memset>
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000d5c 	.word	0x20000d5c

08003ef4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003efa:	2300      	movs	r3, #0
 8003efc:	71fb      	strb	r3, [r7, #7]
 8003efe:	e016      	b.n	8003f2e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	3b50      	subs	r3, #80	@ 0x50
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff ff40 	bl	8003d8c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	f7ff ff3d 	bl	8003d8c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003f12:	2010      	movs	r0, #16
 8003f14:	f7ff ff3a 	bl	8003d8c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	01db      	lsls	r3, r3, #7
 8003f1c:	4a08      	ldr	r2, [pc, #32]	@ (8003f40 <ssd1306_UpdateScreen+0x4c>)
 8003f1e:	4413      	add	r3, r2
 8003f20:	2180      	movs	r1, #128	@ 0x80
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff ff4a 	bl	8003dbc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	71fb      	strb	r3, [r7, #7]
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	2b07      	cmp	r3, #7
 8003f32:	d9e5      	bls.n	8003f00 <ssd1306_UpdateScreen+0xc>
    }
}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20000d5c 	.word	0x20000d5c

08003f44 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	71fb      	strb	r3, [r7, #7]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	71bb      	strb	r3, [r7, #6]
 8003f52:	4613      	mov	r3, r2
 8003f54:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	db3d      	blt.n	8003fda <ssd1306_DrawPixel+0x96>
 8003f5e:	79bb      	ldrb	r3, [r7, #6]
 8003f60:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f62:	d83a      	bhi.n	8003fda <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003f64:	797b      	ldrb	r3, [r7, #5]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d11a      	bne.n	8003fa0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003f6a:	79fa      	ldrb	r2, [r7, #7]
 8003f6c:	79bb      	ldrb	r3, [r7, #6]
 8003f6e:	08db      	lsrs	r3, r3, #3
 8003f70:	b2d8      	uxtb	r0, r3
 8003f72:	4603      	mov	r3, r0
 8003f74:	01db      	lsls	r3, r3, #7
 8003f76:	4413      	add	r3, r2
 8003f78:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe8 <ssd1306_DrawPixel+0xa4>)
 8003f7a:	5cd3      	ldrb	r3, [r2, r3]
 8003f7c:	b25a      	sxtb	r2, r3
 8003f7e:	79bb      	ldrb	r3, [r7, #6]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	2101      	movs	r1, #1
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	b25b      	sxtb	r3, r3
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	b259      	sxtb	r1, r3
 8003f90:	79fa      	ldrb	r2, [r7, #7]
 8003f92:	4603      	mov	r3, r0
 8003f94:	01db      	lsls	r3, r3, #7
 8003f96:	4413      	add	r3, r2
 8003f98:	b2c9      	uxtb	r1, r1
 8003f9a:	4a13      	ldr	r2, [pc, #76]	@ (8003fe8 <ssd1306_DrawPixel+0xa4>)
 8003f9c:	54d1      	strb	r1, [r2, r3]
 8003f9e:	e01d      	b.n	8003fdc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003fa0:	79fa      	ldrb	r2, [r7, #7]
 8003fa2:	79bb      	ldrb	r3, [r7, #6]
 8003fa4:	08db      	lsrs	r3, r3, #3
 8003fa6:	b2d8      	uxtb	r0, r3
 8003fa8:	4603      	mov	r3, r0
 8003faa:	01db      	lsls	r3, r3, #7
 8003fac:	4413      	add	r3, r2
 8003fae:	4a0e      	ldr	r2, [pc, #56]	@ (8003fe8 <ssd1306_DrawPixel+0xa4>)
 8003fb0:	5cd3      	ldrb	r3, [r2, r3]
 8003fb2:	b25a      	sxtb	r2, r3
 8003fb4:	79bb      	ldrb	r3, [r7, #6]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	2101      	movs	r1, #1
 8003fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc0:	b25b      	sxtb	r3, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	b25b      	sxtb	r3, r3
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	b259      	sxtb	r1, r3
 8003fca:	79fa      	ldrb	r2, [r7, #7]
 8003fcc:	4603      	mov	r3, r0
 8003fce:	01db      	lsls	r3, r3, #7
 8003fd0:	4413      	add	r3, r2
 8003fd2:	b2c9      	uxtb	r1, r1
 8003fd4:	4a04      	ldr	r2, [pc, #16]	@ (8003fe8 <ssd1306_DrawPixel+0xa4>)
 8003fd6:	54d1      	strb	r1, [r2, r3]
 8003fd8:	e000      	b.n	8003fdc <ssd1306_DrawPixel+0x98>
        return;
 8003fda:	bf00      	nop
    }
}
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000d5c 	.word	0x20000d5c

08003fec <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003fec:	b590      	push	{r4, r7, lr}
 8003fee:	b089      	sub	sp, #36	@ 0x24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	1d38      	adds	r0, r7, #4
 8003ff6:	e880 0006 	stmia.w	r0, {r1, r2}
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	4623      	mov	r3, r4
 8003ffe:	73fb      	strb	r3, [r7, #15]
 8004000:	4613      	mov	r3, r2
 8004002:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	2b1f      	cmp	r3, #31
 8004008:	d902      	bls.n	8004010 <ssd1306_WriteChar+0x24>
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	2b7e      	cmp	r3, #126	@ 0x7e
 800400e:	d901      	bls.n	8004014 <ssd1306_WriteChar+0x28>
        return 0;
 8004010:	2300      	movs	r3, #0
 8004012:	e06c      	b.n	80040ee <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004014:	4b38      	ldr	r3, [pc, #224]	@ (80040f8 <ssd1306_WriteChar+0x10c>)
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	793b      	ldrb	r3, [r7, #4]
 800401c:	4413      	add	r3, r2
 800401e:	2b80      	cmp	r3, #128	@ 0x80
 8004020:	dc06      	bgt.n	8004030 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8004022:	4b35      	ldr	r3, [pc, #212]	@ (80040f8 <ssd1306_WriteChar+0x10c>)
 8004024:	885b      	ldrh	r3, [r3, #2]
 8004026:	461a      	mov	r2, r3
 8004028:	797b      	ldrb	r3, [r7, #5]
 800402a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800402c:	2b40      	cmp	r3, #64	@ 0x40
 800402e:	dd01      	ble.n	8004034 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004030:	2300      	movs	r3, #0
 8004032:	e05c      	b.n	80040ee <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004034:	2300      	movs	r3, #0
 8004036:	61fb      	str	r3, [r7, #28]
 8004038:	e04c      	b.n	80040d4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	3b20      	subs	r3, #32
 8004040:	7979      	ldrb	r1, [r7, #5]
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	4619      	mov	r1, r3
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	440b      	add	r3, r1
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	4413      	add	r3, r2
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004054:	2300      	movs	r3, #0
 8004056:	61bb      	str	r3, [r7, #24]
 8004058:	e034      	b.n	80040c4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d012      	beq.n	8004090 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800406a:	4b23      	ldr	r3, [pc, #140]	@ (80040f8 <ssd1306_WriteChar+0x10c>)
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	b2da      	uxtb	r2, r3
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	4413      	add	r3, r2
 8004076:	b2d8      	uxtb	r0, r3
 8004078:	4b1f      	ldr	r3, [pc, #124]	@ (80040f8 <ssd1306_WriteChar+0x10c>)
 800407a:	885b      	ldrh	r3, [r3, #2]
 800407c:	b2da      	uxtb	r2, r3
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	4413      	add	r3, r2
 8004084:	b2db      	uxtb	r3, r3
 8004086:	7bba      	ldrb	r2, [r7, #14]
 8004088:	4619      	mov	r1, r3
 800408a:	f7ff ff5b 	bl	8003f44 <ssd1306_DrawPixel>
 800408e:	e016      	b.n	80040be <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004090:	4b19      	ldr	r3, [pc, #100]	@ (80040f8 <ssd1306_WriteChar+0x10c>)
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	4413      	add	r3, r2
 800409c:	b2d8      	uxtb	r0, r3
 800409e:	4b16      	ldr	r3, [pc, #88]	@ (80040f8 <ssd1306_WriteChar+0x10c>)
 80040a0:	885b      	ldrh	r3, [r3, #2]
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	b2d9      	uxtb	r1, r3
 80040ac:	7bbb      	ldrb	r3, [r7, #14]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bf0c      	ite	eq
 80040b2:	2301      	moveq	r3, #1
 80040b4:	2300      	movne	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	f7ff ff43 	bl	8003f44 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	3301      	adds	r3, #1
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	793b      	ldrb	r3, [r7, #4]
 80040c6:	461a      	mov	r2, r3
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d3c5      	bcc.n	800405a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3301      	adds	r3, #1
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	797b      	ldrb	r3, [r7, #5]
 80040d6:	461a      	mov	r2, r3
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	4293      	cmp	r3, r2
 80040dc:	d3ad      	bcc.n	800403a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80040de:	4b06      	ldr	r3, [pc, #24]	@ (80040f8 <ssd1306_WriteChar+0x10c>)
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	793a      	ldrb	r2, [r7, #4]
 80040e4:	4413      	add	r3, r2
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	4b03      	ldr	r3, [pc, #12]	@ (80040f8 <ssd1306_WriteChar+0x10c>)
 80040ea:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3724      	adds	r7, #36	@ 0x24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd90      	pop	{r4, r7, pc}
 80040f6:	bf00      	nop
 80040f8:	2000115c 	.word	0x2000115c

080040fc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	1d38      	adds	r0, r7, #4
 8004106:	e880 0006 	stmia.w	r0, {r1, r2}
 800410a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800410c:	e012      	b.n	8004134 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	7818      	ldrb	r0, [r3, #0]
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	1d3a      	adds	r2, r7, #4
 8004116:	ca06      	ldmia	r2, {r1, r2}
 8004118:	f7ff ff68 	bl	8003fec <ssd1306_WriteChar>
 800411c:	4603      	mov	r3, r0
 800411e:	461a      	mov	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d002      	beq.n	800412e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	e008      	b.n	8004140 <ssd1306_WriteString+0x44>
        }
        str++;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3301      	adds	r3, #1
 8004132:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e8      	bne.n	800410e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	781b      	ldrb	r3, [r3, #0]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	460a      	mov	r2, r1
 8004152:	71fb      	strb	r3, [r7, #7]
 8004154:	4613      	mov	r3, r2
 8004156:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	b29a      	uxth	r2, r3
 800415c:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <ssd1306_SetCursor+0x2c>)
 800415e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004160:	79bb      	ldrb	r3, [r7, #6]
 8004162:	b29a      	uxth	r2, r3
 8004164:	4b03      	ldr	r3, [pc, #12]	@ (8004174 <ssd1306_SetCursor+0x2c>)
 8004166:	805a      	strh	r2, [r3, #2]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	2000115c 	.word	0x2000115c

08004178 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	b089      	sub	sp, #36	@ 0x24
 800417c:	af00      	add	r7, sp, #0
 800417e:	4604      	mov	r4, r0
 8004180:	4608      	mov	r0, r1
 8004182:	4611      	mov	r1, r2
 8004184:	461a      	mov	r2, r3
 8004186:	4623      	mov	r3, r4
 8004188:	71fb      	strb	r3, [r7, #7]
 800418a:	4603      	mov	r3, r0
 800418c:	71bb      	strb	r3, [r7, #6]
 800418e:	460b      	mov	r3, r1
 8004190:	717b      	strb	r3, [r7, #5]
 8004192:	4613      	mov	r3, r2
 8004194:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8004196:	797a      	ldrb	r2, [r7, #5]
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	bfb8      	it	lt
 80041a0:	425b      	neglt	r3, r3
 80041a2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80041a4:	793a      	ldrb	r2, [r7, #4]
 80041a6:	79bb      	ldrb	r3, [r7, #6]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	bfb8      	it	lt
 80041ae:	425b      	neglt	r3, r3
 80041b0:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80041b2:	79fa      	ldrb	r2, [r7, #7]
 80041b4:	797b      	ldrb	r3, [r7, #5]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d201      	bcs.n	80041be <ssd1306_Line+0x46>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e001      	b.n	80041c2 <ssd1306_Line+0x4a>
 80041be:	f04f 33ff 	mov.w	r3, #4294967295
 80041c2:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80041c4:	79ba      	ldrb	r2, [r7, #6]
 80041c6:	793b      	ldrb	r3, [r7, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d201      	bcs.n	80041d0 <ssd1306_Line+0x58>
 80041cc:	2301      	movs	r3, #1
 80041ce:	e001      	b.n	80041d4 <ssd1306_Line+0x5c>
 80041d0:	f04f 33ff 	mov.w	r3, #4294967295
 80041d4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80041de:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80041e2:	7939      	ldrb	r1, [r7, #4]
 80041e4:	797b      	ldrb	r3, [r7, #5]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff feac 	bl	8003f44 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80041ec:	e024      	b.n	8004238 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80041ee:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80041f2:	79b9      	ldrb	r1, [r7, #6]
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fea4 	bl	8003f44 <ssd1306_DrawPixel>
        error2 = error * 2;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	425b      	negs	r3, r3
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	429a      	cmp	r2, r3
 800420a:	dd08      	ble.n	800421e <ssd1306_Line+0xa6>
            error -= deltaY;
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	b2da      	uxtb	r2, r3
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	4413      	add	r3, r2
 800421c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	429a      	cmp	r2, r3
 8004224:	da08      	bge.n	8004238 <ssd1306_Line+0xc0>
            error += deltaX;
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	4413      	add	r3, r2
 800422c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	79bb      	ldrb	r3, [r7, #6]
 8004234:	4413      	add	r3, r2
 8004236:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8004238:	79fa      	ldrb	r2, [r7, #7]
 800423a:	797b      	ldrb	r3, [r7, #5]
 800423c:	429a      	cmp	r2, r3
 800423e:	d1d6      	bne.n	80041ee <ssd1306_Line+0x76>
 8004240:	79ba      	ldrb	r2, [r7, #6]
 8004242:	793b      	ldrb	r3, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	d1d2      	bne.n	80041ee <ssd1306_Line+0x76>
        }
    }
    return;
 8004248:	bf00      	nop
}
 800424a:	3724      	adds	r7, #36	@ 0x24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd90      	pop	{r4, r7, pc}

08004250 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b085      	sub	sp, #20
 8004254:	af02      	add	r7, sp, #8
 8004256:	4604      	mov	r4, r0
 8004258:	4608      	mov	r0, r1
 800425a:	4611      	mov	r1, r2
 800425c:	461a      	mov	r2, r3
 800425e:	4623      	mov	r3, r4
 8004260:	71fb      	strb	r3, [r7, #7]
 8004262:	4603      	mov	r3, r0
 8004264:	71bb      	strb	r3, [r7, #6]
 8004266:	460b      	mov	r3, r1
 8004268:	717b      	strb	r3, [r7, #5]
 800426a:	4613      	mov	r3, r2
 800426c:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800426e:	79bc      	ldrb	r4, [r7, #6]
 8004270:	797a      	ldrb	r2, [r7, #5]
 8004272:	79b9      	ldrb	r1, [r7, #6]
 8004274:	79f8      	ldrb	r0, [r7, #7]
 8004276:	7e3b      	ldrb	r3, [r7, #24]
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	4623      	mov	r3, r4
 800427c:	f7ff ff7c 	bl	8004178 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8004280:	793c      	ldrb	r4, [r7, #4]
 8004282:	797a      	ldrb	r2, [r7, #5]
 8004284:	79b9      	ldrb	r1, [r7, #6]
 8004286:	7978      	ldrb	r0, [r7, #5]
 8004288:	7e3b      	ldrb	r3, [r7, #24]
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	4623      	mov	r3, r4
 800428e:	f7ff ff73 	bl	8004178 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8004292:	793c      	ldrb	r4, [r7, #4]
 8004294:	79fa      	ldrb	r2, [r7, #7]
 8004296:	7939      	ldrb	r1, [r7, #4]
 8004298:	7978      	ldrb	r0, [r7, #5]
 800429a:	7e3b      	ldrb	r3, [r7, #24]
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	4623      	mov	r3, r4
 80042a0:	f7ff ff6a 	bl	8004178 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80042a4:	79bc      	ldrb	r4, [r7, #6]
 80042a6:	79fa      	ldrb	r2, [r7, #7]
 80042a8:	7939      	ldrb	r1, [r7, #4]
 80042aa:	79f8      	ldrb	r0, [r7, #7]
 80042ac:	7e3b      	ldrb	r3, [r7, #24]
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	4623      	mov	r3, r4
 80042b2:	f7ff ff61 	bl	8004178 <ssd1306_Line>

    return;
 80042b6:	bf00      	nop
}
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd90      	pop	{r4, r7, pc}

080042be <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80042be:	b590      	push	{r4, r7, lr}
 80042c0:	b085      	sub	sp, #20
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	4604      	mov	r4, r0
 80042c6:	4608      	mov	r0, r1
 80042c8:	4611      	mov	r1, r2
 80042ca:	461a      	mov	r2, r3
 80042cc:	4623      	mov	r3, r4
 80042ce:	71fb      	strb	r3, [r7, #7]
 80042d0:	4603      	mov	r3, r0
 80042d2:	71bb      	strb	r3, [r7, #6]
 80042d4:	460b      	mov	r3, r1
 80042d6:	717b      	strb	r3, [r7, #5]
 80042d8:	4613      	mov	r3, r2
 80042da:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80042dc:	79fa      	ldrb	r2, [r7, #7]
 80042de:	797b      	ldrb	r3, [r7, #5]
 80042e0:	4293      	cmp	r3, r2
 80042e2:	bf28      	it	cs
 80042e4:	4613      	movcs	r3, r2
 80042e6:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80042e8:	797a      	ldrb	r2, [r7, #5]
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	4293      	cmp	r3, r2
 80042ee:	bf38      	it	cc
 80042f0:	4613      	movcc	r3, r2
 80042f2:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 80042f4:	79ba      	ldrb	r2, [r7, #6]
 80042f6:	793b      	ldrb	r3, [r7, #4]
 80042f8:	4293      	cmp	r3, r2
 80042fa:	bf28      	it	cs
 80042fc:	4613      	movcs	r3, r2
 80042fe:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8004300:	793a      	ldrb	r2, [r7, #4]
 8004302:	79bb      	ldrb	r3, [r7, #6]
 8004304:	4293      	cmp	r3, r2
 8004306:	bf38      	it	cc
 8004308:	4613      	movcc	r3, r2
 800430a:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800430c:	7afb      	ldrb	r3, [r7, #11]
 800430e:	73fb      	strb	r3, [r7, #15]
 8004310:	e017      	b.n	8004342 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004312:	7b7b      	ldrb	r3, [r7, #13]
 8004314:	73bb      	strb	r3, [r7, #14]
 8004316:	e009      	b.n	800432c <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8004318:	f897 2020 	ldrb.w	r2, [r7, #32]
 800431c:	7bf9      	ldrb	r1, [r7, #15]
 800431e:	7bbb      	ldrb	r3, [r7, #14]
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff fe0f 	bl	8003f44 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004326:	7bbb      	ldrb	r3, [r7, #14]
 8004328:	3301      	adds	r3, #1
 800432a:	73bb      	strb	r3, [r7, #14]
 800432c:	7bba      	ldrb	r2, [r7, #14]
 800432e:	7b3b      	ldrb	r3, [r7, #12]
 8004330:	429a      	cmp	r2, r3
 8004332:	d803      	bhi.n	800433c <ssd1306_FillRectangle+0x7e>
 8004334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004338:	2b00      	cmp	r3, #0
 800433a:	daed      	bge.n	8004318 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	3301      	adds	r3, #1
 8004340:	73fb      	strb	r3, [r7, #15]
 8004342:	7bfa      	ldrb	r2, [r7, #15]
 8004344:	7abb      	ldrb	r3, [r7, #10]
 8004346:	429a      	cmp	r2, r3
 8004348:	d803      	bhi.n	8004352 <ssd1306_FillRectangle+0x94>
 800434a:	7bfb      	ldrb	r3, [r7, #15]
 800434c:	2b3f      	cmp	r3, #63	@ 0x3f
 800434e:	d9e0      	bls.n	8004312 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8004350:	bf00      	nop
 8004352:	bf00      	nop
}
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	bd90      	pop	{r4, r7, pc}

0800435a <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	603a      	str	r2, [r7, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	4603      	mov	r3, r0
 8004366:	71fb      	strb	r3, [r7, #7]
 8004368:	460b      	mov	r3, r1
 800436a:	71bb      	strb	r3, [r7, #6]
 800436c:	4613      	mov	r3, r2
 800436e:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004370:	797b      	ldrb	r3, [r7, #5]
 8004372:	3307      	adds	r3, #7
 8004374:	2b00      	cmp	r3, #0
 8004376:	da00      	bge.n	800437a <ssd1306_DrawBitmap+0x20>
 8004378:	3307      	adds	r3, #7
 800437a:	10db      	asrs	r3, r3, #3
 800437c:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004386:	2b00      	cmp	r3, #0
 8004388:	db3e      	blt.n	8004408 <ssd1306_DrawBitmap+0xae>
 800438a:	79bb      	ldrb	r3, [r7, #6]
 800438c:	2b3f      	cmp	r3, #63	@ 0x3f
 800438e:	d83b      	bhi.n	8004408 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8004390:	2300      	movs	r3, #0
 8004392:	73bb      	strb	r3, [r7, #14]
 8004394:	e033      	b.n	80043fe <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8004396:	2300      	movs	r3, #0
 8004398:	737b      	strb	r3, [r7, #13]
 800439a:	e026      	b.n	80043ea <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 800439c:	7b7b      	ldrb	r3, [r7, #13]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
 80043ac:	e00d      	b.n	80043ca <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80043ae:	7bbb      	ldrb	r3, [r7, #14]
 80043b0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80043b4:	fb02 f303 	mul.w	r3, r2, r3
 80043b8:	7b7a      	ldrb	r2, [r7, #13]
 80043ba:	08d2      	lsrs	r2, r2, #3
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	4413      	add	r3, r2
 80043c0:	461a      	mov	r2, r3
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	4413      	add	r3, r2
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80043ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	da08      	bge.n	80043e4 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80043d2:	79fa      	ldrb	r2, [r7, #7]
 80043d4:	7b7b      	ldrb	r3, [r7, #13]
 80043d6:	4413      	add	r3, r2
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	7f3a      	ldrb	r2, [r7, #28]
 80043dc:	79b9      	ldrb	r1, [r7, #6]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff fdb0 	bl	8003f44 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80043e4:	7b7b      	ldrb	r3, [r7, #13]
 80043e6:	3301      	adds	r3, #1
 80043e8:	737b      	strb	r3, [r7, #13]
 80043ea:	7b7a      	ldrb	r2, [r7, #13]
 80043ec:	797b      	ldrb	r3, [r7, #5]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d3d4      	bcc.n	800439c <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80043f2:	7bbb      	ldrb	r3, [r7, #14]
 80043f4:	3301      	adds	r3, #1
 80043f6:	73bb      	strb	r3, [r7, #14]
 80043f8:	79bb      	ldrb	r3, [r7, #6]
 80043fa:	3301      	adds	r3, #1
 80043fc:	71bb      	strb	r3, [r7, #6]
 80043fe:	7bba      	ldrb	r2, [r7, #14]
 8004400:	7e3b      	ldrb	r3, [r7, #24]
 8004402:	429a      	cmp	r2, r3
 8004404:	d3c7      	bcc.n	8004396 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8004406:	e000      	b.n	800440a <ssd1306_DrawBitmap+0xb0>
        return;
 8004408:	bf00      	nop
}
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800441a:	2381      	movs	r3, #129	@ 0x81
 800441c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fcb3 	bl	8003d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff fcaf 	bl	8003d8c <ssd1306_WriteCommand>
}
 800442e:	bf00      	nop
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004448:	23af      	movs	r3, #175	@ 0xaf
 800444a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800444c:	4b08      	ldr	r3, [pc, #32]	@ (8004470 <ssd1306_SetDisplayOn+0x38>)
 800444e:	2201      	movs	r2, #1
 8004450:	715a      	strb	r2, [r3, #5]
 8004452:	e004      	b.n	800445e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004454:	23ae      	movs	r3, #174	@ 0xae
 8004456:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004458:	4b05      	ldr	r3, [pc, #20]	@ (8004470 <ssd1306_SetDisplayOn+0x38>)
 800445a:	2200      	movs	r2, #0
 800445c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff fc93 	bl	8003d8c <ssd1306_WriteCommand>
}
 8004466:	bf00      	nop
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	2000115c 	.word	0x2000115c
 8004474:	00000000 	.word	0x00000000

08004478 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 8004478:	b590      	push	{r4, r7, lr}
 800447a:	b087      	sub	sp, #28
 800447c:	af02      	add	r7, sp, #8
 800447e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004482:	60b8      	str	r0, [r7, #8]
 8004484:	6079      	str	r1, [r7, #4]
 8004486:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	330f      	adds	r3, #15
 800448e:	b2d8      	uxtb	r0, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	3301      	adds	r3, #1
 8004496:	b2d9      	uxtb	r1, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	330f      	adds	r3, #15
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	3305      	adds	r3, #5
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2401      	movs	r4, #1
 80044aa:	9400      	str	r4, [sp, #0]
 80044ac:	f7ff fe64 	bl	8004178 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	3310      	adds	r3, #16
 80044b6:	b2d8      	uxtb	r0, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	3301      	adds	r3, #1
 80044be:	b2d9      	uxtb	r1, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	3310      	adds	r3, #16
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	3305      	adds	r3, #5
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2401      	movs	r4, #1
 80044d2:	9400      	str	r4, [sp, #0]
 80044d4:	f7ff fe50 	bl	8004178 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	b2d8      	uxtb	r0, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	b2d9      	uxtb	r1, r3
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	330e      	adds	r3, #14
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	3306      	adds	r3, #6
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2401      	movs	r4, #1
 80044f2:	9400      	str	r4, [sp, #0]
 80044f4:	f7ff feac 	bl	8004250 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7fb fffd 	bl	80004f8 <__aeabi_f2d>
 80044fe:	a396      	add	r3, pc, #600	@ (adr r3, 8004758 <batterygauge+0x2e0>)
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f7fc facc 	bl	8000aa0 <__aeabi_dcmple>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d02a      	beq.n	8004564 <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	3302      	adds	r3, #2
 8004514:	b2d8      	uxtb	r0, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	3302      	adds	r3, #2
 800451c:	b2d9      	uxtb	r1, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	3303      	adds	r3, #3
 8004524:	b2da      	uxtb	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	3304      	adds	r3, #4
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2401      	movs	r4, #1
 8004530:	9400      	str	r4, [sp, #0]
 8004532:	f7ff fe8d 	bl	8004250 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d113      	bne.n	8004564 <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	3302      	adds	r3, #2
 8004542:	b2d8      	uxtb	r0, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	3302      	adds	r3, #2
 800454a:	b2d9      	uxtb	r1, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	3303      	adds	r3, #3
 8004552:	b2da      	uxtb	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	3304      	adds	r3, #4
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2401      	movs	r4, #1
 800455e:	9400      	str	r4, [sp, #0]
 8004560:	f7ff fe76 	bl	8004250 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7fb ffc7 	bl	80004f8 <__aeabi_f2d>
 800456a:	a37b      	add	r3, pc, #492	@ (adr r3, 8004758 <batterygauge+0x2e0>)
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	f7fc faaa 	bl	8000ac8 <__aeabi_dcmpgt>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d035      	beq.n	80045e6 <batterygauge+0x16e>
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7fb ffbc 	bl	80004f8 <__aeabi_f2d>
 8004580:	a377      	add	r3, pc, #476	@ (adr r3, 8004760 <batterygauge+0x2e8>)
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	f7fc fa8b 	bl	8000aa0 <__aeabi_dcmple>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d02a      	beq.n	80045e6 <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	3302      	adds	r3, #2
 8004596:	b2d8      	uxtb	r0, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	3302      	adds	r3, #2
 800459e:	b2d9      	uxtb	r1, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	3303      	adds	r3, #3
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	3304      	adds	r3, #4
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2401      	movs	r4, #1
 80045b2:	9400      	str	r4, [sp, #0]
 80045b4:	f7ff fe4c 	bl	8004250 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d113      	bne.n	80045e6 <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	3305      	adds	r3, #5
 80045c4:	b2d8      	uxtb	r0, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	3302      	adds	r3, #2
 80045cc:	b2d9      	uxtb	r1, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	3306      	adds	r3, #6
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	3304      	adds	r3, #4
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2401      	movs	r4, #1
 80045e0:	9400      	str	r4, [sp, #0]
 80045e2:	f7ff fe35 	bl	8004250 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f7fb ff86 	bl	80004f8 <__aeabi_f2d>
 80045ec:	a35c      	add	r3, pc, #368	@ (adr r3, 8004760 <batterygauge+0x2e8>)
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	f7fc fa69 	bl	8000ac8 <__aeabi_dcmpgt>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d049      	beq.n	8004690 <batterygauge+0x218>
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7fb ff7b 	bl	80004f8 <__aeabi_f2d>
 8004602:	a359      	add	r3, pc, #356	@ (adr r3, 8004768 <batterygauge+0x2f0>)
 8004604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004608:	f7fc fa4a 	bl	8000aa0 <__aeabi_dcmple>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d03e      	beq.n	8004690 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	3302      	adds	r3, #2
 8004618:	b2d8      	uxtb	r0, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	3302      	adds	r3, #2
 8004620:	b2d9      	uxtb	r1, r3
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	3303      	adds	r3, #3
 8004628:	b2da      	uxtb	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	3304      	adds	r3, #4
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2401      	movs	r4, #1
 8004634:	9400      	str	r4, [sp, #0]
 8004636:	f7ff fe0b 	bl	8004250 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	3305      	adds	r3, #5
 8004640:	b2d8      	uxtb	r0, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	3302      	adds	r3, #2
 8004648:	b2d9      	uxtb	r1, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	3306      	adds	r3, #6
 8004650:	b2da      	uxtb	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	3304      	adds	r3, #4
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2401      	movs	r4, #1
 800465c:	9400      	str	r4, [sp, #0]
 800465e:	f7ff fdf7 	bl	8004250 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d113      	bne.n	8004690 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	3308      	adds	r3, #8
 800466e:	b2d8      	uxtb	r0, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	3302      	adds	r3, #2
 8004676:	b2d9      	uxtb	r1, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	3309      	adds	r3, #9
 800467e:	b2da      	uxtb	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	3304      	adds	r3, #4
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2401      	movs	r4, #1
 800468a:	9400      	str	r4, [sp, #0]
 800468c:	f7ff fde0 	bl	8004250 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7fb ff31 	bl	80004f8 <__aeabi_f2d>
 8004696:	a334      	add	r3, pc, #208	@ (adr r3, 8004768 <batterygauge+0x2f0>)
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	f7fc fa14 	bl	8000ac8 <__aeabi_dcmpgt>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d100      	bne.n	80046a8 <batterygauge+0x230>
	}




}
 80046a6:	e052      	b.n	800474e <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	3302      	adds	r3, #2
 80046ae:	b2d8      	uxtb	r0, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	3302      	adds	r3, #2
 80046b6:	b2d9      	uxtb	r1, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	3303      	adds	r3, #3
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	3304      	adds	r3, #4
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2401      	movs	r4, #1
 80046ca:	9400      	str	r4, [sp, #0]
 80046cc:	f7ff fdc0 	bl	8004250 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	3305      	adds	r3, #5
 80046d6:	b2d8      	uxtb	r0, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	3302      	adds	r3, #2
 80046de:	b2d9      	uxtb	r1, r3
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	3306      	adds	r3, #6
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	3304      	adds	r3, #4
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2401      	movs	r4, #1
 80046f2:	9400      	str	r4, [sp, #0]
 80046f4:	f7ff fdac 	bl	8004250 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	3308      	adds	r3, #8
 80046fe:	b2d8      	uxtb	r0, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	3302      	adds	r3, #2
 8004706:	b2d9      	uxtb	r1, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	3309      	adds	r3, #9
 800470e:	b2da      	uxtb	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	3304      	adds	r3, #4
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2401      	movs	r4, #1
 800471a:	9400      	str	r4, [sp, #0]
 800471c:	f7ff fd98 	bl	8004250 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d113      	bne.n	800474e <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	330b      	adds	r3, #11
 800472c:	b2d8      	uxtb	r0, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	3302      	adds	r3, #2
 8004734:	b2d9      	uxtb	r1, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	330c      	adds	r3, #12
 800473c:	b2da      	uxtb	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	3304      	adds	r3, #4
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2401      	movs	r4, #1
 8004748:	9400      	str	r4, [sp, #0]
 800474a:	f7ff fd81 	bl	8004250 <ssd1306_DrawRectangle>
}
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	bd90      	pop	{r4, r7, pc}
 8004756:	bf00      	nop
 8004758:	9999999a 	.word	0x9999999a
 800475c:	400d9999 	.word	0x400d9999
 8004760:	33333333 	.word	0x33333333
 8004764:	400f3333 	.word	0x400f3333
 8004768:	66666666 	.word	0x66666666
 800476c:	40106666 	.word	0x40106666

08004770 <percentage>:

void percentage(float percent){
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af02      	add	r7, sp, #8
 8004776:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 20, floor(0.64*percent+32), 36, White);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fb febc 	bl	80004f8 <__aeabi_f2d>
 8004780:	a329      	add	r3, pc, #164	@ (adr r3, 8004828 <percentage+0xb8>)
 8004782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004786:	f7fb ff0f 	bl	80005a8 <__aeabi_dmul>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	4610      	mov	r0, r2
 8004790:	4619      	mov	r1, r3
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	4b20      	ldr	r3, [pc, #128]	@ (8004818 <percentage+0xa8>)
 8004798:	f7fb fd50 	bl	800023c <__adddf3>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	ec43 2b17 	vmov	d7, r2, r3
 80047a4:	eeb0 0a47 	vmov.f32	s0, s14
 80047a8:	eef0 0a67 	vmov.f32	s1, s15
 80047ac:	f019 fc08 	bl	801dfc0 <floor>
 80047b0:	ec53 2b10 	vmov	r2, r3, d0
 80047b4:	4610      	mov	r0, r2
 80047b6:	4619      	mov	r1, r3
 80047b8:	f7fc f9ce 	bl	8000b58 <__aeabi_d2uiz>
 80047bc:	4603      	mov	r3, r0
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	2301      	movs	r3, #1
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	2324      	movs	r3, #36	@ 0x24
 80047c6:	2114      	movs	r1, #20
 80047c8:	2020      	movs	r0, #32
 80047ca:	f7ff fd78 	bl	80042be <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 20, 95, 36, White);
 80047ce:	2301      	movs	r3, #1
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	2324      	movs	r3, #36	@ 0x24
 80047d4:	225f      	movs	r2, #95	@ 0x5f
 80047d6:	2114      	movs	r1, #20
 80047d8:	2020      	movs	r0, #32
 80047da:	f7ff fd39 	bl	8004250 <ssd1306_DrawRectangle>
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fb fe8a 	bl	80004f8 <__aeabi_f2d>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	e9cd 2300 	strd	r2, r3, [sp]
 80047ec:	4a0b      	ldr	r2, [pc, #44]	@ (800481c <percentage+0xac>)
 80047ee:	2114      	movs	r1, #20
 80047f0:	480b      	ldr	r0, [pc, #44]	@ (8004820 <percentage+0xb0>)
 80047f2:	f016 fcf3 	bl	801b1dc <sniprintf>
	ssd1306_SetCursor(45,24);
 80047f6:	2118      	movs	r1, #24
 80047f8:	202d      	movs	r0, #45	@ 0x2d
 80047fa:	f7ff fca5 	bl	8004148 <ssd1306_SetCursor>
	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 80047fe:	4a09      	ldr	r2, [pc, #36]	@ (8004824 <percentage+0xb4>)
 8004800:	2301      	movs	r3, #1
 8004802:	ca06      	ldmia	r2, {r1, r2}
 8004804:	4806      	ldr	r0, [pc, #24]	@ (8004820 <percentage+0xb0>)
 8004806:	f7ff fc79 	bl	80040fc <ssd1306_WriteString>


}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	f3af 8000 	nop.w
 8004818:	40400000 	.word	0x40400000
 800481c:	0801f8e4 	.word	0x0801f8e4
 8004820:	20000ac0 	.word	0x20000ac0
 8004824:	20000014 	.word	0x20000014
 8004828:	47ae147b 	.word	0x47ae147b
 800482c:	3fe47ae1 	.word	0x3fe47ae1

08004830 <statemachine>:





void statemachine(void){
 8004830:	b5b0      	push	{r4, r5, r7, lr}
 8004832:	ed2d 8b02 	vpush	{d8}
 8004836:	b08a      	sub	sp, #40	@ 0x28
 8004838:	af04      	add	r7, sp, #16
	switch(state){
 800483a:	4b9b      	ldr	r3, [pc, #620]	@ (8004aa8 <statemachine+0x278>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b05      	cmp	r3, #5
 8004840:	f201 83e1 	bhi.w	8006006 <statemachine+0x17d6>
 8004844:	a201      	add	r2, pc, #4	@ (adr r2, 800484c <statemachine+0x1c>)
 8004846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484a:	bf00      	nop
 800484c:	08004865 	.word	0x08004865
 8004850:	08004b6d 	.word	0x08004b6d
 8004854:	08005111 	.word	0x08005111
 8004858:	080057c1 	.word	0x080057c1
 800485c:	08005a3b 	.word	0x08005a3b
 8004860:	08005f47 	.word	0x08005f47
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 8004864:	2000      	movs	r0, #0
 8004866:	f7ff fb2d 	bl	8003ec4 <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 800486a:	2120      	movs	r1, #32
 800486c:	2020      	movs	r0, #32
 800486e:	f7ff fc6b 	bl	8004148 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 8004872:	498e      	ldr	r1, [pc, #568]	@ (8004aac <statemachine+0x27c>)
 8004874:	488e      	ldr	r0, [pc, #568]	@ (8004ab0 <statemachine+0x280>)
 8004876:	f7fe fd55 	bl	8003324 <nmea_parse>
				 if(myData.speed>=vitmax){
 800487a:	4b8d      	ldr	r3, [pc, #564]	@ (8004ab0 <statemachine+0x280>)
 800487c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004880:	4b8c      	ldr	r3, [pc, #560]	@ (8004ab4 <statemachine+0x284>)
 8004882:	edd3 7a00 	vldr	s15, [r3]
 8004886:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800488a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800488e:	db03      	blt.n	8004898 <statemachine+0x68>
									 vitmax=myData.speed;
 8004890:	4b87      	ldr	r3, [pc, #540]	@ (8004ab0 <statemachine+0x280>)
 8004892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004894:	4a87      	ldr	r2, [pc, #540]	@ (8004ab4 <statemachine+0x284>)
 8004896:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	617b      	str	r3, [r7, #20]
								 float sec=0;
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	613b      	str	r3, [r7, #16]
								 if (myData.speed!=0){
 80048a4:	4b82      	ldr	r3, [pc, #520]	@ (8004ab0 <statemachine+0x280>)
 80048a6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80048aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80048ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b2:	d032      	beq.n	800491a <statemachine+0xea>
									 pace=1000/(60*myData.speed);
 80048b4:	4b7e      	ldr	r3, [pc, #504]	@ (8004ab0 <statemachine+0x280>)
 80048b6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80048ba:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8004ab8 <statemachine+0x288>
 80048be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80048c2:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8004abc <statemachine+0x28c>
 80048c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ca:	edc7 7a05 	vstr	s15, [r7, #20]
									 sec=(pace-floor(pace))*60;
 80048ce:	6978      	ldr	r0, [r7, #20]
 80048d0:	f7fb fe12 	bl	80004f8 <__aeabi_f2d>
 80048d4:	4604      	mov	r4, r0
 80048d6:	460d      	mov	r5, r1
 80048d8:	6978      	ldr	r0, [r7, #20]
 80048da:	f7fb fe0d 	bl	80004f8 <__aeabi_f2d>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	ec43 2b10 	vmov	d0, r2, r3
 80048e6:	f019 fb6b 	bl	801dfc0 <floor>
 80048ea:	ec53 2b10 	vmov	r2, r3, d0
 80048ee:	4620      	mov	r0, r4
 80048f0:	4629      	mov	r1, r5
 80048f2:	f7fb fca1 	bl	8000238 <__aeabi_dsub>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4610      	mov	r0, r2
 80048fc:	4619      	mov	r1, r3
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	4b6f      	ldr	r3, [pc, #444]	@ (8004ac0 <statemachine+0x290>)
 8004904:	f7fb fe50 	bl	80005a8 <__aeabi_dmul>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4610      	mov	r0, r2
 800490e:	4619      	mov	r1, r3
 8004910:	f7fc f942 	bl	8000b98 <__aeabi_d2f>
 8004914:	4603      	mov	r3, r0
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	e001      	b.n	800491e <statemachine+0xee>
								 }
								 else {
									 pace=9999;
 800491a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ac4 <statemachine+0x294>)
 800491c:	617b      	str	r3, [r7, #20]
								 }


				  switch(spdstate){
 800491e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ac8 <statemachine+0x298>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <statemachine+0xfe>
 8004926:	2b01      	cmp	r3, #1
 8004928:	f000 8081 	beq.w	8004a2e <statemachine+0x1fe>
 800492c:	e0e3      	b.n	8004af6 <statemachine+0x2c6>


				 case STATE_SUMMARY:

						snprintf((char *)bufferscreen,15, "MaxV=%.1f",vitmax*3.6);
 800492e:	4b61      	ldr	r3, [pc, #388]	@ (8004ab4 <statemachine+0x284>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fb fde0 	bl	80004f8 <__aeabi_f2d>
 8004938:	a359      	add	r3, pc, #356	@ (adr r3, 8004aa0 <statemachine+0x270>)
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	f7fb fe33 	bl	80005a8 <__aeabi_dmul>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	e9cd 2300 	strd	r2, r3, [sp]
 800494a:	4a60      	ldr	r2, [pc, #384]	@ (8004acc <statemachine+0x29c>)
 800494c:	210f      	movs	r1, #15
 800494e:	4860      	ldr	r0, [pc, #384]	@ (8004ad0 <statemachine+0x2a0>)
 8004950:	f016 fc44 	bl	801b1dc <sniprintf>
						ssd1306_SetCursor(32, 12);
 8004954:	210c      	movs	r1, #12
 8004956:	2020      	movs	r0, #32
 8004958:	f7ff fbf6 	bl	8004148 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800495c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ad4 <statemachine+0x2a4>)
 800495e:	2301      	movs	r3, #1
 8004960:	ca06      	ldmia	r2, {r1, r2}
 8004962:	485b      	ldr	r0, [pc, #364]	@ (8004ad0 <statemachine+0x2a0>)
 8004964:	f7ff fbca 	bl	80040fc <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "V=%0.1f",(myData.speed)*3.6);
 8004968:	4b51      	ldr	r3, [pc, #324]	@ (8004ab0 <statemachine+0x280>)
 800496a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496c:	4618      	mov	r0, r3
 800496e:	f7fb fdc3 	bl	80004f8 <__aeabi_f2d>
 8004972:	a34b      	add	r3, pc, #300	@ (adr r3, 8004aa0 <statemachine+0x270>)
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	f7fb fe16 	bl	80005a8 <__aeabi_dmul>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	e9cd 2300 	strd	r2, r3, [sp]
 8004984:	4a54      	ldr	r2, [pc, #336]	@ (8004ad8 <statemachine+0x2a8>)
 8004986:	210f      	movs	r1, #15
 8004988:	4851      	ldr	r0, [pc, #324]	@ (8004ad0 <statemachine+0x2a0>)
 800498a:	f016 fc27 	bl	801b1dc <sniprintf>
						ssd1306_SetCursor(32, 20);
 800498e:	2114      	movs	r1, #20
 8004990:	2020      	movs	r0, #32
 8004992:	f7ff fbd9 	bl	8004148 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004996:	4a4f      	ldr	r2, [pc, #316]	@ (8004ad4 <statemachine+0x2a4>)
 8004998:	2301      	movs	r3, #1
 800499a:	ca06      	ldmia	r2, {r1, r2}
 800499c:	484c      	ldr	r0, [pc, #304]	@ (8004ad0 <statemachine+0x2a0>)
 800499e:	f7ff fbad 	bl	80040fc <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));
 80049a2:	6978      	ldr	r0, [r7, #20]
 80049a4:	f7fb fda8 	bl	80004f8 <__aeabi_f2d>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	ec43 2b10 	vmov	d0, r2, r3
 80049b0:	f019 fb06 	bl	801dfc0 <floor>
 80049b4:	eeb0 8a40 	vmov.f32	s16, s0
 80049b8:	eef0 8a60 	vmov.f32	s17, s1
 80049bc:	6938      	ldr	r0, [r7, #16]
 80049be:	f7fb fd9b 	bl	80004f8 <__aeabi_f2d>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	ec43 2b10 	vmov	d0, r2, r3
 80049ca:	f019 faf9 	bl	801dfc0 <floor>
 80049ce:	eeb0 7a40 	vmov.f32	s14, s0
 80049d2:	eef0 7a60 	vmov.f32	s15, s1
 80049d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80049da:	ed8d 8b00 	vstr	d8, [sp]
 80049de:	4a3f      	ldr	r2, [pc, #252]	@ (8004adc <statemachine+0x2ac>)
 80049e0:	210f      	movs	r1, #15
 80049e2:	483b      	ldr	r0, [pc, #236]	@ (8004ad0 <statemachine+0x2a0>)
 80049e4:	f016 fbfa 	bl	801b1dc <sniprintf>
						ssd1306_SetCursor(32, 28);
 80049e8:	211c      	movs	r1, #28
 80049ea:	2020      	movs	r0, #32
 80049ec:	f7ff fbac 	bl	8004148 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80049f0:	4a38      	ldr	r2, [pc, #224]	@ (8004ad4 <statemachine+0x2a4>)
 80049f2:	2301      	movs	r3, #1
 80049f4:	ca06      	ldmia	r2, {r1, r2}
 80049f6:	4836      	ldr	r0, [pc, #216]	@ (8004ad0 <statemachine+0x2a0>)
 80049f8:	f7ff fb80 	bl	80040fc <ssd1306_WriteString>



					 if(BTN_B>=1){
 80049fc:	4b38      	ldr	r3, [pc, #224]	@ (8004ae0 <statemachine+0x2b0>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	dd08      	ble.n	8004a16 <statemachine+0x1e6>
								spdstate++;
 8004a04:	4b30      	ldr	r3, [pc, #192]	@ (8004ac8 <statemachine+0x298>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ac8 <statemachine+0x298>)
 8004a0e:	701a      	strb	r2, [r3, #0]
								BTN_B=0;
 8004a10:	4b33      	ldr	r3, [pc, #204]	@ (8004ae0 <statemachine+0x2b0>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
					 					 				  	}
					 if(BTN_B_LONG>=1){
 8004a16:	4b33      	ldr	r3, [pc, #204]	@ (8004ae4 <statemachine+0x2b4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	dd3c      	ble.n	8004a98 <statemachine+0x268>
							  vitmax=0;
 8004a1e:	4b25      	ldr	r3, [pc, #148]	@ (8004ab4 <statemachine+0x284>)
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
							BTN_B_LONG=0;
 8004a26:	4b2f      	ldr	r3, [pc, #188]	@ (8004ae4 <statemachine+0x2b4>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
						}



					 break;
 8004a2c:	e034      	b.n	8004a98 <statemachine+0x268>
				 case STATE_GROS:


						ssd1306_SetCursor(32, 12);
 8004a2e:	210c      	movs	r1, #12
 8004a30:	2020      	movs	r0, #32
 8004a32:	f7ff fb89 	bl	8004148 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "%0.1f",(myData.speed)*3.6);
 8004a36:	4b1e      	ldr	r3, [pc, #120]	@ (8004ab0 <statemachine+0x280>)
 8004a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fb fd5c 	bl	80004f8 <__aeabi_f2d>
 8004a40:	a317      	add	r3, pc, #92	@ (adr r3, 8004aa0 <statemachine+0x270>)
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	f7fb fdaf 	bl	80005a8 <__aeabi_dmul>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	e9cd 2300 	strd	r2, r3, [sp]
 8004a52:	4a25      	ldr	r2, [pc, #148]	@ (8004ae8 <statemachine+0x2b8>)
 8004a54:	210f      	movs	r1, #15
 8004a56:	481e      	ldr	r0, [pc, #120]	@ (8004ad0 <statemachine+0x2a0>)
 8004a58:	f016 fbc0 	bl	801b1dc <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_11x18, White);
 8004a5c:	4a23      	ldr	r2, [pc, #140]	@ (8004aec <statemachine+0x2bc>)
 8004a5e:	2301      	movs	r3, #1
 8004a60:	ca06      	ldmia	r2, {r1, r2}
 8004a62:	481b      	ldr	r0, [pc, #108]	@ (8004ad0 <statemachine+0x2a0>)
 8004a64:	f7ff fb4a 	bl	80040fc <ssd1306_WriteString>
						batterygauge(vbat,35, 34,1);
 8004a68:	4b21      	ldr	r3, [pc, #132]	@ (8004af0 <statemachine+0x2c0>)
 8004a6a:	edd3 7a00 	vldr	s15, [r3]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	2122      	movs	r1, #34	@ 0x22
 8004a72:	2023      	movs	r0, #35	@ 0x23
 8004a74:	eeb0 0a67 	vmov.f32	s0, s15
 8004a78:	f7ff fcfe 	bl	8004478 <batterygauge>

					 if(BTN_B>=1){
 8004a7c:	4b18      	ldr	r3, [pc, #96]	@ (8004ae0 <statemachine+0x2b0>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	dd37      	ble.n	8004af4 <statemachine+0x2c4>
							spdstate--;
 8004a84:	4b10      	ldr	r3, [pc, #64]	@ (8004ac8 <statemachine+0x298>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac8 <statemachine+0x298>)
 8004a8e:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 8004a90:	4b13      	ldr	r3, [pc, #76]	@ (8004ae0 <statemachine+0x2b0>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 8004a96:	e02d      	b.n	8004af4 <statemachine+0x2c4>
					 break;
 8004a98:	bf00      	nop
 8004a9a:	e02c      	b.n	8004af6 <statemachine+0x2c6>
 8004a9c:	f3af 8000 	nop.w
 8004aa0:	cccccccd 	.word	0xcccccccd
 8004aa4:	400ccccc 	.word	0x400ccccc
 8004aa8:	200005d4 	.word	0x200005d4
 8004aac:	20000620 	.word	0x20000620
 8004ab0:	20000820 	.word	0x20000820
 8004ab4:	20000b34 	.word	0x20000b34
 8004ab8:	42700000 	.word	0x42700000
 8004abc:	447a0000 	.word	0x447a0000
 8004ac0:	404e0000 	.word	0x404e0000
 8004ac4:	461c3c00 	.word	0x461c3c00
 8004ac8:	200005d5 	.word	0x200005d5
 8004acc:	0801f8f0 	.word	0x0801f8f0
 8004ad0:	20000ac0 	.word	0x20000ac0
 8004ad4:	20000014 	.word	0x20000014
 8004ad8:	0801f8fc 	.word	0x0801f8fc
 8004adc:	0801f904 	.word	0x0801f904
 8004ae0:	20000864 	.word	0x20000864
 8004ae4:	20000b9c 	.word	0x20000b9c
 8004ae8:	0801f918 	.word	0x0801f918
 8004aec:	20000024 	.word	0x20000024
 8004af0:	20000898 	.word	0x20000898
					 break;
 8004af4:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 8004af6:	4b7f      	ldr	r3, [pc, #508]	@ (8004cf4 <statemachine+0x4c4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	dd0b      	ble.n	8004b16 <statemachine+0x2e6>
				 					state++;
 8004afe:	4b7e      	ldr	r3, [pc, #504]	@ (8004cf8 <statemachine+0x4c8>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	3301      	adds	r3, #1
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	4b7c      	ldr	r3, [pc, #496]	@ (8004cf8 <statemachine+0x4c8>)
 8004b08:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 8004b0a:	4b7a      	ldr	r3, [pc, #488]	@ (8004cf4 <statemachine+0x4c4>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
				 					BTN_B=0;
 8004b10:	4b7a      	ldr	r3, [pc, #488]	@ (8004cfc <statemachine+0x4cc>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
				  	}
				 	 if(BTN_A_LONG>=1){
 8004b16:	4b7a      	ldr	r3, [pc, #488]	@ (8004d00 <statemachine+0x4d0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f341 8267 	ble.w	8005fee <statemachine+0x17be>
				 						 				 									state++;
 8004b20:	4b75      	ldr	r3, [pc, #468]	@ (8004cf8 <statemachine+0x4c8>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	3301      	adds	r3, #1
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	4b73      	ldr	r3, [pc, #460]	@ (8004cf8 <statemachine+0x4c8>)
 8004b2a:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8004b2c:	4b72      	ldr	r3, [pc, #456]	@ (8004cf8 <statemachine+0x4c8>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	3301      	adds	r3, #1
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	4b70      	ldr	r3, [pc, #448]	@ (8004cf8 <statemachine+0x4c8>)
 8004b36:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8004b38:	4b6f      	ldr	r3, [pc, #444]	@ (8004cf8 <statemachine+0x4c8>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	4b6d      	ldr	r3, [pc, #436]	@ (8004cf8 <statemachine+0x4c8>)
 8004b42:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8004b44:	4b6c      	ldr	r3, [pc, #432]	@ (8004cf8 <statemachine+0x4c8>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	4b6a      	ldr	r3, [pc, #424]	@ (8004cf8 <statemachine+0x4c8>)
 8004b4e:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8004b50:	4b69      	ldr	r3, [pc, #420]	@ (8004cf8 <statemachine+0x4c8>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	3301      	adds	r3, #1
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	4b67      	ldr	r3, [pc, #412]	@ (8004cf8 <statemachine+0x4c8>)
 8004b5a:	701a      	strb	r2, [r3, #0]

				 						 				 									  			 	BTN_A_LONG=0;
 8004b5c:	4b68      	ldr	r3, [pc, #416]	@ (8004d00 <statemachine+0x4d0>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
				 						 				 									  			 	BTN_B=0;
 8004b62:	4b66      	ldr	r3, [pc, #408]	@ (8004cfc <statemachine+0x4cc>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
				 						 				 									  	}
				  break;
 8004b68:	f001 ba41 	b.w	8005fee <statemachine+0x17be>

				  case STATE_BALISE:
					  ssd1306_Fill(Black);
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	f7ff f9a9 	bl	8003ec4 <ssd1306_Fill>

					  if(settimeen==0){
 8004b72:	4b64      	ldr	r3, [pc, #400]	@ (8004d04 <statemachine+0x4d4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d145      	bne.n	8004c06 <statemachine+0x3d6>

						  if(myData.fix==1){
 8004b7a:	4b63      	ldr	r3, [pc, #396]	@ (8004d08 <statemachine+0x4d8>)
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d141      	bne.n	8004c06 <statemachine+0x3d6>
							settimeen=1;
 8004b82:	4b60      	ldr	r3, [pc, #384]	@ (8004d04 <statemachine+0x4d4>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8004b88:	4b5f      	ldr	r3, [pc, #380]	@ (8004d08 <statemachine+0x4d8>)
 8004b8a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	461a      	mov	r2, r3
 8004b96:	0092      	lsls	r2, r2, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	4b5a      	ldr	r3, [pc, #360]	@ (8004d08 <statemachine+0x4d8>)
 8004ba0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	4413      	add	r3, r2
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	4b57      	ldr	r3, [pc, #348]	@ (8004d0c <statemachine+0x4dc>)
 8004bb0:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8004bb2:	4b55      	ldr	r3, [pc, #340]	@ (8004d08 <statemachine+0x4d8>)
 8004bb4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	0092      	lsls	r2, r2, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	4b4f      	ldr	r3, [pc, #316]	@ (8004d08 <statemachine+0x4d8>)
 8004bca:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	4b4d      	ldr	r3, [pc, #308]	@ (8004d10 <statemachine+0x4e0>)
 8004bda:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004bdc:	4b4a      	ldr	r3, [pc, #296]	@ (8004d08 <statemachine+0x4d8>)
 8004bde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	461a      	mov	r2, r3
 8004bea:	0092      	lsls	r2, r2, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	4b45      	ldr	r3, [pc, #276]	@ (8004d08 <statemachine+0x4d8>)
 8004bf4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	4413      	add	r3, r2
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	4b44      	ldr	r3, [pc, #272]	@ (8004d14 <statemachine+0x4e4>)
 8004c04:	701a      	strb	r2, [r3, #0]





					  switch(balisestate){
 8004c06:	4b44      	ldr	r3, [pc, #272]	@ (8004d18 <statemachine+0x4e8>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	f000 8228 	beq.w	8005060 <statemachine+0x830>
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	f301 81ee 	bgt.w	8005ff2 <statemachine+0x17c2>
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d004      	beq.n	8004c24 <statemachine+0x3f4>
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	f000 8090 	beq.w	8004d40 <statemachine+0x510>
						  				 									 									  	}

					  }


					  break;
 8004c20:	f001 b9e7 	b.w	8005ff2 <statemachine+0x17c2>
						  ssd1306_SetCursor(32,12);
 8004c24:	210c      	movs	r1, #12
 8004c26:	2020      	movs	r0, #32
 8004c28:	f7ff fa8e 	bl	8004148 <ssd1306_SetCursor>
						  ssd1306_WriteString("Tracker",Font_6x8,White);
 8004c2c:	4a3b      	ldr	r2, [pc, #236]	@ (8004d1c <statemachine+0x4ec>)
 8004c2e:	2301      	movs	r3, #1
 8004c30:	ca06      	ldmia	r2, {r1, r2}
 8004c32:	483b      	ldr	r0, [pc, #236]	@ (8004d20 <statemachine+0x4f0>)
 8004c34:	f7ff fa62 	bl	80040fc <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "offset=%d",pageoffset);
 8004c38:	4b3a      	ldr	r3, [pc, #232]	@ (8004d24 <statemachine+0x4f4>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a3a      	ldr	r2, [pc, #232]	@ (8004d28 <statemachine+0x4f8>)
 8004c3e:	2132      	movs	r1, #50	@ 0x32
 8004c40:	483a      	ldr	r0, [pc, #232]	@ (8004d2c <statemachine+0x4fc>)
 8004c42:	f016 facb 	bl	801b1dc <sniprintf>
						  ssd1306_SetCursor(32,22);
 8004c46:	2116      	movs	r1, #22
 8004c48:	2020      	movs	r0, #32
 8004c4a:	f7ff fa7d 	bl	8004148 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004c4e:	4a38      	ldr	r2, [pc, #224]	@ (8004d30 <statemachine+0x500>)
 8004c50:	2301      	movs	r3, #1
 8004c52:	ca06      	ldmia	r2, {r1, r2}
 8004c54:	4835      	ldr	r0, [pc, #212]	@ (8004d2c <statemachine+0x4fc>)
 8004c56:	f7ff fa51 	bl	80040fc <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 8004c5a:	4b36      	ldr	r3, [pc, #216]	@ (8004d34 <statemachine+0x504>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a36      	ldr	r2, [pc, #216]	@ (8004d38 <statemachine+0x508>)
 8004c60:	2132      	movs	r1, #50	@ 0x32
 8004c62:	4832      	ldr	r0, [pc, #200]	@ (8004d2c <statemachine+0x4fc>)
 8004c64:	f016 faba 	bl	801b1dc <sniprintf>
						  ssd1306_SetCursor(32,32);
 8004c68:	2120      	movs	r1, #32
 8004c6a:	2020      	movs	r0, #32
 8004c6c:	f7ff fa6c 	bl	8004148 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004c70:	4a2f      	ldr	r2, [pc, #188]	@ (8004d30 <statemachine+0x500>)
 8004c72:	2301      	movs	r3, #1
 8004c74:	ca06      	ldmia	r2, {r1, r2}
 8004c76:	482d      	ldr	r0, [pc, #180]	@ (8004d2c <statemachine+0x4fc>)
 8004c78:	f7ff fa40 	bl	80040fc <ssd1306_WriteString>
						  if(BTN_B>=1){
 8004c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8004cfc <statemachine+0x4cc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	dd0e      	ble.n	8004ca2 <statemachine+0x472>
							balisestate++;
 8004c84:	4b24      	ldr	r3, [pc, #144]	@ (8004d18 <statemachine+0x4e8>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	4b22      	ldr	r3, [pc, #136]	@ (8004d18 <statemachine+0x4e8>)
 8004c8e:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 8004c90:	4b1a      	ldr	r3, [pc, #104]	@ (8004cfc <statemachine+0x4cc>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
							BTN_A=0;
 8004c96:	4b17      	ldr	r3, [pc, #92]	@ (8004cf4 <statemachine+0x4c4>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim17);
 8004c9c:	4827      	ldr	r0, [pc, #156]	@ (8004d3c <statemachine+0x50c>)
 8004c9e:	f009 ff89 	bl	800ebb4 <HAL_TIM_Base_Start_IT>
						  if(BTN_A>=1){
 8004ca2:	4b14      	ldr	r3, [pc, #80]	@ (8004cf4 <statemachine+0x4c4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	dd0e      	ble.n	8004cc8 <statemachine+0x498>
						  				  			 	state++;
 8004caa:	4b13      	ldr	r3, [pc, #76]	@ (8004cf8 <statemachine+0x4c8>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	4b11      	ldr	r3, [pc, #68]	@ (8004cf8 <statemachine+0x4c8>)
 8004cb4:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 8004cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf4 <statemachine+0x4c4>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8004cfc <statemachine+0x4cc>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
						  				  			 	settimeen=0;
 8004cc2:	4b10      	ldr	r3, [pc, #64]	@ (8004d04 <statemachine+0x4d4>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8004d00 <statemachine+0x4d0>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f340 8219 	ble.w	8005104 <statemachine+0x8d4>
									  state--;
 8004cd2:	4b09      	ldr	r3, [pc, #36]	@ (8004cf8 <statemachine+0x4c8>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	4b07      	ldr	r3, [pc, #28]	@ (8004cf8 <statemachine+0x4c8>)
 8004cdc:	701a      	strb	r2, [r3, #0]
									BTN_A_LONG=0;
 8004cde:	4b08      	ldr	r3, [pc, #32]	@ (8004d00 <statemachine+0x4d0>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]
									BTN_B=0;
 8004ce4:	4b05      	ldr	r3, [pc, #20]	@ (8004cfc <statemachine+0x4cc>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
									settimeen=0;
 8004cea:	4b06      	ldr	r3, [pc, #24]	@ (8004d04 <statemachine+0x4d4>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
						  break;
 8004cf0:	e208      	b.n	8005104 <statemachine+0x8d4>
 8004cf2:	bf00      	nop
 8004cf4:	20000860 	.word	0x20000860
 8004cf8:	200005d4 	.word	0x200005d4
 8004cfc:	20000864 	.word	0x20000864
 8004d00:	20000ba0 	.word	0x20000ba0
 8004d04:	20000b88 	.word	0x20000b88
 8004d08:	20000820 	.word	0x20000820
 8004d0c:	20000b85 	.word	0x20000b85
 8004d10:	20000b86 	.word	0x20000b86
 8004d14:	20000b84 	.word	0x20000b84
 8004d18:	200005d9 	.word	0x200005d9
 8004d1c:	20000014 	.word	0x20000014
 8004d20:	0801f920 	.word	0x0801f920
 8004d24:	20000a9c 	.word	0x20000a9c
 8004d28:	0801f928 	.word	0x0801f928
 8004d2c:	20000ac0 	.word	0x20000ac0
 8004d30:	2000001c 	.word	0x2000001c
 8004d34:	20000aa0 	.word	0x20000aa0
 8004d38:	0801f934 	.word	0x0801f934
 8004d3c:	20001200 	.word	0x20001200
						  erasetime=HAL_GetTick();
 8004d40:	f002 f95c 	bl	8006ffc <HAL_GetTick>
 8004d44:	4603      	mov	r3, r0
 8004d46:	461a      	mov	r2, r3
 8004d48:	4bab      	ldr	r3, [pc, #684]	@ (8004ff8 <statemachine+0x7c8>)
 8004d4a:	601a      	str	r2, [r3, #0]
						  if(pagenumber+1>=MAX_WRITE_PAGE){
 8004d4c:	4bab      	ldr	r3, [pc, #684]	@ (8004ffc <statemachine+0x7cc>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f246 32fd 	movw	r2, #25597	@ 0x63fd
 8004d54:	4293      	cmp	r3, r2
 8004d56:	dd05      	ble.n	8004d64 <statemachine+0x534>
							  HAL_TIM_Base_Stop_IT(&htim17);
 8004d58:	48a9      	ldr	r0, [pc, #676]	@ (8005000 <statemachine+0x7d0>)
 8004d5a:	f009 ff79 	bl	800ec50 <HAL_TIM_Base_Stop_IT>
							  balisestate=2;
 8004d5e:	4ba9      	ldr	r3, [pc, #676]	@ (8005004 <statemachine+0x7d4>)
 8004d60:	2202      	movs	r2, #2
 8004d62:	701a      	strb	r2, [r3, #0]
						  if(enablewrite==1){
 8004d64:	4ba8      	ldr	r3, [pc, #672]	@ (8005008 <statemachine+0x7d8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	f040 80b0 	bne.w	8004ece <statemachine+0x69e>
							  oldlat=myData.latitude;
 8004d6e:	4ba7      	ldr	r3, [pc, #668]	@ (800500c <statemachine+0x7dc>)
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	49a6      	ldr	r1, [pc, #664]	@ (8005010 <statemachine+0x7e0>)
 8004d76:	e9c1 2300 	strd	r2, r3, [r1]
							  oldlong=myData.longitude;
 8004d7a:	4ba4      	ldr	r3, [pc, #656]	@ (800500c <statemachine+0x7dc>)
 8004d7c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004d80:	49a4      	ldr	r1, [pc, #656]	@ (8005014 <statemachine+0x7e4>)
 8004d82:	e9c1 2300 	strd	r2, r3, [r1]
							  nmea_parse(&myData, DataBuffer);
 8004d86:	49a4      	ldr	r1, [pc, #656]	@ (8005018 <statemachine+0x7e8>)
 8004d88:	48a0      	ldr	r0, [pc, #640]	@ (800500c <statemachine+0x7dc>)
 8004d8a:	f7fe facb 	bl	8003324 <nmea_parse>
							  if(distancecalc(oldlat, myData.latitude,oldlong, myData.longitude) > 139.0){//correspond à 500kmh pendant 1sec
 8004d8e:	4ba0      	ldr	r3, [pc, #640]	@ (8005010 <statemachine+0x7e0>)
 8004d90:	ed93 7b00 	vldr	d7, [r3]
 8004d94:	4b9d      	ldr	r3, [pc, #628]	@ (800500c <statemachine+0x7dc>)
 8004d96:	ed93 6b00 	vldr	d6, [r3]
 8004d9a:	4b9e      	ldr	r3, [pc, #632]	@ (8005014 <statemachine+0x7e4>)
 8004d9c:	ed93 5b00 	vldr	d5, [r3]
 8004da0:	4b9a      	ldr	r3, [pc, #616]	@ (800500c <statemachine+0x7dc>)
 8004da2:	ed93 4b04 	vldr	d4, [r3, #16]
 8004da6:	eeb0 3a44 	vmov.f32	s6, s8
 8004daa:	eef0 3a64 	vmov.f32	s7, s9
 8004dae:	eeb0 2a45 	vmov.f32	s4, s10
 8004db2:	eef0 2a65 	vmov.f32	s5, s11
 8004db6:	eeb0 1a46 	vmov.f32	s2, s12
 8004dba:	eef0 1a66 	vmov.f32	s3, s13
 8004dbe:	eeb0 0a47 	vmov.f32	s0, s14
 8004dc2:	eef0 0a67 	vmov.f32	s1, s15
 8004dc6:	f7fe fb5f 	bl	8003488 <distancecalc>
 8004dca:	ec51 0b10 	vmov	r0, r1, d0
 8004dce:	a388      	add	r3, pc, #544	@ (adr r3, 8004ff0 <statemachine+0x7c0>)
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	f7fb fe78 	bl	8000ac8 <__aeabi_dcmpgt>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d02b      	beq.n	8004e36 <statemachine+0x606>
								  myData.latitude=oldlat;
 8004dde:	4b8c      	ldr	r3, [pc, #560]	@ (8005010 <statemachine+0x7e0>)
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	4989      	ldr	r1, [pc, #548]	@ (800500c <statemachine+0x7dc>)
 8004de6:	e9c1 2300 	strd	r2, r3, [r1]
								  myData.longitude=oldlong;
 8004dea:	4b8a      	ldr	r3, [pc, #552]	@ (8005014 <statemachine+0x7e4>)
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	4986      	ldr	r1, [pc, #536]	@ (800500c <statemachine+0x7dc>)
 8004df2:	e9c1 2304 	strd	r2, r3, [r1, #16]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004df6:	4b89      	ldr	r3, [pc, #548]	@ (800501c <statemachine+0x7ec>)
 8004df8:	edd3 7a00 	vldr	s15, [r3]
 8004dfc:	4b88      	ldr	r3, [pc, #544]	@ (8005020 <statemachine+0x7f0>)
 8004dfe:	ed93 7a00 	vldr	s14, [r3]
 8004e02:	4b82      	ldr	r3, [pc, #520]	@ (800500c <statemachine+0x7dc>)
 8004e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e06:	4a81      	ldr	r2, [pc, #516]	@ (800500c <statemachine+0x7dc>)
 8004e08:	edd2 6a08 	vldr	s13, [r2, #32]
 8004e0c:	eeb0 1a66 	vmov.f32	s2, s13
 8004e10:	461a      	mov	r2, r3
 8004e12:	497e      	ldr	r1, [pc, #504]	@ (800500c <statemachine+0x7dc>)
 8004e14:	eef0 0a47 	vmov.f32	s1, s14
 8004e18:	eeb0 0a67 	vmov.f32	s0, s15
 8004e1c:	4881      	ldr	r0, [pc, #516]	@ (8005024 <statemachine+0x7f4>)
 8004e1e:	f7fe fdeb 	bl	80039f8 <csvframe>
 8004e22:	4603      	mov	r3, r0
 8004e24:	4a80      	ldr	r2, [pc, #512]	@ (8005028 <statemachine+0x7f8>)
 8004e26:	6013      	str	r3, [r2, #0]
								  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004e28:	4b7f      	ldr	r3, [pc, #508]	@ (8005028 <statemachine+0x7f8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	487d      	ldr	r0, [pc, #500]	@ (8005024 <statemachine+0x7f4>)
 8004e30:	f7fe ff18 	bl	8003c64 <writebuffertoflash>
 8004e34:	e048      	b.n	8004ec8 <statemachine+0x698>
								  distanceparcouru=distanceparcouru + distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 8004e36:	4b76      	ldr	r3, [pc, #472]	@ (8005010 <statemachine+0x7e0>)
 8004e38:	ed93 7b00 	vldr	d7, [r3]
 8004e3c:	4b73      	ldr	r3, [pc, #460]	@ (800500c <statemachine+0x7dc>)
 8004e3e:	ed93 6b00 	vldr	d6, [r3]
 8004e42:	4b74      	ldr	r3, [pc, #464]	@ (8005014 <statemachine+0x7e4>)
 8004e44:	ed93 5b00 	vldr	d5, [r3]
 8004e48:	4b70      	ldr	r3, [pc, #448]	@ (800500c <statemachine+0x7dc>)
 8004e4a:	ed93 4b04 	vldr	d4, [r3, #16]
 8004e4e:	eeb0 3a44 	vmov.f32	s6, s8
 8004e52:	eef0 3a64 	vmov.f32	s7, s9
 8004e56:	eeb0 2a45 	vmov.f32	s4, s10
 8004e5a:	eef0 2a65 	vmov.f32	s5, s11
 8004e5e:	eeb0 1a46 	vmov.f32	s2, s12
 8004e62:	eef0 1a66 	vmov.f32	s3, s13
 8004e66:	eeb0 0a47 	vmov.f32	s0, s14
 8004e6a:	eef0 0a67 	vmov.f32	s1, s15
 8004e6e:	f7fe fb0b 	bl	8003488 <distancecalc>
 8004e72:	ec51 0b10 	vmov	r0, r1, d0
 8004e76:	4b6d      	ldr	r3, [pc, #436]	@ (800502c <statemachine+0x7fc>)
 8004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7c:	f7fb f9de 	bl	800023c <__adddf3>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4969      	ldr	r1, [pc, #420]	@ (800502c <statemachine+0x7fc>)
 8004e86:	e9c1 2300 	strd	r2, r3, [r1]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004e8a:	4b64      	ldr	r3, [pc, #400]	@ (800501c <statemachine+0x7ec>)
 8004e8c:	edd3 7a00 	vldr	s15, [r3]
 8004e90:	4b63      	ldr	r3, [pc, #396]	@ (8005020 <statemachine+0x7f0>)
 8004e92:	ed93 7a00 	vldr	s14, [r3]
 8004e96:	4b5d      	ldr	r3, [pc, #372]	@ (800500c <statemachine+0x7dc>)
 8004e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9a:	4a5c      	ldr	r2, [pc, #368]	@ (800500c <statemachine+0x7dc>)
 8004e9c:	edd2 6a08 	vldr	s13, [r2, #32]
 8004ea0:	eeb0 1a66 	vmov.f32	s2, s13
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4959      	ldr	r1, [pc, #356]	@ (800500c <statemachine+0x7dc>)
 8004ea8:	eef0 0a47 	vmov.f32	s1, s14
 8004eac:	eeb0 0a67 	vmov.f32	s0, s15
 8004eb0:	485c      	ldr	r0, [pc, #368]	@ (8005024 <statemachine+0x7f4>)
 8004eb2:	f7fe fda1 	bl	80039f8 <csvframe>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	4a5b      	ldr	r2, [pc, #364]	@ (8005028 <statemachine+0x7f8>)
 8004eba:	6013      	str	r3, [r2, #0]
								  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004ebc:	4b5a      	ldr	r3, [pc, #360]	@ (8005028 <statemachine+0x7f8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4858      	ldr	r0, [pc, #352]	@ (8005024 <statemachine+0x7f4>)
 8004ec4:	f7fe fece 	bl	8003c64 <writebuffertoflash>
							  enablewrite=0;
 8004ec8:	4b4f      	ldr	r3, [pc, #316]	@ (8005008 <statemachine+0x7d8>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
						  if(doubledonnee==0){
 8004ece:	4b58      	ldr	r3, [pc, #352]	@ (8005030 <statemachine+0x800>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d111      	bne.n	8004efa <statemachine+0x6ca>
						 	ssd1306_SetCursor(32,12);
 8004ed6:	210c      	movs	r1, #12
 8004ed8:	2020      	movs	r0, #32
 8004eda:	f7ff f935 	bl	8004148 <ssd1306_SetCursor>
						 	snprintf((char *)bufferscreen,50,"p=%d",pagenumber);
 8004ede:	4b47      	ldr	r3, [pc, #284]	@ (8004ffc <statemachine+0x7cc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a54      	ldr	r2, [pc, #336]	@ (8005034 <statemachine+0x804>)
 8004ee4:	2132      	movs	r1, #50	@ 0x32
 8004ee6:	4854      	ldr	r0, [pc, #336]	@ (8005038 <statemachine+0x808>)
 8004ee8:	f016 f978 	bl	801b1dc <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004eec:	4a53      	ldr	r2, [pc, #332]	@ (800503c <statemachine+0x80c>)
 8004eee:	2301      	movs	r3, #1
 8004ef0:	ca06      	ldmia	r2, {r1, r2}
 8004ef2:	4851      	ldr	r0, [pc, #324]	@ (8005038 <statemachine+0x808>)
 8004ef4:	f7ff f902 	bl	80040fc <ssd1306_WriteString>
 8004ef8:	e013      	b.n	8004f22 <statemachine+0x6f2>
						 	ssd1306_SetCursor(32,12);
 8004efa:	210c      	movs	r1, #12
 8004efc:	2020      	movs	r0, #32
 8004efe:	f7ff f923 	bl	8004148 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50,"d=%0.1lfm",distanceparcouru);
 8004f02:	4b4a      	ldr	r3, [pc, #296]	@ (800502c <statemachine+0x7fc>)
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	e9cd 2300 	strd	r2, r3, [sp]
 8004f0c:	4a4c      	ldr	r2, [pc, #304]	@ (8005040 <statemachine+0x810>)
 8004f0e:	2132      	movs	r1, #50	@ 0x32
 8004f10:	4849      	ldr	r0, [pc, #292]	@ (8005038 <statemachine+0x808>)
 8004f12:	f016 f963 	bl	801b1dc <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004f16:	4a49      	ldr	r2, [pc, #292]	@ (800503c <statemachine+0x80c>)
 8004f18:	2301      	movs	r3, #1
 8004f1a:	ca06      	ldmia	r2, {r1, r2}
 8004f1c:	4846      	ldr	r0, [pc, #280]	@ (8005038 <statemachine+0x808>)
 8004f1e:	f7ff f8ed 	bl	80040fc <ssd1306_WriteString>
						 	ssd1306_SetCursor(32,22);
 8004f22:	2116      	movs	r1, #22
 8004f24:	2020      	movs	r0, #32
 8004f26:	f7ff f90f 	bl	8004148 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 8004f2a:	4b38      	ldr	r3, [pc, #224]	@ (800500c <statemachine+0x7dc>)
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2e:	4a45      	ldr	r2, [pc, #276]	@ (8005044 <statemachine+0x814>)
 8004f30:	2132      	movs	r1, #50	@ 0x32
 8004f32:	4841      	ldr	r0, [pc, #260]	@ (8005038 <statemachine+0x808>)
 8004f34:	f016 f952 	bl	801b1dc <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004f38:	4a43      	ldr	r2, [pc, #268]	@ (8005048 <statemachine+0x818>)
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	ca06      	ldmia	r2, {r1, r2}
 8004f3e:	483e      	ldr	r0, [pc, #248]	@ (8005038 <statemachine+0x808>)
 8004f40:	f7ff f8dc 	bl	80040fc <ssd1306_WriteString>
						 	batterygauge(vbat,34, 32,1);
 8004f44:	4b36      	ldr	r3, [pc, #216]	@ (8005020 <statemachine+0x7f0>)
 8004f46:	edd3 7a00 	vldr	s15, [r3]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	2120      	movs	r1, #32
 8004f4e:	2022      	movs	r0, #34	@ 0x22
 8004f50:	eeb0 0a67 	vmov.f32	s0, s15
 8004f54:	f7ff fa90 	bl	8004478 <batterygauge>
						 	ssd1306_SetCursor(55,32);
 8004f58:	2120      	movs	r1, #32
 8004f5a:	2037      	movs	r0, #55	@ 0x37
 8004f5c:	f7ff f8f4 	bl	8004148 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 8004f60:	4b2f      	ldr	r3, [pc, #188]	@ (8005020 <statemachine+0x7f0>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fb fac7 	bl	80004f8 <__aeabi_f2d>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	e9cd 2300 	strd	r2, r3, [sp]
 8004f72:	4a36      	ldr	r2, [pc, #216]	@ (800504c <statemachine+0x81c>)
 8004f74:	2132      	movs	r1, #50	@ 0x32
 8004f76:	4830      	ldr	r0, [pc, #192]	@ (8005038 <statemachine+0x808>)
 8004f78:	f016 f930 	bl	801b1dc <sniprintf>
						 	if(cptdoubledonnee==3){
 8004f7c:	4b34      	ldr	r3, [pc, #208]	@ (8005050 <statemachine+0x820>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d108      	bne.n	8004f96 <statemachine+0x766>
						 	  		doubledonnee=1-doubledonnee;
 8004f84:	4b2a      	ldr	r3, [pc, #168]	@ (8005030 <statemachine+0x800>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f1c3 0301 	rsb	r3, r3, #1
 8004f8c:	4a28      	ldr	r2, [pc, #160]	@ (8005030 <statemachine+0x800>)
 8004f8e:	6013      	str	r3, [r2, #0]
						 	  		cptdoubledonnee=0;
 8004f90:	4b2f      	ldr	r3, [pc, #188]	@ (8005050 <statemachine+0x820>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
						 	erasetime=HAL_GetTick()-erasetime;
 8004f96:	f002 f831 	bl	8006ffc <HAL_GetTick>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	4a16      	ldr	r2, [pc, #88]	@ (8004ff8 <statemachine+0x7c8>)
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	1a9b      	subs	r3, r3, r2
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4b14      	ldr	r3, [pc, #80]	@ (8004ff8 <statemachine+0x7c8>)
 8004fa6:	601a      	str	r2, [r3, #0]
						  if(BTN_B>=1){
 8004fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8005054 <statemachine+0x824>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	dd0e      	ble.n	8004fce <statemachine+0x79e>
						  						  balisestate--;
 8004fb0:	4b14      	ldr	r3, [pc, #80]	@ (8005004 <statemachine+0x7d4>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	4b12      	ldr	r3, [pc, #72]	@ (8005004 <statemachine+0x7d4>)
 8004fba:	701a      	strb	r2, [r3, #0]
						  						  BTN_B=0;
 8004fbc:	4b25      	ldr	r3, [pc, #148]	@ (8005054 <statemachine+0x824>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
						  						  BTN_A=0;
 8004fc2:	4b25      	ldr	r3, [pc, #148]	@ (8005058 <statemachine+0x828>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
						  						  HAL_TIM_Base_Stop_IT(&htim17);
 8004fc8:	480d      	ldr	r0, [pc, #52]	@ (8005000 <statemachine+0x7d0>)
 8004fca:	f009 fe41 	bl	800ec50 <HAL_TIM_Base_Stop_IT>
						  if(BTN_B_LONG>=1){
 8004fce:	4b23      	ldr	r3, [pc, #140]	@ (800505c <statemachine+0x82c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f340 8099 	ble.w	800510a <statemachine+0x8da>
							distanceparcouru=0;
 8004fd8:	4914      	ldr	r1, [pc, #80]	@ (800502c <statemachine+0x7fc>)
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	e9c1 2300 	strd	r2, r3, [r1]
						  	BTN_B_LONG=0;
 8004fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800505c <statemachine+0x82c>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
						  break;
 8004fec:	e08d      	b.n	800510a <statemachine+0x8da>
 8004fee:	bf00      	nop
 8004ff0:	00000000 	.word	0x00000000
 8004ff4:	40616000 	.word	0x40616000
 8004ff8:	20000b50 	.word	0x20000b50
 8004ffc:	20000aa0 	.word	0x20000aa0
 8005000:	20001200 	.word	0x20001200
 8005004:	200005d9 	.word	0x200005d9
 8005008:	20000b80 	.word	0x20000b80
 800500c:	20000820 	.word	0x20000820
 8005010:	20000b70 	.word	0x20000b70
 8005014:	20000b78 	.word	0x20000b78
 8005018:	20000620 	.word	0x20000620
 800501c:	20000890 	.word	0x20000890
 8005020:	20000898 	.word	0x20000898
 8005024:	2000089c 	.word	0x2000089c
 8005028:	20000b4c 	.word	0x20000b4c
 800502c:	20000b68 	.word	0x20000b68
 8005030:	20000b60 	.word	0x20000b60
 8005034:	0801f93c 	.word	0x0801f93c
 8005038:	20000ac0 	.word	0x20000ac0
 800503c:	2000001c 	.word	0x2000001c
 8005040:	0801f944 	.word	0x0801f944
 8005044:	0801f950 	.word	0x0801f950
 8005048:	20000014 	.word	0x20000014
 800504c:	0801f958 	.word	0x0801f958
 8005050:	20000b64 	.word	0x20000b64
 8005054:	20000864 	.word	0x20000864
 8005058:	20000860 	.word	0x20000860
 800505c:	20000b9c 	.word	0x20000b9c
						  ssd1306_SetCursor(32,12);
 8005060:	210c      	movs	r1, #12
 8005062:	2020      	movs	r0, #32
 8005064:	f7ff f870 	bl	8004148 <ssd1306_SetCursor>
						  ssd1306_WriteString("fin de",Font_6x8,White);
 8005068:	4a97      	ldr	r2, [pc, #604]	@ (80052c8 <statemachine+0xa98>)
 800506a:	2301      	movs	r3, #1
 800506c:	ca06      	ldmia	r2, {r1, r2}
 800506e:	4897      	ldr	r0, [pc, #604]	@ (80052cc <statemachine+0xa9c>)
 8005070:	f7ff f844 	bl	80040fc <ssd1306_WriteString>
						  ssd1306_SetCursor(32,20);
 8005074:	2114      	movs	r1, #20
 8005076:	2020      	movs	r0, #32
 8005078:	f7ff f866 	bl	8004148 <ssd1306_SetCursor>
						  ssd1306_WriteString("memoire",Font_6x8,White);
 800507c:	4a92      	ldr	r2, [pc, #584]	@ (80052c8 <statemachine+0xa98>)
 800507e:	2301      	movs	r3, #1
 8005080:	ca06      	ldmia	r2, {r1, r2}
 8005082:	4893      	ldr	r0, [pc, #588]	@ (80052d0 <statemachine+0xaa0>)
 8005084:	f7ff f83a 	bl	80040fc <ssd1306_WriteString>
						  ssd1306_SetCursor(32,28);
 8005088:	211c      	movs	r1, #28
 800508a:	2020      	movs	r0, #32
 800508c:	f7ff f85c 	bl	8004148 <ssd1306_SetCursor>
						  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 8005090:	4b90      	ldr	r3, [pc, #576]	@ (80052d4 <statemachine+0xaa4>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4b90      	ldr	r3, [pc, #576]	@ (80052d8 <statemachine+0xaa8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	4613      	mov	r3, r2
 800509c:	4a8f      	ldr	r2, [pc, #572]	@ (80052dc <statemachine+0xaac>)
 800509e:	2132      	movs	r1, #50	@ 0x32
 80050a0:	488f      	ldr	r0, [pc, #572]	@ (80052e0 <statemachine+0xab0>)
 80050a2:	f016 f89b 	bl	801b1dc <sniprintf>
						  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80050a6:	4a88      	ldr	r2, [pc, #544]	@ (80052c8 <statemachine+0xa98>)
 80050a8:	2301      	movs	r3, #1
 80050aa:	ca06      	ldmia	r2, {r1, r2}
 80050ac:	488c      	ldr	r0, [pc, #560]	@ (80052e0 <statemachine+0xab0>)
 80050ae:	f7ff f825 	bl	80040fc <ssd1306_WriteString>
						  if(BTN_A>=1){
 80050b2:	4b8c      	ldr	r3, [pc, #560]	@ (80052e4 <statemachine+0xab4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	dd0e      	ble.n	80050d8 <statemachine+0x8a8>
						  				  			 	state++;
 80050ba:	4b8b      	ldr	r3, [pc, #556]	@ (80052e8 <statemachine+0xab8>)
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	3301      	adds	r3, #1
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	4b89      	ldr	r3, [pc, #548]	@ (80052e8 <statemachine+0xab8>)
 80050c4:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 80050c6:	4b87      	ldr	r3, [pc, #540]	@ (80052e4 <statemachine+0xab4>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 80050cc:	4b87      	ldr	r3, [pc, #540]	@ (80052ec <statemachine+0xabc>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
						  				  			settimeen=0;
 80050d2:	4b87      	ldr	r3, [pc, #540]	@ (80052f0 <statemachine+0xac0>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 80050d8:	4b86      	ldr	r3, [pc, #536]	@ (80052f4 <statemachine+0xac4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f340 8788 	ble.w	8005ff2 <statemachine+0x17c2>
						  				 									 									  			 	state--;
 80050e2:	4b81      	ldr	r3, [pc, #516]	@ (80052e8 <statemachine+0xab8>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	4b7f      	ldr	r3, [pc, #508]	@ (80052e8 <statemachine+0xab8>)
 80050ec:	701a      	strb	r2, [r3, #0]
						  				 									 									  			 	BTN_A=0;
 80050ee:	4b7d      	ldr	r3, [pc, #500]	@ (80052e4 <statemachine+0xab4>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_B=0;
 80050f4:	4b7d      	ldr	r3, [pc, #500]	@ (80052ec <statemachine+0xabc>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_A_LONG=0;
 80050fa:	4b7e      	ldr	r3, [pc, #504]	@ (80052f4 <statemachine+0xac4>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]
					  break;
 8005100:	f000 bf77 	b.w	8005ff2 <statemachine+0x17c2>
						  break;
 8005104:	bf00      	nop
 8005106:	f000 bf74 	b.w	8005ff2 <statemachine+0x17c2>
						  break;
 800510a:	bf00      	nop
					  break;
 800510c:	f000 bf71 	b.w	8005ff2 <statemachine+0x17c2>

	case STATE_POS:
			  ssd1306_Fill(Black);
 8005110:	2000      	movs	r0, #0
 8005112:	f7fe fed7 	bl	8003ec4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8005116:	4978      	ldr	r1, [pc, #480]	@ (80052f8 <statemachine+0xac8>)
 8005118:	4878      	ldr	r0, [pc, #480]	@ (80052fc <statemachine+0xacc>)
 800511a:	f7fe f903 	bl	8003324 <nmea_parse>
			  switch(posstate){
 800511e:	4b78      	ldr	r3, [pc, #480]	@ (8005300 <statemachine+0xad0>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b05      	cmp	r3, #5
 8005124:	f200 8326 	bhi.w	8005774 <statemachine+0xf44>
 8005128:	a201      	add	r2, pc, #4	@ (adr r2, 8005130 <statemachine+0x900>)
 800512a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512e:	bf00      	nop
 8005130:	08005149 	.word	0x08005149
 8005134:	080051f3 	.word	0x080051f3
 8005138:	08005329 	.word	0x08005329
 800513c:	080053e7 	.word	0x080053e7
 8005140:	080054a5 	.word	0x080054a5
 8005144:	080055fd 	.word	0x080055fd

			  case STATE_SUMMARY1:

						ssd1306_SetCursor(32, 12);
 8005148:	210c      	movs	r1, #12
 800514a:	2020      	movs	r0, #32
 800514c:	f7fe fffc 	bl	8004148 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "Latitude:");
 8005150:	4a6c      	ldr	r2, [pc, #432]	@ (8005304 <statemachine+0xad4>)
 8005152:	210f      	movs	r1, #15
 8005154:	4862      	ldr	r0, [pc, #392]	@ (80052e0 <statemachine+0xab0>)
 8005156:	f016 f841 	bl	801b1dc <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800515a:	4a5b      	ldr	r2, [pc, #364]	@ (80052c8 <statemachine+0xa98>)
 800515c:	2301      	movs	r3, #1
 800515e:	ca06      	ldmia	r2, {r1, r2}
 8005160:	485f      	ldr	r0, [pc, #380]	@ (80052e0 <statemachine+0xab0>)
 8005162:	f7fe ffcb 	bl	80040fc <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005166:	4b65      	ldr	r3, [pc, #404]	@ (80052fc <statemachine+0xacc>)
 8005168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516c:	e9cd 2300 	strd	r2, r3, [sp]
 8005170:	4a65      	ldr	r2, [pc, #404]	@ (8005308 <statemachine+0xad8>)
 8005172:	210f      	movs	r1, #15
 8005174:	485a      	ldr	r0, [pc, #360]	@ (80052e0 <statemachine+0xab0>)
 8005176:	f016 f831 	bl	801b1dc <sniprintf>
						ssd1306_SetCursor(32, 20);
 800517a:	2114      	movs	r1, #20
 800517c:	2020      	movs	r0, #32
 800517e:	f7fe ffe3 	bl	8004148 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005182:	4a51      	ldr	r2, [pc, #324]	@ (80052c8 <statemachine+0xa98>)
 8005184:	2301      	movs	r3, #1
 8005186:	ca06      	ldmia	r2, {r1, r2}
 8005188:	4855      	ldr	r0, [pc, #340]	@ (80052e0 <statemachine+0xab0>)
 800518a:	f7fe ffb7 	bl	80040fc <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Longitude:");
 800518e:	4a5f      	ldr	r2, [pc, #380]	@ (800530c <statemachine+0xadc>)
 8005190:	210f      	movs	r1, #15
 8005192:	4853      	ldr	r0, [pc, #332]	@ (80052e0 <statemachine+0xab0>)
 8005194:	f016 f822 	bl	801b1dc <sniprintf>
						ssd1306_SetCursor(32, 28);
 8005198:	211c      	movs	r1, #28
 800519a:	2020      	movs	r0, #32
 800519c:	f7fe ffd4 	bl	8004148 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80051a0:	4a49      	ldr	r2, [pc, #292]	@ (80052c8 <statemachine+0xa98>)
 80051a2:	2301      	movs	r3, #1
 80051a4:	ca06      	ldmia	r2, {r1, r2}
 80051a6:	484e      	ldr	r0, [pc, #312]	@ (80052e0 <statemachine+0xab0>)
 80051a8:	f7fe ffa8 	bl	80040fc <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 80051ac:	4b53      	ldr	r3, [pc, #332]	@ (80052fc <statemachine+0xacc>)
 80051ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80051b2:	e9cd 2300 	strd	r2, r3, [sp]
 80051b6:	4a54      	ldr	r2, [pc, #336]	@ (8005308 <statemachine+0xad8>)
 80051b8:	210f      	movs	r1, #15
 80051ba:	4849      	ldr	r0, [pc, #292]	@ (80052e0 <statemachine+0xab0>)
 80051bc:	f016 f80e 	bl	801b1dc <sniprintf>
						ssd1306_SetCursor(32, 36);
 80051c0:	2124      	movs	r1, #36	@ 0x24
 80051c2:	2020      	movs	r0, #32
 80051c4:	f7fe ffc0 	bl	8004148 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80051c8:	4a3f      	ldr	r2, [pc, #252]	@ (80052c8 <statemachine+0xa98>)
 80051ca:	2301      	movs	r3, #1
 80051cc:	ca06      	ldmia	r2, {r1, r2}
 80051ce:	4844      	ldr	r0, [pc, #272]	@ (80052e0 <statemachine+0xab0>)
 80051d0:	f7fe ff94 	bl	80040fc <ssd1306_WriteString>
				  if(BTN_B>=1){
 80051d4:	4b45      	ldr	r3, [pc, #276]	@ (80052ec <statemachine+0xabc>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f340 82c0 	ble.w	800575e <statemachine+0xf2e>
					  posstate++;
 80051de:	4b48      	ldr	r3, [pc, #288]	@ (8005300 <statemachine+0xad0>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	3301      	adds	r3, #1
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	4b46      	ldr	r3, [pc, #280]	@ (8005300 <statemachine+0xad0>)
 80051e8:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 80051ea:	4b40      	ldr	r3, [pc, #256]	@ (80052ec <statemachine+0xabc>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
				  }



				  break;
 80051f0:	e2b5      	b.n	800575e <statemachine+0xf2e>
			  case STATE_INFO:
				  ssd1306_Fill(Black);
 80051f2:	2000      	movs	r0, #0
 80051f4:	f7fe fe66 	bl	8003ec4 <ssd1306_Fill>
				  nmea_parse(&myData, DataBuffer);
 80051f8:	493f      	ldr	r1, [pc, #252]	@ (80052f8 <statemachine+0xac8>)
 80051fa:	4840      	ldr	r0, [pc, #256]	@ (80052fc <statemachine+0xacc>)
 80051fc:	f7fe f892 	bl	8003324 <nmea_parse>
				snprintf((char *)bufferscreen,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8005200:	4b3e      	ldr	r3, [pc, #248]	@ (80052fc <statemachine+0xacc>)
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	4618      	mov	r0, r3
 8005206:	f7fb f977 	bl	80004f8 <__aeabi_f2d>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	e9cd 2300 	strd	r2, r3, [sp]
 8005212:	4a3f      	ldr	r2, [pc, #252]	@ (8005310 <statemachine+0xae0>)
 8005214:	210f      	movs	r1, #15
 8005216:	4832      	ldr	r0, [pc, #200]	@ (80052e0 <statemachine+0xab0>)
 8005218:	f015 ffe0 	bl	801b1dc <sniprintf>
				ssd1306_SetCursor(32, 12);
 800521c:	210c      	movs	r1, #12
 800521e:	2020      	movs	r0, #32
 8005220:	f7fe ff92 	bl	8004148 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005224:	4a28      	ldr	r2, [pc, #160]	@ (80052c8 <statemachine+0xa98>)
 8005226:	2301      	movs	r3, #1
 8005228:	ca06      	ldmia	r2, {r1, r2}
 800522a:	482d      	ldr	r0, [pc, #180]	@ (80052e0 <statemachine+0xab0>)
 800522c:	f7fe ff66 	bl	80040fc <ssd1306_WriteString>
				snprintf((char *)bufferscreen,20, "v=%0.2fV",vbat);
 8005230:	4b38      	ldr	r3, [pc, #224]	@ (8005314 <statemachine+0xae4>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4618      	mov	r0, r3
 8005236:	f7fb f95f 	bl	80004f8 <__aeabi_f2d>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	e9cd 2300 	strd	r2, r3, [sp]
 8005242:	4a35      	ldr	r2, [pc, #212]	@ (8005318 <statemachine+0xae8>)
 8005244:	2114      	movs	r1, #20
 8005246:	4826      	ldr	r0, [pc, #152]	@ (80052e0 <statemachine+0xab0>)
 8005248:	f015 ffc8 	bl	801b1dc <sniprintf>
				ssd1306_SetCursor(32, 20);
 800524c:	2114      	movs	r1, #20
 800524e:	2020      	movs	r0, #32
 8005250:	f7fe ff7a 	bl	8004148 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005254:	4a1c      	ldr	r2, [pc, #112]	@ (80052c8 <statemachine+0xa98>)
 8005256:	2301      	movs	r3, #1
 8005258:	ca06      	ldmia	r2, {r1, r2}
 800525a:	4821      	ldr	r0, [pc, #132]	@ (80052e0 <statemachine+0xab0>)
 800525c:	f7fe ff4e 	bl	80040fc <ssd1306_WriteString>
				ssd1306_SetCursor(32, 28);
 8005260:	211c      	movs	r1, #28
 8005262:	2020      	movs	r0, #32
 8005264:	f7fe ff70 	bl	8004148 <ssd1306_SetCursor>
				snprintf((char *)bufferscreen,15,  "T=%0.2fC",temp);
 8005268:	4b2c      	ldr	r3, [pc, #176]	@ (800531c <statemachine+0xaec>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f7fb f943 	bl	80004f8 <__aeabi_f2d>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	e9cd 2300 	strd	r2, r3, [sp]
 800527a:	4a29      	ldr	r2, [pc, #164]	@ (8005320 <statemachine+0xaf0>)
 800527c:	210f      	movs	r1, #15
 800527e:	4818      	ldr	r0, [pc, #96]	@ (80052e0 <statemachine+0xab0>)
 8005280:	f015 ffac 	bl	801b1dc <sniprintf>
				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005284:	4a10      	ldr	r2, [pc, #64]	@ (80052c8 <statemachine+0xa98>)
 8005286:	2301      	movs	r3, #1
 8005288:	ca06      	ldmia	r2, {r1, r2}
 800528a:	4815      	ldr	r0, [pc, #84]	@ (80052e0 <statemachine+0xab0>)
 800528c:	f7fe ff36 	bl	80040fc <ssd1306_WriteString>
				 if(BTN_B>=1){
 8005290:	4b16      	ldr	r3, [pc, #88]	@ (80052ec <statemachine+0xabc>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	dd08      	ble.n	80052aa <statemachine+0xa7a>
								  					  posstate++;
 8005298:	4b19      	ldr	r3, [pc, #100]	@ (8005300 <statemachine+0xad0>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	3301      	adds	r3, #1
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	4b17      	ldr	r3, [pc, #92]	@ (8005300 <statemachine+0xad0>)
 80052a2:	701a      	strb	r2, [r3, #0]
								  					  BTN_B=0;
 80052a4:	4b11      	ldr	r3, [pc, #68]	@ (80052ec <statemachine+0xabc>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
								  				  }
								  if(BTN_B_LONG>=1){
 80052aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005324 <statemachine+0xaf4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f340 8257 	ble.w	8005762 <statemachine+0xf32>
													  posstate--;
 80052b4:	4b12      	ldr	r3, [pc, #72]	@ (8005300 <statemachine+0xad0>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	4b10      	ldr	r3, [pc, #64]	@ (8005300 <statemachine+0xad0>)
 80052be:	701a      	strb	r2, [r3, #0]
													BTN_B_LONG=0;
 80052c0:	4b18      	ldr	r3, [pc, #96]	@ (8005324 <statemachine+0xaf4>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
												}

				  break;
 80052c6:	e24c      	b.n	8005762 <statemachine+0xf32>
 80052c8:	20000014 	.word	0x20000014
 80052cc:	0801f960 	.word	0x0801f960
 80052d0:	0801f968 	.word	0x0801f968
 80052d4:	20000a9c 	.word	0x20000a9c
 80052d8:	20000aa0 	.word	0x20000aa0
 80052dc:	0801f970 	.word	0x0801f970
 80052e0:	20000ac0 	.word	0x20000ac0
 80052e4:	20000860 	.word	0x20000860
 80052e8:	200005d4 	.word	0x200005d4
 80052ec:	20000864 	.word	0x20000864
 80052f0:	20000b88 	.word	0x20000b88
 80052f4:	20000ba0 	.word	0x20000ba0
 80052f8:	20000620 	.word	0x20000620
 80052fc:	20000820 	.word	0x20000820
 8005300:	200005d6 	.word	0x200005d6
 8005304:	0801f978 	.word	0x0801f978
 8005308:	0801f984 	.word	0x0801f984
 800530c:	0801f98c 	.word	0x0801f98c
 8005310:	0801f998 	.word	0x0801f998
 8005314:	20000898 	.word	0x20000898
 8005318:	0801f9a4 	.word	0x0801f9a4
 800531c:	20000890 	.word	0x20000890
 8005320:	0801f9b0 	.word	0x0801f9b0
 8005324:	20000b9c 	.word	0x20000b9c
			  case STATE_LAT:
						ssd1306_SetCursor(32, 12);
 8005328:	210c      	movs	r1, #12
 800532a:	2020      	movs	r0, #32
 800532c:	f7fe ff0c 	bl	8004148 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "LatSide:");
 8005330:	4aa1      	ldr	r2, [pc, #644]	@ (80055b8 <statemachine+0xd88>)
 8005332:	210f      	movs	r1, #15
 8005334:	48a1      	ldr	r0, [pc, #644]	@ (80055bc <statemachine+0xd8c>)
 8005336:	f015 ff51 	bl	801b1dc <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800533a:	4aa1      	ldr	r2, [pc, #644]	@ (80055c0 <statemachine+0xd90>)
 800533c:	2301      	movs	r3, #1
 800533e:	ca06      	ldmia	r2, {r1, r2}
 8005340:	489e      	ldr	r0, [pc, #632]	@ (80055bc <statemachine+0xd8c>)
 8005342:	f7fe fedb 	bl	80040fc <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005346:	4b9f      	ldr	r3, [pc, #636]	@ (80055c4 <statemachine+0xd94>)
 8005348:	7a1b      	ldrb	r3, [r3, #8]
 800534a:	4a9f      	ldr	r2, [pc, #636]	@ (80055c8 <statemachine+0xd98>)
 800534c:	210f      	movs	r1, #15
 800534e:	489b      	ldr	r0, [pc, #620]	@ (80055bc <statemachine+0xd8c>)
 8005350:	f015 ff44 	bl	801b1dc <sniprintf>
						ssd1306_SetCursor(32, 20);
 8005354:	2114      	movs	r1, #20
 8005356:	2020      	movs	r0, #32
 8005358:	f7fe fef6 	bl	8004148 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800535c:	4a98      	ldr	r2, [pc, #608]	@ (80055c0 <statemachine+0xd90>)
 800535e:	2301      	movs	r3, #1
 8005360:	ca06      	ldmia	r2, {r1, r2}
 8005362:	4896      	ldr	r0, [pc, #600]	@ (80055bc <statemachine+0xd8c>)
 8005364:	f7fe feca 	bl	80040fc <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Latitude:");
 8005368:	4a98      	ldr	r2, [pc, #608]	@ (80055cc <statemachine+0xd9c>)
 800536a:	210f      	movs	r1, #15
 800536c:	4893      	ldr	r0, [pc, #588]	@ (80055bc <statemachine+0xd8c>)
 800536e:	f015 ff35 	bl	801b1dc <sniprintf>
						ssd1306_SetCursor(32, 28);
 8005372:	211c      	movs	r1, #28
 8005374:	2020      	movs	r0, #32
 8005376:	f7fe fee7 	bl	8004148 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800537a:	4a91      	ldr	r2, [pc, #580]	@ (80055c0 <statemachine+0xd90>)
 800537c:	2301      	movs	r3, #1
 800537e:	ca06      	ldmia	r2, {r1, r2}
 8005380:	488e      	ldr	r0, [pc, #568]	@ (80055bc <statemachine+0xd8c>)
 8005382:	f7fe febb 	bl	80040fc <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);
 8005386:	4b8f      	ldr	r3, [pc, #572]	@ (80055c4 <statemachine+0xd94>)
 8005388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538c:	e9cd 2300 	strd	r2, r3, [sp]
 8005390:	4a8f      	ldr	r2, [pc, #572]	@ (80055d0 <statemachine+0xda0>)
 8005392:	210f      	movs	r1, #15
 8005394:	4889      	ldr	r0, [pc, #548]	@ (80055bc <statemachine+0xd8c>)
 8005396:	f015 ff21 	bl	801b1dc <sniprintf>
						ssd1306_SetCursor(32, 36);
 800539a:	2124      	movs	r1, #36	@ 0x24
 800539c:	2020      	movs	r0, #32
 800539e:	f7fe fed3 	bl	8004148 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80053a2:	4a87      	ldr	r2, [pc, #540]	@ (80055c0 <statemachine+0xd90>)
 80053a4:	2301      	movs	r3, #1
 80053a6:	ca06      	ldmia	r2, {r1, r2}
 80053a8:	4884      	ldr	r0, [pc, #528]	@ (80055bc <statemachine+0xd8c>)
 80053aa:	f7fe fea7 	bl	80040fc <ssd1306_WriteString>


				  if(BTN_B>=1){
 80053ae:	4b89      	ldr	r3, [pc, #548]	@ (80055d4 <statemachine+0xda4>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	dd08      	ble.n	80053c8 <statemachine+0xb98>
				  					  posstate++;
 80053b6:	4b88      	ldr	r3, [pc, #544]	@ (80055d8 <statemachine+0xda8>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	3301      	adds	r3, #1
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	4b86      	ldr	r3, [pc, #536]	@ (80055d8 <statemachine+0xda8>)
 80053c0:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 80053c2:	4b84      	ldr	r3, [pc, #528]	@ (80055d4 <statemachine+0xda4>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80053c8:	4b84      	ldr	r3, [pc, #528]	@ (80055dc <statemachine+0xdac>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f340 81ca 	ble.w	8005766 <statemachine+0xf36>
									  posstate--;
 80053d2:	4b81      	ldr	r3, [pc, #516]	@ (80055d8 <statemachine+0xda8>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	4b7f      	ldr	r3, [pc, #508]	@ (80055d8 <statemachine+0xda8>)
 80053dc:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 80053de:	4b7f      	ldr	r3, [pc, #508]	@ (80055dc <statemachine+0xdac>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
								}



				  break;
 80053e4:	e1bf      	b.n	8005766 <statemachine+0xf36>
			  case STATE_LONG:

					ssd1306_SetCursor(32, 12);
 80053e6:	210c      	movs	r1, #12
 80053e8:	2020      	movs	r0, #32
 80053ea:	f7fe fead 	bl	8004148 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "LonSide:");
 80053ee:	4a7c      	ldr	r2, [pc, #496]	@ (80055e0 <statemachine+0xdb0>)
 80053f0:	210f      	movs	r1, #15
 80053f2:	4872      	ldr	r0, [pc, #456]	@ (80055bc <statemachine+0xd8c>)
 80053f4:	f015 fef2 	bl	801b1dc <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80053f8:	4a71      	ldr	r2, [pc, #452]	@ (80055c0 <statemachine+0xd90>)
 80053fa:	2301      	movs	r3, #1
 80053fc:	ca06      	ldmia	r2, {r1, r2}
 80053fe:	486f      	ldr	r0, [pc, #444]	@ (80055bc <statemachine+0xd8c>)
 8005400:	f7fe fe7c 	bl	80040fc <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005404:	4b6f      	ldr	r3, [pc, #444]	@ (80055c4 <statemachine+0xd94>)
 8005406:	7e1b      	ldrb	r3, [r3, #24]
 8005408:	4a6f      	ldr	r2, [pc, #444]	@ (80055c8 <statemachine+0xd98>)
 800540a:	210f      	movs	r1, #15
 800540c:	486b      	ldr	r0, [pc, #428]	@ (80055bc <statemachine+0xd8c>)
 800540e:	f015 fee5 	bl	801b1dc <sniprintf>
					ssd1306_SetCursor(32, 20);
 8005412:	2114      	movs	r1, #20
 8005414:	2020      	movs	r0, #32
 8005416:	f7fe fe97 	bl	8004148 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800541a:	4a69      	ldr	r2, [pc, #420]	@ (80055c0 <statemachine+0xd90>)
 800541c:	2301      	movs	r3, #1
 800541e:	ca06      	ldmia	r2, {r1, r2}
 8005420:	4866      	ldr	r0, [pc, #408]	@ (80055bc <statemachine+0xd8c>)
 8005422:	f7fe fe6b 	bl	80040fc <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "Longitude:");
 8005426:	4a6f      	ldr	r2, [pc, #444]	@ (80055e4 <statemachine+0xdb4>)
 8005428:	210f      	movs	r1, #15
 800542a:	4864      	ldr	r0, [pc, #400]	@ (80055bc <statemachine+0xd8c>)
 800542c:	f015 fed6 	bl	801b1dc <sniprintf>
					ssd1306_SetCursor(32, 28);
 8005430:	211c      	movs	r1, #28
 8005432:	2020      	movs	r0, #32
 8005434:	f7fe fe88 	bl	8004148 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005438:	4a61      	ldr	r2, [pc, #388]	@ (80055c0 <statemachine+0xd90>)
 800543a:	2301      	movs	r3, #1
 800543c:	ca06      	ldmia	r2, {r1, r2}
 800543e:	485f      	ldr	r0, [pc, #380]	@ (80055bc <statemachine+0xd8c>)
 8005440:	f7fe fe5c 	bl	80040fc <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 8005444:	4b5f      	ldr	r3, [pc, #380]	@ (80055c4 <statemachine+0xd94>)
 8005446:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800544a:	e9cd 2300 	strd	r2, r3, [sp]
 800544e:	4a60      	ldr	r2, [pc, #384]	@ (80055d0 <statemachine+0xda0>)
 8005450:	210f      	movs	r1, #15
 8005452:	485a      	ldr	r0, [pc, #360]	@ (80055bc <statemachine+0xd8c>)
 8005454:	f015 fec2 	bl	801b1dc <sniprintf>
					ssd1306_SetCursor(32, 36);
 8005458:	2124      	movs	r1, #36	@ 0x24
 800545a:	2020      	movs	r0, #32
 800545c:	f7fe fe74 	bl	8004148 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005460:	4a57      	ldr	r2, [pc, #348]	@ (80055c0 <statemachine+0xd90>)
 8005462:	2301      	movs	r3, #1
 8005464:	ca06      	ldmia	r2, {r1, r2}
 8005466:	4855      	ldr	r0, [pc, #340]	@ (80055bc <statemachine+0xd8c>)
 8005468:	f7fe fe48 	bl	80040fc <ssd1306_WriteString>

				  if(BTN_B>=1){
 800546c:	4b59      	ldr	r3, [pc, #356]	@ (80055d4 <statemachine+0xda4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	dd08      	ble.n	8005486 <statemachine+0xc56>
				  					  posstate++;
 8005474:	4b58      	ldr	r3, [pc, #352]	@ (80055d8 <statemachine+0xda8>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	3301      	adds	r3, #1
 800547a:	b2da      	uxtb	r2, r3
 800547c:	4b56      	ldr	r3, [pc, #344]	@ (80055d8 <statemachine+0xda8>)
 800547e:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8005480:	4b54      	ldr	r3, [pc, #336]	@ (80055d4 <statemachine+0xda4>)
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8005486:	4b55      	ldr	r3, [pc, #340]	@ (80055dc <statemachine+0xdac>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	f340 816d 	ble.w	800576a <statemachine+0xf3a>
									  posstate--;
 8005490:	4b51      	ldr	r3, [pc, #324]	@ (80055d8 <statemachine+0xda8>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	3b01      	subs	r3, #1
 8005496:	b2da      	uxtb	r2, r3
 8005498:	4b4f      	ldr	r3, [pc, #316]	@ (80055d8 <statemachine+0xda8>)
 800549a:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 800549c:	4b4f      	ldr	r3, [pc, #316]	@ (80055dc <statemachine+0xdac>)
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
								}

				  break;
 80054a2:	e162      	b.n	800576a <statemachine+0xf3a>
			  case STATE_ALT:


				  						ssd1306_SetCursor(32, 12);
 80054a4:	210c      	movs	r1, #12
 80054a6:	2020      	movs	r0, #32
 80054a8:	f7fe fe4e 	bl	8004148 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "altitude:");
 80054ac:	4a4e      	ldr	r2, [pc, #312]	@ (80055e8 <statemachine+0xdb8>)
 80054ae:	210f      	movs	r1, #15
 80054b0:	4842      	ldr	r0, [pc, #264]	@ (80055bc <statemachine+0xd8c>)
 80054b2:	f015 fe93 	bl	801b1dc <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80054b6:	4a42      	ldr	r2, [pc, #264]	@ (80055c0 <statemachine+0xd90>)
 80054b8:	2301      	movs	r3, #1
 80054ba:	ca06      	ldmia	r2, {r1, r2}
 80054bc:	483f      	ldr	r0, [pc, #252]	@ (80055bc <statemachine+0xd8c>)
 80054be:	f7fe fe1d 	bl	80040fc <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80054c2:	4b40      	ldr	r3, [pc, #256]	@ (80055c4 <statemachine+0xd94>)
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fb f816 	bl	80004f8 <__aeabi_f2d>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	e9cd 2300 	strd	r2, r3, [sp]
 80054d4:	4a45      	ldr	r2, [pc, #276]	@ (80055ec <statemachine+0xdbc>)
 80054d6:	210f      	movs	r1, #15
 80054d8:	4838      	ldr	r0, [pc, #224]	@ (80055bc <statemachine+0xd8c>)
 80054da:	f015 fe7f 	bl	801b1dc <sniprintf>
				  						ssd1306_SetCursor(32, 20);
 80054de:	2114      	movs	r1, #20
 80054e0:	2020      	movs	r0, #32
 80054e2:	f7fe fe31 	bl	8004148 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80054e6:	4a36      	ldr	r2, [pc, #216]	@ (80055c0 <statemachine+0xd90>)
 80054e8:	2301      	movs	r3, #1
 80054ea:	ca06      	ldmia	r2, {r1, r2}
 80054ec:	4833      	ldr	r0, [pc, #204]	@ (80055bc <statemachine+0xd8c>)
 80054ee:	f7fe fe05 	bl	80040fc <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "Pressure:");
 80054f2:	4a3f      	ldr	r2, [pc, #252]	@ (80055f0 <statemachine+0xdc0>)
 80054f4:	210f      	movs	r1, #15
 80054f6:	4831      	ldr	r0, [pc, #196]	@ (80055bc <statemachine+0xd8c>)
 80054f8:	f015 fe70 	bl	801b1dc <sniprintf>
				  						ssd1306_SetCursor(32, 28);
 80054fc:	211c      	movs	r1, #28
 80054fe:	2020      	movs	r0, #32
 8005500:	f7fe fe22 	bl	8004148 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005504:	4a2e      	ldr	r2, [pc, #184]	@ (80055c0 <statemachine+0xd90>)
 8005506:	2301      	movs	r3, #1
 8005508:	ca06      	ldmia	r2, {r1, r2}
 800550a:	482c      	ldr	r0, [pc, #176]	@ (80055bc <statemachine+0xd8c>)
 800550c:	f7fe fdf6 	bl	80040fc <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 8005510:	4b2c      	ldr	r3, [pc, #176]	@ (80055c4 <statemachine+0xd94>)
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	4618      	mov	r0, r3
 8005516:	f7fa ffef 	bl	80004f8 <__aeabi_f2d>
 800551a:	a325      	add	r3, pc, #148	@ (adr r3, 80055b0 <statemachine+0xd80>)
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	f7fb f842 	bl	80005a8 <__aeabi_dmul>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	4610      	mov	r0, r2
 800552a:	4619      	mov	r1, r3
 800552c:	f7fb fb34 	bl	8000b98 <__aeabi_d2f>
 8005530:	4603      	mov	r3, r0
 8005532:	ee00 3a10 	vmov	s0, r3
 8005536:	f018 fca7 	bl	801de88 <expf>
 800553a:	eef0 7a40 	vmov.f32	s15, s0
 800553e:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80055f4 <statemachine+0xdc4>
 8005542:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005546:	ee17 0a90 	vmov	r0, s15
 800554a:	f7fa ffd5 	bl	80004f8 <__aeabi_f2d>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	e9cd 2300 	strd	r2, r3, [sp]
 8005556:	4a28      	ldr	r2, [pc, #160]	@ (80055f8 <statemachine+0xdc8>)
 8005558:	210f      	movs	r1, #15
 800555a:	4818      	ldr	r0, [pc, #96]	@ (80055bc <statemachine+0xd8c>)
 800555c:	f015 fe3e 	bl	801b1dc <sniprintf>
				  						ssd1306_SetCursor(32, 36);
 8005560:	2124      	movs	r1, #36	@ 0x24
 8005562:	2020      	movs	r0, #32
 8005564:	f7fe fdf0 	bl	8004148 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005568:	4a15      	ldr	r2, [pc, #84]	@ (80055c0 <statemachine+0xd90>)
 800556a:	2301      	movs	r3, #1
 800556c:	ca06      	ldmia	r2, {r1, r2}
 800556e:	4813      	ldr	r0, [pc, #76]	@ (80055bc <statemachine+0xd8c>)
 8005570:	f7fe fdc4 	bl	80040fc <ssd1306_WriteString>

				  if(BTN_B>=1){
 8005574:	4b17      	ldr	r3, [pc, #92]	@ (80055d4 <statemachine+0xda4>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	dd08      	ble.n	800558e <statemachine+0xd5e>
				  					posstate++;
 800557c:	4b16      	ldr	r3, [pc, #88]	@ (80055d8 <statemachine+0xda8>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	3301      	adds	r3, #1
 8005582:	b2da      	uxtb	r2, r3
 8005584:	4b14      	ldr	r3, [pc, #80]	@ (80055d8 <statemachine+0xda8>)
 8005586:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 8005588:	4b12      	ldr	r3, [pc, #72]	@ (80055d4 <statemachine+0xda4>)
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 800558e:	4b13      	ldr	r3, [pc, #76]	@ (80055dc <statemachine+0xdac>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	f340 80eb 	ble.w	800576e <statemachine+0xf3e>
					  posstate--;
 8005598:	4b0f      	ldr	r3, [pc, #60]	@ (80055d8 <statemachine+0xda8>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	3b01      	subs	r3, #1
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	4b0d      	ldr	r3, [pc, #52]	@ (80055d8 <statemachine+0xda8>)
 80055a2:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 80055a4:	4b0d      	ldr	r3, [pc, #52]	@ (80055dc <statemachine+0xdac>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
				}
				  break;
 80055aa:	e0e0      	b.n	800576e <statemachine+0xf3e>
 80055ac:	f3af 8000 	nop.w
 80055b0:	fb798882 	.word	0xfb798882
 80055b4:	bf1e1818 	.word	0xbf1e1818
 80055b8:	0801f9bc 	.word	0x0801f9bc
 80055bc:	20000ac0 	.word	0x20000ac0
 80055c0:	20000014 	.word	0x20000014
 80055c4:	20000820 	.word	0x20000820
 80055c8:	0801f9c8 	.word	0x0801f9c8
 80055cc:	0801f978 	.word	0x0801f978
 80055d0:	0801f984 	.word	0x0801f984
 80055d4:	20000864 	.word	0x20000864
 80055d8:	200005d6 	.word	0x200005d6
 80055dc:	20000b9c 	.word	0x20000b9c
 80055e0:	0801f9cc 	.word	0x0801f9cc
 80055e4:	0801f98c 	.word	0x0801f98c
 80055e8:	0801f9d8 	.word	0x0801f9d8
 80055ec:	0801f9e4 	.word	0x0801f9e4
 80055f0:	0801f9ec 	.word	0x0801f9ec
 80055f4:	447a0000 	.word	0x447a0000
 80055f8:	0801f9f8 	.word	0x0801f9f8
			  case STATE_HEURE:
			  			  ssd1306_Fill(Black);
 80055fc:	2000      	movs	r0, #0
 80055fe:	f7fe fc61 	bl	8003ec4 <ssd1306_Fill>
			  			  nmea_parse(&myData, DataBuffer);
 8005602:	4999      	ldr	r1, [pc, #612]	@ (8005868 <statemachine+0x1038>)
 8005604:	4899      	ldr	r0, [pc, #612]	@ (800586c <statemachine+0x103c>)
 8005606:	f7fd fe8d 	bl	8003324 <nmea_parse>
			  			  if(settimeen==0){
 800560a:	4b99      	ldr	r3, [pc, #612]	@ (8005870 <statemachine+0x1040>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d141      	bne.n	8005696 <statemachine+0xe66>

			  							settimeen=1;
 8005612:	4b97      	ldr	r3, [pc, #604]	@ (8005870 <statemachine+0x1040>)
 8005614:	2201      	movs	r2, #1
 8005616:	601a      	str	r2, [r3, #0]
			  							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8005618:	4b94      	ldr	r3, [pc, #592]	@ (800586c <statemachine+0x103c>)
 800561a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	b2db      	uxtb	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	0092      	lsls	r2, r2, #2
 8005628:	4413      	add	r3, r2
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	b2da      	uxtb	r2, r3
 800562e:	4b8f      	ldr	r3, [pc, #572]	@ (800586c <statemachine+0x103c>)
 8005630:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005634:	f003 030f 	and.w	r3, r3, #15
 8005638:	b2db      	uxtb	r3, r3
 800563a:	4413      	add	r3, r2
 800563c:	b2da      	uxtb	r2, r3
 800563e:	4b8d      	ldr	r3, [pc, #564]	@ (8005874 <statemachine+0x1044>)
 8005640:	701a      	strb	r2, [r3, #0]
			  							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8005642:	4b8a      	ldr	r3, [pc, #552]	@ (800586c <statemachine+0x103c>)
 8005644:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005648:	f003 030f 	and.w	r3, r3, #15
 800564c:	b2db      	uxtb	r3, r3
 800564e:	461a      	mov	r2, r3
 8005650:	0092      	lsls	r2, r2, #2
 8005652:	4413      	add	r3, r2
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	b2da      	uxtb	r2, r3
 8005658:	4b84      	ldr	r3, [pc, #528]	@ (800586c <statemachine+0x103c>)
 800565a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	b2db      	uxtb	r3, r3
 8005664:	4413      	add	r3, r2
 8005666:	b2da      	uxtb	r2, r3
 8005668:	4b83      	ldr	r3, [pc, #524]	@ (8005878 <statemachine+0x1048>)
 800566a:	701a      	strb	r2, [r3, #0]
			  							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 800566c:	4b7f      	ldr	r3, [pc, #508]	@ (800586c <statemachine+0x103c>)
 800566e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	b2db      	uxtb	r3, r3
 8005678:	461a      	mov	r2, r3
 800567a:	0092      	lsls	r2, r2, #2
 800567c:	4413      	add	r3, r2
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	b2da      	uxtb	r2, r3
 8005682:	4b7a      	ldr	r3, [pc, #488]	@ (800586c <statemachine+0x103c>)
 8005684:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005688:	f003 030f 	and.w	r3, r3, #15
 800568c:	b2db      	uxtb	r3, r3
 800568e:	4413      	add	r3, r2
 8005690:	b2da      	uxtb	r2, r3
 8005692:	4b7a      	ldr	r3, [pc, #488]	@ (800587c <statemachine+0x104c>)
 8005694:	701a      	strb	r2, [r3, #0]


			  					  }


			  				  ssd1306_SetCursor(32, 12);
 8005696:	210c      	movs	r1, #12
 8005698:	2020      	movs	r0, #32
 800569a:	f7fe fd55 	bl	8004148 <ssd1306_SetCursor>
			  				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 800569e:	4a78      	ldr	r2, [pc, #480]	@ (8005880 <statemachine+0x1050>)
 80056a0:	2301      	movs	r3, #1
 80056a2:	ca06      	ldmia	r2, {r1, r2}
 80056a4:	4877      	ldr	r0, [pc, #476]	@ (8005884 <statemachine+0x1054>)
 80056a6:	f7fe fd29 	bl	80040fc <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 22);
 80056aa:	2116      	movs	r1, #22
 80056ac:	2020      	movs	r0, #32
 80056ae:	f7fe fd4b 	bl	8004148 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d:%02d",HR,MINUTE);
 80056b2:	4b70      	ldr	r3, [pc, #448]	@ (8005874 <statemachine+0x1044>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005878 <statemachine+0x1048>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	4613      	mov	r3, r2
 80056c0:	4a71      	ldr	r2, [pc, #452]	@ (8005888 <statemachine+0x1058>)
 80056c2:	210f      	movs	r1, #15
 80056c4:	4871      	ldr	r0, [pc, #452]	@ (800588c <statemachine+0x105c>)
 80056c6:	f015 fd89 	bl	801b1dc <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80056ca:	4a71      	ldr	r2, [pc, #452]	@ (8005890 <statemachine+0x1060>)
 80056cc:	2301      	movs	r3, #1
 80056ce:	ca06      	ldmia	r2, {r1, r2}
 80056d0:	486e      	ldr	r0, [pc, #440]	@ (800588c <statemachine+0x105c>)
 80056d2:	f7fe fd13 	bl	80040fc <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 32);
 80056d6:	2120      	movs	r1, #32
 80056d8:	2020      	movs	r0, #32
 80056da:	f7fe fd35 	bl	8004148 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d sec",SEC);
 80056de:	4b67      	ldr	r3, [pc, #412]	@ (800587c <statemachine+0x104c>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	4a6c      	ldr	r2, [pc, #432]	@ (8005894 <statemachine+0x1064>)
 80056e4:	210f      	movs	r1, #15
 80056e6:	4869      	ldr	r0, [pc, #420]	@ (800588c <statemachine+0x105c>)
 80056e8:	f015 fd78 	bl	801b1dc <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80056ec:	4a64      	ldr	r2, [pc, #400]	@ (8005880 <statemachine+0x1050>)
 80056ee:	2301      	movs	r3, #1
 80056f0:	ca06      	ldmia	r2, {r1, r2}
 80056f2:	4866      	ldr	r0, [pc, #408]	@ (800588c <statemachine+0x105c>)
 80056f4:	f7fe fd02 	bl	80040fc <ssd1306_WriteString>
			  				if(BTN_B>=1){
 80056f8:	4b67      	ldr	r3, [pc, #412]	@ (8005898 <statemachine+0x1068>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	dd20      	ble.n	8005742 <statemachine+0xf12>
			  					posstate--;
 8005700:	4b66      	ldr	r3, [pc, #408]	@ (800589c <statemachine+0x106c>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	3b01      	subs	r3, #1
 8005706:	b2da      	uxtb	r2, r3
 8005708:	4b64      	ldr	r3, [pc, #400]	@ (800589c <statemachine+0x106c>)
 800570a:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 800570c:	4b63      	ldr	r3, [pc, #396]	@ (800589c <statemachine+0x106c>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	3b01      	subs	r3, #1
 8005712:	b2da      	uxtb	r2, r3
 8005714:	4b61      	ldr	r3, [pc, #388]	@ (800589c <statemachine+0x106c>)
 8005716:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005718:	4b60      	ldr	r3, [pc, #384]	@ (800589c <statemachine+0x106c>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	3b01      	subs	r3, #1
 800571e:	b2da      	uxtb	r2, r3
 8005720:	4b5e      	ldr	r3, [pc, #376]	@ (800589c <statemachine+0x106c>)
 8005722:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005724:	4b5d      	ldr	r3, [pc, #372]	@ (800589c <statemachine+0x106c>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	3b01      	subs	r3, #1
 800572a:	b2da      	uxtb	r2, r3
 800572c:	4b5b      	ldr	r3, [pc, #364]	@ (800589c <statemachine+0x106c>)
 800572e:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005730:	4b5a      	ldr	r3, [pc, #360]	@ (800589c <statemachine+0x106c>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	3b01      	subs	r3, #1
 8005736:	b2da      	uxtb	r2, r3
 8005738:	4b58      	ldr	r3, [pc, #352]	@ (800589c <statemachine+0x106c>)
 800573a:	701a      	strb	r2, [r3, #0]
			  					BTN_B=0;
 800573c:	4b56      	ldr	r3, [pc, #344]	@ (8005898 <statemachine+0x1068>)
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]
			  				}
			  				if(BTN_B_LONG>=1){
 8005742:	4b57      	ldr	r3, [pc, #348]	@ (80058a0 <statemachine+0x1070>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	dd13      	ble.n	8005772 <statemachine+0xf42>
			  							  					posstate--;
 800574a:	4b54      	ldr	r3, [pc, #336]	@ (800589c <statemachine+0x106c>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	3b01      	subs	r3, #1
 8005750:	b2da      	uxtb	r2, r3
 8005752:	4b52      	ldr	r3, [pc, #328]	@ (800589c <statemachine+0x106c>)
 8005754:	701a      	strb	r2, [r3, #0]
			  							  					BTN_B_LONG=0;
 8005756:	4b52      	ldr	r3, [pc, #328]	@ (80058a0 <statemachine+0x1070>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
			  							  				}
			  			break;
 800575c:	e009      	b.n	8005772 <statemachine+0xf42>
				  break;
 800575e:	bf00      	nop
 8005760:	e008      	b.n	8005774 <statemachine+0xf44>
				  break;
 8005762:	bf00      	nop
 8005764:	e006      	b.n	8005774 <statemachine+0xf44>
				  break;
 8005766:	bf00      	nop
 8005768:	e004      	b.n	8005774 <statemachine+0xf44>
				  break;
 800576a:	bf00      	nop
 800576c:	e002      	b.n	8005774 <statemachine+0xf44>
				  break;
 800576e:	bf00      	nop
 8005770:	e000      	b.n	8005774 <statemachine+0xf44>
			  			break;
 8005772:	bf00      	nop
			  }

					if(BTN_A>=1){
 8005774:	4b4b      	ldr	r3, [pc, #300]	@ (80058a4 <statemachine+0x1074>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	dd0b      	ble.n	8005794 <statemachine+0xf64>
							state++;
 800577c:	4b4a      	ldr	r3, [pc, #296]	@ (80058a8 <statemachine+0x1078>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	3301      	adds	r3, #1
 8005782:	b2da      	uxtb	r2, r3
 8005784:	4b48      	ldr	r3, [pc, #288]	@ (80058a8 <statemachine+0x1078>)
 8005786:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8005788:	4b46      	ldr	r3, [pc, #280]	@ (80058a4 <statemachine+0x1074>)
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 800578e:	4b42      	ldr	r3, [pc, #264]	@ (8005898 <statemachine+0x1068>)
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]


						}
					if(BTN_A_LONG>=1){
 8005794:	4b45      	ldr	r3, [pc, #276]	@ (80058ac <statemachine+0x107c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	f340 842c 	ble.w	8005ff6 <statemachine+0x17c6>
									 									 									  			 	state--;
 800579e:	4b42      	ldr	r3, [pc, #264]	@ (80058a8 <statemachine+0x1078>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	4b40      	ldr	r3, [pc, #256]	@ (80058a8 <statemachine+0x1078>)
 80057a8:	701a      	strb	r2, [r3, #0]
									 									 									  			 	BTN_A=0;
 80057aa:	4b3e      	ldr	r3, [pc, #248]	@ (80058a4 <statemachine+0x1074>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_B=0;
 80057b0:	4b39      	ldr	r3, [pc, #228]	@ (8005898 <statemachine+0x1068>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_A_LONG=0;
 80057b6:	4b3d      	ldr	r3, [pc, #244]	@ (80058ac <statemachine+0x107c>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]
									 									 									  	}
			  break;
 80057bc:	f000 bc1b 	b.w	8005ff6 <statemachine+0x17c6>
		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 80057c0:	2000      	movs	r0, #0
 80057c2:	f7fe fb7f 	bl	8003ec4 <ssd1306_Fill>
			  ssd1306_SetCursor(32, 12);
 80057c6:	210c      	movs	r1, #12
 80057c8:	2020      	movs	r0, #32
 80057ca:	f7fe fcbd 	bl	8004148 <ssd1306_SetCursor>
			  ssd1306_WriteString("chrono", Font_6x8, White);
 80057ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005880 <statemachine+0x1050>)
 80057d0:	2301      	movs	r3, #1
 80057d2:	ca06      	ldmia	r2, {r1, r2}
 80057d4:	4836      	ldr	r0, [pc, #216]	@ (80058b0 <statemachine+0x1080>)
 80057d6:	f7fe fc91 	bl	80040fc <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 32);
 80057da:	2120      	movs	r1, #32
 80057dc:	2020      	movs	r0, #32
 80057de:	f7fe fcb3 	bl	8004148 <ssd1306_SetCursor>

			  switch(chronostate){
 80057e2:	4b34      	ldr	r3, [pc, #208]	@ (80058b4 <statemachine+0x1084>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d072      	beq.n	80058d0 <statemachine+0x10a0>
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	f300 80a1 	bgt.w	8005932 <statemachine+0x1102>
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <statemachine+0xfca>
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d01e      	beq.n	8005836 <statemachine+0x1006>
 80057f8:	e09b      	b.n	8005932 <statemachine+0x1102>
			  case STATE_RESET:
				  min=0;
 80057fa:	4b2f      	ldr	r3, [pc, #188]	@ (80058b8 <statemachine+0x1088>)
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8005802:	4b2e      	ldr	r3, [pc, #184]	@ (80058bc <statemachine+0x108c>)
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
				  calctime=0;
 800580a:	4b2d      	ldr	r3, [pc, #180]	@ (80058c0 <statemachine+0x1090>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]

				  	 if(BTN_B>=1){
 8005810:	4b21      	ldr	r3, [pc, #132]	@ (8005898 <statemachine+0x1068>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	f340 8087 	ble.w	8005928 <statemachine+0x10f8>
				  		chronostate++;
 800581a:	4b26      	ldr	r3, [pc, #152]	@ (80058b4 <statemachine+0x1084>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	3301      	adds	r3, #1
 8005820:	b2da      	uxtb	r2, r3
 8005822:	4b24      	ldr	r3, [pc, #144]	@ (80058b4 <statemachine+0x1084>)
 8005824:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005826:	4b1c      	ldr	r3, [pc, #112]	@ (8005898 <statemachine+0x1068>)
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 800582c:	4b25      	ldr	r3, [pc, #148]	@ (80058c4 <statemachine+0x1094>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a25      	ldr	r2, [pc, #148]	@ (80058c8 <statemachine+0x1098>)
 8005832:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8005834:	e078      	b.n	8005928 <statemachine+0x10f8>
			  case STATE_RUN:
				  calctime=uwTick-starttime+timehandler;
 8005836:	4b23      	ldr	r3, [pc, #140]	@ (80058c4 <statemachine+0x1094>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4b23      	ldr	r3, [pc, #140]	@ (80058c8 <statemachine+0x1098>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	1ad2      	subs	r2, r2, r3
 8005840:	4b22      	ldr	r3, [pc, #136]	@ (80058cc <statemachine+0x109c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4413      	add	r3, r2
 8005846:	4a1e      	ldr	r2, [pc, #120]	@ (80058c0 <statemachine+0x1090>)
 8005848:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 800584a:	4b13      	ldr	r3, [pc, #76]	@ (8005898 <statemachine+0x1068>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	dd6c      	ble.n	800592c <statemachine+0x10fc>
				  		chronostate++;
 8005852:	4b18      	ldr	r3, [pc, #96]	@ (80058b4 <statemachine+0x1084>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	3301      	adds	r3, #1
 8005858:	b2da      	uxtb	r2, r3
 800585a:	4b16      	ldr	r3, [pc, #88]	@ (80058b4 <statemachine+0x1084>)
 800585c:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 800585e:	4b0e      	ldr	r3, [pc, #56]	@ (8005898 <statemachine+0x1068>)
 8005860:	2200      	movs	r2, #0
 8005862:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8005864:	e062      	b.n	800592c <statemachine+0x10fc>
 8005866:	bf00      	nop
 8005868:	20000620 	.word	0x20000620
 800586c:	20000820 	.word	0x20000820
 8005870:	20000b88 	.word	0x20000b88
 8005874:	20000b85 	.word	0x20000b85
 8005878:	20000b86 	.word	0x20000b86
 800587c:	20000b84 	.word	0x20000b84
 8005880:	20000014 	.word	0x20000014
 8005884:	0801fa04 	.word	0x0801fa04
 8005888:	0801fa0c 	.word	0x0801fa0c
 800588c:	20000ac0 	.word	0x20000ac0
 8005890:	2000001c 	.word	0x2000001c
 8005894:	0801fa18 	.word	0x0801fa18
 8005898:	20000864 	.word	0x20000864
 800589c:	200005d6 	.word	0x200005d6
 80058a0:	20000b9c 	.word	0x20000b9c
 80058a4:	20000860 	.word	0x20000860
 80058a8:	200005d4 	.word	0x200005d4
 80058ac:	20000ba0 	.word	0x20000ba0
 80058b0:	0801fa24 	.word	0x0801fa24
 80058b4:	200005d7 	.word	0x200005d7
 80058b8:	20000b3c 	.word	0x20000b3c
 80058bc:	20000b38 	.word	0x20000b38
 80058c0:	20000b44 	.word	0x20000b44
 80058c4:	200013d4 	.word	0x200013d4
 80058c8:	20000b40 	.word	0x20000b40
 80058cc:	20000b48 	.word	0x20000b48
			  case STATE_PAUSE:
				  timehandler=calctime;
 80058d0:	4b88      	ldr	r3, [pc, #544]	@ (8005af4 <statemachine+0x12c4>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a88      	ldr	r2, [pc, #544]	@ (8005af8 <statemachine+0x12c8>)
 80058d6:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 80058d8:	4b88      	ldr	r3, [pc, #544]	@ (8005afc <statemachine+0x12cc>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	dd0c      	ble.n	80058fa <statemachine+0x10ca>
				  			chronostate--;
 80058e0:	4b87      	ldr	r3, [pc, #540]	@ (8005b00 <statemachine+0x12d0>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	4b85      	ldr	r3, [pc, #532]	@ (8005b00 <statemachine+0x12d0>)
 80058ea:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 80058ec:	4b83      	ldr	r3, [pc, #524]	@ (8005afc <statemachine+0x12cc>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
				  			starttime=uwTick;
 80058f2:	4b84      	ldr	r3, [pc, #528]	@ (8005b04 <statemachine+0x12d4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a84      	ldr	r2, [pc, #528]	@ (8005b08 <statemachine+0x12d8>)
 80058f8:	6013      	str	r3, [r2, #0]

			 }
				  if(BTN_B_LONG>=1){
 80058fa:	4b84      	ldr	r3, [pc, #528]	@ (8005b0c <statemachine+0x12dc>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	dd16      	ble.n	8005930 <statemachine+0x1100>
				  				  	chronostate--;
 8005902:	4b7f      	ldr	r3, [pc, #508]	@ (8005b00 <statemachine+0x12d0>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	3b01      	subs	r3, #1
 8005908:	b2da      	uxtb	r2, r3
 800590a:	4b7d      	ldr	r3, [pc, #500]	@ (8005b00 <statemachine+0x12d0>)
 800590c:	701a      	strb	r2, [r3, #0]
				  				  	chronostate--;
 800590e:	4b7c      	ldr	r3, [pc, #496]	@ (8005b00 <statemachine+0x12d0>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	3b01      	subs	r3, #1
 8005914:	b2da      	uxtb	r2, r3
 8005916:	4b7a      	ldr	r3, [pc, #488]	@ (8005b00 <statemachine+0x12d0>)
 8005918:	701a      	strb	r2, [r3, #0]
				  				  	BTN_B_LONG=0;
 800591a:	4b7c      	ldr	r3, [pc, #496]	@ (8005b0c <statemachine+0x12dc>)
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
				  				  	timehandler=0;
 8005920:	4b75      	ldr	r3, [pc, #468]	@ (8005af8 <statemachine+0x12c8>)
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
				  			 }


				  break;
 8005926:	e003      	b.n	8005930 <statemachine+0x1100>
				  break;
 8005928:	bf00      	nop
 800592a:	e002      	b.n	8005932 <statemachine+0x1102>
				  break;
 800592c:	bf00      	nop
 800592e:	e000      	b.n	8005932 <statemachine+0x1102>
				  break;
 8005930:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8005932:	4b70      	ldr	r3, [pc, #448]	@ (8005af4 <statemachine+0x12c4>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593e:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8005b10 <statemachine+0x12e0>
 8005942:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005946:	ee16 0a90 	vmov	r0, s13
 800594a:	f7fa fdd5 	bl	80004f8 <__aeabi_f2d>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	ec43 2b10 	vmov	d0, r2, r3
 8005956:	f018 fb33 	bl	801dfc0 <floor>
 800595a:	ec53 2b10 	vmov	r2, r3, d0
 800595e:	4610      	mov	r0, r2
 8005960:	4619      	mov	r1, r3
 8005962:	f7fb f919 	bl	8000b98 <__aeabi_d2f>
 8005966:	4603      	mov	r3, r0
 8005968:	4a6a      	ldr	r2, [pc, #424]	@ (8005b14 <statemachine+0x12e4>)
 800596a:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 800596c:	4b61      	ldr	r3, [pc, #388]	@ (8005af4 <statemachine+0x12c4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	ee07 3a90 	vmov	s15, r3
 8005974:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005978:	4b66      	ldr	r3, [pc, #408]	@ (8005b14 <statemachine+0x12e4>)
 800597a:	edd3 7a00 	vldr	s15, [r3]
 800597e:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8005b10 <statemachine+0x12e0>
 8005982:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005986:	ee37 7a67 	vsub.f32	s14, s14, s15
 800598a:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8005b18 <statemachine+0x12e8>
 800598e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005992:	4b62      	ldr	r3, [pc, #392]	@ (8005b1c <statemachine+0x12ec>)
 8005994:	edc3 7a00 	vstr	s15, [r3]
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 8005998:	4b5e      	ldr	r3, [pc, #376]	@ (8005b14 <statemachine+0x12e4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4618      	mov	r0, r3
 800599e:	f7fa fdab 	bl	80004f8 <__aeabi_f2d>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	e9cd 2300 	strd	r2, r3, [sp]
 80059aa:	4a5d      	ldr	r2, [pc, #372]	@ (8005b20 <statemachine+0x12f0>)
 80059ac:	210f      	movs	r1, #15
 80059ae:	485d      	ldr	r0, [pc, #372]	@ (8005b24 <statemachine+0x12f4>)
 80059b0:	f015 fc14 	bl	801b1dc <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80059b4:	4a5c      	ldr	r2, [pc, #368]	@ (8005b28 <statemachine+0x12f8>)
 80059b6:	2301      	movs	r3, #1
 80059b8:	ca06      	ldmia	r2, {r1, r2}
 80059ba:	485a      	ldr	r0, [pc, #360]	@ (8005b24 <statemachine+0x12f4>)
 80059bc:	f7fe fb9e 	bl	80040fc <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 44);
 80059c0:	212c      	movs	r1, #44	@ 0x2c
 80059c2:	2020      	movs	r0, #32
 80059c4:	f7fe fbc0 	bl	8004148 <ssd1306_SetCursor>
			  snprintf((char *)bufferscreen,15, "%0.3fs",seconde);
 80059c8:	4b54      	ldr	r3, [pc, #336]	@ (8005b1c <statemachine+0x12ec>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fa fd93 	bl	80004f8 <__aeabi_f2d>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	e9cd 2300 	strd	r2, r3, [sp]
 80059da:	4a54      	ldr	r2, [pc, #336]	@ (8005b2c <statemachine+0x12fc>)
 80059dc:	210f      	movs	r1, #15
 80059de:	4851      	ldr	r0, [pc, #324]	@ (8005b24 <statemachine+0x12f4>)
 80059e0:	f015 fbfc 	bl	801b1dc <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80059e4:	4a50      	ldr	r2, [pc, #320]	@ (8005b28 <statemachine+0x12f8>)
 80059e6:	2301      	movs	r3, #1
 80059e8:	ca06      	ldmia	r2, {r1, r2}
 80059ea:	484e      	ldr	r0, [pc, #312]	@ (8005b24 <statemachine+0x12f4>)
 80059ec:	f7fe fb86 	bl	80040fc <ssd1306_WriteString>


			  if(BTN_A>=1){
 80059f0:	4b4f      	ldr	r3, [pc, #316]	@ (8005b30 <statemachine+0x1300>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	dd0b      	ble.n	8005a10 <statemachine+0x11e0>
			 	state++;
 80059f8:	4b4e      	ldr	r3, [pc, #312]	@ (8005b34 <statemachine+0x1304>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	3301      	adds	r3, #1
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	4b4c      	ldr	r3, [pc, #304]	@ (8005b34 <statemachine+0x1304>)
 8005a02:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8005a04:	4b4a      	ldr	r3, [pc, #296]	@ (8005b30 <statemachine+0x1300>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8005a0a:	4b3c      	ldr	r3, [pc, #240]	@ (8005afc <statemachine+0x12cc>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]


	}
			  if(BTN_A_LONG>=1){
 8005a10:	4b49      	ldr	r3, [pc, #292]	@ (8005b38 <statemachine+0x1308>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f340 82f0 	ble.w	8005ffa <statemachine+0x17ca>
			  				 									 									  			 	state--;
 8005a1a:	4b46      	ldr	r3, [pc, #280]	@ (8005b34 <statemachine+0x1304>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	4b44      	ldr	r3, [pc, #272]	@ (8005b34 <statemachine+0x1304>)
 8005a24:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8005a26:	4b42      	ldr	r3, [pc, #264]	@ (8005b30 <statemachine+0x1300>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8005a2c:	4b33      	ldr	r3, [pc, #204]	@ (8005afc <statemachine+0x12cc>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8005a32:	4b41      	ldr	r3, [pc, #260]	@ (8005b38 <statemachine+0x1308>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8005a38:	e2df      	b.n	8005ffa <statemachine+0x17ca>




			  case STATE_USB:
				  ssd1306_Fill(Black);
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	f7fe fa42 	bl	8003ec4 <ssd1306_Fill>
				  ssd1306_SetCursor(32,12);
 8005a40:	210c      	movs	r1, #12
 8005a42:	2020      	movs	r0, #32
 8005a44:	f7fe fb80 	bl	8004148 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8005a48:	4a3c      	ldr	r2, [pc, #240]	@ (8005b3c <statemachine+0x130c>)
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	ca06      	ldmia	r2, {r1, r2}
 8005a4e:	483c      	ldr	r0, [pc, #240]	@ (8005b40 <statemachine+0x1310>)
 8005a50:	f7fe fb54 	bl	80040fc <ssd1306_WriteString>
				  switch(usbstate){
 8005a54:	4b3b      	ldr	r3, [pc, #236]	@ (8005b44 <statemachine+0x1314>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	f000 815a 	beq.w	8005d12 <statemachine+0x14e2>
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	f300 82cd 	bgt.w	8005ffe <statemachine+0x17ce>
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <statemachine+0x123e>
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d071      	beq.n	8005b50 <statemachine+0x1320>
				 									 									  			 	BTN_B=0;
				 									 									  			 	BTN_A_LONG=0;
				 									 									  	}
				 					 break;
				 				  }
				  break;
 8005a6c:	e2c7      	b.n	8005ffe <statemachine+0x17ce>
				 					  ssd1306_SetCursor(32,20);
 8005a6e:	2114      	movs	r1, #20
 8005a70:	2020      	movs	r0, #32
 8005a72:	f7fe fb69 	bl	8004148 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8005a76:	4a31      	ldr	r2, [pc, #196]	@ (8005b3c <statemachine+0x130c>)
 8005a78:	2301      	movs	r3, #1
 8005a7a:	ca06      	ldmia	r2, {r1, r2}
 8005a7c:	4832      	ldr	r0, [pc, #200]	@ (8005b48 <statemachine+0x1318>)
 8005a7e:	f7fe fb3d 	bl	80040fc <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8005a82:	4b32      	ldr	r3, [pc, #200]	@ (8005b4c <statemachine+0x131c>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 8005a88:	4b1c      	ldr	r3, [pc, #112]	@ (8005afc <statemachine+0x12cc>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	dd0b      	ble.n	8005aa8 <statemachine+0x1278>
				 						  usbstate++;
 8005a90:	4b2c      	ldr	r3, [pc, #176]	@ (8005b44 <statemachine+0x1314>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	3301      	adds	r3, #1
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	4b2a      	ldr	r3, [pc, #168]	@ (8005b44 <statemachine+0x1314>)
 8005a9a:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 8005a9c:	4b17      	ldr	r3, [pc, #92]	@ (8005afc <statemachine+0x12cc>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 8005aa2:	4b23      	ldr	r3, [pc, #140]	@ (8005b30 <statemachine+0x1300>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8005aa8:	4b21      	ldr	r3, [pc, #132]	@ (8005b30 <statemachine+0x1300>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	dd0b      	ble.n	8005ac8 <statemachine+0x1298>
				 						 state++;
 8005ab0:	4b20      	ldr	r3, [pc, #128]	@ (8005b34 <statemachine+0x1304>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8005b34 <statemachine+0x1304>)
 8005aba:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005abc:	4b1c      	ldr	r3, [pc, #112]	@ (8005b30 <statemachine+0x1300>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8005afc <statemachine+0x12cc>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8005ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b38 <statemachine+0x1308>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f340 8234 	ble.w	8005f3a <statemachine+0x170a>
				 									 									 									  			 	state--;
 8005ad2:	4b18      	ldr	r3, [pc, #96]	@ (8005b34 <statemachine+0x1304>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	4b16      	ldr	r3, [pc, #88]	@ (8005b34 <statemachine+0x1304>)
 8005adc:	701a      	strb	r2, [r3, #0]
				 									 									 									  			 	BTN_A=0;
 8005ade:	4b14      	ldr	r3, [pc, #80]	@ (8005b30 <statemachine+0x1300>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_B=0;
 8005ae4:	4b05      	ldr	r3, [pc, #20]	@ (8005afc <statemachine+0x12cc>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_A_LONG=0;
 8005aea:	4b13      	ldr	r3, [pc, #76]	@ (8005b38 <statemachine+0x1308>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
				 					  break;
 8005af0:	e223      	b.n	8005f3a <statemachine+0x170a>
 8005af2:	bf00      	nop
 8005af4:	20000b44 	.word	0x20000b44
 8005af8:	20000b48 	.word	0x20000b48
 8005afc:	20000864 	.word	0x20000864
 8005b00:	200005d7 	.word	0x200005d7
 8005b04:	200013d4 	.word	0x200013d4
 8005b08:	20000b40 	.word	0x20000b40
 8005b0c:	20000b9c 	.word	0x20000b9c
 8005b10:	476a6000 	.word	0x476a6000
 8005b14:	20000b3c 	.word	0x20000b3c
 8005b18:	447a0000 	.word	0x447a0000
 8005b1c:	20000b38 	.word	0x20000b38
 8005b20:	0801fa2c 	.word	0x0801fa2c
 8005b24:	20000ac0 	.word	0x20000ac0
 8005b28:	2000001c 	.word	0x2000001c
 8005b2c:	0801fa38 	.word	0x0801fa38
 8005b30:	20000860 	.word	0x20000860
 8005b34:	200005d4 	.word	0x200005d4
 8005b38:	20000ba0 	.word	0x20000ba0
 8005b3c:	20000014 	.word	0x20000014
 8005b40:	0801fa40 	.word	0x0801fa40
 8005b44:	200005d8 	.word	0x200005d8
 8005b48:	0801fa44 	.word	0x0801fa44
 8005b4c:	20000b58 	.word	0x20000b58
				 					 ssd1306_SetCursor(32,20);
 8005b50:	2114      	movs	r1, #20
 8005b52:	2020      	movs	r0, #32
 8005b54:	f7fe faf8 	bl	8004148 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8005b58:	4ab6      	ldr	r2, [pc, #728]	@ (8005e34 <statemachine+0x1604>)
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	ca06      	ldmia	r2, {r1, r2}
 8005b5e:	48b6      	ldr	r0, [pc, #728]	@ (8005e38 <statemachine+0x1608>)
 8005b60:	f7fe facc 	bl	80040fc <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,28);
 8005b64:	211c      	movs	r1, #28
 8005b66:	2020      	movs	r0, #32
 8005b68:	f7fe faee 	bl	8004148 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8005b6c:	4ab1      	ldr	r2, [pc, #708]	@ (8005e34 <statemachine+0x1604>)
 8005b6e:	2301      	movs	r3, #1
 8005b70:	ca06      	ldmia	r2, {r1, r2}
 8005b72:	48b2      	ldr	r0, [pc, #712]	@ (8005e3c <statemachine+0x160c>)
 8005b74:	f7fe fac2 	bl	80040fc <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8005b78:	4bb1      	ldr	r3, [pc, #708]	@ (8005e40 <statemachine+0x1610>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d137      	bne.n	8005bf0 <statemachine+0x13c0>
					 					 ssd1306_Fill(Black);
 8005b80:	2000      	movs	r0, #0
 8005b82:	f7fe f99f 	bl	8003ec4 <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,12);
 8005b86:	210c      	movs	r1, #12
 8005b88:	2020      	movs	r0, #32
 8005b8a:	f7fe fadd 	bl	8004148 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 8005b8e:	4aa9      	ldr	r2, [pc, #676]	@ (8005e34 <statemachine+0x1604>)
 8005b90:	2301      	movs	r3, #1
 8005b92:	ca06      	ldmia	r2, {r1, r2}
 8005b94:	48ab      	ldr	r0, [pc, #684]	@ (8005e44 <statemachine+0x1614>)
 8005b96:	f7fe fab1 	bl	80040fc <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,20);
 8005b9a:	2114      	movs	r1, #20
 8005b9c:	2020      	movs	r0, #32
 8005b9e:	f7fe fad3 	bl	8004148 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 8005ba2:	4aa9      	ldr	r2, [pc, #676]	@ (8005e48 <statemachine+0x1618>)
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	ca06      	ldmia	r2, {r1, r2}
 8005ba8:	48a8      	ldr	r0, [pc, #672]	@ (8005e4c <statemachine+0x161c>)
 8005baa:	f7fe faa7 	bl	80040fc <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,30);
 8005bae:	211e      	movs	r1, #30
 8005bb0:	2020      	movs	r0, #32
 8005bb2:	f7fe fac9 	bl	8004148 <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 8005bb6:	4ba6      	ldr	r3, [pc, #664]	@ (8005e50 <statemachine+0x1620>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bc2:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8005e54 <statemachine+0x1624>
 8005bc6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005bca:	ee16 0a90 	vmov	r0, s13
 8005bce:	f7fa fc93 	bl	80004f8 <__aeabi_f2d>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	e9cd 2300 	strd	r2, r3, [sp]
 8005bda:	4a9f      	ldr	r2, [pc, #636]	@ (8005e58 <statemachine+0x1628>)
 8005bdc:	2132      	movs	r1, #50	@ 0x32
 8005bde:	489f      	ldr	r0, [pc, #636]	@ (8005e5c <statemachine+0x162c>)
 8005be0:	f015 fafc 	bl	801b1dc <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005be4:	4a93      	ldr	r2, [pc, #588]	@ (8005e34 <statemachine+0x1604>)
 8005be6:	2301      	movs	r3, #1
 8005be8:	ca06      	ldmia	r2, {r1, r2}
 8005bea:	489c      	ldr	r0, [pc, #624]	@ (8005e5c <statemachine+0x162c>)
 8005bec:	f7fe fa86 	bl	80040fc <ssd1306_WriteString>
				 					if(BTN_A>=1){
 8005bf0:	4b9b      	ldr	r3, [pc, #620]	@ (8005e60 <statemachine+0x1630>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	dd7a      	ble.n	8005cee <statemachine+0x14be>
				 						erasetime=HAL_GetTick();
 8005bf8:	f001 fa00 	bl	8006ffc <HAL_GetTick>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	461a      	mov	r2, r3
 8005c00:	4b93      	ldr	r3, [pc, #588]	@ (8005e50 <statemachine+0x1620>)
 8005c02:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	e03f      	b.n	8005c8a <statemachine+0x145a>
				 							ssd1306_Fill(Black);
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	f7fe f95a 	bl	8003ec4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8005c10:	2120      	movs	r1, #32
 8005c12:	2020      	movs	r0, #32
 8005c14:	f7fe fa98 	bl	8004148 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 8005c18:	4a86      	ldr	r2, [pc, #536]	@ (8005e34 <statemachine+0x1604>)
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	ca06      	ldmia	r2, {r1, r2}
 8005c1e:	4889      	ldr	r0, [pc, #548]	@ (8005e44 <statemachine+0x1614>)
 8005c20:	f7fe fa6c 	bl	80040fc <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4619      	mov	r1, r3
 8005c28:	488e      	ldr	r0, [pc, #568]	@ (8005e64 <statemachine+0x1634>)
 8005c2a:	f011 fc9e 	bl	801756a <SPIF_EraseSector>
				 							if(i>=1){
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	dd21      	ble.n	8005c78 <statemachine+0x1448>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2264      	movs	r2, #100	@ 0x64
 8005c38:	fb02 f303 	mul.w	r3, r2, r3
 8005c3c:	ee07 3a90 	vmov	s15, r3
 8005c40:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005c44:	4b88      	ldr	r3, [pc, #544]	@ (8005e68 <statemachine+0x1638>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	da00      	bge.n	8005c4e <statemachine+0x141e>
 8005c4c:	330f      	adds	r3, #15
 8005c4e:	111b      	asrs	r3, r3, #4
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fa fc3f 	bl	80004d4 <__aeabi_i2d>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	f7fa ff53 	bl	8000b08 <__aeabi_d2iz>
 8005c62:	ee07 0a90 	vmov	s15, r0
 8005c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c6a:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8005c6e:	eeb0 0a47 	vmov.f32	s0, s14
 8005c72:	f7fe fd7d 	bl	8004770 <percentage>
 8005c76:	e003      	b.n	8005c80 <statemachine+0x1450>
				 								percentage((float) 0);
 8005c78:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 8005e6c <statemachine+0x163c>
 8005c7c:	f7fe fd78 	bl	8004770 <percentage>
				 							ssd1306_UpdateScreen();
 8005c80:	f7fe f938 	bl	8003ef4 <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	4b77      	ldr	r3, [pc, #476]	@ (8005e68 <statemachine+0x1638>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	da00      	bge.n	8005c94 <statemachine+0x1464>
 8005c92:	330f      	adds	r3, #15
 8005c94:	111b      	asrs	r3, r3, #4
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fa fc1c 	bl	80004d4 <__aeabi_i2d>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	f7fa ff30 	bl	8000b08 <__aeabi_d2iz>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4293      	cmp	r3, r2
 8005cae:	ddac      	ble.n	8005c0a <statemachine+0x13da>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 8005cb0:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8005cb4:	486b      	ldr	r0, [pc, #428]	@ (8005e64 <statemachine+0x1634>)
 8005cb6:	f011 fc58 	bl	801756a <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 8005cba:	f001 f99f 	bl	8006ffc <HAL_GetTick>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	4a63      	ldr	r2, [pc, #396]	@ (8005e50 <statemachine+0x1620>)
 8005cc2:	6812      	ldr	r2, [r2, #0]
 8005cc4:	1a9b      	subs	r3, r3, r2
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	4b61      	ldr	r3, [pc, #388]	@ (8005e50 <statemachine+0x1620>)
 8005cca:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 8005ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8005e40 <statemachine+0x1610>)
 8005cce:	2201      	movs	r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 8005cd2:	4b67      	ldr	r3, [pc, #412]	@ (8005e70 <statemachine+0x1640>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 8005cd8:	4b63      	ldr	r3, [pc, #396]	@ (8005e68 <statemachine+0x1638>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
				 						storeindex();
 8005cde:	f7fd ff15 	bl	8003b0c <storeindex>
				 						BTN_A=0;
 8005ce2:	4b5f      	ldr	r3, [pc, #380]	@ (8005e60 <statemachine+0x1630>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 8005ce8:	4b62      	ldr	r3, [pc, #392]	@ (8005e74 <statemachine+0x1644>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 8005cee:	4b61      	ldr	r3, [pc, #388]	@ (8005e74 <statemachine+0x1644>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f340 8123 	ble.w	8005f3e <statemachine+0x170e>
					 						usbstate++;
 8005cf8:	4b5f      	ldr	r3, [pc, #380]	@ (8005e78 <statemachine+0x1648>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	4b5d      	ldr	r3, [pc, #372]	@ (8005e78 <statemachine+0x1648>)
 8005d02:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 8005d04:	4b5b      	ldr	r3, [pc, #364]	@ (8005e74 <statemachine+0x1644>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 8005d0a:	4b55      	ldr	r3, [pc, #340]	@ (8005e60 <statemachine+0x1630>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]
				 			  break;
 8005d10:	e115      	b.n	8005f3e <statemachine+0x170e>
				 					ssd1306_Fill(Black);
 8005d12:	2000      	movs	r0, #0
 8005d14:	f7fe f8d6 	bl	8003ec4 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,20);
 8005d18:	2114      	movs	r1, #20
 8005d1a:	2020      	movs	r0, #32
 8005d1c:	f7fe fa14 	bl	8004148 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8005d20:	4a44      	ldr	r2, [pc, #272]	@ (8005e34 <statemachine+0x1604>)
 8005d22:	2301      	movs	r3, #1
 8005d24:	ca06      	ldmia	r2, {r1, r2}
 8005d26:	4855      	ldr	r0, [pc, #340]	@ (8005e7c <statemachine+0x164c>)
 8005d28:	f7fe f9e8 	bl	80040fc <ssd1306_WriteString>
				 					if(pagenumber>0){
 8005d2c:	4b4e      	ldr	r3, [pc, #312]	@ (8005e68 <statemachine+0x1638>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f340 80b1 	ble.w	8005e98 <statemachine+0x1668>
				 					int i=0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60bb      	str	r3, [r7, #8]
				 					if(usbtransmiten==0){
 8005d3a:	4b51      	ldr	r3, [pc, #324]	@ (8005e80 <statemachine+0x1650>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d165      	bne.n	8005e0e <statemachine+0x15de>
				 						while(i<pagenumber){
 8005d42:	e036      	b.n	8005db2 <statemachine+0x1582>
				 							ssd1306_Fill(Black);
 8005d44:	2000      	movs	r0, #0
 8005d46:	f7fe f8bd 	bl	8003ec4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,12);
 8005d4a:	210c      	movs	r1, #12
 8005d4c:	2020      	movs	r0, #32
 8005d4e:	f7fe f9fb 	bl	8004148 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8005d52:	4a38      	ldr	r2, [pc, #224]	@ (8005e34 <statemachine+0x1604>)
 8005d54:	2301      	movs	r3, #1
 8005d56:	ca06      	ldmia	r2, {r1, r2}
 8005d58:	4848      	ldr	r0, [pc, #288]	@ (8005e7c <statemachine+0x164c>)
 8005d5a:	f7fe f9cf 	bl	80040fc <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t  *)flashread, 256, 0);
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	2300      	movs	r3, #0
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005d68:	4a46      	ldr	r2, [pc, #280]	@ (8005e84 <statemachine+0x1654>)
 8005d6a:	483e      	ldr	r0, [pc, #248]	@ (8005e64 <statemachine+0x1634>)
 8005d6c:	f011 fc9e 	bl	80176ac <SPIF_ReadPage>
				 							CDC_Transmit_FS((char  * )flashread,256);
 8005d70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d74:	4843      	ldr	r0, [pc, #268]	@ (8005e84 <statemachine+0x1654>)
 8005d76:	f012 fc77 	bl	8018668 <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2264      	movs	r2, #100	@ 0x64
 8005d7e:	fb02 f303 	mul.w	r3, r2, r3
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d8a:	4b37      	ldr	r3, [pc, #220]	@ (8005e68 <statemachine+0x1638>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d96:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d9a:	eeb0 0a66 	vmov.f32	s0, s13
 8005d9e:	f7fe fce7 	bl	8004770 <percentage>
				 							ssd1306_UpdateScreen();
 8005da2:	f7fe f8a7 	bl	8003ef4 <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 8005da6:	207d      	movs	r0, #125	@ 0x7d
 8005da8:	f7fb fcc1 	bl	800172e <HAL_Delay>
				 							i++;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	3301      	adds	r3, #1
 8005db0:	60bb      	str	r3, [r7, #8]
				 						while(i<pagenumber){
 8005db2:	4b2d      	ldr	r3, [pc, #180]	@ (8005e68 <statemachine+0x1638>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	dbc3      	blt.n	8005d44 <statemachine+0x1514>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 8005dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8005e68 <statemachine+0x1638>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8005e70 <statemachine+0x1640>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	2300      	movs	r3, #0
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	4a2d      	ldr	r2, [pc, #180]	@ (8005e84 <statemachine+0x1654>)
 8005dd0:	4824      	ldr	r0, [pc, #144]	@ (8005e64 <statemachine+0x1634>)
 8005dd2:	f011 fc6b 	bl	80176ac <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 8005dd6:	4b26      	ldr	r3, [pc, #152]	@ (8005e70 <statemachine+0x1640>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4829      	ldr	r0, [pc, #164]	@ (8005e84 <statemachine+0x1654>)
 8005de0:	f012 fc42 	bl	8018668 <CDC_Transmit_FS>
				 						HAL_Delay(125);
 8005de4:	207d      	movs	r0, #125	@ 0x7d
 8005de6:	f7fb fca2 	bl	800172e <HAL_Delay>
				 						int taillefin=0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	607b      	str	r3, [r7, #4]
										taillefin = snprintf((char  *)usbbuffer,64,"findetrame\n\r");
 8005dee:	4a26      	ldr	r2, [pc, #152]	@ (8005e88 <statemachine+0x1658>)
 8005df0:	2140      	movs	r1, #64	@ 0x40
 8005df2:	4826      	ldr	r0, [pc, #152]	@ (8005e8c <statemachine+0x165c>)
 8005df4:	f015 f9f2 	bl	801b1dc <sniprintf>
 8005df8:	6078      	str	r0, [r7, #4]
				 						CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4822      	ldr	r0, [pc, #136]	@ (8005e8c <statemachine+0x165c>)
 8005e02:	f012 fc31 	bl	8018668 <CDC_Transmit_FS>
				 						usbtransmiten=1;
 8005e06:	4b1e      	ldr	r3, [pc, #120]	@ (8005e80 <statemachine+0x1650>)
 8005e08:	2201      	movs	r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	e003      	b.n	8005e16 <statemachine+0x15e6>
				 						usbpercent=1;
 8005e0e:	4b20      	ldr	r3, [pc, #128]	@ (8005e90 <statemachine+0x1660>)
 8005e10:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005e14:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 8005e16:	2000      	movs	r0, #0
 8005e18:	f7fe f854 	bl	8003ec4 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,35);
 8005e1c:	2123      	movs	r1, #35	@ 0x23
 8005e1e:	2020      	movs	r0, #32
 8005e20:	f7fe f992 	bl	8004148 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 8005e24:	4a08      	ldr	r2, [pc, #32]	@ (8005e48 <statemachine+0x1618>)
 8005e26:	2301      	movs	r3, #1
 8005e28:	ca06      	ldmia	r2, {r1, r2}
 8005e2a:	481a      	ldr	r0, [pc, #104]	@ (8005e94 <statemachine+0x1664>)
 8005e2c:	f7fe f966 	bl	80040fc <ssd1306_WriteString>
 8005e30:	e049      	b.n	8005ec6 <statemachine+0x1696>
 8005e32:	bf00      	nop
 8005e34:	20000014 	.word	0x20000014
 8005e38:	0801fa50 	.word	0x0801fa50
 8005e3c:	0801fa58 	.word	0x0801fa58
 8005e40:	20000b54 	.word	0x20000b54
 8005e44:	0801fa40 	.word	0x0801fa40
 8005e48:	2000001c 	.word	0x2000001c
 8005e4c:	0801fa64 	.word	0x0801fa64
 8005e50:	20000b50 	.word	0x20000b50
 8005e54:	447a0000 	.word	0x447a0000
 8005e58:	0801fa68 	.word	0x0801fa68
 8005e5c:	20000ac0 	.word	0x20000ac0
 8005e60:	20000860 	.word	0x20000860
 8005e64:	20000868 	.word	0x20000868
 8005e68:	20000aa0 	.word	0x20000aa0
 8005e6c:	00000000 	.word	0x00000000
 8005e70:	20000a9c 	.word	0x20000a9c
 8005e74:	20000864 	.word	0x20000864
 8005e78:	200005d8 	.word	0x200005d8
 8005e7c:	0801fa70 	.word	0x0801fa70
 8005e80:	20000b58 	.word	0x20000b58
 8005e84:	2000099c 	.word	0x2000099c
 8005e88:	0801fa78 	.word	0x0801fa78
 8005e8c:	20000af4 	.word	0x20000af4
 8005e90:	20000b5c 	.word	0x20000b5c
 8005e94:	0801fa88 	.word	0x0801fa88
				 							ssd1306_Fill(Black);
 8005e98:	2000      	movs	r0, #0
 8005e9a:	f7fe f813 	bl	8003ec4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,20);
 8005e9e:	2114      	movs	r1, #20
 8005ea0:	2020      	movs	r0, #32
 8005ea2:	f7fe f951 	bl	8004148 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8005ea6:	4a5b      	ldr	r2, [pc, #364]	@ (8006014 <statemachine+0x17e4>)
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	ca06      	ldmia	r2, {r1, r2}
 8005eac:	485a      	ldr	r0, [pc, #360]	@ (8006018 <statemachine+0x17e8>)
 8005eae:	f7fe f925 	bl	80040fc <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,28);
 8005eb2:	211c      	movs	r1, #28
 8005eb4:	2020      	movs	r0, #32
 8005eb6:	f7fe f947 	bl	8004148 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_6x8,White);
 8005eba:	4a56      	ldr	r2, [pc, #344]	@ (8006014 <statemachine+0x17e4>)
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	ca06      	ldmia	r2, {r1, r2}
 8005ec0:	4856      	ldr	r0, [pc, #344]	@ (800601c <statemachine+0x17ec>)
 8005ec2:	f7fe f91b 	bl	80040fc <ssd1306_WriteString>
				 					if(BTN_B>=1){
 8005ec6:	4b56      	ldr	r3, [pc, #344]	@ (8006020 <statemachine+0x17f0>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	dd11      	ble.n	8005ef2 <statemachine+0x16c2>
				 									 						usbstate--;
 8005ece:	4b55      	ldr	r3, [pc, #340]	@ (8006024 <statemachine+0x17f4>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	4b53      	ldr	r3, [pc, #332]	@ (8006024 <statemachine+0x17f4>)
 8005ed8:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 8005eda:	4b52      	ldr	r3, [pc, #328]	@ (8006024 <statemachine+0x17f4>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	4b50      	ldr	r3, [pc, #320]	@ (8006024 <statemachine+0x17f4>)
 8005ee4:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 8005ee6:	4b4e      	ldr	r3, [pc, #312]	@ (8006020 <statemachine+0x17f0>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 8005eec:	4b4e      	ldr	r3, [pc, #312]	@ (8006028 <statemachine+0x17f8>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8005ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8006028 <statemachine+0x17f8>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	dd0b      	ble.n	8005f12 <statemachine+0x16e2>
				 									  			 	state++;
 8005efa:	4b4c      	ldr	r3, [pc, #304]	@ (800602c <statemachine+0x17fc>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	3301      	adds	r3, #1
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	4b4a      	ldr	r3, [pc, #296]	@ (800602c <statemachine+0x17fc>)
 8005f04:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005f06:	4b48      	ldr	r3, [pc, #288]	@ (8006028 <statemachine+0x17f8>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005f0c:	4b44      	ldr	r3, [pc, #272]	@ (8006020 <statemachine+0x17f0>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8005f12:	4b47      	ldr	r3, [pc, #284]	@ (8006030 <statemachine+0x1800>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	dd13      	ble.n	8005f42 <statemachine+0x1712>
				 									 									  			 	state--;
 8005f1a:	4b44      	ldr	r3, [pc, #272]	@ (800602c <statemachine+0x17fc>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	4b42      	ldr	r3, [pc, #264]	@ (800602c <statemachine+0x17fc>)
 8005f24:	701a      	strb	r2, [r3, #0]
				 									 									  			 	BTN_A=0;
 8005f26:	4b40      	ldr	r3, [pc, #256]	@ (8006028 <statemachine+0x17f8>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_B=0;
 8005f2c:	4b3c      	ldr	r3, [pc, #240]	@ (8006020 <statemachine+0x17f0>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_A_LONG=0;
 8005f32:	4b3f      	ldr	r3, [pc, #252]	@ (8006030 <statemachine+0x1800>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
				 					 break;
 8005f38:	e003      	b.n	8005f42 <statemachine+0x1712>
				 					  break;
 8005f3a:	bf00      	nop
 8005f3c:	e05f      	b.n	8005ffe <statemachine+0x17ce>
				 			  break;
 8005f3e:	bf00      	nop
 8005f40:	e05d      	b.n	8005ffe <statemachine+0x17ce>
				 					 break;
 8005f42:	bf00      	nop
				  break;
 8005f44:	e05b      	b.n	8005ffe <statemachine+0x17ce>

				  case STATE_BLUETOOTH:
					  ssd1306_Fill(Black);
 8005f46:	2000      	movs	r0, #0
 8005f48:	f7fd ffbc 	bl	8003ec4 <ssd1306_Fill>
					  ssd1306_SetCursor(32,12);
 8005f4c:	210c      	movs	r1, #12
 8005f4e:	2020      	movs	r0, #32
 8005f50:	f7fe f8fa 	bl	8004148 <ssd1306_SetCursor>
					  ssd1306_WriteString("bluetooth",Font_6x8,White);
 8005f54:	4a2f      	ldr	r2, [pc, #188]	@ (8006014 <statemachine+0x17e4>)
 8005f56:	2301      	movs	r3, #1
 8005f58:	ca06      	ldmia	r2, {r1, r2}
 8005f5a:	4836      	ldr	r0, [pc, #216]	@ (8006034 <statemachine+0x1804>)
 8005f5c:	f7fe f8ce 	bl	80040fc <ssd1306_WriteString>
					  ssd1306_SetCursor(32,20);
 8005f60:	2114      	movs	r1, #20
 8005f62:	2020      	movs	r0, #32
 8005f64:	f7fe f8f0 	bl	8004148 <ssd1306_SetCursor>

					  ssd1306_WriteChar(receivedbluetooth, Font_7x10, White);
 8005f68:	4b33      	ldr	r3, [pc, #204]	@ (8006038 <statemachine+0x1808>)
 8005f6a:	7818      	ldrb	r0, [r3, #0]
 8005f6c:	4a33      	ldr	r2, [pc, #204]	@ (800603c <statemachine+0x180c>)
 8005f6e:	2301      	movs	r3, #1
 8005f70:	ca06      	ldmia	r2, {r1, r2}
 8005f72:	f7fe f83b 	bl	8003fec <ssd1306_WriteChar>


				  if(BTN_A>=1){
 8005f76:	4b2c      	ldr	r3, [pc, #176]	@ (8006028 <statemachine+0x17f8>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	dd23      	ble.n	8005fc6 <statemachine+0x1796>
						state--;
 8005f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800602c <statemachine+0x17fc>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	4b29      	ldr	r3, [pc, #164]	@ (800602c <statemachine+0x17fc>)
 8005f88:	701a      	strb	r2, [r3, #0]
						state--;
 8005f8a:	4b28      	ldr	r3, [pc, #160]	@ (800602c <statemachine+0x17fc>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	4b26      	ldr	r3, [pc, #152]	@ (800602c <statemachine+0x17fc>)
 8005f94:	701a      	strb	r2, [r3, #0]
						state--;
 8005f96:	4b25      	ldr	r3, [pc, #148]	@ (800602c <statemachine+0x17fc>)
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	4b23      	ldr	r3, [pc, #140]	@ (800602c <statemachine+0x17fc>)
 8005fa0:	701a      	strb	r2, [r3, #0]
						state--;
 8005fa2:	4b22      	ldr	r3, [pc, #136]	@ (800602c <statemachine+0x17fc>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	4b20      	ldr	r3, [pc, #128]	@ (800602c <statemachine+0x17fc>)
 8005fac:	701a      	strb	r2, [r3, #0]
						state--;
 8005fae:	4b1f      	ldr	r3, [pc, #124]	@ (800602c <statemachine+0x17fc>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800602c <statemachine+0x17fc>)
 8005fb8:	701a      	strb	r2, [r3, #0]
						BTN_A=0;
 8005fba:	4b1b      	ldr	r3, [pc, #108]	@ (8006028 <statemachine+0x17f8>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	601a      	str	r2, [r3, #0]
						BTN_B=0;
 8005fc0:	4b17      	ldr	r3, [pc, #92]	@ (8006020 <statemachine+0x17f0>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]
							}
					if(BTN_A_LONG>=1){
 8005fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8006030 <statemachine+0x1800>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	dd19      	ble.n	8006002 <statemachine+0x17d2>
							state--;
 8005fce:	4b17      	ldr	r3, [pc, #92]	@ (800602c <statemachine+0x17fc>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	4b15      	ldr	r3, [pc, #84]	@ (800602c <statemachine+0x17fc>)
 8005fd8:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8005fda:	4b13      	ldr	r3, [pc, #76]	@ (8006028 <statemachine+0x17f8>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8005fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8006020 <statemachine+0x17f0>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]
							BTN_A_LONG=0;
 8005fe6:	4b12      	ldr	r3, [pc, #72]	@ (8006030 <statemachine+0x1800>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
							}



					  break;
 8005fec:	e009      	b.n	8006002 <statemachine+0x17d2>
				  break;
 8005fee:	bf00      	nop
 8005ff0:	e008      	b.n	8006004 <statemachine+0x17d4>
					  break;
 8005ff2:	bf00      	nop
 8005ff4:	e006      	b.n	8006004 <statemachine+0x17d4>
			  break;
 8005ff6:	bf00      	nop
 8005ff8:	e004      	b.n	8006004 <statemachine+0x17d4>
			  break;
 8005ffa:	bf00      	nop
 8005ffc:	e002      	b.n	8006004 <statemachine+0x17d4>
				  break;
 8005ffe:	bf00      	nop
 8006000:	e000      	b.n	8006004 <statemachine+0x17d4>
					  break;
 8006002:	bf00      	nop




	}
return ;
 8006004:	bf00      	nop
 8006006:	bf00      	nop
}
 8006008:	3718      	adds	r7, #24
 800600a:	46bd      	mov	sp, r7
 800600c:	ecbd 8b02 	vpop	{d8}
 8006010:	bdb0      	pop	{r4, r5, r7, pc}
 8006012:	bf00      	nop
 8006014:	20000014 	.word	0x20000014
 8006018:	0801fa70 	.word	0x0801fa70
 800601c:	0801fa90 	.word	0x0801fa90
 8006020:	20000864 	.word	0x20000864
 8006024:	200005d8 	.word	0x200005d8
 8006028:	20000860 	.word	0x20000860
 800602c:	200005d4 	.word	0x200005d4
 8006030:	20000ba0 	.word	0x20000ba0
 8006034:	0801fa98 	.word	0x0801fa98
 8006038:	20001162 	.word	0x20001162
 800603c:	2000001c 	.word	0x2000001c

08006040 <LL_AHB3_GRP1_EnableClock>:
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800604c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800604e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4313      	orrs	r3, r2
 8006056:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006058:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800605c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4013      	ands	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006064:	68fb      	ldr	r3, [r7, #12]
}
 8006066:	bf00      	nop
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	af00      	add	r7, sp, #0



  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8006076:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800607a:	f7ff ffe1 	bl	8006040 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800607e:	2200      	movs	r2, #0
 8006080:	2100      	movs	r1, #0
 8006082:	202e      	movs	r0, #46	@ 0x2e
 8006084:	f002 f999 	bl	80083ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8006088:	202e      	movs	r0, #46	@ 0x2e
 800608a:	f002 f9b0 	bl	80083ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800608e:	bf00      	nop
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   ssd1306_SetCursor(32, 20);
 8006098:	2114      	movs	r1, #20
 800609a:	2020      	movs	r0, #32
 800609c:	f7fe f854 	bl	8004148 <ssd1306_SetCursor>
	   	  ssd1306_WriteString("NMI", Font_7x10, White);
 80060a0:	4a04      	ldr	r2, [pc, #16]	@ (80060b4 <NMI_Handler+0x20>)
 80060a2:	2301      	movs	r3, #1
 80060a4:	ca06      	ldmia	r2, {r1, r2}
 80060a6:	4804      	ldr	r0, [pc, #16]	@ (80060b8 <NMI_Handler+0x24>)
 80060a8:	f7fe f828 	bl	80040fc <ssd1306_WriteString>
	   	  ssd1306_UpdateScreen();
 80060ac:	f7fd ff22 	bl	8003ef4 <ssd1306_UpdateScreen>
	   ssd1306_SetCursor(32, 20);
 80060b0:	bf00      	nop
 80060b2:	e7f1      	b.n	8006098 <NMI_Handler+0x4>
 80060b4:	2000001c 	.word	0x2000001c
 80060b8:	0801faa4 	.word	0x0801faa4

080060bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80060c0:	2114      	movs	r1, #20
 80060c2:	2020      	movs	r0, #32
 80060c4:	f7fe f840 	bl	8004148 <ssd1306_SetCursor>
	  ssd1306_WriteString("hardfault", Font_7x10, White);
 80060c8:	4a04      	ldr	r2, [pc, #16]	@ (80060dc <HardFault_Handler+0x20>)
 80060ca:	2301      	movs	r3, #1
 80060cc:	ca06      	ldmia	r2, {r1, r2}
 80060ce:	4804      	ldr	r0, [pc, #16]	@ (80060e0 <HardFault_Handler+0x24>)
 80060d0:	f7fe f814 	bl	80040fc <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80060d4:	f7fd ff0e 	bl	8003ef4 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80060d8:	bf00      	nop
 80060da:	e7f1      	b.n	80060c0 <HardFault_Handler+0x4>
 80060dc:	2000001c 	.word	0x2000001c
 80060e0:	0801faa8 	.word	0x0801faa8

080060e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80060e8:	2114      	movs	r1, #20
 80060ea:	2020      	movs	r0, #32
 80060ec:	f7fe f82c 	bl	8004148 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("mem", Font_7x10, White);
 80060f0:	4a04      	ldr	r2, [pc, #16]	@ (8006104 <MemManage_Handler+0x20>)
 80060f2:	2301      	movs	r3, #1
 80060f4:	ca06      	ldmia	r2, {r1, r2}
 80060f6:	4804      	ldr	r0, [pc, #16]	@ (8006108 <MemManage_Handler+0x24>)
 80060f8:	f7fe f800 	bl	80040fc <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 80060fc:	f7fd fefa 	bl	8003ef4 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006100:	bf00      	nop
 8006102:	e7f1      	b.n	80060e8 <MemManage_Handler+0x4>
 8006104:	2000001c 	.word	0x2000001c
 8006108:	0801fab4 	.word	0x0801fab4

0800610c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006110:	2114      	movs	r1, #20
 8006112:	2020      	movs	r0, #32
 8006114:	f7fe f818 	bl	8004148 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("bus", Font_7x10, White);
 8006118:	4a04      	ldr	r2, [pc, #16]	@ (800612c <BusFault_Handler+0x20>)
 800611a:	2301      	movs	r3, #1
 800611c:	ca06      	ldmia	r2, {r1, r2}
 800611e:	4804      	ldr	r0, [pc, #16]	@ (8006130 <BusFault_Handler+0x24>)
 8006120:	f7fd ffec 	bl	80040fc <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8006124:	f7fd fee6 	bl	8003ef4 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006128:	bf00      	nop
 800612a:	e7f1      	b.n	8006110 <BusFault_Handler+0x4>
 800612c:	2000001c 	.word	0x2000001c
 8006130:	0801fab8 	.word	0x0801fab8

08006134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006138:	2114      	movs	r1, #20
 800613a:	2020      	movs	r0, #32
 800613c:	f7fe f804 	bl	8004148 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("usage", Font_7x10, White);
 8006140:	4a04      	ldr	r2, [pc, #16]	@ (8006154 <UsageFault_Handler+0x20>)
 8006142:	2301      	movs	r3, #1
 8006144:	ca06      	ldmia	r2, {r1, r2}
 8006146:	4804      	ldr	r0, [pc, #16]	@ (8006158 <UsageFault_Handler+0x24>)
 8006148:	f7fd ffd8 	bl	80040fc <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 800614c:	f7fd fed2 	bl	8003ef4 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006150:	bf00      	nop
 8006152:	e7f1      	b.n	8006138 <UsageFault_Handler+0x4>
 8006154:	2000001c 	.word	0x2000001c
 8006158:	0801fabc 	.word	0x0801fabc

0800615c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006160:	bf00      	nop
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800616a:	b480      	push	{r7}
 800616c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800616e:	bf00      	nop
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800617c:	bf00      	nop
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800618a:	f000 ff23 	bl	8006fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800618e:	bf00      	nop
 8006190:	bd80      	pop	{r7, pc}

08006192 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8006196:	f7fb ff2b 	bl	8001ff0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800619a:	bf00      	nop
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80061a4:	4802      	ldr	r0, [pc, #8]	@ (80061b0 <DMA1_Channel1_IRQHandler+0x10>)
 80061a6:	f002 fbde 	bl	8008966 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80061aa:	bf00      	nop
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	200003f0 	.word	0x200003f0

080061b4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80061b8:	4802      	ldr	r0, [pc, #8]	@ (80061c4 <DMA1_Channel2_IRQHandler+0x10>)
 80061ba:	f002 fbd4 	bl	8008966 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80061be:	bf00      	nop
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20001374 	.word	0x20001374

080061c8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80061cc:	4802      	ldr	r0, [pc, #8]	@ (80061d8 <DMA1_Channel3_IRQHandler+0x10>)
 80061ce:	f002 fbca 	bl	8008966 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80061d2:	bf00      	nop
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20000c9c 	.word	0x20000c9c

080061dc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80061e0:	4802      	ldr	r0, [pc, #8]	@ (80061ec <DMA1_Channel4_IRQHandler+0x10>)
 80061e2:	f002 fbc0 	bl	8008966 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80061e6:	bf00      	nop
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20000cfc 	.word	0x20000cfc

080061f0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80061f4:	4802      	ldr	r0, [pc, #8]	@ (8006200 <USB_LP_IRQHandler+0x10>)
 80061f6:	f003 fe39 	bl	8009e6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80061fa:	bf00      	nop
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	200029c8 	.word	0x200029c8

08006204 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8006208:	4803      	ldr	r0, [pc, #12]	@ (8006218 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800620a:	f008 fd50 	bl	800ecae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  updatedate();
 800620e:	f000 fa6d 	bl	80066ec <updatedate>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006212:	bf00      	nop
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	200011b4 	.word	0x200011b4

0800621c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8006220:	4806      	ldr	r0, [pc, #24]	@ (800623c <TIM1_TRG_COM_TIM17_IRQHandler+0x20>)
 8006222:	f008 fd44 	bl	800ecae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  cptdoubledonnee+=1;
 8006226:	4b06      	ldr	r3, [pc, #24]	@ (8006240 <TIM1_TRG_COM_TIM17_IRQHandler+0x24>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3301      	adds	r3, #1
 800622c:	4a04      	ldr	r2, [pc, #16]	@ (8006240 <TIM1_TRG_COM_TIM17_IRQHandler+0x24>)
 800622e:	6013      	str	r3, [r2, #0]
  enablewrite=1;
 8006230:	4b04      	ldr	r3, [pc, #16]	@ (8006244 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 8006232:	2201      	movs	r2, #1
 8006234:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8006236:	bf00      	nop
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20001200 	.word	0x20001200
 8006240:	20000b64 	.word	0x20000b64
 8006244:	20000b80 	.word	0x20000b80

08006248 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800624c:	4802      	ldr	r0, [pc, #8]	@ (8006258 <SPI1_IRQHandler+0x10>)
 800624e:	f007 ffc1 	bl	800e1d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8006252:	bf00      	nop
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20000c38 	.word	0x20000c38

0800625c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006260:	4802      	ldr	r0, [pc, #8]	@ (800626c <LPUART1_IRQHandler+0x10>)
 8006262:	f009 fabb 	bl	800f7dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8006266:	bf00      	nop
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	2000124c 	.word	0x2000124c

08006270 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8006274:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006278:	f002 ff50 	bl	800911c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800627c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006280:	f002 ff4c 	bl	800911c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006284:	bf00      	nop
 8006286:	bd80      	pop	{r7, pc}

08006288 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800628c:	f011 ffda 	bl	8018244 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8006290:	bf00      	nop
 8006292:	bd80      	pop	{r7, pc}

08006294 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8006298:	f012 f80a 	bl	80182b0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800629c:	bf00      	nop
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80062a4:	f002 ff52 	bl	800914c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80062a8:	bf00      	nop
 80062aa:	bd80      	pop	{r7, pc}

080062ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
  return 1;
 80062b0:	2301      	movs	r3, #1
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <_kill>:

int _kill(int pid, int sig)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80062c6:	f015 f907 	bl	801b4d8 <__errno>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2216      	movs	r2, #22
 80062ce:	601a      	str	r2, [r3, #0]
  return -1;
 80062d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <_exit>:

void _exit (int status)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80062e4:	f04f 31ff 	mov.w	r1, #4294967295
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7ff ffe7 	bl	80062bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80062ee:	bf00      	nop
 80062f0:	e7fd      	b.n	80062ee <_exit+0x12>

080062f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b086      	sub	sp, #24
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80062fe:	2300      	movs	r3, #0
 8006300:	617b      	str	r3, [r7, #20]
 8006302:	e00a      	b.n	800631a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006304:	f3af 8000 	nop.w
 8006308:	4601      	mov	r1, r0
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	60ba      	str	r2, [r7, #8]
 8006310:	b2ca      	uxtb	r2, r1
 8006312:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	3301      	adds	r3, #1
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	429a      	cmp	r2, r3
 8006320:	dbf0      	blt.n	8006304 <_read+0x12>
  }

  return len;
 8006322:	687b      	ldr	r3, [r7, #4]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006338:	2300      	movs	r3, #0
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	e009      	b.n	8006352 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	60ba      	str	r2, [r7, #8]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	3301      	adds	r3, #1
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	429a      	cmp	r2, r3
 8006358:	dbf1      	blt.n	800633e <_write+0x12>
  }
  return len;
 800635a:	687b      	ldr	r3, [r7, #4]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <_close>:

int _close(int file)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800636c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006370:	4618      	mov	r0, r3
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800638c:	605a      	str	r2, [r3, #4]
  return 0;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <_isatty>:

int _isatty(int file)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80063a4:	2301      	movs	r3, #1
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b085      	sub	sp, #20
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	60b9      	str	r1, [r7, #8]
 80063bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80063d4:	4a14      	ldr	r2, [pc, #80]	@ (8006428 <_sbrk+0x5c>)
 80063d6:	4b15      	ldr	r3, [pc, #84]	@ (800642c <_sbrk+0x60>)
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80063e0:	4b13      	ldr	r3, [pc, #76]	@ (8006430 <_sbrk+0x64>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d102      	bne.n	80063ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80063e8:	4b11      	ldr	r3, [pc, #68]	@ (8006430 <_sbrk+0x64>)
 80063ea:	4a12      	ldr	r2, [pc, #72]	@ (8006434 <_sbrk+0x68>)
 80063ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80063ee:	4b10      	ldr	r3, [pc, #64]	@ (8006430 <_sbrk+0x64>)
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4413      	add	r3, r2
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d207      	bcs.n	800640c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80063fc:	f015 f86c 	bl	801b4d8 <__errno>
 8006400:	4603      	mov	r3, r0
 8006402:	220c      	movs	r2, #12
 8006404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006406:	f04f 33ff 	mov.w	r3, #4294967295
 800640a:	e009      	b.n	8006420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800640c:	4b08      	ldr	r3, [pc, #32]	@ (8006430 <_sbrk+0x64>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006412:	4b07      	ldr	r3, [pc, #28]	@ (8006430 <_sbrk+0x64>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4413      	add	r3, r2
 800641a:	4a05      	ldr	r2, [pc, #20]	@ (8006430 <_sbrk+0x64>)
 800641c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800641e:	68fb      	ldr	r3, [r7, #12]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20030000 	.word	0x20030000
 800642c:	00000400 	.word	0x00000400
 8006430:	20001164 	.word	0x20001164
 8006434:	200030b0 	.word	0x200030b0

08006438 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800643c:	4b24      	ldr	r3, [pc, #144]	@ (80064d0 <SystemInit+0x98>)
 800643e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006442:	4a23      	ldr	r2, [pc, #140]	@ (80064d0 <SystemInit+0x98>)
 8006444:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006448:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800644c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006456:	f043 0301 	orr.w	r3, r3, #1
 800645a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800645c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006460:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8006464:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8006466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006470:	4b18      	ldr	r3, [pc, #96]	@ (80064d4 <SystemInit+0x9c>)
 8006472:	4013      	ands	r3, r2
 8006474:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8006476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800647a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800647e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006482:	f023 0305 	bic.w	r3, r3, #5
 8006486:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800648a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800648e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006492:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006496:	f023 0301 	bic.w	r3, r3, #1
 800649a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800649e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064a2:	4a0d      	ldr	r2, [pc, #52]	@ (80064d8 <SystemInit+0xa0>)
 80064a4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80064a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064aa:	4a0b      	ldr	r2, [pc, #44]	@ (80064d8 <SystemInit+0xa0>)
 80064ac:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80064ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80064be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064c2:	2200      	movs	r2, #0
 80064c4:	619a      	str	r2, [r3, #24]
}
 80064c6:	bf00      	nop
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	e000ed00 	.word	0xe000ed00
 80064d4:	faf6fefb 	.word	0xfaf6fefb
 80064d8:	22041000 	.word	0x22041000

080064dc <LL_APB1_GRP1_EnableClock>:
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80064e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80064ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80064f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4013      	ands	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006500:	68fb      	ldr	r3, [r7, #12]
}
 8006502:	bf00      	nop
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <LL_APB2_GRP1_EnableClock>:
{
 800650e:	b480      	push	{r7}
 8006510:	b085      	sub	sp, #20
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800651a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800651c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4313      	orrs	r3, r2
 8006524:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800652a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4013      	ands	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006532:	68fb      	ldr	r3, [r7, #12]
}
 8006534:	bf00      	nop
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b088      	sub	sp, #32
 8006544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006546:	f107 0310 	add.w	r3, r7, #16
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	605a      	str	r2, [r3, #4]
 8006550:	609a      	str	r2, [r3, #8]
 8006552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006554:	1d3b      	adds	r3, r7, #4
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	605a      	str	r2, [r3, #4]
 800655c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800655e:	4b1e      	ldr	r3, [pc, #120]	@ (80065d8 <MX_TIM2_Init+0x98>)
 8006560:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006564:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 8006566:	4b1c      	ldr	r3, [pc, #112]	@ (80065d8 <MX_TIM2_Init+0x98>)
 8006568:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 800656c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800656e:	4b1a      	ldr	r3, [pc, #104]	@ (80065d8 <MX_TIM2_Init+0x98>)
 8006570:	2200      	movs	r2, #0
 8006572:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8006574:	4b18      	ldr	r3, [pc, #96]	@ (80065d8 <MX_TIM2_Init+0x98>)
 8006576:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800657a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800657c:	4b16      	ldr	r3, [pc, #88]	@ (80065d8 <MX_TIM2_Init+0x98>)
 800657e:	2200      	movs	r2, #0
 8006580:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006582:	4b15      	ldr	r3, [pc, #84]	@ (80065d8 <MX_TIM2_Init+0x98>)
 8006584:	2200      	movs	r2, #0
 8006586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006588:	4813      	ldr	r0, [pc, #76]	@ (80065d8 <MX_TIM2_Init+0x98>)
 800658a:	f008 fa75 	bl	800ea78 <HAL_TIM_Base_Init>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8006594:	f7fc fba8 	bl	8002ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006598:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800659c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800659e:	f107 0310 	add.w	r3, r7, #16
 80065a2:	4619      	mov	r1, r3
 80065a4:	480c      	ldr	r0, [pc, #48]	@ (80065d8 <MX_TIM2_Init+0x98>)
 80065a6:	f008 fc89 	bl	800eebc <HAL_TIM_ConfigClockSource>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80065b0:	f7fc fb9a 	bl	8002ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80065b4:	2320      	movs	r3, #32
 80065b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065b8:	2300      	movs	r3, #0
 80065ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80065bc:	1d3b      	adds	r3, r7, #4
 80065be:	4619      	mov	r1, r3
 80065c0:	4805      	ldr	r0, [pc, #20]	@ (80065d8 <MX_TIM2_Init+0x98>)
 80065c2:	f008 fe83 	bl	800f2cc <HAL_TIMEx_MasterConfigSynchronization>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80065cc:	f7fc fb8c 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80065d0:	bf00      	nop
 80065d2:	3720      	adds	r7, #32
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	20001168 	.word	0x20001168

080065dc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80065e0:	4b10      	ldr	r3, [pc, #64]	@ (8006624 <MX_TIM16_Init+0x48>)
 80065e2:	4a11      	ldr	r2, [pc, #68]	@ (8006628 <MX_TIM16_Init+0x4c>)
 80065e4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000-1;
 80065e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006624 <MX_TIM16_Init+0x48>)
 80065e8:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80065ec:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006624 <MX_TIM16_Init+0x48>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80065f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006624 <MX_TIM16_Init+0x48>)
 80065f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80065fa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065fc:	4b09      	ldr	r3, [pc, #36]	@ (8006624 <MX_TIM16_Init+0x48>)
 80065fe:	2200      	movs	r2, #0
 8006600:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006602:	4b08      	ldr	r3, [pc, #32]	@ (8006624 <MX_TIM16_Init+0x48>)
 8006604:	2200      	movs	r2, #0
 8006606:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006608:	4b06      	ldr	r3, [pc, #24]	@ (8006624 <MX_TIM16_Init+0x48>)
 800660a:	2200      	movs	r2, #0
 800660c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800660e:	4805      	ldr	r0, [pc, #20]	@ (8006624 <MX_TIM16_Init+0x48>)
 8006610:	f008 fa32 	bl	800ea78 <HAL_TIM_Base_Init>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800661a:	f7fc fb65 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800661e:	bf00      	nop
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	200011b4 	.word	0x200011b4
 8006628:	40014400 	.word	0x40014400

0800662c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8006630:	4b10      	ldr	r3, [pc, #64]	@ (8006674 <MX_TIM17_Init+0x48>)
 8006632:	4a11      	ldr	r2, [pc, #68]	@ (8006678 <MX_TIM17_Init+0x4c>)
 8006634:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000-1;
 8006636:	4b0f      	ldr	r3, [pc, #60]	@ (8006674 <MX_TIM17_Init+0x48>)
 8006638:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800663c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800663e:	4b0d      	ldr	r3, [pc, #52]	@ (8006674 <MX_TIM17_Init+0x48>)
 8006640:	2200      	movs	r2, #0
 8006642:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8006644:	4b0b      	ldr	r3, [pc, #44]	@ (8006674 <MX_TIM17_Init+0x48>)
 8006646:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800664a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800664c:	4b09      	ldr	r3, [pc, #36]	@ (8006674 <MX_TIM17_Init+0x48>)
 800664e:	2200      	movs	r2, #0
 8006650:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8006652:	4b08      	ldr	r3, [pc, #32]	@ (8006674 <MX_TIM17_Init+0x48>)
 8006654:	2200      	movs	r2, #0
 8006656:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006658:	4b06      	ldr	r3, [pc, #24]	@ (8006674 <MX_TIM17_Init+0x48>)
 800665a:	2200      	movs	r2, #0
 800665c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800665e:	4805      	ldr	r0, [pc, #20]	@ (8006674 <MX_TIM17_Init+0x48>)
 8006660:	f008 fa0a 	bl	800ea78 <HAL_TIM_Base_Init>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 800666a:	f7fc fb3d 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800666e:	bf00      	nop
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20001200 	.word	0x20001200
 8006678:	40014800 	.word	0x40014800

0800667c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800668c:	d103      	bne.n	8006696 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800668e:	2001      	movs	r0, #1
 8006690:	f7ff ff24 	bl	80064dc <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8006694:	e022      	b.n	80066dc <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM16)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a12      	ldr	r2, [pc, #72]	@ (80066e4 <HAL_TIM_Base_MspInit+0x68>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d10c      	bne.n	80066ba <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80066a0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80066a4:	f7ff ff33 	bl	800650e <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80066a8:	2200      	movs	r2, #0
 80066aa:	2100      	movs	r1, #0
 80066ac:	2019      	movs	r0, #25
 80066ae:	f001 fe84 	bl	80083ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80066b2:	2019      	movs	r0, #25
 80066b4:	f001 fe9b 	bl	80083ee <HAL_NVIC_EnableIRQ>
}
 80066b8:	e010      	b.n	80066dc <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM17)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a0a      	ldr	r2, [pc, #40]	@ (80066e8 <HAL_TIM_Base_MspInit+0x6c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d10b      	bne.n	80066dc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80066c4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80066c8:	f7ff ff21 	bl	800650e <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80066cc:	2200      	movs	r2, #0
 80066ce:	2100      	movs	r1, #0
 80066d0:	201a      	movs	r0, #26
 80066d2:	f001 fe72 	bl	80083ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80066d6:	201a      	movs	r0, #26
 80066d8:	f001 fe89 	bl	80083ee <HAL_NVIC_EnableIRQ>
}
 80066dc:	bf00      	nop
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40014400 	.word	0x40014400
 80066e8:	40014800 	.word	0x40014800

080066ec <updatedate>:
  /* USER CODE END TIM17_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0

	SEC+=1;
 80066f0:	4b98      	ldr	r3, [pc, #608]	@ (8006954 <updatedate+0x268>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	3301      	adds	r3, #1
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	4b96      	ldr	r3, [pc, #600]	@ (8006954 <updatedate+0x268>)
 80066fa:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 80066fc:	4b95      	ldr	r3, [pc, #596]	@ (8006954 <updatedate+0x268>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b3b      	cmp	r3, #59	@ 0x3b
 8006702:	d908      	bls.n	8006716 <updatedate+0x2a>
		SEC=0;
 8006704:	4b93      	ldr	r3, [pc, #588]	@ (8006954 <updatedate+0x268>)
 8006706:	2200      	movs	r2, #0
 8006708:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 800670a:	4b93      	ldr	r3, [pc, #588]	@ (8006958 <updatedate+0x26c>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	3301      	adds	r3, #1
 8006710:	b2da      	uxtb	r2, r3
 8006712:	4b91      	ldr	r3, [pc, #580]	@ (8006958 <updatedate+0x26c>)
 8006714:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 8006716:	4b90      	ldr	r3, [pc, #576]	@ (8006958 <updatedate+0x26c>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	2b3b      	cmp	r3, #59	@ 0x3b
 800671c:	d908      	bls.n	8006730 <updatedate+0x44>

		MINUTE=0;
 800671e:	4b8e      	ldr	r3, [pc, #568]	@ (8006958 <updatedate+0x26c>)
 8006720:	2200      	movs	r2, #0
 8006722:	701a      	strb	r2, [r3, #0]
		HR+=1;
 8006724:	4b8d      	ldr	r3, [pc, #564]	@ (800695c <updatedate+0x270>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	3301      	adds	r3, #1
 800672a:	b2da      	uxtb	r2, r3
 800672c:	4b8b      	ldr	r3, [pc, #556]	@ (800695c <updatedate+0x270>)
 800672e:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 8006730:	4b8a      	ldr	r3, [pc, #552]	@ (800695c <updatedate+0x270>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b17      	cmp	r3, #23
 8006736:	d908      	bls.n	800674a <updatedate+0x5e>
		HR=0;
 8006738:	4b88      	ldr	r3, [pc, #544]	@ (800695c <updatedate+0x270>)
 800673a:	2200      	movs	r2, #0
 800673c:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 800673e:	4b88      	ldr	r3, [pc, #544]	@ (8006960 <updatedate+0x274>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	3301      	adds	r3, #1
 8006744:	b2da      	uxtb	r2, r3
 8006746:	4b86      	ldr	r3, [pc, #536]	@ (8006960 <updatedate+0x274>)
 8006748:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 800674a:	4b86      	ldr	r3, [pc, #536]	@ (8006964 <updatedate+0x278>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	2b0b      	cmp	r3, #11
 8006750:	f200 8137 	bhi.w	80069c2 <updatedate+0x2d6>
 8006754:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <updatedate+0x70>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	0800678d 	.word	0x0800678d
 8006760:	080067b7 	.word	0x080067b7
 8006764:	080067e1 	.word	0x080067e1
 8006768:	0800680b 	.word	0x0800680b
 800676c:	08006835 	.word	0x08006835
 8006770:	0800685f 	.word	0x0800685f
 8006774:	08006889 	.word	0x08006889
 8006778:	080068b3 	.word	0x080068b3
 800677c:	080068db 	.word	0x080068db
 8006780:	08006903 	.word	0x08006903
 8006784:	0800692b 	.word	0x0800692b
 8006788:	0800696d 	.word	0x0800696d

	case JANVIER:
		if(JOURS>31){
 800678c:	4b74      	ldr	r3, [pc, #464]	@ (8006960 <updatedate+0x274>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b1f      	cmp	r3, #31
 8006792:	f240 80ff 	bls.w	8006994 <updatedate+0x2a8>
			JOURS=1;
 8006796:	4b72      	ldr	r3, [pc, #456]	@ (8006960 <updatedate+0x274>)
 8006798:	2201      	movs	r2, #1
 800679a:	701a      	strb	r2, [r3, #0]
			mois++;
 800679c:	4b71      	ldr	r3, [pc, #452]	@ (8006964 <updatedate+0x278>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	3301      	adds	r3, #1
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	4b6f      	ldr	r3, [pc, #444]	@ (8006964 <updatedate+0x278>)
 80067a6:	701a      	strb	r2, [r3, #0]
			MOIS++;
 80067a8:	4b6f      	ldr	r3, [pc, #444]	@ (8006968 <updatedate+0x27c>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	3301      	adds	r3, #1
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	4b6d      	ldr	r3, [pc, #436]	@ (8006968 <updatedate+0x27c>)
 80067b2:	701a      	strb	r2, [r3, #0]
		}

		break;
 80067b4:	e0ee      	b.n	8006994 <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 80067b6:	4b6a      	ldr	r3, [pc, #424]	@ (8006960 <updatedate+0x274>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b1d      	cmp	r3, #29
 80067bc:	f240 80ec 	bls.w	8006998 <updatedate+0x2ac>
					JOURS=1;
 80067c0:	4b67      	ldr	r3, [pc, #412]	@ (8006960 <updatedate+0x274>)
 80067c2:	2201      	movs	r2, #1
 80067c4:	701a      	strb	r2, [r3, #0]
					mois++;
 80067c6:	4b67      	ldr	r3, [pc, #412]	@ (8006964 <updatedate+0x278>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	3301      	adds	r3, #1
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	4b65      	ldr	r3, [pc, #404]	@ (8006964 <updatedate+0x278>)
 80067d0:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80067d2:	4b65      	ldr	r3, [pc, #404]	@ (8006968 <updatedate+0x27c>)
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	3301      	adds	r3, #1
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	4b63      	ldr	r3, [pc, #396]	@ (8006968 <updatedate+0x27c>)
 80067dc:	701a      	strb	r2, [r3, #0]
				}
		break;
 80067de:	e0db      	b.n	8006998 <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 80067e0:	4b5f      	ldr	r3, [pc, #380]	@ (8006960 <updatedate+0x274>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b1f      	cmp	r3, #31
 80067e6:	f240 80d9 	bls.w	800699c <updatedate+0x2b0>
					JOURS=1;
 80067ea:	4b5d      	ldr	r3, [pc, #372]	@ (8006960 <updatedate+0x274>)
 80067ec:	2201      	movs	r2, #1
 80067ee:	701a      	strb	r2, [r3, #0]
					mois++;
 80067f0:	4b5c      	ldr	r3, [pc, #368]	@ (8006964 <updatedate+0x278>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	3301      	adds	r3, #1
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	4b5a      	ldr	r3, [pc, #360]	@ (8006964 <updatedate+0x278>)
 80067fa:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80067fc:	4b5a      	ldr	r3, [pc, #360]	@ (8006968 <updatedate+0x27c>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	3301      	adds	r3, #1
 8006802:	b2da      	uxtb	r2, r3
 8006804:	4b58      	ldr	r3, [pc, #352]	@ (8006968 <updatedate+0x27c>)
 8006806:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006808:	e0c8      	b.n	800699c <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 800680a:	4b55      	ldr	r3, [pc, #340]	@ (8006960 <updatedate+0x274>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	2b1e      	cmp	r3, #30
 8006810:	f240 80c6 	bls.w	80069a0 <updatedate+0x2b4>
					JOURS=1;
 8006814:	4b52      	ldr	r3, [pc, #328]	@ (8006960 <updatedate+0x274>)
 8006816:	2201      	movs	r2, #1
 8006818:	701a      	strb	r2, [r3, #0]
					mois++;
 800681a:	4b52      	ldr	r3, [pc, #328]	@ (8006964 <updatedate+0x278>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	3301      	adds	r3, #1
 8006820:	b2da      	uxtb	r2, r3
 8006822:	4b50      	ldr	r3, [pc, #320]	@ (8006964 <updatedate+0x278>)
 8006824:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006826:	4b50      	ldr	r3, [pc, #320]	@ (8006968 <updatedate+0x27c>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	3301      	adds	r3, #1
 800682c:	b2da      	uxtb	r2, r3
 800682e:	4b4e      	ldr	r3, [pc, #312]	@ (8006968 <updatedate+0x27c>)
 8006830:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006832:	e0b5      	b.n	80069a0 <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 8006834:	4b4a      	ldr	r3, [pc, #296]	@ (8006960 <updatedate+0x274>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b1f      	cmp	r3, #31
 800683a:	f240 80b3 	bls.w	80069a4 <updatedate+0x2b8>
					JOURS=1;
 800683e:	4b48      	ldr	r3, [pc, #288]	@ (8006960 <updatedate+0x274>)
 8006840:	2201      	movs	r2, #1
 8006842:	701a      	strb	r2, [r3, #0]
					mois++;
 8006844:	4b47      	ldr	r3, [pc, #284]	@ (8006964 <updatedate+0x278>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	3301      	adds	r3, #1
 800684a:	b2da      	uxtb	r2, r3
 800684c:	4b45      	ldr	r3, [pc, #276]	@ (8006964 <updatedate+0x278>)
 800684e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006850:	4b45      	ldr	r3, [pc, #276]	@ (8006968 <updatedate+0x27c>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	3301      	adds	r3, #1
 8006856:	b2da      	uxtb	r2, r3
 8006858:	4b43      	ldr	r3, [pc, #268]	@ (8006968 <updatedate+0x27c>)
 800685a:	701a      	strb	r2, [r3, #0]
				}
		break;
 800685c:	e0a2      	b.n	80069a4 <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 800685e:	4b40      	ldr	r3, [pc, #256]	@ (8006960 <updatedate+0x274>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b1e      	cmp	r3, #30
 8006864:	f240 80a0 	bls.w	80069a8 <updatedate+0x2bc>
					JOURS=1;
 8006868:	4b3d      	ldr	r3, [pc, #244]	@ (8006960 <updatedate+0x274>)
 800686a:	2201      	movs	r2, #1
 800686c:	701a      	strb	r2, [r3, #0]
					mois++;
 800686e:	4b3d      	ldr	r3, [pc, #244]	@ (8006964 <updatedate+0x278>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	3301      	adds	r3, #1
 8006874:	b2da      	uxtb	r2, r3
 8006876:	4b3b      	ldr	r3, [pc, #236]	@ (8006964 <updatedate+0x278>)
 8006878:	701a      	strb	r2, [r3, #0]
					MOIS++;
 800687a:	4b3b      	ldr	r3, [pc, #236]	@ (8006968 <updatedate+0x27c>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	3301      	adds	r3, #1
 8006880:	b2da      	uxtb	r2, r3
 8006882:	4b39      	ldr	r3, [pc, #228]	@ (8006968 <updatedate+0x27c>)
 8006884:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006886:	e08f      	b.n	80069a8 <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 8006888:	4b35      	ldr	r3, [pc, #212]	@ (8006960 <updatedate+0x274>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b1f      	cmp	r3, #31
 800688e:	f240 808d 	bls.w	80069ac <updatedate+0x2c0>
					JOURS=1;
 8006892:	4b33      	ldr	r3, [pc, #204]	@ (8006960 <updatedate+0x274>)
 8006894:	2201      	movs	r2, #1
 8006896:	701a      	strb	r2, [r3, #0]
					mois++;
 8006898:	4b32      	ldr	r3, [pc, #200]	@ (8006964 <updatedate+0x278>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	3301      	adds	r3, #1
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	4b30      	ldr	r3, [pc, #192]	@ (8006964 <updatedate+0x278>)
 80068a2:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80068a4:	4b30      	ldr	r3, [pc, #192]	@ (8006968 <updatedate+0x27c>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	3301      	adds	r3, #1
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	4b2e      	ldr	r3, [pc, #184]	@ (8006968 <updatedate+0x27c>)
 80068ae:	701a      	strb	r2, [r3, #0]
				}
		break;
 80068b0:	e07c      	b.n	80069ac <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 80068b2:	4b2b      	ldr	r3, [pc, #172]	@ (8006960 <updatedate+0x274>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2b1f      	cmp	r3, #31
 80068b8:	d97a      	bls.n	80069b0 <updatedate+0x2c4>
					JOURS=1;
 80068ba:	4b29      	ldr	r3, [pc, #164]	@ (8006960 <updatedate+0x274>)
 80068bc:	2201      	movs	r2, #1
 80068be:	701a      	strb	r2, [r3, #0]
					mois++;
 80068c0:	4b28      	ldr	r3, [pc, #160]	@ (8006964 <updatedate+0x278>)
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	3301      	adds	r3, #1
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	4b26      	ldr	r3, [pc, #152]	@ (8006964 <updatedate+0x278>)
 80068ca:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80068cc:	4b26      	ldr	r3, [pc, #152]	@ (8006968 <updatedate+0x27c>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	3301      	adds	r3, #1
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	4b24      	ldr	r3, [pc, #144]	@ (8006968 <updatedate+0x27c>)
 80068d6:	701a      	strb	r2, [r3, #0]
				}
		break;
 80068d8:	e06a      	b.n	80069b0 <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 80068da:	4b21      	ldr	r3, [pc, #132]	@ (8006960 <updatedate+0x274>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b1e      	cmp	r3, #30
 80068e0:	d968      	bls.n	80069b4 <updatedate+0x2c8>
					JOURS=1;
 80068e2:	4b1f      	ldr	r3, [pc, #124]	@ (8006960 <updatedate+0x274>)
 80068e4:	2201      	movs	r2, #1
 80068e6:	701a      	strb	r2, [r3, #0]
					mois++;
 80068e8:	4b1e      	ldr	r3, [pc, #120]	@ (8006964 <updatedate+0x278>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	3301      	adds	r3, #1
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	4b1c      	ldr	r3, [pc, #112]	@ (8006964 <updatedate+0x278>)
 80068f2:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80068f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006968 <updatedate+0x27c>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	3301      	adds	r3, #1
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006968 <updatedate+0x27c>)
 80068fe:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006900:	e058      	b.n	80069b4 <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 8006902:	4b17      	ldr	r3, [pc, #92]	@ (8006960 <updatedate+0x274>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b1f      	cmp	r3, #31
 8006908:	d956      	bls.n	80069b8 <updatedate+0x2cc>
					JOURS=1;
 800690a:	4b15      	ldr	r3, [pc, #84]	@ (8006960 <updatedate+0x274>)
 800690c:	2201      	movs	r2, #1
 800690e:	701a      	strb	r2, [r3, #0]
					mois++;
 8006910:	4b14      	ldr	r3, [pc, #80]	@ (8006964 <updatedate+0x278>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	3301      	adds	r3, #1
 8006916:	b2da      	uxtb	r2, r3
 8006918:	4b12      	ldr	r3, [pc, #72]	@ (8006964 <updatedate+0x278>)
 800691a:	701a      	strb	r2, [r3, #0]
					MOIS++;
 800691c:	4b12      	ldr	r3, [pc, #72]	@ (8006968 <updatedate+0x27c>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	3301      	adds	r3, #1
 8006922:	b2da      	uxtb	r2, r3
 8006924:	4b10      	ldr	r3, [pc, #64]	@ (8006968 <updatedate+0x27c>)
 8006926:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006928:	e046      	b.n	80069b8 <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 800692a:	4b0d      	ldr	r3, [pc, #52]	@ (8006960 <updatedate+0x274>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	2b1e      	cmp	r3, #30
 8006930:	d944      	bls.n	80069bc <updatedate+0x2d0>
					JOURS=1;
 8006932:	4b0b      	ldr	r3, [pc, #44]	@ (8006960 <updatedate+0x274>)
 8006934:	2201      	movs	r2, #1
 8006936:	701a      	strb	r2, [r3, #0]
					mois++;
 8006938:	4b0a      	ldr	r3, [pc, #40]	@ (8006964 <updatedate+0x278>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	3301      	adds	r3, #1
 800693e:	b2da      	uxtb	r2, r3
 8006940:	4b08      	ldr	r3, [pc, #32]	@ (8006964 <updatedate+0x278>)
 8006942:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006944:	4b08      	ldr	r3, [pc, #32]	@ (8006968 <updatedate+0x27c>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	3301      	adds	r3, #1
 800694a:	b2da      	uxtb	r2, r3
 800694c:	4b06      	ldr	r3, [pc, #24]	@ (8006968 <updatedate+0x27c>)
 800694e:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006950:	e034      	b.n	80069bc <updatedate+0x2d0>
 8006952:	bf00      	nop
 8006954:	20000b84 	.word	0x20000b84
 8006958:	20000b86 	.word	0x20000b86
 800695c:	20000b85 	.word	0x20000b85
 8006960:	20000010 	.word	0x20000010
 8006964:	20000b87 	.word	0x20000b87
 8006968:	20000011 	.word	0x20000011
	case DECEMBRE:
		if(JOURS>31){
 800696c:	4b1f      	ldr	r3, [pc, #124]	@ (80069ec <updatedate+0x300>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b1f      	cmp	r3, #31
 8006972:	d925      	bls.n	80069c0 <updatedate+0x2d4>
					JOURS=1;
 8006974:	4b1d      	ldr	r3, [pc, #116]	@ (80069ec <updatedate+0x300>)
 8006976:	2201      	movs	r2, #1
 8006978:	701a      	strb	r2, [r3, #0]
					mois++;
 800697a:	4b1d      	ldr	r3, [pc, #116]	@ (80069f0 <updatedate+0x304>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	3301      	adds	r3, #1
 8006980:	b2da      	uxtb	r2, r3
 8006982:	4b1b      	ldr	r3, [pc, #108]	@ (80069f0 <updatedate+0x304>)
 8006984:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006986:	4b1b      	ldr	r3, [pc, #108]	@ (80069f4 <updatedate+0x308>)
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	3301      	adds	r3, #1
 800698c:	b2da      	uxtb	r2, r3
 800698e:	4b19      	ldr	r3, [pc, #100]	@ (80069f4 <updatedate+0x308>)
 8006990:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006992:	e015      	b.n	80069c0 <updatedate+0x2d4>
		break;
 8006994:	bf00      	nop
 8006996:	e014      	b.n	80069c2 <updatedate+0x2d6>
		break;
 8006998:	bf00      	nop
 800699a:	e012      	b.n	80069c2 <updatedate+0x2d6>
		break;
 800699c:	bf00      	nop
 800699e:	e010      	b.n	80069c2 <updatedate+0x2d6>
		break;
 80069a0:	bf00      	nop
 80069a2:	e00e      	b.n	80069c2 <updatedate+0x2d6>
		break;
 80069a4:	bf00      	nop
 80069a6:	e00c      	b.n	80069c2 <updatedate+0x2d6>
		break;
 80069a8:	bf00      	nop
 80069aa:	e00a      	b.n	80069c2 <updatedate+0x2d6>
		break;
 80069ac:	bf00      	nop
 80069ae:	e008      	b.n	80069c2 <updatedate+0x2d6>
		break;
 80069b0:	bf00      	nop
 80069b2:	e006      	b.n	80069c2 <updatedate+0x2d6>
		break;
 80069b4:	bf00      	nop
 80069b6:	e004      	b.n	80069c2 <updatedate+0x2d6>
		break;
 80069b8:	bf00      	nop
 80069ba:	e002      	b.n	80069c2 <updatedate+0x2d6>
		break;
 80069bc:	bf00      	nop
 80069be:	e000      	b.n	80069c2 <updatedate+0x2d6>
		break;
 80069c0:	bf00      	nop

	}

	if(MOIS>12){
 80069c2:	4b0c      	ldr	r3, [pc, #48]	@ (80069f4 <updatedate+0x308>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	2b0c      	cmp	r3, #12
 80069c8:	d90b      	bls.n	80069e2 <updatedate+0x2f6>
		mois=JANVIER;
 80069ca:	4b09      	ldr	r3, [pc, #36]	@ (80069f0 <updatedate+0x304>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 80069d0:	4b08      	ldr	r3, [pc, #32]	@ (80069f4 <updatedate+0x308>)
 80069d2:	2201      	movs	r2, #1
 80069d4:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 80069d6:	4b08      	ldr	r3, [pc, #32]	@ (80069f8 <updatedate+0x30c>)
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	3301      	adds	r3, #1
 80069dc:	b29a      	uxth	r2, r3
 80069de:	4b06      	ldr	r3, [pc, #24]	@ (80069f8 <updatedate+0x30c>)
 80069e0:	801a      	strh	r2, [r3, #0]
	}
}
 80069e2:	bf00      	nop
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	20000010 	.word	0x20000010
 80069f0:	20000b87 	.word	0x20000b87
 80069f4:	20000011 	.word	0x20000011
 80069f8:	20000012 	.word	0x20000012

080069fc <LL_AHB2_GRP1_EnableClock>:
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a20:	68fb      	ldr	r3, [r7, #12]
}
 8006a22:	bf00      	nop
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <LL_APB1_GRP2_EnableClock>:
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b085      	sub	sp, #20
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8006a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8006a46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a52:	68fb      	ldr	r3, [r7, #12]
}
 8006a54:	bf00      	nop
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <LL_APB1_GRP2_DisableClock>:
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8006a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	43db      	mvns	r3, r3
 8006a72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a76:	4013      	ands	r3, r2
 8006a78:	65cb      	str	r3, [r1, #92]	@ 0x5c
}
 8006a7a:	bf00      	nop
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <LL_APB2_GRP1_EnableClock>:
{
 8006a86:	b480      	push	{r7}
 8006a88:	b085      	sub	sp, #20
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006a94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006a9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aa2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
}
 8006aac:	bf00      	nop
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8006ac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ac4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	43db      	mvns	r3, r3
 8006aca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ace:	4013      	ands	r3, r2
 8006ad0:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
	...

08006ae0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006ae4:	4b22      	ldr	r3, [pc, #136]	@ (8006b70 <MX_LPUART1_UART_Init+0x90>)
 8006ae6:	4a23      	ldr	r2, [pc, #140]	@ (8006b74 <MX_LPUART1_UART_Init+0x94>)
 8006ae8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8006aea:	4b21      	ldr	r3, [pc, #132]	@ (8006b70 <MX_LPUART1_UART_Init+0x90>)
 8006aec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006af0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006af2:	4b1f      	ldr	r3, [pc, #124]	@ (8006b70 <MX_LPUART1_UART_Init+0x90>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006af8:	4b1d      	ldr	r3, [pc, #116]	@ (8006b70 <MX_LPUART1_UART_Init+0x90>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006afe:	4b1c      	ldr	r3, [pc, #112]	@ (8006b70 <MX_LPUART1_UART_Init+0x90>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006b04:	4b1a      	ldr	r3, [pc, #104]	@ (8006b70 <MX_LPUART1_UART_Init+0x90>)
 8006b06:	220c      	movs	r2, #12
 8006b08:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b0a:	4b19      	ldr	r3, [pc, #100]	@ (8006b70 <MX_LPUART1_UART_Init+0x90>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006b10:	4b17      	ldr	r3, [pc, #92]	@ (8006b70 <MX_LPUART1_UART_Init+0x90>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006b16:	4b16      	ldr	r3, [pc, #88]	@ (8006b70 <MX_LPUART1_UART_Init+0x90>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006b1c:	4b14      	ldr	r3, [pc, #80]	@ (8006b70 <MX_LPUART1_UART_Init+0x90>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8006b22:	4b13      	ldr	r3, [pc, #76]	@ (8006b70 <MX_LPUART1_UART_Init+0x90>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006b28:	4811      	ldr	r0, [pc, #68]	@ (8006b70 <MX_LPUART1_UART_Init+0x90>)
 8006b2a:	f008 fc6d 	bl	800f408 <HAL_UART_Init>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8006b34:	f7fc f8d8 	bl	8002ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006b38:	2100      	movs	r1, #0
 8006b3a:	480d      	ldr	r0, [pc, #52]	@ (8006b70 <MX_LPUART1_UART_Init+0x90>)
 8006b3c:	f00a f872 	bl	8010c24 <HAL_UARTEx_SetTxFifoThreshold>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006b46:	f7fc f8cf 	bl	8002ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	4808      	ldr	r0, [pc, #32]	@ (8006b70 <MX_LPUART1_UART_Init+0x90>)
 8006b4e:	f00a f8a7 	bl	8010ca0 <HAL_UARTEx_SetRxFifoThreshold>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006b58:	f7fc f8c6 	bl	8002ce8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8006b5c:	4804      	ldr	r0, [pc, #16]	@ (8006b70 <MX_LPUART1_UART_Init+0x90>)
 8006b5e:	f00a f828 	bl	8010bb2 <HAL_UARTEx_DisableFifoMode>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006b68:	f7fc f8be 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006b6c:	bf00      	nop
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	2000124c 	.word	0x2000124c
 8006b74:	40008000 	.word	0x40008000

08006b78 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006b7c:	4b22      	ldr	r3, [pc, #136]	@ (8006c08 <MX_USART1_UART_Init+0x90>)
 8006b7e:	4a23      	ldr	r2, [pc, #140]	@ (8006c0c <MX_USART1_UART_Init+0x94>)
 8006b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006b82:	4b21      	ldr	r3, [pc, #132]	@ (8006c08 <MX_USART1_UART_Init+0x90>)
 8006b84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8006c08 <MX_USART1_UART_Init+0x90>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006b90:	4b1d      	ldr	r3, [pc, #116]	@ (8006c08 <MX_USART1_UART_Init+0x90>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006b96:	4b1c      	ldr	r3, [pc, #112]	@ (8006c08 <MX_USART1_UART_Init+0x90>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8006c08 <MX_USART1_UART_Init+0x90>)
 8006b9e:	220c      	movs	r2, #12
 8006ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ba2:	4b19      	ldr	r3, [pc, #100]	@ (8006c08 <MX_USART1_UART_Init+0x90>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ba8:	4b17      	ldr	r3, [pc, #92]	@ (8006c08 <MX_USART1_UART_Init+0x90>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006bae:	4b16      	ldr	r3, [pc, #88]	@ (8006c08 <MX_USART1_UART_Init+0x90>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006bb4:	4b14      	ldr	r3, [pc, #80]	@ (8006c08 <MX_USART1_UART_Init+0x90>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006bba:	4b13      	ldr	r3, [pc, #76]	@ (8006c08 <MX_USART1_UART_Init+0x90>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006bc0:	4811      	ldr	r0, [pc, #68]	@ (8006c08 <MX_USART1_UART_Init+0x90>)
 8006bc2:	f008 fc21 	bl	800f408 <HAL_UART_Init>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d001      	beq.n	8006bd0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006bcc:	f7fc f88c 	bl	8002ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	480d      	ldr	r0, [pc, #52]	@ (8006c08 <MX_USART1_UART_Init+0x90>)
 8006bd4:	f00a f826 	bl	8010c24 <HAL_UARTEx_SetTxFifoThreshold>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006bde:	f7fc f883 	bl	8002ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006be2:	2100      	movs	r1, #0
 8006be4:	4808      	ldr	r0, [pc, #32]	@ (8006c08 <MX_USART1_UART_Init+0x90>)
 8006be6:	f00a f85b 	bl	8010ca0 <HAL_UARTEx_SetRxFifoThreshold>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006bf0:	f7fc f87a 	bl	8002ce8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006bf4:	4804      	ldr	r0, [pc, #16]	@ (8006c08 <MX_USART1_UART_Init+0x90>)
 8006bf6:	f009 ffdc 	bl	8010bb2 <HAL_UARTEx_DisableFifoMode>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006c00:	f7fc f872 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006c04:	bf00      	nop
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	200012e0 	.word	0x200012e0
 8006c0c:	40013800 	.word	0x40013800

08006c10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b09c      	sub	sp, #112	@ 0x70
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c18:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	605a      	str	r2, [r3, #4]
 8006c22:	609a      	str	r2, [r3, #8]
 8006c24:	60da      	str	r2, [r3, #12]
 8006c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006c28:	f107 030c 	add.w	r3, r7, #12
 8006c2c:	2250      	movs	r2, #80	@ 0x50
 8006c2e:	2100      	movs	r1, #0
 8006c30:	4618      	mov	r0, r3
 8006c32:	f014 fb6a 	bl	801b30a <memset>
  if(uartHandle->Instance==LPUART1)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a46      	ldr	r2, [pc, #280]	@ (8006d54 <HAL_UART_MspInit+0x144>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d158      	bne.n	8006cf2 <HAL_UART_MspInit+0xe2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006c40:	2302      	movs	r3, #2
 8006c42:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8006c44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c4a:	f107 030c 	add.w	r3, r7, #12
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f006 f873 	bl	800cd3a <HAL_RCCEx_PeriphCLKConfig>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006c5a:	f7fc f845 	bl	8002ce8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006c5e:	2001      	movs	r0, #1
 8006c60:	f7ff fee5 	bl	8006a2e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c64:	2001      	movs	r0, #1
 8006c66:	f7ff fec9 	bl	80069fc <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006c6a:	230c      	movs	r3, #12
 8006c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c6e:	2302      	movs	r3, #2
 8006c70:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c76:	2300      	movs	r3, #0
 8006c78:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c7e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006c82:	4619      	mov	r1, r3
 8006c84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006c88:	f001 ffca 	bl	8008c20 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8006c8c:	4b32      	ldr	r3, [pc, #200]	@ (8006d58 <HAL_UART_MspInit+0x148>)
 8006c8e:	4a33      	ldr	r2, [pc, #204]	@ (8006d5c <HAL_UART_MspInit+0x14c>)
 8006c90:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8006c92:	4b31      	ldr	r3, [pc, #196]	@ (8006d58 <HAL_UART_MspInit+0x148>)
 8006c94:	2210      	movs	r2, #16
 8006c96:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c98:	4b2f      	ldr	r3, [pc, #188]	@ (8006d58 <HAL_UART_MspInit+0x148>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c9e:	4b2e      	ldr	r3, [pc, #184]	@ (8006d58 <HAL_UART_MspInit+0x148>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006ca4:	4b2c      	ldr	r3, [pc, #176]	@ (8006d58 <HAL_UART_MspInit+0x148>)
 8006ca6:	2280      	movs	r2, #128	@ 0x80
 8006ca8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006caa:	4b2b      	ldr	r3, [pc, #172]	@ (8006d58 <HAL_UART_MspInit+0x148>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006cb0:	4b29      	ldr	r3, [pc, #164]	@ (8006d58 <HAL_UART_MspInit+0x148>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8006cb6:	4b28      	ldr	r3, [pc, #160]	@ (8006d58 <HAL_UART_MspInit+0x148>)
 8006cb8:	2220      	movs	r2, #32
 8006cba:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006cbc:	4b26      	ldr	r3, [pc, #152]	@ (8006d58 <HAL_UART_MspInit+0x148>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8006cc2:	4825      	ldr	r0, [pc, #148]	@ (8006d58 <HAL_UART_MspInit+0x148>)
 8006cc4:	f001 fbd8 	bl	8008478 <HAL_DMA_Init>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8006cce:	f7fc f80b 	bl	8002ce8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a20      	ldr	r2, [pc, #128]	@ (8006d58 <HAL_UART_MspInit+0x148>)
 8006cd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006cda:	4a1f      	ldr	r2, [pc, #124]	@ (8006d58 <HAL_UART_MspInit+0x148>)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	2025      	movs	r0, #37	@ 0x25
 8006ce6:	f001 fb68 	bl	80083ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8006cea:	2025      	movs	r0, #37	@ 0x25
 8006cec:	f001 fb7f 	bl	80083ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006cf0:	e02b      	b.n	8006d4a <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART1)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8006d60 <HAL_UART_MspInit+0x150>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d126      	bne.n	8006d4a <HAL_UART_MspInit+0x13a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006d00:	2300      	movs	r3, #0
 8006d02:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d04:	f107 030c 	add.w	r3, r7, #12
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f006 f816 	bl	800cd3a <HAL_RCCEx_PeriphCLKConfig>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <HAL_UART_MspInit+0x108>
      Error_Handler();
 8006d14:	f7fb ffe8 	bl	8002ce8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006d18:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006d1c:	f7ff feb3 	bl	8006a86 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d20:	2001      	movs	r0, #1
 8006d22:	f7ff fe6b 	bl	80069fc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006d26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006d2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d30:	2300      	movs	r3, #0
 8006d32:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d34:	2300      	movs	r3, #0
 8006d36:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006d38:	2307      	movs	r3, #7
 8006d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d3c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006d40:	4619      	mov	r1, r3
 8006d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006d46:	f001 ff6b 	bl	8008c20 <HAL_GPIO_Init>
}
 8006d4a:	bf00      	nop
 8006d4c:	3770      	adds	r7, #112	@ 0x70
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	40008000 	.word	0x40008000
 8006d58:	20001374 	.word	0x20001374
 8006d5c:	4002001c 	.word	0x4002001c
 8006d60:	40013800 	.word	0x40013800

08006d64 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a13      	ldr	r2, [pc, #76]	@ (8006dc0 <HAL_UART_MspDeInit+0x5c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d111      	bne.n	8006d9a <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8006d76:	2001      	movs	r0, #1
 8006d78:	f7ff fe72 	bl	8006a60 <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8006d7c:	210c      	movs	r1, #12
 8006d7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006d82:	f002 f8bd 	bl	8008f00 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f001 fc1b 	bl	80085c8 <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8006d92:	2025      	movs	r0, #37	@ 0x25
 8006d94:	f001 fb39 	bl	800840a <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8006d98:	e00e      	b.n	8006db8 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART1)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a09      	ldr	r2, [pc, #36]	@ (8006dc4 <HAL_UART_MspDeInit+0x60>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d109      	bne.n	8006db8 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART1_CLK_DISABLE();
 8006da4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006da8:	f7ff fe86 	bl	8006ab8 <LL_APB2_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006dac:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006db0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006db4:	f002 f8a4 	bl	8008f00 <HAL_GPIO_DeInit>
}
 8006db8:	bf00      	nop
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40008000 	.word	0x40008000
 8006dc4:	40013800 	.word	0x40013800

08006dc8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8006dd0:	4b30      	ldr	r3, [pc, #192]	@ (8006e94 <HAL_UART_RxCpltCallback+0xcc>)
 8006dd2:	881a      	ldrh	r2, [r3, #0]
 8006dd4:	4b30      	ldr	r3, [pc, #192]	@ (8006e98 <HAL_UART_RxCpltCallback+0xd0>)
 8006dd6:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8006dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8006e98 <HAL_UART_RxCpltCallback+0xd0>)
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8006de0:	d922      	bls.n	8006e28 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 8006de2:	4b2d      	ldr	r3, [pc, #180]	@ (8006e98 <HAL_UART_RxCpltCallback+0xd0>)
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006dea:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8006dec:	4b2a      	ldr	r3, [pc, #168]	@ (8006e98 <HAL_UART_RxCpltCallback+0xd0>)
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	4b2a      	ldr	r3, [pc, #168]	@ (8006e9c <HAL_UART_RxCpltCallback+0xd4>)
 8006df4:	4413      	add	r3, r2
 8006df6:	89fa      	ldrh	r2, [r7, #14]
 8006df8:	4929      	ldr	r1, [pc, #164]	@ (8006ea0 <HAL_UART_RxCpltCallback+0xd8>)
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f014 fba1 	bl	801b542 <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8006e00:	4b25      	ldr	r3, [pc, #148]	@ (8006e98 <HAL_UART_RxCpltCallback+0xd0>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8006e06:	89fb      	ldrh	r3, [r7, #14]
 8006e08:	4a25      	ldr	r2, [pc, #148]	@ (8006ea0 <HAL_UART_RxCpltCallback+0xd8>)
 8006e0a:	1899      	adds	r1, r3, r2
 8006e0c:	89fb      	ldrh	r3, [r7, #14]
 8006e0e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8006e12:	461a      	mov	r2, r3
 8006e14:	4821      	ldr	r0, [pc, #132]	@ (8006e9c <HAL_UART_RxCpltCallback+0xd4>)
 8006e16:	f014 fb94 	bl	801b542 <memcpy>
				newPos = (64-datatocopy);  // update the position
 8006e1a:	89fb      	ldrh	r3, [r7, #14]
 8006e1c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	4b1c      	ldr	r3, [pc, #112]	@ (8006e94 <HAL_UART_RxCpltCallback+0xcc>)
 8006e24:	801a      	strh	r2, [r3, #0]
 8006e26:	e01e      	b.n	8006e66 <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8006e28:	4b1b      	ldr	r3, [pc, #108]	@ (8006e98 <HAL_UART_RxCpltCallback+0xd0>)
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8006e9c <HAL_UART_RxCpltCallback+0xd4>)
 8006e30:	441a      	add	r2, r3
 8006e32:	4b1b      	ldr	r3, [pc, #108]	@ (8006ea0 <HAL_UART_RxCpltCallback+0xd8>)
 8006e34:	4610      	mov	r0, r2
 8006e36:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	f8d1 c000 	ldr.w	ip, [r1]
 8006e42:	684e      	ldr	r6, [r1, #4]
 8006e44:	688d      	ldr	r5, [r1, #8]
 8006e46:	68c9      	ldr	r1, [r1, #12]
 8006e48:	f8c2 c000 	str.w	ip, [r2]
 8006e4c:	6056      	str	r6, [r2, #4]
 8006e4e:	6095      	str	r5, [r2, #8]
 8006e50:	60d1      	str	r1, [r2, #12]
 8006e52:	3310      	adds	r3, #16
 8006e54:	3010      	adds	r0, #16
 8006e56:	42a3      	cmp	r3, r4
 8006e58:	d1ef      	bne.n	8006e3a <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 8006e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e98 <HAL_UART_RxCpltCallback+0xd0>)
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	3340      	adds	r3, #64	@ 0x40
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	4b0c      	ldr	r3, [pc, #48]	@ (8006e94 <HAL_UART_RxCpltCallback+0xcc>)
 8006e64:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 8006e66:	2240      	movs	r2, #64	@ 0x40
 8006e68:	490d      	ldr	r1, [pc, #52]	@ (8006ea0 <HAL_UART_RxCpltCallback+0xd8>)
 8006e6a:	480e      	ldr	r0, [pc, #56]	@ (8006ea4 <HAL_UART_RxCpltCallback+0xdc>)
 8006e6c:	f008 fb5c 	bl	800f528 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8006e70:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea8 <HAL_UART_RxCpltCallback+0xe0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea8 <HAL_UART_RxCpltCallback+0xe0>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0204 	bic.w	r2, r2, #4
 8006e7e:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 8006e80:	2240      	movs	r2, #64	@ 0x40
 8006e82:	4907      	ldr	r1, [pc, #28]	@ (8006ea0 <HAL_UART_RxCpltCallback+0xd8>)
 8006e84:	4807      	ldr	r0, [pc, #28]	@ (8006ea4 <HAL_UART_RxCpltCallback+0xdc>)
 8006e86:	f008 fb4f 	bl	800f528 <HAL_UART_Receive_DMA>
}
 8006e8a:	bf00      	nop
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e92:	bf00      	nop
 8006e94:	200005dc 	.word	0x200005dc
 8006e98:	200005da 	.word	0x200005da
 8006e9c:	20000620 	.word	0x20000620
 8006ea0:	200005e0 	.word	0x200005e0
 8006ea4:	2000124c 	.word	0x2000124c
 8006ea8:	20001374 	.word	0x20001374

08006eac <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8006eac:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006eae:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006eb0:	3304      	adds	r3, #4

08006eb2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006eb2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006eb4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8006eb6:	d3f9      	bcc.n	8006eac <CopyDataInit>
  bx lr
 8006eb8:	4770      	bx	lr

08006eba <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8006eba:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8006ebc:	3004      	adds	r0, #4

08006ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8006ebe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8006ec0:	d3fb      	bcc.n	8006eba <FillZerobss>
  bx lr
 8006ec2:	4770      	bx	lr

08006ec4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006ec4:	480c      	ldr	r0, [pc, #48]	@ (8006ef8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006ec6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006ec8:	f7ff fab6 	bl	8006438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8006ecc:	480b      	ldr	r0, [pc, #44]	@ (8006efc <LoopForever+0x6>)
 8006ece:	490c      	ldr	r1, [pc, #48]	@ (8006f00 <LoopForever+0xa>)
 8006ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8006f04 <LoopForever+0xe>)
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f7ff ffed 	bl	8006eb2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8006ed8:	480b      	ldr	r0, [pc, #44]	@ (8006f08 <LoopForever+0x12>)
 8006eda:	490c      	ldr	r1, [pc, #48]	@ (8006f0c <LoopForever+0x16>)
 8006edc:	4a0c      	ldr	r2, [pc, #48]	@ (8006f10 <LoopForever+0x1a>)
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f7ff ffe7 	bl	8006eb2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8006ee4:	480b      	ldr	r0, [pc, #44]	@ (8006f14 <LoopForever+0x1e>)
 8006ee6:	490c      	ldr	r1, [pc, #48]	@ (8006f18 <LoopForever+0x22>)
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f7ff ffe8 	bl	8006ebe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006eee:	f014 faf9 	bl	801b4e4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006ef2:	f7fb fdab 	bl	8002a4c <main>

08006ef6 <LoopForever>:

LoopForever:
  b LoopForever
 8006ef6:	e7fe      	b.n	8006ef6 <LoopForever>
  ldr   r0, =_estack
 8006ef8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8006efc:	20000008 	.word	0x20000008
 8006f00:	20000320 	.word	0x20000320
 8006f04:	08022048 	.word	0x08022048
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8006f08:	200301e4 	.word	0x200301e4
 8006f0c:	20030a67 	.word	0x20030a67
 8006f10:	080223a6 	.word	0x080223a6
  INIT_BSS _sbss, _ebss
 8006f14:	20000370 	.word	0x20000370
 8006f18:	200030b0 	.word	0x200030b0

08006f1c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006f1c:	e7fe      	b.n	8006f1c <ADC1_IRQHandler>
	...

08006f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f5c <HAL_Init+0x3c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a0b      	ldr	r2, [pc, #44]	@ (8006f5c <HAL_Init+0x3c>)
 8006f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f36:	2003      	movs	r0, #3
 8006f38:	f001 fa34 	bl	80083a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006f3c:	200f      	movs	r0, #15
 8006f3e:	f000 f80f 	bl	8006f60 <HAL_InitTick>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	71fb      	strb	r3, [r7, #7]
 8006f4c:	e001      	b.n	8006f52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006f4e:	f7ff f890 	bl	8006072 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006f52:	79fb      	ldrb	r3, [r7, #7]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	58004000 	.word	0x58004000

08006f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8006f6c:	4b17      	ldr	r3, [pc, #92]	@ (8006fcc <HAL_InitTick+0x6c>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d024      	beq.n	8006fbe <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006f74:	f005 fc50 	bl	800c818 <HAL_RCC_GetHCLKFreq>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	4b14      	ldr	r3, [pc, #80]	@ (8006fcc <HAL_InitTick+0x6c>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006f84:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f001 fa4a 	bl	8008426 <HAL_SYSTICK_Config>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10f      	bne.n	8006fb8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b0f      	cmp	r3, #15
 8006f9c:	d809      	bhi.n	8006fb2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	6879      	ldr	r1, [r7, #4]
 8006fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa6:	f001 fa08 	bl	80083ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006faa:	4a09      	ldr	r2, [pc, #36]	@ (8006fd0 <HAL_InitTick+0x70>)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	e007      	b.n	8006fc2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	73fb      	strb	r3, [r7, #15]
 8006fb6:	e004      	b.n	8006fc2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	73fb      	strb	r3, [r7, #15]
 8006fbc:	e001      	b.n	8006fc2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20000034 	.word	0x20000034
 8006fd0:	20000030 	.word	0x20000030

08006fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006fd8:	4b06      	ldr	r3, [pc, #24]	@ (8006ff4 <HAL_IncTick+0x20>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	4b06      	ldr	r3, [pc, #24]	@ (8006ff8 <HAL_IncTick+0x24>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	4a04      	ldr	r2, [pc, #16]	@ (8006ff8 <HAL_IncTick+0x24>)
 8006fe6:	6013      	str	r3, [r2, #0]
}
 8006fe8:	bf00      	nop
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000034 	.word	0x20000034
 8006ff8:	200013d4 	.word	0x200013d4

08006ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8007000:	4b03      	ldr	r3, [pc, #12]	@ (8007010 <HAL_GetTick+0x14>)
 8007002:	681b      	ldr	r3, [r3, #0]
}
 8007004:	4618      	mov	r0, r3
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	200013d4 	.word	0x200013d4

08007014 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007014:	b480      	push	{r7}
 8007016:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007018:	4b03      	ldr	r3, [pc, #12]	@ (8007028 <HAL_GetTickPrio+0x14>)
 800701a:	681b      	ldr	r3, [r3, #0]
}
 800701c:	4618      	mov	r0, r3
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	20000030 	.word	0x20000030

0800702c <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800702c:	b480      	push	{r7}
 800702e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007030:	4b03      	ldr	r3, [pc, #12]	@ (8007040 <HAL_GetTickFreq+0x14>)
 8007032:	781b      	ldrb	r3, [r3, #0]
}
 8007034:	4618      	mov	r0, r3
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	20000034 	.word	0x20000034

08007044 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	431a      	orrs	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	431a      	orrs	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	609a      	str	r2, [r3, #8]
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	3360      	adds	r3, #96	@ 0x60
 80070be:	461a      	mov	r2, r3
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	4b08      	ldr	r3, [pc, #32]	@ (80070f0 <LL_ADC_SetOffset+0x44>)
 80070ce:	4013      	ands	r3, r2
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	4313      	orrs	r3, r2
 80070dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80070e4:	bf00      	nop
 80070e6:	371c      	adds	r7, #28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	03fff000 	.word	0x03fff000

080070f4 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	3360      	adds	r3, #96	@ 0x60
 8007102:	461a      	mov	r2, r3
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3360      	adds	r3, #96	@ 0x60
 8007130:	461a      	mov	r2, r3
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	431a      	orrs	r2, r3
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800714a:	bf00      	nop
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800716a:	2301      	movs	r3, #1
 800716c:	e000      	b.n	8007170 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800716e:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007170:	4618      	mov	r0, r3
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3330      	adds	r3, #48	@ 0x30
 800718c:	461a      	mov	r2, r3
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	0a1b      	lsrs	r3, r3, #8
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	f003 030c 	and.w	r3, r3, #12
 8007198:	4413      	add	r3, r2
 800719a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f003 031f 	and.w	r3, r3, #31
 80071a6:	211f      	movs	r1, #31
 80071a8:	fa01 f303 	lsl.w	r3, r1, r3
 80071ac:	43db      	mvns	r3, r3
 80071ae:	401a      	ands	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	0e9b      	lsrs	r3, r3, #26
 80071b4:	f003 011f 	and.w	r1, r3, #31
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f003 031f 	and.w	r3, r3, #31
 80071be:	fa01 f303 	lsl.w	r3, r1, r3
 80071c2:	431a      	orrs	r2, r3
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80071c8:	bf00      	nop
 80071ca:	371c      	adds	r7, #28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3314      	adds	r3, #20
 80071e4:	461a      	mov	r2, r3
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	0e5b      	lsrs	r3, r3, #25
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	f003 0304 	and.w	r3, r3, #4
 80071f0:	4413      	add	r3, r2
 80071f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	0d1b      	lsrs	r3, r3, #20
 80071fc:	f003 031f 	and.w	r3, r3, #31
 8007200:	2107      	movs	r1, #7
 8007202:	fa01 f303 	lsl.w	r3, r1, r3
 8007206:	43db      	mvns	r3, r3
 8007208:	401a      	ands	r2, r3
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	0d1b      	lsrs	r3, r3, #20
 800720e:	f003 031f 	and.w	r3, r3, #31
 8007212:	6879      	ldr	r1, [r7, #4]
 8007214:	fa01 f303 	lsl.w	r3, r1, r3
 8007218:	431a      	orrs	r2, r3
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800721e:	bf00      	nop
 8007220:	371c      	adds	r7, #28
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
	...

0800722c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007244:	43db      	mvns	r3, r3
 8007246:	401a      	ands	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f003 0318 	and.w	r3, r3, #24
 800724e:	4908      	ldr	r1, [pc, #32]	@ (8007270 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007250:	40d9      	lsrs	r1, r3
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	400b      	ands	r3, r1
 8007256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800725a:	431a      	orrs	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8007262:	bf00      	nop
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	0007ffff 	.word	0x0007ffff

08007274 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8007284:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6093      	str	r3, [r2, #8]
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072ac:	d101      	bne.n	80072b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e000      	b.n	80072b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80072d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80072d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072fc:	d101      	bne.n	8007302 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80072fe:	2301      	movs	r3, #1
 8007300:	e000      	b.n	8007304 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007320:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007324:	f043 0201 	orr.w	r2, r3, #1
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b01      	cmp	r3, #1
 800734a:	d101      	bne.n	8007350 <LL_ADC_IsEnabled+0x18>
 800734c:	2301      	movs	r3, #1
 800734e:	e000      	b.n	8007352 <LL_ADC_IsEnabled+0x1a>
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800735e:	b480      	push	{r7}
 8007360:	b083      	sub	sp, #12
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800736e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007372:	f043 0204 	orr.w	r2, r3, #4
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800737a:	bf00      	nop
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b04      	cmp	r3, #4
 8007398:	d101      	bne.n	800739e <LL_ADC_REG_IsConversionOngoing+0x18>
 800739a:	2301      	movs	r3, #1
 800739c:	e000      	b.n	80073a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f003 0308 	and.w	r3, r3, #8
 80073bc:	2b08      	cmp	r3, #8
 80073be:	d101      	bne.n	80073c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80073c0:	2301      	movs	r3, #1
 80073c2:	e000      	b.n	80073c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
	...

080073d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80073dc:	2300      	movs	r3, #0
 80073de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80073e0:	2300      	movs	r3, #0
 80073e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80073e4:	2300      	movs	r3, #0
 80073e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e12e      	b.n	8007650 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d109      	bne.n	8007414 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7f9 fe67 	bl	80010d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff ff3d 	bl	8007298 <LL_ADC_IsDeepPowerDownEnabled>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d004      	beq.n	800742e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4618      	mov	r0, r3
 800742a:	f7ff ff23 	bl	8007274 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4618      	mov	r0, r3
 8007434:	f7ff ff58 	bl	80072e8 <LL_ADC_IsInternalRegulatorEnabled>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d115      	bne.n	800746a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4618      	mov	r0, r3
 8007444:	f7ff ff3c 	bl	80072c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007448:	4b83      	ldr	r3, [pc, #524]	@ (8007658 <HAL_ADC_Init+0x284>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	099b      	lsrs	r3, r3, #6
 800744e:	4a83      	ldr	r2, [pc, #524]	@ (800765c <HAL_ADC_Init+0x288>)
 8007450:	fba2 2303 	umull	r2, r3, r2, r3
 8007454:	099b      	lsrs	r3, r3, #6
 8007456:	3301      	adds	r3, #1
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800745c:	e002      	b.n	8007464 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	3b01      	subs	r3, #1
 8007462:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1f9      	bne.n	800745e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff ff3a 	bl	80072e8 <LL_ADC_IsInternalRegulatorEnabled>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10d      	bne.n	8007496 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800747e:	f043 0210 	orr.w	r2, r3, #16
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800748a:	f043 0201 	orr.w	r2, r3, #1
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f7ff ff73 	bl	8007386 <LL_ADC_REG_IsConversionOngoing>
 80074a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a6:	f003 0310 	and.w	r3, r3, #16
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f040 80c7 	bne.w	800763e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f040 80c3 	bne.w	800763e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074bc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80074c0:	f043 0202 	orr.w	r2, r3, #2
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff ff33 	bl	8007338 <LL_ADC_IsEnabled>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10b      	bne.n	80074f0 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80074d8:	4861      	ldr	r0, [pc, #388]	@ (8007660 <HAL_ADC_Init+0x28c>)
 80074da:	f7ff ff2d 	bl	8007338 <LL_ADC_IsEnabled>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d105      	bne.n	80074f0 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	4619      	mov	r1, r3
 80074ea:	485e      	ldr	r0, [pc, #376]	@ (8007664 <HAL_ADC_Init+0x290>)
 80074ec:	f7ff fdaa 	bl	8007044 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	7e5b      	ldrb	r3, [r3, #25]
 80074f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80074fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007500:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007506:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800750e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8007510:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007512:	69ba      	ldr	r2, [r7, #24]
 8007514:	4313      	orrs	r3, r2
 8007516:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d106      	bne.n	8007530 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007526:	3b01      	subs	r3, #1
 8007528:	045b      	lsls	r3, r3, #17
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	4313      	orrs	r3, r2
 800752e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007534:	2b00      	cmp	r3, #0
 8007536:	d009      	beq.n	800754c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007544:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	4313      	orrs	r3, r2
 800754a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	4b45      	ldr	r3, [pc, #276]	@ (8007668 <HAL_ADC_Init+0x294>)
 8007554:	4013      	ands	r3, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6812      	ldr	r2, [r2, #0]
 800755a:	69b9      	ldr	r1, [r7, #24]
 800755c:	430b      	orrs	r3, r1
 800755e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff ff0e 	bl	8007386 <LL_ADC_REG_IsConversionOngoing>
 800756a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff ff1b 	bl	80073ac <LL_ADC_INJ_IsConversionOngoing>
 8007576:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d13d      	bne.n	80075fa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d13a      	bne.n	80075fa <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007588:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007590:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007592:	4313      	orrs	r3, r2
 8007594:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075a0:	f023 0302 	bic.w	r3, r3, #2
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	6812      	ldr	r2, [r2, #0]
 80075a8:	69b9      	ldr	r1, [r7, #24]
 80075aa:	430b      	orrs	r3, r1
 80075ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d118      	bne.n	80075ea <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80075c2:	f023 0304 	bic.w	r3, r3, #4
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80075ce:	4311      	orrs	r1, r2
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80075d4:	4311      	orrs	r1, r2
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80075da:	430a      	orrs	r2, r1
 80075dc:	431a      	orrs	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0201 	orr.w	r2, r2, #1
 80075e6:	611a      	str	r2, [r3, #16]
 80075e8:	e007      	b.n	80075fa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	691a      	ldr	r2, [r3, #16]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0201 	bic.w	r2, r2, #1
 80075f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d10c      	bne.n	800761c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007608:	f023 010f 	bic.w	r1, r3, #15
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	1e5a      	subs	r2, r3, #1
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	631a      	str	r2, [r3, #48]	@ 0x30
 800761a:	e007      	b.n	800762c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 020f 	bic.w	r2, r2, #15
 800762a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007630:	f023 0303 	bic.w	r3, r3, #3
 8007634:	f043 0201 	orr.w	r2, r3, #1
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	655a      	str	r2, [r3, #84]	@ 0x54
 800763c:	e007      	b.n	800764e <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007642:	f043 0210 	orr.w	r2, r3, #16
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800764e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3720      	adds	r7, #32
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	2000002c 	.word	0x2000002c
 800765c:	053e2d63 	.word	0x053e2d63
 8007660:	50040000 	.word	0x50040000
 8007664:	50040300 	.word	0x50040300
 8007668:	fff0c007 	.word	0xfff0c007

0800766c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff fe82 	bl	8007386 <LL_ADC_REG_IsConversionOngoing>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d167      	bne.n	8007758 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800768e:	2b01      	cmp	r3, #1
 8007690:	d101      	bne.n	8007696 <HAL_ADC_Start_DMA+0x2a>
 8007692:	2302      	movs	r3, #2
 8007694:	e063      	b.n	800775e <HAL_ADC_Start_DMA+0xf2>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 fc42 	bl	8007f28 <ADC_Enable>
 80076a4:	4603      	mov	r3, r0
 80076a6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80076a8:	7dfb      	ldrb	r3, [r7, #23]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d14f      	bne.n	800774e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80076b6:	f023 0301 	bic.w	r3, r3, #1
 80076ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d006      	beq.n	80076dc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076d2:	f023 0206 	bic.w	r2, r3, #6
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80076da:	e002      	b.n	80076e2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076e6:	4a20      	ldr	r2, [pc, #128]	@ (8007768 <HAL_ADC_Start_DMA+0xfc>)
 80076e8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ee:	4a1f      	ldr	r2, [pc, #124]	@ (800776c <HAL_ADC_Start_DMA+0x100>)
 80076f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076f6:	4a1e      	ldr	r2, [pc, #120]	@ (8007770 <HAL_ADC_Start_DMA+0x104>)
 80076f8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	221c      	movs	r2, #28
 8007700:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f042 0210 	orr.w	r2, r2, #16
 8007718:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68da      	ldr	r2, [r3, #12]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f042 0201 	orr.w	r2, r2, #1
 8007728:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3340      	adds	r3, #64	@ 0x40
 8007734:	4619      	mov	r1, r3
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f000 ffdb 	bl	80086f4 <HAL_DMA_Start_IT>
 800773e:	4603      	mov	r3, r0
 8007740:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff fe09 	bl	800735e <LL_ADC_REG_StartConversion>
 800774c:	e006      	b.n	800775c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007756:	e001      	b.n	800775c <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007758:	2302      	movs	r3, #2
 800775a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800775c:	7dfb      	ldrb	r3, [r7, #23]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	0800801d 	.word	0x0800801d
 800776c:	080080f5 	.word	0x080080f5
 8007770:	08008111 	.word	0x08008111

08007774 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b0b6      	sub	sp, #216	@ 0xd8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d101      	bne.n	80077be <HAL_ADC_ConfigChannel+0x22>
 80077ba:	2302      	movs	r3, #2
 80077bc:	e39f      	b.n	8007efe <HAL_ADC_ConfigChannel+0x762>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7ff fddb 	bl	8007386 <LL_ADC_REG_IsConversionOngoing>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f040 8384 	bne.w	8007ee0 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6818      	ldr	r0, [r3, #0]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	6859      	ldr	r1, [r3, #4]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	461a      	mov	r2, r3
 80077e6:	f7ff fcc9 	bl	800717c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7ff fdc9 	bl	8007386 <LL_ADC_REG_IsConversionOngoing>
 80077f4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7ff fdd5 	bl	80073ac <LL_ADC_INJ_IsConversionOngoing>
 8007802:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007806:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800780a:	2b00      	cmp	r3, #0
 800780c:	f040 81a6 	bne.w	8007b5c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007810:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007814:	2b00      	cmp	r3, #0
 8007816:	f040 81a1 	bne.w	8007b5c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6818      	ldr	r0, [r3, #0]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	6819      	ldr	r1, [r3, #0]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	461a      	mov	r2, r3
 8007828:	f7ff fcd4 	bl	80071d4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	695a      	ldr	r2, [r3, #20]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	08db      	lsrs	r3, r3, #3
 8007838:	f003 0303 	and.w	r3, r3, #3
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	fa02 f303 	lsl.w	r3, r2, r3
 8007842:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	2b04      	cmp	r3, #4
 800784c:	d00a      	beq.n	8007864 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6818      	ldr	r0, [r3, #0]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	6919      	ldr	r1, [r3, #16]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800785e:	f7ff fc25 	bl	80070ac <LL_ADC_SetOffset>
 8007862:	e17b      	b.n	8007b5c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2100      	movs	r1, #0
 800786a:	4618      	mov	r0, r3
 800786c:	f7ff fc42 	bl	80070f4 <LL_ADC_GetOffsetChannel>
 8007870:	4603      	mov	r3, r0
 8007872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <HAL_ADC_ConfigChannel+0xf4>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2100      	movs	r1, #0
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff fc37 	bl	80070f4 <LL_ADC_GetOffsetChannel>
 8007886:	4603      	mov	r3, r0
 8007888:	0e9b      	lsrs	r3, r3, #26
 800788a:	f003 021f 	and.w	r2, r3, #31
 800788e:	e01e      	b.n	80078ce <HAL_ADC_ConfigChannel+0x132>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2100      	movs	r1, #0
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff fc2c 	bl	80070f4 <LL_ADC_GetOffsetChannel>
 800789c:	4603      	mov	r3, r0
 800789e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80078a6:	fa93 f3a3 	rbit	r3, r3
 80078aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 80078ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 80078b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 80078be:	2320      	movs	r3, #32
 80078c0:	e004      	b.n	80078cc <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 80078c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80078c6:	fab3 f383 	clz	r3, r3
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	461a      	mov	r2, r3
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d105      	bne.n	80078e6 <HAL_ADC_ConfigChannel+0x14a>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	0e9b      	lsrs	r3, r3, #26
 80078e0:	f003 031f 	and.w	r3, r3, #31
 80078e4:	e018      	b.n	8007918 <HAL_ADC_ConfigChannel+0x17c>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80078f2:	fa93 f3a3 	rbit	r3, r3
 80078f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80078fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8007902:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800790a:	2320      	movs	r3, #32
 800790c:	e004      	b.n	8007918 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800790e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007912:	fab3 f383 	clz	r3, r3
 8007916:	b2db      	uxtb	r3, r3
 8007918:	429a      	cmp	r2, r3
 800791a:	d106      	bne.n	800792a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2200      	movs	r2, #0
 8007922:	2100      	movs	r1, #0
 8007924:	4618      	mov	r0, r3
 8007926:	f7ff fbfb 	bl	8007120 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2101      	movs	r1, #1
 8007930:	4618      	mov	r0, r3
 8007932:	f7ff fbdf 	bl	80070f4 <LL_ADC_GetOffsetChannel>
 8007936:	4603      	mov	r3, r0
 8007938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10a      	bne.n	8007956 <HAL_ADC_ConfigChannel+0x1ba>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2101      	movs	r1, #1
 8007946:	4618      	mov	r0, r3
 8007948:	f7ff fbd4 	bl	80070f4 <LL_ADC_GetOffsetChannel>
 800794c:	4603      	mov	r3, r0
 800794e:	0e9b      	lsrs	r3, r3, #26
 8007950:	f003 021f 	and.w	r2, r3, #31
 8007954:	e01e      	b.n	8007994 <HAL_ADC_ConfigChannel+0x1f8>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2101      	movs	r1, #1
 800795c:	4618      	mov	r0, r3
 800795e:	f7ff fbc9 	bl	80070f4 <LL_ADC_GetOffsetChannel>
 8007962:	4603      	mov	r3, r0
 8007964:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007968:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800796c:	fa93 f3a3 	rbit	r3, r3
 8007970:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007974:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007978:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800797c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8007984:	2320      	movs	r3, #32
 8007986:	e004      	b.n	8007992 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8007988:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800798c:	fab3 f383 	clz	r3, r3
 8007990:	b2db      	uxtb	r3, r3
 8007992:	461a      	mov	r2, r3
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800799c:	2b00      	cmp	r3, #0
 800799e:	d105      	bne.n	80079ac <HAL_ADC_ConfigChannel+0x210>
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	0e9b      	lsrs	r3, r3, #26
 80079a6:	f003 031f 	and.w	r3, r3, #31
 80079aa:	e018      	b.n	80079de <HAL_ADC_ConfigChannel+0x242>
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079b8:	fa93 f3a3 	rbit	r3, r3
 80079bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80079c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80079c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80079c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80079d0:	2320      	movs	r3, #32
 80079d2:	e004      	b.n	80079de <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80079d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079d8:	fab3 f383 	clz	r3, r3
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	429a      	cmp	r2, r3
 80079e0:	d106      	bne.n	80079f0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2200      	movs	r2, #0
 80079e8:	2101      	movs	r1, #1
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7ff fb98 	bl	8007120 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2102      	movs	r1, #2
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7ff fb7c 	bl	80070f4 <LL_ADC_GetOffsetChannel>
 80079fc:	4603      	mov	r3, r0
 80079fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10a      	bne.n	8007a1c <HAL_ADC_ConfigChannel+0x280>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2102      	movs	r1, #2
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff fb71 	bl	80070f4 <LL_ADC_GetOffsetChannel>
 8007a12:	4603      	mov	r3, r0
 8007a14:	0e9b      	lsrs	r3, r3, #26
 8007a16:	f003 021f 	and.w	r2, r3, #31
 8007a1a:	e01e      	b.n	8007a5a <HAL_ADC_ConfigChannel+0x2be>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2102      	movs	r1, #2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7ff fb66 	bl	80070f4 <LL_ADC_GetOffsetChannel>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a32:	fa93 f3a3 	rbit	r3, r3
 8007a36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007a3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8007a4a:	2320      	movs	r3, #32
 8007a4c:	e004      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8007a4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a52:	fab3 f383 	clz	r3, r3
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	461a      	mov	r2, r3
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d105      	bne.n	8007a72 <HAL_ADC_ConfigChannel+0x2d6>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	0e9b      	lsrs	r3, r3, #26
 8007a6c:	f003 031f 	and.w	r3, r3, #31
 8007a70:	e016      	b.n	8007aa0 <HAL_ADC_ConfigChannel+0x304>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a7e:	fa93 f3a3 	rbit	r3, r3
 8007a82:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007a84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007a8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8007a92:	2320      	movs	r3, #32
 8007a94:	e004      	b.n	8007aa0 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8007a96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a9a:	fab3 f383 	clz	r3, r3
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d106      	bne.n	8007ab2 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2102      	movs	r1, #2
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7ff fb37 	bl	8007120 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2103      	movs	r1, #3
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7ff fb1b 	bl	80070f4 <LL_ADC_GetOffsetChannel>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10a      	bne.n	8007ade <HAL_ADC_ConfigChannel+0x342>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2103      	movs	r1, #3
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff fb10 	bl	80070f4 <LL_ADC_GetOffsetChannel>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	0e9b      	lsrs	r3, r3, #26
 8007ad8:	f003 021f 	and.w	r2, r3, #31
 8007adc:	e017      	b.n	8007b0e <HAL_ADC_ConfigChannel+0x372>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2103      	movs	r1, #3
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff fb05 	bl	80070f4 <LL_ADC_GetOffsetChannel>
 8007aea:	4603      	mov	r3, r0
 8007aec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007af0:	fa93 f3a3 	rbit	r3, r3
 8007af4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8007af6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007af8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8007afa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8007b00:	2320      	movs	r3, #32
 8007b02:	e003      	b.n	8007b0c <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8007b04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b06:	fab3 f383 	clz	r3, r3
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d105      	bne.n	8007b26 <HAL_ADC_ConfigChannel+0x38a>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	0e9b      	lsrs	r3, r3, #26
 8007b20:	f003 031f 	and.w	r3, r3, #31
 8007b24:	e011      	b.n	8007b4a <HAL_ADC_ConfigChannel+0x3ae>
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b2e:	fa93 f3a3 	rbit	r3, r3
 8007b32:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8007b34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007b38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8007b3e:	2320      	movs	r3, #32
 8007b40:	e003      	b.n	8007b4a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8007b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b44:	fab3 f383 	clz	r3, r3
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d106      	bne.n	8007b5c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2200      	movs	r2, #0
 8007b54:	2103      	movs	r1, #3
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff fae2 	bl	8007120 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff fbe9 	bl	8007338 <LL_ADC_IsEnabled>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f040 81c2 	bne.w	8007ef2 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6818      	ldr	r0, [r3, #0]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	6819      	ldr	r1, [r3, #0]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f7ff fb56 	bl	800722c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	4a8e      	ldr	r2, [pc, #568]	@ (8007dc0 <HAL_ADC_ConfigChannel+0x624>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	f040 8130 	bne.w	8007dec <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10b      	bne.n	8007bb4 <HAL_ADC_ConfigChannel+0x418>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	0e9b      	lsrs	r3, r3, #26
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	f003 031f 	and.w	r3, r3, #31
 8007ba8:	2b09      	cmp	r3, #9
 8007baa:	bf94      	ite	ls
 8007bac:	2301      	movls	r3, #1
 8007bae:	2300      	movhi	r3, #0
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	e019      	b.n	8007be8 <HAL_ADC_ConfigChannel+0x44c>
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bbc:	fa93 f3a3 	rbit	r3, r3
 8007bc0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007bc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007bc4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8007bc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8007bcc:	2320      	movs	r3, #32
 8007bce:	e003      	b.n	8007bd8 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8007bd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bd2:	fab3 f383 	clz	r3, r3
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	3301      	adds	r3, #1
 8007bda:	f003 031f 	and.w	r3, r3, #31
 8007bde:	2b09      	cmp	r3, #9
 8007be0:	bf94      	ite	ls
 8007be2:	2301      	movls	r3, #1
 8007be4:	2300      	movhi	r3, #0
 8007be6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d079      	beq.n	8007ce0 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d107      	bne.n	8007c08 <HAL_ADC_ConfigChannel+0x46c>
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	0e9b      	lsrs	r3, r3, #26
 8007bfe:	3301      	adds	r3, #1
 8007c00:	069b      	lsls	r3, r3, #26
 8007c02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007c06:	e015      	b.n	8007c34 <HAL_ADC_ConfigChannel+0x498>
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c10:	fa93 f3a3 	rbit	r3, r3
 8007c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007c16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c18:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8007c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8007c20:	2320      	movs	r3, #32
 8007c22:	e003      	b.n	8007c2c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8007c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c26:	fab3 f383 	clz	r3, r3
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	069b      	lsls	r3, r3, #26
 8007c30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d109      	bne.n	8007c54 <HAL_ADC_ConfigChannel+0x4b8>
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	0e9b      	lsrs	r3, r3, #26
 8007c46:	3301      	adds	r3, #1
 8007c48:	f003 031f 	and.w	r3, r3, #31
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c52:	e017      	b.n	8007c84 <HAL_ADC_ConfigChannel+0x4e8>
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c5c:	fa93 f3a3 	rbit	r3, r3
 8007c60:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c64:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8007c66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8007c6c:	2320      	movs	r3, #32
 8007c6e:	e003      	b.n	8007c78 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8007c70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c72:	fab3 f383 	clz	r3, r3
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	3301      	adds	r3, #1
 8007c7a:	f003 031f 	and.w	r3, r3, #31
 8007c7e:	2101      	movs	r1, #1
 8007c80:	fa01 f303 	lsl.w	r3, r1, r3
 8007c84:	ea42 0103 	orr.w	r1, r2, r3
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10a      	bne.n	8007caa <HAL_ADC_ConfigChannel+0x50e>
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	0e9b      	lsrs	r3, r3, #26
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	f003 021f 	and.w	r2, r3, #31
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	005b      	lsls	r3, r3, #1
 8007ca4:	4413      	add	r3, r2
 8007ca6:	051b      	lsls	r3, r3, #20
 8007ca8:	e018      	b.n	8007cdc <HAL_ADC_ConfigChannel+0x540>
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb2:	fa93 f3a3 	rbit	r3, r3
 8007cb6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8007cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8007cc2:	2320      	movs	r3, #32
 8007cc4:	e003      	b.n	8007cce <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8007cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc8:	fab3 f383 	clz	r3, r3
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	3301      	adds	r3, #1
 8007cd0:	f003 021f 	and.w	r2, r3, #31
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	4413      	add	r3, r2
 8007cda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007cdc:	430b      	orrs	r3, r1
 8007cde:	e080      	b.n	8007de2 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d107      	bne.n	8007cfc <HAL_ADC_ConfigChannel+0x560>
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	0e9b      	lsrs	r3, r3, #26
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	069b      	lsls	r3, r3, #26
 8007cf6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007cfa:	e015      	b.n	8007d28 <HAL_ADC_ConfigChannel+0x58c>
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d04:	fa93 f3a3 	rbit	r3, r3
 8007d08:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8007d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8007d14:	2320      	movs	r3, #32
 8007d16:	e003      	b.n	8007d20 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8007d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1a:	fab3 f383 	clz	r3, r3
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	3301      	adds	r3, #1
 8007d22:	069b      	lsls	r3, r3, #26
 8007d24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d109      	bne.n	8007d48 <HAL_ADC_ConfigChannel+0x5ac>
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	0e9b      	lsrs	r3, r3, #26
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	f003 031f 	and.w	r3, r3, #31
 8007d40:	2101      	movs	r1, #1
 8007d42:	fa01 f303 	lsl.w	r3, r1, r3
 8007d46:	e017      	b.n	8007d78 <HAL_ADC_ConfigChannel+0x5dc>
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	fa93 f3a3 	rbit	r3, r3
 8007d54:	61fb      	str	r3, [r7, #28]
  return result;
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8007d60:	2320      	movs	r3, #32
 8007d62:	e003      	b.n	8007d6c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8007d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d66:	fab3 f383 	clz	r3, r3
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	f003 031f 	and.w	r3, r3, #31
 8007d72:	2101      	movs	r1, #1
 8007d74:	fa01 f303 	lsl.w	r3, r1, r3
 8007d78:	ea42 0103 	orr.w	r1, r2, r3
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10d      	bne.n	8007da4 <HAL_ADC_ConfigChannel+0x608>
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	0e9b      	lsrs	r3, r3, #26
 8007d8e:	3301      	adds	r3, #1
 8007d90:	f003 021f 	and.w	r2, r3, #31
 8007d94:	4613      	mov	r3, r2
 8007d96:	005b      	lsls	r3, r3, #1
 8007d98:	4413      	add	r3, r2
 8007d9a:	3b1e      	subs	r3, #30
 8007d9c:	051b      	lsls	r3, r3, #20
 8007d9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007da2:	e01d      	b.n	8007de0 <HAL_ADC_ConfigChannel+0x644>
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	fa93 f3a3 	rbit	r3, r3
 8007db0:	613b      	str	r3, [r7, #16]
  return result;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d103      	bne.n	8007dc4 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8007dbc:	2320      	movs	r3, #32
 8007dbe:	e005      	b.n	8007dcc <HAL_ADC_ConfigChannel+0x630>
 8007dc0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	fab3 f383 	clz	r3, r3
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	3301      	adds	r3, #1
 8007dce:	f003 021f 	and.w	r2, r3, #31
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	4413      	add	r3, r2
 8007dd8:	3b1e      	subs	r3, #30
 8007dda:	051b      	lsls	r3, r3, #20
 8007ddc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007de0:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007de6:	4619      	mov	r1, r3
 8007de8:	f7ff f9f4 	bl	80071d4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	4b45      	ldr	r3, [pc, #276]	@ (8007f08 <HAL_ADC_ConfigChannel+0x76c>)
 8007df2:	4013      	ands	r3, r2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d07c      	beq.n	8007ef2 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007df8:	4844      	ldr	r0, [pc, #272]	@ (8007f0c <HAL_ADC_ConfigChannel+0x770>)
 8007dfa:	f7ff f949 	bl	8007090 <LL_ADC_GetCommonPathInternalCh>
 8007dfe:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007e02:	4843      	ldr	r0, [pc, #268]	@ (8007f10 <HAL_ADC_ConfigChannel+0x774>)
 8007e04:	f7ff fa98 	bl	8007338 <LL_ADC_IsEnabled>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d15e      	bne.n	8007ecc <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a40      	ldr	r2, [pc, #256]	@ (8007f14 <HAL_ADC_ConfigChannel+0x778>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d127      	bne.n	8007e68 <HAL_ADC_ConfigChannel+0x6cc>
 8007e18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d121      	bne.n	8007e68 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a39      	ldr	r2, [pc, #228]	@ (8007f10 <HAL_ADC_ConfigChannel+0x774>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d161      	bne.n	8007ef2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8007e2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007e36:	4619      	mov	r1, r3
 8007e38:	4834      	ldr	r0, [pc, #208]	@ (8007f0c <HAL_ADC_ConfigChannel+0x770>)
 8007e3a:	f7ff f916 	bl	800706a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007e3e:	4b36      	ldr	r3, [pc, #216]	@ (8007f18 <HAL_ADC_ConfigChannel+0x77c>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	099b      	lsrs	r3, r3, #6
 8007e44:	4a35      	ldr	r2, [pc, #212]	@ (8007f1c <HAL_ADC_ConfigChannel+0x780>)
 8007e46:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4a:	099b      	lsrs	r3, r3, #6
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	4613      	mov	r3, r2
 8007e50:	005b      	lsls	r3, r3, #1
 8007e52:	4413      	add	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8007e58:	e002      	b.n	8007e60 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1f9      	bne.n	8007e5a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007e66:	e044      	b.n	8007ef2 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8007f20 <HAL_ADC_ConfigChannel+0x784>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d113      	bne.n	8007e9a <HAL_ADC_ConfigChannel+0x6fe>
 8007e72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10d      	bne.n	8007e9a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a23      	ldr	r2, [pc, #140]	@ (8007f10 <HAL_ADC_ConfigChannel+0x774>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d134      	bne.n	8007ef2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8007e88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e90:	4619      	mov	r1, r3
 8007e92:	481e      	ldr	r0, [pc, #120]	@ (8007f0c <HAL_ADC_ConfigChannel+0x770>)
 8007e94:	f7ff f8e9 	bl	800706a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007e98:	e02b      	b.n	8007ef2 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a21      	ldr	r2, [pc, #132]	@ (8007f24 <HAL_ADC_ConfigChannel+0x788>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d126      	bne.n	8007ef2 <HAL_ADC_ConfigChannel+0x756>
 8007ea4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007ea8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d120      	bne.n	8007ef2 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a16      	ldr	r2, [pc, #88]	@ (8007f10 <HAL_ADC_ConfigChannel+0x774>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d11b      	bne.n	8007ef2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8007eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007ebe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4811      	ldr	r0, [pc, #68]	@ (8007f0c <HAL_ADC_ConfigChannel+0x770>)
 8007ec6:	f7ff f8d0 	bl	800706a <LL_ADC_SetCommonPathInternalCh>
 8007eca:	e012      	b.n	8007ef2 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ed0:	f043 0220 	orr.w	r2, r3, #32
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8007ede:	e008      	b.n	8007ef2 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ee4:	f043 0220 	orr.w	r2, r3, #32
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8007efa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	37d8      	adds	r7, #216	@ 0xd8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	80080000 	.word	0x80080000
 8007f0c:	50040300 	.word	0x50040300
 8007f10:	50040000 	.word	0x50040000
 8007f14:	c7520000 	.word	0xc7520000
 8007f18:	2000002c 	.word	0x2000002c
 8007f1c:	053e2d63 	.word	0x053e2d63
 8007f20:	cb840000 	.word	0xcb840000
 8007f24:	80000001 	.word	0x80000001

08007f28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7ff f9fd 	bl	8007338 <LL_ADC_IsEnabled>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d15e      	bne.n	8008002 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689a      	ldr	r2, [r3, #8]
 8007f4a:	4b30      	ldr	r3, [pc, #192]	@ (800800c <ADC_Enable+0xe4>)
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00d      	beq.n	8007f6e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f56:	f043 0210 	orr.w	r2, r3, #16
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f62:	f043 0201 	orr.w	r2, r3, #1
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e04a      	b.n	8008004 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7ff f9cc 	bl	8007310 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007f78:	4825      	ldr	r0, [pc, #148]	@ (8008010 <ADC_Enable+0xe8>)
 8007f7a:	f7ff f889 	bl	8007090 <LL_ADC_GetCommonPathInternalCh>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00f      	beq.n	8007fa8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007f88:	4b22      	ldr	r3, [pc, #136]	@ (8008014 <ADC_Enable+0xec>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	099b      	lsrs	r3, r3, #6
 8007f8e:	4a22      	ldr	r2, [pc, #136]	@ (8008018 <ADC_Enable+0xf0>)
 8007f90:	fba2 2303 	umull	r2, r3, r2, r3
 8007f94:	099b      	lsrs	r3, r3, #6
 8007f96:	3301      	adds	r3, #1
 8007f98:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007f9a:	e002      	b.n	8007fa2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1f9      	bne.n	8007f9c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8007fa8:	f7ff f828 	bl	8006ffc <HAL_GetTick>
 8007fac:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007fae:	e021      	b.n	8007ff4 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff f9bf 	bl	8007338 <LL_ADC_IsEnabled>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d104      	bne.n	8007fca <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7ff f9a3 	bl	8007310 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007fca:	f7ff f817 	bl	8006ffc <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d90d      	bls.n	8007ff4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fdc:	f043 0210 	orr.w	r2, r3, #16
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fe8:	f043 0201 	orr.w	r2, r3, #1
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e007      	b.n	8008004 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0301 	and.w	r3, r3, #1
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d1d6      	bne.n	8007fb0 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	8000003f 	.word	0x8000003f
 8008010:	50040300 	.word	0x50040300
 8008014:	2000002c 	.word	0x2000002c
 8008018:	053e2d63 	.word	0x053e2d63

0800801c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008028:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800802e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008032:	2b00      	cmp	r3, #0
 8008034:	d14b      	bne.n	80080ce <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800803a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0308 	and.w	r3, r3, #8
 800804c:	2b00      	cmp	r3, #0
 800804e:	d021      	beq.n	8008094 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4618      	mov	r0, r3
 8008056:	f7ff f87e 	bl	8007156 <LL_ADC_REG_IsTriggerSourceSWStart>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d032      	beq.n	80080c6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d12b      	bne.n	80080c6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008072:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800807e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d11f      	bne.n	80080c6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800808a:	f043 0201 	orr.w	r2, r3, #1
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	655a      	str	r2, [r3, #84]	@ 0x54
 8008092:	e018      	b.n	80080c6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d111      	bne.n	80080c6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d105      	bne.n	80080c6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080be:	f043 0201 	orr.w	r2, r3, #1
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f7f9 f85e 	bl	8001188 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80080cc:	e00e      	b.n	80080ec <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080d2:	f003 0310 	and.w	r3, r3, #16
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f7ff fb54 	bl	8007788 <HAL_ADC_ErrorCallback>
}
 80080e0:	e004      	b.n	80080ec <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	4798      	blx	r3
}
 80080ec:	bf00      	nop
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008100:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f7ff fb36 	bl	8007774 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008108:	bf00      	nop
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008122:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800812e:	f043 0204 	orr.w	r2, r3, #4
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f7ff fb26 	bl	8007788 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800813c:	bf00      	nop
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f003 0307 	and.w	r3, r3, #7
 8008152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008154:	4b0c      	ldr	r3, [pc, #48]	@ (8008188 <__NVIC_SetPriorityGrouping+0x44>)
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008160:	4013      	ands	r3, r2
 8008162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800816c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008176:	4a04      	ldr	r2, [pc, #16]	@ (8008188 <__NVIC_SetPriorityGrouping+0x44>)
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	60d3      	str	r3, [r2, #12]
}
 800817c:	bf00      	nop
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	e000ed00 	.word	0xe000ed00

0800818c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008190:	4b04      	ldr	r3, [pc, #16]	@ (80081a4 <__NVIC_GetPriorityGrouping+0x18>)
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	0a1b      	lsrs	r3, r3, #8
 8008196:	f003 0307 	and.w	r3, r3, #7
}
 800819a:	4618      	mov	r0, r3
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	e000ed00 	.word	0xe000ed00

080081a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	4603      	mov	r3, r0
 80081b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	db0b      	blt.n	80081d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80081ba:	79fb      	ldrb	r3, [r7, #7]
 80081bc:	f003 021f 	and.w	r2, r3, #31
 80081c0:	4907      	ldr	r1, [pc, #28]	@ (80081e0 <__NVIC_EnableIRQ+0x38>)
 80081c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081c6:	095b      	lsrs	r3, r3, #5
 80081c8:	2001      	movs	r0, #1
 80081ca:	fa00 f202 	lsl.w	r2, r0, r2
 80081ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80081d2:	bf00      	nop
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	e000e100 	.word	0xe000e100

080081e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	4603      	mov	r3, r0
 80081ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	db12      	blt.n	800821c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80081f6:	79fb      	ldrb	r3, [r7, #7]
 80081f8:	f003 021f 	and.w	r2, r3, #31
 80081fc:	490a      	ldr	r1, [pc, #40]	@ (8008228 <__NVIC_DisableIRQ+0x44>)
 80081fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008202:	095b      	lsrs	r3, r3, #5
 8008204:	2001      	movs	r0, #1
 8008206:	fa00 f202 	lsl.w	r2, r0, r2
 800820a:	3320      	adds	r3, #32
 800820c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008210:	f3bf 8f4f 	dsb	sy
}
 8008214:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008216:	f3bf 8f6f 	isb	sy
}
 800821a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	e000e100 	.word	0xe000e100

0800822c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	4603      	mov	r3, r0
 8008234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800823a:	2b00      	cmp	r3, #0
 800823c:	db0c      	blt.n	8008258 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	f003 021f 	and.w	r2, r3, #31
 8008244:	4907      	ldr	r1, [pc, #28]	@ (8008264 <__NVIC_SetPendingIRQ+0x38>)
 8008246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800824a:	095b      	lsrs	r3, r3, #5
 800824c:	2001      	movs	r0, #1
 800824e:	fa00 f202 	lsl.w	r2, r0, r2
 8008252:	3340      	adds	r3, #64	@ 0x40
 8008254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	e000e100 	.word	0xe000e100

08008268 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	4603      	mov	r3, r0
 8008270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008276:	2b00      	cmp	r3, #0
 8008278:	db0c      	blt.n	8008294 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800827a:	79fb      	ldrb	r3, [r7, #7]
 800827c:	f003 021f 	and.w	r2, r3, #31
 8008280:	4907      	ldr	r1, [pc, #28]	@ (80082a0 <__NVIC_ClearPendingIRQ+0x38>)
 8008282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008286:	095b      	lsrs	r3, r3, #5
 8008288:	2001      	movs	r0, #1
 800828a:	fa00 f202 	lsl.w	r2, r0, r2
 800828e:	3360      	adds	r3, #96	@ 0x60
 8008290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	e000e100 	.word	0xe000e100

080082a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	4603      	mov	r3, r0
 80082ac:	6039      	str	r1, [r7, #0]
 80082ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	db0a      	blt.n	80082ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	490c      	ldr	r1, [pc, #48]	@ (80082f0 <__NVIC_SetPriority+0x4c>)
 80082be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082c2:	0112      	lsls	r2, r2, #4
 80082c4:	b2d2      	uxtb	r2, r2
 80082c6:	440b      	add	r3, r1
 80082c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80082cc:	e00a      	b.n	80082e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	4908      	ldr	r1, [pc, #32]	@ (80082f4 <__NVIC_SetPriority+0x50>)
 80082d4:	79fb      	ldrb	r3, [r7, #7]
 80082d6:	f003 030f 	and.w	r3, r3, #15
 80082da:	3b04      	subs	r3, #4
 80082dc:	0112      	lsls	r2, r2, #4
 80082de:	b2d2      	uxtb	r2, r2
 80082e0:	440b      	add	r3, r1
 80082e2:	761a      	strb	r2, [r3, #24]
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	e000e100 	.word	0xe000e100
 80082f4:	e000ed00 	.word	0xe000ed00

080082f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b089      	sub	sp, #36	@ 0x24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f003 0307 	and.w	r3, r3, #7
 800830a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	f1c3 0307 	rsb	r3, r3, #7
 8008312:	2b04      	cmp	r3, #4
 8008314:	bf28      	it	cs
 8008316:	2304      	movcs	r3, #4
 8008318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	3304      	adds	r3, #4
 800831e:	2b06      	cmp	r3, #6
 8008320:	d902      	bls.n	8008328 <NVIC_EncodePriority+0x30>
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	3b03      	subs	r3, #3
 8008326:	e000      	b.n	800832a <NVIC_EncodePriority+0x32>
 8008328:	2300      	movs	r3, #0
 800832a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800832c:	f04f 32ff 	mov.w	r2, #4294967295
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	fa02 f303 	lsl.w	r3, r2, r3
 8008336:	43da      	mvns	r2, r3
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	401a      	ands	r2, r3
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008340:	f04f 31ff 	mov.w	r1, #4294967295
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	fa01 f303 	lsl.w	r3, r1, r3
 800834a:	43d9      	mvns	r1, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008350:	4313      	orrs	r3, r2
         );
}
 8008352:	4618      	mov	r0, r3
 8008354:	3724      	adds	r7, #36	@ 0x24
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
	...

08008360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3b01      	subs	r3, #1
 800836c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008370:	d301      	bcc.n	8008376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008372:	2301      	movs	r3, #1
 8008374:	e00f      	b.n	8008396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008376:	4a0a      	ldr	r2, [pc, #40]	@ (80083a0 <SysTick_Config+0x40>)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3b01      	subs	r3, #1
 800837c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800837e:	210f      	movs	r1, #15
 8008380:	f04f 30ff 	mov.w	r0, #4294967295
 8008384:	f7ff ff8e 	bl	80082a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008388:	4b05      	ldr	r3, [pc, #20]	@ (80083a0 <SysTick_Config+0x40>)
 800838a:	2200      	movs	r2, #0
 800838c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800838e:	4b04      	ldr	r3, [pc, #16]	@ (80083a0 <SysTick_Config+0x40>)
 8008390:	2207      	movs	r2, #7
 8008392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	e000e010 	.word	0xe000e010

080083a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7ff fec9 	bl	8008144 <__NVIC_SetPriorityGrouping>
}
 80083b2:	bf00      	nop
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b086      	sub	sp, #24
 80083be:	af00      	add	r7, sp, #0
 80083c0:	4603      	mov	r3, r0
 80083c2:	60b9      	str	r1, [r7, #8]
 80083c4:	607a      	str	r2, [r7, #4]
 80083c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80083c8:	f7ff fee0 	bl	800818c <__NVIC_GetPriorityGrouping>
 80083cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	68b9      	ldr	r1, [r7, #8]
 80083d2:	6978      	ldr	r0, [r7, #20]
 80083d4:	f7ff ff90 	bl	80082f8 <NVIC_EncodePriority>
 80083d8:	4602      	mov	r2, r0
 80083da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083de:	4611      	mov	r1, r2
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7ff ff5f 	bl	80082a4 <__NVIC_SetPriority>
}
 80083e6:	bf00      	nop
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b082      	sub	sp, #8
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	4603      	mov	r3, r0
 80083f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80083f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7ff fed3 	bl	80081a8 <__NVIC_EnableIRQ>
}
 8008402:	bf00      	nop
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b082      	sub	sp, #8
 800840e:	af00      	add	r7, sp, #0
 8008410:	4603      	mov	r3, r0
 8008412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008418:	4618      	mov	r0, r3
 800841a:	f7ff fee3 	bl	80081e4 <__NVIC_DisableIRQ>
}
 800841e:	bf00      	nop
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b082      	sub	sp, #8
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f7ff ff96 	bl	8008360 <SysTick_Config>
 8008434:	4603      	mov	r3, r0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b082      	sub	sp, #8
 8008442:	af00      	add	r7, sp, #0
 8008444:	4603      	mov	r3, r0
 8008446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8008448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800844c:	4618      	mov	r0, r3
 800844e:	f7ff feed 	bl	800822c <__NVIC_SetPendingIRQ>
}
 8008452:	bf00      	nop
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b082      	sub	sp, #8
 800845e:	af00      	add	r7, sp, #0
 8008460:	4603      	mov	r3, r0
 8008462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8008464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008468:	4618      	mov	r0, r3
 800846a:	f7ff fefd 	bl	8008268 <__NVIC_ClearPendingIRQ>
}
 800846e:	bf00      	nop
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e08e      	b.n	80085a8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	4b47      	ldr	r3, [pc, #284]	@ (80085b0 <HAL_DMA_Init+0x138>)
 8008492:	429a      	cmp	r2, r3
 8008494:	d80f      	bhi.n	80084b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	4b45      	ldr	r3, [pc, #276]	@ (80085b4 <HAL_DMA_Init+0x13c>)
 800849e:	4413      	add	r3, r2
 80084a0:	4a45      	ldr	r2, [pc, #276]	@ (80085b8 <HAL_DMA_Init+0x140>)
 80084a2:	fba2 2303 	umull	r2, r3, r2, r3
 80084a6:	091b      	lsrs	r3, r3, #4
 80084a8:	009a      	lsls	r2, r3, #2
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a42      	ldr	r2, [pc, #264]	@ (80085bc <HAL_DMA_Init+0x144>)
 80084b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80084b4:	e00e      	b.n	80084d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	4b40      	ldr	r3, [pc, #256]	@ (80085c0 <HAL_DMA_Init+0x148>)
 80084be:	4413      	add	r3, r2
 80084c0:	4a3d      	ldr	r2, [pc, #244]	@ (80085b8 <HAL_DMA_Init+0x140>)
 80084c2:	fba2 2303 	umull	r2, r3, r2, r3
 80084c6:	091b      	lsrs	r3, r3, #4
 80084c8:	009a      	lsls	r2, r3, #2
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a3c      	ldr	r2, [pc, #240]	@ (80085c4 <HAL_DMA_Init+0x14c>)
 80084d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2202      	movs	r2, #2
 80084d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80084ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80084f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008504:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008510:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	4313      	orrs	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fb16 	bl	8008b58 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008534:	d102      	bne.n	800853c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008544:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008548:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008552:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d010      	beq.n	800857e <HAL_DMA_Init+0x106>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	2b04      	cmp	r3, #4
 8008562:	d80c      	bhi.n	800857e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fb35 	bl	8008bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800856e:	2200      	movs	r2, #0
 8008570:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800857a:	605a      	str	r2, [r3, #4]
 800857c:	e008      	b.n	8008590 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	40020407 	.word	0x40020407
 80085b4:	bffdfff8 	.word	0xbffdfff8
 80085b8:	cccccccd 	.word	0xcccccccd
 80085bc:	40020000 	.word	0x40020000
 80085c0:	bffdfbf8 	.word	0xbffdfbf8
 80085c4:	40020400 	.word	0x40020400

080085c8 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e07b      	b.n	80086d2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f022 0201 	bic.w	r2, r2, #1
 80085e8:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	4b3a      	ldr	r3, [pc, #232]	@ (80086dc <HAL_DMA_DeInit+0x114>)
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d80f      	bhi.n	8008616 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	461a      	mov	r2, r3
 80085fc:	4b38      	ldr	r3, [pc, #224]	@ (80086e0 <HAL_DMA_DeInit+0x118>)
 80085fe:	4413      	add	r3, r2
 8008600:	4a38      	ldr	r2, [pc, #224]	@ (80086e4 <HAL_DMA_DeInit+0x11c>)
 8008602:	fba2 2303 	umull	r2, r3, r2, r3
 8008606:	091b      	lsrs	r3, r3, #4
 8008608:	009a      	lsls	r2, r3, #2
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a35      	ldr	r2, [pc, #212]	@ (80086e8 <HAL_DMA_DeInit+0x120>)
 8008612:	641a      	str	r2, [r3, #64]	@ 0x40
 8008614:	e00e      	b.n	8008634 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	4b33      	ldr	r3, [pc, #204]	@ (80086ec <HAL_DMA_DeInit+0x124>)
 800861e:	4413      	add	r3, r2
 8008620:	4a30      	ldr	r2, [pc, #192]	@ (80086e4 <HAL_DMA_DeInit+0x11c>)
 8008622:	fba2 2303 	umull	r2, r3, r2, r3
 8008626:	091b      	lsrs	r3, r3, #4
 8008628:	009a      	lsls	r2, r3, #2
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a2f      	ldr	r2, [pc, #188]	@ (80086f0 <HAL_DMA_DeInit+0x128>)
 8008632:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2200      	movs	r2, #0
 800863a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008640:	f003 021c 	and.w	r2, r3, #28
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008648:	2101      	movs	r1, #1
 800864a:	fa01 f202 	lsl.w	r2, r1, r2
 800864e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fa81 	bl	8008b58 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800865a:	2200      	movs	r2, #0
 800865c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008666:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00f      	beq.n	8008690 <HAL_DMA_DeInit+0xc8>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	2b04      	cmp	r3, #4
 8008676:	d80b      	bhi.n	8008690 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 faab 	bl	8008bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800868e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	40020407 	.word	0x40020407
 80086e0:	bffdfff8 	.word	0xbffdfff8
 80086e4:	cccccccd 	.word	0xcccccccd
 80086e8:	40020000 	.word	0x40020000
 80086ec:	bffdfbf8 	.word	0xbffdfbf8
 80086f0:	40020400 	.word	0x40020400

080086f4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
 8008700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800870c:	2b01      	cmp	r3, #1
 800870e:	d101      	bne.n	8008714 <HAL_DMA_Start_IT+0x20>
 8008710:	2302      	movs	r3, #2
 8008712:	e066      	b.n	80087e2 <HAL_DMA_Start_IT+0xee>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b01      	cmp	r3, #1
 8008726:	d155      	bne.n	80087d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f022 0201 	bic.w	r2, r2, #1
 8008744:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	68b9      	ldr	r1, [r7, #8]
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 f9c5 	bl	8008adc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008756:	2b00      	cmp	r3, #0
 8008758:	d008      	beq.n	800876c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f042 020e 	orr.w	r2, r2, #14
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	e00f      	b.n	800878c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f022 0204 	bic.w	r2, r2, #4
 800877a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f042 020a 	orr.w	r2, r2, #10
 800878a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d007      	beq.n	80087aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d007      	beq.n	80087c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f042 0201 	orr.w	r2, r2, #1
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	e005      	b.n	80087e0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80087dc:	2302      	movs	r3, #2
 80087de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d101      	bne.n	80087fc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e04f      	b.n	800889c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b02      	cmp	r3, #2
 8008806:	d008      	beq.n	800881a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2204      	movs	r2, #4
 800880c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e040      	b.n	800889c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 020e 	bic.w	r2, r2, #14
 8008828:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008834:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008838:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f022 0201 	bic.w	r2, r2, #1
 8008848:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800884e:	f003 021c 	and.w	r2, r3, #28
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008856:	2101      	movs	r1, #1
 8008858:	fa01 f202 	lsl.w	r2, r1, r2
 800885c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008866:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00c      	beq.n	800888a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800887a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800887e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008888:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d005      	beq.n	80088cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2204      	movs	r2, #4
 80088c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	73fb      	strb	r3, [r7, #15]
 80088ca:	e047      	b.n	800895c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 020e 	bic.w	r2, r2, #14
 80088da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f022 0201 	bic.w	r2, r2, #1
 80088ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80088fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008900:	f003 021c 	and.w	r2, r3, #28
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008908:	2101      	movs	r1, #1
 800890a:	fa01 f202 	lsl.w	r2, r1, r2
 800890e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008918:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00c      	beq.n	800893c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800892c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008930:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800893a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008950:	2b00      	cmp	r3, #0
 8008952:	d003      	beq.n	800895c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	4798      	blx	r3
    }
  }
  return status;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008982:	f003 031c 	and.w	r3, r3, #28
 8008986:	2204      	movs	r2, #4
 8008988:	409a      	lsls	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	4013      	ands	r3, r2
 800898e:	2b00      	cmp	r3, #0
 8008990:	d026      	beq.n	80089e0 <HAL_DMA_IRQHandler+0x7a>
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f003 0304 	and.w	r3, r3, #4
 8008998:	2b00      	cmp	r3, #0
 800899a:	d021      	beq.n	80089e0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0320 	and.w	r3, r3, #32
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d107      	bne.n	80089ba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f022 0204 	bic.w	r2, r2, #4
 80089b8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089be:	f003 021c 	and.w	r2, r3, #28
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c6:	2104      	movs	r1, #4
 80089c8:	fa01 f202 	lsl.w	r2, r1, r2
 80089cc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d071      	beq.n	8008aba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80089de:	e06c      	b.n	8008aba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e4:	f003 031c 	and.w	r3, r3, #28
 80089e8:	2202      	movs	r2, #2
 80089ea:	409a      	lsls	r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	4013      	ands	r3, r2
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d02e      	beq.n	8008a52 <HAL_DMA_IRQHandler+0xec>
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d029      	beq.n	8008a52 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0320 	and.w	r3, r3, #32
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10b      	bne.n	8008a24 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 020a 	bic.w	r2, r2, #10
 8008a1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a28:	f003 021c 	and.w	r2, r3, #28
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a30:	2102      	movs	r1, #2
 8008a32:	fa01 f202 	lsl.w	r2, r1, r2
 8008a36:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d038      	beq.n	8008aba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008a50:	e033      	b.n	8008aba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a56:	f003 031c 	and.w	r3, r3, #28
 8008a5a:	2208      	movs	r2, #8
 8008a5c:	409a      	lsls	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	4013      	ands	r3, r2
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d02a      	beq.n	8008abc <HAL_DMA_IRQHandler+0x156>
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	f003 0308 	and.w	r3, r3, #8
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d025      	beq.n	8008abc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f022 020e 	bic.w	r2, r2, #14
 8008a7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a84:	f003 021c 	and.w	r2, r3, #28
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8008a92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d004      	beq.n	8008abc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008aba:	bf00      	nop
 8008abc:	bf00      	nop
}
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
 8008ae8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008af2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d004      	beq.n	8008b06 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008b04:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b0a:	f003 021c 	and.w	r2, r3, #28
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b12:	2101      	movs	r1, #1
 8008b14:	fa01 f202 	lsl.w	r2, r1, r2
 8008b18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	2b10      	cmp	r3, #16
 8008b28:	d108      	bne.n	8008b3c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008b3a:	e007      	b.n	8008b4c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	60da      	str	r2, [r3, #12]
}
 8008b4c:	bf00      	nop
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	461a      	mov	r2, r3
 8008b66:	4b17      	ldr	r3, [pc, #92]	@ (8008bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d80a      	bhi.n	8008b82 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b70:	089b      	lsrs	r3, r3, #2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b78:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	6493      	str	r3, [r2, #72]	@ 0x48
 8008b80:	e007      	b.n	8008b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b86:	089b      	lsrs	r3, r3, #2
 8008b88:	009a      	lsls	r2, r3, #2
 8008b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008b8c:	4413      	add	r3, r2
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	3b08      	subs	r3, #8
 8008b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8008bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba0:	091b      	lsrs	r3, r3, #4
 8008ba2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8008bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008ba8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f003 031f 	and.w	r3, r3, #31
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	409a      	lsls	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008bb8:	bf00      	nop
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	40020407 	.word	0x40020407
 8008bc8:	4002081c 	.word	0x4002081c
 8008bcc:	cccccccd 	.word	0xcccccccd
 8008bd0:	40020880 	.word	0x40020880

08008bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008be4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4b0b      	ldr	r3, [pc, #44]	@ (8008c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	461a      	mov	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a09      	ldr	r2, [pc, #36]	@ (8008c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008bf8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	2201      	movs	r2, #1
 8008c04:	409a      	lsls	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008c0a:	bf00      	nop
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	1000823f 	.word	0x1000823f
 8008c1c:	40020940 	.word	0x40020940

08008c20 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b087      	sub	sp, #28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c2e:	e14c      	b.n	8008eca <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	2101      	movs	r1, #1
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	fa01 f303 	lsl.w	r3, r1, r3
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f000 813e 	beq.w	8008ec4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	f003 0303 	and.w	r3, r3, #3
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d005      	beq.n	8008c60 <HAL_GPIO_Init+0x40>
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f003 0303 	and.w	r3, r3, #3
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d130      	bne.n	8008cc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	005b      	lsls	r3, r3, #1
 8008c6a:	2203      	movs	r2, #3
 8008c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c70:	43db      	mvns	r3, r3
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	4013      	ands	r3, r2
 8008c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	fa02 f303 	lsl.w	r3, r2, r3
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c96:	2201      	movs	r2, #1
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9e:	43db      	mvns	r3, r3
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	091b      	lsrs	r3, r3, #4
 8008cac:	f003 0201 	and.w	r2, r3, #1
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	d017      	beq.n	8008cfe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	2203      	movs	r2, #3
 8008cda:	fa02 f303 	lsl.w	r3, r2, r3
 8008cde:	43db      	mvns	r3, r3
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	689a      	ldr	r2, [r3, #8]
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	005b      	lsls	r3, r3, #1
 8008cee:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f003 0303 	and.w	r3, r3, #3
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d123      	bne.n	8008d52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	08da      	lsrs	r2, r3, #3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	3208      	adds	r2, #8
 8008d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f003 0307 	and.w	r3, r3, #7
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	220f      	movs	r2, #15
 8008d22:	fa02 f303 	lsl.w	r3, r2, r3
 8008d26:	43db      	mvns	r3, r3
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	691a      	ldr	r2, [r3, #16]
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f003 0307 	and.w	r3, r3, #7
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	08da      	lsrs	r2, r3, #3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3208      	adds	r2, #8
 8008d4c:	6939      	ldr	r1, [r7, #16]
 8008d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	005b      	lsls	r3, r3, #1
 8008d5c:	2203      	movs	r2, #3
 8008d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d62:	43db      	mvns	r3, r3
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	4013      	ands	r3, r2
 8008d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f003 0203 	and.w	r2, r3, #3
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 8098 	beq.w	8008ec4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008d94:	4a54      	ldr	r2, [pc, #336]	@ (8008ee8 <HAL_GPIO_Init+0x2c8>)
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	089b      	lsrs	r3, r3, #2
 8008d9a:	3302      	adds	r3, #2
 8008d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008da0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f003 0303 	and.w	r3, r3, #3
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	220f      	movs	r2, #15
 8008dac:	fa02 f303 	lsl.w	r3, r2, r3
 8008db0:	43db      	mvns	r3, r3
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	4013      	ands	r3, r2
 8008db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008dbe:	d019      	beq.n	8008df4 <HAL_GPIO_Init+0x1d4>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a4a      	ldr	r2, [pc, #296]	@ (8008eec <HAL_GPIO_Init+0x2cc>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d013      	beq.n	8008df0 <HAL_GPIO_Init+0x1d0>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a49      	ldr	r2, [pc, #292]	@ (8008ef0 <HAL_GPIO_Init+0x2d0>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d00d      	beq.n	8008dec <HAL_GPIO_Init+0x1cc>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a48      	ldr	r2, [pc, #288]	@ (8008ef4 <HAL_GPIO_Init+0x2d4>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d007      	beq.n	8008de8 <HAL_GPIO_Init+0x1c8>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a47      	ldr	r2, [pc, #284]	@ (8008ef8 <HAL_GPIO_Init+0x2d8>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d101      	bne.n	8008de4 <HAL_GPIO_Init+0x1c4>
 8008de0:	2304      	movs	r3, #4
 8008de2:	e008      	b.n	8008df6 <HAL_GPIO_Init+0x1d6>
 8008de4:	2307      	movs	r3, #7
 8008de6:	e006      	b.n	8008df6 <HAL_GPIO_Init+0x1d6>
 8008de8:	2303      	movs	r3, #3
 8008dea:	e004      	b.n	8008df6 <HAL_GPIO_Init+0x1d6>
 8008dec:	2302      	movs	r3, #2
 8008dee:	e002      	b.n	8008df6 <HAL_GPIO_Init+0x1d6>
 8008df0:	2301      	movs	r3, #1
 8008df2:	e000      	b.n	8008df6 <HAL_GPIO_Init+0x1d6>
 8008df4:	2300      	movs	r3, #0
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	f002 0203 	and.w	r2, r2, #3
 8008dfc:	0092      	lsls	r2, r2, #2
 8008dfe:	4093      	lsls	r3, r2
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008e06:	4938      	ldr	r1, [pc, #224]	@ (8008ee8 <HAL_GPIO_Init+0x2c8>)
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	089b      	lsrs	r3, r3, #2
 8008e0c:	3302      	adds	r3, #2
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e14:	4b39      	ldr	r3, [pc, #228]	@ (8008efc <HAL_GPIO_Init+0x2dc>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	43db      	mvns	r3, r3
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	4013      	ands	r3, r2
 8008e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d003      	beq.n	8008e38 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008e38:	4a30      	ldr	r2, [pc, #192]	@ (8008efc <HAL_GPIO_Init+0x2dc>)
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8008efc <HAL_GPIO_Init+0x2dc>)
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	43db      	mvns	r3, r3
 8008e48:	693a      	ldr	r2, [r7, #16]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008e62:	4a26      	ldr	r2, [pc, #152]	@ (8008efc <HAL_GPIO_Init+0x2dc>)
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008e68:	4b24      	ldr	r3, [pc, #144]	@ (8008efc <HAL_GPIO_Init+0x2dc>)
 8008e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	43db      	mvns	r3, r3
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	4013      	ands	r3, r2
 8008e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8008efc <HAL_GPIO_Init+0x2dc>)
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8008e96:	4b19      	ldr	r3, [pc, #100]	@ (8008efc <HAL_GPIO_Init+0x2dc>)
 8008e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	43db      	mvns	r3, r3
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d003      	beq.n	8008ebc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8008efc <HAL_GPIO_Init+0x2dc>)
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f47f aeab 	bne.w	8008c30 <HAL_GPIO_Init+0x10>
  }
}
 8008eda:	bf00      	nop
 8008edc:	bf00      	nop
 8008ede:	371c      	adds	r7, #28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	40010000 	.word	0x40010000
 8008eec:	48000400 	.word	0x48000400
 8008ef0:	48000800 	.word	0x48000800
 8008ef4:	48000c00 	.word	0x48000c00
 8008ef8:	48001000 	.word	0x48001000
 8008efc:	58000800 	.word	0x58000800

08008f00 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b087      	sub	sp, #28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8008f0e:	e0bb      	b.n	8009088 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008f10:	2201      	movs	r2, #1
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	fa02 f303 	lsl.w	r3, r2, r3
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 80ae 	beq.w	8009082 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8008f26:	4a5f      	ldr	r2, [pc, #380]	@ (80090a4 <HAL_GPIO_DeInit+0x1a4>)
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	089b      	lsrs	r3, r3, #2
 8008f2c:	3302      	adds	r3, #2
 8008f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f32:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	f003 0303 	and.w	r3, r3, #3
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	220f      	movs	r2, #15
 8008f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	4013      	ands	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008f4e:	d019      	beq.n	8008f84 <HAL_GPIO_DeInit+0x84>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a55      	ldr	r2, [pc, #340]	@ (80090a8 <HAL_GPIO_DeInit+0x1a8>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d013      	beq.n	8008f80 <HAL_GPIO_DeInit+0x80>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a54      	ldr	r2, [pc, #336]	@ (80090ac <HAL_GPIO_DeInit+0x1ac>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d00d      	beq.n	8008f7c <HAL_GPIO_DeInit+0x7c>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a53      	ldr	r2, [pc, #332]	@ (80090b0 <HAL_GPIO_DeInit+0x1b0>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d007      	beq.n	8008f78 <HAL_GPIO_DeInit+0x78>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a52      	ldr	r2, [pc, #328]	@ (80090b4 <HAL_GPIO_DeInit+0x1b4>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d101      	bne.n	8008f74 <HAL_GPIO_DeInit+0x74>
 8008f70:	2304      	movs	r3, #4
 8008f72:	e008      	b.n	8008f86 <HAL_GPIO_DeInit+0x86>
 8008f74:	2307      	movs	r3, #7
 8008f76:	e006      	b.n	8008f86 <HAL_GPIO_DeInit+0x86>
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e004      	b.n	8008f86 <HAL_GPIO_DeInit+0x86>
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	e002      	b.n	8008f86 <HAL_GPIO_DeInit+0x86>
 8008f80:	2301      	movs	r3, #1
 8008f82:	e000      	b.n	8008f86 <HAL_GPIO_DeInit+0x86>
 8008f84:	2300      	movs	r3, #0
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	f002 0203 	and.w	r2, r2, #3
 8008f8c:	0092      	lsls	r2, r2, #2
 8008f8e:	4093      	lsls	r3, r2
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d136      	bne.n	8009004 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8008f96:	4b48      	ldr	r3, [pc, #288]	@ (80090b8 <HAL_GPIO_DeInit+0x1b8>)
 8008f98:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	43db      	mvns	r3, r3
 8008fa0:	4945      	ldr	r1, [pc, #276]	@ (80090b8 <HAL_GPIO_DeInit+0x1b8>)
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8008fa8:	4b43      	ldr	r3, [pc, #268]	@ (80090b8 <HAL_GPIO_DeInit+0x1b8>)
 8008faa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	43db      	mvns	r3, r3
 8008fb2:	4941      	ldr	r1, [pc, #260]	@ (80090b8 <HAL_GPIO_DeInit+0x1b8>)
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8008fba:	4b3f      	ldr	r3, [pc, #252]	@ (80090b8 <HAL_GPIO_DeInit+0x1b8>)
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	43db      	mvns	r3, r3
 8008fc2:	493d      	ldr	r1, [pc, #244]	@ (80090b8 <HAL_GPIO_DeInit+0x1b8>)
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8008fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80090b8 <HAL_GPIO_DeInit+0x1b8>)
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	43db      	mvns	r3, r3
 8008fd0:	4939      	ldr	r1, [pc, #228]	@ (80090b8 <HAL_GPIO_DeInit+0x1b8>)
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f003 0303 	and.w	r3, r3, #3
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	220f      	movs	r2, #15
 8008fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8008fe6:	4a2f      	ldr	r2, [pc, #188]	@ (80090a4 <HAL_GPIO_DeInit+0x1a4>)
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	089b      	lsrs	r3, r3, #2
 8008fec:	3302      	adds	r3, #2
 8008fee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	43da      	mvns	r2, r3
 8008ff6:	482b      	ldr	r0, [pc, #172]	@ (80090a4 <HAL_GPIO_DeInit+0x1a4>)
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	089b      	lsrs	r3, r3, #2
 8008ffc:	400a      	ands	r2, r1
 8008ffe:	3302      	adds	r3, #2
 8009000:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	005b      	lsls	r3, r3, #1
 800900c:	2103      	movs	r1, #3
 800900e:	fa01 f303 	lsl.w	r3, r1, r3
 8009012:	431a      	orrs	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	08da      	lsrs	r2, r3, #3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	3208      	adds	r2, #8
 8009020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	f003 0307 	and.w	r3, r3, #7
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	220f      	movs	r2, #15
 800902e:	fa02 f303 	lsl.w	r3, r2, r3
 8009032:	43db      	mvns	r3, r3
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	08d2      	lsrs	r2, r2, #3
 8009038:	4019      	ands	r1, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	3208      	adds	r2, #8
 800903e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68da      	ldr	r2, [r3, #12]
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	005b      	lsls	r3, r3, #1
 800904a:	2103      	movs	r1, #3
 800904c:	fa01 f303 	lsl.w	r3, r1, r3
 8009050:	43db      	mvns	r3, r3
 8009052:	401a      	ands	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	2101      	movs	r1, #1
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	fa01 f303 	lsl.w	r3, r1, r3
 8009064:	43db      	mvns	r3, r3
 8009066:	401a      	ands	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	689a      	ldr	r2, [r3, #8]
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	2103      	movs	r1, #3
 8009076:	fa01 f303 	lsl.w	r3, r1, r3
 800907a:	43db      	mvns	r3, r3
 800907c:	401a      	ands	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	609a      	str	r2, [r3, #8]
    }

    position++;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	3301      	adds	r3, #1
 8009086:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	fa22 f303 	lsr.w	r3, r2, r3
 8009090:	2b00      	cmp	r3, #0
 8009092:	f47f af3d 	bne.w	8008f10 <HAL_GPIO_DeInit+0x10>
  }
}
 8009096:	bf00      	nop
 8009098:	bf00      	nop
 800909a:	371c      	adds	r7, #28
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	40010000 	.word	0x40010000
 80090a8:	48000400 	.word	0x48000400
 80090ac:	48000800 	.word	0x48000800
 80090b0:	48000c00 	.word	0x48000c00
 80090b4:	48001000 	.word	0x48001000
 80090b8:	58000800 	.word	0x58000800

080090bc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	460b      	mov	r3, r1
 80090c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	691a      	ldr	r2, [r3, #16]
 80090cc:	887b      	ldrh	r3, [r7, #2]
 80090ce:	4013      	ands	r3, r2
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80090d4:	2301      	movs	r3, #1
 80090d6:	73fb      	strb	r3, [r7, #15]
 80090d8:	e001      	b.n	80090de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80090da:	2300      	movs	r3, #0
 80090dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80090de:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	807b      	strh	r3, [r7, #2]
 80090f8:	4613      	mov	r3, r2
 80090fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80090fc:	787b      	ldrb	r3, [r7, #1]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009102:	887a      	ldrh	r2, [r7, #2]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009108:	e002      	b.n	8009110 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800910a:	887a      	ldrh	r2, [r7, #2]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	4603      	mov	r3, r0
 8009124:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009126:	4b08      	ldr	r3, [pc, #32]	@ (8009148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009128:	68da      	ldr	r2, [r3, #12]
 800912a:	88fb      	ldrh	r3, [r7, #6]
 800912c:	4013      	ands	r3, r2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d006      	beq.n	8009140 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009132:	4a05      	ldr	r2, [pc, #20]	@ (8009148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009134:	88fb      	ldrh	r3, [r7, #6]
 8009136:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009138:	88fb      	ldrh	r3, [r7, #6]
 800913a:	4618      	mov	r0, r3
 800913c:	f7f9 fc02 	bl	8002944 <HAL_GPIO_EXTI_Callback>
  }
}
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	58000800 	.word	0x58000800

0800914c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8009152:	4b0a      	ldr	r3, [pc, #40]	@ (800917c <HAL_HSEM_IRQHandler+0x30>)
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8009158:	4b08      	ldr	r3, [pc, #32]	@ (800917c <HAL_HSEM_IRQHandler+0x30>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	43db      	mvns	r3, r3
 8009160:	4906      	ldr	r1, [pc, #24]	@ (800917c <HAL_HSEM_IRQHandler+0x30>)
 8009162:	4013      	ands	r3, r2
 8009164:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8009166:	4a05      	ldr	r2, [pc, #20]	@ (800917c <HAL_HSEM_IRQHandler+0x30>)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 f807 	bl	8009180 <HAL_HSEM_FreeCallback>
}
 8009172:	bf00      	nop
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	58001500 	.word	0x58001500

08009180 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d101      	bne.n	80091a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e08d      	b.n	80092c2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d106      	bne.n	80091c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7f9 fa9a 	bl	80026f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2224      	movs	r2, #36	@ 0x24
 80091c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f022 0201 	bic.w	r2, r2, #1
 80091d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80091e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	689a      	ldr	r2, [r3, #8]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80091f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d107      	bne.n	800920e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	689a      	ldr	r2, [r3, #8]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800920a:	609a      	str	r2, [r3, #8]
 800920c:	e006      	b.n	800921c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	689a      	ldr	r2, [r3, #8]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800921a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	2b02      	cmp	r3, #2
 8009222:	d108      	bne.n	8009236 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685a      	ldr	r2, [r3, #4]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009232:	605a      	str	r2, [r3, #4]
 8009234:	e007      	b.n	8009246 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	685a      	ldr	r2, [r3, #4]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009244:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	6812      	ldr	r2, [r2, #0]
 8009250:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009254:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009258:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68da      	ldr	r2, [r3, #12]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009268:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	691a      	ldr	r2, [r3, #16]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	430a      	orrs	r2, r1
 8009282:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	69d9      	ldr	r1, [r3, #28]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a1a      	ldr	r2, [r3, #32]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	430a      	orrs	r2, r1
 8009292:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f042 0201 	orr.w	r2, r2, #1
 80092a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2220      	movs	r2, #32
 80092ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b082      	sub	sp, #8
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	e021      	b.n	8009320 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2224      	movs	r2, #36	@ 0x24
 80092e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f022 0201 	bic.w	r2, r2, #1
 80092f2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7f9 fa87 	bl	8002808 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af02      	add	r7, sp, #8
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	4608      	mov	r0, r1
 8009332:	4611      	mov	r1, r2
 8009334:	461a      	mov	r2, r3
 8009336:	4603      	mov	r3, r0
 8009338:	817b      	strh	r3, [r7, #10]
 800933a:	460b      	mov	r3, r1
 800933c:	813b      	strh	r3, [r7, #8]
 800933e:	4613      	mov	r3, r2
 8009340:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b20      	cmp	r3, #32
 800934c:	f040 80f9 	bne.w	8009542 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009350:	6a3b      	ldr	r3, [r7, #32]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d002      	beq.n	800935c <HAL_I2C_Mem_Write+0x34>
 8009356:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009358:	2b00      	cmp	r3, #0
 800935a:	d105      	bne.n	8009368 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009362:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	e0ed      	b.n	8009544 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800936e:	2b01      	cmp	r3, #1
 8009370:	d101      	bne.n	8009376 <HAL_I2C_Mem_Write+0x4e>
 8009372:	2302      	movs	r3, #2
 8009374:	e0e6      	b.n	8009544 <HAL_I2C_Mem_Write+0x21c>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2201      	movs	r2, #1
 800937a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800937e:	f7fd fe3d 	bl	8006ffc <HAL_GetTick>
 8009382:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	2319      	movs	r3, #25
 800938a:	2201      	movs	r2, #1
 800938c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f000 f955 	bl	8009640 <I2C_WaitOnFlagUntilTimeout>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	e0d1      	b.n	8009544 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2221      	movs	r2, #33	@ 0x21
 80093a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2240      	movs	r2, #64	@ 0x40
 80093ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6a3a      	ldr	r2, [r7, #32]
 80093ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80093c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80093c8:	88f8      	ldrh	r0, [r7, #6]
 80093ca:	893a      	ldrh	r2, [r7, #8]
 80093cc:	8979      	ldrh	r1, [r7, #10]
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	4603      	mov	r3, r0
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f000 f8b9 	bl	8009550 <I2C_RequestMemoryWrite>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d005      	beq.n	80093f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e0a9      	b.n	8009544 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	2bff      	cmp	r3, #255	@ 0xff
 80093f8:	d90e      	bls.n	8009418 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	22ff      	movs	r2, #255	@ 0xff
 80093fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009404:	b2da      	uxtb	r2, r3
 8009406:	8979      	ldrh	r1, [r7, #10]
 8009408:	2300      	movs	r3, #0
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 fad9 	bl	80099c8 <I2C_TransferConfig>
 8009416:	e00f      	b.n	8009438 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800941c:	b29a      	uxth	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009426:	b2da      	uxtb	r2, r3
 8009428:	8979      	ldrh	r1, [r7, #10]
 800942a:	2300      	movs	r3, #0
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 fac8 	bl	80099c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009438:	697a      	ldr	r2, [r7, #20]
 800943a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f000 f958 	bl	80096f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	e07b      	b.n	8009544 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009450:	781a      	ldrb	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945c:	1c5a      	adds	r2, r3, #1
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009466:	b29b      	uxth	r3, r3
 8009468:	3b01      	subs	r3, #1
 800946a:	b29a      	uxth	r2, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009474:	3b01      	subs	r3, #1
 8009476:	b29a      	uxth	r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009480:	b29b      	uxth	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d034      	beq.n	80094f0 <HAL_I2C_Mem_Write+0x1c8>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800948a:	2b00      	cmp	r3, #0
 800948c:	d130      	bne.n	80094f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009494:	2200      	movs	r2, #0
 8009496:	2180      	movs	r1, #128	@ 0x80
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 f8d1 	bl	8009640 <I2C_WaitOnFlagUntilTimeout>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d001      	beq.n	80094a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e04d      	b.n	8009544 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	2bff      	cmp	r3, #255	@ 0xff
 80094b0:	d90e      	bls.n	80094d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	22ff      	movs	r2, #255	@ 0xff
 80094b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	8979      	ldrh	r1, [r7, #10]
 80094c0:	2300      	movs	r3, #0
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 fa7d 	bl	80099c8 <I2C_TransferConfig>
 80094ce:	e00f      	b.n	80094f0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	8979      	ldrh	r1, [r7, #10]
 80094e2:	2300      	movs	r3, #0
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f000 fa6c 	bl	80099c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d19e      	bne.n	8009438 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094fa:	697a      	ldr	r2, [r7, #20]
 80094fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f000 f93e 	bl	8009780 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e01a      	b.n	8009544 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2220      	movs	r2, #32
 8009514:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6859      	ldr	r1, [r3, #4]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	4b0a      	ldr	r3, [pc, #40]	@ (800954c <HAL_I2C_Mem_Write+0x224>)
 8009522:	400b      	ands	r3, r1
 8009524:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2220      	movs	r2, #32
 800952a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	e000      	b.n	8009544 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009542:	2302      	movs	r3, #2
  }
}
 8009544:	4618      	mov	r0, r3
 8009546:	3718      	adds	r7, #24
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	fe00e800 	.word	0xfe00e800

08009550 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af02      	add	r7, sp, #8
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	4608      	mov	r0, r1
 800955a:	4611      	mov	r1, r2
 800955c:	461a      	mov	r2, r3
 800955e:	4603      	mov	r3, r0
 8009560:	817b      	strh	r3, [r7, #10]
 8009562:	460b      	mov	r3, r1
 8009564:	813b      	strh	r3, [r7, #8]
 8009566:	4613      	mov	r3, r2
 8009568:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800956a:	88fb      	ldrh	r3, [r7, #6]
 800956c:	b2da      	uxtb	r2, r3
 800956e:	8979      	ldrh	r1, [r7, #10]
 8009570:	4b20      	ldr	r3, [pc, #128]	@ (80095f4 <I2C_RequestMemoryWrite+0xa4>)
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 fa25 	bl	80099c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800957e:	69fa      	ldr	r2, [r7, #28]
 8009580:	69b9      	ldr	r1, [r7, #24]
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f000 f8b5 	bl	80096f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e02c      	b.n	80095ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009592:	88fb      	ldrh	r3, [r7, #6]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d105      	bne.n	80095a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009598:	893b      	ldrh	r3, [r7, #8]
 800959a:	b2da      	uxtb	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80095a2:	e015      	b.n	80095d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80095a4:	893b      	ldrh	r3, [r7, #8]
 80095a6:	0a1b      	lsrs	r3, r3, #8
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095b2:	69fa      	ldr	r2, [r7, #28]
 80095b4:	69b9      	ldr	r1, [r7, #24]
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f000 f89b 	bl	80096f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e012      	b.n	80095ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095c6:	893b      	ldrh	r3, [r7, #8]
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	2200      	movs	r2, #0
 80095d8:	2180      	movs	r1, #128	@ 0x80
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f000 f830 	bl	8009640 <I2C_WaitOnFlagUntilTimeout>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e000      	b.n	80095ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	80002000 	.word	0x80002000

080095f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	2b02      	cmp	r3, #2
 800960c:	d103      	bne.n	8009616 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2200      	movs	r2, #0
 8009614:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	f003 0301 	and.w	r3, r3, #1
 8009620:	2b01      	cmp	r3, #1
 8009622:	d007      	beq.n	8009634 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	699a      	ldr	r2, [r3, #24]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f042 0201 	orr.w	r2, r2, #1
 8009632:	619a      	str	r2, [r3, #24]
  }
}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	603b      	str	r3, [r7, #0]
 800964c:	4613      	mov	r3, r2
 800964e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009650:	e03b      	b.n	80096ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009652:	69ba      	ldr	r2, [r7, #24]
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f000 f8d6 	bl	8009808 <I2C_IsErrorOccurred>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e041      	b.n	80096ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966c:	d02d      	beq.n	80096ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800966e:	f7fd fcc5 	bl	8006ffc <HAL_GetTick>
 8009672:	4602      	mov	r2, r0
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	429a      	cmp	r2, r3
 800967c:	d302      	bcc.n	8009684 <I2C_WaitOnFlagUntilTimeout+0x44>
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d122      	bne.n	80096ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	699a      	ldr	r2, [r3, #24]
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	4013      	ands	r3, r2
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	429a      	cmp	r2, r3
 8009692:	bf0c      	ite	eq
 8009694:	2301      	moveq	r3, #1
 8009696:	2300      	movne	r3, #0
 8009698:	b2db      	uxtb	r3, r3
 800969a:	461a      	mov	r2, r3
 800969c:	79fb      	ldrb	r3, [r7, #7]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d113      	bne.n	80096ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096a6:	f043 0220 	orr.w	r2, r3, #32
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2220      	movs	r2, #32
 80096b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e00f      	b.n	80096ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	699a      	ldr	r2, [r3, #24]
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	4013      	ands	r3, r2
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	bf0c      	ite	eq
 80096da:	2301      	moveq	r3, #1
 80096dc:	2300      	movne	r3, #0
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	461a      	mov	r2, r3
 80096e2:	79fb      	ldrb	r3, [r7, #7]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d0b4      	beq.n	8009652 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b084      	sub	sp, #16
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	60f8      	str	r0, [r7, #12]
 80096fa:	60b9      	str	r1, [r7, #8]
 80096fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80096fe:	e033      	b.n	8009768 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	68b9      	ldr	r1, [r7, #8]
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f000 f87f 	bl	8009808 <I2C_IsErrorOccurred>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	e031      	b.n	8009778 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800971a:	d025      	beq.n	8009768 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800971c:	f7fd fc6e 	bl	8006ffc <HAL_GetTick>
 8009720:	4602      	mov	r2, r0
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	429a      	cmp	r2, r3
 800972a:	d302      	bcc.n	8009732 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d11a      	bne.n	8009768 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	f003 0302 	and.w	r3, r3, #2
 800973c:	2b02      	cmp	r3, #2
 800973e:	d013      	beq.n	8009768 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009744:	f043 0220 	orr.w	r2, r3, #32
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2220      	movs	r2, #32
 8009750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e007      	b.n	8009778 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	f003 0302 	and.w	r3, r3, #2
 8009772:	2b02      	cmp	r3, #2
 8009774:	d1c4      	bne.n	8009700 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800978c:	e02f      	b.n	80097ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	68b9      	ldr	r1, [r7, #8]
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f000 f838 	bl	8009808 <I2C_IsErrorOccurred>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	e02d      	b.n	80097fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097a2:	f7fd fc2b 	bl	8006ffc <HAL_GetTick>
 80097a6:	4602      	mov	r2, r0
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d302      	bcc.n	80097b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d11a      	bne.n	80097ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	f003 0320 	and.w	r3, r3, #32
 80097c2:	2b20      	cmp	r3, #32
 80097c4:	d013      	beq.n	80097ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ca:	f043 0220 	orr.w	r2, r3, #32
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2220      	movs	r2, #32
 80097d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e007      	b.n	80097fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	f003 0320 	and.w	r3, r3, #32
 80097f8:	2b20      	cmp	r3, #32
 80097fa:	d1c8      	bne.n	800978e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
	...

08009808 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b08a      	sub	sp, #40	@ 0x28
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	699b      	ldr	r3, [r3, #24]
 8009820:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	f003 0310 	and.w	r3, r3, #16
 8009830:	2b00      	cmp	r3, #0
 8009832:	d068      	beq.n	8009906 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2210      	movs	r2, #16
 800983a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800983c:	e049      	b.n	80098d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009844:	d045      	beq.n	80098d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009846:	f7fd fbd9 	bl	8006ffc <HAL_GetTick>
 800984a:	4602      	mov	r2, r0
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	429a      	cmp	r2, r3
 8009854:	d302      	bcc.n	800985c <I2C_IsErrorOccurred+0x54>
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d13a      	bne.n	80098d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009866:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800986e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800987a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800987e:	d121      	bne.n	80098c4 <I2C_IsErrorOccurred+0xbc>
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009886:	d01d      	beq.n	80098c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009888:	7cfb      	ldrb	r3, [r7, #19]
 800988a:	2b20      	cmp	r3, #32
 800988c:	d01a      	beq.n	80098c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800989c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800989e:	f7fd fbad 	bl	8006ffc <HAL_GetTick>
 80098a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098a4:	e00e      	b.n	80098c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80098a6:	f7fd fba9 	bl	8006ffc <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	2b19      	cmp	r3, #25
 80098b2:	d907      	bls.n	80098c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	f043 0320 	orr.w	r3, r3, #32
 80098ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80098c2:	e006      	b.n	80098d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	f003 0320 	and.w	r3, r3, #32
 80098ce:	2b20      	cmp	r3, #32
 80098d0:	d1e9      	bne.n	80098a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	f003 0320 	and.w	r3, r3, #32
 80098dc:	2b20      	cmp	r3, #32
 80098de:	d003      	beq.n	80098e8 <I2C_IsErrorOccurred+0xe0>
 80098e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d0aa      	beq.n	800983e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80098e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d103      	bne.n	80098f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2220      	movs	r2, #32
 80098f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	f043 0304 	orr.w	r3, r3, #4
 80098fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00b      	beq.n	8009930 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009918:	6a3b      	ldr	r3, [r7, #32]
 800991a:	f043 0301 	orr.w	r3, r3, #1
 800991e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009928:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00b      	beq.n	8009952 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800993a:	6a3b      	ldr	r3, [r7, #32]
 800993c:	f043 0308 	orr.w	r3, r3, #8
 8009940:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800994a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00b      	beq.n	8009974 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	f043 0302 	orr.w	r3, r3, #2
 8009962:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800996c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009978:	2b00      	cmp	r3, #0
 800997a:	d01c      	beq.n	80099b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f7ff fe3b 	bl	80095f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6859      	ldr	r1, [r3, #4]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	4b0d      	ldr	r3, [pc, #52]	@ (80099c4 <I2C_IsErrorOccurred+0x1bc>)
 800998e:	400b      	ands	r3, r1
 8009990:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	431a      	orrs	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2220      	movs	r2, #32
 80099a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80099b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3728      	adds	r7, #40	@ 0x28
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	fe00e800 	.word	0xfe00e800

080099c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b087      	sub	sp, #28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	607b      	str	r3, [r7, #4]
 80099d2:	460b      	mov	r3, r1
 80099d4:	817b      	strh	r3, [r7, #10]
 80099d6:	4613      	mov	r3, r2
 80099d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099da:	897b      	ldrh	r3, [r7, #10]
 80099dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80099e0:	7a7b      	ldrb	r3, [r7, #9]
 80099e2:	041b      	lsls	r3, r3, #16
 80099e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099ee:	6a3b      	ldr	r3, [r7, #32]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80099f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	6a3b      	ldr	r3, [r7, #32]
 8009a00:	0d5b      	lsrs	r3, r3, #21
 8009a02:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009a06:	4b08      	ldr	r3, [pc, #32]	@ (8009a28 <I2C_TransferConfig+0x60>)
 8009a08:	430b      	orrs	r3, r1
 8009a0a:	43db      	mvns	r3, r3
 8009a0c:	ea02 0103 	and.w	r1, r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	430a      	orrs	r2, r1
 8009a18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009a1a:	bf00      	nop
 8009a1c:	371c      	adds	r7, #28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	03ff63ff 	.word	0x03ff63ff

08009a2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	d138      	bne.n	8009ab4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d101      	bne.n	8009a50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	e032      	b.n	8009ab6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2224      	movs	r2, #36	@ 0x24
 8009a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f022 0201 	bic.w	r2, r2, #1
 8009a6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009a7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6819      	ldr	r1, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	430a      	orrs	r2, r1
 8009a8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f042 0201 	orr.w	r2, r2, #1
 8009a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	e000      	b.n	8009ab6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ab4:	2302      	movs	r3, #2
  }
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	370c      	adds	r7, #12
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ac2:	b480      	push	{r7}
 8009ac4:	b085      	sub	sp, #20
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b20      	cmp	r3, #32
 8009ad6:	d139      	bne.n	8009b4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d101      	bne.n	8009ae6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	e033      	b.n	8009b4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2224      	movs	r2, #36	@ 0x24
 8009af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f022 0201 	bic.w	r2, r2, #1
 8009b04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009b14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	021b      	lsls	r3, r3, #8
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f042 0201 	orr.w	r2, r2, #1
 8009b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2220      	movs	r2, #32
 8009b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e000      	b.n	8009b4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009b4c:	2302      	movs	r3, #2
  }
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr
	...

08009b5c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8009b64:	4b05      	ldr	r3, [pc, #20]	@ (8009b7c <HAL_I2CEx_EnableFastModePlus+0x20>)
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	4904      	ldr	r1, [pc, #16]	@ (8009b7c <HAL_I2CEx_EnableFastModePlus+0x20>)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	604b      	str	r3, [r1, #4]
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	40010000 	.word	0x40010000

08009b80 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d01e      	beq.n	8009bd0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8009b92:	4b13      	ldr	r3, [pc, #76]	@ (8009be0 <HAL_IPCC_Init+0x60>)
 8009b94:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d102      	bne.n	8009ba8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7f8 fe92 	bl	80028cc <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8009ba8:	68b8      	ldr	r0, [r7, #8]
 8009baa:	f000 f85b 	bl	8009c64 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f82c 	bl	8009c18 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8009bce:	e001      	b.n	8009bd4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	58000c00 	.word	0x58000c00

08009be4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	4613      	mov	r3, r2
 8009bf0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8009bf2:	bf00      	nop
 8009bf4:	3714      	adds	r7, #20
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b085      	sub	sp, #20
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	60f8      	str	r0, [r7, #12]
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8009c0c:	bf00      	nop
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009c20:	2300      	movs	r3, #0
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	e00f      	b.n	8009c46 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4413      	add	r3, r2
 8009c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8009c5c <IPCC_SetDefaultCallbacks+0x44>)
 8009c30:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3306      	adds	r3, #6
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4413      	add	r3, r2
 8009c3c:	4a08      	ldr	r2, [pc, #32]	@ (8009c60 <IPCC_SetDefaultCallbacks+0x48>)
 8009c3e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	3301      	adds	r3, #1
 8009c44:	60fb      	str	r3, [r7, #12]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2b05      	cmp	r3, #5
 8009c4a:	d9ec      	bls.n	8009c26 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8009c4c:	bf00      	nop
 8009c4e:	bf00      	nop
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	08009be5 	.word	0x08009be5
 8009c60:	08009bff 	.word	0x08009bff

08009c64 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8009c78:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	223f      	movs	r2, #63	@ 0x3f
 8009c7e:	609a      	str	r2, [r3, #8]
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e0c0      	b.n	8009e20 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d106      	bne.n	8009cb8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f00e fe52 	bl	801895c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2203      	movs	r2, #3
 8009cbc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f007 f88e 	bl	8010de6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009cca:	2300      	movs	r3, #0
 8009ccc:	73fb      	strb	r3, [r7, #15]
 8009cce:	e03e      	b.n	8009d4e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009cd0:	7bfa      	ldrb	r2, [r7, #15]
 8009cd2:	6879      	ldr	r1, [r7, #4]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4413      	add	r3, r2
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	440b      	add	r3, r1
 8009cde:	3311      	adds	r3, #17
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009ce4:	7bfa      	ldrb	r2, [r7, #15]
 8009ce6:	6879      	ldr	r1, [r7, #4]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4413      	add	r3, r2
 8009cee:	00db      	lsls	r3, r3, #3
 8009cf0:	440b      	add	r3, r1
 8009cf2:	3310      	adds	r3, #16
 8009cf4:	7bfa      	ldrb	r2, [r7, #15]
 8009cf6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009cf8:	7bfa      	ldrb	r2, [r7, #15]
 8009cfa:	6879      	ldr	r1, [r7, #4]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	00db      	lsls	r3, r3, #3
 8009d04:	440b      	add	r3, r1
 8009d06:	3313      	adds	r3, #19
 8009d08:	2200      	movs	r2, #0
 8009d0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009d0c:	7bfa      	ldrb	r2, [r7, #15]
 8009d0e:	6879      	ldr	r1, [r7, #4]
 8009d10:	4613      	mov	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4413      	add	r3, r2
 8009d16:	00db      	lsls	r3, r3, #3
 8009d18:	440b      	add	r3, r1
 8009d1a:	3320      	adds	r3, #32
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009d20:	7bfa      	ldrb	r2, [r7, #15]
 8009d22:	6879      	ldr	r1, [r7, #4]
 8009d24:	4613      	mov	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4413      	add	r3, r2
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	440b      	add	r3, r1
 8009d2e:	3324      	adds	r3, #36	@ 0x24
 8009d30:	2200      	movs	r2, #0
 8009d32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
 8009d36:	6879      	ldr	r1, [r7, #4]
 8009d38:	1c5a      	adds	r2, r3, #1
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4413      	add	r3, r2
 8009d40:	00db      	lsls	r3, r3, #3
 8009d42:	440b      	add	r3, r1
 8009d44:	2200      	movs	r2, #0
 8009d46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	73fb      	strb	r3, [r7, #15]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	791b      	ldrb	r3, [r3, #4]
 8009d52:	7bfa      	ldrb	r2, [r7, #15]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d3bb      	bcc.n	8009cd0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d58:	2300      	movs	r3, #0
 8009d5a:	73fb      	strb	r3, [r7, #15]
 8009d5c:	e044      	b.n	8009de8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009d5e:	7bfa      	ldrb	r2, [r7, #15]
 8009d60:	6879      	ldr	r1, [r7, #4]
 8009d62:	4613      	mov	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	00db      	lsls	r3, r3, #3
 8009d6a:	440b      	add	r3, r1
 8009d6c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8009d70:	2200      	movs	r2, #0
 8009d72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009d74:	7bfa      	ldrb	r2, [r7, #15]
 8009d76:	6879      	ldr	r1, [r7, #4]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	00db      	lsls	r3, r3, #3
 8009d80:	440b      	add	r3, r1
 8009d82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009d86:	7bfa      	ldrb	r2, [r7, #15]
 8009d88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009d8a:	7bfa      	ldrb	r2, [r7, #15]
 8009d8c:	6879      	ldr	r1, [r7, #4]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	4413      	add	r3, r2
 8009d94:	00db      	lsls	r3, r3, #3
 8009d96:	440b      	add	r3, r1
 8009d98:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009da0:	7bfa      	ldrb	r2, [r7, #15]
 8009da2:	6879      	ldr	r1, [r7, #4]
 8009da4:	4613      	mov	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	00db      	lsls	r3, r3, #3
 8009dac:	440b      	add	r3, r1
 8009dae:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8009db2:	2200      	movs	r2, #0
 8009db4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009db6:	7bfa      	ldrb	r2, [r7, #15]
 8009db8:	6879      	ldr	r1, [r7, #4]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	00db      	lsls	r3, r3, #3
 8009dc2:	440b      	add	r3, r1
 8009dc4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009dc8:	2200      	movs	r2, #0
 8009dca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009dcc:	7bfa      	ldrb	r2, [r7, #15]
 8009dce:	6879      	ldr	r1, [r7, #4]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	00db      	lsls	r3, r3, #3
 8009dd8:	440b      	add	r3, r1
 8009dda:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8009dde:	2200      	movs	r2, #0
 8009de0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
 8009de4:	3301      	adds	r3, #1
 8009de6:	73fb      	strb	r3, [r7, #15]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	791b      	ldrb	r3, [r3, #4]
 8009dec:	7bfa      	ldrb	r2, [r7, #15]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d3b5      	bcc.n	8009d5e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	3304      	adds	r3, #4
 8009dfa:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009dfe:	f007 f80d 	bl	8010e1c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	7a9b      	ldrb	r3, [r3, #10]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d102      	bne.n	8009e1e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f001 fc0e 	bl	800b63a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d101      	bne.n	8009e3e <HAL_PCD_Start+0x16>
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	e012      	b.n	8009e64 <HAL_PCD_Start+0x3c>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f006 ffb4 	bl	8010db8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f008 fd91 	bl	801297c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f008 fd96 	bl	80129aa <USB_ReadInterrupts>
 8009e7e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fb06 	bl	800a49c <PCD_EP_ISR_Handler>

    return;
 8009e90:	e110      	b.n	800a0b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d013      	beq.n	8009ec4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009eae:	b292      	uxth	r2, r2
 8009eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f00e fdde 	bl	8018a76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009eba:	2100      	movs	r1, #0
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f8fc 	bl	800a0ba <HAL_PCD_SetAddress>

    return;
 8009ec2:	e0f7      	b.n	800a0b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00c      	beq.n	8009ee8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009ee0:	b292      	uxth	r2, r2
 8009ee2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009ee6:	e0e5      	b.n	800a0b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00c      	beq.n	8009f0c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009f04:	b292      	uxth	r2, r2
 8009f06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009f0a:	e0d3      	b.n	800a0b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d034      	beq.n	8009f80 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f022 0204 	bic.w	r2, r2, #4
 8009f28:	b292      	uxth	r2, r2
 8009f2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f022 0208 	bic.w	r2, r2, #8
 8009f40:	b292      	uxth	r2, r2
 8009f42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d107      	bne.n	8009f60 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009f58:	2100      	movs	r1, #0
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f00e ff80 	bl	8018e60 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f00e fdc1 	bl	8018ae8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009f78:	b292      	uxth	r2, r2
 8009f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009f7e:	e099      	b.n	800a0b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d027      	beq.n	8009fda <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f042 0208 	orr.w	r2, r2, #8
 8009f9c:	b292      	uxth	r2, r2
 8009f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009fb4:	b292      	uxth	r2, r2
 8009fb6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f042 0204 	orr.w	r2, r2, #4
 8009fcc:	b292      	uxth	r2, r2
 8009fce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f00e fd6e 	bl	8018ab4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009fd8:	e06c      	b.n	800a0b4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d040      	beq.n	800a066 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009ff6:	b292      	uxth	r2, r2
 8009ff8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a002:	2b00      	cmp	r3, #0
 800a004:	d12b      	bne.n	800a05e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a00e:	b29a      	uxth	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f042 0204 	orr.w	r2, r2, #4
 800a018:	b292      	uxth	r2, r2
 800a01a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a026:	b29a      	uxth	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f042 0208 	orr.w	r2, r2, #8
 800a030:	b292      	uxth	r2, r2
 800a032:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a046:	b29b      	uxth	r3, r3
 800a048:	089b      	lsrs	r3, r3, #2
 800a04a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a054:	2101      	movs	r1, #1
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f00e ff02 	bl	8018e60 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a05c:	e02a      	b.n	800a0b4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f00e fd28 	bl	8018ab4 <HAL_PCD_SuspendCallback>
    return;
 800a064:	e026      	b.n	800a0b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00f      	beq.n	800a090 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a078:	b29a      	uxth	r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a082:	b292      	uxth	r2, r2
 800a084:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f00e fce6 	bl	8018a5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a08e:	e011      	b.n	800a0b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00c      	beq.n	800a0b4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a0ac:	b292      	uxth	r2, r2
 800a0ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a0b2:	bf00      	nop
  }
}
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b082      	sub	sp, #8
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d101      	bne.n	800a0d4 <HAL_PCD_SetAddress+0x1a>
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	e012      	b.n	800a0fa <HAL_PCD_SetAddress+0x40>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	78fa      	ldrb	r2, [r7, #3]
 800a0e0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	78fa      	ldrb	r2, [r7, #3]
 800a0e8:	4611      	mov	r1, r2
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f008 fc32 	bl	8012954 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b084      	sub	sp, #16
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	4608      	mov	r0, r1
 800a10c:	4611      	mov	r1, r2
 800a10e:	461a      	mov	r2, r3
 800a110:	4603      	mov	r3, r0
 800a112:	70fb      	strb	r3, [r7, #3]
 800a114:	460b      	mov	r3, r1
 800a116:	803b      	strh	r3, [r7, #0]
 800a118:	4613      	mov	r3, r2
 800a11a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a124:	2b00      	cmp	r3, #0
 800a126:	da0e      	bge.n	800a146 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a128:	78fb      	ldrb	r3, [r7, #3]
 800a12a:	f003 0207 	and.w	r2, r3, #7
 800a12e:	4613      	mov	r3, r2
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	4413      	add	r3, r2
 800a134:	00db      	lsls	r3, r3, #3
 800a136:	3310      	adds	r3, #16
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	4413      	add	r3, r2
 800a13c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2201      	movs	r2, #1
 800a142:	705a      	strb	r2, [r3, #1]
 800a144:	e00e      	b.n	800a164 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a146:	78fb      	ldrb	r3, [r7, #3]
 800a148:	f003 0207 	and.w	r2, r3, #7
 800a14c:	4613      	mov	r3, r2
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	4413      	add	r3, r2
 800a152:	00db      	lsls	r3, r3, #3
 800a154:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	4413      	add	r3, r2
 800a15c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a164:	78fb      	ldrb	r3, [r7, #3]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800a170:	883b      	ldrh	r3, [r7, #0]
 800a172:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	78ba      	ldrb	r2, [r7, #2]
 800a17e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a180:	78bb      	ldrb	r3, [r7, #2]
 800a182:	2b02      	cmp	r3, #2
 800a184:	d102      	bne.n	800a18c <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a192:	2b01      	cmp	r3, #1
 800a194:	d101      	bne.n	800a19a <HAL_PCD_EP_Open+0x98>
 800a196:	2302      	movs	r3, #2
 800a198:	e00e      	b.n	800a1b8 <HAL_PCD_EP_Open+0xb6>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2201      	movs	r2, #1
 800a19e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68f9      	ldr	r1, [r7, #12]
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f006 fe55 	bl	8010e58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800a1b6:	7afb      	ldrb	r3, [r7, #11]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a1cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	da0e      	bge.n	800a1f2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1d4:	78fb      	ldrb	r3, [r7, #3]
 800a1d6:	f003 0207 	and.w	r2, r3, #7
 800a1da:	4613      	mov	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	00db      	lsls	r3, r3, #3
 800a1e2:	3310      	adds	r3, #16
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	705a      	strb	r2, [r3, #1]
 800a1f0:	e00e      	b.n	800a210 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1f2:	78fb      	ldrb	r3, [r7, #3]
 800a1f4:	f003 0207 	and.w	r2, r3, #7
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4413      	add	r3, r2
 800a1fe:	00db      	lsls	r3, r3, #3
 800a200:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	4413      	add	r3, r2
 800a208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	f003 0307 	and.w	r3, r3, #7
 800a216:	b2da      	uxtb	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a222:	2b01      	cmp	r3, #1
 800a224:	d101      	bne.n	800a22a <HAL_PCD_EP_Close+0x6a>
 800a226:	2302      	movs	r3, #2
 800a228:	e00e      	b.n	800a248 <HAL_PCD_EP_Close+0x88>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2201      	movs	r2, #1
 800a22e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68f9      	ldr	r1, [r7, #12]
 800a238:	4618      	mov	r0, r3
 800a23a:	f007 faf5 	bl	8011828 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3710      	adds	r7, #16
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	607a      	str	r2, [r7, #4]
 800a25a:	603b      	str	r3, [r7, #0]
 800a25c:	460b      	mov	r3, r1
 800a25e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a260:	7afb      	ldrb	r3, [r7, #11]
 800a262:	f003 0207 	and.w	r2, r3, #7
 800a266:	4613      	mov	r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4413      	add	r3, r2
 800a26c:	00db      	lsls	r3, r3, #3
 800a26e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	4413      	add	r3, r2
 800a276:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	2200      	movs	r2, #0
 800a288:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	2200      	movs	r2, #0
 800a28e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a290:	7afb      	ldrb	r3, [r7, #11]
 800a292:	f003 0307 	and.w	r3, r3, #7
 800a296:	b2da      	uxtb	r2, r3
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6979      	ldr	r1, [r7, #20]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f007 fcad 	bl	8011c02 <USB_EPStartXfer>

  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3718      	adds	r7, #24
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a2b2:	b480      	push	{r7}
 800a2b4:	b083      	sub	sp, #12
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a2be:	78fb      	ldrb	r3, [r7, #3]
 800a2c0:	f003 0207 	and.w	r2, r3, #7
 800a2c4:	6879      	ldr	r1, [r7, #4]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	4413      	add	r3, r2
 800a2cc:	00db      	lsls	r3, r3, #3
 800a2ce:	440b      	add	r3, r1
 800a2d0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a2d4:	681b      	ldr	r3, [r3, #0]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b086      	sub	sp, #24
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	607a      	str	r2, [r7, #4]
 800a2ec:	603b      	str	r3, [r7, #0]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a2f2:	7afb      	ldrb	r3, [r7, #11]
 800a2f4:	f003 0207 	and.w	r2, r3, #7
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	00db      	lsls	r3, r3, #3
 800a300:	3310      	adds	r3, #16
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	4413      	add	r3, r2
 800a306:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	683a      	ldr	r2, [r7, #0]
 800a312:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	2200      	movs	r2, #0
 800a326:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	2201      	movs	r2, #1
 800a32c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a32e:	7afb      	ldrb	r3, [r7, #11]
 800a330:	f003 0307 	and.w	r3, r3, #7
 800a334:	b2da      	uxtb	r2, r3
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	6979      	ldr	r1, [r7, #20]
 800a340:	4618      	mov	r0, r3
 800a342:	f007 fc5e 	bl	8011c02 <USB_EPStartXfer>

  return HAL_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3718      	adds	r7, #24
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	460b      	mov	r3, r1
 800a35a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a35c:	78fb      	ldrb	r3, [r7, #3]
 800a35e:	f003 0307 	and.w	r3, r3, #7
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	7912      	ldrb	r2, [r2, #4]
 800a366:	4293      	cmp	r3, r2
 800a368:	d901      	bls.n	800a36e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	e03e      	b.n	800a3ec <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a36e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a372:	2b00      	cmp	r3, #0
 800a374:	da0e      	bge.n	800a394 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a376:	78fb      	ldrb	r3, [r7, #3]
 800a378:	f003 0207 	and.w	r2, r3, #7
 800a37c:	4613      	mov	r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	4413      	add	r3, r2
 800a382:	00db      	lsls	r3, r3, #3
 800a384:	3310      	adds	r3, #16
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	4413      	add	r3, r2
 800a38a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2201      	movs	r2, #1
 800a390:	705a      	strb	r2, [r3, #1]
 800a392:	e00c      	b.n	800a3ae <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a394:	78fa      	ldrb	r2, [r7, #3]
 800a396:	4613      	mov	r3, r2
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	4413      	add	r3, r2
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a3b4:	78fb      	ldrb	r3, [r7, #3]
 800a3b6:	f003 0307 	and.w	r3, r3, #7
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d101      	bne.n	800a3ce <HAL_PCD_EP_SetStall+0x7e>
 800a3ca:	2302      	movs	r3, #2
 800a3cc:	e00e      	b.n	800a3ec <HAL_PCD_EP_SetStall+0x9c>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68f9      	ldr	r1, [r7, #12]
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f008 f9bf 	bl	8012760 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a400:	78fb      	ldrb	r3, [r7, #3]
 800a402:	f003 030f 	and.w	r3, r3, #15
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	7912      	ldrb	r2, [r2, #4]
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d901      	bls.n	800a412 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e040      	b.n	800a494 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a412:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a416:	2b00      	cmp	r3, #0
 800a418:	da0e      	bge.n	800a438 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a41a:	78fb      	ldrb	r3, [r7, #3]
 800a41c:	f003 0207 	and.w	r2, r3, #7
 800a420:	4613      	mov	r3, r2
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4413      	add	r3, r2
 800a426:	00db      	lsls	r3, r3, #3
 800a428:	3310      	adds	r3, #16
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	4413      	add	r3, r2
 800a42e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2201      	movs	r2, #1
 800a434:	705a      	strb	r2, [r3, #1]
 800a436:	e00e      	b.n	800a456 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a438:	78fb      	ldrb	r3, [r7, #3]
 800a43a:	f003 0207 	and.w	r2, r3, #7
 800a43e:	4613      	mov	r3, r2
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4413      	add	r3, r2
 800a444:	00db      	lsls	r3, r3, #3
 800a446:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	4413      	add	r3, r2
 800a44e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	b2da      	uxtb	r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d101      	bne.n	800a476 <HAL_PCD_EP_ClrStall+0x82>
 800a472:	2302      	movs	r3, #2
 800a474:	e00e      	b.n	800a494 <HAL_PCD_EP_ClrStall+0xa0>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2201      	movs	r2, #1
 800a47a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68f9      	ldr	r1, [r7, #12]
 800a484:	4618      	mov	r0, r3
 800a486:	f008 f9bc 	bl	8012802 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b092      	sub	sp, #72	@ 0x48
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a4a4:	e333      	b.n	800ab0e <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a4ae:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a4b0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	f003 030f 	and.w	r3, r3, #15
 800a4b8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800a4bc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f040 8108 	bne.w	800a6d6 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a4c6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a4c8:	f003 0310 	and.w	r3, r3, #16
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d14c      	bne.n	800a56a <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	881b      	ldrh	r3, [r3, #0]
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a4dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4e0:	813b      	strh	r3, [r7, #8]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	893b      	ldrh	r3, [r7, #8]
 800a4e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	3310      	adds	r3, #16
 800a4f8:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a502:	b29b      	uxth	r3, r3
 800a504:	461a      	mov	r2, r3
 800a506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	00db      	lsls	r3, r3, #3
 800a50c:	4413      	add	r3, r2
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	6812      	ldr	r2, [r2, #0]
 800a512:	4413      	add	r3, r2
 800a514:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a518:	881b      	ldrh	r3, [r3, #0]
 800a51a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a51e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a520:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a524:	695a      	ldr	r2, [r3, #20]
 800a526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a528:	69db      	ldr	r3, [r3, #28]
 800a52a:	441a      	add	r2, r3
 800a52c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a52e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a530:	2100      	movs	r1, #0
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f00e fa77 	bl	8018a26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	7b1b      	ldrb	r3, [r3, #12]
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	2b00      	cmp	r3, #0
 800a540:	f000 82e5 	beq.w	800ab0e <PCD_EP_ISR_Handler+0x672>
 800a544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a546:	699b      	ldr	r3, [r3, #24]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f040 82e0 	bne.w	800ab0e <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	7b1b      	ldrb	r3, [r3, #12]
 800a552:	b2db      	uxtb	r3, r3
 800a554:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	731a      	strb	r2, [r3, #12]
 800a568:	e2d1      	b.n	800ab0e <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a570:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	881b      	ldrh	r3, [r3, #0]
 800a578:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a57a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a57c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a580:	2b00      	cmp	r3, #0
 800a582:	d032      	beq.n	800a5ea <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	461a      	mov	r2, r3
 800a590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	00db      	lsls	r3, r3, #3
 800a596:	4413      	add	r3, r2
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	6812      	ldr	r2, [r2, #0]
 800a59c:	4413      	add	r3, r2
 800a59e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a5a2:	881b      	ldrh	r3, [r3, #0]
 800a5a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a5a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5aa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6818      	ldr	r0, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800a5b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5b8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a5ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5bc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	f008 fa45 	bl	8012a4e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	881b      	ldrh	r3, [r3, #0]
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	817b      	strh	r3, [r7, #10]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	897a      	ldrh	r2, [r7, #10]
 800a5da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a5de:	b292      	uxth	r2, r2
 800a5e0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f00e f9f2 	bl	80189cc <HAL_PCD_SetupStageCallback>
 800a5e8:	e291      	b.n	800ab0e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a5ea:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f280 828d 	bge.w	800ab0e <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	881b      	ldrh	r3, [r3, #0]
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a600:	4013      	ands	r3, r2
 800a602:	81fb      	strh	r3, [r7, #14]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	89fa      	ldrh	r2, [r7, #14]
 800a60a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a60e:	b292      	uxth	r2, r2
 800a610:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	461a      	mov	r2, r3
 800a61e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	00db      	lsls	r3, r3, #3
 800a624:	4413      	add	r3, r2
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	6812      	ldr	r2, [r2, #0]
 800a62a:	4413      	add	r3, r2
 800a62c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a630:	881b      	ldrh	r3, [r3, #0]
 800a632:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a638:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a63a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a63c:	69db      	ldr	r3, [r3, #28]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d019      	beq.n	800a676 <PCD_EP_ISR_Handler+0x1da>
 800a642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a644:	695b      	ldr	r3, [r3, #20]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d015      	beq.n	800a676 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6818      	ldr	r0, [r3, #0]
 800a64e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a650:	6959      	ldr	r1, [r3, #20]
 800a652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a654:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a658:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	f008 f9f7 	bl	8012a4e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a662:	695a      	ldr	r2, [r3, #20]
 800a664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a666:	69db      	ldr	r3, [r3, #28]
 800a668:	441a      	add	r2, r3
 800a66a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a66c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a66e:	2100      	movs	r1, #0
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f00e f9bd 	bl	80189f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800a67e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a680:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a684:	2b00      	cmp	r3, #0
 800a686:	f040 8242 	bne.w	800ab0e <PCD_EP_ISR_Handler+0x672>
 800a68a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a68c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a690:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a694:	f000 823b 	beq.w	800ab0e <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	881b      	ldrh	r3, [r3, #0]
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a6a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6a8:	81bb      	strh	r3, [r7, #12]
 800a6aa:	89bb      	ldrh	r3, [r7, #12]
 800a6ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a6b0:	81bb      	strh	r3, [r7, #12]
 800a6b2:	89bb      	ldrh	r3, [r7, #12]
 800a6b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a6b8:	81bb      	strh	r3, [r7, #12]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	89bb      	ldrh	r3, [r7, #12]
 800a6c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	8013      	strh	r3, [r2, #0]
 800a6d4:	e21b      	b.n	800ab0e <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	4413      	add	r3, r2
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a6e8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f280 80f1 	bge.w	800a8d4 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4413      	add	r3, r2
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	b29a      	uxth	r2, r3
 800a704:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a708:	4013      	ands	r3, r2
 800a70a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	461a      	mov	r2, r3
 800a712:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a71c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a720:	b292      	uxth	r2, r2
 800a722:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a724:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800a728:	4613      	mov	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	00db      	lsls	r3, r3, #3
 800a730:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	4413      	add	r3, r2
 800a738:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a73a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a73c:	7b1b      	ldrb	r3, [r3, #12]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d123      	bne.n	800a78a <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	461a      	mov	r2, r3
 800a74e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	00db      	lsls	r3, r3, #3
 800a754:	4413      	add	r3, r2
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	6812      	ldr	r2, [r2, #0]
 800a75a:	4413      	add	r3, r2
 800a75c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a760:	881b      	ldrh	r3, [r3, #0]
 800a762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a766:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800a76a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a76e:	2b00      	cmp	r3, #0
 800a770:	f000 808b 	beq.w	800a88a <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6818      	ldr	r0, [r3, #0]
 800a778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a77a:	6959      	ldr	r1, [r3, #20]
 800a77c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a77e:	88da      	ldrh	r2, [r3, #6]
 800a780:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a784:	f008 f963 	bl	8012a4e <USB_ReadPMA>
 800a788:	e07f      	b.n	800a88a <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a78a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a78c:	78db      	ldrb	r3, [r3, #3]
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d109      	bne.n	800a7a6 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a792:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a794:	461a      	mov	r2, r3
 800a796:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 f9c6 	bl	800ab2a <HAL_PCD_EP_DB_Receive>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a7a4:	e071      	b.n	800a88a <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	881b      	ldrh	r3, [r3, #0]
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7c0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	441a      	add	r2, r3
 800a7d0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a7d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	881b      	ldrh	r3, [r3, #0]
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d022      	beq.n	800a846 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a808:	b29b      	uxth	r3, r3
 800a80a:	461a      	mov	r2, r3
 800a80c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	00db      	lsls	r3, r3, #3
 800a812:	4413      	add	r3, r2
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	6812      	ldr	r2, [r2, #0]
 800a818:	4413      	add	r3, r2
 800a81a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a824:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800a828:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d02c      	beq.n	800a88a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6818      	ldr	r0, [r3, #0]
 800a834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a836:	6959      	ldr	r1, [r3, #20]
 800a838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a83a:	891a      	ldrh	r2, [r3, #8]
 800a83c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a840:	f008 f905 	bl	8012a4e <USB_ReadPMA>
 800a844:	e021      	b.n	800a88a <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a84e:	b29b      	uxth	r3, r3
 800a850:	461a      	mov	r2, r3
 800a852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	00db      	lsls	r3, r3, #3
 800a858:	4413      	add	r3, r2
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	6812      	ldr	r2, [r2, #0]
 800a85e:	4413      	add	r3, r2
 800a860:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a864:	881b      	ldrh	r3, [r3, #0]
 800a866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a86a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800a86e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a872:	2b00      	cmp	r3, #0
 800a874:	d009      	beq.n	800a88a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6818      	ldr	r0, [r3, #0]
 800a87a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a87c:	6959      	ldr	r1, [r3, #20]
 800a87e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a880:	895a      	ldrh	r2, [r3, #10]
 800a882:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a886:	f008 f8e2 	bl	8012a4e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a88a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a88c:	69da      	ldr	r2, [r3, #28]
 800a88e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a892:	441a      	add	r2, r3
 800a894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a896:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a89a:	695a      	ldr	r2, [r3, #20]
 800a89c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a8a0:	441a      	add	r2, r3
 800a8a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8a4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a8a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8a8:	699b      	ldr	r3, [r3, #24]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d005      	beq.n	800a8ba <PCD_EP_ISR_Handler+0x41e>
 800a8ae:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800a8b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d206      	bcs.n	800a8c8 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a8ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	4619      	mov	r1, r3
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f00e f895 	bl	80189f0 <HAL_PCD_DataOutStageCallback>
 800a8c6:	e005      	b.n	800a8d4 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f007 f997 	bl	8011c02 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a8d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a8d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f000 8117 	beq.w	800ab0e <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800a8e0:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	4413      	add	r3, r2
 800a8ea:	00db      	lsls	r3, r3, #3
 800a8ec:	3310      	adds	r3, #16
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	4413      	add	r3, r2
 800a902:	881b      	ldrh	r3, [r3, #0]
 800a904:	b29b      	uxth	r3, r3
 800a906:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a90a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a90e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	461a      	mov	r2, r3
 800a916:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	441a      	add	r2, r3
 800a91e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a928:	b29b      	uxth	r3, r3
 800a92a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a92c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a92e:	78db      	ldrb	r3, [r3, #3]
 800a930:	2b01      	cmp	r3, #1
 800a932:	f040 80a1 	bne.w	800aa78 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800a936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a938:	2200      	movs	r2, #0
 800a93a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a93c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a93e:	7b1b      	ldrb	r3, [r3, #12]
 800a940:	2b00      	cmp	r3, #0
 800a942:	f000 8092 	beq.w	800aa6a <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a946:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d046      	beq.n	800a9de <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a952:	785b      	ldrb	r3, [r3, #1]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d126      	bne.n	800a9a6 <PCD_EP_ISR_Handler+0x50a>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	617b      	str	r3, [r7, #20]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a966:	b29b      	uxth	r3, r3
 800a968:	461a      	mov	r2, r3
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	4413      	add	r3, r2
 800a96e:	617b      	str	r3, [r7, #20]
 800a970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	00da      	lsls	r2, r3, #3
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	4413      	add	r3, r2
 800a97a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a97e:	613b      	str	r3, [r7, #16]
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	881b      	ldrh	r3, [r3, #0]
 800a984:	b29b      	uxth	r3, r3
 800a986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	801a      	strh	r2, [r3, #0]
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	881b      	ldrh	r3, [r3, #0]
 800a994:	b29b      	uxth	r3, r3
 800a996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a99a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a99e:	b29a      	uxth	r2, r3
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	801a      	strh	r2, [r3, #0]
 800a9a4:	e061      	b.n	800aa6a <PCD_EP_ISR_Handler+0x5ce>
 800a9a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9a8:	785b      	ldrb	r3, [r3, #1]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d15d      	bne.n	800aa6a <PCD_EP_ISR_Handler+0x5ce>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	61fb      	str	r3, [r7, #28]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	461a      	mov	r2, r3
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	61fb      	str	r3, [r7, #28]
 800a9c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	00da      	lsls	r2, r3, #3
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a9d4:	61bb      	str	r3, [r7, #24]
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	801a      	strh	r2, [r3, #0]
 800a9dc:	e045      	b.n	800aa6a <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9e6:	785b      	ldrb	r3, [r3, #1]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d126      	bne.n	800aa3a <PCD_EP_ISR_Handler+0x59e>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa00:	4413      	add	r3, r2
 800aa02:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	00da      	lsls	r2, r3, #3
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa12:	623b      	str	r3, [r7, #32]
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	881b      	ldrh	r3, [r3, #0]
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	6a3b      	ldr	r3, [r7, #32]
 800aa22:	801a      	strh	r2, [r3, #0]
 800aa24:	6a3b      	ldr	r3, [r7, #32]
 800aa26:	881b      	ldrh	r3, [r3, #0]
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	6a3b      	ldr	r3, [r7, #32]
 800aa36:	801a      	strh	r2, [r3, #0]
 800aa38:	e017      	b.n	800aa6a <PCD_EP_ISR_Handler+0x5ce>
 800aa3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa3c:	785b      	ldrb	r3, [r3, #1]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d113      	bne.n	800aa6a <PCD_EP_ISR_Handler+0x5ce>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa50:	4413      	add	r3, r2
 800aa52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	00da      	lsls	r2, r3, #3
 800aa5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5c:	4413      	add	r3, r2
 800aa5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa62:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa66:	2200      	movs	r2, #0
 800aa68:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aa6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f00d ffd8 	bl	8018a26 <HAL_PCD_DataInStageCallback>
 800aa76:	e04a      	b.n	800ab0e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800aa78:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aa7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d13f      	bne.n	800ab02 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	00db      	lsls	r3, r3, #3
 800aa94:	4413      	add	r3, r2
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	6812      	ldr	r2, [r2, #0]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aaa0:	881b      	ldrh	r3, [r3, #0]
 800aaa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aaa6:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800aaa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaaa:	699a      	ldr	r2, [r3, #24]
 800aaac:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d906      	bls.n	800aac0 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800aab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aab4:	699a      	ldr	r2, [r3, #24]
 800aab6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800aab8:	1ad2      	subs	r2, r2, r3
 800aaba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aabc:	619a      	str	r2, [r3, #24]
 800aabe:	e002      	b.n	800aac6 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800aac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aac2:	2200      	movs	r2, #0
 800aac4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800aac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aac8:	699b      	ldr	r3, [r3, #24]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d106      	bne.n	800aadc <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	4619      	mov	r1, r3
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f00d ffa6 	bl	8018a26 <HAL_PCD_DataInStageCallback>
 800aada:	e018      	b.n	800ab0e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800aadc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aade:	695a      	ldr	r2, [r3, #20]
 800aae0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800aae2:	441a      	add	r2, r3
 800aae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aae6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800aae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaea:	69da      	ldr	r2, [r3, #28]
 800aaec:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800aaee:	441a      	add	r2, r3
 800aaf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaf2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aafa:	4618      	mov	r0, r3
 800aafc:	f007 f881 	bl	8011c02 <USB_EPStartXfer>
 800ab00:	e005      	b.n	800ab0e <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800ab02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab04:	461a      	mov	r2, r3
 800ab06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f917 	bl	800ad3c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	b21b      	sxth	r3, r3
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f6ff acc3 	blt.w	800a4a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3748      	adds	r7, #72	@ 0x48
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b088      	sub	sp, #32
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	60f8      	str	r0, [r7, #12]
 800ab32:	60b9      	str	r1, [r7, #8]
 800ab34:	4613      	mov	r3, r2
 800ab36:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ab38:	88fb      	ldrh	r3, [r7, #6]
 800ab3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d07c      	beq.n	800ac3c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	00db      	lsls	r3, r3, #3
 800ab54:	4413      	add	r3, r2
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	6812      	ldr	r2, [r2, #0]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ab60:	881b      	ldrh	r3, [r3, #0]
 800ab62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab66:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	699a      	ldr	r2, [r3, #24]
 800ab6c:	8b7b      	ldrh	r3, [r7, #26]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d306      	bcc.n	800ab80 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	699a      	ldr	r2, [r3, #24]
 800ab76:	8b7b      	ldrh	r3, [r7, #26]
 800ab78:	1ad2      	subs	r2, r2, r3
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	619a      	str	r2, [r3, #24]
 800ab7e:	e002      	b.n	800ab86 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	2200      	movs	r2, #0
 800ab84:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d123      	bne.n	800abd6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	461a      	mov	r2, r3
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	4413      	add	r3, r2
 800ab9c:	881b      	ldrh	r3, [r3, #0]
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aba8:	833b      	strh	r3, [r7, #24]
 800abaa:	8b3b      	ldrh	r3, [r7, #24]
 800abac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800abb0:	833b      	strh	r3, [r7, #24]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	461a      	mov	r2, r3
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	441a      	add	r2, r3
 800abc0:	8b3b      	ldrh	r3, [r7, #24]
 800abc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800abd6:	88fb      	ldrh	r3, [r7, #6]
 800abd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d01f      	beq.n	800ac20 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	461a      	mov	r2, r3
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	4413      	add	r3, r2
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abfa:	82fb      	strh	r3, [r7, #22]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	461a      	mov	r2, r3
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	441a      	add	r2, r3
 800ac0a:	8afb      	ldrh	r3, [r7, #22]
 800ac0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800ac20:	8b7b      	ldrh	r3, [r7, #26]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	f000 8085 	beq.w	800ad32 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6818      	ldr	r0, [r3, #0]
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	6959      	ldr	r1, [r3, #20]
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	891a      	ldrh	r2, [r3, #8]
 800ac34:	8b7b      	ldrh	r3, [r7, #26]
 800ac36:	f007 ff0a 	bl	8012a4e <USB_ReadPMA>
 800ac3a:	e07a      	b.n	800ad32 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	461a      	mov	r2, r3
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	00db      	lsls	r3, r3, #3
 800ac4e:	4413      	add	r3, r2
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	6812      	ldr	r2, [r2, #0]
 800ac54:	4413      	add	r3, r2
 800ac56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ac5a:	881b      	ldrh	r3, [r3, #0]
 800ac5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac60:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	699a      	ldr	r2, [r3, #24]
 800ac66:	8b7b      	ldrh	r3, [r7, #26]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d306      	bcc.n	800ac7a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	699a      	ldr	r2, [r3, #24]
 800ac70:	8b7b      	ldrh	r3, [r7, #26]
 800ac72:	1ad2      	subs	r2, r2, r3
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	619a      	str	r2, [r3, #24]
 800ac78:	e002      	b.n	800ac80 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	699b      	ldr	r3, [r3, #24]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d123      	bne.n	800acd0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	881b      	ldrh	r3, [r3, #0]
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aca2:	83fb      	strh	r3, [r7, #30]
 800aca4:	8bfb      	ldrh	r3, [r7, #30]
 800aca6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800acaa:	83fb      	strh	r3, [r7, #30]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	461a      	mov	r2, r3
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	441a      	add	r2, r3
 800acba:	8bfb      	ldrh	r3, [r7, #30]
 800acbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800accc:	b29b      	uxth	r3, r3
 800acce:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800acd0:	88fb      	ldrh	r3, [r7, #6]
 800acd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d11f      	bne.n	800ad1a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	461a      	mov	r2, r3
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	4413      	add	r3, r2
 800ace8:	881b      	ldrh	r3, [r3, #0]
 800acea:	b29b      	uxth	r3, r3
 800acec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acf4:	83bb      	strh	r3, [r7, #28]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	441a      	add	r2, r3
 800ad04:	8bbb      	ldrh	r3, [r7, #28]
 800ad06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800ad1a:	8b7b      	ldrh	r3, [r7, #26]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d008      	beq.n	800ad32 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6818      	ldr	r0, [r3, #0]
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	6959      	ldr	r1, [r3, #20]
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	895a      	ldrh	r2, [r3, #10]
 800ad2c:	8b7b      	ldrh	r3, [r7, #26]
 800ad2e:	f007 fe8e 	bl	8012a4e <USB_ReadPMA>
    }
  }

  return count;
 800ad32:	8b7b      	ldrh	r3, [r7, #26]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3720      	adds	r7, #32
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b0a6      	sub	sp, #152	@ 0x98
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	4613      	mov	r3, r2
 800ad48:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ad4a:	88fb      	ldrh	r3, [r7, #6]
 800ad4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f000 81f7 	beq.w	800b144 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	461a      	mov	r2, r3
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	00db      	lsls	r3, r3, #3
 800ad68:	4413      	add	r3, r2
 800ad6a:	68fa      	ldr	r2, [r7, #12]
 800ad6c:	6812      	ldr	r2, [r2, #0]
 800ad6e:	4413      	add	r3, r2
 800ad70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ad74:	881b      	ldrh	r3, [r3, #0]
 800ad76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad7a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	699a      	ldr	r2, [r3, #24]
 800ad82:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d907      	bls.n	800ad9a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	699a      	ldr	r2, [r3, #24]
 800ad8e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ad92:	1ad2      	subs	r2, r2, r3
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	619a      	str	r2, [r3, #24]
 800ad98:	e002      	b.n	800ada0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f040 80e1 	bne.w	800af6c <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	785b      	ldrb	r3, [r3, #1]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d126      	bne.n	800ae00 <HAL_PCD_EP_DB_Transmit+0xc4>
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	633b      	str	r3, [r7, #48]	@ 0x30
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	461a      	mov	r2, r3
 800adc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc6:	4413      	add	r3, r2
 800adc8:	633b      	str	r3, [r7, #48]	@ 0x30
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	00da      	lsls	r2, r3, #3
 800add0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add2:	4413      	add	r3, r2
 800add4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800add8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800adda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800addc:	881b      	ldrh	r3, [r3, #0]
 800adde:	b29b      	uxth	r3, r3
 800ade0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade8:	801a      	strh	r2, [r3, #0]
 800adea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adec:	881b      	ldrh	r3, [r3, #0]
 800adee:	b29b      	uxth	r3, r3
 800adf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adfc:	801a      	strh	r2, [r3, #0]
 800adfe:	e01a      	b.n	800ae36 <HAL_PCD_EP_DB_Transmit+0xfa>
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	785b      	ldrb	r3, [r3, #1]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d116      	bne.n	800ae36 <HAL_PCD_EP_DB_Transmit+0xfa>
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	461a      	mov	r2, r3
 800ae1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1c:	4413      	add	r3, r2
 800ae1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	00da      	lsls	r2, r3, #3
 800ae26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae28:	4413      	add	r3, r2
 800ae2a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae32:	2200      	movs	r2, #0
 800ae34:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	785b      	ldrb	r3, [r3, #1]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d126      	bne.n	800ae92 <HAL_PCD_EP_DB_Transmit+0x156>
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	623b      	str	r3, [r7, #32]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	461a      	mov	r2, r3
 800ae56:	6a3b      	ldr	r3, [r7, #32]
 800ae58:	4413      	add	r3, r2
 800ae5a:	623b      	str	r3, [r7, #32]
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	00da      	lsls	r2, r3, #3
 800ae62:	6a3b      	ldr	r3, [r7, #32]
 800ae64:	4413      	add	r3, r2
 800ae66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ae6a:	61fb      	str	r3, [r7, #28]
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	881b      	ldrh	r3, [r3, #0]
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae76:	b29a      	uxth	r2, r3
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	801a      	strh	r2, [r3, #0]
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	881b      	ldrh	r3, [r3, #0]
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	801a      	strh	r2, [r3, #0]
 800ae90:	e017      	b.n	800aec2 <HAL_PCD_EP_DB_Transmit+0x186>
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	785b      	ldrb	r3, [r3, #1]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d113      	bne.n	800aec2 <HAL_PCD_EP_DB_Transmit+0x186>
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	461a      	mov	r2, r3
 800aea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea8:	4413      	add	r3, r2
 800aeaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	00da      	lsls	r2, r3, #3
 800aeb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeb4:	4413      	add	r3, r2
 800aeb6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aeba:	627b      	str	r3, [r7, #36]	@ 0x24
 800aebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aebe:	2200      	movs	r2, #0
 800aec0:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	78db      	ldrb	r3, [r3, #3]
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d123      	bne.n	800af12 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4413      	add	r3, r2
 800aed8:	881b      	ldrh	r3, [r3, #0]
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aee4:	837b      	strh	r3, [r7, #26]
 800aee6:	8b7b      	ldrh	r3, [r7, #26]
 800aee8:	f083 0320 	eor.w	r3, r3, #32
 800aeec:	837b      	strh	r3, [r7, #26]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	461a      	mov	r2, r3
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	441a      	add	r2, r3
 800aefc:	8b7b      	ldrh	r3, [r7, #26]
 800aefe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af0e:	b29b      	uxth	r3, r3
 800af10:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	4619      	mov	r1, r3
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f00d fd84 	bl	8018a26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800af1e:	88fb      	ldrh	r3, [r7, #6]
 800af20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af24:	2b00      	cmp	r3, #0
 800af26:	d01f      	beq.n	800af68 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	461a      	mov	r2, r3
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	881b      	ldrh	r3, [r3, #0]
 800af38:	b29b      	uxth	r3, r3
 800af3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af42:	833b      	strh	r3, [r7, #24]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	461a      	mov	r2, r3
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	441a      	add	r2, r3
 800af52:	8b3b      	ldrh	r3, [r7, #24]
 800af54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800af60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af64:	b29b      	uxth	r3, r3
 800af66:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800af68:	2300      	movs	r3, #0
 800af6a:	e31f      	b.n	800b5ac <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800af6c:	88fb      	ldrh	r3, [r7, #6]
 800af6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af72:	2b00      	cmp	r3, #0
 800af74:	d021      	beq.n	800afba <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	461a      	mov	r2, r3
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	4413      	add	r3, r2
 800af84:	881b      	ldrh	r3, [r3, #0]
 800af86:	b29b      	uxth	r3, r3
 800af88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af90:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	461a      	mov	r2, r3
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	441a      	add	r2, r3
 800afa2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800afa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800afb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	f040 82ca 	bne.w	800b55a <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	695a      	ldr	r2, [r3, #20]
 800afca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800afce:	441a      	add	r2, r3
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	69da      	ldr	r2, [r3, #28]
 800afd8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800afdc:	441a      	add	r2, r3
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	6a1a      	ldr	r2, [r3, #32]
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	429a      	cmp	r2, r3
 800afec:	d309      	bcc.n	800b002 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	6a1a      	ldr	r2, [r3, #32]
 800aff8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800affa:	1ad2      	subs	r2, r2, r3
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	621a      	str	r2, [r3, #32]
 800b000:	e015      	b.n	800b02e <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d107      	bne.n	800b01a <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800b00a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b00e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b018:	e009      	b.n	800b02e <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	6a1b      	ldr	r3, [r3, #32]
 800b026:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2200      	movs	r2, #0
 800b02c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	785b      	ldrb	r3, [r3, #1]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d15f      	bne.n	800b0f6 <HAL_PCD_EP_DB_Transmit+0x3ba>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b044:	b29b      	uxth	r3, r3
 800b046:	461a      	mov	r2, r3
 800b048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b04a:	4413      	add	r3, r2
 800b04c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	00da      	lsls	r2, r3, #3
 800b054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b056:	4413      	add	r3, r2
 800b058:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b060:	881b      	ldrh	r3, [r3, #0]
 800b062:	b29b      	uxth	r3, r3
 800b064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b068:	b29a      	uxth	r2, r3
 800b06a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b06c:	801a      	strh	r2, [r3, #0]
 800b06e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10a      	bne.n	800b08a <HAL_PCD_EP_DB_Transmit+0x34e>
 800b074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b076:	881b      	ldrh	r3, [r3, #0]
 800b078:	b29b      	uxth	r3, r3
 800b07a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b07e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b082:	b29a      	uxth	r2, r3
 800b084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b086:	801a      	strh	r2, [r3, #0]
 800b088:	e051      	b.n	800b12e <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b08a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b08c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b08e:	d816      	bhi.n	800b0be <HAL_PCD_EP_DB_Transmit+0x382>
 800b090:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b092:	085b      	lsrs	r3, r3, #1
 800b094:	653b      	str	r3, [r7, #80]	@ 0x50
 800b096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b098:	f003 0301 	and.w	r3, r3, #1
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d002      	beq.n	800b0a6 <HAL_PCD_EP_DB_Transmit+0x36a>
 800b0a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0a8:	881b      	ldrh	r3, [r3, #0]
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	029b      	lsls	r3, r3, #10
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ba:	801a      	strh	r2, [r3, #0]
 800b0bc:	e037      	b.n	800b12e <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b0be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b0c0:	095b      	lsrs	r3, r3, #5
 800b0c2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b0c6:	f003 031f 	and.w	r3, r3, #31
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d102      	bne.n	800b0d4 <HAL_PCD_EP_DB_Transmit+0x398>
 800b0ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	029b      	lsls	r3, r3, #10
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0ee:	b29a      	uxth	r2, r3
 800b0f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0f2:	801a      	strh	r2, [r3, #0]
 800b0f4:	e01b      	b.n	800b12e <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	785b      	ldrb	r3, [r3, #1]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d117      	bne.n	800b12e <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	461a      	mov	r2, r3
 800b110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b112:	4413      	add	r3, r2
 800b114:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	00da      	lsls	r2, r3, #3
 800b11c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b11e:	4413      	add	r3, r2
 800b120:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b124:	647b      	str	r3, [r7, #68]	@ 0x44
 800b126:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b128:	b29a      	uxth	r2, r3
 800b12a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b12c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6818      	ldr	r0, [r3, #0]
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	6959      	ldr	r1, [r3, #20]
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	891a      	ldrh	r2, [r3, #8]
 800b13a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	f007 fc44 	bl	80129ca <USB_WritePMA>
 800b142:	e20a      	b.n	800b55a <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	461a      	mov	r2, r3
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	00db      	lsls	r3, r3, #3
 800b156:	4413      	add	r3, r2
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	6812      	ldr	r2, [r2, #0]
 800b15c:	4413      	add	r3, r2
 800b15e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b162:	881b      	ldrh	r3, [r3, #0]
 800b164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b168:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	699a      	ldr	r2, [r3, #24]
 800b170:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b174:	429a      	cmp	r2, r3
 800b176:	d307      	bcc.n	800b188 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	699a      	ldr	r2, [r3, #24]
 800b17c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b180:	1ad2      	subs	r2, r2, r3
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	619a      	str	r2, [r3, #24]
 800b186:	e002      	b.n	800b18e <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2200      	movs	r2, #0
 800b18c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	699b      	ldr	r3, [r3, #24]
 800b192:	2b00      	cmp	r3, #0
 800b194:	f040 80f6 	bne.w	800b384 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	785b      	ldrb	r3, [r3, #1]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d126      	bne.n	800b1ee <HAL_PCD_EP_DB_Transmit+0x4b2>
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	677b      	str	r3, [r7, #116]	@ 0x74
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b1b4:	4413      	add	r3, r2
 800b1b6:	677b      	str	r3, [r7, #116]	@ 0x74
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	00da      	lsls	r2, r3, #3
 800b1be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b1c0:	4413      	add	r3, r2
 800b1c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b1c6:	673b      	str	r3, [r7, #112]	@ 0x70
 800b1c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1ca:	881b      	ldrh	r3, [r3, #0]
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1d6:	801a      	strh	r2, [r3, #0]
 800b1d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1da:	881b      	ldrh	r3, [r3, #0]
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1ea:	801a      	strh	r2, [r3, #0]
 800b1ec:	e01a      	b.n	800b224 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	785b      	ldrb	r3, [r3, #1]
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d116      	bne.n	800b224 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b204:	b29b      	uxth	r3, r3
 800b206:	461a      	mov	r2, r3
 800b208:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b20a:	4413      	add	r3, r2
 800b20c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	00da      	lsls	r2, r3, #3
 800b214:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b216:	4413      	add	r3, r2
 800b218:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b21c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b21e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b220:	2200      	movs	r2, #0
 800b222:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	785b      	ldrb	r3, [r3, #1]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d12f      	bne.n	800b294 <HAL_PCD_EP_DB_Transmit+0x558>
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b244:	b29b      	uxth	r3, r3
 800b246:	461a      	mov	r2, r3
 800b248:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b24c:	4413      	add	r3, r2
 800b24e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	00da      	lsls	r2, r3, #3
 800b258:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b25c:	4413      	add	r3, r2
 800b25e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b262:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b266:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b26a:	881b      	ldrh	r3, [r3, #0]
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b272:	b29a      	uxth	r2, r3
 800b274:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b278:	801a      	strh	r2, [r3, #0]
 800b27a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b27e:	881b      	ldrh	r3, [r3, #0]
 800b280:	b29b      	uxth	r3, r3
 800b282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b28a:	b29a      	uxth	r2, r3
 800b28c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b290:	801a      	strh	r2, [r3, #0]
 800b292:	e01c      	b.n	800b2ce <HAL_PCD_EP_DB_Transmit+0x592>
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	785b      	ldrb	r3, [r3, #1]
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d118      	bne.n	800b2ce <HAL_PCD_EP_DB_Transmit+0x592>
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b2ac:	4413      	add	r3, r2
 800b2ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	00da      	lsls	r2, r3, #3
 800b2b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b2bc:	4413      	add	r3, r2
 800b2be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b2c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b2c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	78db      	ldrb	r3, [r3, #3]
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	d127      	bne.n	800b326 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	881b      	ldrh	r3, [r3, #0]
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2f0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b2f4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b2f8:	f083 0320 	eor.w	r3, r3, #32
 800b2fc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	461a      	mov	r2, r3
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	441a      	add	r2, r3
 800b30e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b316:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b31a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b31e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b322:	b29b      	uxth	r3, r3
 800b324:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	4619      	mov	r1, r3
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f00d fb7a 	bl	8018a26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b332:	88fb      	ldrh	r3, [r7, #6]
 800b334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d121      	bne.n	800b380 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	461a      	mov	r2, r3
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4413      	add	r3, r2
 800b34a:	881b      	ldrh	r3, [r3, #0]
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b356:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	461a      	mov	r2, r3
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	441a      	add	r2, r3
 800b368:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b36c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b370:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b374:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b380:	2300      	movs	r3, #0
 800b382:	e113      	b.n	800b5ac <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b384:	88fb      	ldrh	r3, [r7, #6]
 800b386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d121      	bne.n	800b3d2 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	461a      	mov	r2, r3
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	4413      	add	r3, r2
 800b39c:	881b      	ldrh	r3, [r3, #0]
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3a8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	441a      	add	r2, r3
 800b3ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b3be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b3c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b3c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b3ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	f040 80be 	bne.w	800b55a <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	695a      	ldr	r2, [r3, #20]
 800b3e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b3e6:	441a      	add	r2, r3
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	69da      	ldr	r2, [r3, #28]
 800b3f0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b3f4:	441a      	add	r2, r3
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	6a1a      	ldr	r2, [r3, #32]
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	691b      	ldr	r3, [r3, #16]
 800b402:	429a      	cmp	r2, r3
 800b404:	d309      	bcc.n	800b41a <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	6a1a      	ldr	r2, [r3, #32]
 800b410:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b412:	1ad2      	subs	r2, r2, r3
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	621a      	str	r2, [r3, #32]
 800b418:	e015      	b.n	800b446 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d107      	bne.n	800b432 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800b422:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b426:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b430:	e009      	b.n	800b446 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	6a1b      	ldr	r3, [r3, #32]
 800b436:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	2200      	movs	r2, #0
 800b43c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	2200      	movs	r2, #0
 800b442:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	785b      	ldrb	r3, [r3, #1]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d15f      	bne.n	800b514 <HAL_PCD_EP_DB_Transmit+0x7d8>
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b462:	b29b      	uxth	r3, r3
 800b464:	461a      	mov	r2, r3
 800b466:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b468:	4413      	add	r3, r2
 800b46a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	00da      	lsls	r2, r3, #3
 800b472:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b474:	4413      	add	r3, r2
 800b476:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b47a:	667b      	str	r3, [r7, #100]	@ 0x64
 800b47c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b47e:	881b      	ldrh	r3, [r3, #0]
 800b480:	b29b      	uxth	r3, r3
 800b482:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b486:	b29a      	uxth	r2, r3
 800b488:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b48a:	801a      	strh	r2, [r3, #0]
 800b48c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d10a      	bne.n	800b4a8 <HAL_PCD_EP_DB_Transmit+0x76c>
 800b492:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b494:	881b      	ldrh	r3, [r3, #0]
 800b496:	b29b      	uxth	r3, r3
 800b498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b49c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4a0:	b29a      	uxth	r2, r3
 800b4a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4a4:	801a      	strh	r2, [r3, #0]
 800b4a6:	e04e      	b.n	800b546 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b4a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4aa:	2b3e      	cmp	r3, #62	@ 0x3e
 800b4ac:	d816      	bhi.n	800b4dc <HAL_PCD_EP_DB_Transmit+0x7a0>
 800b4ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4b0:	085b      	lsrs	r3, r3, #1
 800b4b2:	663b      	str	r3, [r7, #96]	@ 0x60
 800b4b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4b6:	f003 0301 	and.w	r3, r3, #1
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d002      	beq.n	800b4c4 <HAL_PCD_EP_DB_Transmit+0x788>
 800b4be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	663b      	str	r3, [r7, #96]	@ 0x60
 800b4c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4c6:	881b      	ldrh	r3, [r3, #0]
 800b4c8:	b29a      	uxth	r2, r3
 800b4ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	029b      	lsls	r3, r3, #10
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	b29a      	uxth	r2, r3
 800b4d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4d8:	801a      	strh	r2, [r3, #0]
 800b4da:	e034      	b.n	800b546 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b4dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4de:	095b      	lsrs	r3, r3, #5
 800b4e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b4e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4e4:	f003 031f 	and.w	r3, r3, #31
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d102      	bne.n	800b4f2 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800b4ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b4f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4f4:	881b      	ldrh	r3, [r3, #0]
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	029b      	lsls	r3, r3, #10
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	4313      	orrs	r3, r2
 800b502:	b29b      	uxth	r3, r3
 800b504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b510:	801a      	strh	r2, [r3, #0]
 800b512:	e018      	b.n	800b546 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	785b      	ldrb	r3, [r3, #1]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d114      	bne.n	800b546 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b524:	b29b      	uxth	r3, r3
 800b526:	461a      	mov	r2, r3
 800b528:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b52a:	4413      	add	r3, r2
 800b52c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	00da      	lsls	r2, r3, #3
 800b534:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b536:	4413      	add	r3, r2
 800b538:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b53c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b53e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b540:	b29a      	uxth	r2, r3
 800b542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b544:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6818      	ldr	r0, [r3, #0]
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	6959      	ldr	r1, [r3, #20]
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	895a      	ldrh	r2, [r3, #10]
 800b552:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b554:	b29b      	uxth	r3, r3
 800b556:	f007 fa38 	bl	80129ca <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	461a      	mov	r2, r3
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	4413      	add	r3, r2
 800b568:	881b      	ldrh	r3, [r3, #0]
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b570:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b574:	82fb      	strh	r3, [r7, #22]
 800b576:	8afb      	ldrh	r3, [r7, #22]
 800b578:	f083 0310 	eor.w	r3, r3, #16
 800b57c:	82fb      	strh	r3, [r7, #22]
 800b57e:	8afb      	ldrh	r3, [r7, #22]
 800b580:	f083 0320 	eor.w	r3, r3, #32
 800b584:	82fb      	strh	r3, [r7, #22]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	461a      	mov	r2, r3
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	441a      	add	r2, r3
 800b594:	8afb      	ldrh	r3, [r7, #22]
 800b596:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b59a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b59e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3798      	adds	r7, #152	@ 0x98
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b087      	sub	sp, #28
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	607b      	str	r3, [r7, #4]
 800b5be:	460b      	mov	r3, r1
 800b5c0:	817b      	strh	r3, [r7, #10]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b5c6:	897b      	ldrh	r3, [r7, #10]
 800b5c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00b      	beq.n	800b5ea <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b5d2:	897b      	ldrh	r3, [r7, #10]
 800b5d4:	f003 0207 	and.w	r2, r3, #7
 800b5d8:	4613      	mov	r3, r2
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	4413      	add	r3, r2
 800b5de:	00db      	lsls	r3, r3, #3
 800b5e0:	3310      	adds	r3, #16
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	617b      	str	r3, [r7, #20]
 800b5e8:	e009      	b.n	800b5fe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b5ea:	897a      	ldrh	r2, [r7, #10]
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	4413      	add	r3, r2
 800b5f2:	00db      	lsls	r3, r3, #3
 800b5f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b5fe:	893b      	ldrh	r3, [r7, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d107      	bne.n	800b614 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	2200      	movs	r2, #0
 800b608:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	b29a      	uxth	r2, r3
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	80da      	strh	r2, [r3, #6]
 800b612:	e00b      	b.n	800b62c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	2201      	movs	r2, #1
 800b618:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	0c1b      	lsrs	r3, r3, #16
 800b626:	b29a      	uxth	r2, r3
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	371c      	adds	r7, #28
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr

0800b63a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b63a:	b480      	push	{r7}
 800b63c:	b085      	sub	sp, #20
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b65e:	b29b      	uxth	r3, r3
 800b660:	f043 0301 	orr.w	r3, r3, #1
 800b664:	b29a      	uxth	r2, r3
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b672:	b29b      	uxth	r3, r3
 800b674:	f043 0302 	orr.w	r3, r3, #2
 800b678:	b29a      	uxth	r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
	...

0800b690 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b690:	b480      	push	{r7}
 800b692:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b694:	4b05      	ldr	r3, [pc, #20]	@ (800b6ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a04      	ldr	r2, [pc, #16]	@ (800b6ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b69a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b69e:	6013      	str	r3, [r2, #0]
}
 800b6a0:	bf00      	nop
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	58000400 	.word	0x58000400

0800b6b0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800b6b4:	4b04      	ldr	r3, [pc, #16]	@ (800b6c8 <HAL_PWREx_GetVoltageRange+0x18>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop
 800b6c8:	58000400 	.word	0x58000400

0800b6cc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800b6d0:	4b05      	ldr	r3, [pc, #20]	@ (800b6e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	4a04      	ldr	r2, [pc, #16]	@ (800b6e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 800b6d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b6da:	6053      	str	r3, [r2, #4]
}
 800b6dc:	bf00      	nop
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	58000400 	.word	0x58000400

0800b6ec <LL_RCC_HSE_IsEnabledDiv2>:
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800b6f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b6fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6fe:	d101      	bne.n	800b704 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800b700:	2301      	movs	r3, #1
 800b702:	e000      	b.n	800b706 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <LL_RCC_HSE_Enable>:
{
 800b710:	b480      	push	{r7}
 800b712:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800b714:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b71e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b722:	6013      	str	r3, [r2, #0]
}
 800b724:	bf00      	nop
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr

0800b72e <LL_RCC_HSE_Disable>:
{
 800b72e:	b480      	push	{r7}
 800b730:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800b732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b73c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b740:	6013      	str	r3, [r2, #0]
}
 800b742:	bf00      	nop
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <LL_RCC_HSE_IsReady>:
{
 800b74c:	b480      	push	{r7}
 800b74e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800b750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b75a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b75e:	d101      	bne.n	800b764 <LL_RCC_HSE_IsReady+0x18>
 800b760:	2301      	movs	r3, #1
 800b762:	e000      	b.n	800b766 <LL_RCC_HSE_IsReady+0x1a>
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <LL_RCC_HSI_Enable>:
{
 800b770:	b480      	push	{r7}
 800b772:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b774:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b77e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b782:	6013      	str	r3, [r2, #0]
}
 800b784:	bf00      	nop
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr

0800b78e <LL_RCC_HSI_Disable>:
{
 800b78e:	b480      	push	{r7}
 800b790:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800b792:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b79c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7a0:	6013      	str	r3, [r2, #0]
}
 800b7a2:	bf00      	nop
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr

0800b7ac <LL_RCC_HSI_IsReady>:
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800b7b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7be:	d101      	bne.n	800b7c4 <LL_RCC_HSI_IsReady+0x18>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e000      	b.n	800b7c6 <LL_RCC_HSI_IsReady+0x1a>
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <LL_RCC_HSI_SetCalibTrimming>:
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800b7d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	061b      	lsls	r3, r3, #24
 800b7e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	604b      	str	r3, [r1, #4]
}
 800b7ee:	bf00      	nop
 800b7f0:	370c      	adds	r7, #12
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <LL_RCC_HSI48_Enable>:
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b7fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b802:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b806:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b80a:	f043 0301 	orr.w	r3, r3, #1
 800b80e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800b812:	bf00      	nop
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <LL_RCC_HSI48_Disable>:
{
 800b81c:	b480      	push	{r7}
 800b81e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b824:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b828:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b82c:	f023 0301 	bic.w	r3, r3, #1
 800b830:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800b834:	bf00      	nop
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr

0800b83e <LL_RCC_HSI48_IsReady>:
{
 800b83e:	b480      	push	{r7}
 800b840:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800b842:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b846:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b84a:	f003 0302 	and.w	r3, r3, #2
 800b84e:	2b02      	cmp	r3, #2
 800b850:	d101      	bne.n	800b856 <LL_RCC_HSI48_IsReady+0x18>
 800b852:	2301      	movs	r3, #1
 800b854:	e000      	b.n	800b858 <LL_RCC_HSI48_IsReady+0x1a>
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr

0800b862 <LL_RCC_LSE_Enable>:
{
 800b862:	b480      	push	{r7}
 800b864:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b86a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b86e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b872:	f043 0301 	orr.w	r3, r3, #1
 800b876:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b87a:	bf00      	nop
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <LL_RCC_LSE_Disable>:
{
 800b884:	b480      	push	{r7}
 800b886:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b88c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b890:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b894:	f023 0301 	bic.w	r3, r3, #1
 800b898:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b89c:	bf00      	nop
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr

0800b8a6 <LL_RCC_LSE_EnableBypass>:
{
 800b8a6:	b480      	push	{r7}
 800b8a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b8aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8b6:	f043 0304 	orr.w	r3, r3, #4
 800b8ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b8be:	bf00      	nop
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <LL_RCC_LSE_DisableBypass>:
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b8cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8d8:	f023 0304 	bic.w	r3, r3, #4
 800b8dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b8e0:	bf00      	nop
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <LL_RCC_LSE_IsReady>:
{
 800b8ea:	b480      	push	{r7}
 800b8ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b8ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8f6:	f003 0302 	and.w	r3, r3, #2
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	d101      	bne.n	800b902 <LL_RCC_LSE_IsReady+0x18>
 800b8fe:	2301      	movs	r3, #1
 800b900:	e000      	b.n	800b904 <LL_RCC_LSE_IsReady+0x1a>
 800b902:	2300      	movs	r3, #0
}
 800b904:	4618      	mov	r0, r3
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <LL_RCC_LSI1_Enable>:
{
 800b90e:	b480      	push	{r7}
 800b910:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b916:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b91a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b91e:	f043 0301 	orr.w	r3, r3, #1
 800b922:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b926:	bf00      	nop
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <LL_RCC_LSI1_Disable>:
{
 800b930:	b480      	push	{r7}
 800b932:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b938:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b93c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b940:	f023 0301 	bic.w	r3, r3, #1
 800b944:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b948:	bf00      	nop
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr

0800b952 <LL_RCC_LSI1_IsReady>:
{
 800b952:	b480      	push	{r7}
 800b954:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800b956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b95a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b95e:	f003 0302 	and.w	r3, r3, #2
 800b962:	2b02      	cmp	r3, #2
 800b964:	d101      	bne.n	800b96a <LL_RCC_LSI1_IsReady+0x18>
 800b966:	2301      	movs	r3, #1
 800b968:	e000      	b.n	800b96c <LL_RCC_LSI1_IsReady+0x1a>
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <LL_RCC_LSI2_Enable>:
{
 800b976:	b480      	push	{r7}
 800b978:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b97a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b97e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b982:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b986:	f043 0304 	orr.w	r3, r3, #4
 800b98a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b98e:	bf00      	nop
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <LL_RCC_LSI2_Disable>:
{
 800b998:	b480      	push	{r7}
 800b99a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b99c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b9a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9a8:	f023 0304 	bic.w	r3, r3, #4
 800b9ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b9b0:	bf00      	nop
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr

0800b9ba <LL_RCC_LSI2_IsReady>:
{
 800b9ba:	b480      	push	{r7}
 800b9bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800b9be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b9c6:	f003 0308 	and.w	r3, r3, #8
 800b9ca:	2b08      	cmp	r3, #8
 800b9cc:	d101      	bne.n	800b9d2 <LL_RCC_LSI2_IsReady+0x18>
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e000      	b.n	800b9d4 <LL_RCC_LSI2_IsReady+0x1a>
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <LL_RCC_LSI2_SetTrimming>:
{
 800b9de:	b480      	push	{r7}
 800b9e0:	b083      	sub	sp, #12
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800b9e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b9ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	021b      	lsls	r3, r3, #8
 800b9f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800ba00:	bf00      	nop
 800ba02:	370c      	adds	r7, #12
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <LL_RCC_MSI_Enable>:
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800ba10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba1a:	f043 0301 	orr.w	r3, r3, #1
 800ba1e:	6013      	str	r3, [r2, #0]
}
 800ba20:	bf00      	nop
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr

0800ba2a <LL_RCC_MSI_Disable>:
{
 800ba2a:	b480      	push	{r7}
 800ba2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800ba2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba38:	f023 0301 	bic.w	r3, r3, #1
 800ba3c:	6013      	str	r3, [r2, #0]
}
 800ba3e:	bf00      	nop
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <LL_RCC_MSI_IsReady>:
{
 800ba48:	b480      	push	{r7}
 800ba4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800ba4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f003 0302 	and.w	r3, r3, #2
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	d101      	bne.n	800ba5e <LL_RCC_MSI_IsReady+0x16>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e000      	b.n	800ba60 <LL_RCC_MSI_IsReady+0x18>
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <LL_RCC_MSI_SetRange>:
{
 800ba6a:	b480      	push	{r7}
 800ba6c:	b083      	sub	sp, #12
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800ba72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ba7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	600b      	str	r3, [r1, #0]
}
 800ba86:	bf00      	nop
 800ba88:	370c      	adds	r7, #12
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <LL_RCC_MSI_GetRange>:
{
 800ba92:	b480      	push	{r7}
 800ba94:	b083      	sub	sp, #12
 800ba96:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800ba98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800baa2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2bb0      	cmp	r3, #176	@ 0xb0
 800baa8:	d901      	bls.n	800baae <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800baaa:	23b0      	movs	r3, #176	@ 0xb0
 800baac:	607b      	str	r3, [r7, #4]
  return msiRange;
 800baae:	687b      	ldr	r3, [r7, #4]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <LL_RCC_MSI_SetCalibTrimming>:
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800bac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	021b      	lsls	r3, r3, #8
 800bad2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bad6:	4313      	orrs	r3, r2
 800bad8:	604b      	str	r3, [r1, #4]
}
 800bada:	bf00      	nop
 800badc:	370c      	adds	r7, #12
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr

0800bae6 <LL_RCC_SetSysClkSource>:
{
 800bae6:	b480      	push	{r7}
 800bae8:	b083      	sub	sp, #12
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800baee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	f023 0203 	bic.w	r2, r3, #3
 800baf8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4313      	orrs	r3, r2
 800bb00:	608b      	str	r3, [r1, #8]
}
 800bb02:	bf00      	nop
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <LL_RCC_GetSysClkSource>:
{
 800bb0e:	b480      	push	{r7}
 800bb10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800bb12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	f003 030c 	and.w	r3, r3, #12
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr

0800bb26 <LL_RCC_SetAHBPrescaler>:
{
 800bb26:	b480      	push	{r7}
 800bb28:	b083      	sub	sp, #12
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800bb2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bb38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	608b      	str	r3, [r1, #8]
}
 800bb42:	bf00      	nop
 800bb44:	370c      	adds	r7, #12
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr

0800bb4e <LL_C2_RCC_SetAHBPrescaler>:
{
 800bb4e:	b480      	push	{r7}
 800bb50:	b083      	sub	sp, #12
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800bb56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bb5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bb62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800bb6e:	bf00      	nop
 800bb70:	370c      	adds	r7, #12
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <LL_RCC_SetAHB4Prescaler>:
{
 800bb7a:	b480      	push	{r7}
 800bb7c:	b083      	sub	sp, #12
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800bb82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb86:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bb8a:	f023 020f 	bic.w	r2, r3, #15
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	091b      	lsrs	r3, r3, #4
 800bb92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb96:	4313      	orrs	r3, r2
 800bb98:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800bb9c:	bf00      	nop
 800bb9e:	370c      	adds	r7, #12
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <LL_RCC_SetAPB1Prescaler>:
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800bbb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bbba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	608b      	str	r3, [r1, #8]
}
 800bbc4:	bf00      	nop
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <LL_RCC_SetAPB2Prescaler>:
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800bbd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bbe2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	608b      	str	r3, [r1, #8]
}
 800bbec:	bf00      	nop
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <LL_RCC_GetAHBPrescaler>:
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800bbfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <LL_RCC_GetAHB4Prescaler>:
{
 800bc10:	b480      	push	{r7}
 800bc12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800bc14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc18:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bc1c:	011b      	lsls	r3, r3, #4
 800bc1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <LL_RCC_GetAPB1Prescaler>:
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800bc30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <LL_RCC_GetAPB2Prescaler>:
{
 800bc44:	b480      	push	{r7}
 800bc46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800bc48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800bc60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bc6e:	6013      	str	r3, [r2, #0]
}
 800bc70:	bf00      	nop
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800bc7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bc8c:	6013      	str	r3, [r2, #0]
}
 800bc8e:	bf00      	nop
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800bc9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bca6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bcaa:	d101      	bne.n	800bcb0 <LL_RCC_PLL_IsReady+0x18>
 800bcac:	2301      	movs	r3, #1
 800bcae:	e000      	b.n	800bcb2 <LL_RCC_PLL_IsReady+0x1a>
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800bcc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	0a1b      	lsrs	r3, r3, #8
 800bcc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800bcd6:	b480      	push	{r7}
 800bcd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800bcda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800bcee:	b480      	push	{r7}
 800bcf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800bcf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800bd06:	b480      	push	{r7}
 800bd08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800bd0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	f003 0303 	and.w	r3, r3, #3
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr

0800bd1e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800bd1e:	b480      	push	{r7}
 800bd20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800bd22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bd2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd30:	d101      	bne.n	800bd36 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800bd32:	2301      	movs	r3, #1
 800bd34:	e000      	b.n	800bd38 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr

0800bd42 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800bd42:	b480      	push	{r7}
 800bd44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800bd46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bd4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd56:	d101      	bne.n	800bd5c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e000      	b.n	800bd5e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800bd6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd70:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bd74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bd78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd7c:	d101      	bne.n	800bd82 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e000      	b.n	800bd84 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800bd92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bda0:	d101      	bne.n	800bda6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800bda2:	2301      	movs	r3, #1
 800bda4:	e000      	b.n	800bda8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800bda6:	2300      	movs	r3, #0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800bdb2:	b480      	push	{r7}
 800bdb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800bdb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bdc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bdc4:	d101      	bne.n	800bdca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e000      	b.n	800bdcc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800bdca:	2300      	movs	r3, #0
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
	...

0800bdd8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bdd8:	b590      	push	{r4, r7, lr}
 800bdda:	b08d      	sub	sp, #52	@ 0x34
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d101      	bne.n	800bdea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bde6:	2301      	movs	r3, #1
 800bde8:	e363      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f003 0320 	and.w	r3, r3, #32
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f000 808d 	beq.w	800bf12 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bdf8:	f7ff fe89 	bl	800bb0e <LL_RCC_GetSysClkSource>
 800bdfc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bdfe:	f7ff ff82 	bl	800bd06 <LL_RCC_PLL_GetMainSource>
 800be02:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800be04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be06:	2b00      	cmp	r3, #0
 800be08:	d005      	beq.n	800be16 <HAL_RCC_OscConfig+0x3e>
 800be0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be0c:	2b0c      	cmp	r3, #12
 800be0e:	d147      	bne.n	800bea0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800be10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be12:	2b01      	cmp	r3, #1
 800be14:	d144      	bne.n	800bea0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	69db      	ldr	r3, [r3, #28]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	e347      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800be26:	f7ff fe34 	bl	800ba92 <LL_RCC_MSI_GetRange>
 800be2a:	4603      	mov	r3, r0
 800be2c:	429c      	cmp	r4, r3
 800be2e:	d914      	bls.n	800be5a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be34:	4618      	mov	r0, r3
 800be36:	f000 fd2f 	bl	800c898 <RCC_SetFlashLatencyFromMSIRange>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d001      	beq.n	800be44 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800be40:	2301      	movs	r3, #1
 800be42:	e336      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be48:	4618      	mov	r0, r3
 800be4a:	f7ff fe0e 	bl	800ba6a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6a1b      	ldr	r3, [r3, #32]
 800be52:	4618      	mov	r0, r3
 800be54:	f7ff fe32 	bl	800babc <LL_RCC_MSI_SetCalibTrimming>
 800be58:	e013      	b.n	800be82 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be5e:	4618      	mov	r0, r3
 800be60:	f7ff fe03 	bl	800ba6a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6a1b      	ldr	r3, [r3, #32]
 800be68:	4618      	mov	r0, r3
 800be6a:	f7ff fe27 	bl	800babc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be72:	4618      	mov	r0, r3
 800be74:	f000 fd10 	bl	800c898 <RCC_SetFlashLatencyFromMSIRange>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	e317      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800be82:	f000 fcc9 	bl	800c818 <HAL_RCC_GetHCLKFreq>
 800be86:	4603      	mov	r3, r0
 800be88:	4aa4      	ldr	r2, [pc, #656]	@ (800c11c <HAL_RCC_OscConfig+0x344>)
 800be8a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800be8c:	4ba4      	ldr	r3, [pc, #656]	@ (800c120 <HAL_RCC_OscConfig+0x348>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4618      	mov	r0, r3
 800be92:	f7fb f865 	bl	8006f60 <HAL_InitTick>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d039      	beq.n	800bf10 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800be9c:	2301      	movs	r3, #1
 800be9e:	e308      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	69db      	ldr	r3, [r3, #28]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d01e      	beq.n	800bee6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bea8:	f7ff fdb0 	bl	800ba0c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800beac:	f7fb f8a6 	bl	8006ffc <HAL_GetTick>
 800beb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800beb2:	e008      	b.n	800bec6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800beb4:	f7fb f8a2 	bl	8006ffc <HAL_GetTick>
 800beb8:	4602      	mov	r2, r0
 800beba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bebc:	1ad3      	subs	r3, r2, r3
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d901      	bls.n	800bec6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800bec2:	2303      	movs	r3, #3
 800bec4:	e2f5      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800bec6:	f7ff fdbf 	bl	800ba48 <LL_RCC_MSI_IsReady>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d0f1      	beq.n	800beb4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7ff fdc8 	bl	800ba6a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a1b      	ldr	r3, [r3, #32]
 800bede:	4618      	mov	r0, r3
 800bee0:	f7ff fdec 	bl	800babc <LL_RCC_MSI_SetCalibTrimming>
 800bee4:	e015      	b.n	800bf12 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bee6:	f7ff fda0 	bl	800ba2a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800beea:	f7fb f887 	bl	8006ffc <HAL_GetTick>
 800beee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800bef0:	e008      	b.n	800bf04 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bef2:	f7fb f883 	bl	8006ffc <HAL_GetTick>
 800bef6:	4602      	mov	r2, r0
 800bef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	2b02      	cmp	r3, #2
 800befe:	d901      	bls.n	800bf04 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800bf00:	2303      	movs	r3, #3
 800bf02:	e2d6      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800bf04:	f7ff fda0 	bl	800ba48 <LL_RCC_MSI_IsReady>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d1f1      	bne.n	800bef2 <HAL_RCC_OscConfig+0x11a>
 800bf0e:	e000      	b.n	800bf12 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bf10:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f003 0301 	and.w	r3, r3, #1
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d047      	beq.n	800bfae <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bf1e:	f7ff fdf6 	bl	800bb0e <LL_RCC_GetSysClkSource>
 800bf22:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bf24:	f7ff feef 	bl	800bd06 <LL_RCC_PLL_GetMainSource>
 800bf28:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800bf2a:	6a3b      	ldr	r3, [r7, #32]
 800bf2c:	2b08      	cmp	r3, #8
 800bf2e:	d005      	beq.n	800bf3c <HAL_RCC_OscConfig+0x164>
 800bf30:	6a3b      	ldr	r3, [r7, #32]
 800bf32:	2b0c      	cmp	r3, #12
 800bf34:	d108      	bne.n	800bf48 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	2b03      	cmp	r3, #3
 800bf3a:	d105      	bne.n	800bf48 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d134      	bne.n	800bfae <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800bf44:	2301      	movs	r3, #1
 800bf46:	e2b4      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf50:	d102      	bne.n	800bf58 <HAL_RCC_OscConfig+0x180>
 800bf52:	f7ff fbdd 	bl	800b710 <LL_RCC_HSE_Enable>
 800bf56:	e001      	b.n	800bf5c <HAL_RCC_OscConfig+0x184>
 800bf58:	f7ff fbe9 	bl	800b72e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d012      	beq.n	800bf8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf64:	f7fb f84a 	bl	8006ffc <HAL_GetTick>
 800bf68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800bf6a:	e008      	b.n	800bf7e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bf6c:	f7fb f846 	bl	8006ffc <HAL_GetTick>
 800bf70:	4602      	mov	r2, r0
 800bf72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf74:	1ad3      	subs	r3, r2, r3
 800bf76:	2b64      	cmp	r3, #100	@ 0x64
 800bf78:	d901      	bls.n	800bf7e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	e299      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800bf7e:	f7ff fbe5 	bl	800b74c <LL_RCC_HSE_IsReady>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d0f1      	beq.n	800bf6c <HAL_RCC_OscConfig+0x194>
 800bf88:	e011      	b.n	800bfae <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf8a:	f7fb f837 	bl	8006ffc <HAL_GetTick>
 800bf8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800bf90:	e008      	b.n	800bfa4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bf92:	f7fb f833 	bl	8006ffc <HAL_GetTick>
 800bf96:	4602      	mov	r2, r0
 800bf98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	2b64      	cmp	r3, #100	@ 0x64
 800bf9e:	d901      	bls.n	800bfa4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800bfa0:	2303      	movs	r3, #3
 800bfa2:	e286      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800bfa4:	f7ff fbd2 	bl	800b74c <LL_RCC_HSE_IsReady>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d1f1      	bne.n	800bf92 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f003 0302 	and.w	r3, r3, #2
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d04c      	beq.n	800c054 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bfba:	f7ff fda8 	bl	800bb0e <LL_RCC_GetSysClkSource>
 800bfbe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bfc0:	f7ff fea1 	bl	800bd06 <LL_RCC_PLL_GetMainSource>
 800bfc4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	2b04      	cmp	r3, #4
 800bfca:	d005      	beq.n	800bfd8 <HAL_RCC_OscConfig+0x200>
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	2b0c      	cmp	r3, #12
 800bfd0:	d10e      	bne.n	800bff0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d10b      	bne.n	800bff0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d101      	bne.n	800bfe4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e266      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7ff fbf1 	bl	800b7d0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800bfee:	e031      	b.n	800c054 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d019      	beq.n	800c02c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bff8:	f7ff fbba 	bl	800b770 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bffc:	f7fa fffe 	bl	8006ffc <HAL_GetTick>
 800c000:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c002:	e008      	b.n	800c016 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c004:	f7fa fffa 	bl	8006ffc <HAL_GetTick>
 800c008:	4602      	mov	r2, r0
 800c00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c00c:	1ad3      	subs	r3, r2, r3
 800c00e:	2b02      	cmp	r3, #2
 800c010:	d901      	bls.n	800c016 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c012:	2303      	movs	r3, #3
 800c014:	e24d      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c016:	f7ff fbc9 	bl	800b7ac <LL_RCC_HSI_IsReady>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d0f1      	beq.n	800c004 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	4618      	mov	r0, r3
 800c026:	f7ff fbd3 	bl	800b7d0 <LL_RCC_HSI_SetCalibTrimming>
 800c02a:	e013      	b.n	800c054 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c02c:	f7ff fbaf 	bl	800b78e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c030:	f7fa ffe4 	bl	8006ffc <HAL_GetTick>
 800c034:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c036:	e008      	b.n	800c04a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c038:	f7fa ffe0 	bl	8006ffc <HAL_GetTick>
 800c03c:	4602      	mov	r2, r0
 800c03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	2b02      	cmp	r3, #2
 800c044:	d901      	bls.n	800c04a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800c046:	2303      	movs	r3, #3
 800c048:	e233      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c04a:	f7ff fbaf 	bl	800b7ac <LL_RCC_HSI_IsReady>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1f1      	bne.n	800c038 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f003 0308 	and.w	r3, r3, #8
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d106      	bne.n	800c06e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 80a3 	beq.w	800c1b4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	695b      	ldr	r3, [r3, #20]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d076      	beq.n	800c164 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f003 0310 	and.w	r3, r3, #16
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d046      	beq.n	800c110 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c082:	f7ff fc66 	bl	800b952 <LL_RCC_LSI1_IsReady>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d113      	bne.n	800c0b4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c08c:	f7ff fc3f 	bl	800b90e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c090:	f7fa ffb4 	bl	8006ffc <HAL_GetTick>
 800c094:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c096:	e008      	b.n	800c0aa <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c098:	f7fa ffb0 	bl	8006ffc <HAL_GetTick>
 800c09c:	4602      	mov	r2, r0
 800c09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a0:	1ad3      	subs	r3, r2, r3
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	d901      	bls.n	800c0aa <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800c0a6:	2303      	movs	r3, #3
 800c0a8:	e203      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c0aa:	f7ff fc52 	bl	800b952 <LL_RCC_LSI1_IsReady>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d0f1      	beq.n	800c098 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c0b4:	f7ff fc5f 	bl	800b976 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0b8:	f7fa ffa0 	bl	8006ffc <HAL_GetTick>
 800c0bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c0be:	e008      	b.n	800c0d2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c0c0:	f7fa ff9c 	bl	8006ffc <HAL_GetTick>
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	2b03      	cmp	r3, #3
 800c0cc:	d901      	bls.n	800c0d2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800c0ce:	2303      	movs	r3, #3
 800c0d0:	e1ef      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c0d2:	f7ff fc72 	bl	800b9ba <LL_RCC_LSI2_IsReady>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d0f1      	beq.n	800c0c0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	699b      	ldr	r3, [r3, #24]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7ff fc7c 	bl	800b9de <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c0e6:	f7ff fc23 	bl	800b930 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0ea:	f7fa ff87 	bl	8006ffc <HAL_GetTick>
 800c0ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c0f0:	e008      	b.n	800c104 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c0f2:	f7fa ff83 	bl	8006ffc <HAL_GetTick>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0fa:	1ad3      	subs	r3, r2, r3
 800c0fc:	2b02      	cmp	r3, #2
 800c0fe:	d901      	bls.n	800c104 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800c100:	2303      	movs	r3, #3
 800c102:	e1d6      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c104:	f7ff fc25 	bl	800b952 <LL_RCC_LSI1_IsReady>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1f1      	bne.n	800c0f2 <HAL_RCC_OscConfig+0x31a>
 800c10e:	e051      	b.n	800c1b4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c110:	f7ff fbfd 	bl	800b90e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c114:	f7fa ff72 	bl	8006ffc <HAL_GetTick>
 800c118:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c11a:	e00c      	b.n	800c136 <HAL_RCC_OscConfig+0x35e>
 800c11c:	2000002c 	.word	0x2000002c
 800c120:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c124:	f7fa ff6a 	bl	8006ffc <HAL_GetTick>
 800c128:	4602      	mov	r2, r0
 800c12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c12c:	1ad3      	subs	r3, r2, r3
 800c12e:	2b02      	cmp	r3, #2
 800c130:	d901      	bls.n	800c136 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800c132:	2303      	movs	r3, #3
 800c134:	e1bd      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c136:	f7ff fc0c 	bl	800b952 <LL_RCC_LSI1_IsReady>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d0f1      	beq.n	800c124 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c140:	f7ff fc2a 	bl	800b998 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c144:	e008      	b.n	800c158 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c146:	f7fa ff59 	bl	8006ffc <HAL_GetTick>
 800c14a:	4602      	mov	r2, r0
 800c14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c14e:	1ad3      	subs	r3, r2, r3
 800c150:	2b03      	cmp	r3, #3
 800c152:	d901      	bls.n	800c158 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800c154:	2303      	movs	r3, #3
 800c156:	e1ac      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c158:	f7ff fc2f 	bl	800b9ba <LL_RCC_LSI2_IsReady>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d1f1      	bne.n	800c146 <HAL_RCC_OscConfig+0x36e>
 800c162:	e027      	b.n	800c1b4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c164:	f7ff fc18 	bl	800b998 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c168:	f7fa ff48 	bl	8006ffc <HAL_GetTick>
 800c16c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c16e:	e008      	b.n	800c182 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c170:	f7fa ff44 	bl	8006ffc <HAL_GetTick>
 800c174:	4602      	mov	r2, r0
 800c176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c178:	1ad3      	subs	r3, r2, r3
 800c17a:	2b03      	cmp	r3, #3
 800c17c:	d901      	bls.n	800c182 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c17e:	2303      	movs	r3, #3
 800c180:	e197      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c182:	f7ff fc1a 	bl	800b9ba <LL_RCC_LSI2_IsReady>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d1f1      	bne.n	800c170 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800c18c:	f7ff fbd0 	bl	800b930 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c190:	f7fa ff34 	bl	8006ffc <HAL_GetTick>
 800c194:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c196:	e008      	b.n	800c1aa <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c198:	f7fa ff30 	bl	8006ffc <HAL_GetTick>
 800c19c:	4602      	mov	r2, r0
 800c19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	d901      	bls.n	800c1aa <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800c1a6:	2303      	movs	r3, #3
 800c1a8:	e183      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c1aa:	f7ff fbd2 	bl	800b952 <LL_RCC_LSI1_IsReady>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d1f1      	bne.n	800c198 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f003 0304 	and.w	r3, r3, #4
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d05b      	beq.n	800c278 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c1c0:	4ba7      	ldr	r3, [pc, #668]	@ (800c460 <HAL_RCC_OscConfig+0x688>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d114      	bne.n	800c1f6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c1cc:	f7ff fa60 	bl	800b690 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c1d0:	f7fa ff14 	bl	8006ffc <HAL_GetTick>
 800c1d4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c1d6:	e008      	b.n	800c1ea <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c1d8:	f7fa ff10 	bl	8006ffc <HAL_GetTick>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	2b02      	cmp	r3, #2
 800c1e4:	d901      	bls.n	800c1ea <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800c1e6:	2303      	movs	r3, #3
 800c1e8:	e163      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c1ea:	4b9d      	ldr	r3, [pc, #628]	@ (800c460 <HAL_RCC_OscConfig+0x688>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d0f0      	beq.n	800c1d8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d102      	bne.n	800c204 <HAL_RCC_OscConfig+0x42c>
 800c1fe:	f7ff fb30 	bl	800b862 <LL_RCC_LSE_Enable>
 800c202:	e00c      	b.n	800c21e <HAL_RCC_OscConfig+0x446>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	2b05      	cmp	r3, #5
 800c20a:	d104      	bne.n	800c216 <HAL_RCC_OscConfig+0x43e>
 800c20c:	f7ff fb4b 	bl	800b8a6 <LL_RCC_LSE_EnableBypass>
 800c210:	f7ff fb27 	bl	800b862 <LL_RCC_LSE_Enable>
 800c214:	e003      	b.n	800c21e <HAL_RCC_OscConfig+0x446>
 800c216:	f7ff fb35 	bl	800b884 <LL_RCC_LSE_Disable>
 800c21a:	f7ff fb55 	bl	800b8c8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d014      	beq.n	800c250 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c226:	f7fa fee9 	bl	8006ffc <HAL_GetTick>
 800c22a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c22c:	e00a      	b.n	800c244 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c22e:	f7fa fee5 	bl	8006ffc <HAL_GetTick>
 800c232:	4602      	mov	r2, r0
 800c234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d901      	bls.n	800c244 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800c240:	2303      	movs	r3, #3
 800c242:	e136      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c244:	f7ff fb51 	bl	800b8ea <LL_RCC_LSE_IsReady>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d0ef      	beq.n	800c22e <HAL_RCC_OscConfig+0x456>
 800c24e:	e013      	b.n	800c278 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c250:	f7fa fed4 	bl	8006ffc <HAL_GetTick>
 800c254:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c256:	e00a      	b.n	800c26e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c258:	f7fa fed0 	bl	8006ffc <HAL_GetTick>
 800c25c:	4602      	mov	r2, r0
 800c25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c260:	1ad3      	subs	r3, r2, r3
 800c262:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c266:	4293      	cmp	r3, r2
 800c268:	d901      	bls.n	800c26e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800c26a:	2303      	movs	r3, #3
 800c26c:	e121      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c26e:	f7ff fb3c 	bl	800b8ea <LL_RCC_LSE_IsReady>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1ef      	bne.n	800c258 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c280:	2b00      	cmp	r3, #0
 800c282:	d02c      	beq.n	800c2de <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d014      	beq.n	800c2b6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c28c:	f7ff fab5 	bl	800b7fa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c290:	f7fa feb4 	bl	8006ffc <HAL_GetTick>
 800c294:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c296:	e008      	b.n	800c2aa <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c298:	f7fa feb0 	bl	8006ffc <HAL_GetTick>
 800c29c:	4602      	mov	r2, r0
 800c29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a0:	1ad3      	subs	r3, r2, r3
 800c2a2:	2b02      	cmp	r3, #2
 800c2a4:	d901      	bls.n	800c2aa <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800c2a6:	2303      	movs	r3, #3
 800c2a8:	e103      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c2aa:	f7ff fac8 	bl	800b83e <LL_RCC_HSI48_IsReady>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d0f1      	beq.n	800c298 <HAL_RCC_OscConfig+0x4c0>
 800c2b4:	e013      	b.n	800c2de <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c2b6:	f7ff fab1 	bl	800b81c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2ba:	f7fa fe9f 	bl	8006ffc <HAL_GetTick>
 800c2be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c2c0:	e008      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c2c2:	f7fa fe9b 	bl	8006ffc <HAL_GetTick>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ca:	1ad3      	subs	r3, r2, r3
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d901      	bls.n	800c2d4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800c2d0:	2303      	movs	r3, #3
 800c2d2:	e0ee      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c2d4:	f7ff fab3 	bl	800b83e <LL_RCC_HSI48_IsReady>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d1f1      	bne.n	800c2c2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f000 80e4 	beq.w	800c4b0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c2e8:	f7ff fc11 	bl	800bb0e <LL_RCC_GetSysClkSource>
 800c2ec:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800c2ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2fa:	2b02      	cmp	r3, #2
 800c2fc:	f040 80b4 	bne.w	800c468 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f003 0203 	and.w	r2, r3, #3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d123      	bne.n	800c356 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c318:	429a      	cmp	r2, r3
 800c31a:	d11c      	bne.n	800c356 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	0a1b      	lsrs	r3, r3, #8
 800c320:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c328:	429a      	cmp	r2, r3
 800c32a:	d114      	bne.n	800c356 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c336:	429a      	cmp	r2, r3
 800c338:	d10d      	bne.n	800c356 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c344:	429a      	cmp	r2, r3
 800c346:	d106      	bne.n	800c356 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c352:	429a      	cmp	r2, r3
 800c354:	d05d      	beq.n	800c412 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	2b0c      	cmp	r3, #12
 800c35a:	d058      	beq.n	800c40e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c35c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c366:	2b00      	cmp	r3, #0
 800c368:	d001      	beq.n	800c36e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800c36a:	2301      	movs	r3, #1
 800c36c:	e0a1      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c36e:	f7ff fc84 	bl	800bc7a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c372:	f7fa fe43 	bl	8006ffc <HAL_GetTick>
 800c376:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c378:	e008      	b.n	800c38c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c37a:	f7fa fe3f 	bl	8006ffc <HAL_GetTick>
 800c37e:	4602      	mov	r2, r0
 800c380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c382:	1ad3      	subs	r3, r2, r3
 800c384:	2b02      	cmp	r3, #2
 800c386:	d901      	bls.n	800c38c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800c388:	2303      	movs	r3, #3
 800c38a:	e092      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c38c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1ef      	bne.n	800c37a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c39a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c39e:	68da      	ldr	r2, [r3, #12]
 800c3a0:	4b30      	ldr	r3, [pc, #192]	@ (800c464 <HAL_RCC_OscConfig+0x68c>)
 800c3a2:	4013      	ands	r3, r2
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c3ac:	4311      	orrs	r1, r2
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c3b2:	0212      	lsls	r2, r2, #8
 800c3b4:	4311      	orrs	r1, r2
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c3ba:	4311      	orrs	r1, r2
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c3c0:	4311      	orrs	r1, r2
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c3c6:	430a      	orrs	r2, r1
 800c3c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c3d0:	f7ff fc44 	bl	800bc5c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c3d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c3de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c3e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c3e4:	f7fa fe0a 	bl	8006ffc <HAL_GetTick>
 800c3e8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c3ea:	e008      	b.n	800c3fe <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3ec:	f7fa fe06 	bl	8006ffc <HAL_GetTick>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f4:	1ad3      	subs	r3, r2, r3
 800c3f6:	2b02      	cmp	r3, #2
 800c3f8:	d901      	bls.n	800c3fe <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800c3fa:	2303      	movs	r3, #3
 800c3fc:	e059      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c3fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d0ef      	beq.n	800c3ec <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c40c:	e050      	b.n	800c4b0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c40e:	2301      	movs	r3, #1
 800c410:	e04f      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d147      	bne.n	800c4b0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c420:	f7ff fc1c 	bl	800bc5c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c42e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c432:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c434:	f7fa fde2 	bl	8006ffc <HAL_GetTick>
 800c438:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c43a:	e008      	b.n	800c44e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c43c:	f7fa fdde 	bl	8006ffc <HAL_GetTick>
 800c440:	4602      	mov	r2, r0
 800c442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c444:	1ad3      	subs	r3, r2, r3
 800c446:	2b02      	cmp	r3, #2
 800c448:	d901      	bls.n	800c44e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800c44a:	2303      	movs	r3, #3
 800c44c:	e031      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c44e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d0ef      	beq.n	800c43c <HAL_RCC_OscConfig+0x664>
 800c45c:	e028      	b.n	800c4b0 <HAL_RCC_OscConfig+0x6d8>
 800c45e:	bf00      	nop
 800c460:	58000400 	.word	0x58000400
 800c464:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	2b0c      	cmp	r3, #12
 800c46c:	d01e      	beq.n	800c4ac <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c46e:	f7ff fc04 	bl	800bc7a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c472:	f7fa fdc3 	bl	8006ffc <HAL_GetTick>
 800c476:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c478:	e008      	b.n	800c48c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c47a:	f7fa fdbf 	bl	8006ffc <HAL_GetTick>
 800c47e:	4602      	mov	r2, r0
 800c480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c482:	1ad3      	subs	r3, r2, r3
 800c484:	2b02      	cmp	r3, #2
 800c486:	d901      	bls.n	800c48c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800c488:	2303      	movs	r3, #3
 800c48a:	e012      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c48c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1ef      	bne.n	800c47a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800c49a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c49e:	68da      	ldr	r2, [r3, #12]
 800c4a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c4a4:	4b05      	ldr	r3, [pc, #20]	@ (800c4bc <HAL_RCC_OscConfig+0x6e4>)
 800c4a6:	4013      	ands	r3, r2
 800c4a8:	60cb      	str	r3, [r1, #12]
 800c4aa:	e001      	b.n	800c4b0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	e000      	b.n	800c4b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3734      	adds	r7, #52	@ 0x34
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd90      	pop	{r4, r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	eefefffc 	.word	0xeefefffc

0800c4c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d101      	bne.n	800c4d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e12d      	b.n	800c730 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c4d4:	4b98      	ldr	r3, [pc, #608]	@ (800c738 <HAL_RCC_ClockConfig+0x278>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f003 0307 	and.w	r3, r3, #7
 800c4dc:	683a      	ldr	r2, [r7, #0]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d91b      	bls.n	800c51a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c4e2:	4b95      	ldr	r3, [pc, #596]	@ (800c738 <HAL_RCC_ClockConfig+0x278>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f023 0207 	bic.w	r2, r3, #7
 800c4ea:	4993      	ldr	r1, [pc, #588]	@ (800c738 <HAL_RCC_ClockConfig+0x278>)
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4f2:	f7fa fd83 	bl	8006ffc <HAL_GetTick>
 800c4f6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c4f8:	e008      	b.n	800c50c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c4fa:	f7fa fd7f 	bl	8006ffc <HAL_GetTick>
 800c4fe:	4602      	mov	r2, r0
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	1ad3      	subs	r3, r2, r3
 800c504:	2b02      	cmp	r3, #2
 800c506:	d901      	bls.n	800c50c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800c508:	2303      	movs	r3, #3
 800c50a:	e111      	b.n	800c730 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c50c:	4b8a      	ldr	r3, [pc, #552]	@ (800c738 <HAL_RCC_ClockConfig+0x278>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f003 0307 	and.w	r3, r3, #7
 800c514:	683a      	ldr	r2, [r7, #0]
 800c516:	429a      	cmp	r2, r3
 800c518:	d1ef      	bne.n	800c4fa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f003 0302 	and.w	r3, r3, #2
 800c522:	2b00      	cmp	r3, #0
 800c524:	d016      	beq.n	800c554 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7ff fafb 	bl	800bb26 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c530:	f7fa fd64 	bl	8006ffc <HAL_GetTick>
 800c534:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c536:	e008      	b.n	800c54a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c538:	f7fa fd60 	bl	8006ffc <HAL_GetTick>
 800c53c:	4602      	mov	r2, r0
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	2b02      	cmp	r3, #2
 800c544:	d901      	bls.n	800c54a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800c546:	2303      	movs	r3, #3
 800c548:	e0f2      	b.n	800c730 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c54a:	f7ff fbe8 	bl	800bd1e <LL_RCC_IsActiveFlag_HPRE>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d0f1      	beq.n	800c538 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f003 0320 	and.w	r3, r3, #32
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d016      	beq.n	800c58e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	695b      	ldr	r3, [r3, #20]
 800c564:	4618      	mov	r0, r3
 800c566:	f7ff faf2 	bl	800bb4e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c56a:	f7fa fd47 	bl	8006ffc <HAL_GetTick>
 800c56e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c570:	e008      	b.n	800c584 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c572:	f7fa fd43 	bl	8006ffc <HAL_GetTick>
 800c576:	4602      	mov	r2, r0
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	1ad3      	subs	r3, r2, r3
 800c57c:	2b02      	cmp	r3, #2
 800c57e:	d901      	bls.n	800c584 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800c580:	2303      	movs	r3, #3
 800c582:	e0d5      	b.n	800c730 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c584:	f7ff fbdd 	bl	800bd42 <LL_RCC_IsActiveFlag_C2HPRE>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d0f1      	beq.n	800c572 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c596:	2b00      	cmp	r3, #0
 800c598:	d016      	beq.n	800c5c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	699b      	ldr	r3, [r3, #24]
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7ff faeb 	bl	800bb7a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c5a4:	f7fa fd2a 	bl	8006ffc <HAL_GetTick>
 800c5a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c5aa:	e008      	b.n	800c5be <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c5ac:	f7fa fd26 	bl	8006ffc <HAL_GetTick>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	1ad3      	subs	r3, r2, r3
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d901      	bls.n	800c5be <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800c5ba:	2303      	movs	r3, #3
 800c5bc:	e0b8      	b.n	800c730 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c5be:	f7ff fbd3 	bl	800bd68 <LL_RCC_IsActiveFlag_SHDHPRE>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d0f1      	beq.n	800c5ac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f003 0304 	and.w	r3, r3, #4
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d016      	beq.n	800c602 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7ff fae5 	bl	800bba8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c5de:	f7fa fd0d 	bl	8006ffc <HAL_GetTick>
 800c5e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c5e4:	e008      	b.n	800c5f8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c5e6:	f7fa fd09 	bl	8006ffc <HAL_GetTick>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	1ad3      	subs	r3, r2, r3
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d901      	bls.n	800c5f8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800c5f4:	2303      	movs	r3, #3
 800c5f6:	e09b      	b.n	800c730 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c5f8:	f7ff fbc9 	bl	800bd8e <LL_RCC_IsActiveFlag_PPRE1>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d0f1      	beq.n	800c5e6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f003 0308 	and.w	r3, r3, #8
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d017      	beq.n	800c63e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	00db      	lsls	r3, r3, #3
 800c614:	4618      	mov	r0, r3
 800c616:	f7ff fadb 	bl	800bbd0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c61a:	f7fa fcef 	bl	8006ffc <HAL_GetTick>
 800c61e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c620:	e008      	b.n	800c634 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c622:	f7fa fceb 	bl	8006ffc <HAL_GetTick>
 800c626:	4602      	mov	r2, r0
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	1ad3      	subs	r3, r2, r3
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	d901      	bls.n	800c634 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800c630:	2303      	movs	r3, #3
 800c632:	e07d      	b.n	800c730 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c634:	f7ff fbbd 	bl	800bdb2 <LL_RCC_IsActiveFlag_PPRE2>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d0f1      	beq.n	800c622 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f003 0301 	and.w	r3, r3, #1
 800c646:	2b00      	cmp	r3, #0
 800c648:	d043      	beq.n	800c6d2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	2b02      	cmp	r3, #2
 800c650:	d106      	bne.n	800c660 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800c652:	f7ff f87b 	bl	800b74c <LL_RCC_HSE_IsReady>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d11e      	bne.n	800c69a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c65c:	2301      	movs	r3, #1
 800c65e:	e067      	b.n	800c730 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	2b03      	cmp	r3, #3
 800c666:	d106      	bne.n	800c676 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800c668:	f7ff fb16 	bl	800bc98 <LL_RCC_PLL_IsReady>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d113      	bne.n	800c69a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c672:	2301      	movs	r3, #1
 800c674:	e05c      	b.n	800c730 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d106      	bne.n	800c68c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800c67e:	f7ff f9e3 	bl	800ba48 <LL_RCC_MSI_IsReady>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d108      	bne.n	800c69a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c688:	2301      	movs	r3, #1
 800c68a:	e051      	b.n	800c730 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800c68c:	f7ff f88e 	bl	800b7ac <LL_RCC_HSI_IsReady>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d101      	bne.n	800c69a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c696:	2301      	movs	r3, #1
 800c698:	e04a      	b.n	800c730 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7ff fa21 	bl	800bae6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6a4:	f7fa fcaa 	bl	8006ffc <HAL_GetTick>
 800c6a8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c6aa:	e00a      	b.n	800c6c2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c6ac:	f7fa fca6 	bl	8006ffc <HAL_GetTick>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	1ad3      	subs	r3, r2, r3
 800c6b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d901      	bls.n	800c6c2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800c6be:	2303      	movs	r3, #3
 800c6c0:	e036      	b.n	800c730 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c6c2:	f7ff fa24 	bl	800bb0e <LL_RCC_GetSysClkSource>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d1ec      	bne.n	800c6ac <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c6d2:	4b19      	ldr	r3, [pc, #100]	@ (800c738 <HAL_RCC_ClockConfig+0x278>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f003 0307 	and.w	r3, r3, #7
 800c6da:	683a      	ldr	r2, [r7, #0]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d21b      	bcs.n	800c718 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6e0:	4b15      	ldr	r3, [pc, #84]	@ (800c738 <HAL_RCC_ClockConfig+0x278>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f023 0207 	bic.w	r2, r3, #7
 800c6e8:	4913      	ldr	r1, [pc, #76]	@ (800c738 <HAL_RCC_ClockConfig+0x278>)
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6f0:	f7fa fc84 	bl	8006ffc <HAL_GetTick>
 800c6f4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6f6:	e008      	b.n	800c70a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c6f8:	f7fa fc80 	bl	8006ffc <HAL_GetTick>
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	2b02      	cmp	r3, #2
 800c704:	d901      	bls.n	800c70a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800c706:	2303      	movs	r3, #3
 800c708:	e012      	b.n	800c730 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c70a:	4b0b      	ldr	r3, [pc, #44]	@ (800c738 <HAL_RCC_ClockConfig+0x278>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f003 0307 	and.w	r3, r3, #7
 800c712:	683a      	ldr	r2, [r7, #0]
 800c714:	429a      	cmp	r2, r3
 800c716:	d1ef      	bne.n	800c6f8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c718:	f000 f87e 	bl	800c818 <HAL_RCC_GetHCLKFreq>
 800c71c:	4603      	mov	r3, r0
 800c71e:	4a07      	ldr	r2, [pc, #28]	@ (800c73c <HAL_RCC_ClockConfig+0x27c>)
 800c720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800c722:	f7fa fc77 	bl	8007014 <HAL_GetTickPrio>
 800c726:	4603      	mov	r3, r0
 800c728:	4618      	mov	r0, r3
 800c72a:	f7fa fc19 	bl	8006f60 <HAL_InitTick>
 800c72e:	4603      	mov	r3, r0
}
 800c730:	4618      	mov	r0, r3
 800c732:	3710      	adds	r7, #16
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	58004000 	.word	0x58004000
 800c73c:	2000002c 	.word	0x2000002c

0800c740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c740:	b590      	push	{r4, r7, lr}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c746:	f7ff f9e2 	bl	800bb0e <LL_RCC_GetSysClkSource>
 800c74a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10a      	bne.n	800c768 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c752:	f7ff f99e 	bl	800ba92 <LL_RCC_MSI_GetRange>
 800c756:	4603      	mov	r3, r0
 800c758:	091b      	lsrs	r3, r3, #4
 800c75a:	f003 030f 	and.w	r3, r3, #15
 800c75e:	4a2b      	ldr	r2, [pc, #172]	@ (800c80c <HAL_RCC_GetSysClockFreq+0xcc>)
 800c760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c764:	60fb      	str	r3, [r7, #12]
 800c766:	e04b      	b.n	800c800 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2b04      	cmp	r3, #4
 800c76c:	d102      	bne.n	800c774 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c76e:	4b28      	ldr	r3, [pc, #160]	@ (800c810 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c770:	60fb      	str	r3, [r7, #12]
 800c772:	e045      	b.n	800c800 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b08      	cmp	r3, #8
 800c778:	d10a      	bne.n	800c790 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c77a:	f7fe ffb7 	bl	800b6ec <LL_RCC_HSE_IsEnabledDiv2>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b01      	cmp	r3, #1
 800c782:	d102      	bne.n	800c78a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800c784:	4b22      	ldr	r3, [pc, #136]	@ (800c810 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c786:	60fb      	str	r3, [r7, #12]
 800c788:	e03a      	b.n	800c800 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800c78a:	4b22      	ldr	r3, [pc, #136]	@ (800c814 <HAL_RCC_GetSysClockFreq+0xd4>)
 800c78c:	60fb      	str	r3, [r7, #12]
 800c78e:	e037      	b.n	800c800 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800c790:	f7ff fab9 	bl	800bd06 <LL_RCC_PLL_GetMainSource>
 800c794:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d003      	beq.n	800c7a4 <HAL_RCC_GetSysClockFreq+0x64>
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	2b03      	cmp	r3, #3
 800c7a0:	d003      	beq.n	800c7aa <HAL_RCC_GetSysClockFreq+0x6a>
 800c7a2:	e00d      	b.n	800c7c0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800c7a4:	4b1a      	ldr	r3, [pc, #104]	@ (800c810 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c7a6:	60bb      	str	r3, [r7, #8]
        break;
 800c7a8:	e015      	b.n	800c7d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c7aa:	f7fe ff9f 	bl	800b6ec <LL_RCC_HSE_IsEnabledDiv2>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d102      	bne.n	800c7ba <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800c7b4:	4b16      	ldr	r3, [pc, #88]	@ (800c810 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c7b6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800c7b8:	e00d      	b.n	800c7d6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800c7ba:	4b16      	ldr	r3, [pc, #88]	@ (800c814 <HAL_RCC_GetSysClockFreq+0xd4>)
 800c7bc:	60bb      	str	r3, [r7, #8]
        break;
 800c7be:	e00a      	b.n	800c7d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c7c0:	f7ff f967 	bl	800ba92 <LL_RCC_MSI_GetRange>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	091b      	lsrs	r3, r3, #4
 800c7c8:	f003 030f 	and.w	r3, r3, #15
 800c7cc:	4a0f      	ldr	r2, [pc, #60]	@ (800c80c <HAL_RCC_GetSysClockFreq+0xcc>)
 800c7ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7d2:	60bb      	str	r3, [r7, #8]
        break;
 800c7d4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800c7d6:	f7ff fa71 	bl	800bcbc <LL_RCC_PLL_GetN>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	fb03 f402 	mul.w	r4, r3, r2
 800c7e2:	f7ff fa84 	bl	800bcee <LL_RCC_PLL_GetDivider>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	091b      	lsrs	r3, r3, #4
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	fbb4 f4f3 	udiv	r4, r4, r3
 800c7f0:	f7ff fa71 	bl	800bcd6 <LL_RCC_PLL_GetR>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	0f5b      	lsrs	r3, r3, #29
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	fbb4 f3f3 	udiv	r3, r4, r3
 800c7fe:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800c800:	68fb      	ldr	r3, [r7, #12]
}
 800c802:	4618      	mov	r0, r3
 800c804:	3714      	adds	r7, #20
 800c806:	46bd      	mov	sp, r7
 800c808:	bd90      	pop	{r4, r7, pc}
 800c80a:	bf00      	nop
 800c80c:	0802192c 	.word	0x0802192c
 800c810:	00f42400 	.word	0x00f42400
 800c814:	01e84800 	.word	0x01e84800

0800c818 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c818:	b598      	push	{r3, r4, r7, lr}
 800c81a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800c81c:	f7ff ff90 	bl	800c740 <HAL_RCC_GetSysClockFreq>
 800c820:	4604      	mov	r4, r0
 800c822:	f7ff f9e9 	bl	800bbf8 <LL_RCC_GetAHBPrescaler>
 800c826:	4603      	mov	r3, r0
 800c828:	091b      	lsrs	r3, r3, #4
 800c82a:	f003 030f 	and.w	r3, r3, #15
 800c82e:	4a03      	ldr	r2, [pc, #12]	@ (800c83c <HAL_RCC_GetHCLKFreq+0x24>)
 800c830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c834:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800c838:	4618      	mov	r0, r3
 800c83a:	bd98      	pop	{r3, r4, r7, pc}
 800c83c:	080218cc 	.word	0x080218cc

0800c840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c840:	b598      	push	{r3, r4, r7, lr}
 800c842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800c844:	f7ff ffe8 	bl	800c818 <HAL_RCC_GetHCLKFreq>
 800c848:	4604      	mov	r4, r0
 800c84a:	f7ff f9ef 	bl	800bc2c <LL_RCC_GetAPB1Prescaler>
 800c84e:	4603      	mov	r3, r0
 800c850:	0a1b      	lsrs	r3, r3, #8
 800c852:	f003 0307 	and.w	r3, r3, #7
 800c856:	4a04      	ldr	r2, [pc, #16]	@ (800c868 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c85c:	f003 031f 	and.w	r3, r3, #31
 800c860:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c864:	4618      	mov	r0, r3
 800c866:	bd98      	pop	{r3, r4, r7, pc}
 800c868:	0802190c 	.word	0x0802190c

0800c86c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c86c:	b598      	push	{r3, r4, r7, lr}
 800c86e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800c870:	f7ff ffd2 	bl	800c818 <HAL_RCC_GetHCLKFreq>
 800c874:	4604      	mov	r4, r0
 800c876:	f7ff f9e5 	bl	800bc44 <LL_RCC_GetAPB2Prescaler>
 800c87a:	4603      	mov	r3, r0
 800c87c:	0adb      	lsrs	r3, r3, #11
 800c87e:	f003 0307 	and.w	r3, r3, #7
 800c882:	4a04      	ldr	r2, [pc, #16]	@ (800c894 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c888:	f003 031f 	and.w	r3, r3, #31
 800c88c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c890:	4618      	mov	r0, r3
 800c892:	bd98      	pop	{r3, r4, r7, pc}
 800c894:	0802190c 	.word	0x0802190c

0800c898 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800c898:	b590      	push	{r4, r7, lr}
 800c89a:	b085      	sub	sp, #20
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2bb0      	cmp	r3, #176	@ 0xb0
 800c8a4:	d903      	bls.n	800c8ae <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800c8a6:	4b15      	ldr	r3, [pc, #84]	@ (800c8fc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c8a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8aa:	60fb      	str	r3, [r7, #12]
 800c8ac:	e007      	b.n	800c8be <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	091b      	lsrs	r3, r3, #4
 800c8b2:	f003 030f 	and.w	r3, r3, #15
 800c8b6:	4a11      	ldr	r2, [pc, #68]	@ (800c8fc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8bc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800c8be:	f7ff f9a7 	bl	800bc10 <LL_RCC_GetAHB4Prescaler>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	091b      	lsrs	r3, r3, #4
 800c8c6:	f003 030f 	and.w	r3, r3, #15
 800c8ca:	4a0d      	ldr	r2, [pc, #52]	@ (800c900 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800c8cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8d6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	4a0a      	ldr	r2, [pc, #40]	@ (800c904 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800c8dc:	fba2 2303 	umull	r2, r3, r2, r3
 800c8e0:	0c9c      	lsrs	r4, r3, #18
 800c8e2:	f7fe fee5 	bl	800b6b0 <HAL_PWREx_GetVoltageRange>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	f000 f80c 	bl	800c908 <RCC_SetFlashLatency>
 800c8f0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3714      	adds	r7, #20
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd90      	pop	{r4, r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	0802192c 	.word	0x0802192c
 800c900:	080218cc 	.word	0x080218cc
 800c904:	431bde83 	.word	0x431bde83

0800c908 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800c908:	b590      	push	{r4, r7, lr}
 800c90a:	b093      	sub	sp, #76	@ 0x4c
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800c912:	4b37      	ldr	r3, [pc, #220]	@ (800c9f0 <RCC_SetFlashLatency+0xe8>)
 800c914:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800c918:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c91a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800c91e:	4a35      	ldr	r2, [pc, #212]	@ (800c9f4 <RCC_SetFlashLatency+0xec>)
 800c920:	f107 031c 	add.w	r3, r7, #28
 800c924:	ca07      	ldmia	r2, {r0, r1, r2}
 800c926:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800c92a:	4b33      	ldr	r3, [pc, #204]	@ (800c9f8 <RCC_SetFlashLatency+0xf0>)
 800c92c:	f107 040c 	add.w	r4, r7, #12
 800c930:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c932:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800c936:	2300      	movs	r3, #0
 800c938:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c940:	d11a      	bne.n	800c978 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c942:	2300      	movs	r3, #0
 800c944:	643b      	str	r3, [r7, #64]	@ 0x40
 800c946:	e013      	b.n	800c970 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800c948:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	3348      	adds	r3, #72	@ 0x48
 800c94e:	443b      	add	r3, r7
 800c950:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	429a      	cmp	r2, r3
 800c958:	d807      	bhi.n	800c96a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c95a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	3348      	adds	r3, #72	@ 0x48
 800c960:	443b      	add	r3, r7
 800c962:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c966:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800c968:	e020      	b.n	800c9ac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c96a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c96c:	3301      	adds	r3, #1
 800c96e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c972:	2b03      	cmp	r3, #3
 800c974:	d9e8      	bls.n	800c948 <RCC_SetFlashLatency+0x40>
 800c976:	e019      	b.n	800c9ac <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c978:	2300      	movs	r3, #0
 800c97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c97c:	e013      	b.n	800c9a6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800c97e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	3348      	adds	r3, #72	@ 0x48
 800c984:	443b      	add	r3, r7
 800c986:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d807      	bhi.n	800c9a0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	3348      	adds	r3, #72	@ 0x48
 800c996:	443b      	add	r3, r7
 800c998:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c99c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800c99e:	e005      	b.n	800c9ac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c9a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9a8:	2b02      	cmp	r3, #2
 800c9aa:	d9e8      	bls.n	800c97e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800c9ac:	4b13      	ldr	r3, [pc, #76]	@ (800c9fc <RCC_SetFlashLatency+0xf4>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f023 0207 	bic.w	r2, r3, #7
 800c9b4:	4911      	ldr	r1, [pc, #68]	@ (800c9fc <RCC_SetFlashLatency+0xf4>)
 800c9b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c9bc:	f7fa fb1e 	bl	8006ffc <HAL_GetTick>
 800c9c0:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c9c2:	e008      	b.n	800c9d6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c9c4:	f7fa fb1a 	bl	8006ffc <HAL_GetTick>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9cc:	1ad3      	subs	r3, r2, r3
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	d901      	bls.n	800c9d6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	e007      	b.n	800c9e6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c9d6:	4b09      	ldr	r3, [pc, #36]	@ (800c9fc <RCC_SetFlashLatency+0xf4>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f003 0307 	and.w	r3, r3, #7
 800c9de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d1ef      	bne.n	800c9c4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	374c      	adds	r7, #76	@ 0x4c
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd90      	pop	{r4, r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	0801fac4 	.word	0x0801fac4
 800c9f4:	0801fad4 	.word	0x0801fad4
 800c9f8:	0801fae0 	.word	0x0801fae0
 800c9fc:	58004000 	.word	0x58004000

0800ca00 <LL_RCC_LSE_IsEnabled>:
{
 800ca00:	b480      	push	{r7}
 800ca02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800ca04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca0c:	f003 0301 	and.w	r3, r3, #1
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d101      	bne.n	800ca18 <LL_RCC_LSE_IsEnabled+0x18>
 800ca14:	2301      	movs	r3, #1
 800ca16:	e000      	b.n	800ca1a <LL_RCC_LSE_IsEnabled+0x1a>
 800ca18:	2300      	movs	r3, #0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <LL_RCC_LSE_IsReady>:
{
 800ca24:	b480      	push	{r7}
 800ca26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ca28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca30:	f003 0302 	and.w	r3, r3, #2
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	d101      	bne.n	800ca3c <LL_RCC_LSE_IsReady+0x18>
 800ca38:	2301      	movs	r3, #1
 800ca3a:	e000      	b.n	800ca3e <LL_RCC_LSE_IsReady+0x1a>
 800ca3c:	2300      	movs	r3, #0
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <LL_RCC_SetRFWKPClockSource>:
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800ca50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ca58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800ca5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4313      	orrs	r3, r2
 800ca64:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800ca68:	bf00      	nop
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <LL_RCC_SetSMPSClockSource>:
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800ca7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca82:	f023 0203 	bic.w	r2, r3, #3
 800ca86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800ca90:	bf00      	nop
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <LL_RCC_SetSMPSPrescaler>:
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800caa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800caa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caaa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800caae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	4313      	orrs	r3, r2
 800cab6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800cab8:	bf00      	nop
 800caba:	370c      	adds	r7, #12
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <LL_RCC_SetUSARTClockSource>:
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800cacc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cad4:	f023 0203 	bic.w	r2, r3, #3
 800cad8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4313      	orrs	r3, r2
 800cae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cae4:	bf00      	nop
 800cae6:	370c      	adds	r7, #12
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <LL_RCC_SetLPUARTClockSource>:
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800caf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cafc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb00:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cb04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cb10:	bf00      	nop
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <LL_RCC_SetI2CClockSource>:
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b083      	sub	sp, #12
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800cb24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb28:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	091b      	lsrs	r3, r3, #4
 800cb30:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800cb34:	43db      	mvns	r3, r3
 800cb36:	401a      	ands	r2, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	011b      	lsls	r3, r3, #4
 800cb3c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800cb40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cb44:	4313      	orrs	r3, r2
 800cb46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cb4a:	bf00      	nop
 800cb4c:	370c      	adds	r7, #12
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr

0800cb56 <LL_RCC_SetLPTIMClockSource>:
{
 800cb56:	b480      	push	{r7}
 800cb58:	b083      	sub	sp, #12
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800cb5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb62:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	0c1b      	lsrs	r3, r3, #16
 800cb6a:	041b      	lsls	r3, r3, #16
 800cb6c:	43db      	mvns	r3, r3
 800cb6e:	401a      	ands	r2, r3
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	041b      	lsls	r3, r3, #16
 800cb74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cb7e:	bf00      	nop
 800cb80:	370c      	adds	r7, #12
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr

0800cb8a <LL_RCC_SetSAIClockSource>:
{
 800cb8a:	b480      	push	{r7}
 800cb8c:	b083      	sub	sp, #12
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800cb92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800cb9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4313      	orrs	r3, r2
 800cba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cbaa:	bf00      	nop
 800cbac:	370c      	adds	r7, #12
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr

0800cbb6 <LL_RCC_SetRNGClockSource>:
{
 800cbb6:	b480      	push	{r7}
 800cbb8:	b083      	sub	sp, #12
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800cbbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cbc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbc6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800cbca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cbd6:	bf00      	nop
 800cbd8:	370c      	adds	r7, #12
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr

0800cbe2 <LL_RCC_SetCLK48ClockSource>:
{
 800cbe2:	b480      	push	{r7}
 800cbe4:	b083      	sub	sp, #12
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800cbea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cbee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbf2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800cbf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cc02:	bf00      	nop
 800cc04:	370c      	adds	r7, #12
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr

0800cc0e <LL_RCC_SetUSBClockSource>:
{
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b082      	sub	sp, #8
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f7ff ffe3 	bl	800cbe2 <LL_RCC_SetCLK48ClockSource>
}
 800cc1c:	bf00      	nop
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <LL_RCC_SetADCClockSource>:
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800cc2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc34:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800cc38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cc44:	bf00      	nop
 800cc46:	370c      	adds	r7, #12
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <LL_RCC_SetRTCClockSource>:
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800cc58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cc64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800cc70:	bf00      	nop
 800cc72:	370c      	adds	r7, #12
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <LL_RCC_GetRTCClockSource>:
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800cc80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr

0800cc96 <LL_RCC_ForceBackupDomainReset>:
{
 800cc96:	b480      	push	{r7}
 800cc98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800cc9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cca2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ccaa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ccae:	bf00      	nop
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <LL_RCC_ReleaseBackupDomainReset>:
{
 800ccb8:	b480      	push	{r7}
 800ccba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800ccbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ccc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ccd0:	bf00      	nop
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr

0800ccda <LL_RCC_PLLSAI1_Enable>:
{
 800ccda:	b480      	push	{r7}
 800ccdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800ccde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cce8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ccec:	6013      	str	r3, [r2, #0]
}
 800ccee:	bf00      	nop
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <LL_RCC_PLLSAI1_Disable>:
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800ccfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cd0a:	6013      	str	r3, [r2, #0]
}
 800cd0c:	bf00      	nop
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <LL_RCC_PLLSAI1_IsReady>:
{
 800cd16:	b480      	push	{r7}
 800cd18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800cd1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd28:	d101      	bne.n	800cd2e <LL_RCC_PLLSAI1_IsReady+0x18>
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e000      	b.n	800cd30 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr

0800cd3a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b088      	sub	sp, #32
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800cd42:	2300      	movs	r3, #0
 800cd44:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800cd46:	2300      	movs	r3, #0
 800cd48:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d034      	beq.n	800cdc0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd5a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800cd5e:	d021      	beq.n	800cda4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800cd60:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800cd64:	d81b      	bhi.n	800cd9e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cd66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cd6a:	d01d      	beq.n	800cda8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800cd6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cd70:	d815      	bhi.n	800cd9e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00b      	beq.n	800cd8e <HAL_RCCEx_PeriphCLKConfig+0x54>
 800cd76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cd7a:	d110      	bne.n	800cd9e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800cd7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd80:	68db      	ldr	r3, [r3, #12]
 800cd82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cd8a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800cd8c:	e00d      	b.n	800cdaa <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	3304      	adds	r3, #4
 800cd92:	4618      	mov	r0, r3
 800cd94:	f000 f947 	bl	800d026 <RCCEx_PLLSAI1_ConfigNP>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800cd9c:	e005      	b.n	800cdaa <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	77fb      	strb	r3, [r7, #31]
        break;
 800cda2:	e002      	b.n	800cdaa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800cda4:	bf00      	nop
 800cda6:	e000      	b.n	800cdaa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800cda8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cdaa:	7ffb      	ldrb	r3, [r7, #31]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d105      	bne.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7ff fee8 	bl	800cb8a <LL_RCC_SetSAIClockSource>
 800cdba:	e001      	b.n	800cdc0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdbc:	7ffb      	ldrb	r3, [r7, #31]
 800cdbe:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d046      	beq.n	800ce5a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800cdcc:	f7ff ff56 	bl	800cc7c <LL_RCC_GetRTCClockSource>
 800cdd0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdd6:	69ba      	ldr	r2, [r7, #24]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d03c      	beq.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800cddc:	f7fe fc58 	bl	800b690 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d105      	bne.n	800cdf2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7ff ff30 	bl	800cc50 <LL_RCC_SetRTCClockSource>
 800cdf0:	e02e      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800cdf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cdf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdfa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800cdfc:	f7ff ff4b 	bl	800cc96 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800ce00:	f7ff ff5a 	bl	800ccb8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800ce12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800ce1c:	f7ff fdf0 	bl	800ca00 <LL_RCC_LSE_IsEnabled>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d114      	bne.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ce26:	f7fa f8e9 	bl	8006ffc <HAL_GetTick>
 800ce2a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800ce2c:	e00b      	b.n	800ce46 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce2e:	f7fa f8e5 	bl	8006ffc <HAL_GetTick>
 800ce32:	4602      	mov	r2, r0
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	1ad3      	subs	r3, r2, r3
 800ce38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d902      	bls.n	800ce46 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800ce40:	2303      	movs	r3, #3
 800ce42:	77fb      	strb	r3, [r7, #31]
              break;
 800ce44:	e004      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800ce46:	f7ff fded 	bl	800ca24 <LL_RCC_LSE_IsReady>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d1ee      	bne.n	800ce2e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800ce50:	7ffb      	ldrb	r3, [r7, #31]
 800ce52:	77bb      	strb	r3, [r7, #30]
 800ce54:	e001      	b.n	800ce5a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce56:	7ffb      	ldrb	r3, [r7, #31]
 800ce58:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f003 0301 	and.w	r3, r3, #1
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d004      	beq.n	800ce70 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	699b      	ldr	r3, [r3, #24]
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7ff fe2a 	bl	800cac4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f003 0302 	and.w	r3, r3, #2
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d004      	beq.n	800ce86 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	69db      	ldr	r3, [r3, #28]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7ff fe35 	bl	800caf0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f003 0310 	and.w	r3, r3, #16
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d004      	beq.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7ff fe5d 	bl	800cb56 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f003 0320 	and.w	r3, r3, #32
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d004      	beq.n	800ceb2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7ff fe52 	bl	800cb56 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f003 0304 	and.w	r3, r3, #4
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d004      	beq.n	800cec8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6a1b      	ldr	r3, [r3, #32]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7ff fe2a 	bl	800cb1c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f003 0308 	and.w	r3, r3, #8
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d004      	beq.n	800cede <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7ff fe1f 	bl	800cb1c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d022      	beq.n	800cf30 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7ff fe8d 	bl	800cc0e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cef8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cefc:	d107      	bne.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800cefe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf02:	68db      	ldr	r3, [r3, #12]
 800cf04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cf08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cf0c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cf16:	d10b      	bne.n	800cf30 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	3304      	adds	r3, #4
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f000 f8dd 	bl	800d0dc <RCCEx_PLLSAI1_ConfigNQ>
 800cf22:	4603      	mov	r3, r0
 800cf24:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800cf26:	7ffb      	ldrb	r3, [r7, #31]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d001      	beq.n	800cf30 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800cf2c:	7ffb      	ldrb	r3, [r7, #31]
 800cf2e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d02b      	beq.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf44:	d008      	beq.n	800cf58 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cf4e:	d003      	beq.n	800cf58 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d105      	bne.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7ff fe2a 	bl	800cbb6 <LL_RCC_SetRNGClockSource>
 800cf62:	e00a      	b.n	800cf7a <HAL_RCCEx_PeriphCLKConfig+0x240>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cf6c:	60fb      	str	r3, [r7, #12]
 800cf6e:	2000      	movs	r0, #0
 800cf70:	f7ff fe21 	bl	800cbb6 <LL_RCC_SetRNGClockSource>
 800cf74:	68f8      	ldr	r0, [r7, #12]
 800cf76:	f7ff fe34 	bl	800cbe2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf7e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800cf82:	d107      	bne.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800cf84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cf8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cf92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d022      	beq.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7ff fe3d 	bl	800cc24 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfb2:	d107      	bne.n	800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800cfb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfb8:	68db      	ldr	r3, [r3, #12]
 800cfba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cfbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cfc2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cfcc:	d10b      	bne.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	3304      	adds	r3, #4
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f000 f8dd 	bl	800d192 <RCCEx_PLLSAI1_ConfigNR>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800cfdc:	7ffb      	ldrb	r3, [r7, #31]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d001      	beq.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800cfe2:	7ffb      	ldrb	r3, [r7, #31]
 800cfe4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d004      	beq.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7ff fd26 	bl	800ca48 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d004:	2b00      	cmp	r3, #0
 800d006:	d009      	beq.n	800d01c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7ff fd45 	bl	800ca9c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d016:	4618      	mov	r0, r3
 800d018:	f7ff fd2c 	bl	800ca74 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800d01c:	7fbb      	ldrb	r3, [r7, #30]
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3720      	adds	r7, #32
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d026:	b580      	push	{r7, lr}
 800d028:	b084      	sub	sp, #16
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d02e:	2300      	movs	r3, #0
 800d030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d032:	f7ff fe61 	bl	800ccf8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d036:	f7f9 ffe1 	bl	8006ffc <HAL_GetTick>
 800d03a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d03c:	e009      	b.n	800d052 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d03e:	f7f9 ffdd 	bl	8006ffc <HAL_GetTick>
 800d042:	4602      	mov	r2, r0
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	1ad3      	subs	r3, r2, r3
 800d048:	2b02      	cmp	r3, #2
 800d04a:	d902      	bls.n	800d052 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d04c:	2303      	movs	r3, #3
 800d04e:	73fb      	strb	r3, [r7, #15]
      break;
 800d050:	e004      	b.n	800d05c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d052:	f7ff fe60 	bl	800cd16 <LL_RCC_PLLSAI1_IsReady>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d1f0      	bne.n	800d03e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d05c:	7bfb      	ldrb	r3, [r7, #15]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d137      	bne.n	800d0d2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d066:	691b      	ldr	r3, [r3, #16]
 800d068:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	021b      	lsls	r3, r3, #8
 800d072:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d076:	4313      	orrs	r3, r2
 800d078:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d07a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d07e:	691b      	ldr	r3, [r3, #16]
 800d080:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d08c:	4313      	orrs	r3, r2
 800d08e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d090:	f7ff fe23 	bl	800ccda <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d094:	f7f9 ffb2 	bl	8006ffc <HAL_GetTick>
 800d098:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d09a:	e009      	b.n	800d0b0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d09c:	f7f9 ffae 	bl	8006ffc <HAL_GetTick>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	1ad3      	subs	r3, r2, r3
 800d0a6:	2b02      	cmp	r3, #2
 800d0a8:	d902      	bls.n	800d0b0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d0aa:	2303      	movs	r3, #3
 800d0ac:	73fb      	strb	r3, [r7, #15]
        break;
 800d0ae:	e004      	b.n	800d0ba <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d0b0:	f7ff fe31 	bl	800cd16 <LL_RCC_PLLSAI1_IsReady>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d1f0      	bne.n	800d09c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d0ba:	7bfb      	ldrb	r3, [r7, #15]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d108      	bne.n	800d0d2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d0c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0c4:	691a      	ldr	r2, [r3, #16]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	691b      	ldr	r3, [r3, #16]
 800d0ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3710      	adds	r7, #16
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d0e8:	f7ff fe06 	bl	800ccf8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d0ec:	f7f9 ff86 	bl	8006ffc <HAL_GetTick>
 800d0f0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d0f2:	e009      	b.n	800d108 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d0f4:	f7f9 ff82 	bl	8006ffc <HAL_GetTick>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	1ad3      	subs	r3, r2, r3
 800d0fe:	2b02      	cmp	r3, #2
 800d100:	d902      	bls.n	800d108 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d102:	2303      	movs	r3, #3
 800d104:	73fb      	strb	r3, [r7, #15]
      break;
 800d106:	e004      	b.n	800d112 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d108:	f7ff fe05 	bl	800cd16 <LL_RCC_PLLSAI1_IsReady>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d1f0      	bne.n	800d0f4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d112:	7bfb      	ldrb	r3, [r7, #15]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d137      	bne.n	800d188 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d11c:	691b      	ldr	r3, [r3, #16]
 800d11e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	021b      	lsls	r3, r3, #8
 800d128:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d12c:	4313      	orrs	r3, r2
 800d12e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d134:	691b      	ldr	r3, [r3, #16]
 800d136:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d142:	4313      	orrs	r3, r2
 800d144:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d146:	f7ff fdc8 	bl	800ccda <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d14a:	f7f9 ff57 	bl	8006ffc <HAL_GetTick>
 800d14e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d150:	e009      	b.n	800d166 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d152:	f7f9 ff53 	bl	8006ffc <HAL_GetTick>
 800d156:	4602      	mov	r2, r0
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	1ad3      	subs	r3, r2, r3
 800d15c:	2b02      	cmp	r3, #2
 800d15e:	d902      	bls.n	800d166 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d160:	2303      	movs	r3, #3
 800d162:	73fb      	strb	r3, [r7, #15]
        break;
 800d164:	e004      	b.n	800d170 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d166:	f7ff fdd6 	bl	800cd16 <LL_RCC_PLLSAI1_IsReady>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d1f0      	bne.n	800d152 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800d170:	7bfb      	ldrb	r3, [r7, #15]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d108      	bne.n	800d188 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d17a:	691a      	ldr	r2, [r3, #16]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	691b      	ldr	r3, [r3, #16]
 800d180:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d184:	4313      	orrs	r3, r2
 800d186:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d188:	7bfb      	ldrb	r3, [r7, #15]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3710      	adds	r7, #16
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d192:	b580      	push	{r7, lr}
 800d194:	b084      	sub	sp, #16
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d19a:	2300      	movs	r3, #0
 800d19c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d19e:	f7ff fdab 	bl	800ccf8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d1a2:	f7f9 ff2b 	bl	8006ffc <HAL_GetTick>
 800d1a6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d1a8:	e009      	b.n	800d1be <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d1aa:	f7f9 ff27 	bl	8006ffc <HAL_GetTick>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	1ad3      	subs	r3, r2, r3
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	d902      	bls.n	800d1be <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800d1b8:	2303      	movs	r3, #3
 800d1ba:	73fb      	strb	r3, [r7, #15]
      break;
 800d1bc:	e004      	b.n	800d1c8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d1be:	f7ff fdaa 	bl	800cd16 <LL_RCC_PLLSAI1_IsReady>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d1f0      	bne.n	800d1aa <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800d1c8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d137      	bne.n	800d23e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d1ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1d2:	691b      	ldr	r3, [r3, #16]
 800d1d4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	021b      	lsls	r3, r3, #8
 800d1de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d1e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1ea:	691b      	ldr	r3, [r3, #16]
 800d1ec:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d1fc:	f7ff fd6d 	bl	800ccda <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d200:	f7f9 fefc 	bl	8006ffc <HAL_GetTick>
 800d204:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d206:	e009      	b.n	800d21c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d208:	f7f9 fef8 	bl	8006ffc <HAL_GetTick>
 800d20c:	4602      	mov	r2, r0
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	2b02      	cmp	r3, #2
 800d214:	d902      	bls.n	800d21c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d216:	2303      	movs	r3, #3
 800d218:	73fb      	strb	r3, [r7, #15]
        break;
 800d21a:	e004      	b.n	800d226 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d21c:	f7ff fd7b 	bl	800cd16 <LL_RCC_PLLSAI1_IsReady>
 800d220:	4603      	mov	r3, r0
 800d222:	2b01      	cmp	r3, #1
 800d224:	d1f0      	bne.n	800d208 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d226:	7bfb      	ldrb	r3, [r7, #15]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d108      	bne.n	800d23e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d22c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d230:	691a      	ldr	r2, [r3, #16]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	691b      	ldr	r3, [r3, #16]
 800d236:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d23a:	4313      	orrs	r3, r2
 800d23c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d23e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d240:	4618      	mov	r0, r3
 800d242:	3710      	adds	r7, #16
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d101      	bne.n	800d25a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800d256:	2301      	movs	r3, #1
 800d258:	e09f      	b.n	800d39a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d260:	b2db      	uxtb	r3, r3
 800d262:	2b00      	cmp	r3, #0
 800d264:	d106      	bne.n	800d274 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2200      	movs	r2, #0
 800d26a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f7f6 fa72 	bl	8003758 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2202      	movs	r2, #2
 800d278:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d27c:	4b49      	ldr	r3, [pc, #292]	@ (800d3a4 <HAL_RTC_Init+0x15c>)
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	f003 0310 	and.w	r3, r3, #16
 800d284:	2b10      	cmp	r3, #16
 800d286:	d07e      	beq.n	800d386 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	22ca      	movs	r2, #202	@ 0xca
 800d28e:	625a      	str	r2, [r3, #36]	@ 0x24
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2253      	movs	r2, #83	@ 0x53
 800d296:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 fa1d 	bl	800d6d8 <RTC_EnterInitMode>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d00a      	beq.n	800d2ba <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	22ff      	movs	r2, #255	@ 0xff
 800d2aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2204      	movs	r2, #4
 800d2b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	73fb      	strb	r3, [r7, #15]
 800d2b8:	e067      	b.n	800d38a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	689b      	ldr	r3, [r3, #8]
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	6812      	ldr	r2, [r2, #0]
 800d2c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d2c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2cc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	6899      	ldr	r1, [r3, #8]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	685a      	ldr	r2, [r3, #4]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	691b      	ldr	r3, [r3, #16]
 800d2dc:	431a      	orrs	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	699b      	ldr	r3, [r3, #24]
 800d2e2:	431a      	orrs	r2, r3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	430a      	orrs	r2, r1
 800d2ea:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	68d2      	ldr	r2, [r2, #12]
 800d2f4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	6919      	ldr	r1, [r3, #16]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	041a      	lsls	r2, r3, #16
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	430a      	orrs	r2, r1
 800d308:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	68da      	ldr	r2, [r3, #12]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d318:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f022 0203 	bic.w	r2, r2, #3
 800d328:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	69da      	ldr	r2, [r3, #28]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	695b      	ldr	r3, [r3, #20]
 800d338:	431a      	orrs	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	430a      	orrs	r2, r1
 800d340:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	689b      	ldr	r3, [r3, #8]
 800d348:	f003 0320 	and.w	r3, r3, #32
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d113      	bne.n	800d378 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f000 f99b 	bl	800d68c <HAL_RTC_WaitForSynchro>
 800d356:	4603      	mov	r3, r0
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d00d      	beq.n	800d378 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	22ff      	movs	r2, #255	@ 0xff
 800d362:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2204      	movs	r2, #4
 800d368:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2200      	movs	r2, #0
 800d370:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800d374:	2301      	movs	r3, #1
 800d376:	e010      	b.n	800d39a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	22ff      	movs	r2, #255	@ 0xff
 800d37e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800d380:	2300      	movs	r3, #0
 800d382:	73fb      	strb	r3, [r7, #15]
 800d384:	e001      	b.n	800d38a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800d386:	2300      	movs	r3, #0
 800d388:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d38a:	7bfb      	ldrb	r3, [r7, #15]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d103      	bne.n	800d398 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2201      	movs	r2, #1
 800d394:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800d398:	7bfb      	ldrb	r3, [r7, #15]
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	40002800 	.word	0x40002800

0800d3a8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d3a8:	b590      	push	{r4, r7, lr}
 800d3aa:	b087      	sub	sp, #28
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d101      	bne.n	800d3c2 <HAL_RTC_SetTime+0x1a>
 800d3be:	2302      	movs	r3, #2
 800d3c0:	e0b2      	b.n	800d528 <HAL_RTC_SetTime+0x180>
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2202      	movs	r2, #2
 800d3ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d126      	bne.n	800d426 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	689b      	ldr	r3, [r3, #8]
 800d3de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d102      	bne.n	800d3ec <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f000 f99b 	bl	800d72c <RTC_ByteToBcd2>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	785b      	ldrb	r3, [r3, #1]
 800d3fe:	4618      	mov	r0, r3
 800d400:	f000 f994 	bl	800d72c <RTC_ByteToBcd2>
 800d404:	4603      	mov	r3, r0
 800d406:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d408:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	789b      	ldrb	r3, [r3, #2]
 800d40e:	4618      	mov	r0, r3
 800d410:	f000 f98c 	bl	800d72c <RTC_ByteToBcd2>
 800d414:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d416:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	78db      	ldrb	r3, [r3, #3]
 800d41e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d420:	4313      	orrs	r3, r2
 800d422:	617b      	str	r3, [r7, #20]
 800d424:	e018      	b.n	800d458 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	689b      	ldr	r3, [r3, #8]
 800d42c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d430:	2b00      	cmp	r3, #0
 800d432:	d102      	bne.n	800d43a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	2200      	movs	r2, #0
 800d438:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	785b      	ldrb	r3, [r3, #1]
 800d444:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d446:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d448:	68ba      	ldr	r2, [r7, #8]
 800d44a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d44c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	78db      	ldrb	r3, [r3, #3]
 800d452:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d454:	4313      	orrs	r3, r2
 800d456:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	22ca      	movs	r2, #202	@ 0xca
 800d45e:	625a      	str	r2, [r3, #36]	@ 0x24
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	2253      	movs	r2, #83	@ 0x53
 800d466:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d468:	68f8      	ldr	r0, [r7, #12]
 800d46a:	f000 f935 	bl	800d6d8 <RTC_EnterInitMode>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	d00d      	beq.n	800d490 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	22ff      	movs	r2, #255	@ 0xff
 800d47a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2204      	movs	r2, #4
 800d480:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2200      	movs	r2, #0
 800d488:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d48c:	2301      	movs	r3, #1
 800d48e:	e04b      	b.n	800d528 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800d49a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800d49e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	689a      	ldr	r2, [r3, #8]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d4ae:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	6899      	ldr	r1, [r3, #8]
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	68da      	ldr	r2, [r3, #12]
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	691b      	ldr	r3, [r3, #16]
 800d4be:	431a      	orrs	r2, r3
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	430a      	orrs	r2, r1
 800d4c6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	68da      	ldr	r2, [r3, #12]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d4d6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	689b      	ldr	r3, [r3, #8]
 800d4de:	f003 0320 	and.w	r3, r3, #32
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d113      	bne.n	800d50e <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f000 f8d0 	bl	800d68c <HAL_RTC_WaitForSynchro>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00d      	beq.n	800d50e <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	22ff      	movs	r2, #255	@ 0xff
 800d4f8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2204      	movs	r2, #4
 800d4fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2200      	movs	r2, #0
 800d506:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d50a:	2301      	movs	r3, #1
 800d50c:	e00c      	b.n	800d528 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	22ff      	movs	r2, #255	@ 0xff
 800d514:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2201      	movs	r2, #1
 800d51a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2200      	movs	r2, #0
 800d522:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800d526:	2300      	movs	r3, #0
  }
}
 800d528:	4618      	mov	r0, r3
 800d52a:	371c      	adds	r7, #28
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd90      	pop	{r4, r7, pc}

0800d530 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d530:	b590      	push	{r4, r7, lr}
 800d532:	b087      	sub	sp, #28
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d542:	2b01      	cmp	r3, #1
 800d544:	d101      	bne.n	800d54a <HAL_RTC_SetDate+0x1a>
 800d546:	2302      	movs	r3, #2
 800d548:	e09c      	b.n	800d684 <HAL_RTC_SetDate+0x154>
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2201      	movs	r2, #1
 800d54e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2202      	movs	r2, #2
 800d556:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d10e      	bne.n	800d57e <HAL_RTC_SetDate+0x4e>
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	785b      	ldrb	r3, [r3, #1]
 800d564:	f003 0310 	and.w	r3, r3, #16
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d008      	beq.n	800d57e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	785b      	ldrb	r3, [r3, #1]
 800d570:	f023 0310 	bic.w	r3, r3, #16
 800d574:	b2db      	uxtb	r3, r3
 800d576:	330a      	adds	r3, #10
 800d578:	b2da      	uxtb	r2, r3
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d11c      	bne.n	800d5be <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	78db      	ldrb	r3, [r3, #3]
 800d588:	4618      	mov	r0, r3
 800d58a:	f000 f8cf 	bl	800d72c <RTC_ByteToBcd2>
 800d58e:	4603      	mov	r3, r0
 800d590:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	785b      	ldrb	r3, [r3, #1]
 800d596:	4618      	mov	r0, r3
 800d598:	f000 f8c8 	bl	800d72c <RTC_ByteToBcd2>
 800d59c:	4603      	mov	r3, r0
 800d59e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d5a0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	789b      	ldrb	r3, [r3, #2]
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f000 f8c0 	bl	800d72c <RTC_ByteToBcd2>
 800d5ac:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d5ae:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	617b      	str	r3, [r7, #20]
 800d5bc:	e00e      	b.n	800d5dc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	78db      	ldrb	r3, [r3, #3]
 800d5c2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	785b      	ldrb	r3, [r3, #1]
 800d5c8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d5ca:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800d5cc:	68ba      	ldr	r2, [r7, #8]
 800d5ce:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800d5d0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	22ca      	movs	r2, #202	@ 0xca
 800d5e2:	625a      	str	r2, [r3, #36]	@ 0x24
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2253      	movs	r2, #83	@ 0x53
 800d5ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d5ec:	68f8      	ldr	r0, [r7, #12]
 800d5ee:	f000 f873 	bl	800d6d8 <RTC_EnterInitMode>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00d      	beq.n	800d614 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	22ff      	movs	r2, #255	@ 0xff
 800d5fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2204      	movs	r2, #4
 800d604:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2200      	movs	r2, #0
 800d60c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d610:	2301      	movs	r3, #1
 800d612:	e037      	b.n	800d684 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d61e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d622:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	68da      	ldr	r2, [r3, #12]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d632:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	f003 0320 	and.w	r3, r3, #32
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d113      	bne.n	800d66a <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d642:	68f8      	ldr	r0, [r7, #12]
 800d644:	f000 f822 	bl	800d68c <HAL_RTC_WaitForSynchro>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00d      	beq.n	800d66a <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	22ff      	movs	r2, #255	@ 0xff
 800d654:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2204      	movs	r2, #4
 800d65a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2200      	movs	r2, #0
 800d662:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d666:	2301      	movs	r3, #1
 800d668:	e00c      	b.n	800d684 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	22ff      	movs	r2, #255	@ 0xff
 800d670:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2201      	movs	r2, #1
 800d676:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2200      	movs	r2, #0
 800d67e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800d682:	2300      	movs	r3, #0
  }
}
 800d684:	4618      	mov	r0, r3
 800d686:	371c      	adds	r7, #28
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd90      	pop	{r4, r7, pc}

0800d68c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	68da      	ldr	r2, [r3, #12]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800d6a2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800d6a4:	f7f9 fcaa 	bl	8006ffc <HAL_GetTick>
 800d6a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d6aa:	e009      	b.n	800d6c0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d6ac:	f7f9 fca6 	bl	8006ffc <HAL_GetTick>
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	1ad3      	subs	r3, r2, r3
 800d6b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d6ba:	d901      	bls.n	800d6c0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800d6bc:	2303      	movs	r3, #3
 800d6be:	e007      	b.n	800d6d0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	f003 0320 	and.w	r3, r3, #32
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d0ee      	beq.n	800d6ac <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800d6ce:	2300      	movs	r3, #0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3710      	adds	r7, #16
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b084      	sub	sp, #16
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d119      	bne.n	800d722 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d6f6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d6f8:	f7f9 fc80 	bl	8006ffc <HAL_GetTick>
 800d6fc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d6fe:	e009      	b.n	800d714 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d700:	f7f9 fc7c 	bl	8006ffc <HAL_GetTick>
 800d704:	4602      	mov	r2, r0
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	1ad3      	subs	r3, r2, r3
 800d70a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d70e:	d901      	bls.n	800d714 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800d710:	2303      	movs	r3, #3
 800d712:	e007      	b.n	800d724 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d0ee      	beq.n	800d700 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800d722:	2300      	movs	r3, #0
}
 800d724:	4618      	mov	r0, r3
 800d726:	3710      	adds	r7, #16
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b085      	sub	sp, #20
 800d730:	af00      	add	r7, sp, #0
 800d732:	4603      	mov	r3, r0
 800d734:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d736:	2300      	movs	r3, #0
 800d738:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800d73a:	79fb      	ldrb	r3, [r7, #7]
 800d73c:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800d73e:	e005      	b.n	800d74c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	3301      	adds	r3, #1
 800d744:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800d746:	7afb      	ldrb	r3, [r7, #11]
 800d748:	3b0a      	subs	r3, #10
 800d74a:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800d74c:	7afb      	ldrb	r3, [r7, #11]
 800d74e:	2b09      	cmp	r3, #9
 800d750:	d8f6      	bhi.n	800d740 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	b2db      	uxtb	r3, r3
 800d756:	011b      	lsls	r3, r3, #4
 800d758:	b2da      	uxtb	r2, r3
 800d75a:	7afb      	ldrb	r3, [r7, #11]
 800d75c:	4313      	orrs	r3, r2
 800d75e:	b2db      	uxtb	r3, r3
}
 800d760:	4618      	mov	r0, r3
 800d762:	3714      	adds	r7, #20
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr

0800d76c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b086      	sub	sp, #24
 800d770:	af00      	add	r7, sp, #0
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	60b9      	str	r1, [r7, #8]
 800d776:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d101      	bne.n	800d786 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800d782:	2302      	movs	r3, #2
 800d784:	e0a8      	b.n	800d8d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2201      	movs	r2, #1
 800d78a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2202      	movs	r2, #2
 800d792:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	22ca      	movs	r2, #202	@ 0xca
 800d79c:	625a      	str	r2, [r3, #36]	@ 0x24
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2253      	movs	r2, #83	@ 0x53
 800d7a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d020      	beq.n	800d7f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800d7b4:	f7f9 fc22 	bl	8006ffc <HAL_GetTick>
 800d7b8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800d7ba:	e015      	b.n	800d7e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d7bc:	f7f9 fc1e 	bl	8006ffc <HAL_GetTick>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	1ad3      	subs	r3, r2, r3
 800d7c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d7ca:	d90d      	bls.n	800d7e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	22ff      	movs	r2, #255	@ 0xff
 800d7d2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2203      	movs	r2, #3
 800d7d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800d7e4:	2303      	movs	r3, #3
 800d7e6:	e077      	b.n	800d8d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	68db      	ldr	r3, [r3, #12]
 800d7ee:	f003 0304 	and.w	r3, r3, #4
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d1e2      	bne.n	800d7bc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	689a      	ldr	r2, [r3, #8]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d804:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	68db      	ldr	r3, [r3, #12]
 800d80c:	b2da      	uxtb	r2, r3
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800d816:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800d818:	f7f9 fbf0 	bl	8006ffc <HAL_GetTick>
 800d81c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800d81e:	e015      	b.n	800d84c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d820:	f7f9 fbec 	bl	8006ffc <HAL_GetTick>
 800d824:	4602      	mov	r2, r0
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	1ad3      	subs	r3, r2, r3
 800d82a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d82e:	d90d      	bls.n	800d84c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	22ff      	movs	r2, #255	@ 0xff
 800d836:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2203      	movs	r2, #3
 800d83c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2200      	movs	r2, #0
 800d844:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800d848:	2303      	movs	r3, #3
 800d84a:	e045      	b.n	800d8d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	f003 0304 	and.w	r3, r3, #4
 800d856:	2b00      	cmp	r3, #0
 800d858:	d0e2      	beq.n	800d820 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	68ba      	ldr	r2, [r7, #8]
 800d860:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	689a      	ldr	r2, [r3, #8]
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f022 0207 	bic.w	r2, r2, #7
 800d870:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	6899      	ldr	r1, [r3, #8]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	430a      	orrs	r2, r1
 800d880:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800d882:	4b17      	ldr	r3, [pc, #92]	@ (800d8e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d888:	4a15      	ldr	r2, [pc, #84]	@ (800d8e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d88a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d88e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800d892:	4b13      	ldr	r3, [pc, #76]	@ (800d8e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4a12      	ldr	r2, [pc, #72]	@ (800d8e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d898:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d89c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	689a      	ldr	r2, [r3, #8]
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d8ac:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	689a      	ldr	r2, [r3, #8]
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d8bc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	22ff      	movs	r2, #255	@ 0xff
 800d8c4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800d8d6:	2300      	movs	r3, #0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3718      	adds	r7, #24
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	58000800 	.word	0x58000800

0800d8e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d101      	bne.n	800d8f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e095      	b.n	800da22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d108      	bne.n	800d910 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d906:	d009      	beq.n	800d91c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	61da      	str	r2, [r3, #28]
 800d90e:	e005      	b.n	800d91c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2200      	movs	r2, #0
 800d914:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d106      	bne.n	800d93c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2200      	movs	r2, #0
 800d932:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f7f5 ffb6 	bl	80038a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2202      	movs	r2, #2
 800d940:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d952:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d95c:	d902      	bls.n	800d964 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d95e:	2300      	movs	r3, #0
 800d960:	60fb      	str	r3, [r7, #12]
 800d962:	e002      	b.n	800d96a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d964:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d968:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	68db      	ldr	r3, [r3, #12]
 800d96e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800d972:	d007      	beq.n	800d984 <HAL_SPI_Init+0xa0>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	68db      	ldr	r3, [r3, #12]
 800d978:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d97c:	d002      	beq.n	800d984 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2200      	movs	r2, #0
 800d982:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d994:	431a      	orrs	r2, r3
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	691b      	ldr	r3, [r3, #16]
 800d99a:	f003 0302 	and.w	r3, r3, #2
 800d99e:	431a      	orrs	r2, r3
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	695b      	ldr	r3, [r3, #20]
 800d9a4:	f003 0301 	and.w	r3, r3, #1
 800d9a8:	431a      	orrs	r2, r3
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	699b      	ldr	r3, [r3, #24]
 800d9ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d9b2:	431a      	orrs	r2, r3
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	69db      	ldr	r3, [r3, #28]
 800d9b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d9bc:	431a      	orrs	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6a1b      	ldr	r3, [r3, #32]
 800d9c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9c6:	ea42 0103 	orr.w	r1, r2, r3
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9ce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	430a      	orrs	r2, r1
 800d9d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	699b      	ldr	r3, [r3, #24]
 800d9de:	0c1b      	lsrs	r3, r3, #16
 800d9e0:	f003 0204 	and.w	r2, r3, #4
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9e8:	f003 0310 	and.w	r3, r3, #16
 800d9ec:	431a      	orrs	r2, r3
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9f2:	f003 0308 	and.w	r3, r3, #8
 800d9f6:	431a      	orrs	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800da00:	ea42 0103 	orr.w	r1, r2, r3
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	430a      	orrs	r2, r1
 800da10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2200      	movs	r2, #0
 800da16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2201      	movs	r2, #1
 800da1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800da20:	2300      	movs	r3, #0
}
 800da22:	4618      	mov	r0, r3
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
	...

0800da2c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	4613      	mov	r3, r2
 800da38:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800da40:	b2db      	uxtb	r3, r3
 800da42:	2b01      	cmp	r3, #1
 800da44:	d001      	beq.n	800da4a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800da46:	2302      	movs	r3, #2
 800da48:	e0d4      	b.n	800dbf4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d002      	beq.n	800da56 <HAL_SPI_Transmit_DMA+0x2a>
 800da50:	88fb      	ldrh	r3, [r7, #6]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d101      	bne.n	800da5a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800da56:	2301      	movs	r3, #1
 800da58:	e0cc      	b.n	800dbf4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800da60:	2b01      	cmp	r3, #1
 800da62:	d101      	bne.n	800da68 <HAL_SPI_Transmit_DMA+0x3c>
 800da64:	2302      	movs	r3, #2
 800da66:	e0c5      	b.n	800dbf4 <HAL_SPI_Transmit_DMA+0x1c8>
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2201      	movs	r2, #1
 800da6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2203      	movs	r2, #3
 800da74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2200      	movs	r2, #0
 800da7c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	68ba      	ldr	r2, [r7, #8]
 800da82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	88fa      	ldrh	r2, [r7, #6]
 800da88:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	88fa      	ldrh	r2, [r7, #6]
 800da8e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2200      	movs	r2, #0
 800da94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2200      	movs	r2, #0
 800da9a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2200      	movs	r2, #0
 800daa0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2200      	movs	r2, #0
 800daa6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2200      	movs	r2, #0
 800daae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	689b      	ldr	r3, [r3, #8]
 800dab6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800daba:	d10f      	bne.n	800dadc <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	681a      	ldr	r2, [r3, #0]
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800daca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dada:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dae0:	4a46      	ldr	r2, [pc, #280]	@ (800dbfc <HAL_SPI_Transmit_DMA+0x1d0>)
 800dae2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dae8:	4a45      	ldr	r2, [pc, #276]	@ (800dc00 <HAL_SPI_Transmit_DMA+0x1d4>)
 800daea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800daf0:	4a44      	ldr	r2, [pc, #272]	@ (800dc04 <HAL_SPI_Transmit_DMA+0x1d8>)
 800daf2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800daf8:	2200      	movs	r2, #0
 800dafa:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	685a      	ldr	r2, [r3, #4]
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800db0a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	68db      	ldr	r3, [r3, #12]
 800db10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800db14:	d82d      	bhi.n	800db72 <HAL_SPI_Transmit_DMA+0x146>
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db1a:	699b      	ldr	r3, [r3, #24]
 800db1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db20:	d127      	bne.n	800db72 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800db26:	b29b      	uxth	r3, r3
 800db28:	f003 0301 	and.w	r3, r3, #1
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d10f      	bne.n	800db50 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	685a      	ldr	r2, [r3, #4]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800db3e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800db44:	b29b      	uxth	r3, r3
 800db46:	085b      	lsrs	r3, r3, #1
 800db48:	b29a      	uxth	r2, r3
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800db4e:	e010      	b.n	800db72 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	685a      	ldr	r2, [r3, #4]
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800db5e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800db64:	b29b      	uxth	r3, r3
 800db66:	085b      	lsrs	r3, r3, #1
 800db68:	b29b      	uxth	r3, r3
 800db6a:	3301      	adds	r3, #1
 800db6c:	b29a      	uxth	r2, r3
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db7a:	4619      	mov	r1, r3
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	330c      	adds	r3, #12
 800db82:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800db88:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800db8a:	f7fa fdb3 	bl	80086f4 <HAL_DMA_Start_IT>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d00b      	beq.n	800dbac <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db98:	f043 0210 	orr.w	r2, r3, #16
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2200      	movs	r2, #0
 800dba4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e023      	b.n	800dbf4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbb6:	2b40      	cmp	r3, #64	@ 0x40
 800dbb8:	d007      	beq.n	800dbca <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	681a      	ldr	r2, [r3, #0]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dbc8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	685a      	ldr	r2, [r3, #4]
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f042 0220 	orr.w	r2, r2, #32
 800dbe0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	685a      	ldr	r2, [r3, #4]
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f042 0202 	orr.w	r2, r2, #2
 800dbf0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dbf2:	2300      	movs	r3, #0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3710      	adds	r7, #16
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}
 800dbfc:	0800e643 	.word	0x0800e643
 800dc00:	0800e465 	.word	0x0800e465
 800dc04:	0800e697 	.word	0x0800e697

0800dc08 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	60b9      	str	r1, [r7, #8]
 800dc12:	4613      	mov	r3, r2
 800dc14:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	2b01      	cmp	r3, #1
 800dc20:	d001      	beq.n	800dc26 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 800dc22:	2302      	movs	r3, #2
 800dc24:	e105      	b.n	800de32 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d002      	beq.n	800dc32 <HAL_SPI_Receive_DMA+0x2a>
 800dc2c:	88fb      	ldrh	r3, [r7, #6]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d101      	bne.n	800dc36 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 800dc32:	2301      	movs	r3, #1
 800dc34:	e0fd      	b.n	800de32 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	689b      	ldr	r3, [r3, #8]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d110      	bne.n	800dc60 <HAL_SPI_Receive_DMA+0x58>
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dc46:	d10b      	bne.n	800dc60 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2204      	movs	r2, #4
 800dc4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800dc50:	88fb      	ldrh	r3, [r7, #6]
 800dc52:	68ba      	ldr	r2, [r7, #8]
 800dc54:	68b9      	ldr	r1, [r7, #8]
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f000 f8f6 	bl	800de48 <HAL_SPI_TransmitReceive_DMA>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	e0e8      	b.n	800de32 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d101      	bne.n	800dc6e <HAL_SPI_Receive_DMA+0x66>
 800dc6a:	2302      	movs	r3, #2
 800dc6c:	e0e1      	b.n	800de32 <HAL_SPI_Receive_DMA+0x22a>
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2201      	movs	r2, #1
 800dc72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2204      	movs	r2, #4
 800dc7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2200      	movs	r2, #0
 800dc82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	68ba      	ldr	r2, [r7, #8]
 800dc88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	88fa      	ldrh	r2, [r7, #6]
 800dc8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	88fa      	ldrh	r2, [r7, #6]
 800dc96:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2200      	movs	r2, #0
 800dca4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	689b      	ldr	r3, [r3, #8]
 800dcb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dcba:	d10f      	bne.n	800dcdc <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dcca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800dcda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	685a      	ldr	r2, [r3, #4]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800dcea:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dcf4:	d908      	bls.n	800dd08 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	685a      	ldr	r2, [r3, #4]
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800dd04:	605a      	str	r2, [r3, #4]
 800dd06:	e042      	b.n	800dd8e <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	685a      	ldr	r2, [r3, #4]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800dd16:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd1c:	699b      	ldr	r3, [r3, #24]
 800dd1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd22:	d134      	bne.n	800dd8e <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	685a      	ldr	r2, [r3, #4]
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800dd32:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800dd3a:	b29b      	uxth	r3, r3
 800dd3c:	f003 0301 	and.w	r3, r3, #1
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d111      	bne.n	800dd68 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	685a      	ldr	r2, [r3, #4]
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800dd52:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	085b      	lsrs	r3, r3, #1
 800dd5e:	b29a      	uxth	r2, r3
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800dd66:	e012      	b.n	800dd8e <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	685a      	ldr	r2, [r3, #4]
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dd76:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	085b      	lsrs	r3, r3, #1
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	3301      	adds	r3, #1
 800dd86:	b29a      	uxth	r2, r3
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd92:	4a2a      	ldr	r2, [pc, #168]	@ (800de3c <HAL_SPI_Receive_DMA+0x234>)
 800dd94:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd9a:	4a29      	ldr	r2, [pc, #164]	@ (800de40 <HAL_SPI_Receive_DMA+0x238>)
 800dd9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dda2:	4a28      	ldr	r2, [pc, #160]	@ (800de44 <HAL_SPI_Receive_DMA+0x23c>)
 800dda4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddaa:	2200      	movs	r2, #0
 800ddac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	330c      	adds	r3, #12
 800ddb8:	4619      	mov	r1, r3
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddbe:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ddc6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ddc8:	f7fa fc94 	bl	80086f4 <HAL_DMA_Start_IT>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d00b      	beq.n	800ddea <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ddd6:	f043 0210 	orr.w	r2, r3, #16
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2200      	movs	r2, #0
 800dde2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800dde6:	2301      	movs	r3, #1
 800dde8:	e023      	b.n	800de32 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddf4:	2b40      	cmp	r3, #64	@ 0x40
 800ddf6:	d007      	beq.n	800de08 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	681a      	ldr	r2, [r3, #0]
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800de06:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2200      	movs	r2, #0
 800de0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	685a      	ldr	r2, [r3, #4]
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f042 0220 	orr.w	r2, r2, #32
 800de1e:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	685a      	ldr	r2, [r3, #4]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f042 0201 	orr.w	r2, r2, #1
 800de2e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3710      	adds	r7, #16
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	0800e65f 	.word	0x0800e65f
 800de40:	0800e50b 	.word	0x0800e50b
 800de44:	0800e697 	.word	0x0800e697

0800de48 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b086      	sub	sp, #24
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	607a      	str	r2, [r7, #4]
 800de54:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800de5c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800de64:	7dfb      	ldrb	r3, [r7, #23]
 800de66:	2b01      	cmp	r3, #1
 800de68:	d00c      	beq.n	800de84 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800de70:	d106      	bne.n	800de80 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	689b      	ldr	r3, [r3, #8]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d102      	bne.n	800de80 <HAL_SPI_TransmitReceive_DMA+0x38>
 800de7a:	7dfb      	ldrb	r3, [r7, #23]
 800de7c:	2b04      	cmp	r3, #4
 800de7e:	d001      	beq.n	800de84 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800de80:	2302      	movs	r3, #2
 800de82:	e158      	b.n	800e136 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d005      	beq.n	800de96 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d002      	beq.n	800de96 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800de90:	887b      	ldrh	r3, [r7, #2]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d101      	bne.n	800de9a <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800de96:	2301      	movs	r3, #1
 800de98:	e14d      	b.n	800e136 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	d101      	bne.n	800dea8 <HAL_SPI_TransmitReceive_DMA+0x60>
 800dea4:	2302      	movs	r3, #2
 800dea6:	e146      	b.n	800e136 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2201      	movs	r2, #1
 800deac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	2b04      	cmp	r3, #4
 800deba:	d003      	beq.n	800dec4 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2205      	movs	r2, #5
 800dec0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2200      	movs	r2, #0
 800dec8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	68ba      	ldr	r2, [r7, #8]
 800dece:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	887a      	ldrh	r2, [r7, #2]
 800ded4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	887a      	ldrh	r2, [r7, #2]
 800deda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	887a      	ldrh	r2, [r7, #2]
 800dee6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	887a      	ldrh	r2, [r7, #2]
 800deee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2200      	movs	r2, #0
 800def6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2200      	movs	r2, #0
 800defc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	685a      	ldr	r2, [r3, #4]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800df0c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	68db      	ldr	r3, [r3, #12]
 800df12:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800df16:	d908      	bls.n	800df2a <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	685a      	ldr	r2, [r3, #4]
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800df26:	605a      	str	r2, [r3, #4]
 800df28:	e06f      	b.n	800e00a <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	685a      	ldr	r2, [r3, #4]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800df38:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df3e:	699b      	ldr	r3, [r3, #24]
 800df40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800df44:	d126      	bne.n	800df94 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800df4a:	f003 0301 	and.w	r3, r3, #1
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d10f      	bne.n	800df72 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	685a      	ldr	r2, [r3, #4]
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800df60:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800df66:	b29b      	uxth	r3, r3
 800df68:	085b      	lsrs	r3, r3, #1
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800df70:	e010      	b.n	800df94 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	685a      	ldr	r2, [r3, #4]
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800df80:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800df86:	b29b      	uxth	r3, r3
 800df88:	085b      	lsrs	r3, r3, #1
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	3301      	adds	r3, #1
 800df8e:	b29a      	uxth	r2, r3
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df98:	699b      	ldr	r3, [r3, #24]
 800df9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800df9e:	d134      	bne.n	800e00a <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	685a      	ldr	r2, [r3, #4]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800dfae:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	f003 0301 	and.w	r3, r3, #1
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d111      	bne.n	800dfe4 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	685a      	ldr	r2, [r3, #4]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800dfce:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	085b      	lsrs	r3, r3, #1
 800dfda:	b29a      	uxth	r2, r3
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800dfe2:	e012      	b.n	800e00a <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	685a      	ldr	r2, [r3, #4]
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dff2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	085b      	lsrs	r3, r3, #1
 800dffe:	b29b      	uxth	r3, r3
 800e000:	3301      	adds	r3, #1
 800e002:	b29a      	uxth	r2, r3
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e010:	b2db      	uxtb	r3, r3
 800e012:	2b04      	cmp	r3, #4
 800e014:	d108      	bne.n	800e028 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e01a:	4a49      	ldr	r2, [pc, #292]	@ (800e140 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800e01c:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e022:	4a48      	ldr	r2, [pc, #288]	@ (800e144 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800e024:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e026:	e007      	b.n	800e038 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e02c:	4a46      	ldr	r2, [pc, #280]	@ (800e148 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800e02e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e034:	4a45      	ldr	r2, [pc, #276]	@ (800e14c <HAL_SPI_TransmitReceive_DMA+0x304>)
 800e036:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e03c:	4a44      	ldr	r2, [pc, #272]	@ (800e150 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800e03e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e044:	2200      	movs	r2, #0
 800e046:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	330c      	adds	r3, #12
 800e052:	4619      	mov	r1, r3
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e058:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e060:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e062:	f7fa fb47 	bl	80086f4 <HAL_DMA_Start_IT>
 800e066:	4603      	mov	r3, r0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d00b      	beq.n	800e084 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e070:	f043 0210 	orr.w	r2, r3, #16
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2200      	movs	r2, #0
 800e07c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e080:	2301      	movs	r3, #1
 800e082:	e058      	b.n	800e136 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	685a      	ldr	r2, [r3, #4]
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f042 0201 	orr.w	r2, r2, #1
 800e092:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e098:	2200      	movs	r2, #0
 800e09a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0bc:	4619      	mov	r1, r3
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	330c      	adds	r3, #12
 800e0c4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e0ca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e0cc:	f7fa fb12 	bl	80086f4 <HAL_DMA_Start_IT>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d00b      	beq.n	800e0ee <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e0da:	f043 0210 	orr.w	r2, r3, #16
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	e023      	b.n	800e136 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0f8:	2b40      	cmp	r3, #64	@ 0x40
 800e0fa:	d007      	beq.n	800e10c <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e10a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2200      	movs	r2, #0
 800e110:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	685a      	ldr	r2, [r3, #4]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f042 0220 	orr.w	r2, r2, #32
 800e122:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	685a      	ldr	r2, [r3, #4]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f042 0202 	orr.w	r2, r2, #2
 800e132:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e134:	2300      	movs	r3, #0
}
 800e136:	4618      	mov	r0, r3
 800e138:	3718      	adds	r7, #24
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	0800e65f 	.word	0x0800e65f
 800e144:	0800e50b 	.word	0x0800e50b
 800e148:	0800e67b 	.word	0x0800e67b
 800e14c:	0800e5b3 	.word	0x0800e5b3
 800e150:	0800e697 	.word	0x0800e697

0800e154 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e15c:	2300      	movs	r3, #0
 800e15e:	73fb      	strb	r3, [r7, #15]
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or
     HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e164:	2b00      	cmp	r3, #0
 800e166:	d00f      	beq.n	800e188 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7fa fb3c 	bl	80087ea <HAL_DMA_Abort>
 800e172:	4603      	mov	r3, r0
 800e174:	2b00      	cmp	r3, #0
 800e176:	d007      	beq.n	800e188 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e17c:	f043 0210 	orr.w	r2, r3, #16
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 800e184:	2301      	movs	r3, #1
 800e186:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d00f      	beq.n	800e1b0 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e194:	4618      	mov	r0, r3
 800e196:	f7fa fb28 	bl	80087ea <HAL_DMA_Abort>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d007      	beq.n	800e1b0 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e1a4:	f043 0210 	orr.w	r2, r3, #16
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	685a      	ldr	r2, [r3, #4]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f022 0203 	bic.w	r2, r2, #3
 800e1be:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  return errorcode;
 800e1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3710      	adds	r7, #16
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
	...

0800e1d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b088      	sub	sp, #32
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d10e      	bne.n	800e214 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d009      	beq.n	800e214 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e200:	69fb      	ldr	r3, [r7, #28]
 800e202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e206:	2b00      	cmp	r3, #0
 800e208:	d004      	beq.n	800e214 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	4798      	blx	r3
    return;
 800e212:	e0ce      	b.n	800e3b2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e214:	69bb      	ldr	r3, [r7, #24]
 800e216:	f003 0302 	and.w	r3, r3, #2
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d009      	beq.n	800e232 <HAL_SPI_IRQHandler+0x5e>
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e224:	2b00      	cmp	r3, #0
 800e226:	d004      	beq.n	800e232 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	4798      	blx	r3
    return;
 800e230:	e0bf      	b.n	800e3b2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e232:	69bb      	ldr	r3, [r7, #24]
 800e234:	f003 0320 	and.w	r3, r3, #32
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d10a      	bne.n	800e252 <HAL_SPI_IRQHandler+0x7e>
 800e23c:	69bb      	ldr	r3, [r7, #24]
 800e23e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e242:	2b00      	cmp	r3, #0
 800e244:	d105      	bne.n	800e252 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	f000 80b0 	beq.w	800e3b2 <HAL_SPI_IRQHandler+0x1de>
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	f003 0320 	and.w	r3, r3, #32
 800e258:	2b00      	cmp	r3, #0
 800e25a:	f000 80aa 	beq.w	800e3b2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e264:	2b00      	cmp	r3, #0
 800e266:	d023      	beq.n	800e2b0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	2b03      	cmp	r3, #3
 800e272:	d011      	beq.n	800e298 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e278:	f043 0204 	orr.w	r2, r3, #4
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e280:	2300      	movs	r3, #0
 800e282:	617b      	str	r3, [r7, #20]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	617b      	str	r3, [r7, #20]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	689b      	ldr	r3, [r3, #8]
 800e292:	617b      	str	r3, [r7, #20]
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	e00b      	b.n	800e2b0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e298:	2300      	movs	r3, #0
 800e29a:	613b      	str	r3, [r7, #16]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	68db      	ldr	r3, [r3, #12]
 800e2a2:	613b      	str	r3, [r7, #16]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	689b      	ldr	r3, [r3, #8]
 800e2aa:	613b      	str	r3, [r7, #16]
 800e2ac:	693b      	ldr	r3, [r7, #16]
        return;
 800e2ae:	e080      	b.n	800e3b2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e2b0:	69bb      	ldr	r3, [r7, #24]
 800e2b2:	f003 0320 	and.w	r3, r3, #32
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d014      	beq.n	800e2e4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e2be:	f043 0201 	orr.w	r2, r3, #1
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	60fb      	str	r3, [r7, #12]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	689b      	ldr	r3, [r3, #8]
 800e2d0:	60fb      	str	r3, [r7, #12]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	681a      	ldr	r2, [r3, #0]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e2e0:	601a      	str	r2, [r3, #0]
 800e2e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e2e4:	69bb      	ldr	r3, [r7, #24]
 800e2e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d00c      	beq.n	800e308 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e2f2:	f043 0208 	orr.w	r2, r3, #8
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	60bb      	str	r3, [r7, #8]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	60bb      	str	r3, [r7, #8]
 800e306:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d04f      	beq.n	800e3b0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	685a      	ldr	r2, [r3, #4]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e31e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2201      	movs	r2, #1
 800e324:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	f003 0302 	and.w	r3, r3, #2
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d104      	bne.n	800e33c <HAL_SPI_IRQHandler+0x168>
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	f003 0301 	and.w	r3, r3, #1
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d034      	beq.n	800e3a6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	685a      	ldr	r2, [r3, #4]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f022 0203 	bic.w	r2, r2, #3
 800e34a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e350:	2b00      	cmp	r3, #0
 800e352:	d011      	beq.n	800e378 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e358:	4a17      	ldr	r2, [pc, #92]	@ (800e3b8 <HAL_SPI_IRQHandler+0x1e4>)
 800e35a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e360:	4618      	mov	r0, r3
 800e362:	f7fa faa1 	bl	80088a8 <HAL_DMA_Abort_IT>
 800e366:	4603      	mov	r3, r0
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d005      	beq.n	800e378 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e370:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d016      	beq.n	800e3ae <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e384:	4a0c      	ldr	r2, [pc, #48]	@ (800e3b8 <HAL_SPI_IRQHandler+0x1e4>)
 800e386:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7fa fa8b 	bl	80088a8 <HAL_DMA_Abort_IT>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00a      	beq.n	800e3ae <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e39c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800e3a4:	e003      	b.n	800e3ae <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 f844 	bl	800e434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e3ac:	e000      	b.n	800e3b0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800e3ae:	bf00      	nop
    return;
 800e3b0:	bf00      	nop
  }
}
 800e3b2:	3720      	adds	r7, #32
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	0800e6d7 	.word	0x0800e6d7

0800e3bc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800e3c4:	bf00      	nop
 800e3c6:	370c      	adds	r7, #12
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e3d8:	bf00      	nop
 800e3da:	370c      	adds	r7, #12
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e3ec:	bf00      	nop
 800e3ee:	370c      	adds	r7, #12
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr

0800e3f8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800e400:	bf00      	nop
 800e402:	370c      	adds	r7, #12
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr

0800e40c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b083      	sub	sp, #12
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800e414:	bf00      	nop
 800e416:	370c      	adds	r7, #12
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr

0800e420 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e420:	b480      	push	{r7}
 800e422:	b083      	sub	sp, #12
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e428:	bf00      	nop
 800e42a:	370c      	adds	r7, #12
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr

0800e434 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e434:	b480      	push	{r7}
 800e436:	b083      	sub	sp, #12
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e43c:	bf00      	nop
 800e43e:	370c      	adds	r7, #12
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr

0800e448 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800e448:	b480      	push	{r7}
 800e44a:	b083      	sub	sp, #12
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e456:	b2db      	uxtb	r3, r3
}
 800e458:	4618      	mov	r0, r3
 800e45a:	370c      	adds	r7, #12
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b086      	sub	sp, #24
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e470:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e472:	f7f8 fdc3 	bl	8006ffc <HAL_GetTick>
 800e476:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f003 0320 	and.w	r3, r3, #32
 800e482:	2b20      	cmp	r3, #32
 800e484:	d03b      	beq.n	800e4fe <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	685a      	ldr	r2, [r3, #4]
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	f022 0220 	bic.w	r2, r2, #32
 800e494:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	685a      	ldr	r2, [r3, #4]
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f022 0202 	bic.w	r2, r2, #2
 800e4a4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e4a6:	693a      	ldr	r2, [r7, #16]
 800e4a8:	2164      	movs	r1, #100	@ 0x64
 800e4aa:	6978      	ldr	r0, [r7, #20]
 800e4ac:	f000 fa9e 	bl	800e9ec <SPI_EndRxTxTransaction>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d005      	beq.n	800e4c2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e4ba:	f043 0220 	orr.w	r2, r3, #32
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	689b      	ldr	r3, [r3, #8]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d10a      	bne.n	800e4e0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	60fb      	str	r3, [r7, #12]
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	60fb      	str	r3, [r7, #12]
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	689b      	ldr	r3, [r3, #8]
 800e4dc:	60fb      	str	r3, [r7, #12]
 800e4de:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d003      	beq.n	800e4fe <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e4f6:	6978      	ldr	r0, [r7, #20]
 800e4f8:	f7ff ff9c 	bl	800e434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e4fc:	e002      	b.n	800e504 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800e4fe:	6978      	ldr	r0, [r7, #20]
 800e500:	f7ff ff5c 	bl	800e3bc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e504:	3718      	adds	r7, #24
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b084      	sub	sp, #16
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e516:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e518:	f7f8 fd70 	bl	8006ffc <HAL_GetTick>
 800e51c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f003 0320 	and.w	r3, r3, #32
 800e528:	2b20      	cmp	r3, #32
 800e52a:	d03c      	beq.n	800e5a6 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	685a      	ldr	r2, [r3, #4]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f022 0220 	bic.w	r2, r2, #32
 800e53a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	689b      	ldr	r3, [r3, #8]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d10d      	bne.n	800e560 <SPI_DMAReceiveCplt+0x56>
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e54c:	d108      	bne.n	800e560 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	685a      	ldr	r2, [r3, #4]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f022 0203 	bic.w	r2, r2, #3
 800e55c:	605a      	str	r2, [r3, #4]
 800e55e:	e007      	b.n	800e570 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	685a      	ldr	r2, [r3, #4]
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f022 0201 	bic.w	r2, r2, #1
 800e56e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e570:	68ba      	ldr	r2, [r7, #8]
 800e572:	2164      	movs	r1, #100	@ 0x64
 800e574:	68f8      	ldr	r0, [r7, #12]
 800e576:	f000 f9e1 	bl	800e93c <SPI_EndRxTransaction>
 800e57a:	4603      	mov	r3, r0
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d002      	beq.n	800e586 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	2220      	movs	r2, #32
 800e584:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2200      	movs	r2, #0
 800e58a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2201      	movs	r2, #1
 800e592:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d003      	beq.n	800e5a6 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e59e:	68f8      	ldr	r0, [r7, #12]
 800e5a0:	f7ff ff48 	bl	800e434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e5a4:	e002      	b.n	800e5ac <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800e5a6:	68f8      	ldr	r0, [r7, #12]
 800e5a8:	f7ff ff12 	bl	800e3d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e5ac:	3710      	adds	r7, #16
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}

0800e5b2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e5b2:	b580      	push	{r7, lr}
 800e5b4:	b084      	sub	sp, #16
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5be:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e5c0:	f7f8 fd1c 	bl	8006ffc <HAL_GetTick>
 800e5c4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f003 0320 	and.w	r3, r3, #32
 800e5d0:	2b20      	cmp	r3, #32
 800e5d2:	d030      	beq.n	800e636 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	685a      	ldr	r2, [r3, #4]
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f022 0220 	bic.w	r2, r2, #32
 800e5e2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e5e4:	68ba      	ldr	r2, [r7, #8]
 800e5e6:	2164      	movs	r1, #100	@ 0x64
 800e5e8:	68f8      	ldr	r0, [r7, #12]
 800e5ea:	f000 f9ff 	bl	800e9ec <SPI_EndRxTxTransaction>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d005      	beq.n	800e600 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e5f8:	f043 0220 	orr.w	r2, r3, #32
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	685a      	ldr	r2, [r3, #4]
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f022 0203 	bic.w	r2, r2, #3
 800e60e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2200      	movs	r2, #0
 800e614:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2200      	movs	r2, #0
 800e61a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2201      	movs	r2, #1
 800e622:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d003      	beq.n	800e636 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e62e:	68f8      	ldr	r0, [r7, #12]
 800e630:	f7ff ff00 	bl	800e434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e634:	e002      	b.n	800e63c <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800e636:	68f8      	ldr	r0, [r7, #12]
 800e638:	f7ff fed4 	bl	800e3e4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}

0800e642 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e642:	b580      	push	{r7, lr}
 800e644:	b084      	sub	sp, #16
 800e646:	af00      	add	r7, sp, #0
 800e648:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e64e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	f7ff fed1 	bl	800e3f8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e656:	bf00      	nop
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e65e:	b580      	push	{r7, lr}
 800e660:	b084      	sub	sp, #16
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e66a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800e66c:	68f8      	ldr	r0, [r7, #12]
 800e66e:	f7ff fecd 	bl	800e40c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e672:	bf00      	nop
 800e674:	3710      	adds	r7, #16
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}

0800e67a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e67a:	b580      	push	{r7, lr}
 800e67c:	b084      	sub	sp, #16
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e686:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f7ff fec9 	bl	800e420 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e68e:	bf00      	nop
 800e690:	3710      	adds	r7, #16
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e696:	b580      	push	{r7, lr}
 800e698:	b084      	sub	sp, #16
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6a2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	685a      	ldr	r2, [r3, #4]
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f022 0203 	bic.w	r2, r2, #3
 800e6b2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e6b8:	f043 0210 	orr.w	r2, r3, #16
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2201      	movs	r2, #1
 800e6c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e6c8:	68f8      	ldr	r0, [r7, #12]
 800e6ca:	f7ff feb3 	bl	800e434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e6ce:	bf00      	nop
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b084      	sub	sp, #16
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6e2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e6f2:	68f8      	ldr	r0, [r7, #12]
 800e6f4:	f7ff fe9e 	bl	800e434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e6f8:	bf00      	nop
 800e6fa:	3710      	adds	r7, #16
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b088      	sub	sp, #32
 800e704:	af00      	add	r7, sp, #0
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	603b      	str	r3, [r7, #0]
 800e70c:	4613      	mov	r3, r2
 800e70e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e710:	f7f8 fc74 	bl	8006ffc <HAL_GetTick>
 800e714:	4602      	mov	r2, r0
 800e716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e718:	1a9b      	subs	r3, r3, r2
 800e71a:	683a      	ldr	r2, [r7, #0]
 800e71c:	4413      	add	r3, r2
 800e71e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e720:	f7f8 fc6c 	bl	8006ffc <HAL_GetTick>
 800e724:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e726:	4b39      	ldr	r3, [pc, #228]	@ (800e80c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	015b      	lsls	r3, r3, #5
 800e72c:	0d1b      	lsrs	r3, r3, #20
 800e72e:	69fa      	ldr	r2, [r7, #28]
 800e730:	fb02 f303 	mul.w	r3, r2, r3
 800e734:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e736:	e054      	b.n	800e7e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e73e:	d050      	beq.n	800e7e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e740:	f7f8 fc5c 	bl	8006ffc <HAL_GetTick>
 800e744:	4602      	mov	r2, r0
 800e746:	69bb      	ldr	r3, [r7, #24]
 800e748:	1ad3      	subs	r3, r2, r3
 800e74a:	69fa      	ldr	r2, [r7, #28]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d902      	bls.n	800e756 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d13d      	bne.n	800e7d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	685a      	ldr	r2, [r3, #4]
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e764:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e76e:	d111      	bne.n	800e794 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	689b      	ldr	r3, [r3, #8]
 800e774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e778:	d004      	beq.n	800e784 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	689b      	ldr	r3, [r3, #8]
 800e77e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e782:	d107      	bne.n	800e794 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e792:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e798:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e79c:	d10f      	bne.n	800e7be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e7ac:	601a      	str	r2, [r3, #0]
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e7bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2201      	movs	r2, #1
 800e7c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800e7ce:	2303      	movs	r3, #3
 800e7d0:	e017      	b.n	800e802 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d101      	bne.n	800e7dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	3b01      	subs	r3, #1
 800e7e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	689a      	ldr	r2, [r3, #8]
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	4013      	ands	r3, r2
 800e7ec:	68ba      	ldr	r2, [r7, #8]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	bf0c      	ite	eq
 800e7f2:	2301      	moveq	r3, #1
 800e7f4:	2300      	movne	r3, #0
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	79fb      	ldrb	r3, [r7, #7]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d19b      	bne.n	800e738 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e800:	2300      	movs	r3, #0
}
 800e802:	4618      	mov	r0, r3
 800e804:	3720      	adds	r7, #32
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	2000002c 	.word	0x2000002c

0800e810 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b08a      	sub	sp, #40	@ 0x28
 800e814:	af00      	add	r7, sp, #0
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	607a      	str	r2, [r7, #4]
 800e81c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e81e:	2300      	movs	r3, #0
 800e820:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e822:	f7f8 fbeb 	bl	8006ffc <HAL_GetTick>
 800e826:	4602      	mov	r2, r0
 800e828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e82a:	1a9b      	subs	r3, r3, r2
 800e82c:	683a      	ldr	r2, [r7, #0]
 800e82e:	4413      	add	r3, r2
 800e830:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800e832:	f7f8 fbe3 	bl	8006ffc <HAL_GetTick>
 800e836:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	330c      	adds	r3, #12
 800e83e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e840:	4b3d      	ldr	r3, [pc, #244]	@ (800e938 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e842:	681a      	ldr	r2, [r3, #0]
 800e844:	4613      	mov	r3, r2
 800e846:	009b      	lsls	r3, r3, #2
 800e848:	4413      	add	r3, r2
 800e84a:	00da      	lsls	r2, r3, #3
 800e84c:	1ad3      	subs	r3, r2, r3
 800e84e:	0d1b      	lsrs	r3, r3, #20
 800e850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e852:	fb02 f303 	mul.w	r3, r2, r3
 800e856:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e858:	e060      	b.n	800e91c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e860:	d107      	bne.n	800e872 <SPI_WaitFifoStateUntilTimeout+0x62>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d104      	bne.n	800e872 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e868:	69fb      	ldr	r3, [r7, #28]
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	b2db      	uxtb	r3, r3
 800e86e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e870:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e878:	d050      	beq.n	800e91c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e87a:	f7f8 fbbf 	bl	8006ffc <HAL_GetTick>
 800e87e:	4602      	mov	r2, r0
 800e880:	6a3b      	ldr	r3, [r7, #32]
 800e882:	1ad3      	subs	r3, r2, r3
 800e884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e886:	429a      	cmp	r2, r3
 800e888:	d902      	bls.n	800e890 <SPI_WaitFifoStateUntilTimeout+0x80>
 800e88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d13d      	bne.n	800e90c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	685a      	ldr	r2, [r3, #4]
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e89e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e8a8:	d111      	bne.n	800e8ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	689b      	ldr	r3, [r3, #8]
 800e8ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e8b2:	d004      	beq.n	800e8be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	689b      	ldr	r3, [r3, #8]
 800e8b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e8bc:	d107      	bne.n	800e8ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	681a      	ldr	r2, [r3, #0]
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e8cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e8d6:	d10f      	bne.n	800e8f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e8e6:	601a      	str	r2, [r3, #0]
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	681a      	ldr	r2, [r3, #0]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e8f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2200      	movs	r2, #0
 800e904:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800e908:	2303      	movs	r3, #3
 800e90a:	e010      	b.n	800e92e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e90c:	69bb      	ldr	r3, [r7, #24]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d101      	bne.n	800e916 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800e912:	2300      	movs	r3, #0
 800e914:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	3b01      	subs	r3, #1
 800e91a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	689a      	ldr	r2, [r3, #8]
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	4013      	ands	r3, r2
 800e926:	687a      	ldr	r2, [r7, #4]
 800e928:	429a      	cmp	r2, r3
 800e92a:	d196      	bne.n	800e85a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800e92c:	2300      	movs	r3, #0
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3728      	adds	r7, #40	@ 0x28
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	2000002c 	.word	0x2000002c

0800e93c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b086      	sub	sp, #24
 800e940:	af02      	add	r7, sp, #8
 800e942:	60f8      	str	r0, [r7, #12]
 800e944:	60b9      	str	r1, [r7, #8]
 800e946:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e950:	d111      	bne.n	800e976 <SPI_EndRxTransaction+0x3a>
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	689b      	ldr	r3, [r3, #8]
 800e956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e95a:	d004      	beq.n	800e966 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	689b      	ldr	r3, [r3, #8]
 800e960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e964:	d107      	bne.n	800e976 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e974:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	9300      	str	r3, [sp, #0]
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	2200      	movs	r2, #0
 800e97e:	2180      	movs	r1, #128	@ 0x80
 800e980:	68f8      	ldr	r0, [r7, #12]
 800e982:	f7ff febd 	bl	800e700 <SPI_WaitFlagStateUntilTimeout>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d007      	beq.n	800e99c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e990:	f043 0220 	orr.w	r2, r3, #32
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e998:	2303      	movs	r3, #3
 800e99a:	e023      	b.n	800e9e4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	685b      	ldr	r3, [r3, #4]
 800e9a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e9a4:	d11d      	bne.n	800e9e2 <SPI_EndRxTransaction+0xa6>
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	689b      	ldr	r3, [r3, #8]
 800e9aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e9ae:	d004      	beq.n	800e9ba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	689b      	ldr	r3, [r3, #8]
 800e9b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e9b8:	d113      	bne.n	800e9e2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	9300      	str	r3, [sp, #0]
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800e9c6:	68f8      	ldr	r0, [r7, #12]
 800e9c8:	f7ff ff22 	bl	800e810 <SPI_WaitFifoStateUntilTimeout>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d007      	beq.n	800e9e2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e9d6:	f043 0220 	orr.w	r2, r3, #32
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800e9de:	2303      	movs	r3, #3
 800e9e0:	e000      	b.n	800e9e4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800e9e2:	2300      	movs	r3, #0
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3710      	adds	r7, #16
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b086      	sub	sp, #24
 800e9f0:	af02      	add	r7, sp, #8
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	60b9      	str	r1, [r7, #8]
 800e9f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	9300      	str	r3, [sp, #0]
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800ea04:	68f8      	ldr	r0, [r7, #12]
 800ea06:	f7ff ff03 	bl	800e810 <SPI_WaitFifoStateUntilTimeout>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d007      	beq.n	800ea20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea14:	f043 0220 	orr.w	r2, r3, #32
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ea1c:	2303      	movs	r3, #3
 800ea1e:	e027      	b.n	800ea70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	9300      	str	r3, [sp, #0]
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	2200      	movs	r2, #0
 800ea28:	2180      	movs	r1, #128	@ 0x80
 800ea2a:	68f8      	ldr	r0, [r7, #12]
 800ea2c:	f7ff fe68 	bl	800e700 <SPI_WaitFlagStateUntilTimeout>
 800ea30:	4603      	mov	r3, r0
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d007      	beq.n	800ea46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea3a:	f043 0220 	orr.w	r2, r3, #32
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ea42:	2303      	movs	r3, #3
 800ea44:	e014      	b.n	800ea70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	9300      	str	r3, [sp, #0]
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ea52:	68f8      	ldr	r0, [r7, #12]
 800ea54:	f7ff fedc 	bl	800e810 <SPI_WaitFifoStateUntilTimeout>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d007      	beq.n	800ea6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea62:	f043 0220 	orr.w	r2, r3, #32
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ea6a:	2303      	movs	r3, #3
 800ea6c:	e000      	b.n	800ea70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ea6e:	2300      	movs	r3, #0
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3710      	adds	r7, #16
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d101      	bne.n	800ea8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ea86:	2301      	movs	r3, #1
 800ea88:	e049      	b.n	800eb1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d106      	bne.n	800eaa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f7f7 fdec 	bl	800667c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2202      	movs	r2, #2
 800eaa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	3304      	adds	r3, #4
 800eab4:	4619      	mov	r1, r3
 800eab6:	4610      	mov	r0, r2
 800eab8:	f000 fafc 	bl	800f0b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2201      	movs	r2, #1
 800eac0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2201      	movs	r2, #1
 800eac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2201      	movs	r2, #1
 800ead0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2201      	movs	r2, #1
 800ead8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2201      	movs	r2, #1
 800eae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2201      	movs	r2, #1
 800eae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2201      	movs	r2, #1
 800eaf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2201      	movs	r2, #1
 800eb00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2201      	movs	r2, #1
 800eb08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2201      	movs	r2, #1
 800eb18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800eb1c:	2300      	movs	r3, #0
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3708      	adds	r7, #8
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
	...

0800eb28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	2b01      	cmp	r3, #1
 800eb3a:	d001      	beq.n	800eb40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	e02e      	b.n	800eb9e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2202      	movs	r2, #2
 800eb44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4a17      	ldr	r2, [pc, #92]	@ (800ebac <HAL_TIM_Base_Start+0x84>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d004      	beq.n	800eb5c <HAL_TIM_Base_Start+0x34>
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb5a:	d115      	bne.n	800eb88 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	689a      	ldr	r2, [r3, #8]
 800eb62:	4b13      	ldr	r3, [pc, #76]	@ (800ebb0 <HAL_TIM_Base_Start+0x88>)
 800eb64:	4013      	ands	r3, r2
 800eb66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2b06      	cmp	r3, #6
 800eb6c:	d015      	beq.n	800eb9a <HAL_TIM_Base_Start+0x72>
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eb74:	d011      	beq.n	800eb9a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	681a      	ldr	r2, [r3, #0]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f042 0201 	orr.w	r2, r2, #1
 800eb84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb86:	e008      	b.n	800eb9a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	681a      	ldr	r2, [r3, #0]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f042 0201 	orr.w	r2, r2, #1
 800eb96:	601a      	str	r2, [r3, #0]
 800eb98:	e000      	b.n	800eb9c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eb9c:	2300      	movs	r3, #0
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3714      	adds	r7, #20
 800eba2:	46bd      	mov	sp, r7
 800eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba8:	4770      	bx	lr
 800ebaa:	bf00      	nop
 800ebac:	40012c00 	.word	0x40012c00
 800ebb0:	00010007 	.word	0x00010007

0800ebb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b085      	sub	sp, #20
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d001      	beq.n	800ebcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	e036      	b.n	800ec3a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2202      	movs	r2, #2
 800ebd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	68da      	ldr	r2, [r3, #12]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f042 0201 	orr.w	r2, r2, #1
 800ebe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	4a17      	ldr	r2, [pc, #92]	@ (800ec48 <HAL_TIM_Base_Start_IT+0x94>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d004      	beq.n	800ebf8 <HAL_TIM_Base_Start_IT+0x44>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ebf6:	d115      	bne.n	800ec24 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	689a      	ldr	r2, [r3, #8]
 800ebfe:	4b13      	ldr	r3, [pc, #76]	@ (800ec4c <HAL_TIM_Base_Start_IT+0x98>)
 800ec00:	4013      	ands	r3, r2
 800ec02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2b06      	cmp	r3, #6
 800ec08:	d015      	beq.n	800ec36 <HAL_TIM_Base_Start_IT+0x82>
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ec10:	d011      	beq.n	800ec36 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f042 0201 	orr.w	r2, r2, #1
 800ec20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec22:	e008      	b.n	800ec36 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	681a      	ldr	r2, [r3, #0]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f042 0201 	orr.w	r2, r2, #1
 800ec32:	601a      	str	r2, [r3, #0]
 800ec34:	e000      	b.n	800ec38 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ec38:	2300      	movs	r3, #0
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3714      	adds	r7, #20
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr
 800ec46:	bf00      	nop
 800ec48:	40012c00 	.word	0x40012c00
 800ec4c:	00010007 	.word	0x00010007

0800ec50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ec50:	b480      	push	{r7}
 800ec52:	b083      	sub	sp, #12
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	68da      	ldr	r2, [r3, #12]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f022 0201 	bic.w	r2, r2, #1
 800ec66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	6a1a      	ldr	r2, [r3, #32]
 800ec6e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ec72:	4013      	ands	r3, r2
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d10f      	bne.n	800ec98 <HAL_TIM_Base_Stop_IT+0x48>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	6a1a      	ldr	r2, [r3, #32]
 800ec7e:	f240 4344 	movw	r3, #1092	@ 0x444
 800ec82:	4013      	ands	r3, r2
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d107      	bne.n	800ec98 <HAL_TIM_Base_Stop_IT+0x48>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	681a      	ldr	r2, [r3, #0]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f022 0201 	bic.w	r2, r2, #1
 800ec96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800eca0:	2300      	movs	r3, #0
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	370c      	adds	r7, #12
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr

0800ecae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ecae:	b580      	push	{r7, lr}
 800ecb0:	b084      	sub	sp, #16
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	68db      	ldr	r3, [r3, #12]
 800ecbc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	691b      	ldr	r3, [r3, #16]
 800ecc4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	f003 0302 	and.w	r3, r3, #2
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d020      	beq.n	800ed12 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	f003 0302 	and.w	r3, r3, #2
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d01b      	beq.n	800ed12 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f06f 0202 	mvn.w	r2, #2
 800ece2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2201      	movs	r2, #1
 800ece8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	699b      	ldr	r3, [r3, #24]
 800ecf0:	f003 0303 	and.w	r3, r3, #3
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d003      	beq.n	800ed00 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 f9bc 	bl	800f076 <HAL_TIM_IC_CaptureCallback>
 800ecfe:	e005      	b.n	800ed0c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f000 f9ae 	bl	800f062 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f000 f9bf 	bl	800f08a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	f003 0304 	and.w	r3, r3, #4
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d020      	beq.n	800ed5e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f003 0304 	and.w	r3, r3, #4
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d01b      	beq.n	800ed5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f06f 0204 	mvn.w	r2, #4
 800ed2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2202      	movs	r2, #2
 800ed34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	699b      	ldr	r3, [r3, #24]
 800ed3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d003      	beq.n	800ed4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f000 f996 	bl	800f076 <HAL_TIM_IC_CaptureCallback>
 800ed4a:	e005      	b.n	800ed58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f000 f988 	bl	800f062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f000 f999 	bl	800f08a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	f003 0308 	and.w	r3, r3, #8
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d020      	beq.n	800edaa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f003 0308 	and.w	r3, r3, #8
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d01b      	beq.n	800edaa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f06f 0208 	mvn.w	r2, #8
 800ed7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2204      	movs	r2, #4
 800ed80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	69db      	ldr	r3, [r3, #28]
 800ed88:	f003 0303 	and.w	r3, r3, #3
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d003      	beq.n	800ed98 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f000 f970 	bl	800f076 <HAL_TIM_IC_CaptureCallback>
 800ed96:	e005      	b.n	800eda4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f000 f962 	bl	800f062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f000 f973 	bl	800f08a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	f003 0310 	and.w	r3, r3, #16
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d020      	beq.n	800edf6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f003 0310 	and.w	r3, r3, #16
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d01b      	beq.n	800edf6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	f06f 0210 	mvn.w	r2, #16
 800edc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2208      	movs	r2, #8
 800edcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	69db      	ldr	r3, [r3, #28]
 800edd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d003      	beq.n	800ede4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f000 f94a 	bl	800f076 <HAL_TIM_IC_CaptureCallback>
 800ede2:	e005      	b.n	800edf0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f000 f93c 	bl	800f062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f000 f94d 	bl	800f08a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2200      	movs	r2, #0
 800edf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	f003 0301 	and.w	r3, r3, #1
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d00c      	beq.n	800ee1a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f003 0301 	and.w	r3, r3, #1
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d007      	beq.n	800ee1a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f06f 0201 	mvn.w	r2, #1
 800ee12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 f91a 	bl	800f04e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d104      	bne.n	800ee2e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d00c      	beq.n	800ee48 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d007      	beq.n	800ee48 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ee40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f000 faac 	bl	800f3a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00c      	beq.n	800ee6c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d007      	beq.n	800ee6c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ee64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f000 faa4 	bl	800f3b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d00c      	beq.n	800ee90 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d007      	beq.n	800ee90 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ee88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 f907 	bl	800f09e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	f003 0320 	and.w	r3, r3, #32
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d00c      	beq.n	800eeb4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	f003 0320 	and.w	r3, r3, #32
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d007      	beq.n	800eeb4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	f06f 0220 	mvn.w	r2, #32
 800eeac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f000 fa6c 	bl	800f38c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eeb4:	bf00      	nop
 800eeb6:	3710      	adds	r7, #16
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b084      	sub	sp, #16
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eec6:	2300      	movs	r3, #0
 800eec8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eed0:	2b01      	cmp	r3, #1
 800eed2:	d101      	bne.n	800eed8 <HAL_TIM_ConfigClockSource+0x1c>
 800eed4:	2302      	movs	r3, #2
 800eed6:	e0b6      	b.n	800f046 <HAL_TIM_ConfigClockSource+0x18a>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2201      	movs	r2, #1
 800eedc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2202      	movs	r2, #2
 800eee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800eef6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800eefa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ef02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	68ba      	ldr	r2, [r7, #8]
 800ef0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ef14:	d03e      	beq.n	800ef94 <HAL_TIM_ConfigClockSource+0xd8>
 800ef16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ef1a:	f200 8087 	bhi.w	800f02c <HAL_TIM_ConfigClockSource+0x170>
 800ef1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ef22:	f000 8086 	beq.w	800f032 <HAL_TIM_ConfigClockSource+0x176>
 800ef26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ef2a:	d87f      	bhi.n	800f02c <HAL_TIM_ConfigClockSource+0x170>
 800ef2c:	2b70      	cmp	r3, #112	@ 0x70
 800ef2e:	d01a      	beq.n	800ef66 <HAL_TIM_ConfigClockSource+0xaa>
 800ef30:	2b70      	cmp	r3, #112	@ 0x70
 800ef32:	d87b      	bhi.n	800f02c <HAL_TIM_ConfigClockSource+0x170>
 800ef34:	2b60      	cmp	r3, #96	@ 0x60
 800ef36:	d050      	beq.n	800efda <HAL_TIM_ConfigClockSource+0x11e>
 800ef38:	2b60      	cmp	r3, #96	@ 0x60
 800ef3a:	d877      	bhi.n	800f02c <HAL_TIM_ConfigClockSource+0x170>
 800ef3c:	2b50      	cmp	r3, #80	@ 0x50
 800ef3e:	d03c      	beq.n	800efba <HAL_TIM_ConfigClockSource+0xfe>
 800ef40:	2b50      	cmp	r3, #80	@ 0x50
 800ef42:	d873      	bhi.n	800f02c <HAL_TIM_ConfigClockSource+0x170>
 800ef44:	2b40      	cmp	r3, #64	@ 0x40
 800ef46:	d058      	beq.n	800effa <HAL_TIM_ConfigClockSource+0x13e>
 800ef48:	2b40      	cmp	r3, #64	@ 0x40
 800ef4a:	d86f      	bhi.n	800f02c <HAL_TIM_ConfigClockSource+0x170>
 800ef4c:	2b30      	cmp	r3, #48	@ 0x30
 800ef4e:	d064      	beq.n	800f01a <HAL_TIM_ConfigClockSource+0x15e>
 800ef50:	2b30      	cmp	r3, #48	@ 0x30
 800ef52:	d86b      	bhi.n	800f02c <HAL_TIM_ConfigClockSource+0x170>
 800ef54:	2b20      	cmp	r3, #32
 800ef56:	d060      	beq.n	800f01a <HAL_TIM_ConfigClockSource+0x15e>
 800ef58:	2b20      	cmp	r3, #32
 800ef5a:	d867      	bhi.n	800f02c <HAL_TIM_ConfigClockSource+0x170>
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d05c      	beq.n	800f01a <HAL_TIM_ConfigClockSource+0x15e>
 800ef60:	2b10      	cmp	r3, #16
 800ef62:	d05a      	beq.n	800f01a <HAL_TIM_ConfigClockSource+0x15e>
 800ef64:	e062      	b.n	800f02c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ef76:	f000 f989 	bl	800f28c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	689b      	ldr	r3, [r3, #8]
 800ef80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ef88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	68ba      	ldr	r2, [r7, #8]
 800ef90:	609a      	str	r2, [r3, #8]
      break;
 800ef92:	e04f      	b.n	800f034 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800efa4:	f000 f972 	bl	800f28c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	689a      	ldr	r2, [r3, #8]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800efb6:	609a      	str	r2, [r3, #8]
      break;
 800efb8:	e03c      	b.n	800f034 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800efc6:	461a      	mov	r2, r3
 800efc8:	f000 f8e4 	bl	800f194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2150      	movs	r1, #80	@ 0x50
 800efd2:	4618      	mov	r0, r3
 800efd4:	f000 f93d 	bl	800f252 <TIM_ITRx_SetConfig>
      break;
 800efd8:	e02c      	b.n	800f034 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800efe6:	461a      	mov	r2, r3
 800efe8:	f000 f903 	bl	800f1f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2160      	movs	r1, #96	@ 0x60
 800eff2:	4618      	mov	r0, r3
 800eff4:	f000 f92d 	bl	800f252 <TIM_ITRx_SetConfig>
      break;
 800eff8:	e01c      	b.n	800f034 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f006:	461a      	mov	r2, r3
 800f008:	f000 f8c4 	bl	800f194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	2140      	movs	r1, #64	@ 0x40
 800f012:	4618      	mov	r0, r3
 800f014:	f000 f91d 	bl	800f252 <TIM_ITRx_SetConfig>
      break;
 800f018:	e00c      	b.n	800f034 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681a      	ldr	r2, [r3, #0]
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	4619      	mov	r1, r3
 800f024:	4610      	mov	r0, r2
 800f026:	f000 f914 	bl	800f252 <TIM_ITRx_SetConfig>
      break;
 800f02a:	e003      	b.n	800f034 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800f02c:	2301      	movs	r3, #1
 800f02e:	73fb      	strb	r3, [r7, #15]
      break;
 800f030:	e000      	b.n	800f034 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800f032:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2201      	movs	r2, #1
 800f038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2200      	movs	r2, #0
 800f040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f044:	7bfb      	ldrb	r3, [r7, #15]
}
 800f046:	4618      	mov	r0, r3
 800f048:	3710      	adds	r7, #16
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}

0800f04e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f04e:	b480      	push	{r7}
 800f050:	b083      	sub	sp, #12
 800f052:	af00      	add	r7, sp, #0
 800f054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f056:	bf00      	nop
 800f058:	370c      	adds	r7, #12
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr

0800f062 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f062:	b480      	push	{r7}
 800f064:	b083      	sub	sp, #12
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f06a:	bf00      	nop
 800f06c:	370c      	adds	r7, #12
 800f06e:	46bd      	mov	sp, r7
 800f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f074:	4770      	bx	lr

0800f076 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f076:	b480      	push	{r7}
 800f078:	b083      	sub	sp, #12
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f07e:	bf00      	nop
 800f080:	370c      	adds	r7, #12
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr

0800f08a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f08a:	b480      	push	{r7}
 800f08c:	b083      	sub	sp, #12
 800f08e:	af00      	add	r7, sp, #0
 800f090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f092:	bf00      	nop
 800f094:	370c      	adds	r7, #12
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr

0800f09e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f09e:	b480      	push	{r7}
 800f0a0:	b083      	sub	sp, #12
 800f0a2:	af00      	add	r7, sp, #0
 800f0a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f0a6:	bf00      	nop
 800f0a8:	370c      	adds	r7, #12
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b0:	4770      	bx	lr
	...

0800f0b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b085      	sub	sp, #20
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	4a30      	ldr	r2, [pc, #192]	@ (800f188 <TIM_Base_SetConfig+0xd4>)
 800f0c8:	4293      	cmp	r3, r2
 800f0ca:	d003      	beq.n	800f0d4 <TIM_Base_SetConfig+0x20>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f0d2:	d108      	bne.n	800f0e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f0da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	68fa      	ldr	r2, [r7, #12]
 800f0e2:	4313      	orrs	r3, r2
 800f0e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	4a27      	ldr	r2, [pc, #156]	@ (800f188 <TIM_Base_SetConfig+0xd4>)
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	d00b      	beq.n	800f106 <TIM_Base_SetConfig+0x52>
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f0f4:	d007      	beq.n	800f106 <TIM_Base_SetConfig+0x52>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	4a24      	ldr	r2, [pc, #144]	@ (800f18c <TIM_Base_SetConfig+0xd8>)
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	d003      	beq.n	800f106 <TIM_Base_SetConfig+0x52>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	4a23      	ldr	r2, [pc, #140]	@ (800f190 <TIM_Base_SetConfig+0xdc>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d108      	bne.n	800f118 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f10c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	68db      	ldr	r3, [r3, #12]
 800f112:	68fa      	ldr	r2, [r7, #12]
 800f114:	4313      	orrs	r3, r2
 800f116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	695b      	ldr	r3, [r3, #20]
 800f122:	4313      	orrs	r3, r2
 800f124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	68fa      	ldr	r2, [r7, #12]
 800f12a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	689a      	ldr	r2, [r3, #8]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	681a      	ldr	r2, [r3, #0]
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	4a12      	ldr	r2, [pc, #72]	@ (800f188 <TIM_Base_SetConfig+0xd4>)
 800f140:	4293      	cmp	r3, r2
 800f142:	d007      	beq.n	800f154 <TIM_Base_SetConfig+0xa0>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	4a11      	ldr	r2, [pc, #68]	@ (800f18c <TIM_Base_SetConfig+0xd8>)
 800f148:	4293      	cmp	r3, r2
 800f14a:	d003      	beq.n	800f154 <TIM_Base_SetConfig+0xa0>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	4a10      	ldr	r2, [pc, #64]	@ (800f190 <TIM_Base_SetConfig+0xdc>)
 800f150:	4293      	cmp	r3, r2
 800f152:	d103      	bne.n	800f15c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	691a      	ldr	r2, [r3, #16]
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2201      	movs	r2, #1
 800f160:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	691b      	ldr	r3, [r3, #16]
 800f166:	f003 0301 	and.w	r3, r3, #1
 800f16a:	2b01      	cmp	r3, #1
 800f16c:	d105      	bne.n	800f17a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	691b      	ldr	r3, [r3, #16]
 800f172:	f023 0201 	bic.w	r2, r3, #1
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	611a      	str	r2, [r3, #16]
  }
}
 800f17a:	bf00      	nop
 800f17c:	3714      	adds	r7, #20
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr
 800f186:	bf00      	nop
 800f188:	40012c00 	.word	0x40012c00
 800f18c:	40014400 	.word	0x40014400
 800f190:	40014800 	.word	0x40014800

0800f194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f194:	b480      	push	{r7}
 800f196:	b087      	sub	sp, #28
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	60b9      	str	r1, [r7, #8]
 800f19e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	6a1b      	ldr	r3, [r3, #32]
 800f1a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	6a1b      	ldr	r3, [r3, #32]
 800f1aa:	f023 0201 	bic.w	r2, r3, #1
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	699b      	ldr	r3, [r3, #24]
 800f1b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f1be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	011b      	lsls	r3, r3, #4
 800f1c4:	693a      	ldr	r2, [r7, #16]
 800f1c6:	4313      	orrs	r3, r2
 800f1c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	f023 030a 	bic.w	r3, r3, #10
 800f1d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f1d2:	697a      	ldr	r2, [r7, #20]
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	4313      	orrs	r3, r2
 800f1d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	693a      	ldr	r2, [r7, #16]
 800f1de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	697a      	ldr	r2, [r7, #20]
 800f1e4:	621a      	str	r2, [r3, #32]
}
 800f1e6:	bf00      	nop
 800f1e8:	371c      	adds	r7, #28
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr

0800f1f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f1f2:	b480      	push	{r7}
 800f1f4:	b087      	sub	sp, #28
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	60f8      	str	r0, [r7, #12]
 800f1fa:	60b9      	str	r1, [r7, #8]
 800f1fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	6a1b      	ldr	r3, [r3, #32]
 800f202:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6a1b      	ldr	r3, [r3, #32]
 800f208:	f023 0210 	bic.w	r2, r3, #16
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	699b      	ldr	r3, [r3, #24]
 800f214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f21c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	031b      	lsls	r3, r3, #12
 800f222:	693a      	ldr	r2, [r7, #16]
 800f224:	4313      	orrs	r3, r2
 800f226:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f22e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	011b      	lsls	r3, r3, #4
 800f234:	697a      	ldr	r2, [r7, #20]
 800f236:	4313      	orrs	r3, r2
 800f238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	693a      	ldr	r2, [r7, #16]
 800f23e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	697a      	ldr	r2, [r7, #20]
 800f244:	621a      	str	r2, [r3, #32]
}
 800f246:	bf00      	nop
 800f248:	371c      	adds	r7, #28
 800f24a:	46bd      	mov	sp, r7
 800f24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f250:	4770      	bx	lr

0800f252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f252:	b480      	push	{r7}
 800f254:	b085      	sub	sp, #20
 800f256:	af00      	add	r7, sp, #0
 800f258:	6078      	str	r0, [r7, #4]
 800f25a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	689b      	ldr	r3, [r3, #8]
 800f260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f26c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f26e:	683a      	ldr	r2, [r7, #0]
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	4313      	orrs	r3, r2
 800f274:	f043 0307 	orr.w	r3, r3, #7
 800f278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	68fa      	ldr	r2, [r7, #12]
 800f27e:	609a      	str	r2, [r3, #8]
}
 800f280:	bf00      	nop
 800f282:	3714      	adds	r7, #20
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr

0800f28c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b087      	sub	sp, #28
 800f290:	af00      	add	r7, sp, #0
 800f292:	60f8      	str	r0, [r7, #12]
 800f294:	60b9      	str	r1, [r7, #8]
 800f296:	607a      	str	r2, [r7, #4]
 800f298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	689b      	ldr	r3, [r3, #8]
 800f29e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f2a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	021a      	lsls	r2, r3, #8
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	431a      	orrs	r2, r3
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	4313      	orrs	r3, r2
 800f2b4:	697a      	ldr	r2, [r7, #20]
 800f2b6:	4313      	orrs	r3, r2
 800f2b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	697a      	ldr	r2, [r7, #20]
 800f2be:	609a      	str	r2, [r3, #8]
}
 800f2c0:	bf00      	nop
 800f2c2:	371c      	adds	r7, #28
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr

0800f2cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	d101      	bne.n	800f2e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f2e0:	2302      	movs	r3, #2
 800f2e2:	e04a      	b.n	800f37a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2202      	movs	r2, #2
 800f2f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	689b      	ldr	r3, [r3, #8]
 800f302:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4a1f      	ldr	r2, [pc, #124]	@ (800f388 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d108      	bne.n	800f320 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f314:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	68fa      	ldr	r2, [r7, #12]
 800f31c:	4313      	orrs	r3, r2
 800f31e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f326:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	68fa      	ldr	r2, [r7, #12]
 800f32e:	4313      	orrs	r3, r2
 800f330:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	68fa      	ldr	r2, [r7, #12]
 800f338:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	4a12      	ldr	r2, [pc, #72]	@ (800f388 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f340:	4293      	cmp	r3, r2
 800f342:	d004      	beq.n	800f34e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f34c:	d10c      	bne.n	800f368 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	689b      	ldr	r3, [r3, #8]
 800f35a:	68ba      	ldr	r2, [r7, #8]
 800f35c:	4313      	orrs	r3, r2
 800f35e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	68ba      	ldr	r2, [r7, #8]
 800f366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2201      	movs	r2, #1
 800f36c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2200      	movs	r2, #0
 800f374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f378:	2300      	movs	r3, #0
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	3714      	adds	r7, #20
 800f37e:	46bd      	mov	sp, r7
 800f380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f384:	4770      	bx	lr
 800f386:	bf00      	nop
 800f388:	40012c00 	.word	0x40012c00

0800f38c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b083      	sub	sp, #12
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f394:	bf00      	nop
 800f396:	370c      	adds	r7, #12
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr

0800f3a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b083      	sub	sp, #12
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f3a8:	bf00      	nop
 800f3aa:	370c      	adds	r7, #12
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b2:	4770      	bx	lr

0800f3b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	b083      	sub	sp, #12
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f3bc:	bf00      	nop
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <LL_RCC_GetUSARTClockSource>:
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b083      	sub	sp, #12
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800f3d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f3d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	4013      	ands	r3, r2
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	370c      	adds	r7, #12
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e6:	4770      	bx	lr

0800f3e8 <LL_RCC_GetLPUARTClockSource>:
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b083      	sub	sp, #12
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800f3f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f3f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	4013      	ands	r3, r2
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	370c      	adds	r7, #12
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr

0800f408 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d101      	bne.n	800f41a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f416:	2301      	movs	r3, #1
 800f418:	e042      	b.n	800f4a0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f420:	2b00      	cmp	r3, #0
 800f422:	d106      	bne.n	800f432 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2200      	movs	r2, #0
 800f428:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f7f7 fbef 	bl	8006c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2224      	movs	r2, #36	@ 0x24
 800f436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f022 0201 	bic.w	r2, r2, #1
 800f448:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d002      	beq.n	800f458 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f000 ff56 	bl	8010304 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f000 fd2b 	bl	800feb4 <UART_SetConfig>
 800f45e:	4603      	mov	r3, r0
 800f460:	2b01      	cmp	r3, #1
 800f462:	d101      	bne.n	800f468 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f464:	2301      	movs	r3, #1
 800f466:	e01b      	b.n	800f4a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	685a      	ldr	r2, [r3, #4]
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	689a      	ldr	r2, [r3, #8]
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f486:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f042 0201 	orr.w	r2, r2, #1
 800f496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f000 ffd5 	bl	8010448 <UART_CheckIdleState>
 800f49e:	4603      	mov	r3, r0
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3708      	adds	r7, #8
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b082      	sub	sp, #8
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d101      	bne.n	800f4ba <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	e031      	b.n	800f51e <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2224      	movs	r2, #36	@ 0x24
 800f4be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	681a      	ldr	r2, [r3, #0]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f022 0201 	bic.w	r2, r2, #1
 800f4d0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f7f7 fc3a 	bl	8006d64 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2200      	movs	r2, #0
 800f504:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2200      	movs	r2, #0
 800f50c:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2200      	movs	r2, #0
 800f512:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2200      	movs	r2, #0
 800f518:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f51c:	2300      	movs	r3, #0
}
 800f51e:	4618      	mov	r0, r3
 800f520:	3708      	adds	r7, #8
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}
	...

0800f528 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b08a      	sub	sp, #40	@ 0x28
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	60f8      	str	r0, [r7, #12]
 800f530:	60b9      	str	r1, [r7, #8]
 800f532:	4613      	mov	r3, r2
 800f534:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f53c:	2b20      	cmp	r3, #32
 800f53e:	d137      	bne.n	800f5b0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d002      	beq.n	800f54c <HAL_UART_Receive_DMA+0x24>
 800f546:	88fb      	ldrh	r3, [r7, #6]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d101      	bne.n	800f550 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f54c:	2301      	movs	r3, #1
 800f54e:	e030      	b.n	800f5b2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	2200      	movs	r2, #0
 800f554:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	4a18      	ldr	r2, [pc, #96]	@ (800f5bc <HAL_UART_Receive_DMA+0x94>)
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d01f      	beq.n	800f5a0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d018      	beq.n	800f5a0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	e853 3f00 	ldrex	r3, [r3]
 800f57a:	613b      	str	r3, [r7, #16]
   return(result);
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f582:	627b      	str	r3, [r7, #36]	@ 0x24
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	461a      	mov	r2, r3
 800f58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f58c:	623b      	str	r3, [r7, #32]
 800f58e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f590:	69f9      	ldr	r1, [r7, #28]
 800f592:	6a3a      	ldr	r2, [r7, #32]
 800f594:	e841 2300 	strex	r3, r2, [r1]
 800f598:	61bb      	str	r3, [r7, #24]
   return(result);
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d1e6      	bne.n	800f56e <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f5a0:	88fb      	ldrh	r3, [r7, #6]
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	68b9      	ldr	r1, [r7, #8]
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	f001 f866 	bl	8010678 <UART_Start_Receive_DMA>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	e000      	b.n	800f5b2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f5b0:	2302      	movs	r3, #2
  }
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3728      	adds	r7, #40	@ 0x28
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	40008000 	.word	0x40008000

0800f5c0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b0a0      	sub	sp, #128	@ 0x80
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f5d0:	e853 3f00 	ldrex	r3, [r3]
 800f5d4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f5d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5d8:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800f5dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f5e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f5e8:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f5ec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f5ee:	e841 2300 	strex	r3, r2, [r1]
 800f5f2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f5f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d1e6      	bne.n	800f5c8 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	3308      	adds	r3, #8
 800f600:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f604:	e853 3f00 	ldrex	r3, [r3]
 800f608:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f60a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f60c:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800f610:	f023 0301 	bic.w	r3, r3, #1
 800f614:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	3308      	adds	r3, #8
 800f61c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f61e:	657a      	str	r2, [r7, #84]	@ 0x54
 800f620:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f622:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f624:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f626:	e841 2300 	strex	r3, r2, [r1]
 800f62a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f62c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d1e3      	bne.n	800f5fa <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f636:	2b01      	cmp	r3, #1
 800f638:	d118      	bne.n	800f66c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f642:	e853 3f00 	ldrex	r3, [r3]
 800f646:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f64a:	f023 0310 	bic.w	r3, r3, #16
 800f64e:	677b      	str	r3, [r7, #116]	@ 0x74
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	461a      	mov	r2, r3
 800f656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f658:	643b      	str	r3, [r7, #64]	@ 0x40
 800f65a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f65c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f65e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f660:	e841 2300 	strex	r3, r2, [r1]
 800f664:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d1e6      	bne.n	800f63a <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	689b      	ldr	r3, [r3, #8]
 800f672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f676:	2b80      	cmp	r3, #128	@ 0x80
 800f678:	d137      	bne.n	800f6ea <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	3308      	adds	r3, #8
 800f680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f682:	6a3b      	ldr	r3, [r7, #32]
 800f684:	e853 3f00 	ldrex	r3, [r3]
 800f688:	61fb      	str	r3, [r7, #28]
   return(result);
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f690:	673b      	str	r3, [r7, #112]	@ 0x70
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	3308      	adds	r3, #8
 800f698:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f69a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f69c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f69e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f6a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6a2:	e841 2300 	strex	r3, r2, [r1]
 800f6a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d1e5      	bne.n	800f67a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d019      	beq.n	800f6ea <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7f9 f891 	bl	80087ea <HAL_DMA_Abort>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d00d      	beq.n	800f6ea <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7f9 f9f6 	bl	8008ac4 <HAL_DMA_GetError>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	2b20      	cmp	r3, #32
 800f6dc:	d105      	bne.n	800f6ea <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2210      	movs	r2, #16
 800f6e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800f6e6:	2303      	movs	r3, #3
 800f6e8:	e073      	b.n	800f7d2 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	689b      	ldr	r3, [r3, #8]
 800f6f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6f4:	2b40      	cmp	r3, #64	@ 0x40
 800f6f6:	d13b      	bne.n	800f770 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	3308      	adds	r3, #8
 800f6fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	e853 3f00 	ldrex	r3, [r3]
 800f706:	60bb      	str	r3, [r7, #8]
   return(result);
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f70e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	3308      	adds	r3, #8
 800f716:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f718:	61ba      	str	r2, [r7, #24]
 800f71a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f71c:	6979      	ldr	r1, [r7, #20]
 800f71e:	69ba      	ldr	r2, [r7, #24]
 800f720:	e841 2300 	strex	r3, r2, [r1]
 800f724:	613b      	str	r3, [r7, #16]
   return(result);
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d1e5      	bne.n	800f6f8 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f732:	2b00      	cmp	r3, #0
 800f734:	d01c      	beq.n	800f770 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f73c:	2200      	movs	r2, #0
 800f73e:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f746:	4618      	mov	r0, r3
 800f748:	f7f9 f84f 	bl	80087ea <HAL_DMA_Abort>
 800f74c:	4603      	mov	r3, r0
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d00e      	beq.n	800f770 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f758:	4618      	mov	r0, r3
 800f75a:	f7f9 f9b3 	bl	8008ac4 <HAL_DMA_GetError>
 800f75e:	4603      	mov	r3, r0
 800f760:	2b20      	cmp	r3, #32
 800f762:	d105      	bne.n	800f770 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2210      	movs	r2, #16
 800f768:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800f76c:	2303      	movs	r3, #3
 800f76e:	e030      	b.n	800f7d2 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2200      	movs	r2, #0
 800f774:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2200      	movs	r2, #0
 800f77c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	220f      	movs	r2, #15
 800f786:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f78c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f790:	d107      	bne.n	800f7a2 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	699a      	ldr	r2, [r3, #24]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	f042 0210 	orr.w	r2, r2, #16
 800f7a0:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	699a      	ldr	r2, [r3, #24]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f042 0208 	orr.w	r2, r2, #8
 800f7b0:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2220      	movs	r2, #32
 800f7b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2220      	movs	r2, #32
 800f7be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800f7d0:	2300      	movs	r3, #0
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3780      	adds	r7, #128	@ 0x80
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}
	...

0800f7dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b0ba      	sub	sp, #232	@ 0xe8
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	69db      	ldr	r3, [r3, #28]
 800f7ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	689b      	ldr	r3, [r3, #8]
 800f7fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f802:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f806:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f80a:	4013      	ands	r3, r2
 800f80c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f810:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f814:	2b00      	cmp	r3, #0
 800f816:	d11b      	bne.n	800f850 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f81c:	f003 0320 	and.w	r3, r3, #32
 800f820:	2b00      	cmp	r3, #0
 800f822:	d015      	beq.n	800f850 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f828:	f003 0320 	and.w	r3, r3, #32
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d105      	bne.n	800f83c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d009      	beq.n	800f850 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f840:	2b00      	cmp	r3, #0
 800f842:	f000 8300 	beq.w	800fe46 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	4798      	blx	r3
      }
      return;
 800f84e:	e2fa      	b.n	800fe46 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f850:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f854:	2b00      	cmp	r3, #0
 800f856:	f000 8123 	beq.w	800faa0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f85a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f85e:	4b8d      	ldr	r3, [pc, #564]	@ (800fa94 <HAL_UART_IRQHandler+0x2b8>)
 800f860:	4013      	ands	r3, r2
 800f862:	2b00      	cmp	r3, #0
 800f864:	d106      	bne.n	800f874 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f866:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f86a:	4b8b      	ldr	r3, [pc, #556]	@ (800fa98 <HAL_UART_IRQHandler+0x2bc>)
 800f86c:	4013      	ands	r3, r2
 800f86e:	2b00      	cmp	r3, #0
 800f870:	f000 8116 	beq.w	800faa0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f878:	f003 0301 	and.w	r3, r3, #1
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d011      	beq.n	800f8a4 <HAL_UART_IRQHandler+0xc8>
 800f880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d00b      	beq.n	800f8a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	2201      	movs	r2, #1
 800f892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f89a:	f043 0201 	orr.w	r2, r3, #1
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f8a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8a8:	f003 0302 	and.w	r3, r3, #2
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d011      	beq.n	800f8d4 <HAL_UART_IRQHandler+0xf8>
 800f8b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f8b4:	f003 0301 	and.w	r3, r3, #1
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d00b      	beq.n	800f8d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	2202      	movs	r2, #2
 800f8c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8ca:	f043 0204 	orr.w	r2, r3, #4
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f8d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8d8:	f003 0304 	and.w	r3, r3, #4
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d011      	beq.n	800f904 <HAL_UART_IRQHandler+0x128>
 800f8e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f8e4:	f003 0301 	and.w	r3, r3, #1
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d00b      	beq.n	800f904 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	2204      	movs	r2, #4
 800f8f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8fa:	f043 0202 	orr.w	r2, r3, #2
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f908:	f003 0308 	and.w	r3, r3, #8
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d017      	beq.n	800f940 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f914:	f003 0320 	and.w	r3, r3, #32
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d105      	bne.n	800f928 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f91c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f920:	4b5c      	ldr	r3, [pc, #368]	@ (800fa94 <HAL_UART_IRQHandler+0x2b8>)
 800f922:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f924:	2b00      	cmp	r3, #0
 800f926:	d00b      	beq.n	800f940 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	2208      	movs	r2, #8
 800f92e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f936:	f043 0208 	orr.w	r2, r3, #8
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d012      	beq.n	800f972 <HAL_UART_IRQHandler+0x196>
 800f94c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f950:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f954:	2b00      	cmp	r3, #0
 800f956:	d00c      	beq.n	800f972 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f960:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f968:	f043 0220 	orr.w	r2, r3, #32
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f978:	2b00      	cmp	r3, #0
 800f97a:	f000 8266 	beq.w	800fe4a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f97e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f982:	f003 0320 	and.w	r3, r3, #32
 800f986:	2b00      	cmp	r3, #0
 800f988:	d013      	beq.n	800f9b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f98a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f98e:	f003 0320 	and.w	r3, r3, #32
 800f992:	2b00      	cmp	r3, #0
 800f994:	d105      	bne.n	800f9a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f99a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d007      	beq.n	800f9b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d003      	beq.n	800f9b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	689b      	ldr	r3, [r3, #8]
 800f9c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9c6:	2b40      	cmp	r3, #64	@ 0x40
 800f9c8:	d005      	beq.n	800f9d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f9ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f9ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d054      	beq.n	800fa80 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f000 ff35 	bl	8010846 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	689b      	ldr	r3, [r3, #8]
 800f9e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9e6:	2b40      	cmp	r3, #64	@ 0x40
 800f9e8:	d146      	bne.n	800fa78 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	3308      	adds	r3, #8
 800f9f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f9f8:	e853 3f00 	ldrex	r3, [r3]
 800f9fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fa00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fa04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fa08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	3308      	adds	r3, #8
 800fa12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fa16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fa1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fa22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fa26:	e841 2300 	strex	r3, r2, [r1]
 800fa2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fa2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d1d9      	bne.n	800f9ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d017      	beq.n	800fa70 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa46:	4a15      	ldr	r2, [pc, #84]	@ (800fa9c <HAL_UART_IRQHandler+0x2c0>)
 800fa48:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa50:	4618      	mov	r0, r3
 800fa52:	f7f8 ff29 	bl	80088a8 <HAL_DMA_Abort_IT>
 800fa56:	4603      	mov	r3, r0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d019      	beq.n	800fa90 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa64:	687a      	ldr	r2, [r7, #4]
 800fa66:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fa6a:	4610      	mov	r0, r2
 800fa6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa6e:	e00f      	b.n	800fa90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f000 fa09 	bl	800fe88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa76:	e00b      	b.n	800fa90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f000 fa05 	bl	800fe88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa7e:	e007      	b.n	800fa90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f000 fa01 	bl	800fe88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fa8e:	e1dc      	b.n	800fe4a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa90:	bf00      	nop
    return;
 800fa92:	e1da      	b.n	800fe4a <HAL_UART_IRQHandler+0x66e>
 800fa94:	10000001 	.word	0x10000001
 800fa98:	04000120 	.word	0x04000120
 800fa9c:	08010afd 	.word	0x08010afd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	f040 8170 	bne.w	800fd8a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800faaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800faae:	f003 0310 	and.w	r3, r3, #16
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	f000 8169 	beq.w	800fd8a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fabc:	f003 0310 	and.w	r3, r3, #16
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	f000 8162 	beq.w	800fd8a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	2210      	movs	r2, #16
 800facc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	689b      	ldr	r3, [r3, #8]
 800fad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fad8:	2b40      	cmp	r3, #64	@ 0x40
 800fada:	f040 80d8 	bne.w	800fc8e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	685b      	ldr	r3, [r3, #4]
 800fae8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800faec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	f000 80af 	beq.w	800fc54 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fafc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fb00:	429a      	cmp	r2, r3
 800fb02:	f080 80a7 	bcs.w	800fc54 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fb0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f003 0320 	and.w	r3, r3, #32
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	f040 8087 	bne.w	800fc32 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fb30:	e853 3f00 	ldrex	r3, [r3]
 800fb34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fb38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fb3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fb40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	461a      	mov	r2, r3
 800fb4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fb4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fb52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fb5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fb5e:	e841 2300 	strex	r3, r2, [r1]
 800fb62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fb66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d1da      	bne.n	800fb24 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	3308      	adds	r3, #8
 800fb74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fb78:	e853 3f00 	ldrex	r3, [r3]
 800fb7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fb7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fb80:	f023 0301 	bic.w	r3, r3, #1
 800fb84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	3308      	adds	r3, #8
 800fb8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fb92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fb96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fb9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fb9e:	e841 2300 	strex	r3, r2, [r1]
 800fba2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fba4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d1e1      	bne.n	800fb6e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	3308      	adds	r3, #8
 800fbb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fbb4:	e853 3f00 	ldrex	r3, [r3]
 800fbb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fbba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fbbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fbc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	3308      	adds	r3, #8
 800fbca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fbce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fbd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fbd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fbd6:	e841 2300 	strex	r3, r2, [r1]
 800fbda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fbdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d1e3      	bne.n	800fbaa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2220      	movs	r2, #32
 800fbe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2200      	movs	r2, #0
 800fbee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fbf8:	e853 3f00 	ldrex	r3, [r3]
 800fbfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fbfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc00:	f023 0310 	bic.w	r3, r3, #16
 800fc04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc12:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fc14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fc18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fc1a:	e841 2300 	strex	r3, r2, [r1]
 800fc1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fc20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d1e4      	bne.n	800fbf0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7f8 fddc 	bl	80087ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2202      	movs	r2, #2
 800fc36:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fc44:	b29b      	uxth	r3, r3
 800fc46:	1ad3      	subs	r3, r2, r3
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f000 f925 	bl	800fe9c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800fc52:	e0fc      	b.n	800fe4e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fc5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	f040 80f5 	bne.w	800fe4e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	f003 0320 	and.w	r3, r3, #32
 800fc72:	2b20      	cmp	r3, #32
 800fc74:	f040 80eb 	bne.w	800fe4e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2202      	movs	r2, #2
 800fc7c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fc84:	4619      	mov	r1, r3
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f000 f908 	bl	800fe9c <HAL_UARTEx_RxEventCallback>
      return;
 800fc8c:	e0df      	b.n	800fe4e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	1ad3      	subs	r3, r2, r3
 800fc9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fca8:	b29b      	uxth	r3, r3
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	f000 80d1 	beq.w	800fe52 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800fcb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	f000 80cc 	beq.w	800fe52 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcc2:	e853 3f00 	ldrex	r3, [r3]
 800fcc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fcc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fcce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fcdc:	647b      	str	r3, [r7, #68]	@ 0x44
 800fcde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fce4:	e841 2300 	strex	r3, r2, [r1]
 800fce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fcea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d1e4      	bne.n	800fcba <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	3308      	adds	r3, #8
 800fcf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcfa:	e853 3f00 	ldrex	r3, [r3]
 800fcfe:	623b      	str	r3, [r7, #32]
   return(result);
 800fd00:	6a3b      	ldr	r3, [r7, #32]
 800fd02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fd06:	f023 0301 	bic.w	r3, r3, #1
 800fd0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	3308      	adds	r3, #8
 800fd14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fd18:	633a      	str	r2, [r7, #48]	@ 0x30
 800fd1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fd1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd20:	e841 2300 	strex	r3, r2, [r1]
 800fd24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d1e1      	bne.n	800fcf0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2220      	movs	r2, #32
 800fd30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2200      	movs	r2, #0
 800fd38:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	e853 3f00 	ldrex	r3, [r3]
 800fd4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	f023 0310 	bic.w	r3, r3, #16
 800fd54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fd62:	61fb      	str	r3, [r7, #28]
 800fd64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd66:	69b9      	ldr	r1, [r7, #24]
 800fd68:	69fa      	ldr	r2, [r7, #28]
 800fd6a:	e841 2300 	strex	r3, r2, [r1]
 800fd6e:	617b      	str	r3, [r7, #20]
   return(result);
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d1e4      	bne.n	800fd40 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2202      	movs	r2, #2
 800fd7a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fd7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fd80:	4619      	mov	r1, r3
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f000 f88a 	bl	800fe9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fd88:	e063      	b.n	800fe52 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fd8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d00e      	beq.n	800fdb4 <HAL_UART_IRQHandler+0x5d8>
 800fd96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fd9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d008      	beq.n	800fdb4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800fdaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f000 fee2 	bl	8010b76 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fdb2:	e051      	b.n	800fe58 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fdb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fdb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d014      	beq.n	800fdea <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fdc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fdc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d105      	bne.n	800fdd8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fdcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fdd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d008      	beq.n	800fdea <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d03a      	beq.n	800fe56 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	4798      	blx	r3
    }
    return;
 800fde8:	e035      	b.n	800fe56 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fdea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fdee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d009      	beq.n	800fe0a <HAL_UART_IRQHandler+0x62e>
 800fdf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fdfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d003      	beq.n	800fe0a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f000 fe8c 	bl	8010b20 <UART_EndTransmit_IT>
    return;
 800fe08:	e026      	b.n	800fe58 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fe0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d009      	beq.n	800fe2a <HAL_UART_IRQHandler+0x64e>
 800fe16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe1a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d003      	beq.n	800fe2a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 febb 	bl	8010b9e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe28:	e016      	b.n	800fe58 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fe2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d010      	beq.n	800fe58 <HAL_UART_IRQHandler+0x67c>
 800fe36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	da0c      	bge.n	800fe58 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f000 fea3 	bl	8010b8a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe44:	e008      	b.n	800fe58 <HAL_UART_IRQHandler+0x67c>
      return;
 800fe46:	bf00      	nop
 800fe48:	e006      	b.n	800fe58 <HAL_UART_IRQHandler+0x67c>
    return;
 800fe4a:	bf00      	nop
 800fe4c:	e004      	b.n	800fe58 <HAL_UART_IRQHandler+0x67c>
      return;
 800fe4e:	bf00      	nop
 800fe50:	e002      	b.n	800fe58 <HAL_UART_IRQHandler+0x67c>
      return;
 800fe52:	bf00      	nop
 800fe54:	e000      	b.n	800fe58 <HAL_UART_IRQHandler+0x67c>
    return;
 800fe56:	bf00      	nop
  }
}
 800fe58:	37e8      	adds	r7, #232	@ 0xe8
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop

0800fe60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fe60:	b480      	push	{r7}
 800fe62:	b083      	sub	sp, #12
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fe68:	bf00      	nop
 800fe6a:	370c      	adds	r7, #12
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe72:	4770      	bx	lr

0800fe74 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fe7c:	bf00      	nop
 800fe7e:	370c      	adds	r7, #12
 800fe80:	46bd      	mov	sp, r7
 800fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe86:	4770      	bx	lr

0800fe88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b083      	sub	sp, #12
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fe90:	bf00      	nop
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr

0800fe9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	460b      	mov	r3, r1
 800fea6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fea8:	bf00      	nop
 800feaa:	370c      	adds	r7, #12
 800feac:	46bd      	mov	sp, r7
 800feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb2:	4770      	bx	lr

0800feb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800feb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800feb8:	b08c      	sub	sp, #48	@ 0x30
 800feba:	af00      	add	r7, sp, #0
 800febc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800febe:	2300      	movs	r3, #0
 800fec0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	689a      	ldr	r2, [r3, #8]
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	691b      	ldr	r3, [r3, #16]
 800fecc:	431a      	orrs	r2, r3
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	695b      	ldr	r3, [r3, #20]
 800fed2:	431a      	orrs	r2, r3
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	69db      	ldr	r3, [r3, #28]
 800fed8:	4313      	orrs	r3, r2
 800feda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	681a      	ldr	r2, [r3, #0]
 800fee2:	4baf      	ldr	r3, [pc, #700]	@ (80101a0 <UART_SetConfig+0x2ec>)
 800fee4:	4013      	ands	r3, r2
 800fee6:	697a      	ldr	r2, [r7, #20]
 800fee8:	6812      	ldr	r2, [r2, #0]
 800feea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800feec:	430b      	orrs	r3, r1
 800feee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	68da      	ldr	r2, [r3, #12]
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	430a      	orrs	r2, r1
 800ff04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	699b      	ldr	r3, [r3, #24]
 800ff0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	4aa4      	ldr	r2, [pc, #656]	@ (80101a4 <UART_SetConfig+0x2f0>)
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d004      	beq.n	800ff20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	6a1b      	ldr	r3, [r3, #32]
 800ff1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff1c:	4313      	orrs	r3, r2
 800ff1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	689b      	ldr	r3, [r3, #8]
 800ff26:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ff2a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ff2e:	697a      	ldr	r2, [r7, #20]
 800ff30:	6812      	ldr	r2, [r2, #0]
 800ff32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ff34:	430b      	orrs	r3, r1
 800ff36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff3e:	f023 010f 	bic.w	r1, r3, #15
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff46:	697b      	ldr	r3, [r7, #20]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	430a      	orrs	r2, r1
 800ff4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	4a95      	ldr	r2, [pc, #596]	@ (80101a8 <UART_SetConfig+0x2f4>)
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d125      	bne.n	800ffa4 <UART_SetConfig+0xf0>
 800ff58:	2003      	movs	r0, #3
 800ff5a:	f7ff fa35 	bl	800f3c8 <LL_RCC_GetUSARTClockSource>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	2b03      	cmp	r3, #3
 800ff62:	d81b      	bhi.n	800ff9c <UART_SetConfig+0xe8>
 800ff64:	a201      	add	r2, pc, #4	@ (adr r2, 800ff6c <UART_SetConfig+0xb8>)
 800ff66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff6a:	bf00      	nop
 800ff6c:	0800ff7d 	.word	0x0800ff7d
 800ff70:	0800ff8d 	.word	0x0800ff8d
 800ff74:	0800ff85 	.word	0x0800ff85
 800ff78:	0800ff95 	.word	0x0800ff95
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff82:	e042      	b.n	801000a <UART_SetConfig+0x156>
 800ff84:	2302      	movs	r3, #2
 800ff86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff8a:	e03e      	b.n	801000a <UART_SetConfig+0x156>
 800ff8c:	2304      	movs	r3, #4
 800ff8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff92:	e03a      	b.n	801000a <UART_SetConfig+0x156>
 800ff94:	2308      	movs	r3, #8
 800ff96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff9a:	e036      	b.n	801000a <UART_SetConfig+0x156>
 800ff9c:	2310      	movs	r3, #16
 800ff9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffa2:	e032      	b.n	801000a <UART_SetConfig+0x156>
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	4a7e      	ldr	r2, [pc, #504]	@ (80101a4 <UART_SetConfig+0x2f0>)
 800ffaa:	4293      	cmp	r3, r2
 800ffac:	d12a      	bne.n	8010004 <UART_SetConfig+0x150>
 800ffae:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800ffb2:	f7ff fa19 	bl	800f3e8 <LL_RCC_GetLPUARTClockSource>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ffbc:	d01a      	beq.n	800fff4 <UART_SetConfig+0x140>
 800ffbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ffc2:	d81b      	bhi.n	800fffc <UART_SetConfig+0x148>
 800ffc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ffc8:	d00c      	beq.n	800ffe4 <UART_SetConfig+0x130>
 800ffca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ffce:	d815      	bhi.n	800fffc <UART_SetConfig+0x148>
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d003      	beq.n	800ffdc <UART_SetConfig+0x128>
 800ffd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ffd8:	d008      	beq.n	800ffec <UART_SetConfig+0x138>
 800ffda:	e00f      	b.n	800fffc <UART_SetConfig+0x148>
 800ffdc:	2300      	movs	r3, #0
 800ffde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffe2:	e012      	b.n	801000a <UART_SetConfig+0x156>
 800ffe4:	2302      	movs	r3, #2
 800ffe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffea:	e00e      	b.n	801000a <UART_SetConfig+0x156>
 800ffec:	2304      	movs	r3, #4
 800ffee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fff2:	e00a      	b.n	801000a <UART_SetConfig+0x156>
 800fff4:	2308      	movs	r3, #8
 800fff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fffa:	e006      	b.n	801000a <UART_SetConfig+0x156>
 800fffc:	2310      	movs	r3, #16
 800fffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010002:	e002      	b.n	801000a <UART_SetConfig+0x156>
 8010004:	2310      	movs	r3, #16
 8010006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	4a65      	ldr	r2, [pc, #404]	@ (80101a4 <UART_SetConfig+0x2f0>)
 8010010:	4293      	cmp	r3, r2
 8010012:	f040 8097 	bne.w	8010144 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010016:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801001a:	2b08      	cmp	r3, #8
 801001c:	d823      	bhi.n	8010066 <UART_SetConfig+0x1b2>
 801001e:	a201      	add	r2, pc, #4	@ (adr r2, 8010024 <UART_SetConfig+0x170>)
 8010020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010024:	08010049 	.word	0x08010049
 8010028:	08010067 	.word	0x08010067
 801002c:	08010051 	.word	0x08010051
 8010030:	08010067 	.word	0x08010067
 8010034:	08010057 	.word	0x08010057
 8010038:	08010067 	.word	0x08010067
 801003c:	08010067 	.word	0x08010067
 8010040:	08010067 	.word	0x08010067
 8010044:	0801005f 	.word	0x0801005f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010048:	f7fc fbfa 	bl	800c840 <HAL_RCC_GetPCLK1Freq>
 801004c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801004e:	e010      	b.n	8010072 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010050:	4b56      	ldr	r3, [pc, #344]	@ (80101ac <UART_SetConfig+0x2f8>)
 8010052:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010054:	e00d      	b.n	8010072 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010056:	f7fc fb73 	bl	800c740 <HAL_RCC_GetSysClockFreq>
 801005a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801005c:	e009      	b.n	8010072 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801005e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010062:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010064:	e005      	b.n	8010072 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8010066:	2300      	movs	r3, #0
 8010068:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801006a:	2301      	movs	r3, #1
 801006c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010070:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010074:	2b00      	cmp	r3, #0
 8010076:	f000 812b 	beq.w	80102d0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801007e:	4a4c      	ldr	r2, [pc, #304]	@ (80101b0 <UART_SetConfig+0x2fc>)
 8010080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010084:	461a      	mov	r2, r3
 8010086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010088:	fbb3 f3f2 	udiv	r3, r3, r2
 801008c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	685a      	ldr	r2, [r3, #4]
 8010092:	4613      	mov	r3, r2
 8010094:	005b      	lsls	r3, r3, #1
 8010096:	4413      	add	r3, r2
 8010098:	69ba      	ldr	r2, [r7, #24]
 801009a:	429a      	cmp	r2, r3
 801009c:	d305      	bcc.n	80100aa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80100a4:	69ba      	ldr	r2, [r7, #24]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d903      	bls.n	80100b2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80100aa:	2301      	movs	r3, #1
 80100ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80100b0:	e10e      	b.n	80102d0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80100b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b4:	2200      	movs	r2, #0
 80100b6:	60bb      	str	r3, [r7, #8]
 80100b8:	60fa      	str	r2, [r7, #12]
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100be:	4a3c      	ldr	r2, [pc, #240]	@ (80101b0 <UART_SetConfig+0x2fc>)
 80100c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	2200      	movs	r2, #0
 80100c8:	603b      	str	r3, [r7, #0]
 80100ca:	607a      	str	r2, [r7, #4]
 80100cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80100d4:	f7f0 fdb0 	bl	8000c38 <__aeabi_uldivmod>
 80100d8:	4602      	mov	r2, r0
 80100da:	460b      	mov	r3, r1
 80100dc:	4610      	mov	r0, r2
 80100de:	4619      	mov	r1, r3
 80100e0:	f04f 0200 	mov.w	r2, #0
 80100e4:	f04f 0300 	mov.w	r3, #0
 80100e8:	020b      	lsls	r3, r1, #8
 80100ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80100ee:	0202      	lsls	r2, r0, #8
 80100f0:	6979      	ldr	r1, [r7, #20]
 80100f2:	6849      	ldr	r1, [r1, #4]
 80100f4:	0849      	lsrs	r1, r1, #1
 80100f6:	2000      	movs	r0, #0
 80100f8:	460c      	mov	r4, r1
 80100fa:	4605      	mov	r5, r0
 80100fc:	eb12 0804 	adds.w	r8, r2, r4
 8010100:	eb43 0905 	adc.w	r9, r3, r5
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	685b      	ldr	r3, [r3, #4]
 8010108:	2200      	movs	r2, #0
 801010a:	469a      	mov	sl, r3
 801010c:	4693      	mov	fp, r2
 801010e:	4652      	mov	r2, sl
 8010110:	465b      	mov	r3, fp
 8010112:	4640      	mov	r0, r8
 8010114:	4649      	mov	r1, r9
 8010116:	f7f0 fd8f 	bl	8000c38 <__aeabi_uldivmod>
 801011a:	4602      	mov	r2, r0
 801011c:	460b      	mov	r3, r1
 801011e:	4613      	mov	r3, r2
 8010120:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010122:	6a3b      	ldr	r3, [r7, #32]
 8010124:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010128:	d308      	bcc.n	801013c <UART_SetConfig+0x288>
 801012a:	6a3b      	ldr	r3, [r7, #32]
 801012c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010130:	d204      	bcs.n	801013c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	6a3a      	ldr	r2, [r7, #32]
 8010138:	60da      	str	r2, [r3, #12]
 801013a:	e0c9      	b.n	80102d0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801013c:	2301      	movs	r3, #1
 801013e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010142:	e0c5      	b.n	80102d0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	69db      	ldr	r3, [r3, #28]
 8010148:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801014c:	d16d      	bne.n	801022a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801014e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010152:	3b01      	subs	r3, #1
 8010154:	2b07      	cmp	r3, #7
 8010156:	d82d      	bhi.n	80101b4 <UART_SetConfig+0x300>
 8010158:	a201      	add	r2, pc, #4	@ (adr r2, 8010160 <UART_SetConfig+0x2ac>)
 801015a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801015e:	bf00      	nop
 8010160:	08010181 	.word	0x08010181
 8010164:	08010189 	.word	0x08010189
 8010168:	080101b5 	.word	0x080101b5
 801016c:	0801018f 	.word	0x0801018f
 8010170:	080101b5 	.word	0x080101b5
 8010174:	080101b5 	.word	0x080101b5
 8010178:	080101b5 	.word	0x080101b5
 801017c:	08010197 	.word	0x08010197
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010180:	f7fc fb74 	bl	800c86c <HAL_RCC_GetPCLK2Freq>
 8010184:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010186:	e01b      	b.n	80101c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010188:	4b08      	ldr	r3, [pc, #32]	@ (80101ac <UART_SetConfig+0x2f8>)
 801018a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801018c:	e018      	b.n	80101c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801018e:	f7fc fad7 	bl	800c740 <HAL_RCC_GetSysClockFreq>
 8010192:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010194:	e014      	b.n	80101c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801019a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801019c:	e010      	b.n	80101c0 <UART_SetConfig+0x30c>
 801019e:	bf00      	nop
 80101a0:	cfff69f3 	.word	0xcfff69f3
 80101a4:	40008000 	.word	0x40008000
 80101a8:	40013800 	.word	0x40013800
 80101ac:	00f42400 	.word	0x00f42400
 80101b0:	0802196c 	.word	0x0802196c
      default:
        pclk = 0U;
 80101b4:	2300      	movs	r3, #0
 80101b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80101b8:	2301      	movs	r3, #1
 80101ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80101be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80101c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	f000 8084 	beq.w	80102d0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101cc:	4a4b      	ldr	r2, [pc, #300]	@ (80102fc <UART_SetConfig+0x448>)
 80101ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101d2:	461a      	mov	r2, r3
 80101d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80101da:	005a      	lsls	r2, r3, #1
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	685b      	ldr	r3, [r3, #4]
 80101e0:	085b      	lsrs	r3, r3, #1
 80101e2:	441a      	add	r2, r3
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	685b      	ldr	r3, [r3, #4]
 80101e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80101ec:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80101ee:	6a3b      	ldr	r3, [r7, #32]
 80101f0:	2b0f      	cmp	r3, #15
 80101f2:	d916      	bls.n	8010222 <UART_SetConfig+0x36e>
 80101f4:	6a3b      	ldr	r3, [r7, #32]
 80101f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80101fa:	d212      	bcs.n	8010222 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80101fc:	6a3b      	ldr	r3, [r7, #32]
 80101fe:	b29b      	uxth	r3, r3
 8010200:	f023 030f 	bic.w	r3, r3, #15
 8010204:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010206:	6a3b      	ldr	r3, [r7, #32]
 8010208:	085b      	lsrs	r3, r3, #1
 801020a:	b29b      	uxth	r3, r3
 801020c:	f003 0307 	and.w	r3, r3, #7
 8010210:	b29a      	uxth	r2, r3
 8010212:	8bfb      	ldrh	r3, [r7, #30]
 8010214:	4313      	orrs	r3, r2
 8010216:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	8bfa      	ldrh	r2, [r7, #30]
 801021e:	60da      	str	r2, [r3, #12]
 8010220:	e056      	b.n	80102d0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8010222:	2301      	movs	r3, #1
 8010224:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010228:	e052      	b.n	80102d0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801022a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801022e:	3b01      	subs	r3, #1
 8010230:	2b07      	cmp	r3, #7
 8010232:	d822      	bhi.n	801027a <UART_SetConfig+0x3c6>
 8010234:	a201      	add	r2, pc, #4	@ (adr r2, 801023c <UART_SetConfig+0x388>)
 8010236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801023a:	bf00      	nop
 801023c:	0801025d 	.word	0x0801025d
 8010240:	08010265 	.word	0x08010265
 8010244:	0801027b 	.word	0x0801027b
 8010248:	0801026b 	.word	0x0801026b
 801024c:	0801027b 	.word	0x0801027b
 8010250:	0801027b 	.word	0x0801027b
 8010254:	0801027b 	.word	0x0801027b
 8010258:	08010273 	.word	0x08010273
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801025c:	f7fc fb06 	bl	800c86c <HAL_RCC_GetPCLK2Freq>
 8010260:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010262:	e010      	b.n	8010286 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010264:	4b26      	ldr	r3, [pc, #152]	@ (8010300 <UART_SetConfig+0x44c>)
 8010266:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010268:	e00d      	b.n	8010286 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801026a:	f7fc fa69 	bl	800c740 <HAL_RCC_GetSysClockFreq>
 801026e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010270:	e009      	b.n	8010286 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010276:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010278:	e005      	b.n	8010286 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801027a:	2300      	movs	r3, #0
 801027c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801027e:	2301      	movs	r3, #1
 8010280:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010284:	bf00      	nop
    }

    if (pclk != 0U)
 8010286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010288:	2b00      	cmp	r3, #0
 801028a:	d021      	beq.n	80102d0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010290:	4a1a      	ldr	r2, [pc, #104]	@ (80102fc <UART_SetConfig+0x448>)
 8010292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010296:	461a      	mov	r2, r3
 8010298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801029a:	fbb3 f2f2 	udiv	r2, r3, r2
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	085b      	lsrs	r3, r3, #1
 80102a4:	441a      	add	r2, r3
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	685b      	ldr	r3, [r3, #4]
 80102aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80102ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80102b0:	6a3b      	ldr	r3, [r7, #32]
 80102b2:	2b0f      	cmp	r3, #15
 80102b4:	d909      	bls.n	80102ca <UART_SetConfig+0x416>
 80102b6:	6a3b      	ldr	r3, [r7, #32]
 80102b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80102bc:	d205      	bcs.n	80102ca <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80102be:	6a3b      	ldr	r3, [r7, #32]
 80102c0:	b29a      	uxth	r2, r3
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	60da      	str	r2, [r3, #12]
 80102c8:	e002      	b.n	80102d0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80102ca:	2301      	movs	r3, #1
 80102cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	2201      	movs	r2, #1
 80102d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	2201      	movs	r2, #1
 80102dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	2200      	movs	r2, #0
 80102e4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	2200      	movs	r2, #0
 80102ea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80102ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	3730      	adds	r7, #48	@ 0x30
 80102f4:	46bd      	mov	sp, r7
 80102f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80102fa:	bf00      	nop
 80102fc:	0802196c 	.word	0x0802196c
 8010300:	00f42400 	.word	0x00f42400

08010304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010304:	b480      	push	{r7}
 8010306:	b083      	sub	sp, #12
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010310:	f003 0308 	and.w	r3, r3, #8
 8010314:	2b00      	cmp	r3, #0
 8010316:	d00a      	beq.n	801032e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	430a      	orrs	r2, r1
 801032c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010332:	f003 0301 	and.w	r3, r3, #1
 8010336:	2b00      	cmp	r3, #0
 8010338:	d00a      	beq.n	8010350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	430a      	orrs	r2, r1
 801034e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010354:	f003 0302 	and.w	r3, r3, #2
 8010358:	2b00      	cmp	r3, #0
 801035a:	d00a      	beq.n	8010372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	430a      	orrs	r2, r1
 8010370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010376:	f003 0304 	and.w	r3, r3, #4
 801037a:	2b00      	cmp	r3, #0
 801037c:	d00a      	beq.n	8010394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	685b      	ldr	r3, [r3, #4]
 8010384:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	430a      	orrs	r2, r1
 8010392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010398:	f003 0310 	and.w	r3, r3, #16
 801039c:	2b00      	cmp	r3, #0
 801039e:	d00a      	beq.n	80103b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	689b      	ldr	r3, [r3, #8]
 80103a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	430a      	orrs	r2, r1
 80103b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103ba:	f003 0320 	and.w	r3, r3, #32
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d00a      	beq.n	80103d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	430a      	orrs	r2, r1
 80103d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d01a      	beq.n	801041a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	685b      	ldr	r3, [r3, #4]
 80103ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	430a      	orrs	r2, r1
 80103f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010402:	d10a      	bne.n	801041a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	430a      	orrs	r2, r1
 8010418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801041e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010422:	2b00      	cmp	r3, #0
 8010424:	d00a      	beq.n	801043c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	430a      	orrs	r2, r1
 801043a:	605a      	str	r2, [r3, #4]
  }
}
 801043c:	bf00      	nop
 801043e:	370c      	adds	r7, #12
 8010440:	46bd      	mov	sp, r7
 8010442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010446:	4770      	bx	lr

08010448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b098      	sub	sp, #96	@ 0x60
 801044c:	af02      	add	r7, sp, #8
 801044e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2200      	movs	r2, #0
 8010454:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010458:	f7f6 fdd0 	bl	8006ffc <HAL_GetTick>
 801045c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	f003 0308 	and.w	r3, r3, #8
 8010468:	2b08      	cmp	r3, #8
 801046a:	d12f      	bne.n	80104cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801046c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010470:	9300      	str	r3, [sp, #0]
 8010472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010474:	2200      	movs	r2, #0
 8010476:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f000 f88e 	bl	801059c <UART_WaitOnFlagUntilTimeout>
 8010480:	4603      	mov	r3, r0
 8010482:	2b00      	cmp	r3, #0
 8010484:	d022      	beq.n	80104cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801048c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801048e:	e853 3f00 	ldrex	r3, [r3]
 8010492:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010496:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801049a:	653b      	str	r3, [r7, #80]	@ 0x50
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	461a      	mov	r2, r3
 80104a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80104a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80104aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80104ac:	e841 2300 	strex	r3, r2, [r1]
 80104b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80104b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d1e6      	bne.n	8010486 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2220      	movs	r2, #32
 80104bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2200      	movs	r2, #0
 80104c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80104c8:	2303      	movs	r3, #3
 80104ca:	e063      	b.n	8010594 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	f003 0304 	and.w	r3, r3, #4
 80104d6:	2b04      	cmp	r3, #4
 80104d8:	d149      	bne.n	801056e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80104da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80104de:	9300      	str	r3, [sp, #0]
 80104e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104e2:	2200      	movs	r2, #0
 80104e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f000 f857 	bl	801059c <UART_WaitOnFlagUntilTimeout>
 80104ee:	4603      	mov	r3, r0
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d03c      	beq.n	801056e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104fc:	e853 3f00 	ldrex	r3, [r3]
 8010500:	623b      	str	r3, [r7, #32]
   return(result);
 8010502:	6a3b      	ldr	r3, [r7, #32]
 8010504:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010508:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	461a      	mov	r2, r3
 8010510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010512:	633b      	str	r3, [r7, #48]	@ 0x30
 8010514:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010516:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801051a:	e841 2300 	strex	r3, r2, [r1]
 801051e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010522:	2b00      	cmp	r3, #0
 8010524:	d1e6      	bne.n	80104f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	3308      	adds	r3, #8
 801052c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	e853 3f00 	ldrex	r3, [r3]
 8010534:	60fb      	str	r3, [r7, #12]
   return(result);
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	f023 0301 	bic.w	r3, r3, #1
 801053c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	3308      	adds	r3, #8
 8010544:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010546:	61fa      	str	r2, [r7, #28]
 8010548:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801054a:	69b9      	ldr	r1, [r7, #24]
 801054c:	69fa      	ldr	r2, [r7, #28]
 801054e:	e841 2300 	strex	r3, r2, [r1]
 8010552:	617b      	str	r3, [r7, #20]
   return(result);
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d1e5      	bne.n	8010526 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2220      	movs	r2, #32
 801055e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2200      	movs	r2, #0
 8010566:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801056a:	2303      	movs	r3, #3
 801056c:	e012      	b.n	8010594 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2220      	movs	r2, #32
 8010572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2220      	movs	r2, #32
 801057a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2200      	movs	r2, #0
 8010582:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2200      	movs	r2, #0
 8010588:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2200      	movs	r2, #0
 801058e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010592:	2300      	movs	r3, #0
}
 8010594:	4618      	mov	r0, r3
 8010596:	3758      	adds	r7, #88	@ 0x58
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	60b9      	str	r1, [r7, #8]
 80105a6:	603b      	str	r3, [r7, #0]
 80105a8:	4613      	mov	r3, r2
 80105aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80105ac:	e04f      	b.n	801064e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80105ae:	69bb      	ldr	r3, [r7, #24]
 80105b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105b4:	d04b      	beq.n	801064e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80105b6:	f7f6 fd21 	bl	8006ffc <HAL_GetTick>
 80105ba:	4602      	mov	r2, r0
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	1ad3      	subs	r3, r2, r3
 80105c0:	69ba      	ldr	r2, [r7, #24]
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d302      	bcc.n	80105cc <UART_WaitOnFlagUntilTimeout+0x30>
 80105c6:	69bb      	ldr	r3, [r7, #24]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d101      	bne.n	80105d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80105cc:	2303      	movs	r3, #3
 80105ce:	e04e      	b.n	801066e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	f003 0304 	and.w	r3, r3, #4
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d037      	beq.n	801064e <UART_WaitOnFlagUntilTimeout+0xb2>
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	2b80      	cmp	r3, #128	@ 0x80
 80105e2:	d034      	beq.n	801064e <UART_WaitOnFlagUntilTimeout+0xb2>
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	2b40      	cmp	r3, #64	@ 0x40
 80105e8:	d031      	beq.n	801064e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	69db      	ldr	r3, [r3, #28]
 80105f0:	f003 0308 	and.w	r3, r3, #8
 80105f4:	2b08      	cmp	r3, #8
 80105f6:	d110      	bne.n	801061a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	2208      	movs	r2, #8
 80105fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010600:	68f8      	ldr	r0, [r7, #12]
 8010602:	f000 f920 	bl	8010846 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	2208      	movs	r2, #8
 801060a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2200      	movs	r2, #0
 8010612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010616:	2301      	movs	r3, #1
 8010618:	e029      	b.n	801066e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	69db      	ldr	r3, [r3, #28]
 8010620:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010628:	d111      	bne.n	801064e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010632:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010634:	68f8      	ldr	r0, [r7, #12]
 8010636:	f000 f906 	bl	8010846 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	2220      	movs	r2, #32
 801063e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2200      	movs	r2, #0
 8010646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801064a:	2303      	movs	r3, #3
 801064c:	e00f      	b.n	801066e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	69da      	ldr	r2, [r3, #28]
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	4013      	ands	r3, r2
 8010658:	68ba      	ldr	r2, [r7, #8]
 801065a:	429a      	cmp	r2, r3
 801065c:	bf0c      	ite	eq
 801065e:	2301      	moveq	r3, #1
 8010660:	2300      	movne	r3, #0
 8010662:	b2db      	uxtb	r3, r3
 8010664:	461a      	mov	r2, r3
 8010666:	79fb      	ldrb	r3, [r7, #7]
 8010668:	429a      	cmp	r2, r3
 801066a:	d0a0      	beq.n	80105ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801066c:	2300      	movs	r3, #0
}
 801066e:	4618      	mov	r0, r3
 8010670:	3710      	adds	r7, #16
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
	...

08010678 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b096      	sub	sp, #88	@ 0x58
 801067c:	af00      	add	r7, sp, #0
 801067e:	60f8      	str	r0, [r7, #12]
 8010680:	60b9      	str	r1, [r7, #8]
 8010682:	4613      	mov	r3, r2
 8010684:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	68ba      	ldr	r2, [r7, #8]
 801068a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	88fa      	ldrh	r2, [r7, #6]
 8010690:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2200      	movs	r2, #0
 8010698:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	2222      	movs	r2, #34	@ 0x22
 80106a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d02d      	beq.n	801070a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106b4:	4a40      	ldr	r2, [pc, #256]	@ (80107b8 <UART_Start_Receive_DMA+0x140>)
 80106b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106be:	4a3f      	ldr	r2, [pc, #252]	@ (80107bc <UART_Start_Receive_DMA+0x144>)
 80106c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106c8:	4a3d      	ldr	r2, [pc, #244]	@ (80107c0 <UART_Start_Receive_DMA+0x148>)
 80106ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106d2:	2200      	movs	r2, #0
 80106d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	3324      	adds	r3, #36	@ 0x24
 80106e2:	4619      	mov	r1, r3
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80106e8:	461a      	mov	r2, r3
 80106ea:	88fb      	ldrh	r3, [r7, #6]
 80106ec:	f7f8 f802 	bl	80086f4 <HAL_DMA_Start_IT>
 80106f0:	4603      	mov	r3, r0
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d009      	beq.n	801070a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	2210      	movs	r2, #16
 80106fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	2220      	movs	r2, #32
 8010702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010706:	2301      	movs	r3, #1
 8010708:	e051      	b.n	80107ae <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	691b      	ldr	r3, [r3, #16]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d018      	beq.n	8010744 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801071a:	e853 3f00 	ldrex	r3, [r3]
 801071e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010726:	657b      	str	r3, [r7, #84]	@ 0x54
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	461a      	mov	r2, r3
 801072e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010730:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010732:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010734:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010736:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010738:	e841 2300 	strex	r3, r2, [r1]
 801073c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801073e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010740:	2b00      	cmp	r3, #0
 8010742:	d1e6      	bne.n	8010712 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	3308      	adds	r3, #8
 801074a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801074c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801074e:	e853 3f00 	ldrex	r3, [r3]
 8010752:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010756:	f043 0301 	orr.w	r3, r3, #1
 801075a:	653b      	str	r3, [r7, #80]	@ 0x50
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	3308      	adds	r3, #8
 8010762:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010764:	637a      	str	r2, [r7, #52]	@ 0x34
 8010766:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010768:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801076a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801076c:	e841 2300 	strex	r3, r2, [r1]
 8010770:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010774:	2b00      	cmp	r3, #0
 8010776:	d1e5      	bne.n	8010744 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	3308      	adds	r3, #8
 801077e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	e853 3f00 	ldrex	r3, [r3]
 8010786:	613b      	str	r3, [r7, #16]
   return(result);
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801078e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	3308      	adds	r3, #8
 8010796:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010798:	623a      	str	r2, [r7, #32]
 801079a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801079c:	69f9      	ldr	r1, [r7, #28]
 801079e:	6a3a      	ldr	r2, [r7, #32]
 80107a0:	e841 2300 	strex	r3, r2, [r1]
 80107a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80107a6:	69bb      	ldr	r3, [r7, #24]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d1e5      	bne.n	8010778 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80107ac:	2300      	movs	r3, #0
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	3758      	adds	r7, #88	@ 0x58
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}
 80107b6:	bf00      	nop
 80107b8:	08010913 	.word	0x08010913
 80107bc:	08010a3f 	.word	0x08010a3f
 80107c0:	08010a7d 	.word	0x08010a7d

080107c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80107c4:	b480      	push	{r7}
 80107c6:	b08f      	sub	sp, #60	@ 0x3c
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107d2:	6a3b      	ldr	r3, [r7, #32]
 80107d4:	e853 3f00 	ldrex	r3, [r3]
 80107d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80107e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	461a      	mov	r2, r3
 80107e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80107ec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80107f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107f2:	e841 2300 	strex	r3, r2, [r1]
 80107f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80107f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d1e6      	bne.n	80107cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	3308      	adds	r3, #8
 8010804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	e853 3f00 	ldrex	r3, [r3]
 801080c:	60bb      	str	r3, [r7, #8]
   return(result);
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010814:	633b      	str	r3, [r7, #48]	@ 0x30
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	3308      	adds	r3, #8
 801081c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801081e:	61ba      	str	r2, [r7, #24]
 8010820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010822:	6979      	ldr	r1, [r7, #20]
 8010824:	69ba      	ldr	r2, [r7, #24]
 8010826:	e841 2300 	strex	r3, r2, [r1]
 801082a:	613b      	str	r3, [r7, #16]
   return(result);
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d1e5      	bne.n	80107fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2220      	movs	r2, #32
 8010836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801083a:	bf00      	nop
 801083c:	373c      	adds	r7, #60	@ 0x3c
 801083e:	46bd      	mov	sp, r7
 8010840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010844:	4770      	bx	lr

08010846 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010846:	b480      	push	{r7}
 8010848:	b095      	sub	sp, #84	@ 0x54
 801084a:	af00      	add	r7, sp, #0
 801084c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010856:	e853 3f00 	ldrex	r3, [r3]
 801085a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801085c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801085e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	461a      	mov	r2, r3
 801086a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801086c:	643b      	str	r3, [r7, #64]	@ 0x40
 801086e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010870:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010872:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010874:	e841 2300 	strex	r3, r2, [r1]
 8010878:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801087a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801087c:	2b00      	cmp	r3, #0
 801087e:	d1e6      	bne.n	801084e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	3308      	adds	r3, #8
 8010886:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010888:	6a3b      	ldr	r3, [r7, #32]
 801088a:	e853 3f00 	ldrex	r3, [r3]
 801088e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010890:	69fb      	ldr	r3, [r7, #28]
 8010892:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010896:	f023 0301 	bic.w	r3, r3, #1
 801089a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	3308      	adds	r3, #8
 80108a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80108a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80108a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80108aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80108ac:	e841 2300 	strex	r3, r2, [r1]
 80108b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80108b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d1e3      	bne.n	8010880 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108bc:	2b01      	cmp	r3, #1
 80108be:	d118      	bne.n	80108f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	e853 3f00 	ldrex	r3, [r3]
 80108cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	f023 0310 	bic.w	r3, r3, #16
 80108d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	461a      	mov	r2, r3
 80108dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108de:	61bb      	str	r3, [r7, #24]
 80108e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108e2:	6979      	ldr	r1, [r7, #20]
 80108e4:	69ba      	ldr	r2, [r7, #24]
 80108e6:	e841 2300 	strex	r3, r2, [r1]
 80108ea:	613b      	str	r3, [r7, #16]
   return(result);
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d1e6      	bne.n	80108c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2220      	movs	r2, #32
 80108f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2200      	movs	r2, #0
 80108fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2200      	movs	r2, #0
 8010904:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010906:	bf00      	nop
 8010908:	3754      	adds	r7, #84	@ 0x54
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr

08010912 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010912:	b580      	push	{r7, lr}
 8010914:	b09c      	sub	sp, #112	@ 0x70
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801091e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f003 0320 	and.w	r3, r3, #32
 801092a:	2b00      	cmp	r3, #0
 801092c:	d171      	bne.n	8010a12 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 801092e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010930:	2200      	movs	r2, #0
 8010932:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801093c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801093e:	e853 3f00 	ldrex	r3, [r3]
 8010942:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010946:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801094a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801094c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	461a      	mov	r2, r3
 8010952:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010954:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010956:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010958:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801095a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801095c:	e841 2300 	strex	r3, r2, [r1]
 8010960:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010964:	2b00      	cmp	r3, #0
 8010966:	d1e6      	bne.n	8010936 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	3308      	adds	r3, #8
 801096e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010972:	e853 3f00 	ldrex	r3, [r3]
 8010976:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801097a:	f023 0301 	bic.w	r3, r3, #1
 801097e:	667b      	str	r3, [r7, #100]	@ 0x64
 8010980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	3308      	adds	r3, #8
 8010986:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010988:	647a      	str	r2, [r7, #68]	@ 0x44
 801098a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801098c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801098e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010990:	e841 2300 	strex	r3, r2, [r1]
 8010994:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010998:	2b00      	cmp	r3, #0
 801099a:	d1e5      	bne.n	8010968 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801099c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	3308      	adds	r3, #8
 80109a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109a6:	e853 3f00 	ldrex	r3, [r3]
 80109aa:	623b      	str	r3, [r7, #32]
   return(result);
 80109ac:	6a3b      	ldr	r3, [r7, #32]
 80109ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80109b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80109b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	3308      	adds	r3, #8
 80109ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80109bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80109be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80109c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109c4:	e841 2300 	strex	r3, r2, [r1]
 80109c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80109ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d1e5      	bne.n	801099c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80109d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109d2:	2220      	movs	r2, #32
 80109d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109dc:	2b01      	cmp	r3, #1
 80109de:	d118      	bne.n	8010a12 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	e853 3f00 	ldrex	r3, [r3]
 80109ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	f023 0310 	bic.w	r3, r3, #16
 80109f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80109f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	461a      	mov	r2, r3
 80109fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80109fe:	61fb      	str	r3, [r7, #28]
 8010a00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a02:	69b9      	ldr	r1, [r7, #24]
 8010a04:	69fa      	ldr	r2, [r7, #28]
 8010a06:	e841 2300 	strex	r3, r2, [r1]
 8010a0a:	617b      	str	r3, [r7, #20]
   return(result);
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d1e6      	bne.n	80109e0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010a12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a14:	2200      	movs	r2, #0
 8010a16:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a1c:	2b01      	cmp	r3, #1
 8010a1e:	d107      	bne.n	8010a30 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010a26:	4619      	mov	r1, r3
 8010a28:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010a2a:	f7ff fa37 	bl	800fe9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010a2e:	e002      	b.n	8010a36 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8010a30:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010a32:	f7f6 f9c9 	bl	8006dc8 <HAL_UART_RxCpltCallback>
}
 8010a36:	bf00      	nop
 8010a38:	3770      	adds	r7, #112	@ 0x70
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}

08010a3e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010a3e:	b580      	push	{r7, lr}
 8010a40:	b084      	sub	sp, #16
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a4a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	2201      	movs	r2, #1
 8010a50:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a56:	2b01      	cmp	r3, #1
 8010a58:	d109      	bne.n	8010a6e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010a60:	085b      	lsrs	r3, r3, #1
 8010a62:	b29b      	uxth	r3, r3
 8010a64:	4619      	mov	r1, r3
 8010a66:	68f8      	ldr	r0, [r7, #12]
 8010a68:	f7ff fa18 	bl	800fe9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010a6c:	e002      	b.n	8010a74 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010a6e:	68f8      	ldr	r0, [r7, #12]
 8010a70:	f7ff fa00 	bl	800fe74 <HAL_UART_RxHalfCpltCallback>
}
 8010a74:	bf00      	nop
 8010a76:	3710      	adds	r7, #16
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b086      	sub	sp, #24
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a88:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a90:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a98:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010a9a:	697b      	ldr	r3, [r7, #20]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	689b      	ldr	r3, [r3, #8]
 8010aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010aa4:	2b80      	cmp	r3, #128	@ 0x80
 8010aa6:	d109      	bne.n	8010abc <UART_DMAError+0x40>
 8010aa8:	693b      	ldr	r3, [r7, #16]
 8010aaa:	2b21      	cmp	r3, #33	@ 0x21
 8010aac:	d106      	bne.n	8010abc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010ab6:	6978      	ldr	r0, [r7, #20]
 8010ab8:	f7ff fe84 	bl	80107c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	689b      	ldr	r3, [r3, #8]
 8010ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ac6:	2b40      	cmp	r3, #64	@ 0x40
 8010ac8:	d109      	bne.n	8010ade <UART_DMAError+0x62>
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	2b22      	cmp	r3, #34	@ 0x22
 8010ace:	d106      	bne.n	8010ade <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010ad8:	6978      	ldr	r0, [r7, #20]
 8010ada:	f7ff feb4 	bl	8010846 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ae4:	f043 0210 	orr.w	r2, r3, #16
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010aee:	6978      	ldr	r0, [r7, #20]
 8010af0:	f7ff f9ca 	bl	800fe88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010af4:	bf00      	nop
 8010af6:	3718      	adds	r7, #24
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}

08010afc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b084      	sub	sp, #16
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b12:	68f8      	ldr	r0, [r7, #12]
 8010b14:	f7ff f9b8 	bl	800fe88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b18:	bf00      	nop
 8010b1a:	3710      	adds	r7, #16
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}

08010b20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b088      	sub	sp, #32
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	e853 3f00 	ldrex	r3, [r3]
 8010b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010b3c:	61fb      	str	r3, [r7, #28]
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	461a      	mov	r2, r3
 8010b44:	69fb      	ldr	r3, [r7, #28]
 8010b46:	61bb      	str	r3, [r7, #24]
 8010b48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b4a:	6979      	ldr	r1, [r7, #20]
 8010b4c:	69ba      	ldr	r2, [r7, #24]
 8010b4e:	e841 2300 	strex	r3, r2, [r1]
 8010b52:	613b      	str	r3, [r7, #16]
   return(result);
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d1e6      	bne.n	8010b28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2220      	movs	r2, #32
 8010b5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2200      	movs	r2, #0
 8010b66:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f7ff f979 	bl	800fe60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b6e:	bf00      	nop
 8010b70:	3720      	adds	r7, #32
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}

08010b76 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010b76:	b480      	push	{r7}
 8010b78:	b083      	sub	sp, #12
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010b7e:	bf00      	nop
 8010b80:	370c      	adds	r7, #12
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr

08010b8a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010b8a:	b480      	push	{r7}
 8010b8c:	b083      	sub	sp, #12
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010b92:	bf00      	nop
 8010b94:	370c      	adds	r7, #12
 8010b96:	46bd      	mov	sp, r7
 8010b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9c:	4770      	bx	lr

08010b9e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010b9e:	b480      	push	{r7}
 8010ba0:	b083      	sub	sp, #12
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010ba6:	bf00      	nop
 8010ba8:	370c      	adds	r7, #12
 8010baa:	46bd      	mov	sp, r7
 8010bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb0:	4770      	bx	lr

08010bb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010bb2:	b480      	push	{r7}
 8010bb4:	b085      	sub	sp, #20
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010bc0:	2b01      	cmp	r3, #1
 8010bc2:	d101      	bne.n	8010bc8 <HAL_UARTEx_DisableFifoMode+0x16>
 8010bc4:	2302      	movs	r3, #2
 8010bc6:	e027      	b.n	8010c18 <HAL_UARTEx_DisableFifoMode+0x66>
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2201      	movs	r2, #1
 8010bcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2224      	movs	r2, #36	@ 0x24
 8010bd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	681a      	ldr	r2, [r3, #0]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	f022 0201 	bic.w	r2, r2, #1
 8010bee:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010bf6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	68fa      	ldr	r2, [r7, #12]
 8010c04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2220      	movs	r2, #32
 8010c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	2200      	movs	r2, #0
 8010c12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010c16:	2300      	movs	r3, #0
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3714      	adds	r7, #20
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c22:	4770      	bx	lr

08010c24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b084      	sub	sp, #16
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
 8010c2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010c34:	2b01      	cmp	r3, #1
 8010c36:	d101      	bne.n	8010c3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010c38:	2302      	movs	r3, #2
 8010c3a:	e02d      	b.n	8010c98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2201      	movs	r2, #1
 8010c40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2224      	movs	r2, #36	@ 0x24
 8010c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	681a      	ldr	r2, [r3, #0]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f022 0201 	bic.w	r2, r2, #1
 8010c62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	689b      	ldr	r3, [r3, #8]
 8010c6a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	683a      	ldr	r2, [r7, #0]
 8010c74:	430a      	orrs	r2, r1
 8010c76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f000 f84f 	bl	8010d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	68fa      	ldr	r2, [r7, #12]
 8010c84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	2220      	movs	r2, #32
 8010c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2200      	movs	r2, #0
 8010c92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010c96:	2300      	movs	r3, #0
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3710      	adds	r7, #16
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010cb0:	2b01      	cmp	r3, #1
 8010cb2:	d101      	bne.n	8010cb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010cb4:	2302      	movs	r3, #2
 8010cb6:	e02d      	b.n	8010d14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2201      	movs	r2, #1
 8010cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2224      	movs	r2, #36	@ 0x24
 8010cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	681a      	ldr	r2, [r3, #0]
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	f022 0201 	bic.w	r2, r2, #1
 8010cde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	689b      	ldr	r3, [r3, #8]
 8010ce6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	683a      	ldr	r2, [r7, #0]
 8010cf0:	430a      	orrs	r2, r1
 8010cf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f000 f811 	bl	8010d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	68fa      	ldr	r2, [r7, #12]
 8010d00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2220      	movs	r2, #32
 8010d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010d12:	2300      	movs	r3, #0
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3710      	adds	r7, #16
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}

08010d1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b085      	sub	sp, #20
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d108      	bne.n	8010d3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2201      	movs	r2, #1
 8010d30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2201      	movs	r2, #1
 8010d38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010d3c:	e031      	b.n	8010da2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010d3e:	2308      	movs	r3, #8
 8010d40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010d42:	2308      	movs	r3, #8
 8010d44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	689b      	ldr	r3, [r3, #8]
 8010d4c:	0e5b      	lsrs	r3, r3, #25
 8010d4e:	b2db      	uxtb	r3, r3
 8010d50:	f003 0307 	and.w	r3, r3, #7
 8010d54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	689b      	ldr	r3, [r3, #8]
 8010d5c:	0f5b      	lsrs	r3, r3, #29
 8010d5e:	b2db      	uxtb	r3, r3
 8010d60:	f003 0307 	and.w	r3, r3, #7
 8010d64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d66:	7bbb      	ldrb	r3, [r7, #14]
 8010d68:	7b3a      	ldrb	r2, [r7, #12]
 8010d6a:	4911      	ldr	r1, [pc, #68]	@ (8010db0 <UARTEx_SetNbDataToProcess+0x94>)
 8010d6c:	5c8a      	ldrb	r2, [r1, r2]
 8010d6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010d72:	7b3a      	ldrb	r2, [r7, #12]
 8010d74:	490f      	ldr	r1, [pc, #60]	@ (8010db4 <UARTEx_SetNbDataToProcess+0x98>)
 8010d76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d78:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d7c:	b29a      	uxth	r2, r3
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d84:	7bfb      	ldrb	r3, [r7, #15]
 8010d86:	7b7a      	ldrb	r2, [r7, #13]
 8010d88:	4909      	ldr	r1, [pc, #36]	@ (8010db0 <UARTEx_SetNbDataToProcess+0x94>)
 8010d8a:	5c8a      	ldrb	r2, [r1, r2]
 8010d8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010d90:	7b7a      	ldrb	r2, [r7, #13]
 8010d92:	4908      	ldr	r1, [pc, #32]	@ (8010db4 <UARTEx_SetNbDataToProcess+0x98>)
 8010d94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d96:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d9a:	b29a      	uxth	r2, r3
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010da2:	bf00      	nop
 8010da4:	3714      	adds	r7, #20
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr
 8010dae:	bf00      	nop
 8010db0:	08021984 	.word	0x08021984
 8010db4:	0802198c 	.word	0x0802198c

08010db8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b085      	sub	sp, #20
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010dc8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8010dcc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	b29a      	uxth	r2, r3
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8010dd8:	2300      	movs	r3, #0
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3714      	adds	r7, #20
 8010dde:	46bd      	mov	sp, r7
 8010de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de4:	4770      	bx	lr

08010de6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8010de6:	b480      	push	{r7}
 8010de8:	b085      	sub	sp, #20
 8010dea:	af00      	add	r7, sp, #0
 8010dec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010dee:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8010df2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8010dfa:	b29a      	uxth	r2, r3
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	43db      	mvns	r3, r3
 8010e02:	b29b      	uxth	r3, r3
 8010e04:	4013      	ands	r3, r2
 8010e06:	b29a      	uxth	r2, r3
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8010e0e:	2300      	movs	r3, #0
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3714      	adds	r7, #20
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr

08010e1c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b085      	sub	sp, #20
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	60f8      	str	r0, [r7, #12]
 8010e24:	1d3b      	adds	r3, r7, #4
 8010e26:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	2201      	movs	r2, #1
 8010e2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2200      	movs	r2, #0
 8010e36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2200      	movs	r2, #0
 8010e46:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8010e4a:	2300      	movs	r3, #0
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3714      	adds	r7, #20
 8010e50:	46bd      	mov	sp, r7
 8010e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e56:	4770      	bx	lr

08010e58 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b0a7      	sub	sp, #156	@ 0x9c
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8010e62:	2300      	movs	r3, #0
 8010e64:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8010e68:	687a      	ldr	r2, [r7, #4]
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	781b      	ldrb	r3, [r3, #0]
 8010e6e:	009b      	lsls	r3, r3, #2
 8010e70:	4413      	add	r3, r2
 8010e72:	881b      	ldrh	r3, [r3, #0]
 8010e74:	b29b      	uxth	r3, r3
 8010e76:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8010e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010e7e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	78db      	ldrb	r3, [r3, #3]
 8010e86:	2b03      	cmp	r3, #3
 8010e88:	d81f      	bhi.n	8010eca <USB_ActivateEndpoint+0x72>
 8010e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8010e90 <USB_ActivateEndpoint+0x38>)
 8010e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e90:	08010ea1 	.word	0x08010ea1
 8010e94:	08010ebd 	.word	0x08010ebd
 8010e98:	08010ed3 	.word	0x08010ed3
 8010e9c:	08010eaf 	.word	0x08010eaf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8010ea0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010ea4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010ea8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8010eac:	e012      	b.n	8010ed4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8010eae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010eb2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8010eb6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8010eba:	e00b      	b.n	8010ed4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8010ebc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010ec0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8010ec4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8010ec8:	e004      	b.n	8010ed4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8010eca:	2301      	movs	r3, #1
 8010ecc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8010ed0:	e000      	b.n	8010ed4 <USB_ActivateEndpoint+0x7c>
      break;
 8010ed2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8010ed4:	687a      	ldr	r2, [r7, #4]
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	781b      	ldrb	r3, [r3, #0]
 8010eda:	009b      	lsls	r3, r3, #2
 8010edc:	441a      	add	r2, r3
 8010ede:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010ee2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010ee6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8010ef6:	687a      	ldr	r2, [r7, #4]
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	781b      	ldrb	r3, [r3, #0]
 8010efc:	009b      	lsls	r3, r3, #2
 8010efe:	4413      	add	r3, r2
 8010f00:	881b      	ldrh	r3, [r3, #0]
 8010f02:	b29b      	uxth	r3, r3
 8010f04:	b21b      	sxth	r3, r3
 8010f06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010f0e:	b21a      	sxth	r2, r3
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	b21b      	sxth	r3, r3
 8010f16:	4313      	orrs	r3, r2
 8010f18:	b21b      	sxth	r3, r3
 8010f1a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8010f1e:	687a      	ldr	r2, [r7, #4]
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	781b      	ldrb	r3, [r3, #0]
 8010f24:	009b      	lsls	r3, r3, #2
 8010f26:	441a      	add	r2, r3
 8010f28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8010f2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010f30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010f34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	7b1b      	ldrb	r3, [r3, #12]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	f040 8180 	bne.w	801124a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	785b      	ldrb	r3, [r3, #1]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	f000 8084 	beq.w	801105c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	61bb      	str	r3, [r7, #24]
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010f5e:	b29b      	uxth	r3, r3
 8010f60:	461a      	mov	r2, r3
 8010f62:	69bb      	ldr	r3, [r7, #24]
 8010f64:	4413      	add	r3, r2
 8010f66:	61bb      	str	r3, [r7, #24]
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	781b      	ldrb	r3, [r3, #0]
 8010f6c:	00da      	lsls	r2, r3, #3
 8010f6e:	69bb      	ldr	r3, [r7, #24]
 8010f70:	4413      	add	r3, r2
 8010f72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010f76:	617b      	str	r3, [r7, #20]
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	88db      	ldrh	r3, [r3, #6]
 8010f7c:	085b      	lsrs	r3, r3, #1
 8010f7e:	b29b      	uxth	r3, r3
 8010f80:	005b      	lsls	r3, r3, #1
 8010f82:	b29a      	uxth	r2, r3
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	781b      	ldrb	r3, [r3, #0]
 8010f8e:	009b      	lsls	r3, r3, #2
 8010f90:	4413      	add	r3, r2
 8010f92:	881b      	ldrh	r3, [r3, #0]
 8010f94:	827b      	strh	r3, [r7, #18]
 8010f96:	8a7b      	ldrh	r3, [r7, #18]
 8010f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d01b      	beq.n	8010fd8 <USB_ActivateEndpoint+0x180>
 8010fa0:	687a      	ldr	r2, [r7, #4]
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	781b      	ldrb	r3, [r3, #0]
 8010fa6:	009b      	lsls	r3, r3, #2
 8010fa8:	4413      	add	r3, r2
 8010faa:	881b      	ldrh	r3, [r3, #0]
 8010fac:	b29b      	uxth	r3, r3
 8010fae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010fb6:	823b      	strh	r3, [r7, #16]
 8010fb8:	687a      	ldr	r2, [r7, #4]
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	781b      	ldrb	r3, [r3, #0]
 8010fbe:	009b      	lsls	r3, r3, #2
 8010fc0:	441a      	add	r2, r3
 8010fc2:	8a3b      	ldrh	r3, [r7, #16]
 8010fc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010fc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010fcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010fd0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010fd4:	b29b      	uxth	r3, r3
 8010fd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	78db      	ldrb	r3, [r3, #3]
 8010fdc:	2b01      	cmp	r3, #1
 8010fde:	d020      	beq.n	8011022 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010fe0:	687a      	ldr	r2, [r7, #4]
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	781b      	ldrb	r3, [r3, #0]
 8010fe6:	009b      	lsls	r3, r3, #2
 8010fe8:	4413      	add	r3, r2
 8010fea:	881b      	ldrh	r3, [r3, #0]
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010ff2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010ff6:	81bb      	strh	r3, [r7, #12]
 8010ff8:	89bb      	ldrh	r3, [r7, #12]
 8010ffa:	f083 0320 	eor.w	r3, r3, #32
 8010ffe:	81bb      	strh	r3, [r7, #12]
 8011000:	687a      	ldr	r2, [r7, #4]
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	781b      	ldrb	r3, [r3, #0]
 8011006:	009b      	lsls	r3, r3, #2
 8011008:	441a      	add	r2, r3
 801100a:	89bb      	ldrh	r3, [r7, #12]
 801100c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801101c:	b29b      	uxth	r3, r3
 801101e:	8013      	strh	r3, [r2, #0]
 8011020:	e3f9      	b.n	8011816 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011022:	687a      	ldr	r2, [r7, #4]
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	781b      	ldrb	r3, [r3, #0]
 8011028:	009b      	lsls	r3, r3, #2
 801102a:	4413      	add	r3, r2
 801102c:	881b      	ldrh	r3, [r3, #0]
 801102e:	b29b      	uxth	r3, r3
 8011030:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011038:	81fb      	strh	r3, [r7, #14]
 801103a:	687a      	ldr	r2, [r7, #4]
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	781b      	ldrb	r3, [r3, #0]
 8011040:	009b      	lsls	r3, r3, #2
 8011042:	441a      	add	r2, r3
 8011044:	89fb      	ldrh	r3, [r7, #14]
 8011046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801104a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801104e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011056:	b29b      	uxth	r3, r3
 8011058:	8013      	strh	r3, [r2, #0]
 801105a:	e3dc      	b.n	8011816 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011066:	b29b      	uxth	r3, r3
 8011068:	461a      	mov	r2, r3
 801106a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801106c:	4413      	add	r3, r2
 801106e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	781b      	ldrb	r3, [r3, #0]
 8011074:	00da      	lsls	r2, r3, #3
 8011076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011078:	4413      	add	r3, r2
 801107a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801107e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	88db      	ldrh	r3, [r3, #6]
 8011084:	085b      	lsrs	r3, r3, #1
 8011086:	b29b      	uxth	r3, r3
 8011088:	005b      	lsls	r3, r3, #1
 801108a:	b29a      	uxth	r2, r3
 801108c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801108e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801109a:	b29b      	uxth	r3, r3
 801109c:	461a      	mov	r2, r3
 801109e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110a0:	4413      	add	r3, r2
 80110a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	00da      	lsls	r2, r3, #3
 80110aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110ac:	4413      	add	r3, r2
 80110ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80110b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80110b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110b6:	881b      	ldrh	r3, [r3, #0]
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80110be:	b29a      	uxth	r2, r3
 80110c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110c2:	801a      	strh	r2, [r3, #0]
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	691b      	ldr	r3, [r3, #16]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d10a      	bne.n	80110e2 <USB_ActivateEndpoint+0x28a>
 80110cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ce:	881b      	ldrh	r3, [r3, #0]
 80110d0:	b29b      	uxth	r3, r3
 80110d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80110d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80110da:	b29a      	uxth	r2, r3
 80110dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110de:	801a      	strh	r2, [r3, #0]
 80110e0:	e041      	b.n	8011166 <USB_ActivateEndpoint+0x30e>
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	691b      	ldr	r3, [r3, #16]
 80110e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80110e8:	d81c      	bhi.n	8011124 <USB_ActivateEndpoint+0x2cc>
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	691b      	ldr	r3, [r3, #16]
 80110ee:	085b      	lsrs	r3, r3, #1
 80110f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	691b      	ldr	r3, [r3, #16]
 80110f8:	f003 0301 	and.w	r3, r3, #1
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d004      	beq.n	801110a <USB_ActivateEndpoint+0x2b2>
 8011100:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011104:	3301      	adds	r3, #1
 8011106:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801110c:	881b      	ldrh	r3, [r3, #0]
 801110e:	b29a      	uxth	r2, r3
 8011110:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011114:	b29b      	uxth	r3, r3
 8011116:	029b      	lsls	r3, r3, #10
 8011118:	b29b      	uxth	r3, r3
 801111a:	4313      	orrs	r3, r2
 801111c:	b29a      	uxth	r2, r3
 801111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011120:	801a      	strh	r2, [r3, #0]
 8011122:	e020      	b.n	8011166 <USB_ActivateEndpoint+0x30e>
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	691b      	ldr	r3, [r3, #16]
 8011128:	095b      	lsrs	r3, r3, #5
 801112a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	691b      	ldr	r3, [r3, #16]
 8011132:	f003 031f 	and.w	r3, r3, #31
 8011136:	2b00      	cmp	r3, #0
 8011138:	d104      	bne.n	8011144 <USB_ActivateEndpoint+0x2ec>
 801113a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801113e:	3b01      	subs	r3, #1
 8011140:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011146:	881b      	ldrh	r3, [r3, #0]
 8011148:	b29a      	uxth	r2, r3
 801114a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801114e:	b29b      	uxth	r3, r3
 8011150:	029b      	lsls	r3, r3, #10
 8011152:	b29b      	uxth	r3, r3
 8011154:	4313      	orrs	r3, r2
 8011156:	b29b      	uxth	r3, r3
 8011158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801115c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011160:	b29a      	uxth	r2, r3
 8011162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011164:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011166:	687a      	ldr	r2, [r7, #4]
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	781b      	ldrb	r3, [r3, #0]
 801116c:	009b      	lsls	r3, r3, #2
 801116e:	4413      	add	r3, r2
 8011170:	881b      	ldrh	r3, [r3, #0]
 8011172:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011174:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801117a:	2b00      	cmp	r3, #0
 801117c:	d01b      	beq.n	80111b6 <USB_ActivateEndpoint+0x35e>
 801117e:	687a      	ldr	r2, [r7, #4]
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	781b      	ldrb	r3, [r3, #0]
 8011184:	009b      	lsls	r3, r3, #2
 8011186:	4413      	add	r3, r2
 8011188:	881b      	ldrh	r3, [r3, #0]
 801118a:	b29b      	uxth	r3, r3
 801118c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011190:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011194:	843b      	strh	r3, [r7, #32]
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	009b      	lsls	r3, r3, #2
 801119e:	441a      	add	r2, r3
 80111a0:	8c3b      	ldrh	r3, [r7, #32]
 80111a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80111a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80111aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80111ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	781b      	ldrb	r3, [r3, #0]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d124      	bne.n	8011208 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80111be:	687a      	ldr	r2, [r7, #4]
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	009b      	lsls	r3, r3, #2
 80111c6:	4413      	add	r3, r2
 80111c8:	881b      	ldrh	r3, [r3, #0]
 80111ca:	b29b      	uxth	r3, r3
 80111cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80111d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80111d4:	83bb      	strh	r3, [r7, #28]
 80111d6:	8bbb      	ldrh	r3, [r7, #28]
 80111d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80111dc:	83bb      	strh	r3, [r7, #28]
 80111de:	8bbb      	ldrh	r3, [r7, #28]
 80111e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80111e4:	83bb      	strh	r3, [r7, #28]
 80111e6:	687a      	ldr	r2, [r7, #4]
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	781b      	ldrb	r3, [r3, #0]
 80111ec:	009b      	lsls	r3, r3, #2
 80111ee:	441a      	add	r2, r3
 80111f0:	8bbb      	ldrh	r3, [r7, #28]
 80111f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80111f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80111fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80111fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011202:	b29b      	uxth	r3, r3
 8011204:	8013      	strh	r3, [r2, #0]
 8011206:	e306      	b.n	8011816 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8011208:	687a      	ldr	r2, [r7, #4]
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	781b      	ldrb	r3, [r3, #0]
 801120e:	009b      	lsls	r3, r3, #2
 8011210:	4413      	add	r3, r2
 8011212:	881b      	ldrh	r3, [r3, #0]
 8011214:	b29b      	uxth	r3, r3
 8011216:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801121a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801121e:	83fb      	strh	r3, [r7, #30]
 8011220:	8bfb      	ldrh	r3, [r7, #30]
 8011222:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011226:	83fb      	strh	r3, [r7, #30]
 8011228:	687a      	ldr	r2, [r7, #4]
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	009b      	lsls	r3, r3, #2
 8011230:	441a      	add	r2, r3
 8011232:	8bfb      	ldrh	r3, [r7, #30]
 8011234:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011238:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801123c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011244:	b29b      	uxth	r3, r3
 8011246:	8013      	strh	r3, [r2, #0]
 8011248:	e2e5      	b.n	8011816 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	78db      	ldrb	r3, [r3, #3]
 801124e:	2b02      	cmp	r3, #2
 8011250:	d11e      	bne.n	8011290 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011252:	687a      	ldr	r2, [r7, #4]
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	009b      	lsls	r3, r3, #2
 801125a:	4413      	add	r3, r2
 801125c:	881b      	ldrh	r3, [r3, #0]
 801125e:	b29b      	uxth	r3, r3
 8011260:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011268:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 801126c:	687a      	ldr	r2, [r7, #4]
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	009b      	lsls	r3, r3, #2
 8011274:	441a      	add	r2, r3
 8011276:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 801127a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801127e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011282:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801128a:	b29b      	uxth	r3, r3
 801128c:	8013      	strh	r3, [r2, #0]
 801128e:	e01d      	b.n	80112cc <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	781b      	ldrb	r3, [r3, #0]
 8011296:	009b      	lsls	r3, r3, #2
 8011298:	4413      	add	r3, r2
 801129a:	881b      	ldrh	r3, [r3, #0]
 801129c:	b29b      	uxth	r3, r3
 801129e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80112a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80112a6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80112aa:	687a      	ldr	r2, [r7, #4]
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	009b      	lsls	r3, r3, #2
 80112b2:	441a      	add	r2, r3
 80112b4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80112b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80112bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80112c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80112c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112c8:	b29b      	uxth	r3, r3
 80112ca:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80112d6:	b29b      	uxth	r3, r3
 80112d8:	461a      	mov	r2, r3
 80112da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80112dc:	4413      	add	r3, r2
 80112de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	781b      	ldrb	r3, [r3, #0]
 80112e4:	00da      	lsls	r2, r3, #3
 80112e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80112e8:	4413      	add	r3, r2
 80112ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80112ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	891b      	ldrh	r3, [r3, #8]
 80112f4:	085b      	lsrs	r3, r3, #1
 80112f6:	b29b      	uxth	r3, r3
 80112f8:	005b      	lsls	r3, r3, #1
 80112fa:	b29a      	uxth	r2, r3
 80112fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112fe:	801a      	strh	r2, [r3, #0]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	677b      	str	r3, [r7, #116]	@ 0x74
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801130a:	b29b      	uxth	r3, r3
 801130c:	461a      	mov	r2, r3
 801130e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011310:	4413      	add	r3, r2
 8011312:	677b      	str	r3, [r7, #116]	@ 0x74
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	00da      	lsls	r2, r3, #3
 801131a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801131c:	4413      	add	r3, r2
 801131e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8011322:	673b      	str	r3, [r7, #112]	@ 0x70
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	895b      	ldrh	r3, [r3, #10]
 8011328:	085b      	lsrs	r3, r3, #1
 801132a:	b29b      	uxth	r3, r3
 801132c:	005b      	lsls	r3, r3, #1
 801132e:	b29a      	uxth	r2, r3
 8011330:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011332:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	785b      	ldrb	r3, [r3, #1]
 8011338:	2b00      	cmp	r3, #0
 801133a:	f040 81af 	bne.w	801169c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801133e:	687a      	ldr	r2, [r7, #4]
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	781b      	ldrb	r3, [r3, #0]
 8011344:	009b      	lsls	r3, r3, #2
 8011346:	4413      	add	r3, r2
 8011348:	881b      	ldrh	r3, [r3, #0]
 801134a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 801134e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8011352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011356:	2b00      	cmp	r3, #0
 8011358:	d01d      	beq.n	8011396 <USB_ActivateEndpoint+0x53e>
 801135a:	687a      	ldr	r2, [r7, #4]
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	781b      	ldrb	r3, [r3, #0]
 8011360:	009b      	lsls	r3, r3, #2
 8011362:	4413      	add	r3, r2
 8011364:	881b      	ldrh	r3, [r3, #0]
 8011366:	b29b      	uxth	r3, r3
 8011368:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801136c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011370:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8011374:	687a      	ldr	r2, [r7, #4]
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	009b      	lsls	r3, r3, #2
 801137c:	441a      	add	r2, r3
 801137e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8011382:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801138a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801138e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011392:	b29b      	uxth	r3, r3
 8011394:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011396:	687a      	ldr	r2, [r7, #4]
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	009b      	lsls	r3, r3, #2
 801139e:	4413      	add	r3, r2
 80113a0:	881b      	ldrh	r3, [r3, #0]
 80113a2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80113a6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80113aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d01d      	beq.n	80113ee <USB_ActivateEndpoint+0x596>
 80113b2:	687a      	ldr	r2, [r7, #4]
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	781b      	ldrb	r3, [r3, #0]
 80113b8:	009b      	lsls	r3, r3, #2
 80113ba:	4413      	add	r3, r2
 80113bc:	881b      	ldrh	r3, [r3, #0]
 80113be:	b29b      	uxth	r3, r3
 80113c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80113c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80113c8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80113cc:	687a      	ldr	r2, [r7, #4]
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	009b      	lsls	r3, r3, #2
 80113d4:	441a      	add	r2, r3
 80113d6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80113da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80113de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80113e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80113e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80113ea:	b29b      	uxth	r3, r3
 80113ec:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	785b      	ldrb	r3, [r3, #1]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d16b      	bne.n	80114ce <USB_ActivateEndpoint+0x676>
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011400:	b29b      	uxth	r3, r3
 8011402:	461a      	mov	r2, r3
 8011404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011406:	4413      	add	r3, r2
 8011408:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	781b      	ldrb	r3, [r3, #0]
 801140e:	00da      	lsls	r2, r3, #3
 8011410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011412:	4413      	add	r3, r2
 8011414:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011418:	64bb      	str	r3, [r7, #72]	@ 0x48
 801141a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801141c:	881b      	ldrh	r3, [r3, #0]
 801141e:	b29b      	uxth	r3, r3
 8011420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011424:	b29a      	uxth	r2, r3
 8011426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011428:	801a      	strh	r2, [r3, #0]
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	691b      	ldr	r3, [r3, #16]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d10a      	bne.n	8011448 <USB_ActivateEndpoint+0x5f0>
 8011432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	b29b      	uxth	r3, r3
 8011438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801143c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011440:	b29a      	uxth	r2, r3
 8011442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011444:	801a      	strh	r2, [r3, #0]
 8011446:	e05d      	b.n	8011504 <USB_ActivateEndpoint+0x6ac>
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	691b      	ldr	r3, [r3, #16]
 801144c:	2b3e      	cmp	r3, #62	@ 0x3e
 801144e:	d81c      	bhi.n	801148a <USB_ActivateEndpoint+0x632>
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	691b      	ldr	r3, [r3, #16]
 8011454:	085b      	lsrs	r3, r3, #1
 8011456:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	691b      	ldr	r3, [r3, #16]
 801145e:	f003 0301 	and.w	r3, r3, #1
 8011462:	2b00      	cmp	r3, #0
 8011464:	d004      	beq.n	8011470 <USB_ActivateEndpoint+0x618>
 8011466:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801146a:	3301      	adds	r3, #1
 801146c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011470:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011472:	881b      	ldrh	r3, [r3, #0]
 8011474:	b29a      	uxth	r2, r3
 8011476:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801147a:	b29b      	uxth	r3, r3
 801147c:	029b      	lsls	r3, r3, #10
 801147e:	b29b      	uxth	r3, r3
 8011480:	4313      	orrs	r3, r2
 8011482:	b29a      	uxth	r2, r3
 8011484:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011486:	801a      	strh	r2, [r3, #0]
 8011488:	e03c      	b.n	8011504 <USB_ActivateEndpoint+0x6ac>
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	691b      	ldr	r3, [r3, #16]
 801148e:	095b      	lsrs	r3, r3, #5
 8011490:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	691b      	ldr	r3, [r3, #16]
 8011498:	f003 031f 	and.w	r3, r3, #31
 801149c:	2b00      	cmp	r3, #0
 801149e:	d104      	bne.n	80114aa <USB_ActivateEndpoint+0x652>
 80114a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80114a4:	3b01      	subs	r3, #1
 80114a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80114aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80114ac:	881b      	ldrh	r3, [r3, #0]
 80114ae:	b29a      	uxth	r2, r3
 80114b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	029b      	lsls	r3, r3, #10
 80114b8:	b29b      	uxth	r3, r3
 80114ba:	4313      	orrs	r3, r2
 80114bc:	b29b      	uxth	r3, r3
 80114be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114c6:	b29a      	uxth	r2, r3
 80114c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80114ca:	801a      	strh	r2, [r3, #0]
 80114cc:	e01a      	b.n	8011504 <USB_ActivateEndpoint+0x6ac>
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	785b      	ldrb	r3, [r3, #1]
 80114d2:	2b01      	cmp	r3, #1
 80114d4:	d116      	bne.n	8011504 <USB_ActivateEndpoint+0x6ac>
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80114e0:	b29b      	uxth	r3, r3
 80114e2:	461a      	mov	r2, r3
 80114e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80114e6:	4413      	add	r3, r2
 80114e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	781b      	ldrb	r3, [r3, #0]
 80114ee:	00da      	lsls	r2, r3, #3
 80114f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80114f2:	4413      	add	r3, r2
 80114f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80114f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	691b      	ldr	r3, [r3, #16]
 80114fe:	b29a      	uxth	r2, r3
 8011500:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011502:	801a      	strh	r2, [r3, #0]
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	647b      	str	r3, [r7, #68]	@ 0x44
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	785b      	ldrb	r3, [r3, #1]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d16b      	bne.n	80115e8 <USB_ActivateEndpoint+0x790>
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801151a:	b29b      	uxth	r3, r3
 801151c:	461a      	mov	r2, r3
 801151e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011520:	4413      	add	r3, r2
 8011522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011524:	683b      	ldr	r3, [r7, #0]
 8011526:	781b      	ldrb	r3, [r3, #0]
 8011528:	00da      	lsls	r2, r3, #3
 801152a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801152c:	4413      	add	r3, r2
 801152e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011532:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011536:	881b      	ldrh	r3, [r3, #0]
 8011538:	b29b      	uxth	r3, r3
 801153a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801153e:	b29a      	uxth	r2, r3
 8011540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011542:	801a      	strh	r2, [r3, #0]
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	691b      	ldr	r3, [r3, #16]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d10a      	bne.n	8011562 <USB_ActivateEndpoint+0x70a>
 801154c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801154e:	881b      	ldrh	r3, [r3, #0]
 8011550:	b29b      	uxth	r3, r3
 8011552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801155a:	b29a      	uxth	r2, r3
 801155c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801155e:	801a      	strh	r2, [r3, #0]
 8011560:	e05b      	b.n	801161a <USB_ActivateEndpoint+0x7c2>
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	691b      	ldr	r3, [r3, #16]
 8011566:	2b3e      	cmp	r3, #62	@ 0x3e
 8011568:	d81c      	bhi.n	80115a4 <USB_ActivateEndpoint+0x74c>
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	691b      	ldr	r3, [r3, #16]
 801156e:	085b      	lsrs	r3, r3, #1
 8011570:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	691b      	ldr	r3, [r3, #16]
 8011578:	f003 0301 	and.w	r3, r3, #1
 801157c:	2b00      	cmp	r3, #0
 801157e:	d004      	beq.n	801158a <USB_ActivateEndpoint+0x732>
 8011580:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011584:	3301      	adds	r3, #1
 8011586:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801158a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801158c:	881b      	ldrh	r3, [r3, #0]
 801158e:	b29a      	uxth	r2, r3
 8011590:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011594:	b29b      	uxth	r3, r3
 8011596:	029b      	lsls	r3, r3, #10
 8011598:	b29b      	uxth	r3, r3
 801159a:	4313      	orrs	r3, r2
 801159c:	b29a      	uxth	r2, r3
 801159e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115a0:	801a      	strh	r2, [r3, #0]
 80115a2:	e03a      	b.n	801161a <USB_ActivateEndpoint+0x7c2>
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	691b      	ldr	r3, [r3, #16]
 80115a8:	095b      	lsrs	r3, r3, #5
 80115aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	691b      	ldr	r3, [r3, #16]
 80115b2:	f003 031f 	and.w	r3, r3, #31
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d104      	bne.n	80115c4 <USB_ActivateEndpoint+0x76c>
 80115ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80115be:	3b01      	subs	r3, #1
 80115c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80115c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115c6:	881b      	ldrh	r3, [r3, #0]
 80115c8:	b29a      	uxth	r2, r3
 80115ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80115ce:	b29b      	uxth	r3, r3
 80115d0:	029b      	lsls	r3, r3, #10
 80115d2:	b29b      	uxth	r3, r3
 80115d4:	4313      	orrs	r3, r2
 80115d6:	b29b      	uxth	r3, r3
 80115d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80115e0:	b29a      	uxth	r2, r3
 80115e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115e4:	801a      	strh	r2, [r3, #0]
 80115e6:	e018      	b.n	801161a <USB_ActivateEndpoint+0x7c2>
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	785b      	ldrb	r3, [r3, #1]
 80115ec:	2b01      	cmp	r3, #1
 80115ee:	d114      	bne.n	801161a <USB_ActivateEndpoint+0x7c2>
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	461a      	mov	r2, r3
 80115fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115fc:	4413      	add	r3, r2
 80115fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	781b      	ldrb	r3, [r3, #0]
 8011604:	00da      	lsls	r2, r3, #3
 8011606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011608:	4413      	add	r3, r2
 801160a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801160e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	691b      	ldr	r3, [r3, #16]
 8011614:	b29a      	uxth	r2, r3
 8011616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011618:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801161a:	687a      	ldr	r2, [r7, #4]
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	781b      	ldrb	r3, [r3, #0]
 8011620:	009b      	lsls	r3, r3, #2
 8011622:	4413      	add	r3, r2
 8011624:	881b      	ldrh	r3, [r3, #0]
 8011626:	b29b      	uxth	r3, r3
 8011628:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801162c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011630:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011632:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011634:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011638:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801163a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801163c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011640:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011642:	687a      	ldr	r2, [r7, #4]
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	009b      	lsls	r3, r3, #2
 801164a:	441a      	add	r2, r3
 801164c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801164e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801165a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801165e:	b29b      	uxth	r3, r3
 8011660:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011662:	687a      	ldr	r2, [r7, #4]
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	009b      	lsls	r3, r3, #2
 801166a:	4413      	add	r3, r2
 801166c:	881b      	ldrh	r3, [r3, #0]
 801166e:	b29b      	uxth	r3, r3
 8011670:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011678:	86bb      	strh	r3, [r7, #52]	@ 0x34
 801167a:	687a      	ldr	r2, [r7, #4]
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	781b      	ldrb	r3, [r3, #0]
 8011680:	009b      	lsls	r3, r3, #2
 8011682:	441a      	add	r2, r3
 8011684:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801168a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801168e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011696:	b29b      	uxth	r3, r3
 8011698:	8013      	strh	r3, [r2, #0]
 801169a:	e0bc      	b.n	8011816 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801169c:	687a      	ldr	r2, [r7, #4]
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	781b      	ldrb	r3, [r3, #0]
 80116a2:	009b      	lsls	r3, r3, #2
 80116a4:	4413      	add	r3, r2
 80116a6:	881b      	ldrh	r3, [r3, #0]
 80116a8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80116ac:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80116b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d01d      	beq.n	80116f4 <USB_ActivateEndpoint+0x89c>
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	009b      	lsls	r3, r3, #2
 80116c0:	4413      	add	r3, r2
 80116c2:	881b      	ldrh	r3, [r3, #0]
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80116ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80116ce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80116d2:	687a      	ldr	r2, [r7, #4]
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	781b      	ldrb	r3, [r3, #0]
 80116d8:	009b      	lsls	r3, r3, #2
 80116da:	441a      	add	r2, r3
 80116dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80116e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80116e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80116e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80116ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80116f4:	687a      	ldr	r2, [r7, #4]
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	009b      	lsls	r3, r3, #2
 80116fc:	4413      	add	r3, r2
 80116fe:	881b      	ldrh	r3, [r3, #0]
 8011700:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8011704:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8011708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801170c:	2b00      	cmp	r3, #0
 801170e:	d01d      	beq.n	801174c <USB_ActivateEndpoint+0x8f4>
 8011710:	687a      	ldr	r2, [r7, #4]
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	009b      	lsls	r3, r3, #2
 8011718:	4413      	add	r3, r2
 801171a:	881b      	ldrh	r3, [r3, #0]
 801171c:	b29b      	uxth	r3, r3
 801171e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011726:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 801172a:	687a      	ldr	r2, [r7, #4]
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	009b      	lsls	r3, r3, #2
 8011732:	441a      	add	r2, r3
 8011734:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8011738:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801173c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011744:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011748:	b29b      	uxth	r3, r3
 801174a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	78db      	ldrb	r3, [r3, #3]
 8011750:	2b01      	cmp	r3, #1
 8011752:	d024      	beq.n	801179e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011754:	687a      	ldr	r2, [r7, #4]
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	009b      	lsls	r3, r3, #2
 801175c:	4413      	add	r3, r2
 801175e:	881b      	ldrh	r3, [r3, #0]
 8011760:	b29b      	uxth	r3, r3
 8011762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801176a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 801176e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011772:	f083 0320 	eor.w	r3, r3, #32
 8011776:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 801177a:	687a      	ldr	r2, [r7, #4]
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	009b      	lsls	r3, r3, #2
 8011782:	441a      	add	r2, r3
 8011784:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801178c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011798:	b29b      	uxth	r3, r3
 801179a:	8013      	strh	r3, [r2, #0]
 801179c:	e01d      	b.n	80117da <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801179e:	687a      	ldr	r2, [r7, #4]
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	009b      	lsls	r3, r3, #2
 80117a6:	4413      	add	r3, r2
 80117a8:	881b      	ldrh	r3, [r3, #0]
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80117b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80117b4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80117b8:	687a      	ldr	r2, [r7, #4]
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	009b      	lsls	r3, r3, #2
 80117c0:	441a      	add	r2, r3
 80117c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80117c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80117ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80117ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80117d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80117da:	687a      	ldr	r2, [r7, #4]
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	781b      	ldrb	r3, [r3, #0]
 80117e0:	009b      	lsls	r3, r3, #2
 80117e2:	4413      	add	r3, r2
 80117e4:	881b      	ldrh	r3, [r3, #0]
 80117e6:	b29b      	uxth	r3, r3
 80117e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80117ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80117f0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80117f4:	687a      	ldr	r2, [r7, #4]
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	781b      	ldrb	r3, [r3, #0]
 80117fa:	009b      	lsls	r3, r3, #2
 80117fc:	441a      	add	r2, r3
 80117fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8011802:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011806:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801180a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801180e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011812:	b29b      	uxth	r3, r3
 8011814:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011816:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 801181a:	4618      	mov	r0, r3
 801181c:	379c      	adds	r7, #156	@ 0x9c
 801181e:	46bd      	mov	sp, r7
 8011820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011824:	4770      	bx	lr
 8011826:	bf00      	nop

08011828 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011828:	b480      	push	{r7}
 801182a:	b08d      	sub	sp, #52	@ 0x34
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	7b1b      	ldrb	r3, [r3, #12]
 8011836:	2b00      	cmp	r3, #0
 8011838:	f040 808e 	bne.w	8011958 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	785b      	ldrb	r3, [r3, #1]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d044      	beq.n	80118ce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011844:	687a      	ldr	r2, [r7, #4]
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	009b      	lsls	r3, r3, #2
 801184c:	4413      	add	r3, r2
 801184e:	881b      	ldrh	r3, [r3, #0]
 8011850:	81bb      	strh	r3, [r7, #12]
 8011852:	89bb      	ldrh	r3, [r7, #12]
 8011854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011858:	2b00      	cmp	r3, #0
 801185a:	d01b      	beq.n	8011894 <USB_DeactivateEndpoint+0x6c>
 801185c:	687a      	ldr	r2, [r7, #4]
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	781b      	ldrb	r3, [r3, #0]
 8011862:	009b      	lsls	r3, r3, #2
 8011864:	4413      	add	r3, r2
 8011866:	881b      	ldrh	r3, [r3, #0]
 8011868:	b29b      	uxth	r3, r3
 801186a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801186e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011872:	817b      	strh	r3, [r7, #10]
 8011874:	687a      	ldr	r2, [r7, #4]
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	781b      	ldrb	r3, [r3, #0]
 801187a:	009b      	lsls	r3, r3, #2
 801187c:	441a      	add	r2, r3
 801187e:	897b      	ldrh	r3, [r7, #10]
 8011880:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011884:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011888:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801188c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011890:	b29b      	uxth	r3, r3
 8011892:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	009b      	lsls	r3, r3, #2
 801189c:	4413      	add	r3, r2
 801189e:	881b      	ldrh	r3, [r3, #0]
 80118a0:	b29b      	uxth	r3, r3
 80118a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80118a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80118aa:	813b      	strh	r3, [r7, #8]
 80118ac:	687a      	ldr	r2, [r7, #4]
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	781b      	ldrb	r3, [r3, #0]
 80118b2:	009b      	lsls	r3, r3, #2
 80118b4:	441a      	add	r2, r3
 80118b6:	893b      	ldrh	r3, [r7, #8]
 80118b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80118bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80118c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80118c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118c8:	b29b      	uxth	r3, r3
 80118ca:	8013      	strh	r3, [r2, #0]
 80118cc:	e192      	b.n	8011bf4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80118ce:	687a      	ldr	r2, [r7, #4]
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	781b      	ldrb	r3, [r3, #0]
 80118d4:	009b      	lsls	r3, r3, #2
 80118d6:	4413      	add	r3, r2
 80118d8:	881b      	ldrh	r3, [r3, #0]
 80118da:	827b      	strh	r3, [r7, #18]
 80118dc:	8a7b      	ldrh	r3, [r7, #18]
 80118de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d01b      	beq.n	801191e <USB_DeactivateEndpoint+0xf6>
 80118e6:	687a      	ldr	r2, [r7, #4]
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	781b      	ldrb	r3, [r3, #0]
 80118ec:	009b      	lsls	r3, r3, #2
 80118ee:	4413      	add	r3, r2
 80118f0:	881b      	ldrh	r3, [r3, #0]
 80118f2:	b29b      	uxth	r3, r3
 80118f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80118f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80118fc:	823b      	strh	r3, [r7, #16]
 80118fe:	687a      	ldr	r2, [r7, #4]
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	009b      	lsls	r3, r3, #2
 8011906:	441a      	add	r2, r3
 8011908:	8a3b      	ldrh	r3, [r7, #16]
 801190a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801190e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011912:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801191a:	b29b      	uxth	r3, r3
 801191c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801191e:	687a      	ldr	r2, [r7, #4]
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	009b      	lsls	r3, r3, #2
 8011926:	4413      	add	r3, r2
 8011928:	881b      	ldrh	r3, [r3, #0]
 801192a:	b29b      	uxth	r3, r3
 801192c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011934:	81fb      	strh	r3, [r7, #14]
 8011936:	687a      	ldr	r2, [r7, #4]
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	781b      	ldrb	r3, [r3, #0]
 801193c:	009b      	lsls	r3, r3, #2
 801193e:	441a      	add	r2, r3
 8011940:	89fb      	ldrh	r3, [r7, #14]
 8011942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801194a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801194e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011952:	b29b      	uxth	r3, r3
 8011954:	8013      	strh	r3, [r2, #0]
 8011956:	e14d      	b.n	8011bf4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	785b      	ldrb	r3, [r3, #1]
 801195c:	2b00      	cmp	r3, #0
 801195e:	f040 80a5 	bne.w	8011aac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011962:	687a      	ldr	r2, [r7, #4]
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	009b      	lsls	r3, r3, #2
 801196a:	4413      	add	r3, r2
 801196c:	881b      	ldrh	r3, [r3, #0]
 801196e:	843b      	strh	r3, [r7, #32]
 8011970:	8c3b      	ldrh	r3, [r7, #32]
 8011972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011976:	2b00      	cmp	r3, #0
 8011978:	d01b      	beq.n	80119b2 <USB_DeactivateEndpoint+0x18a>
 801197a:	687a      	ldr	r2, [r7, #4]
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	781b      	ldrb	r3, [r3, #0]
 8011980:	009b      	lsls	r3, r3, #2
 8011982:	4413      	add	r3, r2
 8011984:	881b      	ldrh	r3, [r3, #0]
 8011986:	b29b      	uxth	r3, r3
 8011988:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801198c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011990:	83fb      	strh	r3, [r7, #30]
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	009b      	lsls	r3, r3, #2
 801199a:	441a      	add	r2, r3
 801199c:	8bfb      	ldrh	r3, [r7, #30]
 801199e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80119a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80119a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80119aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80119ae:	b29b      	uxth	r3, r3
 80119b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80119b2:	687a      	ldr	r2, [r7, #4]
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	781b      	ldrb	r3, [r3, #0]
 80119b8:	009b      	lsls	r3, r3, #2
 80119ba:	4413      	add	r3, r2
 80119bc:	881b      	ldrh	r3, [r3, #0]
 80119be:	83bb      	strh	r3, [r7, #28]
 80119c0:	8bbb      	ldrh	r3, [r7, #28]
 80119c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d01b      	beq.n	8011a02 <USB_DeactivateEndpoint+0x1da>
 80119ca:	687a      	ldr	r2, [r7, #4]
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	781b      	ldrb	r3, [r3, #0]
 80119d0:	009b      	lsls	r3, r3, #2
 80119d2:	4413      	add	r3, r2
 80119d4:	881b      	ldrh	r3, [r3, #0]
 80119d6:	b29b      	uxth	r3, r3
 80119d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80119dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80119e0:	837b      	strh	r3, [r7, #26]
 80119e2:	687a      	ldr	r2, [r7, #4]
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	781b      	ldrb	r3, [r3, #0]
 80119e8:	009b      	lsls	r3, r3, #2
 80119ea:	441a      	add	r2, r3
 80119ec:	8b7b      	ldrh	r3, [r7, #26]
 80119ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80119f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80119f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80119fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011a02:	687a      	ldr	r2, [r7, #4]
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	009b      	lsls	r3, r3, #2
 8011a0a:	4413      	add	r3, r2
 8011a0c:	881b      	ldrh	r3, [r3, #0]
 8011a0e:	b29b      	uxth	r3, r3
 8011a10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a18:	833b      	strh	r3, [r7, #24]
 8011a1a:	687a      	ldr	r2, [r7, #4]
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	781b      	ldrb	r3, [r3, #0]
 8011a20:	009b      	lsls	r3, r3, #2
 8011a22:	441a      	add	r2, r3
 8011a24:	8b3b      	ldrh	r3, [r7, #24]
 8011a26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011a36:	b29b      	uxth	r3, r3
 8011a38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011a3a:	687a      	ldr	r2, [r7, #4]
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	781b      	ldrb	r3, [r3, #0]
 8011a40:	009b      	lsls	r3, r3, #2
 8011a42:	4413      	add	r3, r2
 8011a44:	881b      	ldrh	r3, [r3, #0]
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a50:	82fb      	strh	r3, [r7, #22]
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	781b      	ldrb	r3, [r3, #0]
 8011a58:	009b      	lsls	r3, r3, #2
 8011a5a:	441a      	add	r2, r3
 8011a5c:	8afb      	ldrh	r3, [r7, #22]
 8011a5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a6e:	b29b      	uxth	r3, r3
 8011a70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011a72:	687a      	ldr	r2, [r7, #4]
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	781b      	ldrb	r3, [r3, #0]
 8011a78:	009b      	lsls	r3, r3, #2
 8011a7a:	4413      	add	r3, r2
 8011a7c:	881b      	ldrh	r3, [r3, #0]
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011a88:	82bb      	strh	r3, [r7, #20]
 8011a8a:	687a      	ldr	r2, [r7, #4]
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	781b      	ldrb	r3, [r3, #0]
 8011a90:	009b      	lsls	r3, r3, #2
 8011a92:	441a      	add	r2, r3
 8011a94:	8abb      	ldrh	r3, [r7, #20]
 8011a96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	8013      	strh	r3, [r2, #0]
 8011aaa:	e0a3      	b.n	8011bf4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011aac:	687a      	ldr	r2, [r7, #4]
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	781b      	ldrb	r3, [r3, #0]
 8011ab2:	009b      	lsls	r3, r3, #2
 8011ab4:	4413      	add	r3, r2
 8011ab6:	881b      	ldrh	r3, [r3, #0]
 8011ab8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8011aba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011abc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d01b      	beq.n	8011afc <USB_DeactivateEndpoint+0x2d4>
 8011ac4:	687a      	ldr	r2, [r7, #4]
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	781b      	ldrb	r3, [r3, #0]
 8011aca:	009b      	lsls	r3, r3, #2
 8011acc:	4413      	add	r3, r2
 8011ace:	881b      	ldrh	r3, [r3, #0]
 8011ad0:	b29b      	uxth	r3, r3
 8011ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ada:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8011adc:	687a      	ldr	r2, [r7, #4]
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	009b      	lsls	r3, r3, #2
 8011ae4:	441a      	add	r2, r3
 8011ae6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011ae8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011aec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011af0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011af8:	b29b      	uxth	r3, r3
 8011afa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011afc:	687a      	ldr	r2, [r7, #4]
 8011afe:	683b      	ldr	r3, [r7, #0]
 8011b00:	781b      	ldrb	r3, [r3, #0]
 8011b02:	009b      	lsls	r3, r3, #2
 8011b04:	4413      	add	r3, r2
 8011b06:	881b      	ldrh	r3, [r3, #0]
 8011b08:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8011b0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d01b      	beq.n	8011b4c <USB_DeactivateEndpoint+0x324>
 8011b14:	687a      	ldr	r2, [r7, #4]
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	781b      	ldrb	r3, [r3, #0]
 8011b1a:	009b      	lsls	r3, r3, #2
 8011b1c:	4413      	add	r3, r2
 8011b1e:	881b      	ldrh	r3, [r3, #0]
 8011b20:	b29b      	uxth	r3, r3
 8011b22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b2a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011b2c:	687a      	ldr	r2, [r7, #4]
 8011b2e:	683b      	ldr	r3, [r7, #0]
 8011b30:	781b      	ldrb	r3, [r3, #0]
 8011b32:	009b      	lsls	r3, r3, #2
 8011b34:	441a      	add	r2, r3
 8011b36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011b38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011b48:	b29b      	uxth	r3, r3
 8011b4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011b4c:	687a      	ldr	r2, [r7, #4]
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	781b      	ldrb	r3, [r3, #0]
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	4413      	add	r3, r2
 8011b56:	881b      	ldrh	r3, [r3, #0]
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b62:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011b64:	687a      	ldr	r2, [r7, #4]
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	009b      	lsls	r3, r3, #2
 8011b6c:	441a      	add	r2, r3
 8011b6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011b70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b80:	b29b      	uxth	r3, r3
 8011b82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011b84:	687a      	ldr	r2, [r7, #4]
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	009b      	lsls	r3, r3, #2
 8011b8c:	4413      	add	r3, r2
 8011b8e:	881b      	ldrh	r3, [r3, #0]
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011b9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011b9c:	687a      	ldr	r2, [r7, #4]
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	781b      	ldrb	r3, [r3, #0]
 8011ba2:	009b      	lsls	r3, r3, #2
 8011ba4:	441a      	add	r2, r3
 8011ba6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011ba8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011bac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011bb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bb8:	b29b      	uxth	r3, r3
 8011bba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011bbc:	687a      	ldr	r2, [r7, #4]
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	009b      	lsls	r3, r3, #2
 8011bc4:	4413      	add	r3, r2
 8011bc6:	881b      	ldrh	r3, [r3, #0]
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011bd2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011bd4:	687a      	ldr	r2, [r7, #4]
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	781b      	ldrb	r3, [r3, #0]
 8011bda:	009b      	lsls	r3, r3, #2
 8011bdc:	441a      	add	r2, r3
 8011bde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011be0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011be4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011be8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bf0:	b29b      	uxth	r3, r3
 8011bf2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011bf4:	2300      	movs	r3, #0
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3734      	adds	r7, #52	@ 0x34
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c00:	4770      	bx	lr

08011c02 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011c02:	b580      	push	{r7, lr}
 8011c04:	b0ac      	sub	sp, #176	@ 0xb0
 8011c06:	af00      	add	r7, sp, #0
 8011c08:	6078      	str	r0, [r7, #4]
 8011c0a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	785b      	ldrb	r3, [r3, #1]
 8011c10:	2b01      	cmp	r3, #1
 8011c12:	f040 84ca 	bne.w	80125aa <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	699a      	ldr	r2, [r3, #24]
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	691b      	ldr	r3, [r3, #16]
 8011c1e:	429a      	cmp	r2, r3
 8011c20:	d904      	bls.n	8011c2c <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	691b      	ldr	r3, [r3, #16]
 8011c26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011c2a:	e003      	b.n	8011c34 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	699b      	ldr	r3, [r3, #24]
 8011c30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	7b1b      	ldrb	r3, [r3, #12]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d122      	bne.n	8011c82 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	6959      	ldr	r1, [r3, #20]
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	88da      	ldrh	r2, [r3, #6]
 8011c44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011c48:	b29b      	uxth	r3, r3
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f000 febd 	bl	80129ca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	613b      	str	r3, [r7, #16]
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011c5a:	b29b      	uxth	r3, r3
 8011c5c:	461a      	mov	r2, r3
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	4413      	add	r3, r2
 8011c62:	613b      	str	r3, [r7, #16]
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	781b      	ldrb	r3, [r3, #0]
 8011c68:	00da      	lsls	r2, r3, #3
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	4413      	add	r3, r2
 8011c6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011c72:	60fb      	str	r3, [r7, #12]
 8011c74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011c78:	b29a      	uxth	r2, r3
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	801a      	strh	r2, [r3, #0]
 8011c7e:	f000 bc6f 	b.w	8012560 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	78db      	ldrb	r3, [r3, #3]
 8011c86:	2b02      	cmp	r3, #2
 8011c88:	f040 831e 	bne.w	80122c8 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	6a1a      	ldr	r2, [r3, #32]
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	691b      	ldr	r3, [r3, #16]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	f240 82cf 	bls.w	8012238 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	781b      	ldrb	r3, [r3, #0]
 8011ca0:	009b      	lsls	r3, r3, #2
 8011ca2:	4413      	add	r3, r2
 8011ca4:	881b      	ldrh	r3, [r3, #0]
 8011ca6:	b29b      	uxth	r3, r3
 8011ca8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011cb0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8011cb4:	687a      	ldr	r2, [r7, #4]
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	009b      	lsls	r3, r3, #2
 8011cbc:	441a      	add	r2, r3
 8011cbe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8011cc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011cc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011cca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cd2:	b29b      	uxth	r3, r3
 8011cd4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	6a1a      	ldr	r2, [r3, #32]
 8011cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011cde:	1ad2      	subs	r2, r2, r3
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011ce4:	687a      	ldr	r2, [r7, #4]
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	781b      	ldrb	r3, [r3, #0]
 8011cea:	009b      	lsls	r3, r3, #2
 8011cec:	4413      	add	r3, r2
 8011cee:	881b      	ldrh	r3, [r3, #0]
 8011cf0:	b29b      	uxth	r3, r3
 8011cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	f000 814f 	beq.w	8011f9a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	785b      	ldrb	r3, [r3, #1]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d16b      	bne.n	8011de0 <USB_EPStartXfer+0x1de>
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011d12:	b29b      	uxth	r3, r3
 8011d14:	461a      	mov	r2, r3
 8011d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d18:	4413      	add	r3, r2
 8011d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	00da      	lsls	r2, r3, #3
 8011d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d24:	4413      	add	r3, r2
 8011d26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011d2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d2e:	881b      	ldrh	r3, [r3, #0]
 8011d30:	b29b      	uxth	r3, r3
 8011d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011d36:	b29a      	uxth	r2, r3
 8011d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d3a:	801a      	strh	r2, [r3, #0]
 8011d3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d10a      	bne.n	8011d5a <USB_EPStartXfer+0x158>
 8011d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d46:	881b      	ldrh	r3, [r3, #0]
 8011d48:	b29b      	uxth	r3, r3
 8011d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011d52:	b29a      	uxth	r2, r3
 8011d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d56:	801a      	strh	r2, [r3, #0]
 8011d58:	e05b      	b.n	8011e12 <USB_EPStartXfer+0x210>
 8011d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011d5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8011d60:	d81c      	bhi.n	8011d9c <USB_EPStartXfer+0x19a>
 8011d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011d66:	085b      	lsrs	r3, r3, #1
 8011d68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011d6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011d70:	f003 0301 	and.w	r3, r3, #1
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d004      	beq.n	8011d82 <USB_EPStartXfer+0x180>
 8011d78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011d7c:	3301      	adds	r3, #1
 8011d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d84:	881b      	ldrh	r3, [r3, #0]
 8011d86:	b29a      	uxth	r2, r3
 8011d88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011d8c:	b29b      	uxth	r3, r3
 8011d8e:	029b      	lsls	r3, r3, #10
 8011d90:	b29b      	uxth	r3, r3
 8011d92:	4313      	orrs	r3, r2
 8011d94:	b29a      	uxth	r2, r3
 8011d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d98:	801a      	strh	r2, [r3, #0]
 8011d9a:	e03a      	b.n	8011e12 <USB_EPStartXfer+0x210>
 8011d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011da0:	095b      	lsrs	r3, r3, #5
 8011da2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011daa:	f003 031f 	and.w	r3, r3, #31
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d104      	bne.n	8011dbc <USB_EPStartXfer+0x1ba>
 8011db2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011db6:	3b01      	subs	r3, #1
 8011db8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dbe:	881b      	ldrh	r3, [r3, #0]
 8011dc0:	b29a      	uxth	r2, r3
 8011dc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011dc6:	b29b      	uxth	r3, r3
 8011dc8:	029b      	lsls	r3, r3, #10
 8011dca:	b29b      	uxth	r3, r3
 8011dcc:	4313      	orrs	r3, r2
 8011dce:	b29b      	uxth	r3, r3
 8011dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011dd8:	b29a      	uxth	r2, r3
 8011dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ddc:	801a      	strh	r2, [r3, #0]
 8011dde:	e018      	b.n	8011e12 <USB_EPStartXfer+0x210>
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	785b      	ldrb	r3, [r3, #1]
 8011de4:	2b01      	cmp	r3, #1
 8011de6:	d114      	bne.n	8011e12 <USB_EPStartXfer+0x210>
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011dee:	b29b      	uxth	r3, r3
 8011df0:	461a      	mov	r2, r3
 8011df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011df4:	4413      	add	r3, r2
 8011df6:	633b      	str	r3, [r7, #48]	@ 0x30
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	00da      	lsls	r2, r3, #3
 8011dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e00:	4413      	add	r3, r2
 8011e02:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e0c:	b29a      	uxth	r2, r3
 8011e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	895b      	ldrh	r3, [r3, #10]
 8011e16:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	6959      	ldr	r1, [r3, #20]
 8011e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f000 fdce 	bl	80129ca <USB_WritePMA>
            ep->xfer_buff += len;
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	695a      	ldr	r2, [r3, #20]
 8011e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e36:	441a      	add	r2, r3
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	6a1a      	ldr	r2, [r3, #32]
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	691b      	ldr	r3, [r3, #16]
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d907      	bls.n	8011e58 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	6a1a      	ldr	r2, [r3, #32]
 8011e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e50:	1ad2      	subs	r2, r2, r3
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	621a      	str	r2, [r3, #32]
 8011e56:	e006      	b.n	8011e66 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8011e58:	683b      	ldr	r3, [r7, #0]
 8011e5a:	6a1b      	ldr	r3, [r3, #32]
 8011e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	2200      	movs	r2, #0
 8011e64:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	785b      	ldrb	r3, [r3, #1]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d16b      	bne.n	8011f46 <USB_EPStartXfer+0x344>
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	61bb      	str	r3, [r7, #24]
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011e78:	b29b      	uxth	r3, r3
 8011e7a:	461a      	mov	r2, r3
 8011e7c:	69bb      	ldr	r3, [r7, #24]
 8011e7e:	4413      	add	r3, r2
 8011e80:	61bb      	str	r3, [r7, #24]
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	781b      	ldrb	r3, [r3, #0]
 8011e86:	00da      	lsls	r2, r3, #3
 8011e88:	69bb      	ldr	r3, [r7, #24]
 8011e8a:	4413      	add	r3, r2
 8011e8c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011e90:	617b      	str	r3, [r7, #20]
 8011e92:	697b      	ldr	r3, [r7, #20]
 8011e94:	881b      	ldrh	r3, [r3, #0]
 8011e96:	b29b      	uxth	r3, r3
 8011e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011e9c:	b29a      	uxth	r2, r3
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	801a      	strh	r2, [r3, #0]
 8011ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d10a      	bne.n	8011ec0 <USB_EPStartXfer+0x2be>
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	881b      	ldrh	r3, [r3, #0]
 8011eae:	b29b      	uxth	r3, r3
 8011eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011eb8:	b29a      	uxth	r2, r3
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	801a      	strh	r2, [r3, #0]
 8011ebe:	e05d      	b.n	8011f7c <USB_EPStartXfer+0x37a>
 8011ec0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011ec4:	2b3e      	cmp	r3, #62	@ 0x3e
 8011ec6:	d81c      	bhi.n	8011f02 <USB_EPStartXfer+0x300>
 8011ec8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011ecc:	085b      	lsrs	r3, r3, #1
 8011ece:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011ed6:	f003 0301 	and.w	r3, r3, #1
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d004      	beq.n	8011ee8 <USB_EPStartXfer+0x2e6>
 8011ede:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011ee2:	3301      	adds	r3, #1
 8011ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	881b      	ldrh	r3, [r3, #0]
 8011eec:	b29a      	uxth	r2, r3
 8011eee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011ef2:	b29b      	uxth	r3, r3
 8011ef4:	029b      	lsls	r3, r3, #10
 8011ef6:	b29b      	uxth	r3, r3
 8011ef8:	4313      	orrs	r3, r2
 8011efa:	b29a      	uxth	r2, r3
 8011efc:	697b      	ldr	r3, [r7, #20]
 8011efe:	801a      	strh	r2, [r3, #0]
 8011f00:	e03c      	b.n	8011f7c <USB_EPStartXfer+0x37a>
 8011f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f06:	095b      	lsrs	r3, r3, #5
 8011f08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011f0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f10:	f003 031f 	and.w	r3, r3, #31
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d104      	bne.n	8011f22 <USB_EPStartXfer+0x320>
 8011f18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011f1c:	3b01      	subs	r3, #1
 8011f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	881b      	ldrh	r3, [r3, #0]
 8011f26:	b29a      	uxth	r2, r3
 8011f28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011f2c:	b29b      	uxth	r3, r3
 8011f2e:	029b      	lsls	r3, r3, #10
 8011f30:	b29b      	uxth	r3, r3
 8011f32:	4313      	orrs	r3, r2
 8011f34:	b29b      	uxth	r3, r3
 8011f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f3e:	b29a      	uxth	r2, r3
 8011f40:	697b      	ldr	r3, [r7, #20]
 8011f42:	801a      	strh	r2, [r3, #0]
 8011f44:	e01a      	b.n	8011f7c <USB_EPStartXfer+0x37a>
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	785b      	ldrb	r3, [r3, #1]
 8011f4a:	2b01      	cmp	r3, #1
 8011f4c:	d116      	bne.n	8011f7c <USB_EPStartXfer+0x37a>
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	623b      	str	r3, [r7, #32]
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011f58:	b29b      	uxth	r3, r3
 8011f5a:	461a      	mov	r2, r3
 8011f5c:	6a3b      	ldr	r3, [r7, #32]
 8011f5e:	4413      	add	r3, r2
 8011f60:	623b      	str	r3, [r7, #32]
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	781b      	ldrb	r3, [r3, #0]
 8011f66:	00da      	lsls	r2, r3, #3
 8011f68:	6a3b      	ldr	r3, [r7, #32]
 8011f6a:	4413      	add	r3, r2
 8011f6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011f70:	61fb      	str	r3, [r7, #28]
 8011f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f76:	b29a      	uxth	r2, r3
 8011f78:	69fb      	ldr	r3, [r7, #28]
 8011f7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	891b      	ldrh	r3, [r3, #8]
 8011f80:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	6959      	ldr	r1, [r3, #20]
 8011f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f8c:	b29b      	uxth	r3, r3
 8011f8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f000 fd19 	bl	80129ca <USB_WritePMA>
 8011f98:	e2e2      	b.n	8012560 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	785b      	ldrb	r3, [r3, #1]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d16b      	bne.n	801207a <USB_EPStartXfer+0x478>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011fac:	b29b      	uxth	r3, r3
 8011fae:	461a      	mov	r2, r3
 8011fb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011fb2:	4413      	add	r3, r2
 8011fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	781b      	ldrb	r3, [r3, #0]
 8011fba:	00da      	lsls	r2, r3, #3
 8011fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011fbe:	4413      	add	r3, r2
 8011fc0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8011fc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011fc8:	881b      	ldrh	r3, [r3, #0]
 8011fca:	b29b      	uxth	r3, r3
 8011fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011fd0:	b29a      	uxth	r2, r3
 8011fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011fd4:	801a      	strh	r2, [r3, #0]
 8011fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d10a      	bne.n	8011ff4 <USB_EPStartXfer+0x3f2>
 8011fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011fe0:	881b      	ldrh	r3, [r3, #0]
 8011fe2:	b29b      	uxth	r3, r3
 8011fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011fec:	b29a      	uxth	r2, r3
 8011fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ff0:	801a      	strh	r2, [r3, #0]
 8011ff2:	e05d      	b.n	80120b0 <USB_EPStartXfer+0x4ae>
 8011ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011ff8:	2b3e      	cmp	r3, #62	@ 0x3e
 8011ffa:	d81c      	bhi.n	8012036 <USB_EPStartXfer+0x434>
 8011ffc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012000:	085b      	lsrs	r3, r3, #1
 8012002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801200a:	f003 0301 	and.w	r3, r3, #1
 801200e:	2b00      	cmp	r3, #0
 8012010:	d004      	beq.n	801201c <USB_EPStartXfer+0x41a>
 8012012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012016:	3301      	adds	r3, #1
 8012018:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801201c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801201e:	881b      	ldrh	r3, [r3, #0]
 8012020:	b29a      	uxth	r2, r3
 8012022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012026:	b29b      	uxth	r3, r3
 8012028:	029b      	lsls	r3, r3, #10
 801202a:	b29b      	uxth	r3, r3
 801202c:	4313      	orrs	r3, r2
 801202e:	b29a      	uxth	r2, r3
 8012030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012032:	801a      	strh	r2, [r3, #0]
 8012034:	e03c      	b.n	80120b0 <USB_EPStartXfer+0x4ae>
 8012036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801203a:	095b      	lsrs	r3, r3, #5
 801203c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012040:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012044:	f003 031f 	and.w	r3, r3, #31
 8012048:	2b00      	cmp	r3, #0
 801204a:	d104      	bne.n	8012056 <USB_EPStartXfer+0x454>
 801204c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012050:	3b01      	subs	r3, #1
 8012052:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012056:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012058:	881b      	ldrh	r3, [r3, #0]
 801205a:	b29a      	uxth	r2, r3
 801205c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012060:	b29b      	uxth	r3, r3
 8012062:	029b      	lsls	r3, r3, #10
 8012064:	b29b      	uxth	r3, r3
 8012066:	4313      	orrs	r3, r2
 8012068:	b29b      	uxth	r3, r3
 801206a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801206e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012072:	b29a      	uxth	r2, r3
 8012074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012076:	801a      	strh	r2, [r3, #0]
 8012078:	e01a      	b.n	80120b0 <USB_EPStartXfer+0x4ae>
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	785b      	ldrb	r3, [r3, #1]
 801207e:	2b01      	cmp	r3, #1
 8012080:	d116      	bne.n	80120b0 <USB_EPStartXfer+0x4ae>
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	653b      	str	r3, [r7, #80]	@ 0x50
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801208c:	b29b      	uxth	r3, r3
 801208e:	461a      	mov	r2, r3
 8012090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012092:	4413      	add	r3, r2
 8012094:	653b      	str	r3, [r7, #80]	@ 0x50
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	00da      	lsls	r2, r3, #3
 801209c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801209e:	4413      	add	r3, r2
 80120a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80120a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80120a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120aa:	b29a      	uxth	r2, r3
 80120ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	891b      	ldrh	r3, [r3, #8]
 80120b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	6959      	ldr	r1, [r3, #20]
 80120bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120c0:	b29b      	uxth	r3, r3
 80120c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	f000 fc7f 	bl	80129ca <USB_WritePMA>
            ep->xfer_buff += len;
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	695a      	ldr	r2, [r3, #20]
 80120d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120d4:	441a      	add	r2, r3
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	6a1a      	ldr	r2, [r3, #32]
 80120de:	683b      	ldr	r3, [r7, #0]
 80120e0:	691b      	ldr	r3, [r3, #16]
 80120e2:	429a      	cmp	r2, r3
 80120e4:	d907      	bls.n	80120f6 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	6a1a      	ldr	r2, [r3, #32]
 80120ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120ee:	1ad2      	subs	r2, r2, r3
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	621a      	str	r2, [r3, #32]
 80120f4:	e006      	b.n	8012104 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	6a1b      	ldr	r3, [r3, #32]
 80120fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	2200      	movs	r2, #0
 8012102:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	643b      	str	r3, [r7, #64]	@ 0x40
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	785b      	ldrb	r3, [r3, #1]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d16b      	bne.n	80121e8 <USB_EPStartXfer+0x5e6>
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801211a:	b29b      	uxth	r3, r3
 801211c:	461a      	mov	r2, r3
 801211e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012120:	4413      	add	r3, r2
 8012122:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	781b      	ldrb	r3, [r3, #0]
 8012128:	00da      	lsls	r2, r3, #3
 801212a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801212c:	4413      	add	r3, r2
 801212e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012132:	637b      	str	r3, [r7, #52]	@ 0x34
 8012134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012136:	881b      	ldrh	r3, [r3, #0]
 8012138:	b29b      	uxth	r3, r3
 801213a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801213e:	b29a      	uxth	r2, r3
 8012140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012142:	801a      	strh	r2, [r3, #0]
 8012144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012148:	2b00      	cmp	r3, #0
 801214a:	d10a      	bne.n	8012162 <USB_EPStartXfer+0x560>
 801214c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801214e:	881b      	ldrh	r3, [r3, #0]
 8012150:	b29b      	uxth	r3, r3
 8012152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801215a:	b29a      	uxth	r2, r3
 801215c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801215e:	801a      	strh	r2, [r3, #0]
 8012160:	e05b      	b.n	801221a <USB_EPStartXfer+0x618>
 8012162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012166:	2b3e      	cmp	r3, #62	@ 0x3e
 8012168:	d81c      	bhi.n	80121a4 <USB_EPStartXfer+0x5a2>
 801216a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801216e:	085b      	lsrs	r3, r3, #1
 8012170:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012178:	f003 0301 	and.w	r3, r3, #1
 801217c:	2b00      	cmp	r3, #0
 801217e:	d004      	beq.n	801218a <USB_EPStartXfer+0x588>
 8012180:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012184:	3301      	adds	r3, #1
 8012186:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801218a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801218c:	881b      	ldrh	r3, [r3, #0]
 801218e:	b29a      	uxth	r2, r3
 8012190:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012194:	b29b      	uxth	r3, r3
 8012196:	029b      	lsls	r3, r3, #10
 8012198:	b29b      	uxth	r3, r3
 801219a:	4313      	orrs	r3, r2
 801219c:	b29a      	uxth	r2, r3
 801219e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121a0:	801a      	strh	r2, [r3, #0]
 80121a2:	e03a      	b.n	801221a <USB_EPStartXfer+0x618>
 80121a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121a8:	095b      	lsrs	r3, r3, #5
 80121aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80121ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121b2:	f003 031f 	and.w	r3, r3, #31
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d104      	bne.n	80121c4 <USB_EPStartXfer+0x5c2>
 80121ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80121be:	3b01      	subs	r3, #1
 80121c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80121c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121c6:	881b      	ldrh	r3, [r3, #0]
 80121c8:	b29a      	uxth	r2, r3
 80121ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	029b      	lsls	r3, r3, #10
 80121d2:	b29b      	uxth	r3, r3
 80121d4:	4313      	orrs	r3, r2
 80121d6:	b29b      	uxth	r3, r3
 80121d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80121dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80121e0:	b29a      	uxth	r2, r3
 80121e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121e4:	801a      	strh	r2, [r3, #0]
 80121e6:	e018      	b.n	801221a <USB_EPStartXfer+0x618>
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	785b      	ldrb	r3, [r3, #1]
 80121ec:	2b01      	cmp	r3, #1
 80121ee:	d114      	bne.n	801221a <USB_EPStartXfer+0x618>
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80121f6:	b29b      	uxth	r3, r3
 80121f8:	461a      	mov	r2, r3
 80121fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80121fc:	4413      	add	r3, r2
 80121fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	781b      	ldrb	r3, [r3, #0]
 8012204:	00da      	lsls	r2, r3, #3
 8012206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012208:	4413      	add	r3, r2
 801220a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801220e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012214:	b29a      	uxth	r2, r3
 8012216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012218:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	895b      	ldrh	r3, [r3, #10]
 801221e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	6959      	ldr	r1, [r3, #20]
 8012226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801222a:	b29b      	uxth	r3, r3
 801222c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f000 fbca 	bl	80129ca <USB_WritePMA>
 8012236:	e193      	b.n	8012560 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	6a1b      	ldr	r3, [r3, #32]
 801223c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8012240:	687a      	ldr	r2, [r7, #4]
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	781b      	ldrb	r3, [r3, #0]
 8012246:	009b      	lsls	r3, r3, #2
 8012248:	4413      	add	r3, r2
 801224a:	881b      	ldrh	r3, [r3, #0]
 801224c:	b29b      	uxth	r3, r3
 801224e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8012252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012256:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 801225a:	687a      	ldr	r2, [r7, #4]
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	781b      	ldrb	r3, [r3, #0]
 8012260:	009b      	lsls	r3, r3, #2
 8012262:	441a      	add	r2, r3
 8012264:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8012268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801226c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012278:	b29b      	uxth	r3, r3
 801227a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012286:	b29b      	uxth	r3, r3
 8012288:	461a      	mov	r2, r3
 801228a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801228c:	4413      	add	r3, r2
 801228e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	781b      	ldrb	r3, [r3, #0]
 8012294:	00da      	lsls	r2, r3, #3
 8012296:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012298:	4413      	add	r3, r2
 801229a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801229e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80122a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122a4:	b29a      	uxth	r2, r3
 80122a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80122a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	891b      	ldrh	r3, [r3, #8]
 80122ae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	6959      	ldr	r1, [r3, #20]
 80122b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122ba:	b29b      	uxth	r3, r3
 80122bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f000 fb82 	bl	80129ca <USB_WritePMA>
 80122c6:	e14b      	b.n	8012560 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	6a1a      	ldr	r2, [r3, #32]
 80122cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122d0:	1ad2      	subs	r2, r2, r3
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80122d6:	687a      	ldr	r2, [r7, #4]
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	009b      	lsls	r3, r3, #2
 80122de:	4413      	add	r3, r2
 80122e0:	881b      	ldrh	r3, [r3, #0]
 80122e2:	b29b      	uxth	r3, r3
 80122e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	f000 809a 	beq.w	8012422 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	785b      	ldrb	r3, [r3, #1]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d16b      	bne.n	80123d2 <USB_EPStartXfer+0x7d0>
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012304:	b29b      	uxth	r3, r3
 8012306:	461a      	mov	r2, r3
 8012308:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801230a:	4413      	add	r3, r2
 801230c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	00da      	lsls	r2, r3, #3
 8012314:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012316:	4413      	add	r3, r2
 8012318:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801231c:	667b      	str	r3, [r7, #100]	@ 0x64
 801231e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012320:	881b      	ldrh	r3, [r3, #0]
 8012322:	b29b      	uxth	r3, r3
 8012324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012328:	b29a      	uxth	r2, r3
 801232a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801232c:	801a      	strh	r2, [r3, #0]
 801232e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012332:	2b00      	cmp	r3, #0
 8012334:	d10a      	bne.n	801234c <USB_EPStartXfer+0x74a>
 8012336:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012338:	881b      	ldrh	r3, [r3, #0]
 801233a:	b29b      	uxth	r3, r3
 801233c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012344:	b29a      	uxth	r2, r3
 8012346:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012348:	801a      	strh	r2, [r3, #0]
 801234a:	e05b      	b.n	8012404 <USB_EPStartXfer+0x802>
 801234c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012350:	2b3e      	cmp	r3, #62	@ 0x3e
 8012352:	d81c      	bhi.n	801238e <USB_EPStartXfer+0x78c>
 8012354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012358:	085b      	lsrs	r3, r3, #1
 801235a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801235e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012362:	f003 0301 	and.w	r3, r3, #1
 8012366:	2b00      	cmp	r3, #0
 8012368:	d004      	beq.n	8012374 <USB_EPStartXfer+0x772>
 801236a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801236e:	3301      	adds	r3, #1
 8012370:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012376:	881b      	ldrh	r3, [r3, #0]
 8012378:	b29a      	uxth	r2, r3
 801237a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801237e:	b29b      	uxth	r3, r3
 8012380:	029b      	lsls	r3, r3, #10
 8012382:	b29b      	uxth	r3, r3
 8012384:	4313      	orrs	r3, r2
 8012386:	b29a      	uxth	r2, r3
 8012388:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801238a:	801a      	strh	r2, [r3, #0]
 801238c:	e03a      	b.n	8012404 <USB_EPStartXfer+0x802>
 801238e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012392:	095b      	lsrs	r3, r3, #5
 8012394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801239c:	f003 031f 	and.w	r3, r3, #31
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d104      	bne.n	80123ae <USB_EPStartXfer+0x7ac>
 80123a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80123a8:	3b01      	subs	r3, #1
 80123aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80123ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80123b0:	881b      	ldrh	r3, [r3, #0]
 80123b2:	b29a      	uxth	r2, r3
 80123b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80123b8:	b29b      	uxth	r3, r3
 80123ba:	029b      	lsls	r3, r3, #10
 80123bc:	b29b      	uxth	r3, r3
 80123be:	4313      	orrs	r3, r2
 80123c0:	b29b      	uxth	r3, r3
 80123c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80123c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80123ca:	b29a      	uxth	r2, r3
 80123cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80123ce:	801a      	strh	r2, [r3, #0]
 80123d0:	e018      	b.n	8012404 <USB_EPStartXfer+0x802>
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	785b      	ldrb	r3, [r3, #1]
 80123d6:	2b01      	cmp	r3, #1
 80123d8:	d114      	bne.n	8012404 <USB_EPStartXfer+0x802>
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	461a      	mov	r2, r3
 80123e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80123e6:	4413      	add	r3, r2
 80123e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	00da      	lsls	r2, r3, #3
 80123f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80123f2:	4413      	add	r3, r2
 80123f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80123f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80123fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123fe:	b29a      	uxth	r2, r3
 8012400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012402:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	895b      	ldrh	r3, [r3, #10]
 8012408:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	6959      	ldr	r1, [r3, #20]
 8012410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012414:	b29b      	uxth	r3, r3
 8012416:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801241a:	6878      	ldr	r0, [r7, #4]
 801241c:	f000 fad5 	bl	80129ca <USB_WritePMA>
 8012420:	e09e      	b.n	8012560 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	785b      	ldrb	r3, [r3, #1]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d16b      	bne.n	8012502 <USB_EPStartXfer+0x900>
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012434:	b29b      	uxth	r3, r3
 8012436:	461a      	mov	r2, r3
 8012438:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801243a:	4413      	add	r3, r2
 801243c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	781b      	ldrb	r3, [r3, #0]
 8012442:	00da      	lsls	r2, r3, #3
 8012444:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012446:	4413      	add	r3, r2
 8012448:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801244c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801244e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012450:	881b      	ldrh	r3, [r3, #0]
 8012452:	b29b      	uxth	r3, r3
 8012454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012458:	b29a      	uxth	r2, r3
 801245a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801245c:	801a      	strh	r2, [r3, #0]
 801245e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012462:	2b00      	cmp	r3, #0
 8012464:	d10a      	bne.n	801247c <USB_EPStartXfer+0x87a>
 8012466:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012468:	881b      	ldrh	r3, [r3, #0]
 801246a:	b29b      	uxth	r3, r3
 801246c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012474:	b29a      	uxth	r2, r3
 8012476:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012478:	801a      	strh	r2, [r3, #0]
 801247a:	e063      	b.n	8012544 <USB_EPStartXfer+0x942>
 801247c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012480:	2b3e      	cmp	r3, #62	@ 0x3e
 8012482:	d81c      	bhi.n	80124be <USB_EPStartXfer+0x8bc>
 8012484:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012488:	085b      	lsrs	r3, r3, #1
 801248a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801248e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012492:	f003 0301 	and.w	r3, r3, #1
 8012496:	2b00      	cmp	r3, #0
 8012498:	d004      	beq.n	80124a4 <USB_EPStartXfer+0x8a2>
 801249a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801249e:	3301      	adds	r3, #1
 80124a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80124a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80124a6:	881b      	ldrh	r3, [r3, #0]
 80124a8:	b29a      	uxth	r2, r3
 80124aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80124ae:	b29b      	uxth	r3, r3
 80124b0:	029b      	lsls	r3, r3, #10
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	4313      	orrs	r3, r2
 80124b6:	b29a      	uxth	r2, r3
 80124b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80124ba:	801a      	strh	r2, [r3, #0]
 80124bc:	e042      	b.n	8012544 <USB_EPStartXfer+0x942>
 80124be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124c2:	095b      	lsrs	r3, r3, #5
 80124c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80124c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124cc:	f003 031f 	and.w	r3, r3, #31
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d104      	bne.n	80124de <USB_EPStartXfer+0x8dc>
 80124d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80124d8:	3b01      	subs	r3, #1
 80124da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80124de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80124e0:	881b      	ldrh	r3, [r3, #0]
 80124e2:	b29a      	uxth	r2, r3
 80124e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80124e8:	b29b      	uxth	r3, r3
 80124ea:	029b      	lsls	r3, r3, #10
 80124ec:	b29b      	uxth	r3, r3
 80124ee:	4313      	orrs	r3, r2
 80124f0:	b29b      	uxth	r3, r3
 80124f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80124f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80124fa:	b29a      	uxth	r2, r3
 80124fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80124fe:	801a      	strh	r2, [r3, #0]
 8012500:	e020      	b.n	8012544 <USB_EPStartXfer+0x942>
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	785b      	ldrb	r3, [r3, #1]
 8012506:	2b01      	cmp	r3, #1
 8012508:	d11c      	bne.n	8012544 <USB_EPStartXfer+0x942>
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012516:	b29b      	uxth	r3, r3
 8012518:	461a      	mov	r2, r3
 801251a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801251e:	4413      	add	r3, r2
 8012520:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	00da      	lsls	r2, r3, #3
 801252a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801252e:	4413      	add	r3, r2
 8012530:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012534:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801253c:	b29a      	uxth	r2, r3
 801253e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012542:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	891b      	ldrh	r3, [r3, #8]
 8012548:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	6959      	ldr	r1, [r3, #20]
 8012550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012554:	b29b      	uxth	r3, r3
 8012556:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f000 fa35 	bl	80129ca <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012560:	687a      	ldr	r2, [r7, #4]
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	781b      	ldrb	r3, [r3, #0]
 8012566:	009b      	lsls	r3, r3, #2
 8012568:	4413      	add	r3, r2
 801256a:	881b      	ldrh	r3, [r3, #0]
 801256c:	b29b      	uxth	r3, r3
 801256e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012572:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012576:	817b      	strh	r3, [r7, #10]
 8012578:	897b      	ldrh	r3, [r7, #10]
 801257a:	f083 0310 	eor.w	r3, r3, #16
 801257e:	817b      	strh	r3, [r7, #10]
 8012580:	897b      	ldrh	r3, [r7, #10]
 8012582:	f083 0320 	eor.w	r3, r3, #32
 8012586:	817b      	strh	r3, [r7, #10]
 8012588:	687a      	ldr	r2, [r7, #4]
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	009b      	lsls	r3, r3, #2
 8012590:	441a      	add	r2, r3
 8012592:	897b      	ldrh	r3, [r7, #10]
 8012594:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012598:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801259c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80125a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125a4:	b29b      	uxth	r3, r3
 80125a6:	8013      	strh	r3, [r2, #0]
 80125a8:	e0d5      	b.n	8012756 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	7b1b      	ldrb	r3, [r3, #12]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d156      	bne.n	8012660 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	699b      	ldr	r3, [r3, #24]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d122      	bne.n	8012600 <USB_EPStartXfer+0x9fe>
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	78db      	ldrb	r3, [r3, #3]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d11e      	bne.n	8012600 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80125c2:	687a      	ldr	r2, [r7, #4]
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	009b      	lsls	r3, r3, #2
 80125ca:	4413      	add	r3, r2
 80125cc:	881b      	ldrh	r3, [r3, #0]
 80125ce:	b29b      	uxth	r3, r3
 80125d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80125d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80125d8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80125dc:	687a      	ldr	r2, [r7, #4]
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	009b      	lsls	r3, r3, #2
 80125e4:	441a      	add	r2, r3
 80125e6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80125ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80125ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80125f2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80125f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125fa:	b29b      	uxth	r3, r3
 80125fc:	8013      	strh	r3, [r2, #0]
 80125fe:	e01d      	b.n	801263c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8012600:	687a      	ldr	r2, [r7, #4]
 8012602:	683b      	ldr	r3, [r7, #0]
 8012604:	781b      	ldrb	r3, [r3, #0]
 8012606:	009b      	lsls	r3, r3, #2
 8012608:	4413      	add	r3, r2
 801260a:	881b      	ldrh	r3, [r3, #0]
 801260c:	b29b      	uxth	r3, r3
 801260e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8012612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012616:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 801261a:	687a      	ldr	r2, [r7, #4]
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	781b      	ldrb	r3, [r3, #0]
 8012620:	009b      	lsls	r3, r3, #2
 8012622:	441a      	add	r2, r3
 8012624:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8012628:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801262c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012630:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012638:	b29b      	uxth	r3, r3
 801263a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	699a      	ldr	r2, [r3, #24]
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	691b      	ldr	r3, [r3, #16]
 8012644:	429a      	cmp	r2, r3
 8012646:	d907      	bls.n	8012658 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	699a      	ldr	r2, [r3, #24]
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	691b      	ldr	r3, [r3, #16]
 8012650:	1ad2      	subs	r2, r2, r3
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	619a      	str	r2, [r3, #24]
 8012656:	e054      	b.n	8012702 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	2200      	movs	r2, #0
 801265c:	619a      	str	r2, [r3, #24]
 801265e:	e050      	b.n	8012702 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	78db      	ldrb	r3, [r3, #3]
 8012664:	2b02      	cmp	r3, #2
 8012666:	d142      	bne.n	80126ee <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	69db      	ldr	r3, [r3, #28]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d048      	beq.n	8012702 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012670:	687a      	ldr	r2, [r7, #4]
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	009b      	lsls	r3, r3, #2
 8012678:	4413      	add	r3, r2
 801267a:	881b      	ldrh	r3, [r3, #0]
 801267c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012680:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012688:	2b00      	cmp	r3, #0
 801268a:	d005      	beq.n	8012698 <USB_EPStartXfer+0xa96>
 801268c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012694:	2b00      	cmp	r3, #0
 8012696:	d10b      	bne.n	80126b0 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012698:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 801269c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d12e      	bne.n	8012702 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80126a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80126a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d128      	bne.n	8012702 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80126b0:	687a      	ldr	r2, [r7, #4]
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	781b      	ldrb	r3, [r3, #0]
 80126b6:	009b      	lsls	r3, r3, #2
 80126b8:	4413      	add	r3, r2
 80126ba:	881b      	ldrh	r3, [r3, #0]
 80126bc:	b29b      	uxth	r3, r3
 80126be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80126c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80126c6:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80126ca:	687a      	ldr	r2, [r7, #4]
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	781b      	ldrb	r3, [r3, #0]
 80126d0:	009b      	lsls	r3, r3, #2
 80126d2:	441a      	add	r2, r3
 80126d4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 80126d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80126dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80126e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80126e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	8013      	strh	r3, [r2, #0]
 80126ec:	e009      	b.n	8012702 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	78db      	ldrb	r3, [r3, #3]
 80126f2:	2b01      	cmp	r3, #1
 80126f4:	d103      	bne.n	80126fe <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	2200      	movs	r2, #0
 80126fa:	619a      	str	r2, [r3, #24]
 80126fc:	e001      	b.n	8012702 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 80126fe:	2301      	movs	r3, #1
 8012700:	e02a      	b.n	8012758 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012702:	687a      	ldr	r2, [r7, #4]
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	009b      	lsls	r3, r3, #2
 801270a:	4413      	add	r3, r2
 801270c:	881b      	ldrh	r3, [r3, #0]
 801270e:	b29b      	uxth	r3, r3
 8012710:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012718:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 801271c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012720:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012724:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012728:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801272c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012730:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012734:	687a      	ldr	r2, [r7, #4]
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	781b      	ldrb	r3, [r3, #0]
 801273a:	009b      	lsls	r3, r3, #2
 801273c:	441a      	add	r2, r3
 801273e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012742:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012746:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801274a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801274e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012752:	b29b      	uxth	r3, r3
 8012754:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012756:	2300      	movs	r3, #0
}
 8012758:	4618      	mov	r0, r3
 801275a:	37b0      	adds	r7, #176	@ 0xb0
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}

08012760 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012760:	b480      	push	{r7}
 8012762:	b085      	sub	sp, #20
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
 8012768:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	785b      	ldrb	r3, [r3, #1]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d020      	beq.n	80127b4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012772:	687a      	ldr	r2, [r7, #4]
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	009b      	lsls	r3, r3, #2
 801277a:	4413      	add	r3, r2
 801277c:	881b      	ldrh	r3, [r3, #0]
 801277e:	b29b      	uxth	r3, r3
 8012780:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012784:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012788:	81bb      	strh	r3, [r7, #12]
 801278a:	89bb      	ldrh	r3, [r7, #12]
 801278c:	f083 0310 	eor.w	r3, r3, #16
 8012790:	81bb      	strh	r3, [r7, #12]
 8012792:	687a      	ldr	r2, [r7, #4]
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	781b      	ldrb	r3, [r3, #0]
 8012798:	009b      	lsls	r3, r3, #2
 801279a:	441a      	add	r2, r3
 801279c:	89bb      	ldrh	r3, [r7, #12]
 801279e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80127a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80127a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80127aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80127ae:	b29b      	uxth	r3, r3
 80127b0:	8013      	strh	r3, [r2, #0]
 80127b2:	e01f      	b.n	80127f4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80127b4:	687a      	ldr	r2, [r7, #4]
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	781b      	ldrb	r3, [r3, #0]
 80127ba:	009b      	lsls	r3, r3, #2
 80127bc:	4413      	add	r3, r2
 80127be:	881b      	ldrh	r3, [r3, #0]
 80127c0:	b29b      	uxth	r3, r3
 80127c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80127c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80127ca:	81fb      	strh	r3, [r7, #14]
 80127cc:	89fb      	ldrh	r3, [r7, #14]
 80127ce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80127d2:	81fb      	strh	r3, [r7, #14]
 80127d4:	687a      	ldr	r2, [r7, #4]
 80127d6:	683b      	ldr	r3, [r7, #0]
 80127d8:	781b      	ldrb	r3, [r3, #0]
 80127da:	009b      	lsls	r3, r3, #2
 80127dc:	441a      	add	r2, r3
 80127de:	89fb      	ldrh	r3, [r7, #14]
 80127e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80127e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80127e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80127ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80127f0:	b29b      	uxth	r3, r3
 80127f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80127f4:	2300      	movs	r3, #0
}
 80127f6:	4618      	mov	r0, r3
 80127f8:	3714      	adds	r7, #20
 80127fa:	46bd      	mov	sp, r7
 80127fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012800:	4770      	bx	lr

08012802 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012802:	b480      	push	{r7}
 8012804:	b087      	sub	sp, #28
 8012806:	af00      	add	r7, sp, #0
 8012808:	6078      	str	r0, [r7, #4]
 801280a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	785b      	ldrb	r3, [r3, #1]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d04c      	beq.n	80128ae <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012814:	687a      	ldr	r2, [r7, #4]
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	009b      	lsls	r3, r3, #2
 801281c:	4413      	add	r3, r2
 801281e:	881b      	ldrh	r3, [r3, #0]
 8012820:	823b      	strh	r3, [r7, #16]
 8012822:	8a3b      	ldrh	r3, [r7, #16]
 8012824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012828:	2b00      	cmp	r3, #0
 801282a:	d01b      	beq.n	8012864 <USB_EPClearStall+0x62>
 801282c:	687a      	ldr	r2, [r7, #4]
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	781b      	ldrb	r3, [r3, #0]
 8012832:	009b      	lsls	r3, r3, #2
 8012834:	4413      	add	r3, r2
 8012836:	881b      	ldrh	r3, [r3, #0]
 8012838:	b29b      	uxth	r3, r3
 801283a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801283e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012842:	81fb      	strh	r3, [r7, #14]
 8012844:	687a      	ldr	r2, [r7, #4]
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	009b      	lsls	r3, r3, #2
 801284c:	441a      	add	r2, r3
 801284e:	89fb      	ldrh	r3, [r7, #14]
 8012850:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012854:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012858:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801285c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012860:	b29b      	uxth	r3, r3
 8012862:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	78db      	ldrb	r3, [r3, #3]
 8012868:	2b01      	cmp	r3, #1
 801286a:	d06c      	beq.n	8012946 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801286c:	687a      	ldr	r2, [r7, #4]
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	4413      	add	r3, r2
 8012876:	881b      	ldrh	r3, [r3, #0]
 8012878:	b29b      	uxth	r3, r3
 801287a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801287e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012882:	81bb      	strh	r3, [r7, #12]
 8012884:	89bb      	ldrh	r3, [r7, #12]
 8012886:	f083 0320 	eor.w	r3, r3, #32
 801288a:	81bb      	strh	r3, [r7, #12]
 801288c:	687a      	ldr	r2, [r7, #4]
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	781b      	ldrb	r3, [r3, #0]
 8012892:	009b      	lsls	r3, r3, #2
 8012894:	441a      	add	r2, r3
 8012896:	89bb      	ldrh	r3, [r7, #12]
 8012898:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801289c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80128a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80128a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80128a8:	b29b      	uxth	r3, r3
 80128aa:	8013      	strh	r3, [r2, #0]
 80128ac:	e04b      	b.n	8012946 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80128ae:	687a      	ldr	r2, [r7, #4]
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	781b      	ldrb	r3, [r3, #0]
 80128b4:	009b      	lsls	r3, r3, #2
 80128b6:	4413      	add	r3, r2
 80128b8:	881b      	ldrh	r3, [r3, #0]
 80128ba:	82fb      	strh	r3, [r7, #22]
 80128bc:	8afb      	ldrh	r3, [r7, #22]
 80128be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d01b      	beq.n	80128fe <USB_EPClearStall+0xfc>
 80128c6:	687a      	ldr	r2, [r7, #4]
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	009b      	lsls	r3, r3, #2
 80128ce:	4413      	add	r3, r2
 80128d0:	881b      	ldrh	r3, [r3, #0]
 80128d2:	b29b      	uxth	r3, r3
 80128d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80128d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80128dc:	82bb      	strh	r3, [r7, #20]
 80128de:	687a      	ldr	r2, [r7, #4]
 80128e0:	683b      	ldr	r3, [r7, #0]
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	009b      	lsls	r3, r3, #2
 80128e6:	441a      	add	r2, r3
 80128e8:	8abb      	ldrh	r3, [r7, #20]
 80128ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80128ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80128f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80128f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80128fe:	687a      	ldr	r2, [r7, #4]
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	009b      	lsls	r3, r3, #2
 8012906:	4413      	add	r3, r2
 8012908:	881b      	ldrh	r3, [r3, #0]
 801290a:	b29b      	uxth	r3, r3
 801290c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012910:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012914:	827b      	strh	r3, [r7, #18]
 8012916:	8a7b      	ldrh	r3, [r7, #18]
 8012918:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801291c:	827b      	strh	r3, [r7, #18]
 801291e:	8a7b      	ldrh	r3, [r7, #18]
 8012920:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012924:	827b      	strh	r3, [r7, #18]
 8012926:	687a      	ldr	r2, [r7, #4]
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	009b      	lsls	r3, r3, #2
 801292e:	441a      	add	r2, r3
 8012930:	8a7b      	ldrh	r3, [r7, #18]
 8012932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801293a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801293e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012942:	b29b      	uxth	r3, r3
 8012944:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012946:	2300      	movs	r3, #0
}
 8012948:	4618      	mov	r0, r3
 801294a:	371c      	adds	r7, #28
 801294c:	46bd      	mov	sp, r7
 801294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012952:	4770      	bx	lr

08012954 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012954:	b480      	push	{r7}
 8012956:	b083      	sub	sp, #12
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
 801295c:	460b      	mov	r3, r1
 801295e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012960:	78fb      	ldrb	r3, [r7, #3]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d103      	bne.n	801296e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	2280      	movs	r2, #128	@ 0x80
 801296a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801296e:	2300      	movs	r3, #0
}
 8012970:	4618      	mov	r0, r3
 8012972:	370c      	adds	r7, #12
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr

0801297c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801297c:	b480      	push	{r7}
 801297e:	b083      	sub	sp, #12
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801298a:	b29b      	uxth	r3, r3
 801298c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012994:	b29a      	uxth	r2, r3
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 801299c:	2300      	movs	r3, #0
}
 801299e:	4618      	mov	r0, r3
 80129a0:	370c      	adds	r7, #12
 80129a2:	46bd      	mov	sp, r7
 80129a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a8:	4770      	bx	lr

080129aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80129aa:	b480      	push	{r7}
 80129ac:	b085      	sub	sp, #20
 80129ae:	af00      	add	r7, sp, #0
 80129b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80129b8:	b29b      	uxth	r3, r3
 80129ba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80129bc:	68fb      	ldr	r3, [r7, #12]
}
 80129be:	4618      	mov	r0, r3
 80129c0:	3714      	adds	r7, #20
 80129c2:	46bd      	mov	sp, r7
 80129c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c8:	4770      	bx	lr

080129ca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80129ca:	b480      	push	{r7}
 80129cc:	b08b      	sub	sp, #44	@ 0x2c
 80129ce:	af00      	add	r7, sp, #0
 80129d0:	60f8      	str	r0, [r7, #12]
 80129d2:	60b9      	str	r1, [r7, #8]
 80129d4:	4611      	mov	r1, r2
 80129d6:	461a      	mov	r2, r3
 80129d8:	460b      	mov	r3, r1
 80129da:	80fb      	strh	r3, [r7, #6]
 80129dc:	4613      	mov	r3, r2
 80129de:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80129e0:	88bb      	ldrh	r3, [r7, #4]
 80129e2:	3301      	adds	r3, #1
 80129e4:	085b      	lsrs	r3, r3, #1
 80129e6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80129f0:	88fa      	ldrh	r2, [r7, #6]
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	4413      	add	r3, r2
 80129f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80129fa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80129fc:	69bb      	ldr	r3, [r7, #24]
 80129fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8012a00:	e01b      	b.n	8012a3a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8012a02:	69fb      	ldr	r3, [r7, #28]
 8012a04:	781b      	ldrb	r3, [r3, #0]
 8012a06:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8012a08:	69fb      	ldr	r3, [r7, #28]
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	781b      	ldrb	r3, [r3, #0]
 8012a0e:	021b      	lsls	r3, r3, #8
 8012a10:	b21a      	sxth	r2, r3
 8012a12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012a16:	4313      	orrs	r3, r2
 8012a18:	b21b      	sxth	r3, r3
 8012a1a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8012a1c:	6a3b      	ldr	r3, [r7, #32]
 8012a1e:	8a7a      	ldrh	r2, [r7, #18]
 8012a20:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012a22:	6a3b      	ldr	r3, [r7, #32]
 8012a24:	3302      	adds	r3, #2
 8012a26:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012a28:	69fb      	ldr	r3, [r7, #28]
 8012a2a:	3301      	adds	r3, #1
 8012a2c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8012a2e:	69fb      	ldr	r3, [r7, #28]
 8012a30:	3301      	adds	r3, #1
 8012a32:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a36:	3b01      	subs	r3, #1
 8012a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8012a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d1e0      	bne.n	8012a02 <USB_WritePMA+0x38>
  }
}
 8012a40:	bf00      	nop
 8012a42:	bf00      	nop
 8012a44:	372c      	adds	r7, #44	@ 0x2c
 8012a46:	46bd      	mov	sp, r7
 8012a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4c:	4770      	bx	lr

08012a4e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012a4e:	b480      	push	{r7}
 8012a50:	b08b      	sub	sp, #44	@ 0x2c
 8012a52:	af00      	add	r7, sp, #0
 8012a54:	60f8      	str	r0, [r7, #12]
 8012a56:	60b9      	str	r1, [r7, #8]
 8012a58:	4611      	mov	r1, r2
 8012a5a:	461a      	mov	r2, r3
 8012a5c:	460b      	mov	r3, r1
 8012a5e:	80fb      	strh	r3, [r7, #6]
 8012a60:	4613      	mov	r3, r2
 8012a62:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012a64:	88bb      	ldrh	r3, [r7, #4]
 8012a66:	085b      	lsrs	r3, r3, #1
 8012a68:	b29b      	uxth	r3, r3
 8012a6a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012a74:	88fa      	ldrh	r2, [r7, #6]
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	4413      	add	r3, r2
 8012a7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012a7e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012a80:	69bb      	ldr	r3, [r7, #24]
 8012a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8012a84:	e018      	b.n	8012ab8 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8012a86:	6a3b      	ldr	r3, [r7, #32]
 8012a88:	881b      	ldrh	r3, [r3, #0]
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012a8e:	6a3b      	ldr	r3, [r7, #32]
 8012a90:	3302      	adds	r3, #2
 8012a92:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012a94:	693b      	ldr	r3, [r7, #16]
 8012a96:	b2da      	uxtb	r2, r3
 8012a98:	69fb      	ldr	r3, [r7, #28]
 8012a9a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012a9c:	69fb      	ldr	r3, [r7, #28]
 8012a9e:	3301      	adds	r3, #1
 8012aa0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8012aa2:	693b      	ldr	r3, [r7, #16]
 8012aa4:	0a1b      	lsrs	r3, r3, #8
 8012aa6:	b2da      	uxtb	r2, r3
 8012aa8:	69fb      	ldr	r3, [r7, #28]
 8012aaa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012aac:	69fb      	ldr	r3, [r7, #28]
 8012aae:	3301      	adds	r3, #1
 8012ab0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ab4:	3b01      	subs	r3, #1
 8012ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d1e3      	bne.n	8012a86 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012abe:	88bb      	ldrh	r3, [r7, #4]
 8012ac0:	f003 0301 	and.w	r3, r3, #1
 8012ac4:	b29b      	uxth	r3, r3
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d007      	beq.n	8012ada <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8012aca:	6a3b      	ldr	r3, [r7, #32]
 8012acc:	881b      	ldrh	r3, [r3, #0]
 8012ace:	b29b      	uxth	r3, r3
 8012ad0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012ad2:	693b      	ldr	r3, [r7, #16]
 8012ad4:	b2da      	uxtb	r2, r3
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	701a      	strb	r2, [r3, #0]
  }
}
 8012ada:	bf00      	nop
 8012adc:	372c      	adds	r7, #44	@ 0x2c
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae4:	4770      	bx	lr
	...

08012ae8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b084      	sub	sp, #16
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
 8012af0:	460b      	mov	r3, r1
 8012af2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012af4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8012af8:	f006 f9e8 	bl	8018ecc <USBD_static_malloc>
 8012afc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d109      	bne.n	8012b18 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	32b0      	adds	r2, #176	@ 0xb0
 8012b0e:	2100      	movs	r1, #0
 8012b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012b14:	2302      	movs	r3, #2
 8012b16:	e0d4      	b.n	8012cc2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012b18:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8012b1c:	2100      	movs	r1, #0
 8012b1e:	68f8      	ldr	r0, [r7, #12]
 8012b20:	f008 fbf3 	bl	801b30a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	32b0      	adds	r2, #176	@ 0xb0
 8012b2e:	68f9      	ldr	r1, [r7, #12]
 8012b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	32b0      	adds	r2, #176	@ 0xb0
 8012b3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	7c1b      	ldrb	r3, [r3, #16]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d138      	bne.n	8012bc2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012b50:	4b5e      	ldr	r3, [pc, #376]	@ (8012ccc <USBD_CDC_Init+0x1e4>)
 8012b52:	7819      	ldrb	r1, [r3, #0]
 8012b54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012b58:	2202      	movs	r2, #2
 8012b5a:	6878      	ldr	r0, [r7, #4]
 8012b5c:	f006 f85d 	bl	8018c1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012b60:	4b5a      	ldr	r3, [pc, #360]	@ (8012ccc <USBD_CDC_Init+0x1e4>)
 8012b62:	781b      	ldrb	r3, [r3, #0]
 8012b64:	f003 020f 	and.w	r2, r3, #15
 8012b68:	6879      	ldr	r1, [r7, #4]
 8012b6a:	4613      	mov	r3, r2
 8012b6c:	009b      	lsls	r3, r3, #2
 8012b6e:	4413      	add	r3, r2
 8012b70:	009b      	lsls	r3, r3, #2
 8012b72:	440b      	add	r3, r1
 8012b74:	3324      	adds	r3, #36	@ 0x24
 8012b76:	2201      	movs	r2, #1
 8012b78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012b7a:	4b55      	ldr	r3, [pc, #340]	@ (8012cd0 <USBD_CDC_Init+0x1e8>)
 8012b7c:	7819      	ldrb	r1, [r3, #0]
 8012b7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012b82:	2202      	movs	r2, #2
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f006 f848 	bl	8018c1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012b8a:	4b51      	ldr	r3, [pc, #324]	@ (8012cd0 <USBD_CDC_Init+0x1e8>)
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	f003 020f 	and.w	r2, r3, #15
 8012b92:	6879      	ldr	r1, [r7, #4]
 8012b94:	4613      	mov	r3, r2
 8012b96:	009b      	lsls	r3, r3, #2
 8012b98:	4413      	add	r3, r2
 8012b9a:	009b      	lsls	r3, r3, #2
 8012b9c:	440b      	add	r3, r1
 8012b9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012ba2:	2201      	movs	r2, #1
 8012ba4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012ba6:	4b4b      	ldr	r3, [pc, #300]	@ (8012cd4 <USBD_CDC_Init+0x1ec>)
 8012ba8:	781b      	ldrb	r3, [r3, #0]
 8012baa:	f003 020f 	and.w	r2, r3, #15
 8012bae:	6879      	ldr	r1, [r7, #4]
 8012bb0:	4613      	mov	r3, r2
 8012bb2:	009b      	lsls	r3, r3, #2
 8012bb4:	4413      	add	r3, r2
 8012bb6:	009b      	lsls	r3, r3, #2
 8012bb8:	440b      	add	r3, r1
 8012bba:	3326      	adds	r3, #38	@ 0x26
 8012bbc:	2210      	movs	r2, #16
 8012bbe:	801a      	strh	r2, [r3, #0]
 8012bc0:	e035      	b.n	8012c2e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012bc2:	4b42      	ldr	r3, [pc, #264]	@ (8012ccc <USBD_CDC_Init+0x1e4>)
 8012bc4:	7819      	ldrb	r1, [r3, #0]
 8012bc6:	2340      	movs	r3, #64	@ 0x40
 8012bc8:	2202      	movs	r2, #2
 8012bca:	6878      	ldr	r0, [r7, #4]
 8012bcc:	f006 f825 	bl	8018c1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012bd0:	4b3e      	ldr	r3, [pc, #248]	@ (8012ccc <USBD_CDC_Init+0x1e4>)
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	f003 020f 	and.w	r2, r3, #15
 8012bd8:	6879      	ldr	r1, [r7, #4]
 8012bda:	4613      	mov	r3, r2
 8012bdc:	009b      	lsls	r3, r3, #2
 8012bde:	4413      	add	r3, r2
 8012be0:	009b      	lsls	r3, r3, #2
 8012be2:	440b      	add	r3, r1
 8012be4:	3324      	adds	r3, #36	@ 0x24
 8012be6:	2201      	movs	r2, #1
 8012be8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012bea:	4b39      	ldr	r3, [pc, #228]	@ (8012cd0 <USBD_CDC_Init+0x1e8>)
 8012bec:	7819      	ldrb	r1, [r3, #0]
 8012bee:	2340      	movs	r3, #64	@ 0x40
 8012bf0:	2202      	movs	r2, #2
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f006 f811 	bl	8018c1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012bf8:	4b35      	ldr	r3, [pc, #212]	@ (8012cd0 <USBD_CDC_Init+0x1e8>)
 8012bfa:	781b      	ldrb	r3, [r3, #0]
 8012bfc:	f003 020f 	and.w	r2, r3, #15
 8012c00:	6879      	ldr	r1, [r7, #4]
 8012c02:	4613      	mov	r3, r2
 8012c04:	009b      	lsls	r3, r3, #2
 8012c06:	4413      	add	r3, r2
 8012c08:	009b      	lsls	r3, r3, #2
 8012c0a:	440b      	add	r3, r1
 8012c0c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012c10:	2201      	movs	r2, #1
 8012c12:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012c14:	4b2f      	ldr	r3, [pc, #188]	@ (8012cd4 <USBD_CDC_Init+0x1ec>)
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	f003 020f 	and.w	r2, r3, #15
 8012c1c:	6879      	ldr	r1, [r7, #4]
 8012c1e:	4613      	mov	r3, r2
 8012c20:	009b      	lsls	r3, r3, #2
 8012c22:	4413      	add	r3, r2
 8012c24:	009b      	lsls	r3, r3, #2
 8012c26:	440b      	add	r3, r1
 8012c28:	3326      	adds	r3, #38	@ 0x26
 8012c2a:	2210      	movs	r2, #16
 8012c2c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012c2e:	4b29      	ldr	r3, [pc, #164]	@ (8012cd4 <USBD_CDC_Init+0x1ec>)
 8012c30:	7819      	ldrb	r1, [r3, #0]
 8012c32:	2308      	movs	r3, #8
 8012c34:	2203      	movs	r2, #3
 8012c36:	6878      	ldr	r0, [r7, #4]
 8012c38:	f005 ffef 	bl	8018c1a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012c3c:	4b25      	ldr	r3, [pc, #148]	@ (8012cd4 <USBD_CDC_Init+0x1ec>)
 8012c3e:	781b      	ldrb	r3, [r3, #0]
 8012c40:	f003 020f 	and.w	r2, r3, #15
 8012c44:	6879      	ldr	r1, [r7, #4]
 8012c46:	4613      	mov	r3, r2
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	4413      	add	r3, r2
 8012c4c:	009b      	lsls	r3, r3, #2
 8012c4e:	440b      	add	r3, r1
 8012c50:	3324      	adds	r3, #36	@ 0x24
 8012c52:	2201      	movs	r2, #1
 8012c54:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	2200      	movs	r2, #0
 8012c5a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	33b0      	adds	r3, #176	@ 0xb0
 8012c68:	009b      	lsls	r3, r3, #2
 8012c6a:	4413      	add	r3, r2
 8012c6c:	685b      	ldr	r3, [r3, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	2200      	movs	r2, #0
 8012c76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d101      	bne.n	8012c90 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012c8c:	2302      	movs	r3, #2
 8012c8e:	e018      	b.n	8012cc2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	7c1b      	ldrb	r3, [r3, #16]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d10a      	bne.n	8012cae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012c98:	4b0d      	ldr	r3, [pc, #52]	@ (8012cd0 <USBD_CDC_Init+0x1e8>)
 8012c9a:	7819      	ldrb	r1, [r3, #0]
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012ca2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012ca6:	6878      	ldr	r0, [r7, #4]
 8012ca8:	f006 f8a6 	bl	8018df8 <USBD_LL_PrepareReceive>
 8012cac:	e008      	b.n	8012cc0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012cae:	4b08      	ldr	r3, [pc, #32]	@ (8012cd0 <USBD_CDC_Init+0x1e8>)
 8012cb0:	7819      	ldrb	r1, [r3, #0]
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012cb8:	2340      	movs	r3, #64	@ 0x40
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f006 f89c 	bl	8018df8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012cc0:	2300      	movs	r3, #0
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3710      	adds	r7, #16
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}
 8012cca:	bf00      	nop
 8012ccc:	200000bf 	.word	0x200000bf
 8012cd0:	200000c0 	.word	0x200000c0
 8012cd4:	200000c1 	.word	0x200000c1

08012cd8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b082      	sub	sp, #8
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
 8012ce0:	460b      	mov	r3, r1
 8012ce2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012ce4:	4b3a      	ldr	r3, [pc, #232]	@ (8012dd0 <USBD_CDC_DeInit+0xf8>)
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	4619      	mov	r1, r3
 8012cea:	6878      	ldr	r0, [r7, #4]
 8012cec:	f005 ffbb 	bl	8018c66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012cf0:	4b37      	ldr	r3, [pc, #220]	@ (8012dd0 <USBD_CDC_DeInit+0xf8>)
 8012cf2:	781b      	ldrb	r3, [r3, #0]
 8012cf4:	f003 020f 	and.w	r2, r3, #15
 8012cf8:	6879      	ldr	r1, [r7, #4]
 8012cfa:	4613      	mov	r3, r2
 8012cfc:	009b      	lsls	r3, r3, #2
 8012cfe:	4413      	add	r3, r2
 8012d00:	009b      	lsls	r3, r3, #2
 8012d02:	440b      	add	r3, r1
 8012d04:	3324      	adds	r3, #36	@ 0x24
 8012d06:	2200      	movs	r2, #0
 8012d08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8012d0a:	4b32      	ldr	r3, [pc, #200]	@ (8012dd4 <USBD_CDC_DeInit+0xfc>)
 8012d0c:	781b      	ldrb	r3, [r3, #0]
 8012d0e:	4619      	mov	r1, r3
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f005 ffa8 	bl	8018c66 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012d16:	4b2f      	ldr	r3, [pc, #188]	@ (8012dd4 <USBD_CDC_DeInit+0xfc>)
 8012d18:	781b      	ldrb	r3, [r3, #0]
 8012d1a:	f003 020f 	and.w	r2, r3, #15
 8012d1e:	6879      	ldr	r1, [r7, #4]
 8012d20:	4613      	mov	r3, r2
 8012d22:	009b      	lsls	r3, r3, #2
 8012d24:	4413      	add	r3, r2
 8012d26:	009b      	lsls	r3, r3, #2
 8012d28:	440b      	add	r3, r1
 8012d2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012d2e:	2200      	movs	r2, #0
 8012d30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012d32:	4b29      	ldr	r3, [pc, #164]	@ (8012dd8 <USBD_CDC_DeInit+0x100>)
 8012d34:	781b      	ldrb	r3, [r3, #0]
 8012d36:	4619      	mov	r1, r3
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	f005 ff94 	bl	8018c66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8012d3e:	4b26      	ldr	r3, [pc, #152]	@ (8012dd8 <USBD_CDC_DeInit+0x100>)
 8012d40:	781b      	ldrb	r3, [r3, #0]
 8012d42:	f003 020f 	and.w	r2, r3, #15
 8012d46:	6879      	ldr	r1, [r7, #4]
 8012d48:	4613      	mov	r3, r2
 8012d4a:	009b      	lsls	r3, r3, #2
 8012d4c:	4413      	add	r3, r2
 8012d4e:	009b      	lsls	r3, r3, #2
 8012d50:	440b      	add	r3, r1
 8012d52:	3324      	adds	r3, #36	@ 0x24
 8012d54:	2200      	movs	r2, #0
 8012d56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012d58:	4b1f      	ldr	r3, [pc, #124]	@ (8012dd8 <USBD_CDC_DeInit+0x100>)
 8012d5a:	781b      	ldrb	r3, [r3, #0]
 8012d5c:	f003 020f 	and.w	r2, r3, #15
 8012d60:	6879      	ldr	r1, [r7, #4]
 8012d62:	4613      	mov	r3, r2
 8012d64:	009b      	lsls	r3, r3, #2
 8012d66:	4413      	add	r3, r2
 8012d68:	009b      	lsls	r3, r3, #2
 8012d6a:	440b      	add	r3, r1
 8012d6c:	3326      	adds	r3, #38	@ 0x26
 8012d6e:	2200      	movs	r2, #0
 8012d70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	32b0      	adds	r2, #176	@ 0xb0
 8012d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d01f      	beq.n	8012dc4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012d8a:	687a      	ldr	r2, [r7, #4]
 8012d8c:	33b0      	adds	r3, #176	@ 0xb0
 8012d8e:	009b      	lsls	r3, r3, #2
 8012d90:	4413      	add	r3, r2
 8012d92:	685b      	ldr	r3, [r3, #4]
 8012d94:	685b      	ldr	r3, [r3, #4]
 8012d96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	32b0      	adds	r2, #176	@ 0xb0
 8012da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012da6:	4618      	mov	r0, r3
 8012da8:	f006 f89e 	bl	8018ee8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	32b0      	adds	r2, #176	@ 0xb0
 8012db6:	2100      	movs	r1, #0
 8012db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012dc4:	2300      	movs	r3, #0
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3708      	adds	r7, #8
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	200000bf 	.word	0x200000bf
 8012dd4:	200000c0 	.word	0x200000c0
 8012dd8:	200000c1 	.word	0x200000c1

08012ddc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b086      	sub	sp, #24
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
 8012de4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	32b0      	adds	r2, #176	@ 0xb0
 8012df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012df4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012df6:	2300      	movs	r3, #0
 8012df8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012e02:	693b      	ldr	r3, [r7, #16]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d101      	bne.n	8012e0c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012e08:	2303      	movs	r3, #3
 8012e0a:	e0bf      	b.n	8012f8c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	781b      	ldrb	r3, [r3, #0]
 8012e10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d050      	beq.n	8012eba <USBD_CDC_Setup+0xde>
 8012e18:	2b20      	cmp	r3, #32
 8012e1a:	f040 80af 	bne.w	8012f7c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	88db      	ldrh	r3, [r3, #6]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d03a      	beq.n	8012e9c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	781b      	ldrb	r3, [r3, #0]
 8012e2a:	b25b      	sxtb	r3, r3
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	da1b      	bge.n	8012e68 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012e36:	687a      	ldr	r2, [r7, #4]
 8012e38:	33b0      	adds	r3, #176	@ 0xb0
 8012e3a:	009b      	lsls	r3, r3, #2
 8012e3c:	4413      	add	r3, r2
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	689b      	ldr	r3, [r3, #8]
 8012e42:	683a      	ldr	r2, [r7, #0]
 8012e44:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012e46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012e48:	683a      	ldr	r2, [r7, #0]
 8012e4a:	88d2      	ldrh	r2, [r2, #6]
 8012e4c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	88db      	ldrh	r3, [r3, #6]
 8012e52:	2b07      	cmp	r3, #7
 8012e54:	bf28      	it	cs
 8012e56:	2307      	movcs	r3, #7
 8012e58:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	89fa      	ldrh	r2, [r7, #14]
 8012e5e:	4619      	mov	r1, r3
 8012e60:	6878      	ldr	r0, [r7, #4]
 8012e62:	f001 fd2b 	bl	80148bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012e66:	e090      	b.n	8012f8a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	785a      	ldrb	r2, [r3, #1]
 8012e6c:	693b      	ldr	r3, [r7, #16]
 8012e6e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	88db      	ldrh	r3, [r3, #6]
 8012e76:	2b3f      	cmp	r3, #63	@ 0x3f
 8012e78:	d803      	bhi.n	8012e82 <USBD_CDC_Setup+0xa6>
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	88db      	ldrh	r3, [r3, #6]
 8012e7e:	b2da      	uxtb	r2, r3
 8012e80:	e000      	b.n	8012e84 <USBD_CDC_Setup+0xa8>
 8012e82:	2240      	movs	r2, #64	@ 0x40
 8012e84:	693b      	ldr	r3, [r7, #16]
 8012e86:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8012e8a:	6939      	ldr	r1, [r7, #16]
 8012e8c:	693b      	ldr	r3, [r7, #16]
 8012e8e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8012e92:	461a      	mov	r2, r3
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f001 fd3d 	bl	8014914 <USBD_CtlPrepareRx>
      break;
 8012e9a:	e076      	b.n	8012f8a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012ea2:	687a      	ldr	r2, [r7, #4]
 8012ea4:	33b0      	adds	r3, #176	@ 0xb0
 8012ea6:	009b      	lsls	r3, r3, #2
 8012ea8:	4413      	add	r3, r2
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	689b      	ldr	r3, [r3, #8]
 8012eae:	683a      	ldr	r2, [r7, #0]
 8012eb0:	7850      	ldrb	r0, [r2, #1]
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	6839      	ldr	r1, [r7, #0]
 8012eb6:	4798      	blx	r3
      break;
 8012eb8:	e067      	b.n	8012f8a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	785b      	ldrb	r3, [r3, #1]
 8012ebe:	2b0b      	cmp	r3, #11
 8012ec0:	d851      	bhi.n	8012f66 <USBD_CDC_Setup+0x18a>
 8012ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8012ec8 <USBD_CDC_Setup+0xec>)
 8012ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ec8:	08012ef9 	.word	0x08012ef9
 8012ecc:	08012f75 	.word	0x08012f75
 8012ed0:	08012f67 	.word	0x08012f67
 8012ed4:	08012f67 	.word	0x08012f67
 8012ed8:	08012f67 	.word	0x08012f67
 8012edc:	08012f67 	.word	0x08012f67
 8012ee0:	08012f67 	.word	0x08012f67
 8012ee4:	08012f67 	.word	0x08012f67
 8012ee8:	08012f67 	.word	0x08012f67
 8012eec:	08012f67 	.word	0x08012f67
 8012ef0:	08012f23 	.word	0x08012f23
 8012ef4:	08012f4d 	.word	0x08012f4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012efe:	b2db      	uxtb	r3, r3
 8012f00:	2b03      	cmp	r3, #3
 8012f02:	d107      	bne.n	8012f14 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012f04:	f107 030a 	add.w	r3, r7, #10
 8012f08:	2202      	movs	r2, #2
 8012f0a:	4619      	mov	r1, r3
 8012f0c:	6878      	ldr	r0, [r7, #4]
 8012f0e:	f001 fcd5 	bl	80148bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012f12:	e032      	b.n	8012f7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012f14:	6839      	ldr	r1, [r7, #0]
 8012f16:	6878      	ldr	r0, [r7, #4]
 8012f18:	f001 fc53 	bl	80147c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8012f1c:	2303      	movs	r3, #3
 8012f1e:	75fb      	strb	r3, [r7, #23]
          break;
 8012f20:	e02b      	b.n	8012f7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f28:	b2db      	uxtb	r3, r3
 8012f2a:	2b03      	cmp	r3, #3
 8012f2c:	d107      	bne.n	8012f3e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012f2e:	f107 030d 	add.w	r3, r7, #13
 8012f32:	2201      	movs	r2, #1
 8012f34:	4619      	mov	r1, r3
 8012f36:	6878      	ldr	r0, [r7, #4]
 8012f38:	f001 fcc0 	bl	80148bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012f3c:	e01d      	b.n	8012f7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012f3e:	6839      	ldr	r1, [r7, #0]
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f001 fc3e 	bl	80147c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8012f46:	2303      	movs	r3, #3
 8012f48:	75fb      	strb	r3, [r7, #23]
          break;
 8012f4a:	e016      	b.n	8012f7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f52:	b2db      	uxtb	r3, r3
 8012f54:	2b03      	cmp	r3, #3
 8012f56:	d00f      	beq.n	8012f78 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8012f58:	6839      	ldr	r1, [r7, #0]
 8012f5a:	6878      	ldr	r0, [r7, #4]
 8012f5c:	f001 fc31 	bl	80147c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8012f60:	2303      	movs	r3, #3
 8012f62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012f64:	e008      	b.n	8012f78 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012f66:	6839      	ldr	r1, [r7, #0]
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f001 fc2a 	bl	80147c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8012f6e:	2303      	movs	r3, #3
 8012f70:	75fb      	strb	r3, [r7, #23]
          break;
 8012f72:	e002      	b.n	8012f7a <USBD_CDC_Setup+0x19e>
          break;
 8012f74:	bf00      	nop
 8012f76:	e008      	b.n	8012f8a <USBD_CDC_Setup+0x1ae>
          break;
 8012f78:	bf00      	nop
      }
      break;
 8012f7a:	e006      	b.n	8012f8a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012f7c:	6839      	ldr	r1, [r7, #0]
 8012f7e:	6878      	ldr	r0, [r7, #4]
 8012f80:	f001 fc1f 	bl	80147c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8012f84:	2303      	movs	r3, #3
 8012f86:	75fb      	strb	r3, [r7, #23]
      break;
 8012f88:	bf00      	nop
  }

  return (uint8_t)ret;
 8012f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	3718      	adds	r7, #24
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd80      	pop	{r7, pc}

08012f94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b084      	sub	sp, #16
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
 8012f9c:	460b      	mov	r3, r1
 8012f9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012fa6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	32b0      	adds	r2, #176	@ 0xb0
 8012fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d101      	bne.n	8012fbe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8012fba:	2303      	movs	r3, #3
 8012fbc:	e065      	b.n	801308a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	32b0      	adds	r2, #176	@ 0xb0
 8012fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fcc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012fce:	78fb      	ldrb	r3, [r7, #3]
 8012fd0:	f003 020f 	and.w	r2, r3, #15
 8012fd4:	6879      	ldr	r1, [r7, #4]
 8012fd6:	4613      	mov	r3, r2
 8012fd8:	009b      	lsls	r3, r3, #2
 8012fda:	4413      	add	r3, r2
 8012fdc:	009b      	lsls	r3, r3, #2
 8012fde:	440b      	add	r3, r1
 8012fe0:	3318      	adds	r3, #24
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d02f      	beq.n	8013048 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8012fe8:	78fb      	ldrb	r3, [r7, #3]
 8012fea:	f003 020f 	and.w	r2, r3, #15
 8012fee:	6879      	ldr	r1, [r7, #4]
 8012ff0:	4613      	mov	r3, r2
 8012ff2:	009b      	lsls	r3, r3, #2
 8012ff4:	4413      	add	r3, r2
 8012ff6:	009b      	lsls	r3, r3, #2
 8012ff8:	440b      	add	r3, r1
 8012ffa:	3318      	adds	r3, #24
 8012ffc:	681a      	ldr	r2, [r3, #0]
 8012ffe:	78fb      	ldrb	r3, [r7, #3]
 8013000:	f003 010f 	and.w	r1, r3, #15
 8013004:	68f8      	ldr	r0, [r7, #12]
 8013006:	460b      	mov	r3, r1
 8013008:	009b      	lsls	r3, r3, #2
 801300a:	440b      	add	r3, r1
 801300c:	00db      	lsls	r3, r3, #3
 801300e:	4403      	add	r3, r0
 8013010:	3320      	adds	r3, #32
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	fbb2 f1f3 	udiv	r1, r2, r3
 8013018:	fb01 f303 	mul.w	r3, r1, r3
 801301c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801301e:	2b00      	cmp	r3, #0
 8013020:	d112      	bne.n	8013048 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8013022:	78fb      	ldrb	r3, [r7, #3]
 8013024:	f003 020f 	and.w	r2, r3, #15
 8013028:	6879      	ldr	r1, [r7, #4]
 801302a:	4613      	mov	r3, r2
 801302c:	009b      	lsls	r3, r3, #2
 801302e:	4413      	add	r3, r2
 8013030:	009b      	lsls	r3, r3, #2
 8013032:	440b      	add	r3, r1
 8013034:	3318      	adds	r3, #24
 8013036:	2200      	movs	r2, #0
 8013038:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801303a:	78f9      	ldrb	r1, [r7, #3]
 801303c:	2300      	movs	r3, #0
 801303e:	2200      	movs	r2, #0
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f005 feb8 	bl	8018db6 <USBD_LL_Transmit>
 8013046:	e01f      	b.n	8013088 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8013048:	68bb      	ldr	r3, [r7, #8]
 801304a:	2200      	movs	r2, #0
 801304c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013056:	687a      	ldr	r2, [r7, #4]
 8013058:	33b0      	adds	r3, #176	@ 0xb0
 801305a:	009b      	lsls	r3, r3, #2
 801305c:	4413      	add	r3, r2
 801305e:	685b      	ldr	r3, [r3, #4]
 8013060:	691b      	ldr	r3, [r3, #16]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d010      	beq.n	8013088 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801306c:	687a      	ldr	r2, [r7, #4]
 801306e:	33b0      	adds	r3, #176	@ 0xb0
 8013070:	009b      	lsls	r3, r3, #2
 8013072:	4413      	add	r3, r2
 8013074:	685b      	ldr	r3, [r3, #4]
 8013076:	691b      	ldr	r3, [r3, #16]
 8013078:	68ba      	ldr	r2, [r7, #8]
 801307a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801307e:	68ba      	ldr	r2, [r7, #8]
 8013080:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8013084:	78fa      	ldrb	r2, [r7, #3]
 8013086:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013088:	2300      	movs	r3, #0
}
 801308a:	4618      	mov	r0, r3
 801308c:	3710      	adds	r7, #16
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}

08013092 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013092:	b580      	push	{r7, lr}
 8013094:	b084      	sub	sp, #16
 8013096:	af00      	add	r7, sp, #0
 8013098:	6078      	str	r0, [r7, #4]
 801309a:	460b      	mov	r3, r1
 801309c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	32b0      	adds	r2, #176	@ 0xb0
 80130a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	32b0      	adds	r2, #176	@ 0xb0
 80130b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d101      	bne.n	80130c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80130c0:	2303      	movs	r3, #3
 80130c2:	e01a      	b.n	80130fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80130c4:	78fb      	ldrb	r3, [r7, #3]
 80130c6:	4619      	mov	r1, r3
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f005 feb6 	bl	8018e3a <USBD_LL_GetRxDataSize>
 80130ce:	4602      	mov	r2, r0
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80130dc:	687a      	ldr	r2, [r7, #4]
 80130de:	33b0      	adds	r3, #176	@ 0xb0
 80130e0:	009b      	lsls	r3, r3, #2
 80130e2:	4413      	add	r3, r2
 80130e4:	685b      	ldr	r3, [r3, #4]
 80130e6:	68db      	ldr	r3, [r3, #12]
 80130e8:	68fa      	ldr	r2, [r7, #12]
 80130ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80130ee:	68fa      	ldr	r2, [r7, #12]
 80130f0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80130f4:	4611      	mov	r1, r2
 80130f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80130f8:	2300      	movs	r3, #0
}
 80130fa:	4618      	mov	r0, r3
 80130fc:	3710      	adds	r7, #16
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}

08013102 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013102:	b580      	push	{r7, lr}
 8013104:	b084      	sub	sp, #16
 8013106:	af00      	add	r7, sp, #0
 8013108:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	32b0      	adds	r2, #176	@ 0xb0
 8013114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013118:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d101      	bne.n	8013124 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013120:	2303      	movs	r3, #3
 8013122:	e024      	b.n	801316e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801312a:	687a      	ldr	r2, [r7, #4]
 801312c:	33b0      	adds	r3, #176	@ 0xb0
 801312e:	009b      	lsls	r3, r3, #2
 8013130:	4413      	add	r3, r2
 8013132:	685b      	ldr	r3, [r3, #4]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d019      	beq.n	801316c <USBD_CDC_EP0_RxReady+0x6a>
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801313e:	2bff      	cmp	r3, #255	@ 0xff
 8013140:	d014      	beq.n	801316c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013148:	687a      	ldr	r2, [r7, #4]
 801314a:	33b0      	adds	r3, #176	@ 0xb0
 801314c:	009b      	lsls	r3, r3, #2
 801314e:	4413      	add	r3, r2
 8013150:	685b      	ldr	r3, [r3, #4]
 8013152:	689b      	ldr	r3, [r3, #8]
 8013154:	68fa      	ldr	r2, [r7, #12]
 8013156:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801315a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801315c:	68fa      	ldr	r2, [r7, #12]
 801315e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013162:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	22ff      	movs	r2, #255	@ 0xff
 8013168:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801316c:	2300      	movs	r3, #0
}
 801316e:	4618      	mov	r0, r3
 8013170:	3710      	adds	r7, #16
 8013172:	46bd      	mov	sp, r7
 8013174:	bd80      	pop	{r7, pc}
	...

08013178 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b086      	sub	sp, #24
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013180:	2182      	movs	r1, #130	@ 0x82
 8013182:	4818      	ldr	r0, [pc, #96]	@ (80131e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013184:	f000 fcbd 	bl	8013b02 <USBD_GetEpDesc>
 8013188:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801318a:	2101      	movs	r1, #1
 801318c:	4815      	ldr	r0, [pc, #84]	@ (80131e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801318e:	f000 fcb8 	bl	8013b02 <USBD_GetEpDesc>
 8013192:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013194:	2181      	movs	r1, #129	@ 0x81
 8013196:	4813      	ldr	r0, [pc, #76]	@ (80131e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013198:	f000 fcb3 	bl	8013b02 <USBD_GetEpDesc>
 801319c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801319e:	697b      	ldr	r3, [r7, #20]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d002      	beq.n	80131aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80131a4:	697b      	ldr	r3, [r7, #20]
 80131a6:	2210      	movs	r2, #16
 80131a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80131aa:	693b      	ldr	r3, [r7, #16]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d006      	beq.n	80131be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	2200      	movs	r2, #0
 80131b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80131b8:	711a      	strb	r2, [r3, #4]
 80131ba:	2200      	movs	r2, #0
 80131bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d006      	beq.n	80131d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	2200      	movs	r2, #0
 80131c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80131cc:	711a      	strb	r2, [r3, #4]
 80131ce:	2200      	movs	r2, #0
 80131d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	2243      	movs	r2, #67	@ 0x43
 80131d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80131d8:	4b02      	ldr	r3, [pc, #8]	@ (80131e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80131da:	4618      	mov	r0, r3
 80131dc:	3718      	adds	r7, #24
 80131de:	46bd      	mov	sp, r7
 80131e0:	bd80      	pop	{r7, pc}
 80131e2:	bf00      	nop
 80131e4:	2000007c 	.word	0x2000007c

080131e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b086      	sub	sp, #24
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80131f0:	2182      	movs	r1, #130	@ 0x82
 80131f2:	4818      	ldr	r0, [pc, #96]	@ (8013254 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80131f4:	f000 fc85 	bl	8013b02 <USBD_GetEpDesc>
 80131f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80131fa:	2101      	movs	r1, #1
 80131fc:	4815      	ldr	r0, [pc, #84]	@ (8013254 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80131fe:	f000 fc80 	bl	8013b02 <USBD_GetEpDesc>
 8013202:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013204:	2181      	movs	r1, #129	@ 0x81
 8013206:	4813      	ldr	r0, [pc, #76]	@ (8013254 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013208:	f000 fc7b 	bl	8013b02 <USBD_GetEpDesc>
 801320c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d002      	beq.n	801321a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	2210      	movs	r2, #16
 8013218:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801321a:	693b      	ldr	r3, [r7, #16]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d006      	beq.n	801322e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	2200      	movs	r2, #0
 8013224:	711a      	strb	r2, [r3, #4]
 8013226:	2200      	movs	r2, #0
 8013228:	f042 0202 	orr.w	r2, r2, #2
 801322c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d006      	beq.n	8013242 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	2200      	movs	r2, #0
 8013238:	711a      	strb	r2, [r3, #4]
 801323a:	2200      	movs	r2, #0
 801323c:	f042 0202 	orr.w	r2, r2, #2
 8013240:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2243      	movs	r2, #67	@ 0x43
 8013246:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013248:	4b02      	ldr	r3, [pc, #8]	@ (8013254 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801324a:	4618      	mov	r0, r3
 801324c:	3718      	adds	r7, #24
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}
 8013252:	bf00      	nop
 8013254:	2000007c 	.word	0x2000007c

08013258 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b086      	sub	sp, #24
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013260:	2182      	movs	r1, #130	@ 0x82
 8013262:	4818      	ldr	r0, [pc, #96]	@ (80132c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013264:	f000 fc4d 	bl	8013b02 <USBD_GetEpDesc>
 8013268:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801326a:	2101      	movs	r1, #1
 801326c:	4815      	ldr	r0, [pc, #84]	@ (80132c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801326e:	f000 fc48 	bl	8013b02 <USBD_GetEpDesc>
 8013272:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013274:	2181      	movs	r1, #129	@ 0x81
 8013276:	4813      	ldr	r0, [pc, #76]	@ (80132c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013278:	f000 fc43 	bl	8013b02 <USBD_GetEpDesc>
 801327c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801327e:	697b      	ldr	r3, [r7, #20]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d002      	beq.n	801328a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013284:	697b      	ldr	r3, [r7, #20]
 8013286:	2210      	movs	r2, #16
 8013288:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801328a:	693b      	ldr	r3, [r7, #16]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d006      	beq.n	801329e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013290:	693b      	ldr	r3, [r7, #16]
 8013292:	2200      	movs	r2, #0
 8013294:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013298:	711a      	strb	r2, [r3, #4]
 801329a:	2200      	movs	r2, #0
 801329c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d006      	beq.n	80132b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	2200      	movs	r2, #0
 80132a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80132ac:	711a      	strb	r2, [r3, #4]
 80132ae:	2200      	movs	r2, #0
 80132b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	2243      	movs	r2, #67	@ 0x43
 80132b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80132b8:	4b02      	ldr	r3, [pc, #8]	@ (80132c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80132ba:	4618      	mov	r0, r3
 80132bc:	3718      	adds	r7, #24
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd80      	pop	{r7, pc}
 80132c2:	bf00      	nop
 80132c4:	2000007c 	.word	0x2000007c

080132c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80132c8:	b480      	push	{r7}
 80132ca:	b083      	sub	sp, #12
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	220a      	movs	r2, #10
 80132d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80132d6:	4b03      	ldr	r3, [pc, #12]	@ (80132e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80132d8:	4618      	mov	r0, r3
 80132da:	370c      	adds	r7, #12
 80132dc:	46bd      	mov	sp, r7
 80132de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e2:	4770      	bx	lr
 80132e4:	20000038 	.word	0x20000038

080132e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80132e8:	b480      	push	{r7}
 80132ea:	b083      	sub	sp, #12
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
 80132f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80132f2:	683b      	ldr	r3, [r7, #0]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d101      	bne.n	80132fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80132f8:	2303      	movs	r3, #3
 80132fa:	e009      	b.n	8013310 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013302:	687a      	ldr	r2, [r7, #4]
 8013304:	33b0      	adds	r3, #176	@ 0xb0
 8013306:	009b      	lsls	r3, r3, #2
 8013308:	4413      	add	r3, r2
 801330a:	683a      	ldr	r2, [r7, #0]
 801330c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801330e:	2300      	movs	r3, #0
}
 8013310:	4618      	mov	r0, r3
 8013312:	370c      	adds	r7, #12
 8013314:	46bd      	mov	sp, r7
 8013316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331a:	4770      	bx	lr

0801331c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801331c:	b480      	push	{r7}
 801331e:	b087      	sub	sp, #28
 8013320:	af00      	add	r7, sp, #0
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	60b9      	str	r1, [r7, #8]
 8013326:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	32b0      	adds	r2, #176	@ 0xb0
 8013332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013336:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d101      	bne.n	8013342 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801333e:	2303      	movs	r3, #3
 8013340:	e008      	b.n	8013354 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013342:	697b      	ldr	r3, [r7, #20]
 8013344:	68ba      	ldr	r2, [r7, #8]
 8013346:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	687a      	ldr	r2, [r7, #4]
 801334e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8013352:	2300      	movs	r3, #0
}
 8013354:	4618      	mov	r0, r3
 8013356:	371c      	adds	r7, #28
 8013358:	46bd      	mov	sp, r7
 801335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335e:	4770      	bx	lr

08013360 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013360:	b480      	push	{r7}
 8013362:	b085      	sub	sp, #20
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	32b0      	adds	r2, #176	@ 0xb0
 8013374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013378:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d101      	bne.n	8013384 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013380:	2303      	movs	r3, #3
 8013382:	e004      	b.n	801338e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	683a      	ldr	r2, [r7, #0]
 8013388:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801338c:	2300      	movs	r3, #0
}
 801338e:	4618      	mov	r0, r3
 8013390:	3714      	adds	r7, #20
 8013392:	46bd      	mov	sp, r7
 8013394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013398:	4770      	bx	lr
	...

0801339c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b084      	sub	sp, #16
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	32b0      	adds	r2, #176	@ 0xb0
 80133ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133b2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80133b4:	2301      	movs	r3, #1
 80133b6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80133b8:	68bb      	ldr	r3, [r7, #8]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d101      	bne.n	80133c2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80133be:	2303      	movs	r3, #3
 80133c0:	e025      	b.n	801340e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d11f      	bne.n	801340c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80133cc:	68bb      	ldr	r3, [r7, #8]
 80133ce:	2201      	movs	r2, #1
 80133d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80133d4:	4b10      	ldr	r3, [pc, #64]	@ (8013418 <USBD_CDC_TransmitPacket+0x7c>)
 80133d6:	781b      	ldrb	r3, [r3, #0]
 80133d8:	f003 020f 	and.w	r2, r3, #15
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	4613      	mov	r3, r2
 80133e6:	009b      	lsls	r3, r3, #2
 80133e8:	4413      	add	r3, r2
 80133ea:	009b      	lsls	r3, r3, #2
 80133ec:	4403      	add	r3, r0
 80133ee:	3318      	adds	r3, #24
 80133f0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80133f2:	4b09      	ldr	r3, [pc, #36]	@ (8013418 <USBD_CDC_TransmitPacket+0x7c>)
 80133f4:	7819      	ldrb	r1, [r3, #0]
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8013402:	6878      	ldr	r0, [r7, #4]
 8013404:	f005 fcd7 	bl	8018db6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013408:	2300      	movs	r3, #0
 801340a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801340c:	7bfb      	ldrb	r3, [r7, #15]
}
 801340e:	4618      	mov	r0, r3
 8013410:	3710      	adds	r7, #16
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}
 8013416:	bf00      	nop
 8013418:	200000bf 	.word	0x200000bf

0801341c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b084      	sub	sp, #16
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	32b0      	adds	r2, #176	@ 0xb0
 801342e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013432:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	32b0      	adds	r2, #176	@ 0xb0
 801343e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d101      	bne.n	801344a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013446:	2303      	movs	r3, #3
 8013448:	e018      	b.n	801347c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	7c1b      	ldrb	r3, [r3, #16]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d10a      	bne.n	8013468 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013452:	4b0c      	ldr	r3, [pc, #48]	@ (8013484 <USBD_CDC_ReceivePacket+0x68>)
 8013454:	7819      	ldrb	r1, [r3, #0]
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801345c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f005 fcc9 	bl	8018df8 <USBD_LL_PrepareReceive>
 8013466:	e008      	b.n	801347a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013468:	4b06      	ldr	r3, [pc, #24]	@ (8013484 <USBD_CDC_ReceivePacket+0x68>)
 801346a:	7819      	ldrb	r1, [r3, #0]
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013472:	2340      	movs	r3, #64	@ 0x40
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	f005 fcbf 	bl	8018df8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801347a:	2300      	movs	r3, #0
}
 801347c:	4618      	mov	r0, r3
 801347e:	3710      	adds	r7, #16
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}
 8013484:	200000c0 	.word	0x200000c0

08013488 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013488:	b580      	push	{r7, lr}
 801348a:	b086      	sub	sp, #24
 801348c:	af00      	add	r7, sp, #0
 801348e:	60f8      	str	r0, [r7, #12]
 8013490:	60b9      	str	r1, [r7, #8]
 8013492:	4613      	mov	r3, r2
 8013494:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d101      	bne.n	80134a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801349c:	2303      	movs	r3, #3
 801349e:	e01f      	b.n	80134e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	2200      	movs	r2, #0
 80134a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	2200      	movs	r2, #0
 80134ac:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	2200      	movs	r2, #0
 80134b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d003      	beq.n	80134c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	68ba      	ldr	r2, [r7, #8]
 80134c2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	2201      	movs	r2, #1
 80134ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	79fa      	ldrb	r2, [r7, #7]
 80134d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80134d4:	68f8      	ldr	r0, [r7, #12]
 80134d6:	f005 fb23 	bl	8018b20 <USBD_LL_Init>
 80134da:	4603      	mov	r3, r0
 80134dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80134de:	7dfb      	ldrb	r3, [r7, #23]
}
 80134e0:	4618      	mov	r0, r3
 80134e2:	3718      	adds	r7, #24
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}

080134e8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b084      	sub	sp, #16
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
 80134f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80134f2:	2300      	movs	r3, #0
 80134f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80134f6:	683b      	ldr	r3, [r7, #0]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d101      	bne.n	8013500 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80134fc:	2303      	movs	r3, #3
 80134fe:	e025      	b.n	801354c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	683a      	ldr	r2, [r7, #0]
 8013504:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	32ae      	adds	r2, #174	@ 0xae
 8013512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013518:	2b00      	cmp	r3, #0
 801351a:	d00f      	beq.n	801353c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	32ae      	adds	r2, #174	@ 0xae
 8013526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801352a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801352c:	f107 020e 	add.w	r2, r7, #14
 8013530:	4610      	mov	r0, r2
 8013532:	4798      	blx	r3
 8013534:	4602      	mov	r2, r0
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013542:	1c5a      	adds	r2, r3, #1
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801354a:	2300      	movs	r3, #0
}
 801354c:	4618      	mov	r0, r3
 801354e:	3710      	adds	r7, #16
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}

08013554 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b082      	sub	sp, #8
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f005 fb41 	bl	8018be4 <USBD_LL_Start>
 8013562:	4603      	mov	r3, r0
}
 8013564:	4618      	mov	r0, r3
 8013566:	3708      	adds	r7, #8
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}

0801356c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801356c:	b480      	push	{r7}
 801356e:	b083      	sub	sp, #12
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013574:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013576:	4618      	mov	r0, r3
 8013578:	370c      	adds	r7, #12
 801357a:	46bd      	mov	sp, r7
 801357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013580:	4770      	bx	lr

08013582 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013582:	b580      	push	{r7, lr}
 8013584:	b084      	sub	sp, #16
 8013586:	af00      	add	r7, sp, #0
 8013588:	6078      	str	r0, [r7, #4]
 801358a:	460b      	mov	r3, r1
 801358c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801358e:	2300      	movs	r3, #0
 8013590:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013598:	2b00      	cmp	r3, #0
 801359a:	d009      	beq.n	80135b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	78fa      	ldrb	r2, [r7, #3]
 80135a6:	4611      	mov	r1, r2
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	4798      	blx	r3
 80135ac:	4603      	mov	r3, r0
 80135ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80135b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80135b2:	4618      	mov	r0, r3
 80135b4:	3710      	adds	r7, #16
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}

080135ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80135ba:	b580      	push	{r7, lr}
 80135bc:	b084      	sub	sp, #16
 80135be:	af00      	add	r7, sp, #0
 80135c0:	6078      	str	r0, [r7, #4]
 80135c2:	460b      	mov	r3, r1
 80135c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80135c6:	2300      	movs	r3, #0
 80135c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80135d0:	685b      	ldr	r3, [r3, #4]
 80135d2:	78fa      	ldrb	r2, [r7, #3]
 80135d4:	4611      	mov	r1, r2
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	4798      	blx	r3
 80135da:	4603      	mov	r3, r0
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d001      	beq.n	80135e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80135e0:	2303      	movs	r3, #3
 80135e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80135e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80135e6:	4618      	mov	r0, r3
 80135e8:	3710      	adds	r7, #16
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bd80      	pop	{r7, pc}

080135ee <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80135ee:	b580      	push	{r7, lr}
 80135f0:	b084      	sub	sp, #16
 80135f2:	af00      	add	r7, sp, #0
 80135f4:	6078      	str	r0, [r7, #4]
 80135f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80135fe:	6839      	ldr	r1, [r7, #0]
 8013600:	4618      	mov	r0, r3
 8013602:	f001 f8a4 	bl	801474e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	2201      	movs	r2, #1
 801360a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013614:	461a      	mov	r2, r3
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013622:	f003 031f 	and.w	r3, r3, #31
 8013626:	2b02      	cmp	r3, #2
 8013628:	d01a      	beq.n	8013660 <USBD_LL_SetupStage+0x72>
 801362a:	2b02      	cmp	r3, #2
 801362c:	d822      	bhi.n	8013674 <USBD_LL_SetupStage+0x86>
 801362e:	2b00      	cmp	r3, #0
 8013630:	d002      	beq.n	8013638 <USBD_LL_SetupStage+0x4a>
 8013632:	2b01      	cmp	r3, #1
 8013634:	d00a      	beq.n	801364c <USBD_LL_SetupStage+0x5e>
 8013636:	e01d      	b.n	8013674 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801363e:	4619      	mov	r1, r3
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f000 fad1 	bl	8013be8 <USBD_StdDevReq>
 8013646:	4603      	mov	r3, r0
 8013648:	73fb      	strb	r3, [r7, #15]
      break;
 801364a:	e020      	b.n	801368e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013652:	4619      	mov	r1, r3
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f000 fb39 	bl	8013ccc <USBD_StdItfReq>
 801365a:	4603      	mov	r3, r0
 801365c:	73fb      	strb	r3, [r7, #15]
      break;
 801365e:	e016      	b.n	801368e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013666:	4619      	mov	r1, r3
 8013668:	6878      	ldr	r0, [r7, #4]
 801366a:	f000 fb9b 	bl	8013da4 <USBD_StdEPReq>
 801366e:	4603      	mov	r3, r0
 8013670:	73fb      	strb	r3, [r7, #15]
      break;
 8013672:	e00c      	b.n	801368e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801367a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801367e:	b2db      	uxtb	r3, r3
 8013680:	4619      	mov	r1, r3
 8013682:	6878      	ldr	r0, [r7, #4]
 8013684:	f005 fb0e 	bl	8018ca4 <USBD_LL_StallEP>
 8013688:	4603      	mov	r3, r0
 801368a:	73fb      	strb	r3, [r7, #15]
      break;
 801368c:	bf00      	nop
  }

  return ret;
 801368e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013690:	4618      	mov	r0, r3
 8013692:	3710      	adds	r7, #16
 8013694:	46bd      	mov	sp, r7
 8013696:	bd80      	pop	{r7, pc}

08013698 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b086      	sub	sp, #24
 801369c:	af00      	add	r7, sp, #0
 801369e:	60f8      	str	r0, [r7, #12]
 80136a0:	460b      	mov	r3, r1
 80136a2:	607a      	str	r2, [r7, #4]
 80136a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80136a6:	2300      	movs	r3, #0
 80136a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80136aa:	7afb      	ldrb	r3, [r7, #11]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d16e      	bne.n	801378e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80136b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80136be:	2b03      	cmp	r3, #3
 80136c0:	f040 8098 	bne.w	80137f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80136c4:	693b      	ldr	r3, [r7, #16]
 80136c6:	689a      	ldr	r2, [r3, #8]
 80136c8:	693b      	ldr	r3, [r7, #16]
 80136ca:	68db      	ldr	r3, [r3, #12]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d913      	bls.n	80136f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80136d0:	693b      	ldr	r3, [r7, #16]
 80136d2:	689a      	ldr	r2, [r3, #8]
 80136d4:	693b      	ldr	r3, [r7, #16]
 80136d6:	68db      	ldr	r3, [r3, #12]
 80136d8:	1ad2      	subs	r2, r2, r3
 80136da:	693b      	ldr	r3, [r7, #16]
 80136dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80136de:	693b      	ldr	r3, [r7, #16]
 80136e0:	68da      	ldr	r2, [r3, #12]
 80136e2:	693b      	ldr	r3, [r7, #16]
 80136e4:	689b      	ldr	r3, [r3, #8]
 80136e6:	4293      	cmp	r3, r2
 80136e8:	bf28      	it	cs
 80136ea:	4613      	movcs	r3, r2
 80136ec:	461a      	mov	r2, r3
 80136ee:	6879      	ldr	r1, [r7, #4]
 80136f0:	68f8      	ldr	r0, [r7, #12]
 80136f2:	f001 f92c 	bl	801494e <USBD_CtlContinueRx>
 80136f6:	e07d      	b.n	80137f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80136fe:	f003 031f 	and.w	r3, r3, #31
 8013702:	2b02      	cmp	r3, #2
 8013704:	d014      	beq.n	8013730 <USBD_LL_DataOutStage+0x98>
 8013706:	2b02      	cmp	r3, #2
 8013708:	d81d      	bhi.n	8013746 <USBD_LL_DataOutStage+0xae>
 801370a:	2b00      	cmp	r3, #0
 801370c:	d002      	beq.n	8013714 <USBD_LL_DataOutStage+0x7c>
 801370e:	2b01      	cmp	r3, #1
 8013710:	d003      	beq.n	801371a <USBD_LL_DataOutStage+0x82>
 8013712:	e018      	b.n	8013746 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013714:	2300      	movs	r3, #0
 8013716:	75bb      	strb	r3, [r7, #22]
            break;
 8013718:	e018      	b.n	801374c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013720:	b2db      	uxtb	r3, r3
 8013722:	4619      	mov	r1, r3
 8013724:	68f8      	ldr	r0, [r7, #12]
 8013726:	f000 f9d2 	bl	8013ace <USBD_CoreFindIF>
 801372a:	4603      	mov	r3, r0
 801372c:	75bb      	strb	r3, [r7, #22]
            break;
 801372e:	e00d      	b.n	801374c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013736:	b2db      	uxtb	r3, r3
 8013738:	4619      	mov	r1, r3
 801373a:	68f8      	ldr	r0, [r7, #12]
 801373c:	f000 f9d4 	bl	8013ae8 <USBD_CoreFindEP>
 8013740:	4603      	mov	r3, r0
 8013742:	75bb      	strb	r3, [r7, #22]
            break;
 8013744:	e002      	b.n	801374c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013746:	2300      	movs	r3, #0
 8013748:	75bb      	strb	r3, [r7, #22]
            break;
 801374a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801374c:	7dbb      	ldrb	r3, [r7, #22]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d119      	bne.n	8013786 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013758:	b2db      	uxtb	r3, r3
 801375a:	2b03      	cmp	r3, #3
 801375c:	d113      	bne.n	8013786 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801375e:	7dba      	ldrb	r2, [r7, #22]
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	32ae      	adds	r2, #174	@ 0xae
 8013764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013768:	691b      	ldr	r3, [r3, #16]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d00b      	beq.n	8013786 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801376e:	7dba      	ldrb	r2, [r7, #22]
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013776:	7dba      	ldrb	r2, [r7, #22]
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	32ae      	adds	r2, #174	@ 0xae
 801377c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013780:	691b      	ldr	r3, [r3, #16]
 8013782:	68f8      	ldr	r0, [r7, #12]
 8013784:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013786:	68f8      	ldr	r0, [r7, #12]
 8013788:	f001 f8f2 	bl	8014970 <USBD_CtlSendStatus>
 801378c:	e032      	b.n	80137f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801378e:	7afb      	ldrb	r3, [r7, #11]
 8013790:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013794:	b2db      	uxtb	r3, r3
 8013796:	4619      	mov	r1, r3
 8013798:	68f8      	ldr	r0, [r7, #12]
 801379a:	f000 f9a5 	bl	8013ae8 <USBD_CoreFindEP>
 801379e:	4603      	mov	r3, r0
 80137a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80137a2:	7dbb      	ldrb	r3, [r7, #22]
 80137a4:	2bff      	cmp	r3, #255	@ 0xff
 80137a6:	d025      	beq.n	80137f4 <USBD_LL_DataOutStage+0x15c>
 80137a8:	7dbb      	ldrb	r3, [r7, #22]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d122      	bne.n	80137f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80137b4:	b2db      	uxtb	r3, r3
 80137b6:	2b03      	cmp	r3, #3
 80137b8:	d117      	bne.n	80137ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80137ba:	7dba      	ldrb	r2, [r7, #22]
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	32ae      	adds	r2, #174	@ 0xae
 80137c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137c4:	699b      	ldr	r3, [r3, #24]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d00f      	beq.n	80137ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80137ca:	7dba      	ldrb	r2, [r7, #22]
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80137d2:	7dba      	ldrb	r2, [r7, #22]
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	32ae      	adds	r2, #174	@ 0xae
 80137d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137dc:	699b      	ldr	r3, [r3, #24]
 80137de:	7afa      	ldrb	r2, [r7, #11]
 80137e0:	4611      	mov	r1, r2
 80137e2:	68f8      	ldr	r0, [r7, #12]
 80137e4:	4798      	blx	r3
 80137e6:	4603      	mov	r3, r0
 80137e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80137ea:	7dfb      	ldrb	r3, [r7, #23]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d001      	beq.n	80137f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80137f0:	7dfb      	ldrb	r3, [r7, #23]
 80137f2:	e000      	b.n	80137f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80137f4:	2300      	movs	r3, #0
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	3718      	adds	r7, #24
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}

080137fe <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80137fe:	b580      	push	{r7, lr}
 8013800:	b086      	sub	sp, #24
 8013802:	af00      	add	r7, sp, #0
 8013804:	60f8      	str	r0, [r7, #12]
 8013806:	460b      	mov	r3, r1
 8013808:	607a      	str	r2, [r7, #4]
 801380a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801380c:	7afb      	ldrb	r3, [r7, #11]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d16f      	bne.n	80138f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	3314      	adds	r3, #20
 8013816:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801381e:	2b02      	cmp	r3, #2
 8013820:	d15a      	bne.n	80138d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013822:	693b      	ldr	r3, [r7, #16]
 8013824:	689a      	ldr	r2, [r3, #8]
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	68db      	ldr	r3, [r3, #12]
 801382a:	429a      	cmp	r2, r3
 801382c:	d914      	bls.n	8013858 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801382e:	693b      	ldr	r3, [r7, #16]
 8013830:	689a      	ldr	r2, [r3, #8]
 8013832:	693b      	ldr	r3, [r7, #16]
 8013834:	68db      	ldr	r3, [r3, #12]
 8013836:	1ad2      	subs	r2, r2, r3
 8013838:	693b      	ldr	r3, [r7, #16]
 801383a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801383c:	693b      	ldr	r3, [r7, #16]
 801383e:	689b      	ldr	r3, [r3, #8]
 8013840:	461a      	mov	r2, r3
 8013842:	6879      	ldr	r1, [r7, #4]
 8013844:	68f8      	ldr	r0, [r7, #12]
 8013846:	f001 f854 	bl	80148f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801384a:	2300      	movs	r3, #0
 801384c:	2200      	movs	r2, #0
 801384e:	2100      	movs	r1, #0
 8013850:	68f8      	ldr	r0, [r7, #12]
 8013852:	f005 fad1 	bl	8018df8 <USBD_LL_PrepareReceive>
 8013856:	e03f      	b.n	80138d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013858:	693b      	ldr	r3, [r7, #16]
 801385a:	68da      	ldr	r2, [r3, #12]
 801385c:	693b      	ldr	r3, [r7, #16]
 801385e:	689b      	ldr	r3, [r3, #8]
 8013860:	429a      	cmp	r2, r3
 8013862:	d11c      	bne.n	801389e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013864:	693b      	ldr	r3, [r7, #16]
 8013866:	685a      	ldr	r2, [r3, #4]
 8013868:	693b      	ldr	r3, [r7, #16]
 801386a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801386c:	429a      	cmp	r2, r3
 801386e:	d316      	bcc.n	801389e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013870:	693b      	ldr	r3, [r7, #16]
 8013872:	685a      	ldr	r2, [r3, #4]
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801387a:	429a      	cmp	r2, r3
 801387c:	d20f      	bcs.n	801389e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801387e:	2200      	movs	r2, #0
 8013880:	2100      	movs	r1, #0
 8013882:	68f8      	ldr	r0, [r7, #12]
 8013884:	f001 f835 	bl	80148f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	2200      	movs	r2, #0
 801388c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013890:	2300      	movs	r3, #0
 8013892:	2200      	movs	r2, #0
 8013894:	2100      	movs	r1, #0
 8013896:	68f8      	ldr	r0, [r7, #12]
 8013898:	f005 faae 	bl	8018df8 <USBD_LL_PrepareReceive>
 801389c:	e01c      	b.n	80138d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80138a4:	b2db      	uxtb	r3, r3
 80138a6:	2b03      	cmp	r3, #3
 80138a8:	d10f      	bne.n	80138ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80138b0:	68db      	ldr	r3, [r3, #12]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d009      	beq.n	80138ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	2200      	movs	r2, #0
 80138ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80138c4:	68db      	ldr	r3, [r3, #12]
 80138c6:	68f8      	ldr	r0, [r7, #12]
 80138c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80138ca:	2180      	movs	r1, #128	@ 0x80
 80138cc:	68f8      	ldr	r0, [r7, #12]
 80138ce:	f005 f9e9 	bl	8018ca4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80138d2:	68f8      	ldr	r0, [r7, #12]
 80138d4:	f001 f85f 	bl	8014996 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d03a      	beq.n	8013958 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80138e2:	68f8      	ldr	r0, [r7, #12]
 80138e4:	f7ff fe42 	bl	801356c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	2200      	movs	r2, #0
 80138ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80138f0:	e032      	b.n	8013958 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80138f2:	7afb      	ldrb	r3, [r7, #11]
 80138f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80138f8:	b2db      	uxtb	r3, r3
 80138fa:	4619      	mov	r1, r3
 80138fc:	68f8      	ldr	r0, [r7, #12]
 80138fe:	f000 f8f3 	bl	8013ae8 <USBD_CoreFindEP>
 8013902:	4603      	mov	r3, r0
 8013904:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013906:	7dfb      	ldrb	r3, [r7, #23]
 8013908:	2bff      	cmp	r3, #255	@ 0xff
 801390a:	d025      	beq.n	8013958 <USBD_LL_DataInStage+0x15a>
 801390c:	7dfb      	ldrb	r3, [r7, #23]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d122      	bne.n	8013958 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013918:	b2db      	uxtb	r3, r3
 801391a:	2b03      	cmp	r3, #3
 801391c:	d11c      	bne.n	8013958 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801391e:	7dfa      	ldrb	r2, [r7, #23]
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	32ae      	adds	r2, #174	@ 0xae
 8013924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013928:	695b      	ldr	r3, [r3, #20]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d014      	beq.n	8013958 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801392e:	7dfa      	ldrb	r2, [r7, #23]
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013936:	7dfa      	ldrb	r2, [r7, #23]
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	32ae      	adds	r2, #174	@ 0xae
 801393c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013940:	695b      	ldr	r3, [r3, #20]
 8013942:	7afa      	ldrb	r2, [r7, #11]
 8013944:	4611      	mov	r1, r2
 8013946:	68f8      	ldr	r0, [r7, #12]
 8013948:	4798      	blx	r3
 801394a:	4603      	mov	r3, r0
 801394c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801394e:	7dbb      	ldrb	r3, [r7, #22]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d001      	beq.n	8013958 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013954:	7dbb      	ldrb	r3, [r7, #22]
 8013956:	e000      	b.n	801395a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013958:	2300      	movs	r3, #0
}
 801395a:	4618      	mov	r0, r3
 801395c:	3718      	adds	r7, #24
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}

08013962 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013962:	b580      	push	{r7, lr}
 8013964:	b084      	sub	sp, #16
 8013966:	af00      	add	r7, sp, #0
 8013968:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801396a:	2300      	movs	r3, #0
 801396c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	2201      	movs	r2, #1
 8013972:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	2200      	movs	r2, #0
 801397a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	2200      	movs	r2, #0
 8013982:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	2200      	movs	r2, #0
 8013988:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	2200      	movs	r2, #0
 8013990:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801399a:	2b00      	cmp	r3, #0
 801399c:	d014      	beq.n	80139c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80139a4:	685b      	ldr	r3, [r3, #4]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d00e      	beq.n	80139c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80139b0:	685b      	ldr	r3, [r3, #4]
 80139b2:	687a      	ldr	r2, [r7, #4]
 80139b4:	6852      	ldr	r2, [r2, #4]
 80139b6:	b2d2      	uxtb	r2, r2
 80139b8:	4611      	mov	r1, r2
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	4798      	blx	r3
 80139be:	4603      	mov	r3, r0
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d001      	beq.n	80139c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80139c4:	2303      	movs	r3, #3
 80139c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80139c8:	2340      	movs	r3, #64	@ 0x40
 80139ca:	2200      	movs	r2, #0
 80139cc:	2100      	movs	r1, #0
 80139ce:	6878      	ldr	r0, [r7, #4]
 80139d0:	f005 f923 	bl	8018c1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	2201      	movs	r2, #1
 80139d8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2240      	movs	r2, #64	@ 0x40
 80139e0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80139e4:	2340      	movs	r3, #64	@ 0x40
 80139e6:	2200      	movs	r2, #0
 80139e8:	2180      	movs	r1, #128	@ 0x80
 80139ea:	6878      	ldr	r0, [r7, #4]
 80139ec:	f005 f915 	bl	8018c1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	2201      	movs	r2, #1
 80139f4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	2240      	movs	r2, #64	@ 0x40
 80139fa:	621a      	str	r2, [r3, #32]

  return ret;
 80139fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80139fe:	4618      	mov	r0, r3
 8013a00:	3710      	adds	r7, #16
 8013a02:	46bd      	mov	sp, r7
 8013a04:	bd80      	pop	{r7, pc}

08013a06 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013a06:	b480      	push	{r7}
 8013a08:	b083      	sub	sp, #12
 8013a0a:	af00      	add	r7, sp, #0
 8013a0c:	6078      	str	r0, [r7, #4]
 8013a0e:	460b      	mov	r3, r1
 8013a10:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	78fa      	ldrb	r2, [r7, #3]
 8013a16:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013a18:	2300      	movs	r3, #0
}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	370c      	adds	r7, #12
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a24:	4770      	bx	lr

08013a26 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013a26:	b480      	push	{r7}
 8013a28:	b083      	sub	sp, #12
 8013a2a:	af00      	add	r7, sp, #0
 8013a2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a34:	b2db      	uxtb	r3, r3
 8013a36:	2b04      	cmp	r3, #4
 8013a38:	d006      	beq.n	8013a48 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a40:	b2da      	uxtb	r2, r3
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	2204      	movs	r2, #4
 8013a4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013a50:	2300      	movs	r3, #0
}
 8013a52:	4618      	mov	r0, r3
 8013a54:	370c      	adds	r7, #12
 8013a56:	46bd      	mov	sp, r7
 8013a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5c:	4770      	bx	lr

08013a5e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013a5e:	b480      	push	{r7}
 8013a60:	b083      	sub	sp, #12
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a6c:	b2db      	uxtb	r3, r3
 8013a6e:	2b04      	cmp	r3, #4
 8013a70:	d106      	bne.n	8013a80 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013a78:	b2da      	uxtb	r2, r3
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013a80:	2300      	movs	r3, #0
}
 8013a82:	4618      	mov	r0, r3
 8013a84:	370c      	adds	r7, #12
 8013a86:	46bd      	mov	sp, r7
 8013a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8c:	4770      	bx	lr

08013a8e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013a8e:	b580      	push	{r7, lr}
 8013a90:	b082      	sub	sp, #8
 8013a92:	af00      	add	r7, sp, #0
 8013a94:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a9c:	b2db      	uxtb	r3, r3
 8013a9e:	2b03      	cmp	r3, #3
 8013aa0:	d110      	bne.n	8013ac4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d00b      	beq.n	8013ac4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013ab2:	69db      	ldr	r3, [r3, #28]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d005      	beq.n	8013ac4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013abe:	69db      	ldr	r3, [r3, #28]
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013ac4:	2300      	movs	r3, #0
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3708      	adds	r7, #8
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}

08013ace <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013ace:	b480      	push	{r7}
 8013ad0:	b083      	sub	sp, #12
 8013ad2:	af00      	add	r7, sp, #0
 8013ad4:	6078      	str	r0, [r7, #4]
 8013ad6:	460b      	mov	r3, r1
 8013ad8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013ada:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013adc:	4618      	mov	r0, r3
 8013ade:	370c      	adds	r7, #12
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae6:	4770      	bx	lr

08013ae8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013ae8:	b480      	push	{r7}
 8013aea:	b083      	sub	sp, #12
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
 8013af0:	460b      	mov	r3, r1
 8013af2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013af4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013af6:	4618      	mov	r0, r3
 8013af8:	370c      	adds	r7, #12
 8013afa:	46bd      	mov	sp, r7
 8013afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b00:	4770      	bx	lr

08013b02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013b02:	b580      	push	{r7, lr}
 8013b04:	b086      	sub	sp, #24
 8013b06:	af00      	add	r7, sp, #0
 8013b08:	6078      	str	r0, [r7, #4]
 8013b0a:	460b      	mov	r3, r1
 8013b0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013b16:	2300      	movs	r3, #0
 8013b18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	885b      	ldrh	r3, [r3, #2]
 8013b1e:	b29b      	uxth	r3, r3
 8013b20:	68fa      	ldr	r2, [r7, #12]
 8013b22:	7812      	ldrb	r2, [r2, #0]
 8013b24:	4293      	cmp	r3, r2
 8013b26:	d91f      	bls.n	8013b68 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	781b      	ldrb	r3, [r3, #0]
 8013b2c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013b2e:	e013      	b.n	8013b58 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013b30:	f107 030a 	add.w	r3, r7, #10
 8013b34:	4619      	mov	r1, r3
 8013b36:	6978      	ldr	r0, [r7, #20]
 8013b38:	f000 f81b 	bl	8013b72 <USBD_GetNextDesc>
 8013b3c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013b3e:	697b      	ldr	r3, [r7, #20]
 8013b40:	785b      	ldrb	r3, [r3, #1]
 8013b42:	2b05      	cmp	r3, #5
 8013b44:	d108      	bne.n	8013b58 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	789b      	ldrb	r3, [r3, #2]
 8013b4e:	78fa      	ldrb	r2, [r7, #3]
 8013b50:	429a      	cmp	r2, r3
 8013b52:	d008      	beq.n	8013b66 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013b54:	2300      	movs	r3, #0
 8013b56:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	885b      	ldrh	r3, [r3, #2]
 8013b5c:	b29a      	uxth	r2, r3
 8013b5e:	897b      	ldrh	r3, [r7, #10]
 8013b60:	429a      	cmp	r2, r3
 8013b62:	d8e5      	bhi.n	8013b30 <USBD_GetEpDesc+0x2e>
 8013b64:	e000      	b.n	8013b68 <USBD_GetEpDesc+0x66>
          break;
 8013b66:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013b68:	693b      	ldr	r3, [r7, #16]
}
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	3718      	adds	r7, #24
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}

08013b72 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013b72:	b480      	push	{r7}
 8013b74:	b085      	sub	sp, #20
 8013b76:	af00      	add	r7, sp, #0
 8013b78:	6078      	str	r0, [r7, #4]
 8013b7a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	881b      	ldrh	r3, [r3, #0]
 8013b84:	68fa      	ldr	r2, [r7, #12]
 8013b86:	7812      	ldrb	r2, [r2, #0]
 8013b88:	4413      	add	r3, r2
 8013b8a:	b29a      	uxth	r2, r3
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	781b      	ldrb	r3, [r3, #0]
 8013b94:	461a      	mov	r2, r3
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	4413      	add	r3, r2
 8013b9a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013b9c:	68fb      	ldr	r3, [r7, #12]
}
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	3714      	adds	r7, #20
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba8:	4770      	bx	lr

08013baa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013baa:	b480      	push	{r7}
 8013bac:	b087      	sub	sp, #28
 8013bae:	af00      	add	r7, sp, #0
 8013bb0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013bb6:	697b      	ldr	r3, [r7, #20]
 8013bb8:	781b      	ldrb	r3, [r3, #0]
 8013bba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013bbc:	697b      	ldr	r3, [r7, #20]
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	781b      	ldrb	r3, [r3, #0]
 8013bc6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013bc8:	8a3b      	ldrh	r3, [r7, #16]
 8013bca:	021b      	lsls	r3, r3, #8
 8013bcc:	b21a      	sxth	r2, r3
 8013bce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013bd2:	4313      	orrs	r3, r2
 8013bd4:	b21b      	sxth	r3, r3
 8013bd6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013bd8:	89fb      	ldrh	r3, [r7, #14]
}
 8013bda:	4618      	mov	r0, r3
 8013bdc:	371c      	adds	r7, #28
 8013bde:	46bd      	mov	sp, r7
 8013be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be4:	4770      	bx	lr
	...

08013be8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b084      	sub	sp, #16
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
 8013bf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013bf6:	683b      	ldr	r3, [r7, #0]
 8013bf8:	781b      	ldrb	r3, [r3, #0]
 8013bfa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013bfe:	2b40      	cmp	r3, #64	@ 0x40
 8013c00:	d005      	beq.n	8013c0e <USBD_StdDevReq+0x26>
 8013c02:	2b40      	cmp	r3, #64	@ 0x40
 8013c04:	d857      	bhi.n	8013cb6 <USBD_StdDevReq+0xce>
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d00f      	beq.n	8013c2a <USBD_StdDevReq+0x42>
 8013c0a:	2b20      	cmp	r3, #32
 8013c0c:	d153      	bne.n	8013cb6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	32ae      	adds	r2, #174	@ 0xae
 8013c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c1c:	689b      	ldr	r3, [r3, #8]
 8013c1e:	6839      	ldr	r1, [r7, #0]
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	4798      	blx	r3
 8013c24:	4603      	mov	r3, r0
 8013c26:	73fb      	strb	r3, [r7, #15]
      break;
 8013c28:	e04a      	b.n	8013cc0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013c2a:	683b      	ldr	r3, [r7, #0]
 8013c2c:	785b      	ldrb	r3, [r3, #1]
 8013c2e:	2b09      	cmp	r3, #9
 8013c30:	d83b      	bhi.n	8013caa <USBD_StdDevReq+0xc2>
 8013c32:	a201      	add	r2, pc, #4	@ (adr r2, 8013c38 <USBD_StdDevReq+0x50>)
 8013c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c38:	08013c8d 	.word	0x08013c8d
 8013c3c:	08013ca1 	.word	0x08013ca1
 8013c40:	08013cab 	.word	0x08013cab
 8013c44:	08013c97 	.word	0x08013c97
 8013c48:	08013cab 	.word	0x08013cab
 8013c4c:	08013c6b 	.word	0x08013c6b
 8013c50:	08013c61 	.word	0x08013c61
 8013c54:	08013cab 	.word	0x08013cab
 8013c58:	08013c83 	.word	0x08013c83
 8013c5c:	08013c75 	.word	0x08013c75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013c60:	6839      	ldr	r1, [r7, #0]
 8013c62:	6878      	ldr	r0, [r7, #4]
 8013c64:	f000 fa3c 	bl	80140e0 <USBD_GetDescriptor>
          break;
 8013c68:	e024      	b.n	8013cb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013c6a:	6839      	ldr	r1, [r7, #0]
 8013c6c:	6878      	ldr	r0, [r7, #4]
 8013c6e:	f000 fbcb 	bl	8014408 <USBD_SetAddress>
          break;
 8013c72:	e01f      	b.n	8013cb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013c74:	6839      	ldr	r1, [r7, #0]
 8013c76:	6878      	ldr	r0, [r7, #4]
 8013c78:	f000 fc0a 	bl	8014490 <USBD_SetConfig>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	73fb      	strb	r3, [r7, #15]
          break;
 8013c80:	e018      	b.n	8013cb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013c82:	6839      	ldr	r1, [r7, #0]
 8013c84:	6878      	ldr	r0, [r7, #4]
 8013c86:	f000 fcad 	bl	80145e4 <USBD_GetConfig>
          break;
 8013c8a:	e013      	b.n	8013cb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013c8c:	6839      	ldr	r1, [r7, #0]
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f000 fcde 	bl	8014650 <USBD_GetStatus>
          break;
 8013c94:	e00e      	b.n	8013cb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013c96:	6839      	ldr	r1, [r7, #0]
 8013c98:	6878      	ldr	r0, [r7, #4]
 8013c9a:	f000 fd0d 	bl	80146b8 <USBD_SetFeature>
          break;
 8013c9e:	e009      	b.n	8013cb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013ca0:	6839      	ldr	r1, [r7, #0]
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f000 fd31 	bl	801470a <USBD_ClrFeature>
          break;
 8013ca8:	e004      	b.n	8013cb4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013caa:	6839      	ldr	r1, [r7, #0]
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f000 fd88 	bl	80147c2 <USBD_CtlError>
          break;
 8013cb2:	bf00      	nop
      }
      break;
 8013cb4:	e004      	b.n	8013cc0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013cb6:	6839      	ldr	r1, [r7, #0]
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f000 fd82 	bl	80147c2 <USBD_CtlError>
      break;
 8013cbe:	bf00      	nop
  }

  return ret;
 8013cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	3710      	adds	r7, #16
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bd80      	pop	{r7, pc}
 8013cca:	bf00      	nop

08013ccc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b084      	sub	sp, #16
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
 8013cd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	781b      	ldrb	r3, [r3, #0]
 8013cde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013ce2:	2b40      	cmp	r3, #64	@ 0x40
 8013ce4:	d005      	beq.n	8013cf2 <USBD_StdItfReq+0x26>
 8013ce6:	2b40      	cmp	r3, #64	@ 0x40
 8013ce8:	d852      	bhi.n	8013d90 <USBD_StdItfReq+0xc4>
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d001      	beq.n	8013cf2 <USBD_StdItfReq+0x26>
 8013cee:	2b20      	cmp	r3, #32
 8013cf0:	d14e      	bne.n	8013d90 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013cf8:	b2db      	uxtb	r3, r3
 8013cfa:	3b01      	subs	r3, #1
 8013cfc:	2b02      	cmp	r3, #2
 8013cfe:	d840      	bhi.n	8013d82 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013d00:	683b      	ldr	r3, [r7, #0]
 8013d02:	889b      	ldrh	r3, [r3, #4]
 8013d04:	b2db      	uxtb	r3, r3
 8013d06:	2b01      	cmp	r3, #1
 8013d08:	d836      	bhi.n	8013d78 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013d0a:	683b      	ldr	r3, [r7, #0]
 8013d0c:	889b      	ldrh	r3, [r3, #4]
 8013d0e:	b2db      	uxtb	r3, r3
 8013d10:	4619      	mov	r1, r3
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f7ff fedb 	bl	8013ace <USBD_CoreFindIF>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013d1c:	7bbb      	ldrb	r3, [r7, #14]
 8013d1e:	2bff      	cmp	r3, #255	@ 0xff
 8013d20:	d01d      	beq.n	8013d5e <USBD_StdItfReq+0x92>
 8013d22:	7bbb      	ldrb	r3, [r7, #14]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d11a      	bne.n	8013d5e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013d28:	7bba      	ldrb	r2, [r7, #14]
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	32ae      	adds	r2, #174	@ 0xae
 8013d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d32:	689b      	ldr	r3, [r3, #8]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d00f      	beq.n	8013d58 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013d38:	7bba      	ldrb	r2, [r7, #14]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013d40:	7bba      	ldrb	r2, [r7, #14]
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	32ae      	adds	r2, #174	@ 0xae
 8013d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d4a:	689b      	ldr	r3, [r3, #8]
 8013d4c:	6839      	ldr	r1, [r7, #0]
 8013d4e:	6878      	ldr	r0, [r7, #4]
 8013d50:	4798      	blx	r3
 8013d52:	4603      	mov	r3, r0
 8013d54:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013d56:	e004      	b.n	8013d62 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013d58:	2303      	movs	r3, #3
 8013d5a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013d5c:	e001      	b.n	8013d62 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013d5e:	2303      	movs	r3, #3
 8013d60:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	88db      	ldrh	r3, [r3, #6]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d110      	bne.n	8013d8c <USBD_StdItfReq+0xc0>
 8013d6a:	7bfb      	ldrb	r3, [r7, #15]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d10d      	bne.n	8013d8c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013d70:	6878      	ldr	r0, [r7, #4]
 8013d72:	f000 fdfd 	bl	8014970 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013d76:	e009      	b.n	8013d8c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013d78:	6839      	ldr	r1, [r7, #0]
 8013d7a:	6878      	ldr	r0, [r7, #4]
 8013d7c:	f000 fd21 	bl	80147c2 <USBD_CtlError>
          break;
 8013d80:	e004      	b.n	8013d8c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8013d82:	6839      	ldr	r1, [r7, #0]
 8013d84:	6878      	ldr	r0, [r7, #4]
 8013d86:	f000 fd1c 	bl	80147c2 <USBD_CtlError>
          break;
 8013d8a:	e000      	b.n	8013d8e <USBD_StdItfReq+0xc2>
          break;
 8013d8c:	bf00      	nop
      }
      break;
 8013d8e:	e004      	b.n	8013d9a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013d90:	6839      	ldr	r1, [r7, #0]
 8013d92:	6878      	ldr	r0, [r7, #4]
 8013d94:	f000 fd15 	bl	80147c2 <USBD_CtlError>
      break;
 8013d98:	bf00      	nop
  }

  return ret;
 8013d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3710      	adds	r7, #16
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}

08013da4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b084      	sub	sp, #16
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
 8013dac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013dae:	2300      	movs	r3, #0
 8013db0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	889b      	ldrh	r3, [r3, #4]
 8013db6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	781b      	ldrb	r3, [r3, #0]
 8013dbc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013dc0:	2b40      	cmp	r3, #64	@ 0x40
 8013dc2:	d007      	beq.n	8013dd4 <USBD_StdEPReq+0x30>
 8013dc4:	2b40      	cmp	r3, #64	@ 0x40
 8013dc6:	f200 817f 	bhi.w	80140c8 <USBD_StdEPReq+0x324>
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d02a      	beq.n	8013e24 <USBD_StdEPReq+0x80>
 8013dce:	2b20      	cmp	r3, #32
 8013dd0:	f040 817a 	bne.w	80140c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013dd4:	7bbb      	ldrb	r3, [r7, #14]
 8013dd6:	4619      	mov	r1, r3
 8013dd8:	6878      	ldr	r0, [r7, #4]
 8013dda:	f7ff fe85 	bl	8013ae8 <USBD_CoreFindEP>
 8013dde:	4603      	mov	r3, r0
 8013de0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013de2:	7b7b      	ldrb	r3, [r7, #13]
 8013de4:	2bff      	cmp	r3, #255	@ 0xff
 8013de6:	f000 8174 	beq.w	80140d2 <USBD_StdEPReq+0x32e>
 8013dea:	7b7b      	ldrb	r3, [r7, #13]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	f040 8170 	bne.w	80140d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013df2:	7b7a      	ldrb	r2, [r7, #13]
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013dfa:	7b7a      	ldrb	r2, [r7, #13]
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	32ae      	adds	r2, #174	@ 0xae
 8013e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e04:	689b      	ldr	r3, [r3, #8]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	f000 8163 	beq.w	80140d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013e0c:	7b7a      	ldrb	r2, [r7, #13]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	32ae      	adds	r2, #174	@ 0xae
 8013e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e16:	689b      	ldr	r3, [r3, #8]
 8013e18:	6839      	ldr	r1, [r7, #0]
 8013e1a:	6878      	ldr	r0, [r7, #4]
 8013e1c:	4798      	blx	r3
 8013e1e:	4603      	mov	r3, r0
 8013e20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013e22:	e156      	b.n	80140d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013e24:	683b      	ldr	r3, [r7, #0]
 8013e26:	785b      	ldrb	r3, [r3, #1]
 8013e28:	2b03      	cmp	r3, #3
 8013e2a:	d008      	beq.n	8013e3e <USBD_StdEPReq+0x9a>
 8013e2c:	2b03      	cmp	r3, #3
 8013e2e:	f300 8145 	bgt.w	80140bc <USBD_StdEPReq+0x318>
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	f000 809b 	beq.w	8013f6e <USBD_StdEPReq+0x1ca>
 8013e38:	2b01      	cmp	r3, #1
 8013e3a:	d03c      	beq.n	8013eb6 <USBD_StdEPReq+0x112>
 8013e3c:	e13e      	b.n	80140bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e44:	b2db      	uxtb	r3, r3
 8013e46:	2b02      	cmp	r3, #2
 8013e48:	d002      	beq.n	8013e50 <USBD_StdEPReq+0xac>
 8013e4a:	2b03      	cmp	r3, #3
 8013e4c:	d016      	beq.n	8013e7c <USBD_StdEPReq+0xd8>
 8013e4e:	e02c      	b.n	8013eaa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013e50:	7bbb      	ldrb	r3, [r7, #14]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d00d      	beq.n	8013e72 <USBD_StdEPReq+0xce>
 8013e56:	7bbb      	ldrb	r3, [r7, #14]
 8013e58:	2b80      	cmp	r3, #128	@ 0x80
 8013e5a:	d00a      	beq.n	8013e72 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013e5c:	7bbb      	ldrb	r3, [r7, #14]
 8013e5e:	4619      	mov	r1, r3
 8013e60:	6878      	ldr	r0, [r7, #4]
 8013e62:	f004 ff1f 	bl	8018ca4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013e66:	2180      	movs	r1, #128	@ 0x80
 8013e68:	6878      	ldr	r0, [r7, #4]
 8013e6a:	f004 ff1b 	bl	8018ca4 <USBD_LL_StallEP>
 8013e6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013e70:	e020      	b.n	8013eb4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8013e72:	6839      	ldr	r1, [r7, #0]
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	f000 fca4 	bl	80147c2 <USBD_CtlError>
              break;
 8013e7a:	e01b      	b.n	8013eb4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013e7c:	683b      	ldr	r3, [r7, #0]
 8013e7e:	885b      	ldrh	r3, [r3, #2]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d10e      	bne.n	8013ea2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013e84:	7bbb      	ldrb	r3, [r7, #14]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d00b      	beq.n	8013ea2 <USBD_StdEPReq+0xfe>
 8013e8a:	7bbb      	ldrb	r3, [r7, #14]
 8013e8c:	2b80      	cmp	r3, #128	@ 0x80
 8013e8e:	d008      	beq.n	8013ea2 <USBD_StdEPReq+0xfe>
 8013e90:	683b      	ldr	r3, [r7, #0]
 8013e92:	88db      	ldrh	r3, [r3, #6]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d104      	bne.n	8013ea2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013e98:	7bbb      	ldrb	r3, [r7, #14]
 8013e9a:	4619      	mov	r1, r3
 8013e9c:	6878      	ldr	r0, [r7, #4]
 8013e9e:	f004 ff01 	bl	8018ca4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013ea2:	6878      	ldr	r0, [r7, #4]
 8013ea4:	f000 fd64 	bl	8014970 <USBD_CtlSendStatus>

              break;
 8013ea8:	e004      	b.n	8013eb4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8013eaa:	6839      	ldr	r1, [r7, #0]
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f000 fc88 	bl	80147c2 <USBD_CtlError>
              break;
 8013eb2:	bf00      	nop
          }
          break;
 8013eb4:	e107      	b.n	80140c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ebc:	b2db      	uxtb	r3, r3
 8013ebe:	2b02      	cmp	r3, #2
 8013ec0:	d002      	beq.n	8013ec8 <USBD_StdEPReq+0x124>
 8013ec2:	2b03      	cmp	r3, #3
 8013ec4:	d016      	beq.n	8013ef4 <USBD_StdEPReq+0x150>
 8013ec6:	e04b      	b.n	8013f60 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013ec8:	7bbb      	ldrb	r3, [r7, #14]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d00d      	beq.n	8013eea <USBD_StdEPReq+0x146>
 8013ece:	7bbb      	ldrb	r3, [r7, #14]
 8013ed0:	2b80      	cmp	r3, #128	@ 0x80
 8013ed2:	d00a      	beq.n	8013eea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013ed4:	7bbb      	ldrb	r3, [r7, #14]
 8013ed6:	4619      	mov	r1, r3
 8013ed8:	6878      	ldr	r0, [r7, #4]
 8013eda:	f004 fee3 	bl	8018ca4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013ede:	2180      	movs	r1, #128	@ 0x80
 8013ee0:	6878      	ldr	r0, [r7, #4]
 8013ee2:	f004 fedf 	bl	8018ca4 <USBD_LL_StallEP>
 8013ee6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013ee8:	e040      	b.n	8013f6c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013eea:	6839      	ldr	r1, [r7, #0]
 8013eec:	6878      	ldr	r0, [r7, #4]
 8013eee:	f000 fc68 	bl	80147c2 <USBD_CtlError>
              break;
 8013ef2:	e03b      	b.n	8013f6c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013ef4:	683b      	ldr	r3, [r7, #0]
 8013ef6:	885b      	ldrh	r3, [r3, #2]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d136      	bne.n	8013f6a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013efc:	7bbb      	ldrb	r3, [r7, #14]
 8013efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d004      	beq.n	8013f10 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013f06:	7bbb      	ldrb	r3, [r7, #14]
 8013f08:	4619      	mov	r1, r3
 8013f0a:	6878      	ldr	r0, [r7, #4]
 8013f0c:	f004 fee9 	bl	8018ce2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	f000 fd2d 	bl	8014970 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013f16:	7bbb      	ldrb	r3, [r7, #14]
 8013f18:	4619      	mov	r1, r3
 8013f1a:	6878      	ldr	r0, [r7, #4]
 8013f1c:	f7ff fde4 	bl	8013ae8 <USBD_CoreFindEP>
 8013f20:	4603      	mov	r3, r0
 8013f22:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013f24:	7b7b      	ldrb	r3, [r7, #13]
 8013f26:	2bff      	cmp	r3, #255	@ 0xff
 8013f28:	d01f      	beq.n	8013f6a <USBD_StdEPReq+0x1c6>
 8013f2a:	7b7b      	ldrb	r3, [r7, #13]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d11c      	bne.n	8013f6a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8013f30:	7b7a      	ldrb	r2, [r7, #13]
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013f38:	7b7a      	ldrb	r2, [r7, #13]
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	32ae      	adds	r2, #174	@ 0xae
 8013f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f42:	689b      	ldr	r3, [r3, #8]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d010      	beq.n	8013f6a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013f48:	7b7a      	ldrb	r2, [r7, #13]
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	32ae      	adds	r2, #174	@ 0xae
 8013f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f52:	689b      	ldr	r3, [r3, #8]
 8013f54:	6839      	ldr	r1, [r7, #0]
 8013f56:	6878      	ldr	r0, [r7, #4]
 8013f58:	4798      	blx	r3
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8013f5e:	e004      	b.n	8013f6a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8013f60:	6839      	ldr	r1, [r7, #0]
 8013f62:	6878      	ldr	r0, [r7, #4]
 8013f64:	f000 fc2d 	bl	80147c2 <USBD_CtlError>
              break;
 8013f68:	e000      	b.n	8013f6c <USBD_StdEPReq+0x1c8>
              break;
 8013f6a:	bf00      	nop
          }
          break;
 8013f6c:	e0ab      	b.n	80140c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f74:	b2db      	uxtb	r3, r3
 8013f76:	2b02      	cmp	r3, #2
 8013f78:	d002      	beq.n	8013f80 <USBD_StdEPReq+0x1dc>
 8013f7a:	2b03      	cmp	r3, #3
 8013f7c:	d032      	beq.n	8013fe4 <USBD_StdEPReq+0x240>
 8013f7e:	e097      	b.n	80140b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013f80:	7bbb      	ldrb	r3, [r7, #14]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d007      	beq.n	8013f96 <USBD_StdEPReq+0x1f2>
 8013f86:	7bbb      	ldrb	r3, [r7, #14]
 8013f88:	2b80      	cmp	r3, #128	@ 0x80
 8013f8a:	d004      	beq.n	8013f96 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013f8c:	6839      	ldr	r1, [r7, #0]
 8013f8e:	6878      	ldr	r0, [r7, #4]
 8013f90:	f000 fc17 	bl	80147c2 <USBD_CtlError>
                break;
 8013f94:	e091      	b.n	80140ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013f96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	da0b      	bge.n	8013fb6 <USBD_StdEPReq+0x212>
 8013f9e:	7bbb      	ldrb	r3, [r7, #14]
 8013fa0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013fa4:	4613      	mov	r3, r2
 8013fa6:	009b      	lsls	r3, r3, #2
 8013fa8:	4413      	add	r3, r2
 8013faa:	009b      	lsls	r3, r3, #2
 8013fac:	3310      	adds	r3, #16
 8013fae:	687a      	ldr	r2, [r7, #4]
 8013fb0:	4413      	add	r3, r2
 8013fb2:	3304      	adds	r3, #4
 8013fb4:	e00b      	b.n	8013fce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013fb6:	7bbb      	ldrb	r3, [r7, #14]
 8013fb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013fbc:	4613      	mov	r3, r2
 8013fbe:	009b      	lsls	r3, r3, #2
 8013fc0:	4413      	add	r3, r2
 8013fc2:	009b      	lsls	r3, r3, #2
 8013fc4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013fc8:	687a      	ldr	r2, [r7, #4]
 8013fca:	4413      	add	r3, r2
 8013fcc:	3304      	adds	r3, #4
 8013fce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	2202      	movs	r2, #2
 8013fda:	4619      	mov	r1, r3
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f000 fc6d 	bl	80148bc <USBD_CtlSendData>
              break;
 8013fe2:	e06a      	b.n	80140ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013fe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	da11      	bge.n	8014010 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013fec:	7bbb      	ldrb	r3, [r7, #14]
 8013fee:	f003 020f 	and.w	r2, r3, #15
 8013ff2:	6879      	ldr	r1, [r7, #4]
 8013ff4:	4613      	mov	r3, r2
 8013ff6:	009b      	lsls	r3, r3, #2
 8013ff8:	4413      	add	r3, r2
 8013ffa:	009b      	lsls	r3, r3, #2
 8013ffc:	440b      	add	r3, r1
 8013ffe:	3324      	adds	r3, #36	@ 0x24
 8014000:	881b      	ldrh	r3, [r3, #0]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d117      	bne.n	8014036 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014006:	6839      	ldr	r1, [r7, #0]
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f000 fbda 	bl	80147c2 <USBD_CtlError>
                  break;
 801400e:	e054      	b.n	80140ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014010:	7bbb      	ldrb	r3, [r7, #14]
 8014012:	f003 020f 	and.w	r2, r3, #15
 8014016:	6879      	ldr	r1, [r7, #4]
 8014018:	4613      	mov	r3, r2
 801401a:	009b      	lsls	r3, r3, #2
 801401c:	4413      	add	r3, r2
 801401e:	009b      	lsls	r3, r3, #2
 8014020:	440b      	add	r3, r1
 8014022:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014026:	881b      	ldrh	r3, [r3, #0]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d104      	bne.n	8014036 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801402c:	6839      	ldr	r1, [r7, #0]
 801402e:	6878      	ldr	r0, [r7, #4]
 8014030:	f000 fbc7 	bl	80147c2 <USBD_CtlError>
                  break;
 8014034:	e041      	b.n	80140ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014036:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801403a:	2b00      	cmp	r3, #0
 801403c:	da0b      	bge.n	8014056 <USBD_StdEPReq+0x2b2>
 801403e:	7bbb      	ldrb	r3, [r7, #14]
 8014040:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014044:	4613      	mov	r3, r2
 8014046:	009b      	lsls	r3, r3, #2
 8014048:	4413      	add	r3, r2
 801404a:	009b      	lsls	r3, r3, #2
 801404c:	3310      	adds	r3, #16
 801404e:	687a      	ldr	r2, [r7, #4]
 8014050:	4413      	add	r3, r2
 8014052:	3304      	adds	r3, #4
 8014054:	e00b      	b.n	801406e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014056:	7bbb      	ldrb	r3, [r7, #14]
 8014058:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801405c:	4613      	mov	r3, r2
 801405e:	009b      	lsls	r3, r3, #2
 8014060:	4413      	add	r3, r2
 8014062:	009b      	lsls	r3, r3, #2
 8014064:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014068:	687a      	ldr	r2, [r7, #4]
 801406a:	4413      	add	r3, r2
 801406c:	3304      	adds	r3, #4
 801406e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014070:	7bbb      	ldrb	r3, [r7, #14]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d002      	beq.n	801407c <USBD_StdEPReq+0x2d8>
 8014076:	7bbb      	ldrb	r3, [r7, #14]
 8014078:	2b80      	cmp	r3, #128	@ 0x80
 801407a:	d103      	bne.n	8014084 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801407c:	68bb      	ldr	r3, [r7, #8]
 801407e:	2200      	movs	r2, #0
 8014080:	601a      	str	r2, [r3, #0]
 8014082:	e00e      	b.n	80140a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014084:	7bbb      	ldrb	r3, [r7, #14]
 8014086:	4619      	mov	r1, r3
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f004 fe49 	bl	8018d20 <USBD_LL_IsStallEP>
 801408e:	4603      	mov	r3, r0
 8014090:	2b00      	cmp	r3, #0
 8014092:	d003      	beq.n	801409c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	2201      	movs	r2, #1
 8014098:	601a      	str	r2, [r3, #0]
 801409a:	e002      	b.n	80140a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	2200      	movs	r2, #0
 80140a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	2202      	movs	r2, #2
 80140a6:	4619      	mov	r1, r3
 80140a8:	6878      	ldr	r0, [r7, #4]
 80140aa:	f000 fc07 	bl	80148bc <USBD_CtlSendData>
              break;
 80140ae:	e004      	b.n	80140ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80140b0:	6839      	ldr	r1, [r7, #0]
 80140b2:	6878      	ldr	r0, [r7, #4]
 80140b4:	f000 fb85 	bl	80147c2 <USBD_CtlError>
              break;
 80140b8:	bf00      	nop
          }
          break;
 80140ba:	e004      	b.n	80140c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80140bc:	6839      	ldr	r1, [r7, #0]
 80140be:	6878      	ldr	r0, [r7, #4]
 80140c0:	f000 fb7f 	bl	80147c2 <USBD_CtlError>
          break;
 80140c4:	bf00      	nop
      }
      break;
 80140c6:	e005      	b.n	80140d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80140c8:	6839      	ldr	r1, [r7, #0]
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	f000 fb79 	bl	80147c2 <USBD_CtlError>
      break;
 80140d0:	e000      	b.n	80140d4 <USBD_StdEPReq+0x330>
      break;
 80140d2:	bf00      	nop
  }

  return ret;
 80140d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	3710      	adds	r7, #16
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd80      	pop	{r7, pc}
	...

080140e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b084      	sub	sp, #16
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
 80140e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80140ea:	2300      	movs	r3, #0
 80140ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80140ee:	2300      	movs	r3, #0
 80140f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80140f2:	2300      	movs	r3, #0
 80140f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	885b      	ldrh	r3, [r3, #2]
 80140fa:	0a1b      	lsrs	r3, r3, #8
 80140fc:	b29b      	uxth	r3, r3
 80140fe:	3b01      	subs	r3, #1
 8014100:	2b0e      	cmp	r3, #14
 8014102:	f200 8152 	bhi.w	80143aa <USBD_GetDescriptor+0x2ca>
 8014106:	a201      	add	r2, pc, #4	@ (adr r2, 801410c <USBD_GetDescriptor+0x2c>)
 8014108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801410c:	0801417d 	.word	0x0801417d
 8014110:	08014195 	.word	0x08014195
 8014114:	080141d5 	.word	0x080141d5
 8014118:	080143ab 	.word	0x080143ab
 801411c:	080143ab 	.word	0x080143ab
 8014120:	0801434b 	.word	0x0801434b
 8014124:	08014377 	.word	0x08014377
 8014128:	080143ab 	.word	0x080143ab
 801412c:	080143ab 	.word	0x080143ab
 8014130:	080143ab 	.word	0x080143ab
 8014134:	080143ab 	.word	0x080143ab
 8014138:	080143ab 	.word	0x080143ab
 801413c:	080143ab 	.word	0x080143ab
 8014140:	080143ab 	.word	0x080143ab
 8014144:	08014149 	.word	0x08014149
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801414e:	69db      	ldr	r3, [r3, #28]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d00b      	beq.n	801416c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801415a:	69db      	ldr	r3, [r3, #28]
 801415c:	687a      	ldr	r2, [r7, #4]
 801415e:	7c12      	ldrb	r2, [r2, #16]
 8014160:	f107 0108 	add.w	r1, r7, #8
 8014164:	4610      	mov	r0, r2
 8014166:	4798      	blx	r3
 8014168:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801416a:	e126      	b.n	80143ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801416c:	6839      	ldr	r1, [r7, #0]
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f000 fb27 	bl	80147c2 <USBD_CtlError>
        err++;
 8014174:	7afb      	ldrb	r3, [r7, #11]
 8014176:	3301      	adds	r3, #1
 8014178:	72fb      	strb	r3, [r7, #11]
      break;
 801417a:	e11e      	b.n	80143ba <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	687a      	ldr	r2, [r7, #4]
 8014186:	7c12      	ldrb	r2, [r2, #16]
 8014188:	f107 0108 	add.w	r1, r7, #8
 801418c:	4610      	mov	r0, r2
 801418e:	4798      	blx	r3
 8014190:	60f8      	str	r0, [r7, #12]
      break;
 8014192:	e112      	b.n	80143ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	7c1b      	ldrb	r3, [r3, #16]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d10d      	bne.n	80141b8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80141a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80141a4:	f107 0208 	add.w	r2, r7, #8
 80141a8:	4610      	mov	r0, r2
 80141aa:	4798      	blx	r3
 80141ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	3301      	adds	r3, #1
 80141b2:	2202      	movs	r2, #2
 80141b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80141b6:	e100      	b.n	80143ba <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80141be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141c0:	f107 0208 	add.w	r2, r7, #8
 80141c4:	4610      	mov	r0, r2
 80141c6:	4798      	blx	r3
 80141c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	3301      	adds	r3, #1
 80141ce:	2202      	movs	r2, #2
 80141d0:	701a      	strb	r2, [r3, #0]
      break;
 80141d2:	e0f2      	b.n	80143ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	885b      	ldrh	r3, [r3, #2]
 80141d8:	b2db      	uxtb	r3, r3
 80141da:	2b05      	cmp	r3, #5
 80141dc:	f200 80ac 	bhi.w	8014338 <USBD_GetDescriptor+0x258>
 80141e0:	a201      	add	r2, pc, #4	@ (adr r2, 80141e8 <USBD_GetDescriptor+0x108>)
 80141e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141e6:	bf00      	nop
 80141e8:	08014201 	.word	0x08014201
 80141ec:	08014235 	.word	0x08014235
 80141f0:	08014269 	.word	0x08014269
 80141f4:	0801429d 	.word	0x0801429d
 80141f8:	080142d1 	.word	0x080142d1
 80141fc:	08014305 	.word	0x08014305
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014206:	685b      	ldr	r3, [r3, #4]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d00b      	beq.n	8014224 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014212:	685b      	ldr	r3, [r3, #4]
 8014214:	687a      	ldr	r2, [r7, #4]
 8014216:	7c12      	ldrb	r2, [r2, #16]
 8014218:	f107 0108 	add.w	r1, r7, #8
 801421c:	4610      	mov	r0, r2
 801421e:	4798      	blx	r3
 8014220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014222:	e091      	b.n	8014348 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014224:	6839      	ldr	r1, [r7, #0]
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f000 facb 	bl	80147c2 <USBD_CtlError>
            err++;
 801422c:	7afb      	ldrb	r3, [r7, #11]
 801422e:	3301      	adds	r3, #1
 8014230:	72fb      	strb	r3, [r7, #11]
          break;
 8014232:	e089      	b.n	8014348 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801423a:	689b      	ldr	r3, [r3, #8]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d00b      	beq.n	8014258 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014246:	689b      	ldr	r3, [r3, #8]
 8014248:	687a      	ldr	r2, [r7, #4]
 801424a:	7c12      	ldrb	r2, [r2, #16]
 801424c:	f107 0108 	add.w	r1, r7, #8
 8014250:	4610      	mov	r0, r2
 8014252:	4798      	blx	r3
 8014254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014256:	e077      	b.n	8014348 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014258:	6839      	ldr	r1, [r7, #0]
 801425a:	6878      	ldr	r0, [r7, #4]
 801425c:	f000 fab1 	bl	80147c2 <USBD_CtlError>
            err++;
 8014260:	7afb      	ldrb	r3, [r7, #11]
 8014262:	3301      	adds	r3, #1
 8014264:	72fb      	strb	r3, [r7, #11]
          break;
 8014266:	e06f      	b.n	8014348 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801426e:	68db      	ldr	r3, [r3, #12]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d00b      	beq.n	801428c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801427a:	68db      	ldr	r3, [r3, #12]
 801427c:	687a      	ldr	r2, [r7, #4]
 801427e:	7c12      	ldrb	r2, [r2, #16]
 8014280:	f107 0108 	add.w	r1, r7, #8
 8014284:	4610      	mov	r0, r2
 8014286:	4798      	blx	r3
 8014288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801428a:	e05d      	b.n	8014348 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801428c:	6839      	ldr	r1, [r7, #0]
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f000 fa97 	bl	80147c2 <USBD_CtlError>
            err++;
 8014294:	7afb      	ldrb	r3, [r7, #11]
 8014296:	3301      	adds	r3, #1
 8014298:	72fb      	strb	r3, [r7, #11]
          break;
 801429a:	e055      	b.n	8014348 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80142a2:	691b      	ldr	r3, [r3, #16]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d00b      	beq.n	80142c0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80142ae:	691b      	ldr	r3, [r3, #16]
 80142b0:	687a      	ldr	r2, [r7, #4]
 80142b2:	7c12      	ldrb	r2, [r2, #16]
 80142b4:	f107 0108 	add.w	r1, r7, #8
 80142b8:	4610      	mov	r0, r2
 80142ba:	4798      	blx	r3
 80142bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80142be:	e043      	b.n	8014348 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80142c0:	6839      	ldr	r1, [r7, #0]
 80142c2:	6878      	ldr	r0, [r7, #4]
 80142c4:	f000 fa7d 	bl	80147c2 <USBD_CtlError>
            err++;
 80142c8:	7afb      	ldrb	r3, [r7, #11]
 80142ca:	3301      	adds	r3, #1
 80142cc:	72fb      	strb	r3, [r7, #11]
          break;
 80142ce:	e03b      	b.n	8014348 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80142d6:	695b      	ldr	r3, [r3, #20]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d00b      	beq.n	80142f4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80142e2:	695b      	ldr	r3, [r3, #20]
 80142e4:	687a      	ldr	r2, [r7, #4]
 80142e6:	7c12      	ldrb	r2, [r2, #16]
 80142e8:	f107 0108 	add.w	r1, r7, #8
 80142ec:	4610      	mov	r0, r2
 80142ee:	4798      	blx	r3
 80142f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80142f2:	e029      	b.n	8014348 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80142f4:	6839      	ldr	r1, [r7, #0]
 80142f6:	6878      	ldr	r0, [r7, #4]
 80142f8:	f000 fa63 	bl	80147c2 <USBD_CtlError>
            err++;
 80142fc:	7afb      	ldrb	r3, [r7, #11]
 80142fe:	3301      	adds	r3, #1
 8014300:	72fb      	strb	r3, [r7, #11]
          break;
 8014302:	e021      	b.n	8014348 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801430a:	699b      	ldr	r3, [r3, #24]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d00b      	beq.n	8014328 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014316:	699b      	ldr	r3, [r3, #24]
 8014318:	687a      	ldr	r2, [r7, #4]
 801431a:	7c12      	ldrb	r2, [r2, #16]
 801431c:	f107 0108 	add.w	r1, r7, #8
 8014320:	4610      	mov	r0, r2
 8014322:	4798      	blx	r3
 8014324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014326:	e00f      	b.n	8014348 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014328:	6839      	ldr	r1, [r7, #0]
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f000 fa49 	bl	80147c2 <USBD_CtlError>
            err++;
 8014330:	7afb      	ldrb	r3, [r7, #11]
 8014332:	3301      	adds	r3, #1
 8014334:	72fb      	strb	r3, [r7, #11]
          break;
 8014336:	e007      	b.n	8014348 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014338:	6839      	ldr	r1, [r7, #0]
 801433a:	6878      	ldr	r0, [r7, #4]
 801433c:	f000 fa41 	bl	80147c2 <USBD_CtlError>
          err++;
 8014340:	7afb      	ldrb	r3, [r7, #11]
 8014342:	3301      	adds	r3, #1
 8014344:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014346:	bf00      	nop
      }
      break;
 8014348:	e037      	b.n	80143ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	7c1b      	ldrb	r3, [r3, #16]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d109      	bne.n	8014366 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801435a:	f107 0208 	add.w	r2, r7, #8
 801435e:	4610      	mov	r0, r2
 8014360:	4798      	blx	r3
 8014362:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014364:	e029      	b.n	80143ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014366:	6839      	ldr	r1, [r7, #0]
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f000 fa2a 	bl	80147c2 <USBD_CtlError>
        err++;
 801436e:	7afb      	ldrb	r3, [r7, #11]
 8014370:	3301      	adds	r3, #1
 8014372:	72fb      	strb	r3, [r7, #11]
      break;
 8014374:	e021      	b.n	80143ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	7c1b      	ldrb	r3, [r3, #16]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d10d      	bne.n	801439a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014386:	f107 0208 	add.w	r2, r7, #8
 801438a:	4610      	mov	r0, r2
 801438c:	4798      	blx	r3
 801438e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	3301      	adds	r3, #1
 8014394:	2207      	movs	r2, #7
 8014396:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014398:	e00f      	b.n	80143ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801439a:	6839      	ldr	r1, [r7, #0]
 801439c:	6878      	ldr	r0, [r7, #4]
 801439e:	f000 fa10 	bl	80147c2 <USBD_CtlError>
        err++;
 80143a2:	7afb      	ldrb	r3, [r7, #11]
 80143a4:	3301      	adds	r3, #1
 80143a6:	72fb      	strb	r3, [r7, #11]
      break;
 80143a8:	e007      	b.n	80143ba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80143aa:	6839      	ldr	r1, [r7, #0]
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f000 fa08 	bl	80147c2 <USBD_CtlError>
      err++;
 80143b2:	7afb      	ldrb	r3, [r7, #11]
 80143b4:	3301      	adds	r3, #1
 80143b6:	72fb      	strb	r3, [r7, #11]
      break;
 80143b8:	bf00      	nop
  }

  if (err != 0U)
 80143ba:	7afb      	ldrb	r3, [r7, #11]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d11e      	bne.n	80143fe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80143c0:	683b      	ldr	r3, [r7, #0]
 80143c2:	88db      	ldrh	r3, [r3, #6]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d016      	beq.n	80143f6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80143c8:	893b      	ldrh	r3, [r7, #8]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d00e      	beq.n	80143ec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80143ce:	683b      	ldr	r3, [r7, #0]
 80143d0:	88da      	ldrh	r2, [r3, #6]
 80143d2:	893b      	ldrh	r3, [r7, #8]
 80143d4:	4293      	cmp	r3, r2
 80143d6:	bf28      	it	cs
 80143d8:	4613      	movcs	r3, r2
 80143da:	b29b      	uxth	r3, r3
 80143dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80143de:	893b      	ldrh	r3, [r7, #8]
 80143e0:	461a      	mov	r2, r3
 80143e2:	68f9      	ldr	r1, [r7, #12]
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f000 fa69 	bl	80148bc <USBD_CtlSendData>
 80143ea:	e009      	b.n	8014400 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80143ec:	6839      	ldr	r1, [r7, #0]
 80143ee:	6878      	ldr	r0, [r7, #4]
 80143f0:	f000 f9e7 	bl	80147c2 <USBD_CtlError>
 80143f4:	e004      	b.n	8014400 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80143f6:	6878      	ldr	r0, [r7, #4]
 80143f8:	f000 faba 	bl	8014970 <USBD_CtlSendStatus>
 80143fc:	e000      	b.n	8014400 <USBD_GetDescriptor+0x320>
    return;
 80143fe:	bf00      	nop
  }
}
 8014400:	3710      	adds	r7, #16
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}
 8014406:	bf00      	nop

08014408 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b084      	sub	sp, #16
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014412:	683b      	ldr	r3, [r7, #0]
 8014414:	889b      	ldrh	r3, [r3, #4]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d131      	bne.n	801447e <USBD_SetAddress+0x76>
 801441a:	683b      	ldr	r3, [r7, #0]
 801441c:	88db      	ldrh	r3, [r3, #6]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d12d      	bne.n	801447e <USBD_SetAddress+0x76>
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	885b      	ldrh	r3, [r3, #2]
 8014426:	2b7f      	cmp	r3, #127	@ 0x7f
 8014428:	d829      	bhi.n	801447e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801442a:	683b      	ldr	r3, [r7, #0]
 801442c:	885b      	ldrh	r3, [r3, #2]
 801442e:	b2db      	uxtb	r3, r3
 8014430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014434:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801443c:	b2db      	uxtb	r3, r3
 801443e:	2b03      	cmp	r3, #3
 8014440:	d104      	bne.n	801444c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014442:	6839      	ldr	r1, [r7, #0]
 8014444:	6878      	ldr	r0, [r7, #4]
 8014446:	f000 f9bc 	bl	80147c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801444a:	e01d      	b.n	8014488 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	7bfa      	ldrb	r2, [r7, #15]
 8014450:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014454:	7bfb      	ldrb	r3, [r7, #15]
 8014456:	4619      	mov	r1, r3
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f004 fc8d 	bl	8018d78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f000 fa86 	bl	8014970 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014464:	7bfb      	ldrb	r3, [r7, #15]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d004      	beq.n	8014474 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	2202      	movs	r2, #2
 801446e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014472:	e009      	b.n	8014488 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2201      	movs	r2, #1
 8014478:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801447c:	e004      	b.n	8014488 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801447e:	6839      	ldr	r1, [r7, #0]
 8014480:	6878      	ldr	r0, [r7, #4]
 8014482:	f000 f99e 	bl	80147c2 <USBD_CtlError>
  }
}
 8014486:	bf00      	nop
 8014488:	bf00      	nop
 801448a:	3710      	adds	r7, #16
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}

08014490 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014490:	b580      	push	{r7, lr}
 8014492:	b084      	sub	sp, #16
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
 8014498:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801449a:	2300      	movs	r3, #0
 801449c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801449e:	683b      	ldr	r3, [r7, #0]
 80144a0:	885b      	ldrh	r3, [r3, #2]
 80144a2:	b2da      	uxtb	r2, r3
 80144a4:	4b4e      	ldr	r3, [pc, #312]	@ (80145e0 <USBD_SetConfig+0x150>)
 80144a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80144a8:	4b4d      	ldr	r3, [pc, #308]	@ (80145e0 <USBD_SetConfig+0x150>)
 80144aa:	781b      	ldrb	r3, [r3, #0]
 80144ac:	2b01      	cmp	r3, #1
 80144ae:	d905      	bls.n	80144bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80144b0:	6839      	ldr	r1, [r7, #0]
 80144b2:	6878      	ldr	r0, [r7, #4]
 80144b4:	f000 f985 	bl	80147c2 <USBD_CtlError>
    return USBD_FAIL;
 80144b8:	2303      	movs	r3, #3
 80144ba:	e08c      	b.n	80145d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80144c2:	b2db      	uxtb	r3, r3
 80144c4:	2b02      	cmp	r3, #2
 80144c6:	d002      	beq.n	80144ce <USBD_SetConfig+0x3e>
 80144c8:	2b03      	cmp	r3, #3
 80144ca:	d029      	beq.n	8014520 <USBD_SetConfig+0x90>
 80144cc:	e075      	b.n	80145ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80144ce:	4b44      	ldr	r3, [pc, #272]	@ (80145e0 <USBD_SetConfig+0x150>)
 80144d0:	781b      	ldrb	r3, [r3, #0]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d020      	beq.n	8014518 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80144d6:	4b42      	ldr	r3, [pc, #264]	@ (80145e0 <USBD_SetConfig+0x150>)
 80144d8:	781b      	ldrb	r3, [r3, #0]
 80144da:	461a      	mov	r2, r3
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80144e0:	4b3f      	ldr	r3, [pc, #252]	@ (80145e0 <USBD_SetConfig+0x150>)
 80144e2:	781b      	ldrb	r3, [r3, #0]
 80144e4:	4619      	mov	r1, r3
 80144e6:	6878      	ldr	r0, [r7, #4]
 80144e8:	f7ff f84b 	bl	8013582 <USBD_SetClassConfig>
 80144ec:	4603      	mov	r3, r0
 80144ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80144f0:	7bfb      	ldrb	r3, [r7, #15]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d008      	beq.n	8014508 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80144f6:	6839      	ldr	r1, [r7, #0]
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f000 f962 	bl	80147c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	2202      	movs	r2, #2
 8014502:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014506:	e065      	b.n	80145d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014508:	6878      	ldr	r0, [r7, #4]
 801450a:	f000 fa31 	bl	8014970 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	2203      	movs	r2, #3
 8014512:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014516:	e05d      	b.n	80145d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f000 fa29 	bl	8014970 <USBD_CtlSendStatus>
      break;
 801451e:	e059      	b.n	80145d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014520:	4b2f      	ldr	r3, [pc, #188]	@ (80145e0 <USBD_SetConfig+0x150>)
 8014522:	781b      	ldrb	r3, [r3, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d112      	bne.n	801454e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2202      	movs	r2, #2
 801452c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014530:	4b2b      	ldr	r3, [pc, #172]	@ (80145e0 <USBD_SetConfig+0x150>)
 8014532:	781b      	ldrb	r3, [r3, #0]
 8014534:	461a      	mov	r2, r3
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801453a:	4b29      	ldr	r3, [pc, #164]	@ (80145e0 <USBD_SetConfig+0x150>)
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	4619      	mov	r1, r3
 8014540:	6878      	ldr	r0, [r7, #4]
 8014542:	f7ff f83a 	bl	80135ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014546:	6878      	ldr	r0, [r7, #4]
 8014548:	f000 fa12 	bl	8014970 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801454c:	e042      	b.n	80145d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801454e:	4b24      	ldr	r3, [pc, #144]	@ (80145e0 <USBD_SetConfig+0x150>)
 8014550:	781b      	ldrb	r3, [r3, #0]
 8014552:	461a      	mov	r2, r3
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	685b      	ldr	r3, [r3, #4]
 8014558:	429a      	cmp	r2, r3
 801455a:	d02a      	beq.n	80145b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	685b      	ldr	r3, [r3, #4]
 8014560:	b2db      	uxtb	r3, r3
 8014562:	4619      	mov	r1, r3
 8014564:	6878      	ldr	r0, [r7, #4]
 8014566:	f7ff f828 	bl	80135ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801456a:	4b1d      	ldr	r3, [pc, #116]	@ (80145e0 <USBD_SetConfig+0x150>)
 801456c:	781b      	ldrb	r3, [r3, #0]
 801456e:	461a      	mov	r2, r3
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014574:	4b1a      	ldr	r3, [pc, #104]	@ (80145e0 <USBD_SetConfig+0x150>)
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	4619      	mov	r1, r3
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f7ff f801 	bl	8013582 <USBD_SetClassConfig>
 8014580:	4603      	mov	r3, r0
 8014582:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014584:	7bfb      	ldrb	r3, [r7, #15]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d00f      	beq.n	80145aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801458a:	6839      	ldr	r1, [r7, #0]
 801458c:	6878      	ldr	r0, [r7, #4]
 801458e:	f000 f918 	bl	80147c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	685b      	ldr	r3, [r3, #4]
 8014596:	b2db      	uxtb	r3, r3
 8014598:	4619      	mov	r1, r3
 801459a:	6878      	ldr	r0, [r7, #4]
 801459c:	f7ff f80d 	bl	80135ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	2202      	movs	r2, #2
 80145a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80145a8:	e014      	b.n	80145d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80145aa:	6878      	ldr	r0, [r7, #4]
 80145ac:	f000 f9e0 	bl	8014970 <USBD_CtlSendStatus>
      break;
 80145b0:	e010      	b.n	80145d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80145b2:	6878      	ldr	r0, [r7, #4]
 80145b4:	f000 f9dc 	bl	8014970 <USBD_CtlSendStatus>
      break;
 80145b8:	e00c      	b.n	80145d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80145ba:	6839      	ldr	r1, [r7, #0]
 80145bc:	6878      	ldr	r0, [r7, #4]
 80145be:	f000 f900 	bl	80147c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80145c2:	4b07      	ldr	r3, [pc, #28]	@ (80145e0 <USBD_SetConfig+0x150>)
 80145c4:	781b      	ldrb	r3, [r3, #0]
 80145c6:	4619      	mov	r1, r3
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f7fe fff6 	bl	80135ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80145ce:	2303      	movs	r3, #3
 80145d0:	73fb      	strb	r3, [r7, #15]
      break;
 80145d2:	bf00      	nop
  }

  return ret;
 80145d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80145d6:	4618      	mov	r0, r3
 80145d8:	3710      	adds	r7, #16
 80145da:	46bd      	mov	sp, r7
 80145dc:	bd80      	pop	{r7, pc}
 80145de:	bf00      	nop
 80145e0:	200013d8 	.word	0x200013d8

080145e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b082      	sub	sp, #8
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
 80145ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	88db      	ldrh	r3, [r3, #6]
 80145f2:	2b01      	cmp	r3, #1
 80145f4:	d004      	beq.n	8014600 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80145f6:	6839      	ldr	r1, [r7, #0]
 80145f8:	6878      	ldr	r0, [r7, #4]
 80145fa:	f000 f8e2 	bl	80147c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80145fe:	e023      	b.n	8014648 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014606:	b2db      	uxtb	r3, r3
 8014608:	2b02      	cmp	r3, #2
 801460a:	dc02      	bgt.n	8014612 <USBD_GetConfig+0x2e>
 801460c:	2b00      	cmp	r3, #0
 801460e:	dc03      	bgt.n	8014618 <USBD_GetConfig+0x34>
 8014610:	e015      	b.n	801463e <USBD_GetConfig+0x5a>
 8014612:	2b03      	cmp	r3, #3
 8014614:	d00b      	beq.n	801462e <USBD_GetConfig+0x4a>
 8014616:	e012      	b.n	801463e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2200      	movs	r2, #0
 801461c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	3308      	adds	r3, #8
 8014622:	2201      	movs	r2, #1
 8014624:	4619      	mov	r1, r3
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	f000 f948 	bl	80148bc <USBD_CtlSendData>
        break;
 801462c:	e00c      	b.n	8014648 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	3304      	adds	r3, #4
 8014632:	2201      	movs	r2, #1
 8014634:	4619      	mov	r1, r3
 8014636:	6878      	ldr	r0, [r7, #4]
 8014638:	f000 f940 	bl	80148bc <USBD_CtlSendData>
        break;
 801463c:	e004      	b.n	8014648 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801463e:	6839      	ldr	r1, [r7, #0]
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f000 f8be 	bl	80147c2 <USBD_CtlError>
        break;
 8014646:	bf00      	nop
}
 8014648:	bf00      	nop
 801464a:	3708      	adds	r7, #8
 801464c:	46bd      	mov	sp, r7
 801464e:	bd80      	pop	{r7, pc}

08014650 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b082      	sub	sp, #8
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014660:	b2db      	uxtb	r3, r3
 8014662:	3b01      	subs	r3, #1
 8014664:	2b02      	cmp	r3, #2
 8014666:	d81e      	bhi.n	80146a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	88db      	ldrh	r3, [r3, #6]
 801466c:	2b02      	cmp	r3, #2
 801466e:	d004      	beq.n	801467a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014670:	6839      	ldr	r1, [r7, #0]
 8014672:	6878      	ldr	r0, [r7, #4]
 8014674:	f000 f8a5 	bl	80147c2 <USBD_CtlError>
        break;
 8014678:	e01a      	b.n	80146b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2201      	movs	r2, #1
 801467e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014686:	2b00      	cmp	r3, #0
 8014688:	d005      	beq.n	8014696 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	68db      	ldr	r3, [r3, #12]
 801468e:	f043 0202 	orr.w	r2, r3, #2
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	330c      	adds	r3, #12
 801469a:	2202      	movs	r2, #2
 801469c:	4619      	mov	r1, r3
 801469e:	6878      	ldr	r0, [r7, #4]
 80146a0:	f000 f90c 	bl	80148bc <USBD_CtlSendData>
      break;
 80146a4:	e004      	b.n	80146b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80146a6:	6839      	ldr	r1, [r7, #0]
 80146a8:	6878      	ldr	r0, [r7, #4]
 80146aa:	f000 f88a 	bl	80147c2 <USBD_CtlError>
      break;
 80146ae:	bf00      	nop
  }
}
 80146b0:	bf00      	nop
 80146b2:	3708      	adds	r7, #8
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}

080146b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b082      	sub	sp, #8
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
 80146c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	885b      	ldrh	r3, [r3, #2]
 80146c6:	2b01      	cmp	r3, #1
 80146c8:	d107      	bne.n	80146da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	2201      	movs	r2, #1
 80146ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80146d2:	6878      	ldr	r0, [r7, #4]
 80146d4:	f000 f94c 	bl	8014970 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80146d8:	e013      	b.n	8014702 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80146da:	683b      	ldr	r3, [r7, #0]
 80146dc:	885b      	ldrh	r3, [r3, #2]
 80146de:	2b02      	cmp	r3, #2
 80146e0:	d10b      	bne.n	80146fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80146e2:	683b      	ldr	r3, [r7, #0]
 80146e4:	889b      	ldrh	r3, [r3, #4]
 80146e6:	0a1b      	lsrs	r3, r3, #8
 80146e8:	b29b      	uxth	r3, r3
 80146ea:	b2da      	uxtb	r2, r3
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f000 f93c 	bl	8014970 <USBD_CtlSendStatus>
}
 80146f8:	e003      	b.n	8014702 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80146fa:	6839      	ldr	r1, [r7, #0]
 80146fc:	6878      	ldr	r0, [r7, #4]
 80146fe:	f000 f860 	bl	80147c2 <USBD_CtlError>
}
 8014702:	bf00      	nop
 8014704:	3708      	adds	r7, #8
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}

0801470a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801470a:	b580      	push	{r7, lr}
 801470c:	b082      	sub	sp, #8
 801470e:	af00      	add	r7, sp, #0
 8014710:	6078      	str	r0, [r7, #4]
 8014712:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801471a:	b2db      	uxtb	r3, r3
 801471c:	3b01      	subs	r3, #1
 801471e:	2b02      	cmp	r3, #2
 8014720:	d80b      	bhi.n	801473a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014722:	683b      	ldr	r3, [r7, #0]
 8014724:	885b      	ldrh	r3, [r3, #2]
 8014726:	2b01      	cmp	r3, #1
 8014728:	d10c      	bne.n	8014744 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	2200      	movs	r2, #0
 801472e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	f000 f91c 	bl	8014970 <USBD_CtlSendStatus>
      }
      break;
 8014738:	e004      	b.n	8014744 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801473a:	6839      	ldr	r1, [r7, #0]
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f000 f840 	bl	80147c2 <USBD_CtlError>
      break;
 8014742:	e000      	b.n	8014746 <USBD_ClrFeature+0x3c>
      break;
 8014744:	bf00      	nop
  }
}
 8014746:	bf00      	nop
 8014748:	3708      	adds	r7, #8
 801474a:	46bd      	mov	sp, r7
 801474c:	bd80      	pop	{r7, pc}

0801474e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801474e:	b580      	push	{r7, lr}
 8014750:	b084      	sub	sp, #16
 8014752:	af00      	add	r7, sp, #0
 8014754:	6078      	str	r0, [r7, #4]
 8014756:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	781a      	ldrb	r2, [r3, #0]
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	3301      	adds	r3, #1
 8014768:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	781a      	ldrb	r2, [r3, #0]
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	3301      	adds	r3, #1
 8014776:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014778:	68f8      	ldr	r0, [r7, #12]
 801477a:	f7ff fa16 	bl	8013baa <SWAPBYTE>
 801477e:	4603      	mov	r3, r0
 8014780:	461a      	mov	r2, r3
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	3301      	adds	r3, #1
 801478a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	3301      	adds	r3, #1
 8014790:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014792:	68f8      	ldr	r0, [r7, #12]
 8014794:	f7ff fa09 	bl	8013baa <SWAPBYTE>
 8014798:	4603      	mov	r3, r0
 801479a:	461a      	mov	r2, r3
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	3301      	adds	r3, #1
 80147a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	3301      	adds	r3, #1
 80147aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80147ac:	68f8      	ldr	r0, [r7, #12]
 80147ae:	f7ff f9fc 	bl	8013baa <SWAPBYTE>
 80147b2:	4603      	mov	r3, r0
 80147b4:	461a      	mov	r2, r3
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	80da      	strh	r2, [r3, #6]
}
 80147ba:	bf00      	nop
 80147bc:	3710      	adds	r7, #16
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}

080147c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147c2:	b580      	push	{r7, lr}
 80147c4:	b082      	sub	sp, #8
 80147c6:	af00      	add	r7, sp, #0
 80147c8:	6078      	str	r0, [r7, #4]
 80147ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80147cc:	2180      	movs	r1, #128	@ 0x80
 80147ce:	6878      	ldr	r0, [r7, #4]
 80147d0:	f004 fa68 	bl	8018ca4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80147d4:	2100      	movs	r1, #0
 80147d6:	6878      	ldr	r0, [r7, #4]
 80147d8:	f004 fa64 	bl	8018ca4 <USBD_LL_StallEP>
}
 80147dc:	bf00      	nop
 80147de:	3708      	adds	r7, #8
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bd80      	pop	{r7, pc}

080147e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b086      	sub	sp, #24
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	60f8      	str	r0, [r7, #12]
 80147ec:	60b9      	str	r1, [r7, #8]
 80147ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80147f0:	2300      	movs	r3, #0
 80147f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d042      	beq.n	8014880 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80147fe:	6938      	ldr	r0, [r7, #16]
 8014800:	f000 f842 	bl	8014888 <USBD_GetLen>
 8014804:	4603      	mov	r3, r0
 8014806:	3301      	adds	r3, #1
 8014808:	005b      	lsls	r3, r3, #1
 801480a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801480e:	d808      	bhi.n	8014822 <USBD_GetString+0x3e>
 8014810:	6938      	ldr	r0, [r7, #16]
 8014812:	f000 f839 	bl	8014888 <USBD_GetLen>
 8014816:	4603      	mov	r3, r0
 8014818:	3301      	adds	r3, #1
 801481a:	b29b      	uxth	r3, r3
 801481c:	005b      	lsls	r3, r3, #1
 801481e:	b29a      	uxth	r2, r3
 8014820:	e001      	b.n	8014826 <USBD_GetString+0x42>
 8014822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801482a:	7dfb      	ldrb	r3, [r7, #23]
 801482c:	68ba      	ldr	r2, [r7, #8]
 801482e:	4413      	add	r3, r2
 8014830:	687a      	ldr	r2, [r7, #4]
 8014832:	7812      	ldrb	r2, [r2, #0]
 8014834:	701a      	strb	r2, [r3, #0]
  idx++;
 8014836:	7dfb      	ldrb	r3, [r7, #23]
 8014838:	3301      	adds	r3, #1
 801483a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801483c:	7dfb      	ldrb	r3, [r7, #23]
 801483e:	68ba      	ldr	r2, [r7, #8]
 8014840:	4413      	add	r3, r2
 8014842:	2203      	movs	r2, #3
 8014844:	701a      	strb	r2, [r3, #0]
  idx++;
 8014846:	7dfb      	ldrb	r3, [r7, #23]
 8014848:	3301      	adds	r3, #1
 801484a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801484c:	e013      	b.n	8014876 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801484e:	7dfb      	ldrb	r3, [r7, #23]
 8014850:	68ba      	ldr	r2, [r7, #8]
 8014852:	4413      	add	r3, r2
 8014854:	693a      	ldr	r2, [r7, #16]
 8014856:	7812      	ldrb	r2, [r2, #0]
 8014858:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	3301      	adds	r3, #1
 801485e:	613b      	str	r3, [r7, #16]
    idx++;
 8014860:	7dfb      	ldrb	r3, [r7, #23]
 8014862:	3301      	adds	r3, #1
 8014864:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014866:	7dfb      	ldrb	r3, [r7, #23]
 8014868:	68ba      	ldr	r2, [r7, #8]
 801486a:	4413      	add	r3, r2
 801486c:	2200      	movs	r2, #0
 801486e:	701a      	strb	r2, [r3, #0]
    idx++;
 8014870:	7dfb      	ldrb	r3, [r7, #23]
 8014872:	3301      	adds	r3, #1
 8014874:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014876:	693b      	ldr	r3, [r7, #16]
 8014878:	781b      	ldrb	r3, [r3, #0]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d1e7      	bne.n	801484e <USBD_GetString+0x6a>
 801487e:	e000      	b.n	8014882 <USBD_GetString+0x9e>
    return;
 8014880:	bf00      	nop
  }
}
 8014882:	3718      	adds	r7, #24
 8014884:	46bd      	mov	sp, r7
 8014886:	bd80      	pop	{r7, pc}

08014888 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014888:	b480      	push	{r7}
 801488a:	b085      	sub	sp, #20
 801488c:	af00      	add	r7, sp, #0
 801488e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014890:	2300      	movs	r3, #0
 8014892:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014898:	e005      	b.n	80148a6 <USBD_GetLen+0x1e>
  {
    len++;
 801489a:	7bfb      	ldrb	r3, [r7, #15]
 801489c:	3301      	adds	r3, #1
 801489e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80148a0:	68bb      	ldr	r3, [r7, #8]
 80148a2:	3301      	adds	r3, #1
 80148a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80148a6:	68bb      	ldr	r3, [r7, #8]
 80148a8:	781b      	ldrb	r3, [r3, #0]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d1f5      	bne.n	801489a <USBD_GetLen+0x12>
  }

  return len;
 80148ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80148b0:	4618      	mov	r0, r3
 80148b2:	3714      	adds	r7, #20
 80148b4:	46bd      	mov	sp, r7
 80148b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ba:	4770      	bx	lr

080148bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b084      	sub	sp, #16
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	60f8      	str	r0, [r7, #12]
 80148c4:	60b9      	str	r1, [r7, #8]
 80148c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	2202      	movs	r2, #2
 80148cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	687a      	ldr	r2, [r7, #4]
 80148d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	687a      	ldr	r2, [r7, #4]
 80148da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	68ba      	ldr	r2, [r7, #8]
 80148e0:	2100      	movs	r1, #0
 80148e2:	68f8      	ldr	r0, [r7, #12]
 80148e4:	f004 fa67 	bl	8018db6 <USBD_LL_Transmit>

  return USBD_OK;
 80148e8:	2300      	movs	r3, #0
}
 80148ea:	4618      	mov	r0, r3
 80148ec:	3710      	adds	r7, #16
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}

080148f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80148f2:	b580      	push	{r7, lr}
 80148f4:	b084      	sub	sp, #16
 80148f6:	af00      	add	r7, sp, #0
 80148f8:	60f8      	str	r0, [r7, #12]
 80148fa:	60b9      	str	r1, [r7, #8]
 80148fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	68ba      	ldr	r2, [r7, #8]
 8014902:	2100      	movs	r1, #0
 8014904:	68f8      	ldr	r0, [r7, #12]
 8014906:	f004 fa56 	bl	8018db6 <USBD_LL_Transmit>

  return USBD_OK;
 801490a:	2300      	movs	r3, #0
}
 801490c:	4618      	mov	r0, r3
 801490e:	3710      	adds	r7, #16
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}

08014914 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b084      	sub	sp, #16
 8014918:	af00      	add	r7, sp, #0
 801491a:	60f8      	str	r0, [r7, #12]
 801491c:	60b9      	str	r1, [r7, #8]
 801491e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	2203      	movs	r2, #3
 8014924:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	687a      	ldr	r2, [r7, #4]
 801492c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	687a      	ldr	r2, [r7, #4]
 8014934:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	68ba      	ldr	r2, [r7, #8]
 801493c:	2100      	movs	r1, #0
 801493e:	68f8      	ldr	r0, [r7, #12]
 8014940:	f004 fa5a 	bl	8018df8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014944:	2300      	movs	r3, #0
}
 8014946:	4618      	mov	r0, r3
 8014948:	3710      	adds	r7, #16
 801494a:	46bd      	mov	sp, r7
 801494c:	bd80      	pop	{r7, pc}

0801494e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801494e:	b580      	push	{r7, lr}
 8014950:	b084      	sub	sp, #16
 8014952:	af00      	add	r7, sp, #0
 8014954:	60f8      	str	r0, [r7, #12]
 8014956:	60b9      	str	r1, [r7, #8]
 8014958:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	68ba      	ldr	r2, [r7, #8]
 801495e:	2100      	movs	r1, #0
 8014960:	68f8      	ldr	r0, [r7, #12]
 8014962:	f004 fa49 	bl	8018df8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014966:	2300      	movs	r3, #0
}
 8014968:	4618      	mov	r0, r3
 801496a:	3710      	adds	r7, #16
 801496c:	46bd      	mov	sp, r7
 801496e:	bd80      	pop	{r7, pc}

08014970 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b082      	sub	sp, #8
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	2204      	movs	r2, #4
 801497c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014980:	2300      	movs	r3, #0
 8014982:	2200      	movs	r2, #0
 8014984:	2100      	movs	r1, #0
 8014986:	6878      	ldr	r0, [r7, #4]
 8014988:	f004 fa15 	bl	8018db6 <USBD_LL_Transmit>

  return USBD_OK;
 801498c:	2300      	movs	r3, #0
}
 801498e:	4618      	mov	r0, r3
 8014990:	3708      	adds	r7, #8
 8014992:	46bd      	mov	sp, r7
 8014994:	bd80      	pop	{r7, pc}

08014996 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014996:	b580      	push	{r7, lr}
 8014998:	b082      	sub	sp, #8
 801499a:	af00      	add	r7, sp, #0
 801499c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	2205      	movs	r2, #5
 80149a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80149a6:	2300      	movs	r3, #0
 80149a8:	2200      	movs	r2, #0
 80149aa:	2100      	movs	r1, #0
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f004 fa23 	bl	8018df8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80149b2:	2300      	movs	r3, #0
}
 80149b4:	4618      	mov	r0, r3
 80149b6:	3708      	adds	r7, #8
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}

080149bc <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b088      	sub	sp, #32
 80149c0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80149c2:	2300      	movs	r3, #0
 80149c4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80149c6:	f107 0308 	add.w	r3, r7, #8
 80149ca:	2218      	movs	r2, #24
 80149cc:	2100      	movs	r1, #0
 80149ce:	4618      	mov	r0, r3
 80149d0:	f001 f92d 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x3f;
 80149d4:	233f      	movs	r3, #63	@ 0x3f
 80149d6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80149d8:	2381      	movs	r3, #129	@ 0x81
 80149da:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80149dc:	1dfb      	adds	r3, r7, #7
 80149de:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80149e0:	2301      	movs	r3, #1
 80149e2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80149e4:	f107 0308 	add.w	r3, r7, #8
 80149e8:	2100      	movs	r1, #0
 80149ea:	4618      	mov	r0, r3
 80149ec:	f001 fba8 	bl	8016140 <hci_send_req>
 80149f0:	4603      	mov	r3, r0
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	da01      	bge.n	80149fa <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80149f6:	23ff      	movs	r3, #255	@ 0xff
 80149f8:	e000      	b.n	80149fc <aci_gap_set_non_discoverable+0x40>
  return status;
 80149fa:	79fb      	ldrb	r3, [r7, #7]
}
 80149fc:	4618      	mov	r0, r3
 80149fe:	3720      	adds	r7, #32
 8014a00:	46bd      	mov	sp, r7
 8014a02:	bd80      	pop	{r7, pc}

08014a04 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8014a04:	b5b0      	push	{r4, r5, r7, lr}
 8014a06:	b0ce      	sub	sp, #312	@ 0x138
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	4605      	mov	r5, r0
 8014a0c:	460c      	mov	r4, r1
 8014a0e:	4610      	mov	r0, r2
 8014a10:	4619      	mov	r1, r3
 8014a12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a16:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8014a1a:	462a      	mov	r2, r5
 8014a1c:	701a      	strb	r2, [r3, #0]
 8014a1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a22:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014a26:	4622      	mov	r2, r4
 8014a28:	801a      	strh	r2, [r3, #0]
 8014a2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a2e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8014a32:	4602      	mov	r2, r0
 8014a34:	801a      	strh	r2, [r3, #0]
 8014a36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a3a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8014a3e:	460a      	mov	r2, r1
 8014a40:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8014a42:	f107 0310 	add.w	r3, r7, #16
 8014a46:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8014a4a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8014a4e:	3308      	adds	r3, #8
 8014a50:	f107 0210 	add.w	r2, r7, #16
 8014a54:	4413      	add	r3, r2
 8014a56:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8014a5a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014a5e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014a62:	4413      	add	r3, r2
 8014a64:	3309      	adds	r3, #9
 8014a66:	f107 0210 	add.w	r2, r7, #16
 8014a6a:	4413      	add	r3, r2
 8014a6c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014a70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a74:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014a78:	2200      	movs	r2, #0
 8014a7a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8014a82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014a86:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014a8a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8014a8e:	7812      	ldrb	r2, [r2, #0]
 8014a90:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014a92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a96:	3301      	adds	r3, #1
 8014a98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8014a9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014aa0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014aa4:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8014aa8:	8812      	ldrh	r2, [r2, #0]
 8014aaa:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8014aae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ab2:	3302      	adds	r3, #2
 8014ab4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8014ab8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014abc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014ac0:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8014ac4:	8812      	ldrh	r2, [r2, #0]
 8014ac6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8014aca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ace:	3302      	adds	r3, #2
 8014ad0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8014ad4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014ad8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014adc:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8014ae0:	7812      	ldrb	r2, [r2, #0]
 8014ae2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014ae4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ae8:	3301      	adds	r3, #1
 8014aea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8014aee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014af2:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8014af6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014af8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014afc:	3301      	adds	r3, #1
 8014afe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8014b02:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b06:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014b0a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8014b0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b10:	3301      	adds	r3, #1
 8014b12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8014b16:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b1a:	3308      	adds	r3, #8
 8014b1c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014b20:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8014b24:	4618      	mov	r0, r3
 8014b26:	f001 f872 	bl	8015c0e <Osal_MemCpy>
    index_input += Local_Name_Length;
 8014b2a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8014b2e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014b32:	4413      	add	r3, r2
 8014b34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8014b38:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014b3c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014b40:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8014b42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b46:	3301      	adds	r3, #1
 8014b48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8014b4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014b50:	3301      	adds	r3, #1
 8014b52:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014b56:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f001 f857 	bl	8015c0e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8014b60:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014b64:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014b68:	4413      	add	r3, r2
 8014b6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8014b6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014b72:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8014b76:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8014b78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b7c:	3302      	adds	r3, #2
 8014b7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8014b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014b86:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8014b8a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8014b8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b90:	3302      	adds	r3, #2
 8014b92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014b96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014b9a:	2218      	movs	r2, #24
 8014b9c:	2100      	movs	r1, #0
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f001 f845 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x3f;
 8014ba4:	233f      	movs	r3, #63	@ 0x3f
 8014ba6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8014baa:	2383      	movs	r3, #131	@ 0x83
 8014bac:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014bb0:	f107 0310 	add.w	r3, r7, #16
 8014bb4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014bb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014bbc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014bc0:	f107 030f 	add.w	r3, r7, #15
 8014bc4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014bc8:	2301      	movs	r3, #1
 8014bca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014bce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014bd2:	2100      	movs	r1, #0
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f001 fab3 	bl	8016140 <hci_send_req>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	da01      	bge.n	8014be4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8014be0:	23ff      	movs	r3, #255	@ 0xff
 8014be2:	e004      	b.n	8014bee <aci_gap_set_discoverable+0x1ea>
  return status;
 8014be4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014be8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014bec:	781b      	ldrb	r3, [r3, #0]
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bdb0      	pop	{r4, r5, r7, pc}

08014bf8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b0cc      	sub	sp, #304	@ 0x130
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	4602      	mov	r2, r0
 8014c00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014c04:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014c08:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8014c0a:	f107 0310 	add.w	r3, r7, #16
 8014c0e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014c12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014c16:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8014c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014c28:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014c2c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014c30:	7812      	ldrb	r2, [r2, #0]
 8014c32:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014c34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c38:	3301      	adds	r3, #1
 8014c3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014c3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014c42:	2218      	movs	r2, #24
 8014c44:	2100      	movs	r1, #0
 8014c46:	4618      	mov	r0, r3
 8014c48:	f000 fff1 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x3f;
 8014c4c:	233f      	movs	r3, #63	@ 0x3f
 8014c4e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8014c52:	2385      	movs	r3, #133	@ 0x85
 8014c54:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014c58:	f107 0310 	add.w	r3, r7, #16
 8014c5c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014c60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c64:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014c68:	f107 030f 	add.w	r3, r7, #15
 8014c6c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014c70:	2301      	movs	r3, #1
 8014c72:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014c76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014c7a:	2100      	movs	r1, #0
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f001 fa5f 	bl	8016140 <hci_send_req>
 8014c82:	4603      	mov	r3, r0
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	da01      	bge.n	8014c8c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8014c88:	23ff      	movs	r3, #255	@ 0xff
 8014c8a:	e004      	b.n	8014c96 <aci_gap_set_io_capability+0x9e>
  return status;
 8014c8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014c90:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014c94:	781b      	ldrb	r3, [r3, #0]
}
 8014c96:	4618      	mov	r0, r3
 8014c98:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	bd80      	pop	{r7, pc}

08014ca0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8014ca0:	b5b0      	push	{r4, r5, r7, lr}
 8014ca2:	b0cc      	sub	sp, #304	@ 0x130
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	4605      	mov	r5, r0
 8014ca8:	460c      	mov	r4, r1
 8014caa:	4610      	mov	r0, r2
 8014cac:	4619      	mov	r1, r3
 8014cae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014cb2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014cb6:	462a      	mov	r2, r5
 8014cb8:	701a      	strb	r2, [r3, #0]
 8014cba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014cbe:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014cc2:	4622      	mov	r2, r4
 8014cc4:	701a      	strb	r2, [r3, #0]
 8014cc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014cca:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8014cce:	4602      	mov	r2, r0
 8014cd0:	701a      	strb	r2, [r3, #0]
 8014cd2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014cd6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cda:	460a      	mov	r2, r1
 8014cdc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8014cde:	f107 0310 	add.w	r3, r7, #16
 8014ce2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014ce6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014cea:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014cee:	2200      	movs	r2, #0
 8014cf0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8014cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014cfc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014d00:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014d04:	7812      	ldrb	r2, [r2, #0]
 8014d06:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014d08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d0c:	3301      	adds	r3, #1
 8014d0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8014d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d16:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014d1a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014d1e:	7812      	ldrb	r2, [r2, #0]
 8014d20:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8014d22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d26:	3301      	adds	r3, #1
 8014d28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8014d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d30:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014d34:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8014d38:	7812      	ldrb	r2, [r2, #0]
 8014d3a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8014d3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d40:	3301      	adds	r3, #1
 8014d42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8014d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d4a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014d4e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8014d52:	7812      	ldrb	r2, [r2, #0]
 8014d54:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8014d56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d5a:	3301      	adds	r3, #1
 8014d5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8014d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d64:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8014d68:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8014d6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d6e:	3301      	adds	r3, #1
 8014d70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8014d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d78:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8014d7c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014d7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d82:	3301      	adds	r3, #1
 8014d84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8014d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d8c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8014d90:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014d92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d96:	3301      	adds	r3, #1
 8014d98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8014d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014da0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8014da4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8014da8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014dac:	3304      	adds	r3, #4
 8014dae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8014db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014db6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8014dba:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8014dbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014dc0:	3301      	adds	r3, #1
 8014dc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014dc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014dca:	2218      	movs	r2, #24
 8014dcc:	2100      	movs	r1, #0
 8014dce:	4618      	mov	r0, r3
 8014dd0:	f000 ff2d 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x3f;
 8014dd4:	233f      	movs	r3, #63	@ 0x3f
 8014dd6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8014dda:	2386      	movs	r3, #134	@ 0x86
 8014ddc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014de0:	f107 0310 	add.w	r3, r7, #16
 8014de4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014de8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014dec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014df0:	f107 030f 	add.w	r3, r7, #15
 8014df4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014df8:	2301      	movs	r3, #1
 8014dfa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014dfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014e02:	2100      	movs	r1, #0
 8014e04:	4618      	mov	r0, r3
 8014e06:	f001 f99b 	bl	8016140 <hci_send_req>
 8014e0a:	4603      	mov	r3, r0
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	da01      	bge.n	8014e14 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8014e10:	23ff      	movs	r3, #255	@ 0xff
 8014e12:	e004      	b.n	8014e1e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8014e14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014e18:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014e1c:	781b      	ldrb	r3, [r3, #0]
}
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bdb0      	pop	{r4, r5, r7, pc}

08014e28 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b0cc      	sub	sp, #304	@ 0x130
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	4602      	mov	r2, r0
 8014e30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014e34:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014e38:	6019      	str	r1, [r3, #0]
 8014e3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014e3e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014e42:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8014e44:	f107 0310 	add.w	r3, r7, #16
 8014e48:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014e4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014e50:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014e54:	2200      	movs	r2, #0
 8014e56:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014e58:	2300      	movs	r3, #0
 8014e5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8014e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014e62:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014e66:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014e6a:	8812      	ldrh	r2, [r2, #0]
 8014e6c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014e6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e72:	3302      	adds	r3, #2
 8014e74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8014e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014e7c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014e80:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8014e84:	6812      	ldr	r2, [r2, #0]
 8014e86:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8014e8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e8e:	3304      	adds	r3, #4
 8014e90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014e94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014e98:	2218      	movs	r2, #24
 8014e9a:	2100      	movs	r1, #0
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f000 fec6 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x3f;
 8014ea2:	233f      	movs	r3, #63	@ 0x3f
 8014ea4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8014ea8:	2388      	movs	r3, #136	@ 0x88
 8014eaa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014eae:	f107 0310 	add.w	r3, r7, #16
 8014eb2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014eb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014eba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014ebe:	f107 030f 	add.w	r3, r7, #15
 8014ec2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014ec6:	2301      	movs	r3, #1
 8014ec8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014ecc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014ed0:	2100      	movs	r1, #0
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	f001 f934 	bl	8016140 <hci_send_req>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	da01      	bge.n	8014ee2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8014ede:	23ff      	movs	r3, #255	@ 0xff
 8014ee0:	e004      	b.n	8014eec <aci_gap_pass_key_resp+0xc4>
  return status;
 8014ee2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014ee6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014eea:	781b      	ldrb	r3, [r3, #0]
}
 8014eec:	4618      	mov	r0, r3
 8014eee:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	bd80      	pop	{r7, pc}

08014ef6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8014ef6:	b590      	push	{r4, r7, lr}
 8014ef8:	b0cd      	sub	sp, #308	@ 0x134
 8014efa:	af00      	add	r7, sp, #0
 8014efc:	4604      	mov	r4, r0
 8014efe:	4608      	mov	r0, r1
 8014f00:	4611      	mov	r1, r2
 8014f02:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014f06:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8014f0a:	6013      	str	r3, [r2, #0]
 8014f0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f10:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014f14:	4622      	mov	r2, r4
 8014f16:	701a      	strb	r2, [r3, #0]
 8014f18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f1c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014f20:	4602      	mov	r2, r0
 8014f22:	701a      	strb	r2, [r3, #0]
 8014f24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f28:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8014f2c:	460a      	mov	r2, r1
 8014f2e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8014f30:	f107 0310 	add.w	r3, r7, #16
 8014f34:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8014f38:	f107 0308 	add.w	r3, r7, #8
 8014f3c:	2207      	movs	r2, #7
 8014f3e:	2100      	movs	r1, #0
 8014f40:	4618      	mov	r0, r3
 8014f42:	f000 fe74 	bl	8015c2e <Osal_MemSet>
  int index_input = 0;
 8014f46:	2300      	movs	r3, #0
 8014f48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8014f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014f50:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014f54:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014f58:	7812      	ldrb	r2, [r2, #0]
 8014f5a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014f5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f60:	3301      	adds	r3, #1
 8014f62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8014f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014f6a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014f6e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014f72:	7812      	ldrb	r2, [r2, #0]
 8014f74:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8014f76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f7a:	3301      	adds	r3, #1
 8014f7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8014f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014f84:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014f88:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8014f8c:	7812      	ldrb	r2, [r2, #0]
 8014f8e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8014f90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f94:	3301      	adds	r3, #1
 8014f96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014f9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014f9e:	2218      	movs	r2, #24
 8014fa0:	2100      	movs	r1, #0
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f000 fe43 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x3f;
 8014fa8:	233f      	movs	r3, #63	@ 0x3f
 8014faa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8014fae:	238a      	movs	r3, #138	@ 0x8a
 8014fb0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014fb4:	f107 0310 	add.w	r3, r7, #16
 8014fb8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014fbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fc0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8014fc4:	f107 0308 	add.w	r3, r7, #8
 8014fc8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8014fcc:	2307      	movs	r3, #7
 8014fce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014fd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014fd6:	2100      	movs	r1, #0
 8014fd8:	4618      	mov	r0, r3
 8014fda:	f001 f8b1 	bl	8016140 <hci_send_req>
 8014fde:	4603      	mov	r3, r0
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	da01      	bge.n	8014fe8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8014fe4:	23ff      	movs	r3, #255	@ 0xff
 8014fe6:	e02e      	b.n	8015046 <aci_gap_init+0x150>
  if ( resp.Status )
 8014fe8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014fec:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8014ff0:	781b      	ldrb	r3, [r3, #0]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d005      	beq.n	8015002 <aci_gap_init+0x10c>
    return resp.Status;
 8014ff6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014ffa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8014ffe:	781b      	ldrb	r3, [r3, #0]
 8015000:	e021      	b.n	8015046 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8015002:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015006:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801500a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801500e:	b29a      	uxth	r2, r3
 8015010:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015014:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 801501c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015020:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015024:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8015028:	b29a      	uxth	r2, r3
 801502a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801502e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8015030:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015034:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015038:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 801503c:	b29a      	uxth	r2, r3
 801503e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8015042:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015044:	2300      	movs	r3, #0
}
 8015046:	4618      	mov	r0, r3
 8015048:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 801504c:	46bd      	mov	sp, r7
 801504e:	bd90      	pop	{r4, r7, pc}

08015050 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b0cc      	sub	sp, #304	@ 0x130
 8015054:	af00      	add	r7, sp, #0
 8015056:	4602      	mov	r2, r0
 8015058:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801505c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015060:	6019      	str	r1, [r3, #0]
 8015062:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015066:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801506a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 801506c:	f107 0310 	add.w	r3, r7, #16
 8015070:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015074:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015078:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801507c:	2200      	movs	r2, #0
 801507e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015080:	2300      	movs	r3, #0
 8015082:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8015086:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801508a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801508e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015092:	7812      	ldrb	r2, [r2, #0]
 8015094:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015096:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801509a:	3301      	adds	r3, #1
 801509c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80150a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80150a4:	1c58      	adds	r0, r3, #1
 80150a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150aa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80150ae:	781a      	ldrb	r2, [r3, #0]
 80150b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150b4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80150b8:	6819      	ldr	r1, [r3, #0]
 80150ba:	f000 fda8 	bl	8015c0e <Osal_MemCpy>
  index_input += AdvDataLen;
 80150be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150c2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80150c6:	781b      	ldrb	r3, [r3, #0]
 80150c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80150cc:	4413      	add	r3, r2
 80150ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80150d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80150d6:	2218      	movs	r2, #24
 80150d8:	2100      	movs	r1, #0
 80150da:	4618      	mov	r0, r3
 80150dc:	f000 fda7 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x3f;
 80150e0:	233f      	movs	r3, #63	@ 0x3f
 80150e2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80150e6:	238e      	movs	r3, #142	@ 0x8e
 80150e8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80150ec:	f107 0310 	add.w	r3, r7, #16
 80150f0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80150f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80150fc:	f107 030f 	add.w	r3, r7, #15
 8015100:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015104:	2301      	movs	r3, #1
 8015106:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801510a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801510e:	2100      	movs	r1, #0
 8015110:	4618      	mov	r0, r3
 8015112:	f001 f815 	bl	8016140 <hci_send_req>
 8015116:	4603      	mov	r3, r0
 8015118:	2b00      	cmp	r3, #0
 801511a:	da01      	bge.n	8015120 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 801511c:	23ff      	movs	r3, #255	@ 0xff
 801511e:	e004      	b.n	801512a <aci_gap_update_adv_data+0xda>
  return status;
 8015120:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015124:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015128:	781b      	ldrb	r3, [r3, #0]
}
 801512a:	4618      	mov	r0, r3
 801512c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015130:	46bd      	mov	sp, r7
 8015132:	bd80      	pop	{r7, pc}

08015134 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b088      	sub	sp, #32
 8015138:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801513a:	2300      	movs	r3, #0
 801513c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801513e:	f107 0308 	add.w	r3, r7, #8
 8015142:	2218      	movs	r2, #24
 8015144:	2100      	movs	r1, #0
 8015146:	4618      	mov	r0, r3
 8015148:	f000 fd71 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x3f;
 801514c:	233f      	movs	r3, #63	@ 0x3f
 801514e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8015150:	2392      	movs	r3, #146	@ 0x92
 8015152:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015154:	1dfb      	adds	r3, r7, #7
 8015156:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015158:	2301      	movs	r3, #1
 801515a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801515c:	f107 0308 	add.w	r3, r7, #8
 8015160:	2100      	movs	r1, #0
 8015162:	4618      	mov	r0, r3
 8015164:	f000 ffec 	bl	8016140 <hci_send_req>
 8015168:	4603      	mov	r3, r0
 801516a:	2b00      	cmp	r3, #0
 801516c:	da01      	bge.n	8015172 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 801516e:	23ff      	movs	r3, #255	@ 0xff
 8015170:	e000      	b.n	8015174 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8015172:	79fb      	ldrb	r3, [r7, #7]
}
 8015174:	4618      	mov	r0, r3
 8015176:	3720      	adds	r7, #32
 8015178:	46bd      	mov	sp, r7
 801517a:	bd80      	pop	{r7, pc}

0801517c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b0cc      	sub	sp, #304	@ 0x130
 8015180:	af00      	add	r7, sp, #0
 8015182:	4602      	mov	r2, r0
 8015184:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015188:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801518c:	801a      	strh	r2, [r3, #0]
 801518e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015192:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8015196:	460a      	mov	r2, r1
 8015198:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 801519a:	f107 0310 	add.w	r3, r7, #16
 801519e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80151a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151a6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80151aa:	2200      	movs	r2, #0
 80151ac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80151ae:	2300      	movs	r3, #0
 80151b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80151b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80151b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80151bc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80151c0:	8812      	ldrh	r2, [r2, #0]
 80151c2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80151c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151c8:	3302      	adds	r3, #2
 80151ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80151ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80151d2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80151d6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80151da:	7812      	ldrb	r2, [r2, #0]
 80151dc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80151de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151e2:	3301      	adds	r3, #1
 80151e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80151e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80151ec:	2218      	movs	r2, #24
 80151ee:	2100      	movs	r1, #0
 80151f0:	4618      	mov	r0, r3
 80151f2:	f000 fd1c 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x3f;
 80151f6:	233f      	movs	r3, #63	@ 0x3f
 80151f8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80151fc:	23a5      	movs	r3, #165	@ 0xa5
 80151fe:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015202:	f107 0310 	add.w	r3, r7, #16
 8015206:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801520a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801520e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015212:	f107 030f 	add.w	r3, r7, #15
 8015216:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801521a:	2301      	movs	r3, #1
 801521c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015220:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015224:	2100      	movs	r1, #0
 8015226:	4618      	mov	r0, r3
 8015228:	f000 ff8a 	bl	8016140 <hci_send_req>
 801522c:	4603      	mov	r3, r0
 801522e:	2b00      	cmp	r3, #0
 8015230:	da01      	bge.n	8015236 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8015232:	23ff      	movs	r3, #255	@ 0xff
 8015234:	e004      	b.n	8015240 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8015236:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801523a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801523e:	781b      	ldrb	r3, [r3, #0]
}
 8015240:	4618      	mov	r0, r3
 8015242:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}

0801524a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 801524a:	b580      	push	{r7, lr}
 801524c:	b088      	sub	sp, #32
 801524e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8015250:	2300      	movs	r3, #0
 8015252:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015254:	f107 0308 	add.w	r3, r7, #8
 8015258:	2218      	movs	r2, #24
 801525a:	2100      	movs	r1, #0
 801525c:	4618      	mov	r0, r3
 801525e:	f000 fce6 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x3f;
 8015262:	233f      	movs	r3, #63	@ 0x3f
 8015264:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8015266:	f240 1301 	movw	r3, #257	@ 0x101
 801526a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801526c:	1dfb      	adds	r3, r7, #7
 801526e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015270:	2301      	movs	r3, #1
 8015272:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015274:	f107 0308 	add.w	r3, r7, #8
 8015278:	2100      	movs	r1, #0
 801527a:	4618      	mov	r0, r3
 801527c:	f000 ff60 	bl	8016140 <hci_send_req>
 8015280:	4603      	mov	r3, r0
 8015282:	2b00      	cmp	r3, #0
 8015284:	da01      	bge.n	801528a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8015286:	23ff      	movs	r3, #255	@ 0xff
 8015288:	e000      	b.n	801528c <aci_gatt_init+0x42>
  return status;
 801528a:	79fb      	ldrb	r3, [r7, #7]
}
 801528c:	4618      	mov	r0, r3
 801528e:	3720      	adds	r7, #32
 8015290:	46bd      	mov	sp, r7
 8015292:	bd80      	pop	{r7, pc}

08015294 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8015294:	b590      	push	{r4, r7, lr}
 8015296:	b0cf      	sub	sp, #316	@ 0x13c
 8015298:	af00      	add	r7, sp, #0
 801529a:	4604      	mov	r4, r0
 801529c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80152a0:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80152a4:	6001      	str	r1, [r0, #0]
 80152a6:	4610      	mov	r0, r2
 80152a8:	4619      	mov	r1, r3
 80152aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152ae:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80152b2:	4622      	mov	r2, r4
 80152b4:	701a      	strb	r2, [r3, #0]
 80152b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152ba:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80152be:	4602      	mov	r2, r0
 80152c0:	701a      	strb	r2, [r3, #0]
 80152c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152c6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80152ca:	460a      	mov	r2, r1
 80152cc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80152ce:	f107 0310 	add.w	r3, r7, #16
 80152d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80152d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152da:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80152de:	781b      	ldrb	r3, [r3, #0]
 80152e0:	2b01      	cmp	r3, #1
 80152e2:	d00a      	beq.n	80152fa <aci_gatt_add_service+0x66>
 80152e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152e8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80152ec:	781b      	ldrb	r3, [r3, #0]
 80152ee:	2b02      	cmp	r3, #2
 80152f0:	d101      	bne.n	80152f6 <aci_gatt_add_service+0x62>
 80152f2:	2311      	movs	r3, #17
 80152f4:	e002      	b.n	80152fc <aci_gatt_add_service+0x68>
 80152f6:	2301      	movs	r3, #1
 80152f8:	e000      	b.n	80152fc <aci_gatt_add_service+0x68>
 80152fa:	2303      	movs	r3, #3
 80152fc:	f107 0210 	add.w	r2, r7, #16
 8015300:	4413      	add	r3, r2
 8015302:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015306:	f107 030c 	add.w	r3, r7, #12
 801530a:	2203      	movs	r2, #3
 801530c:	2100      	movs	r1, #0
 801530e:	4618      	mov	r0, r3
 8015310:	f000 fc8d 	bl	8015c2e <Osal_MemSet>
  int index_input = 0;
 8015314:	2300      	movs	r3, #0
 8015316:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 801531a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801531e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8015322:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8015326:	7812      	ldrb	r2, [r2, #0]
 8015328:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801532a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801532e:	3301      	adds	r3, #1
 8015330:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8015334:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015338:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801533c:	781b      	ldrb	r3, [r3, #0]
 801533e:	2b01      	cmp	r3, #1
 8015340:	d002      	beq.n	8015348 <aci_gatt_add_service+0xb4>
 8015342:	2b02      	cmp	r3, #2
 8015344:	d004      	beq.n	8015350 <aci_gatt_add_service+0xbc>
 8015346:	e007      	b.n	8015358 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8015348:	2302      	movs	r3, #2
 801534a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 801534e:	e005      	b.n	801535c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8015350:	2310      	movs	r3, #16
 8015352:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8015356:	e001      	b.n	801535c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8015358:	2397      	movs	r3, #151	@ 0x97
 801535a:	e06c      	b.n	8015436 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 801535c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015360:	1c58      	adds	r0, r3, #1
 8015362:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8015366:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801536a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801536e:	6819      	ldr	r1, [r3, #0]
 8015370:	f000 fc4d 	bl	8015c0e <Osal_MemCpy>
    index_input += size;
 8015374:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8015378:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801537c:	4413      	add	r3, r2
 801537e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8015382:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015386:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801538a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 801538e:	7812      	ldrb	r2, [r2, #0]
 8015390:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8015392:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015396:	3301      	adds	r3, #1
 8015398:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 801539c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80153a0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80153a4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80153a8:	7812      	ldrb	r2, [r2, #0]
 80153aa:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80153ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153b0:	3301      	adds	r3, #1
 80153b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80153b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80153ba:	2218      	movs	r2, #24
 80153bc:	2100      	movs	r1, #0
 80153be:	4618      	mov	r0, r3
 80153c0:	f000 fc35 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x3f;
 80153c4:	233f      	movs	r3, #63	@ 0x3f
 80153c6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 80153ca:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80153ce:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80153d2:	f107 0310 	add.w	r3, r7, #16
 80153d6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80153da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153de:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80153e2:	f107 030c 	add.w	r3, r7, #12
 80153e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80153ea:	2303      	movs	r3, #3
 80153ec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80153f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80153f4:	2100      	movs	r1, #0
 80153f6:	4618      	mov	r0, r3
 80153f8:	f000 fea2 	bl	8016140 <hci_send_req>
 80153fc:	4603      	mov	r3, r0
 80153fe:	2b00      	cmp	r3, #0
 8015400:	da01      	bge.n	8015406 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8015402:	23ff      	movs	r3, #255	@ 0xff
 8015404:	e017      	b.n	8015436 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8015406:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801540a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801540e:	781b      	ldrb	r3, [r3, #0]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d005      	beq.n	8015420 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8015414:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015418:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801541c:	781b      	ldrb	r3, [r3, #0]
 801541e:	e00a      	b.n	8015436 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8015420:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015424:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015428:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801542c:	b29a      	uxth	r2, r3
 801542e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8015432:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015434:	2300      	movs	r3, #0
}
 8015436:	4618      	mov	r0, r3
 8015438:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 801543c:	46bd      	mov	sp, r7
 801543e:	bd90      	pop	{r4, r7, pc}

08015440 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8015440:	b590      	push	{r4, r7, lr}
 8015442:	b0d1      	sub	sp, #324	@ 0x144
 8015444:	af00      	add	r7, sp, #0
 8015446:	4604      	mov	r4, r0
 8015448:	4608      	mov	r0, r1
 801544a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 801544e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8015452:	600a      	str	r2, [r1, #0]
 8015454:	4619      	mov	r1, r3
 8015456:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801545a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801545e:	4622      	mov	r2, r4
 8015460:	801a      	strh	r2, [r3, #0]
 8015462:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015466:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801546a:	4602      	mov	r2, r0
 801546c:	701a      	strb	r2, [r3, #0]
 801546e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015472:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8015476:	460a      	mov	r2, r1
 8015478:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 801547a:	f107 0318 	add.w	r3, r7, #24
 801547e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8015482:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015486:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801548a:	781b      	ldrb	r3, [r3, #0]
 801548c:	2b01      	cmp	r3, #1
 801548e:	d00a      	beq.n	80154a6 <aci_gatt_add_char+0x66>
 8015490:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015494:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8015498:	781b      	ldrb	r3, [r3, #0]
 801549a:	2b02      	cmp	r3, #2
 801549c:	d101      	bne.n	80154a2 <aci_gatt_add_char+0x62>
 801549e:	2313      	movs	r3, #19
 80154a0:	e002      	b.n	80154a8 <aci_gatt_add_char+0x68>
 80154a2:	2303      	movs	r3, #3
 80154a4:	e000      	b.n	80154a8 <aci_gatt_add_char+0x68>
 80154a6:	2305      	movs	r3, #5
 80154a8:	f107 0218 	add.w	r2, r7, #24
 80154ac:	4413      	add	r3, r2
 80154ae:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80154b2:	f107 0314 	add.w	r3, r7, #20
 80154b6:	2203      	movs	r2, #3
 80154b8:	2100      	movs	r1, #0
 80154ba:	4618      	mov	r0, r3
 80154bc:	f000 fbb7 	bl	8015c2e <Osal_MemSet>
  int index_input = 0;
 80154c0:	2300      	movs	r3, #0
 80154c2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 80154c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80154ca:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80154ce:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80154d2:	8812      	ldrh	r2, [r2, #0]
 80154d4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80154d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80154da:	3302      	adds	r3, #2
 80154dc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80154e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80154e4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80154e8:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80154ec:	7812      	ldrb	r2, [r2, #0]
 80154ee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80154f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80154f4:	3301      	adds	r3, #1
 80154f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80154fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80154fe:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8015502:	781b      	ldrb	r3, [r3, #0]
 8015504:	2b01      	cmp	r3, #1
 8015506:	d002      	beq.n	801550e <aci_gatt_add_char+0xce>
 8015508:	2b02      	cmp	r3, #2
 801550a:	d004      	beq.n	8015516 <aci_gatt_add_char+0xd6>
 801550c:	e007      	b.n	801551e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 801550e:	2302      	movs	r3, #2
 8015510:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8015514:	e005      	b.n	8015522 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8015516:	2310      	movs	r3, #16
 8015518:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 801551c:	e001      	b.n	8015522 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 801551e:	2397      	movs	r3, #151	@ 0x97
 8015520:	e091      	b.n	8015646 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8015522:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8015526:	1cd8      	adds	r0, r3, #3
 8015528:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 801552c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015530:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8015534:	6819      	ldr	r1, [r3, #0]
 8015536:	f000 fb6a 	bl	8015c0e <Osal_MemCpy>
    index_input += size;
 801553a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801553e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8015542:	4413      	add	r3, r2
 8015544:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8015548:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801554c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8015550:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8015554:	8812      	ldrh	r2, [r2, #0]
 8015556:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8015558:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801555c:	3302      	adds	r3, #2
 801555e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8015562:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015566:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 801556a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 801556c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015570:	3301      	adds	r3, #1
 8015572:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8015576:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801557a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 801557e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8015580:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015584:	3301      	adds	r3, #1
 8015586:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 801558a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801558e:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8015592:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8015594:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015598:	3301      	adds	r3, #1
 801559a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 801559e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80155a2:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 80155a6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80155a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80155ac:	3301      	adds	r3, #1
 80155ae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80155b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80155b6:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 80155ba:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80155bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80155c0:	3301      	adds	r3, #1
 80155c2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80155c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80155ca:	2218      	movs	r2, #24
 80155cc:	2100      	movs	r1, #0
 80155ce:	4618      	mov	r0, r3
 80155d0:	f000 fb2d 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x3f;
 80155d4:	233f      	movs	r3, #63	@ 0x3f
 80155d6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80155da:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80155de:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80155e2:	f107 0318 	add.w	r3, r7, #24
 80155e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80155ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80155ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80155f2:	f107 0314 	add.w	r3, r7, #20
 80155f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80155fa:	2303      	movs	r3, #3
 80155fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015600:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015604:	2100      	movs	r1, #0
 8015606:	4618      	mov	r0, r3
 8015608:	f000 fd9a 	bl	8016140 <hci_send_req>
 801560c:	4603      	mov	r3, r0
 801560e:	2b00      	cmp	r3, #0
 8015610:	da01      	bge.n	8015616 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8015612:	23ff      	movs	r3, #255	@ 0xff
 8015614:	e017      	b.n	8015646 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8015616:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801561a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801561e:	781b      	ldrb	r3, [r3, #0]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d005      	beq.n	8015630 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8015624:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015628:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801562c:	781b      	ldrb	r3, [r3, #0]
 801562e:	e00a      	b.n	8015646 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8015630:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015634:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015638:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801563c:	b29a      	uxth	r2, r3
 801563e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8015642:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015644:	2300      	movs	r3, #0
}
 8015646:	4618      	mov	r0, r3
 8015648:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 801564c:	46bd      	mov	sp, r7
 801564e:	bd90      	pop	{r4, r7, pc}

08015650 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8015650:	b5b0      	push	{r4, r5, r7, lr}
 8015652:	b0cc      	sub	sp, #304	@ 0x130
 8015654:	af00      	add	r7, sp, #0
 8015656:	4605      	mov	r5, r0
 8015658:	460c      	mov	r4, r1
 801565a:	4610      	mov	r0, r2
 801565c:	4619      	mov	r1, r3
 801565e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015662:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015666:	462a      	mov	r2, r5
 8015668:	801a      	strh	r2, [r3, #0]
 801566a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801566e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015672:	4622      	mov	r2, r4
 8015674:	801a      	strh	r2, [r3, #0]
 8015676:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801567a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 801567e:	4602      	mov	r2, r0
 8015680:	701a      	strb	r2, [r3, #0]
 8015682:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015686:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 801568a:	460a      	mov	r2, r1
 801568c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 801568e:	f107 0310 	add.w	r3, r7, #16
 8015692:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015696:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801569a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801569e:	2200      	movs	r2, #0
 80156a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80156a2:	2300      	movs	r3, #0
 80156a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 80156a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80156ac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80156b0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80156b4:	8812      	ldrh	r2, [r2, #0]
 80156b6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80156b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80156bc:	3302      	adds	r3, #2
 80156be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 80156c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80156c6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80156ca:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80156ce:	8812      	ldrh	r2, [r2, #0]
 80156d0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80156d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80156d6:	3302      	adds	r3, #2
 80156d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 80156dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80156e0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80156e4:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80156e8:	7812      	ldrb	r2, [r2, #0]
 80156ea:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80156ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80156f0:	3301      	adds	r3, #1
 80156f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80156f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80156fa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80156fe:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8015702:	7812      	ldrb	r2, [r2, #0]
 8015704:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8015706:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801570a:	3301      	adds	r3, #1
 801570c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8015710:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015714:	1d98      	adds	r0, r3, #6
 8015716:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801571a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 801571e:	781b      	ldrb	r3, [r3, #0]
 8015720:	461a      	mov	r2, r3
 8015722:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8015726:	f000 fa72 	bl	8015c0e <Osal_MemCpy>
  index_input += Char_Value_Length;
 801572a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801572e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8015732:	781b      	ldrb	r3, [r3, #0]
 8015734:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015738:	4413      	add	r3, r2
 801573a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801573e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015742:	2218      	movs	r2, #24
 8015744:	2100      	movs	r1, #0
 8015746:	4618      	mov	r0, r3
 8015748:	f000 fa71 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x3f;
 801574c:	233f      	movs	r3, #63	@ 0x3f
 801574e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8015752:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8015756:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801575a:	f107 0310 	add.w	r3, r7, #16
 801575e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015762:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015766:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801576a:	f107 030f 	add.w	r3, r7, #15
 801576e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015772:	2301      	movs	r3, #1
 8015774:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015778:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801577c:	2100      	movs	r1, #0
 801577e:	4618      	mov	r0, r3
 8015780:	f000 fcde 	bl	8016140 <hci_send_req>
 8015784:	4603      	mov	r3, r0
 8015786:	2b00      	cmp	r3, #0
 8015788:	da01      	bge.n	801578e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 801578a:	23ff      	movs	r3, #255	@ 0xff
 801578c:	e004      	b.n	8015798 <aci_gatt_update_char_value+0x148>
  return status;
 801578e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015792:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015796:	781b      	ldrb	r3, [r3, #0]
}
 8015798:	4618      	mov	r0, r3
 801579a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801579e:	46bd      	mov	sp, r7
 80157a0:	bdb0      	pop	{r4, r5, r7, pc}

080157a2 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 80157a2:	b580      	push	{r7, lr}
 80157a4:	b0cc      	sub	sp, #304	@ 0x130
 80157a6:	af00      	add	r7, sp, #0
 80157a8:	4602      	mov	r2, r0
 80157aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80157ae:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80157b2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 80157b4:	f107 0310 	add.w	r3, r7, #16
 80157b8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80157bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80157c0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80157c4:	2200      	movs	r2, #0
 80157c6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80157c8:	2300      	movs	r3, #0
 80157ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80157ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80157d2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80157d6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80157da:	8812      	ldrh	r2, [r2, #0]
 80157dc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80157de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157e2:	3302      	adds	r3, #2
 80157e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80157e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80157ec:	2218      	movs	r2, #24
 80157ee:	2100      	movs	r1, #0
 80157f0:	4618      	mov	r0, r3
 80157f2:	f000 fa1c 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x3f;
 80157f6:	233f      	movs	r3, #63	@ 0x3f
 80157f8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80157fc:	f240 1325 	movw	r3, #293	@ 0x125
 8015800:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015804:	f107 0310 	add.w	r3, r7, #16
 8015808:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801580c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015810:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015814:	f107 030f 	add.w	r3, r7, #15
 8015818:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801581c:	2301      	movs	r3, #1
 801581e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015822:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015826:	2100      	movs	r1, #0
 8015828:	4618      	mov	r0, r3
 801582a:	f000 fc89 	bl	8016140 <hci_send_req>
 801582e:	4603      	mov	r3, r0
 8015830:	2b00      	cmp	r3, #0
 8015832:	da01      	bge.n	8015838 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8015834:	23ff      	movs	r3, #255	@ 0xff
 8015836:	e004      	b.n	8015842 <aci_gatt_confirm_indication+0xa0>
  return status;
 8015838:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801583c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015840:	781b      	ldrb	r3, [r3, #0]
}
 8015842:	4618      	mov	r0, r3
 8015844:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}

0801584c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b0cc      	sub	sp, #304	@ 0x130
 8015850:	af00      	add	r7, sp, #0
 8015852:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015856:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801585a:	601a      	str	r2, [r3, #0]
 801585c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015860:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015864:	4602      	mov	r2, r0
 8015866:	701a      	strb	r2, [r3, #0]
 8015868:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801586c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015870:	460a      	mov	r2, r1
 8015872:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8015874:	f107 0310 	add.w	r3, r7, #16
 8015878:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801587c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015880:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015884:	2200      	movs	r2, #0
 8015886:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015888:	2300      	movs	r3, #0
 801588a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 801588e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015892:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015896:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801589a:	7812      	ldrb	r2, [r2, #0]
 801589c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801589e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80158a2:	3301      	adds	r3, #1
 80158a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80158a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80158ac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80158b0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80158b4:	7812      	ldrb	r2, [r2, #0]
 80158b6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80158b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80158bc:	3301      	adds	r3, #1
 80158be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80158c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80158c6:	1c98      	adds	r0, r3, #2
 80158c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80158cc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80158d0:	781a      	ldrb	r2, [r3, #0]
 80158d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80158d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80158da:	6819      	ldr	r1, [r3, #0]
 80158dc:	f000 f997 	bl	8015c0e <Osal_MemCpy>
  index_input += Length;
 80158e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80158e4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80158e8:	781b      	ldrb	r3, [r3, #0]
 80158ea:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80158ee:	4413      	add	r3, r2
 80158f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80158f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80158f8:	2218      	movs	r2, #24
 80158fa:	2100      	movs	r1, #0
 80158fc:	4618      	mov	r0, r3
 80158fe:	f000 f996 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x3f;
 8015902:	233f      	movs	r3, #63	@ 0x3f
 8015904:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8015908:	230c      	movs	r3, #12
 801590a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801590e:	f107 0310 	add.w	r3, r7, #16
 8015912:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015916:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801591a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801591e:	f107 030f 	add.w	r3, r7, #15
 8015922:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015926:	2301      	movs	r3, #1
 8015928:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801592c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015930:	2100      	movs	r1, #0
 8015932:	4618      	mov	r0, r3
 8015934:	f000 fc04 	bl	8016140 <hci_send_req>
 8015938:	4603      	mov	r3, r0
 801593a:	2b00      	cmp	r3, #0
 801593c:	da01      	bge.n	8015942 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 801593e:	23ff      	movs	r3, #255	@ 0xff
 8015940:	e004      	b.n	801594c <aci_hal_write_config_data+0x100>
  return status;
 8015942:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015946:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801594a:	781b      	ldrb	r3, [r3, #0]
}
 801594c:	4618      	mov	r0, r3
 801594e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015952:	46bd      	mov	sp, r7
 8015954:	bd80      	pop	{r7, pc}

08015956 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8015956:	b580      	push	{r7, lr}
 8015958:	b0cc      	sub	sp, #304	@ 0x130
 801595a:	af00      	add	r7, sp, #0
 801595c:	4602      	mov	r2, r0
 801595e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015962:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015966:	701a      	strb	r2, [r3, #0]
 8015968:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801596c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015970:	460a      	mov	r2, r1
 8015972:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8015974:	f107 0310 	add.w	r3, r7, #16
 8015978:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801597c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015980:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015984:	2200      	movs	r2, #0
 8015986:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015988:	2300      	movs	r3, #0
 801598a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 801598e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015992:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015996:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801599a:	7812      	ldrb	r2, [r2, #0]
 801599c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801599e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80159a2:	3301      	adds	r3, #1
 80159a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 80159a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80159ac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80159b0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80159b4:	7812      	ldrb	r2, [r2, #0]
 80159b6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80159b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80159bc:	3301      	adds	r3, #1
 80159be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80159c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80159c6:	2218      	movs	r2, #24
 80159c8:	2100      	movs	r1, #0
 80159ca:	4618      	mov	r0, r3
 80159cc:	f000 f92f 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x3f;
 80159d0:	233f      	movs	r3, #63	@ 0x3f
 80159d2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80159d6:	230f      	movs	r3, #15
 80159d8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80159dc:	f107 0310 	add.w	r3, r7, #16
 80159e0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80159e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80159e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80159ec:	f107 030f 	add.w	r3, r7, #15
 80159f0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80159f4:	2301      	movs	r3, #1
 80159f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80159fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80159fe:	2100      	movs	r1, #0
 8015a00:	4618      	mov	r0, r3
 8015a02:	f000 fb9d 	bl	8016140 <hci_send_req>
 8015a06:	4603      	mov	r3, r0
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	da01      	bge.n	8015a10 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8015a0c:	23ff      	movs	r3, #255	@ 0xff
 8015a0e:	e004      	b.n	8015a1a <aci_hal_set_tx_power_level+0xc4>
  return status;
 8015a10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a14:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015a18:	781b      	ldrb	r3, [r3, #0]
}
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015a20:	46bd      	mov	sp, r7
 8015a22:	bd80      	pop	{r7, pc}

08015a24 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b0cc      	sub	sp, #304	@ 0x130
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	4602      	mov	r2, r0
 8015a2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a30:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015a34:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8015a36:	f107 0310 	add.w	r3, r7, #16
 8015a3a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015a3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a42:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015a46:	2200      	movs	r2, #0
 8015a48:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8015a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015a54:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015a58:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015a5c:	8812      	ldrh	r2, [r2, #0]
 8015a5e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015a60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a64:	3302      	adds	r3, #2
 8015a66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015a6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015a6e:	2218      	movs	r2, #24
 8015a70:	2100      	movs	r1, #0
 8015a72:	4618      	mov	r0, r3
 8015a74:	f000 f8db 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x3f;
 8015a78:	233f      	movs	r3, #63	@ 0x3f
 8015a7a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8015a7e:	2318      	movs	r3, #24
 8015a80:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015a84:	f107 0310 	add.w	r3, r7, #16
 8015a88:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015a8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a90:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015a94:	f107 030f 	add.w	r3, r7, #15
 8015a98:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015a9c:	2301      	movs	r3, #1
 8015a9e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015aa2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015aa6:	2100      	movs	r1, #0
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f000 fb49 	bl	8016140 <hci_send_req>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	da01      	bge.n	8015ab8 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8015ab4:	23ff      	movs	r3, #255	@ 0xff
 8015ab6:	e004      	b.n	8015ac2 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8015ab8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015abc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015ac0:	781b      	ldrb	r3, [r3, #0]
}
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	bd80      	pop	{r7, pc}

08015acc <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b088      	sub	sp, #32
 8015ad0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015ad6:	f107 0308 	add.w	r3, r7, #8
 8015ada:	2218      	movs	r2, #24
 8015adc:	2100      	movs	r1, #0
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f000 f8a5 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x03;
 8015ae4:	2303      	movs	r3, #3
 8015ae6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8015ae8:	2303      	movs	r3, #3
 8015aea:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015aec:	1dfb      	adds	r3, r7, #7
 8015aee:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015af0:	2301      	movs	r3, #1
 8015af2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015af4:	f107 0308 	add.w	r3, r7, #8
 8015af8:	2100      	movs	r1, #0
 8015afa:	4618      	mov	r0, r3
 8015afc:	f000 fb20 	bl	8016140 <hci_send_req>
 8015b00:	4603      	mov	r3, r0
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	da01      	bge.n	8015b0a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8015b06:	23ff      	movs	r3, #255	@ 0xff
 8015b08:	e000      	b.n	8015b0c <hci_reset+0x40>
  return status;
 8015b0a:	79fb      	ldrb	r3, [r7, #7]
}
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	3720      	adds	r7, #32
 8015b10:	46bd      	mov	sp, r7
 8015b12:	bd80      	pop	{r7, pc}

08015b14 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8015b14:	b590      	push	{r4, r7, lr}
 8015b16:	b0cd      	sub	sp, #308	@ 0x134
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	4604      	mov	r4, r0
 8015b1c:	4608      	mov	r0, r1
 8015b1e:	4611      	mov	r1, r2
 8015b20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b24:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015b28:	4622      	mov	r2, r4
 8015b2a:	701a      	strb	r2, [r3, #0]
 8015b2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b30:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015b34:	4602      	mov	r2, r0
 8015b36:	701a      	strb	r2, [r3, #0]
 8015b38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b3c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8015b40:	460a      	mov	r2, r1
 8015b42:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8015b44:	f107 0310 	add.w	r3, r7, #16
 8015b48:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015b4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b50:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015b54:	2200      	movs	r2, #0
 8015b56:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015b58:	2300      	movs	r3, #0
 8015b5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8015b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015b62:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015b66:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015b6a:	7812      	ldrb	r2, [r2, #0]
 8015b6c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015b6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b72:	3301      	adds	r3, #1
 8015b74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8015b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015b7c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015b80:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015b84:	7812      	ldrb	r2, [r2, #0]
 8015b86:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015b88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b8c:	3301      	adds	r3, #1
 8015b8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8015b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015b96:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015b9a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8015b9e:	7812      	ldrb	r2, [r2, #0]
 8015ba0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8015ba2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ba6:	3301      	adds	r3, #1
 8015ba8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015bac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015bb0:	2218      	movs	r2, #24
 8015bb2:	2100      	movs	r1, #0
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f000 f83a 	bl	8015c2e <Osal_MemSet>
  rq.ogf = 0x08;
 8015bba:	2308      	movs	r3, #8
 8015bbc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8015bc0:	2331      	movs	r3, #49	@ 0x31
 8015bc2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015bc6:	f107 0310 	add.w	r3, r7, #16
 8015bca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015bce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bd2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015bd6:	f107 030f 	add.w	r3, r7, #15
 8015bda:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015bde:	2301      	movs	r3, #1
 8015be0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015be4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015be8:	2100      	movs	r1, #0
 8015bea:	4618      	mov	r0, r3
 8015bec:	f000 faa8 	bl	8016140 <hci_send_req>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	da01      	bge.n	8015bfa <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8015bf6:	23ff      	movs	r3, #255	@ 0xff
 8015bf8:	e004      	b.n	8015c04 <hci_le_set_default_phy+0xf0>
  return status;
 8015bfa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015bfe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015c02:	781b      	ldrb	r3, [r3, #0]
}
 8015c04:	4618      	mov	r0, r3
 8015c06:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	bd90      	pop	{r4, r7, pc}

08015c0e <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8015c0e:	b580      	push	{r7, lr}
 8015c10:	b084      	sub	sp, #16
 8015c12:	af00      	add	r7, sp, #0
 8015c14:	60f8      	str	r0, [r7, #12]
 8015c16:	60b9      	str	r1, [r7, #8]
 8015c18:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8015c1a:	687a      	ldr	r2, [r7, #4]
 8015c1c:	68b9      	ldr	r1, [r7, #8]
 8015c1e:	68f8      	ldr	r0, [r7, #12]
 8015c20:	f005 fc8f 	bl	801b542 <memcpy>
 8015c24:	4603      	mov	r3, r0
}
 8015c26:	4618      	mov	r0, r3
 8015c28:	3710      	adds	r7, #16
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	bd80      	pop	{r7, pc}

08015c2e <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8015c2e:	b580      	push	{r7, lr}
 8015c30:	b084      	sub	sp, #16
 8015c32:	af00      	add	r7, sp, #0
 8015c34:	60f8      	str	r0, [r7, #12]
 8015c36:	60b9      	str	r1, [r7, #8]
 8015c38:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8015c3a:	687a      	ldr	r2, [r7, #4]
 8015c3c:	68b9      	ldr	r1, [r7, #8]
 8015c3e:	68f8      	ldr	r0, [r7, #12]
 8015c40:	f005 fb63 	bl	801b30a <memset>
 8015c44:	4603      	mov	r3, r0
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3710      	adds	r7, #16
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}

08015c4e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8015c4e:	b480      	push	{r7}
 8015c50:	af00      	add	r7, sp, #0
  return;
 8015c52:	bf00      	nop
}
 8015c54:	46bd      	mov	sp, r7
 8015c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5a:	4770      	bx	lr

08015c5c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8015c5c:	b480      	push	{r7}
 8015c5e:	af00      	add	r7, sp, #0
  return;
 8015c60:	bf00      	nop
}
 8015c62:	46bd      	mov	sp, r7
 8015c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c68:	4770      	bx	lr

08015c6a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8015c6a:	b480      	push	{r7}
 8015c6c:	af00      	add	r7, sp, #0
  return;
 8015c6e:	bf00      	nop
}
 8015c70:	46bd      	mov	sp, r7
 8015c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c76:	4770      	bx	lr

08015c78 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8015c78:	b480      	push	{r7}
 8015c7a:	af00      	add	r7, sp, #0
  return;
 8015c7c:	bf00      	nop
}
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c84:	4770      	bx	lr

08015c86 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8015c86:	b480      	push	{r7}
 8015c88:	af00      	add	r7, sp, #0
  return;
 8015c8a:	bf00      	nop
}
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c92:	4770      	bx	lr

08015c94 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8015c94:	b480      	push	{r7}
 8015c96:	af00      	add	r7, sp, #0
  return;
 8015c98:	bf00      	nop
}
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca0:	4770      	bx	lr

08015ca2 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8015ca2:	b480      	push	{r7}
 8015ca4:	af00      	add	r7, sp, #0
  return;
 8015ca6:	bf00      	nop
}
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cae:	4770      	bx	lr

08015cb0 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8015cb0:	b480      	push	{r7}
 8015cb2:	af00      	add	r7, sp, #0
  return;
 8015cb4:	bf00      	nop
}
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cbc:	4770      	bx	lr

08015cbe <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8015cbe:	b480      	push	{r7}
 8015cc0:	af00      	add	r7, sp, #0
  return;
 8015cc2:	bf00      	nop
}
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cca:	4770      	bx	lr

08015ccc <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8015ccc:	b480      	push	{r7}
 8015cce:	af00      	add	r7, sp, #0
  return;
 8015cd0:	bf00      	nop
}
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd8:	4770      	bx	lr

08015cda <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8015cda:	b480      	push	{r7}
 8015cdc:	af00      	add	r7, sp, #0
  return;
 8015cde:	bf00      	nop
}
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce6:	4770      	bx	lr

08015ce8 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8015ce8:	b480      	push	{r7}
 8015cea:	af00      	add	r7, sp, #0
  return;
 8015cec:	bf00      	nop
}
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf4:	4770      	bx	lr

08015cf6 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8015cf6:	b480      	push	{r7}
 8015cf8:	af00      	add	r7, sp, #0
  return;
 8015cfa:	bf00      	nop
}
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d02:	4770      	bx	lr

08015d04 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8015d04:	b480      	push	{r7}
 8015d06:	af00      	add	r7, sp, #0
  return;
 8015d08:	bf00      	nop
}
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d10:	4770      	bx	lr

08015d12 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8015d12:	b480      	push	{r7}
 8015d14:	af00      	add	r7, sp, #0
  return;
 8015d16:	bf00      	nop
}
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d1e:	4770      	bx	lr

08015d20 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8015d20:	b480      	push	{r7}
 8015d22:	af00      	add	r7, sp, #0
  return;
 8015d24:	bf00      	nop
}
 8015d26:	46bd      	mov	sp, r7
 8015d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2c:	4770      	bx	lr

08015d2e <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8015d2e:	b480      	push	{r7}
 8015d30:	af00      	add	r7, sp, #0
  return;
 8015d32:	bf00      	nop
}
 8015d34:	46bd      	mov	sp, r7
 8015d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d3a:	4770      	bx	lr

08015d3c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8015d40:	4b04      	ldr	r3, [pc, #16]	@ (8015d54 <SVCCTL_Init+0x18>)
 8015d42:	2200      	movs	r2, #0
 8015d44:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8015d46:	4b04      	ldr	r3, [pc, #16]	@ (8015d58 <SVCCTL_Init+0x1c>)
 8015d48:	2200      	movs	r2, #0
 8015d4a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8015d4c:	f000 f806 	bl	8015d5c <SVCCTL_SvcInit>

  return;
 8015d50:	bf00      	nop
}
 8015d52:	bd80      	pop	{r7, pc}
 8015d54:	20000320 	.word	0x20000320
 8015d58:	20000340 	.word	0x20000340

08015d5c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	af00      	add	r7, sp, #0
  BAS_Init();
 8015d60:	f7ff ff75 	bl	8015c4e <BAS_Init>

  BLS_Init();
 8015d64:	f7ff ff7a 	bl	8015c5c <BLS_Init>

  CRS_STM_Init();
 8015d68:	f7ff ff7f 	bl	8015c6a <CRS_STM_Init>

  DIS_Init();
 8015d6c:	f7ff ff84 	bl	8015c78 <DIS_Init>

  EDS_STM_Init();
 8015d70:	f7ff ff89 	bl	8015c86 <EDS_STM_Init>

  HIDS_Init();
 8015d74:	f7ff ff8e 	bl	8015c94 <HIDS_Init>

  HRS_Init();
 8015d78:	f7ff ff93 	bl	8015ca2 <HRS_Init>

  HTS_Init();
 8015d7c:	f7ff ff98 	bl	8015cb0 <HTS_Init>

  IAS_Init();
 8015d80:	f7ff ff9d 	bl	8015cbe <IAS_Init>

  LLS_Init();
 8015d84:	f7ff ffa2 	bl	8015ccc <LLS_Init>

  TPS_Init();
 8015d88:	f7ff ffa7 	bl	8015cda <TPS_Init>

  MOTENV_STM_Init();
 8015d8c:	f7ff ffac 	bl	8015ce8 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8015d90:	f7ff ffb1 	bl	8015cf6 <P2PS_STM_Init>

  ZDD_STM_Init();
 8015d94:	f7ff ffb6 	bl	8015d04 <ZDD_STM_Init>

  OTAS_STM_Init();
 8015d98:	f7ff ffbb 	bl	8015d12 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8015d9c:	f7ff ffc7 	bl	8015d2e <BVOPUS_STM_Init>

  MESH_Init();
 8015da0:	f7ff ffbe 	bl	8015d20 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8015da4:	f002 f894 	bl	8017ed0 <SVCCTL_InitCustomSvc>
  
  return;
 8015da8:	bf00      	nop
}
 8015daa:	bd80      	pop	{r7, pc}

08015dac <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8015dac:	b480      	push	{r7}
 8015dae:	b083      	sub	sp, #12
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8015db4:	4b09      	ldr	r3, [pc, #36]	@ (8015ddc <SVCCTL_RegisterSvcHandler+0x30>)
 8015db6:	7f1b      	ldrb	r3, [r3, #28]
 8015db8:	4619      	mov	r1, r3
 8015dba:	4a08      	ldr	r2, [pc, #32]	@ (8015ddc <SVCCTL_RegisterSvcHandler+0x30>)
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8015dc2:	4b06      	ldr	r3, [pc, #24]	@ (8015ddc <SVCCTL_RegisterSvcHandler+0x30>)
 8015dc4:	7f1b      	ldrb	r3, [r3, #28]
 8015dc6:	3301      	adds	r3, #1
 8015dc8:	b2da      	uxtb	r2, r3
 8015dca:	4b04      	ldr	r3, [pc, #16]	@ (8015ddc <SVCCTL_RegisterSvcHandler+0x30>)
 8015dcc:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8015dce:	bf00      	nop
}
 8015dd0:	370c      	adds	r7, #12
 8015dd2:	46bd      	mov	sp, r7
 8015dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd8:	4770      	bx	lr
 8015dda:	bf00      	nop
 8015ddc:	20000320 	.word	0x20000320

08015de0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b086      	sub	sp, #24
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	3301      	adds	r3, #1
 8015dec:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8015dee:	2300      	movs	r3, #0
 8015df0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8015df2:	693b      	ldr	r3, [r7, #16]
 8015df4:	781b      	ldrb	r3, [r3, #0]
 8015df6:	2bff      	cmp	r3, #255	@ 0xff
 8015df8:	d125      	bne.n	8015e46 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8015dfa:	693b      	ldr	r3, [r7, #16]
 8015dfc:	3302      	adds	r3, #2
 8015dfe:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	881b      	ldrh	r3, [r3, #0]
 8015e04:	b29b      	uxth	r3, r3
 8015e06:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015e0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8015e0e:	d118      	bne.n	8015e42 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8015e10:	2300      	movs	r3, #0
 8015e12:	757b      	strb	r3, [r7, #21]
 8015e14:	e00d      	b.n	8015e32 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8015e16:	7d7b      	ldrb	r3, [r7, #21]
 8015e18:	4a1a      	ldr	r2, [pc, #104]	@ (8015e84 <SVCCTL_UserEvtRx+0xa4>)
 8015e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e1e:	6878      	ldr	r0, [r7, #4]
 8015e20:	4798      	blx	r3
 8015e22:	4603      	mov	r3, r0
 8015e24:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8015e26:	7dfb      	ldrb	r3, [r7, #23]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d108      	bne.n	8015e3e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8015e2c:	7d7b      	ldrb	r3, [r7, #21]
 8015e2e:	3301      	adds	r3, #1
 8015e30:	757b      	strb	r3, [r7, #21]
 8015e32:	4b14      	ldr	r3, [pc, #80]	@ (8015e84 <SVCCTL_UserEvtRx+0xa4>)
 8015e34:	7f1b      	ldrb	r3, [r3, #28]
 8015e36:	7d7a      	ldrb	r2, [r7, #21]
 8015e38:	429a      	cmp	r2, r3
 8015e3a:	d3ec      	bcc.n	8015e16 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8015e3c:	e002      	b.n	8015e44 <SVCCTL_UserEvtRx+0x64>
              break;
 8015e3e:	bf00      	nop
          break;
 8015e40:	e000      	b.n	8015e44 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8015e42:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8015e44:	e000      	b.n	8015e48 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8015e46:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8015e48:	7dfb      	ldrb	r3, [r7, #23]
 8015e4a:	2b02      	cmp	r3, #2
 8015e4c:	d00f      	beq.n	8015e6e <SVCCTL_UserEvtRx+0x8e>
 8015e4e:	2b02      	cmp	r3, #2
 8015e50:	dc10      	bgt.n	8015e74 <SVCCTL_UserEvtRx+0x94>
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d002      	beq.n	8015e5c <SVCCTL_UserEvtRx+0x7c>
 8015e56:	2b01      	cmp	r3, #1
 8015e58:	d006      	beq.n	8015e68 <SVCCTL_UserEvtRx+0x88>
 8015e5a:	e00b      	b.n	8015e74 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8015e5c:	6878      	ldr	r0, [r7, #4]
 8015e5e:	f001 fccf 	bl	8017800 <SVCCTL_App_Notification>
 8015e62:	4603      	mov	r3, r0
 8015e64:	75bb      	strb	r3, [r7, #22]
      break;
 8015e66:	e008      	b.n	8015e7a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8015e68:	2301      	movs	r3, #1
 8015e6a:	75bb      	strb	r3, [r7, #22]
      break;
 8015e6c:	e005      	b.n	8015e7a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	75bb      	strb	r3, [r7, #22]
      break;
 8015e72:	e002      	b.n	8015e7a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8015e74:	2301      	movs	r3, #1
 8015e76:	75bb      	strb	r3, [r7, #22]
      break;
 8015e78:	bf00      	nop
  }

  return (return_status);
 8015e7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	3718      	adds	r7, #24
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}
 8015e84:	20000320 	.word	0x20000320

08015e88 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b088      	sub	sp, #32
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015e90:	f107 030c 	add.w	r3, r7, #12
 8015e94:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8015e9c:	69fb      	ldr	r3, [r7, #28]
 8015e9e:	212e      	movs	r1, #46	@ 0x2e
 8015ea0:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8015ea4:	f000 fae8 	bl	8016478 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015ea8:	69fb      	ldr	r3, [r7, #28]
 8015eaa:	330b      	adds	r3, #11
 8015eac:	78db      	ldrb	r3, [r3, #3]
}
 8015eae:	4618      	mov	r0, r3
 8015eb0:	3720      	adds	r7, #32
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	bd80      	pop	{r7, pc}

08015eb6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8015eb6:	b580      	push	{r7, lr}
 8015eb8:	b088      	sub	sp, #32
 8015eba:	af00      	add	r7, sp, #0
 8015ebc:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015ebe:	f107 030c 	add.w	r3, r7, #12
 8015ec2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8015eca:	69fb      	ldr	r3, [r7, #28]
 8015ecc:	210f      	movs	r1, #15
 8015ece:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8015ed2:	f000 fad1 	bl	8016478 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015ed6:	69fb      	ldr	r3, [r7, #28]
 8015ed8:	330b      	adds	r3, #11
 8015eda:	78db      	ldrb	r3, [r3, #3]
}
 8015edc:	4618      	mov	r0, r3
 8015ede:	3720      	adds	r7, #32
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	bd80      	pop	{r7, pc}

08015ee4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b088      	sub	sp, #32
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015eec:	f107 030c 	add.w	r3, r7, #12
 8015ef0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8015ef2:	69fb      	ldr	r3, [r7, #28]
 8015ef4:	687a      	ldr	r2, [r7, #4]
 8015ef6:	2110      	movs	r1, #16
 8015ef8:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8015efc:	f000 fabc 	bl	8016478 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015f00:	69fb      	ldr	r3, [r7, #28]
 8015f02:	330b      	adds	r3, #11
 8015f04:	78db      	ldrb	r3, [r3, #3]
}
 8015f06:	4618      	mov	r0, r3
 8015f08:	3720      	adds	r7, #32
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	bd80      	pop	{r7, pc}
	...

08015f10 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8015f10:	b480      	push	{r7}
 8015f12:	b08b      	sub	sp, #44	@ 0x2c
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8015f18:	2300      	movs	r3, #0
 8015f1a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8015f20:	2300      	movs	r3, #0
 8015f22:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8015f24:	2300      	movs	r3, #0
 8015f26:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8015f28:	2300      	movs	r3, #0
 8015f2a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8015f30:	2300      	movs	r3, #0
 8015f32:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8015f34:	2300      	movs	r3, #0
 8015f36:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8015f38:	4b4a      	ldr	r3, [pc, #296]	@ (8016064 <SHCI_GetWirelessFwInfo+0x154>)
 8015f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015f3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015f40:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8015f42:	693b      	ldr	r3, [r7, #16]
 8015f44:	009b      	lsls	r3, r3, #2
 8015f46:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8015f4a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8015f52:	68bb      	ldr	r3, [r7, #8]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	4a44      	ldr	r2, [pc, #272]	@ (8016068 <SHCI_GetWirelessFwInfo+0x158>)
 8015f58:	4293      	cmp	r3, r2
 8015f5a:	d10f      	bne.n	8015f7c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8015f5c:	68bb      	ldr	r3, [r7, #8]
 8015f5e:	695b      	ldr	r3, [r3, #20]
 8015f60:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8015f62:	68bb      	ldr	r3, [r7, #8]
 8015f64:	699b      	ldr	r3, [r3, #24]
 8015f66:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8015f68:	68bb      	ldr	r3, [r7, #8]
 8015f6a:	69db      	ldr	r3, [r3, #28]
 8015f6c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8015f6e:	68bb      	ldr	r3, [r7, #8]
 8015f70:	68db      	ldr	r3, [r3, #12]
 8015f72:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8015f74:	68bb      	ldr	r3, [r7, #8]
 8015f76:	691b      	ldr	r3, [r3, #16]
 8015f78:	617b      	str	r3, [r7, #20]
 8015f7a:	e01a      	b.n	8015fb2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8015f7c:	693b      	ldr	r3, [r7, #16]
 8015f7e:	009b      	lsls	r3, r3, #2
 8015f80:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8015f84:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8015f88:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	691b      	ldr	r3, [r3, #16]
 8015f90:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	695b      	ldr	r3, [r3, #20]
 8015f98:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	699b      	ldr	r3, [r3, #24]
 8015fa0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	685b      	ldr	r3, [r3, #4]
 8015fa8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	689b      	ldr	r3, [r3, #8]
 8015fb0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8015fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fb4:	0e1b      	lsrs	r3, r3, #24
 8015fb6:	b2da      	uxtb	r2, r3
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8015fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fbe:	0c1b      	lsrs	r3, r3, #16
 8015fc0:	b2da      	uxtb	r2, r3
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8015fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fc8:	0a1b      	lsrs	r3, r3, #8
 8015fca:	b2da      	uxtb	r2, r3
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8015fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fd2:	091b      	lsrs	r3, r3, #4
 8015fd4:	b2db      	uxtb	r3, r3
 8015fd6:	f003 030f 	and.w	r3, r3, #15
 8015fda:	b2da      	uxtb	r2, r3
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8015fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fe2:	b2db      	uxtb	r3, r3
 8015fe4:	f003 030f 	and.w	r3, r3, #15
 8015fe8:	b2da      	uxtb	r2, r3
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8015fee:	6a3b      	ldr	r3, [r7, #32]
 8015ff0:	0e1b      	lsrs	r3, r3, #24
 8015ff2:	b2da      	uxtb	r2, r3
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8015ff8:	6a3b      	ldr	r3, [r7, #32]
 8015ffa:	0c1b      	lsrs	r3, r3, #16
 8015ffc:	b2da      	uxtb	r2, r3
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8016002:	6a3b      	ldr	r3, [r7, #32]
 8016004:	0a1b      	lsrs	r3, r3, #8
 8016006:	b2da      	uxtb	r2, r3
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801600c:	6a3b      	ldr	r3, [r7, #32]
 801600e:	b2da      	uxtb	r2, r3
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8016014:	69fb      	ldr	r3, [r7, #28]
 8016016:	b2da      	uxtb	r2, r3
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801601c:	69bb      	ldr	r3, [r7, #24]
 801601e:	0e1b      	lsrs	r3, r3, #24
 8016020:	b2da      	uxtb	r2, r3
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8016026:	69bb      	ldr	r3, [r7, #24]
 8016028:	0c1b      	lsrs	r3, r3, #16
 801602a:	b2da      	uxtb	r2, r3
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8016030:	69bb      	ldr	r3, [r7, #24]
 8016032:	0a1b      	lsrs	r3, r3, #8
 8016034:	b2da      	uxtb	r2, r3
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801603a:	697b      	ldr	r3, [r7, #20]
 801603c:	0e1b      	lsrs	r3, r3, #24
 801603e:	b2da      	uxtb	r2, r3
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8016044:	697b      	ldr	r3, [r7, #20]
 8016046:	0c1b      	lsrs	r3, r3, #16
 8016048:	b2da      	uxtb	r2, r3
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801604e:	697b      	ldr	r3, [r7, #20]
 8016050:	b2da      	uxtb	r2, r3
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8016056:	2300      	movs	r3, #0
}
 8016058:	4618      	mov	r0, r3
 801605a:	372c      	adds	r7, #44	@ 0x2c
 801605c:	46bd      	mov	sp, r7
 801605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016062:	4770      	bx	lr
 8016064:	58004000 	.word	0x58004000
 8016068:	a94656b9 	.word	0xa94656b9

0801606c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 801606c:	b580      	push	{r7, lr}
 801606e:	b082      	sub	sp, #8
 8016070:	af00      	add	r7, sp, #0
 8016072:	6078      	str	r0, [r7, #4]
 8016074:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8016076:	683b      	ldr	r3, [r7, #0]
 8016078:	685b      	ldr	r3, [r3, #4]
 801607a:	4a08      	ldr	r2, [pc, #32]	@ (801609c <hci_init+0x30>)
 801607c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 801607e:	4a08      	ldr	r2, [pc, #32]	@ (80160a0 <hci_init+0x34>)
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8016084:	4806      	ldr	r0, [pc, #24]	@ (80160a0 <hci_init+0x34>)
 8016086:	f000 f979 	bl	801637c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801608a:	683b      	ldr	r3, [r7, #0]
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	4618      	mov	r0, r3
 8016090:	f000 f8da 	bl	8016248 <TlInit>

  return;
 8016094:	bf00      	nop
}
 8016096:	3708      	adds	r7, #8
 8016098:	46bd      	mov	sp, r7
 801609a:	bd80      	pop	{r7, pc}
 801609c:	20001404 	.word	0x20001404
 80160a0:	200013dc 	.word	0x200013dc

080160a4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b084      	sub	sp, #16
 80160a8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80160aa:	4822      	ldr	r0, [pc, #136]	@ (8016134 <hci_user_evt_proc+0x90>)
 80160ac:	f000 fd32 	bl	8016b14 <LST_is_empty>
 80160b0:	4603      	mov	r3, r0
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d12b      	bne.n	801610e <hci_user_evt_proc+0x6a>
 80160b6:	4b20      	ldr	r3, [pc, #128]	@ (8016138 <hci_user_evt_proc+0x94>)
 80160b8:	781b      	ldrb	r3, [r3, #0]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d027      	beq.n	801610e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80160be:	f107 030c 	add.w	r3, r7, #12
 80160c2:	4619      	mov	r1, r3
 80160c4:	481b      	ldr	r0, [pc, #108]	@ (8016134 <hci_user_evt_proc+0x90>)
 80160c6:	f000 fdb4 	bl	8016c32 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80160ca:	4b1c      	ldr	r3, [pc, #112]	@ (801613c <hci_user_evt_proc+0x98>)
 80160cc:	69db      	ldr	r3, [r3, #28]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d00c      	beq.n	80160ec <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80160d6:	2301      	movs	r3, #1
 80160d8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80160da:	4b18      	ldr	r3, [pc, #96]	@ (801613c <hci_user_evt_proc+0x98>)
 80160dc:	69db      	ldr	r3, [r3, #28]
 80160de:	1d3a      	adds	r2, r7, #4
 80160e0:	4610      	mov	r0, r2
 80160e2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80160e4:	793a      	ldrb	r2, [r7, #4]
 80160e6:	4b14      	ldr	r3, [pc, #80]	@ (8016138 <hci_user_evt_proc+0x94>)
 80160e8:	701a      	strb	r2, [r3, #0]
 80160ea:	e002      	b.n	80160f2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80160ec:	4b12      	ldr	r3, [pc, #72]	@ (8016138 <hci_user_evt_proc+0x94>)
 80160ee:	2201      	movs	r2, #1
 80160f0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80160f2:	4b11      	ldr	r3, [pc, #68]	@ (8016138 <hci_user_evt_proc+0x94>)
 80160f4:	781b      	ldrb	r3, [r3, #0]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d004      	beq.n	8016104 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	4618      	mov	r0, r3
 80160fe:	f000 fc0d 	bl	801691c <TL_MM_EvtDone>
 8016102:	e004      	b.n	801610e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	4619      	mov	r1, r3
 8016108:	480a      	ldr	r0, [pc, #40]	@ (8016134 <hci_user_evt_proc+0x90>)
 801610a:	f000 fd25 	bl	8016b58 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801610e:	4809      	ldr	r0, [pc, #36]	@ (8016134 <hci_user_evt_proc+0x90>)
 8016110:	f000 fd00 	bl	8016b14 <LST_is_empty>
 8016114:	4603      	mov	r3, r0
 8016116:	2b00      	cmp	r3, #0
 8016118:	d107      	bne.n	801612a <hci_user_evt_proc+0x86>
 801611a:	4b07      	ldr	r3, [pc, #28]	@ (8016138 <hci_user_evt_proc+0x94>)
 801611c:	781b      	ldrb	r3, [r3, #0]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d003      	beq.n	801612a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8016122:	4804      	ldr	r0, [pc, #16]	@ (8016134 <hci_user_evt_proc+0x90>)
 8016124:	f001 fda0 	bl	8017c68 <hci_notify_asynch_evt>
  }


  return;
 8016128:	bf00      	nop
 801612a:	bf00      	nop
}
 801612c:	3710      	adds	r7, #16
 801612e:	46bd      	mov	sp, r7
 8016130:	bd80      	pop	{r7, pc}
 8016132:	bf00      	nop
 8016134:	20000348 	.word	0x20000348
 8016138:	20000354 	.word	0x20000354
 801613c:	200013dc 	.word	0x200013dc

08016140 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b088      	sub	sp, #32
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
 8016148:	460b      	mov	r3, r1
 801614a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 801614c:	2000      	movs	r0, #0
 801614e:	f000 f8d1 	bl	80162f4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8016152:	2300      	movs	r3, #0
 8016154:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	885b      	ldrh	r3, [r3, #2]
 801615a:	b21b      	sxth	r3, r3
 801615c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016160:	b21a      	sxth	r2, r3
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	881b      	ldrh	r3, [r3, #0]
 8016166:	029b      	lsls	r3, r3, #10
 8016168:	b21b      	sxth	r3, r3
 801616a:	4313      	orrs	r3, r2
 801616c:	b21b      	sxth	r3, r3
 801616e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8016170:	4b33      	ldr	r3, [pc, #204]	@ (8016240 <hci_send_req+0x100>)
 8016172:	2201      	movs	r2, #1
 8016174:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	68db      	ldr	r3, [r3, #12]
 801617a:	b2d9      	uxtb	r1, r3
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	689a      	ldr	r2, [r3, #8]
 8016180:	8bbb      	ldrh	r3, [r7, #28]
 8016182:	4618      	mov	r0, r3
 8016184:	f000 f890 	bl	80162a8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8016188:	e04e      	b.n	8016228 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 801618a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 801618e:	f001 fd82 	bl	8017c96 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8016192:	e043      	b.n	801621c <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8016194:	f107 030c 	add.w	r3, r7, #12
 8016198:	4619      	mov	r1, r3
 801619a:	482a      	ldr	r0, [pc, #168]	@ (8016244 <hci_send_req+0x104>)
 801619c:	f000 fd49 	bl	8016c32 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	7a5b      	ldrb	r3, [r3, #9]
 80161a4:	2b0f      	cmp	r3, #15
 80161a6:	d114      	bne.n	80161d2 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	330b      	adds	r3, #11
 80161ac:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80161ae:	693b      	ldr	r3, [r7, #16]
 80161b0:	885b      	ldrh	r3, [r3, #2]
 80161b2:	b29b      	uxth	r3, r3
 80161b4:	8bba      	ldrh	r2, [r7, #28]
 80161b6:	429a      	cmp	r2, r3
 80161b8:	d104      	bne.n	80161c4 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	691b      	ldr	r3, [r3, #16]
 80161be:	693a      	ldr	r2, [r7, #16]
 80161c0:	7812      	ldrb	r2, [r2, #0]
 80161c2:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80161c4:	693b      	ldr	r3, [r7, #16]
 80161c6:	785b      	ldrb	r3, [r3, #1]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d027      	beq.n	801621c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80161cc:	2301      	movs	r3, #1
 80161ce:	77fb      	strb	r3, [r7, #31]
 80161d0:	e024      	b.n	801621c <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	330b      	adds	r3, #11
 80161d6:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80161d8:	69bb      	ldr	r3, [r7, #24]
 80161da:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80161de:	b29b      	uxth	r3, r3
 80161e0:	8bba      	ldrh	r2, [r7, #28]
 80161e2:	429a      	cmp	r2, r3
 80161e4:	d114      	bne.n	8016210 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	7a9b      	ldrb	r3, [r3, #10]
 80161ea:	3b03      	subs	r3, #3
 80161ec:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	695a      	ldr	r2, [r3, #20]
 80161f2:	7dfb      	ldrb	r3, [r7, #23]
 80161f4:	429a      	cmp	r2, r3
 80161f6:	bfa8      	it	ge
 80161f8:	461a      	movge	r2, r3
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	6918      	ldr	r0, [r3, #16]
 8016202:	69bb      	ldr	r3, [r7, #24]
 8016204:	1cd9      	adds	r1, r3, #3
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	695b      	ldr	r3, [r3, #20]
 801620a:	461a      	mov	r2, r3
 801620c:	f005 f999 	bl	801b542 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8016210:	69bb      	ldr	r3, [r7, #24]
 8016212:	781b      	ldrb	r3, [r3, #0]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d001      	beq.n	801621c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8016218:	2301      	movs	r3, #1
 801621a:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 801621c:	4809      	ldr	r0, [pc, #36]	@ (8016244 <hci_send_req+0x104>)
 801621e:	f000 fc79 	bl	8016b14 <LST_is_empty>
 8016222:	4603      	mov	r3, r0
 8016224:	2b00      	cmp	r3, #0
 8016226:	d0b5      	beq.n	8016194 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8016228:	7ffb      	ldrb	r3, [r7, #31]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d0ad      	beq.n	801618a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 801622e:	2001      	movs	r0, #1
 8016230:	f000 f860 	bl	80162f4 <NotifyCmdStatus>

  return 0;
 8016234:	2300      	movs	r3, #0
}
 8016236:	4618      	mov	r0, r3
 8016238:	3720      	adds	r7, #32
 801623a:	46bd      	mov	sp, r7
 801623c:	bd80      	pop	{r7, pc}
 801623e:	bf00      	nop
 8016240:	20001408 	.word	0x20001408
 8016244:	200013fc 	.word	0x200013fc

08016248 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b086      	sub	sp, #24
 801624c:	af00      	add	r7, sp, #0
 801624e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8016250:	480f      	ldr	r0, [pc, #60]	@ (8016290 <TlInit+0x48>)
 8016252:	f000 fc4f 	bl	8016af4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8016256:	4a0f      	ldr	r2, [pc, #60]	@ (8016294 <TlInit+0x4c>)
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 801625c:	480e      	ldr	r0, [pc, #56]	@ (8016298 <TlInit+0x50>)
 801625e:	f000 fc49 	bl	8016af4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8016262:	4b0e      	ldr	r3, [pc, #56]	@ (801629c <TlInit+0x54>)
 8016264:	2201      	movs	r2, #1
 8016266:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8016268:	4b0d      	ldr	r3, [pc, #52]	@ (80162a0 <TlInit+0x58>)
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d00a      	beq.n	8016286 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8016274:	4b0b      	ldr	r3, [pc, #44]	@ (80162a4 <TlInit+0x5c>)
 8016276:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8016278:	4b09      	ldr	r3, [pc, #36]	@ (80162a0 <TlInit+0x58>)
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	f107 0208 	add.w	r2, r7, #8
 8016280:	4610      	mov	r0, r2
 8016282:	4798      	blx	r3
  }

  return;
 8016284:	bf00      	nop
 8016286:	bf00      	nop
}
 8016288:	3718      	adds	r7, #24
 801628a:	46bd      	mov	sp, r7
 801628c:	bd80      	pop	{r7, pc}
 801628e:	bf00      	nop
 8016290:	200013fc 	.word	0x200013fc
 8016294:	20000350 	.word	0x20000350
 8016298:	20000348 	.word	0x20000348
 801629c:	20000354 	.word	0x20000354
 80162a0:	200013dc 	.word	0x200013dc
 80162a4:	08016335 	.word	0x08016335

080162a8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b082      	sub	sp, #8
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	4603      	mov	r3, r0
 80162b0:	603a      	str	r2, [r7, #0]
 80162b2:	80fb      	strh	r3, [r7, #6]
 80162b4:	460b      	mov	r3, r1
 80162b6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80162b8:	4b0c      	ldr	r3, [pc, #48]	@ (80162ec <SendCmd+0x44>)
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	88fa      	ldrh	r2, [r7, #6]
 80162be:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80162c2:	4b0a      	ldr	r3, [pc, #40]	@ (80162ec <SendCmd+0x44>)
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	797a      	ldrb	r2, [r7, #5]
 80162c8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80162ca:	4b08      	ldr	r3, [pc, #32]	@ (80162ec <SendCmd+0x44>)
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	330c      	adds	r3, #12
 80162d0:	797a      	ldrb	r2, [r7, #5]
 80162d2:	6839      	ldr	r1, [r7, #0]
 80162d4:	4618      	mov	r0, r3
 80162d6:	f005 f934 	bl	801b542 <memcpy>

  hciContext.io.Send(0,0);
 80162da:	4b05      	ldr	r3, [pc, #20]	@ (80162f0 <SendCmd+0x48>)
 80162dc:	691b      	ldr	r3, [r3, #16]
 80162de:	2100      	movs	r1, #0
 80162e0:	2000      	movs	r0, #0
 80162e2:	4798      	blx	r3

  return;
 80162e4:	bf00      	nop
}
 80162e6:	3708      	adds	r7, #8
 80162e8:	46bd      	mov	sp, r7
 80162ea:	bd80      	pop	{r7, pc}
 80162ec:	20000350 	.word	0x20000350
 80162f0:	200013dc 	.word	0x200013dc

080162f4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b082      	sub	sp, #8
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	4603      	mov	r3, r0
 80162fc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80162fe:	79fb      	ldrb	r3, [r7, #7]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d108      	bne.n	8016316 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8016304:	4b0a      	ldr	r3, [pc, #40]	@ (8016330 <NotifyCmdStatus+0x3c>)
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d00d      	beq.n	8016328 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 801630c:	4b08      	ldr	r3, [pc, #32]	@ (8016330 <NotifyCmdStatus+0x3c>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	2000      	movs	r0, #0
 8016312:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8016314:	e008      	b.n	8016328 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8016316:	4b06      	ldr	r3, [pc, #24]	@ (8016330 <NotifyCmdStatus+0x3c>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d004      	beq.n	8016328 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 801631e:	4b04      	ldr	r3, [pc, #16]	@ (8016330 <NotifyCmdStatus+0x3c>)
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	2001      	movs	r0, #1
 8016324:	4798      	blx	r3
  return;
 8016326:	bf00      	nop
 8016328:	bf00      	nop
}
 801632a:	3708      	adds	r7, #8
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}
 8016330:	20001404 	.word	0x20001404

08016334 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8016334:	b580      	push	{r7, lr}
 8016336:	b082      	sub	sp, #8
 8016338:	af00      	add	r7, sp, #0
 801633a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	7a5b      	ldrb	r3, [r3, #9]
 8016340:	2b0f      	cmp	r3, #15
 8016342:	d003      	beq.n	801634c <TlEvtReceived+0x18>
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	7a5b      	ldrb	r3, [r3, #9]
 8016348:	2b0e      	cmp	r3, #14
 801634a:	d107      	bne.n	801635c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 801634c:	6879      	ldr	r1, [r7, #4]
 801634e:	4809      	ldr	r0, [pc, #36]	@ (8016374 <TlEvtReceived+0x40>)
 8016350:	f000 fc28 	bl	8016ba4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8016354:	2000      	movs	r0, #0
 8016356:	f001 fc93 	bl	8017c80 <hci_cmd_resp_release>
 801635a:	e006      	b.n	801636a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 801635c:	6879      	ldr	r1, [r7, #4]
 801635e:	4806      	ldr	r0, [pc, #24]	@ (8016378 <TlEvtReceived+0x44>)
 8016360:	f000 fc20 	bl	8016ba4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8016364:	4804      	ldr	r0, [pc, #16]	@ (8016378 <TlEvtReceived+0x44>)
 8016366:	f001 fc7f 	bl	8017c68 <hci_notify_asynch_evt>
  }

  return;
 801636a:	bf00      	nop
}
 801636c:	3708      	adds	r7, #8
 801636e:	46bd      	mov	sp, r7
 8016370:	bd80      	pop	{r7, pc}
 8016372:	bf00      	nop
 8016374:	200013fc 	.word	0x200013fc
 8016378:	20000348 	.word	0x20000348

0801637c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 801637c:	b480      	push	{r7}
 801637e:	b083      	sub	sp, #12
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	4a05      	ldr	r2, [pc, #20]	@ (801639c <hci_register_io_bus+0x20>)
 8016388:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	4a04      	ldr	r2, [pc, #16]	@ (80163a0 <hci_register_io_bus+0x24>)
 801638e:	611a      	str	r2, [r3, #16]

  return;
 8016390:	bf00      	nop
}
 8016392:	370c      	adds	r7, #12
 8016394:	46bd      	mov	sp, r7
 8016396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639a:	4770      	bx	lr
 801639c:	08016695 	.word	0x08016695
 80163a0:	080166fd 	.word	0x080166fd

080163a4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b082      	sub	sp, #8
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	6078      	str	r0, [r7, #4]
 80163ac:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80163ae:	683b      	ldr	r3, [r7, #0]
 80163b0:	685b      	ldr	r3, [r3, #4]
 80163b2:	4a08      	ldr	r2, [pc, #32]	@ (80163d4 <shci_init+0x30>)
 80163b4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80163b6:	4a08      	ldr	r2, [pc, #32]	@ (80163d8 <shci_init+0x34>)
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80163bc:	4806      	ldr	r0, [pc, #24]	@ (80163d8 <shci_init+0x34>)
 80163be:	f000 f915 	bl	80165ec <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80163c2:	683b      	ldr	r3, [r7, #0]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	4618      	mov	r0, r3
 80163c8:	f000 f898 	bl	80164fc <TlInit>

  return;
 80163cc:	bf00      	nop
}
 80163ce:	3708      	adds	r7, #8
 80163d0:	46bd      	mov	sp, r7
 80163d2:	bd80      	pop	{r7, pc}
 80163d4:	2000142c 	.word	0x2000142c
 80163d8:	2000140c 	.word	0x2000140c

080163dc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b084      	sub	sp, #16
 80163e0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80163e2:	4822      	ldr	r0, [pc, #136]	@ (801646c <shci_user_evt_proc+0x90>)
 80163e4:	f000 fb96 	bl	8016b14 <LST_is_empty>
 80163e8:	4603      	mov	r3, r0
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d12b      	bne.n	8016446 <shci_user_evt_proc+0x6a>
 80163ee:	4b20      	ldr	r3, [pc, #128]	@ (8016470 <shci_user_evt_proc+0x94>)
 80163f0:	781b      	ldrb	r3, [r3, #0]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d027      	beq.n	8016446 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80163f6:	f107 030c 	add.w	r3, r7, #12
 80163fa:	4619      	mov	r1, r3
 80163fc:	481b      	ldr	r0, [pc, #108]	@ (801646c <shci_user_evt_proc+0x90>)
 80163fe:	f000 fc18 	bl	8016c32 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8016402:	4b1c      	ldr	r3, [pc, #112]	@ (8016474 <shci_user_evt_proc+0x98>)
 8016404:	69db      	ldr	r3, [r3, #28]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d00c      	beq.n	8016424 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 801640e:	2301      	movs	r3, #1
 8016410:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8016412:	4b18      	ldr	r3, [pc, #96]	@ (8016474 <shci_user_evt_proc+0x98>)
 8016414:	69db      	ldr	r3, [r3, #28]
 8016416:	1d3a      	adds	r2, r7, #4
 8016418:	4610      	mov	r0, r2
 801641a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 801641c:	793a      	ldrb	r2, [r7, #4]
 801641e:	4b14      	ldr	r3, [pc, #80]	@ (8016470 <shci_user_evt_proc+0x94>)
 8016420:	701a      	strb	r2, [r3, #0]
 8016422:	e002      	b.n	801642a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8016424:	4b12      	ldr	r3, [pc, #72]	@ (8016470 <shci_user_evt_proc+0x94>)
 8016426:	2201      	movs	r2, #1
 8016428:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 801642a:	4b11      	ldr	r3, [pc, #68]	@ (8016470 <shci_user_evt_proc+0x94>)
 801642c:	781b      	ldrb	r3, [r3, #0]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d004      	beq.n	801643c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	4618      	mov	r0, r3
 8016436:	f000 fa71 	bl	801691c <TL_MM_EvtDone>
 801643a:	e004      	b.n	8016446 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	4619      	mov	r1, r3
 8016440:	480a      	ldr	r0, [pc, #40]	@ (801646c <shci_user_evt_proc+0x90>)
 8016442:	f000 fb89 	bl	8016b58 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8016446:	4809      	ldr	r0, [pc, #36]	@ (801646c <shci_user_evt_proc+0x90>)
 8016448:	f000 fb64 	bl	8016b14 <LST_is_empty>
 801644c:	4603      	mov	r3, r0
 801644e:	2b00      	cmp	r3, #0
 8016450:	d107      	bne.n	8016462 <shci_user_evt_proc+0x86>
 8016452:	4b07      	ldr	r3, [pc, #28]	@ (8016470 <shci_user_evt_proc+0x94>)
 8016454:	781b      	ldrb	r3, [r3, #0]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d003      	beq.n	8016462 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 801645a:	4804      	ldr	r0, [pc, #16]	@ (801646c <shci_user_evt_proc+0x90>)
 801645c:	f7eb f9a8 	bl	80017b0 <shci_notify_asynch_evt>
  }


  return;
 8016460:	bf00      	nop
 8016462:	bf00      	nop
}
 8016464:	3710      	adds	r7, #16
 8016466:	46bd      	mov	sp, r7
 8016468:	bd80      	pop	{r7, pc}
 801646a:	bf00      	nop
 801646c:	20000358 	.word	0x20000358
 8016470:	20000368 	.word	0x20000368
 8016474:	2000140c 	.word	0x2000140c

08016478 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8016478:	b580      	push	{r7, lr}
 801647a:	b084      	sub	sp, #16
 801647c:	af00      	add	r7, sp, #0
 801647e:	60ba      	str	r2, [r7, #8]
 8016480:	607b      	str	r3, [r7, #4]
 8016482:	4603      	mov	r3, r0
 8016484:	81fb      	strh	r3, [r7, #14]
 8016486:	460b      	mov	r3, r1
 8016488:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 801648a:	2000      	movs	r0, #0
 801648c:	f000 f868 	bl	8016560 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8016490:	4b17      	ldr	r3, [pc, #92]	@ (80164f0 <shci_send+0x78>)
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	89fa      	ldrh	r2, [r7, #14]
 8016496:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 801649a:	4b15      	ldr	r3, [pc, #84]	@ (80164f0 <shci_send+0x78>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	7b7a      	ldrb	r2, [r7, #13]
 80164a0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80164a2:	4b13      	ldr	r3, [pc, #76]	@ (80164f0 <shci_send+0x78>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	330c      	adds	r3, #12
 80164a8:	7b7a      	ldrb	r2, [r7, #13]
 80164aa:	68b9      	ldr	r1, [r7, #8]
 80164ac:	4618      	mov	r0, r3
 80164ae:	f005 f848 	bl	801b542 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80164b2:	4b10      	ldr	r3, [pc, #64]	@ (80164f4 <shci_send+0x7c>)
 80164b4:	2201      	movs	r2, #1
 80164b6:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80164b8:	4b0f      	ldr	r3, [pc, #60]	@ (80164f8 <shci_send+0x80>)
 80164ba:	691b      	ldr	r3, [r3, #16]
 80164bc:	2100      	movs	r1, #0
 80164be:	2000      	movs	r0, #0
 80164c0:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80164c2:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80164c6:	f7eb f98a 	bl	80017de <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	f103 0008 	add.w	r0, r3, #8
 80164d0:	4b07      	ldr	r3, [pc, #28]	@ (80164f0 <shci_send+0x78>)
 80164d2:	6819      	ldr	r1, [r3, #0]
 80164d4:	4b06      	ldr	r3, [pc, #24]	@ (80164f0 <shci_send+0x78>)
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	789b      	ldrb	r3, [r3, #2]
 80164da:	3303      	adds	r3, #3
 80164dc:	461a      	mov	r2, r3
 80164de:	f005 f830 	bl	801b542 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80164e2:	2001      	movs	r0, #1
 80164e4:	f000 f83c 	bl	8016560 <Cmd_SetStatus>

  return;
 80164e8:	bf00      	nop
}
 80164ea:	3710      	adds	r7, #16
 80164ec:	46bd      	mov	sp, r7
 80164ee:	bd80      	pop	{r7, pc}
 80164f0:	20000364 	.word	0x20000364
 80164f4:	20001430 	.word	0x20001430
 80164f8:	2000140c 	.word	0x2000140c

080164fc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b086      	sub	sp, #24
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8016504:	4a10      	ldr	r2, [pc, #64]	@ (8016548 <TlInit+0x4c>)
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 801650a:	4810      	ldr	r0, [pc, #64]	@ (801654c <TlInit+0x50>)
 801650c:	f000 faf2 	bl	8016af4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8016510:	2001      	movs	r0, #1
 8016512:	f000 f825 	bl	8016560 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8016516:	4b0e      	ldr	r3, [pc, #56]	@ (8016550 <TlInit+0x54>)
 8016518:	2201      	movs	r2, #1
 801651a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 801651c:	4b0d      	ldr	r3, [pc, #52]	@ (8016554 <TlInit+0x58>)
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d00c      	beq.n	801653e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8016528:	4b0b      	ldr	r3, [pc, #44]	@ (8016558 <TlInit+0x5c>)
 801652a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 801652c:	4b0b      	ldr	r3, [pc, #44]	@ (801655c <TlInit+0x60>)
 801652e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8016530:	4b08      	ldr	r3, [pc, #32]	@ (8016554 <TlInit+0x58>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	f107 020c 	add.w	r2, r7, #12
 8016538:	4610      	mov	r0, r2
 801653a:	4798      	blx	r3
  }

  return;
 801653c:	bf00      	nop
 801653e:	bf00      	nop
}
 8016540:	3718      	adds	r7, #24
 8016542:	46bd      	mov	sp, r7
 8016544:	bd80      	pop	{r7, pc}
 8016546:	bf00      	nop
 8016548:	20000364 	.word	0x20000364
 801654c:	20000358 	.word	0x20000358
 8016550:	20000368 	.word	0x20000368
 8016554:	2000140c 	.word	0x2000140c
 8016558:	080165b1 	.word	0x080165b1
 801655c:	080165c9 	.word	0x080165c9

08016560 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b082      	sub	sp, #8
 8016564:	af00      	add	r7, sp, #0
 8016566:	4603      	mov	r3, r0
 8016568:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 801656a:	79fb      	ldrb	r3, [r7, #7]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d10b      	bne.n	8016588 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8016570:	4b0d      	ldr	r3, [pc, #52]	@ (80165a8 <Cmd_SetStatus+0x48>)
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d003      	beq.n	8016580 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8016578:	4b0b      	ldr	r3, [pc, #44]	@ (80165a8 <Cmd_SetStatus+0x48>)
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	2000      	movs	r0, #0
 801657e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8016580:	4b0a      	ldr	r3, [pc, #40]	@ (80165ac <Cmd_SetStatus+0x4c>)
 8016582:	2200      	movs	r2, #0
 8016584:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8016586:	e00b      	b.n	80165a0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8016588:	4b08      	ldr	r3, [pc, #32]	@ (80165ac <Cmd_SetStatus+0x4c>)
 801658a:	2201      	movs	r2, #1
 801658c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 801658e:	4b06      	ldr	r3, [pc, #24]	@ (80165a8 <Cmd_SetStatus+0x48>)
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d004      	beq.n	80165a0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8016596:	4b04      	ldr	r3, [pc, #16]	@ (80165a8 <Cmd_SetStatus+0x48>)
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	2001      	movs	r0, #1
 801659c:	4798      	blx	r3
  return;
 801659e:	bf00      	nop
 80165a0:	bf00      	nop
}
 80165a2:	3708      	adds	r7, #8
 80165a4:	46bd      	mov	sp, r7
 80165a6:	bd80      	pop	{r7, pc}
 80165a8:	2000142c 	.word	0x2000142c
 80165ac:	20000360 	.word	0x20000360

080165b0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b082      	sub	sp, #8
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80165b8:	2000      	movs	r0, #0
 80165ba:	f7eb f905 	bl	80017c8 <shci_cmd_resp_release>

  return;
 80165be:	bf00      	nop
}
 80165c0:	3708      	adds	r7, #8
 80165c2:	46bd      	mov	sp, r7
 80165c4:	bd80      	pop	{r7, pc}
	...

080165c8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b082      	sub	sp, #8
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80165d0:	6879      	ldr	r1, [r7, #4]
 80165d2:	4805      	ldr	r0, [pc, #20]	@ (80165e8 <TlUserEvtReceived+0x20>)
 80165d4:	f000 fae6 	bl	8016ba4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80165d8:	4803      	ldr	r0, [pc, #12]	@ (80165e8 <TlUserEvtReceived+0x20>)
 80165da:	f7eb f8e9 	bl	80017b0 <shci_notify_asynch_evt>

  return;
 80165de:	bf00      	nop
}
 80165e0:	3708      	adds	r7, #8
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bd80      	pop	{r7, pc}
 80165e6:	bf00      	nop
 80165e8:	20000358 	.word	0x20000358

080165ec <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80165ec:	b480      	push	{r7}
 80165ee:	b083      	sub	sp, #12
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	4a05      	ldr	r2, [pc, #20]	@ (801660c <shci_register_io_bus+0x20>)
 80165f8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	4a04      	ldr	r2, [pc, #16]	@ (8016610 <shci_register_io_bus+0x24>)
 80165fe:	611a      	str	r2, [r3, #16]

  return;
 8016600:	bf00      	nop
}
 8016602:	370c      	adds	r7, #12
 8016604:	46bd      	mov	sp, r7
 8016606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660a:	4770      	bx	lr
 801660c:	080167a9 	.word	0x080167a9
 8016610:	080167fd 	.word	0x080167fd

08016614 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8016614:	b580      	push	{r7, lr}
 8016616:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8016618:	f001 fe80 	bl	801831c <HW_IPCC_Enable>

  return;
 801661c:	bf00      	nop
}
 801661e:	bd80      	pop	{r7, pc}

08016620 <TL_Init>:


void TL_Init( void )
{
 8016620:	b580      	push	{r7, lr}
 8016622:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8016624:	4b10      	ldr	r3, [pc, #64]	@ (8016668 <TL_Init+0x48>)
 8016626:	4a11      	ldr	r2, [pc, #68]	@ (801666c <TL_Init+0x4c>)
 8016628:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 801662a:	4b0f      	ldr	r3, [pc, #60]	@ (8016668 <TL_Init+0x48>)
 801662c:	4a10      	ldr	r2, [pc, #64]	@ (8016670 <TL_Init+0x50>)
 801662e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8016630:	4b0d      	ldr	r3, [pc, #52]	@ (8016668 <TL_Init+0x48>)
 8016632:	4a10      	ldr	r2, [pc, #64]	@ (8016674 <TL_Init+0x54>)
 8016634:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8016636:	4b0c      	ldr	r3, [pc, #48]	@ (8016668 <TL_Init+0x48>)
 8016638:	4a0f      	ldr	r2, [pc, #60]	@ (8016678 <TL_Init+0x58>)
 801663a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 801663c:	4b0a      	ldr	r3, [pc, #40]	@ (8016668 <TL_Init+0x48>)
 801663e:	4a0f      	ldr	r2, [pc, #60]	@ (801667c <TL_Init+0x5c>)
 8016640:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8016642:	4b09      	ldr	r3, [pc, #36]	@ (8016668 <TL_Init+0x48>)
 8016644:	4a0e      	ldr	r2, [pc, #56]	@ (8016680 <TL_Init+0x60>)
 8016646:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8016648:	4b07      	ldr	r3, [pc, #28]	@ (8016668 <TL_Init+0x48>)
 801664a:	4a0e      	ldr	r2, [pc, #56]	@ (8016684 <TL_Init+0x64>)
 801664c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 801664e:	4b06      	ldr	r3, [pc, #24]	@ (8016668 <TL_Init+0x48>)
 8016650:	4a0d      	ldr	r2, [pc, #52]	@ (8016688 <TL_Init+0x68>)
 8016652:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8016654:	4b04      	ldr	r3, [pc, #16]	@ (8016668 <TL_Init+0x48>)
 8016656:	4a0d      	ldr	r2, [pc, #52]	@ (801668c <TL_Init+0x6c>)
 8016658:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 801665a:	4b03      	ldr	r3, [pc, #12]	@ (8016668 <TL_Init+0x48>)
 801665c:	4a0c      	ldr	r2, [pc, #48]	@ (8016690 <TL_Init+0x70>)
 801665e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8016660:	f001 fe70 	bl	8018344 <HW_IPCC_Init>

  return;
 8016664:	bf00      	nop
}
 8016666:	bd80      	pop	{r7, pc}
 8016668:	20030000 	.word	0x20030000
 801666c:	20030028 	.word	0x20030028
 8016670:	20030048 	.word	0x20030048
 8016674:	20030058 	.word	0x20030058
 8016678:	20030068 	.word	0x20030068
 801667c:	20030070 	.word	0x20030070
 8016680:	20030078 	.word	0x20030078
 8016684:	20030080 	.word	0x20030080
 8016688:	2003009c 	.word	0x2003009c
 801668c:	200300a0 	.word	0x200300a0
 8016690:	200300ac 	.word	0x200300ac

08016694 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8016694:	b580      	push	{r7, lr}
 8016696:	b084      	sub	sp, #16
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80166a0:	4811      	ldr	r0, [pc, #68]	@ (80166e8 <TL_BLE_Init+0x54>)
 80166a2:	f000 fa27 	bl	8016af4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80166a6:	4b11      	ldr	r3, [pc, #68]	@ (80166ec <TL_BLE_Init+0x58>)
 80166a8:	685b      	ldr	r3, [r3, #4]
 80166aa:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	689a      	ldr	r2, [r3, #8]
 80166b0:	68bb      	ldr	r3, [r7, #8]
 80166b2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	68da      	ldr	r2, [r3, #12]
 80166b8:	68bb      	ldr	r3, [r7, #8]
 80166ba:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80166bc:	68bb      	ldr	r3, [r7, #8]
 80166be:	4a0c      	ldr	r2, [pc, #48]	@ (80166f0 <TL_BLE_Init+0x5c>)
 80166c0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80166c2:	68bb      	ldr	r3, [r7, #8]
 80166c4:	4a08      	ldr	r2, [pc, #32]	@ (80166e8 <TL_BLE_Init+0x54>)
 80166c6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80166c8:	f001 fe52 	bl	8018370 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	4a08      	ldr	r2, [pc, #32]	@ (80166f4 <TL_BLE_Init+0x60>)
 80166d2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	685b      	ldr	r3, [r3, #4]
 80166d8:	4a07      	ldr	r2, [pc, #28]	@ (80166f8 <TL_BLE_Init+0x64>)
 80166da:	6013      	str	r3, [r2, #0]

  return 0;
 80166dc:	2300      	movs	r3, #0
}
 80166de:	4618      	mov	r0, r3
 80166e0:	3710      	adds	r7, #16
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bd80      	pop	{r7, pc}
 80166e6:	bf00      	nop
 80166e8:	200300c8 	.word	0x200300c8
 80166ec:	20030000 	.word	0x20030000
 80166f0:	20030a58 	.word	0x20030a58
 80166f4:	2000143c 	.word	0x2000143c
 80166f8:	20001440 	.word	0x20001440

080166fc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b082      	sub	sp, #8
 8016700:	af00      	add	r7, sp, #0
 8016702:	6078      	str	r0, [r7, #4]
 8016704:	460b      	mov	r3, r1
 8016706:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8016708:	4b09      	ldr	r3, [pc, #36]	@ (8016730 <TL_BLE_SendCmd+0x34>)
 801670a:	685b      	ldr	r3, [r3, #4]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	2201      	movs	r2, #1
 8016710:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8016712:	4b07      	ldr	r3, [pc, #28]	@ (8016730 <TL_BLE_SendCmd+0x34>)
 8016714:	685b      	ldr	r3, [r3, #4]
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	4619      	mov	r1, r3
 801671a:	2001      	movs	r0, #1
 801671c:	f000 f96c 	bl	80169f8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8016720:	f001 fe30 	bl	8018384 <HW_IPCC_BLE_SendCmd>

  return 0;
 8016724:	2300      	movs	r3, #0
}
 8016726:	4618      	mov	r0, r3
 8016728:	3708      	adds	r7, #8
 801672a:	46bd      	mov	sp, r7
 801672c:	bd80      	pop	{r7, pc}
 801672e:	bf00      	nop
 8016730:	20030000 	.word	0x20030000

08016734 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8016734:	b580      	push	{r7, lr}
 8016736:	b082      	sub	sp, #8
 8016738:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 801673a:	e01c      	b.n	8016776 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 801673c:	1d3b      	adds	r3, r7, #4
 801673e:	4619      	mov	r1, r3
 8016740:	4812      	ldr	r0, [pc, #72]	@ (801678c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016742:	f000 fa76 	bl	8016c32 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	7a5b      	ldrb	r3, [r3, #9]
 801674a:	2b0f      	cmp	r3, #15
 801674c:	d003      	beq.n	8016756 <HW_IPCC_BLE_RxEvtNot+0x22>
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	7a5b      	ldrb	r3, [r3, #9]
 8016752:	2b0e      	cmp	r3, #14
 8016754:	d105      	bne.n	8016762 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	4619      	mov	r1, r3
 801675a:	2002      	movs	r0, #2
 801675c:	f000 f94c 	bl	80169f8 <OutputDbgTrace>
 8016760:	e004      	b.n	801676c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	4619      	mov	r1, r3
 8016766:	2003      	movs	r0, #3
 8016768:	f000 f946 	bl	80169f8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 801676c:	4b08      	ldr	r3, [pc, #32]	@ (8016790 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	687a      	ldr	r2, [r7, #4]
 8016772:	4610      	mov	r0, r2
 8016774:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8016776:	4805      	ldr	r0, [pc, #20]	@ (801678c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016778:	f000 f9cc 	bl	8016b14 <LST_is_empty>
 801677c:	4603      	mov	r3, r0
 801677e:	2b00      	cmp	r3, #0
 8016780:	d0dc      	beq.n	801673c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8016782:	bf00      	nop
}
 8016784:	3708      	adds	r7, #8
 8016786:	46bd      	mov	sp, r7
 8016788:	bd80      	pop	{r7, pc}
 801678a:	bf00      	nop
 801678c:	200300c8 	.word	0x200300c8
 8016790:	2000143c 	.word	0x2000143c

08016794 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8016798:	4b02      	ldr	r3, [pc, #8]	@ (80167a4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	4798      	blx	r3

  return;
 801679e:	bf00      	nop
}
 80167a0:	bd80      	pop	{r7, pc}
 80167a2:	bf00      	nop
 80167a4:	20001440 	.word	0x20001440

080167a8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80167a8:	b580      	push	{r7, lr}
 80167aa:	b084      	sub	sp, #16
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80167b4:	480d      	ldr	r0, [pc, #52]	@ (80167ec <TL_SYS_Init+0x44>)
 80167b6:	f000 f99d 	bl	8016af4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80167ba:	4b0d      	ldr	r3, [pc, #52]	@ (80167f0 <TL_SYS_Init+0x48>)
 80167bc:	68db      	ldr	r3, [r3, #12]
 80167be:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	689a      	ldr	r2, [r3, #8]
 80167c4:	68bb      	ldr	r3, [r7, #8]
 80167c6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80167c8:	68bb      	ldr	r3, [r7, #8]
 80167ca:	4a08      	ldr	r2, [pc, #32]	@ (80167ec <TL_SYS_Init+0x44>)
 80167cc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80167ce:	f001 fdfb 	bl	80183c8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	4a07      	ldr	r2, [pc, #28]	@ (80167f4 <TL_SYS_Init+0x4c>)
 80167d8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	685b      	ldr	r3, [r3, #4]
 80167de:	4a06      	ldr	r2, [pc, #24]	@ (80167f8 <TL_SYS_Init+0x50>)
 80167e0:	6013      	str	r3, [r2, #0]

  return 0;
 80167e2:	2300      	movs	r3, #0
}
 80167e4:	4618      	mov	r0, r3
 80167e6:	3710      	adds	r7, #16
 80167e8:	46bd      	mov	sp, r7
 80167ea:	bd80      	pop	{r7, pc}
 80167ec:	200300d0 	.word	0x200300d0
 80167f0:	20030000 	.word	0x20030000
 80167f4:	20001444 	.word	0x20001444
 80167f8:	20001448 	.word	0x20001448

080167fc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b082      	sub	sp, #8
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
 8016804:	460b      	mov	r3, r1
 8016806:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8016808:	4b09      	ldr	r3, [pc, #36]	@ (8016830 <TL_SYS_SendCmd+0x34>)
 801680a:	68db      	ldr	r3, [r3, #12]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	2210      	movs	r2, #16
 8016810:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8016812:	4b07      	ldr	r3, [pc, #28]	@ (8016830 <TL_SYS_SendCmd+0x34>)
 8016814:	68db      	ldr	r3, [r3, #12]
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	4619      	mov	r1, r3
 801681a:	2004      	movs	r0, #4
 801681c:	f000 f8ec 	bl	80169f8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8016820:	f001 fddc 	bl	80183dc <HW_IPCC_SYS_SendCmd>

  return 0;
 8016824:	2300      	movs	r3, #0
}
 8016826:	4618      	mov	r0, r3
 8016828:	3708      	adds	r7, #8
 801682a:	46bd      	mov	sp, r7
 801682c:	bd80      	pop	{r7, pc}
 801682e:	bf00      	nop
 8016830:	20030000 	.word	0x20030000

08016834 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016838:	4b07      	ldr	r3, [pc, #28]	@ (8016858 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801683a:	68db      	ldr	r3, [r3, #12]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	4619      	mov	r1, r3
 8016840:	2005      	movs	r0, #5
 8016842:	f000 f8d9 	bl	80169f8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016846:	4b05      	ldr	r3, [pc, #20]	@ (801685c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	4a03      	ldr	r2, [pc, #12]	@ (8016858 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801684c:	68d2      	ldr	r2, [r2, #12]
 801684e:	6812      	ldr	r2, [r2, #0]
 8016850:	4610      	mov	r0, r2
 8016852:	4798      	blx	r3

  return;
 8016854:	bf00      	nop
}
 8016856:	bd80      	pop	{r7, pc}
 8016858:	20030000 	.word	0x20030000
 801685c:	20001444 	.word	0x20001444

08016860 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b082      	sub	sp, #8
 8016864:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016866:	e00e      	b.n	8016886 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8016868:	1d3b      	adds	r3, r7, #4
 801686a:	4619      	mov	r1, r3
 801686c:	480b      	ldr	r0, [pc, #44]	@ (801689c <HW_IPCC_SYS_EvtNot+0x3c>)
 801686e:	f000 f9e0 	bl	8016c32 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	4619      	mov	r1, r3
 8016876:	2006      	movs	r0, #6
 8016878:	f000 f8be 	bl	80169f8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 801687c:	4b08      	ldr	r3, [pc, #32]	@ (80168a0 <HW_IPCC_SYS_EvtNot+0x40>)
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	687a      	ldr	r2, [r7, #4]
 8016882:	4610      	mov	r0, r2
 8016884:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016886:	4805      	ldr	r0, [pc, #20]	@ (801689c <HW_IPCC_SYS_EvtNot+0x3c>)
 8016888:	f000 f944 	bl	8016b14 <LST_is_empty>
 801688c:	4603      	mov	r3, r0
 801688e:	2b00      	cmp	r3, #0
 8016890:	d0ea      	beq.n	8016868 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8016892:	bf00      	nop
}
 8016894:	3708      	adds	r7, #8
 8016896:	46bd      	mov	sp, r7
 8016898:	bd80      	pop	{r7, pc}
 801689a:	bf00      	nop
 801689c:	200300d0 	.word	0x200300d0
 80168a0:	20001448 	.word	0x20001448

080168a4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b082      	sub	sp, #8
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80168ac:	4817      	ldr	r0, [pc, #92]	@ (801690c <TL_MM_Init+0x68>)
 80168ae:	f000 f921 	bl	8016af4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80168b2:	4817      	ldr	r0, [pc, #92]	@ (8016910 <TL_MM_Init+0x6c>)
 80168b4:	f000 f91e 	bl	8016af4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80168b8:	4b16      	ldr	r3, [pc, #88]	@ (8016914 <TL_MM_Init+0x70>)
 80168ba:	691b      	ldr	r3, [r3, #16]
 80168bc:	4a16      	ldr	r2, [pc, #88]	@ (8016918 <TL_MM_Init+0x74>)
 80168be:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80168c0:	4b15      	ldr	r3, [pc, #84]	@ (8016918 <TL_MM_Init+0x74>)
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	687a      	ldr	r2, [r7, #4]
 80168c6:	6892      	ldr	r2, [r2, #8]
 80168c8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80168ca:	4b13      	ldr	r3, [pc, #76]	@ (8016918 <TL_MM_Init+0x74>)
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	687a      	ldr	r2, [r7, #4]
 80168d0:	68d2      	ldr	r2, [r2, #12]
 80168d2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80168d4:	4b10      	ldr	r3, [pc, #64]	@ (8016918 <TL_MM_Init+0x74>)
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	4a0c      	ldr	r2, [pc, #48]	@ (801690c <TL_MM_Init+0x68>)
 80168da:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80168dc:	4b0e      	ldr	r3, [pc, #56]	@ (8016918 <TL_MM_Init+0x74>)
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	687a      	ldr	r2, [r7, #4]
 80168e2:	6812      	ldr	r2, [r2, #0]
 80168e4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80168e6:	4b0c      	ldr	r3, [pc, #48]	@ (8016918 <TL_MM_Init+0x74>)
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	687a      	ldr	r2, [r7, #4]
 80168ec:	6852      	ldr	r2, [r2, #4]
 80168ee:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80168f0:	4b09      	ldr	r3, [pc, #36]	@ (8016918 <TL_MM_Init+0x74>)
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	687a      	ldr	r2, [r7, #4]
 80168f6:	6912      	ldr	r2, [r2, #16]
 80168f8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80168fa:	4b07      	ldr	r3, [pc, #28]	@ (8016918 <TL_MM_Init+0x74>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	687a      	ldr	r2, [r7, #4]
 8016900:	6952      	ldr	r2, [r2, #20]
 8016902:	619a      	str	r2, [r3, #24]

  return;
 8016904:	bf00      	nop
}
 8016906:	3708      	adds	r7, #8
 8016908:	46bd      	mov	sp, r7
 801690a:	bd80      	pop	{r7, pc}
 801690c:	200300b8 	.word	0x200300b8
 8016910:	20001434 	.word	0x20001434
 8016914:	20030000 	.word	0x20030000
 8016918:	2000144c 	.word	0x2000144c

0801691c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b082      	sub	sp, #8
 8016920:	af00      	add	r7, sp, #0
 8016922:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8016924:	6879      	ldr	r1, [r7, #4]
 8016926:	4807      	ldr	r0, [pc, #28]	@ (8016944 <TL_MM_EvtDone+0x28>)
 8016928:	f000 f93c 	bl	8016ba4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 801692c:	6879      	ldr	r1, [r7, #4]
 801692e:	2000      	movs	r0, #0
 8016930:	f000 f862 	bl	80169f8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8016934:	4804      	ldr	r0, [pc, #16]	@ (8016948 <TL_MM_EvtDone+0x2c>)
 8016936:	f001 fd77 	bl	8018428 <HW_IPCC_MM_SendFreeBuf>

  return;
 801693a:	bf00      	nop
}
 801693c:	3708      	adds	r7, #8
 801693e:	46bd      	mov	sp, r7
 8016940:	bd80      	pop	{r7, pc}
 8016942:	bf00      	nop
 8016944:	20001434 	.word	0x20001434
 8016948:	0801694d 	.word	0x0801694d

0801694c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 801694c:	b580      	push	{r7, lr}
 801694e:	b082      	sub	sp, #8
 8016950:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016952:	e00c      	b.n	801696e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8016954:	1d3b      	adds	r3, r7, #4
 8016956:	4619      	mov	r1, r3
 8016958:	480a      	ldr	r0, [pc, #40]	@ (8016984 <SendFreeBuf+0x38>)
 801695a:	f000 f96a 	bl	8016c32 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 801695e:	4b0a      	ldr	r3, [pc, #40]	@ (8016988 <SendFreeBuf+0x3c>)
 8016960:	691b      	ldr	r3, [r3, #16]
 8016962:	691b      	ldr	r3, [r3, #16]
 8016964:	687a      	ldr	r2, [r7, #4]
 8016966:	4611      	mov	r1, r2
 8016968:	4618      	mov	r0, r3
 801696a:	f000 f91b 	bl	8016ba4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801696e:	4805      	ldr	r0, [pc, #20]	@ (8016984 <SendFreeBuf+0x38>)
 8016970:	f000 f8d0 	bl	8016b14 <LST_is_empty>
 8016974:	4603      	mov	r3, r0
 8016976:	2b00      	cmp	r3, #0
 8016978:	d0ec      	beq.n	8016954 <SendFreeBuf+0x8>
  }

  return;
 801697a:	bf00      	nop
}
 801697c:	3708      	adds	r7, #8
 801697e:	46bd      	mov	sp, r7
 8016980:	bd80      	pop	{r7, pc}
 8016982:	bf00      	nop
 8016984:	20001434 	.word	0x20001434
 8016988:	20030000 	.word	0x20030000

0801698c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 801698c:	b580      	push	{r7, lr}
 801698e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8016990:	4805      	ldr	r0, [pc, #20]	@ (80169a8 <TL_TRACES_Init+0x1c>)
 8016992:	f000 f8af 	bl	8016af4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8016996:	4b05      	ldr	r3, [pc, #20]	@ (80169ac <TL_TRACES_Init+0x20>)
 8016998:	695b      	ldr	r3, [r3, #20]
 801699a:	4a03      	ldr	r2, [pc, #12]	@ (80169a8 <TL_TRACES_Init+0x1c>)
 801699c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801699e:	f001 fd79 	bl	8018494 <HW_IPCC_TRACES_Init>

  return;
 80169a2:	bf00      	nop
}
 80169a4:	bd80      	pop	{r7, pc}
 80169a6:	bf00      	nop
 80169a8:	200300c0 	.word	0x200300c0
 80169ac:	20030000 	.word	0x20030000

080169b0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b082      	sub	sp, #8
 80169b4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80169b6:	e008      	b.n	80169ca <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80169b8:	1d3b      	adds	r3, r7, #4
 80169ba:	4619      	mov	r1, r3
 80169bc:	4808      	ldr	r0, [pc, #32]	@ (80169e0 <HW_IPCC_TRACES_EvtNot+0x30>)
 80169be:	f000 f938 	bl	8016c32 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	4618      	mov	r0, r3
 80169c6:	f000 f80d 	bl	80169e4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80169ca:	4805      	ldr	r0, [pc, #20]	@ (80169e0 <HW_IPCC_TRACES_EvtNot+0x30>)
 80169cc:	f000 f8a2 	bl	8016b14 <LST_is_empty>
 80169d0:	4603      	mov	r3, r0
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d0f0      	beq.n	80169b8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80169d6:	bf00      	nop
}
 80169d8:	3708      	adds	r7, #8
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}
 80169de:	bf00      	nop
 80169e0:	200300c0 	.word	0x200300c0

080169e4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80169e4:	b480      	push	{r7}
 80169e6:	b083      	sub	sp, #12
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80169ec:	bf00      	nop
 80169ee:	370c      	adds	r7, #12
 80169f0:	46bd      	mov	sp, r7
 80169f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f6:	4770      	bx	lr

080169f8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80169f8:	b480      	push	{r7}
 80169fa:	b087      	sub	sp, #28
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	4603      	mov	r3, r0
 8016a00:	6039      	str	r1, [r7, #0]
 8016a02:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8016a04:	79fb      	ldrb	r3, [r7, #7]
 8016a06:	2b06      	cmp	r3, #6
 8016a08:	d845      	bhi.n	8016a96 <OutputDbgTrace+0x9e>
 8016a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8016a10 <OutputDbgTrace+0x18>)
 8016a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a10:	08016a2d 	.word	0x08016a2d
 8016a14:	08016a51 	.word	0x08016a51
 8016a18:	08016a57 	.word	0x08016a57
 8016a1c:	08016a6b 	.word	0x08016a6b
 8016a20:	08016a77 	.word	0x08016a77
 8016a24:	08016a7d 	.word	0x08016a7d
 8016a28:	08016a8b 	.word	0x08016a8b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016a2c:	683b      	ldr	r3, [r7, #0]
 8016a2e:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016a30:	697b      	ldr	r3, [r7, #20]
 8016a32:	7a5b      	ldrb	r3, [r3, #9]
 8016a34:	2bff      	cmp	r3, #255	@ 0xff
 8016a36:	d005      	beq.n	8016a44 <OutputDbgTrace+0x4c>
 8016a38:	2bff      	cmp	r3, #255	@ 0xff
 8016a3a:	dc05      	bgt.n	8016a48 <OutputDbgTrace+0x50>
 8016a3c:	2b0e      	cmp	r3, #14
 8016a3e:	d005      	beq.n	8016a4c <OutputDbgTrace+0x54>
 8016a40:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8016a42:	e001      	b.n	8016a48 <OutputDbgTrace+0x50>
          break;
 8016a44:	bf00      	nop
 8016a46:	e027      	b.n	8016a98 <OutputDbgTrace+0xa0>
          break;
 8016a48:	bf00      	nop
 8016a4a:	e025      	b.n	8016a98 <OutputDbgTrace+0xa0>
          break;
 8016a4c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8016a4e:	e023      	b.n	8016a98 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016a50:	683b      	ldr	r3, [r7, #0]
 8016a52:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016a54:	e020      	b.n	8016a98 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016a56:	683b      	ldr	r3, [r7, #0]
 8016a58:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016a5a:	697b      	ldr	r3, [r7, #20]
 8016a5c:	7a5b      	ldrb	r3, [r3, #9]
 8016a5e:	2b0e      	cmp	r3, #14
 8016a60:	d001      	beq.n	8016a66 <OutputDbgTrace+0x6e>
 8016a62:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8016a64:	e000      	b.n	8016a68 <OutputDbgTrace+0x70>
          break;
 8016a66:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016a68:	e016      	b.n	8016a98 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016a6a:	683b      	ldr	r3, [r7, #0]
 8016a6c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016a6e:	697b      	ldr	r3, [r7, #20]
 8016a70:	7a5b      	ldrb	r3, [r3, #9]
 8016a72:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016a74:	e010      	b.n	8016a98 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016a76:	683b      	ldr	r3, [r7, #0]
 8016a78:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016a7a:	e00d      	b.n	8016a98 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8016a7c:	683b      	ldr	r3, [r7, #0]
 8016a7e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8016a80:	693b      	ldr	r3, [r7, #16]
 8016a82:	785b      	ldrb	r3, [r3, #1]
 8016a84:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8016a86:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016a88:	e006      	b.n	8016a98 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016a8a:	683b      	ldr	r3, [r7, #0]
 8016a8c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016a8e:	697b      	ldr	r3, [r7, #20]
 8016a90:	7a5b      	ldrb	r3, [r3, #9]
 8016a92:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016a94:	e000      	b.n	8016a98 <OutputDbgTrace+0xa0>

    default:
      break;
 8016a96:	bf00      	nop
  }

  return;
 8016a98:	bf00      	nop
}
 8016a9a:	371c      	adds	r7, #28
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa2:	4770      	bx	lr

08016aa4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8016aa4:	b480      	push	{r7}
 8016aa6:	b085      	sub	sp, #20
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	4603      	mov	r3, r0
 8016aac:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8016aae:	4b0f      	ldr	r3, [pc, #60]	@ (8016aec <OTP_Read+0x48>)
 8016ab0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016ab2:	e002      	b.n	8016aba <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	3b08      	subs	r3, #8
 8016ab8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	3307      	adds	r3, #7
 8016abe:	781b      	ldrb	r3, [r3, #0]
 8016ac0:	79fa      	ldrb	r2, [r7, #7]
 8016ac2:	429a      	cmp	r2, r3
 8016ac4:	d003      	beq.n	8016ace <OTP_Read+0x2a>
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	4a09      	ldr	r2, [pc, #36]	@ (8016af0 <OTP_Read+0x4c>)
 8016aca:	4293      	cmp	r3, r2
 8016acc:	d1f2      	bne.n	8016ab4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	3307      	adds	r3, #7
 8016ad2:	781b      	ldrb	r3, [r3, #0]
 8016ad4:	79fa      	ldrb	r2, [r7, #7]
 8016ad6:	429a      	cmp	r2, r3
 8016ad8:	d001      	beq.n	8016ade <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8016ada:	2300      	movs	r3, #0
 8016adc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8016ade:	68fb      	ldr	r3, [r7, #12]
}
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	3714      	adds	r7, #20
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aea:	4770      	bx	lr
 8016aec:	1fff73f8 	.word	0x1fff73f8
 8016af0:	1fff7000 	.word	0x1fff7000

08016af4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8016af4:	b480      	push	{r7}
 8016af6:	b083      	sub	sp, #12
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	687a      	ldr	r2, [r7, #4]
 8016b00:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	687a      	ldr	r2, [r7, #4]
 8016b06:	605a      	str	r2, [r3, #4]
}
 8016b08:	bf00      	nop
 8016b0a:	370c      	adds	r7, #12
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b12:	4770      	bx	lr

08016b14 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8016b14:	b480      	push	{r7}
 8016b16:	b087      	sub	sp, #28
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8016b20:	60fb      	str	r3, [r7, #12]
  return(result);
 8016b22:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016b24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016b26:	b672      	cpsid	i
}
 8016b28:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	687a      	ldr	r2, [r7, #4]
 8016b30:	429a      	cmp	r2, r3
 8016b32:	d102      	bne.n	8016b3a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8016b34:	2301      	movs	r3, #1
 8016b36:	75fb      	strb	r3, [r7, #23]
 8016b38:	e001      	b.n	8016b3e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	75fb      	strb	r3, [r7, #23]
 8016b3e:	693b      	ldr	r3, [r7, #16]
 8016b40:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b42:	68bb      	ldr	r3, [r7, #8]
 8016b44:	f383 8810 	msr	PRIMASK, r3
}
 8016b48:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8016b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	371c      	adds	r7, #28
 8016b50:	46bd      	mov	sp, r7
 8016b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b56:	4770      	bx	lr

08016b58 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8016b58:	b480      	push	{r7}
 8016b5a:	b087      	sub	sp, #28
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	6078      	str	r0, [r7, #4]
 8016b60:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b62:	f3ef 8310 	mrs	r3, PRIMASK
 8016b66:	60fb      	str	r3, [r7, #12]
  return(result);
 8016b68:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016b6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016b6c:	b672      	cpsid	i
}
 8016b6e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	681a      	ldr	r2, [r3, #0]
 8016b74:	683b      	ldr	r3, [r7, #0]
 8016b76:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	687a      	ldr	r2, [r7, #4]
 8016b7c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	683a      	ldr	r2, [r7, #0]
 8016b82:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8016b84:	683b      	ldr	r3, [r7, #0]
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	683a      	ldr	r2, [r7, #0]
 8016b8a:	605a      	str	r2, [r3, #4]
 8016b8c:	697b      	ldr	r3, [r7, #20]
 8016b8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b90:	693b      	ldr	r3, [r7, #16]
 8016b92:	f383 8810 	msr	PRIMASK, r3
}
 8016b96:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016b98:	bf00      	nop
 8016b9a:	371c      	adds	r7, #28
 8016b9c:	46bd      	mov	sp, r7
 8016b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba2:	4770      	bx	lr

08016ba4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8016ba4:	b480      	push	{r7}
 8016ba6:	b087      	sub	sp, #28
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
 8016bac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016bae:	f3ef 8310 	mrs	r3, PRIMASK
 8016bb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8016bb4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016bb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016bb8:	b672      	cpsid	i
}
 8016bba:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8016bbc:	683b      	ldr	r3, [r7, #0]
 8016bbe:	687a      	ldr	r2, [r7, #4]
 8016bc0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	685a      	ldr	r2, [r3, #4]
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	683a      	ldr	r2, [r7, #0]
 8016bce:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8016bd0:	683b      	ldr	r3, [r7, #0]
 8016bd2:	685b      	ldr	r3, [r3, #4]
 8016bd4:	683a      	ldr	r2, [r7, #0]
 8016bd6:	601a      	str	r2, [r3, #0]
 8016bd8:	697b      	ldr	r3, [r7, #20]
 8016bda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016bdc:	693b      	ldr	r3, [r7, #16]
 8016bde:	f383 8810 	msr	PRIMASK, r3
}
 8016be2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016be4:	bf00      	nop
 8016be6:	371c      	adds	r7, #28
 8016be8:	46bd      	mov	sp, r7
 8016bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bee:	4770      	bx	lr

08016bf0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8016bf0:	b480      	push	{r7}
 8016bf2:	b087      	sub	sp, #28
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8016bfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8016bfe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016c00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016c02:	b672      	cpsid	i
}
 8016c04:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	685b      	ldr	r3, [r3, #4]
 8016c0a:	687a      	ldr	r2, [r7, #4]
 8016c0c:	6812      	ldr	r2, [r2, #0]
 8016c0e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	687a      	ldr	r2, [r7, #4]
 8016c16:	6852      	ldr	r2, [r2, #4]
 8016c18:	605a      	str	r2, [r3, #4]
 8016c1a:	697b      	ldr	r3, [r7, #20]
 8016c1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c1e:	693b      	ldr	r3, [r7, #16]
 8016c20:	f383 8810 	msr	PRIMASK, r3
}
 8016c24:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016c26:	bf00      	nop
 8016c28:	371c      	adds	r7, #28
 8016c2a:	46bd      	mov	sp, r7
 8016c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c30:	4770      	bx	lr

08016c32 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8016c32:	b580      	push	{r7, lr}
 8016c34:	b086      	sub	sp, #24
 8016c36:	af00      	add	r7, sp, #0
 8016c38:	6078      	str	r0, [r7, #4]
 8016c3a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8016c40:	60fb      	str	r3, [r7, #12]
  return(result);
 8016c42:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016c44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016c46:	b672      	cpsid	i
}
 8016c48:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	681a      	ldr	r2, [r3, #0]
 8016c4e:	683b      	ldr	r3, [r7, #0]
 8016c50:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	4618      	mov	r0, r3
 8016c58:	f7ff ffca 	bl	8016bf0 <LST_remove_node>
 8016c5c:	697b      	ldr	r3, [r7, #20]
 8016c5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c60:	693b      	ldr	r3, [r7, #16]
 8016c62:	f383 8810 	msr	PRIMASK, r3
}
 8016c66:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016c68:	bf00      	nop
 8016c6a:	3718      	adds	r7, #24
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd80      	pop	{r7, pc}

08016c70 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b082      	sub	sp, #8
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8016c78:	6878      	ldr	r0, [r7, #4]
 8016c7a:	f7ea fd58 	bl	800172e <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8016c7e:	bf00      	nop
 8016c80:	3708      	adds	r7, #8
 8016c82:	46bd      	mov	sp, r7
 8016c84:	bd80      	pop	{r7, pc}

08016c86 <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8016c86:	b580      	push	{r7, lr}
 8016c88:	b082      	sub	sp, #8
 8016c8a:	af00      	add	r7, sp, #0
 8016c8c:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8016c8e:	e002      	b.n	8016c96 <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8016c90:	2001      	movs	r0, #1
 8016c92:	f7ff ffed 	bl	8016c70 <SPIF_Delay>
  while (Handle->Lock)
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	7b1b      	ldrb	r3, [r3, #12]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d1f8      	bne.n	8016c90 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	2201      	movs	r2, #1
 8016ca2:	731a      	strb	r2, [r3, #12]
}
 8016ca4:	bf00      	nop
 8016ca6:	3708      	adds	r7, #8
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	bd80      	pop	{r7, pc}

08016cac <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8016cac:	b480      	push	{r7}
 8016cae:	b083      	sub	sp, #12
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	2200      	movs	r2, #0
 8016cb8:	731a      	strb	r2, [r3, #12]
}
 8016cba:	bf00      	nop
 8016cbc:	370c      	adds	r7, #12
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc4:	4770      	bx	lr

08016cc6 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8016cc6:	b580      	push	{r7, lr}
 8016cc8:	b084      	sub	sp, #16
 8016cca:	af00      	add	r7, sp, #0
 8016ccc:	6078      	str	r0, [r7, #4]
 8016cce:	460b      	mov	r3, r1
 8016cd0:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	6858      	ldr	r0, [r3, #4]
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	691b      	ldr	r3, [r3, #16]
 8016cda:	b29b      	uxth	r3, r3
 8016cdc:	78fa      	ldrb	r2, [r7, #3]
 8016cde:	4619      	mov	r1, r3
 8016ce0:	f7f2 fa04 	bl	80090ec <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 8016ce4:	2300      	movs	r3, #0
 8016ce6:	60fb      	str	r3, [r7, #12]
 8016ce8:	e002      	b.n	8016cf0 <SPIF_CsPin+0x2a>
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	3301      	adds	r3, #1
 8016cee:	60fb      	str	r3, [r7, #12]
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	2b09      	cmp	r3, #9
 8016cf4:	ddf9      	ble.n	8016cea <SPIF_CsPin+0x24>
}
 8016cf6:	bf00      	nop
 8016cf8:	bf00      	nop
 8016cfa:	3710      	adds	r7, #16
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	bd80      	pop	{r7, pc}

08016d00 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8016d00:	b580      	push	{r7, lr}
 8016d02:	b086      	sub	sp, #24
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	60f8      	str	r0, [r7, #12]
 8016d08:	60b9      	str	r1, [r7, #8]
 8016d0a:	607a      	str	r2, [r7, #4]
 8016d0c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8016d0e:	2300      	movs	r3, #0
 8016d10:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8016d12:	f7f0 f973 	bl	8006ffc <HAL_GetTick>
 8016d16:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_TransmitReceive_DMA(Handle->HSpi, Tx, Rx, Size) != HAL_OK)
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	6818      	ldr	r0, [r3, #0]
 8016d1c:	683b      	ldr	r3, [r7, #0]
 8016d1e:	b29b      	uxth	r3, r3
 8016d20:	687a      	ldr	r2, [r7, #4]
 8016d22:	68b9      	ldr	r1, [r7, #8]
 8016d24:	f7f7 f890 	bl	800de48 <HAL_SPI_TransmitReceive_DMA>
 8016d28:	4603      	mov	r3, r0
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d11a      	bne.n	8016d64 <SPIF_TransmitReceive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8016d2e:	2001      	movs	r0, #1
 8016d30:	f7ff ff9e 	bl	8016c70 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8016d34:	f7f0 f962 	bl	8006ffc <HAL_GetTick>
 8016d38:	4602      	mov	r2, r0
 8016d3a:	693b      	ldr	r3, [r7, #16]
 8016d3c:	1ad3      	subs	r3, r2, r3
 8016d3e:	6a3a      	ldr	r2, [r7, #32]
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d805      	bhi.n	8016d50 <SPIF_TransmitReceive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	4618      	mov	r0, r3
 8016d4a:	f7f7 fa03 	bl	800e154 <HAL_SPI_DMAStop>
        break;
 8016d4e:	e009      	b.n	8016d64 <SPIF_TransmitReceive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	4618      	mov	r0, r3
 8016d56:	f7f7 fb77 	bl	800e448 <HAL_SPI_GetState>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	2b01      	cmp	r3, #1
 8016d5e:	d1e6      	bne.n	8016d2e <SPIF_TransmitReceive+0x2e>
      {
        retVal = true;
 8016d60:	2301      	movs	r3, #1
 8016d62:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8016d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d66:	4618      	mov	r0, r3
 8016d68:	3718      	adds	r7, #24
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}

08016d6e <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8016d6e:	b580      	push	{r7, lr}
 8016d70:	b086      	sub	sp, #24
 8016d72:	af00      	add	r7, sp, #0
 8016d74:	60f8      	str	r0, [r7, #12]
 8016d76:	60b9      	str	r1, [r7, #8]
 8016d78:	607a      	str	r2, [r7, #4]
 8016d7a:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8016d80:	f7f0 f93c 	bl	8006ffc <HAL_GetTick>
 8016d84:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Transmit_DMA(Handle->HSpi, Tx, Size) != HAL_OK)
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	687a      	ldr	r2, [r7, #4]
 8016d8c:	b292      	uxth	r2, r2
 8016d8e:	68b9      	ldr	r1, [r7, #8]
 8016d90:	4618      	mov	r0, r3
 8016d92:	f7f6 fe4b 	bl	800da2c <HAL_SPI_Transmit_DMA>
 8016d96:	4603      	mov	r3, r0
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d11a      	bne.n	8016dd2 <SPIF_Transmit+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8016d9c:	2001      	movs	r0, #1
 8016d9e:	f7ff ff67 	bl	8016c70 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8016da2:	f7f0 f92b 	bl	8006ffc <HAL_GetTick>
 8016da6:	4602      	mov	r2, r0
 8016da8:	693b      	ldr	r3, [r7, #16]
 8016daa:	1ad3      	subs	r3, r2, r3
 8016dac:	683a      	ldr	r2, [r7, #0]
 8016dae:	429a      	cmp	r2, r3
 8016db0:	d805      	bhi.n	8016dbe <SPIF_Transmit+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	4618      	mov	r0, r3
 8016db8:	f7f7 f9cc 	bl	800e154 <HAL_SPI_DMAStop>
        break;
 8016dbc:	e009      	b.n	8016dd2 <SPIF_Transmit+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	f7f7 fb40 	bl	800e448 <HAL_SPI_GetState>
 8016dc8:	4603      	mov	r3, r0
 8016dca:	2b01      	cmp	r3, #1
 8016dcc:	d1e6      	bne.n	8016d9c <SPIF_Transmit+0x2e>
      {
        retVal = true;
 8016dce:	2301      	movs	r3, #1
 8016dd0:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8016dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	3718      	adds	r7, #24
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	bd80      	pop	{r7, pc}

08016ddc <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b086      	sub	sp, #24
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	60f8      	str	r0, [r7, #12]
 8016de4:	60b9      	str	r1, [r7, #8]
 8016de6:	607a      	str	r2, [r7, #4]
 8016de8:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8016dea:	2300      	movs	r3, #0
 8016dec:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8016dee:	f7f0 f905 	bl	8006ffc <HAL_GetTick>
 8016df2:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Receive_DMA(Handle->HSpi, Rx, Size) != HAL_OK)
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	687a      	ldr	r2, [r7, #4]
 8016dfa:	b292      	uxth	r2, r2
 8016dfc:	68b9      	ldr	r1, [r7, #8]
 8016dfe:	4618      	mov	r0, r3
 8016e00:	f7f6 ff02 	bl	800dc08 <HAL_SPI_Receive_DMA>
 8016e04:	4603      	mov	r3, r0
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d11a      	bne.n	8016e40 <SPIF_Receive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8016e0a:	2001      	movs	r0, #1
 8016e0c:	f7ff ff30 	bl	8016c70 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8016e10:	f7f0 f8f4 	bl	8006ffc <HAL_GetTick>
 8016e14:	4602      	mov	r2, r0
 8016e16:	693b      	ldr	r3, [r7, #16]
 8016e18:	1ad3      	subs	r3, r2, r3
 8016e1a:	683a      	ldr	r2, [r7, #0]
 8016e1c:	429a      	cmp	r2, r3
 8016e1e:	d805      	bhi.n	8016e2c <SPIF_Receive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	4618      	mov	r0, r3
 8016e26:	f7f7 f995 	bl	800e154 <HAL_SPI_DMAStop>
        break;
 8016e2a:	e009      	b.n	8016e40 <SPIF_Receive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	4618      	mov	r0, r3
 8016e32:	f7f7 fb09 	bl	800e448 <HAL_SPI_GetState>
 8016e36:	4603      	mov	r3, r0
 8016e38:	2b01      	cmp	r3, #1
 8016e3a:	d1e6      	bne.n	8016e0a <SPIF_Receive+0x2e>
      {
        retVal = true;
 8016e3c:	2301      	movs	r3, #1
 8016e3e:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8016e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e42:	4618      	mov	r0, r3
 8016e44:	3718      	adds	r7, #24
 8016e46:	46bd      	mov	sp, r7
 8016e48:	bd80      	pop	{r7, pc}

08016e4a <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 8016e4a:	b580      	push	{r7, lr}
 8016e4c:	b084      	sub	sp, #16
 8016e4e:	af00      	add	r7, sp, #0
 8016e50:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8016e52:	2301      	movs	r3, #1
 8016e54:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 8016e56:	2306      	movs	r3, #6
 8016e58:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8016e5a:	2100      	movs	r1, #0
 8016e5c:	6878      	ldr	r0, [r7, #4]
 8016e5e:	f7ff ff32 	bl	8016cc6 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8016e62:	f107 010c 	add.w	r1, r7, #12
 8016e66:	2364      	movs	r3, #100	@ 0x64
 8016e68:	2201      	movs	r2, #1
 8016e6a:	6878      	ldr	r0, [r7, #4]
 8016e6c:	f7ff ff7f 	bl	8016d6e <SPIF_Transmit>
 8016e70:	4603      	mov	r3, r0
 8016e72:	f083 0301 	eor.w	r3, r3, #1
 8016e76:	b2db      	uxtb	r3, r3
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d001      	beq.n	8016e80 <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8016e80:	2101      	movs	r1, #1
 8016e82:	6878      	ldr	r0, [r7, #4]
 8016e84:	f7ff ff1f 	bl	8016cc6 <SPIF_CsPin>
  return retVal;
 8016e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	3710      	adds	r7, #16
 8016e8e:	46bd      	mov	sp, r7
 8016e90:	bd80      	pop	{r7, pc}

08016e92 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8016e92:	b580      	push	{r7, lr}
 8016e94:	b084      	sub	sp, #16
 8016e96:	af00      	add	r7, sp, #0
 8016e98:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8016e9a:	2301      	movs	r3, #1
 8016e9c:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 8016e9e:	2304      	movs	r3, #4
 8016ea0:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8016ea2:	2100      	movs	r1, #0
 8016ea4:	6878      	ldr	r0, [r7, #4]
 8016ea6:	f7ff ff0e 	bl	8016cc6 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8016eaa:	f107 010c 	add.w	r1, r7, #12
 8016eae:	2364      	movs	r3, #100	@ 0x64
 8016eb0:	2201      	movs	r2, #1
 8016eb2:	6878      	ldr	r0, [r7, #4]
 8016eb4:	f7ff ff5b 	bl	8016d6e <SPIF_Transmit>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	f083 0301 	eor.w	r3, r3, #1
 8016ebe:	b2db      	uxtb	r3, r3
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d001      	beq.n	8016ec8 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8016ec4:	2300      	movs	r3, #0
 8016ec6:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8016ec8:	2101      	movs	r1, #1
 8016eca:	6878      	ldr	r0, [r7, #4]
 8016ecc:	f7ff fefb 	bl	8016cc6 <SPIF_CsPin>
  return retVal;
 8016ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ed2:	4618      	mov	r0, r3
 8016ed4:	3710      	adds	r7, #16
 8016ed6:	46bd      	mov	sp, r7
 8016ed8:	bd80      	pop	{r7, pc}

08016eda <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8016eda:	b580      	push	{r7, lr}
 8016edc:	b086      	sub	sp, #24
 8016ede:	af02      	add	r7, sp, #8
 8016ee0:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 8016ee2:	2300      	movs	r3, #0
 8016ee4:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 8016ee6:	f24a 5305 	movw	r3, #42245	@ 0xa505
 8016eea:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 8016eec:	2100      	movs	r1, #0
 8016eee:	6878      	ldr	r0, [r7, #4]
 8016ef0:	f7ff fee9 	bl	8016cc6 <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 8016ef4:	f107 0208 	add.w	r2, r7, #8
 8016ef8:	f107 010c 	add.w	r1, r7, #12
 8016efc:	2364      	movs	r3, #100	@ 0x64
 8016efe:	9300      	str	r3, [sp, #0]
 8016f00:	2302      	movs	r3, #2
 8016f02:	6878      	ldr	r0, [r7, #4]
 8016f04:	f7ff fefc 	bl	8016d00 <SPIF_TransmitReceive>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d001      	beq.n	8016f12 <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 8016f0e:	7a7b      	ldrb	r3, [r7, #9]
 8016f10:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 8016f12:	2101      	movs	r1, #1
 8016f14:	6878      	ldr	r0, [r7, #4]
 8016f16:	f7ff fed6 	bl	8016cc6 <SPIF_CsPin>
  return retVal;
 8016f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	3710      	adds	r7, #16
 8016f20:	46bd      	mov	sp, r7
 8016f22:	bd80      	pop	{r7, pc}

08016f24 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 8016f24:	b580      	push	{r7, lr}
 8016f26:	b084      	sub	sp, #16
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	6078      	str	r0, [r7, #4]
 8016f2c:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 8016f2e:	2300      	movs	r3, #0
 8016f30:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 8016f32:	f7f0 f863 	bl	8006ffc <HAL_GetTick>
 8016f36:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 8016f38:	2001      	movs	r0, #1
 8016f3a:	f7ff fe99 	bl	8016c70 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 8016f3e:	f7f0 f85d 	bl	8006ffc <HAL_GetTick>
 8016f42:	4602      	mov	r2, r0
 8016f44:	68bb      	ldr	r3, [r7, #8]
 8016f46:	1ad3      	subs	r3, r2, r3
 8016f48:	683a      	ldr	r2, [r7, #0]
 8016f4a:	429a      	cmp	r2, r3
 8016f4c:	d90a      	bls.n	8016f64 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 8016f4e:	6878      	ldr	r0, [r7, #4]
 8016f50:	f7ff ffc3 	bl	8016eda <SPIF_ReadReg1>
 8016f54:	4603      	mov	r3, r0
 8016f56:	f003 0301 	and.w	r3, r3, #1
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d1ec      	bne.n	8016f38 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 8016f5e:	2301      	movs	r3, #1
 8016f60:	73fb      	strb	r3, [r7, #15]
      break;
 8016f62:	e000      	b.n	8016f66 <SPIF_WaitForWriting+0x42>
      break;
 8016f64:	bf00      	nop
    }
  }
  return retVal;
 8016f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f68:	4618      	mov	r0, r3
 8016f6a:	3710      	adds	r7, #16
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	bd80      	pop	{r7, pc}

08016f70 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b088      	sub	sp, #32
 8016f74:	af02      	add	r7, sp, #8
 8016f76:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8016f78:	f06f 0360 	mvn.w	r3, #96	@ 0x60
 8016f7c:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 8016f7e:	2300      	movs	r3, #0
 8016f80:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 8016f82:	2100      	movs	r1, #0
 8016f84:	6878      	ldr	r0, [r7, #4]
 8016f86:	f7ff fe9e 	bl	8016cc6 <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 8016f8a:	f107 020c 	add.w	r2, r7, #12
 8016f8e:	f107 0110 	add.w	r1, r7, #16
 8016f92:	2364      	movs	r3, #100	@ 0x64
 8016f94:	9300      	str	r3, [sp, #0]
 8016f96:	2304      	movs	r3, #4
 8016f98:	6878      	ldr	r0, [r7, #4]
 8016f9a:	f7ff feb1 	bl	8016d00 <SPIF_TransmitReceive>
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	f083 0301 	eor.w	r3, r3, #1
 8016fa4:	b2db      	uxtb	r3, r3
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d004      	beq.n	8016fb4 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 8016faa:	2101      	movs	r1, #1
 8016fac:	6878      	ldr	r0, [r7, #4]
 8016fae:	f7ff fe8a 	bl	8016cc6 <SPIF_CsPin>
      break;
 8016fb2:	e16f      	b.n	8017294 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8016fb4:	2101      	movs	r1, #1
 8016fb6:	6878      	ldr	r0, [r7, #4]
 8016fb8:	f7ff fe85 	bl	8016cc6 <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8016fbc:	7b7a      	ldrb	r2, [r7, #13]
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 8016fc2:	7bba      	ldrb	r2, [r7, #14]
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8016fc8:	7bfa      	ldrb	r2, [r7, #15]
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	7a1b      	ldrb	r3, [r3, #8]
 8016fd2:	2bef      	cmp	r3, #239	@ 0xef
 8016fd4:	f000 80f0 	beq.w	80171b8 <SPIF_FindChip+0x248>
 8016fd8:	2bef      	cmp	r3, #239	@ 0xef
 8016fda:	f300 80e9 	bgt.w	80171b0 <SPIF_FindChip+0x240>
 8016fde:	2bc8      	cmp	r3, #200	@ 0xc8
 8016fe0:	f300 80e6 	bgt.w	80171b0 <SPIF_FindChip+0x240>
 8016fe4:	2b85      	cmp	r3, #133	@ 0x85
 8016fe6:	da0c      	bge.n	8017002 <SPIF_FindChip+0x92>
 8016fe8:	2b62      	cmp	r3, #98	@ 0x62
 8016fea:	f000 80e7 	beq.w	80171bc <SPIF_FindChip+0x24c>
 8016fee:	2b62      	cmp	r3, #98	@ 0x62
 8016ff0:	f300 80de 	bgt.w	80171b0 <SPIF_FindChip+0x240>
 8016ff4:	2b20      	cmp	r3, #32
 8016ff6:	f300 80d9 	bgt.w	80171ac <SPIF_FindChip+0x23c>
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	f300 8090 	bgt.w	8017120 <SPIF_FindChip+0x1b0>
 8017000:	e0d6      	b.n	80171b0 <SPIF_FindChip+0x240>
 8017002:	3b85      	subs	r3, #133	@ 0x85
 8017004:	2b43      	cmp	r3, #67	@ 0x43
 8017006:	f200 80d3 	bhi.w	80171b0 <SPIF_FindChip+0x240>
 801700a:	a201      	add	r2, pc, #4	@ (adr r2, 8017010 <SPIF_FindChip+0xa0>)
 801700c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017010:	080171c1 	.word	0x080171c1
 8017014:	080171b1 	.word	0x080171b1
 8017018:	080171b1 	.word	0x080171b1
 801701c:	080171b1 	.word	0x080171b1
 8017020:	080171c1 	.word	0x080171c1
 8017024:	080171b1 	.word	0x080171b1
 8017028:	080171b1 	.word	0x080171b1
 801702c:	080171c1 	.word	0x080171c1
 8017030:	080171b1 	.word	0x080171b1
 8017034:	080171b1 	.word	0x080171b1
 8017038:	080171b1 	.word	0x080171b1
 801703c:	080171b1 	.word	0x080171b1
 8017040:	080171b1 	.word	0x080171b1
 8017044:	080171b1 	.word	0x080171b1
 8017048:	080171b1 	.word	0x080171b1
 801704c:	080171b1 	.word	0x080171b1
 8017050:	080171b1 	.word	0x080171b1
 8017054:	080171b1 	.word	0x080171b1
 8017058:	080171b1 	.word	0x080171b1
 801705c:	080171b1 	.word	0x080171b1
 8017060:	080171b1 	.word	0x080171b1
 8017064:	080171b1 	.word	0x080171b1
 8017068:	080171b1 	.word	0x080171b1
 801706c:	080171b1 	.word	0x080171b1
 8017070:	080171c1 	.word	0x080171c1
 8017074:	080171b1 	.word	0x080171b1
 8017078:	080171b1 	.word	0x080171b1
 801707c:	080171b1 	.word	0x080171b1
 8017080:	080171c1 	.word	0x080171c1
 8017084:	080171b1 	.word	0x080171b1
 8017088:	080171b1 	.word	0x080171b1
 801708c:	080171b1 	.word	0x080171b1
 8017090:	080171b1 	.word	0x080171b1
 8017094:	080171b1 	.word	0x080171b1
 8017098:	080171b1 	.word	0x080171b1
 801709c:	080171b1 	.word	0x080171b1
 80170a0:	080171b1 	.word	0x080171b1
 80170a4:	080171b1 	.word	0x080171b1
 80170a8:	080171b1 	.word	0x080171b1
 80170ac:	080171b1 	.word	0x080171b1
 80170b0:	080171c1 	.word	0x080171c1
 80170b4:	080171b1 	.word	0x080171b1
 80170b8:	080171b1 	.word	0x080171b1
 80170bc:	080171b1 	.word	0x080171b1
 80170c0:	080171b1 	.word	0x080171b1
 80170c4:	080171b1 	.word	0x080171b1
 80170c8:	080171b1 	.word	0x080171b1
 80170cc:	080171b1 	.word	0x080171b1
 80170d0:	080171b1 	.word	0x080171b1
 80170d4:	080171b1 	.word	0x080171b1
 80170d8:	080171b1 	.word	0x080171b1
 80170dc:	080171b1 	.word	0x080171b1
 80170e0:	080171b1 	.word	0x080171b1
 80170e4:	080171b1 	.word	0x080171b1
 80170e8:	080171b1 	.word	0x080171b1
 80170ec:	080171b1 	.word	0x080171b1
 80170f0:	080171b1 	.word	0x080171b1
 80170f4:	080171b1 	.word	0x080171b1
 80170f8:	080171c1 	.word	0x080171c1
 80170fc:	080171b1 	.word	0x080171b1
 8017100:	080171b1 	.word	0x080171b1
 8017104:	080171c1 	.word	0x080171c1
 8017108:	080171b1 	.word	0x080171b1
 801710c:	080171b1 	.word	0x080171b1
 8017110:	080171b1 	.word	0x080171b1
 8017114:	080171b1 	.word	0x080171b1
 8017118:	080171b1 	.word	0x080171b1
 801711c:	080171c1 	.word	0x080171c1
 8017120:	3b01      	subs	r3, #1
 8017122:	2b1f      	cmp	r3, #31
 8017124:	d844      	bhi.n	80171b0 <SPIF_FindChip+0x240>
 8017126:	a201      	add	r2, pc, #4	@ (adr r2, 801712c <SPIF_FindChip+0x1bc>)
 8017128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801712c:	080171c5 	.word	0x080171c5
 8017130:	080171b1 	.word	0x080171b1
 8017134:	080171b1 	.word	0x080171b1
 8017138:	080171c5 	.word	0x080171c5
 801713c:	080171b1 	.word	0x080171b1
 8017140:	080171b1 	.word	0x080171b1
 8017144:	080171b1 	.word	0x080171b1
 8017148:	080171b1 	.word	0x080171b1
 801714c:	080171b1 	.word	0x080171b1
 8017150:	080171b1 	.word	0x080171b1
 8017154:	080171b1 	.word	0x080171b1
 8017158:	080171b1 	.word	0x080171b1
 801715c:	080171b1 	.word	0x080171b1
 8017160:	080171b1 	.word	0x080171b1
 8017164:	080171b1 	.word	0x080171b1
 8017168:	080171b1 	.word	0x080171b1
 801716c:	080171b1 	.word	0x080171b1
 8017170:	080171b1 	.word	0x080171b1
 8017174:	080171b1 	.word	0x080171b1
 8017178:	080171b1 	.word	0x080171b1
 801717c:	080171b1 	.word	0x080171b1
 8017180:	080171b1 	.word	0x080171b1
 8017184:	080171b1 	.word	0x080171b1
 8017188:	080171b1 	.word	0x080171b1
 801718c:	080171b1 	.word	0x080171b1
 8017190:	080171b1 	.word	0x080171b1
 8017194:	080171b1 	.word	0x080171b1
 8017198:	080171c5 	.word	0x080171c5
 801719c:	080171b1 	.word	0x080171b1
 80171a0:	080171b1 	.word	0x080171b1
 80171a4:	080171b1 	.word	0x080171b1
 80171a8:	080171c5 	.word	0x080171c5
 80171ac:	2b37      	cmp	r3, #55	@ 0x37
 80171ae:	d00b      	beq.n	80171c8 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	2200      	movs	r2, #0
 80171b4:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 80171b6:	e008      	b.n	80171ca <SPIF_FindChip+0x25a>
      break;
 80171b8:	bf00      	nop
 80171ba:	e006      	b.n	80171ca <SPIF_FindChip+0x25a>
      break;
 80171bc:	bf00      	nop
 80171be:	e004      	b.n	80171ca <SPIF_FindChip+0x25a>
      break;
 80171c0:	bf00      	nop
 80171c2:	e002      	b.n	80171ca <SPIF_FindChip+0x25a>
      break;
 80171c4:	bf00      	nop
 80171c6:	e000      	b.n	80171ca <SPIF_FindChip+0x25a>
      break;
 80171c8:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	7a5b      	ldrb	r3, [r3, #9]
 80171ce:	3b11      	subs	r3, #17
 80171d0:	2b0f      	cmp	r3, #15
 80171d2:	d84e      	bhi.n	8017272 <SPIF_FindChip+0x302>
 80171d4:	a201      	add	r2, pc, #4	@ (adr r2, 80171dc <SPIF_FindChip+0x26c>)
 80171d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171da:	bf00      	nop
 80171dc:	0801721d 	.word	0x0801721d
 80171e0:	08017225 	.word	0x08017225
 80171e4:	0801722d 	.word	0x0801722d
 80171e8:	08017235 	.word	0x08017235
 80171ec:	0801723d 	.word	0x0801723d
 80171f0:	08017245 	.word	0x08017245
 80171f4:	0801724d 	.word	0x0801724d
 80171f8:	08017255 	.word	0x08017255
 80171fc:	0801725f 	.word	0x0801725f
 8017200:	08017273 	.word	0x08017273
 8017204:	08017273 	.word	0x08017273
 8017208:	08017273 	.word	0x08017273
 801720c:	08017273 	.word	0x08017273
 8017210:	08017273 	.word	0x08017273
 8017214:	08017273 	.word	0x08017273
 8017218:	08017269 	.word	0x08017269
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	2202      	movs	r2, #2
 8017220:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 8017222:	e02a      	b.n	801727a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	2204      	movs	r2, #4
 8017228:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 801722a:	e026      	b.n	801727a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	2208      	movs	r2, #8
 8017230:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 8017232:	e022      	b.n	801727a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	2210      	movs	r2, #16
 8017238:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 801723a:	e01e      	b.n	801727a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	2220      	movs	r2, #32
 8017240:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 8017242:	e01a      	b.n	801727a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	2240      	movs	r2, #64	@ 0x40
 8017248:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 801724a:	e016      	b.n	801727a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	2280      	movs	r2, #128	@ 0x80
 8017250:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 8017252:	e012      	b.n	801727a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801725a:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 801725c:	e00d      	b.n	801727a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017264:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 8017266:	e008      	b.n	801727a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801726e:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 8017270:	e003      	b.n	801727a <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	2200      	movs	r2, #0
 8017276:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 8017278:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	69db      	ldr	r3, [r3, #28]
 801727e:	011a      	lsls	r2, r3, #4
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	699b      	ldr	r3, [r3, #24]
 8017288:	031b      	lsls	r3, r3, #12
 801728a:	0a1a      	lsrs	r2, r3, #8
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 8017290:	2301      	movs	r3, #1
 8017292:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8017294:	7dfb      	ldrb	r3, [r7, #23]
}
 8017296:	4618      	mov	r0, r3
 8017298:	3718      	adds	r7, #24
 801729a:	46bd      	mov	sp, r7
 801729c:	bd80      	pop	{r7, pc}
 801729e:	bf00      	nop

080172a0 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b08a      	sub	sp, #40	@ 0x28
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	60f8      	str	r0, [r7, #12]
 80172a8:	60b9      	str	r1, [r7, #8]
 80172aa:	607a      	str	r2, [r7, #4]
 80172ac:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80172ae:	2300      	movs	r3, #0
 80172b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 80172b4:	2300      	movs	r3, #0
 80172b6:	623b      	str	r3, [r7, #32]
 80172b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172ba:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80172be:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	695b      	ldr	r3, [r3, #20]
 80172c4:	68ba      	ldr	r2, [r7, #8]
 80172c6:	429a      	cmp	r2, r3
 80172c8:	f080 8084 	bcs.w	80173d4 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 80172cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172ce:	2bff      	cmp	r3, #255	@ 0xff
 80172d0:	f200 8082 	bhi.w	80173d8 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 80172d4:	683a      	ldr	r2, [r7, #0]
 80172d6:	69fb      	ldr	r3, [r7, #28]
 80172d8:	429a      	cmp	r2, r3
 80172da:	d901      	bls.n	80172e0 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 80172dc:	69fb      	ldr	r3, [r7, #28]
 80172de:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 80172e0:	68bb      	ldr	r3, [r7, #8]
 80172e2:	021b      	lsls	r3, r3, #8
 80172e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80172e6:	4413      	add	r3, r2
 80172e8:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 80172ea:	68f8      	ldr	r0, [r7, #12]
 80172ec:	f7ff fdad 	bl	8016e4a <SPIF_WriteEnable>
 80172f0:	4603      	mov	r3, r0
 80172f2:	f083 0301 	eor.w	r3, r3, #1
 80172f6:	b2db      	uxtb	r3, r3
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d16f      	bne.n	80173dc <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80172fc:	2100      	movs	r1, #0
 80172fe:	68f8      	ldr	r0, [r7, #12]
 8017300:	f7ff fce1 	bl	8016cc6 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	69db      	ldr	r3, [r3, #28]
 8017308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801730c:	d322      	bcc.n	8017354 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 801730e:	2312      	movs	r3, #18
 8017310:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 8017312:	6a3b      	ldr	r3, [r7, #32]
 8017314:	0e1b      	lsrs	r3, r3, #24
 8017316:	b2db      	uxtb	r3, r3
 8017318:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 801731a:	6a3b      	ldr	r3, [r7, #32]
 801731c:	0c1b      	lsrs	r3, r3, #16
 801731e:	b2db      	uxtb	r3, r3
 8017320:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 8017322:	6a3b      	ldr	r3, [r7, #32]
 8017324:	0a1b      	lsrs	r3, r3, #8
 8017326:	b2db      	uxtb	r3, r3
 8017328:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 801732a:	6a3b      	ldr	r3, [r7, #32]
 801732c:	b2db      	uxtb	r3, r3
 801732e:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017330:	f107 0114 	add.w	r1, r7, #20
 8017334:	2364      	movs	r3, #100	@ 0x64
 8017336:	2205      	movs	r2, #5
 8017338:	68f8      	ldr	r0, [r7, #12]
 801733a:	f7ff fd18 	bl	8016d6e <SPIF_Transmit>
 801733e:	4603      	mov	r3, r0
 8017340:	f083 0301 	eor.w	r3, r3, #1
 8017344:	b2db      	uxtb	r3, r3
 8017346:	2b00      	cmp	r3, #0
 8017348:	d023      	beq.n	8017392 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 801734a:	2101      	movs	r1, #1
 801734c:	68f8      	ldr	r0, [r7, #12]
 801734e:	f7ff fcba 	bl	8016cc6 <SPIF_CsPin>
        break;
 8017352:	e044      	b.n	80173de <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8017354:	2302      	movs	r3, #2
 8017356:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 8017358:	6a3b      	ldr	r3, [r7, #32]
 801735a:	0c1b      	lsrs	r3, r3, #16
 801735c:	b2db      	uxtb	r3, r3
 801735e:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 8017360:	6a3b      	ldr	r3, [r7, #32]
 8017362:	0a1b      	lsrs	r3, r3, #8
 8017364:	b2db      	uxtb	r3, r3
 8017366:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8017368:	6a3b      	ldr	r3, [r7, #32]
 801736a:	b2db      	uxtb	r3, r3
 801736c:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 801736e:	f107 0114 	add.w	r1, r7, #20
 8017372:	2364      	movs	r3, #100	@ 0x64
 8017374:	2204      	movs	r2, #4
 8017376:	68f8      	ldr	r0, [r7, #12]
 8017378:	f7ff fcf9 	bl	8016d6e <SPIF_Transmit>
 801737c:	4603      	mov	r3, r0
 801737e:	f083 0301 	eor.w	r3, r3, #1
 8017382:	b2db      	uxtb	r3, r3
 8017384:	2b00      	cmp	r3, #0
 8017386:	d004      	beq.n	8017392 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8017388:	2101      	movs	r1, #1
 801738a:	68f8      	ldr	r0, [r7, #12]
 801738c:	f7ff fc9b 	bl	8016cc6 <SPIF_CsPin>
        break;
 8017390:	e025      	b.n	80173de <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 8017392:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017396:	683a      	ldr	r2, [r7, #0]
 8017398:	6879      	ldr	r1, [r7, #4]
 801739a:	68f8      	ldr	r0, [r7, #12]
 801739c:	f7ff fce7 	bl	8016d6e <SPIF_Transmit>
 80173a0:	4603      	mov	r3, r0
 80173a2:	f083 0301 	eor.w	r3, r3, #1
 80173a6:	b2db      	uxtb	r3, r3
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d004      	beq.n	80173b6 <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 80173ac:	2101      	movs	r1, #1
 80173ae:	68f8      	ldr	r0, [r7, #12]
 80173b0:	f7ff fc89 	bl	8016cc6 <SPIF_CsPin>
      break;
 80173b4:	e013      	b.n	80173de <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 80173b6:	2101      	movs	r1, #1
 80173b8:	68f8      	ldr	r0, [r7, #12]
 80173ba:	f7ff fc84 	bl	8016cc6 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 80173be:	2164      	movs	r1, #100	@ 0x64
 80173c0:	68f8      	ldr	r0, [r7, #12]
 80173c2:	f7ff fdaf 	bl	8016f24 <SPIF_WaitForWriting>
 80173c6:	4603      	mov	r3, r0
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d008      	beq.n	80173de <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 80173cc:	2301      	movs	r3, #1
 80173ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80173d2:	e004      	b.n	80173de <SPIF_WriteFn+0x13e>
      break;
 80173d4:	bf00      	nop
 80173d6:	e002      	b.n	80173de <SPIF_WriteFn+0x13e>
      break;
 80173d8:	bf00      	nop
 80173da:	e000      	b.n	80173de <SPIF_WriteFn+0x13e>
      break;
 80173dc:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 80173de:	68f8      	ldr	r0, [r7, #12]
 80173e0:	f7ff fd57 	bl	8016e92 <SPIF_WriteDisable>
  return retVal;
 80173e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80173e8:	4618      	mov	r0, r3
 80173ea:	3728      	adds	r7, #40	@ 0x28
 80173ec:	46bd      	mov	sp, r7
 80173ee:	bd80      	pop	{r7, pc}

080173f0 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b086      	sub	sp, #24
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	60f8      	str	r0, [r7, #12]
 80173f8:	60b9      	str	r1, [r7, #8]
 80173fa:	607a      	str	r2, [r7, #4]
 80173fc:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80173fe:	2300      	movs	r3, #0
 8017400:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 8017402:	2100      	movs	r1, #0
 8017404:	68f8      	ldr	r0, [r7, #12]
 8017406:	f7ff fc5e 	bl	8016cc6 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	69db      	ldr	r3, [r3, #28]
 801740e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017412:	d322      	bcc.n	801745a <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 8017414:	2313      	movs	r3, #19
 8017416:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 8017418:	68bb      	ldr	r3, [r7, #8]
 801741a:	0e1b      	lsrs	r3, r3, #24
 801741c:	b2db      	uxtb	r3, r3
 801741e:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 8017420:	68bb      	ldr	r3, [r7, #8]
 8017422:	0c1b      	lsrs	r3, r3, #16
 8017424:	b2db      	uxtb	r3, r3
 8017426:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 8017428:	68bb      	ldr	r3, [r7, #8]
 801742a:	0a1b      	lsrs	r3, r3, #8
 801742c:	b2db      	uxtb	r3, r3
 801742e:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 8017430:	68bb      	ldr	r3, [r7, #8]
 8017432:	b2db      	uxtb	r3, r3
 8017434:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017436:	f107 0110 	add.w	r1, r7, #16
 801743a:	2364      	movs	r3, #100	@ 0x64
 801743c:	2205      	movs	r2, #5
 801743e:	68f8      	ldr	r0, [r7, #12]
 8017440:	f7ff fc95 	bl	8016d6e <SPIF_Transmit>
 8017444:	4603      	mov	r3, r0
 8017446:	f083 0301 	eor.w	r3, r3, #1
 801744a:	b2db      	uxtb	r3, r3
 801744c:	2b00      	cmp	r3, #0
 801744e:	d023      	beq.n	8017498 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8017450:	2101      	movs	r1, #1
 8017452:	68f8      	ldr	r0, [r7, #12]
 8017454:	f7ff fc37 	bl	8016cc6 <SPIF_CsPin>
        break;
 8017458:	e036      	b.n	80174c8 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 801745a:	2303      	movs	r3, #3
 801745c:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 801745e:	68bb      	ldr	r3, [r7, #8]
 8017460:	0c1b      	lsrs	r3, r3, #16
 8017462:	b2db      	uxtb	r3, r3
 8017464:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8017466:	68bb      	ldr	r3, [r7, #8]
 8017468:	0a1b      	lsrs	r3, r3, #8
 801746a:	b2db      	uxtb	r3, r3
 801746c:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 801746e:	68bb      	ldr	r3, [r7, #8]
 8017470:	b2db      	uxtb	r3, r3
 8017472:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8017474:	f107 0110 	add.w	r1, r7, #16
 8017478:	2364      	movs	r3, #100	@ 0x64
 801747a:	2204      	movs	r2, #4
 801747c:	68f8      	ldr	r0, [r7, #12]
 801747e:	f7ff fc76 	bl	8016d6e <SPIF_Transmit>
 8017482:	4603      	mov	r3, r0
 8017484:	f083 0301 	eor.w	r3, r3, #1
 8017488:	b2db      	uxtb	r3, r3
 801748a:	2b00      	cmp	r3, #0
 801748c:	d004      	beq.n	8017498 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 801748e:	2101      	movs	r1, #1
 8017490:	68f8      	ldr	r0, [r7, #12]
 8017492:	f7ff fc18 	bl	8016cc6 <SPIF_CsPin>
        break;
 8017496:	e017      	b.n	80174c8 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8017498:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801749c:	683a      	ldr	r2, [r7, #0]
 801749e:	6879      	ldr	r1, [r7, #4]
 80174a0:	68f8      	ldr	r0, [r7, #12]
 80174a2:	f7ff fc9b 	bl	8016ddc <SPIF_Receive>
 80174a6:	4603      	mov	r3, r0
 80174a8:	f083 0301 	eor.w	r3, r3, #1
 80174ac:	b2db      	uxtb	r3, r3
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d004      	beq.n	80174bc <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 80174b2:	2101      	movs	r1, #1
 80174b4:	68f8      	ldr	r0, [r7, #12]
 80174b6:	f7ff fc06 	bl	8016cc6 <SPIF_CsPin>
      break;
 80174ba:	e005      	b.n	80174c8 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 80174bc:	2101      	movs	r1, #1
 80174be:	68f8      	ldr	r0, [r7, #12]
 80174c0:	f7ff fc01 	bl	8016cc6 <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 80174c4:	2301      	movs	r3, #1
 80174c6:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 80174c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80174ca:	4618      	mov	r0, r3
 80174cc:	3718      	adds	r7, #24
 80174ce:	46bd      	mov	sp, r7
 80174d0:	bd80      	pop	{r7, pc}

080174d2 <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 80174d2:	b580      	push	{r7, lr}
 80174d4:	b086      	sub	sp, #24
 80174d6:	af00      	add	r7, sp, #0
 80174d8:	60f8      	str	r0, [r7, #12]
 80174da:	60b9      	str	r1, [r7, #8]
 80174dc:	607a      	str	r2, [r7, #4]
 80174de:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 80174e0:	2300      	movs	r3, #0
 80174e2:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d03a      	beq.n	8017560 <SPIF_Init+0x8e>
 80174ea:	68bb      	ldr	r3, [r7, #8]
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d037      	beq.n	8017560 <SPIF_Init+0x8e>
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d034      	beq.n	8017560 <SPIF_Init+0x8e>
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	7a9b      	ldrb	r3, [r3, #10]
 80174fa:	2b01      	cmp	r3, #1
 80174fc:	d030      	beq.n	8017560 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 80174fe:	2220      	movs	r2, #32
 8017500:	2100      	movs	r1, #0
 8017502:	68f8      	ldr	r0, [r7, #12]
 8017504:	f003 ff01 	bl	801b30a <memset>
    Handle->HSpi = HSpi;
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	68ba      	ldr	r2, [r7, #8]
 801750c:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	687a      	ldr	r2, [r7, #4]
 8017512:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 8017514:	887a      	ldrh	r2, [r7, #2]
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 801751a:	2101      	movs	r1, #1
 801751c:	68f8      	ldr	r0, [r7, #12]
 801751e:	f7ff fbd2 	bl	8016cc6 <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 8017522:	e002      	b.n	801752a <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 8017524:	2001      	movs	r0, #1
 8017526:	f7ff fba3 	bl	8016c70 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 801752a:	f7ef fd67 	bl	8006ffc <HAL_GetTick>
 801752e:	4603      	mov	r3, r0
 8017530:	2b13      	cmp	r3, #19
 8017532:	d9f7      	bls.n	8017524 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 8017534:	68f8      	ldr	r0, [r7, #12]
 8017536:	f7ff fcac 	bl	8016e92 <SPIF_WriteDisable>
 801753a:	4603      	mov	r3, r0
 801753c:	f083 0301 	eor.w	r3, r3, #1
 8017540:	b2db      	uxtb	r3, r3
 8017542:	2b00      	cmp	r3, #0
 8017544:	d10b      	bne.n	801755e <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 8017546:	68f8      	ldr	r0, [r7, #12]
 8017548:	f7ff fd12 	bl	8016f70 <SPIF_FindChip>
 801754c:	4603      	mov	r3, r0
 801754e:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8017550:	7dfb      	ldrb	r3, [r7, #23]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d004      	beq.n	8017560 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	2201      	movs	r2, #1
 801755a:	729a      	strb	r2, [r3, #10]
 801755c:	e000      	b.n	8017560 <SPIF_Init+0x8e>
      break;
 801755e:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8017560:	7dfb      	ldrb	r3, [r7, #23]
}
 8017562:	4618      	mov	r0, r3
 8017564:	3718      	adds	r7, #24
 8017566:	46bd      	mov	sp, r7
 8017568:	bd80      	pop	{r7, pc}

0801756a <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 801756a:	b580      	push	{r7, lr}
 801756c:	b086      	sub	sp, #24
 801756e:	af00      	add	r7, sp, #0
 8017570:	6078      	str	r0, [r7, #4]
 8017572:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8017574:	6878      	ldr	r0, [r7, #4]
 8017576:	f7ff fb86 	bl	8016c86 <SPIF_Lock>
  bool retVal = false;
 801757a:	2300      	movs	r3, #0
 801757c:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 801757e:	683b      	ldr	r3, [r7, #0]
 8017580:	031b      	lsls	r3, r3, #12
 8017582:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	699b      	ldr	r3, [r3, #24]
 8017588:	683a      	ldr	r2, [r7, #0]
 801758a:	429a      	cmp	r2, r3
 801758c:	d262      	bcs.n	8017654 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 801758e:	6878      	ldr	r0, [r7, #4]
 8017590:	f7ff fc5b 	bl	8016e4a <SPIF_WriteEnable>
 8017594:	4603      	mov	r3, r0
 8017596:	f083 0301 	eor.w	r3, r3, #1
 801759a:	b2db      	uxtb	r3, r3
 801759c:	2b00      	cmp	r3, #0
 801759e:	d15b      	bne.n	8017658 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80175a0:	2100      	movs	r1, #0
 80175a2:	6878      	ldr	r0, [r7, #4]
 80175a4:	f7ff fb8f 	bl	8016cc6 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	69db      	ldr	r3, [r3, #28]
 80175ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80175b0:	d322      	bcc.n	80175f8 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 80175b2:	2321      	movs	r3, #33	@ 0x21
 80175b4:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 80175b6:	693b      	ldr	r3, [r7, #16]
 80175b8:	0e1b      	lsrs	r3, r3, #24
 80175ba:	b2db      	uxtb	r3, r3
 80175bc:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 80175be:	693b      	ldr	r3, [r7, #16]
 80175c0:	0c1b      	lsrs	r3, r3, #16
 80175c2:	b2db      	uxtb	r3, r3
 80175c4:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 80175c6:	693b      	ldr	r3, [r7, #16]
 80175c8:	0a1b      	lsrs	r3, r3, #8
 80175ca:	b2db      	uxtb	r3, r3
 80175cc:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 80175ce:	693b      	ldr	r3, [r7, #16]
 80175d0:	b2db      	uxtb	r3, r3
 80175d2:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80175d4:	f107 0108 	add.w	r1, r7, #8
 80175d8:	2364      	movs	r3, #100	@ 0x64
 80175da:	2205      	movs	r2, #5
 80175dc:	6878      	ldr	r0, [r7, #4]
 80175de:	f7ff fbc6 	bl	8016d6e <SPIF_Transmit>
 80175e2:	4603      	mov	r3, r0
 80175e4:	f083 0301 	eor.w	r3, r3, #1
 80175e8:	b2db      	uxtb	r3, r3
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d023      	beq.n	8017636 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80175ee:	2101      	movs	r1, #1
 80175f0:	6878      	ldr	r0, [r7, #4]
 80175f2:	f7ff fb68 	bl	8016cc6 <SPIF_CsPin>
        break;
 80175f6:	e030      	b.n	801765a <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 80175f8:	2320      	movs	r3, #32
 80175fa:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 80175fc:	693b      	ldr	r3, [r7, #16]
 80175fe:	0c1b      	lsrs	r3, r3, #16
 8017600:	b2db      	uxtb	r3, r3
 8017602:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8017604:	693b      	ldr	r3, [r7, #16]
 8017606:	0a1b      	lsrs	r3, r3, #8
 8017608:	b2db      	uxtb	r3, r3
 801760a:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 801760c:	693b      	ldr	r3, [r7, #16]
 801760e:	b2db      	uxtb	r3, r3
 8017610:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8017612:	f107 0108 	add.w	r1, r7, #8
 8017616:	2364      	movs	r3, #100	@ 0x64
 8017618:	2204      	movs	r2, #4
 801761a:	6878      	ldr	r0, [r7, #4]
 801761c:	f7ff fba7 	bl	8016d6e <SPIF_Transmit>
 8017620:	4603      	mov	r3, r0
 8017622:	f083 0301 	eor.w	r3, r3, #1
 8017626:	b2db      	uxtb	r3, r3
 8017628:	2b00      	cmp	r3, #0
 801762a:	d004      	beq.n	8017636 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 801762c:	2101      	movs	r1, #1
 801762e:	6878      	ldr	r0, [r7, #4]
 8017630:	f7ff fb49 	bl	8016cc6 <SPIF_CsPin>
        break;
 8017634:	e011      	b.n	801765a <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8017636:	2101      	movs	r1, #1
 8017638:	6878      	ldr	r0, [r7, #4]
 801763a:	f7ff fb44 	bl	8016cc6 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 801763e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017642:	6878      	ldr	r0, [r7, #4]
 8017644:	f7ff fc6e 	bl	8016f24 <SPIF_WaitForWriting>
 8017648:	4603      	mov	r3, r0
 801764a:	2b00      	cmp	r3, #0
 801764c:	d005      	beq.n	801765a <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 801764e:	2301      	movs	r3, #1
 8017650:	75fb      	strb	r3, [r7, #23]
 8017652:	e002      	b.n	801765a <SPIF_EraseSector+0xf0>
      break;
 8017654:	bf00      	nop
 8017656:	e000      	b.n	801765a <SPIF_EraseSector+0xf0>
      break;
 8017658:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 801765a:	6878      	ldr	r0, [r7, #4]
 801765c:	f7ff fc19 	bl	8016e92 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8017660:	6878      	ldr	r0, [r7, #4]
 8017662:	f7ff fb23 	bl	8016cac <SPIF_UnLock>
  return retVal;
 8017666:	7dfb      	ldrb	r3, [r7, #23]
}
 8017668:	4618      	mov	r0, r3
 801766a:	3718      	adds	r7, #24
 801766c:	46bd      	mov	sp, r7
 801766e:	bd80      	pop	{r7, pc}

08017670 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8017670:	b580      	push	{r7, lr}
 8017672:	b088      	sub	sp, #32
 8017674:	af02      	add	r7, sp, #8
 8017676:	60f8      	str	r0, [r7, #12]
 8017678:	60b9      	str	r1, [r7, #8]
 801767a:	607a      	str	r2, [r7, #4]
 801767c:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 801767e:	68f8      	ldr	r0, [r7, #12]
 8017680:	f7ff fb01 	bl	8016c86 <SPIF_Lock>
  bool retVal = false;
 8017684:	2300      	movs	r3, #0
 8017686:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 8017688:	6a3b      	ldr	r3, [r7, #32]
 801768a:	9300      	str	r3, [sp, #0]
 801768c:	683b      	ldr	r3, [r7, #0]
 801768e:	687a      	ldr	r2, [r7, #4]
 8017690:	68b9      	ldr	r1, [r7, #8]
 8017692:	68f8      	ldr	r0, [r7, #12]
 8017694:	f7ff fe04 	bl	80172a0 <SPIF_WriteFn>
 8017698:	4603      	mov	r3, r0
 801769a:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 801769c:	68f8      	ldr	r0, [r7, #12]
 801769e:	f7ff fb05 	bl	8016cac <SPIF_UnLock>
  return retVal;
 80176a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80176a4:	4618      	mov	r0, r3
 80176a6:	3718      	adds	r7, #24
 80176a8:	46bd      	mov	sp, r7
 80176aa:	bd80      	pop	{r7, pc}

080176ac <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b088      	sub	sp, #32
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	60f8      	str	r0, [r7, #12]
 80176b4:	60b9      	str	r1, [r7, #8]
 80176b6:	607a      	str	r2, [r7, #4]
 80176b8:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 80176ba:	68f8      	ldr	r0, [r7, #12]
 80176bc:	f7ff fae3 	bl	8016c86 <SPIF_Lock>
  bool retVal = false;
 80176c0:	2300      	movs	r3, #0
 80176c2:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 80176c4:	68bb      	ldr	r3, [r7, #8]
 80176c6:	021b      	lsls	r3, r3, #8
 80176c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80176ca:	4413      	add	r3, r2
 80176cc:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 80176ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176d0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80176d4:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 80176d6:	683a      	ldr	r2, [r7, #0]
 80176d8:	697b      	ldr	r3, [r7, #20]
 80176da:	429a      	cmp	r2, r3
 80176dc:	d901      	bls.n	80176e2 <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 80176de:	697b      	ldr	r3, [r7, #20]
 80176e0:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 80176e2:	683b      	ldr	r3, [r7, #0]
 80176e4:	687a      	ldr	r2, [r7, #4]
 80176e6:	69b9      	ldr	r1, [r7, #24]
 80176e8:	68f8      	ldr	r0, [r7, #12]
 80176ea:	f7ff fe81 	bl	80173f0 <SPIF_ReadFn>
 80176ee:	4603      	mov	r3, r0
 80176f0:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 80176f2:	68f8      	ldr	r0, [r7, #12]
 80176f4:	f7ff fada 	bl	8016cac <SPIF_UnLock>
  return retVal;
 80176f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80176fa:	4618      	mov	r0, r3
 80176fc:	3720      	adds	r7, #32
 80176fe:	46bd      	mov	sp, r7
 8017700:	bd80      	pop	{r7, pc}
	...

08017704 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8017704:	b480      	push	{r7}
 8017706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8017708:	4b03      	ldr	r3, [pc, #12]	@ (8017718 <LL_FLASH_GetUDN+0x14>)
 801770a:	681b      	ldr	r3, [r3, #0]
}
 801770c:	4618      	mov	r0, r3
 801770e:	46bd      	mov	sp, r7
 8017710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017714:	4770      	bx	lr
 8017716:	bf00      	nop
 8017718:	1fff7580 	.word	0x1fff7580

0801771c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 801771c:	b480      	push	{r7}
 801771e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8017720:	4b03      	ldr	r3, [pc, #12]	@ (8017730 <LL_FLASH_GetDeviceID+0x14>)
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	b2db      	uxtb	r3, r3
}
 8017726:	4618      	mov	r0, r3
 8017728:	46bd      	mov	sp, r7
 801772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801772e:	4770      	bx	lr
 8017730:	1fff7584 	.word	0x1fff7584

08017734 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8017734:	b480      	push	{r7}
 8017736:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8017738:	4b03      	ldr	r3, [pc, #12]	@ (8017748 <LL_FLASH_GetSTCompanyID+0x14>)
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	0a1b      	lsrs	r3, r3, #8
}
 801773e:	4618      	mov	r0, r3
 8017740:	46bd      	mov	sp, r7
 8017742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017746:	4770      	bx	lr
 8017748:	1fff7584 	.word	0x1fff7584

0801774c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 801774c:	b5b0      	push	{r4, r5, r7, lr}
 801774e:	b090      	sub	sp, #64	@ 0x40
 8017750:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017752:	2392      	movs	r3, #146	@ 0x92
 8017754:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8017758:	4b25      	ldr	r3, [pc, #148]	@ (80177f0 <APP_BLE_Init+0xa4>)
 801775a:	1d3c      	adds	r4, r7, #4
 801775c:	461d      	mov	r5, r3
 801775e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801776a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801776e:	c403      	stmia	r4!, {r0, r1}
 8017770:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8017772:	f000 f921 	bl	80179b8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8017776:	2101      	movs	r1, #1
 8017778:	2002      	movs	r0, #2
 801777a:	f001 fc03 	bl	8018f84 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 801777e:	4a1d      	ldr	r2, [pc, #116]	@ (80177f4 <APP_BLE_Init+0xa8>)
 8017780:	2100      	movs	r1, #0
 8017782:	2002      	movs	r0, #2
 8017784:	f001 fd2a 	bl	80191dc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8017788:	1d3b      	adds	r3, r7, #4
 801778a:	4618      	mov	r0, r3
 801778c:	f7fe fb7c 	bl	8015e88 <SHCI_C2_BLE_Init>
 8017790:	4603      	mov	r3, r0
 8017792:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8017796:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 801779a:	2b00      	cmp	r3, #0
 801779c:	d001      	beq.n	80177a2 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 801779e:	f7eb faa3 	bl	8002ce8 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80177a2:	f000 f91f 	bl	80179e4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80177a6:	f7fe fac9 	bl	8015d3c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80177aa:	4b13      	ldr	r3, [pc, #76]	@ (80177f8 <APP_BLE_Init+0xac>)
 80177ac:	2200      	movs	r2, #0
 80177ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80177b2:	4b11      	ldr	r3, [pc, #68]	@ (80177f8 <APP_BLE_Init+0xac>)
 80177b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80177b8:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80177ba:	4a10      	ldr	r2, [pc, #64]	@ (80177fc <APP_BLE_Init+0xb0>)
 80177bc:	2100      	movs	r1, #0
 80177be:	2001      	movs	r0, #1
 80177c0:	f001 fd0c 	bl	80191dc <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80177c4:	2006      	movs	r0, #6
 80177c6:	f7fe f92d 	bl	8015a24 <aci_hal_set_radio_activity_mask>
 80177ca:	4603      	mov	r3, r0
 80177cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80177d0:	f000 fad3 	bl	8017d7a <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80177d4:	4b08      	ldr	r3, [pc, #32]	@ (80177f8 <APP_BLE_Init+0xac>)
 80177d6:	2200      	movs	r2, #0
 80177d8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80177da:	4b07      	ldr	r3, [pc, #28]	@ (80177f8 <APP_BLE_Init+0xac>)
 80177dc:	2200      	movs	r2, #0
 80177de:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80177e0:	2001      	movs	r0, #1
 80177e2:	f000 f9b3 	bl	8017b4c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80177e6:	bf00      	nop
}
 80177e8:	3740      	adds	r7, #64	@ 0x40
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bdb0      	pop	{r4, r5, r7, pc}
 80177ee:	bf00      	nop
 80177f0:	0801faf0 	.word	0x0801faf0
 80177f4:	080160a5 	.word	0x080160a5
 80177f8:	20001458 	.word	0x20001458
 80177fc:	08017c35 	.word	0x08017c35

08017800 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b08c      	sub	sp, #48	@ 0x30
 8017804:	af00      	add	r7, sp, #0
 8017806:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8017808:	2392      	movs	r3, #146	@ 0x92
 801780a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	3301      	adds	r3, #1
 8017812:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8017814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017816:	781b      	ldrb	r3, [r3, #0]
 8017818:	2bff      	cmp	r3, #255	@ 0xff
 801781a:	d05c      	beq.n	80178d6 <SVCCTL_App_Notification+0xd6>
 801781c:	2bff      	cmp	r3, #255	@ 0xff
 801781e:	f300 80bd 	bgt.w	801799c <SVCCTL_App_Notification+0x19c>
 8017822:	2b3e      	cmp	r3, #62	@ 0x3e
 8017824:	d02b      	beq.n	801787e <SVCCTL_App_Notification+0x7e>
 8017826:	2b3e      	cmp	r3, #62	@ 0x3e
 8017828:	f300 80b8 	bgt.w	801799c <SVCCTL_App_Notification+0x19c>
 801782c:	2b05      	cmp	r3, #5
 801782e:	d002      	beq.n	8017836 <SVCCTL_App_Notification+0x36>
 8017830:	2b10      	cmp	r3, #16
 8017832:	d020      	beq.n	8017876 <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8017834:	e0b2      	b.n	801799c <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8017836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017838:	3302      	adds	r3, #2
 801783a:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017842:	b29a      	uxth	r2, r3
 8017844:	4b59      	ldr	r3, [pc, #356]	@ (80179ac <SVCCTL_App_Notification+0x1ac>)
 8017846:	8adb      	ldrh	r3, [r3, #22]
 8017848:	429a      	cmp	r2, r3
 801784a:	d106      	bne.n	801785a <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 801784c:	4b57      	ldr	r3, [pc, #348]	@ (80179ac <SVCCTL_App_Notification+0x1ac>)
 801784e:	2200      	movs	r2, #0
 8017850:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017852:	4b56      	ldr	r3, [pc, #344]	@ (80179ac <SVCCTL_App_Notification+0x1ac>)
 8017854:	2200      	movs	r2, #0
 8017856:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 801785a:	2001      	movs	r0, #1
 801785c:	f000 f976 	bl	8017b4c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8017860:	4b53      	ldr	r3, [pc, #332]	@ (80179b0 <SVCCTL_App_Notification+0x1b0>)
 8017862:	2201      	movs	r2, #1
 8017864:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8017866:	4b51      	ldr	r3, [pc, #324]	@ (80179ac <SVCCTL_App_Notification+0x1ac>)
 8017868:	8ada      	ldrh	r2, [r3, #22]
 801786a:	4b51      	ldr	r3, [pc, #324]	@ (80179b0 <SVCCTL_App_Notification+0x1b0>)
 801786c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 801786e:	4850      	ldr	r0, [pc, #320]	@ (80179b0 <SVCCTL_App_Notification+0x1b0>)
 8017870:	f000 fa6f 	bl	8017d52 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8017874:	e095      	b.n	80179a2 <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8017876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017878:	3302      	adds	r3, #2
 801787a:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 801787c:	e091      	b.n	80179a2 <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 801787e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017880:	3302      	adds	r3, #2
 8017882:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8017884:	69bb      	ldr	r3, [r7, #24]
 8017886:	781b      	ldrb	r3, [r3, #0]
 8017888:	2b01      	cmp	r3, #1
 801788a:	d001      	beq.n	8017890 <SVCCTL_App_Notification+0x90>
 801788c:	2b03      	cmp	r3, #3
          break;
 801788e:	e021      	b.n	80178d4 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8017890:	69bb      	ldr	r3, [r7, #24]
 8017892:	3301      	adds	r3, #1
 8017894:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8017896:	4b45      	ldr	r3, [pc, #276]	@ (80179ac <SVCCTL_App_Notification+0x1ac>)
 8017898:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801789c:	2b04      	cmp	r3, #4
 801789e:	d104      	bne.n	80178aa <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80178a0:	4b42      	ldr	r3, [pc, #264]	@ (80179ac <SVCCTL_App_Notification+0x1ac>)
 80178a2:	2206      	movs	r2, #6
 80178a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80178a8:	e003      	b.n	80178b2 <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80178aa:	4b40      	ldr	r3, [pc, #256]	@ (80179ac <SVCCTL_App_Notification+0x1ac>)
 80178ac:	2205      	movs	r2, #5
 80178ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80178b2:	697b      	ldr	r3, [r7, #20]
 80178b4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80178b8:	b29a      	uxth	r2, r3
 80178ba:	4b3c      	ldr	r3, [pc, #240]	@ (80179ac <SVCCTL_App_Notification+0x1ac>)
 80178bc:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80178be:	4b3c      	ldr	r3, [pc, #240]	@ (80179b0 <SVCCTL_App_Notification+0x1b0>)
 80178c0:	2200      	movs	r2, #0
 80178c2:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80178c4:	4b39      	ldr	r3, [pc, #228]	@ (80179ac <SVCCTL_App_Notification+0x1ac>)
 80178c6:	8ada      	ldrh	r2, [r3, #22]
 80178c8:	4b39      	ldr	r3, [pc, #228]	@ (80179b0 <SVCCTL_App_Notification+0x1b0>)
 80178ca:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80178cc:	4838      	ldr	r0, [pc, #224]	@ (80179b0 <SVCCTL_App_Notification+0x1b0>)
 80178ce:	f000 fa40 	bl	8017d52 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80178d2:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80178d4:	e065      	b.n	80179a2 <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80178d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178d8:	3302      	adds	r3, #2
 80178da:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 80178dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178de:	881b      	ldrh	r3, [r3, #0]
 80178e0:	b29b      	uxth	r3, r3
 80178e2:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80178e6:	4293      	cmp	r3, r2
 80178e8:	d048      	beq.n	801797c <SVCCTL_App_Notification+0x17c>
 80178ea:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80178ee:	4293      	cmp	r3, r2
 80178f0:	dc56      	bgt.n	80179a0 <SVCCTL_App_Notification+0x1a0>
 80178f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80178f6:	d04b      	beq.n	8017990 <SVCCTL_App_Notification+0x190>
 80178f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80178fc:	dc50      	bgt.n	80179a0 <SVCCTL_App_Notification+0x1a0>
 80178fe:	f240 420a 	movw	r2, #1034	@ 0x40a
 8017902:	4293      	cmp	r3, r2
 8017904:	dc4c      	bgt.n	80179a0 <SVCCTL_App_Notification+0x1a0>
 8017906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801790a:	dc04      	bgt.n	8017916 <SVCCTL_App_Notification+0x116>
 801790c:	2b04      	cmp	r3, #4
 801790e:	d041      	beq.n	8017994 <SVCCTL_App_Notification+0x194>
 8017910:	2b06      	cmp	r3, #6
 8017912:	d039      	beq.n	8017988 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017914:	e044      	b.n	80179a0 <SVCCTL_App_Notification+0x1a0>
 8017916:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 801791a:	2b09      	cmp	r3, #9
 801791c:	d840      	bhi.n	80179a0 <SVCCTL_App_Notification+0x1a0>
 801791e:	a201      	add	r2, pc, #4	@ (adr r2, 8017924 <SVCCTL_App_Notification+0x124>)
 8017920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017924:	08017975 	.word	0x08017975
 8017928:	0801794d 	.word	0x0801794d
 801792c:	080179a1 	.word	0x080179a1
 8017930:	080179a1 	.word	0x080179a1
 8017934:	080179a1 	.word	0x080179a1
 8017938:	080179a1 	.word	0x080179a1
 801793c:	08017999 	.word	0x08017999
 8017940:	080179a1 	.word	0x080179a1
 8017944:	08017961 	.word	0x08017961
 8017948:	08017999 	.word	0x08017999
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 801794c:	4b17      	ldr	r3, [pc, #92]	@ (80179ac <SVCCTL_App_Notification+0x1ac>)
 801794e:	8adb      	ldrh	r3, [r3, #22]
 8017950:	4918      	ldr	r1, [pc, #96]	@ (80179b4 <SVCCTL_App_Notification+0x1b4>)
 8017952:	4618      	mov	r0, r3
 8017954:	f7fd fa68 	bl	8014e28 <aci_gap_pass_key_resp>
 8017958:	4603      	mov	r3, r0
 801795a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 801795e:	e01c      	b.n	801799a <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8017960:	4b12      	ldr	r3, [pc, #72]	@ (80179ac <SVCCTL_App_Notification+0x1ac>)
 8017962:	8adb      	ldrh	r3, [r3, #22]
 8017964:	2101      	movs	r1, #1
 8017966:	4618      	mov	r0, r3
 8017968:	f7fd fc08 	bl	801517c <aci_gap_numeric_comparison_value_confirm_yesno>
 801796c:	4603      	mov	r3, r0
 801796e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8017972:	e012      	b.n	801799a <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8017974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017976:	3302      	adds	r3, #2
 8017978:	623b      	str	r3, [r7, #32]
          break;
 801797a:	e00e      	b.n	801799a <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 801797c:	4b0b      	ldr	r3, [pc, #44]	@ (80179ac <SVCCTL_App_Notification+0x1ac>)
 801797e:	8adb      	ldrh	r3, [r3, #22]
 8017980:	4618      	mov	r0, r3
 8017982:	f7fd ff0e 	bl	80157a2 <aci_gatt_confirm_indication>
        break;
 8017986:	e008      	b.n	801799a <SVCCTL_App_Notification+0x19a>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 8017988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801798a:	3302      	adds	r3, #2
 801798c:	61fb      	str	r3, [r7, #28]
          break;
 801798e:	e004      	b.n	801799a <SVCCTL_App_Notification+0x19a>
          break;
 8017990:	bf00      	nop
 8017992:	e005      	b.n	80179a0 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8017994:	bf00      	nop
 8017996:	e003      	b.n	80179a0 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8017998:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801799a:	e001      	b.n	80179a0 <SVCCTL_App_Notification+0x1a0>
      break;
 801799c:	bf00      	nop
 801799e:	e000      	b.n	80179a2 <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80179a0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80179a2:	2301      	movs	r3, #1
}
 80179a4:	4618      	mov	r0, r3
 80179a6:	3730      	adds	r7, #48	@ 0x30
 80179a8:	46bd      	mov	sp, r7
 80179aa:	bd80      	pop	{r7, pc}
 80179ac:	20001458 	.word	0x20001458
 80179b0:	200014dc 	.word	0x200014dc
 80179b4:	0001b207 	.word	0x0001b207

080179b8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80179b8:	b580      	push	{r7, lr}
 80179ba:	b082      	sub	sp, #8
 80179bc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80179be:	4b06      	ldr	r3, [pc, #24]	@ (80179d8 <Ble_Tl_Init+0x20>)
 80179c0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80179c2:	4b06      	ldr	r3, [pc, #24]	@ (80179dc <Ble_Tl_Init+0x24>)
 80179c4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80179c6:	463b      	mov	r3, r7
 80179c8:	4619      	mov	r1, r3
 80179ca:	4805      	ldr	r0, [pc, #20]	@ (80179e0 <Ble_Tl_Init+0x28>)
 80179cc:	f7fe fb4e 	bl	801606c <hci_init>

  return;
 80179d0:	bf00      	nop
}
 80179d2:	3708      	adds	r7, #8
 80179d4:	46bd      	mov	sp, r7
 80179d6:	bd80      	pop	{r7, pc}
 80179d8:	200300d8 	.word	0x200300d8
 80179dc:	08017ce5 	.word	0x08017ce5
 80179e0:	08017cad 	.word	0x08017cad

080179e4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80179e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179e6:	b08d      	sub	sp, #52	@ 0x34
 80179e8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80179ea:	2300      	movs	r3, #0
 80179ec:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80179ee:	2392      	movs	r3, #146	@ 0x92
 80179f0:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80179f2:	f7fe f86b 	bl	8015acc <hci_reset>
 80179f6:	4603      	mov	r3, r0
 80179f8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80179fa:	f000 f8d7 	bl	8017bac <BleGetBdAddress>
 80179fe:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8017a00:	693a      	ldr	r2, [r7, #16]
 8017a02:	2106      	movs	r1, #6
 8017a04:	2000      	movs	r0, #0
 8017a06:	f7fd ff21 	bl	801584c <aci_hal_write_config_data>
 8017a0a:	4603      	mov	r3, r0
 8017a0c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8017a0e:	4a4a      	ldr	r2, [pc, #296]	@ (8017b38 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8017a10:	2110      	movs	r1, #16
 8017a12:	2018      	movs	r0, #24
 8017a14:	f7fd ff1a 	bl	801584c <aci_hal_write_config_data>
 8017a18:	4603      	mov	r3, r0
 8017a1a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8017a1c:	4a47      	ldr	r2, [pc, #284]	@ (8017b3c <Ble_Hci_Gap_Gatt_Init+0x158>)
 8017a1e:	2110      	movs	r1, #16
 8017a20:	2008      	movs	r0, #8
 8017a22:	f7fd ff13 	bl	801584c <aci_hal_write_config_data>
 8017a26:	4603      	mov	r3, r0
 8017a28:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8017a2a:	211d      	movs	r1, #29
 8017a2c:	2001      	movs	r0, #1
 8017a2e:	f7fd ff92 	bl	8015956 <aci_hal_set_tx_power_level>
 8017a32:	4603      	mov	r3, r0
 8017a34:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8017a36:	f7fd fc08 	bl	801524a <aci_gatt_init>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8017a3e:	2300      	movs	r3, #0
 8017a40:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8017a42:	7bfb      	ldrb	r3, [r7, #15]
 8017a44:	f043 0301 	orr.w	r3, r3, #1
 8017a48:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8017a4a:	7bfb      	ldrb	r3, [r7, #15]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d01f      	beq.n	8017a90 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8017a50:	4b3b      	ldr	r3, [pc, #236]	@ (8017b40 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8017a52:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8017a54:	1dba      	adds	r2, r7, #6
 8017a56:	7bf8      	ldrb	r0, [r7, #15]
 8017a58:	1cbb      	adds	r3, r7, #2
 8017a5a:	9301      	str	r3, [sp, #4]
 8017a5c:	1d3b      	adds	r3, r7, #4
 8017a5e:	9300      	str	r3, [sp, #0]
 8017a60:	4613      	mov	r3, r2
 8017a62:	2206      	movs	r2, #6
 8017a64:	2100      	movs	r1, #0
 8017a66:	f7fd fa46 	bl	8014ef6 <aci_gap_init>
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8017a6e:	88fc      	ldrh	r4, [r7, #6]
 8017a70:	88bd      	ldrh	r5, [r7, #4]
 8017a72:	68b8      	ldr	r0, [r7, #8]
 8017a74:	f7e8 fbd4 	bl	8000220 <strlen>
 8017a78:	4603      	mov	r3, r0
 8017a7a:	b2da      	uxtb	r2, r3
 8017a7c:	68bb      	ldr	r3, [r7, #8]
 8017a7e:	9300      	str	r3, [sp, #0]
 8017a80:	4613      	mov	r3, r2
 8017a82:	2200      	movs	r2, #0
 8017a84:	4629      	mov	r1, r5
 8017a86:	4620      	mov	r0, r4
 8017a88:	f7fd fde2 	bl	8015650 <aci_gatt_update_char_value>
 8017a8c:	4603      	mov	r3, r0
 8017a8e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8017a90:	88f8      	ldrh	r0, [r7, #6]
 8017a92:	8879      	ldrh	r1, [r7, #2]
 8017a94:	463b      	mov	r3, r7
 8017a96:	9300      	str	r3, [sp, #0]
 8017a98:	2302      	movs	r3, #2
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	f7fd fdd8 	bl	8015650 <aci_gatt_update_char_value>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8017aa4:	2202      	movs	r2, #2
 8017aa6:	2102      	movs	r1, #2
 8017aa8:	2000      	movs	r0, #0
 8017aaa:	f7fe f833 	bl	8015b14 <hci_le_set_default_phy>
 8017aae:	4603      	mov	r3, r0
 8017ab0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8017ab2:	4b24      	ldr	r3, [pc, #144]	@ (8017b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ab4:	2201      	movs	r2, #1
 8017ab6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8017ab8:	4b22      	ldr	r3, [pc, #136]	@ (8017b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017aba:	781b      	ldrb	r3, [r3, #0]
 8017abc:	4618      	mov	r0, r3
 8017abe:	f7fd f89b 	bl	8014bf8 <aci_gap_set_io_capability>
 8017ac2:	4603      	mov	r3, r0
 8017ac4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8017ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8017b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ac8:	2201      	movs	r2, #1
 8017aca:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8017acc:	4b1d      	ldr	r3, [pc, #116]	@ (8017b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ace:	2208      	movs	r2, #8
 8017ad0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8017ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8017b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ad4:	2210      	movs	r2, #16
 8017ad6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8017ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8017b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ada:	2200      	movs	r2, #0
 8017adc:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8017ade:	4b19      	ldr	r3, [pc, #100]	@ (8017b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ae0:	4a19      	ldr	r2, [pc, #100]	@ (8017b48 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8017ae2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8017ae4:	4b17      	ldr	r3, [pc, #92]	@ (8017b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ae6:	2200      	movs	r2, #0
 8017ae8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8017aea:	4b16      	ldr	r3, [pc, #88]	@ (8017b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017aec:	789c      	ldrb	r4, [r3, #2]
 8017aee:	4b15      	ldr	r3, [pc, #84]	@ (8017b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017af0:	785d      	ldrb	r5, [r3, #1]
 8017af2:	4b14      	ldr	r3, [pc, #80]	@ (8017b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017af4:	791b      	ldrb	r3, [r3, #4]
 8017af6:	4a13      	ldr	r2, [pc, #76]	@ (8017b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017af8:	7952      	ldrb	r2, [r2, #5]
 8017afa:	4912      	ldr	r1, [pc, #72]	@ (8017b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017afc:	78c9      	ldrb	r1, [r1, #3]
 8017afe:	4811      	ldr	r0, [pc, #68]	@ (8017b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b00:	6880      	ldr	r0, [r0, #8]
 8017b02:	2600      	movs	r6, #0
 8017b04:	9604      	str	r6, [sp, #16]
 8017b06:	9003      	str	r0, [sp, #12]
 8017b08:	9102      	str	r1, [sp, #8]
 8017b0a:	9201      	str	r2, [sp, #4]
 8017b0c:	9300      	str	r3, [sp, #0]
 8017b0e:	2300      	movs	r3, #0
 8017b10:	2201      	movs	r2, #1
 8017b12:	4629      	mov	r1, r5
 8017b14:	4620      	mov	r0, r4
 8017b16:	f7fd f8c3 	bl	8014ca0 <aci_gap_set_authentication_requirement>
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8017b1e:	4b09      	ldr	r3, [pc, #36]	@ (8017b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b20:	789b      	ldrb	r3, [r3, #2]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d003      	beq.n	8017b2e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8017b26:	f7fd fb05 	bl	8015134 <aci_gap_configure_filter_accept_list>
 8017b2a:	4603      	mov	r3, r0
 8017b2c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8017b2e:	bf00      	nop
 8017b30:	371c      	adds	r7, #28
 8017b32:	46bd      	mov	sp, r7
 8017b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b36:	bf00      	nop
 8017b38:	0802199c 	.word	0x0802199c
 8017b3c:	080219ac 	.word	0x080219ac
 8017b40:	0801fb2c 	.word	0x0801fb2c
 8017b44:	20001458 	.word	0x20001458
 8017b48:	0001b207 	.word	0x0001b207

08017b4c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b08c      	sub	sp, #48	@ 0x30
 8017b50:	af08      	add	r7, sp, #32
 8017b52:	4603      	mov	r3, r0
 8017b54:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017b56:	2392      	movs	r3, #146	@ 0x92
 8017b58:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8017b5a:	4a12      	ldr	r2, [pc, #72]	@ (8017ba4 <Adv_Request+0x58>)
 8017b5c:	79fb      	ldrb	r3, [r7, #7]
 8017b5e:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8017b62:	2300      	movs	r3, #0
 8017b64:	9306      	str	r3, [sp, #24]
 8017b66:	2300      	movs	r3, #0
 8017b68:	9305      	str	r3, [sp, #20]
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	9304      	str	r3, [sp, #16]
 8017b6e:	2300      	movs	r3, #0
 8017b70:	9303      	str	r3, [sp, #12]
 8017b72:	2300      	movs	r3, #0
 8017b74:	9302      	str	r3, [sp, #8]
 8017b76:	2300      	movs	r3, #0
 8017b78:	9301      	str	r3, [sp, #4]
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	9300      	str	r3, [sp, #0]
 8017b7e:	2300      	movs	r3, #0
 8017b80:	22a0      	movs	r2, #160	@ 0xa0
 8017b82:	2180      	movs	r1, #128	@ 0x80
 8017b84:	2000      	movs	r0, #0
 8017b86:	f7fc ff3d 	bl	8014a04 <aci_gap_set_discoverable>
 8017b8a:	4603      	mov	r3, r0
 8017b8c:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8017b8e:	4906      	ldr	r1, [pc, #24]	@ (8017ba8 <Adv_Request+0x5c>)
 8017b90:	200e      	movs	r0, #14
 8017b92:	f7fd fa5d 	bl	8015050 <aci_gap_update_adv_data>
 8017b96:	4603      	mov	r3, r0
 8017b98:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8017b9a:	bf00      	nop
}
 8017b9c:	3710      	adds	r7, #16
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	bd80      	pop	{r7, pc}
 8017ba2:	bf00      	nop
 8017ba4:	20001458 	.word	0x20001458
 8017ba8:	200000c4 	.word	0x200000c4

08017bac <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b086      	sub	sp, #24
 8017bb0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8017bb2:	f7ff fda7 	bl	8017704 <LL_FLASH_GetUDN>
 8017bb6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8017bb8:	693b      	ldr	r3, [r7, #16]
 8017bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017bbe:	d023      	beq.n	8017c08 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8017bc0:	f7ff fdb8 	bl	8017734 <LL_FLASH_GetSTCompanyID>
 8017bc4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8017bc6:	f7ff fda9 	bl	801771c <LL_FLASH_GetDeviceID>
 8017bca:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8017bcc:	693b      	ldr	r3, [r7, #16]
 8017bce:	b2da      	uxtb	r2, r3
 8017bd0:	4b16      	ldr	r3, [pc, #88]	@ (8017c2c <BleGetBdAddress+0x80>)
 8017bd2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8017bd4:	693b      	ldr	r3, [r7, #16]
 8017bd6:	0a1b      	lsrs	r3, r3, #8
 8017bd8:	b2da      	uxtb	r2, r3
 8017bda:	4b14      	ldr	r3, [pc, #80]	@ (8017c2c <BleGetBdAddress+0x80>)
 8017bdc:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	b2da      	uxtb	r2, r3
 8017be2:	4b12      	ldr	r3, [pc, #72]	@ (8017c2c <BleGetBdAddress+0x80>)
 8017be4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8017be6:	68bb      	ldr	r3, [r7, #8]
 8017be8:	b2da      	uxtb	r2, r3
 8017bea:	4b10      	ldr	r3, [pc, #64]	@ (8017c2c <BleGetBdAddress+0x80>)
 8017bec:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8017bee:	68bb      	ldr	r3, [r7, #8]
 8017bf0:	0a1b      	lsrs	r3, r3, #8
 8017bf2:	b2da      	uxtb	r2, r3
 8017bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8017c2c <BleGetBdAddress+0x80>)
 8017bf6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8017bf8:	68bb      	ldr	r3, [r7, #8]
 8017bfa:	0c1b      	lsrs	r3, r3, #16
 8017bfc:	b2da      	uxtb	r2, r3
 8017bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8017c2c <BleGetBdAddress+0x80>)
 8017c00:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8017c02:	4b0a      	ldr	r3, [pc, #40]	@ (8017c2c <BleGetBdAddress+0x80>)
 8017c04:	617b      	str	r3, [r7, #20]
 8017c06:	e00b      	b.n	8017c20 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8017c08:	2000      	movs	r0, #0
 8017c0a:	f7fe ff4b 	bl	8016aa4 <OTP_Read>
 8017c0e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d002      	beq.n	8017c1c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	617b      	str	r3, [r7, #20]
 8017c1a:	e001      	b.n	8017c20 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8017c1c:	4b04      	ldr	r3, [pc, #16]	@ (8017c30 <BleGetBdAddress+0x84>)
 8017c1e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8017c20:	697b      	ldr	r3, [r7, #20]
}
 8017c22:	4618      	mov	r0, r3
 8017c24:	3718      	adds	r7, #24
 8017c26:	46bd      	mov	sp, r7
 8017c28:	bd80      	pop	{r7, pc}
 8017c2a:	bf00      	nop
 8017c2c:	20001450 	.word	0x20001450
 8017c30:	08021994 	.word	0x08021994

08017c34 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b082      	sub	sp, #8
 8017c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8017c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8017c64 <Adv_Cancel+0x30>)
 8017c3c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8017c40:	2b05      	cmp	r3, #5
 8017c42:	d00a      	beq.n	8017c5a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017c44:	2392      	movs	r3, #146	@ 0x92
 8017c46:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8017c48:	f7fc feb8 	bl	80149bc <aci_gap_set_non_discoverable>
 8017c4c:	4603      	mov	r3, r0
 8017c4e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017c50:	4b04      	ldr	r3, [pc, #16]	@ (8017c64 <Adv_Cancel+0x30>)
 8017c52:	2200      	movs	r2, #0
 8017c54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8017c58:	bf00      	nop
 8017c5a:	bf00      	nop
}
 8017c5c:	3708      	adds	r7, #8
 8017c5e:	46bd      	mov	sp, r7
 8017c60:	bd80      	pop	{r7, pc}
 8017c62:	bf00      	nop
 8017c64:	20001458 	.word	0x20001458

08017c68 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b082      	sub	sp, #8
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8017c70:	2100      	movs	r1, #0
 8017c72:	2002      	movs	r0, #2
 8017c74:	f001 fad4 	bl	8019220 <UTIL_SEQ_SetTask>

  return;
 8017c78:	bf00      	nop
}
 8017c7a:	3708      	adds	r7, #8
 8017c7c:	46bd      	mov	sp, r7
 8017c7e:	bd80      	pop	{r7, pc}

08017c80 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b082      	sub	sp, #8
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8017c88:	2001      	movs	r0, #1
 8017c8a:	f001 fb35 	bl	80192f8 <UTIL_SEQ_SetEvt>

  return;
 8017c8e:	bf00      	nop
}
 8017c90:	3708      	adds	r7, #8
 8017c92:	46bd      	mov	sp, r7
 8017c94:	bd80      	pop	{r7, pc}

08017c96 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8017c96:	b580      	push	{r7, lr}
 8017c98:	b082      	sub	sp, #8
 8017c9a:	af00      	add	r7, sp, #0
 8017c9c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8017c9e:	2001      	movs	r0, #1
 8017ca0:	f001 fb4a 	bl	8019338 <UTIL_SEQ_WaitEvt>

  return;
 8017ca4:	bf00      	nop
}
 8017ca6:	3708      	adds	r7, #8
 8017ca8:	46bd      	mov	sp, r7
 8017caa:	bd80      	pop	{r7, pc}

08017cac <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	b084      	sub	sp, #16
 8017cb0:	af00      	add	r7, sp, #0
 8017cb2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	685b      	ldr	r3, [r3, #4]
 8017cbc:	3308      	adds	r3, #8
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	f7fe f88e 	bl	8015de0 <SVCCTL_UserEvtRx>
 8017cc4:	4603      	mov	r3, r0
 8017cc6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8017cc8:	7afb      	ldrb	r3, [r7, #11]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d003      	beq.n	8017cd6 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	2201      	movs	r2, #1
 8017cd2:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8017cd4:	e003      	b.n	8017cde <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	2200      	movs	r2, #0
 8017cda:	701a      	strb	r2, [r3, #0]
  return;
 8017cdc:	bf00      	nop
}
 8017cde:	3710      	adds	r7, #16
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	bd80      	pop	{r7, pc}

08017ce4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b084      	sub	sp, #16
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	4603      	mov	r3, r0
 8017cec:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8017cee:	79fb      	ldrb	r3, [r7, #7]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d002      	beq.n	8017cfa <BLE_StatusNot+0x16>
 8017cf4:	2b01      	cmp	r3, #1
 8017cf6:	d006      	beq.n	8017d06 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8017cf8:	e00b      	b.n	8017d12 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8017cfa:	2303      	movs	r3, #3
 8017cfc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8017cfe:	68f8      	ldr	r0, [r7, #12]
 8017d00:	f001 faba 	bl	8019278 <UTIL_SEQ_PauseTask>
      break;
 8017d04:	e005      	b.n	8017d12 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8017d06:	2303      	movs	r3, #3
 8017d08:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8017d0a:	68f8      	ldr	r0, [r7, #12]
 8017d0c:	f001 fad4 	bl	80192b8 <UTIL_SEQ_ResumeTask>
      break;
 8017d10:	bf00      	nop
  }

  return;
 8017d12:	bf00      	nop
}
 8017d14:	3710      	adds	r7, #16
 8017d16:	46bd      	mov	sp, r7
 8017d18:	bd80      	pop	{r7, pc}

08017d1a <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8017d1a:	b480      	push	{r7}
 8017d1c:	b083      	sub	sp, #12
 8017d1e:	af00      	add	r7, sp, #0
 8017d20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	781b      	ldrb	r3, [r3, #0]
 8017d26:	2b02      	cmp	r3, #2
 8017d28:	d006      	beq.n	8017d38 <Custom_STM_App_Notification+0x1e>
 8017d2a:	2b02      	cmp	r3, #2
 8017d2c:	dc06      	bgt.n	8017d3c <Custom_STM_App_Notification+0x22>
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d006      	beq.n	8017d40 <Custom_STM_App_Notification+0x26>
 8017d32:	2b01      	cmp	r3, #1
 8017d34:	d006      	beq.n	8017d44 <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8017d36:	e001      	b.n	8017d3c <Custom_STM_App_Notification+0x22>
      break;
 8017d38:	bf00      	nop
 8017d3a:	e004      	b.n	8017d46 <Custom_STM_App_Notification+0x2c>
      break;
 8017d3c:	bf00      	nop
 8017d3e:	e002      	b.n	8017d46 <Custom_STM_App_Notification+0x2c>
      break;
 8017d40:	bf00      	nop
 8017d42:	e000      	b.n	8017d46 <Custom_STM_App_Notification+0x2c>
      break;
 8017d44:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8017d46:	bf00      	nop
}
 8017d48:	370c      	adds	r7, #12
 8017d4a:	46bd      	mov	sp, r7
 8017d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d50:	4770      	bx	lr

08017d52 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8017d52:	b480      	push	{r7}
 8017d54:	b083      	sub	sp, #12
 8017d56:	af00      	add	r7, sp, #0
 8017d58:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	781b      	ldrb	r3, [r3, #0]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d002      	beq.n	8017d68 <Custom_APP_Notification+0x16>
 8017d62:	2b01      	cmp	r3, #1
 8017d64:	d002      	beq.n	8017d6c <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8017d66:	e002      	b.n	8017d6e <Custom_APP_Notification+0x1c>
      break;
 8017d68:	bf00      	nop
 8017d6a:	e000      	b.n	8017d6e <Custom_APP_Notification+0x1c>
      break;
 8017d6c:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8017d6e:	bf00      	nop
}
 8017d70:	370c      	adds	r7, #12
 8017d72:	46bd      	mov	sp, r7
 8017d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d78:	4770      	bx	lr

08017d7a <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8017d7a:	b480      	push	{r7}
 8017d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8017d7e:	bf00      	nop
}
 8017d80:	46bd      	mov	sp, r7
 8017d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d86:	4770      	bx	lr

08017d88 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b08e      	sub	sp, #56	@ 0x38
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8017d90:	2300      	movs	r3, #0
 8017d92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	3301      	adds	r3, #1
 8017d9a:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (event_pckt->evt)
 8017d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d9e:	781b      	ldrb	r3, [r3, #0]
 8017da0:	2bff      	cmp	r3, #255	@ 0xff
 8017da2:	f040 8089 	bne.w	8017eb8 <Custom_STM_Event_Handler+0x130>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8017da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017da8:	3302      	adds	r3, #2
 8017daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (blecore_evt->ecode)
 8017dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017dae:	881b      	ldrh	r3, [r3, #0]
 8017db0:	b29b      	uxth	r3, r3
 8017db2:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8017db6:	2b1a      	cmp	r3, #26
 8017db8:	d878      	bhi.n	8017eac <Custom_STM_Event_Handler+0x124>
 8017dba:	a201      	add	r2, pc, #4	@ (adr r2, 8017dc0 <Custom_STM_Event_Handler+0x38>)
 8017dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017dc0:	08017e2d 	.word	0x08017e2d
 8017dc4:	08017ead 	.word	0x08017ead
 8017dc8:	08017ead 	.word	0x08017ead
 8017dcc:	08017ead 	.word	0x08017ead
 8017dd0:	08017ead 	.word	0x08017ead
 8017dd4:	08017ead 	.word	0x08017ead
 8017dd8:	08017ead 	.word	0x08017ead
 8017ddc:	08017ead 	.word	0x08017ead
 8017de0:	08017ead 	.word	0x08017ead
 8017de4:	08017ead 	.word	0x08017ead
 8017de8:	08017ead 	.word	0x08017ead
 8017dec:	08017ead 	.word	0x08017ead
 8017df0:	08017ead 	.word	0x08017ead
 8017df4:	08017ead 	.word	0x08017ead
 8017df8:	08017ead 	.word	0x08017ead
 8017dfc:	08017ead 	.word	0x08017ead
 8017e00:	08017ead 	.word	0x08017ead
 8017e04:	08017ead 	.word	0x08017ead
 8017e08:	08017e6f 	.word	0x08017e6f
 8017e0c:	08017ead 	.word	0x08017ead
 8017e10:	08017ead 	.word	0x08017ead
 8017e14:	08017ead 	.word	0x08017ead
 8017e18:	08017ead 	.word	0x08017ead
 8017e1c:	08017ead 	.word	0x08017ead
 8017e20:	08017ead 	.word	0x08017ead
 8017e24:	08017ead 	.word	0x08017ead
 8017e28:	08017e8f 	.word	0x08017e8f
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8017e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e2e:	3302      	adds	r3, #2
 8017e30:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8017e32:	6a3b      	ldr	r3, [r7, #32]
 8017e34:	885b      	ldrh	r3, [r3, #2]
 8017e36:	b29b      	uxth	r3, r3
 8017e38:	461a      	mov	r2, r3
 8017e3a:	4b23      	ldr	r3, [pc, #140]	@ (8017ec8 <Custom_STM_Event_Handler+0x140>)
 8017e3c:	885b      	ldrh	r3, [r3, #2]
 8017e3e:	3301      	adds	r3, #1
 8017e40:	429a      	cmp	r2, r3
 8017e42:	d107      	bne.n	8017e54 <Custom_STM_Event_Handler+0xcc>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8017e44:	2301      	movs	r3, #1
 8017e46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */

            receivedbluetooth=attribute_modified->Attr_Data[0];
 8017e4a:	6a3b      	ldr	r3, [r7, #32]
 8017e4c:	7a1a      	ldrb	r2, [r3, #8]
 8017e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8017ecc <Custom_STM_Event_Handler+0x144>)
 8017e50:	701a      	strb	r2, [r3, #0]
            /* USER CODE END CUSTOM_STM_Service_1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomSendnumHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8017e52:	e02d      	b.n	8017eb0 <Custom_STM_Event_Handler+0x128>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomSendnumHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8017e54:	6a3b      	ldr	r3, [r7, #32]
 8017e56:	885b      	ldrh	r3, [r3, #2]
 8017e58:	b29b      	uxth	r3, r3
 8017e5a:	461a      	mov	r2, r3
 8017e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8017ec8 <Custom_STM_Event_Handler+0x140>)
 8017e5e:	889b      	ldrh	r3, [r3, #4]
 8017e60:	3301      	adds	r3, #1
 8017e62:	429a      	cmp	r2, r3
 8017e64:	d124      	bne.n	8017eb0 <Custom_STM_Event_Handler+0x128>
            return_value = SVCCTL_EvtAckFlowEnable;
 8017e66:	2301      	movs	r3, #1
 8017e68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          break;
 8017e6c:	e020      	b.n	8017eb0 <Custom_STM_Event_Handler+0x128>

        case ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 8017e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e70:	3302      	adds	r3, #2
 8017e72:	627b      	str	r3, [r7, #36]	@ 0x24
          if (write_perm_req->Attribute_Handle == (CustomContext.CustomSendnumHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8017e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e76:	885b      	ldrh	r3, [r3, #2]
 8017e78:	b29b      	uxth	r3, r3
 8017e7a:	461a      	mov	r2, r3
 8017e7c:	4b12      	ldr	r3, [pc, #72]	@ (8017ec8 <Custom_STM_Event_Handler+0x140>)
 8017e7e:	889b      	ldrh	r3, [r3, #4]
 8017e80:	3301      	adds	r3, #1
 8017e82:	429a      	cmp	r2, r3
 8017e84:	d116      	bne.n	8017eb4 <Custom_STM_Event_Handler+0x12c>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8017e86:	2301      	movs	r3, #1
 8017e88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          } /*if (write_perm_req->Attribute_Handle == (CustomContext.CustomSendnumHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8017e8c:	e012      	b.n	8017eb4 <Custom_STM_Event_Handler+0x12c>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8017e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e90:	3302      	adds	r3, #2
 8017e92:	62bb      	str	r3, [r7, #40]	@ 0x28
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8017e94:	2302      	movs	r3, #2
 8017e96:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8017e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e9a:	881b      	ldrh	r3, [r3, #0]
 8017e9c:	b29b      	uxth	r3, r3
 8017e9e:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 8017ea0:	f107 030c 	add.w	r3, r7, #12
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f7ff ff38 	bl	8017d1a <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8017eaa:	e004      	b.n	8017eb6 <Custom_STM_Event_Handler+0x12e>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8017eac:	bf00      	nop
 8017eae:	e004      	b.n	8017eba <Custom_STM_Event_Handler+0x132>
          break;
 8017eb0:	bf00      	nop
 8017eb2:	e002      	b.n	8017eba <Custom_STM_Event_Handler+0x132>
          break;
 8017eb4:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017eb6:	e000      	b.n	8017eba <Custom_STM_Event_Handler+0x132>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8017eb8:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8017eba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	3738      	adds	r7, #56	@ 0x38
 8017ec2:	46bd      	mov	sp, r7
 8017ec4:	bd80      	pop	{r7, pc}
 8017ec6:	bf00      	nop
 8017ec8:	200014e0 	.word	0x200014e0
 8017ecc:	20001162 	.word	0x20001162

08017ed0 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	b08c      	sub	sp, #48	@ 0x30
 8017ed4:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017ed6:	2392      	movs	r3, #146	@ 0x92
 8017ed8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8017eda:	484f      	ldr	r0, [pc, #316]	@ (8018018 <SVCCTL_InitCustomSvc+0x148>)
 8017edc:	f7fd ff66 	bl	8015dac <SVCCTL_RegisterSvcHandler>
   *                              = 5
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 5;
 8017ee0:	2305      	movs	r3, #5
 8017ee2:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BPSERVICE_UUID(uuid.Char_UUID_128);
 8017ee4:	238f      	movs	r3, #143	@ 0x8f
 8017ee6:	713b      	strb	r3, [r7, #4]
 8017ee8:	23e5      	movs	r3, #229	@ 0xe5
 8017eea:	717b      	strb	r3, [r7, #5]
 8017eec:	23b3      	movs	r3, #179	@ 0xb3
 8017eee:	71bb      	strb	r3, [r7, #6]
 8017ef0:	23d5      	movs	r3, #213	@ 0xd5
 8017ef2:	71fb      	strb	r3, [r7, #7]
 8017ef4:	232e      	movs	r3, #46	@ 0x2e
 8017ef6:	723b      	strb	r3, [r7, #8]
 8017ef8:	237f      	movs	r3, #127	@ 0x7f
 8017efa:	727b      	strb	r3, [r7, #9]
 8017efc:	234a      	movs	r3, #74	@ 0x4a
 8017efe:	72bb      	strb	r3, [r7, #10]
 8017f00:	2398      	movs	r3, #152	@ 0x98
 8017f02:	72fb      	strb	r3, [r7, #11]
 8017f04:	232a      	movs	r3, #42	@ 0x2a
 8017f06:	733b      	strb	r3, [r7, #12]
 8017f08:	2348      	movs	r3, #72	@ 0x48
 8017f0a:	737b      	strb	r3, [r7, #13]
 8017f0c:	237a      	movs	r3, #122	@ 0x7a
 8017f0e:	73bb      	strb	r3, [r7, #14]
 8017f10:	23cc      	movs	r3, #204	@ 0xcc
 8017f12:	73fb      	strb	r3, [r7, #15]
 8017f14:	2300      	movs	r3, #0
 8017f16:	743b      	strb	r3, [r7, #16]
 8017f18:	2300      	movs	r3, #0
 8017f1a:	747b      	strb	r3, [r7, #17]
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	74bb      	strb	r3, [r7, #18]
 8017f20:	2300      	movs	r3, #0
 8017f22:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8017f24:	7dbb      	ldrb	r3, [r7, #22]
 8017f26:	1d39      	adds	r1, r7, #4
 8017f28:	4a3c      	ldr	r2, [pc, #240]	@ (801801c <SVCCTL_InitCustomSvc+0x14c>)
 8017f2a:	9200      	str	r2, [sp, #0]
 8017f2c:	2201      	movs	r2, #1
 8017f2e:	2002      	movs	r0, #2
 8017f30:	f7fd f9b0 	bl	8015294 <aci_gatt_add_service>
 8017f34:	4603      	mov	r3, r0
 8017f36:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  charWrite
   */
  COPY_CHARWRITE_UUID(uuid.Char_UUID_128);
 8017f38:	2319      	movs	r3, #25
 8017f3a:	713b      	strb	r3, [r7, #4]
 8017f3c:	23ed      	movs	r3, #237	@ 0xed
 8017f3e:	717b      	strb	r3, [r7, #5]
 8017f40:	2382      	movs	r3, #130	@ 0x82
 8017f42:	71bb      	strb	r3, [r7, #6]
 8017f44:	23ae      	movs	r3, #174	@ 0xae
 8017f46:	71fb      	strb	r3, [r7, #7]
 8017f48:	23ed      	movs	r3, #237	@ 0xed
 8017f4a:	723b      	strb	r3, [r7, #8]
 8017f4c:	2321      	movs	r3, #33	@ 0x21
 8017f4e:	727b      	strb	r3, [r7, #9]
 8017f50:	234c      	movs	r3, #76	@ 0x4c
 8017f52:	72bb      	strb	r3, [r7, #10]
 8017f54:	239d      	movs	r3, #157	@ 0x9d
 8017f56:	72fb      	strb	r3, [r7, #11]
 8017f58:	2341      	movs	r3, #65	@ 0x41
 8017f5a:	733b      	strb	r3, [r7, #12]
 8017f5c:	2345      	movs	r3, #69	@ 0x45
 8017f5e:	737b      	strb	r3, [r7, #13]
 8017f60:	2322      	movs	r3, #34	@ 0x22
 8017f62:	73bb      	strb	r3, [r7, #14]
 8017f64:	238e      	movs	r3, #142	@ 0x8e
 8017f66:	73fb      	strb	r3, [r7, #15]
 8017f68:	2300      	movs	r3, #0
 8017f6a:	743b      	strb	r3, [r7, #16]
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	747b      	strb	r3, [r7, #17]
 8017f70:	2300      	movs	r3, #0
 8017f72:	74bb      	strb	r3, [r7, #18]
 8017f74:	2300      	movs	r3, #0
 8017f76:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBpserviceHdle,
 8017f78:	4b28      	ldr	r3, [pc, #160]	@ (801801c <SVCCTL_InitCustomSvc+0x14c>)
 8017f7a:	8818      	ldrh	r0, [r3, #0]
 8017f7c:	4b28      	ldr	r3, [pc, #160]	@ (8018020 <SVCCTL_InitCustomSvc+0x150>)
 8017f7e:	881b      	ldrh	r3, [r3, #0]
 8017f80:	1d3a      	adds	r2, r7, #4
 8017f82:	4928      	ldr	r1, [pc, #160]	@ (8018024 <SVCCTL_InitCustomSvc+0x154>)
 8017f84:	9105      	str	r1, [sp, #20]
 8017f86:	2100      	movs	r1, #0
 8017f88:	9104      	str	r1, [sp, #16]
 8017f8a:	2110      	movs	r1, #16
 8017f8c:	9103      	str	r1, [sp, #12]
 8017f8e:	2101      	movs	r1, #1
 8017f90:	9102      	str	r1, [sp, #8]
 8017f92:	2100      	movs	r1, #0
 8017f94:	9101      	str	r1, [sp, #4]
 8017f96:	2108      	movs	r1, #8
 8017f98:	9100      	str	r1, [sp, #0]
 8017f9a:	2102      	movs	r1, #2
 8017f9c:	f7fd fa50 	bl	8015440 <aci_gatt_add_char>
 8017fa0:	4603      	mov	r3, r0
 8017fa2:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  sendnum
   */
  COPY_SENDNUM_UUID(uuid.Char_UUID_128);
 8017fa4:	2319      	movs	r3, #25
 8017fa6:	713b      	strb	r3, [r7, #4]
 8017fa8:	23ed      	movs	r3, #237	@ 0xed
 8017faa:	717b      	strb	r3, [r7, #5]
 8017fac:	2382      	movs	r3, #130	@ 0x82
 8017fae:	71bb      	strb	r3, [r7, #6]
 8017fb0:	23ae      	movs	r3, #174	@ 0xae
 8017fb2:	71fb      	strb	r3, [r7, #7]
 8017fb4:	23ed      	movs	r3, #237	@ 0xed
 8017fb6:	723b      	strb	r3, [r7, #8]
 8017fb8:	2321      	movs	r3, #33	@ 0x21
 8017fba:	727b      	strb	r3, [r7, #9]
 8017fbc:	234c      	movs	r3, #76	@ 0x4c
 8017fbe:	72bb      	strb	r3, [r7, #10]
 8017fc0:	239d      	movs	r3, #157	@ 0x9d
 8017fc2:	72fb      	strb	r3, [r7, #11]
 8017fc4:	2341      	movs	r3, #65	@ 0x41
 8017fc6:	733b      	strb	r3, [r7, #12]
 8017fc8:	2345      	movs	r3, #69	@ 0x45
 8017fca:	737b      	strb	r3, [r7, #13]
 8017fcc:	2322      	movs	r3, #34	@ 0x22
 8017fce:	73bb      	strb	r3, [r7, #14]
 8017fd0:	238e      	movs	r3, #142	@ 0x8e
 8017fd2:	73fb      	strb	r3, [r7, #15]
 8017fd4:	2300      	movs	r3, #0
 8017fd6:	743b      	strb	r3, [r7, #16]
 8017fd8:	2300      	movs	r3, #0
 8017fda:	747b      	strb	r3, [r7, #17]
 8017fdc:	2300      	movs	r3, #0
 8017fde:	74bb      	strb	r3, [r7, #18]
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBpserviceHdle,
 8017fe4:	4b0d      	ldr	r3, [pc, #52]	@ (801801c <SVCCTL_InitCustomSvc+0x14c>)
 8017fe6:	8818      	ldrh	r0, [r3, #0]
 8017fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8018028 <SVCCTL_InitCustomSvc+0x158>)
 8017fea:	881b      	ldrh	r3, [r3, #0]
 8017fec:	1d3a      	adds	r2, r7, #4
 8017fee:	490f      	ldr	r1, [pc, #60]	@ (801802c <SVCCTL_InitCustomSvc+0x15c>)
 8017ff0:	9105      	str	r1, [sp, #20]
 8017ff2:	2100      	movs	r1, #0
 8017ff4:	9104      	str	r1, [sp, #16]
 8017ff6:	2110      	movs	r1, #16
 8017ff8:	9103      	str	r1, [sp, #12]
 8017ffa:	2107      	movs	r1, #7
 8017ffc:	9102      	str	r1, [sp, #8]
 8017ffe:	2100      	movs	r1, #0
 8018000:	9101      	str	r1, [sp, #4]
 8018002:	2108      	movs	r1, #8
 8018004:	9100      	str	r1, [sp, #0]
 8018006:	2102      	movs	r1, #2
 8018008:	f7fd fa1a 	bl	8015440 <aci_gatt_add_char>
 801800c:	4603      	mov	r3, r0
 801800e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8018010:	bf00      	nop
}
 8018012:	3718      	adds	r7, #24
 8018014:	46bd      	mov	sp, r7
 8018016:	bd80      	pop	{r7, pc}
 8018018:	08017d89 	.word	0x08017d89
 801801c:	200014e0 	.word	0x200014e0
 8018020:	200000d2 	.word	0x200000d2
 8018024:	200014e2 	.word	0x200014e2
 8018028:	200000d4 	.word	0x200000d4
 801802c:	200014e4 	.word	0x200014e4

08018030 <LL_PWR_EnableBootC2>:
{
 8018030:	b480      	push	{r7}
 8018032:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8018034:	4b05      	ldr	r3, [pc, #20]	@ (801804c <LL_PWR_EnableBootC2+0x1c>)
 8018036:	68db      	ldr	r3, [r3, #12]
 8018038:	4a04      	ldr	r2, [pc, #16]	@ (801804c <LL_PWR_EnableBootC2+0x1c>)
 801803a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801803e:	60d3      	str	r3, [r2, #12]
}
 8018040:	bf00      	nop
 8018042:	46bd      	mov	sp, r7
 8018044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018048:	4770      	bx	lr
 801804a:	bf00      	nop
 801804c:	58000400 	.word	0x58000400

08018050 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8018050:	b480      	push	{r7}
 8018052:	b083      	sub	sp, #12
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8018058:	4b06      	ldr	r3, [pc, #24]	@ (8018074 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801805a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 801805e:	4905      	ldr	r1, [pc, #20]	@ (8018074 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	4313      	orrs	r3, r2
 8018064:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8018068:	bf00      	nop
 801806a:	370c      	adds	r7, #12
 801806c:	46bd      	mov	sp, r7
 801806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018072:	4770      	bx	lr
 8018074:	58000800 	.word	0x58000800

08018078 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8018078:	b480      	push	{r7}
 801807a:	b083      	sub	sp, #12
 801807c:	af00      	add	r7, sp, #0
 801807e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8018080:	4b05      	ldr	r3, [pc, #20]	@ (8018098 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8018082:	6a1a      	ldr	r2, [r3, #32]
 8018084:	4904      	ldr	r1, [pc, #16]	@ (8018098 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	4313      	orrs	r3, r2
 801808a:	620b      	str	r3, [r1, #32]
}
 801808c:	bf00      	nop
 801808e:	370c      	adds	r7, #12
 8018090:	46bd      	mov	sp, r7
 8018092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018096:	4770      	bx	lr
 8018098:	58000800 	.word	0x58000800

0801809c <LL_AHB3_GRP1_EnableClock>:
{
 801809c:	b480      	push	{r7}
 801809e:	b085      	sub	sp, #20
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80180a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80180a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80180aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	4313      	orrs	r3, r2
 80180b2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80180b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80180b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	4013      	ands	r3, r2
 80180be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80180c0:	68fb      	ldr	r3, [r7, #12]
}
 80180c2:	bf00      	nop
 80180c4:	3714      	adds	r7, #20
 80180c6:	46bd      	mov	sp, r7
 80180c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180cc:	4770      	bx	lr

080180ce <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80180ce:	b480      	push	{r7}
 80180d0:	b085      	sub	sp, #20
 80180d2:	af00      	add	r7, sp, #0
 80180d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80180d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80180da:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80180de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	4313      	orrs	r3, r2
 80180e6:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80180ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80180ee:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	4013      	ands	r3, r2
 80180f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80180f8:	68fb      	ldr	r3, [r7, #12]
}
 80180fa:	bf00      	nop
 80180fc:	3714      	adds	r7, #20
 80180fe:	46bd      	mov	sp, r7
 8018100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018104:	4770      	bx	lr

08018106 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8018106:	b480      	push	{r7}
 8018108:	b083      	sub	sp, #12
 801810a:	af00      	add	r7, sp, #0
 801810c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	601a      	str	r2, [r3, #0]
}
 801811a:	bf00      	nop
 801811c:	370c      	adds	r7, #12
 801811e:	46bd      	mov	sp, r7
 8018120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018124:	4770      	bx	lr

08018126 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8018126:	b480      	push	{r7}
 8018128:	b083      	sub	sp, #12
 801812a:	af00      	add	r7, sp, #0
 801812c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	f043 0201 	orr.w	r2, r3, #1
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	601a      	str	r2, [r3, #0]
}
 801813a:	bf00      	nop
 801813c:	370c      	adds	r7, #12
 801813e:	46bd      	mov	sp, r7
 8018140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018144:	4770      	bx	lr

08018146 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018146:	b480      	push	{r7}
 8018148:	b083      	sub	sp, #12
 801814a:	af00      	add	r7, sp, #0
 801814c:	6078      	str	r0, [r7, #4]
 801814e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	685a      	ldr	r2, [r3, #4]
 8018154:	683b      	ldr	r3, [r7, #0]
 8018156:	041b      	lsls	r3, r3, #16
 8018158:	43db      	mvns	r3, r3
 801815a:	401a      	ands	r2, r3
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	605a      	str	r2, [r3, #4]
}
 8018160:	bf00      	nop
 8018162:	370c      	adds	r7, #12
 8018164:	46bd      	mov	sp, r7
 8018166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801816a:	4770      	bx	lr

0801816c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801816c:	b480      	push	{r7}
 801816e:	b083      	sub	sp, #12
 8018170:	af00      	add	r7, sp, #0
 8018172:	6078      	str	r0, [r7, #4]
 8018174:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	685a      	ldr	r2, [r3, #4]
 801817a:	683b      	ldr	r3, [r7, #0]
 801817c:	041b      	lsls	r3, r3, #16
 801817e:	431a      	orrs	r2, r3
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	605a      	str	r2, [r3, #4]
}
 8018184:	bf00      	nop
 8018186:	370c      	adds	r7, #12
 8018188:	46bd      	mov	sp, r7
 801818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818e:	4770      	bx	lr

08018190 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018190:	b480      	push	{r7}
 8018192:	b083      	sub	sp, #12
 8018194:	af00      	add	r7, sp, #0
 8018196:	6078      	str	r0, [r7, #4]
 8018198:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	685a      	ldr	r2, [r3, #4]
 801819e:	683b      	ldr	r3, [r7, #0]
 80181a0:	43db      	mvns	r3, r3
 80181a2:	401a      	ands	r2, r3
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	605a      	str	r2, [r3, #4]
}
 80181a8:	bf00      	nop
 80181aa:	370c      	adds	r7, #12
 80181ac:	46bd      	mov	sp, r7
 80181ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181b2:	4770      	bx	lr

080181b4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80181b4:	b480      	push	{r7}
 80181b6:	b083      	sub	sp, #12
 80181b8:	af00      	add	r7, sp, #0
 80181ba:	6078      	str	r0, [r7, #4]
 80181bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	683a      	ldr	r2, [r7, #0]
 80181c2:	609a      	str	r2, [r3, #8]
}
 80181c4:	bf00      	nop
 80181c6:	370c      	adds	r7, #12
 80181c8:	46bd      	mov	sp, r7
 80181ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ce:	4770      	bx	lr

080181d0 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80181d0:	b480      	push	{r7}
 80181d2:	b083      	sub	sp, #12
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	6078      	str	r0, [r7, #4]
 80181d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80181da:	683b      	ldr	r3, [r7, #0]
 80181dc:	041a      	lsls	r2, r3, #16
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	609a      	str	r2, [r3, #8]
}
 80181e2:	bf00      	nop
 80181e4:	370c      	adds	r7, #12
 80181e6:	46bd      	mov	sp, r7
 80181e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ec:	4770      	bx	lr

080181ee <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80181ee:	b480      	push	{r7}
 80181f0:	b083      	sub	sp, #12
 80181f2:	af00      	add	r7, sp, #0
 80181f4:	6078      	str	r0, [r7, #4]
 80181f6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	68da      	ldr	r2, [r3, #12]
 80181fc:	683b      	ldr	r3, [r7, #0]
 80181fe:	4013      	ands	r3, r2
 8018200:	683a      	ldr	r2, [r7, #0]
 8018202:	429a      	cmp	r2, r3
 8018204:	d101      	bne.n	801820a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8018206:	2301      	movs	r3, #1
 8018208:	e000      	b.n	801820c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801820a:	2300      	movs	r3, #0
}
 801820c:	4618      	mov	r0, r3
 801820e:	370c      	adds	r7, #12
 8018210:	46bd      	mov	sp, r7
 8018212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018216:	4770      	bx	lr

08018218 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8018218:	b480      	push	{r7}
 801821a:	b083      	sub	sp, #12
 801821c:	af00      	add	r7, sp, #0
 801821e:	6078      	str	r0, [r7, #4]
 8018220:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	69da      	ldr	r2, [r3, #28]
 8018226:	683b      	ldr	r3, [r7, #0]
 8018228:	4013      	ands	r3, r2
 801822a:	683a      	ldr	r2, [r7, #0]
 801822c:	429a      	cmp	r2, r3
 801822e:	d101      	bne.n	8018234 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8018230:	2301      	movs	r3, #1
 8018232:	e000      	b.n	8018236 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8018234:	2300      	movs	r3, #0
}
 8018236:	4618      	mov	r0, r3
 8018238:	370c      	adds	r7, #12
 801823a:	46bd      	mov	sp, r7
 801823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018240:	4770      	bx	lr
	...

08018244 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8018244:	b580      	push	{r7, lr}
 8018246:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8018248:	2102      	movs	r1, #2
 801824a:	4818      	ldr	r0, [pc, #96]	@ (80182ac <HW_IPCC_Rx_Handler+0x68>)
 801824c:	f7ff ffe4 	bl	8018218 <LL_C2_IPCC_IsActiveFlag_CHx>
 8018250:	4603      	mov	r3, r0
 8018252:	2b00      	cmp	r3, #0
 8018254:	d008      	beq.n	8018268 <HW_IPCC_Rx_Handler+0x24>
 8018256:	4b15      	ldr	r3, [pc, #84]	@ (80182ac <HW_IPCC_Rx_Handler+0x68>)
 8018258:	685b      	ldr	r3, [r3, #4]
 801825a:	f003 0302 	and.w	r3, r3, #2
 801825e:	2b00      	cmp	r3, #0
 8018260:	d102      	bne.n	8018268 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8018262:	f000 f8d5 	bl	8018410 <HW_IPCC_SYS_EvtHandler>
 8018266:	e01e      	b.n	80182a6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8018268:	2101      	movs	r1, #1
 801826a:	4810      	ldr	r0, [pc, #64]	@ (80182ac <HW_IPCC_Rx_Handler+0x68>)
 801826c:	f7ff ffd4 	bl	8018218 <LL_C2_IPCC_IsActiveFlag_CHx>
 8018270:	4603      	mov	r3, r0
 8018272:	2b00      	cmp	r3, #0
 8018274:	d008      	beq.n	8018288 <HW_IPCC_Rx_Handler+0x44>
 8018276:	4b0d      	ldr	r3, [pc, #52]	@ (80182ac <HW_IPCC_Rx_Handler+0x68>)
 8018278:	685b      	ldr	r3, [r3, #4]
 801827a:	f003 0301 	and.w	r3, r3, #1
 801827e:	2b00      	cmp	r3, #0
 8018280:	d102      	bne.n	8018288 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8018282:	f000 f889 	bl	8018398 <HW_IPCC_BLE_EvtHandler>
 8018286:	e00e      	b.n	80182a6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8018288:	2108      	movs	r1, #8
 801828a:	4808      	ldr	r0, [pc, #32]	@ (80182ac <HW_IPCC_Rx_Handler+0x68>)
 801828c:	f7ff ffc4 	bl	8018218 <LL_C2_IPCC_IsActiveFlag_CHx>
 8018290:	4603      	mov	r3, r0
 8018292:	2b00      	cmp	r3, #0
 8018294:	d008      	beq.n	80182a8 <HW_IPCC_Rx_Handler+0x64>
 8018296:	4b05      	ldr	r3, [pc, #20]	@ (80182ac <HW_IPCC_Rx_Handler+0x68>)
 8018298:	685b      	ldr	r3, [r3, #4]
 801829a:	f003 0308 	and.w	r3, r3, #8
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d102      	bne.n	80182a8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80182a2:	f000 f901 	bl	80184a8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80182a6:	bf00      	nop
 80182a8:	bf00      	nop
}
 80182aa:	bd80      	pop	{r7, pc}
 80182ac:	58000c00 	.word	0x58000c00

080182b0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80182b0:	b580      	push	{r7, lr}
 80182b2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80182b4:	2102      	movs	r1, #2
 80182b6:	4818      	ldr	r0, [pc, #96]	@ (8018318 <HW_IPCC_Tx_Handler+0x68>)
 80182b8:	f7ff ff99 	bl	80181ee <LL_C1_IPCC_IsActiveFlag_CHx>
 80182bc:	4603      	mov	r3, r0
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d108      	bne.n	80182d4 <HW_IPCC_Tx_Handler+0x24>
 80182c2:	4b15      	ldr	r3, [pc, #84]	@ (8018318 <HW_IPCC_Tx_Handler+0x68>)
 80182c4:	685b      	ldr	r3, [r3, #4]
 80182c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d102      	bne.n	80182d4 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80182ce:	f000 f893 	bl	80183f8 <HW_IPCC_SYS_CmdEvtHandler>
 80182d2:	e01e      	b.n	8018312 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80182d4:	2108      	movs	r1, #8
 80182d6:	4810      	ldr	r0, [pc, #64]	@ (8018318 <HW_IPCC_Tx_Handler+0x68>)
 80182d8:	f7ff ff89 	bl	80181ee <LL_C1_IPCC_IsActiveFlag_CHx>
 80182dc:	4603      	mov	r3, r0
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d108      	bne.n	80182f4 <HW_IPCC_Tx_Handler+0x44>
 80182e2:	4b0d      	ldr	r3, [pc, #52]	@ (8018318 <HW_IPCC_Tx_Handler+0x68>)
 80182e4:	685b      	ldr	r3, [r3, #4]
 80182e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d102      	bne.n	80182f4 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80182ee:	f000 f8bd 	bl	801846c <HW_IPCC_MM_FreeBufHandler>
 80182f2:	e00e      	b.n	8018312 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80182f4:	2120      	movs	r1, #32
 80182f6:	4808      	ldr	r0, [pc, #32]	@ (8018318 <HW_IPCC_Tx_Handler+0x68>)
 80182f8:	f7ff ff79 	bl	80181ee <LL_C1_IPCC_IsActiveFlag_CHx>
 80182fc:	4603      	mov	r3, r0
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d108      	bne.n	8018314 <HW_IPCC_Tx_Handler+0x64>
 8018302:	4b05      	ldr	r3, [pc, #20]	@ (8018318 <HW_IPCC_Tx_Handler+0x68>)
 8018304:	685b      	ldr	r3, [r3, #4]
 8018306:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801830a:	2b00      	cmp	r3, #0
 801830c:	d102      	bne.n	8018314 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 801830e:	f000 f84f 	bl	80183b0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8018312:	bf00      	nop
 8018314:	bf00      	nop
}
 8018316:	bd80      	pop	{r7, pc}
 8018318:	58000c00 	.word	0x58000c00

0801831c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 801831c:	b580      	push	{r7, lr}
 801831e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8018320:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8018324:	f7ff fed3 	bl	80180ce <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8018328:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801832c:	f7ff fea4 	bl	8018078 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8018330:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8018334:	f7ff fe8c 	bl	8018050 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8018338:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801833a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 801833c:	f7ff fe78 	bl	8018030 <LL_PWR_EnableBootC2>

  return;
 8018340:	bf00      	nop
}
 8018342:	bd80      	pop	{r7, pc}

08018344 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8018344:	b580      	push	{r7, lr}
 8018346:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8018348:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 801834c:	f7ff fea6 	bl	801809c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8018350:	4806      	ldr	r0, [pc, #24]	@ (801836c <HW_IPCC_Init+0x28>)
 8018352:	f7ff fee8 	bl	8018126 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8018356:	4805      	ldr	r0, [pc, #20]	@ (801836c <HW_IPCC_Init+0x28>)
 8018358:	f7ff fed5 	bl	8018106 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 801835c:	202c      	movs	r0, #44	@ 0x2c
 801835e:	f7f0 f846 	bl	80083ee <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8018362:	202d      	movs	r0, #45	@ 0x2d
 8018364:	f7f0 f843 	bl	80083ee <HAL_NVIC_EnableIRQ>

  return;
 8018368:	bf00      	nop
}
 801836a:	bd80      	pop	{r7, pc}
 801836c:	58000c00 	.word	0x58000c00

08018370 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8018370:	b580      	push	{r7, lr}
 8018372:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8018374:	2101      	movs	r1, #1
 8018376:	4802      	ldr	r0, [pc, #8]	@ (8018380 <HW_IPCC_BLE_Init+0x10>)
 8018378:	f7ff ff0a 	bl	8018190 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801837c:	bf00      	nop
}
 801837e:	bd80      	pop	{r7, pc}
 8018380:	58000c00 	.word	0x58000c00

08018384 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8018384:	b580      	push	{r7, lr}
 8018386:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8018388:	2101      	movs	r1, #1
 801838a:	4802      	ldr	r0, [pc, #8]	@ (8018394 <HW_IPCC_BLE_SendCmd+0x10>)
 801838c:	f7ff ff20 	bl	80181d0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8018390:	bf00      	nop
}
 8018392:	bd80      	pop	{r7, pc}
 8018394:	58000c00 	.word	0x58000c00

08018398 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8018398:	b580      	push	{r7, lr}
 801839a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 801839c:	f7fe f9ca 	bl	8016734 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80183a0:	2101      	movs	r1, #1
 80183a2:	4802      	ldr	r0, [pc, #8]	@ (80183ac <HW_IPCC_BLE_EvtHandler+0x14>)
 80183a4:	f7ff ff06 	bl	80181b4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80183a8:	bf00      	nop
}
 80183aa:	bd80      	pop	{r7, pc}
 80183ac:	58000c00 	.word	0x58000c00

080183b0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80183b0:	b580      	push	{r7, lr}
 80183b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80183b4:	2120      	movs	r1, #32
 80183b6:	4803      	ldr	r0, [pc, #12]	@ (80183c4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80183b8:	f7ff fed8 	bl	801816c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80183bc:	f7fe f9ea 	bl	8016794 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80183c0:	bf00      	nop
}
 80183c2:	bd80      	pop	{r7, pc}
 80183c4:	58000c00 	.word	0x58000c00

080183c8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80183cc:	2102      	movs	r1, #2
 80183ce:	4802      	ldr	r0, [pc, #8]	@ (80183d8 <HW_IPCC_SYS_Init+0x10>)
 80183d0:	f7ff fede 	bl	8018190 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80183d4:	bf00      	nop
}
 80183d6:	bd80      	pop	{r7, pc}
 80183d8:	58000c00 	.word	0x58000c00

080183dc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80183dc:	b580      	push	{r7, lr}
 80183de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80183e0:	2102      	movs	r1, #2
 80183e2:	4804      	ldr	r0, [pc, #16]	@ (80183f4 <HW_IPCC_SYS_SendCmd+0x18>)
 80183e4:	f7ff fef4 	bl	80181d0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80183e8:	2102      	movs	r1, #2
 80183ea:	4802      	ldr	r0, [pc, #8]	@ (80183f4 <HW_IPCC_SYS_SendCmd+0x18>)
 80183ec:	f7ff feab 	bl	8018146 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80183f0:	bf00      	nop
}
 80183f2:	bd80      	pop	{r7, pc}
 80183f4:	58000c00 	.word	0x58000c00

080183f8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80183fc:	2102      	movs	r1, #2
 80183fe:	4803      	ldr	r0, [pc, #12]	@ (801840c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8018400:	f7ff feb4 	bl	801816c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8018404:	f7fe fa16 	bl	8016834 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8018408:	bf00      	nop
}
 801840a:	bd80      	pop	{r7, pc}
 801840c:	58000c00 	.word	0x58000c00

08018410 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8018410:	b580      	push	{r7, lr}
 8018412:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8018414:	f7fe fa24 	bl	8016860 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8018418:	2102      	movs	r1, #2
 801841a:	4802      	ldr	r0, [pc, #8]	@ (8018424 <HW_IPCC_SYS_EvtHandler+0x14>)
 801841c:	f7ff feca 	bl	80181b4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8018420:	bf00      	nop
}
 8018422:	bd80      	pop	{r7, pc}
 8018424:	58000c00 	.word	0x58000c00

08018428 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8018428:	b580      	push	{r7, lr}
 801842a:	b082      	sub	sp, #8
 801842c:	af00      	add	r7, sp, #0
 801842e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8018430:	2108      	movs	r1, #8
 8018432:	480c      	ldr	r0, [pc, #48]	@ (8018464 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018434:	f7ff fedb 	bl	80181ee <LL_C1_IPCC_IsActiveFlag_CHx>
 8018438:	4603      	mov	r3, r0
 801843a:	2b00      	cmp	r3, #0
 801843c:	d007      	beq.n	801844e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801843e:	4a0a      	ldr	r2, [pc, #40]	@ (8018468 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018444:	2108      	movs	r1, #8
 8018446:	4807      	ldr	r0, [pc, #28]	@ (8018464 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018448:	f7ff fe7d 	bl	8018146 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 801844c:	e006      	b.n	801845c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018452:	2108      	movs	r1, #8
 8018454:	4803      	ldr	r0, [pc, #12]	@ (8018464 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018456:	f7ff febb 	bl	80181d0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 801845a:	bf00      	nop
}
 801845c:	3708      	adds	r7, #8
 801845e:	46bd      	mov	sp, r7
 8018460:	bd80      	pop	{r7, pc}
 8018462:	bf00      	nop
 8018464:	58000c00 	.word	0x58000c00
 8018468:	200014e8 	.word	0x200014e8

0801846c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 801846c:	b580      	push	{r7, lr}
 801846e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018470:	2108      	movs	r1, #8
 8018472:	4806      	ldr	r0, [pc, #24]	@ (801848c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8018474:	f7ff fe7a 	bl	801816c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8018478:	4b05      	ldr	r3, [pc, #20]	@ (8018490 <HW_IPCC_MM_FreeBufHandler+0x24>)
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801847e:	2108      	movs	r1, #8
 8018480:	4802      	ldr	r0, [pc, #8]	@ (801848c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8018482:	f7ff fea5 	bl	80181d0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8018486:	bf00      	nop
}
 8018488:	bd80      	pop	{r7, pc}
 801848a:	bf00      	nop
 801848c:	58000c00 	.word	0x58000c00
 8018490:	200014e8 	.word	0x200014e8

08018494 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8018494:	b580      	push	{r7, lr}
 8018496:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8018498:	2108      	movs	r1, #8
 801849a:	4802      	ldr	r0, [pc, #8]	@ (80184a4 <HW_IPCC_TRACES_Init+0x10>)
 801849c:	f7ff fe78 	bl	8018190 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80184a0:	bf00      	nop
}
 80184a2:	bd80      	pop	{r7, pc}
 80184a4:	58000c00 	.word	0x58000c00

080184a8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80184a8:	b580      	push	{r7, lr}
 80184aa:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80184ac:	f7fe fa80 	bl	80169b0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80184b0:	2108      	movs	r1, #8
 80184b2:	4802      	ldr	r0, [pc, #8]	@ (80184bc <HW_IPCC_TRACES_EvtHandler+0x14>)
 80184b4:	f7ff fe7e 	bl	80181b4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80184b8:	bf00      	nop
}
 80184ba:	bd80      	pop	{r7, pc}
 80184bc:	58000c00 	.word	0x58000c00

080184c0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80184c4:	2200      	movs	r2, #0
 80184c6:	4912      	ldr	r1, [pc, #72]	@ (8018510 <MX_USB_Device_Init+0x50>)
 80184c8:	4812      	ldr	r0, [pc, #72]	@ (8018514 <MX_USB_Device_Init+0x54>)
 80184ca:	f7fa ffdd 	bl	8013488 <USBD_Init>
 80184ce:	4603      	mov	r3, r0
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d001      	beq.n	80184d8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80184d4:	f7ea fc08 	bl	8002ce8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80184d8:	490f      	ldr	r1, [pc, #60]	@ (8018518 <MX_USB_Device_Init+0x58>)
 80184da:	480e      	ldr	r0, [pc, #56]	@ (8018514 <MX_USB_Device_Init+0x54>)
 80184dc:	f7fb f804 	bl	80134e8 <USBD_RegisterClass>
 80184e0:	4603      	mov	r3, r0
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d001      	beq.n	80184ea <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80184e6:	f7ea fbff 	bl	8002ce8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80184ea:	490c      	ldr	r1, [pc, #48]	@ (801851c <MX_USB_Device_Init+0x5c>)
 80184ec:	4809      	ldr	r0, [pc, #36]	@ (8018514 <MX_USB_Device_Init+0x54>)
 80184ee:	f7fa fefb 	bl	80132e8 <USBD_CDC_RegisterInterface>
 80184f2:	4603      	mov	r3, r0
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d001      	beq.n	80184fc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80184f8:	f7ea fbf6 	bl	8002ce8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80184fc:	4805      	ldr	r0, [pc, #20]	@ (8018514 <MX_USB_Device_Init+0x54>)
 80184fe:	f7fb f829 	bl	8013554 <USBD_Start>
 8018502:	4603      	mov	r3, r0
 8018504:	2b00      	cmp	r3, #0
 8018506:	d001      	beq.n	801850c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8018508:	f7ea fbee 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801850c:	bf00      	nop
 801850e:	bd80      	pop	{r7, pc}
 8018510:	200000ec 	.word	0x200000ec
 8018514:	200014ec 	.word	0x200014ec
 8018518:	20000044 	.word	0x20000044
 801851c:	200000d8 	.word	0x200000d8

08018520 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018520:	b580      	push	{r7, lr}
 8018522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018524:	2200      	movs	r2, #0
 8018526:	4905      	ldr	r1, [pc, #20]	@ (801853c <CDC_Init_FS+0x1c>)
 8018528:	4805      	ldr	r0, [pc, #20]	@ (8018540 <CDC_Init_FS+0x20>)
 801852a:	f7fa fef7 	bl	801331c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801852e:	4905      	ldr	r1, [pc, #20]	@ (8018544 <CDC_Init_FS+0x24>)
 8018530:	4803      	ldr	r0, [pc, #12]	@ (8018540 <CDC_Init_FS+0x20>)
 8018532:	f7fa ff15 	bl	8013360 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018536:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018538:	4618      	mov	r0, r3
 801853a:	bd80      	pop	{r7, pc}
 801853c:	20001fc8 	.word	0x20001fc8
 8018540:	200014ec 	.word	0x200014ec
 8018544:	200017c8 	.word	0x200017c8

08018548 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018548:	b480      	push	{r7}
 801854a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801854c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801854e:	4618      	mov	r0, r3
 8018550:	46bd      	mov	sp, r7
 8018552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018556:	4770      	bx	lr

08018558 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018558:	b480      	push	{r7}
 801855a:	b083      	sub	sp, #12
 801855c:	af00      	add	r7, sp, #0
 801855e:	4603      	mov	r3, r0
 8018560:	6039      	str	r1, [r7, #0]
 8018562:	71fb      	strb	r3, [r7, #7]
 8018564:	4613      	mov	r3, r2
 8018566:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018568:	79fb      	ldrb	r3, [r7, #7]
 801856a:	2b23      	cmp	r3, #35	@ 0x23
 801856c:	d84a      	bhi.n	8018604 <CDC_Control_FS+0xac>
 801856e:	a201      	add	r2, pc, #4	@ (adr r2, 8018574 <CDC_Control_FS+0x1c>)
 8018570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018574:	08018605 	.word	0x08018605
 8018578:	08018605 	.word	0x08018605
 801857c:	08018605 	.word	0x08018605
 8018580:	08018605 	.word	0x08018605
 8018584:	08018605 	.word	0x08018605
 8018588:	08018605 	.word	0x08018605
 801858c:	08018605 	.word	0x08018605
 8018590:	08018605 	.word	0x08018605
 8018594:	08018605 	.word	0x08018605
 8018598:	08018605 	.word	0x08018605
 801859c:	08018605 	.word	0x08018605
 80185a0:	08018605 	.word	0x08018605
 80185a4:	08018605 	.word	0x08018605
 80185a8:	08018605 	.word	0x08018605
 80185ac:	08018605 	.word	0x08018605
 80185b0:	08018605 	.word	0x08018605
 80185b4:	08018605 	.word	0x08018605
 80185b8:	08018605 	.word	0x08018605
 80185bc:	08018605 	.word	0x08018605
 80185c0:	08018605 	.word	0x08018605
 80185c4:	08018605 	.word	0x08018605
 80185c8:	08018605 	.word	0x08018605
 80185cc:	08018605 	.word	0x08018605
 80185d0:	08018605 	.word	0x08018605
 80185d4:	08018605 	.word	0x08018605
 80185d8:	08018605 	.word	0x08018605
 80185dc:	08018605 	.word	0x08018605
 80185e0:	08018605 	.word	0x08018605
 80185e4:	08018605 	.word	0x08018605
 80185e8:	08018605 	.word	0x08018605
 80185ec:	08018605 	.word	0x08018605
 80185f0:	08018605 	.word	0x08018605
 80185f4:	08018605 	.word	0x08018605
 80185f8:	08018605 	.word	0x08018605
 80185fc:	08018605 	.word	0x08018605
 8018600:	08018605 	.word	0x08018605
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018604:	bf00      	nop
  }

  return (USBD_OK);
 8018606:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018608:	4618      	mov	r0, r3
 801860a:	370c      	adds	r7, #12
 801860c:	46bd      	mov	sp, r7
 801860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018612:	4770      	bx	lr

08018614 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018614:	b580      	push	{r7, lr}
 8018616:	b084      	sub	sp, #16
 8018618:	af00      	add	r7, sp, #0
 801861a:	6078      	str	r0, [r7, #4]
 801861c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801861e:	6879      	ldr	r1, [r7, #4]
 8018620:	480f      	ldr	r0, [pc, #60]	@ (8018660 <CDC_Receive_FS+0x4c>)
 8018622:	f7fa fe9d 	bl	8013360 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018626:	480e      	ldr	r0, [pc, #56]	@ (8018660 <CDC_Receive_FS+0x4c>)
 8018628:	f7fa fef8 	bl	801341c <USBD_CDC_ReceivePacket>

  memset (usbbuffer, '\0', 64);  // clear the buffer
 801862c:	2240      	movs	r2, #64	@ 0x40
 801862e:	2100      	movs	r1, #0
 8018630:	480c      	ldr	r0, [pc, #48]	@ (8018664 <CDC_Receive_FS+0x50>)
 8018632:	f002 fe6a 	bl	801b30a <memset>
  uint8_t len = (uint8_t)*Len;
 8018636:	683b      	ldr	r3, [r7, #0]
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	73fb      	strb	r3, [r7, #15]
  memcpy((uint8_t *) usbbuffer,(uint8_t *) Buf, len);  // copy the data to the buffer
 801863c:	7bfb      	ldrb	r3, [r7, #15]
 801863e:	461a      	mov	r2, r3
 8018640:	6879      	ldr	r1, [r7, #4]
 8018642:	4808      	ldr	r0, [pc, #32]	@ (8018664 <CDC_Receive_FS+0x50>)
 8018644:	f002 ff7d 	bl	801b542 <memcpy>
  memset(Buf, '\0', len);
 8018648:	7bfb      	ldrb	r3, [r7, #15]
 801864a:	461a      	mov	r2, r3
 801864c:	2100      	movs	r1, #0
 801864e:	6878      	ldr	r0, [r7, #4]
 8018650:	f002 fe5b 	bl	801b30a <memset>
  return (USBD_OK);
 8018654:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018656:	4618      	mov	r0, r3
 8018658:	3710      	adds	r7, #16
 801865a:	46bd      	mov	sp, r7
 801865c:	bd80      	pop	{r7, pc}
 801865e:	bf00      	nop
 8018660:	200014ec 	.word	0x200014ec
 8018664:	20000af4 	.word	0x20000af4

08018668 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8018668:	b580      	push	{r7, lr}
 801866a:	b084      	sub	sp, #16
 801866c:	af00      	add	r7, sp, #0
 801866e:	6078      	str	r0, [r7, #4]
 8018670:	460b      	mov	r3, r1
 8018672:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018674:	2300      	movs	r3, #0
 8018676:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8018678:	4b0d      	ldr	r3, [pc, #52]	@ (80186b0 <CDC_Transmit_FS+0x48>)
 801867a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801867e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018680:	68bb      	ldr	r3, [r7, #8]
 8018682:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8018686:	2b00      	cmp	r3, #0
 8018688:	d001      	beq.n	801868e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801868a:	2301      	movs	r3, #1
 801868c:	e00b      	b.n	80186a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801868e:	887b      	ldrh	r3, [r7, #2]
 8018690:	461a      	mov	r2, r3
 8018692:	6879      	ldr	r1, [r7, #4]
 8018694:	4806      	ldr	r0, [pc, #24]	@ (80186b0 <CDC_Transmit_FS+0x48>)
 8018696:	f7fa fe41 	bl	801331c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801869a:	4805      	ldr	r0, [pc, #20]	@ (80186b0 <CDC_Transmit_FS+0x48>)
 801869c:	f7fa fe7e 	bl	801339c <USBD_CDC_TransmitPacket>
 80186a0:	4603      	mov	r3, r0
 80186a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80186a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80186a6:	4618      	mov	r0, r3
 80186a8:	3710      	adds	r7, #16
 80186aa:	46bd      	mov	sp, r7
 80186ac:	bd80      	pop	{r7, pc}
 80186ae:	bf00      	nop
 80186b0:	200014ec 	.word	0x200014ec

080186b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80186b4:	b480      	push	{r7}
 80186b6:	b087      	sub	sp, #28
 80186b8:	af00      	add	r7, sp, #0
 80186ba:	60f8      	str	r0, [r7, #12]
 80186bc:	60b9      	str	r1, [r7, #8]
 80186be:	4613      	mov	r3, r2
 80186c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80186c2:	2300      	movs	r3, #0
 80186c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80186c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80186ca:	4618      	mov	r0, r3
 80186cc:	371c      	adds	r7, #28
 80186ce:	46bd      	mov	sp, r7
 80186d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d4:	4770      	bx	lr
	...

080186d8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80186d8:	b480      	push	{r7}
 80186da:	b083      	sub	sp, #12
 80186dc:	af00      	add	r7, sp, #0
 80186de:	4603      	mov	r3, r0
 80186e0:	6039      	str	r1, [r7, #0]
 80186e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80186e4:	683b      	ldr	r3, [r7, #0]
 80186e6:	2212      	movs	r2, #18
 80186e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80186ea:	4b03      	ldr	r3, [pc, #12]	@ (80186f8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80186ec:	4618      	mov	r0, r3
 80186ee:	370c      	adds	r7, #12
 80186f0:	46bd      	mov	sp, r7
 80186f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186f6:	4770      	bx	lr
 80186f8:	2000010c 	.word	0x2000010c

080186fc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80186fc:	b480      	push	{r7}
 80186fe:	b083      	sub	sp, #12
 8018700:	af00      	add	r7, sp, #0
 8018702:	4603      	mov	r3, r0
 8018704:	6039      	str	r1, [r7, #0]
 8018706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018708:	683b      	ldr	r3, [r7, #0]
 801870a:	2204      	movs	r2, #4
 801870c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801870e:	4b03      	ldr	r3, [pc, #12]	@ (801871c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8018710:	4618      	mov	r0, r3
 8018712:	370c      	adds	r7, #12
 8018714:	46bd      	mov	sp, r7
 8018716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801871a:	4770      	bx	lr
 801871c:	20000120 	.word	0x20000120

08018720 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018720:	b580      	push	{r7, lr}
 8018722:	b082      	sub	sp, #8
 8018724:	af00      	add	r7, sp, #0
 8018726:	4603      	mov	r3, r0
 8018728:	6039      	str	r1, [r7, #0]
 801872a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801872c:	79fb      	ldrb	r3, [r7, #7]
 801872e:	2b00      	cmp	r3, #0
 8018730:	d105      	bne.n	801873e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018732:	683a      	ldr	r2, [r7, #0]
 8018734:	4907      	ldr	r1, [pc, #28]	@ (8018754 <USBD_CDC_ProductStrDescriptor+0x34>)
 8018736:	4808      	ldr	r0, [pc, #32]	@ (8018758 <USBD_CDC_ProductStrDescriptor+0x38>)
 8018738:	f7fc f854 	bl	80147e4 <USBD_GetString>
 801873c:	e004      	b.n	8018748 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801873e:	683a      	ldr	r2, [r7, #0]
 8018740:	4904      	ldr	r1, [pc, #16]	@ (8018754 <USBD_CDC_ProductStrDescriptor+0x34>)
 8018742:	4805      	ldr	r0, [pc, #20]	@ (8018758 <USBD_CDC_ProductStrDescriptor+0x38>)
 8018744:	f7fc f84e 	bl	80147e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018748:	4b02      	ldr	r3, [pc, #8]	@ (8018754 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801874a:	4618      	mov	r0, r3
 801874c:	3708      	adds	r7, #8
 801874e:	46bd      	mov	sp, r7
 8018750:	bd80      	pop	{r7, pc}
 8018752:	bf00      	nop
 8018754:	200027c8 	.word	0x200027c8
 8018758:	0801fb34 	.word	0x0801fb34

0801875c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801875c:	b580      	push	{r7, lr}
 801875e:	b082      	sub	sp, #8
 8018760:	af00      	add	r7, sp, #0
 8018762:	4603      	mov	r3, r0
 8018764:	6039      	str	r1, [r7, #0]
 8018766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018768:	683a      	ldr	r2, [r7, #0]
 801876a:	4904      	ldr	r1, [pc, #16]	@ (801877c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801876c:	4804      	ldr	r0, [pc, #16]	@ (8018780 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801876e:	f7fc f839 	bl	80147e4 <USBD_GetString>
  return USBD_StrDesc;
 8018772:	4b02      	ldr	r3, [pc, #8]	@ (801877c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8018774:	4618      	mov	r0, r3
 8018776:	3708      	adds	r7, #8
 8018778:	46bd      	mov	sp, r7
 801877a:	bd80      	pop	{r7, pc}
 801877c:	200027c8 	.word	0x200027c8
 8018780:	0801fb4c 	.word	0x0801fb4c

08018784 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018784:	b580      	push	{r7, lr}
 8018786:	b082      	sub	sp, #8
 8018788:	af00      	add	r7, sp, #0
 801878a:	4603      	mov	r3, r0
 801878c:	6039      	str	r1, [r7, #0]
 801878e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018790:	683b      	ldr	r3, [r7, #0]
 8018792:	221a      	movs	r2, #26
 8018794:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018796:	f000 f843 	bl	8018820 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801879a:	4b02      	ldr	r3, [pc, #8]	@ (80187a4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801879c:	4618      	mov	r0, r3
 801879e:	3708      	adds	r7, #8
 80187a0:	46bd      	mov	sp, r7
 80187a2:	bd80      	pop	{r7, pc}
 80187a4:	20000124 	.word	0x20000124

080187a8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b082      	sub	sp, #8
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	4603      	mov	r3, r0
 80187b0:	6039      	str	r1, [r7, #0]
 80187b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80187b4:	79fb      	ldrb	r3, [r7, #7]
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d105      	bne.n	80187c6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80187ba:	683a      	ldr	r2, [r7, #0]
 80187bc:	4907      	ldr	r1, [pc, #28]	@ (80187dc <USBD_CDC_ConfigStrDescriptor+0x34>)
 80187be:	4808      	ldr	r0, [pc, #32]	@ (80187e0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80187c0:	f7fc f810 	bl	80147e4 <USBD_GetString>
 80187c4:	e004      	b.n	80187d0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80187c6:	683a      	ldr	r2, [r7, #0]
 80187c8:	4904      	ldr	r1, [pc, #16]	@ (80187dc <USBD_CDC_ConfigStrDescriptor+0x34>)
 80187ca:	4805      	ldr	r0, [pc, #20]	@ (80187e0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80187cc:	f7fc f80a 	bl	80147e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80187d0:	4b02      	ldr	r3, [pc, #8]	@ (80187dc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80187d2:	4618      	mov	r0, r3
 80187d4:	3708      	adds	r7, #8
 80187d6:	46bd      	mov	sp, r7
 80187d8:	bd80      	pop	{r7, pc}
 80187da:	bf00      	nop
 80187dc:	200027c8 	.word	0x200027c8
 80187e0:	0801fb60 	.word	0x0801fb60

080187e4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	b082      	sub	sp, #8
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	4603      	mov	r3, r0
 80187ec:	6039      	str	r1, [r7, #0]
 80187ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80187f0:	79fb      	ldrb	r3, [r7, #7]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d105      	bne.n	8018802 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80187f6:	683a      	ldr	r2, [r7, #0]
 80187f8:	4907      	ldr	r1, [pc, #28]	@ (8018818 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80187fa:	4808      	ldr	r0, [pc, #32]	@ (801881c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80187fc:	f7fb fff2 	bl	80147e4 <USBD_GetString>
 8018800:	e004      	b.n	801880c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018802:	683a      	ldr	r2, [r7, #0]
 8018804:	4904      	ldr	r1, [pc, #16]	@ (8018818 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8018806:	4805      	ldr	r0, [pc, #20]	@ (801881c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8018808:	f7fb ffec 	bl	80147e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801880c:	4b02      	ldr	r3, [pc, #8]	@ (8018818 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801880e:	4618      	mov	r0, r3
 8018810:	3708      	adds	r7, #8
 8018812:	46bd      	mov	sp, r7
 8018814:	bd80      	pop	{r7, pc}
 8018816:	bf00      	nop
 8018818:	200027c8 	.word	0x200027c8
 801881c:	0801fb6c 	.word	0x0801fb6c

08018820 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018820:	b580      	push	{r7, lr}
 8018822:	b084      	sub	sp, #16
 8018824:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018826:	4b0f      	ldr	r3, [pc, #60]	@ (8018864 <Get_SerialNum+0x44>)
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801882c:	4b0e      	ldr	r3, [pc, #56]	@ (8018868 <Get_SerialNum+0x48>)
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018832:	4b0e      	ldr	r3, [pc, #56]	@ (801886c <Get_SerialNum+0x4c>)
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018838:	68fa      	ldr	r2, [r7, #12]
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	4413      	add	r3, r2
 801883e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	2b00      	cmp	r3, #0
 8018844:	d009      	beq.n	801885a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018846:	2208      	movs	r2, #8
 8018848:	4909      	ldr	r1, [pc, #36]	@ (8018870 <Get_SerialNum+0x50>)
 801884a:	68f8      	ldr	r0, [r7, #12]
 801884c:	f000 f814 	bl	8018878 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018850:	2204      	movs	r2, #4
 8018852:	4908      	ldr	r1, [pc, #32]	@ (8018874 <Get_SerialNum+0x54>)
 8018854:	68b8      	ldr	r0, [r7, #8]
 8018856:	f000 f80f 	bl	8018878 <IntToUnicode>
  }
}
 801885a:	bf00      	nop
 801885c:	3710      	adds	r7, #16
 801885e:	46bd      	mov	sp, r7
 8018860:	bd80      	pop	{r7, pc}
 8018862:	bf00      	nop
 8018864:	1fff7590 	.word	0x1fff7590
 8018868:	1fff7594 	.word	0x1fff7594
 801886c:	1fff7598 	.word	0x1fff7598
 8018870:	20000126 	.word	0x20000126
 8018874:	20000136 	.word	0x20000136

08018878 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018878:	b480      	push	{r7}
 801887a:	b087      	sub	sp, #28
 801887c:	af00      	add	r7, sp, #0
 801887e:	60f8      	str	r0, [r7, #12]
 8018880:	60b9      	str	r1, [r7, #8]
 8018882:	4613      	mov	r3, r2
 8018884:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018886:	2300      	movs	r3, #0
 8018888:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801888a:	2300      	movs	r3, #0
 801888c:	75fb      	strb	r3, [r7, #23]
 801888e:	e027      	b.n	80188e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018890:	68fb      	ldr	r3, [r7, #12]
 8018892:	0f1b      	lsrs	r3, r3, #28
 8018894:	2b09      	cmp	r3, #9
 8018896:	d80b      	bhi.n	80188b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018898:	68fb      	ldr	r3, [r7, #12]
 801889a:	0f1b      	lsrs	r3, r3, #28
 801889c:	b2da      	uxtb	r2, r3
 801889e:	7dfb      	ldrb	r3, [r7, #23]
 80188a0:	005b      	lsls	r3, r3, #1
 80188a2:	4619      	mov	r1, r3
 80188a4:	68bb      	ldr	r3, [r7, #8]
 80188a6:	440b      	add	r3, r1
 80188a8:	3230      	adds	r2, #48	@ 0x30
 80188aa:	b2d2      	uxtb	r2, r2
 80188ac:	701a      	strb	r2, [r3, #0]
 80188ae:	e00a      	b.n	80188c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80188b0:	68fb      	ldr	r3, [r7, #12]
 80188b2:	0f1b      	lsrs	r3, r3, #28
 80188b4:	b2da      	uxtb	r2, r3
 80188b6:	7dfb      	ldrb	r3, [r7, #23]
 80188b8:	005b      	lsls	r3, r3, #1
 80188ba:	4619      	mov	r1, r3
 80188bc:	68bb      	ldr	r3, [r7, #8]
 80188be:	440b      	add	r3, r1
 80188c0:	3237      	adds	r2, #55	@ 0x37
 80188c2:	b2d2      	uxtb	r2, r2
 80188c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	011b      	lsls	r3, r3, #4
 80188ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80188cc:	7dfb      	ldrb	r3, [r7, #23]
 80188ce:	005b      	lsls	r3, r3, #1
 80188d0:	3301      	adds	r3, #1
 80188d2:	68ba      	ldr	r2, [r7, #8]
 80188d4:	4413      	add	r3, r2
 80188d6:	2200      	movs	r2, #0
 80188d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80188da:	7dfb      	ldrb	r3, [r7, #23]
 80188dc:	3301      	adds	r3, #1
 80188de:	75fb      	strb	r3, [r7, #23]
 80188e0:	7dfa      	ldrb	r2, [r7, #23]
 80188e2:	79fb      	ldrb	r3, [r7, #7]
 80188e4:	429a      	cmp	r2, r3
 80188e6:	d3d3      	bcc.n	8018890 <IntToUnicode+0x18>
  }
}
 80188e8:	bf00      	nop
 80188ea:	bf00      	nop
 80188ec:	371c      	adds	r7, #28
 80188ee:	46bd      	mov	sp, r7
 80188f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f4:	4770      	bx	lr

080188f6 <LL_AHB2_GRP1_EnableClock>:
{
 80188f6:	b480      	push	{r7}
 80188f8:	b085      	sub	sp, #20
 80188fa:	af00      	add	r7, sp, #0
 80188fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80188fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018902:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018904:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	4313      	orrs	r3, r2
 801890c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801890e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018912:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	4013      	ands	r3, r2
 8018918:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801891a:	68fb      	ldr	r3, [r7, #12]
}
 801891c:	bf00      	nop
 801891e:	3714      	adds	r7, #20
 8018920:	46bd      	mov	sp, r7
 8018922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018926:	4770      	bx	lr

08018928 <LL_APB1_GRP1_EnableClock>:
{
 8018928:	b480      	push	{r7}
 801892a:	b085      	sub	sp, #20
 801892c:	af00      	add	r7, sp, #0
 801892e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8018930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018934:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018936:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	4313      	orrs	r3, r2
 801893e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8018940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018944:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	4013      	ands	r3, r2
 801894a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801894c:	68fb      	ldr	r3, [r7, #12]
}
 801894e:	bf00      	nop
 8018950:	3714      	adds	r7, #20
 8018952:	46bd      	mov	sp, r7
 8018954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018958:	4770      	bx	lr
	...

0801895c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801895c:	b580      	push	{r7, lr}
 801895e:	b088      	sub	sp, #32
 8018960:	af00      	add	r7, sp, #0
 8018962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018964:	f107 030c 	add.w	r3, r7, #12
 8018968:	2200      	movs	r2, #0
 801896a:	601a      	str	r2, [r3, #0]
 801896c:	605a      	str	r2, [r3, #4]
 801896e:	609a      	str	r2, [r3, #8]
 8018970:	60da      	str	r2, [r3, #12]
 8018972:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	4a13      	ldr	r2, [pc, #76]	@ (80189c8 <HAL_PCD_MspInit+0x6c>)
 801897a:	4293      	cmp	r3, r2
 801897c:	d120      	bne.n	80189c0 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801897e:	2001      	movs	r0, #1
 8018980:	f7ff ffb9 	bl	80188f6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018984:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8018988:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801898a:	2302      	movs	r3, #2
 801898c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801898e:	2300      	movs	r3, #0
 8018990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018992:	2300      	movs	r3, #0
 8018994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8018996:	230a      	movs	r3, #10
 8018998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801899a:	f107 030c 	add.w	r3, r7, #12
 801899e:	4619      	mov	r1, r3
 80189a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80189a4:	f7f0 f93c 	bl	8008c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80189a8:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80189ac:	f7ff ffbc 	bl	8018928 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80189b0:	2200      	movs	r2, #0
 80189b2:	2100      	movs	r1, #0
 80189b4:	2014      	movs	r0, #20
 80189b6:	f7ef fd00 	bl	80083ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80189ba:	2014      	movs	r0, #20
 80189bc:	f7ef fd17 	bl	80083ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80189c0:	bf00      	nop
 80189c2:	3720      	adds	r7, #32
 80189c4:	46bd      	mov	sp, r7
 80189c6:	bd80      	pop	{r7, pc}
 80189c8:	40006800 	.word	0x40006800

080189cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b082      	sub	sp, #8
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80189e0:	4619      	mov	r1, r3
 80189e2:	4610      	mov	r0, r2
 80189e4:	f7fa fe03 	bl	80135ee <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80189e8:	bf00      	nop
 80189ea:	3708      	adds	r7, #8
 80189ec:	46bd      	mov	sp, r7
 80189ee:	bd80      	pop	{r7, pc}

080189f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80189f0:	b580      	push	{r7, lr}
 80189f2:	b082      	sub	sp, #8
 80189f4:	af00      	add	r7, sp, #0
 80189f6:	6078      	str	r0, [r7, #4]
 80189f8:	460b      	mov	r3, r1
 80189fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018a02:	78fa      	ldrb	r2, [r7, #3]
 8018a04:	6879      	ldr	r1, [r7, #4]
 8018a06:	4613      	mov	r3, r2
 8018a08:	009b      	lsls	r3, r3, #2
 8018a0a:	4413      	add	r3, r2
 8018a0c:	00db      	lsls	r3, r3, #3
 8018a0e:	440b      	add	r3, r1
 8018a10:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018a14:	681a      	ldr	r2, [r3, #0]
 8018a16:	78fb      	ldrb	r3, [r7, #3]
 8018a18:	4619      	mov	r1, r3
 8018a1a:	f7fa fe3d 	bl	8013698 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8018a1e:	bf00      	nop
 8018a20:	3708      	adds	r7, #8
 8018a22:	46bd      	mov	sp, r7
 8018a24:	bd80      	pop	{r7, pc}

08018a26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018a26:	b580      	push	{r7, lr}
 8018a28:	b082      	sub	sp, #8
 8018a2a:	af00      	add	r7, sp, #0
 8018a2c:	6078      	str	r0, [r7, #4]
 8018a2e:	460b      	mov	r3, r1
 8018a30:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018a38:	78fa      	ldrb	r2, [r7, #3]
 8018a3a:	6879      	ldr	r1, [r7, #4]
 8018a3c:	4613      	mov	r3, r2
 8018a3e:	009b      	lsls	r3, r3, #2
 8018a40:	4413      	add	r3, r2
 8018a42:	00db      	lsls	r3, r3, #3
 8018a44:	440b      	add	r3, r1
 8018a46:	3324      	adds	r3, #36	@ 0x24
 8018a48:	681a      	ldr	r2, [r3, #0]
 8018a4a:	78fb      	ldrb	r3, [r7, #3]
 8018a4c:	4619      	mov	r1, r3
 8018a4e:	f7fa fed6 	bl	80137fe <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8018a52:	bf00      	nop
 8018a54:	3708      	adds	r7, #8
 8018a56:	46bd      	mov	sp, r7
 8018a58:	bd80      	pop	{r7, pc}

08018a5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018a5a:	b580      	push	{r7, lr}
 8018a5c:	b082      	sub	sp, #8
 8018a5e:	af00      	add	r7, sp, #0
 8018a60:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018a68:	4618      	mov	r0, r3
 8018a6a:	f7fb f810 	bl	8013a8e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8018a6e:	bf00      	nop
 8018a70:	3708      	adds	r7, #8
 8018a72:	46bd      	mov	sp, r7
 8018a74:	bd80      	pop	{r7, pc}

08018a76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018a76:	b580      	push	{r7, lr}
 8018a78:	b084      	sub	sp, #16
 8018a7a:	af00      	add	r7, sp, #0
 8018a7c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018a7e:	2301      	movs	r3, #1
 8018a80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	795b      	ldrb	r3, [r3, #5]
 8018a86:	2b02      	cmp	r3, #2
 8018a88:	d001      	beq.n	8018a8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8018a8a:	f7ea f92d 	bl	8002ce8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018a94:	7bfa      	ldrb	r2, [r7, #15]
 8018a96:	4611      	mov	r1, r2
 8018a98:	4618      	mov	r0, r3
 8018a9a:	f7fa ffb4 	bl	8013a06 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018aa4:	4618      	mov	r0, r3
 8018aa6:	f7fa ff5c 	bl	8013962 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8018aaa:	bf00      	nop
 8018aac:	3710      	adds	r7, #16
 8018aae:	46bd      	mov	sp, r7
 8018ab0:	bd80      	pop	{r7, pc}
	...

08018ab4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ab4:	b580      	push	{r7, lr}
 8018ab6:	b082      	sub	sp, #8
 8018ab8:	af00      	add	r7, sp, #0
 8018aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	f7fa ffaf 	bl	8013a26 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	7a5b      	ldrb	r3, [r3, #9]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d005      	beq.n	8018adc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018ad0:	4b04      	ldr	r3, [pc, #16]	@ (8018ae4 <HAL_PCD_SuspendCallback+0x30>)
 8018ad2:	691b      	ldr	r3, [r3, #16]
 8018ad4:	4a03      	ldr	r2, [pc, #12]	@ (8018ae4 <HAL_PCD_SuspendCallback+0x30>)
 8018ad6:	f043 0306 	orr.w	r3, r3, #6
 8018ada:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8018adc:	bf00      	nop
 8018ade:	3708      	adds	r7, #8
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	bd80      	pop	{r7, pc}
 8018ae4:	e000ed00 	.word	0xe000ed00

08018ae8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b082      	sub	sp, #8
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	7a5b      	ldrb	r3, [r3, #9]
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d007      	beq.n	8018b08 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018af8:	4b08      	ldr	r3, [pc, #32]	@ (8018b1c <HAL_PCD_ResumeCallback+0x34>)
 8018afa:	691b      	ldr	r3, [r3, #16]
 8018afc:	4a07      	ldr	r2, [pc, #28]	@ (8018b1c <HAL_PCD_ResumeCallback+0x34>)
 8018afe:	f023 0306 	bic.w	r3, r3, #6
 8018b02:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8018b04:	f000 f9fa 	bl	8018efc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018b0e:	4618      	mov	r0, r3
 8018b10:	f7fa ffa5 	bl	8013a5e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8018b14:	bf00      	nop
 8018b16:	3708      	adds	r7, #8
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	bd80      	pop	{r7, pc}
 8018b1c:	e000ed00 	.word	0xe000ed00

08018b20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018b20:	b580      	push	{r7, lr}
 8018b22:	b082      	sub	sp, #8
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8018b28:	4a2c      	ldr	r2, [pc, #176]	@ (8018bdc <USBD_LL_Init+0xbc>)
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	4a2a      	ldr	r2, [pc, #168]	@ (8018bdc <USBD_LL_Init+0xbc>)
 8018b34:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8018b38:	f7f2 fdc8 	bl	800b6cc <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8018b3c:	4b27      	ldr	r3, [pc, #156]	@ (8018bdc <USBD_LL_Init+0xbc>)
 8018b3e:	4a28      	ldr	r2, [pc, #160]	@ (8018be0 <USBD_LL_Init+0xc0>)
 8018b40:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8018b42:	4b26      	ldr	r3, [pc, #152]	@ (8018bdc <USBD_LL_Init+0xbc>)
 8018b44:	2208      	movs	r2, #8
 8018b46:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8018b48:	4b24      	ldr	r3, [pc, #144]	@ (8018bdc <USBD_LL_Init+0xbc>)
 8018b4a:	2202      	movs	r2, #2
 8018b4c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018b4e:	4b23      	ldr	r3, [pc, #140]	@ (8018bdc <USBD_LL_Init+0xbc>)
 8018b50:	2202      	movs	r2, #2
 8018b52:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8018b54:	4b21      	ldr	r3, [pc, #132]	@ (8018bdc <USBD_LL_Init+0xbc>)
 8018b56:	2200      	movs	r2, #0
 8018b58:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8018b5a:	4b20      	ldr	r3, [pc, #128]	@ (8018bdc <USBD_LL_Init+0xbc>)
 8018b5c:	2200      	movs	r2, #0
 8018b5e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8018b60:	4b1e      	ldr	r3, [pc, #120]	@ (8018bdc <USBD_LL_Init+0xbc>)
 8018b62:	2200      	movs	r2, #0
 8018b64:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8018b66:	4b1d      	ldr	r3, [pc, #116]	@ (8018bdc <USBD_LL_Init+0xbc>)
 8018b68:	2200      	movs	r2, #0
 8018b6a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8018b6c:	481b      	ldr	r0, [pc, #108]	@ (8018bdc <USBD_LL_Init+0xbc>)
 8018b6e:	f7f1 f88d 	bl	8009c8c <HAL_PCD_Init>
 8018b72:	4603      	mov	r3, r0
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d001      	beq.n	8018b7c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8018b78:	f7ea f8b6 	bl	8002ce8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018b82:	2318      	movs	r3, #24
 8018b84:	2200      	movs	r2, #0
 8018b86:	2100      	movs	r1, #0
 8018b88:	f7f2 fd14 	bl	800b5b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018b92:	2358      	movs	r3, #88	@ 0x58
 8018b94:	2200      	movs	r2, #0
 8018b96:	2180      	movs	r1, #128	@ 0x80
 8018b98:	f7f2 fd0c 	bl	800b5b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018ba2:	23c0      	movs	r3, #192	@ 0xc0
 8018ba4:	2200      	movs	r2, #0
 8018ba6:	2181      	movs	r1, #129	@ 0x81
 8018ba8:	f7f2 fd04 	bl	800b5b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018bb2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8018bb6:	2200      	movs	r2, #0
 8018bb8:	2101      	movs	r1, #1
 8018bba:	f7f2 fcfb 	bl	800b5b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018bc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018bc8:	2200      	movs	r2, #0
 8018bca:	2182      	movs	r1, #130	@ 0x82
 8018bcc:	f7f2 fcf2 	bl	800b5b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8018bd0:	2300      	movs	r3, #0
}
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	3708      	adds	r7, #8
 8018bd6:	46bd      	mov	sp, r7
 8018bd8:	bd80      	pop	{r7, pc}
 8018bda:	bf00      	nop
 8018bdc:	200029c8 	.word	0x200029c8
 8018be0:	40006800 	.word	0x40006800

08018be4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b084      	sub	sp, #16
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018bec:	2300      	movs	r3, #0
 8018bee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018bf0:	2300      	movs	r3, #0
 8018bf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	f7f1 f914 	bl	8009e28 <HAL_PCD_Start>
 8018c00:	4603      	mov	r3, r0
 8018c02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c04:	7bfb      	ldrb	r3, [r7, #15]
 8018c06:	4618      	mov	r0, r3
 8018c08:	f000 f97e 	bl	8018f08 <USBD_Get_USB_Status>
 8018c0c:	4603      	mov	r3, r0
 8018c0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018c10:	7bbb      	ldrb	r3, [r7, #14]
}
 8018c12:	4618      	mov	r0, r3
 8018c14:	3710      	adds	r7, #16
 8018c16:	46bd      	mov	sp, r7
 8018c18:	bd80      	pop	{r7, pc}

08018c1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018c1a:	b580      	push	{r7, lr}
 8018c1c:	b084      	sub	sp, #16
 8018c1e:	af00      	add	r7, sp, #0
 8018c20:	6078      	str	r0, [r7, #4]
 8018c22:	4608      	mov	r0, r1
 8018c24:	4611      	mov	r1, r2
 8018c26:	461a      	mov	r2, r3
 8018c28:	4603      	mov	r3, r0
 8018c2a:	70fb      	strb	r3, [r7, #3]
 8018c2c:	460b      	mov	r3, r1
 8018c2e:	70bb      	strb	r3, [r7, #2]
 8018c30:	4613      	mov	r3, r2
 8018c32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c34:	2300      	movs	r3, #0
 8018c36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c38:	2300      	movs	r3, #0
 8018c3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018c42:	78bb      	ldrb	r3, [r7, #2]
 8018c44:	883a      	ldrh	r2, [r7, #0]
 8018c46:	78f9      	ldrb	r1, [r7, #3]
 8018c48:	f7f1 fa5b 	bl	800a102 <HAL_PCD_EP_Open>
 8018c4c:	4603      	mov	r3, r0
 8018c4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c50:	7bfb      	ldrb	r3, [r7, #15]
 8018c52:	4618      	mov	r0, r3
 8018c54:	f000 f958 	bl	8018f08 <USBD_Get_USB_Status>
 8018c58:	4603      	mov	r3, r0
 8018c5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018c5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8018c5e:	4618      	mov	r0, r3
 8018c60:	3710      	adds	r7, #16
 8018c62:	46bd      	mov	sp, r7
 8018c64:	bd80      	pop	{r7, pc}

08018c66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018c66:	b580      	push	{r7, lr}
 8018c68:	b084      	sub	sp, #16
 8018c6a:	af00      	add	r7, sp, #0
 8018c6c:	6078      	str	r0, [r7, #4]
 8018c6e:	460b      	mov	r3, r1
 8018c70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c72:	2300      	movs	r3, #0
 8018c74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c76:	2300      	movs	r3, #0
 8018c78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018c80:	78fa      	ldrb	r2, [r7, #3]
 8018c82:	4611      	mov	r1, r2
 8018c84:	4618      	mov	r0, r3
 8018c86:	f7f1 fa9b 	bl	800a1c0 <HAL_PCD_EP_Close>
 8018c8a:	4603      	mov	r3, r0
 8018c8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c8e:	7bfb      	ldrb	r3, [r7, #15]
 8018c90:	4618      	mov	r0, r3
 8018c92:	f000 f939 	bl	8018f08 <USBD_Get_USB_Status>
 8018c96:	4603      	mov	r3, r0
 8018c98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018c9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	3710      	adds	r7, #16
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	bd80      	pop	{r7, pc}

08018ca4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018ca4:	b580      	push	{r7, lr}
 8018ca6:	b084      	sub	sp, #16
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]
 8018cac:	460b      	mov	r3, r1
 8018cae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018cb0:	2300      	movs	r3, #0
 8018cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018cb4:	2300      	movs	r3, #0
 8018cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018cbe:	78fa      	ldrb	r2, [r7, #3]
 8018cc0:	4611      	mov	r1, r2
 8018cc2:	4618      	mov	r0, r3
 8018cc4:	f7f1 fb44 	bl	800a350 <HAL_PCD_EP_SetStall>
 8018cc8:	4603      	mov	r3, r0
 8018cca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018ccc:	7bfb      	ldrb	r3, [r7, #15]
 8018cce:	4618      	mov	r0, r3
 8018cd0:	f000 f91a 	bl	8018f08 <USBD_Get_USB_Status>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8018cda:	4618      	mov	r0, r3
 8018cdc:	3710      	adds	r7, #16
 8018cde:	46bd      	mov	sp, r7
 8018ce0:	bd80      	pop	{r7, pc}

08018ce2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018ce2:	b580      	push	{r7, lr}
 8018ce4:	b084      	sub	sp, #16
 8018ce6:	af00      	add	r7, sp, #0
 8018ce8:	6078      	str	r0, [r7, #4]
 8018cea:	460b      	mov	r3, r1
 8018cec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018cee:	2300      	movs	r3, #0
 8018cf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018cf2:	2300      	movs	r3, #0
 8018cf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018cfc:	78fa      	ldrb	r2, [r7, #3]
 8018cfe:	4611      	mov	r1, r2
 8018d00:	4618      	mov	r0, r3
 8018d02:	f7f1 fb77 	bl	800a3f4 <HAL_PCD_EP_ClrStall>
 8018d06:	4603      	mov	r3, r0
 8018d08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018d0a:	7bfb      	ldrb	r3, [r7, #15]
 8018d0c:	4618      	mov	r0, r3
 8018d0e:	f000 f8fb 	bl	8018f08 <USBD_Get_USB_Status>
 8018d12:	4603      	mov	r3, r0
 8018d14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018d16:	7bbb      	ldrb	r3, [r7, #14]
}
 8018d18:	4618      	mov	r0, r3
 8018d1a:	3710      	adds	r7, #16
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	bd80      	pop	{r7, pc}

08018d20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018d20:	b480      	push	{r7}
 8018d22:	b085      	sub	sp, #20
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
 8018d28:	460b      	mov	r3, r1
 8018d2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018d32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018d34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	da0b      	bge.n	8018d54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018d3c:	78fb      	ldrb	r3, [r7, #3]
 8018d3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018d42:	68f9      	ldr	r1, [r7, #12]
 8018d44:	4613      	mov	r3, r2
 8018d46:	009b      	lsls	r3, r3, #2
 8018d48:	4413      	add	r3, r2
 8018d4a:	00db      	lsls	r3, r3, #3
 8018d4c:	440b      	add	r3, r1
 8018d4e:	3312      	adds	r3, #18
 8018d50:	781b      	ldrb	r3, [r3, #0]
 8018d52:	e00b      	b.n	8018d6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018d54:	78fb      	ldrb	r3, [r7, #3]
 8018d56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018d5a:	68f9      	ldr	r1, [r7, #12]
 8018d5c:	4613      	mov	r3, r2
 8018d5e:	009b      	lsls	r3, r3, #2
 8018d60:	4413      	add	r3, r2
 8018d62:	00db      	lsls	r3, r3, #3
 8018d64:	440b      	add	r3, r1
 8018d66:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8018d6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	3714      	adds	r7, #20
 8018d70:	46bd      	mov	sp, r7
 8018d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d76:	4770      	bx	lr

08018d78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b084      	sub	sp, #16
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
 8018d80:	460b      	mov	r3, r1
 8018d82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018d84:	2300      	movs	r3, #0
 8018d86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d88:	2300      	movs	r3, #0
 8018d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018d92:	78fa      	ldrb	r2, [r7, #3]
 8018d94:	4611      	mov	r1, r2
 8018d96:	4618      	mov	r0, r3
 8018d98:	f7f1 f98f 	bl	800a0ba <HAL_PCD_SetAddress>
 8018d9c:	4603      	mov	r3, r0
 8018d9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018da0:	7bfb      	ldrb	r3, [r7, #15]
 8018da2:	4618      	mov	r0, r3
 8018da4:	f000 f8b0 	bl	8018f08 <USBD_Get_USB_Status>
 8018da8:	4603      	mov	r3, r0
 8018daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8018dae:	4618      	mov	r0, r3
 8018db0:	3710      	adds	r7, #16
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd80      	pop	{r7, pc}

08018db6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018db6:	b580      	push	{r7, lr}
 8018db8:	b086      	sub	sp, #24
 8018dba:	af00      	add	r7, sp, #0
 8018dbc:	60f8      	str	r0, [r7, #12]
 8018dbe:	607a      	str	r2, [r7, #4]
 8018dc0:	603b      	str	r3, [r7, #0]
 8018dc2:	460b      	mov	r3, r1
 8018dc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018dc6:	2300      	movs	r3, #0
 8018dc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018dca:	2300      	movs	r3, #0
 8018dcc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018dd4:	7af9      	ldrb	r1, [r7, #11]
 8018dd6:	683b      	ldr	r3, [r7, #0]
 8018dd8:	687a      	ldr	r2, [r7, #4]
 8018dda:	f7f1 fa82 	bl	800a2e2 <HAL_PCD_EP_Transmit>
 8018dde:	4603      	mov	r3, r0
 8018de0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018de2:	7dfb      	ldrb	r3, [r7, #23]
 8018de4:	4618      	mov	r0, r3
 8018de6:	f000 f88f 	bl	8018f08 <USBD_Get_USB_Status>
 8018dea:	4603      	mov	r3, r0
 8018dec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018dee:	7dbb      	ldrb	r3, [r7, #22]
}
 8018df0:	4618      	mov	r0, r3
 8018df2:	3718      	adds	r7, #24
 8018df4:	46bd      	mov	sp, r7
 8018df6:	bd80      	pop	{r7, pc}

08018df8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018df8:	b580      	push	{r7, lr}
 8018dfa:	b086      	sub	sp, #24
 8018dfc:	af00      	add	r7, sp, #0
 8018dfe:	60f8      	str	r0, [r7, #12]
 8018e00:	607a      	str	r2, [r7, #4]
 8018e02:	603b      	str	r3, [r7, #0]
 8018e04:	460b      	mov	r3, r1
 8018e06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018e08:	2300      	movs	r3, #0
 8018e0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018e0c:	2300      	movs	r3, #0
 8018e0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018e16:	7af9      	ldrb	r1, [r7, #11]
 8018e18:	683b      	ldr	r3, [r7, #0]
 8018e1a:	687a      	ldr	r2, [r7, #4]
 8018e1c:	f7f1 fa18 	bl	800a250 <HAL_PCD_EP_Receive>
 8018e20:	4603      	mov	r3, r0
 8018e22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e24:	7dfb      	ldrb	r3, [r7, #23]
 8018e26:	4618      	mov	r0, r3
 8018e28:	f000 f86e 	bl	8018f08 <USBD_Get_USB_Status>
 8018e2c:	4603      	mov	r3, r0
 8018e2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018e30:	7dbb      	ldrb	r3, [r7, #22]
}
 8018e32:	4618      	mov	r0, r3
 8018e34:	3718      	adds	r7, #24
 8018e36:	46bd      	mov	sp, r7
 8018e38:	bd80      	pop	{r7, pc}

08018e3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018e3a:	b580      	push	{r7, lr}
 8018e3c:	b082      	sub	sp, #8
 8018e3e:	af00      	add	r7, sp, #0
 8018e40:	6078      	str	r0, [r7, #4]
 8018e42:	460b      	mov	r3, r1
 8018e44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018e4c:	78fa      	ldrb	r2, [r7, #3]
 8018e4e:	4611      	mov	r1, r2
 8018e50:	4618      	mov	r0, r3
 8018e52:	f7f1 fa2e 	bl	800a2b2 <HAL_PCD_EP_GetRxCount>
 8018e56:	4603      	mov	r3, r0
}
 8018e58:	4618      	mov	r0, r3
 8018e5a:	3708      	adds	r7, #8
 8018e5c:	46bd      	mov	sp, r7
 8018e5e:	bd80      	pop	{r7, pc}

08018e60 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e60:	b580      	push	{r7, lr}
 8018e62:	b082      	sub	sp, #8
 8018e64:	af00      	add	r7, sp, #0
 8018e66:	6078      	str	r0, [r7, #4]
 8018e68:	460b      	mov	r3, r1
 8018e6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8018e6c:	78fb      	ldrb	r3, [r7, #3]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d002      	beq.n	8018e78 <HAL_PCDEx_LPM_Callback+0x18>
 8018e72:	2b01      	cmp	r3, #1
 8018e74:	d013      	beq.n	8018e9e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8018e76:	e023      	b.n	8018ec0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	7a5b      	ldrb	r3, [r3, #9]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d007      	beq.n	8018e90 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8018e80:	f000 f83c 	bl	8018efc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018e84:	4b10      	ldr	r3, [pc, #64]	@ (8018ec8 <HAL_PCDEx_LPM_Callback+0x68>)
 8018e86:	691b      	ldr	r3, [r3, #16]
 8018e88:	4a0f      	ldr	r2, [pc, #60]	@ (8018ec8 <HAL_PCDEx_LPM_Callback+0x68>)
 8018e8a:	f023 0306 	bic.w	r3, r3, #6
 8018e8e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018e96:	4618      	mov	r0, r3
 8018e98:	f7fa fde1 	bl	8013a5e <USBD_LL_Resume>
    break;
 8018e9c:	e010      	b.n	8018ec0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	f7fa fdbe 	bl	8013a26 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	7a5b      	ldrb	r3, [r3, #9]
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d005      	beq.n	8018ebe <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018eb2:	4b05      	ldr	r3, [pc, #20]	@ (8018ec8 <HAL_PCDEx_LPM_Callback+0x68>)
 8018eb4:	691b      	ldr	r3, [r3, #16]
 8018eb6:	4a04      	ldr	r2, [pc, #16]	@ (8018ec8 <HAL_PCDEx_LPM_Callback+0x68>)
 8018eb8:	f043 0306 	orr.w	r3, r3, #6
 8018ebc:	6113      	str	r3, [r2, #16]
    break;
 8018ebe:	bf00      	nop
}
 8018ec0:	bf00      	nop
 8018ec2:	3708      	adds	r7, #8
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	bd80      	pop	{r7, pc}
 8018ec8:	e000ed00 	.word	0xe000ed00

08018ecc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018ecc:	b480      	push	{r7}
 8018ece:	b083      	sub	sp, #12
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018ed4:	4b03      	ldr	r3, [pc, #12]	@ (8018ee4 <USBD_static_malloc+0x18>)
}
 8018ed6:	4618      	mov	r0, r3
 8018ed8:	370c      	adds	r7, #12
 8018eda:	46bd      	mov	sp, r7
 8018edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ee0:	4770      	bx	lr
 8018ee2:	bf00      	nop
 8018ee4:	20002ca4 	.word	0x20002ca4

08018ee8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018ee8:	b480      	push	{r7}
 8018eea:	b083      	sub	sp, #12
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8018ef0:	bf00      	nop
 8018ef2:	370c      	adds	r7, #12
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018efa:	4770      	bx	lr

08018efc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8018efc:	b580      	push	{r7, lr}
 8018efe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8018f00:	f7e9 fe54 	bl	8002bac <SystemClock_Config>
}
 8018f04:	bf00      	nop
 8018f06:	bd80      	pop	{r7, pc}

08018f08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018f08:	b480      	push	{r7}
 8018f0a:	b085      	sub	sp, #20
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	4603      	mov	r3, r0
 8018f10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f12:	2300      	movs	r3, #0
 8018f14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018f16:	79fb      	ldrb	r3, [r7, #7]
 8018f18:	2b03      	cmp	r3, #3
 8018f1a:	d817      	bhi.n	8018f4c <USBD_Get_USB_Status+0x44>
 8018f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8018f24 <USBD_Get_USB_Status+0x1c>)
 8018f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f22:	bf00      	nop
 8018f24:	08018f35 	.word	0x08018f35
 8018f28:	08018f3b 	.word	0x08018f3b
 8018f2c:	08018f41 	.word	0x08018f41
 8018f30:	08018f47 	.word	0x08018f47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018f34:	2300      	movs	r3, #0
 8018f36:	73fb      	strb	r3, [r7, #15]
    break;
 8018f38:	e00b      	b.n	8018f52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018f3a:	2303      	movs	r3, #3
 8018f3c:	73fb      	strb	r3, [r7, #15]
    break;
 8018f3e:	e008      	b.n	8018f52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018f40:	2301      	movs	r3, #1
 8018f42:	73fb      	strb	r3, [r7, #15]
    break;
 8018f44:	e005      	b.n	8018f52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018f46:	2303      	movs	r3, #3
 8018f48:	73fb      	strb	r3, [r7, #15]
    break;
 8018f4a:	e002      	b.n	8018f52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018f4c:	2303      	movs	r3, #3
 8018f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8018f50:	bf00      	nop
  }
  return usb_status;
 8018f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f54:	4618      	mov	r0, r3
 8018f56:	3714      	adds	r7, #20
 8018f58:	46bd      	mov	sp, r7
 8018f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f5e:	4770      	bx	lr

08018f60 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8018f60:	b480      	push	{r7}
 8018f62:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8018f64:	4b05      	ldr	r3, [pc, #20]	@ (8018f7c <UTIL_LPM_Init+0x1c>)
 8018f66:	2200      	movs	r2, #0
 8018f68:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8018f6a:	4b05      	ldr	r3, [pc, #20]	@ (8018f80 <UTIL_LPM_Init+0x20>)
 8018f6c:	2200      	movs	r2, #0
 8018f6e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8018f70:	bf00      	nop
 8018f72:	46bd      	mov	sp, r7
 8018f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f78:	4770      	bx	lr
 8018f7a:	bf00      	nop
 8018f7c:	20002ec4 	.word	0x20002ec4
 8018f80:	20002ec8 	.word	0x20002ec8

08018f84 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8018f84:	b480      	push	{r7}
 8018f86:	b087      	sub	sp, #28
 8018f88:	af00      	add	r7, sp, #0
 8018f8a:	6078      	str	r0, [r7, #4]
 8018f8c:	460b      	mov	r3, r1
 8018f8e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f90:	f3ef 8310 	mrs	r3, PRIMASK
 8018f94:	613b      	str	r3, [r7, #16]
  return(result);
 8018f96:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8018f98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018f9a:	b672      	cpsid	i
}
 8018f9c:	bf00      	nop
  
  switch(state)
 8018f9e:	78fb      	ldrb	r3, [r7, #3]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d008      	beq.n	8018fb6 <UTIL_LPM_SetOffMode+0x32>
 8018fa4:	2b01      	cmp	r3, #1
 8018fa6:	d10e      	bne.n	8018fc6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8018fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8018fe0 <UTIL_LPM_SetOffMode+0x5c>)
 8018faa:	681a      	ldr	r2, [r3, #0]
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	4313      	orrs	r3, r2
 8018fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8018fe0 <UTIL_LPM_SetOffMode+0x5c>)
 8018fb2:	6013      	str	r3, [r2, #0]
      break;
 8018fb4:	e008      	b.n	8018fc8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	43da      	mvns	r2, r3
 8018fba:	4b09      	ldr	r3, [pc, #36]	@ (8018fe0 <UTIL_LPM_SetOffMode+0x5c>)
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	4013      	ands	r3, r2
 8018fc0:	4a07      	ldr	r2, [pc, #28]	@ (8018fe0 <UTIL_LPM_SetOffMode+0x5c>)
 8018fc2:	6013      	str	r3, [r2, #0]
      break;
 8018fc4:	e000      	b.n	8018fc8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8018fc6:	bf00      	nop
 8018fc8:	697b      	ldr	r3, [r7, #20]
 8018fca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018fcc:	68fb      	ldr	r3, [r7, #12]
 8018fce:	f383 8810 	msr	PRIMASK, r3
}
 8018fd2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8018fd4:	bf00      	nop
 8018fd6:	371c      	adds	r7, #28
 8018fd8:	46bd      	mov	sp, r7
 8018fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fde:	4770      	bx	lr
 8018fe0:	20002ec8 	.word	0x20002ec8

08018fe4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8018fe4:	b580      	push	{r7, lr}
 8018fe6:	b090      	sub	sp, #64	@ 0x40
 8018fe8:	af00      	add	r7, sp, #0
 8018fea:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8018fec:	4b73      	ldr	r3, [pc, #460]	@ (80191bc <UTIL_SEQ_Run+0x1d8>)
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8018ff2:	4b72      	ldr	r3, [pc, #456]	@ (80191bc <UTIL_SEQ_Run+0x1d8>)
 8018ff4:	681a      	ldr	r2, [r3, #0]
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	4013      	ands	r3, r2
 8018ffa:	4a70      	ldr	r2, [pc, #448]	@ (80191bc <UTIL_SEQ_Run+0x1d8>)
 8018ffc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8018ffe:	4b70      	ldr	r3, [pc, #448]	@ (80191c0 <UTIL_SEQ_Run+0x1dc>)
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8019004:	4b6f      	ldr	r3, [pc, #444]	@ (80191c4 <UTIL_SEQ_Run+0x1e0>)
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801900a:	4b6f      	ldr	r3, [pc, #444]	@ (80191c8 <UTIL_SEQ_Run+0x1e4>)
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8019010:	4b6e      	ldr	r3, [pc, #440]	@ (80191cc <UTIL_SEQ_Run+0x1e8>)
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019016:	e08d      	b.n	8019134 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8019018:	2300      	movs	r3, #0
 801901a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801901c:	e002      	b.n	8019024 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801901e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019020:	3301      	adds	r3, #1
 8019022:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019024:	4a6a      	ldr	r2, [pc, #424]	@ (80191d0 <UTIL_SEQ_Run+0x1ec>)
 8019026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019028:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801902c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801902e:	401a      	ands	r2, r3
 8019030:	4b62      	ldr	r3, [pc, #392]	@ (80191bc <UTIL_SEQ_Run+0x1d8>)
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	4013      	ands	r3, r2
 8019036:	2b00      	cmp	r3, #0
 8019038:	d0f1      	beq.n	801901e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801903a:	4a65      	ldr	r2, [pc, #404]	@ (80191d0 <UTIL_SEQ_Run+0x1ec>)
 801903c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801903e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019044:	401a      	ands	r2, r3
 8019046:	4b5d      	ldr	r3, [pc, #372]	@ (80191bc <UTIL_SEQ_Run+0x1d8>)
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	4013      	ands	r3, r2
 801904c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801904e:	4a60      	ldr	r2, [pc, #384]	@ (80191d0 <UTIL_SEQ_Run+0x1ec>)
 8019050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019052:	00db      	lsls	r3, r3, #3
 8019054:	4413      	add	r3, r2
 8019056:	685a      	ldr	r2, [r3, #4]
 8019058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801905a:	4013      	ands	r3, r2
 801905c:	2b00      	cmp	r3, #0
 801905e:	d106      	bne.n	801906e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8019060:	4a5b      	ldr	r2, [pc, #364]	@ (80191d0 <UTIL_SEQ_Run+0x1ec>)
 8019062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019064:	00db      	lsls	r3, r3, #3
 8019066:	4413      	add	r3, r2
 8019068:	f04f 32ff 	mov.w	r2, #4294967295
 801906c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801906e:	4a58      	ldr	r2, [pc, #352]	@ (80191d0 <UTIL_SEQ_Run+0x1ec>)
 8019070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019072:	00db      	lsls	r3, r3, #3
 8019074:	4413      	add	r3, r2
 8019076:	685a      	ldr	r2, [r3, #4]
 8019078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801907a:	4013      	ands	r3, r2
 801907c:	4618      	mov	r0, r3
 801907e:	f000 f9b3 	bl	80193e8 <SEQ_BitPosition>
 8019082:	4603      	mov	r3, r0
 8019084:	461a      	mov	r2, r3
 8019086:	4b53      	ldr	r3, [pc, #332]	@ (80191d4 <UTIL_SEQ_Run+0x1f0>)
 8019088:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801908a:	4a51      	ldr	r2, [pc, #324]	@ (80191d0 <UTIL_SEQ_Run+0x1ec>)
 801908c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801908e:	00db      	lsls	r3, r3, #3
 8019090:	4413      	add	r3, r2
 8019092:	685a      	ldr	r2, [r3, #4]
 8019094:	4b4f      	ldr	r3, [pc, #316]	@ (80191d4 <UTIL_SEQ_Run+0x1f0>)
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	2101      	movs	r1, #1
 801909a:	fa01 f303 	lsl.w	r3, r1, r3
 801909e:	43db      	mvns	r3, r3
 80190a0:	401a      	ands	r2, r3
 80190a2:	494b      	ldr	r1, [pc, #300]	@ (80191d0 <UTIL_SEQ_Run+0x1ec>)
 80190a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190a6:	00db      	lsls	r3, r3, #3
 80190a8:	440b      	add	r3, r1
 80190aa:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80190ac:	f3ef 8310 	mrs	r3, PRIMASK
 80190b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80190b2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80190b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80190b6:	b672      	cpsid	i
}
 80190b8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80190ba:	4b46      	ldr	r3, [pc, #280]	@ (80191d4 <UTIL_SEQ_Run+0x1f0>)
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	2201      	movs	r2, #1
 80190c0:	fa02 f303 	lsl.w	r3, r2, r3
 80190c4:	43da      	mvns	r2, r3
 80190c6:	4b3e      	ldr	r3, [pc, #248]	@ (80191c0 <UTIL_SEQ_Run+0x1dc>)
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	4013      	ands	r3, r2
 80190cc:	4a3c      	ldr	r2, [pc, #240]	@ (80191c0 <UTIL_SEQ_Run+0x1dc>)
 80190ce:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80190d0:	2301      	movs	r3, #1
 80190d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80190d4:	e013      	b.n	80190fe <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80190d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190d8:	3b01      	subs	r3, #1
 80190da:	4a3d      	ldr	r2, [pc, #244]	@ (80191d0 <UTIL_SEQ_Run+0x1ec>)
 80190dc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80190e0:	4b3c      	ldr	r3, [pc, #240]	@ (80191d4 <UTIL_SEQ_Run+0x1f0>)
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	2201      	movs	r2, #1
 80190e6:	fa02 f303 	lsl.w	r3, r2, r3
 80190ea:	43da      	mvns	r2, r3
 80190ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190ee:	3b01      	subs	r3, #1
 80190f0:	400a      	ands	r2, r1
 80190f2:	4937      	ldr	r1, [pc, #220]	@ (80191d0 <UTIL_SEQ_Run+0x1ec>)
 80190f4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80190f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190fa:	3b01      	subs	r3, #1
 80190fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80190fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019100:	2b00      	cmp	r3, #0
 8019102:	d1e8      	bne.n	80190d6 <UTIL_SEQ_Run+0xf2>
 8019104:	6a3b      	ldr	r3, [r7, #32]
 8019106:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019108:	697b      	ldr	r3, [r7, #20]
 801910a:	f383 8810 	msr	PRIMASK, r3
}
 801910e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8019110:	4b30      	ldr	r3, [pc, #192]	@ (80191d4 <UTIL_SEQ_Run+0x1f0>)
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	4a30      	ldr	r2, [pc, #192]	@ (80191d8 <UTIL_SEQ_Run+0x1f4>)
 8019116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801911a:	4798      	blx	r3

    local_taskset = TaskSet;
 801911c:	4b28      	ldr	r3, [pc, #160]	@ (80191c0 <UTIL_SEQ_Run+0x1dc>)
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8019122:	4b28      	ldr	r3, [pc, #160]	@ (80191c4 <UTIL_SEQ_Run+0x1e0>)
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8019128:	4b27      	ldr	r3, [pc, #156]	@ (80191c8 <UTIL_SEQ_Run+0x1e4>)
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801912e:	4b27      	ldr	r3, [pc, #156]	@ (80191cc <UTIL_SEQ_Run+0x1e8>)
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019134:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019138:	401a      	ands	r2, r3
 801913a:	4b20      	ldr	r3, [pc, #128]	@ (80191bc <UTIL_SEQ_Run+0x1d8>)
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	4013      	ands	r3, r2
 8019140:	2b00      	cmp	r3, #0
 8019142:	d005      	beq.n	8019150 <UTIL_SEQ_Run+0x16c>
 8019144:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019148:	4013      	ands	r3, r2
 801914a:	2b00      	cmp	r3, #0
 801914c:	f43f af64 	beq.w	8019018 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8019150:	4b20      	ldr	r3, [pc, #128]	@ (80191d4 <UTIL_SEQ_Run+0x1f0>)
 8019152:	f04f 32ff 	mov.w	r2, #4294967295
 8019156:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8019158:	f000 f938 	bl	80193cc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801915c:	f3ef 8310 	mrs	r3, PRIMASK
 8019160:	613b      	str	r3, [r7, #16]
  return(result);
 8019162:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8019164:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019166:	b672      	cpsid	i
}
 8019168:	bf00      	nop
  local_taskset = TaskSet;
 801916a:	4b15      	ldr	r3, [pc, #84]	@ (80191c0 <UTIL_SEQ_Run+0x1dc>)
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8019170:	4b14      	ldr	r3, [pc, #80]	@ (80191c4 <UTIL_SEQ_Run+0x1e0>)
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8019176:	4b14      	ldr	r3, [pc, #80]	@ (80191c8 <UTIL_SEQ_Run+0x1e4>)
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801917c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801917e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019180:	401a      	ands	r2, r3
 8019182:	4b0e      	ldr	r3, [pc, #56]	@ (80191bc <UTIL_SEQ_Run+0x1d8>)
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	4013      	ands	r3, r2
 8019188:	2b00      	cmp	r3, #0
 801918a:	d107      	bne.n	801919c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801918c:	4b0f      	ldr	r3, [pc, #60]	@ (80191cc <UTIL_SEQ_Run+0x1e8>)
 801918e:	681a      	ldr	r2, [r3, #0]
 8019190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019192:	4013      	ands	r3, r2
 8019194:	2b00      	cmp	r3, #0
 8019196:	d101      	bne.n	801919c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8019198:	f7e8 faf6 	bl	8001788 <UTIL_SEQ_Idle>
 801919c:	69fb      	ldr	r3, [r7, #28]
 801919e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	f383 8810 	msr	PRIMASK, r3
}
 80191a6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80191a8:	f000 f917 	bl	80193da <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80191ac:	4a03      	ldr	r2, [pc, #12]	@ (80191bc <UTIL_SEQ_Run+0x1d8>)
 80191ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191b0:	6013      	str	r3, [r2, #0]

  return;
 80191b2:	bf00      	nop
}
 80191b4:	3740      	adds	r7, #64	@ 0x40
 80191b6:	46bd      	mov	sp, r7
 80191b8:	bd80      	pop	{r7, pc}
 80191ba:	bf00      	nop
 80191bc:	20000144 	.word	0x20000144
 80191c0:	20002ecc 	.word	0x20002ecc
 80191c4:	20002ed0 	.word	0x20002ed0
 80191c8:	20000140 	.word	0x20000140
 80191cc:	20002ed4 	.word	0x20002ed4
 80191d0:	20002f5c 	.word	0x20002f5c
 80191d4:	20002ed8 	.word	0x20002ed8
 80191d8:	20002edc 	.word	0x20002edc

080191dc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b088      	sub	sp, #32
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	60f8      	str	r0, [r7, #12]
 80191e4:	60b9      	str	r1, [r7, #8]
 80191e6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80191e8:	f3ef 8310 	mrs	r3, PRIMASK
 80191ec:	617b      	str	r3, [r7, #20]
  return(result);
 80191ee:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80191f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80191f2:	b672      	cpsid	i
}
 80191f4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80191f6:	68f8      	ldr	r0, [r7, #12]
 80191f8:	f000 f8f6 	bl	80193e8 <SEQ_BitPosition>
 80191fc:	4603      	mov	r3, r0
 80191fe:	4619      	mov	r1, r3
 8019200:	4a06      	ldr	r2, [pc, #24]	@ (801921c <UTIL_SEQ_RegTask+0x40>)
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8019208:	69fb      	ldr	r3, [r7, #28]
 801920a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801920c:	69bb      	ldr	r3, [r7, #24]
 801920e:	f383 8810 	msr	PRIMASK, r3
}
 8019212:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8019214:	bf00      	nop
}
 8019216:	3720      	adds	r7, #32
 8019218:	46bd      	mov	sp, r7
 801921a:	bd80      	pop	{r7, pc}
 801921c:	20002edc 	.word	0x20002edc

08019220 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8019220:	b480      	push	{r7}
 8019222:	b087      	sub	sp, #28
 8019224:	af00      	add	r7, sp, #0
 8019226:	6078      	str	r0, [r7, #4]
 8019228:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801922a:	f3ef 8310 	mrs	r3, PRIMASK
 801922e:	60fb      	str	r3, [r7, #12]
  return(result);
 8019230:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019232:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019234:	b672      	cpsid	i
}
 8019236:	bf00      	nop

  TaskSet |= TaskId_bm;
 8019238:	4b0d      	ldr	r3, [pc, #52]	@ (8019270 <UTIL_SEQ_SetTask+0x50>)
 801923a:	681a      	ldr	r2, [r3, #0]
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	4313      	orrs	r3, r2
 8019240:	4a0b      	ldr	r2, [pc, #44]	@ (8019270 <UTIL_SEQ_SetTask+0x50>)
 8019242:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8019244:	4a0b      	ldr	r2, [pc, #44]	@ (8019274 <UTIL_SEQ_SetTask+0x54>)
 8019246:	683b      	ldr	r3, [r7, #0]
 8019248:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	431a      	orrs	r2, r3
 8019250:	4908      	ldr	r1, [pc, #32]	@ (8019274 <UTIL_SEQ_SetTask+0x54>)
 8019252:	683b      	ldr	r3, [r7, #0]
 8019254:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8019258:	697b      	ldr	r3, [r7, #20]
 801925a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801925c:	693b      	ldr	r3, [r7, #16]
 801925e:	f383 8810 	msr	PRIMASK, r3
}
 8019262:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019264:	bf00      	nop
}
 8019266:	371c      	adds	r7, #28
 8019268:	46bd      	mov	sp, r7
 801926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801926e:	4770      	bx	lr
 8019270:	20002ecc 	.word	0x20002ecc
 8019274:	20002f5c 	.word	0x20002f5c

08019278 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8019278:	b480      	push	{r7}
 801927a:	b087      	sub	sp, #28
 801927c:	af00      	add	r7, sp, #0
 801927e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019280:	f3ef 8310 	mrs	r3, PRIMASK
 8019284:	60fb      	str	r3, [r7, #12]
  return(result);
 8019286:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019288:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801928a:	b672      	cpsid	i
}
 801928c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	43da      	mvns	r2, r3
 8019292:	4b08      	ldr	r3, [pc, #32]	@ (80192b4 <UTIL_SEQ_PauseTask+0x3c>)
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	4013      	ands	r3, r2
 8019298:	4a06      	ldr	r2, [pc, #24]	@ (80192b4 <UTIL_SEQ_PauseTask+0x3c>)
 801929a:	6013      	str	r3, [r2, #0]
 801929c:	697b      	ldr	r3, [r7, #20]
 801929e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192a0:	693b      	ldr	r3, [r7, #16]
 80192a2:	f383 8810 	msr	PRIMASK, r3
}
 80192a6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80192a8:	bf00      	nop
}
 80192aa:	371c      	adds	r7, #28
 80192ac:	46bd      	mov	sp, r7
 80192ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192b2:	4770      	bx	lr
 80192b4:	20000140 	.word	0x20000140

080192b8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80192b8:	b480      	push	{r7}
 80192ba:	b087      	sub	sp, #28
 80192bc:	af00      	add	r7, sp, #0
 80192be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192c0:	f3ef 8310 	mrs	r3, PRIMASK
 80192c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80192c6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80192c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80192ca:	b672      	cpsid	i
}
 80192cc:	bf00      	nop

  TaskMask |= TaskId_bm;
 80192ce:	4b09      	ldr	r3, [pc, #36]	@ (80192f4 <UTIL_SEQ_ResumeTask+0x3c>)
 80192d0:	681a      	ldr	r2, [r3, #0]
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	4313      	orrs	r3, r2
 80192d6:	4a07      	ldr	r2, [pc, #28]	@ (80192f4 <UTIL_SEQ_ResumeTask+0x3c>)
 80192d8:	6013      	str	r3, [r2, #0]
 80192da:	697b      	ldr	r3, [r7, #20]
 80192dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192de:	693b      	ldr	r3, [r7, #16]
 80192e0:	f383 8810 	msr	PRIMASK, r3
}
 80192e4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80192e6:	bf00      	nop
}
 80192e8:	371c      	adds	r7, #28
 80192ea:	46bd      	mov	sp, r7
 80192ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192f0:	4770      	bx	lr
 80192f2:	bf00      	nop
 80192f4:	20000140 	.word	0x20000140

080192f8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80192f8:	b480      	push	{r7}
 80192fa:	b087      	sub	sp, #28
 80192fc:	af00      	add	r7, sp, #0
 80192fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019300:	f3ef 8310 	mrs	r3, PRIMASK
 8019304:	60fb      	str	r3, [r7, #12]
  return(result);
 8019306:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019308:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801930a:	b672      	cpsid	i
}
 801930c:	bf00      	nop

  EvtSet |= EvtId_bm;
 801930e:	4b09      	ldr	r3, [pc, #36]	@ (8019334 <UTIL_SEQ_SetEvt+0x3c>)
 8019310:	681a      	ldr	r2, [r3, #0]
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	4313      	orrs	r3, r2
 8019316:	4a07      	ldr	r2, [pc, #28]	@ (8019334 <UTIL_SEQ_SetEvt+0x3c>)
 8019318:	6013      	str	r3, [r2, #0]
 801931a:	697b      	ldr	r3, [r7, #20]
 801931c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801931e:	693b      	ldr	r3, [r7, #16]
 8019320:	f383 8810 	msr	PRIMASK, r3
}
 8019324:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019326:	bf00      	nop
}
 8019328:	371c      	adds	r7, #28
 801932a:	46bd      	mov	sp, r7
 801932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019330:	4770      	bx	lr
 8019332:	bf00      	nop
 8019334:	20002ed0 	.word	0x20002ed0

08019338 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8019338:	b580      	push	{r7, lr}
 801933a:	b088      	sub	sp, #32
 801933c:	af00      	add	r7, sp, #0
 801933e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8019340:	4b1f      	ldr	r3, [pc, #124]	@ (80193c0 <UTIL_SEQ_WaitEvt+0x88>)
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8019346:	4b1e      	ldr	r3, [pc, #120]	@ (80193c0 <UTIL_SEQ_WaitEvt+0x88>)
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801934e:	d102      	bne.n	8019356 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8019350:	2300      	movs	r3, #0
 8019352:	61fb      	str	r3, [r7, #28]
 8019354:	e005      	b.n	8019362 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8019356:	4b1a      	ldr	r3, [pc, #104]	@ (80193c0 <UTIL_SEQ_WaitEvt+0x88>)
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	2201      	movs	r2, #1
 801935c:	fa02 f303 	lsl.w	r3, r2, r3
 8019360:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8019362:	4b18      	ldr	r3, [pc, #96]	@ (80193c4 <UTIL_SEQ_WaitEvt+0x8c>)
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8019368:	4a16      	ldr	r2, [pc, #88]	@ (80193c4 <UTIL_SEQ_WaitEvt+0x8c>)
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801936e:	e003      	b.n	8019378 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8019370:	6879      	ldr	r1, [r7, #4]
 8019372:	69f8      	ldr	r0, [r7, #28]
 8019374:	f7e8 fa0f 	bl	8001796 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8019378:	4b13      	ldr	r3, [pc, #76]	@ (80193c8 <UTIL_SEQ_WaitEvt+0x90>)
 801937a:	681a      	ldr	r2, [r3, #0]
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	4013      	ands	r3, r2
 8019380:	2b00      	cmp	r3, #0
 8019382:	d0f5      	beq.n	8019370 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8019384:	4a0e      	ldr	r2, [pc, #56]	@ (80193c0 <UTIL_SEQ_WaitEvt+0x88>)
 8019386:	69bb      	ldr	r3, [r7, #24]
 8019388:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801938a:	f3ef 8310 	mrs	r3, PRIMASK
 801938e:	60bb      	str	r3, [r7, #8]
  return(result);
 8019390:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019392:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019394:	b672      	cpsid	i
}
 8019396:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	43da      	mvns	r2, r3
 801939c:	4b0a      	ldr	r3, [pc, #40]	@ (80193c8 <UTIL_SEQ_WaitEvt+0x90>)
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	4013      	ands	r3, r2
 80193a2:	4a09      	ldr	r2, [pc, #36]	@ (80193c8 <UTIL_SEQ_WaitEvt+0x90>)
 80193a4:	6013      	str	r3, [r2, #0]
 80193a6:	693b      	ldr	r3, [r7, #16]
 80193a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193aa:	68fb      	ldr	r3, [r7, #12]
 80193ac:	f383 8810 	msr	PRIMASK, r3
}
 80193b0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80193b2:	4a04      	ldr	r2, [pc, #16]	@ (80193c4 <UTIL_SEQ_WaitEvt+0x8c>)
 80193b4:	697b      	ldr	r3, [r7, #20]
 80193b6:	6013      	str	r3, [r2, #0]
  return;
 80193b8:	bf00      	nop
}
 80193ba:	3720      	adds	r7, #32
 80193bc:	46bd      	mov	sp, r7
 80193be:	bd80      	pop	{r7, pc}
 80193c0:	20002ed8 	.word	0x20002ed8
 80193c4:	20002ed4 	.word	0x20002ed4
 80193c8:	20002ed0 	.word	0x20002ed0

080193cc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80193cc:	b480      	push	{r7}
 80193ce:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80193d0:	bf00      	nop
}
 80193d2:	46bd      	mov	sp, r7
 80193d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193d8:	4770      	bx	lr

080193da <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80193da:	b480      	push	{r7}
 80193dc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80193de:	bf00      	nop
}
 80193e0:	46bd      	mov	sp, r7
 80193e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193e6:	4770      	bx	lr

080193e8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80193e8:	b480      	push	{r7}
 80193ea:	b085      	sub	sp, #20
 80193ec:	af00      	add	r7, sp, #0
 80193ee:	6078      	str	r0, [r7, #4]
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d101      	bne.n	80193fe <SEQ_BitPosition+0x16>
    return 32U;
 80193fa:	2320      	movs	r3, #32
 80193fc:	e003      	b.n	8019406 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	fab3 f383 	clz	r3, r3
 8019404:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 8019406:	f1c3 031f 	rsb	r3, r3, #31
 801940a:	b2db      	uxtb	r3, r3
}
 801940c:	4618      	mov	r0, r3
 801940e:	3714      	adds	r7, #20
 8019410:	46bd      	mov	sp, r7
 8019412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019416:	4770      	bx	lr

08019418 <atoi>:
 8019418:	220a      	movs	r2, #10
 801941a:	2100      	movs	r1, #0
 801941c:	f000 bfa6 	b.w	801a36c <strtol>

08019420 <malloc>:
 8019420:	4b02      	ldr	r3, [pc, #8]	@ (801942c <malloc+0xc>)
 8019422:	4601      	mov	r1, r0
 8019424:	6818      	ldr	r0, [r3, #0]
 8019426:	f000 b82d 	b.w	8019484 <_malloc_r>
 801942a:	bf00      	nop
 801942c:	200002c0 	.word	0x200002c0

08019430 <free>:
 8019430:	4b02      	ldr	r3, [pc, #8]	@ (801943c <free+0xc>)
 8019432:	4601      	mov	r1, r0
 8019434:	6818      	ldr	r0, [r3, #0]
 8019436:	f002 bf0b 	b.w	801c250 <_free_r>
 801943a:	bf00      	nop
 801943c:	200002c0 	.word	0x200002c0

08019440 <sbrk_aligned>:
 8019440:	b570      	push	{r4, r5, r6, lr}
 8019442:	4e0f      	ldr	r6, [pc, #60]	@ (8019480 <sbrk_aligned+0x40>)
 8019444:	460c      	mov	r4, r1
 8019446:	6831      	ldr	r1, [r6, #0]
 8019448:	4605      	mov	r5, r0
 801944a:	b911      	cbnz	r1, 8019452 <sbrk_aligned+0x12>
 801944c:	f002 f822 	bl	801b494 <_sbrk_r>
 8019450:	6030      	str	r0, [r6, #0]
 8019452:	4621      	mov	r1, r4
 8019454:	4628      	mov	r0, r5
 8019456:	f002 f81d 	bl	801b494 <_sbrk_r>
 801945a:	1c43      	adds	r3, r0, #1
 801945c:	d103      	bne.n	8019466 <sbrk_aligned+0x26>
 801945e:	f04f 34ff 	mov.w	r4, #4294967295
 8019462:	4620      	mov	r0, r4
 8019464:	bd70      	pop	{r4, r5, r6, pc}
 8019466:	1cc4      	adds	r4, r0, #3
 8019468:	f024 0403 	bic.w	r4, r4, #3
 801946c:	42a0      	cmp	r0, r4
 801946e:	d0f8      	beq.n	8019462 <sbrk_aligned+0x22>
 8019470:	1a21      	subs	r1, r4, r0
 8019472:	4628      	mov	r0, r5
 8019474:	f002 f80e 	bl	801b494 <_sbrk_r>
 8019478:	3001      	adds	r0, #1
 801947a:	d1f2      	bne.n	8019462 <sbrk_aligned+0x22>
 801947c:	e7ef      	b.n	801945e <sbrk_aligned+0x1e>
 801947e:	bf00      	nop
 8019480:	20002f64 	.word	0x20002f64

08019484 <_malloc_r>:
 8019484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019488:	1ccd      	adds	r5, r1, #3
 801948a:	f025 0503 	bic.w	r5, r5, #3
 801948e:	3508      	adds	r5, #8
 8019490:	2d0c      	cmp	r5, #12
 8019492:	bf38      	it	cc
 8019494:	250c      	movcc	r5, #12
 8019496:	2d00      	cmp	r5, #0
 8019498:	4606      	mov	r6, r0
 801949a:	db01      	blt.n	80194a0 <_malloc_r+0x1c>
 801949c:	42a9      	cmp	r1, r5
 801949e:	d904      	bls.n	80194aa <_malloc_r+0x26>
 80194a0:	230c      	movs	r3, #12
 80194a2:	6033      	str	r3, [r6, #0]
 80194a4:	2000      	movs	r0, #0
 80194a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80194aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019580 <_malloc_r+0xfc>
 80194ae:	f000 f869 	bl	8019584 <__malloc_lock>
 80194b2:	f8d8 3000 	ldr.w	r3, [r8]
 80194b6:	461c      	mov	r4, r3
 80194b8:	bb44      	cbnz	r4, 801950c <_malloc_r+0x88>
 80194ba:	4629      	mov	r1, r5
 80194bc:	4630      	mov	r0, r6
 80194be:	f7ff ffbf 	bl	8019440 <sbrk_aligned>
 80194c2:	1c43      	adds	r3, r0, #1
 80194c4:	4604      	mov	r4, r0
 80194c6:	d158      	bne.n	801957a <_malloc_r+0xf6>
 80194c8:	f8d8 4000 	ldr.w	r4, [r8]
 80194cc:	4627      	mov	r7, r4
 80194ce:	2f00      	cmp	r7, #0
 80194d0:	d143      	bne.n	801955a <_malloc_r+0xd6>
 80194d2:	2c00      	cmp	r4, #0
 80194d4:	d04b      	beq.n	801956e <_malloc_r+0xea>
 80194d6:	6823      	ldr	r3, [r4, #0]
 80194d8:	4639      	mov	r1, r7
 80194da:	4630      	mov	r0, r6
 80194dc:	eb04 0903 	add.w	r9, r4, r3
 80194e0:	f001 ffd8 	bl	801b494 <_sbrk_r>
 80194e4:	4581      	cmp	r9, r0
 80194e6:	d142      	bne.n	801956e <_malloc_r+0xea>
 80194e8:	6821      	ldr	r1, [r4, #0]
 80194ea:	1a6d      	subs	r5, r5, r1
 80194ec:	4629      	mov	r1, r5
 80194ee:	4630      	mov	r0, r6
 80194f0:	f7ff ffa6 	bl	8019440 <sbrk_aligned>
 80194f4:	3001      	adds	r0, #1
 80194f6:	d03a      	beq.n	801956e <_malloc_r+0xea>
 80194f8:	6823      	ldr	r3, [r4, #0]
 80194fa:	442b      	add	r3, r5
 80194fc:	6023      	str	r3, [r4, #0]
 80194fe:	f8d8 3000 	ldr.w	r3, [r8]
 8019502:	685a      	ldr	r2, [r3, #4]
 8019504:	bb62      	cbnz	r2, 8019560 <_malloc_r+0xdc>
 8019506:	f8c8 7000 	str.w	r7, [r8]
 801950a:	e00f      	b.n	801952c <_malloc_r+0xa8>
 801950c:	6822      	ldr	r2, [r4, #0]
 801950e:	1b52      	subs	r2, r2, r5
 8019510:	d420      	bmi.n	8019554 <_malloc_r+0xd0>
 8019512:	2a0b      	cmp	r2, #11
 8019514:	d917      	bls.n	8019546 <_malloc_r+0xc2>
 8019516:	1961      	adds	r1, r4, r5
 8019518:	42a3      	cmp	r3, r4
 801951a:	6025      	str	r5, [r4, #0]
 801951c:	bf18      	it	ne
 801951e:	6059      	strne	r1, [r3, #4]
 8019520:	6863      	ldr	r3, [r4, #4]
 8019522:	bf08      	it	eq
 8019524:	f8c8 1000 	streq.w	r1, [r8]
 8019528:	5162      	str	r2, [r4, r5]
 801952a:	604b      	str	r3, [r1, #4]
 801952c:	4630      	mov	r0, r6
 801952e:	f000 f82f 	bl	8019590 <__malloc_unlock>
 8019532:	f104 000b 	add.w	r0, r4, #11
 8019536:	1d23      	adds	r3, r4, #4
 8019538:	f020 0007 	bic.w	r0, r0, #7
 801953c:	1ac2      	subs	r2, r0, r3
 801953e:	bf1c      	itt	ne
 8019540:	1a1b      	subne	r3, r3, r0
 8019542:	50a3      	strne	r3, [r4, r2]
 8019544:	e7af      	b.n	80194a6 <_malloc_r+0x22>
 8019546:	6862      	ldr	r2, [r4, #4]
 8019548:	42a3      	cmp	r3, r4
 801954a:	bf0c      	ite	eq
 801954c:	f8c8 2000 	streq.w	r2, [r8]
 8019550:	605a      	strne	r2, [r3, #4]
 8019552:	e7eb      	b.n	801952c <_malloc_r+0xa8>
 8019554:	4623      	mov	r3, r4
 8019556:	6864      	ldr	r4, [r4, #4]
 8019558:	e7ae      	b.n	80194b8 <_malloc_r+0x34>
 801955a:	463c      	mov	r4, r7
 801955c:	687f      	ldr	r7, [r7, #4]
 801955e:	e7b6      	b.n	80194ce <_malloc_r+0x4a>
 8019560:	461a      	mov	r2, r3
 8019562:	685b      	ldr	r3, [r3, #4]
 8019564:	42a3      	cmp	r3, r4
 8019566:	d1fb      	bne.n	8019560 <_malloc_r+0xdc>
 8019568:	2300      	movs	r3, #0
 801956a:	6053      	str	r3, [r2, #4]
 801956c:	e7de      	b.n	801952c <_malloc_r+0xa8>
 801956e:	230c      	movs	r3, #12
 8019570:	6033      	str	r3, [r6, #0]
 8019572:	4630      	mov	r0, r6
 8019574:	f000 f80c 	bl	8019590 <__malloc_unlock>
 8019578:	e794      	b.n	80194a4 <_malloc_r+0x20>
 801957a:	6005      	str	r5, [r0, #0]
 801957c:	e7d6      	b.n	801952c <_malloc_r+0xa8>
 801957e:	bf00      	nop
 8019580:	20002f68 	.word	0x20002f68

08019584 <__malloc_lock>:
 8019584:	4801      	ldr	r0, [pc, #4]	@ (801958c <__malloc_lock+0x8>)
 8019586:	f001 bfd2 	b.w	801b52e <__retarget_lock_acquire_recursive>
 801958a:	bf00      	nop
 801958c:	200030ac 	.word	0x200030ac

08019590 <__malloc_unlock>:
 8019590:	4801      	ldr	r0, [pc, #4]	@ (8019598 <__malloc_unlock+0x8>)
 8019592:	f001 bfcd 	b.w	801b530 <__retarget_lock_release_recursive>
 8019596:	bf00      	nop
 8019598:	200030ac 	.word	0x200030ac

0801959c <sulp>:
 801959c:	b570      	push	{r4, r5, r6, lr}
 801959e:	4604      	mov	r4, r0
 80195a0:	460d      	mov	r5, r1
 80195a2:	ec45 4b10 	vmov	d0, r4, r5
 80195a6:	4616      	mov	r6, r2
 80195a8:	f003 fd5c 	bl	801d064 <__ulp>
 80195ac:	ec51 0b10 	vmov	r0, r1, d0
 80195b0:	b17e      	cbz	r6, 80195d2 <sulp+0x36>
 80195b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80195b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	dd09      	ble.n	80195d2 <sulp+0x36>
 80195be:	051b      	lsls	r3, r3, #20
 80195c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80195c4:	2400      	movs	r4, #0
 80195c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80195ca:	4622      	mov	r2, r4
 80195cc:	462b      	mov	r3, r5
 80195ce:	f7e6 ffeb 	bl	80005a8 <__aeabi_dmul>
 80195d2:	ec41 0b10 	vmov	d0, r0, r1
 80195d6:	bd70      	pop	{r4, r5, r6, pc}

080195d8 <_strtod_l>:
 80195d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195dc:	b09f      	sub	sp, #124	@ 0x7c
 80195de:	460c      	mov	r4, r1
 80195e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80195e2:	2200      	movs	r2, #0
 80195e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80195e6:	9005      	str	r0, [sp, #20]
 80195e8:	f04f 0a00 	mov.w	sl, #0
 80195ec:	f04f 0b00 	mov.w	fp, #0
 80195f0:	460a      	mov	r2, r1
 80195f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80195f4:	7811      	ldrb	r1, [r2, #0]
 80195f6:	292b      	cmp	r1, #43	@ 0x2b
 80195f8:	d04a      	beq.n	8019690 <_strtod_l+0xb8>
 80195fa:	d838      	bhi.n	801966e <_strtod_l+0x96>
 80195fc:	290d      	cmp	r1, #13
 80195fe:	d832      	bhi.n	8019666 <_strtod_l+0x8e>
 8019600:	2908      	cmp	r1, #8
 8019602:	d832      	bhi.n	801966a <_strtod_l+0x92>
 8019604:	2900      	cmp	r1, #0
 8019606:	d03b      	beq.n	8019680 <_strtod_l+0xa8>
 8019608:	2200      	movs	r2, #0
 801960a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801960c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801960e:	782a      	ldrb	r2, [r5, #0]
 8019610:	2a30      	cmp	r2, #48	@ 0x30
 8019612:	f040 80b3 	bne.w	801977c <_strtod_l+0x1a4>
 8019616:	786a      	ldrb	r2, [r5, #1]
 8019618:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801961c:	2a58      	cmp	r2, #88	@ 0x58
 801961e:	d16e      	bne.n	80196fe <_strtod_l+0x126>
 8019620:	9302      	str	r3, [sp, #8]
 8019622:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019624:	9301      	str	r3, [sp, #4]
 8019626:	ab1a      	add	r3, sp, #104	@ 0x68
 8019628:	9300      	str	r3, [sp, #0]
 801962a:	4a8e      	ldr	r2, [pc, #568]	@ (8019864 <_strtod_l+0x28c>)
 801962c:	9805      	ldr	r0, [sp, #20]
 801962e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8019630:	a919      	add	r1, sp, #100	@ 0x64
 8019632:	f002 febf 	bl	801c3b4 <__gethex>
 8019636:	f010 060f 	ands.w	r6, r0, #15
 801963a:	4604      	mov	r4, r0
 801963c:	d005      	beq.n	801964a <_strtod_l+0x72>
 801963e:	2e06      	cmp	r6, #6
 8019640:	d128      	bne.n	8019694 <_strtod_l+0xbc>
 8019642:	3501      	adds	r5, #1
 8019644:	2300      	movs	r3, #0
 8019646:	9519      	str	r5, [sp, #100]	@ 0x64
 8019648:	930b      	str	r3, [sp, #44]	@ 0x2c
 801964a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801964c:	2b00      	cmp	r3, #0
 801964e:	f040 858e 	bne.w	801a16e <_strtod_l+0xb96>
 8019652:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019654:	b1cb      	cbz	r3, 801968a <_strtod_l+0xb2>
 8019656:	4652      	mov	r2, sl
 8019658:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801965c:	ec43 2b10 	vmov	d0, r2, r3
 8019660:	b01f      	add	sp, #124	@ 0x7c
 8019662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019666:	2920      	cmp	r1, #32
 8019668:	d1ce      	bne.n	8019608 <_strtod_l+0x30>
 801966a:	3201      	adds	r2, #1
 801966c:	e7c1      	b.n	80195f2 <_strtod_l+0x1a>
 801966e:	292d      	cmp	r1, #45	@ 0x2d
 8019670:	d1ca      	bne.n	8019608 <_strtod_l+0x30>
 8019672:	2101      	movs	r1, #1
 8019674:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019676:	1c51      	adds	r1, r2, #1
 8019678:	9119      	str	r1, [sp, #100]	@ 0x64
 801967a:	7852      	ldrb	r2, [r2, #1]
 801967c:	2a00      	cmp	r2, #0
 801967e:	d1c5      	bne.n	801960c <_strtod_l+0x34>
 8019680:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019682:	9419      	str	r4, [sp, #100]	@ 0x64
 8019684:	2b00      	cmp	r3, #0
 8019686:	f040 8570 	bne.w	801a16a <_strtod_l+0xb92>
 801968a:	4652      	mov	r2, sl
 801968c:	465b      	mov	r3, fp
 801968e:	e7e5      	b.n	801965c <_strtod_l+0x84>
 8019690:	2100      	movs	r1, #0
 8019692:	e7ef      	b.n	8019674 <_strtod_l+0x9c>
 8019694:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8019696:	b13a      	cbz	r2, 80196a8 <_strtod_l+0xd0>
 8019698:	2135      	movs	r1, #53	@ 0x35
 801969a:	a81c      	add	r0, sp, #112	@ 0x70
 801969c:	f003 fddc 	bl	801d258 <__copybits>
 80196a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80196a2:	9805      	ldr	r0, [sp, #20]
 80196a4:	f003 f9aa 	bl	801c9fc <_Bfree>
 80196a8:	3e01      	subs	r6, #1
 80196aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80196ac:	2e04      	cmp	r6, #4
 80196ae:	d806      	bhi.n	80196be <_strtod_l+0xe6>
 80196b0:	e8df f006 	tbb	[pc, r6]
 80196b4:	201d0314 	.word	0x201d0314
 80196b8:	14          	.byte	0x14
 80196b9:	00          	.byte	0x00
 80196ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80196be:	05e1      	lsls	r1, r4, #23
 80196c0:	bf48      	it	mi
 80196c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80196c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80196ca:	0d1b      	lsrs	r3, r3, #20
 80196cc:	051b      	lsls	r3, r3, #20
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d1bb      	bne.n	801964a <_strtod_l+0x72>
 80196d2:	f001 ff01 	bl	801b4d8 <__errno>
 80196d6:	2322      	movs	r3, #34	@ 0x22
 80196d8:	6003      	str	r3, [r0, #0]
 80196da:	e7b6      	b.n	801964a <_strtod_l+0x72>
 80196dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80196e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80196e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80196e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80196ec:	e7e7      	b.n	80196be <_strtod_l+0xe6>
 80196ee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801986c <_strtod_l+0x294>
 80196f2:	e7e4      	b.n	80196be <_strtod_l+0xe6>
 80196f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80196f8:	f04f 3aff 	mov.w	sl, #4294967295
 80196fc:	e7df      	b.n	80196be <_strtod_l+0xe6>
 80196fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019700:	1c5a      	adds	r2, r3, #1
 8019702:	9219      	str	r2, [sp, #100]	@ 0x64
 8019704:	785b      	ldrb	r3, [r3, #1]
 8019706:	2b30      	cmp	r3, #48	@ 0x30
 8019708:	d0f9      	beq.n	80196fe <_strtod_l+0x126>
 801970a:	2b00      	cmp	r3, #0
 801970c:	d09d      	beq.n	801964a <_strtod_l+0x72>
 801970e:	2301      	movs	r3, #1
 8019710:	9309      	str	r3, [sp, #36]	@ 0x24
 8019712:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019714:	930c      	str	r3, [sp, #48]	@ 0x30
 8019716:	2300      	movs	r3, #0
 8019718:	9308      	str	r3, [sp, #32]
 801971a:	930a      	str	r3, [sp, #40]	@ 0x28
 801971c:	461f      	mov	r7, r3
 801971e:	220a      	movs	r2, #10
 8019720:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8019722:	7805      	ldrb	r5, [r0, #0]
 8019724:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8019728:	b2d9      	uxtb	r1, r3
 801972a:	2909      	cmp	r1, #9
 801972c:	d928      	bls.n	8019780 <_strtod_l+0x1a8>
 801972e:	494e      	ldr	r1, [pc, #312]	@ (8019868 <_strtod_l+0x290>)
 8019730:	2201      	movs	r2, #1
 8019732:	f001 fdf2 	bl	801b31a <strncmp>
 8019736:	2800      	cmp	r0, #0
 8019738:	d032      	beq.n	80197a0 <_strtod_l+0x1c8>
 801973a:	2000      	movs	r0, #0
 801973c:	462a      	mov	r2, r5
 801973e:	4681      	mov	r9, r0
 8019740:	463d      	mov	r5, r7
 8019742:	4603      	mov	r3, r0
 8019744:	2a65      	cmp	r2, #101	@ 0x65
 8019746:	d001      	beq.n	801974c <_strtod_l+0x174>
 8019748:	2a45      	cmp	r2, #69	@ 0x45
 801974a:	d114      	bne.n	8019776 <_strtod_l+0x19e>
 801974c:	b91d      	cbnz	r5, 8019756 <_strtod_l+0x17e>
 801974e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019750:	4302      	orrs	r2, r0
 8019752:	d095      	beq.n	8019680 <_strtod_l+0xa8>
 8019754:	2500      	movs	r5, #0
 8019756:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8019758:	1c62      	adds	r2, r4, #1
 801975a:	9219      	str	r2, [sp, #100]	@ 0x64
 801975c:	7862      	ldrb	r2, [r4, #1]
 801975e:	2a2b      	cmp	r2, #43	@ 0x2b
 8019760:	d077      	beq.n	8019852 <_strtod_l+0x27a>
 8019762:	2a2d      	cmp	r2, #45	@ 0x2d
 8019764:	d07b      	beq.n	801985e <_strtod_l+0x286>
 8019766:	f04f 0c00 	mov.w	ip, #0
 801976a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801976e:	2909      	cmp	r1, #9
 8019770:	f240 8082 	bls.w	8019878 <_strtod_l+0x2a0>
 8019774:	9419      	str	r4, [sp, #100]	@ 0x64
 8019776:	f04f 0800 	mov.w	r8, #0
 801977a:	e0a2      	b.n	80198c2 <_strtod_l+0x2ea>
 801977c:	2300      	movs	r3, #0
 801977e:	e7c7      	b.n	8019710 <_strtod_l+0x138>
 8019780:	2f08      	cmp	r7, #8
 8019782:	bfd5      	itete	le
 8019784:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8019786:	9908      	ldrgt	r1, [sp, #32]
 8019788:	fb02 3301 	mlale	r3, r2, r1, r3
 801978c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8019790:	f100 0001 	add.w	r0, r0, #1
 8019794:	bfd4      	ite	le
 8019796:	930a      	strle	r3, [sp, #40]	@ 0x28
 8019798:	9308      	strgt	r3, [sp, #32]
 801979a:	3701      	adds	r7, #1
 801979c:	9019      	str	r0, [sp, #100]	@ 0x64
 801979e:	e7bf      	b.n	8019720 <_strtod_l+0x148>
 80197a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80197a2:	1c5a      	adds	r2, r3, #1
 80197a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80197a6:	785a      	ldrb	r2, [r3, #1]
 80197a8:	b37f      	cbz	r7, 801980a <_strtod_l+0x232>
 80197aa:	4681      	mov	r9, r0
 80197ac:	463d      	mov	r5, r7
 80197ae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80197b2:	2b09      	cmp	r3, #9
 80197b4:	d912      	bls.n	80197dc <_strtod_l+0x204>
 80197b6:	2301      	movs	r3, #1
 80197b8:	e7c4      	b.n	8019744 <_strtod_l+0x16c>
 80197ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80197bc:	1c5a      	adds	r2, r3, #1
 80197be:	9219      	str	r2, [sp, #100]	@ 0x64
 80197c0:	785a      	ldrb	r2, [r3, #1]
 80197c2:	3001      	adds	r0, #1
 80197c4:	2a30      	cmp	r2, #48	@ 0x30
 80197c6:	d0f8      	beq.n	80197ba <_strtod_l+0x1e2>
 80197c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80197cc:	2b08      	cmp	r3, #8
 80197ce:	f200 84d3 	bhi.w	801a178 <_strtod_l+0xba0>
 80197d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80197d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80197d6:	4681      	mov	r9, r0
 80197d8:	2000      	movs	r0, #0
 80197da:	4605      	mov	r5, r0
 80197dc:	3a30      	subs	r2, #48	@ 0x30
 80197de:	f100 0301 	add.w	r3, r0, #1
 80197e2:	d02a      	beq.n	801983a <_strtod_l+0x262>
 80197e4:	4499      	add	r9, r3
 80197e6:	eb00 0c05 	add.w	ip, r0, r5
 80197ea:	462b      	mov	r3, r5
 80197ec:	210a      	movs	r1, #10
 80197ee:	4563      	cmp	r3, ip
 80197f0:	d10d      	bne.n	801980e <_strtod_l+0x236>
 80197f2:	1c69      	adds	r1, r5, #1
 80197f4:	4401      	add	r1, r0
 80197f6:	4428      	add	r0, r5
 80197f8:	2808      	cmp	r0, #8
 80197fa:	dc16      	bgt.n	801982a <_strtod_l+0x252>
 80197fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80197fe:	230a      	movs	r3, #10
 8019800:	fb03 2300 	mla	r3, r3, r0, r2
 8019804:	930a      	str	r3, [sp, #40]	@ 0x28
 8019806:	2300      	movs	r3, #0
 8019808:	e018      	b.n	801983c <_strtod_l+0x264>
 801980a:	4638      	mov	r0, r7
 801980c:	e7da      	b.n	80197c4 <_strtod_l+0x1ec>
 801980e:	2b08      	cmp	r3, #8
 8019810:	f103 0301 	add.w	r3, r3, #1
 8019814:	dc03      	bgt.n	801981e <_strtod_l+0x246>
 8019816:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019818:	434e      	muls	r6, r1
 801981a:	960a      	str	r6, [sp, #40]	@ 0x28
 801981c:	e7e7      	b.n	80197ee <_strtod_l+0x216>
 801981e:	2b10      	cmp	r3, #16
 8019820:	bfde      	ittt	le
 8019822:	9e08      	ldrle	r6, [sp, #32]
 8019824:	434e      	mulle	r6, r1
 8019826:	9608      	strle	r6, [sp, #32]
 8019828:	e7e1      	b.n	80197ee <_strtod_l+0x216>
 801982a:	280f      	cmp	r0, #15
 801982c:	dceb      	bgt.n	8019806 <_strtod_l+0x22e>
 801982e:	9808      	ldr	r0, [sp, #32]
 8019830:	230a      	movs	r3, #10
 8019832:	fb03 2300 	mla	r3, r3, r0, r2
 8019836:	9308      	str	r3, [sp, #32]
 8019838:	e7e5      	b.n	8019806 <_strtod_l+0x22e>
 801983a:	4629      	mov	r1, r5
 801983c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801983e:	1c50      	adds	r0, r2, #1
 8019840:	9019      	str	r0, [sp, #100]	@ 0x64
 8019842:	7852      	ldrb	r2, [r2, #1]
 8019844:	4618      	mov	r0, r3
 8019846:	460d      	mov	r5, r1
 8019848:	e7b1      	b.n	80197ae <_strtod_l+0x1d6>
 801984a:	f04f 0900 	mov.w	r9, #0
 801984e:	2301      	movs	r3, #1
 8019850:	e77d      	b.n	801974e <_strtod_l+0x176>
 8019852:	f04f 0c00 	mov.w	ip, #0
 8019856:	1ca2      	adds	r2, r4, #2
 8019858:	9219      	str	r2, [sp, #100]	@ 0x64
 801985a:	78a2      	ldrb	r2, [r4, #2]
 801985c:	e785      	b.n	801976a <_strtod_l+0x192>
 801985e:	f04f 0c01 	mov.w	ip, #1
 8019862:	e7f8      	b.n	8019856 <_strtod_l+0x27e>
 8019864:	080219d4 	.word	0x080219d4
 8019868:	080219bc 	.word	0x080219bc
 801986c:	7ff00000 	.word	0x7ff00000
 8019870:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019872:	1c51      	adds	r1, r2, #1
 8019874:	9119      	str	r1, [sp, #100]	@ 0x64
 8019876:	7852      	ldrb	r2, [r2, #1]
 8019878:	2a30      	cmp	r2, #48	@ 0x30
 801987a:	d0f9      	beq.n	8019870 <_strtod_l+0x298>
 801987c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8019880:	2908      	cmp	r1, #8
 8019882:	f63f af78 	bhi.w	8019776 <_strtod_l+0x19e>
 8019886:	3a30      	subs	r2, #48	@ 0x30
 8019888:	920e      	str	r2, [sp, #56]	@ 0x38
 801988a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801988c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801988e:	f04f 080a 	mov.w	r8, #10
 8019892:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019894:	1c56      	adds	r6, r2, #1
 8019896:	9619      	str	r6, [sp, #100]	@ 0x64
 8019898:	7852      	ldrb	r2, [r2, #1]
 801989a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801989e:	f1be 0f09 	cmp.w	lr, #9
 80198a2:	d939      	bls.n	8019918 <_strtod_l+0x340>
 80198a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80198a6:	1a76      	subs	r6, r6, r1
 80198a8:	2e08      	cmp	r6, #8
 80198aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80198ae:	dc03      	bgt.n	80198b8 <_strtod_l+0x2e0>
 80198b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80198b2:	4588      	cmp	r8, r1
 80198b4:	bfa8      	it	ge
 80198b6:	4688      	movge	r8, r1
 80198b8:	f1bc 0f00 	cmp.w	ip, #0
 80198bc:	d001      	beq.n	80198c2 <_strtod_l+0x2ea>
 80198be:	f1c8 0800 	rsb	r8, r8, #0
 80198c2:	2d00      	cmp	r5, #0
 80198c4:	d14e      	bne.n	8019964 <_strtod_l+0x38c>
 80198c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80198c8:	4308      	orrs	r0, r1
 80198ca:	f47f aebe 	bne.w	801964a <_strtod_l+0x72>
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	f47f aed6 	bne.w	8019680 <_strtod_l+0xa8>
 80198d4:	2a69      	cmp	r2, #105	@ 0x69
 80198d6:	d028      	beq.n	801992a <_strtod_l+0x352>
 80198d8:	dc25      	bgt.n	8019926 <_strtod_l+0x34e>
 80198da:	2a49      	cmp	r2, #73	@ 0x49
 80198dc:	d025      	beq.n	801992a <_strtod_l+0x352>
 80198de:	2a4e      	cmp	r2, #78	@ 0x4e
 80198e0:	f47f aece 	bne.w	8019680 <_strtod_l+0xa8>
 80198e4:	499b      	ldr	r1, [pc, #620]	@ (8019b54 <_strtod_l+0x57c>)
 80198e6:	a819      	add	r0, sp, #100	@ 0x64
 80198e8:	f002 ff86 	bl	801c7f8 <__match>
 80198ec:	2800      	cmp	r0, #0
 80198ee:	f43f aec7 	beq.w	8019680 <_strtod_l+0xa8>
 80198f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80198f4:	781b      	ldrb	r3, [r3, #0]
 80198f6:	2b28      	cmp	r3, #40	@ 0x28
 80198f8:	d12e      	bne.n	8019958 <_strtod_l+0x380>
 80198fa:	4997      	ldr	r1, [pc, #604]	@ (8019b58 <_strtod_l+0x580>)
 80198fc:	aa1c      	add	r2, sp, #112	@ 0x70
 80198fe:	a819      	add	r0, sp, #100	@ 0x64
 8019900:	f002 ff8e 	bl	801c820 <__hexnan>
 8019904:	2805      	cmp	r0, #5
 8019906:	d127      	bne.n	8019958 <_strtod_l+0x380>
 8019908:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801990a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801990e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8019912:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8019916:	e698      	b.n	801964a <_strtod_l+0x72>
 8019918:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801991a:	fb08 2101 	mla	r1, r8, r1, r2
 801991e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8019922:	920e      	str	r2, [sp, #56]	@ 0x38
 8019924:	e7b5      	b.n	8019892 <_strtod_l+0x2ba>
 8019926:	2a6e      	cmp	r2, #110	@ 0x6e
 8019928:	e7da      	b.n	80198e0 <_strtod_l+0x308>
 801992a:	498c      	ldr	r1, [pc, #560]	@ (8019b5c <_strtod_l+0x584>)
 801992c:	a819      	add	r0, sp, #100	@ 0x64
 801992e:	f002 ff63 	bl	801c7f8 <__match>
 8019932:	2800      	cmp	r0, #0
 8019934:	f43f aea4 	beq.w	8019680 <_strtod_l+0xa8>
 8019938:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801993a:	4989      	ldr	r1, [pc, #548]	@ (8019b60 <_strtod_l+0x588>)
 801993c:	3b01      	subs	r3, #1
 801993e:	a819      	add	r0, sp, #100	@ 0x64
 8019940:	9319      	str	r3, [sp, #100]	@ 0x64
 8019942:	f002 ff59 	bl	801c7f8 <__match>
 8019946:	b910      	cbnz	r0, 801994e <_strtod_l+0x376>
 8019948:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801994a:	3301      	adds	r3, #1
 801994c:	9319      	str	r3, [sp, #100]	@ 0x64
 801994e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8019b70 <_strtod_l+0x598>
 8019952:	f04f 0a00 	mov.w	sl, #0
 8019956:	e678      	b.n	801964a <_strtod_l+0x72>
 8019958:	4882      	ldr	r0, [pc, #520]	@ (8019b64 <_strtod_l+0x58c>)
 801995a:	f001 fe01 	bl	801b560 <nan>
 801995e:	ec5b ab10 	vmov	sl, fp, d0
 8019962:	e672      	b.n	801964a <_strtod_l+0x72>
 8019964:	eba8 0309 	sub.w	r3, r8, r9
 8019968:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801996a:	9309      	str	r3, [sp, #36]	@ 0x24
 801996c:	2f00      	cmp	r7, #0
 801996e:	bf08      	it	eq
 8019970:	462f      	moveq	r7, r5
 8019972:	2d10      	cmp	r5, #16
 8019974:	462c      	mov	r4, r5
 8019976:	bfa8      	it	ge
 8019978:	2410      	movge	r4, #16
 801997a:	f7e6 fd9b 	bl	80004b4 <__aeabi_ui2d>
 801997e:	2d09      	cmp	r5, #9
 8019980:	4682      	mov	sl, r0
 8019982:	468b      	mov	fp, r1
 8019984:	dc13      	bgt.n	80199ae <_strtod_l+0x3d6>
 8019986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019988:	2b00      	cmp	r3, #0
 801998a:	f43f ae5e 	beq.w	801964a <_strtod_l+0x72>
 801998e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019990:	dd78      	ble.n	8019a84 <_strtod_l+0x4ac>
 8019992:	2b16      	cmp	r3, #22
 8019994:	dc5f      	bgt.n	8019a56 <_strtod_l+0x47e>
 8019996:	4974      	ldr	r1, [pc, #464]	@ (8019b68 <_strtod_l+0x590>)
 8019998:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801999c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80199a0:	4652      	mov	r2, sl
 80199a2:	465b      	mov	r3, fp
 80199a4:	f7e6 fe00 	bl	80005a8 <__aeabi_dmul>
 80199a8:	4682      	mov	sl, r0
 80199aa:	468b      	mov	fp, r1
 80199ac:	e64d      	b.n	801964a <_strtod_l+0x72>
 80199ae:	4b6e      	ldr	r3, [pc, #440]	@ (8019b68 <_strtod_l+0x590>)
 80199b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80199b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80199b8:	f7e6 fdf6 	bl	80005a8 <__aeabi_dmul>
 80199bc:	4682      	mov	sl, r0
 80199be:	9808      	ldr	r0, [sp, #32]
 80199c0:	468b      	mov	fp, r1
 80199c2:	f7e6 fd77 	bl	80004b4 <__aeabi_ui2d>
 80199c6:	4602      	mov	r2, r0
 80199c8:	460b      	mov	r3, r1
 80199ca:	4650      	mov	r0, sl
 80199cc:	4659      	mov	r1, fp
 80199ce:	f7e6 fc35 	bl	800023c <__adddf3>
 80199d2:	2d0f      	cmp	r5, #15
 80199d4:	4682      	mov	sl, r0
 80199d6:	468b      	mov	fp, r1
 80199d8:	ddd5      	ble.n	8019986 <_strtod_l+0x3ae>
 80199da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199dc:	1b2c      	subs	r4, r5, r4
 80199de:	441c      	add	r4, r3
 80199e0:	2c00      	cmp	r4, #0
 80199e2:	f340 8096 	ble.w	8019b12 <_strtod_l+0x53a>
 80199e6:	f014 030f 	ands.w	r3, r4, #15
 80199ea:	d00a      	beq.n	8019a02 <_strtod_l+0x42a>
 80199ec:	495e      	ldr	r1, [pc, #376]	@ (8019b68 <_strtod_l+0x590>)
 80199ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80199f2:	4652      	mov	r2, sl
 80199f4:	465b      	mov	r3, fp
 80199f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80199fa:	f7e6 fdd5 	bl	80005a8 <__aeabi_dmul>
 80199fe:	4682      	mov	sl, r0
 8019a00:	468b      	mov	fp, r1
 8019a02:	f034 040f 	bics.w	r4, r4, #15
 8019a06:	d073      	beq.n	8019af0 <_strtod_l+0x518>
 8019a08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8019a0c:	dd48      	ble.n	8019aa0 <_strtod_l+0x4c8>
 8019a0e:	2400      	movs	r4, #0
 8019a10:	46a0      	mov	r8, r4
 8019a12:	940a      	str	r4, [sp, #40]	@ 0x28
 8019a14:	46a1      	mov	r9, r4
 8019a16:	9a05      	ldr	r2, [sp, #20]
 8019a18:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8019b70 <_strtod_l+0x598>
 8019a1c:	2322      	movs	r3, #34	@ 0x22
 8019a1e:	6013      	str	r3, [r2, #0]
 8019a20:	f04f 0a00 	mov.w	sl, #0
 8019a24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	f43f ae0f 	beq.w	801964a <_strtod_l+0x72>
 8019a2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019a2e:	9805      	ldr	r0, [sp, #20]
 8019a30:	f002 ffe4 	bl	801c9fc <_Bfree>
 8019a34:	9805      	ldr	r0, [sp, #20]
 8019a36:	4649      	mov	r1, r9
 8019a38:	f002 ffe0 	bl	801c9fc <_Bfree>
 8019a3c:	9805      	ldr	r0, [sp, #20]
 8019a3e:	4641      	mov	r1, r8
 8019a40:	f002 ffdc 	bl	801c9fc <_Bfree>
 8019a44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019a46:	9805      	ldr	r0, [sp, #20]
 8019a48:	f002 ffd8 	bl	801c9fc <_Bfree>
 8019a4c:	9805      	ldr	r0, [sp, #20]
 8019a4e:	4621      	mov	r1, r4
 8019a50:	f002 ffd4 	bl	801c9fc <_Bfree>
 8019a54:	e5f9      	b.n	801964a <_strtod_l+0x72>
 8019a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019a58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8019a5c:	4293      	cmp	r3, r2
 8019a5e:	dbbc      	blt.n	80199da <_strtod_l+0x402>
 8019a60:	4c41      	ldr	r4, [pc, #260]	@ (8019b68 <_strtod_l+0x590>)
 8019a62:	f1c5 050f 	rsb	r5, r5, #15
 8019a66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8019a6a:	4652      	mov	r2, sl
 8019a6c:	465b      	mov	r3, fp
 8019a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a72:	f7e6 fd99 	bl	80005a8 <__aeabi_dmul>
 8019a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a78:	1b5d      	subs	r5, r3, r5
 8019a7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8019a7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019a82:	e78f      	b.n	80199a4 <_strtod_l+0x3cc>
 8019a84:	3316      	adds	r3, #22
 8019a86:	dba8      	blt.n	80199da <_strtod_l+0x402>
 8019a88:	4b37      	ldr	r3, [pc, #220]	@ (8019b68 <_strtod_l+0x590>)
 8019a8a:	eba9 0808 	sub.w	r8, r9, r8
 8019a8e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8019a92:	e9d8 2300 	ldrd	r2, r3, [r8]
 8019a96:	4650      	mov	r0, sl
 8019a98:	4659      	mov	r1, fp
 8019a9a:	f7e6 feaf 	bl	80007fc <__aeabi_ddiv>
 8019a9e:	e783      	b.n	80199a8 <_strtod_l+0x3d0>
 8019aa0:	4b32      	ldr	r3, [pc, #200]	@ (8019b6c <_strtod_l+0x594>)
 8019aa2:	9308      	str	r3, [sp, #32]
 8019aa4:	2300      	movs	r3, #0
 8019aa6:	1124      	asrs	r4, r4, #4
 8019aa8:	4650      	mov	r0, sl
 8019aaa:	4659      	mov	r1, fp
 8019aac:	461e      	mov	r6, r3
 8019aae:	2c01      	cmp	r4, #1
 8019ab0:	dc21      	bgt.n	8019af6 <_strtod_l+0x51e>
 8019ab2:	b10b      	cbz	r3, 8019ab8 <_strtod_l+0x4e0>
 8019ab4:	4682      	mov	sl, r0
 8019ab6:	468b      	mov	fp, r1
 8019ab8:	492c      	ldr	r1, [pc, #176]	@ (8019b6c <_strtod_l+0x594>)
 8019aba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8019abe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8019ac2:	4652      	mov	r2, sl
 8019ac4:	465b      	mov	r3, fp
 8019ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019aca:	f7e6 fd6d 	bl	80005a8 <__aeabi_dmul>
 8019ace:	4b28      	ldr	r3, [pc, #160]	@ (8019b70 <_strtod_l+0x598>)
 8019ad0:	460a      	mov	r2, r1
 8019ad2:	400b      	ands	r3, r1
 8019ad4:	4927      	ldr	r1, [pc, #156]	@ (8019b74 <_strtod_l+0x59c>)
 8019ad6:	428b      	cmp	r3, r1
 8019ad8:	4682      	mov	sl, r0
 8019ada:	d898      	bhi.n	8019a0e <_strtod_l+0x436>
 8019adc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8019ae0:	428b      	cmp	r3, r1
 8019ae2:	bf86      	itte	hi
 8019ae4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8019b78 <_strtod_l+0x5a0>
 8019ae8:	f04f 3aff 	movhi.w	sl, #4294967295
 8019aec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8019af0:	2300      	movs	r3, #0
 8019af2:	9308      	str	r3, [sp, #32]
 8019af4:	e07a      	b.n	8019bec <_strtod_l+0x614>
 8019af6:	07e2      	lsls	r2, r4, #31
 8019af8:	d505      	bpl.n	8019b06 <_strtod_l+0x52e>
 8019afa:	9b08      	ldr	r3, [sp, #32]
 8019afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b00:	f7e6 fd52 	bl	80005a8 <__aeabi_dmul>
 8019b04:	2301      	movs	r3, #1
 8019b06:	9a08      	ldr	r2, [sp, #32]
 8019b08:	3208      	adds	r2, #8
 8019b0a:	3601      	adds	r6, #1
 8019b0c:	1064      	asrs	r4, r4, #1
 8019b0e:	9208      	str	r2, [sp, #32]
 8019b10:	e7cd      	b.n	8019aae <_strtod_l+0x4d6>
 8019b12:	d0ed      	beq.n	8019af0 <_strtod_l+0x518>
 8019b14:	4264      	negs	r4, r4
 8019b16:	f014 020f 	ands.w	r2, r4, #15
 8019b1a:	d00a      	beq.n	8019b32 <_strtod_l+0x55a>
 8019b1c:	4b12      	ldr	r3, [pc, #72]	@ (8019b68 <_strtod_l+0x590>)
 8019b1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019b22:	4650      	mov	r0, sl
 8019b24:	4659      	mov	r1, fp
 8019b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b2a:	f7e6 fe67 	bl	80007fc <__aeabi_ddiv>
 8019b2e:	4682      	mov	sl, r0
 8019b30:	468b      	mov	fp, r1
 8019b32:	1124      	asrs	r4, r4, #4
 8019b34:	d0dc      	beq.n	8019af0 <_strtod_l+0x518>
 8019b36:	2c1f      	cmp	r4, #31
 8019b38:	dd20      	ble.n	8019b7c <_strtod_l+0x5a4>
 8019b3a:	2400      	movs	r4, #0
 8019b3c:	46a0      	mov	r8, r4
 8019b3e:	940a      	str	r4, [sp, #40]	@ 0x28
 8019b40:	46a1      	mov	r9, r4
 8019b42:	9a05      	ldr	r2, [sp, #20]
 8019b44:	2322      	movs	r3, #34	@ 0x22
 8019b46:	f04f 0a00 	mov.w	sl, #0
 8019b4a:	f04f 0b00 	mov.w	fp, #0
 8019b4e:	6013      	str	r3, [r2, #0]
 8019b50:	e768      	b.n	8019a24 <_strtod_l+0x44c>
 8019b52:	bf00      	nop
 8019b54:	08021b1e 	.word	0x08021b1e
 8019b58:	080219c0 	.word	0x080219c0
 8019b5c:	08021b16 	.word	0x08021b16
 8019b60:	08021c02 	.word	0x08021c02
 8019b64:	08021bfe 	.word	0x08021bfe
 8019b68:	08021d68 	.word	0x08021d68
 8019b6c:	08021d40 	.word	0x08021d40
 8019b70:	7ff00000 	.word	0x7ff00000
 8019b74:	7ca00000 	.word	0x7ca00000
 8019b78:	7fefffff 	.word	0x7fefffff
 8019b7c:	f014 0310 	ands.w	r3, r4, #16
 8019b80:	bf18      	it	ne
 8019b82:	236a      	movne	r3, #106	@ 0x6a
 8019b84:	4ea9      	ldr	r6, [pc, #676]	@ (8019e2c <_strtod_l+0x854>)
 8019b86:	9308      	str	r3, [sp, #32]
 8019b88:	4650      	mov	r0, sl
 8019b8a:	4659      	mov	r1, fp
 8019b8c:	2300      	movs	r3, #0
 8019b8e:	07e2      	lsls	r2, r4, #31
 8019b90:	d504      	bpl.n	8019b9c <_strtod_l+0x5c4>
 8019b92:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019b96:	f7e6 fd07 	bl	80005a8 <__aeabi_dmul>
 8019b9a:	2301      	movs	r3, #1
 8019b9c:	1064      	asrs	r4, r4, #1
 8019b9e:	f106 0608 	add.w	r6, r6, #8
 8019ba2:	d1f4      	bne.n	8019b8e <_strtod_l+0x5b6>
 8019ba4:	b10b      	cbz	r3, 8019baa <_strtod_l+0x5d2>
 8019ba6:	4682      	mov	sl, r0
 8019ba8:	468b      	mov	fp, r1
 8019baa:	9b08      	ldr	r3, [sp, #32]
 8019bac:	b1b3      	cbz	r3, 8019bdc <_strtod_l+0x604>
 8019bae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8019bb2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	4659      	mov	r1, fp
 8019bba:	dd0f      	ble.n	8019bdc <_strtod_l+0x604>
 8019bbc:	2b1f      	cmp	r3, #31
 8019bbe:	dd55      	ble.n	8019c6c <_strtod_l+0x694>
 8019bc0:	2b34      	cmp	r3, #52	@ 0x34
 8019bc2:	bfde      	ittt	le
 8019bc4:	f04f 33ff 	movle.w	r3, #4294967295
 8019bc8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8019bcc:	4093      	lslle	r3, r2
 8019bce:	f04f 0a00 	mov.w	sl, #0
 8019bd2:	bfcc      	ite	gt
 8019bd4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8019bd8:	ea03 0b01 	andle.w	fp, r3, r1
 8019bdc:	2200      	movs	r2, #0
 8019bde:	2300      	movs	r3, #0
 8019be0:	4650      	mov	r0, sl
 8019be2:	4659      	mov	r1, fp
 8019be4:	f7e6 ff48 	bl	8000a78 <__aeabi_dcmpeq>
 8019be8:	2800      	cmp	r0, #0
 8019bea:	d1a6      	bne.n	8019b3a <_strtod_l+0x562>
 8019bec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019bee:	9300      	str	r3, [sp, #0]
 8019bf0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019bf2:	9805      	ldr	r0, [sp, #20]
 8019bf4:	462b      	mov	r3, r5
 8019bf6:	463a      	mov	r2, r7
 8019bf8:	f002 ff68 	bl	801cacc <__s2b>
 8019bfc:	900a      	str	r0, [sp, #40]	@ 0x28
 8019bfe:	2800      	cmp	r0, #0
 8019c00:	f43f af05 	beq.w	8019a0e <_strtod_l+0x436>
 8019c04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019c06:	2a00      	cmp	r2, #0
 8019c08:	eba9 0308 	sub.w	r3, r9, r8
 8019c0c:	bfa8      	it	ge
 8019c0e:	2300      	movge	r3, #0
 8019c10:	9312      	str	r3, [sp, #72]	@ 0x48
 8019c12:	2400      	movs	r4, #0
 8019c14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8019c18:	9316      	str	r3, [sp, #88]	@ 0x58
 8019c1a:	46a0      	mov	r8, r4
 8019c1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019c1e:	9805      	ldr	r0, [sp, #20]
 8019c20:	6859      	ldr	r1, [r3, #4]
 8019c22:	f002 feab 	bl	801c97c <_Balloc>
 8019c26:	4681      	mov	r9, r0
 8019c28:	2800      	cmp	r0, #0
 8019c2a:	f43f aef4 	beq.w	8019a16 <_strtod_l+0x43e>
 8019c2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019c30:	691a      	ldr	r2, [r3, #16]
 8019c32:	3202      	adds	r2, #2
 8019c34:	f103 010c 	add.w	r1, r3, #12
 8019c38:	0092      	lsls	r2, r2, #2
 8019c3a:	300c      	adds	r0, #12
 8019c3c:	f001 fc81 	bl	801b542 <memcpy>
 8019c40:	ec4b ab10 	vmov	d0, sl, fp
 8019c44:	9805      	ldr	r0, [sp, #20]
 8019c46:	aa1c      	add	r2, sp, #112	@ 0x70
 8019c48:	a91b      	add	r1, sp, #108	@ 0x6c
 8019c4a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8019c4e:	f003 fa79 	bl	801d144 <__d2b>
 8019c52:	901a      	str	r0, [sp, #104]	@ 0x68
 8019c54:	2800      	cmp	r0, #0
 8019c56:	f43f aede 	beq.w	8019a16 <_strtod_l+0x43e>
 8019c5a:	9805      	ldr	r0, [sp, #20]
 8019c5c:	2101      	movs	r1, #1
 8019c5e:	f002 ffcb 	bl	801cbf8 <__i2b>
 8019c62:	4680      	mov	r8, r0
 8019c64:	b948      	cbnz	r0, 8019c7a <_strtod_l+0x6a2>
 8019c66:	f04f 0800 	mov.w	r8, #0
 8019c6a:	e6d4      	b.n	8019a16 <_strtod_l+0x43e>
 8019c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8019c70:	fa02 f303 	lsl.w	r3, r2, r3
 8019c74:	ea03 0a0a 	and.w	sl, r3, sl
 8019c78:	e7b0      	b.n	8019bdc <_strtod_l+0x604>
 8019c7a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8019c7c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8019c7e:	2d00      	cmp	r5, #0
 8019c80:	bfab      	itete	ge
 8019c82:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8019c84:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8019c86:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8019c88:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8019c8a:	bfac      	ite	ge
 8019c8c:	18ef      	addge	r7, r5, r3
 8019c8e:	1b5e      	sublt	r6, r3, r5
 8019c90:	9b08      	ldr	r3, [sp, #32]
 8019c92:	1aed      	subs	r5, r5, r3
 8019c94:	4415      	add	r5, r2
 8019c96:	4b66      	ldr	r3, [pc, #408]	@ (8019e30 <_strtod_l+0x858>)
 8019c98:	3d01      	subs	r5, #1
 8019c9a:	429d      	cmp	r5, r3
 8019c9c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8019ca0:	da50      	bge.n	8019d44 <_strtod_l+0x76c>
 8019ca2:	1b5b      	subs	r3, r3, r5
 8019ca4:	2b1f      	cmp	r3, #31
 8019ca6:	eba2 0203 	sub.w	r2, r2, r3
 8019caa:	f04f 0101 	mov.w	r1, #1
 8019cae:	dc3d      	bgt.n	8019d2c <_strtod_l+0x754>
 8019cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8019cb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019cb6:	2300      	movs	r3, #0
 8019cb8:	9310      	str	r3, [sp, #64]	@ 0x40
 8019cba:	18bd      	adds	r5, r7, r2
 8019cbc:	9b08      	ldr	r3, [sp, #32]
 8019cbe:	42af      	cmp	r7, r5
 8019cc0:	4416      	add	r6, r2
 8019cc2:	441e      	add	r6, r3
 8019cc4:	463b      	mov	r3, r7
 8019cc6:	bfa8      	it	ge
 8019cc8:	462b      	movge	r3, r5
 8019cca:	42b3      	cmp	r3, r6
 8019ccc:	bfa8      	it	ge
 8019cce:	4633      	movge	r3, r6
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	bfc2      	ittt	gt
 8019cd4:	1aed      	subgt	r5, r5, r3
 8019cd6:	1af6      	subgt	r6, r6, r3
 8019cd8:	1aff      	subgt	r7, r7, r3
 8019cda:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	dd16      	ble.n	8019d0e <_strtod_l+0x736>
 8019ce0:	4641      	mov	r1, r8
 8019ce2:	9805      	ldr	r0, [sp, #20]
 8019ce4:	461a      	mov	r2, r3
 8019ce6:	f003 f847 	bl	801cd78 <__pow5mult>
 8019cea:	4680      	mov	r8, r0
 8019cec:	2800      	cmp	r0, #0
 8019cee:	d0ba      	beq.n	8019c66 <_strtod_l+0x68e>
 8019cf0:	4601      	mov	r1, r0
 8019cf2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8019cf4:	9805      	ldr	r0, [sp, #20]
 8019cf6:	f002 ff95 	bl	801cc24 <__multiply>
 8019cfa:	900e      	str	r0, [sp, #56]	@ 0x38
 8019cfc:	2800      	cmp	r0, #0
 8019cfe:	f43f ae8a 	beq.w	8019a16 <_strtod_l+0x43e>
 8019d02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019d04:	9805      	ldr	r0, [sp, #20]
 8019d06:	f002 fe79 	bl	801c9fc <_Bfree>
 8019d0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019d0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8019d0e:	2d00      	cmp	r5, #0
 8019d10:	dc1d      	bgt.n	8019d4e <_strtod_l+0x776>
 8019d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	dd23      	ble.n	8019d60 <_strtod_l+0x788>
 8019d18:	4649      	mov	r1, r9
 8019d1a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8019d1c:	9805      	ldr	r0, [sp, #20]
 8019d1e:	f003 f82b 	bl	801cd78 <__pow5mult>
 8019d22:	4681      	mov	r9, r0
 8019d24:	b9e0      	cbnz	r0, 8019d60 <_strtod_l+0x788>
 8019d26:	f04f 0900 	mov.w	r9, #0
 8019d2a:	e674      	b.n	8019a16 <_strtod_l+0x43e>
 8019d2c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8019d30:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8019d34:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8019d38:	35e2      	adds	r5, #226	@ 0xe2
 8019d3a:	fa01 f305 	lsl.w	r3, r1, r5
 8019d3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8019d40:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019d42:	e7ba      	b.n	8019cba <_strtod_l+0x6e2>
 8019d44:	2300      	movs	r3, #0
 8019d46:	9310      	str	r3, [sp, #64]	@ 0x40
 8019d48:	2301      	movs	r3, #1
 8019d4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019d4c:	e7b5      	b.n	8019cba <_strtod_l+0x6e2>
 8019d4e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019d50:	9805      	ldr	r0, [sp, #20]
 8019d52:	462a      	mov	r2, r5
 8019d54:	f003 f86a 	bl	801ce2c <__lshift>
 8019d58:	901a      	str	r0, [sp, #104]	@ 0x68
 8019d5a:	2800      	cmp	r0, #0
 8019d5c:	d1d9      	bne.n	8019d12 <_strtod_l+0x73a>
 8019d5e:	e65a      	b.n	8019a16 <_strtod_l+0x43e>
 8019d60:	2e00      	cmp	r6, #0
 8019d62:	dd07      	ble.n	8019d74 <_strtod_l+0x79c>
 8019d64:	4649      	mov	r1, r9
 8019d66:	9805      	ldr	r0, [sp, #20]
 8019d68:	4632      	mov	r2, r6
 8019d6a:	f003 f85f 	bl	801ce2c <__lshift>
 8019d6e:	4681      	mov	r9, r0
 8019d70:	2800      	cmp	r0, #0
 8019d72:	d0d8      	beq.n	8019d26 <_strtod_l+0x74e>
 8019d74:	2f00      	cmp	r7, #0
 8019d76:	dd08      	ble.n	8019d8a <_strtod_l+0x7b2>
 8019d78:	4641      	mov	r1, r8
 8019d7a:	9805      	ldr	r0, [sp, #20]
 8019d7c:	463a      	mov	r2, r7
 8019d7e:	f003 f855 	bl	801ce2c <__lshift>
 8019d82:	4680      	mov	r8, r0
 8019d84:	2800      	cmp	r0, #0
 8019d86:	f43f ae46 	beq.w	8019a16 <_strtod_l+0x43e>
 8019d8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019d8c:	9805      	ldr	r0, [sp, #20]
 8019d8e:	464a      	mov	r2, r9
 8019d90:	f003 f8d4 	bl	801cf3c <__mdiff>
 8019d94:	4604      	mov	r4, r0
 8019d96:	2800      	cmp	r0, #0
 8019d98:	f43f ae3d 	beq.w	8019a16 <_strtod_l+0x43e>
 8019d9c:	68c3      	ldr	r3, [r0, #12]
 8019d9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019da0:	2300      	movs	r3, #0
 8019da2:	60c3      	str	r3, [r0, #12]
 8019da4:	4641      	mov	r1, r8
 8019da6:	f003 f8ad 	bl	801cf04 <__mcmp>
 8019daa:	2800      	cmp	r0, #0
 8019dac:	da46      	bge.n	8019e3c <_strtod_l+0x864>
 8019dae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019db0:	ea53 030a 	orrs.w	r3, r3, sl
 8019db4:	d16c      	bne.n	8019e90 <_strtod_l+0x8b8>
 8019db6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d168      	bne.n	8019e90 <_strtod_l+0x8b8>
 8019dbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019dc2:	0d1b      	lsrs	r3, r3, #20
 8019dc4:	051b      	lsls	r3, r3, #20
 8019dc6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019dca:	d961      	bls.n	8019e90 <_strtod_l+0x8b8>
 8019dcc:	6963      	ldr	r3, [r4, #20]
 8019dce:	b913      	cbnz	r3, 8019dd6 <_strtod_l+0x7fe>
 8019dd0:	6923      	ldr	r3, [r4, #16]
 8019dd2:	2b01      	cmp	r3, #1
 8019dd4:	dd5c      	ble.n	8019e90 <_strtod_l+0x8b8>
 8019dd6:	4621      	mov	r1, r4
 8019dd8:	2201      	movs	r2, #1
 8019dda:	9805      	ldr	r0, [sp, #20]
 8019ddc:	f003 f826 	bl	801ce2c <__lshift>
 8019de0:	4641      	mov	r1, r8
 8019de2:	4604      	mov	r4, r0
 8019de4:	f003 f88e 	bl	801cf04 <__mcmp>
 8019de8:	2800      	cmp	r0, #0
 8019dea:	dd51      	ble.n	8019e90 <_strtod_l+0x8b8>
 8019dec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019df0:	9a08      	ldr	r2, [sp, #32]
 8019df2:	0d1b      	lsrs	r3, r3, #20
 8019df4:	051b      	lsls	r3, r3, #20
 8019df6:	2a00      	cmp	r2, #0
 8019df8:	d06b      	beq.n	8019ed2 <_strtod_l+0x8fa>
 8019dfa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019dfe:	d868      	bhi.n	8019ed2 <_strtod_l+0x8fa>
 8019e00:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8019e04:	f67f ae9d 	bls.w	8019b42 <_strtod_l+0x56a>
 8019e08:	4b0a      	ldr	r3, [pc, #40]	@ (8019e34 <_strtod_l+0x85c>)
 8019e0a:	4650      	mov	r0, sl
 8019e0c:	4659      	mov	r1, fp
 8019e0e:	2200      	movs	r2, #0
 8019e10:	f7e6 fbca 	bl	80005a8 <__aeabi_dmul>
 8019e14:	4b08      	ldr	r3, [pc, #32]	@ (8019e38 <_strtod_l+0x860>)
 8019e16:	400b      	ands	r3, r1
 8019e18:	4682      	mov	sl, r0
 8019e1a:	468b      	mov	fp, r1
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	f47f ae05 	bne.w	8019a2c <_strtod_l+0x454>
 8019e22:	9a05      	ldr	r2, [sp, #20]
 8019e24:	2322      	movs	r3, #34	@ 0x22
 8019e26:	6013      	str	r3, [r2, #0]
 8019e28:	e600      	b.n	8019a2c <_strtod_l+0x454>
 8019e2a:	bf00      	nop
 8019e2c:	080219e8 	.word	0x080219e8
 8019e30:	fffffc02 	.word	0xfffffc02
 8019e34:	39500000 	.word	0x39500000
 8019e38:	7ff00000 	.word	0x7ff00000
 8019e3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8019e40:	d165      	bne.n	8019f0e <_strtod_l+0x936>
 8019e42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019e44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019e48:	b35a      	cbz	r2, 8019ea2 <_strtod_l+0x8ca>
 8019e4a:	4a9f      	ldr	r2, [pc, #636]	@ (801a0c8 <_strtod_l+0xaf0>)
 8019e4c:	4293      	cmp	r3, r2
 8019e4e:	d12b      	bne.n	8019ea8 <_strtod_l+0x8d0>
 8019e50:	9b08      	ldr	r3, [sp, #32]
 8019e52:	4651      	mov	r1, sl
 8019e54:	b303      	cbz	r3, 8019e98 <_strtod_l+0x8c0>
 8019e56:	4b9d      	ldr	r3, [pc, #628]	@ (801a0cc <_strtod_l+0xaf4>)
 8019e58:	465a      	mov	r2, fp
 8019e5a:	4013      	ands	r3, r2
 8019e5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8019e60:	f04f 32ff 	mov.w	r2, #4294967295
 8019e64:	d81b      	bhi.n	8019e9e <_strtod_l+0x8c6>
 8019e66:	0d1b      	lsrs	r3, r3, #20
 8019e68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8019e70:	4299      	cmp	r1, r3
 8019e72:	d119      	bne.n	8019ea8 <_strtod_l+0x8d0>
 8019e74:	4b96      	ldr	r3, [pc, #600]	@ (801a0d0 <_strtod_l+0xaf8>)
 8019e76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019e78:	429a      	cmp	r2, r3
 8019e7a:	d102      	bne.n	8019e82 <_strtod_l+0x8aa>
 8019e7c:	3101      	adds	r1, #1
 8019e7e:	f43f adca 	beq.w	8019a16 <_strtod_l+0x43e>
 8019e82:	4b92      	ldr	r3, [pc, #584]	@ (801a0cc <_strtod_l+0xaf4>)
 8019e84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019e86:	401a      	ands	r2, r3
 8019e88:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8019e8c:	f04f 0a00 	mov.w	sl, #0
 8019e90:	9b08      	ldr	r3, [sp, #32]
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d1b8      	bne.n	8019e08 <_strtod_l+0x830>
 8019e96:	e5c9      	b.n	8019a2c <_strtod_l+0x454>
 8019e98:	f04f 33ff 	mov.w	r3, #4294967295
 8019e9c:	e7e8      	b.n	8019e70 <_strtod_l+0x898>
 8019e9e:	4613      	mov	r3, r2
 8019ea0:	e7e6      	b.n	8019e70 <_strtod_l+0x898>
 8019ea2:	ea53 030a 	orrs.w	r3, r3, sl
 8019ea6:	d0a1      	beq.n	8019dec <_strtod_l+0x814>
 8019ea8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019eaa:	b1db      	cbz	r3, 8019ee4 <_strtod_l+0x90c>
 8019eac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019eae:	4213      	tst	r3, r2
 8019eb0:	d0ee      	beq.n	8019e90 <_strtod_l+0x8b8>
 8019eb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019eb4:	9a08      	ldr	r2, [sp, #32]
 8019eb6:	4650      	mov	r0, sl
 8019eb8:	4659      	mov	r1, fp
 8019eba:	b1bb      	cbz	r3, 8019eec <_strtod_l+0x914>
 8019ebc:	f7ff fb6e 	bl	801959c <sulp>
 8019ec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019ec4:	ec53 2b10 	vmov	r2, r3, d0
 8019ec8:	f7e6 f9b8 	bl	800023c <__adddf3>
 8019ecc:	4682      	mov	sl, r0
 8019ece:	468b      	mov	fp, r1
 8019ed0:	e7de      	b.n	8019e90 <_strtod_l+0x8b8>
 8019ed2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8019ed6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8019eda:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8019ede:	f04f 3aff 	mov.w	sl, #4294967295
 8019ee2:	e7d5      	b.n	8019e90 <_strtod_l+0x8b8>
 8019ee4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019ee6:	ea13 0f0a 	tst.w	r3, sl
 8019eea:	e7e1      	b.n	8019eb0 <_strtod_l+0x8d8>
 8019eec:	f7ff fb56 	bl	801959c <sulp>
 8019ef0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019ef4:	ec53 2b10 	vmov	r2, r3, d0
 8019ef8:	f7e6 f99e 	bl	8000238 <__aeabi_dsub>
 8019efc:	2200      	movs	r2, #0
 8019efe:	2300      	movs	r3, #0
 8019f00:	4682      	mov	sl, r0
 8019f02:	468b      	mov	fp, r1
 8019f04:	f7e6 fdb8 	bl	8000a78 <__aeabi_dcmpeq>
 8019f08:	2800      	cmp	r0, #0
 8019f0a:	d0c1      	beq.n	8019e90 <_strtod_l+0x8b8>
 8019f0c:	e619      	b.n	8019b42 <_strtod_l+0x56a>
 8019f0e:	4641      	mov	r1, r8
 8019f10:	4620      	mov	r0, r4
 8019f12:	f003 f96f 	bl	801d1f4 <__ratio>
 8019f16:	ec57 6b10 	vmov	r6, r7, d0
 8019f1a:	2200      	movs	r2, #0
 8019f1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8019f20:	4630      	mov	r0, r6
 8019f22:	4639      	mov	r1, r7
 8019f24:	f7e6 fdbc 	bl	8000aa0 <__aeabi_dcmple>
 8019f28:	2800      	cmp	r0, #0
 8019f2a:	d06f      	beq.n	801a00c <_strtod_l+0xa34>
 8019f2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d17a      	bne.n	801a028 <_strtod_l+0xa50>
 8019f32:	f1ba 0f00 	cmp.w	sl, #0
 8019f36:	d158      	bne.n	8019fea <_strtod_l+0xa12>
 8019f38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d15a      	bne.n	8019ff8 <_strtod_l+0xa20>
 8019f42:	4b64      	ldr	r3, [pc, #400]	@ (801a0d4 <_strtod_l+0xafc>)
 8019f44:	2200      	movs	r2, #0
 8019f46:	4630      	mov	r0, r6
 8019f48:	4639      	mov	r1, r7
 8019f4a:	f7e6 fd9f 	bl	8000a8c <__aeabi_dcmplt>
 8019f4e:	2800      	cmp	r0, #0
 8019f50:	d159      	bne.n	801a006 <_strtod_l+0xa2e>
 8019f52:	4630      	mov	r0, r6
 8019f54:	4639      	mov	r1, r7
 8019f56:	4b60      	ldr	r3, [pc, #384]	@ (801a0d8 <_strtod_l+0xb00>)
 8019f58:	2200      	movs	r2, #0
 8019f5a:	f7e6 fb25 	bl	80005a8 <__aeabi_dmul>
 8019f5e:	4606      	mov	r6, r0
 8019f60:	460f      	mov	r7, r1
 8019f62:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8019f66:	9606      	str	r6, [sp, #24]
 8019f68:	9307      	str	r3, [sp, #28]
 8019f6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019f6e:	4d57      	ldr	r5, [pc, #348]	@ (801a0cc <_strtod_l+0xaf4>)
 8019f70:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8019f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f76:	401d      	ands	r5, r3
 8019f78:	4b58      	ldr	r3, [pc, #352]	@ (801a0dc <_strtod_l+0xb04>)
 8019f7a:	429d      	cmp	r5, r3
 8019f7c:	f040 80b2 	bne.w	801a0e4 <_strtod_l+0xb0c>
 8019f80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f82:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8019f86:	ec4b ab10 	vmov	d0, sl, fp
 8019f8a:	f003 f86b 	bl	801d064 <__ulp>
 8019f8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019f92:	ec51 0b10 	vmov	r0, r1, d0
 8019f96:	f7e6 fb07 	bl	80005a8 <__aeabi_dmul>
 8019f9a:	4652      	mov	r2, sl
 8019f9c:	465b      	mov	r3, fp
 8019f9e:	f7e6 f94d 	bl	800023c <__adddf3>
 8019fa2:	460b      	mov	r3, r1
 8019fa4:	4949      	ldr	r1, [pc, #292]	@ (801a0cc <_strtod_l+0xaf4>)
 8019fa6:	4a4e      	ldr	r2, [pc, #312]	@ (801a0e0 <_strtod_l+0xb08>)
 8019fa8:	4019      	ands	r1, r3
 8019faa:	4291      	cmp	r1, r2
 8019fac:	4682      	mov	sl, r0
 8019fae:	d942      	bls.n	801a036 <_strtod_l+0xa5e>
 8019fb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019fb2:	4b47      	ldr	r3, [pc, #284]	@ (801a0d0 <_strtod_l+0xaf8>)
 8019fb4:	429a      	cmp	r2, r3
 8019fb6:	d103      	bne.n	8019fc0 <_strtod_l+0x9e8>
 8019fb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019fba:	3301      	adds	r3, #1
 8019fbc:	f43f ad2b 	beq.w	8019a16 <_strtod_l+0x43e>
 8019fc0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801a0d0 <_strtod_l+0xaf8>
 8019fc4:	f04f 3aff 	mov.w	sl, #4294967295
 8019fc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019fca:	9805      	ldr	r0, [sp, #20]
 8019fcc:	f002 fd16 	bl	801c9fc <_Bfree>
 8019fd0:	9805      	ldr	r0, [sp, #20]
 8019fd2:	4649      	mov	r1, r9
 8019fd4:	f002 fd12 	bl	801c9fc <_Bfree>
 8019fd8:	9805      	ldr	r0, [sp, #20]
 8019fda:	4641      	mov	r1, r8
 8019fdc:	f002 fd0e 	bl	801c9fc <_Bfree>
 8019fe0:	9805      	ldr	r0, [sp, #20]
 8019fe2:	4621      	mov	r1, r4
 8019fe4:	f002 fd0a 	bl	801c9fc <_Bfree>
 8019fe8:	e618      	b.n	8019c1c <_strtod_l+0x644>
 8019fea:	f1ba 0f01 	cmp.w	sl, #1
 8019fee:	d103      	bne.n	8019ff8 <_strtod_l+0xa20>
 8019ff0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	f43f ada5 	beq.w	8019b42 <_strtod_l+0x56a>
 8019ff8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801a0a8 <_strtod_l+0xad0>
 8019ffc:	4f35      	ldr	r7, [pc, #212]	@ (801a0d4 <_strtod_l+0xafc>)
 8019ffe:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a002:	2600      	movs	r6, #0
 801a004:	e7b1      	b.n	8019f6a <_strtod_l+0x992>
 801a006:	4f34      	ldr	r7, [pc, #208]	@ (801a0d8 <_strtod_l+0xb00>)
 801a008:	2600      	movs	r6, #0
 801a00a:	e7aa      	b.n	8019f62 <_strtod_l+0x98a>
 801a00c:	4b32      	ldr	r3, [pc, #200]	@ (801a0d8 <_strtod_l+0xb00>)
 801a00e:	4630      	mov	r0, r6
 801a010:	4639      	mov	r1, r7
 801a012:	2200      	movs	r2, #0
 801a014:	f7e6 fac8 	bl	80005a8 <__aeabi_dmul>
 801a018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a01a:	4606      	mov	r6, r0
 801a01c:	460f      	mov	r7, r1
 801a01e:	2b00      	cmp	r3, #0
 801a020:	d09f      	beq.n	8019f62 <_strtod_l+0x98a>
 801a022:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801a026:	e7a0      	b.n	8019f6a <_strtod_l+0x992>
 801a028:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801a0b0 <_strtod_l+0xad8>
 801a02c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a030:	ec57 6b17 	vmov	r6, r7, d7
 801a034:	e799      	b.n	8019f6a <_strtod_l+0x992>
 801a036:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801a03a:	9b08      	ldr	r3, [sp, #32]
 801a03c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801a040:	2b00      	cmp	r3, #0
 801a042:	d1c1      	bne.n	8019fc8 <_strtod_l+0x9f0>
 801a044:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a048:	0d1b      	lsrs	r3, r3, #20
 801a04a:	051b      	lsls	r3, r3, #20
 801a04c:	429d      	cmp	r5, r3
 801a04e:	d1bb      	bne.n	8019fc8 <_strtod_l+0x9f0>
 801a050:	4630      	mov	r0, r6
 801a052:	4639      	mov	r1, r7
 801a054:	f7e6 fe08 	bl	8000c68 <__aeabi_d2lz>
 801a058:	f7e6 fa78 	bl	800054c <__aeabi_l2d>
 801a05c:	4602      	mov	r2, r0
 801a05e:	460b      	mov	r3, r1
 801a060:	4630      	mov	r0, r6
 801a062:	4639      	mov	r1, r7
 801a064:	f7e6 f8e8 	bl	8000238 <__aeabi_dsub>
 801a068:	460b      	mov	r3, r1
 801a06a:	4602      	mov	r2, r0
 801a06c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801a070:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801a074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a076:	ea46 060a 	orr.w	r6, r6, sl
 801a07a:	431e      	orrs	r6, r3
 801a07c:	d06f      	beq.n	801a15e <_strtod_l+0xb86>
 801a07e:	a30e      	add	r3, pc, #56	@ (adr r3, 801a0b8 <_strtod_l+0xae0>)
 801a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a084:	f7e6 fd02 	bl	8000a8c <__aeabi_dcmplt>
 801a088:	2800      	cmp	r0, #0
 801a08a:	f47f accf 	bne.w	8019a2c <_strtod_l+0x454>
 801a08e:	a30c      	add	r3, pc, #48	@ (adr r3, 801a0c0 <_strtod_l+0xae8>)
 801a090:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a094:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a098:	f7e6 fd16 	bl	8000ac8 <__aeabi_dcmpgt>
 801a09c:	2800      	cmp	r0, #0
 801a09e:	d093      	beq.n	8019fc8 <_strtod_l+0x9f0>
 801a0a0:	e4c4      	b.n	8019a2c <_strtod_l+0x454>
 801a0a2:	bf00      	nop
 801a0a4:	f3af 8000 	nop.w
 801a0a8:	00000000 	.word	0x00000000
 801a0ac:	bff00000 	.word	0xbff00000
 801a0b0:	00000000 	.word	0x00000000
 801a0b4:	3ff00000 	.word	0x3ff00000
 801a0b8:	94a03595 	.word	0x94a03595
 801a0bc:	3fdfffff 	.word	0x3fdfffff
 801a0c0:	35afe535 	.word	0x35afe535
 801a0c4:	3fe00000 	.word	0x3fe00000
 801a0c8:	000fffff 	.word	0x000fffff
 801a0cc:	7ff00000 	.word	0x7ff00000
 801a0d0:	7fefffff 	.word	0x7fefffff
 801a0d4:	3ff00000 	.word	0x3ff00000
 801a0d8:	3fe00000 	.word	0x3fe00000
 801a0dc:	7fe00000 	.word	0x7fe00000
 801a0e0:	7c9fffff 	.word	0x7c9fffff
 801a0e4:	9b08      	ldr	r3, [sp, #32]
 801a0e6:	b323      	cbz	r3, 801a132 <_strtod_l+0xb5a>
 801a0e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801a0ec:	d821      	bhi.n	801a132 <_strtod_l+0xb5a>
 801a0ee:	a328      	add	r3, pc, #160	@ (adr r3, 801a190 <_strtod_l+0xbb8>)
 801a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0f4:	4630      	mov	r0, r6
 801a0f6:	4639      	mov	r1, r7
 801a0f8:	f7e6 fcd2 	bl	8000aa0 <__aeabi_dcmple>
 801a0fc:	b1a0      	cbz	r0, 801a128 <_strtod_l+0xb50>
 801a0fe:	4639      	mov	r1, r7
 801a100:	4630      	mov	r0, r6
 801a102:	f7e6 fd29 	bl	8000b58 <__aeabi_d2uiz>
 801a106:	2801      	cmp	r0, #1
 801a108:	bf38      	it	cc
 801a10a:	2001      	movcc	r0, #1
 801a10c:	f7e6 f9d2 	bl	80004b4 <__aeabi_ui2d>
 801a110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a112:	4606      	mov	r6, r0
 801a114:	460f      	mov	r7, r1
 801a116:	b9fb      	cbnz	r3, 801a158 <_strtod_l+0xb80>
 801a118:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a11c:	9014      	str	r0, [sp, #80]	@ 0x50
 801a11e:	9315      	str	r3, [sp, #84]	@ 0x54
 801a120:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801a124:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a128:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a12a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801a12e:	1b5b      	subs	r3, r3, r5
 801a130:	9311      	str	r3, [sp, #68]	@ 0x44
 801a132:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801a136:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801a13a:	f002 ff93 	bl	801d064 <__ulp>
 801a13e:	4650      	mov	r0, sl
 801a140:	ec53 2b10 	vmov	r2, r3, d0
 801a144:	4659      	mov	r1, fp
 801a146:	f7e6 fa2f 	bl	80005a8 <__aeabi_dmul>
 801a14a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801a14e:	f7e6 f875 	bl	800023c <__adddf3>
 801a152:	4682      	mov	sl, r0
 801a154:	468b      	mov	fp, r1
 801a156:	e770      	b.n	801a03a <_strtod_l+0xa62>
 801a158:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801a15c:	e7e0      	b.n	801a120 <_strtod_l+0xb48>
 801a15e:	a30e      	add	r3, pc, #56	@ (adr r3, 801a198 <_strtod_l+0xbc0>)
 801a160:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a164:	f7e6 fc92 	bl	8000a8c <__aeabi_dcmplt>
 801a168:	e798      	b.n	801a09c <_strtod_l+0xac4>
 801a16a:	2300      	movs	r3, #0
 801a16c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a16e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a170:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a172:	6013      	str	r3, [r2, #0]
 801a174:	f7ff ba6d 	b.w	8019652 <_strtod_l+0x7a>
 801a178:	2a65      	cmp	r2, #101	@ 0x65
 801a17a:	f43f ab66 	beq.w	801984a <_strtod_l+0x272>
 801a17e:	2a45      	cmp	r2, #69	@ 0x45
 801a180:	f43f ab63 	beq.w	801984a <_strtod_l+0x272>
 801a184:	2301      	movs	r3, #1
 801a186:	f7ff bb9e 	b.w	80198c6 <_strtod_l+0x2ee>
 801a18a:	bf00      	nop
 801a18c:	f3af 8000 	nop.w
 801a190:	ffc00000 	.word	0xffc00000
 801a194:	41dfffff 	.word	0x41dfffff
 801a198:	94a03595 	.word	0x94a03595
 801a19c:	3fcfffff 	.word	0x3fcfffff

0801a1a0 <_strtod_r>:
 801a1a0:	4b01      	ldr	r3, [pc, #4]	@ (801a1a8 <_strtod_r+0x8>)
 801a1a2:	f7ff ba19 	b.w	80195d8 <_strtod_l>
 801a1a6:	bf00      	nop
 801a1a8:	20000154 	.word	0x20000154

0801a1ac <strtof>:
 801a1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1b0:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 801a270 <strtof+0xc4>
 801a1b4:	4b29      	ldr	r3, [pc, #164]	@ (801a25c <strtof+0xb0>)
 801a1b6:	460a      	mov	r2, r1
 801a1b8:	ed2d 8b02 	vpush	{d8}
 801a1bc:	4601      	mov	r1, r0
 801a1be:	f8d8 0000 	ldr.w	r0, [r8]
 801a1c2:	f7ff fa09 	bl	80195d8 <_strtod_l>
 801a1c6:	ec55 4b10 	vmov	r4, r5, d0
 801a1ca:	4622      	mov	r2, r4
 801a1cc:	462b      	mov	r3, r5
 801a1ce:	4620      	mov	r0, r4
 801a1d0:	4629      	mov	r1, r5
 801a1d2:	f7e6 fc83 	bl	8000adc <__aeabi_dcmpun>
 801a1d6:	b190      	cbz	r0, 801a1fe <strtof+0x52>
 801a1d8:	2d00      	cmp	r5, #0
 801a1da:	4821      	ldr	r0, [pc, #132]	@ (801a260 <strtof+0xb4>)
 801a1dc:	da09      	bge.n	801a1f2 <strtof+0x46>
 801a1de:	f001 f9c7 	bl	801b570 <nanf>
 801a1e2:	eeb1 8a40 	vneg.f32	s16, s0
 801a1e6:	eeb0 0a48 	vmov.f32	s0, s16
 801a1ea:	ecbd 8b02 	vpop	{d8}
 801a1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1f2:	ecbd 8b02 	vpop	{d8}
 801a1f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a1fa:	f001 b9b9 	b.w	801b570 <nanf>
 801a1fe:	4620      	mov	r0, r4
 801a200:	4629      	mov	r1, r5
 801a202:	f7e6 fcc9 	bl	8000b98 <__aeabi_d2f>
 801a206:	ee08 0a10 	vmov	s16, r0
 801a20a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 801a264 <strtof+0xb8>
 801a20e:	eeb0 7ac8 	vabs.f32	s14, s16
 801a212:	eeb4 7a67 	vcmp.f32	s14, s15
 801a216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a21a:	dd11      	ble.n	801a240 <strtof+0x94>
 801a21c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 801a220:	4b11      	ldr	r3, [pc, #68]	@ (801a268 <strtof+0xbc>)
 801a222:	f04f 32ff 	mov.w	r2, #4294967295
 801a226:	4620      	mov	r0, r4
 801a228:	4639      	mov	r1, r7
 801a22a:	f7e6 fc57 	bl	8000adc <__aeabi_dcmpun>
 801a22e:	b980      	cbnz	r0, 801a252 <strtof+0xa6>
 801a230:	4b0d      	ldr	r3, [pc, #52]	@ (801a268 <strtof+0xbc>)
 801a232:	f04f 32ff 	mov.w	r2, #4294967295
 801a236:	4620      	mov	r0, r4
 801a238:	4639      	mov	r1, r7
 801a23a:	f7e6 fc31 	bl	8000aa0 <__aeabi_dcmple>
 801a23e:	b940      	cbnz	r0, 801a252 <strtof+0xa6>
 801a240:	ee18 3a10 	vmov	r3, s16
 801a244:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801a248:	d1cd      	bne.n	801a1e6 <strtof+0x3a>
 801a24a:	4b08      	ldr	r3, [pc, #32]	@ (801a26c <strtof+0xc0>)
 801a24c:	402b      	ands	r3, r5
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d0c9      	beq.n	801a1e6 <strtof+0x3a>
 801a252:	f8d8 3000 	ldr.w	r3, [r8]
 801a256:	2222      	movs	r2, #34	@ 0x22
 801a258:	601a      	str	r2, [r3, #0]
 801a25a:	e7c4      	b.n	801a1e6 <strtof+0x3a>
 801a25c:	20000154 	.word	0x20000154
 801a260:	08021bfe 	.word	0x08021bfe
 801a264:	7f7fffff 	.word	0x7f7fffff
 801a268:	7fefffff 	.word	0x7fefffff
 801a26c:	7ff00000 	.word	0x7ff00000
 801a270:	200002c0 	.word	0x200002c0

0801a274 <_strtol_l.constprop.0>:
 801a274:	2b24      	cmp	r3, #36	@ 0x24
 801a276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a27a:	4686      	mov	lr, r0
 801a27c:	4690      	mov	r8, r2
 801a27e:	d801      	bhi.n	801a284 <_strtol_l.constprop.0+0x10>
 801a280:	2b01      	cmp	r3, #1
 801a282:	d106      	bne.n	801a292 <_strtol_l.constprop.0+0x1e>
 801a284:	f001 f928 	bl	801b4d8 <__errno>
 801a288:	2316      	movs	r3, #22
 801a28a:	6003      	str	r3, [r0, #0]
 801a28c:	2000      	movs	r0, #0
 801a28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a292:	4834      	ldr	r0, [pc, #208]	@ (801a364 <_strtol_l.constprop.0+0xf0>)
 801a294:	460d      	mov	r5, r1
 801a296:	462a      	mov	r2, r5
 801a298:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a29c:	5d06      	ldrb	r6, [r0, r4]
 801a29e:	f016 0608 	ands.w	r6, r6, #8
 801a2a2:	d1f8      	bne.n	801a296 <_strtol_l.constprop.0+0x22>
 801a2a4:	2c2d      	cmp	r4, #45	@ 0x2d
 801a2a6:	d12d      	bne.n	801a304 <_strtol_l.constprop.0+0x90>
 801a2a8:	782c      	ldrb	r4, [r5, #0]
 801a2aa:	2601      	movs	r6, #1
 801a2ac:	1c95      	adds	r5, r2, #2
 801a2ae:	f033 0210 	bics.w	r2, r3, #16
 801a2b2:	d109      	bne.n	801a2c8 <_strtol_l.constprop.0+0x54>
 801a2b4:	2c30      	cmp	r4, #48	@ 0x30
 801a2b6:	d12a      	bne.n	801a30e <_strtol_l.constprop.0+0x9a>
 801a2b8:	782a      	ldrb	r2, [r5, #0]
 801a2ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801a2be:	2a58      	cmp	r2, #88	@ 0x58
 801a2c0:	d125      	bne.n	801a30e <_strtol_l.constprop.0+0x9a>
 801a2c2:	786c      	ldrb	r4, [r5, #1]
 801a2c4:	2310      	movs	r3, #16
 801a2c6:	3502      	adds	r5, #2
 801a2c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801a2cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a2d0:	2200      	movs	r2, #0
 801a2d2:	fbbc f9f3 	udiv	r9, ip, r3
 801a2d6:	4610      	mov	r0, r2
 801a2d8:	fb03 ca19 	mls	sl, r3, r9, ip
 801a2dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801a2e0:	2f09      	cmp	r7, #9
 801a2e2:	d81b      	bhi.n	801a31c <_strtol_l.constprop.0+0xa8>
 801a2e4:	463c      	mov	r4, r7
 801a2e6:	42a3      	cmp	r3, r4
 801a2e8:	dd27      	ble.n	801a33a <_strtol_l.constprop.0+0xc6>
 801a2ea:	1c57      	adds	r7, r2, #1
 801a2ec:	d007      	beq.n	801a2fe <_strtol_l.constprop.0+0x8a>
 801a2ee:	4581      	cmp	r9, r0
 801a2f0:	d320      	bcc.n	801a334 <_strtol_l.constprop.0+0xc0>
 801a2f2:	d101      	bne.n	801a2f8 <_strtol_l.constprop.0+0x84>
 801a2f4:	45a2      	cmp	sl, r4
 801a2f6:	db1d      	blt.n	801a334 <_strtol_l.constprop.0+0xc0>
 801a2f8:	fb00 4003 	mla	r0, r0, r3, r4
 801a2fc:	2201      	movs	r2, #1
 801a2fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a302:	e7eb      	b.n	801a2dc <_strtol_l.constprop.0+0x68>
 801a304:	2c2b      	cmp	r4, #43	@ 0x2b
 801a306:	bf04      	itt	eq
 801a308:	782c      	ldrbeq	r4, [r5, #0]
 801a30a:	1c95      	addeq	r5, r2, #2
 801a30c:	e7cf      	b.n	801a2ae <_strtol_l.constprop.0+0x3a>
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d1da      	bne.n	801a2c8 <_strtol_l.constprop.0+0x54>
 801a312:	2c30      	cmp	r4, #48	@ 0x30
 801a314:	bf0c      	ite	eq
 801a316:	2308      	moveq	r3, #8
 801a318:	230a      	movne	r3, #10
 801a31a:	e7d5      	b.n	801a2c8 <_strtol_l.constprop.0+0x54>
 801a31c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801a320:	2f19      	cmp	r7, #25
 801a322:	d801      	bhi.n	801a328 <_strtol_l.constprop.0+0xb4>
 801a324:	3c37      	subs	r4, #55	@ 0x37
 801a326:	e7de      	b.n	801a2e6 <_strtol_l.constprop.0+0x72>
 801a328:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801a32c:	2f19      	cmp	r7, #25
 801a32e:	d804      	bhi.n	801a33a <_strtol_l.constprop.0+0xc6>
 801a330:	3c57      	subs	r4, #87	@ 0x57
 801a332:	e7d8      	b.n	801a2e6 <_strtol_l.constprop.0+0x72>
 801a334:	f04f 32ff 	mov.w	r2, #4294967295
 801a338:	e7e1      	b.n	801a2fe <_strtol_l.constprop.0+0x8a>
 801a33a:	1c53      	adds	r3, r2, #1
 801a33c:	d108      	bne.n	801a350 <_strtol_l.constprop.0+0xdc>
 801a33e:	2322      	movs	r3, #34	@ 0x22
 801a340:	f8ce 3000 	str.w	r3, [lr]
 801a344:	4660      	mov	r0, ip
 801a346:	f1b8 0f00 	cmp.w	r8, #0
 801a34a:	d0a0      	beq.n	801a28e <_strtol_l.constprop.0+0x1a>
 801a34c:	1e69      	subs	r1, r5, #1
 801a34e:	e006      	b.n	801a35e <_strtol_l.constprop.0+0xea>
 801a350:	b106      	cbz	r6, 801a354 <_strtol_l.constprop.0+0xe0>
 801a352:	4240      	negs	r0, r0
 801a354:	f1b8 0f00 	cmp.w	r8, #0
 801a358:	d099      	beq.n	801a28e <_strtol_l.constprop.0+0x1a>
 801a35a:	2a00      	cmp	r2, #0
 801a35c:	d1f6      	bne.n	801a34c <_strtol_l.constprop.0+0xd8>
 801a35e:	f8c8 1000 	str.w	r1, [r8]
 801a362:	e794      	b.n	801a28e <_strtol_l.constprop.0+0x1a>
 801a364:	08021a11 	.word	0x08021a11

0801a368 <_strtol_r>:
 801a368:	f7ff bf84 	b.w	801a274 <_strtol_l.constprop.0>

0801a36c <strtol>:
 801a36c:	4613      	mov	r3, r2
 801a36e:	460a      	mov	r2, r1
 801a370:	4601      	mov	r1, r0
 801a372:	4802      	ldr	r0, [pc, #8]	@ (801a37c <strtol+0x10>)
 801a374:	6800      	ldr	r0, [r0, #0]
 801a376:	f7ff bf7d 	b.w	801a274 <_strtol_l.constprop.0>
 801a37a:	bf00      	nop
 801a37c:	200002c0 	.word	0x200002c0

0801a380 <__cvt>:
 801a380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a384:	ec57 6b10 	vmov	r6, r7, d0
 801a388:	2f00      	cmp	r7, #0
 801a38a:	460c      	mov	r4, r1
 801a38c:	4619      	mov	r1, r3
 801a38e:	463b      	mov	r3, r7
 801a390:	bfbb      	ittet	lt
 801a392:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801a396:	461f      	movlt	r7, r3
 801a398:	2300      	movge	r3, #0
 801a39a:	232d      	movlt	r3, #45	@ 0x2d
 801a39c:	700b      	strb	r3, [r1, #0]
 801a39e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a3a0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801a3a4:	4691      	mov	r9, r2
 801a3a6:	f023 0820 	bic.w	r8, r3, #32
 801a3aa:	bfbc      	itt	lt
 801a3ac:	4632      	movlt	r2, r6
 801a3ae:	4616      	movlt	r6, r2
 801a3b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a3b4:	d005      	beq.n	801a3c2 <__cvt+0x42>
 801a3b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801a3ba:	d100      	bne.n	801a3be <__cvt+0x3e>
 801a3bc:	3401      	adds	r4, #1
 801a3be:	2102      	movs	r1, #2
 801a3c0:	e000      	b.n	801a3c4 <__cvt+0x44>
 801a3c2:	2103      	movs	r1, #3
 801a3c4:	ab03      	add	r3, sp, #12
 801a3c6:	9301      	str	r3, [sp, #4]
 801a3c8:	ab02      	add	r3, sp, #8
 801a3ca:	9300      	str	r3, [sp, #0]
 801a3cc:	ec47 6b10 	vmov	d0, r6, r7
 801a3d0:	4653      	mov	r3, sl
 801a3d2:	4622      	mov	r2, r4
 801a3d4:	f001 f978 	bl	801b6c8 <_dtoa_r>
 801a3d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801a3dc:	4605      	mov	r5, r0
 801a3de:	d119      	bne.n	801a414 <__cvt+0x94>
 801a3e0:	f019 0f01 	tst.w	r9, #1
 801a3e4:	d00e      	beq.n	801a404 <__cvt+0x84>
 801a3e6:	eb00 0904 	add.w	r9, r0, r4
 801a3ea:	2200      	movs	r2, #0
 801a3ec:	2300      	movs	r3, #0
 801a3ee:	4630      	mov	r0, r6
 801a3f0:	4639      	mov	r1, r7
 801a3f2:	f7e6 fb41 	bl	8000a78 <__aeabi_dcmpeq>
 801a3f6:	b108      	cbz	r0, 801a3fc <__cvt+0x7c>
 801a3f8:	f8cd 900c 	str.w	r9, [sp, #12]
 801a3fc:	2230      	movs	r2, #48	@ 0x30
 801a3fe:	9b03      	ldr	r3, [sp, #12]
 801a400:	454b      	cmp	r3, r9
 801a402:	d31e      	bcc.n	801a442 <__cvt+0xc2>
 801a404:	9b03      	ldr	r3, [sp, #12]
 801a406:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a408:	1b5b      	subs	r3, r3, r5
 801a40a:	4628      	mov	r0, r5
 801a40c:	6013      	str	r3, [r2, #0]
 801a40e:	b004      	add	sp, #16
 801a410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a414:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a418:	eb00 0904 	add.w	r9, r0, r4
 801a41c:	d1e5      	bne.n	801a3ea <__cvt+0x6a>
 801a41e:	7803      	ldrb	r3, [r0, #0]
 801a420:	2b30      	cmp	r3, #48	@ 0x30
 801a422:	d10a      	bne.n	801a43a <__cvt+0xba>
 801a424:	2200      	movs	r2, #0
 801a426:	2300      	movs	r3, #0
 801a428:	4630      	mov	r0, r6
 801a42a:	4639      	mov	r1, r7
 801a42c:	f7e6 fb24 	bl	8000a78 <__aeabi_dcmpeq>
 801a430:	b918      	cbnz	r0, 801a43a <__cvt+0xba>
 801a432:	f1c4 0401 	rsb	r4, r4, #1
 801a436:	f8ca 4000 	str.w	r4, [sl]
 801a43a:	f8da 3000 	ldr.w	r3, [sl]
 801a43e:	4499      	add	r9, r3
 801a440:	e7d3      	b.n	801a3ea <__cvt+0x6a>
 801a442:	1c59      	adds	r1, r3, #1
 801a444:	9103      	str	r1, [sp, #12]
 801a446:	701a      	strb	r2, [r3, #0]
 801a448:	e7d9      	b.n	801a3fe <__cvt+0x7e>

0801a44a <__exponent>:
 801a44a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a44c:	2900      	cmp	r1, #0
 801a44e:	bfba      	itte	lt
 801a450:	4249      	neglt	r1, r1
 801a452:	232d      	movlt	r3, #45	@ 0x2d
 801a454:	232b      	movge	r3, #43	@ 0x2b
 801a456:	2909      	cmp	r1, #9
 801a458:	7002      	strb	r2, [r0, #0]
 801a45a:	7043      	strb	r3, [r0, #1]
 801a45c:	dd29      	ble.n	801a4b2 <__exponent+0x68>
 801a45e:	f10d 0307 	add.w	r3, sp, #7
 801a462:	461d      	mov	r5, r3
 801a464:	270a      	movs	r7, #10
 801a466:	461a      	mov	r2, r3
 801a468:	fbb1 f6f7 	udiv	r6, r1, r7
 801a46c:	fb07 1416 	mls	r4, r7, r6, r1
 801a470:	3430      	adds	r4, #48	@ 0x30
 801a472:	f802 4c01 	strb.w	r4, [r2, #-1]
 801a476:	460c      	mov	r4, r1
 801a478:	2c63      	cmp	r4, #99	@ 0x63
 801a47a:	f103 33ff 	add.w	r3, r3, #4294967295
 801a47e:	4631      	mov	r1, r6
 801a480:	dcf1      	bgt.n	801a466 <__exponent+0x1c>
 801a482:	3130      	adds	r1, #48	@ 0x30
 801a484:	1e94      	subs	r4, r2, #2
 801a486:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a48a:	1c41      	adds	r1, r0, #1
 801a48c:	4623      	mov	r3, r4
 801a48e:	42ab      	cmp	r3, r5
 801a490:	d30a      	bcc.n	801a4a8 <__exponent+0x5e>
 801a492:	f10d 0309 	add.w	r3, sp, #9
 801a496:	1a9b      	subs	r3, r3, r2
 801a498:	42ac      	cmp	r4, r5
 801a49a:	bf88      	it	hi
 801a49c:	2300      	movhi	r3, #0
 801a49e:	3302      	adds	r3, #2
 801a4a0:	4403      	add	r3, r0
 801a4a2:	1a18      	subs	r0, r3, r0
 801a4a4:	b003      	add	sp, #12
 801a4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a4ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 801a4b0:	e7ed      	b.n	801a48e <__exponent+0x44>
 801a4b2:	2330      	movs	r3, #48	@ 0x30
 801a4b4:	3130      	adds	r1, #48	@ 0x30
 801a4b6:	7083      	strb	r3, [r0, #2]
 801a4b8:	70c1      	strb	r1, [r0, #3]
 801a4ba:	1d03      	adds	r3, r0, #4
 801a4bc:	e7f1      	b.n	801a4a2 <__exponent+0x58>
	...

0801a4c0 <_printf_float>:
 801a4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4c4:	b08d      	sub	sp, #52	@ 0x34
 801a4c6:	460c      	mov	r4, r1
 801a4c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a4cc:	4616      	mov	r6, r2
 801a4ce:	461f      	mov	r7, r3
 801a4d0:	4605      	mov	r5, r0
 801a4d2:	f000 ffa7 	bl	801b424 <_localeconv_r>
 801a4d6:	6803      	ldr	r3, [r0, #0]
 801a4d8:	9304      	str	r3, [sp, #16]
 801a4da:	4618      	mov	r0, r3
 801a4dc:	f7e5 fea0 	bl	8000220 <strlen>
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	930a      	str	r3, [sp, #40]	@ 0x28
 801a4e4:	f8d8 3000 	ldr.w	r3, [r8]
 801a4e8:	9005      	str	r0, [sp, #20]
 801a4ea:	3307      	adds	r3, #7
 801a4ec:	f023 0307 	bic.w	r3, r3, #7
 801a4f0:	f103 0208 	add.w	r2, r3, #8
 801a4f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a4f8:	f8d4 b000 	ldr.w	fp, [r4]
 801a4fc:	f8c8 2000 	str.w	r2, [r8]
 801a500:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a504:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801a508:	9307      	str	r3, [sp, #28]
 801a50a:	f8cd 8018 	str.w	r8, [sp, #24]
 801a50e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801a512:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a516:	4b9c      	ldr	r3, [pc, #624]	@ (801a788 <_printf_float+0x2c8>)
 801a518:	f04f 32ff 	mov.w	r2, #4294967295
 801a51c:	f7e6 fade 	bl	8000adc <__aeabi_dcmpun>
 801a520:	bb70      	cbnz	r0, 801a580 <_printf_float+0xc0>
 801a522:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a526:	4b98      	ldr	r3, [pc, #608]	@ (801a788 <_printf_float+0x2c8>)
 801a528:	f04f 32ff 	mov.w	r2, #4294967295
 801a52c:	f7e6 fab8 	bl	8000aa0 <__aeabi_dcmple>
 801a530:	bb30      	cbnz	r0, 801a580 <_printf_float+0xc0>
 801a532:	2200      	movs	r2, #0
 801a534:	2300      	movs	r3, #0
 801a536:	4640      	mov	r0, r8
 801a538:	4649      	mov	r1, r9
 801a53a:	f7e6 faa7 	bl	8000a8c <__aeabi_dcmplt>
 801a53e:	b110      	cbz	r0, 801a546 <_printf_float+0x86>
 801a540:	232d      	movs	r3, #45	@ 0x2d
 801a542:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a546:	4a91      	ldr	r2, [pc, #580]	@ (801a78c <_printf_float+0x2cc>)
 801a548:	4b91      	ldr	r3, [pc, #580]	@ (801a790 <_printf_float+0x2d0>)
 801a54a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a54e:	bf94      	ite	ls
 801a550:	4690      	movls	r8, r2
 801a552:	4698      	movhi	r8, r3
 801a554:	2303      	movs	r3, #3
 801a556:	6123      	str	r3, [r4, #16]
 801a558:	f02b 0304 	bic.w	r3, fp, #4
 801a55c:	6023      	str	r3, [r4, #0]
 801a55e:	f04f 0900 	mov.w	r9, #0
 801a562:	9700      	str	r7, [sp, #0]
 801a564:	4633      	mov	r3, r6
 801a566:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a568:	4621      	mov	r1, r4
 801a56a:	4628      	mov	r0, r5
 801a56c:	f000 f9d2 	bl	801a914 <_printf_common>
 801a570:	3001      	adds	r0, #1
 801a572:	f040 808d 	bne.w	801a690 <_printf_float+0x1d0>
 801a576:	f04f 30ff 	mov.w	r0, #4294967295
 801a57a:	b00d      	add	sp, #52	@ 0x34
 801a57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a580:	4642      	mov	r2, r8
 801a582:	464b      	mov	r3, r9
 801a584:	4640      	mov	r0, r8
 801a586:	4649      	mov	r1, r9
 801a588:	f7e6 faa8 	bl	8000adc <__aeabi_dcmpun>
 801a58c:	b140      	cbz	r0, 801a5a0 <_printf_float+0xe0>
 801a58e:	464b      	mov	r3, r9
 801a590:	2b00      	cmp	r3, #0
 801a592:	bfbc      	itt	lt
 801a594:	232d      	movlt	r3, #45	@ 0x2d
 801a596:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a59a:	4a7e      	ldr	r2, [pc, #504]	@ (801a794 <_printf_float+0x2d4>)
 801a59c:	4b7e      	ldr	r3, [pc, #504]	@ (801a798 <_printf_float+0x2d8>)
 801a59e:	e7d4      	b.n	801a54a <_printf_float+0x8a>
 801a5a0:	6863      	ldr	r3, [r4, #4]
 801a5a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801a5a6:	9206      	str	r2, [sp, #24]
 801a5a8:	1c5a      	adds	r2, r3, #1
 801a5aa:	d13b      	bne.n	801a624 <_printf_float+0x164>
 801a5ac:	2306      	movs	r3, #6
 801a5ae:	6063      	str	r3, [r4, #4]
 801a5b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801a5b4:	2300      	movs	r3, #0
 801a5b6:	6022      	str	r2, [r4, #0]
 801a5b8:	9303      	str	r3, [sp, #12]
 801a5ba:	ab0a      	add	r3, sp, #40	@ 0x28
 801a5bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a5c0:	ab09      	add	r3, sp, #36	@ 0x24
 801a5c2:	9300      	str	r3, [sp, #0]
 801a5c4:	6861      	ldr	r1, [r4, #4]
 801a5c6:	ec49 8b10 	vmov	d0, r8, r9
 801a5ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a5ce:	4628      	mov	r0, r5
 801a5d0:	f7ff fed6 	bl	801a380 <__cvt>
 801a5d4:	9b06      	ldr	r3, [sp, #24]
 801a5d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a5d8:	2b47      	cmp	r3, #71	@ 0x47
 801a5da:	4680      	mov	r8, r0
 801a5dc:	d129      	bne.n	801a632 <_printf_float+0x172>
 801a5de:	1cc8      	adds	r0, r1, #3
 801a5e0:	db02      	blt.n	801a5e8 <_printf_float+0x128>
 801a5e2:	6863      	ldr	r3, [r4, #4]
 801a5e4:	4299      	cmp	r1, r3
 801a5e6:	dd41      	ble.n	801a66c <_printf_float+0x1ac>
 801a5e8:	f1aa 0a02 	sub.w	sl, sl, #2
 801a5ec:	fa5f fa8a 	uxtb.w	sl, sl
 801a5f0:	3901      	subs	r1, #1
 801a5f2:	4652      	mov	r2, sl
 801a5f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a5f8:	9109      	str	r1, [sp, #36]	@ 0x24
 801a5fa:	f7ff ff26 	bl	801a44a <__exponent>
 801a5fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a600:	1813      	adds	r3, r2, r0
 801a602:	2a01      	cmp	r2, #1
 801a604:	4681      	mov	r9, r0
 801a606:	6123      	str	r3, [r4, #16]
 801a608:	dc02      	bgt.n	801a610 <_printf_float+0x150>
 801a60a:	6822      	ldr	r2, [r4, #0]
 801a60c:	07d2      	lsls	r2, r2, #31
 801a60e:	d501      	bpl.n	801a614 <_printf_float+0x154>
 801a610:	3301      	adds	r3, #1
 801a612:	6123      	str	r3, [r4, #16]
 801a614:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d0a2      	beq.n	801a562 <_printf_float+0xa2>
 801a61c:	232d      	movs	r3, #45	@ 0x2d
 801a61e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a622:	e79e      	b.n	801a562 <_printf_float+0xa2>
 801a624:	9a06      	ldr	r2, [sp, #24]
 801a626:	2a47      	cmp	r2, #71	@ 0x47
 801a628:	d1c2      	bne.n	801a5b0 <_printf_float+0xf0>
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	d1c0      	bne.n	801a5b0 <_printf_float+0xf0>
 801a62e:	2301      	movs	r3, #1
 801a630:	e7bd      	b.n	801a5ae <_printf_float+0xee>
 801a632:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a636:	d9db      	bls.n	801a5f0 <_printf_float+0x130>
 801a638:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801a63c:	d118      	bne.n	801a670 <_printf_float+0x1b0>
 801a63e:	2900      	cmp	r1, #0
 801a640:	6863      	ldr	r3, [r4, #4]
 801a642:	dd0b      	ble.n	801a65c <_printf_float+0x19c>
 801a644:	6121      	str	r1, [r4, #16]
 801a646:	b913      	cbnz	r3, 801a64e <_printf_float+0x18e>
 801a648:	6822      	ldr	r2, [r4, #0]
 801a64a:	07d0      	lsls	r0, r2, #31
 801a64c:	d502      	bpl.n	801a654 <_printf_float+0x194>
 801a64e:	3301      	adds	r3, #1
 801a650:	440b      	add	r3, r1
 801a652:	6123      	str	r3, [r4, #16]
 801a654:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a656:	f04f 0900 	mov.w	r9, #0
 801a65a:	e7db      	b.n	801a614 <_printf_float+0x154>
 801a65c:	b913      	cbnz	r3, 801a664 <_printf_float+0x1a4>
 801a65e:	6822      	ldr	r2, [r4, #0]
 801a660:	07d2      	lsls	r2, r2, #31
 801a662:	d501      	bpl.n	801a668 <_printf_float+0x1a8>
 801a664:	3302      	adds	r3, #2
 801a666:	e7f4      	b.n	801a652 <_printf_float+0x192>
 801a668:	2301      	movs	r3, #1
 801a66a:	e7f2      	b.n	801a652 <_printf_float+0x192>
 801a66c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801a670:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a672:	4299      	cmp	r1, r3
 801a674:	db05      	blt.n	801a682 <_printf_float+0x1c2>
 801a676:	6823      	ldr	r3, [r4, #0]
 801a678:	6121      	str	r1, [r4, #16]
 801a67a:	07d8      	lsls	r0, r3, #31
 801a67c:	d5ea      	bpl.n	801a654 <_printf_float+0x194>
 801a67e:	1c4b      	adds	r3, r1, #1
 801a680:	e7e7      	b.n	801a652 <_printf_float+0x192>
 801a682:	2900      	cmp	r1, #0
 801a684:	bfd4      	ite	le
 801a686:	f1c1 0202 	rsble	r2, r1, #2
 801a68a:	2201      	movgt	r2, #1
 801a68c:	4413      	add	r3, r2
 801a68e:	e7e0      	b.n	801a652 <_printf_float+0x192>
 801a690:	6823      	ldr	r3, [r4, #0]
 801a692:	055a      	lsls	r2, r3, #21
 801a694:	d407      	bmi.n	801a6a6 <_printf_float+0x1e6>
 801a696:	6923      	ldr	r3, [r4, #16]
 801a698:	4642      	mov	r2, r8
 801a69a:	4631      	mov	r1, r6
 801a69c:	4628      	mov	r0, r5
 801a69e:	47b8      	blx	r7
 801a6a0:	3001      	adds	r0, #1
 801a6a2:	d12b      	bne.n	801a6fc <_printf_float+0x23c>
 801a6a4:	e767      	b.n	801a576 <_printf_float+0xb6>
 801a6a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a6aa:	f240 80dd 	bls.w	801a868 <_printf_float+0x3a8>
 801a6ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a6b2:	2200      	movs	r2, #0
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	f7e6 f9df 	bl	8000a78 <__aeabi_dcmpeq>
 801a6ba:	2800      	cmp	r0, #0
 801a6bc:	d033      	beq.n	801a726 <_printf_float+0x266>
 801a6be:	4a37      	ldr	r2, [pc, #220]	@ (801a79c <_printf_float+0x2dc>)
 801a6c0:	2301      	movs	r3, #1
 801a6c2:	4631      	mov	r1, r6
 801a6c4:	4628      	mov	r0, r5
 801a6c6:	47b8      	blx	r7
 801a6c8:	3001      	adds	r0, #1
 801a6ca:	f43f af54 	beq.w	801a576 <_printf_float+0xb6>
 801a6ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a6d2:	4543      	cmp	r3, r8
 801a6d4:	db02      	blt.n	801a6dc <_printf_float+0x21c>
 801a6d6:	6823      	ldr	r3, [r4, #0]
 801a6d8:	07d8      	lsls	r0, r3, #31
 801a6da:	d50f      	bpl.n	801a6fc <_printf_float+0x23c>
 801a6dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a6e0:	4631      	mov	r1, r6
 801a6e2:	4628      	mov	r0, r5
 801a6e4:	47b8      	blx	r7
 801a6e6:	3001      	adds	r0, #1
 801a6e8:	f43f af45 	beq.w	801a576 <_printf_float+0xb6>
 801a6ec:	f04f 0900 	mov.w	r9, #0
 801a6f0:	f108 38ff 	add.w	r8, r8, #4294967295
 801a6f4:	f104 0a1a 	add.w	sl, r4, #26
 801a6f8:	45c8      	cmp	r8, r9
 801a6fa:	dc09      	bgt.n	801a710 <_printf_float+0x250>
 801a6fc:	6823      	ldr	r3, [r4, #0]
 801a6fe:	079b      	lsls	r3, r3, #30
 801a700:	f100 8103 	bmi.w	801a90a <_printf_float+0x44a>
 801a704:	68e0      	ldr	r0, [r4, #12]
 801a706:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a708:	4298      	cmp	r0, r3
 801a70a:	bfb8      	it	lt
 801a70c:	4618      	movlt	r0, r3
 801a70e:	e734      	b.n	801a57a <_printf_float+0xba>
 801a710:	2301      	movs	r3, #1
 801a712:	4652      	mov	r2, sl
 801a714:	4631      	mov	r1, r6
 801a716:	4628      	mov	r0, r5
 801a718:	47b8      	blx	r7
 801a71a:	3001      	adds	r0, #1
 801a71c:	f43f af2b 	beq.w	801a576 <_printf_float+0xb6>
 801a720:	f109 0901 	add.w	r9, r9, #1
 801a724:	e7e8      	b.n	801a6f8 <_printf_float+0x238>
 801a726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a728:	2b00      	cmp	r3, #0
 801a72a:	dc39      	bgt.n	801a7a0 <_printf_float+0x2e0>
 801a72c:	4a1b      	ldr	r2, [pc, #108]	@ (801a79c <_printf_float+0x2dc>)
 801a72e:	2301      	movs	r3, #1
 801a730:	4631      	mov	r1, r6
 801a732:	4628      	mov	r0, r5
 801a734:	47b8      	blx	r7
 801a736:	3001      	adds	r0, #1
 801a738:	f43f af1d 	beq.w	801a576 <_printf_float+0xb6>
 801a73c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801a740:	ea59 0303 	orrs.w	r3, r9, r3
 801a744:	d102      	bne.n	801a74c <_printf_float+0x28c>
 801a746:	6823      	ldr	r3, [r4, #0]
 801a748:	07d9      	lsls	r1, r3, #31
 801a74a:	d5d7      	bpl.n	801a6fc <_printf_float+0x23c>
 801a74c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a750:	4631      	mov	r1, r6
 801a752:	4628      	mov	r0, r5
 801a754:	47b8      	blx	r7
 801a756:	3001      	adds	r0, #1
 801a758:	f43f af0d 	beq.w	801a576 <_printf_float+0xb6>
 801a75c:	f04f 0a00 	mov.w	sl, #0
 801a760:	f104 0b1a 	add.w	fp, r4, #26
 801a764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a766:	425b      	negs	r3, r3
 801a768:	4553      	cmp	r3, sl
 801a76a:	dc01      	bgt.n	801a770 <_printf_float+0x2b0>
 801a76c:	464b      	mov	r3, r9
 801a76e:	e793      	b.n	801a698 <_printf_float+0x1d8>
 801a770:	2301      	movs	r3, #1
 801a772:	465a      	mov	r2, fp
 801a774:	4631      	mov	r1, r6
 801a776:	4628      	mov	r0, r5
 801a778:	47b8      	blx	r7
 801a77a:	3001      	adds	r0, #1
 801a77c:	f43f aefb 	beq.w	801a576 <_printf_float+0xb6>
 801a780:	f10a 0a01 	add.w	sl, sl, #1
 801a784:	e7ee      	b.n	801a764 <_printf_float+0x2a4>
 801a786:	bf00      	nop
 801a788:	7fefffff 	.word	0x7fefffff
 801a78c:	08021b11 	.word	0x08021b11
 801a790:	08021b15 	.word	0x08021b15
 801a794:	08021b19 	.word	0x08021b19
 801a798:	08021b1d 	.word	0x08021b1d
 801a79c:	08021b21 	.word	0x08021b21
 801a7a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a7a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a7a6:	4553      	cmp	r3, sl
 801a7a8:	bfa8      	it	ge
 801a7aa:	4653      	movge	r3, sl
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	4699      	mov	r9, r3
 801a7b0:	dc36      	bgt.n	801a820 <_printf_float+0x360>
 801a7b2:	f04f 0b00 	mov.w	fp, #0
 801a7b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a7ba:	f104 021a 	add.w	r2, r4, #26
 801a7be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a7c0:	9306      	str	r3, [sp, #24]
 801a7c2:	eba3 0309 	sub.w	r3, r3, r9
 801a7c6:	455b      	cmp	r3, fp
 801a7c8:	dc31      	bgt.n	801a82e <_printf_float+0x36e>
 801a7ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a7cc:	459a      	cmp	sl, r3
 801a7ce:	dc3a      	bgt.n	801a846 <_printf_float+0x386>
 801a7d0:	6823      	ldr	r3, [r4, #0]
 801a7d2:	07da      	lsls	r2, r3, #31
 801a7d4:	d437      	bmi.n	801a846 <_printf_float+0x386>
 801a7d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a7d8:	ebaa 0903 	sub.w	r9, sl, r3
 801a7dc:	9b06      	ldr	r3, [sp, #24]
 801a7de:	ebaa 0303 	sub.w	r3, sl, r3
 801a7e2:	4599      	cmp	r9, r3
 801a7e4:	bfa8      	it	ge
 801a7e6:	4699      	movge	r9, r3
 801a7e8:	f1b9 0f00 	cmp.w	r9, #0
 801a7ec:	dc33      	bgt.n	801a856 <_printf_float+0x396>
 801a7ee:	f04f 0800 	mov.w	r8, #0
 801a7f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a7f6:	f104 0b1a 	add.w	fp, r4, #26
 801a7fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a7fc:	ebaa 0303 	sub.w	r3, sl, r3
 801a800:	eba3 0309 	sub.w	r3, r3, r9
 801a804:	4543      	cmp	r3, r8
 801a806:	f77f af79 	ble.w	801a6fc <_printf_float+0x23c>
 801a80a:	2301      	movs	r3, #1
 801a80c:	465a      	mov	r2, fp
 801a80e:	4631      	mov	r1, r6
 801a810:	4628      	mov	r0, r5
 801a812:	47b8      	blx	r7
 801a814:	3001      	adds	r0, #1
 801a816:	f43f aeae 	beq.w	801a576 <_printf_float+0xb6>
 801a81a:	f108 0801 	add.w	r8, r8, #1
 801a81e:	e7ec      	b.n	801a7fa <_printf_float+0x33a>
 801a820:	4642      	mov	r2, r8
 801a822:	4631      	mov	r1, r6
 801a824:	4628      	mov	r0, r5
 801a826:	47b8      	blx	r7
 801a828:	3001      	adds	r0, #1
 801a82a:	d1c2      	bne.n	801a7b2 <_printf_float+0x2f2>
 801a82c:	e6a3      	b.n	801a576 <_printf_float+0xb6>
 801a82e:	2301      	movs	r3, #1
 801a830:	4631      	mov	r1, r6
 801a832:	4628      	mov	r0, r5
 801a834:	9206      	str	r2, [sp, #24]
 801a836:	47b8      	blx	r7
 801a838:	3001      	adds	r0, #1
 801a83a:	f43f ae9c 	beq.w	801a576 <_printf_float+0xb6>
 801a83e:	9a06      	ldr	r2, [sp, #24]
 801a840:	f10b 0b01 	add.w	fp, fp, #1
 801a844:	e7bb      	b.n	801a7be <_printf_float+0x2fe>
 801a846:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a84a:	4631      	mov	r1, r6
 801a84c:	4628      	mov	r0, r5
 801a84e:	47b8      	blx	r7
 801a850:	3001      	adds	r0, #1
 801a852:	d1c0      	bne.n	801a7d6 <_printf_float+0x316>
 801a854:	e68f      	b.n	801a576 <_printf_float+0xb6>
 801a856:	9a06      	ldr	r2, [sp, #24]
 801a858:	464b      	mov	r3, r9
 801a85a:	4442      	add	r2, r8
 801a85c:	4631      	mov	r1, r6
 801a85e:	4628      	mov	r0, r5
 801a860:	47b8      	blx	r7
 801a862:	3001      	adds	r0, #1
 801a864:	d1c3      	bne.n	801a7ee <_printf_float+0x32e>
 801a866:	e686      	b.n	801a576 <_printf_float+0xb6>
 801a868:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a86c:	f1ba 0f01 	cmp.w	sl, #1
 801a870:	dc01      	bgt.n	801a876 <_printf_float+0x3b6>
 801a872:	07db      	lsls	r3, r3, #31
 801a874:	d536      	bpl.n	801a8e4 <_printf_float+0x424>
 801a876:	2301      	movs	r3, #1
 801a878:	4642      	mov	r2, r8
 801a87a:	4631      	mov	r1, r6
 801a87c:	4628      	mov	r0, r5
 801a87e:	47b8      	blx	r7
 801a880:	3001      	adds	r0, #1
 801a882:	f43f ae78 	beq.w	801a576 <_printf_float+0xb6>
 801a886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a88a:	4631      	mov	r1, r6
 801a88c:	4628      	mov	r0, r5
 801a88e:	47b8      	blx	r7
 801a890:	3001      	adds	r0, #1
 801a892:	f43f ae70 	beq.w	801a576 <_printf_float+0xb6>
 801a896:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a89a:	2200      	movs	r2, #0
 801a89c:	2300      	movs	r3, #0
 801a89e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a8a2:	f7e6 f8e9 	bl	8000a78 <__aeabi_dcmpeq>
 801a8a6:	b9c0      	cbnz	r0, 801a8da <_printf_float+0x41a>
 801a8a8:	4653      	mov	r3, sl
 801a8aa:	f108 0201 	add.w	r2, r8, #1
 801a8ae:	4631      	mov	r1, r6
 801a8b0:	4628      	mov	r0, r5
 801a8b2:	47b8      	blx	r7
 801a8b4:	3001      	adds	r0, #1
 801a8b6:	d10c      	bne.n	801a8d2 <_printf_float+0x412>
 801a8b8:	e65d      	b.n	801a576 <_printf_float+0xb6>
 801a8ba:	2301      	movs	r3, #1
 801a8bc:	465a      	mov	r2, fp
 801a8be:	4631      	mov	r1, r6
 801a8c0:	4628      	mov	r0, r5
 801a8c2:	47b8      	blx	r7
 801a8c4:	3001      	adds	r0, #1
 801a8c6:	f43f ae56 	beq.w	801a576 <_printf_float+0xb6>
 801a8ca:	f108 0801 	add.w	r8, r8, #1
 801a8ce:	45d0      	cmp	r8, sl
 801a8d0:	dbf3      	blt.n	801a8ba <_printf_float+0x3fa>
 801a8d2:	464b      	mov	r3, r9
 801a8d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801a8d8:	e6df      	b.n	801a69a <_printf_float+0x1da>
 801a8da:	f04f 0800 	mov.w	r8, #0
 801a8de:	f104 0b1a 	add.w	fp, r4, #26
 801a8e2:	e7f4      	b.n	801a8ce <_printf_float+0x40e>
 801a8e4:	2301      	movs	r3, #1
 801a8e6:	4642      	mov	r2, r8
 801a8e8:	e7e1      	b.n	801a8ae <_printf_float+0x3ee>
 801a8ea:	2301      	movs	r3, #1
 801a8ec:	464a      	mov	r2, r9
 801a8ee:	4631      	mov	r1, r6
 801a8f0:	4628      	mov	r0, r5
 801a8f2:	47b8      	blx	r7
 801a8f4:	3001      	adds	r0, #1
 801a8f6:	f43f ae3e 	beq.w	801a576 <_printf_float+0xb6>
 801a8fa:	f108 0801 	add.w	r8, r8, #1
 801a8fe:	68e3      	ldr	r3, [r4, #12]
 801a900:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a902:	1a5b      	subs	r3, r3, r1
 801a904:	4543      	cmp	r3, r8
 801a906:	dcf0      	bgt.n	801a8ea <_printf_float+0x42a>
 801a908:	e6fc      	b.n	801a704 <_printf_float+0x244>
 801a90a:	f04f 0800 	mov.w	r8, #0
 801a90e:	f104 0919 	add.w	r9, r4, #25
 801a912:	e7f4      	b.n	801a8fe <_printf_float+0x43e>

0801a914 <_printf_common>:
 801a914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a918:	4616      	mov	r6, r2
 801a91a:	4698      	mov	r8, r3
 801a91c:	688a      	ldr	r2, [r1, #8]
 801a91e:	690b      	ldr	r3, [r1, #16]
 801a920:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a924:	4293      	cmp	r3, r2
 801a926:	bfb8      	it	lt
 801a928:	4613      	movlt	r3, r2
 801a92a:	6033      	str	r3, [r6, #0]
 801a92c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a930:	4607      	mov	r7, r0
 801a932:	460c      	mov	r4, r1
 801a934:	b10a      	cbz	r2, 801a93a <_printf_common+0x26>
 801a936:	3301      	adds	r3, #1
 801a938:	6033      	str	r3, [r6, #0]
 801a93a:	6823      	ldr	r3, [r4, #0]
 801a93c:	0699      	lsls	r1, r3, #26
 801a93e:	bf42      	ittt	mi
 801a940:	6833      	ldrmi	r3, [r6, #0]
 801a942:	3302      	addmi	r3, #2
 801a944:	6033      	strmi	r3, [r6, #0]
 801a946:	6825      	ldr	r5, [r4, #0]
 801a948:	f015 0506 	ands.w	r5, r5, #6
 801a94c:	d106      	bne.n	801a95c <_printf_common+0x48>
 801a94e:	f104 0a19 	add.w	sl, r4, #25
 801a952:	68e3      	ldr	r3, [r4, #12]
 801a954:	6832      	ldr	r2, [r6, #0]
 801a956:	1a9b      	subs	r3, r3, r2
 801a958:	42ab      	cmp	r3, r5
 801a95a:	dc26      	bgt.n	801a9aa <_printf_common+0x96>
 801a95c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a960:	6822      	ldr	r2, [r4, #0]
 801a962:	3b00      	subs	r3, #0
 801a964:	bf18      	it	ne
 801a966:	2301      	movne	r3, #1
 801a968:	0692      	lsls	r2, r2, #26
 801a96a:	d42b      	bmi.n	801a9c4 <_printf_common+0xb0>
 801a96c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a970:	4641      	mov	r1, r8
 801a972:	4638      	mov	r0, r7
 801a974:	47c8      	blx	r9
 801a976:	3001      	adds	r0, #1
 801a978:	d01e      	beq.n	801a9b8 <_printf_common+0xa4>
 801a97a:	6823      	ldr	r3, [r4, #0]
 801a97c:	6922      	ldr	r2, [r4, #16]
 801a97e:	f003 0306 	and.w	r3, r3, #6
 801a982:	2b04      	cmp	r3, #4
 801a984:	bf02      	ittt	eq
 801a986:	68e5      	ldreq	r5, [r4, #12]
 801a988:	6833      	ldreq	r3, [r6, #0]
 801a98a:	1aed      	subeq	r5, r5, r3
 801a98c:	68a3      	ldr	r3, [r4, #8]
 801a98e:	bf0c      	ite	eq
 801a990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a994:	2500      	movne	r5, #0
 801a996:	4293      	cmp	r3, r2
 801a998:	bfc4      	itt	gt
 801a99a:	1a9b      	subgt	r3, r3, r2
 801a99c:	18ed      	addgt	r5, r5, r3
 801a99e:	2600      	movs	r6, #0
 801a9a0:	341a      	adds	r4, #26
 801a9a2:	42b5      	cmp	r5, r6
 801a9a4:	d11a      	bne.n	801a9dc <_printf_common+0xc8>
 801a9a6:	2000      	movs	r0, #0
 801a9a8:	e008      	b.n	801a9bc <_printf_common+0xa8>
 801a9aa:	2301      	movs	r3, #1
 801a9ac:	4652      	mov	r2, sl
 801a9ae:	4641      	mov	r1, r8
 801a9b0:	4638      	mov	r0, r7
 801a9b2:	47c8      	blx	r9
 801a9b4:	3001      	adds	r0, #1
 801a9b6:	d103      	bne.n	801a9c0 <_printf_common+0xac>
 801a9b8:	f04f 30ff 	mov.w	r0, #4294967295
 801a9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9c0:	3501      	adds	r5, #1
 801a9c2:	e7c6      	b.n	801a952 <_printf_common+0x3e>
 801a9c4:	18e1      	adds	r1, r4, r3
 801a9c6:	1c5a      	adds	r2, r3, #1
 801a9c8:	2030      	movs	r0, #48	@ 0x30
 801a9ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a9ce:	4422      	add	r2, r4
 801a9d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a9d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a9d8:	3302      	adds	r3, #2
 801a9da:	e7c7      	b.n	801a96c <_printf_common+0x58>
 801a9dc:	2301      	movs	r3, #1
 801a9de:	4622      	mov	r2, r4
 801a9e0:	4641      	mov	r1, r8
 801a9e2:	4638      	mov	r0, r7
 801a9e4:	47c8      	blx	r9
 801a9e6:	3001      	adds	r0, #1
 801a9e8:	d0e6      	beq.n	801a9b8 <_printf_common+0xa4>
 801a9ea:	3601      	adds	r6, #1
 801a9ec:	e7d9      	b.n	801a9a2 <_printf_common+0x8e>
	...

0801a9f0 <_printf_i>:
 801a9f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a9f4:	7e0f      	ldrb	r7, [r1, #24]
 801a9f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a9f8:	2f78      	cmp	r7, #120	@ 0x78
 801a9fa:	4691      	mov	r9, r2
 801a9fc:	4680      	mov	r8, r0
 801a9fe:	460c      	mov	r4, r1
 801aa00:	469a      	mov	sl, r3
 801aa02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801aa06:	d807      	bhi.n	801aa18 <_printf_i+0x28>
 801aa08:	2f62      	cmp	r7, #98	@ 0x62
 801aa0a:	d80a      	bhi.n	801aa22 <_printf_i+0x32>
 801aa0c:	2f00      	cmp	r7, #0
 801aa0e:	f000 80d2 	beq.w	801abb6 <_printf_i+0x1c6>
 801aa12:	2f58      	cmp	r7, #88	@ 0x58
 801aa14:	f000 80b9 	beq.w	801ab8a <_printf_i+0x19a>
 801aa18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801aa1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801aa20:	e03a      	b.n	801aa98 <_printf_i+0xa8>
 801aa22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801aa26:	2b15      	cmp	r3, #21
 801aa28:	d8f6      	bhi.n	801aa18 <_printf_i+0x28>
 801aa2a:	a101      	add	r1, pc, #4	@ (adr r1, 801aa30 <_printf_i+0x40>)
 801aa2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aa30:	0801aa89 	.word	0x0801aa89
 801aa34:	0801aa9d 	.word	0x0801aa9d
 801aa38:	0801aa19 	.word	0x0801aa19
 801aa3c:	0801aa19 	.word	0x0801aa19
 801aa40:	0801aa19 	.word	0x0801aa19
 801aa44:	0801aa19 	.word	0x0801aa19
 801aa48:	0801aa9d 	.word	0x0801aa9d
 801aa4c:	0801aa19 	.word	0x0801aa19
 801aa50:	0801aa19 	.word	0x0801aa19
 801aa54:	0801aa19 	.word	0x0801aa19
 801aa58:	0801aa19 	.word	0x0801aa19
 801aa5c:	0801ab9d 	.word	0x0801ab9d
 801aa60:	0801aac7 	.word	0x0801aac7
 801aa64:	0801ab57 	.word	0x0801ab57
 801aa68:	0801aa19 	.word	0x0801aa19
 801aa6c:	0801aa19 	.word	0x0801aa19
 801aa70:	0801abbf 	.word	0x0801abbf
 801aa74:	0801aa19 	.word	0x0801aa19
 801aa78:	0801aac7 	.word	0x0801aac7
 801aa7c:	0801aa19 	.word	0x0801aa19
 801aa80:	0801aa19 	.word	0x0801aa19
 801aa84:	0801ab5f 	.word	0x0801ab5f
 801aa88:	6833      	ldr	r3, [r6, #0]
 801aa8a:	1d1a      	adds	r2, r3, #4
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	6032      	str	r2, [r6, #0]
 801aa90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801aa94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801aa98:	2301      	movs	r3, #1
 801aa9a:	e09d      	b.n	801abd8 <_printf_i+0x1e8>
 801aa9c:	6833      	ldr	r3, [r6, #0]
 801aa9e:	6820      	ldr	r0, [r4, #0]
 801aaa0:	1d19      	adds	r1, r3, #4
 801aaa2:	6031      	str	r1, [r6, #0]
 801aaa4:	0606      	lsls	r6, r0, #24
 801aaa6:	d501      	bpl.n	801aaac <_printf_i+0xbc>
 801aaa8:	681d      	ldr	r5, [r3, #0]
 801aaaa:	e003      	b.n	801aab4 <_printf_i+0xc4>
 801aaac:	0645      	lsls	r5, r0, #25
 801aaae:	d5fb      	bpl.n	801aaa8 <_printf_i+0xb8>
 801aab0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801aab4:	2d00      	cmp	r5, #0
 801aab6:	da03      	bge.n	801aac0 <_printf_i+0xd0>
 801aab8:	232d      	movs	r3, #45	@ 0x2d
 801aaba:	426d      	negs	r5, r5
 801aabc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801aac0:	4859      	ldr	r0, [pc, #356]	@ (801ac28 <_printf_i+0x238>)
 801aac2:	230a      	movs	r3, #10
 801aac4:	e011      	b.n	801aaea <_printf_i+0xfa>
 801aac6:	6821      	ldr	r1, [r4, #0]
 801aac8:	6833      	ldr	r3, [r6, #0]
 801aaca:	0608      	lsls	r0, r1, #24
 801aacc:	f853 5b04 	ldr.w	r5, [r3], #4
 801aad0:	d402      	bmi.n	801aad8 <_printf_i+0xe8>
 801aad2:	0649      	lsls	r1, r1, #25
 801aad4:	bf48      	it	mi
 801aad6:	b2ad      	uxthmi	r5, r5
 801aad8:	2f6f      	cmp	r7, #111	@ 0x6f
 801aada:	4853      	ldr	r0, [pc, #332]	@ (801ac28 <_printf_i+0x238>)
 801aadc:	6033      	str	r3, [r6, #0]
 801aade:	bf14      	ite	ne
 801aae0:	230a      	movne	r3, #10
 801aae2:	2308      	moveq	r3, #8
 801aae4:	2100      	movs	r1, #0
 801aae6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801aaea:	6866      	ldr	r6, [r4, #4]
 801aaec:	60a6      	str	r6, [r4, #8]
 801aaee:	2e00      	cmp	r6, #0
 801aaf0:	bfa2      	ittt	ge
 801aaf2:	6821      	ldrge	r1, [r4, #0]
 801aaf4:	f021 0104 	bicge.w	r1, r1, #4
 801aaf8:	6021      	strge	r1, [r4, #0]
 801aafa:	b90d      	cbnz	r5, 801ab00 <_printf_i+0x110>
 801aafc:	2e00      	cmp	r6, #0
 801aafe:	d04b      	beq.n	801ab98 <_printf_i+0x1a8>
 801ab00:	4616      	mov	r6, r2
 801ab02:	fbb5 f1f3 	udiv	r1, r5, r3
 801ab06:	fb03 5711 	mls	r7, r3, r1, r5
 801ab0a:	5dc7      	ldrb	r7, [r0, r7]
 801ab0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ab10:	462f      	mov	r7, r5
 801ab12:	42bb      	cmp	r3, r7
 801ab14:	460d      	mov	r5, r1
 801ab16:	d9f4      	bls.n	801ab02 <_printf_i+0x112>
 801ab18:	2b08      	cmp	r3, #8
 801ab1a:	d10b      	bne.n	801ab34 <_printf_i+0x144>
 801ab1c:	6823      	ldr	r3, [r4, #0]
 801ab1e:	07df      	lsls	r7, r3, #31
 801ab20:	d508      	bpl.n	801ab34 <_printf_i+0x144>
 801ab22:	6923      	ldr	r3, [r4, #16]
 801ab24:	6861      	ldr	r1, [r4, #4]
 801ab26:	4299      	cmp	r1, r3
 801ab28:	bfde      	ittt	le
 801ab2a:	2330      	movle	r3, #48	@ 0x30
 801ab2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ab30:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ab34:	1b92      	subs	r2, r2, r6
 801ab36:	6122      	str	r2, [r4, #16]
 801ab38:	f8cd a000 	str.w	sl, [sp]
 801ab3c:	464b      	mov	r3, r9
 801ab3e:	aa03      	add	r2, sp, #12
 801ab40:	4621      	mov	r1, r4
 801ab42:	4640      	mov	r0, r8
 801ab44:	f7ff fee6 	bl	801a914 <_printf_common>
 801ab48:	3001      	adds	r0, #1
 801ab4a:	d14a      	bne.n	801abe2 <_printf_i+0x1f2>
 801ab4c:	f04f 30ff 	mov.w	r0, #4294967295
 801ab50:	b004      	add	sp, #16
 801ab52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab56:	6823      	ldr	r3, [r4, #0]
 801ab58:	f043 0320 	orr.w	r3, r3, #32
 801ab5c:	6023      	str	r3, [r4, #0]
 801ab5e:	4833      	ldr	r0, [pc, #204]	@ (801ac2c <_printf_i+0x23c>)
 801ab60:	2778      	movs	r7, #120	@ 0x78
 801ab62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ab66:	6823      	ldr	r3, [r4, #0]
 801ab68:	6831      	ldr	r1, [r6, #0]
 801ab6a:	061f      	lsls	r7, r3, #24
 801ab6c:	f851 5b04 	ldr.w	r5, [r1], #4
 801ab70:	d402      	bmi.n	801ab78 <_printf_i+0x188>
 801ab72:	065f      	lsls	r7, r3, #25
 801ab74:	bf48      	it	mi
 801ab76:	b2ad      	uxthmi	r5, r5
 801ab78:	6031      	str	r1, [r6, #0]
 801ab7a:	07d9      	lsls	r1, r3, #31
 801ab7c:	bf44      	itt	mi
 801ab7e:	f043 0320 	orrmi.w	r3, r3, #32
 801ab82:	6023      	strmi	r3, [r4, #0]
 801ab84:	b11d      	cbz	r5, 801ab8e <_printf_i+0x19e>
 801ab86:	2310      	movs	r3, #16
 801ab88:	e7ac      	b.n	801aae4 <_printf_i+0xf4>
 801ab8a:	4827      	ldr	r0, [pc, #156]	@ (801ac28 <_printf_i+0x238>)
 801ab8c:	e7e9      	b.n	801ab62 <_printf_i+0x172>
 801ab8e:	6823      	ldr	r3, [r4, #0]
 801ab90:	f023 0320 	bic.w	r3, r3, #32
 801ab94:	6023      	str	r3, [r4, #0]
 801ab96:	e7f6      	b.n	801ab86 <_printf_i+0x196>
 801ab98:	4616      	mov	r6, r2
 801ab9a:	e7bd      	b.n	801ab18 <_printf_i+0x128>
 801ab9c:	6833      	ldr	r3, [r6, #0]
 801ab9e:	6825      	ldr	r5, [r4, #0]
 801aba0:	6961      	ldr	r1, [r4, #20]
 801aba2:	1d18      	adds	r0, r3, #4
 801aba4:	6030      	str	r0, [r6, #0]
 801aba6:	062e      	lsls	r6, r5, #24
 801aba8:	681b      	ldr	r3, [r3, #0]
 801abaa:	d501      	bpl.n	801abb0 <_printf_i+0x1c0>
 801abac:	6019      	str	r1, [r3, #0]
 801abae:	e002      	b.n	801abb6 <_printf_i+0x1c6>
 801abb0:	0668      	lsls	r0, r5, #25
 801abb2:	d5fb      	bpl.n	801abac <_printf_i+0x1bc>
 801abb4:	8019      	strh	r1, [r3, #0]
 801abb6:	2300      	movs	r3, #0
 801abb8:	6123      	str	r3, [r4, #16]
 801abba:	4616      	mov	r6, r2
 801abbc:	e7bc      	b.n	801ab38 <_printf_i+0x148>
 801abbe:	6833      	ldr	r3, [r6, #0]
 801abc0:	1d1a      	adds	r2, r3, #4
 801abc2:	6032      	str	r2, [r6, #0]
 801abc4:	681e      	ldr	r6, [r3, #0]
 801abc6:	6862      	ldr	r2, [r4, #4]
 801abc8:	2100      	movs	r1, #0
 801abca:	4630      	mov	r0, r6
 801abcc:	f7e5 fad8 	bl	8000180 <memchr>
 801abd0:	b108      	cbz	r0, 801abd6 <_printf_i+0x1e6>
 801abd2:	1b80      	subs	r0, r0, r6
 801abd4:	6060      	str	r0, [r4, #4]
 801abd6:	6863      	ldr	r3, [r4, #4]
 801abd8:	6123      	str	r3, [r4, #16]
 801abda:	2300      	movs	r3, #0
 801abdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801abe0:	e7aa      	b.n	801ab38 <_printf_i+0x148>
 801abe2:	6923      	ldr	r3, [r4, #16]
 801abe4:	4632      	mov	r2, r6
 801abe6:	4649      	mov	r1, r9
 801abe8:	4640      	mov	r0, r8
 801abea:	47d0      	blx	sl
 801abec:	3001      	adds	r0, #1
 801abee:	d0ad      	beq.n	801ab4c <_printf_i+0x15c>
 801abf0:	6823      	ldr	r3, [r4, #0]
 801abf2:	079b      	lsls	r3, r3, #30
 801abf4:	d413      	bmi.n	801ac1e <_printf_i+0x22e>
 801abf6:	68e0      	ldr	r0, [r4, #12]
 801abf8:	9b03      	ldr	r3, [sp, #12]
 801abfa:	4298      	cmp	r0, r3
 801abfc:	bfb8      	it	lt
 801abfe:	4618      	movlt	r0, r3
 801ac00:	e7a6      	b.n	801ab50 <_printf_i+0x160>
 801ac02:	2301      	movs	r3, #1
 801ac04:	4632      	mov	r2, r6
 801ac06:	4649      	mov	r1, r9
 801ac08:	4640      	mov	r0, r8
 801ac0a:	47d0      	blx	sl
 801ac0c:	3001      	adds	r0, #1
 801ac0e:	d09d      	beq.n	801ab4c <_printf_i+0x15c>
 801ac10:	3501      	adds	r5, #1
 801ac12:	68e3      	ldr	r3, [r4, #12]
 801ac14:	9903      	ldr	r1, [sp, #12]
 801ac16:	1a5b      	subs	r3, r3, r1
 801ac18:	42ab      	cmp	r3, r5
 801ac1a:	dcf2      	bgt.n	801ac02 <_printf_i+0x212>
 801ac1c:	e7eb      	b.n	801abf6 <_printf_i+0x206>
 801ac1e:	2500      	movs	r5, #0
 801ac20:	f104 0619 	add.w	r6, r4, #25
 801ac24:	e7f5      	b.n	801ac12 <_printf_i+0x222>
 801ac26:	bf00      	nop
 801ac28:	08021b23 	.word	0x08021b23
 801ac2c:	08021b34 	.word	0x08021b34

0801ac30 <_scanf_float>:
 801ac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac34:	b087      	sub	sp, #28
 801ac36:	4617      	mov	r7, r2
 801ac38:	9303      	str	r3, [sp, #12]
 801ac3a:	688b      	ldr	r3, [r1, #8]
 801ac3c:	1e5a      	subs	r2, r3, #1
 801ac3e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801ac42:	bf81      	itttt	hi
 801ac44:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801ac48:	eb03 0b05 	addhi.w	fp, r3, r5
 801ac4c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801ac50:	608b      	strhi	r3, [r1, #8]
 801ac52:	680b      	ldr	r3, [r1, #0]
 801ac54:	460a      	mov	r2, r1
 801ac56:	f04f 0500 	mov.w	r5, #0
 801ac5a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801ac5e:	f842 3b1c 	str.w	r3, [r2], #28
 801ac62:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801ac66:	4680      	mov	r8, r0
 801ac68:	460c      	mov	r4, r1
 801ac6a:	bf98      	it	ls
 801ac6c:	f04f 0b00 	movls.w	fp, #0
 801ac70:	9201      	str	r2, [sp, #4]
 801ac72:	4616      	mov	r6, r2
 801ac74:	46aa      	mov	sl, r5
 801ac76:	46a9      	mov	r9, r5
 801ac78:	9502      	str	r5, [sp, #8]
 801ac7a:	68a2      	ldr	r2, [r4, #8]
 801ac7c:	b152      	cbz	r2, 801ac94 <_scanf_float+0x64>
 801ac7e:	683b      	ldr	r3, [r7, #0]
 801ac80:	781b      	ldrb	r3, [r3, #0]
 801ac82:	2b4e      	cmp	r3, #78	@ 0x4e
 801ac84:	d864      	bhi.n	801ad50 <_scanf_float+0x120>
 801ac86:	2b40      	cmp	r3, #64	@ 0x40
 801ac88:	d83c      	bhi.n	801ad04 <_scanf_float+0xd4>
 801ac8a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801ac8e:	b2c8      	uxtb	r0, r1
 801ac90:	280e      	cmp	r0, #14
 801ac92:	d93a      	bls.n	801ad0a <_scanf_float+0xda>
 801ac94:	f1b9 0f00 	cmp.w	r9, #0
 801ac98:	d003      	beq.n	801aca2 <_scanf_float+0x72>
 801ac9a:	6823      	ldr	r3, [r4, #0]
 801ac9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801aca0:	6023      	str	r3, [r4, #0]
 801aca2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801aca6:	f1ba 0f01 	cmp.w	sl, #1
 801acaa:	f200 8117 	bhi.w	801aedc <_scanf_float+0x2ac>
 801acae:	9b01      	ldr	r3, [sp, #4]
 801acb0:	429e      	cmp	r6, r3
 801acb2:	f200 8108 	bhi.w	801aec6 <_scanf_float+0x296>
 801acb6:	2001      	movs	r0, #1
 801acb8:	b007      	add	sp, #28
 801acba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acbe:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801acc2:	2a0d      	cmp	r2, #13
 801acc4:	d8e6      	bhi.n	801ac94 <_scanf_float+0x64>
 801acc6:	a101      	add	r1, pc, #4	@ (adr r1, 801accc <_scanf_float+0x9c>)
 801acc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801accc:	0801ae13 	.word	0x0801ae13
 801acd0:	0801ac95 	.word	0x0801ac95
 801acd4:	0801ac95 	.word	0x0801ac95
 801acd8:	0801ac95 	.word	0x0801ac95
 801acdc:	0801ae73 	.word	0x0801ae73
 801ace0:	0801ae4b 	.word	0x0801ae4b
 801ace4:	0801ac95 	.word	0x0801ac95
 801ace8:	0801ac95 	.word	0x0801ac95
 801acec:	0801ae21 	.word	0x0801ae21
 801acf0:	0801ac95 	.word	0x0801ac95
 801acf4:	0801ac95 	.word	0x0801ac95
 801acf8:	0801ac95 	.word	0x0801ac95
 801acfc:	0801ac95 	.word	0x0801ac95
 801ad00:	0801add9 	.word	0x0801add9
 801ad04:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801ad08:	e7db      	b.n	801acc2 <_scanf_float+0x92>
 801ad0a:	290e      	cmp	r1, #14
 801ad0c:	d8c2      	bhi.n	801ac94 <_scanf_float+0x64>
 801ad0e:	a001      	add	r0, pc, #4	@ (adr r0, 801ad14 <_scanf_float+0xe4>)
 801ad10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801ad14:	0801adc9 	.word	0x0801adc9
 801ad18:	0801ac95 	.word	0x0801ac95
 801ad1c:	0801adc9 	.word	0x0801adc9
 801ad20:	0801ae5f 	.word	0x0801ae5f
 801ad24:	0801ac95 	.word	0x0801ac95
 801ad28:	0801ad71 	.word	0x0801ad71
 801ad2c:	0801adaf 	.word	0x0801adaf
 801ad30:	0801adaf 	.word	0x0801adaf
 801ad34:	0801adaf 	.word	0x0801adaf
 801ad38:	0801adaf 	.word	0x0801adaf
 801ad3c:	0801adaf 	.word	0x0801adaf
 801ad40:	0801adaf 	.word	0x0801adaf
 801ad44:	0801adaf 	.word	0x0801adaf
 801ad48:	0801adaf 	.word	0x0801adaf
 801ad4c:	0801adaf 	.word	0x0801adaf
 801ad50:	2b6e      	cmp	r3, #110	@ 0x6e
 801ad52:	d809      	bhi.n	801ad68 <_scanf_float+0x138>
 801ad54:	2b60      	cmp	r3, #96	@ 0x60
 801ad56:	d8b2      	bhi.n	801acbe <_scanf_float+0x8e>
 801ad58:	2b54      	cmp	r3, #84	@ 0x54
 801ad5a:	d07b      	beq.n	801ae54 <_scanf_float+0x224>
 801ad5c:	2b59      	cmp	r3, #89	@ 0x59
 801ad5e:	d199      	bne.n	801ac94 <_scanf_float+0x64>
 801ad60:	2d07      	cmp	r5, #7
 801ad62:	d197      	bne.n	801ac94 <_scanf_float+0x64>
 801ad64:	2508      	movs	r5, #8
 801ad66:	e02c      	b.n	801adc2 <_scanf_float+0x192>
 801ad68:	2b74      	cmp	r3, #116	@ 0x74
 801ad6a:	d073      	beq.n	801ae54 <_scanf_float+0x224>
 801ad6c:	2b79      	cmp	r3, #121	@ 0x79
 801ad6e:	e7f6      	b.n	801ad5e <_scanf_float+0x12e>
 801ad70:	6821      	ldr	r1, [r4, #0]
 801ad72:	05c8      	lsls	r0, r1, #23
 801ad74:	d51b      	bpl.n	801adae <_scanf_float+0x17e>
 801ad76:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801ad7a:	6021      	str	r1, [r4, #0]
 801ad7c:	f109 0901 	add.w	r9, r9, #1
 801ad80:	f1bb 0f00 	cmp.w	fp, #0
 801ad84:	d003      	beq.n	801ad8e <_scanf_float+0x15e>
 801ad86:	3201      	adds	r2, #1
 801ad88:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ad8c:	60a2      	str	r2, [r4, #8]
 801ad8e:	68a3      	ldr	r3, [r4, #8]
 801ad90:	3b01      	subs	r3, #1
 801ad92:	60a3      	str	r3, [r4, #8]
 801ad94:	6923      	ldr	r3, [r4, #16]
 801ad96:	3301      	adds	r3, #1
 801ad98:	6123      	str	r3, [r4, #16]
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	3b01      	subs	r3, #1
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	607b      	str	r3, [r7, #4]
 801ada2:	f340 8087 	ble.w	801aeb4 <_scanf_float+0x284>
 801ada6:	683b      	ldr	r3, [r7, #0]
 801ada8:	3301      	adds	r3, #1
 801adaa:	603b      	str	r3, [r7, #0]
 801adac:	e765      	b.n	801ac7a <_scanf_float+0x4a>
 801adae:	eb1a 0105 	adds.w	r1, sl, r5
 801adb2:	f47f af6f 	bne.w	801ac94 <_scanf_float+0x64>
 801adb6:	6822      	ldr	r2, [r4, #0]
 801adb8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801adbc:	6022      	str	r2, [r4, #0]
 801adbe:	460d      	mov	r5, r1
 801adc0:	468a      	mov	sl, r1
 801adc2:	f806 3b01 	strb.w	r3, [r6], #1
 801adc6:	e7e2      	b.n	801ad8e <_scanf_float+0x15e>
 801adc8:	6822      	ldr	r2, [r4, #0]
 801adca:	0610      	lsls	r0, r2, #24
 801adcc:	f57f af62 	bpl.w	801ac94 <_scanf_float+0x64>
 801add0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801add4:	6022      	str	r2, [r4, #0]
 801add6:	e7f4      	b.n	801adc2 <_scanf_float+0x192>
 801add8:	f1ba 0f00 	cmp.w	sl, #0
 801addc:	d10e      	bne.n	801adfc <_scanf_float+0x1cc>
 801adde:	f1b9 0f00 	cmp.w	r9, #0
 801ade2:	d10e      	bne.n	801ae02 <_scanf_float+0x1d2>
 801ade4:	6822      	ldr	r2, [r4, #0]
 801ade6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801adea:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801adee:	d108      	bne.n	801ae02 <_scanf_float+0x1d2>
 801adf0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801adf4:	6022      	str	r2, [r4, #0]
 801adf6:	f04f 0a01 	mov.w	sl, #1
 801adfa:	e7e2      	b.n	801adc2 <_scanf_float+0x192>
 801adfc:	f1ba 0f02 	cmp.w	sl, #2
 801ae00:	d055      	beq.n	801aeae <_scanf_float+0x27e>
 801ae02:	2d01      	cmp	r5, #1
 801ae04:	d002      	beq.n	801ae0c <_scanf_float+0x1dc>
 801ae06:	2d04      	cmp	r5, #4
 801ae08:	f47f af44 	bne.w	801ac94 <_scanf_float+0x64>
 801ae0c:	3501      	adds	r5, #1
 801ae0e:	b2ed      	uxtb	r5, r5
 801ae10:	e7d7      	b.n	801adc2 <_scanf_float+0x192>
 801ae12:	f1ba 0f01 	cmp.w	sl, #1
 801ae16:	f47f af3d 	bne.w	801ac94 <_scanf_float+0x64>
 801ae1a:	f04f 0a02 	mov.w	sl, #2
 801ae1e:	e7d0      	b.n	801adc2 <_scanf_float+0x192>
 801ae20:	b97d      	cbnz	r5, 801ae42 <_scanf_float+0x212>
 801ae22:	f1b9 0f00 	cmp.w	r9, #0
 801ae26:	f47f af38 	bne.w	801ac9a <_scanf_float+0x6a>
 801ae2a:	6822      	ldr	r2, [r4, #0]
 801ae2c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801ae30:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801ae34:	f040 8108 	bne.w	801b048 <_scanf_float+0x418>
 801ae38:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801ae3c:	6022      	str	r2, [r4, #0]
 801ae3e:	2501      	movs	r5, #1
 801ae40:	e7bf      	b.n	801adc2 <_scanf_float+0x192>
 801ae42:	2d03      	cmp	r5, #3
 801ae44:	d0e2      	beq.n	801ae0c <_scanf_float+0x1dc>
 801ae46:	2d05      	cmp	r5, #5
 801ae48:	e7de      	b.n	801ae08 <_scanf_float+0x1d8>
 801ae4a:	2d02      	cmp	r5, #2
 801ae4c:	f47f af22 	bne.w	801ac94 <_scanf_float+0x64>
 801ae50:	2503      	movs	r5, #3
 801ae52:	e7b6      	b.n	801adc2 <_scanf_float+0x192>
 801ae54:	2d06      	cmp	r5, #6
 801ae56:	f47f af1d 	bne.w	801ac94 <_scanf_float+0x64>
 801ae5a:	2507      	movs	r5, #7
 801ae5c:	e7b1      	b.n	801adc2 <_scanf_float+0x192>
 801ae5e:	6822      	ldr	r2, [r4, #0]
 801ae60:	0591      	lsls	r1, r2, #22
 801ae62:	f57f af17 	bpl.w	801ac94 <_scanf_float+0x64>
 801ae66:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801ae6a:	6022      	str	r2, [r4, #0]
 801ae6c:	f8cd 9008 	str.w	r9, [sp, #8]
 801ae70:	e7a7      	b.n	801adc2 <_scanf_float+0x192>
 801ae72:	6822      	ldr	r2, [r4, #0]
 801ae74:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801ae78:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801ae7c:	d006      	beq.n	801ae8c <_scanf_float+0x25c>
 801ae7e:	0550      	lsls	r0, r2, #21
 801ae80:	f57f af08 	bpl.w	801ac94 <_scanf_float+0x64>
 801ae84:	f1b9 0f00 	cmp.w	r9, #0
 801ae88:	f000 80de 	beq.w	801b048 <_scanf_float+0x418>
 801ae8c:	0591      	lsls	r1, r2, #22
 801ae8e:	bf58      	it	pl
 801ae90:	9902      	ldrpl	r1, [sp, #8]
 801ae92:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801ae96:	bf58      	it	pl
 801ae98:	eba9 0101 	subpl.w	r1, r9, r1
 801ae9c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801aea0:	bf58      	it	pl
 801aea2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801aea6:	6022      	str	r2, [r4, #0]
 801aea8:	f04f 0900 	mov.w	r9, #0
 801aeac:	e789      	b.n	801adc2 <_scanf_float+0x192>
 801aeae:	f04f 0a03 	mov.w	sl, #3
 801aeb2:	e786      	b.n	801adc2 <_scanf_float+0x192>
 801aeb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801aeb8:	4639      	mov	r1, r7
 801aeba:	4640      	mov	r0, r8
 801aebc:	4798      	blx	r3
 801aebe:	2800      	cmp	r0, #0
 801aec0:	f43f aedb 	beq.w	801ac7a <_scanf_float+0x4a>
 801aec4:	e6e6      	b.n	801ac94 <_scanf_float+0x64>
 801aec6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801aeca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801aece:	463a      	mov	r2, r7
 801aed0:	4640      	mov	r0, r8
 801aed2:	4798      	blx	r3
 801aed4:	6923      	ldr	r3, [r4, #16]
 801aed6:	3b01      	subs	r3, #1
 801aed8:	6123      	str	r3, [r4, #16]
 801aeda:	e6e8      	b.n	801acae <_scanf_float+0x7e>
 801aedc:	1e6b      	subs	r3, r5, #1
 801aede:	2b06      	cmp	r3, #6
 801aee0:	d824      	bhi.n	801af2c <_scanf_float+0x2fc>
 801aee2:	2d02      	cmp	r5, #2
 801aee4:	d836      	bhi.n	801af54 <_scanf_float+0x324>
 801aee6:	9b01      	ldr	r3, [sp, #4]
 801aee8:	429e      	cmp	r6, r3
 801aeea:	f67f aee4 	bls.w	801acb6 <_scanf_float+0x86>
 801aeee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801aef2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801aef6:	463a      	mov	r2, r7
 801aef8:	4640      	mov	r0, r8
 801aefa:	4798      	blx	r3
 801aefc:	6923      	ldr	r3, [r4, #16]
 801aefe:	3b01      	subs	r3, #1
 801af00:	6123      	str	r3, [r4, #16]
 801af02:	e7f0      	b.n	801aee6 <_scanf_float+0x2b6>
 801af04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801af08:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801af0c:	463a      	mov	r2, r7
 801af0e:	4640      	mov	r0, r8
 801af10:	4798      	blx	r3
 801af12:	6923      	ldr	r3, [r4, #16]
 801af14:	3b01      	subs	r3, #1
 801af16:	6123      	str	r3, [r4, #16]
 801af18:	f10a 3aff 	add.w	sl, sl, #4294967295
 801af1c:	fa5f fa8a 	uxtb.w	sl, sl
 801af20:	f1ba 0f02 	cmp.w	sl, #2
 801af24:	d1ee      	bne.n	801af04 <_scanf_float+0x2d4>
 801af26:	3d03      	subs	r5, #3
 801af28:	b2ed      	uxtb	r5, r5
 801af2a:	1b76      	subs	r6, r6, r5
 801af2c:	6823      	ldr	r3, [r4, #0]
 801af2e:	05da      	lsls	r2, r3, #23
 801af30:	d530      	bpl.n	801af94 <_scanf_float+0x364>
 801af32:	055b      	lsls	r3, r3, #21
 801af34:	d511      	bpl.n	801af5a <_scanf_float+0x32a>
 801af36:	9b01      	ldr	r3, [sp, #4]
 801af38:	429e      	cmp	r6, r3
 801af3a:	f67f aebc 	bls.w	801acb6 <_scanf_float+0x86>
 801af3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801af42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801af46:	463a      	mov	r2, r7
 801af48:	4640      	mov	r0, r8
 801af4a:	4798      	blx	r3
 801af4c:	6923      	ldr	r3, [r4, #16]
 801af4e:	3b01      	subs	r3, #1
 801af50:	6123      	str	r3, [r4, #16]
 801af52:	e7f0      	b.n	801af36 <_scanf_float+0x306>
 801af54:	46aa      	mov	sl, r5
 801af56:	46b3      	mov	fp, r6
 801af58:	e7de      	b.n	801af18 <_scanf_float+0x2e8>
 801af5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801af5e:	6923      	ldr	r3, [r4, #16]
 801af60:	2965      	cmp	r1, #101	@ 0x65
 801af62:	f103 33ff 	add.w	r3, r3, #4294967295
 801af66:	f106 35ff 	add.w	r5, r6, #4294967295
 801af6a:	6123      	str	r3, [r4, #16]
 801af6c:	d00c      	beq.n	801af88 <_scanf_float+0x358>
 801af6e:	2945      	cmp	r1, #69	@ 0x45
 801af70:	d00a      	beq.n	801af88 <_scanf_float+0x358>
 801af72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801af76:	463a      	mov	r2, r7
 801af78:	4640      	mov	r0, r8
 801af7a:	4798      	blx	r3
 801af7c:	6923      	ldr	r3, [r4, #16]
 801af7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801af82:	3b01      	subs	r3, #1
 801af84:	1eb5      	subs	r5, r6, #2
 801af86:	6123      	str	r3, [r4, #16]
 801af88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801af8c:	463a      	mov	r2, r7
 801af8e:	4640      	mov	r0, r8
 801af90:	4798      	blx	r3
 801af92:	462e      	mov	r6, r5
 801af94:	6822      	ldr	r2, [r4, #0]
 801af96:	f012 0210 	ands.w	r2, r2, #16
 801af9a:	d001      	beq.n	801afa0 <_scanf_float+0x370>
 801af9c:	2000      	movs	r0, #0
 801af9e:	e68b      	b.n	801acb8 <_scanf_float+0x88>
 801afa0:	7032      	strb	r2, [r6, #0]
 801afa2:	6823      	ldr	r3, [r4, #0]
 801afa4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801afa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801afac:	d11c      	bne.n	801afe8 <_scanf_float+0x3b8>
 801afae:	9b02      	ldr	r3, [sp, #8]
 801afb0:	454b      	cmp	r3, r9
 801afb2:	eba3 0209 	sub.w	r2, r3, r9
 801afb6:	d123      	bne.n	801b000 <_scanf_float+0x3d0>
 801afb8:	9901      	ldr	r1, [sp, #4]
 801afba:	2200      	movs	r2, #0
 801afbc:	4640      	mov	r0, r8
 801afbe:	f7ff f8ef 	bl	801a1a0 <_strtod_r>
 801afc2:	9b03      	ldr	r3, [sp, #12]
 801afc4:	6821      	ldr	r1, [r4, #0]
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	f011 0f02 	tst.w	r1, #2
 801afcc:	ec57 6b10 	vmov	r6, r7, d0
 801afd0:	f103 0204 	add.w	r2, r3, #4
 801afd4:	d01f      	beq.n	801b016 <_scanf_float+0x3e6>
 801afd6:	9903      	ldr	r1, [sp, #12]
 801afd8:	600a      	str	r2, [r1, #0]
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	e9c3 6700 	strd	r6, r7, [r3]
 801afe0:	68e3      	ldr	r3, [r4, #12]
 801afe2:	3301      	adds	r3, #1
 801afe4:	60e3      	str	r3, [r4, #12]
 801afe6:	e7d9      	b.n	801af9c <_scanf_float+0x36c>
 801afe8:	9b04      	ldr	r3, [sp, #16]
 801afea:	2b00      	cmp	r3, #0
 801afec:	d0e4      	beq.n	801afb8 <_scanf_float+0x388>
 801afee:	9905      	ldr	r1, [sp, #20]
 801aff0:	230a      	movs	r3, #10
 801aff2:	3101      	adds	r1, #1
 801aff4:	4640      	mov	r0, r8
 801aff6:	f7ff f9b7 	bl	801a368 <_strtol_r>
 801affa:	9b04      	ldr	r3, [sp, #16]
 801affc:	9e05      	ldr	r6, [sp, #20]
 801affe:	1ac2      	subs	r2, r0, r3
 801b000:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801b004:	429e      	cmp	r6, r3
 801b006:	bf28      	it	cs
 801b008:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801b00c:	4910      	ldr	r1, [pc, #64]	@ (801b050 <_scanf_float+0x420>)
 801b00e:	4630      	mov	r0, r6
 801b010:	f000 f918 	bl	801b244 <siprintf>
 801b014:	e7d0      	b.n	801afb8 <_scanf_float+0x388>
 801b016:	f011 0f04 	tst.w	r1, #4
 801b01a:	9903      	ldr	r1, [sp, #12]
 801b01c:	600a      	str	r2, [r1, #0]
 801b01e:	d1dc      	bne.n	801afda <_scanf_float+0x3aa>
 801b020:	681d      	ldr	r5, [r3, #0]
 801b022:	4632      	mov	r2, r6
 801b024:	463b      	mov	r3, r7
 801b026:	4630      	mov	r0, r6
 801b028:	4639      	mov	r1, r7
 801b02a:	f7e5 fd57 	bl	8000adc <__aeabi_dcmpun>
 801b02e:	b128      	cbz	r0, 801b03c <_scanf_float+0x40c>
 801b030:	4808      	ldr	r0, [pc, #32]	@ (801b054 <_scanf_float+0x424>)
 801b032:	f000 fa9d 	bl	801b570 <nanf>
 801b036:	ed85 0a00 	vstr	s0, [r5]
 801b03a:	e7d1      	b.n	801afe0 <_scanf_float+0x3b0>
 801b03c:	4630      	mov	r0, r6
 801b03e:	4639      	mov	r1, r7
 801b040:	f7e5 fdaa 	bl	8000b98 <__aeabi_d2f>
 801b044:	6028      	str	r0, [r5, #0]
 801b046:	e7cb      	b.n	801afe0 <_scanf_float+0x3b0>
 801b048:	f04f 0900 	mov.w	r9, #0
 801b04c:	e629      	b.n	801aca2 <_scanf_float+0x72>
 801b04e:	bf00      	nop
 801b050:	08021b45 	.word	0x08021b45
 801b054:	08021bfe 	.word	0x08021bfe

0801b058 <std>:
 801b058:	2300      	movs	r3, #0
 801b05a:	b510      	push	{r4, lr}
 801b05c:	4604      	mov	r4, r0
 801b05e:	e9c0 3300 	strd	r3, r3, [r0]
 801b062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b066:	6083      	str	r3, [r0, #8]
 801b068:	8181      	strh	r1, [r0, #12]
 801b06a:	6643      	str	r3, [r0, #100]	@ 0x64
 801b06c:	81c2      	strh	r2, [r0, #14]
 801b06e:	6183      	str	r3, [r0, #24]
 801b070:	4619      	mov	r1, r3
 801b072:	2208      	movs	r2, #8
 801b074:	305c      	adds	r0, #92	@ 0x5c
 801b076:	f000 f948 	bl	801b30a <memset>
 801b07a:	4b0d      	ldr	r3, [pc, #52]	@ (801b0b0 <std+0x58>)
 801b07c:	6263      	str	r3, [r4, #36]	@ 0x24
 801b07e:	4b0d      	ldr	r3, [pc, #52]	@ (801b0b4 <std+0x5c>)
 801b080:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b082:	4b0d      	ldr	r3, [pc, #52]	@ (801b0b8 <std+0x60>)
 801b084:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b086:	4b0d      	ldr	r3, [pc, #52]	@ (801b0bc <std+0x64>)
 801b088:	6323      	str	r3, [r4, #48]	@ 0x30
 801b08a:	4b0d      	ldr	r3, [pc, #52]	@ (801b0c0 <std+0x68>)
 801b08c:	6224      	str	r4, [r4, #32]
 801b08e:	429c      	cmp	r4, r3
 801b090:	d006      	beq.n	801b0a0 <std+0x48>
 801b092:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b096:	4294      	cmp	r4, r2
 801b098:	d002      	beq.n	801b0a0 <std+0x48>
 801b09a:	33d0      	adds	r3, #208	@ 0xd0
 801b09c:	429c      	cmp	r4, r3
 801b09e:	d105      	bne.n	801b0ac <std+0x54>
 801b0a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0a8:	f000 ba40 	b.w	801b52c <__retarget_lock_init_recursive>
 801b0ac:	bd10      	pop	{r4, pc}
 801b0ae:	bf00      	nop
 801b0b0:	0801b285 	.word	0x0801b285
 801b0b4:	0801b2a7 	.word	0x0801b2a7
 801b0b8:	0801b2df 	.word	0x0801b2df
 801b0bc:	0801b303 	.word	0x0801b303
 801b0c0:	20002f6c 	.word	0x20002f6c

0801b0c4 <stdio_exit_handler>:
 801b0c4:	4a02      	ldr	r2, [pc, #8]	@ (801b0d0 <stdio_exit_handler+0xc>)
 801b0c6:	4903      	ldr	r1, [pc, #12]	@ (801b0d4 <stdio_exit_handler+0x10>)
 801b0c8:	4803      	ldr	r0, [pc, #12]	@ (801b0d8 <stdio_exit_handler+0x14>)
 801b0ca:	f000 b869 	b.w	801b1a0 <_fwalk_sglue>
 801b0ce:	bf00      	nop
 801b0d0:	20000148 	.word	0x20000148
 801b0d4:	0801d935 	.word	0x0801d935
 801b0d8:	200002c4 	.word	0x200002c4

0801b0dc <cleanup_stdio>:
 801b0dc:	6841      	ldr	r1, [r0, #4]
 801b0de:	4b0c      	ldr	r3, [pc, #48]	@ (801b110 <cleanup_stdio+0x34>)
 801b0e0:	4299      	cmp	r1, r3
 801b0e2:	b510      	push	{r4, lr}
 801b0e4:	4604      	mov	r4, r0
 801b0e6:	d001      	beq.n	801b0ec <cleanup_stdio+0x10>
 801b0e8:	f002 fc24 	bl	801d934 <_fflush_r>
 801b0ec:	68a1      	ldr	r1, [r4, #8]
 801b0ee:	4b09      	ldr	r3, [pc, #36]	@ (801b114 <cleanup_stdio+0x38>)
 801b0f0:	4299      	cmp	r1, r3
 801b0f2:	d002      	beq.n	801b0fa <cleanup_stdio+0x1e>
 801b0f4:	4620      	mov	r0, r4
 801b0f6:	f002 fc1d 	bl	801d934 <_fflush_r>
 801b0fa:	68e1      	ldr	r1, [r4, #12]
 801b0fc:	4b06      	ldr	r3, [pc, #24]	@ (801b118 <cleanup_stdio+0x3c>)
 801b0fe:	4299      	cmp	r1, r3
 801b100:	d004      	beq.n	801b10c <cleanup_stdio+0x30>
 801b102:	4620      	mov	r0, r4
 801b104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b108:	f002 bc14 	b.w	801d934 <_fflush_r>
 801b10c:	bd10      	pop	{r4, pc}
 801b10e:	bf00      	nop
 801b110:	20002f6c 	.word	0x20002f6c
 801b114:	20002fd4 	.word	0x20002fd4
 801b118:	2000303c 	.word	0x2000303c

0801b11c <global_stdio_init.part.0>:
 801b11c:	b510      	push	{r4, lr}
 801b11e:	4b0b      	ldr	r3, [pc, #44]	@ (801b14c <global_stdio_init.part.0+0x30>)
 801b120:	4c0b      	ldr	r4, [pc, #44]	@ (801b150 <global_stdio_init.part.0+0x34>)
 801b122:	4a0c      	ldr	r2, [pc, #48]	@ (801b154 <global_stdio_init.part.0+0x38>)
 801b124:	601a      	str	r2, [r3, #0]
 801b126:	4620      	mov	r0, r4
 801b128:	2200      	movs	r2, #0
 801b12a:	2104      	movs	r1, #4
 801b12c:	f7ff ff94 	bl	801b058 <std>
 801b130:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b134:	2201      	movs	r2, #1
 801b136:	2109      	movs	r1, #9
 801b138:	f7ff ff8e 	bl	801b058 <std>
 801b13c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b140:	2202      	movs	r2, #2
 801b142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b146:	2112      	movs	r1, #18
 801b148:	f7ff bf86 	b.w	801b058 <std>
 801b14c:	200030a4 	.word	0x200030a4
 801b150:	20002f6c 	.word	0x20002f6c
 801b154:	0801b0c5 	.word	0x0801b0c5

0801b158 <__sfp_lock_acquire>:
 801b158:	4801      	ldr	r0, [pc, #4]	@ (801b160 <__sfp_lock_acquire+0x8>)
 801b15a:	f000 b9e8 	b.w	801b52e <__retarget_lock_acquire_recursive>
 801b15e:	bf00      	nop
 801b160:	200030ad 	.word	0x200030ad

0801b164 <__sfp_lock_release>:
 801b164:	4801      	ldr	r0, [pc, #4]	@ (801b16c <__sfp_lock_release+0x8>)
 801b166:	f000 b9e3 	b.w	801b530 <__retarget_lock_release_recursive>
 801b16a:	bf00      	nop
 801b16c:	200030ad 	.word	0x200030ad

0801b170 <__sinit>:
 801b170:	b510      	push	{r4, lr}
 801b172:	4604      	mov	r4, r0
 801b174:	f7ff fff0 	bl	801b158 <__sfp_lock_acquire>
 801b178:	6a23      	ldr	r3, [r4, #32]
 801b17a:	b11b      	cbz	r3, 801b184 <__sinit+0x14>
 801b17c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b180:	f7ff bff0 	b.w	801b164 <__sfp_lock_release>
 801b184:	4b04      	ldr	r3, [pc, #16]	@ (801b198 <__sinit+0x28>)
 801b186:	6223      	str	r3, [r4, #32]
 801b188:	4b04      	ldr	r3, [pc, #16]	@ (801b19c <__sinit+0x2c>)
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	d1f5      	bne.n	801b17c <__sinit+0xc>
 801b190:	f7ff ffc4 	bl	801b11c <global_stdio_init.part.0>
 801b194:	e7f2      	b.n	801b17c <__sinit+0xc>
 801b196:	bf00      	nop
 801b198:	0801b0dd 	.word	0x0801b0dd
 801b19c:	200030a4 	.word	0x200030a4

0801b1a0 <_fwalk_sglue>:
 801b1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b1a4:	4607      	mov	r7, r0
 801b1a6:	4688      	mov	r8, r1
 801b1a8:	4614      	mov	r4, r2
 801b1aa:	2600      	movs	r6, #0
 801b1ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b1b0:	f1b9 0901 	subs.w	r9, r9, #1
 801b1b4:	d505      	bpl.n	801b1c2 <_fwalk_sglue+0x22>
 801b1b6:	6824      	ldr	r4, [r4, #0]
 801b1b8:	2c00      	cmp	r4, #0
 801b1ba:	d1f7      	bne.n	801b1ac <_fwalk_sglue+0xc>
 801b1bc:	4630      	mov	r0, r6
 801b1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b1c2:	89ab      	ldrh	r3, [r5, #12]
 801b1c4:	2b01      	cmp	r3, #1
 801b1c6:	d907      	bls.n	801b1d8 <_fwalk_sglue+0x38>
 801b1c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b1cc:	3301      	adds	r3, #1
 801b1ce:	d003      	beq.n	801b1d8 <_fwalk_sglue+0x38>
 801b1d0:	4629      	mov	r1, r5
 801b1d2:	4638      	mov	r0, r7
 801b1d4:	47c0      	blx	r8
 801b1d6:	4306      	orrs	r6, r0
 801b1d8:	3568      	adds	r5, #104	@ 0x68
 801b1da:	e7e9      	b.n	801b1b0 <_fwalk_sglue+0x10>

0801b1dc <sniprintf>:
 801b1dc:	b40c      	push	{r2, r3}
 801b1de:	b530      	push	{r4, r5, lr}
 801b1e0:	4b17      	ldr	r3, [pc, #92]	@ (801b240 <sniprintf+0x64>)
 801b1e2:	1e0c      	subs	r4, r1, #0
 801b1e4:	681d      	ldr	r5, [r3, #0]
 801b1e6:	b09d      	sub	sp, #116	@ 0x74
 801b1e8:	da08      	bge.n	801b1fc <sniprintf+0x20>
 801b1ea:	238b      	movs	r3, #139	@ 0x8b
 801b1ec:	602b      	str	r3, [r5, #0]
 801b1ee:	f04f 30ff 	mov.w	r0, #4294967295
 801b1f2:	b01d      	add	sp, #116	@ 0x74
 801b1f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b1f8:	b002      	add	sp, #8
 801b1fa:	4770      	bx	lr
 801b1fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b200:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b204:	bf14      	ite	ne
 801b206:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b20a:	4623      	moveq	r3, r4
 801b20c:	9304      	str	r3, [sp, #16]
 801b20e:	9307      	str	r3, [sp, #28]
 801b210:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b214:	9002      	str	r0, [sp, #8]
 801b216:	9006      	str	r0, [sp, #24]
 801b218:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b21c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b21e:	ab21      	add	r3, sp, #132	@ 0x84
 801b220:	a902      	add	r1, sp, #8
 801b222:	4628      	mov	r0, r5
 801b224:	9301      	str	r3, [sp, #4]
 801b226:	f002 f8c3 	bl	801d3b0 <_svfiprintf_r>
 801b22a:	1c43      	adds	r3, r0, #1
 801b22c:	bfbc      	itt	lt
 801b22e:	238b      	movlt	r3, #139	@ 0x8b
 801b230:	602b      	strlt	r3, [r5, #0]
 801b232:	2c00      	cmp	r4, #0
 801b234:	d0dd      	beq.n	801b1f2 <sniprintf+0x16>
 801b236:	9b02      	ldr	r3, [sp, #8]
 801b238:	2200      	movs	r2, #0
 801b23a:	701a      	strb	r2, [r3, #0]
 801b23c:	e7d9      	b.n	801b1f2 <sniprintf+0x16>
 801b23e:	bf00      	nop
 801b240:	200002c0 	.word	0x200002c0

0801b244 <siprintf>:
 801b244:	b40e      	push	{r1, r2, r3}
 801b246:	b500      	push	{lr}
 801b248:	b09c      	sub	sp, #112	@ 0x70
 801b24a:	ab1d      	add	r3, sp, #116	@ 0x74
 801b24c:	9002      	str	r0, [sp, #8]
 801b24e:	9006      	str	r0, [sp, #24]
 801b250:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b254:	4809      	ldr	r0, [pc, #36]	@ (801b27c <siprintf+0x38>)
 801b256:	9107      	str	r1, [sp, #28]
 801b258:	9104      	str	r1, [sp, #16]
 801b25a:	4909      	ldr	r1, [pc, #36]	@ (801b280 <siprintf+0x3c>)
 801b25c:	f853 2b04 	ldr.w	r2, [r3], #4
 801b260:	9105      	str	r1, [sp, #20]
 801b262:	6800      	ldr	r0, [r0, #0]
 801b264:	9301      	str	r3, [sp, #4]
 801b266:	a902      	add	r1, sp, #8
 801b268:	f002 f8a2 	bl	801d3b0 <_svfiprintf_r>
 801b26c:	9b02      	ldr	r3, [sp, #8]
 801b26e:	2200      	movs	r2, #0
 801b270:	701a      	strb	r2, [r3, #0]
 801b272:	b01c      	add	sp, #112	@ 0x70
 801b274:	f85d eb04 	ldr.w	lr, [sp], #4
 801b278:	b003      	add	sp, #12
 801b27a:	4770      	bx	lr
 801b27c:	200002c0 	.word	0x200002c0
 801b280:	ffff0208 	.word	0xffff0208

0801b284 <__sread>:
 801b284:	b510      	push	{r4, lr}
 801b286:	460c      	mov	r4, r1
 801b288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b28c:	f000 f8f0 	bl	801b470 <_read_r>
 801b290:	2800      	cmp	r0, #0
 801b292:	bfab      	itete	ge
 801b294:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b296:	89a3      	ldrhlt	r3, [r4, #12]
 801b298:	181b      	addge	r3, r3, r0
 801b29a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b29e:	bfac      	ite	ge
 801b2a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b2a2:	81a3      	strhlt	r3, [r4, #12]
 801b2a4:	bd10      	pop	{r4, pc}

0801b2a6 <__swrite>:
 801b2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2aa:	461f      	mov	r7, r3
 801b2ac:	898b      	ldrh	r3, [r1, #12]
 801b2ae:	05db      	lsls	r3, r3, #23
 801b2b0:	4605      	mov	r5, r0
 801b2b2:	460c      	mov	r4, r1
 801b2b4:	4616      	mov	r6, r2
 801b2b6:	d505      	bpl.n	801b2c4 <__swrite+0x1e>
 801b2b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2bc:	2302      	movs	r3, #2
 801b2be:	2200      	movs	r2, #0
 801b2c0:	f000 f8c4 	bl	801b44c <_lseek_r>
 801b2c4:	89a3      	ldrh	r3, [r4, #12]
 801b2c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b2ce:	81a3      	strh	r3, [r4, #12]
 801b2d0:	4632      	mov	r2, r6
 801b2d2:	463b      	mov	r3, r7
 801b2d4:	4628      	mov	r0, r5
 801b2d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b2da:	f000 b8eb 	b.w	801b4b4 <_write_r>

0801b2de <__sseek>:
 801b2de:	b510      	push	{r4, lr}
 801b2e0:	460c      	mov	r4, r1
 801b2e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2e6:	f000 f8b1 	bl	801b44c <_lseek_r>
 801b2ea:	1c43      	adds	r3, r0, #1
 801b2ec:	89a3      	ldrh	r3, [r4, #12]
 801b2ee:	bf15      	itete	ne
 801b2f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b2f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b2f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b2fa:	81a3      	strheq	r3, [r4, #12]
 801b2fc:	bf18      	it	ne
 801b2fe:	81a3      	strhne	r3, [r4, #12]
 801b300:	bd10      	pop	{r4, pc}

0801b302 <__sclose>:
 801b302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b306:	f000 b891 	b.w	801b42c <_close_r>

0801b30a <memset>:
 801b30a:	4402      	add	r2, r0
 801b30c:	4603      	mov	r3, r0
 801b30e:	4293      	cmp	r3, r2
 801b310:	d100      	bne.n	801b314 <memset+0xa>
 801b312:	4770      	bx	lr
 801b314:	f803 1b01 	strb.w	r1, [r3], #1
 801b318:	e7f9      	b.n	801b30e <memset+0x4>

0801b31a <strncmp>:
 801b31a:	b510      	push	{r4, lr}
 801b31c:	b16a      	cbz	r2, 801b33a <strncmp+0x20>
 801b31e:	3901      	subs	r1, #1
 801b320:	1884      	adds	r4, r0, r2
 801b322:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b326:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b32a:	429a      	cmp	r2, r3
 801b32c:	d103      	bne.n	801b336 <strncmp+0x1c>
 801b32e:	42a0      	cmp	r0, r4
 801b330:	d001      	beq.n	801b336 <strncmp+0x1c>
 801b332:	2a00      	cmp	r2, #0
 801b334:	d1f5      	bne.n	801b322 <strncmp+0x8>
 801b336:	1ad0      	subs	r0, r2, r3
 801b338:	bd10      	pop	{r4, pc}
 801b33a:	4610      	mov	r0, r2
 801b33c:	e7fc      	b.n	801b338 <strncmp+0x1e>
	...

0801b340 <strtok>:
 801b340:	4b16      	ldr	r3, [pc, #88]	@ (801b39c <strtok+0x5c>)
 801b342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b346:	681f      	ldr	r7, [r3, #0]
 801b348:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801b34a:	4605      	mov	r5, r0
 801b34c:	460e      	mov	r6, r1
 801b34e:	b9ec      	cbnz	r4, 801b38c <strtok+0x4c>
 801b350:	2050      	movs	r0, #80	@ 0x50
 801b352:	f7fe f865 	bl	8019420 <malloc>
 801b356:	4602      	mov	r2, r0
 801b358:	6478      	str	r0, [r7, #68]	@ 0x44
 801b35a:	b920      	cbnz	r0, 801b366 <strtok+0x26>
 801b35c:	4b10      	ldr	r3, [pc, #64]	@ (801b3a0 <strtok+0x60>)
 801b35e:	4811      	ldr	r0, [pc, #68]	@ (801b3a4 <strtok+0x64>)
 801b360:	215b      	movs	r1, #91	@ 0x5b
 801b362:	f000 f90b 	bl	801b57c <__assert_func>
 801b366:	e9c0 4400 	strd	r4, r4, [r0]
 801b36a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801b36e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801b372:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801b376:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801b37a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801b37e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801b382:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801b386:	6184      	str	r4, [r0, #24]
 801b388:	7704      	strb	r4, [r0, #28]
 801b38a:	6244      	str	r4, [r0, #36]	@ 0x24
 801b38c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b38e:	4631      	mov	r1, r6
 801b390:	4628      	mov	r0, r5
 801b392:	2301      	movs	r3, #1
 801b394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b398:	f000 b806 	b.w	801b3a8 <__strtok_r>
 801b39c:	200002c0 	.word	0x200002c0
 801b3a0:	08021b4a 	.word	0x08021b4a
 801b3a4:	08021b61 	.word	0x08021b61

0801b3a8 <__strtok_r>:
 801b3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b3aa:	4604      	mov	r4, r0
 801b3ac:	b908      	cbnz	r0, 801b3b2 <__strtok_r+0xa>
 801b3ae:	6814      	ldr	r4, [r2, #0]
 801b3b0:	b144      	cbz	r4, 801b3c4 <__strtok_r+0x1c>
 801b3b2:	4620      	mov	r0, r4
 801b3b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 801b3b8:	460f      	mov	r7, r1
 801b3ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 801b3be:	b91e      	cbnz	r6, 801b3c8 <__strtok_r+0x20>
 801b3c0:	b965      	cbnz	r5, 801b3dc <__strtok_r+0x34>
 801b3c2:	6015      	str	r5, [r2, #0]
 801b3c4:	2000      	movs	r0, #0
 801b3c6:	e005      	b.n	801b3d4 <__strtok_r+0x2c>
 801b3c8:	42b5      	cmp	r5, r6
 801b3ca:	d1f6      	bne.n	801b3ba <__strtok_r+0x12>
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d1f0      	bne.n	801b3b2 <__strtok_r+0xa>
 801b3d0:	6014      	str	r4, [r2, #0]
 801b3d2:	7003      	strb	r3, [r0, #0]
 801b3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3d6:	461c      	mov	r4, r3
 801b3d8:	e00c      	b.n	801b3f4 <__strtok_r+0x4c>
 801b3da:	b915      	cbnz	r5, 801b3e2 <__strtok_r+0x3a>
 801b3dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b3e0:	460e      	mov	r6, r1
 801b3e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 801b3e6:	42ab      	cmp	r3, r5
 801b3e8:	d1f7      	bne.n	801b3da <__strtok_r+0x32>
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d0f3      	beq.n	801b3d6 <__strtok_r+0x2e>
 801b3ee:	2300      	movs	r3, #0
 801b3f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 801b3f4:	6014      	str	r4, [r2, #0]
 801b3f6:	e7ed      	b.n	801b3d4 <__strtok_r+0x2c>

0801b3f8 <strstr>:
 801b3f8:	780a      	ldrb	r2, [r1, #0]
 801b3fa:	b570      	push	{r4, r5, r6, lr}
 801b3fc:	b96a      	cbnz	r2, 801b41a <strstr+0x22>
 801b3fe:	bd70      	pop	{r4, r5, r6, pc}
 801b400:	429a      	cmp	r2, r3
 801b402:	d109      	bne.n	801b418 <strstr+0x20>
 801b404:	460c      	mov	r4, r1
 801b406:	4605      	mov	r5, r0
 801b408:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	d0f6      	beq.n	801b3fe <strstr+0x6>
 801b410:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b414:	429e      	cmp	r6, r3
 801b416:	d0f7      	beq.n	801b408 <strstr+0x10>
 801b418:	3001      	adds	r0, #1
 801b41a:	7803      	ldrb	r3, [r0, #0]
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d1ef      	bne.n	801b400 <strstr+0x8>
 801b420:	4618      	mov	r0, r3
 801b422:	e7ec      	b.n	801b3fe <strstr+0x6>

0801b424 <_localeconv_r>:
 801b424:	4800      	ldr	r0, [pc, #0]	@ (801b428 <_localeconv_r+0x4>)
 801b426:	4770      	bx	lr
 801b428:	20000244 	.word	0x20000244

0801b42c <_close_r>:
 801b42c:	b538      	push	{r3, r4, r5, lr}
 801b42e:	4d06      	ldr	r5, [pc, #24]	@ (801b448 <_close_r+0x1c>)
 801b430:	2300      	movs	r3, #0
 801b432:	4604      	mov	r4, r0
 801b434:	4608      	mov	r0, r1
 801b436:	602b      	str	r3, [r5, #0]
 801b438:	f7ea ff94 	bl	8006364 <_close>
 801b43c:	1c43      	adds	r3, r0, #1
 801b43e:	d102      	bne.n	801b446 <_close_r+0x1a>
 801b440:	682b      	ldr	r3, [r5, #0]
 801b442:	b103      	cbz	r3, 801b446 <_close_r+0x1a>
 801b444:	6023      	str	r3, [r4, #0]
 801b446:	bd38      	pop	{r3, r4, r5, pc}
 801b448:	200030a8 	.word	0x200030a8

0801b44c <_lseek_r>:
 801b44c:	b538      	push	{r3, r4, r5, lr}
 801b44e:	4d07      	ldr	r5, [pc, #28]	@ (801b46c <_lseek_r+0x20>)
 801b450:	4604      	mov	r4, r0
 801b452:	4608      	mov	r0, r1
 801b454:	4611      	mov	r1, r2
 801b456:	2200      	movs	r2, #0
 801b458:	602a      	str	r2, [r5, #0]
 801b45a:	461a      	mov	r2, r3
 801b45c:	f7ea ffa9 	bl	80063b2 <_lseek>
 801b460:	1c43      	adds	r3, r0, #1
 801b462:	d102      	bne.n	801b46a <_lseek_r+0x1e>
 801b464:	682b      	ldr	r3, [r5, #0]
 801b466:	b103      	cbz	r3, 801b46a <_lseek_r+0x1e>
 801b468:	6023      	str	r3, [r4, #0]
 801b46a:	bd38      	pop	{r3, r4, r5, pc}
 801b46c:	200030a8 	.word	0x200030a8

0801b470 <_read_r>:
 801b470:	b538      	push	{r3, r4, r5, lr}
 801b472:	4d07      	ldr	r5, [pc, #28]	@ (801b490 <_read_r+0x20>)
 801b474:	4604      	mov	r4, r0
 801b476:	4608      	mov	r0, r1
 801b478:	4611      	mov	r1, r2
 801b47a:	2200      	movs	r2, #0
 801b47c:	602a      	str	r2, [r5, #0]
 801b47e:	461a      	mov	r2, r3
 801b480:	f7ea ff37 	bl	80062f2 <_read>
 801b484:	1c43      	adds	r3, r0, #1
 801b486:	d102      	bne.n	801b48e <_read_r+0x1e>
 801b488:	682b      	ldr	r3, [r5, #0]
 801b48a:	b103      	cbz	r3, 801b48e <_read_r+0x1e>
 801b48c:	6023      	str	r3, [r4, #0]
 801b48e:	bd38      	pop	{r3, r4, r5, pc}
 801b490:	200030a8 	.word	0x200030a8

0801b494 <_sbrk_r>:
 801b494:	b538      	push	{r3, r4, r5, lr}
 801b496:	4d06      	ldr	r5, [pc, #24]	@ (801b4b0 <_sbrk_r+0x1c>)
 801b498:	2300      	movs	r3, #0
 801b49a:	4604      	mov	r4, r0
 801b49c:	4608      	mov	r0, r1
 801b49e:	602b      	str	r3, [r5, #0]
 801b4a0:	f7ea ff94 	bl	80063cc <_sbrk>
 801b4a4:	1c43      	adds	r3, r0, #1
 801b4a6:	d102      	bne.n	801b4ae <_sbrk_r+0x1a>
 801b4a8:	682b      	ldr	r3, [r5, #0]
 801b4aa:	b103      	cbz	r3, 801b4ae <_sbrk_r+0x1a>
 801b4ac:	6023      	str	r3, [r4, #0]
 801b4ae:	bd38      	pop	{r3, r4, r5, pc}
 801b4b0:	200030a8 	.word	0x200030a8

0801b4b4 <_write_r>:
 801b4b4:	b538      	push	{r3, r4, r5, lr}
 801b4b6:	4d07      	ldr	r5, [pc, #28]	@ (801b4d4 <_write_r+0x20>)
 801b4b8:	4604      	mov	r4, r0
 801b4ba:	4608      	mov	r0, r1
 801b4bc:	4611      	mov	r1, r2
 801b4be:	2200      	movs	r2, #0
 801b4c0:	602a      	str	r2, [r5, #0]
 801b4c2:	461a      	mov	r2, r3
 801b4c4:	f7ea ff32 	bl	800632c <_write>
 801b4c8:	1c43      	adds	r3, r0, #1
 801b4ca:	d102      	bne.n	801b4d2 <_write_r+0x1e>
 801b4cc:	682b      	ldr	r3, [r5, #0]
 801b4ce:	b103      	cbz	r3, 801b4d2 <_write_r+0x1e>
 801b4d0:	6023      	str	r3, [r4, #0]
 801b4d2:	bd38      	pop	{r3, r4, r5, pc}
 801b4d4:	200030a8 	.word	0x200030a8

0801b4d8 <__errno>:
 801b4d8:	4b01      	ldr	r3, [pc, #4]	@ (801b4e0 <__errno+0x8>)
 801b4da:	6818      	ldr	r0, [r3, #0]
 801b4dc:	4770      	bx	lr
 801b4de:	bf00      	nop
 801b4e0:	200002c0 	.word	0x200002c0

0801b4e4 <__libc_init_array>:
 801b4e4:	b570      	push	{r4, r5, r6, lr}
 801b4e6:	4d0d      	ldr	r5, [pc, #52]	@ (801b51c <__libc_init_array+0x38>)
 801b4e8:	4c0d      	ldr	r4, [pc, #52]	@ (801b520 <__libc_init_array+0x3c>)
 801b4ea:	1b64      	subs	r4, r4, r5
 801b4ec:	10a4      	asrs	r4, r4, #2
 801b4ee:	2600      	movs	r6, #0
 801b4f0:	42a6      	cmp	r6, r4
 801b4f2:	d109      	bne.n	801b508 <__libc_init_array+0x24>
 801b4f4:	4d0b      	ldr	r5, [pc, #44]	@ (801b524 <__libc_init_array+0x40>)
 801b4f6:	4c0c      	ldr	r4, [pc, #48]	@ (801b528 <__libc_init_array+0x44>)
 801b4f8:	f004 f99a 	bl	801f830 <_init>
 801b4fc:	1b64      	subs	r4, r4, r5
 801b4fe:	10a4      	asrs	r4, r4, #2
 801b500:	2600      	movs	r6, #0
 801b502:	42a6      	cmp	r6, r4
 801b504:	d105      	bne.n	801b512 <__libc_init_array+0x2e>
 801b506:	bd70      	pop	{r4, r5, r6, pc}
 801b508:	f855 3b04 	ldr.w	r3, [r5], #4
 801b50c:	4798      	blx	r3
 801b50e:	3601      	adds	r6, #1
 801b510:	e7ee      	b.n	801b4f0 <__libc_init_array+0xc>
 801b512:	f855 3b04 	ldr.w	r3, [r5], #4
 801b516:	4798      	blx	r3
 801b518:	3601      	adds	r6, #1
 801b51a:	e7f2      	b.n	801b502 <__libc_init_array+0x1e>
 801b51c:	08022040 	.word	0x08022040
 801b520:	08022040 	.word	0x08022040
 801b524:	08022040 	.word	0x08022040
 801b528:	08022044 	.word	0x08022044

0801b52c <__retarget_lock_init_recursive>:
 801b52c:	4770      	bx	lr

0801b52e <__retarget_lock_acquire_recursive>:
 801b52e:	4770      	bx	lr

0801b530 <__retarget_lock_release_recursive>:
 801b530:	4770      	bx	lr

0801b532 <strcpy>:
 801b532:	4603      	mov	r3, r0
 801b534:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b538:	f803 2b01 	strb.w	r2, [r3], #1
 801b53c:	2a00      	cmp	r2, #0
 801b53e:	d1f9      	bne.n	801b534 <strcpy+0x2>
 801b540:	4770      	bx	lr

0801b542 <memcpy>:
 801b542:	440a      	add	r2, r1
 801b544:	4291      	cmp	r1, r2
 801b546:	f100 33ff 	add.w	r3, r0, #4294967295
 801b54a:	d100      	bne.n	801b54e <memcpy+0xc>
 801b54c:	4770      	bx	lr
 801b54e:	b510      	push	{r4, lr}
 801b550:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b554:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b558:	4291      	cmp	r1, r2
 801b55a:	d1f9      	bne.n	801b550 <memcpy+0xe>
 801b55c:	bd10      	pop	{r4, pc}
	...

0801b560 <nan>:
 801b560:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801b568 <nan+0x8>
 801b564:	4770      	bx	lr
 801b566:	bf00      	nop
 801b568:	00000000 	.word	0x00000000
 801b56c:	7ff80000 	.word	0x7ff80000

0801b570 <nanf>:
 801b570:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801b578 <nanf+0x8>
 801b574:	4770      	bx	lr
 801b576:	bf00      	nop
 801b578:	7fc00000 	.word	0x7fc00000

0801b57c <__assert_func>:
 801b57c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b57e:	4614      	mov	r4, r2
 801b580:	461a      	mov	r2, r3
 801b582:	4b09      	ldr	r3, [pc, #36]	@ (801b5a8 <__assert_func+0x2c>)
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	4605      	mov	r5, r0
 801b588:	68d8      	ldr	r0, [r3, #12]
 801b58a:	b954      	cbnz	r4, 801b5a2 <__assert_func+0x26>
 801b58c:	4b07      	ldr	r3, [pc, #28]	@ (801b5ac <__assert_func+0x30>)
 801b58e:	461c      	mov	r4, r3
 801b590:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b594:	9100      	str	r1, [sp, #0]
 801b596:	462b      	mov	r3, r5
 801b598:	4905      	ldr	r1, [pc, #20]	@ (801b5b0 <__assert_func+0x34>)
 801b59a:	f002 f9f3 	bl	801d984 <fiprintf>
 801b59e:	f002 fab1 	bl	801db04 <abort>
 801b5a2:	4b04      	ldr	r3, [pc, #16]	@ (801b5b4 <__assert_func+0x38>)
 801b5a4:	e7f4      	b.n	801b590 <__assert_func+0x14>
 801b5a6:	bf00      	nop
 801b5a8:	200002c0 	.word	0x200002c0
 801b5ac:	08021bfe 	.word	0x08021bfe
 801b5b0:	08021bd0 	.word	0x08021bd0
 801b5b4:	08021bc3 	.word	0x08021bc3

0801b5b8 <quorem>:
 801b5b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5bc:	6903      	ldr	r3, [r0, #16]
 801b5be:	690c      	ldr	r4, [r1, #16]
 801b5c0:	42a3      	cmp	r3, r4
 801b5c2:	4607      	mov	r7, r0
 801b5c4:	db7e      	blt.n	801b6c4 <quorem+0x10c>
 801b5c6:	3c01      	subs	r4, #1
 801b5c8:	f101 0814 	add.w	r8, r1, #20
 801b5cc:	00a3      	lsls	r3, r4, #2
 801b5ce:	f100 0514 	add.w	r5, r0, #20
 801b5d2:	9300      	str	r3, [sp, #0]
 801b5d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b5d8:	9301      	str	r3, [sp, #4]
 801b5da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b5de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b5e2:	3301      	adds	r3, #1
 801b5e4:	429a      	cmp	r2, r3
 801b5e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b5ea:	fbb2 f6f3 	udiv	r6, r2, r3
 801b5ee:	d32e      	bcc.n	801b64e <quorem+0x96>
 801b5f0:	f04f 0a00 	mov.w	sl, #0
 801b5f4:	46c4      	mov	ip, r8
 801b5f6:	46ae      	mov	lr, r5
 801b5f8:	46d3      	mov	fp, sl
 801b5fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b5fe:	b298      	uxth	r0, r3
 801b600:	fb06 a000 	mla	r0, r6, r0, sl
 801b604:	0c02      	lsrs	r2, r0, #16
 801b606:	0c1b      	lsrs	r3, r3, #16
 801b608:	fb06 2303 	mla	r3, r6, r3, r2
 801b60c:	f8de 2000 	ldr.w	r2, [lr]
 801b610:	b280      	uxth	r0, r0
 801b612:	b292      	uxth	r2, r2
 801b614:	1a12      	subs	r2, r2, r0
 801b616:	445a      	add	r2, fp
 801b618:	f8de 0000 	ldr.w	r0, [lr]
 801b61c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b620:	b29b      	uxth	r3, r3
 801b622:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801b626:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801b62a:	b292      	uxth	r2, r2
 801b62c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801b630:	45e1      	cmp	r9, ip
 801b632:	f84e 2b04 	str.w	r2, [lr], #4
 801b636:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801b63a:	d2de      	bcs.n	801b5fa <quorem+0x42>
 801b63c:	9b00      	ldr	r3, [sp, #0]
 801b63e:	58eb      	ldr	r3, [r5, r3]
 801b640:	b92b      	cbnz	r3, 801b64e <quorem+0x96>
 801b642:	9b01      	ldr	r3, [sp, #4]
 801b644:	3b04      	subs	r3, #4
 801b646:	429d      	cmp	r5, r3
 801b648:	461a      	mov	r2, r3
 801b64a:	d32f      	bcc.n	801b6ac <quorem+0xf4>
 801b64c:	613c      	str	r4, [r7, #16]
 801b64e:	4638      	mov	r0, r7
 801b650:	f001 fc58 	bl	801cf04 <__mcmp>
 801b654:	2800      	cmp	r0, #0
 801b656:	db25      	blt.n	801b6a4 <quorem+0xec>
 801b658:	4629      	mov	r1, r5
 801b65a:	2000      	movs	r0, #0
 801b65c:	f858 2b04 	ldr.w	r2, [r8], #4
 801b660:	f8d1 c000 	ldr.w	ip, [r1]
 801b664:	fa1f fe82 	uxth.w	lr, r2
 801b668:	fa1f f38c 	uxth.w	r3, ip
 801b66c:	eba3 030e 	sub.w	r3, r3, lr
 801b670:	4403      	add	r3, r0
 801b672:	0c12      	lsrs	r2, r2, #16
 801b674:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801b678:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801b67c:	b29b      	uxth	r3, r3
 801b67e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b682:	45c1      	cmp	r9, r8
 801b684:	f841 3b04 	str.w	r3, [r1], #4
 801b688:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b68c:	d2e6      	bcs.n	801b65c <quorem+0xa4>
 801b68e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b696:	b922      	cbnz	r2, 801b6a2 <quorem+0xea>
 801b698:	3b04      	subs	r3, #4
 801b69a:	429d      	cmp	r5, r3
 801b69c:	461a      	mov	r2, r3
 801b69e:	d30b      	bcc.n	801b6b8 <quorem+0x100>
 801b6a0:	613c      	str	r4, [r7, #16]
 801b6a2:	3601      	adds	r6, #1
 801b6a4:	4630      	mov	r0, r6
 801b6a6:	b003      	add	sp, #12
 801b6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6ac:	6812      	ldr	r2, [r2, #0]
 801b6ae:	3b04      	subs	r3, #4
 801b6b0:	2a00      	cmp	r2, #0
 801b6b2:	d1cb      	bne.n	801b64c <quorem+0x94>
 801b6b4:	3c01      	subs	r4, #1
 801b6b6:	e7c6      	b.n	801b646 <quorem+0x8e>
 801b6b8:	6812      	ldr	r2, [r2, #0]
 801b6ba:	3b04      	subs	r3, #4
 801b6bc:	2a00      	cmp	r2, #0
 801b6be:	d1ef      	bne.n	801b6a0 <quorem+0xe8>
 801b6c0:	3c01      	subs	r4, #1
 801b6c2:	e7ea      	b.n	801b69a <quorem+0xe2>
 801b6c4:	2000      	movs	r0, #0
 801b6c6:	e7ee      	b.n	801b6a6 <quorem+0xee>

0801b6c8 <_dtoa_r>:
 801b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6cc:	69c7      	ldr	r7, [r0, #28]
 801b6ce:	b099      	sub	sp, #100	@ 0x64
 801b6d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b6d4:	ec55 4b10 	vmov	r4, r5, d0
 801b6d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801b6da:	9109      	str	r1, [sp, #36]	@ 0x24
 801b6dc:	4683      	mov	fp, r0
 801b6de:	920e      	str	r2, [sp, #56]	@ 0x38
 801b6e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b6e2:	b97f      	cbnz	r7, 801b704 <_dtoa_r+0x3c>
 801b6e4:	2010      	movs	r0, #16
 801b6e6:	f7fd fe9b 	bl	8019420 <malloc>
 801b6ea:	4602      	mov	r2, r0
 801b6ec:	f8cb 001c 	str.w	r0, [fp, #28]
 801b6f0:	b920      	cbnz	r0, 801b6fc <_dtoa_r+0x34>
 801b6f2:	4ba7      	ldr	r3, [pc, #668]	@ (801b990 <_dtoa_r+0x2c8>)
 801b6f4:	21ef      	movs	r1, #239	@ 0xef
 801b6f6:	48a7      	ldr	r0, [pc, #668]	@ (801b994 <_dtoa_r+0x2cc>)
 801b6f8:	f7ff ff40 	bl	801b57c <__assert_func>
 801b6fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801b700:	6007      	str	r7, [r0, #0]
 801b702:	60c7      	str	r7, [r0, #12]
 801b704:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b708:	6819      	ldr	r1, [r3, #0]
 801b70a:	b159      	cbz	r1, 801b724 <_dtoa_r+0x5c>
 801b70c:	685a      	ldr	r2, [r3, #4]
 801b70e:	604a      	str	r2, [r1, #4]
 801b710:	2301      	movs	r3, #1
 801b712:	4093      	lsls	r3, r2
 801b714:	608b      	str	r3, [r1, #8]
 801b716:	4658      	mov	r0, fp
 801b718:	f001 f970 	bl	801c9fc <_Bfree>
 801b71c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b720:	2200      	movs	r2, #0
 801b722:	601a      	str	r2, [r3, #0]
 801b724:	1e2b      	subs	r3, r5, #0
 801b726:	bfb9      	ittee	lt
 801b728:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801b72c:	9303      	strlt	r3, [sp, #12]
 801b72e:	2300      	movge	r3, #0
 801b730:	6033      	strge	r3, [r6, #0]
 801b732:	9f03      	ldr	r7, [sp, #12]
 801b734:	4b98      	ldr	r3, [pc, #608]	@ (801b998 <_dtoa_r+0x2d0>)
 801b736:	bfbc      	itt	lt
 801b738:	2201      	movlt	r2, #1
 801b73a:	6032      	strlt	r2, [r6, #0]
 801b73c:	43bb      	bics	r3, r7
 801b73e:	d112      	bne.n	801b766 <_dtoa_r+0x9e>
 801b740:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b742:	f242 730f 	movw	r3, #9999	@ 0x270f
 801b746:	6013      	str	r3, [r2, #0]
 801b748:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b74c:	4323      	orrs	r3, r4
 801b74e:	f000 854d 	beq.w	801c1ec <_dtoa_r+0xb24>
 801b752:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b754:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801b9ac <_dtoa_r+0x2e4>
 801b758:	2b00      	cmp	r3, #0
 801b75a:	f000 854f 	beq.w	801c1fc <_dtoa_r+0xb34>
 801b75e:	f10a 0303 	add.w	r3, sl, #3
 801b762:	f000 bd49 	b.w	801c1f8 <_dtoa_r+0xb30>
 801b766:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b76a:	2200      	movs	r2, #0
 801b76c:	ec51 0b17 	vmov	r0, r1, d7
 801b770:	2300      	movs	r3, #0
 801b772:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801b776:	f7e5 f97f 	bl	8000a78 <__aeabi_dcmpeq>
 801b77a:	4680      	mov	r8, r0
 801b77c:	b158      	cbz	r0, 801b796 <_dtoa_r+0xce>
 801b77e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b780:	2301      	movs	r3, #1
 801b782:	6013      	str	r3, [r2, #0]
 801b784:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b786:	b113      	cbz	r3, 801b78e <_dtoa_r+0xc6>
 801b788:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801b78a:	4b84      	ldr	r3, [pc, #528]	@ (801b99c <_dtoa_r+0x2d4>)
 801b78c:	6013      	str	r3, [r2, #0]
 801b78e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801b9b0 <_dtoa_r+0x2e8>
 801b792:	f000 bd33 	b.w	801c1fc <_dtoa_r+0xb34>
 801b796:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801b79a:	aa16      	add	r2, sp, #88	@ 0x58
 801b79c:	a917      	add	r1, sp, #92	@ 0x5c
 801b79e:	4658      	mov	r0, fp
 801b7a0:	f001 fcd0 	bl	801d144 <__d2b>
 801b7a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801b7a8:	4681      	mov	r9, r0
 801b7aa:	2e00      	cmp	r6, #0
 801b7ac:	d077      	beq.n	801b89e <_dtoa_r+0x1d6>
 801b7ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b7b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801b7b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b7b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b7bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801b7c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801b7c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801b7c8:	4619      	mov	r1, r3
 801b7ca:	2200      	movs	r2, #0
 801b7cc:	4b74      	ldr	r3, [pc, #464]	@ (801b9a0 <_dtoa_r+0x2d8>)
 801b7ce:	f7e4 fd33 	bl	8000238 <__aeabi_dsub>
 801b7d2:	a369      	add	r3, pc, #420	@ (adr r3, 801b978 <_dtoa_r+0x2b0>)
 801b7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7d8:	f7e4 fee6 	bl	80005a8 <__aeabi_dmul>
 801b7dc:	a368      	add	r3, pc, #416	@ (adr r3, 801b980 <_dtoa_r+0x2b8>)
 801b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7e2:	f7e4 fd2b 	bl	800023c <__adddf3>
 801b7e6:	4604      	mov	r4, r0
 801b7e8:	4630      	mov	r0, r6
 801b7ea:	460d      	mov	r5, r1
 801b7ec:	f7e4 fe72 	bl	80004d4 <__aeabi_i2d>
 801b7f0:	a365      	add	r3, pc, #404	@ (adr r3, 801b988 <_dtoa_r+0x2c0>)
 801b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7f6:	f7e4 fed7 	bl	80005a8 <__aeabi_dmul>
 801b7fa:	4602      	mov	r2, r0
 801b7fc:	460b      	mov	r3, r1
 801b7fe:	4620      	mov	r0, r4
 801b800:	4629      	mov	r1, r5
 801b802:	f7e4 fd1b 	bl	800023c <__adddf3>
 801b806:	4604      	mov	r4, r0
 801b808:	460d      	mov	r5, r1
 801b80a:	f7e5 f97d 	bl	8000b08 <__aeabi_d2iz>
 801b80e:	2200      	movs	r2, #0
 801b810:	4607      	mov	r7, r0
 801b812:	2300      	movs	r3, #0
 801b814:	4620      	mov	r0, r4
 801b816:	4629      	mov	r1, r5
 801b818:	f7e5 f938 	bl	8000a8c <__aeabi_dcmplt>
 801b81c:	b140      	cbz	r0, 801b830 <_dtoa_r+0x168>
 801b81e:	4638      	mov	r0, r7
 801b820:	f7e4 fe58 	bl	80004d4 <__aeabi_i2d>
 801b824:	4622      	mov	r2, r4
 801b826:	462b      	mov	r3, r5
 801b828:	f7e5 f926 	bl	8000a78 <__aeabi_dcmpeq>
 801b82c:	b900      	cbnz	r0, 801b830 <_dtoa_r+0x168>
 801b82e:	3f01      	subs	r7, #1
 801b830:	2f16      	cmp	r7, #22
 801b832:	d851      	bhi.n	801b8d8 <_dtoa_r+0x210>
 801b834:	4b5b      	ldr	r3, [pc, #364]	@ (801b9a4 <_dtoa_r+0x2dc>)
 801b836:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b83e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b842:	f7e5 f923 	bl	8000a8c <__aeabi_dcmplt>
 801b846:	2800      	cmp	r0, #0
 801b848:	d048      	beq.n	801b8dc <_dtoa_r+0x214>
 801b84a:	3f01      	subs	r7, #1
 801b84c:	2300      	movs	r3, #0
 801b84e:	9312      	str	r3, [sp, #72]	@ 0x48
 801b850:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b852:	1b9b      	subs	r3, r3, r6
 801b854:	1e5a      	subs	r2, r3, #1
 801b856:	bf44      	itt	mi
 801b858:	f1c3 0801 	rsbmi	r8, r3, #1
 801b85c:	2300      	movmi	r3, #0
 801b85e:	9208      	str	r2, [sp, #32]
 801b860:	bf54      	ite	pl
 801b862:	f04f 0800 	movpl.w	r8, #0
 801b866:	9308      	strmi	r3, [sp, #32]
 801b868:	2f00      	cmp	r7, #0
 801b86a:	db39      	blt.n	801b8e0 <_dtoa_r+0x218>
 801b86c:	9b08      	ldr	r3, [sp, #32]
 801b86e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801b870:	443b      	add	r3, r7
 801b872:	9308      	str	r3, [sp, #32]
 801b874:	2300      	movs	r3, #0
 801b876:	930a      	str	r3, [sp, #40]	@ 0x28
 801b878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b87a:	2b09      	cmp	r3, #9
 801b87c:	d864      	bhi.n	801b948 <_dtoa_r+0x280>
 801b87e:	2b05      	cmp	r3, #5
 801b880:	bfc4      	itt	gt
 801b882:	3b04      	subgt	r3, #4
 801b884:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801b886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b888:	f1a3 0302 	sub.w	r3, r3, #2
 801b88c:	bfcc      	ite	gt
 801b88e:	2400      	movgt	r4, #0
 801b890:	2401      	movle	r4, #1
 801b892:	2b03      	cmp	r3, #3
 801b894:	d863      	bhi.n	801b95e <_dtoa_r+0x296>
 801b896:	e8df f003 	tbb	[pc, r3]
 801b89a:	372a      	.short	0x372a
 801b89c:	5535      	.short	0x5535
 801b89e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801b8a2:	441e      	add	r6, r3
 801b8a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801b8a8:	2b20      	cmp	r3, #32
 801b8aa:	bfc1      	itttt	gt
 801b8ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801b8b0:	409f      	lslgt	r7, r3
 801b8b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801b8b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 801b8ba:	bfd6      	itet	le
 801b8bc:	f1c3 0320 	rsble	r3, r3, #32
 801b8c0:	ea47 0003 	orrgt.w	r0, r7, r3
 801b8c4:	fa04 f003 	lslle.w	r0, r4, r3
 801b8c8:	f7e4 fdf4 	bl	80004b4 <__aeabi_ui2d>
 801b8cc:	2201      	movs	r2, #1
 801b8ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801b8d2:	3e01      	subs	r6, #1
 801b8d4:	9214      	str	r2, [sp, #80]	@ 0x50
 801b8d6:	e777      	b.n	801b7c8 <_dtoa_r+0x100>
 801b8d8:	2301      	movs	r3, #1
 801b8da:	e7b8      	b.n	801b84e <_dtoa_r+0x186>
 801b8dc:	9012      	str	r0, [sp, #72]	@ 0x48
 801b8de:	e7b7      	b.n	801b850 <_dtoa_r+0x188>
 801b8e0:	427b      	negs	r3, r7
 801b8e2:	930a      	str	r3, [sp, #40]	@ 0x28
 801b8e4:	2300      	movs	r3, #0
 801b8e6:	eba8 0807 	sub.w	r8, r8, r7
 801b8ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b8ec:	e7c4      	b.n	801b878 <_dtoa_r+0x1b0>
 801b8ee:	2300      	movs	r3, #0
 801b8f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b8f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b8f4:	2b00      	cmp	r3, #0
 801b8f6:	dc35      	bgt.n	801b964 <_dtoa_r+0x29c>
 801b8f8:	2301      	movs	r3, #1
 801b8fa:	9300      	str	r3, [sp, #0]
 801b8fc:	9307      	str	r3, [sp, #28]
 801b8fe:	461a      	mov	r2, r3
 801b900:	920e      	str	r2, [sp, #56]	@ 0x38
 801b902:	e00b      	b.n	801b91c <_dtoa_r+0x254>
 801b904:	2301      	movs	r3, #1
 801b906:	e7f3      	b.n	801b8f0 <_dtoa_r+0x228>
 801b908:	2300      	movs	r3, #0
 801b90a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b90c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b90e:	18fb      	adds	r3, r7, r3
 801b910:	9300      	str	r3, [sp, #0]
 801b912:	3301      	adds	r3, #1
 801b914:	2b01      	cmp	r3, #1
 801b916:	9307      	str	r3, [sp, #28]
 801b918:	bfb8      	it	lt
 801b91a:	2301      	movlt	r3, #1
 801b91c:	f8db 001c 	ldr.w	r0, [fp, #28]
 801b920:	2100      	movs	r1, #0
 801b922:	2204      	movs	r2, #4
 801b924:	f102 0514 	add.w	r5, r2, #20
 801b928:	429d      	cmp	r5, r3
 801b92a:	d91f      	bls.n	801b96c <_dtoa_r+0x2a4>
 801b92c:	6041      	str	r1, [r0, #4]
 801b92e:	4658      	mov	r0, fp
 801b930:	f001 f824 	bl	801c97c <_Balloc>
 801b934:	4682      	mov	sl, r0
 801b936:	2800      	cmp	r0, #0
 801b938:	d13c      	bne.n	801b9b4 <_dtoa_r+0x2ec>
 801b93a:	4b1b      	ldr	r3, [pc, #108]	@ (801b9a8 <_dtoa_r+0x2e0>)
 801b93c:	4602      	mov	r2, r0
 801b93e:	f240 11af 	movw	r1, #431	@ 0x1af
 801b942:	e6d8      	b.n	801b6f6 <_dtoa_r+0x2e>
 801b944:	2301      	movs	r3, #1
 801b946:	e7e0      	b.n	801b90a <_dtoa_r+0x242>
 801b948:	2401      	movs	r4, #1
 801b94a:	2300      	movs	r3, #0
 801b94c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b94e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b950:	f04f 33ff 	mov.w	r3, #4294967295
 801b954:	9300      	str	r3, [sp, #0]
 801b956:	9307      	str	r3, [sp, #28]
 801b958:	2200      	movs	r2, #0
 801b95a:	2312      	movs	r3, #18
 801b95c:	e7d0      	b.n	801b900 <_dtoa_r+0x238>
 801b95e:	2301      	movs	r3, #1
 801b960:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b962:	e7f5      	b.n	801b950 <_dtoa_r+0x288>
 801b964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b966:	9300      	str	r3, [sp, #0]
 801b968:	9307      	str	r3, [sp, #28]
 801b96a:	e7d7      	b.n	801b91c <_dtoa_r+0x254>
 801b96c:	3101      	adds	r1, #1
 801b96e:	0052      	lsls	r2, r2, #1
 801b970:	e7d8      	b.n	801b924 <_dtoa_r+0x25c>
 801b972:	bf00      	nop
 801b974:	f3af 8000 	nop.w
 801b978:	636f4361 	.word	0x636f4361
 801b97c:	3fd287a7 	.word	0x3fd287a7
 801b980:	8b60c8b3 	.word	0x8b60c8b3
 801b984:	3fc68a28 	.word	0x3fc68a28
 801b988:	509f79fb 	.word	0x509f79fb
 801b98c:	3fd34413 	.word	0x3fd34413
 801b990:	08021b4a 	.word	0x08021b4a
 801b994:	08021c0c 	.word	0x08021c0c
 801b998:	7ff00000 	.word	0x7ff00000
 801b99c:	08021b22 	.word	0x08021b22
 801b9a0:	3ff80000 	.word	0x3ff80000
 801b9a4:	08021d68 	.word	0x08021d68
 801b9a8:	08021c64 	.word	0x08021c64
 801b9ac:	08021c08 	.word	0x08021c08
 801b9b0:	08021b21 	.word	0x08021b21
 801b9b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b9b8:	6018      	str	r0, [r3, #0]
 801b9ba:	9b07      	ldr	r3, [sp, #28]
 801b9bc:	2b0e      	cmp	r3, #14
 801b9be:	f200 80a4 	bhi.w	801bb0a <_dtoa_r+0x442>
 801b9c2:	2c00      	cmp	r4, #0
 801b9c4:	f000 80a1 	beq.w	801bb0a <_dtoa_r+0x442>
 801b9c8:	2f00      	cmp	r7, #0
 801b9ca:	dd33      	ble.n	801ba34 <_dtoa_r+0x36c>
 801b9cc:	4bad      	ldr	r3, [pc, #692]	@ (801bc84 <_dtoa_r+0x5bc>)
 801b9ce:	f007 020f 	and.w	r2, r7, #15
 801b9d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b9d6:	ed93 7b00 	vldr	d7, [r3]
 801b9da:	05f8      	lsls	r0, r7, #23
 801b9dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b9e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 801b9e4:	d516      	bpl.n	801ba14 <_dtoa_r+0x34c>
 801b9e6:	4ba8      	ldr	r3, [pc, #672]	@ (801bc88 <_dtoa_r+0x5c0>)
 801b9e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b9ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b9f0:	f7e4 ff04 	bl	80007fc <__aeabi_ddiv>
 801b9f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b9f8:	f004 040f 	and.w	r4, r4, #15
 801b9fc:	2603      	movs	r6, #3
 801b9fe:	4da2      	ldr	r5, [pc, #648]	@ (801bc88 <_dtoa_r+0x5c0>)
 801ba00:	b954      	cbnz	r4, 801ba18 <_dtoa_r+0x350>
 801ba02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ba06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ba0a:	f7e4 fef7 	bl	80007fc <__aeabi_ddiv>
 801ba0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ba12:	e028      	b.n	801ba66 <_dtoa_r+0x39e>
 801ba14:	2602      	movs	r6, #2
 801ba16:	e7f2      	b.n	801b9fe <_dtoa_r+0x336>
 801ba18:	07e1      	lsls	r1, r4, #31
 801ba1a:	d508      	bpl.n	801ba2e <_dtoa_r+0x366>
 801ba1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ba20:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ba24:	f7e4 fdc0 	bl	80005a8 <__aeabi_dmul>
 801ba28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ba2c:	3601      	adds	r6, #1
 801ba2e:	1064      	asrs	r4, r4, #1
 801ba30:	3508      	adds	r5, #8
 801ba32:	e7e5      	b.n	801ba00 <_dtoa_r+0x338>
 801ba34:	f000 80d2 	beq.w	801bbdc <_dtoa_r+0x514>
 801ba38:	427c      	negs	r4, r7
 801ba3a:	4b92      	ldr	r3, [pc, #584]	@ (801bc84 <_dtoa_r+0x5bc>)
 801ba3c:	4d92      	ldr	r5, [pc, #584]	@ (801bc88 <_dtoa_r+0x5c0>)
 801ba3e:	f004 020f 	and.w	r2, r4, #15
 801ba42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ba4e:	f7e4 fdab 	bl	80005a8 <__aeabi_dmul>
 801ba52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ba56:	1124      	asrs	r4, r4, #4
 801ba58:	2300      	movs	r3, #0
 801ba5a:	2602      	movs	r6, #2
 801ba5c:	2c00      	cmp	r4, #0
 801ba5e:	f040 80b2 	bne.w	801bbc6 <_dtoa_r+0x4fe>
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d1d3      	bne.n	801ba0e <_dtoa_r+0x346>
 801ba66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ba68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	f000 80b7 	beq.w	801bbe0 <_dtoa_r+0x518>
 801ba72:	4b86      	ldr	r3, [pc, #536]	@ (801bc8c <_dtoa_r+0x5c4>)
 801ba74:	2200      	movs	r2, #0
 801ba76:	4620      	mov	r0, r4
 801ba78:	4629      	mov	r1, r5
 801ba7a:	f7e5 f807 	bl	8000a8c <__aeabi_dcmplt>
 801ba7e:	2800      	cmp	r0, #0
 801ba80:	f000 80ae 	beq.w	801bbe0 <_dtoa_r+0x518>
 801ba84:	9b07      	ldr	r3, [sp, #28]
 801ba86:	2b00      	cmp	r3, #0
 801ba88:	f000 80aa 	beq.w	801bbe0 <_dtoa_r+0x518>
 801ba8c:	9b00      	ldr	r3, [sp, #0]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	dd37      	ble.n	801bb02 <_dtoa_r+0x43a>
 801ba92:	1e7b      	subs	r3, r7, #1
 801ba94:	9304      	str	r3, [sp, #16]
 801ba96:	4620      	mov	r0, r4
 801ba98:	4b7d      	ldr	r3, [pc, #500]	@ (801bc90 <_dtoa_r+0x5c8>)
 801ba9a:	2200      	movs	r2, #0
 801ba9c:	4629      	mov	r1, r5
 801ba9e:	f7e4 fd83 	bl	80005a8 <__aeabi_dmul>
 801baa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801baa6:	9c00      	ldr	r4, [sp, #0]
 801baa8:	3601      	adds	r6, #1
 801baaa:	4630      	mov	r0, r6
 801baac:	f7e4 fd12 	bl	80004d4 <__aeabi_i2d>
 801bab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bab4:	f7e4 fd78 	bl	80005a8 <__aeabi_dmul>
 801bab8:	4b76      	ldr	r3, [pc, #472]	@ (801bc94 <_dtoa_r+0x5cc>)
 801baba:	2200      	movs	r2, #0
 801babc:	f7e4 fbbe 	bl	800023c <__adddf3>
 801bac0:	4605      	mov	r5, r0
 801bac2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801bac6:	2c00      	cmp	r4, #0
 801bac8:	f040 808d 	bne.w	801bbe6 <_dtoa_r+0x51e>
 801bacc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bad0:	4b71      	ldr	r3, [pc, #452]	@ (801bc98 <_dtoa_r+0x5d0>)
 801bad2:	2200      	movs	r2, #0
 801bad4:	f7e4 fbb0 	bl	8000238 <__aeabi_dsub>
 801bad8:	4602      	mov	r2, r0
 801bada:	460b      	mov	r3, r1
 801badc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bae0:	462a      	mov	r2, r5
 801bae2:	4633      	mov	r3, r6
 801bae4:	f7e4 fff0 	bl	8000ac8 <__aeabi_dcmpgt>
 801bae8:	2800      	cmp	r0, #0
 801baea:	f040 828b 	bne.w	801c004 <_dtoa_r+0x93c>
 801baee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801baf2:	462a      	mov	r2, r5
 801baf4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801baf8:	f7e4 ffc8 	bl	8000a8c <__aeabi_dcmplt>
 801bafc:	2800      	cmp	r0, #0
 801bafe:	f040 8128 	bne.w	801bd52 <_dtoa_r+0x68a>
 801bb02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801bb06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801bb0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	f2c0 815a 	blt.w	801bdc6 <_dtoa_r+0x6fe>
 801bb12:	2f0e      	cmp	r7, #14
 801bb14:	f300 8157 	bgt.w	801bdc6 <_dtoa_r+0x6fe>
 801bb18:	4b5a      	ldr	r3, [pc, #360]	@ (801bc84 <_dtoa_r+0x5bc>)
 801bb1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801bb1e:	ed93 7b00 	vldr	d7, [r3]
 801bb22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	ed8d 7b00 	vstr	d7, [sp]
 801bb2a:	da03      	bge.n	801bb34 <_dtoa_r+0x46c>
 801bb2c:	9b07      	ldr	r3, [sp, #28]
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	f340 8101 	ble.w	801bd36 <_dtoa_r+0x66e>
 801bb34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801bb38:	4656      	mov	r6, sl
 801bb3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bb3e:	4620      	mov	r0, r4
 801bb40:	4629      	mov	r1, r5
 801bb42:	f7e4 fe5b 	bl	80007fc <__aeabi_ddiv>
 801bb46:	f7e4 ffdf 	bl	8000b08 <__aeabi_d2iz>
 801bb4a:	4680      	mov	r8, r0
 801bb4c:	f7e4 fcc2 	bl	80004d4 <__aeabi_i2d>
 801bb50:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bb54:	f7e4 fd28 	bl	80005a8 <__aeabi_dmul>
 801bb58:	4602      	mov	r2, r0
 801bb5a:	460b      	mov	r3, r1
 801bb5c:	4620      	mov	r0, r4
 801bb5e:	4629      	mov	r1, r5
 801bb60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801bb64:	f7e4 fb68 	bl	8000238 <__aeabi_dsub>
 801bb68:	f806 4b01 	strb.w	r4, [r6], #1
 801bb6c:	9d07      	ldr	r5, [sp, #28]
 801bb6e:	eba6 040a 	sub.w	r4, r6, sl
 801bb72:	42a5      	cmp	r5, r4
 801bb74:	4602      	mov	r2, r0
 801bb76:	460b      	mov	r3, r1
 801bb78:	f040 8117 	bne.w	801bdaa <_dtoa_r+0x6e2>
 801bb7c:	f7e4 fb5e 	bl	800023c <__adddf3>
 801bb80:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bb84:	4604      	mov	r4, r0
 801bb86:	460d      	mov	r5, r1
 801bb88:	f7e4 ff9e 	bl	8000ac8 <__aeabi_dcmpgt>
 801bb8c:	2800      	cmp	r0, #0
 801bb8e:	f040 80f9 	bne.w	801bd84 <_dtoa_r+0x6bc>
 801bb92:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bb96:	4620      	mov	r0, r4
 801bb98:	4629      	mov	r1, r5
 801bb9a:	f7e4 ff6d 	bl	8000a78 <__aeabi_dcmpeq>
 801bb9e:	b118      	cbz	r0, 801bba8 <_dtoa_r+0x4e0>
 801bba0:	f018 0f01 	tst.w	r8, #1
 801bba4:	f040 80ee 	bne.w	801bd84 <_dtoa_r+0x6bc>
 801bba8:	4649      	mov	r1, r9
 801bbaa:	4658      	mov	r0, fp
 801bbac:	f000 ff26 	bl	801c9fc <_Bfree>
 801bbb0:	2300      	movs	r3, #0
 801bbb2:	7033      	strb	r3, [r6, #0]
 801bbb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bbb6:	3701      	adds	r7, #1
 801bbb8:	601f      	str	r7, [r3, #0]
 801bbba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	f000 831d 	beq.w	801c1fc <_dtoa_r+0xb34>
 801bbc2:	601e      	str	r6, [r3, #0]
 801bbc4:	e31a      	b.n	801c1fc <_dtoa_r+0xb34>
 801bbc6:	07e2      	lsls	r2, r4, #31
 801bbc8:	d505      	bpl.n	801bbd6 <_dtoa_r+0x50e>
 801bbca:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bbce:	f7e4 fceb 	bl	80005a8 <__aeabi_dmul>
 801bbd2:	3601      	adds	r6, #1
 801bbd4:	2301      	movs	r3, #1
 801bbd6:	1064      	asrs	r4, r4, #1
 801bbd8:	3508      	adds	r5, #8
 801bbda:	e73f      	b.n	801ba5c <_dtoa_r+0x394>
 801bbdc:	2602      	movs	r6, #2
 801bbde:	e742      	b.n	801ba66 <_dtoa_r+0x39e>
 801bbe0:	9c07      	ldr	r4, [sp, #28]
 801bbe2:	9704      	str	r7, [sp, #16]
 801bbe4:	e761      	b.n	801baaa <_dtoa_r+0x3e2>
 801bbe6:	4b27      	ldr	r3, [pc, #156]	@ (801bc84 <_dtoa_r+0x5bc>)
 801bbe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801bbea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bbee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bbf2:	4454      	add	r4, sl
 801bbf4:	2900      	cmp	r1, #0
 801bbf6:	d053      	beq.n	801bca0 <_dtoa_r+0x5d8>
 801bbf8:	4928      	ldr	r1, [pc, #160]	@ (801bc9c <_dtoa_r+0x5d4>)
 801bbfa:	2000      	movs	r0, #0
 801bbfc:	f7e4 fdfe 	bl	80007fc <__aeabi_ddiv>
 801bc00:	4633      	mov	r3, r6
 801bc02:	462a      	mov	r2, r5
 801bc04:	f7e4 fb18 	bl	8000238 <__aeabi_dsub>
 801bc08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bc0c:	4656      	mov	r6, sl
 801bc0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bc12:	f7e4 ff79 	bl	8000b08 <__aeabi_d2iz>
 801bc16:	4605      	mov	r5, r0
 801bc18:	f7e4 fc5c 	bl	80004d4 <__aeabi_i2d>
 801bc1c:	4602      	mov	r2, r0
 801bc1e:	460b      	mov	r3, r1
 801bc20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bc24:	f7e4 fb08 	bl	8000238 <__aeabi_dsub>
 801bc28:	3530      	adds	r5, #48	@ 0x30
 801bc2a:	4602      	mov	r2, r0
 801bc2c:	460b      	mov	r3, r1
 801bc2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bc32:	f806 5b01 	strb.w	r5, [r6], #1
 801bc36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bc3a:	f7e4 ff27 	bl	8000a8c <__aeabi_dcmplt>
 801bc3e:	2800      	cmp	r0, #0
 801bc40:	d171      	bne.n	801bd26 <_dtoa_r+0x65e>
 801bc42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bc46:	4911      	ldr	r1, [pc, #68]	@ (801bc8c <_dtoa_r+0x5c4>)
 801bc48:	2000      	movs	r0, #0
 801bc4a:	f7e4 faf5 	bl	8000238 <__aeabi_dsub>
 801bc4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bc52:	f7e4 ff1b 	bl	8000a8c <__aeabi_dcmplt>
 801bc56:	2800      	cmp	r0, #0
 801bc58:	f040 8095 	bne.w	801bd86 <_dtoa_r+0x6be>
 801bc5c:	42a6      	cmp	r6, r4
 801bc5e:	f43f af50 	beq.w	801bb02 <_dtoa_r+0x43a>
 801bc62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801bc66:	4b0a      	ldr	r3, [pc, #40]	@ (801bc90 <_dtoa_r+0x5c8>)
 801bc68:	2200      	movs	r2, #0
 801bc6a:	f7e4 fc9d 	bl	80005a8 <__aeabi_dmul>
 801bc6e:	4b08      	ldr	r3, [pc, #32]	@ (801bc90 <_dtoa_r+0x5c8>)
 801bc70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bc74:	2200      	movs	r2, #0
 801bc76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bc7a:	f7e4 fc95 	bl	80005a8 <__aeabi_dmul>
 801bc7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bc82:	e7c4      	b.n	801bc0e <_dtoa_r+0x546>
 801bc84:	08021d68 	.word	0x08021d68
 801bc88:	08021d40 	.word	0x08021d40
 801bc8c:	3ff00000 	.word	0x3ff00000
 801bc90:	40240000 	.word	0x40240000
 801bc94:	401c0000 	.word	0x401c0000
 801bc98:	40140000 	.word	0x40140000
 801bc9c:	3fe00000 	.word	0x3fe00000
 801bca0:	4631      	mov	r1, r6
 801bca2:	4628      	mov	r0, r5
 801bca4:	f7e4 fc80 	bl	80005a8 <__aeabi_dmul>
 801bca8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bcac:	9415      	str	r4, [sp, #84]	@ 0x54
 801bcae:	4656      	mov	r6, sl
 801bcb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bcb4:	f7e4 ff28 	bl	8000b08 <__aeabi_d2iz>
 801bcb8:	4605      	mov	r5, r0
 801bcba:	f7e4 fc0b 	bl	80004d4 <__aeabi_i2d>
 801bcbe:	4602      	mov	r2, r0
 801bcc0:	460b      	mov	r3, r1
 801bcc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bcc6:	f7e4 fab7 	bl	8000238 <__aeabi_dsub>
 801bcca:	3530      	adds	r5, #48	@ 0x30
 801bccc:	f806 5b01 	strb.w	r5, [r6], #1
 801bcd0:	4602      	mov	r2, r0
 801bcd2:	460b      	mov	r3, r1
 801bcd4:	42a6      	cmp	r6, r4
 801bcd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bcda:	f04f 0200 	mov.w	r2, #0
 801bcde:	d124      	bne.n	801bd2a <_dtoa_r+0x662>
 801bce0:	4bac      	ldr	r3, [pc, #688]	@ (801bf94 <_dtoa_r+0x8cc>)
 801bce2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801bce6:	f7e4 faa9 	bl	800023c <__adddf3>
 801bcea:	4602      	mov	r2, r0
 801bcec:	460b      	mov	r3, r1
 801bcee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bcf2:	f7e4 fee9 	bl	8000ac8 <__aeabi_dcmpgt>
 801bcf6:	2800      	cmp	r0, #0
 801bcf8:	d145      	bne.n	801bd86 <_dtoa_r+0x6be>
 801bcfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bcfe:	49a5      	ldr	r1, [pc, #660]	@ (801bf94 <_dtoa_r+0x8cc>)
 801bd00:	2000      	movs	r0, #0
 801bd02:	f7e4 fa99 	bl	8000238 <__aeabi_dsub>
 801bd06:	4602      	mov	r2, r0
 801bd08:	460b      	mov	r3, r1
 801bd0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd0e:	f7e4 febd 	bl	8000a8c <__aeabi_dcmplt>
 801bd12:	2800      	cmp	r0, #0
 801bd14:	f43f aef5 	beq.w	801bb02 <_dtoa_r+0x43a>
 801bd18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801bd1a:	1e73      	subs	r3, r6, #1
 801bd1c:	9315      	str	r3, [sp, #84]	@ 0x54
 801bd1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801bd22:	2b30      	cmp	r3, #48	@ 0x30
 801bd24:	d0f8      	beq.n	801bd18 <_dtoa_r+0x650>
 801bd26:	9f04      	ldr	r7, [sp, #16]
 801bd28:	e73e      	b.n	801bba8 <_dtoa_r+0x4e0>
 801bd2a:	4b9b      	ldr	r3, [pc, #620]	@ (801bf98 <_dtoa_r+0x8d0>)
 801bd2c:	f7e4 fc3c 	bl	80005a8 <__aeabi_dmul>
 801bd30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bd34:	e7bc      	b.n	801bcb0 <_dtoa_r+0x5e8>
 801bd36:	d10c      	bne.n	801bd52 <_dtoa_r+0x68a>
 801bd38:	4b98      	ldr	r3, [pc, #608]	@ (801bf9c <_dtoa_r+0x8d4>)
 801bd3a:	2200      	movs	r2, #0
 801bd3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bd40:	f7e4 fc32 	bl	80005a8 <__aeabi_dmul>
 801bd44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bd48:	f7e4 feb4 	bl	8000ab4 <__aeabi_dcmpge>
 801bd4c:	2800      	cmp	r0, #0
 801bd4e:	f000 8157 	beq.w	801c000 <_dtoa_r+0x938>
 801bd52:	2400      	movs	r4, #0
 801bd54:	4625      	mov	r5, r4
 801bd56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bd58:	43db      	mvns	r3, r3
 801bd5a:	9304      	str	r3, [sp, #16]
 801bd5c:	4656      	mov	r6, sl
 801bd5e:	2700      	movs	r7, #0
 801bd60:	4621      	mov	r1, r4
 801bd62:	4658      	mov	r0, fp
 801bd64:	f000 fe4a 	bl	801c9fc <_Bfree>
 801bd68:	2d00      	cmp	r5, #0
 801bd6a:	d0dc      	beq.n	801bd26 <_dtoa_r+0x65e>
 801bd6c:	b12f      	cbz	r7, 801bd7a <_dtoa_r+0x6b2>
 801bd6e:	42af      	cmp	r7, r5
 801bd70:	d003      	beq.n	801bd7a <_dtoa_r+0x6b2>
 801bd72:	4639      	mov	r1, r7
 801bd74:	4658      	mov	r0, fp
 801bd76:	f000 fe41 	bl	801c9fc <_Bfree>
 801bd7a:	4629      	mov	r1, r5
 801bd7c:	4658      	mov	r0, fp
 801bd7e:	f000 fe3d 	bl	801c9fc <_Bfree>
 801bd82:	e7d0      	b.n	801bd26 <_dtoa_r+0x65e>
 801bd84:	9704      	str	r7, [sp, #16]
 801bd86:	4633      	mov	r3, r6
 801bd88:	461e      	mov	r6, r3
 801bd8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bd8e:	2a39      	cmp	r2, #57	@ 0x39
 801bd90:	d107      	bne.n	801bda2 <_dtoa_r+0x6da>
 801bd92:	459a      	cmp	sl, r3
 801bd94:	d1f8      	bne.n	801bd88 <_dtoa_r+0x6c0>
 801bd96:	9a04      	ldr	r2, [sp, #16]
 801bd98:	3201      	adds	r2, #1
 801bd9a:	9204      	str	r2, [sp, #16]
 801bd9c:	2230      	movs	r2, #48	@ 0x30
 801bd9e:	f88a 2000 	strb.w	r2, [sl]
 801bda2:	781a      	ldrb	r2, [r3, #0]
 801bda4:	3201      	adds	r2, #1
 801bda6:	701a      	strb	r2, [r3, #0]
 801bda8:	e7bd      	b.n	801bd26 <_dtoa_r+0x65e>
 801bdaa:	4b7b      	ldr	r3, [pc, #492]	@ (801bf98 <_dtoa_r+0x8d0>)
 801bdac:	2200      	movs	r2, #0
 801bdae:	f7e4 fbfb 	bl	80005a8 <__aeabi_dmul>
 801bdb2:	2200      	movs	r2, #0
 801bdb4:	2300      	movs	r3, #0
 801bdb6:	4604      	mov	r4, r0
 801bdb8:	460d      	mov	r5, r1
 801bdba:	f7e4 fe5d 	bl	8000a78 <__aeabi_dcmpeq>
 801bdbe:	2800      	cmp	r0, #0
 801bdc0:	f43f aebb 	beq.w	801bb3a <_dtoa_r+0x472>
 801bdc4:	e6f0      	b.n	801bba8 <_dtoa_r+0x4e0>
 801bdc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bdc8:	2a00      	cmp	r2, #0
 801bdca:	f000 80db 	beq.w	801bf84 <_dtoa_r+0x8bc>
 801bdce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bdd0:	2a01      	cmp	r2, #1
 801bdd2:	f300 80bf 	bgt.w	801bf54 <_dtoa_r+0x88c>
 801bdd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bdd8:	2a00      	cmp	r2, #0
 801bdda:	f000 80b7 	beq.w	801bf4c <_dtoa_r+0x884>
 801bdde:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801bde2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801bde4:	4646      	mov	r6, r8
 801bde6:	9a08      	ldr	r2, [sp, #32]
 801bde8:	2101      	movs	r1, #1
 801bdea:	441a      	add	r2, r3
 801bdec:	4658      	mov	r0, fp
 801bdee:	4498      	add	r8, r3
 801bdf0:	9208      	str	r2, [sp, #32]
 801bdf2:	f000 ff01 	bl	801cbf8 <__i2b>
 801bdf6:	4605      	mov	r5, r0
 801bdf8:	b15e      	cbz	r6, 801be12 <_dtoa_r+0x74a>
 801bdfa:	9b08      	ldr	r3, [sp, #32]
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	dd08      	ble.n	801be12 <_dtoa_r+0x74a>
 801be00:	42b3      	cmp	r3, r6
 801be02:	9a08      	ldr	r2, [sp, #32]
 801be04:	bfa8      	it	ge
 801be06:	4633      	movge	r3, r6
 801be08:	eba8 0803 	sub.w	r8, r8, r3
 801be0c:	1af6      	subs	r6, r6, r3
 801be0e:	1ad3      	subs	r3, r2, r3
 801be10:	9308      	str	r3, [sp, #32]
 801be12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801be14:	b1f3      	cbz	r3, 801be54 <_dtoa_r+0x78c>
 801be16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801be18:	2b00      	cmp	r3, #0
 801be1a:	f000 80b7 	beq.w	801bf8c <_dtoa_r+0x8c4>
 801be1e:	b18c      	cbz	r4, 801be44 <_dtoa_r+0x77c>
 801be20:	4629      	mov	r1, r5
 801be22:	4622      	mov	r2, r4
 801be24:	4658      	mov	r0, fp
 801be26:	f000 ffa7 	bl	801cd78 <__pow5mult>
 801be2a:	464a      	mov	r2, r9
 801be2c:	4601      	mov	r1, r0
 801be2e:	4605      	mov	r5, r0
 801be30:	4658      	mov	r0, fp
 801be32:	f000 fef7 	bl	801cc24 <__multiply>
 801be36:	4649      	mov	r1, r9
 801be38:	9004      	str	r0, [sp, #16]
 801be3a:	4658      	mov	r0, fp
 801be3c:	f000 fdde 	bl	801c9fc <_Bfree>
 801be40:	9b04      	ldr	r3, [sp, #16]
 801be42:	4699      	mov	r9, r3
 801be44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801be46:	1b1a      	subs	r2, r3, r4
 801be48:	d004      	beq.n	801be54 <_dtoa_r+0x78c>
 801be4a:	4649      	mov	r1, r9
 801be4c:	4658      	mov	r0, fp
 801be4e:	f000 ff93 	bl	801cd78 <__pow5mult>
 801be52:	4681      	mov	r9, r0
 801be54:	2101      	movs	r1, #1
 801be56:	4658      	mov	r0, fp
 801be58:	f000 fece 	bl	801cbf8 <__i2b>
 801be5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801be5e:	4604      	mov	r4, r0
 801be60:	2b00      	cmp	r3, #0
 801be62:	f000 81cf 	beq.w	801c204 <_dtoa_r+0xb3c>
 801be66:	461a      	mov	r2, r3
 801be68:	4601      	mov	r1, r0
 801be6a:	4658      	mov	r0, fp
 801be6c:	f000 ff84 	bl	801cd78 <__pow5mult>
 801be70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801be72:	2b01      	cmp	r3, #1
 801be74:	4604      	mov	r4, r0
 801be76:	f300 8095 	bgt.w	801bfa4 <_dtoa_r+0x8dc>
 801be7a:	9b02      	ldr	r3, [sp, #8]
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	f040 8087 	bne.w	801bf90 <_dtoa_r+0x8c8>
 801be82:	9b03      	ldr	r3, [sp, #12]
 801be84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801be88:	2b00      	cmp	r3, #0
 801be8a:	f040 8089 	bne.w	801bfa0 <_dtoa_r+0x8d8>
 801be8e:	9b03      	ldr	r3, [sp, #12]
 801be90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801be94:	0d1b      	lsrs	r3, r3, #20
 801be96:	051b      	lsls	r3, r3, #20
 801be98:	b12b      	cbz	r3, 801bea6 <_dtoa_r+0x7de>
 801be9a:	9b08      	ldr	r3, [sp, #32]
 801be9c:	3301      	adds	r3, #1
 801be9e:	9308      	str	r3, [sp, #32]
 801bea0:	f108 0801 	add.w	r8, r8, #1
 801bea4:	2301      	movs	r3, #1
 801bea6:	930a      	str	r3, [sp, #40]	@ 0x28
 801bea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801beaa:	2b00      	cmp	r3, #0
 801beac:	f000 81b0 	beq.w	801c210 <_dtoa_r+0xb48>
 801beb0:	6923      	ldr	r3, [r4, #16]
 801beb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801beb6:	6918      	ldr	r0, [r3, #16]
 801beb8:	f000 fe52 	bl	801cb60 <__hi0bits>
 801bebc:	f1c0 0020 	rsb	r0, r0, #32
 801bec0:	9b08      	ldr	r3, [sp, #32]
 801bec2:	4418      	add	r0, r3
 801bec4:	f010 001f 	ands.w	r0, r0, #31
 801bec8:	d077      	beq.n	801bfba <_dtoa_r+0x8f2>
 801beca:	f1c0 0320 	rsb	r3, r0, #32
 801bece:	2b04      	cmp	r3, #4
 801bed0:	dd6b      	ble.n	801bfaa <_dtoa_r+0x8e2>
 801bed2:	9b08      	ldr	r3, [sp, #32]
 801bed4:	f1c0 001c 	rsb	r0, r0, #28
 801bed8:	4403      	add	r3, r0
 801beda:	4480      	add	r8, r0
 801bedc:	4406      	add	r6, r0
 801bede:	9308      	str	r3, [sp, #32]
 801bee0:	f1b8 0f00 	cmp.w	r8, #0
 801bee4:	dd05      	ble.n	801bef2 <_dtoa_r+0x82a>
 801bee6:	4649      	mov	r1, r9
 801bee8:	4642      	mov	r2, r8
 801beea:	4658      	mov	r0, fp
 801beec:	f000 ff9e 	bl	801ce2c <__lshift>
 801bef0:	4681      	mov	r9, r0
 801bef2:	9b08      	ldr	r3, [sp, #32]
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	dd05      	ble.n	801bf04 <_dtoa_r+0x83c>
 801bef8:	4621      	mov	r1, r4
 801befa:	461a      	mov	r2, r3
 801befc:	4658      	mov	r0, fp
 801befe:	f000 ff95 	bl	801ce2c <__lshift>
 801bf02:	4604      	mov	r4, r0
 801bf04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d059      	beq.n	801bfbe <_dtoa_r+0x8f6>
 801bf0a:	4621      	mov	r1, r4
 801bf0c:	4648      	mov	r0, r9
 801bf0e:	f000 fff9 	bl	801cf04 <__mcmp>
 801bf12:	2800      	cmp	r0, #0
 801bf14:	da53      	bge.n	801bfbe <_dtoa_r+0x8f6>
 801bf16:	1e7b      	subs	r3, r7, #1
 801bf18:	9304      	str	r3, [sp, #16]
 801bf1a:	4649      	mov	r1, r9
 801bf1c:	2300      	movs	r3, #0
 801bf1e:	220a      	movs	r2, #10
 801bf20:	4658      	mov	r0, fp
 801bf22:	f000 fd8d 	bl	801ca40 <__multadd>
 801bf26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bf28:	4681      	mov	r9, r0
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	f000 8172 	beq.w	801c214 <_dtoa_r+0xb4c>
 801bf30:	2300      	movs	r3, #0
 801bf32:	4629      	mov	r1, r5
 801bf34:	220a      	movs	r2, #10
 801bf36:	4658      	mov	r0, fp
 801bf38:	f000 fd82 	bl	801ca40 <__multadd>
 801bf3c:	9b00      	ldr	r3, [sp, #0]
 801bf3e:	2b00      	cmp	r3, #0
 801bf40:	4605      	mov	r5, r0
 801bf42:	dc67      	bgt.n	801c014 <_dtoa_r+0x94c>
 801bf44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf46:	2b02      	cmp	r3, #2
 801bf48:	dc41      	bgt.n	801bfce <_dtoa_r+0x906>
 801bf4a:	e063      	b.n	801c014 <_dtoa_r+0x94c>
 801bf4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bf4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801bf52:	e746      	b.n	801bde2 <_dtoa_r+0x71a>
 801bf54:	9b07      	ldr	r3, [sp, #28]
 801bf56:	1e5c      	subs	r4, r3, #1
 801bf58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bf5a:	42a3      	cmp	r3, r4
 801bf5c:	bfbf      	itttt	lt
 801bf5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801bf60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801bf62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801bf64:	1ae3      	sublt	r3, r4, r3
 801bf66:	bfb4      	ite	lt
 801bf68:	18d2      	addlt	r2, r2, r3
 801bf6a:	1b1c      	subge	r4, r3, r4
 801bf6c:	9b07      	ldr	r3, [sp, #28]
 801bf6e:	bfbc      	itt	lt
 801bf70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801bf72:	2400      	movlt	r4, #0
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	bfb5      	itete	lt
 801bf78:	eba8 0603 	sublt.w	r6, r8, r3
 801bf7c:	9b07      	ldrge	r3, [sp, #28]
 801bf7e:	2300      	movlt	r3, #0
 801bf80:	4646      	movge	r6, r8
 801bf82:	e730      	b.n	801bde6 <_dtoa_r+0x71e>
 801bf84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801bf86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801bf88:	4646      	mov	r6, r8
 801bf8a:	e735      	b.n	801bdf8 <_dtoa_r+0x730>
 801bf8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bf8e:	e75c      	b.n	801be4a <_dtoa_r+0x782>
 801bf90:	2300      	movs	r3, #0
 801bf92:	e788      	b.n	801bea6 <_dtoa_r+0x7de>
 801bf94:	3fe00000 	.word	0x3fe00000
 801bf98:	40240000 	.word	0x40240000
 801bf9c:	40140000 	.word	0x40140000
 801bfa0:	9b02      	ldr	r3, [sp, #8]
 801bfa2:	e780      	b.n	801bea6 <_dtoa_r+0x7de>
 801bfa4:	2300      	movs	r3, #0
 801bfa6:	930a      	str	r3, [sp, #40]	@ 0x28
 801bfa8:	e782      	b.n	801beb0 <_dtoa_r+0x7e8>
 801bfaa:	d099      	beq.n	801bee0 <_dtoa_r+0x818>
 801bfac:	9a08      	ldr	r2, [sp, #32]
 801bfae:	331c      	adds	r3, #28
 801bfb0:	441a      	add	r2, r3
 801bfb2:	4498      	add	r8, r3
 801bfb4:	441e      	add	r6, r3
 801bfb6:	9208      	str	r2, [sp, #32]
 801bfb8:	e792      	b.n	801bee0 <_dtoa_r+0x818>
 801bfba:	4603      	mov	r3, r0
 801bfbc:	e7f6      	b.n	801bfac <_dtoa_r+0x8e4>
 801bfbe:	9b07      	ldr	r3, [sp, #28]
 801bfc0:	9704      	str	r7, [sp, #16]
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	dc20      	bgt.n	801c008 <_dtoa_r+0x940>
 801bfc6:	9300      	str	r3, [sp, #0]
 801bfc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bfca:	2b02      	cmp	r3, #2
 801bfcc:	dd1e      	ble.n	801c00c <_dtoa_r+0x944>
 801bfce:	9b00      	ldr	r3, [sp, #0]
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	f47f aec0 	bne.w	801bd56 <_dtoa_r+0x68e>
 801bfd6:	4621      	mov	r1, r4
 801bfd8:	2205      	movs	r2, #5
 801bfda:	4658      	mov	r0, fp
 801bfdc:	f000 fd30 	bl	801ca40 <__multadd>
 801bfe0:	4601      	mov	r1, r0
 801bfe2:	4604      	mov	r4, r0
 801bfe4:	4648      	mov	r0, r9
 801bfe6:	f000 ff8d 	bl	801cf04 <__mcmp>
 801bfea:	2800      	cmp	r0, #0
 801bfec:	f77f aeb3 	ble.w	801bd56 <_dtoa_r+0x68e>
 801bff0:	4656      	mov	r6, sl
 801bff2:	2331      	movs	r3, #49	@ 0x31
 801bff4:	f806 3b01 	strb.w	r3, [r6], #1
 801bff8:	9b04      	ldr	r3, [sp, #16]
 801bffa:	3301      	adds	r3, #1
 801bffc:	9304      	str	r3, [sp, #16]
 801bffe:	e6ae      	b.n	801bd5e <_dtoa_r+0x696>
 801c000:	9c07      	ldr	r4, [sp, #28]
 801c002:	9704      	str	r7, [sp, #16]
 801c004:	4625      	mov	r5, r4
 801c006:	e7f3      	b.n	801bff0 <_dtoa_r+0x928>
 801c008:	9b07      	ldr	r3, [sp, #28]
 801c00a:	9300      	str	r3, [sp, #0]
 801c00c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c00e:	2b00      	cmp	r3, #0
 801c010:	f000 8104 	beq.w	801c21c <_dtoa_r+0xb54>
 801c014:	2e00      	cmp	r6, #0
 801c016:	dd05      	ble.n	801c024 <_dtoa_r+0x95c>
 801c018:	4629      	mov	r1, r5
 801c01a:	4632      	mov	r2, r6
 801c01c:	4658      	mov	r0, fp
 801c01e:	f000 ff05 	bl	801ce2c <__lshift>
 801c022:	4605      	mov	r5, r0
 801c024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c026:	2b00      	cmp	r3, #0
 801c028:	d05a      	beq.n	801c0e0 <_dtoa_r+0xa18>
 801c02a:	6869      	ldr	r1, [r5, #4]
 801c02c:	4658      	mov	r0, fp
 801c02e:	f000 fca5 	bl	801c97c <_Balloc>
 801c032:	4606      	mov	r6, r0
 801c034:	b928      	cbnz	r0, 801c042 <_dtoa_r+0x97a>
 801c036:	4b84      	ldr	r3, [pc, #528]	@ (801c248 <_dtoa_r+0xb80>)
 801c038:	4602      	mov	r2, r0
 801c03a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801c03e:	f7ff bb5a 	b.w	801b6f6 <_dtoa_r+0x2e>
 801c042:	692a      	ldr	r2, [r5, #16]
 801c044:	3202      	adds	r2, #2
 801c046:	0092      	lsls	r2, r2, #2
 801c048:	f105 010c 	add.w	r1, r5, #12
 801c04c:	300c      	adds	r0, #12
 801c04e:	f7ff fa78 	bl	801b542 <memcpy>
 801c052:	2201      	movs	r2, #1
 801c054:	4631      	mov	r1, r6
 801c056:	4658      	mov	r0, fp
 801c058:	f000 fee8 	bl	801ce2c <__lshift>
 801c05c:	f10a 0301 	add.w	r3, sl, #1
 801c060:	9307      	str	r3, [sp, #28]
 801c062:	9b00      	ldr	r3, [sp, #0]
 801c064:	4453      	add	r3, sl
 801c066:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c068:	9b02      	ldr	r3, [sp, #8]
 801c06a:	f003 0301 	and.w	r3, r3, #1
 801c06e:	462f      	mov	r7, r5
 801c070:	930a      	str	r3, [sp, #40]	@ 0x28
 801c072:	4605      	mov	r5, r0
 801c074:	9b07      	ldr	r3, [sp, #28]
 801c076:	4621      	mov	r1, r4
 801c078:	3b01      	subs	r3, #1
 801c07a:	4648      	mov	r0, r9
 801c07c:	9300      	str	r3, [sp, #0]
 801c07e:	f7ff fa9b 	bl	801b5b8 <quorem>
 801c082:	4639      	mov	r1, r7
 801c084:	9002      	str	r0, [sp, #8]
 801c086:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c08a:	4648      	mov	r0, r9
 801c08c:	f000 ff3a 	bl	801cf04 <__mcmp>
 801c090:	462a      	mov	r2, r5
 801c092:	9008      	str	r0, [sp, #32]
 801c094:	4621      	mov	r1, r4
 801c096:	4658      	mov	r0, fp
 801c098:	f000 ff50 	bl	801cf3c <__mdiff>
 801c09c:	68c2      	ldr	r2, [r0, #12]
 801c09e:	4606      	mov	r6, r0
 801c0a0:	bb02      	cbnz	r2, 801c0e4 <_dtoa_r+0xa1c>
 801c0a2:	4601      	mov	r1, r0
 801c0a4:	4648      	mov	r0, r9
 801c0a6:	f000 ff2d 	bl	801cf04 <__mcmp>
 801c0aa:	4602      	mov	r2, r0
 801c0ac:	4631      	mov	r1, r6
 801c0ae:	4658      	mov	r0, fp
 801c0b0:	920e      	str	r2, [sp, #56]	@ 0x38
 801c0b2:	f000 fca3 	bl	801c9fc <_Bfree>
 801c0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c0b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c0ba:	9e07      	ldr	r6, [sp, #28]
 801c0bc:	ea43 0102 	orr.w	r1, r3, r2
 801c0c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c0c2:	4319      	orrs	r1, r3
 801c0c4:	d110      	bne.n	801c0e8 <_dtoa_r+0xa20>
 801c0c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c0ca:	d029      	beq.n	801c120 <_dtoa_r+0xa58>
 801c0cc:	9b08      	ldr	r3, [sp, #32]
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	dd02      	ble.n	801c0d8 <_dtoa_r+0xa10>
 801c0d2:	9b02      	ldr	r3, [sp, #8]
 801c0d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801c0d8:	9b00      	ldr	r3, [sp, #0]
 801c0da:	f883 8000 	strb.w	r8, [r3]
 801c0de:	e63f      	b.n	801bd60 <_dtoa_r+0x698>
 801c0e0:	4628      	mov	r0, r5
 801c0e2:	e7bb      	b.n	801c05c <_dtoa_r+0x994>
 801c0e4:	2201      	movs	r2, #1
 801c0e6:	e7e1      	b.n	801c0ac <_dtoa_r+0x9e4>
 801c0e8:	9b08      	ldr	r3, [sp, #32]
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	db04      	blt.n	801c0f8 <_dtoa_r+0xa30>
 801c0ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c0f0:	430b      	orrs	r3, r1
 801c0f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c0f4:	430b      	orrs	r3, r1
 801c0f6:	d120      	bne.n	801c13a <_dtoa_r+0xa72>
 801c0f8:	2a00      	cmp	r2, #0
 801c0fa:	dded      	ble.n	801c0d8 <_dtoa_r+0xa10>
 801c0fc:	4649      	mov	r1, r9
 801c0fe:	2201      	movs	r2, #1
 801c100:	4658      	mov	r0, fp
 801c102:	f000 fe93 	bl	801ce2c <__lshift>
 801c106:	4621      	mov	r1, r4
 801c108:	4681      	mov	r9, r0
 801c10a:	f000 fefb 	bl	801cf04 <__mcmp>
 801c10e:	2800      	cmp	r0, #0
 801c110:	dc03      	bgt.n	801c11a <_dtoa_r+0xa52>
 801c112:	d1e1      	bne.n	801c0d8 <_dtoa_r+0xa10>
 801c114:	f018 0f01 	tst.w	r8, #1
 801c118:	d0de      	beq.n	801c0d8 <_dtoa_r+0xa10>
 801c11a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c11e:	d1d8      	bne.n	801c0d2 <_dtoa_r+0xa0a>
 801c120:	9a00      	ldr	r2, [sp, #0]
 801c122:	2339      	movs	r3, #57	@ 0x39
 801c124:	7013      	strb	r3, [r2, #0]
 801c126:	4633      	mov	r3, r6
 801c128:	461e      	mov	r6, r3
 801c12a:	3b01      	subs	r3, #1
 801c12c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c130:	2a39      	cmp	r2, #57	@ 0x39
 801c132:	d052      	beq.n	801c1da <_dtoa_r+0xb12>
 801c134:	3201      	adds	r2, #1
 801c136:	701a      	strb	r2, [r3, #0]
 801c138:	e612      	b.n	801bd60 <_dtoa_r+0x698>
 801c13a:	2a00      	cmp	r2, #0
 801c13c:	dd07      	ble.n	801c14e <_dtoa_r+0xa86>
 801c13e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c142:	d0ed      	beq.n	801c120 <_dtoa_r+0xa58>
 801c144:	9a00      	ldr	r2, [sp, #0]
 801c146:	f108 0301 	add.w	r3, r8, #1
 801c14a:	7013      	strb	r3, [r2, #0]
 801c14c:	e608      	b.n	801bd60 <_dtoa_r+0x698>
 801c14e:	9b07      	ldr	r3, [sp, #28]
 801c150:	9a07      	ldr	r2, [sp, #28]
 801c152:	f803 8c01 	strb.w	r8, [r3, #-1]
 801c156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c158:	4293      	cmp	r3, r2
 801c15a:	d028      	beq.n	801c1ae <_dtoa_r+0xae6>
 801c15c:	4649      	mov	r1, r9
 801c15e:	2300      	movs	r3, #0
 801c160:	220a      	movs	r2, #10
 801c162:	4658      	mov	r0, fp
 801c164:	f000 fc6c 	bl	801ca40 <__multadd>
 801c168:	42af      	cmp	r7, r5
 801c16a:	4681      	mov	r9, r0
 801c16c:	f04f 0300 	mov.w	r3, #0
 801c170:	f04f 020a 	mov.w	r2, #10
 801c174:	4639      	mov	r1, r7
 801c176:	4658      	mov	r0, fp
 801c178:	d107      	bne.n	801c18a <_dtoa_r+0xac2>
 801c17a:	f000 fc61 	bl	801ca40 <__multadd>
 801c17e:	4607      	mov	r7, r0
 801c180:	4605      	mov	r5, r0
 801c182:	9b07      	ldr	r3, [sp, #28]
 801c184:	3301      	adds	r3, #1
 801c186:	9307      	str	r3, [sp, #28]
 801c188:	e774      	b.n	801c074 <_dtoa_r+0x9ac>
 801c18a:	f000 fc59 	bl	801ca40 <__multadd>
 801c18e:	4629      	mov	r1, r5
 801c190:	4607      	mov	r7, r0
 801c192:	2300      	movs	r3, #0
 801c194:	220a      	movs	r2, #10
 801c196:	4658      	mov	r0, fp
 801c198:	f000 fc52 	bl	801ca40 <__multadd>
 801c19c:	4605      	mov	r5, r0
 801c19e:	e7f0      	b.n	801c182 <_dtoa_r+0xaba>
 801c1a0:	9b00      	ldr	r3, [sp, #0]
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	bfcc      	ite	gt
 801c1a6:	461e      	movgt	r6, r3
 801c1a8:	2601      	movle	r6, #1
 801c1aa:	4456      	add	r6, sl
 801c1ac:	2700      	movs	r7, #0
 801c1ae:	4649      	mov	r1, r9
 801c1b0:	2201      	movs	r2, #1
 801c1b2:	4658      	mov	r0, fp
 801c1b4:	f000 fe3a 	bl	801ce2c <__lshift>
 801c1b8:	4621      	mov	r1, r4
 801c1ba:	4681      	mov	r9, r0
 801c1bc:	f000 fea2 	bl	801cf04 <__mcmp>
 801c1c0:	2800      	cmp	r0, #0
 801c1c2:	dcb0      	bgt.n	801c126 <_dtoa_r+0xa5e>
 801c1c4:	d102      	bne.n	801c1cc <_dtoa_r+0xb04>
 801c1c6:	f018 0f01 	tst.w	r8, #1
 801c1ca:	d1ac      	bne.n	801c126 <_dtoa_r+0xa5e>
 801c1cc:	4633      	mov	r3, r6
 801c1ce:	461e      	mov	r6, r3
 801c1d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c1d4:	2a30      	cmp	r2, #48	@ 0x30
 801c1d6:	d0fa      	beq.n	801c1ce <_dtoa_r+0xb06>
 801c1d8:	e5c2      	b.n	801bd60 <_dtoa_r+0x698>
 801c1da:	459a      	cmp	sl, r3
 801c1dc:	d1a4      	bne.n	801c128 <_dtoa_r+0xa60>
 801c1de:	9b04      	ldr	r3, [sp, #16]
 801c1e0:	3301      	adds	r3, #1
 801c1e2:	9304      	str	r3, [sp, #16]
 801c1e4:	2331      	movs	r3, #49	@ 0x31
 801c1e6:	f88a 3000 	strb.w	r3, [sl]
 801c1ea:	e5b9      	b.n	801bd60 <_dtoa_r+0x698>
 801c1ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c1ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801c24c <_dtoa_r+0xb84>
 801c1f2:	b11b      	cbz	r3, 801c1fc <_dtoa_r+0xb34>
 801c1f4:	f10a 0308 	add.w	r3, sl, #8
 801c1f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801c1fa:	6013      	str	r3, [r2, #0]
 801c1fc:	4650      	mov	r0, sl
 801c1fe:	b019      	add	sp, #100	@ 0x64
 801c200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c206:	2b01      	cmp	r3, #1
 801c208:	f77f ae37 	ble.w	801be7a <_dtoa_r+0x7b2>
 801c20c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c20e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c210:	2001      	movs	r0, #1
 801c212:	e655      	b.n	801bec0 <_dtoa_r+0x7f8>
 801c214:	9b00      	ldr	r3, [sp, #0]
 801c216:	2b00      	cmp	r3, #0
 801c218:	f77f aed6 	ble.w	801bfc8 <_dtoa_r+0x900>
 801c21c:	4656      	mov	r6, sl
 801c21e:	4621      	mov	r1, r4
 801c220:	4648      	mov	r0, r9
 801c222:	f7ff f9c9 	bl	801b5b8 <quorem>
 801c226:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c22a:	f806 8b01 	strb.w	r8, [r6], #1
 801c22e:	9b00      	ldr	r3, [sp, #0]
 801c230:	eba6 020a 	sub.w	r2, r6, sl
 801c234:	4293      	cmp	r3, r2
 801c236:	ddb3      	ble.n	801c1a0 <_dtoa_r+0xad8>
 801c238:	4649      	mov	r1, r9
 801c23a:	2300      	movs	r3, #0
 801c23c:	220a      	movs	r2, #10
 801c23e:	4658      	mov	r0, fp
 801c240:	f000 fbfe 	bl	801ca40 <__multadd>
 801c244:	4681      	mov	r9, r0
 801c246:	e7ea      	b.n	801c21e <_dtoa_r+0xb56>
 801c248:	08021c64 	.word	0x08021c64
 801c24c:	08021bff 	.word	0x08021bff

0801c250 <_free_r>:
 801c250:	b538      	push	{r3, r4, r5, lr}
 801c252:	4605      	mov	r5, r0
 801c254:	2900      	cmp	r1, #0
 801c256:	d041      	beq.n	801c2dc <_free_r+0x8c>
 801c258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c25c:	1f0c      	subs	r4, r1, #4
 801c25e:	2b00      	cmp	r3, #0
 801c260:	bfb8      	it	lt
 801c262:	18e4      	addlt	r4, r4, r3
 801c264:	f7fd f98e 	bl	8019584 <__malloc_lock>
 801c268:	4a1d      	ldr	r2, [pc, #116]	@ (801c2e0 <_free_r+0x90>)
 801c26a:	6813      	ldr	r3, [r2, #0]
 801c26c:	b933      	cbnz	r3, 801c27c <_free_r+0x2c>
 801c26e:	6063      	str	r3, [r4, #4]
 801c270:	6014      	str	r4, [r2, #0]
 801c272:	4628      	mov	r0, r5
 801c274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c278:	f7fd b98a 	b.w	8019590 <__malloc_unlock>
 801c27c:	42a3      	cmp	r3, r4
 801c27e:	d908      	bls.n	801c292 <_free_r+0x42>
 801c280:	6820      	ldr	r0, [r4, #0]
 801c282:	1821      	adds	r1, r4, r0
 801c284:	428b      	cmp	r3, r1
 801c286:	bf01      	itttt	eq
 801c288:	6819      	ldreq	r1, [r3, #0]
 801c28a:	685b      	ldreq	r3, [r3, #4]
 801c28c:	1809      	addeq	r1, r1, r0
 801c28e:	6021      	streq	r1, [r4, #0]
 801c290:	e7ed      	b.n	801c26e <_free_r+0x1e>
 801c292:	461a      	mov	r2, r3
 801c294:	685b      	ldr	r3, [r3, #4]
 801c296:	b10b      	cbz	r3, 801c29c <_free_r+0x4c>
 801c298:	42a3      	cmp	r3, r4
 801c29a:	d9fa      	bls.n	801c292 <_free_r+0x42>
 801c29c:	6811      	ldr	r1, [r2, #0]
 801c29e:	1850      	adds	r0, r2, r1
 801c2a0:	42a0      	cmp	r0, r4
 801c2a2:	d10b      	bne.n	801c2bc <_free_r+0x6c>
 801c2a4:	6820      	ldr	r0, [r4, #0]
 801c2a6:	4401      	add	r1, r0
 801c2a8:	1850      	adds	r0, r2, r1
 801c2aa:	4283      	cmp	r3, r0
 801c2ac:	6011      	str	r1, [r2, #0]
 801c2ae:	d1e0      	bne.n	801c272 <_free_r+0x22>
 801c2b0:	6818      	ldr	r0, [r3, #0]
 801c2b2:	685b      	ldr	r3, [r3, #4]
 801c2b4:	6053      	str	r3, [r2, #4]
 801c2b6:	4408      	add	r0, r1
 801c2b8:	6010      	str	r0, [r2, #0]
 801c2ba:	e7da      	b.n	801c272 <_free_r+0x22>
 801c2bc:	d902      	bls.n	801c2c4 <_free_r+0x74>
 801c2be:	230c      	movs	r3, #12
 801c2c0:	602b      	str	r3, [r5, #0]
 801c2c2:	e7d6      	b.n	801c272 <_free_r+0x22>
 801c2c4:	6820      	ldr	r0, [r4, #0]
 801c2c6:	1821      	adds	r1, r4, r0
 801c2c8:	428b      	cmp	r3, r1
 801c2ca:	bf04      	itt	eq
 801c2cc:	6819      	ldreq	r1, [r3, #0]
 801c2ce:	685b      	ldreq	r3, [r3, #4]
 801c2d0:	6063      	str	r3, [r4, #4]
 801c2d2:	bf04      	itt	eq
 801c2d4:	1809      	addeq	r1, r1, r0
 801c2d6:	6021      	streq	r1, [r4, #0]
 801c2d8:	6054      	str	r4, [r2, #4]
 801c2da:	e7ca      	b.n	801c272 <_free_r+0x22>
 801c2dc:	bd38      	pop	{r3, r4, r5, pc}
 801c2de:	bf00      	nop
 801c2e0:	20002f68 	.word	0x20002f68

0801c2e4 <rshift>:
 801c2e4:	6903      	ldr	r3, [r0, #16]
 801c2e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c2ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c2ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c2f2:	f100 0414 	add.w	r4, r0, #20
 801c2f6:	dd45      	ble.n	801c384 <rshift+0xa0>
 801c2f8:	f011 011f 	ands.w	r1, r1, #31
 801c2fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c300:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c304:	d10c      	bne.n	801c320 <rshift+0x3c>
 801c306:	f100 0710 	add.w	r7, r0, #16
 801c30a:	4629      	mov	r1, r5
 801c30c:	42b1      	cmp	r1, r6
 801c30e:	d334      	bcc.n	801c37a <rshift+0x96>
 801c310:	1a9b      	subs	r3, r3, r2
 801c312:	009b      	lsls	r3, r3, #2
 801c314:	1eea      	subs	r2, r5, #3
 801c316:	4296      	cmp	r6, r2
 801c318:	bf38      	it	cc
 801c31a:	2300      	movcc	r3, #0
 801c31c:	4423      	add	r3, r4
 801c31e:	e015      	b.n	801c34c <rshift+0x68>
 801c320:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c324:	f1c1 0820 	rsb	r8, r1, #32
 801c328:	40cf      	lsrs	r7, r1
 801c32a:	f105 0e04 	add.w	lr, r5, #4
 801c32e:	46a1      	mov	r9, r4
 801c330:	4576      	cmp	r6, lr
 801c332:	46f4      	mov	ip, lr
 801c334:	d815      	bhi.n	801c362 <rshift+0x7e>
 801c336:	1a9a      	subs	r2, r3, r2
 801c338:	0092      	lsls	r2, r2, #2
 801c33a:	3a04      	subs	r2, #4
 801c33c:	3501      	adds	r5, #1
 801c33e:	42ae      	cmp	r6, r5
 801c340:	bf38      	it	cc
 801c342:	2200      	movcc	r2, #0
 801c344:	18a3      	adds	r3, r4, r2
 801c346:	50a7      	str	r7, [r4, r2]
 801c348:	b107      	cbz	r7, 801c34c <rshift+0x68>
 801c34a:	3304      	adds	r3, #4
 801c34c:	1b1a      	subs	r2, r3, r4
 801c34e:	42a3      	cmp	r3, r4
 801c350:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c354:	bf08      	it	eq
 801c356:	2300      	moveq	r3, #0
 801c358:	6102      	str	r2, [r0, #16]
 801c35a:	bf08      	it	eq
 801c35c:	6143      	streq	r3, [r0, #20]
 801c35e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c362:	f8dc c000 	ldr.w	ip, [ip]
 801c366:	fa0c fc08 	lsl.w	ip, ip, r8
 801c36a:	ea4c 0707 	orr.w	r7, ip, r7
 801c36e:	f849 7b04 	str.w	r7, [r9], #4
 801c372:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c376:	40cf      	lsrs	r7, r1
 801c378:	e7da      	b.n	801c330 <rshift+0x4c>
 801c37a:	f851 cb04 	ldr.w	ip, [r1], #4
 801c37e:	f847 cf04 	str.w	ip, [r7, #4]!
 801c382:	e7c3      	b.n	801c30c <rshift+0x28>
 801c384:	4623      	mov	r3, r4
 801c386:	e7e1      	b.n	801c34c <rshift+0x68>

0801c388 <__hexdig_fun>:
 801c388:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801c38c:	2b09      	cmp	r3, #9
 801c38e:	d802      	bhi.n	801c396 <__hexdig_fun+0xe>
 801c390:	3820      	subs	r0, #32
 801c392:	b2c0      	uxtb	r0, r0
 801c394:	4770      	bx	lr
 801c396:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801c39a:	2b05      	cmp	r3, #5
 801c39c:	d801      	bhi.n	801c3a2 <__hexdig_fun+0x1a>
 801c39e:	3847      	subs	r0, #71	@ 0x47
 801c3a0:	e7f7      	b.n	801c392 <__hexdig_fun+0xa>
 801c3a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801c3a6:	2b05      	cmp	r3, #5
 801c3a8:	d801      	bhi.n	801c3ae <__hexdig_fun+0x26>
 801c3aa:	3827      	subs	r0, #39	@ 0x27
 801c3ac:	e7f1      	b.n	801c392 <__hexdig_fun+0xa>
 801c3ae:	2000      	movs	r0, #0
 801c3b0:	4770      	bx	lr
	...

0801c3b4 <__gethex>:
 801c3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3b8:	b085      	sub	sp, #20
 801c3ba:	468a      	mov	sl, r1
 801c3bc:	9302      	str	r3, [sp, #8]
 801c3be:	680b      	ldr	r3, [r1, #0]
 801c3c0:	9001      	str	r0, [sp, #4]
 801c3c2:	4690      	mov	r8, r2
 801c3c4:	1c9c      	adds	r4, r3, #2
 801c3c6:	46a1      	mov	r9, r4
 801c3c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 801c3cc:	2830      	cmp	r0, #48	@ 0x30
 801c3ce:	d0fa      	beq.n	801c3c6 <__gethex+0x12>
 801c3d0:	eba9 0303 	sub.w	r3, r9, r3
 801c3d4:	f1a3 0b02 	sub.w	fp, r3, #2
 801c3d8:	f7ff ffd6 	bl	801c388 <__hexdig_fun>
 801c3dc:	4605      	mov	r5, r0
 801c3de:	2800      	cmp	r0, #0
 801c3e0:	d168      	bne.n	801c4b4 <__gethex+0x100>
 801c3e2:	49a0      	ldr	r1, [pc, #640]	@ (801c664 <__gethex+0x2b0>)
 801c3e4:	2201      	movs	r2, #1
 801c3e6:	4648      	mov	r0, r9
 801c3e8:	f7fe ff97 	bl	801b31a <strncmp>
 801c3ec:	4607      	mov	r7, r0
 801c3ee:	2800      	cmp	r0, #0
 801c3f0:	d167      	bne.n	801c4c2 <__gethex+0x10e>
 801c3f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 801c3f6:	4626      	mov	r6, r4
 801c3f8:	f7ff ffc6 	bl	801c388 <__hexdig_fun>
 801c3fc:	2800      	cmp	r0, #0
 801c3fe:	d062      	beq.n	801c4c6 <__gethex+0x112>
 801c400:	4623      	mov	r3, r4
 801c402:	7818      	ldrb	r0, [r3, #0]
 801c404:	2830      	cmp	r0, #48	@ 0x30
 801c406:	4699      	mov	r9, r3
 801c408:	f103 0301 	add.w	r3, r3, #1
 801c40c:	d0f9      	beq.n	801c402 <__gethex+0x4e>
 801c40e:	f7ff ffbb 	bl	801c388 <__hexdig_fun>
 801c412:	fab0 f580 	clz	r5, r0
 801c416:	096d      	lsrs	r5, r5, #5
 801c418:	f04f 0b01 	mov.w	fp, #1
 801c41c:	464a      	mov	r2, r9
 801c41e:	4616      	mov	r6, r2
 801c420:	3201      	adds	r2, #1
 801c422:	7830      	ldrb	r0, [r6, #0]
 801c424:	f7ff ffb0 	bl	801c388 <__hexdig_fun>
 801c428:	2800      	cmp	r0, #0
 801c42a:	d1f8      	bne.n	801c41e <__gethex+0x6a>
 801c42c:	498d      	ldr	r1, [pc, #564]	@ (801c664 <__gethex+0x2b0>)
 801c42e:	2201      	movs	r2, #1
 801c430:	4630      	mov	r0, r6
 801c432:	f7fe ff72 	bl	801b31a <strncmp>
 801c436:	2800      	cmp	r0, #0
 801c438:	d13f      	bne.n	801c4ba <__gethex+0x106>
 801c43a:	b944      	cbnz	r4, 801c44e <__gethex+0x9a>
 801c43c:	1c74      	adds	r4, r6, #1
 801c43e:	4622      	mov	r2, r4
 801c440:	4616      	mov	r6, r2
 801c442:	3201      	adds	r2, #1
 801c444:	7830      	ldrb	r0, [r6, #0]
 801c446:	f7ff ff9f 	bl	801c388 <__hexdig_fun>
 801c44a:	2800      	cmp	r0, #0
 801c44c:	d1f8      	bne.n	801c440 <__gethex+0x8c>
 801c44e:	1ba4      	subs	r4, r4, r6
 801c450:	00a7      	lsls	r7, r4, #2
 801c452:	7833      	ldrb	r3, [r6, #0]
 801c454:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801c458:	2b50      	cmp	r3, #80	@ 0x50
 801c45a:	d13e      	bne.n	801c4da <__gethex+0x126>
 801c45c:	7873      	ldrb	r3, [r6, #1]
 801c45e:	2b2b      	cmp	r3, #43	@ 0x2b
 801c460:	d033      	beq.n	801c4ca <__gethex+0x116>
 801c462:	2b2d      	cmp	r3, #45	@ 0x2d
 801c464:	d034      	beq.n	801c4d0 <__gethex+0x11c>
 801c466:	1c71      	adds	r1, r6, #1
 801c468:	2400      	movs	r4, #0
 801c46a:	7808      	ldrb	r0, [r1, #0]
 801c46c:	f7ff ff8c 	bl	801c388 <__hexdig_fun>
 801c470:	1e43      	subs	r3, r0, #1
 801c472:	b2db      	uxtb	r3, r3
 801c474:	2b18      	cmp	r3, #24
 801c476:	d830      	bhi.n	801c4da <__gethex+0x126>
 801c478:	f1a0 0210 	sub.w	r2, r0, #16
 801c47c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c480:	f7ff ff82 	bl	801c388 <__hexdig_fun>
 801c484:	f100 3cff 	add.w	ip, r0, #4294967295
 801c488:	fa5f fc8c 	uxtb.w	ip, ip
 801c48c:	f1bc 0f18 	cmp.w	ip, #24
 801c490:	f04f 030a 	mov.w	r3, #10
 801c494:	d91e      	bls.n	801c4d4 <__gethex+0x120>
 801c496:	b104      	cbz	r4, 801c49a <__gethex+0xe6>
 801c498:	4252      	negs	r2, r2
 801c49a:	4417      	add	r7, r2
 801c49c:	f8ca 1000 	str.w	r1, [sl]
 801c4a0:	b1ed      	cbz	r5, 801c4de <__gethex+0x12a>
 801c4a2:	f1bb 0f00 	cmp.w	fp, #0
 801c4a6:	bf0c      	ite	eq
 801c4a8:	2506      	moveq	r5, #6
 801c4aa:	2500      	movne	r5, #0
 801c4ac:	4628      	mov	r0, r5
 801c4ae:	b005      	add	sp, #20
 801c4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4b4:	2500      	movs	r5, #0
 801c4b6:	462c      	mov	r4, r5
 801c4b8:	e7b0      	b.n	801c41c <__gethex+0x68>
 801c4ba:	2c00      	cmp	r4, #0
 801c4bc:	d1c7      	bne.n	801c44e <__gethex+0x9a>
 801c4be:	4627      	mov	r7, r4
 801c4c0:	e7c7      	b.n	801c452 <__gethex+0x9e>
 801c4c2:	464e      	mov	r6, r9
 801c4c4:	462f      	mov	r7, r5
 801c4c6:	2501      	movs	r5, #1
 801c4c8:	e7c3      	b.n	801c452 <__gethex+0x9e>
 801c4ca:	2400      	movs	r4, #0
 801c4cc:	1cb1      	adds	r1, r6, #2
 801c4ce:	e7cc      	b.n	801c46a <__gethex+0xb6>
 801c4d0:	2401      	movs	r4, #1
 801c4d2:	e7fb      	b.n	801c4cc <__gethex+0x118>
 801c4d4:	fb03 0002 	mla	r0, r3, r2, r0
 801c4d8:	e7ce      	b.n	801c478 <__gethex+0xc4>
 801c4da:	4631      	mov	r1, r6
 801c4dc:	e7de      	b.n	801c49c <__gethex+0xe8>
 801c4de:	eba6 0309 	sub.w	r3, r6, r9
 801c4e2:	3b01      	subs	r3, #1
 801c4e4:	4629      	mov	r1, r5
 801c4e6:	2b07      	cmp	r3, #7
 801c4e8:	dc0a      	bgt.n	801c500 <__gethex+0x14c>
 801c4ea:	9801      	ldr	r0, [sp, #4]
 801c4ec:	f000 fa46 	bl	801c97c <_Balloc>
 801c4f0:	4604      	mov	r4, r0
 801c4f2:	b940      	cbnz	r0, 801c506 <__gethex+0x152>
 801c4f4:	4b5c      	ldr	r3, [pc, #368]	@ (801c668 <__gethex+0x2b4>)
 801c4f6:	4602      	mov	r2, r0
 801c4f8:	21e4      	movs	r1, #228	@ 0xe4
 801c4fa:	485c      	ldr	r0, [pc, #368]	@ (801c66c <__gethex+0x2b8>)
 801c4fc:	f7ff f83e 	bl	801b57c <__assert_func>
 801c500:	3101      	adds	r1, #1
 801c502:	105b      	asrs	r3, r3, #1
 801c504:	e7ef      	b.n	801c4e6 <__gethex+0x132>
 801c506:	f100 0a14 	add.w	sl, r0, #20
 801c50a:	2300      	movs	r3, #0
 801c50c:	4655      	mov	r5, sl
 801c50e:	469b      	mov	fp, r3
 801c510:	45b1      	cmp	r9, r6
 801c512:	d337      	bcc.n	801c584 <__gethex+0x1d0>
 801c514:	f845 bb04 	str.w	fp, [r5], #4
 801c518:	eba5 050a 	sub.w	r5, r5, sl
 801c51c:	10ad      	asrs	r5, r5, #2
 801c51e:	6125      	str	r5, [r4, #16]
 801c520:	4658      	mov	r0, fp
 801c522:	f000 fb1d 	bl	801cb60 <__hi0bits>
 801c526:	016d      	lsls	r5, r5, #5
 801c528:	f8d8 6000 	ldr.w	r6, [r8]
 801c52c:	1a2d      	subs	r5, r5, r0
 801c52e:	42b5      	cmp	r5, r6
 801c530:	dd54      	ble.n	801c5dc <__gethex+0x228>
 801c532:	1bad      	subs	r5, r5, r6
 801c534:	4629      	mov	r1, r5
 801c536:	4620      	mov	r0, r4
 801c538:	f000 feb1 	bl	801d29e <__any_on>
 801c53c:	4681      	mov	r9, r0
 801c53e:	b178      	cbz	r0, 801c560 <__gethex+0x1ac>
 801c540:	1e6b      	subs	r3, r5, #1
 801c542:	1159      	asrs	r1, r3, #5
 801c544:	f003 021f 	and.w	r2, r3, #31
 801c548:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801c54c:	f04f 0901 	mov.w	r9, #1
 801c550:	fa09 f202 	lsl.w	r2, r9, r2
 801c554:	420a      	tst	r2, r1
 801c556:	d003      	beq.n	801c560 <__gethex+0x1ac>
 801c558:	454b      	cmp	r3, r9
 801c55a:	dc36      	bgt.n	801c5ca <__gethex+0x216>
 801c55c:	f04f 0902 	mov.w	r9, #2
 801c560:	4629      	mov	r1, r5
 801c562:	4620      	mov	r0, r4
 801c564:	f7ff febe 	bl	801c2e4 <rshift>
 801c568:	442f      	add	r7, r5
 801c56a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c56e:	42bb      	cmp	r3, r7
 801c570:	da42      	bge.n	801c5f8 <__gethex+0x244>
 801c572:	9801      	ldr	r0, [sp, #4]
 801c574:	4621      	mov	r1, r4
 801c576:	f000 fa41 	bl	801c9fc <_Bfree>
 801c57a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c57c:	2300      	movs	r3, #0
 801c57e:	6013      	str	r3, [r2, #0]
 801c580:	25a3      	movs	r5, #163	@ 0xa3
 801c582:	e793      	b.n	801c4ac <__gethex+0xf8>
 801c584:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801c588:	2a2e      	cmp	r2, #46	@ 0x2e
 801c58a:	d012      	beq.n	801c5b2 <__gethex+0x1fe>
 801c58c:	2b20      	cmp	r3, #32
 801c58e:	d104      	bne.n	801c59a <__gethex+0x1e6>
 801c590:	f845 bb04 	str.w	fp, [r5], #4
 801c594:	f04f 0b00 	mov.w	fp, #0
 801c598:	465b      	mov	r3, fp
 801c59a:	7830      	ldrb	r0, [r6, #0]
 801c59c:	9303      	str	r3, [sp, #12]
 801c59e:	f7ff fef3 	bl	801c388 <__hexdig_fun>
 801c5a2:	9b03      	ldr	r3, [sp, #12]
 801c5a4:	f000 000f 	and.w	r0, r0, #15
 801c5a8:	4098      	lsls	r0, r3
 801c5aa:	ea4b 0b00 	orr.w	fp, fp, r0
 801c5ae:	3304      	adds	r3, #4
 801c5b0:	e7ae      	b.n	801c510 <__gethex+0x15c>
 801c5b2:	45b1      	cmp	r9, r6
 801c5b4:	d8ea      	bhi.n	801c58c <__gethex+0x1d8>
 801c5b6:	492b      	ldr	r1, [pc, #172]	@ (801c664 <__gethex+0x2b0>)
 801c5b8:	9303      	str	r3, [sp, #12]
 801c5ba:	2201      	movs	r2, #1
 801c5bc:	4630      	mov	r0, r6
 801c5be:	f7fe feac 	bl	801b31a <strncmp>
 801c5c2:	9b03      	ldr	r3, [sp, #12]
 801c5c4:	2800      	cmp	r0, #0
 801c5c6:	d1e1      	bne.n	801c58c <__gethex+0x1d8>
 801c5c8:	e7a2      	b.n	801c510 <__gethex+0x15c>
 801c5ca:	1ea9      	subs	r1, r5, #2
 801c5cc:	4620      	mov	r0, r4
 801c5ce:	f000 fe66 	bl	801d29e <__any_on>
 801c5d2:	2800      	cmp	r0, #0
 801c5d4:	d0c2      	beq.n	801c55c <__gethex+0x1a8>
 801c5d6:	f04f 0903 	mov.w	r9, #3
 801c5da:	e7c1      	b.n	801c560 <__gethex+0x1ac>
 801c5dc:	da09      	bge.n	801c5f2 <__gethex+0x23e>
 801c5de:	1b75      	subs	r5, r6, r5
 801c5e0:	4621      	mov	r1, r4
 801c5e2:	9801      	ldr	r0, [sp, #4]
 801c5e4:	462a      	mov	r2, r5
 801c5e6:	f000 fc21 	bl	801ce2c <__lshift>
 801c5ea:	1b7f      	subs	r7, r7, r5
 801c5ec:	4604      	mov	r4, r0
 801c5ee:	f100 0a14 	add.w	sl, r0, #20
 801c5f2:	f04f 0900 	mov.w	r9, #0
 801c5f6:	e7b8      	b.n	801c56a <__gethex+0x1b6>
 801c5f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c5fc:	42bd      	cmp	r5, r7
 801c5fe:	dd6f      	ble.n	801c6e0 <__gethex+0x32c>
 801c600:	1bed      	subs	r5, r5, r7
 801c602:	42ae      	cmp	r6, r5
 801c604:	dc34      	bgt.n	801c670 <__gethex+0x2bc>
 801c606:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c60a:	2b02      	cmp	r3, #2
 801c60c:	d022      	beq.n	801c654 <__gethex+0x2a0>
 801c60e:	2b03      	cmp	r3, #3
 801c610:	d024      	beq.n	801c65c <__gethex+0x2a8>
 801c612:	2b01      	cmp	r3, #1
 801c614:	d115      	bne.n	801c642 <__gethex+0x28e>
 801c616:	42ae      	cmp	r6, r5
 801c618:	d113      	bne.n	801c642 <__gethex+0x28e>
 801c61a:	2e01      	cmp	r6, #1
 801c61c:	d10b      	bne.n	801c636 <__gethex+0x282>
 801c61e:	9a02      	ldr	r2, [sp, #8]
 801c620:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c624:	6013      	str	r3, [r2, #0]
 801c626:	2301      	movs	r3, #1
 801c628:	6123      	str	r3, [r4, #16]
 801c62a:	f8ca 3000 	str.w	r3, [sl]
 801c62e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c630:	2562      	movs	r5, #98	@ 0x62
 801c632:	601c      	str	r4, [r3, #0]
 801c634:	e73a      	b.n	801c4ac <__gethex+0xf8>
 801c636:	1e71      	subs	r1, r6, #1
 801c638:	4620      	mov	r0, r4
 801c63a:	f000 fe30 	bl	801d29e <__any_on>
 801c63e:	2800      	cmp	r0, #0
 801c640:	d1ed      	bne.n	801c61e <__gethex+0x26a>
 801c642:	9801      	ldr	r0, [sp, #4]
 801c644:	4621      	mov	r1, r4
 801c646:	f000 f9d9 	bl	801c9fc <_Bfree>
 801c64a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c64c:	2300      	movs	r3, #0
 801c64e:	6013      	str	r3, [r2, #0]
 801c650:	2550      	movs	r5, #80	@ 0x50
 801c652:	e72b      	b.n	801c4ac <__gethex+0xf8>
 801c654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c656:	2b00      	cmp	r3, #0
 801c658:	d1f3      	bne.n	801c642 <__gethex+0x28e>
 801c65a:	e7e0      	b.n	801c61e <__gethex+0x26a>
 801c65c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c65e:	2b00      	cmp	r3, #0
 801c660:	d1dd      	bne.n	801c61e <__gethex+0x26a>
 801c662:	e7ee      	b.n	801c642 <__gethex+0x28e>
 801c664:	080219bc 	.word	0x080219bc
 801c668:	08021c64 	.word	0x08021c64
 801c66c:	08021c75 	.word	0x08021c75
 801c670:	1e6f      	subs	r7, r5, #1
 801c672:	f1b9 0f00 	cmp.w	r9, #0
 801c676:	d130      	bne.n	801c6da <__gethex+0x326>
 801c678:	b127      	cbz	r7, 801c684 <__gethex+0x2d0>
 801c67a:	4639      	mov	r1, r7
 801c67c:	4620      	mov	r0, r4
 801c67e:	f000 fe0e 	bl	801d29e <__any_on>
 801c682:	4681      	mov	r9, r0
 801c684:	117a      	asrs	r2, r7, #5
 801c686:	2301      	movs	r3, #1
 801c688:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801c68c:	f007 071f 	and.w	r7, r7, #31
 801c690:	40bb      	lsls	r3, r7
 801c692:	4213      	tst	r3, r2
 801c694:	4629      	mov	r1, r5
 801c696:	4620      	mov	r0, r4
 801c698:	bf18      	it	ne
 801c69a:	f049 0902 	orrne.w	r9, r9, #2
 801c69e:	f7ff fe21 	bl	801c2e4 <rshift>
 801c6a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801c6a6:	1b76      	subs	r6, r6, r5
 801c6a8:	2502      	movs	r5, #2
 801c6aa:	f1b9 0f00 	cmp.w	r9, #0
 801c6ae:	d047      	beq.n	801c740 <__gethex+0x38c>
 801c6b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c6b4:	2b02      	cmp	r3, #2
 801c6b6:	d015      	beq.n	801c6e4 <__gethex+0x330>
 801c6b8:	2b03      	cmp	r3, #3
 801c6ba:	d017      	beq.n	801c6ec <__gethex+0x338>
 801c6bc:	2b01      	cmp	r3, #1
 801c6be:	d109      	bne.n	801c6d4 <__gethex+0x320>
 801c6c0:	f019 0f02 	tst.w	r9, #2
 801c6c4:	d006      	beq.n	801c6d4 <__gethex+0x320>
 801c6c6:	f8da 3000 	ldr.w	r3, [sl]
 801c6ca:	ea49 0903 	orr.w	r9, r9, r3
 801c6ce:	f019 0f01 	tst.w	r9, #1
 801c6d2:	d10e      	bne.n	801c6f2 <__gethex+0x33e>
 801c6d4:	f045 0510 	orr.w	r5, r5, #16
 801c6d8:	e032      	b.n	801c740 <__gethex+0x38c>
 801c6da:	f04f 0901 	mov.w	r9, #1
 801c6de:	e7d1      	b.n	801c684 <__gethex+0x2d0>
 801c6e0:	2501      	movs	r5, #1
 801c6e2:	e7e2      	b.n	801c6aa <__gethex+0x2f6>
 801c6e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c6e6:	f1c3 0301 	rsb	r3, r3, #1
 801c6ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c6ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d0f0      	beq.n	801c6d4 <__gethex+0x320>
 801c6f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c6f6:	f104 0314 	add.w	r3, r4, #20
 801c6fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c6fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c702:	f04f 0c00 	mov.w	ip, #0
 801c706:	4618      	mov	r0, r3
 801c708:	f853 2b04 	ldr.w	r2, [r3], #4
 801c70c:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c710:	d01b      	beq.n	801c74a <__gethex+0x396>
 801c712:	3201      	adds	r2, #1
 801c714:	6002      	str	r2, [r0, #0]
 801c716:	2d02      	cmp	r5, #2
 801c718:	f104 0314 	add.w	r3, r4, #20
 801c71c:	d13c      	bne.n	801c798 <__gethex+0x3e4>
 801c71e:	f8d8 2000 	ldr.w	r2, [r8]
 801c722:	3a01      	subs	r2, #1
 801c724:	42b2      	cmp	r2, r6
 801c726:	d109      	bne.n	801c73c <__gethex+0x388>
 801c728:	1171      	asrs	r1, r6, #5
 801c72a:	2201      	movs	r2, #1
 801c72c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c730:	f006 061f 	and.w	r6, r6, #31
 801c734:	fa02 f606 	lsl.w	r6, r2, r6
 801c738:	421e      	tst	r6, r3
 801c73a:	d13a      	bne.n	801c7b2 <__gethex+0x3fe>
 801c73c:	f045 0520 	orr.w	r5, r5, #32
 801c740:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c742:	601c      	str	r4, [r3, #0]
 801c744:	9b02      	ldr	r3, [sp, #8]
 801c746:	601f      	str	r7, [r3, #0]
 801c748:	e6b0      	b.n	801c4ac <__gethex+0xf8>
 801c74a:	4299      	cmp	r1, r3
 801c74c:	f843 cc04 	str.w	ip, [r3, #-4]
 801c750:	d8d9      	bhi.n	801c706 <__gethex+0x352>
 801c752:	68a3      	ldr	r3, [r4, #8]
 801c754:	459b      	cmp	fp, r3
 801c756:	db17      	blt.n	801c788 <__gethex+0x3d4>
 801c758:	6861      	ldr	r1, [r4, #4]
 801c75a:	9801      	ldr	r0, [sp, #4]
 801c75c:	3101      	adds	r1, #1
 801c75e:	f000 f90d 	bl	801c97c <_Balloc>
 801c762:	4681      	mov	r9, r0
 801c764:	b918      	cbnz	r0, 801c76e <__gethex+0x3ba>
 801c766:	4b1a      	ldr	r3, [pc, #104]	@ (801c7d0 <__gethex+0x41c>)
 801c768:	4602      	mov	r2, r0
 801c76a:	2184      	movs	r1, #132	@ 0x84
 801c76c:	e6c5      	b.n	801c4fa <__gethex+0x146>
 801c76e:	6922      	ldr	r2, [r4, #16]
 801c770:	3202      	adds	r2, #2
 801c772:	f104 010c 	add.w	r1, r4, #12
 801c776:	0092      	lsls	r2, r2, #2
 801c778:	300c      	adds	r0, #12
 801c77a:	f7fe fee2 	bl	801b542 <memcpy>
 801c77e:	4621      	mov	r1, r4
 801c780:	9801      	ldr	r0, [sp, #4]
 801c782:	f000 f93b 	bl	801c9fc <_Bfree>
 801c786:	464c      	mov	r4, r9
 801c788:	6923      	ldr	r3, [r4, #16]
 801c78a:	1c5a      	adds	r2, r3, #1
 801c78c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c790:	6122      	str	r2, [r4, #16]
 801c792:	2201      	movs	r2, #1
 801c794:	615a      	str	r2, [r3, #20]
 801c796:	e7be      	b.n	801c716 <__gethex+0x362>
 801c798:	6922      	ldr	r2, [r4, #16]
 801c79a:	455a      	cmp	r2, fp
 801c79c:	dd0b      	ble.n	801c7b6 <__gethex+0x402>
 801c79e:	2101      	movs	r1, #1
 801c7a0:	4620      	mov	r0, r4
 801c7a2:	f7ff fd9f 	bl	801c2e4 <rshift>
 801c7a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c7aa:	3701      	adds	r7, #1
 801c7ac:	42bb      	cmp	r3, r7
 801c7ae:	f6ff aee0 	blt.w	801c572 <__gethex+0x1be>
 801c7b2:	2501      	movs	r5, #1
 801c7b4:	e7c2      	b.n	801c73c <__gethex+0x388>
 801c7b6:	f016 061f 	ands.w	r6, r6, #31
 801c7ba:	d0fa      	beq.n	801c7b2 <__gethex+0x3fe>
 801c7bc:	4453      	add	r3, sl
 801c7be:	f1c6 0620 	rsb	r6, r6, #32
 801c7c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c7c6:	f000 f9cb 	bl	801cb60 <__hi0bits>
 801c7ca:	42b0      	cmp	r0, r6
 801c7cc:	dbe7      	blt.n	801c79e <__gethex+0x3ea>
 801c7ce:	e7f0      	b.n	801c7b2 <__gethex+0x3fe>
 801c7d0:	08021c64 	.word	0x08021c64

0801c7d4 <L_shift>:
 801c7d4:	f1c2 0208 	rsb	r2, r2, #8
 801c7d8:	0092      	lsls	r2, r2, #2
 801c7da:	b570      	push	{r4, r5, r6, lr}
 801c7dc:	f1c2 0620 	rsb	r6, r2, #32
 801c7e0:	6843      	ldr	r3, [r0, #4]
 801c7e2:	6804      	ldr	r4, [r0, #0]
 801c7e4:	fa03 f506 	lsl.w	r5, r3, r6
 801c7e8:	432c      	orrs	r4, r5
 801c7ea:	40d3      	lsrs	r3, r2
 801c7ec:	6004      	str	r4, [r0, #0]
 801c7ee:	f840 3f04 	str.w	r3, [r0, #4]!
 801c7f2:	4288      	cmp	r0, r1
 801c7f4:	d3f4      	bcc.n	801c7e0 <L_shift+0xc>
 801c7f6:	bd70      	pop	{r4, r5, r6, pc}

0801c7f8 <__match>:
 801c7f8:	b530      	push	{r4, r5, lr}
 801c7fa:	6803      	ldr	r3, [r0, #0]
 801c7fc:	3301      	adds	r3, #1
 801c7fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c802:	b914      	cbnz	r4, 801c80a <__match+0x12>
 801c804:	6003      	str	r3, [r0, #0]
 801c806:	2001      	movs	r0, #1
 801c808:	bd30      	pop	{r4, r5, pc}
 801c80a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c80e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801c812:	2d19      	cmp	r5, #25
 801c814:	bf98      	it	ls
 801c816:	3220      	addls	r2, #32
 801c818:	42a2      	cmp	r2, r4
 801c81a:	d0f0      	beq.n	801c7fe <__match+0x6>
 801c81c:	2000      	movs	r0, #0
 801c81e:	e7f3      	b.n	801c808 <__match+0x10>

0801c820 <__hexnan>:
 801c820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c824:	680b      	ldr	r3, [r1, #0]
 801c826:	6801      	ldr	r1, [r0, #0]
 801c828:	115e      	asrs	r6, r3, #5
 801c82a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c82e:	f013 031f 	ands.w	r3, r3, #31
 801c832:	b087      	sub	sp, #28
 801c834:	bf18      	it	ne
 801c836:	3604      	addne	r6, #4
 801c838:	2500      	movs	r5, #0
 801c83a:	1f37      	subs	r7, r6, #4
 801c83c:	4682      	mov	sl, r0
 801c83e:	4690      	mov	r8, r2
 801c840:	9301      	str	r3, [sp, #4]
 801c842:	f846 5c04 	str.w	r5, [r6, #-4]
 801c846:	46b9      	mov	r9, r7
 801c848:	463c      	mov	r4, r7
 801c84a:	9502      	str	r5, [sp, #8]
 801c84c:	46ab      	mov	fp, r5
 801c84e:	784a      	ldrb	r2, [r1, #1]
 801c850:	1c4b      	adds	r3, r1, #1
 801c852:	9303      	str	r3, [sp, #12]
 801c854:	b342      	cbz	r2, 801c8a8 <__hexnan+0x88>
 801c856:	4610      	mov	r0, r2
 801c858:	9105      	str	r1, [sp, #20]
 801c85a:	9204      	str	r2, [sp, #16]
 801c85c:	f7ff fd94 	bl	801c388 <__hexdig_fun>
 801c860:	2800      	cmp	r0, #0
 801c862:	d151      	bne.n	801c908 <__hexnan+0xe8>
 801c864:	9a04      	ldr	r2, [sp, #16]
 801c866:	9905      	ldr	r1, [sp, #20]
 801c868:	2a20      	cmp	r2, #32
 801c86a:	d818      	bhi.n	801c89e <__hexnan+0x7e>
 801c86c:	9b02      	ldr	r3, [sp, #8]
 801c86e:	459b      	cmp	fp, r3
 801c870:	dd13      	ble.n	801c89a <__hexnan+0x7a>
 801c872:	454c      	cmp	r4, r9
 801c874:	d206      	bcs.n	801c884 <__hexnan+0x64>
 801c876:	2d07      	cmp	r5, #7
 801c878:	dc04      	bgt.n	801c884 <__hexnan+0x64>
 801c87a:	462a      	mov	r2, r5
 801c87c:	4649      	mov	r1, r9
 801c87e:	4620      	mov	r0, r4
 801c880:	f7ff ffa8 	bl	801c7d4 <L_shift>
 801c884:	4544      	cmp	r4, r8
 801c886:	d952      	bls.n	801c92e <__hexnan+0x10e>
 801c888:	2300      	movs	r3, #0
 801c88a:	f1a4 0904 	sub.w	r9, r4, #4
 801c88e:	f844 3c04 	str.w	r3, [r4, #-4]
 801c892:	f8cd b008 	str.w	fp, [sp, #8]
 801c896:	464c      	mov	r4, r9
 801c898:	461d      	mov	r5, r3
 801c89a:	9903      	ldr	r1, [sp, #12]
 801c89c:	e7d7      	b.n	801c84e <__hexnan+0x2e>
 801c89e:	2a29      	cmp	r2, #41	@ 0x29
 801c8a0:	d157      	bne.n	801c952 <__hexnan+0x132>
 801c8a2:	3102      	adds	r1, #2
 801c8a4:	f8ca 1000 	str.w	r1, [sl]
 801c8a8:	f1bb 0f00 	cmp.w	fp, #0
 801c8ac:	d051      	beq.n	801c952 <__hexnan+0x132>
 801c8ae:	454c      	cmp	r4, r9
 801c8b0:	d206      	bcs.n	801c8c0 <__hexnan+0xa0>
 801c8b2:	2d07      	cmp	r5, #7
 801c8b4:	dc04      	bgt.n	801c8c0 <__hexnan+0xa0>
 801c8b6:	462a      	mov	r2, r5
 801c8b8:	4649      	mov	r1, r9
 801c8ba:	4620      	mov	r0, r4
 801c8bc:	f7ff ff8a 	bl	801c7d4 <L_shift>
 801c8c0:	4544      	cmp	r4, r8
 801c8c2:	d936      	bls.n	801c932 <__hexnan+0x112>
 801c8c4:	f1a8 0204 	sub.w	r2, r8, #4
 801c8c8:	4623      	mov	r3, r4
 801c8ca:	f853 1b04 	ldr.w	r1, [r3], #4
 801c8ce:	f842 1f04 	str.w	r1, [r2, #4]!
 801c8d2:	429f      	cmp	r7, r3
 801c8d4:	d2f9      	bcs.n	801c8ca <__hexnan+0xaa>
 801c8d6:	1b3b      	subs	r3, r7, r4
 801c8d8:	f023 0303 	bic.w	r3, r3, #3
 801c8dc:	3304      	adds	r3, #4
 801c8de:	3401      	adds	r4, #1
 801c8e0:	3e03      	subs	r6, #3
 801c8e2:	42b4      	cmp	r4, r6
 801c8e4:	bf88      	it	hi
 801c8e6:	2304      	movhi	r3, #4
 801c8e8:	4443      	add	r3, r8
 801c8ea:	2200      	movs	r2, #0
 801c8ec:	f843 2b04 	str.w	r2, [r3], #4
 801c8f0:	429f      	cmp	r7, r3
 801c8f2:	d2fb      	bcs.n	801c8ec <__hexnan+0xcc>
 801c8f4:	683b      	ldr	r3, [r7, #0]
 801c8f6:	b91b      	cbnz	r3, 801c900 <__hexnan+0xe0>
 801c8f8:	4547      	cmp	r7, r8
 801c8fa:	d128      	bne.n	801c94e <__hexnan+0x12e>
 801c8fc:	2301      	movs	r3, #1
 801c8fe:	603b      	str	r3, [r7, #0]
 801c900:	2005      	movs	r0, #5
 801c902:	b007      	add	sp, #28
 801c904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c908:	3501      	adds	r5, #1
 801c90a:	2d08      	cmp	r5, #8
 801c90c:	f10b 0b01 	add.w	fp, fp, #1
 801c910:	dd06      	ble.n	801c920 <__hexnan+0x100>
 801c912:	4544      	cmp	r4, r8
 801c914:	d9c1      	bls.n	801c89a <__hexnan+0x7a>
 801c916:	2300      	movs	r3, #0
 801c918:	f844 3c04 	str.w	r3, [r4, #-4]
 801c91c:	2501      	movs	r5, #1
 801c91e:	3c04      	subs	r4, #4
 801c920:	6822      	ldr	r2, [r4, #0]
 801c922:	f000 000f 	and.w	r0, r0, #15
 801c926:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801c92a:	6020      	str	r0, [r4, #0]
 801c92c:	e7b5      	b.n	801c89a <__hexnan+0x7a>
 801c92e:	2508      	movs	r5, #8
 801c930:	e7b3      	b.n	801c89a <__hexnan+0x7a>
 801c932:	9b01      	ldr	r3, [sp, #4]
 801c934:	2b00      	cmp	r3, #0
 801c936:	d0dd      	beq.n	801c8f4 <__hexnan+0xd4>
 801c938:	f1c3 0320 	rsb	r3, r3, #32
 801c93c:	f04f 32ff 	mov.w	r2, #4294967295
 801c940:	40da      	lsrs	r2, r3
 801c942:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801c946:	4013      	ands	r3, r2
 801c948:	f846 3c04 	str.w	r3, [r6, #-4]
 801c94c:	e7d2      	b.n	801c8f4 <__hexnan+0xd4>
 801c94e:	3f04      	subs	r7, #4
 801c950:	e7d0      	b.n	801c8f4 <__hexnan+0xd4>
 801c952:	2004      	movs	r0, #4
 801c954:	e7d5      	b.n	801c902 <__hexnan+0xe2>

0801c956 <__ascii_mbtowc>:
 801c956:	b082      	sub	sp, #8
 801c958:	b901      	cbnz	r1, 801c95c <__ascii_mbtowc+0x6>
 801c95a:	a901      	add	r1, sp, #4
 801c95c:	b142      	cbz	r2, 801c970 <__ascii_mbtowc+0x1a>
 801c95e:	b14b      	cbz	r3, 801c974 <__ascii_mbtowc+0x1e>
 801c960:	7813      	ldrb	r3, [r2, #0]
 801c962:	600b      	str	r3, [r1, #0]
 801c964:	7812      	ldrb	r2, [r2, #0]
 801c966:	1e10      	subs	r0, r2, #0
 801c968:	bf18      	it	ne
 801c96a:	2001      	movne	r0, #1
 801c96c:	b002      	add	sp, #8
 801c96e:	4770      	bx	lr
 801c970:	4610      	mov	r0, r2
 801c972:	e7fb      	b.n	801c96c <__ascii_mbtowc+0x16>
 801c974:	f06f 0001 	mvn.w	r0, #1
 801c978:	e7f8      	b.n	801c96c <__ascii_mbtowc+0x16>
	...

0801c97c <_Balloc>:
 801c97c:	b570      	push	{r4, r5, r6, lr}
 801c97e:	69c6      	ldr	r6, [r0, #28]
 801c980:	4604      	mov	r4, r0
 801c982:	460d      	mov	r5, r1
 801c984:	b976      	cbnz	r6, 801c9a4 <_Balloc+0x28>
 801c986:	2010      	movs	r0, #16
 801c988:	f7fc fd4a 	bl	8019420 <malloc>
 801c98c:	4602      	mov	r2, r0
 801c98e:	61e0      	str	r0, [r4, #28]
 801c990:	b920      	cbnz	r0, 801c99c <_Balloc+0x20>
 801c992:	4b18      	ldr	r3, [pc, #96]	@ (801c9f4 <_Balloc+0x78>)
 801c994:	4818      	ldr	r0, [pc, #96]	@ (801c9f8 <_Balloc+0x7c>)
 801c996:	216b      	movs	r1, #107	@ 0x6b
 801c998:	f7fe fdf0 	bl	801b57c <__assert_func>
 801c99c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c9a0:	6006      	str	r6, [r0, #0]
 801c9a2:	60c6      	str	r6, [r0, #12]
 801c9a4:	69e6      	ldr	r6, [r4, #28]
 801c9a6:	68f3      	ldr	r3, [r6, #12]
 801c9a8:	b183      	cbz	r3, 801c9cc <_Balloc+0x50>
 801c9aa:	69e3      	ldr	r3, [r4, #28]
 801c9ac:	68db      	ldr	r3, [r3, #12]
 801c9ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c9b2:	b9b8      	cbnz	r0, 801c9e4 <_Balloc+0x68>
 801c9b4:	2101      	movs	r1, #1
 801c9b6:	fa01 f605 	lsl.w	r6, r1, r5
 801c9ba:	1d72      	adds	r2, r6, #5
 801c9bc:	0092      	lsls	r2, r2, #2
 801c9be:	4620      	mov	r0, r4
 801c9c0:	f001 f8a7 	bl	801db12 <_calloc_r>
 801c9c4:	b160      	cbz	r0, 801c9e0 <_Balloc+0x64>
 801c9c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c9ca:	e00e      	b.n	801c9ea <_Balloc+0x6e>
 801c9cc:	2221      	movs	r2, #33	@ 0x21
 801c9ce:	2104      	movs	r1, #4
 801c9d0:	4620      	mov	r0, r4
 801c9d2:	f001 f89e 	bl	801db12 <_calloc_r>
 801c9d6:	69e3      	ldr	r3, [r4, #28]
 801c9d8:	60f0      	str	r0, [r6, #12]
 801c9da:	68db      	ldr	r3, [r3, #12]
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	d1e4      	bne.n	801c9aa <_Balloc+0x2e>
 801c9e0:	2000      	movs	r0, #0
 801c9e2:	bd70      	pop	{r4, r5, r6, pc}
 801c9e4:	6802      	ldr	r2, [r0, #0]
 801c9e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c9ea:	2300      	movs	r3, #0
 801c9ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c9f0:	e7f7      	b.n	801c9e2 <_Balloc+0x66>
 801c9f2:	bf00      	nop
 801c9f4:	08021b4a 	.word	0x08021b4a
 801c9f8:	08021cd5 	.word	0x08021cd5

0801c9fc <_Bfree>:
 801c9fc:	b570      	push	{r4, r5, r6, lr}
 801c9fe:	69c6      	ldr	r6, [r0, #28]
 801ca00:	4605      	mov	r5, r0
 801ca02:	460c      	mov	r4, r1
 801ca04:	b976      	cbnz	r6, 801ca24 <_Bfree+0x28>
 801ca06:	2010      	movs	r0, #16
 801ca08:	f7fc fd0a 	bl	8019420 <malloc>
 801ca0c:	4602      	mov	r2, r0
 801ca0e:	61e8      	str	r0, [r5, #28]
 801ca10:	b920      	cbnz	r0, 801ca1c <_Bfree+0x20>
 801ca12:	4b09      	ldr	r3, [pc, #36]	@ (801ca38 <_Bfree+0x3c>)
 801ca14:	4809      	ldr	r0, [pc, #36]	@ (801ca3c <_Bfree+0x40>)
 801ca16:	218f      	movs	r1, #143	@ 0x8f
 801ca18:	f7fe fdb0 	bl	801b57c <__assert_func>
 801ca1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ca20:	6006      	str	r6, [r0, #0]
 801ca22:	60c6      	str	r6, [r0, #12]
 801ca24:	b13c      	cbz	r4, 801ca36 <_Bfree+0x3a>
 801ca26:	69eb      	ldr	r3, [r5, #28]
 801ca28:	6862      	ldr	r2, [r4, #4]
 801ca2a:	68db      	ldr	r3, [r3, #12]
 801ca2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ca30:	6021      	str	r1, [r4, #0]
 801ca32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ca36:	bd70      	pop	{r4, r5, r6, pc}
 801ca38:	08021b4a 	.word	0x08021b4a
 801ca3c:	08021cd5 	.word	0x08021cd5

0801ca40 <__multadd>:
 801ca40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca44:	690d      	ldr	r5, [r1, #16]
 801ca46:	4607      	mov	r7, r0
 801ca48:	460c      	mov	r4, r1
 801ca4a:	461e      	mov	r6, r3
 801ca4c:	f101 0c14 	add.w	ip, r1, #20
 801ca50:	2000      	movs	r0, #0
 801ca52:	f8dc 3000 	ldr.w	r3, [ip]
 801ca56:	b299      	uxth	r1, r3
 801ca58:	fb02 6101 	mla	r1, r2, r1, r6
 801ca5c:	0c1e      	lsrs	r6, r3, #16
 801ca5e:	0c0b      	lsrs	r3, r1, #16
 801ca60:	fb02 3306 	mla	r3, r2, r6, r3
 801ca64:	b289      	uxth	r1, r1
 801ca66:	3001      	adds	r0, #1
 801ca68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ca6c:	4285      	cmp	r5, r0
 801ca6e:	f84c 1b04 	str.w	r1, [ip], #4
 801ca72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ca76:	dcec      	bgt.n	801ca52 <__multadd+0x12>
 801ca78:	b30e      	cbz	r6, 801cabe <__multadd+0x7e>
 801ca7a:	68a3      	ldr	r3, [r4, #8]
 801ca7c:	42ab      	cmp	r3, r5
 801ca7e:	dc19      	bgt.n	801cab4 <__multadd+0x74>
 801ca80:	6861      	ldr	r1, [r4, #4]
 801ca82:	4638      	mov	r0, r7
 801ca84:	3101      	adds	r1, #1
 801ca86:	f7ff ff79 	bl	801c97c <_Balloc>
 801ca8a:	4680      	mov	r8, r0
 801ca8c:	b928      	cbnz	r0, 801ca9a <__multadd+0x5a>
 801ca8e:	4602      	mov	r2, r0
 801ca90:	4b0c      	ldr	r3, [pc, #48]	@ (801cac4 <__multadd+0x84>)
 801ca92:	480d      	ldr	r0, [pc, #52]	@ (801cac8 <__multadd+0x88>)
 801ca94:	21ba      	movs	r1, #186	@ 0xba
 801ca96:	f7fe fd71 	bl	801b57c <__assert_func>
 801ca9a:	6922      	ldr	r2, [r4, #16]
 801ca9c:	3202      	adds	r2, #2
 801ca9e:	f104 010c 	add.w	r1, r4, #12
 801caa2:	0092      	lsls	r2, r2, #2
 801caa4:	300c      	adds	r0, #12
 801caa6:	f7fe fd4c 	bl	801b542 <memcpy>
 801caaa:	4621      	mov	r1, r4
 801caac:	4638      	mov	r0, r7
 801caae:	f7ff ffa5 	bl	801c9fc <_Bfree>
 801cab2:	4644      	mov	r4, r8
 801cab4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cab8:	3501      	adds	r5, #1
 801caba:	615e      	str	r6, [r3, #20]
 801cabc:	6125      	str	r5, [r4, #16]
 801cabe:	4620      	mov	r0, r4
 801cac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cac4:	08021c64 	.word	0x08021c64
 801cac8:	08021cd5 	.word	0x08021cd5

0801cacc <__s2b>:
 801cacc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cad0:	460c      	mov	r4, r1
 801cad2:	4615      	mov	r5, r2
 801cad4:	461f      	mov	r7, r3
 801cad6:	2209      	movs	r2, #9
 801cad8:	3308      	adds	r3, #8
 801cada:	4606      	mov	r6, r0
 801cadc:	fb93 f3f2 	sdiv	r3, r3, r2
 801cae0:	2100      	movs	r1, #0
 801cae2:	2201      	movs	r2, #1
 801cae4:	429a      	cmp	r2, r3
 801cae6:	db09      	blt.n	801cafc <__s2b+0x30>
 801cae8:	4630      	mov	r0, r6
 801caea:	f7ff ff47 	bl	801c97c <_Balloc>
 801caee:	b940      	cbnz	r0, 801cb02 <__s2b+0x36>
 801caf0:	4602      	mov	r2, r0
 801caf2:	4b19      	ldr	r3, [pc, #100]	@ (801cb58 <__s2b+0x8c>)
 801caf4:	4819      	ldr	r0, [pc, #100]	@ (801cb5c <__s2b+0x90>)
 801caf6:	21d3      	movs	r1, #211	@ 0xd3
 801caf8:	f7fe fd40 	bl	801b57c <__assert_func>
 801cafc:	0052      	lsls	r2, r2, #1
 801cafe:	3101      	adds	r1, #1
 801cb00:	e7f0      	b.n	801cae4 <__s2b+0x18>
 801cb02:	9b08      	ldr	r3, [sp, #32]
 801cb04:	6143      	str	r3, [r0, #20]
 801cb06:	2d09      	cmp	r5, #9
 801cb08:	f04f 0301 	mov.w	r3, #1
 801cb0c:	6103      	str	r3, [r0, #16]
 801cb0e:	dd16      	ble.n	801cb3e <__s2b+0x72>
 801cb10:	f104 0909 	add.w	r9, r4, #9
 801cb14:	46c8      	mov	r8, r9
 801cb16:	442c      	add	r4, r5
 801cb18:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cb1c:	4601      	mov	r1, r0
 801cb1e:	3b30      	subs	r3, #48	@ 0x30
 801cb20:	220a      	movs	r2, #10
 801cb22:	4630      	mov	r0, r6
 801cb24:	f7ff ff8c 	bl	801ca40 <__multadd>
 801cb28:	45a0      	cmp	r8, r4
 801cb2a:	d1f5      	bne.n	801cb18 <__s2b+0x4c>
 801cb2c:	f1a5 0408 	sub.w	r4, r5, #8
 801cb30:	444c      	add	r4, r9
 801cb32:	1b2d      	subs	r5, r5, r4
 801cb34:	1963      	adds	r3, r4, r5
 801cb36:	42bb      	cmp	r3, r7
 801cb38:	db04      	blt.n	801cb44 <__s2b+0x78>
 801cb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cb3e:	340a      	adds	r4, #10
 801cb40:	2509      	movs	r5, #9
 801cb42:	e7f6      	b.n	801cb32 <__s2b+0x66>
 801cb44:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cb48:	4601      	mov	r1, r0
 801cb4a:	3b30      	subs	r3, #48	@ 0x30
 801cb4c:	220a      	movs	r2, #10
 801cb4e:	4630      	mov	r0, r6
 801cb50:	f7ff ff76 	bl	801ca40 <__multadd>
 801cb54:	e7ee      	b.n	801cb34 <__s2b+0x68>
 801cb56:	bf00      	nop
 801cb58:	08021c64 	.word	0x08021c64
 801cb5c:	08021cd5 	.word	0x08021cd5

0801cb60 <__hi0bits>:
 801cb60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801cb64:	4603      	mov	r3, r0
 801cb66:	bf36      	itet	cc
 801cb68:	0403      	lslcc	r3, r0, #16
 801cb6a:	2000      	movcs	r0, #0
 801cb6c:	2010      	movcc	r0, #16
 801cb6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801cb72:	bf3c      	itt	cc
 801cb74:	021b      	lslcc	r3, r3, #8
 801cb76:	3008      	addcc	r0, #8
 801cb78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801cb7c:	bf3c      	itt	cc
 801cb7e:	011b      	lslcc	r3, r3, #4
 801cb80:	3004      	addcc	r0, #4
 801cb82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cb86:	bf3c      	itt	cc
 801cb88:	009b      	lslcc	r3, r3, #2
 801cb8a:	3002      	addcc	r0, #2
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	db05      	blt.n	801cb9c <__hi0bits+0x3c>
 801cb90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801cb94:	f100 0001 	add.w	r0, r0, #1
 801cb98:	bf08      	it	eq
 801cb9a:	2020      	moveq	r0, #32
 801cb9c:	4770      	bx	lr

0801cb9e <__lo0bits>:
 801cb9e:	6803      	ldr	r3, [r0, #0]
 801cba0:	4602      	mov	r2, r0
 801cba2:	f013 0007 	ands.w	r0, r3, #7
 801cba6:	d00b      	beq.n	801cbc0 <__lo0bits+0x22>
 801cba8:	07d9      	lsls	r1, r3, #31
 801cbaa:	d421      	bmi.n	801cbf0 <__lo0bits+0x52>
 801cbac:	0798      	lsls	r0, r3, #30
 801cbae:	bf49      	itett	mi
 801cbb0:	085b      	lsrmi	r3, r3, #1
 801cbb2:	089b      	lsrpl	r3, r3, #2
 801cbb4:	2001      	movmi	r0, #1
 801cbb6:	6013      	strmi	r3, [r2, #0]
 801cbb8:	bf5c      	itt	pl
 801cbba:	6013      	strpl	r3, [r2, #0]
 801cbbc:	2002      	movpl	r0, #2
 801cbbe:	4770      	bx	lr
 801cbc0:	b299      	uxth	r1, r3
 801cbc2:	b909      	cbnz	r1, 801cbc8 <__lo0bits+0x2a>
 801cbc4:	0c1b      	lsrs	r3, r3, #16
 801cbc6:	2010      	movs	r0, #16
 801cbc8:	b2d9      	uxtb	r1, r3
 801cbca:	b909      	cbnz	r1, 801cbd0 <__lo0bits+0x32>
 801cbcc:	3008      	adds	r0, #8
 801cbce:	0a1b      	lsrs	r3, r3, #8
 801cbd0:	0719      	lsls	r1, r3, #28
 801cbd2:	bf04      	itt	eq
 801cbd4:	091b      	lsreq	r3, r3, #4
 801cbd6:	3004      	addeq	r0, #4
 801cbd8:	0799      	lsls	r1, r3, #30
 801cbda:	bf04      	itt	eq
 801cbdc:	089b      	lsreq	r3, r3, #2
 801cbde:	3002      	addeq	r0, #2
 801cbe0:	07d9      	lsls	r1, r3, #31
 801cbe2:	d403      	bmi.n	801cbec <__lo0bits+0x4e>
 801cbe4:	085b      	lsrs	r3, r3, #1
 801cbe6:	f100 0001 	add.w	r0, r0, #1
 801cbea:	d003      	beq.n	801cbf4 <__lo0bits+0x56>
 801cbec:	6013      	str	r3, [r2, #0]
 801cbee:	4770      	bx	lr
 801cbf0:	2000      	movs	r0, #0
 801cbf2:	4770      	bx	lr
 801cbf4:	2020      	movs	r0, #32
 801cbf6:	4770      	bx	lr

0801cbf8 <__i2b>:
 801cbf8:	b510      	push	{r4, lr}
 801cbfa:	460c      	mov	r4, r1
 801cbfc:	2101      	movs	r1, #1
 801cbfe:	f7ff febd 	bl	801c97c <_Balloc>
 801cc02:	4602      	mov	r2, r0
 801cc04:	b928      	cbnz	r0, 801cc12 <__i2b+0x1a>
 801cc06:	4b05      	ldr	r3, [pc, #20]	@ (801cc1c <__i2b+0x24>)
 801cc08:	4805      	ldr	r0, [pc, #20]	@ (801cc20 <__i2b+0x28>)
 801cc0a:	f240 1145 	movw	r1, #325	@ 0x145
 801cc0e:	f7fe fcb5 	bl	801b57c <__assert_func>
 801cc12:	2301      	movs	r3, #1
 801cc14:	6144      	str	r4, [r0, #20]
 801cc16:	6103      	str	r3, [r0, #16]
 801cc18:	bd10      	pop	{r4, pc}
 801cc1a:	bf00      	nop
 801cc1c:	08021c64 	.word	0x08021c64
 801cc20:	08021cd5 	.word	0x08021cd5

0801cc24 <__multiply>:
 801cc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc28:	4614      	mov	r4, r2
 801cc2a:	690a      	ldr	r2, [r1, #16]
 801cc2c:	6923      	ldr	r3, [r4, #16]
 801cc2e:	429a      	cmp	r2, r3
 801cc30:	bfa8      	it	ge
 801cc32:	4623      	movge	r3, r4
 801cc34:	460f      	mov	r7, r1
 801cc36:	bfa4      	itt	ge
 801cc38:	460c      	movge	r4, r1
 801cc3a:	461f      	movge	r7, r3
 801cc3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801cc40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801cc44:	68a3      	ldr	r3, [r4, #8]
 801cc46:	6861      	ldr	r1, [r4, #4]
 801cc48:	eb0a 0609 	add.w	r6, sl, r9
 801cc4c:	42b3      	cmp	r3, r6
 801cc4e:	b085      	sub	sp, #20
 801cc50:	bfb8      	it	lt
 801cc52:	3101      	addlt	r1, #1
 801cc54:	f7ff fe92 	bl	801c97c <_Balloc>
 801cc58:	b930      	cbnz	r0, 801cc68 <__multiply+0x44>
 801cc5a:	4602      	mov	r2, r0
 801cc5c:	4b44      	ldr	r3, [pc, #272]	@ (801cd70 <__multiply+0x14c>)
 801cc5e:	4845      	ldr	r0, [pc, #276]	@ (801cd74 <__multiply+0x150>)
 801cc60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801cc64:	f7fe fc8a 	bl	801b57c <__assert_func>
 801cc68:	f100 0514 	add.w	r5, r0, #20
 801cc6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cc70:	462b      	mov	r3, r5
 801cc72:	2200      	movs	r2, #0
 801cc74:	4543      	cmp	r3, r8
 801cc76:	d321      	bcc.n	801ccbc <__multiply+0x98>
 801cc78:	f107 0114 	add.w	r1, r7, #20
 801cc7c:	f104 0214 	add.w	r2, r4, #20
 801cc80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801cc84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801cc88:	9302      	str	r3, [sp, #8]
 801cc8a:	1b13      	subs	r3, r2, r4
 801cc8c:	3b15      	subs	r3, #21
 801cc8e:	f023 0303 	bic.w	r3, r3, #3
 801cc92:	3304      	adds	r3, #4
 801cc94:	f104 0715 	add.w	r7, r4, #21
 801cc98:	42ba      	cmp	r2, r7
 801cc9a:	bf38      	it	cc
 801cc9c:	2304      	movcc	r3, #4
 801cc9e:	9301      	str	r3, [sp, #4]
 801cca0:	9b02      	ldr	r3, [sp, #8]
 801cca2:	9103      	str	r1, [sp, #12]
 801cca4:	428b      	cmp	r3, r1
 801cca6:	d80c      	bhi.n	801ccc2 <__multiply+0x9e>
 801cca8:	2e00      	cmp	r6, #0
 801ccaa:	dd03      	ble.n	801ccb4 <__multiply+0x90>
 801ccac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	d05b      	beq.n	801cd6c <__multiply+0x148>
 801ccb4:	6106      	str	r6, [r0, #16]
 801ccb6:	b005      	add	sp, #20
 801ccb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccbc:	f843 2b04 	str.w	r2, [r3], #4
 801ccc0:	e7d8      	b.n	801cc74 <__multiply+0x50>
 801ccc2:	f8b1 a000 	ldrh.w	sl, [r1]
 801ccc6:	f1ba 0f00 	cmp.w	sl, #0
 801ccca:	d024      	beq.n	801cd16 <__multiply+0xf2>
 801cccc:	f104 0e14 	add.w	lr, r4, #20
 801ccd0:	46a9      	mov	r9, r5
 801ccd2:	f04f 0c00 	mov.w	ip, #0
 801ccd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ccda:	f8d9 3000 	ldr.w	r3, [r9]
 801ccde:	fa1f fb87 	uxth.w	fp, r7
 801cce2:	b29b      	uxth	r3, r3
 801cce4:	fb0a 330b 	mla	r3, sl, fp, r3
 801cce8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801ccec:	f8d9 7000 	ldr.w	r7, [r9]
 801ccf0:	4463      	add	r3, ip
 801ccf2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ccf6:	fb0a c70b 	mla	r7, sl, fp, ip
 801ccfa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801ccfe:	b29b      	uxth	r3, r3
 801cd00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801cd04:	4572      	cmp	r2, lr
 801cd06:	f849 3b04 	str.w	r3, [r9], #4
 801cd0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801cd0e:	d8e2      	bhi.n	801ccd6 <__multiply+0xb2>
 801cd10:	9b01      	ldr	r3, [sp, #4]
 801cd12:	f845 c003 	str.w	ip, [r5, r3]
 801cd16:	9b03      	ldr	r3, [sp, #12]
 801cd18:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801cd1c:	3104      	adds	r1, #4
 801cd1e:	f1b9 0f00 	cmp.w	r9, #0
 801cd22:	d021      	beq.n	801cd68 <__multiply+0x144>
 801cd24:	682b      	ldr	r3, [r5, #0]
 801cd26:	f104 0c14 	add.w	ip, r4, #20
 801cd2a:	46ae      	mov	lr, r5
 801cd2c:	f04f 0a00 	mov.w	sl, #0
 801cd30:	f8bc b000 	ldrh.w	fp, [ip]
 801cd34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801cd38:	fb09 770b 	mla	r7, r9, fp, r7
 801cd3c:	4457      	add	r7, sl
 801cd3e:	b29b      	uxth	r3, r3
 801cd40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801cd44:	f84e 3b04 	str.w	r3, [lr], #4
 801cd48:	f85c 3b04 	ldr.w	r3, [ip], #4
 801cd4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cd50:	f8be 3000 	ldrh.w	r3, [lr]
 801cd54:	fb09 330a 	mla	r3, r9, sl, r3
 801cd58:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801cd5c:	4562      	cmp	r2, ip
 801cd5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cd62:	d8e5      	bhi.n	801cd30 <__multiply+0x10c>
 801cd64:	9f01      	ldr	r7, [sp, #4]
 801cd66:	51eb      	str	r3, [r5, r7]
 801cd68:	3504      	adds	r5, #4
 801cd6a:	e799      	b.n	801cca0 <__multiply+0x7c>
 801cd6c:	3e01      	subs	r6, #1
 801cd6e:	e79b      	b.n	801cca8 <__multiply+0x84>
 801cd70:	08021c64 	.word	0x08021c64
 801cd74:	08021cd5 	.word	0x08021cd5

0801cd78 <__pow5mult>:
 801cd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cd7c:	4615      	mov	r5, r2
 801cd7e:	f012 0203 	ands.w	r2, r2, #3
 801cd82:	4607      	mov	r7, r0
 801cd84:	460e      	mov	r6, r1
 801cd86:	d007      	beq.n	801cd98 <__pow5mult+0x20>
 801cd88:	4c25      	ldr	r4, [pc, #148]	@ (801ce20 <__pow5mult+0xa8>)
 801cd8a:	3a01      	subs	r2, #1
 801cd8c:	2300      	movs	r3, #0
 801cd8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801cd92:	f7ff fe55 	bl	801ca40 <__multadd>
 801cd96:	4606      	mov	r6, r0
 801cd98:	10ad      	asrs	r5, r5, #2
 801cd9a:	d03d      	beq.n	801ce18 <__pow5mult+0xa0>
 801cd9c:	69fc      	ldr	r4, [r7, #28]
 801cd9e:	b97c      	cbnz	r4, 801cdc0 <__pow5mult+0x48>
 801cda0:	2010      	movs	r0, #16
 801cda2:	f7fc fb3d 	bl	8019420 <malloc>
 801cda6:	4602      	mov	r2, r0
 801cda8:	61f8      	str	r0, [r7, #28]
 801cdaa:	b928      	cbnz	r0, 801cdb8 <__pow5mult+0x40>
 801cdac:	4b1d      	ldr	r3, [pc, #116]	@ (801ce24 <__pow5mult+0xac>)
 801cdae:	481e      	ldr	r0, [pc, #120]	@ (801ce28 <__pow5mult+0xb0>)
 801cdb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801cdb4:	f7fe fbe2 	bl	801b57c <__assert_func>
 801cdb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cdbc:	6004      	str	r4, [r0, #0]
 801cdbe:	60c4      	str	r4, [r0, #12]
 801cdc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801cdc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cdc8:	b94c      	cbnz	r4, 801cdde <__pow5mult+0x66>
 801cdca:	f240 2171 	movw	r1, #625	@ 0x271
 801cdce:	4638      	mov	r0, r7
 801cdd0:	f7ff ff12 	bl	801cbf8 <__i2b>
 801cdd4:	2300      	movs	r3, #0
 801cdd6:	f8c8 0008 	str.w	r0, [r8, #8]
 801cdda:	4604      	mov	r4, r0
 801cddc:	6003      	str	r3, [r0, #0]
 801cdde:	f04f 0900 	mov.w	r9, #0
 801cde2:	07eb      	lsls	r3, r5, #31
 801cde4:	d50a      	bpl.n	801cdfc <__pow5mult+0x84>
 801cde6:	4631      	mov	r1, r6
 801cde8:	4622      	mov	r2, r4
 801cdea:	4638      	mov	r0, r7
 801cdec:	f7ff ff1a 	bl	801cc24 <__multiply>
 801cdf0:	4631      	mov	r1, r6
 801cdf2:	4680      	mov	r8, r0
 801cdf4:	4638      	mov	r0, r7
 801cdf6:	f7ff fe01 	bl	801c9fc <_Bfree>
 801cdfa:	4646      	mov	r6, r8
 801cdfc:	106d      	asrs	r5, r5, #1
 801cdfe:	d00b      	beq.n	801ce18 <__pow5mult+0xa0>
 801ce00:	6820      	ldr	r0, [r4, #0]
 801ce02:	b938      	cbnz	r0, 801ce14 <__pow5mult+0x9c>
 801ce04:	4622      	mov	r2, r4
 801ce06:	4621      	mov	r1, r4
 801ce08:	4638      	mov	r0, r7
 801ce0a:	f7ff ff0b 	bl	801cc24 <__multiply>
 801ce0e:	6020      	str	r0, [r4, #0]
 801ce10:	f8c0 9000 	str.w	r9, [r0]
 801ce14:	4604      	mov	r4, r0
 801ce16:	e7e4      	b.n	801cde2 <__pow5mult+0x6a>
 801ce18:	4630      	mov	r0, r6
 801ce1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ce1e:	bf00      	nop
 801ce20:	08021d30 	.word	0x08021d30
 801ce24:	08021b4a 	.word	0x08021b4a
 801ce28:	08021cd5 	.word	0x08021cd5

0801ce2c <__lshift>:
 801ce2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce30:	460c      	mov	r4, r1
 801ce32:	6849      	ldr	r1, [r1, #4]
 801ce34:	6923      	ldr	r3, [r4, #16]
 801ce36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ce3a:	68a3      	ldr	r3, [r4, #8]
 801ce3c:	4607      	mov	r7, r0
 801ce3e:	4691      	mov	r9, r2
 801ce40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ce44:	f108 0601 	add.w	r6, r8, #1
 801ce48:	42b3      	cmp	r3, r6
 801ce4a:	db0b      	blt.n	801ce64 <__lshift+0x38>
 801ce4c:	4638      	mov	r0, r7
 801ce4e:	f7ff fd95 	bl	801c97c <_Balloc>
 801ce52:	4605      	mov	r5, r0
 801ce54:	b948      	cbnz	r0, 801ce6a <__lshift+0x3e>
 801ce56:	4602      	mov	r2, r0
 801ce58:	4b28      	ldr	r3, [pc, #160]	@ (801cefc <__lshift+0xd0>)
 801ce5a:	4829      	ldr	r0, [pc, #164]	@ (801cf00 <__lshift+0xd4>)
 801ce5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801ce60:	f7fe fb8c 	bl	801b57c <__assert_func>
 801ce64:	3101      	adds	r1, #1
 801ce66:	005b      	lsls	r3, r3, #1
 801ce68:	e7ee      	b.n	801ce48 <__lshift+0x1c>
 801ce6a:	2300      	movs	r3, #0
 801ce6c:	f100 0114 	add.w	r1, r0, #20
 801ce70:	f100 0210 	add.w	r2, r0, #16
 801ce74:	4618      	mov	r0, r3
 801ce76:	4553      	cmp	r3, sl
 801ce78:	db33      	blt.n	801cee2 <__lshift+0xb6>
 801ce7a:	6920      	ldr	r0, [r4, #16]
 801ce7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ce80:	f104 0314 	add.w	r3, r4, #20
 801ce84:	f019 091f 	ands.w	r9, r9, #31
 801ce88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ce8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ce90:	d02b      	beq.n	801ceea <__lshift+0xbe>
 801ce92:	f1c9 0e20 	rsb	lr, r9, #32
 801ce96:	468a      	mov	sl, r1
 801ce98:	2200      	movs	r2, #0
 801ce9a:	6818      	ldr	r0, [r3, #0]
 801ce9c:	fa00 f009 	lsl.w	r0, r0, r9
 801cea0:	4310      	orrs	r0, r2
 801cea2:	f84a 0b04 	str.w	r0, [sl], #4
 801cea6:	f853 2b04 	ldr.w	r2, [r3], #4
 801ceaa:	459c      	cmp	ip, r3
 801ceac:	fa22 f20e 	lsr.w	r2, r2, lr
 801ceb0:	d8f3      	bhi.n	801ce9a <__lshift+0x6e>
 801ceb2:	ebac 0304 	sub.w	r3, ip, r4
 801ceb6:	3b15      	subs	r3, #21
 801ceb8:	f023 0303 	bic.w	r3, r3, #3
 801cebc:	3304      	adds	r3, #4
 801cebe:	f104 0015 	add.w	r0, r4, #21
 801cec2:	4584      	cmp	ip, r0
 801cec4:	bf38      	it	cc
 801cec6:	2304      	movcc	r3, #4
 801cec8:	50ca      	str	r2, [r1, r3]
 801ceca:	b10a      	cbz	r2, 801ced0 <__lshift+0xa4>
 801cecc:	f108 0602 	add.w	r6, r8, #2
 801ced0:	3e01      	subs	r6, #1
 801ced2:	4638      	mov	r0, r7
 801ced4:	612e      	str	r6, [r5, #16]
 801ced6:	4621      	mov	r1, r4
 801ced8:	f7ff fd90 	bl	801c9fc <_Bfree>
 801cedc:	4628      	mov	r0, r5
 801cede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cee2:	f842 0f04 	str.w	r0, [r2, #4]!
 801cee6:	3301      	adds	r3, #1
 801cee8:	e7c5      	b.n	801ce76 <__lshift+0x4a>
 801ceea:	3904      	subs	r1, #4
 801ceec:	f853 2b04 	ldr.w	r2, [r3], #4
 801cef0:	f841 2f04 	str.w	r2, [r1, #4]!
 801cef4:	459c      	cmp	ip, r3
 801cef6:	d8f9      	bhi.n	801ceec <__lshift+0xc0>
 801cef8:	e7ea      	b.n	801ced0 <__lshift+0xa4>
 801cefa:	bf00      	nop
 801cefc:	08021c64 	.word	0x08021c64
 801cf00:	08021cd5 	.word	0x08021cd5

0801cf04 <__mcmp>:
 801cf04:	690a      	ldr	r2, [r1, #16]
 801cf06:	4603      	mov	r3, r0
 801cf08:	6900      	ldr	r0, [r0, #16]
 801cf0a:	1a80      	subs	r0, r0, r2
 801cf0c:	b530      	push	{r4, r5, lr}
 801cf0e:	d10e      	bne.n	801cf2e <__mcmp+0x2a>
 801cf10:	3314      	adds	r3, #20
 801cf12:	3114      	adds	r1, #20
 801cf14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801cf18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801cf1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801cf20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801cf24:	4295      	cmp	r5, r2
 801cf26:	d003      	beq.n	801cf30 <__mcmp+0x2c>
 801cf28:	d205      	bcs.n	801cf36 <__mcmp+0x32>
 801cf2a:	f04f 30ff 	mov.w	r0, #4294967295
 801cf2e:	bd30      	pop	{r4, r5, pc}
 801cf30:	42a3      	cmp	r3, r4
 801cf32:	d3f3      	bcc.n	801cf1c <__mcmp+0x18>
 801cf34:	e7fb      	b.n	801cf2e <__mcmp+0x2a>
 801cf36:	2001      	movs	r0, #1
 801cf38:	e7f9      	b.n	801cf2e <__mcmp+0x2a>
	...

0801cf3c <__mdiff>:
 801cf3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf40:	4689      	mov	r9, r1
 801cf42:	4606      	mov	r6, r0
 801cf44:	4611      	mov	r1, r2
 801cf46:	4648      	mov	r0, r9
 801cf48:	4614      	mov	r4, r2
 801cf4a:	f7ff ffdb 	bl	801cf04 <__mcmp>
 801cf4e:	1e05      	subs	r5, r0, #0
 801cf50:	d112      	bne.n	801cf78 <__mdiff+0x3c>
 801cf52:	4629      	mov	r1, r5
 801cf54:	4630      	mov	r0, r6
 801cf56:	f7ff fd11 	bl	801c97c <_Balloc>
 801cf5a:	4602      	mov	r2, r0
 801cf5c:	b928      	cbnz	r0, 801cf6a <__mdiff+0x2e>
 801cf5e:	4b3f      	ldr	r3, [pc, #252]	@ (801d05c <__mdiff+0x120>)
 801cf60:	f240 2137 	movw	r1, #567	@ 0x237
 801cf64:	483e      	ldr	r0, [pc, #248]	@ (801d060 <__mdiff+0x124>)
 801cf66:	f7fe fb09 	bl	801b57c <__assert_func>
 801cf6a:	2301      	movs	r3, #1
 801cf6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cf70:	4610      	mov	r0, r2
 801cf72:	b003      	add	sp, #12
 801cf74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf78:	bfbc      	itt	lt
 801cf7a:	464b      	movlt	r3, r9
 801cf7c:	46a1      	movlt	r9, r4
 801cf7e:	4630      	mov	r0, r6
 801cf80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801cf84:	bfba      	itte	lt
 801cf86:	461c      	movlt	r4, r3
 801cf88:	2501      	movlt	r5, #1
 801cf8a:	2500      	movge	r5, #0
 801cf8c:	f7ff fcf6 	bl	801c97c <_Balloc>
 801cf90:	4602      	mov	r2, r0
 801cf92:	b918      	cbnz	r0, 801cf9c <__mdiff+0x60>
 801cf94:	4b31      	ldr	r3, [pc, #196]	@ (801d05c <__mdiff+0x120>)
 801cf96:	f240 2145 	movw	r1, #581	@ 0x245
 801cf9a:	e7e3      	b.n	801cf64 <__mdiff+0x28>
 801cf9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801cfa0:	6926      	ldr	r6, [r4, #16]
 801cfa2:	60c5      	str	r5, [r0, #12]
 801cfa4:	f109 0310 	add.w	r3, r9, #16
 801cfa8:	f109 0514 	add.w	r5, r9, #20
 801cfac:	f104 0e14 	add.w	lr, r4, #20
 801cfb0:	f100 0b14 	add.w	fp, r0, #20
 801cfb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801cfb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801cfbc:	9301      	str	r3, [sp, #4]
 801cfbe:	46d9      	mov	r9, fp
 801cfc0:	f04f 0c00 	mov.w	ip, #0
 801cfc4:	9b01      	ldr	r3, [sp, #4]
 801cfc6:	f85e 0b04 	ldr.w	r0, [lr], #4
 801cfca:	f853 af04 	ldr.w	sl, [r3, #4]!
 801cfce:	9301      	str	r3, [sp, #4]
 801cfd0:	fa1f f38a 	uxth.w	r3, sl
 801cfd4:	4619      	mov	r1, r3
 801cfd6:	b283      	uxth	r3, r0
 801cfd8:	1acb      	subs	r3, r1, r3
 801cfda:	0c00      	lsrs	r0, r0, #16
 801cfdc:	4463      	add	r3, ip
 801cfde:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801cfe2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801cfe6:	b29b      	uxth	r3, r3
 801cfe8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801cfec:	4576      	cmp	r6, lr
 801cfee:	f849 3b04 	str.w	r3, [r9], #4
 801cff2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801cff6:	d8e5      	bhi.n	801cfc4 <__mdiff+0x88>
 801cff8:	1b33      	subs	r3, r6, r4
 801cffa:	3b15      	subs	r3, #21
 801cffc:	f023 0303 	bic.w	r3, r3, #3
 801d000:	3415      	adds	r4, #21
 801d002:	3304      	adds	r3, #4
 801d004:	42a6      	cmp	r6, r4
 801d006:	bf38      	it	cc
 801d008:	2304      	movcc	r3, #4
 801d00a:	441d      	add	r5, r3
 801d00c:	445b      	add	r3, fp
 801d00e:	461e      	mov	r6, r3
 801d010:	462c      	mov	r4, r5
 801d012:	4544      	cmp	r4, r8
 801d014:	d30e      	bcc.n	801d034 <__mdiff+0xf8>
 801d016:	f108 0103 	add.w	r1, r8, #3
 801d01a:	1b49      	subs	r1, r1, r5
 801d01c:	f021 0103 	bic.w	r1, r1, #3
 801d020:	3d03      	subs	r5, #3
 801d022:	45a8      	cmp	r8, r5
 801d024:	bf38      	it	cc
 801d026:	2100      	movcc	r1, #0
 801d028:	440b      	add	r3, r1
 801d02a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d02e:	b191      	cbz	r1, 801d056 <__mdiff+0x11a>
 801d030:	6117      	str	r7, [r2, #16]
 801d032:	e79d      	b.n	801cf70 <__mdiff+0x34>
 801d034:	f854 1b04 	ldr.w	r1, [r4], #4
 801d038:	46e6      	mov	lr, ip
 801d03a:	0c08      	lsrs	r0, r1, #16
 801d03c:	fa1c fc81 	uxtah	ip, ip, r1
 801d040:	4471      	add	r1, lr
 801d042:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801d046:	b289      	uxth	r1, r1
 801d048:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d04c:	f846 1b04 	str.w	r1, [r6], #4
 801d050:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d054:	e7dd      	b.n	801d012 <__mdiff+0xd6>
 801d056:	3f01      	subs	r7, #1
 801d058:	e7e7      	b.n	801d02a <__mdiff+0xee>
 801d05a:	bf00      	nop
 801d05c:	08021c64 	.word	0x08021c64
 801d060:	08021cd5 	.word	0x08021cd5

0801d064 <__ulp>:
 801d064:	b082      	sub	sp, #8
 801d066:	ed8d 0b00 	vstr	d0, [sp]
 801d06a:	9a01      	ldr	r2, [sp, #4]
 801d06c:	4b0f      	ldr	r3, [pc, #60]	@ (801d0ac <__ulp+0x48>)
 801d06e:	4013      	ands	r3, r2
 801d070:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801d074:	2b00      	cmp	r3, #0
 801d076:	dc08      	bgt.n	801d08a <__ulp+0x26>
 801d078:	425b      	negs	r3, r3
 801d07a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801d07e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d082:	da04      	bge.n	801d08e <__ulp+0x2a>
 801d084:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801d088:	4113      	asrs	r3, r2
 801d08a:	2200      	movs	r2, #0
 801d08c:	e008      	b.n	801d0a0 <__ulp+0x3c>
 801d08e:	f1a2 0314 	sub.w	r3, r2, #20
 801d092:	2b1e      	cmp	r3, #30
 801d094:	bfda      	itte	le
 801d096:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801d09a:	40da      	lsrle	r2, r3
 801d09c:	2201      	movgt	r2, #1
 801d09e:	2300      	movs	r3, #0
 801d0a0:	4619      	mov	r1, r3
 801d0a2:	4610      	mov	r0, r2
 801d0a4:	ec41 0b10 	vmov	d0, r0, r1
 801d0a8:	b002      	add	sp, #8
 801d0aa:	4770      	bx	lr
 801d0ac:	7ff00000 	.word	0x7ff00000

0801d0b0 <__b2d>:
 801d0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0b4:	6906      	ldr	r6, [r0, #16]
 801d0b6:	f100 0814 	add.w	r8, r0, #20
 801d0ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d0be:	1f37      	subs	r7, r6, #4
 801d0c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d0c4:	4610      	mov	r0, r2
 801d0c6:	f7ff fd4b 	bl	801cb60 <__hi0bits>
 801d0ca:	f1c0 0320 	rsb	r3, r0, #32
 801d0ce:	280a      	cmp	r0, #10
 801d0d0:	600b      	str	r3, [r1, #0]
 801d0d2:	491b      	ldr	r1, [pc, #108]	@ (801d140 <__b2d+0x90>)
 801d0d4:	dc15      	bgt.n	801d102 <__b2d+0x52>
 801d0d6:	f1c0 0c0b 	rsb	ip, r0, #11
 801d0da:	fa22 f30c 	lsr.w	r3, r2, ip
 801d0de:	45b8      	cmp	r8, r7
 801d0e0:	ea43 0501 	orr.w	r5, r3, r1
 801d0e4:	bf34      	ite	cc
 801d0e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d0ea:	2300      	movcs	r3, #0
 801d0ec:	3015      	adds	r0, #21
 801d0ee:	fa02 f000 	lsl.w	r0, r2, r0
 801d0f2:	fa23 f30c 	lsr.w	r3, r3, ip
 801d0f6:	4303      	orrs	r3, r0
 801d0f8:	461c      	mov	r4, r3
 801d0fa:	ec45 4b10 	vmov	d0, r4, r5
 801d0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d102:	45b8      	cmp	r8, r7
 801d104:	bf3a      	itte	cc
 801d106:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d10a:	f1a6 0708 	subcc.w	r7, r6, #8
 801d10e:	2300      	movcs	r3, #0
 801d110:	380b      	subs	r0, #11
 801d112:	d012      	beq.n	801d13a <__b2d+0x8a>
 801d114:	f1c0 0120 	rsb	r1, r0, #32
 801d118:	fa23 f401 	lsr.w	r4, r3, r1
 801d11c:	4082      	lsls	r2, r0
 801d11e:	4322      	orrs	r2, r4
 801d120:	4547      	cmp	r7, r8
 801d122:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801d126:	bf8c      	ite	hi
 801d128:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d12c:	2200      	movls	r2, #0
 801d12e:	4083      	lsls	r3, r0
 801d130:	40ca      	lsrs	r2, r1
 801d132:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801d136:	4313      	orrs	r3, r2
 801d138:	e7de      	b.n	801d0f8 <__b2d+0x48>
 801d13a:	ea42 0501 	orr.w	r5, r2, r1
 801d13e:	e7db      	b.n	801d0f8 <__b2d+0x48>
 801d140:	3ff00000 	.word	0x3ff00000

0801d144 <__d2b>:
 801d144:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d148:	460f      	mov	r7, r1
 801d14a:	2101      	movs	r1, #1
 801d14c:	ec59 8b10 	vmov	r8, r9, d0
 801d150:	4616      	mov	r6, r2
 801d152:	f7ff fc13 	bl	801c97c <_Balloc>
 801d156:	4604      	mov	r4, r0
 801d158:	b930      	cbnz	r0, 801d168 <__d2b+0x24>
 801d15a:	4602      	mov	r2, r0
 801d15c:	4b23      	ldr	r3, [pc, #140]	@ (801d1ec <__d2b+0xa8>)
 801d15e:	4824      	ldr	r0, [pc, #144]	@ (801d1f0 <__d2b+0xac>)
 801d160:	f240 310f 	movw	r1, #783	@ 0x30f
 801d164:	f7fe fa0a 	bl	801b57c <__assert_func>
 801d168:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d16c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d170:	b10d      	cbz	r5, 801d176 <__d2b+0x32>
 801d172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d176:	9301      	str	r3, [sp, #4]
 801d178:	f1b8 0300 	subs.w	r3, r8, #0
 801d17c:	d023      	beq.n	801d1c6 <__d2b+0x82>
 801d17e:	4668      	mov	r0, sp
 801d180:	9300      	str	r3, [sp, #0]
 801d182:	f7ff fd0c 	bl	801cb9e <__lo0bits>
 801d186:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d18a:	b1d0      	cbz	r0, 801d1c2 <__d2b+0x7e>
 801d18c:	f1c0 0320 	rsb	r3, r0, #32
 801d190:	fa02 f303 	lsl.w	r3, r2, r3
 801d194:	430b      	orrs	r3, r1
 801d196:	40c2      	lsrs	r2, r0
 801d198:	6163      	str	r3, [r4, #20]
 801d19a:	9201      	str	r2, [sp, #4]
 801d19c:	9b01      	ldr	r3, [sp, #4]
 801d19e:	61a3      	str	r3, [r4, #24]
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	bf0c      	ite	eq
 801d1a4:	2201      	moveq	r2, #1
 801d1a6:	2202      	movne	r2, #2
 801d1a8:	6122      	str	r2, [r4, #16]
 801d1aa:	b1a5      	cbz	r5, 801d1d6 <__d2b+0x92>
 801d1ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801d1b0:	4405      	add	r5, r0
 801d1b2:	603d      	str	r5, [r7, #0]
 801d1b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801d1b8:	6030      	str	r0, [r6, #0]
 801d1ba:	4620      	mov	r0, r4
 801d1bc:	b003      	add	sp, #12
 801d1be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d1c2:	6161      	str	r1, [r4, #20]
 801d1c4:	e7ea      	b.n	801d19c <__d2b+0x58>
 801d1c6:	a801      	add	r0, sp, #4
 801d1c8:	f7ff fce9 	bl	801cb9e <__lo0bits>
 801d1cc:	9b01      	ldr	r3, [sp, #4]
 801d1ce:	6163      	str	r3, [r4, #20]
 801d1d0:	3020      	adds	r0, #32
 801d1d2:	2201      	movs	r2, #1
 801d1d4:	e7e8      	b.n	801d1a8 <__d2b+0x64>
 801d1d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d1da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801d1de:	6038      	str	r0, [r7, #0]
 801d1e0:	6918      	ldr	r0, [r3, #16]
 801d1e2:	f7ff fcbd 	bl	801cb60 <__hi0bits>
 801d1e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d1ea:	e7e5      	b.n	801d1b8 <__d2b+0x74>
 801d1ec:	08021c64 	.word	0x08021c64
 801d1f0:	08021cd5 	.word	0x08021cd5

0801d1f4 <__ratio>:
 801d1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1f8:	b085      	sub	sp, #20
 801d1fa:	e9cd 1000 	strd	r1, r0, [sp]
 801d1fe:	a902      	add	r1, sp, #8
 801d200:	f7ff ff56 	bl	801d0b0 <__b2d>
 801d204:	9800      	ldr	r0, [sp, #0]
 801d206:	a903      	add	r1, sp, #12
 801d208:	ec55 4b10 	vmov	r4, r5, d0
 801d20c:	f7ff ff50 	bl	801d0b0 <__b2d>
 801d210:	9b01      	ldr	r3, [sp, #4]
 801d212:	6919      	ldr	r1, [r3, #16]
 801d214:	9b00      	ldr	r3, [sp, #0]
 801d216:	691b      	ldr	r3, [r3, #16]
 801d218:	1ac9      	subs	r1, r1, r3
 801d21a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801d21e:	1a9b      	subs	r3, r3, r2
 801d220:	ec5b ab10 	vmov	sl, fp, d0
 801d224:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801d228:	2b00      	cmp	r3, #0
 801d22a:	bfce      	itee	gt
 801d22c:	462a      	movgt	r2, r5
 801d22e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d232:	465a      	movle	r2, fp
 801d234:	462f      	mov	r7, r5
 801d236:	46d9      	mov	r9, fp
 801d238:	bfcc      	ite	gt
 801d23a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d23e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801d242:	464b      	mov	r3, r9
 801d244:	4652      	mov	r2, sl
 801d246:	4620      	mov	r0, r4
 801d248:	4639      	mov	r1, r7
 801d24a:	f7e3 fad7 	bl	80007fc <__aeabi_ddiv>
 801d24e:	ec41 0b10 	vmov	d0, r0, r1
 801d252:	b005      	add	sp, #20
 801d254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d258 <__copybits>:
 801d258:	3901      	subs	r1, #1
 801d25a:	b570      	push	{r4, r5, r6, lr}
 801d25c:	1149      	asrs	r1, r1, #5
 801d25e:	6914      	ldr	r4, [r2, #16]
 801d260:	3101      	adds	r1, #1
 801d262:	f102 0314 	add.w	r3, r2, #20
 801d266:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d26a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d26e:	1f05      	subs	r5, r0, #4
 801d270:	42a3      	cmp	r3, r4
 801d272:	d30c      	bcc.n	801d28e <__copybits+0x36>
 801d274:	1aa3      	subs	r3, r4, r2
 801d276:	3b11      	subs	r3, #17
 801d278:	f023 0303 	bic.w	r3, r3, #3
 801d27c:	3211      	adds	r2, #17
 801d27e:	42a2      	cmp	r2, r4
 801d280:	bf88      	it	hi
 801d282:	2300      	movhi	r3, #0
 801d284:	4418      	add	r0, r3
 801d286:	2300      	movs	r3, #0
 801d288:	4288      	cmp	r0, r1
 801d28a:	d305      	bcc.n	801d298 <__copybits+0x40>
 801d28c:	bd70      	pop	{r4, r5, r6, pc}
 801d28e:	f853 6b04 	ldr.w	r6, [r3], #4
 801d292:	f845 6f04 	str.w	r6, [r5, #4]!
 801d296:	e7eb      	b.n	801d270 <__copybits+0x18>
 801d298:	f840 3b04 	str.w	r3, [r0], #4
 801d29c:	e7f4      	b.n	801d288 <__copybits+0x30>

0801d29e <__any_on>:
 801d29e:	f100 0214 	add.w	r2, r0, #20
 801d2a2:	6900      	ldr	r0, [r0, #16]
 801d2a4:	114b      	asrs	r3, r1, #5
 801d2a6:	4298      	cmp	r0, r3
 801d2a8:	b510      	push	{r4, lr}
 801d2aa:	db11      	blt.n	801d2d0 <__any_on+0x32>
 801d2ac:	dd0a      	ble.n	801d2c4 <__any_on+0x26>
 801d2ae:	f011 011f 	ands.w	r1, r1, #31
 801d2b2:	d007      	beq.n	801d2c4 <__any_on+0x26>
 801d2b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d2b8:	fa24 f001 	lsr.w	r0, r4, r1
 801d2bc:	fa00 f101 	lsl.w	r1, r0, r1
 801d2c0:	428c      	cmp	r4, r1
 801d2c2:	d10b      	bne.n	801d2dc <__any_on+0x3e>
 801d2c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d2c8:	4293      	cmp	r3, r2
 801d2ca:	d803      	bhi.n	801d2d4 <__any_on+0x36>
 801d2cc:	2000      	movs	r0, #0
 801d2ce:	bd10      	pop	{r4, pc}
 801d2d0:	4603      	mov	r3, r0
 801d2d2:	e7f7      	b.n	801d2c4 <__any_on+0x26>
 801d2d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d2d8:	2900      	cmp	r1, #0
 801d2da:	d0f5      	beq.n	801d2c8 <__any_on+0x2a>
 801d2dc:	2001      	movs	r0, #1
 801d2de:	e7f6      	b.n	801d2ce <__any_on+0x30>

0801d2e0 <__ascii_wctomb>:
 801d2e0:	4603      	mov	r3, r0
 801d2e2:	4608      	mov	r0, r1
 801d2e4:	b141      	cbz	r1, 801d2f8 <__ascii_wctomb+0x18>
 801d2e6:	2aff      	cmp	r2, #255	@ 0xff
 801d2e8:	d904      	bls.n	801d2f4 <__ascii_wctomb+0x14>
 801d2ea:	228a      	movs	r2, #138	@ 0x8a
 801d2ec:	601a      	str	r2, [r3, #0]
 801d2ee:	f04f 30ff 	mov.w	r0, #4294967295
 801d2f2:	4770      	bx	lr
 801d2f4:	700a      	strb	r2, [r1, #0]
 801d2f6:	2001      	movs	r0, #1
 801d2f8:	4770      	bx	lr

0801d2fa <__ssputs_r>:
 801d2fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d2fe:	688e      	ldr	r6, [r1, #8]
 801d300:	461f      	mov	r7, r3
 801d302:	42be      	cmp	r6, r7
 801d304:	680b      	ldr	r3, [r1, #0]
 801d306:	4682      	mov	sl, r0
 801d308:	460c      	mov	r4, r1
 801d30a:	4690      	mov	r8, r2
 801d30c:	d82d      	bhi.n	801d36a <__ssputs_r+0x70>
 801d30e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d312:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d316:	d026      	beq.n	801d366 <__ssputs_r+0x6c>
 801d318:	6965      	ldr	r5, [r4, #20]
 801d31a:	6909      	ldr	r1, [r1, #16]
 801d31c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d320:	eba3 0901 	sub.w	r9, r3, r1
 801d324:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d328:	1c7b      	adds	r3, r7, #1
 801d32a:	444b      	add	r3, r9
 801d32c:	106d      	asrs	r5, r5, #1
 801d32e:	429d      	cmp	r5, r3
 801d330:	bf38      	it	cc
 801d332:	461d      	movcc	r5, r3
 801d334:	0553      	lsls	r3, r2, #21
 801d336:	d527      	bpl.n	801d388 <__ssputs_r+0x8e>
 801d338:	4629      	mov	r1, r5
 801d33a:	f7fc f8a3 	bl	8019484 <_malloc_r>
 801d33e:	4606      	mov	r6, r0
 801d340:	b360      	cbz	r0, 801d39c <__ssputs_r+0xa2>
 801d342:	6921      	ldr	r1, [r4, #16]
 801d344:	464a      	mov	r2, r9
 801d346:	f7fe f8fc 	bl	801b542 <memcpy>
 801d34a:	89a3      	ldrh	r3, [r4, #12]
 801d34c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d354:	81a3      	strh	r3, [r4, #12]
 801d356:	6126      	str	r6, [r4, #16]
 801d358:	6165      	str	r5, [r4, #20]
 801d35a:	444e      	add	r6, r9
 801d35c:	eba5 0509 	sub.w	r5, r5, r9
 801d360:	6026      	str	r6, [r4, #0]
 801d362:	60a5      	str	r5, [r4, #8]
 801d364:	463e      	mov	r6, r7
 801d366:	42be      	cmp	r6, r7
 801d368:	d900      	bls.n	801d36c <__ssputs_r+0x72>
 801d36a:	463e      	mov	r6, r7
 801d36c:	6820      	ldr	r0, [r4, #0]
 801d36e:	4632      	mov	r2, r6
 801d370:	4641      	mov	r1, r8
 801d372:	f000 fbad 	bl	801dad0 <memmove>
 801d376:	68a3      	ldr	r3, [r4, #8]
 801d378:	1b9b      	subs	r3, r3, r6
 801d37a:	60a3      	str	r3, [r4, #8]
 801d37c:	6823      	ldr	r3, [r4, #0]
 801d37e:	4433      	add	r3, r6
 801d380:	6023      	str	r3, [r4, #0]
 801d382:	2000      	movs	r0, #0
 801d384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d388:	462a      	mov	r2, r5
 801d38a:	f000 fbd6 	bl	801db3a <_realloc_r>
 801d38e:	4606      	mov	r6, r0
 801d390:	2800      	cmp	r0, #0
 801d392:	d1e0      	bne.n	801d356 <__ssputs_r+0x5c>
 801d394:	6921      	ldr	r1, [r4, #16]
 801d396:	4650      	mov	r0, sl
 801d398:	f7fe ff5a 	bl	801c250 <_free_r>
 801d39c:	230c      	movs	r3, #12
 801d39e:	f8ca 3000 	str.w	r3, [sl]
 801d3a2:	89a3      	ldrh	r3, [r4, #12]
 801d3a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d3a8:	81a3      	strh	r3, [r4, #12]
 801d3aa:	f04f 30ff 	mov.w	r0, #4294967295
 801d3ae:	e7e9      	b.n	801d384 <__ssputs_r+0x8a>

0801d3b0 <_svfiprintf_r>:
 801d3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3b4:	4698      	mov	r8, r3
 801d3b6:	898b      	ldrh	r3, [r1, #12]
 801d3b8:	061b      	lsls	r3, r3, #24
 801d3ba:	b09d      	sub	sp, #116	@ 0x74
 801d3bc:	4607      	mov	r7, r0
 801d3be:	460d      	mov	r5, r1
 801d3c0:	4614      	mov	r4, r2
 801d3c2:	d510      	bpl.n	801d3e6 <_svfiprintf_r+0x36>
 801d3c4:	690b      	ldr	r3, [r1, #16]
 801d3c6:	b973      	cbnz	r3, 801d3e6 <_svfiprintf_r+0x36>
 801d3c8:	2140      	movs	r1, #64	@ 0x40
 801d3ca:	f7fc f85b 	bl	8019484 <_malloc_r>
 801d3ce:	6028      	str	r0, [r5, #0]
 801d3d0:	6128      	str	r0, [r5, #16]
 801d3d2:	b930      	cbnz	r0, 801d3e2 <_svfiprintf_r+0x32>
 801d3d4:	230c      	movs	r3, #12
 801d3d6:	603b      	str	r3, [r7, #0]
 801d3d8:	f04f 30ff 	mov.w	r0, #4294967295
 801d3dc:	b01d      	add	sp, #116	@ 0x74
 801d3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3e2:	2340      	movs	r3, #64	@ 0x40
 801d3e4:	616b      	str	r3, [r5, #20]
 801d3e6:	2300      	movs	r3, #0
 801d3e8:	9309      	str	r3, [sp, #36]	@ 0x24
 801d3ea:	2320      	movs	r3, #32
 801d3ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d3f0:	f8cd 800c 	str.w	r8, [sp, #12]
 801d3f4:	2330      	movs	r3, #48	@ 0x30
 801d3f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d594 <_svfiprintf_r+0x1e4>
 801d3fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d3fe:	f04f 0901 	mov.w	r9, #1
 801d402:	4623      	mov	r3, r4
 801d404:	469a      	mov	sl, r3
 801d406:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d40a:	b10a      	cbz	r2, 801d410 <_svfiprintf_r+0x60>
 801d40c:	2a25      	cmp	r2, #37	@ 0x25
 801d40e:	d1f9      	bne.n	801d404 <_svfiprintf_r+0x54>
 801d410:	ebba 0b04 	subs.w	fp, sl, r4
 801d414:	d00b      	beq.n	801d42e <_svfiprintf_r+0x7e>
 801d416:	465b      	mov	r3, fp
 801d418:	4622      	mov	r2, r4
 801d41a:	4629      	mov	r1, r5
 801d41c:	4638      	mov	r0, r7
 801d41e:	f7ff ff6c 	bl	801d2fa <__ssputs_r>
 801d422:	3001      	adds	r0, #1
 801d424:	f000 80a7 	beq.w	801d576 <_svfiprintf_r+0x1c6>
 801d428:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d42a:	445a      	add	r2, fp
 801d42c:	9209      	str	r2, [sp, #36]	@ 0x24
 801d42e:	f89a 3000 	ldrb.w	r3, [sl]
 801d432:	2b00      	cmp	r3, #0
 801d434:	f000 809f 	beq.w	801d576 <_svfiprintf_r+0x1c6>
 801d438:	2300      	movs	r3, #0
 801d43a:	f04f 32ff 	mov.w	r2, #4294967295
 801d43e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d442:	f10a 0a01 	add.w	sl, sl, #1
 801d446:	9304      	str	r3, [sp, #16]
 801d448:	9307      	str	r3, [sp, #28]
 801d44a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d44e:	931a      	str	r3, [sp, #104]	@ 0x68
 801d450:	4654      	mov	r4, sl
 801d452:	2205      	movs	r2, #5
 801d454:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d458:	484e      	ldr	r0, [pc, #312]	@ (801d594 <_svfiprintf_r+0x1e4>)
 801d45a:	f7e2 fe91 	bl	8000180 <memchr>
 801d45e:	9a04      	ldr	r2, [sp, #16]
 801d460:	b9d8      	cbnz	r0, 801d49a <_svfiprintf_r+0xea>
 801d462:	06d0      	lsls	r0, r2, #27
 801d464:	bf44      	itt	mi
 801d466:	2320      	movmi	r3, #32
 801d468:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d46c:	0711      	lsls	r1, r2, #28
 801d46e:	bf44      	itt	mi
 801d470:	232b      	movmi	r3, #43	@ 0x2b
 801d472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d476:	f89a 3000 	ldrb.w	r3, [sl]
 801d47a:	2b2a      	cmp	r3, #42	@ 0x2a
 801d47c:	d015      	beq.n	801d4aa <_svfiprintf_r+0xfa>
 801d47e:	9a07      	ldr	r2, [sp, #28]
 801d480:	4654      	mov	r4, sl
 801d482:	2000      	movs	r0, #0
 801d484:	f04f 0c0a 	mov.w	ip, #10
 801d488:	4621      	mov	r1, r4
 801d48a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d48e:	3b30      	subs	r3, #48	@ 0x30
 801d490:	2b09      	cmp	r3, #9
 801d492:	d94b      	bls.n	801d52c <_svfiprintf_r+0x17c>
 801d494:	b1b0      	cbz	r0, 801d4c4 <_svfiprintf_r+0x114>
 801d496:	9207      	str	r2, [sp, #28]
 801d498:	e014      	b.n	801d4c4 <_svfiprintf_r+0x114>
 801d49a:	eba0 0308 	sub.w	r3, r0, r8
 801d49e:	fa09 f303 	lsl.w	r3, r9, r3
 801d4a2:	4313      	orrs	r3, r2
 801d4a4:	9304      	str	r3, [sp, #16]
 801d4a6:	46a2      	mov	sl, r4
 801d4a8:	e7d2      	b.n	801d450 <_svfiprintf_r+0xa0>
 801d4aa:	9b03      	ldr	r3, [sp, #12]
 801d4ac:	1d19      	adds	r1, r3, #4
 801d4ae:	681b      	ldr	r3, [r3, #0]
 801d4b0:	9103      	str	r1, [sp, #12]
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	bfbb      	ittet	lt
 801d4b6:	425b      	neglt	r3, r3
 801d4b8:	f042 0202 	orrlt.w	r2, r2, #2
 801d4bc:	9307      	strge	r3, [sp, #28]
 801d4be:	9307      	strlt	r3, [sp, #28]
 801d4c0:	bfb8      	it	lt
 801d4c2:	9204      	strlt	r2, [sp, #16]
 801d4c4:	7823      	ldrb	r3, [r4, #0]
 801d4c6:	2b2e      	cmp	r3, #46	@ 0x2e
 801d4c8:	d10a      	bne.n	801d4e0 <_svfiprintf_r+0x130>
 801d4ca:	7863      	ldrb	r3, [r4, #1]
 801d4cc:	2b2a      	cmp	r3, #42	@ 0x2a
 801d4ce:	d132      	bne.n	801d536 <_svfiprintf_r+0x186>
 801d4d0:	9b03      	ldr	r3, [sp, #12]
 801d4d2:	1d1a      	adds	r2, r3, #4
 801d4d4:	681b      	ldr	r3, [r3, #0]
 801d4d6:	9203      	str	r2, [sp, #12]
 801d4d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d4dc:	3402      	adds	r4, #2
 801d4de:	9305      	str	r3, [sp, #20]
 801d4e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d5a4 <_svfiprintf_r+0x1f4>
 801d4e4:	7821      	ldrb	r1, [r4, #0]
 801d4e6:	2203      	movs	r2, #3
 801d4e8:	4650      	mov	r0, sl
 801d4ea:	f7e2 fe49 	bl	8000180 <memchr>
 801d4ee:	b138      	cbz	r0, 801d500 <_svfiprintf_r+0x150>
 801d4f0:	9b04      	ldr	r3, [sp, #16]
 801d4f2:	eba0 000a 	sub.w	r0, r0, sl
 801d4f6:	2240      	movs	r2, #64	@ 0x40
 801d4f8:	4082      	lsls	r2, r0
 801d4fa:	4313      	orrs	r3, r2
 801d4fc:	3401      	adds	r4, #1
 801d4fe:	9304      	str	r3, [sp, #16]
 801d500:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d504:	4824      	ldr	r0, [pc, #144]	@ (801d598 <_svfiprintf_r+0x1e8>)
 801d506:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d50a:	2206      	movs	r2, #6
 801d50c:	f7e2 fe38 	bl	8000180 <memchr>
 801d510:	2800      	cmp	r0, #0
 801d512:	d036      	beq.n	801d582 <_svfiprintf_r+0x1d2>
 801d514:	4b21      	ldr	r3, [pc, #132]	@ (801d59c <_svfiprintf_r+0x1ec>)
 801d516:	bb1b      	cbnz	r3, 801d560 <_svfiprintf_r+0x1b0>
 801d518:	9b03      	ldr	r3, [sp, #12]
 801d51a:	3307      	adds	r3, #7
 801d51c:	f023 0307 	bic.w	r3, r3, #7
 801d520:	3308      	adds	r3, #8
 801d522:	9303      	str	r3, [sp, #12]
 801d524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d526:	4433      	add	r3, r6
 801d528:	9309      	str	r3, [sp, #36]	@ 0x24
 801d52a:	e76a      	b.n	801d402 <_svfiprintf_r+0x52>
 801d52c:	fb0c 3202 	mla	r2, ip, r2, r3
 801d530:	460c      	mov	r4, r1
 801d532:	2001      	movs	r0, #1
 801d534:	e7a8      	b.n	801d488 <_svfiprintf_r+0xd8>
 801d536:	2300      	movs	r3, #0
 801d538:	3401      	adds	r4, #1
 801d53a:	9305      	str	r3, [sp, #20]
 801d53c:	4619      	mov	r1, r3
 801d53e:	f04f 0c0a 	mov.w	ip, #10
 801d542:	4620      	mov	r0, r4
 801d544:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d548:	3a30      	subs	r2, #48	@ 0x30
 801d54a:	2a09      	cmp	r2, #9
 801d54c:	d903      	bls.n	801d556 <_svfiprintf_r+0x1a6>
 801d54e:	2b00      	cmp	r3, #0
 801d550:	d0c6      	beq.n	801d4e0 <_svfiprintf_r+0x130>
 801d552:	9105      	str	r1, [sp, #20]
 801d554:	e7c4      	b.n	801d4e0 <_svfiprintf_r+0x130>
 801d556:	fb0c 2101 	mla	r1, ip, r1, r2
 801d55a:	4604      	mov	r4, r0
 801d55c:	2301      	movs	r3, #1
 801d55e:	e7f0      	b.n	801d542 <_svfiprintf_r+0x192>
 801d560:	ab03      	add	r3, sp, #12
 801d562:	9300      	str	r3, [sp, #0]
 801d564:	462a      	mov	r2, r5
 801d566:	4b0e      	ldr	r3, [pc, #56]	@ (801d5a0 <_svfiprintf_r+0x1f0>)
 801d568:	a904      	add	r1, sp, #16
 801d56a:	4638      	mov	r0, r7
 801d56c:	f7fc ffa8 	bl	801a4c0 <_printf_float>
 801d570:	1c42      	adds	r2, r0, #1
 801d572:	4606      	mov	r6, r0
 801d574:	d1d6      	bne.n	801d524 <_svfiprintf_r+0x174>
 801d576:	89ab      	ldrh	r3, [r5, #12]
 801d578:	065b      	lsls	r3, r3, #25
 801d57a:	f53f af2d 	bmi.w	801d3d8 <_svfiprintf_r+0x28>
 801d57e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d580:	e72c      	b.n	801d3dc <_svfiprintf_r+0x2c>
 801d582:	ab03      	add	r3, sp, #12
 801d584:	9300      	str	r3, [sp, #0]
 801d586:	462a      	mov	r2, r5
 801d588:	4b05      	ldr	r3, [pc, #20]	@ (801d5a0 <_svfiprintf_r+0x1f0>)
 801d58a:	a904      	add	r1, sp, #16
 801d58c:	4638      	mov	r0, r7
 801d58e:	f7fd fa2f 	bl	801a9f0 <_printf_i>
 801d592:	e7ed      	b.n	801d570 <_svfiprintf_r+0x1c0>
 801d594:	08021e30 	.word	0x08021e30
 801d598:	08021e3a 	.word	0x08021e3a
 801d59c:	0801a4c1 	.word	0x0801a4c1
 801d5a0:	0801d2fb 	.word	0x0801d2fb
 801d5a4:	08021e36 	.word	0x08021e36

0801d5a8 <__sfputc_r>:
 801d5a8:	6893      	ldr	r3, [r2, #8]
 801d5aa:	3b01      	subs	r3, #1
 801d5ac:	2b00      	cmp	r3, #0
 801d5ae:	b410      	push	{r4}
 801d5b0:	6093      	str	r3, [r2, #8]
 801d5b2:	da08      	bge.n	801d5c6 <__sfputc_r+0x1e>
 801d5b4:	6994      	ldr	r4, [r2, #24]
 801d5b6:	42a3      	cmp	r3, r4
 801d5b8:	db01      	blt.n	801d5be <__sfputc_r+0x16>
 801d5ba:	290a      	cmp	r1, #10
 801d5bc:	d103      	bne.n	801d5c6 <__sfputc_r+0x1e>
 801d5be:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d5c2:	f000 b9f1 	b.w	801d9a8 <__swbuf_r>
 801d5c6:	6813      	ldr	r3, [r2, #0]
 801d5c8:	1c58      	adds	r0, r3, #1
 801d5ca:	6010      	str	r0, [r2, #0]
 801d5cc:	7019      	strb	r1, [r3, #0]
 801d5ce:	4608      	mov	r0, r1
 801d5d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d5d4:	4770      	bx	lr

0801d5d6 <__sfputs_r>:
 801d5d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5d8:	4606      	mov	r6, r0
 801d5da:	460f      	mov	r7, r1
 801d5dc:	4614      	mov	r4, r2
 801d5de:	18d5      	adds	r5, r2, r3
 801d5e0:	42ac      	cmp	r4, r5
 801d5e2:	d101      	bne.n	801d5e8 <__sfputs_r+0x12>
 801d5e4:	2000      	movs	r0, #0
 801d5e6:	e007      	b.n	801d5f8 <__sfputs_r+0x22>
 801d5e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d5ec:	463a      	mov	r2, r7
 801d5ee:	4630      	mov	r0, r6
 801d5f0:	f7ff ffda 	bl	801d5a8 <__sfputc_r>
 801d5f4:	1c43      	adds	r3, r0, #1
 801d5f6:	d1f3      	bne.n	801d5e0 <__sfputs_r+0xa>
 801d5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d5fc <_vfiprintf_r>:
 801d5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d600:	460d      	mov	r5, r1
 801d602:	b09d      	sub	sp, #116	@ 0x74
 801d604:	4614      	mov	r4, r2
 801d606:	4698      	mov	r8, r3
 801d608:	4606      	mov	r6, r0
 801d60a:	b118      	cbz	r0, 801d614 <_vfiprintf_r+0x18>
 801d60c:	6a03      	ldr	r3, [r0, #32]
 801d60e:	b90b      	cbnz	r3, 801d614 <_vfiprintf_r+0x18>
 801d610:	f7fd fdae 	bl	801b170 <__sinit>
 801d614:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d616:	07d9      	lsls	r1, r3, #31
 801d618:	d405      	bmi.n	801d626 <_vfiprintf_r+0x2a>
 801d61a:	89ab      	ldrh	r3, [r5, #12]
 801d61c:	059a      	lsls	r2, r3, #22
 801d61e:	d402      	bmi.n	801d626 <_vfiprintf_r+0x2a>
 801d620:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d622:	f7fd ff84 	bl	801b52e <__retarget_lock_acquire_recursive>
 801d626:	89ab      	ldrh	r3, [r5, #12]
 801d628:	071b      	lsls	r3, r3, #28
 801d62a:	d501      	bpl.n	801d630 <_vfiprintf_r+0x34>
 801d62c:	692b      	ldr	r3, [r5, #16]
 801d62e:	b99b      	cbnz	r3, 801d658 <_vfiprintf_r+0x5c>
 801d630:	4629      	mov	r1, r5
 801d632:	4630      	mov	r0, r6
 801d634:	f000 f9f6 	bl	801da24 <__swsetup_r>
 801d638:	b170      	cbz	r0, 801d658 <_vfiprintf_r+0x5c>
 801d63a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d63c:	07dc      	lsls	r4, r3, #31
 801d63e:	d504      	bpl.n	801d64a <_vfiprintf_r+0x4e>
 801d640:	f04f 30ff 	mov.w	r0, #4294967295
 801d644:	b01d      	add	sp, #116	@ 0x74
 801d646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d64a:	89ab      	ldrh	r3, [r5, #12]
 801d64c:	0598      	lsls	r0, r3, #22
 801d64e:	d4f7      	bmi.n	801d640 <_vfiprintf_r+0x44>
 801d650:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d652:	f7fd ff6d 	bl	801b530 <__retarget_lock_release_recursive>
 801d656:	e7f3      	b.n	801d640 <_vfiprintf_r+0x44>
 801d658:	2300      	movs	r3, #0
 801d65a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d65c:	2320      	movs	r3, #32
 801d65e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d662:	f8cd 800c 	str.w	r8, [sp, #12]
 801d666:	2330      	movs	r3, #48	@ 0x30
 801d668:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d818 <_vfiprintf_r+0x21c>
 801d66c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d670:	f04f 0901 	mov.w	r9, #1
 801d674:	4623      	mov	r3, r4
 801d676:	469a      	mov	sl, r3
 801d678:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d67c:	b10a      	cbz	r2, 801d682 <_vfiprintf_r+0x86>
 801d67e:	2a25      	cmp	r2, #37	@ 0x25
 801d680:	d1f9      	bne.n	801d676 <_vfiprintf_r+0x7a>
 801d682:	ebba 0b04 	subs.w	fp, sl, r4
 801d686:	d00b      	beq.n	801d6a0 <_vfiprintf_r+0xa4>
 801d688:	465b      	mov	r3, fp
 801d68a:	4622      	mov	r2, r4
 801d68c:	4629      	mov	r1, r5
 801d68e:	4630      	mov	r0, r6
 801d690:	f7ff ffa1 	bl	801d5d6 <__sfputs_r>
 801d694:	3001      	adds	r0, #1
 801d696:	f000 80a7 	beq.w	801d7e8 <_vfiprintf_r+0x1ec>
 801d69a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d69c:	445a      	add	r2, fp
 801d69e:	9209      	str	r2, [sp, #36]	@ 0x24
 801d6a0:	f89a 3000 	ldrb.w	r3, [sl]
 801d6a4:	2b00      	cmp	r3, #0
 801d6a6:	f000 809f 	beq.w	801d7e8 <_vfiprintf_r+0x1ec>
 801d6aa:	2300      	movs	r3, #0
 801d6ac:	f04f 32ff 	mov.w	r2, #4294967295
 801d6b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d6b4:	f10a 0a01 	add.w	sl, sl, #1
 801d6b8:	9304      	str	r3, [sp, #16]
 801d6ba:	9307      	str	r3, [sp, #28]
 801d6bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d6c0:	931a      	str	r3, [sp, #104]	@ 0x68
 801d6c2:	4654      	mov	r4, sl
 801d6c4:	2205      	movs	r2, #5
 801d6c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d6ca:	4853      	ldr	r0, [pc, #332]	@ (801d818 <_vfiprintf_r+0x21c>)
 801d6cc:	f7e2 fd58 	bl	8000180 <memchr>
 801d6d0:	9a04      	ldr	r2, [sp, #16]
 801d6d2:	b9d8      	cbnz	r0, 801d70c <_vfiprintf_r+0x110>
 801d6d4:	06d1      	lsls	r1, r2, #27
 801d6d6:	bf44      	itt	mi
 801d6d8:	2320      	movmi	r3, #32
 801d6da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d6de:	0713      	lsls	r3, r2, #28
 801d6e0:	bf44      	itt	mi
 801d6e2:	232b      	movmi	r3, #43	@ 0x2b
 801d6e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d6e8:	f89a 3000 	ldrb.w	r3, [sl]
 801d6ec:	2b2a      	cmp	r3, #42	@ 0x2a
 801d6ee:	d015      	beq.n	801d71c <_vfiprintf_r+0x120>
 801d6f0:	9a07      	ldr	r2, [sp, #28]
 801d6f2:	4654      	mov	r4, sl
 801d6f4:	2000      	movs	r0, #0
 801d6f6:	f04f 0c0a 	mov.w	ip, #10
 801d6fa:	4621      	mov	r1, r4
 801d6fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d700:	3b30      	subs	r3, #48	@ 0x30
 801d702:	2b09      	cmp	r3, #9
 801d704:	d94b      	bls.n	801d79e <_vfiprintf_r+0x1a2>
 801d706:	b1b0      	cbz	r0, 801d736 <_vfiprintf_r+0x13a>
 801d708:	9207      	str	r2, [sp, #28]
 801d70a:	e014      	b.n	801d736 <_vfiprintf_r+0x13a>
 801d70c:	eba0 0308 	sub.w	r3, r0, r8
 801d710:	fa09 f303 	lsl.w	r3, r9, r3
 801d714:	4313      	orrs	r3, r2
 801d716:	9304      	str	r3, [sp, #16]
 801d718:	46a2      	mov	sl, r4
 801d71a:	e7d2      	b.n	801d6c2 <_vfiprintf_r+0xc6>
 801d71c:	9b03      	ldr	r3, [sp, #12]
 801d71e:	1d19      	adds	r1, r3, #4
 801d720:	681b      	ldr	r3, [r3, #0]
 801d722:	9103      	str	r1, [sp, #12]
 801d724:	2b00      	cmp	r3, #0
 801d726:	bfbb      	ittet	lt
 801d728:	425b      	neglt	r3, r3
 801d72a:	f042 0202 	orrlt.w	r2, r2, #2
 801d72e:	9307      	strge	r3, [sp, #28]
 801d730:	9307      	strlt	r3, [sp, #28]
 801d732:	bfb8      	it	lt
 801d734:	9204      	strlt	r2, [sp, #16]
 801d736:	7823      	ldrb	r3, [r4, #0]
 801d738:	2b2e      	cmp	r3, #46	@ 0x2e
 801d73a:	d10a      	bne.n	801d752 <_vfiprintf_r+0x156>
 801d73c:	7863      	ldrb	r3, [r4, #1]
 801d73e:	2b2a      	cmp	r3, #42	@ 0x2a
 801d740:	d132      	bne.n	801d7a8 <_vfiprintf_r+0x1ac>
 801d742:	9b03      	ldr	r3, [sp, #12]
 801d744:	1d1a      	adds	r2, r3, #4
 801d746:	681b      	ldr	r3, [r3, #0]
 801d748:	9203      	str	r2, [sp, #12]
 801d74a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d74e:	3402      	adds	r4, #2
 801d750:	9305      	str	r3, [sp, #20]
 801d752:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d828 <_vfiprintf_r+0x22c>
 801d756:	7821      	ldrb	r1, [r4, #0]
 801d758:	2203      	movs	r2, #3
 801d75a:	4650      	mov	r0, sl
 801d75c:	f7e2 fd10 	bl	8000180 <memchr>
 801d760:	b138      	cbz	r0, 801d772 <_vfiprintf_r+0x176>
 801d762:	9b04      	ldr	r3, [sp, #16]
 801d764:	eba0 000a 	sub.w	r0, r0, sl
 801d768:	2240      	movs	r2, #64	@ 0x40
 801d76a:	4082      	lsls	r2, r0
 801d76c:	4313      	orrs	r3, r2
 801d76e:	3401      	adds	r4, #1
 801d770:	9304      	str	r3, [sp, #16]
 801d772:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d776:	4829      	ldr	r0, [pc, #164]	@ (801d81c <_vfiprintf_r+0x220>)
 801d778:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d77c:	2206      	movs	r2, #6
 801d77e:	f7e2 fcff 	bl	8000180 <memchr>
 801d782:	2800      	cmp	r0, #0
 801d784:	d03f      	beq.n	801d806 <_vfiprintf_r+0x20a>
 801d786:	4b26      	ldr	r3, [pc, #152]	@ (801d820 <_vfiprintf_r+0x224>)
 801d788:	bb1b      	cbnz	r3, 801d7d2 <_vfiprintf_r+0x1d6>
 801d78a:	9b03      	ldr	r3, [sp, #12]
 801d78c:	3307      	adds	r3, #7
 801d78e:	f023 0307 	bic.w	r3, r3, #7
 801d792:	3308      	adds	r3, #8
 801d794:	9303      	str	r3, [sp, #12]
 801d796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d798:	443b      	add	r3, r7
 801d79a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d79c:	e76a      	b.n	801d674 <_vfiprintf_r+0x78>
 801d79e:	fb0c 3202 	mla	r2, ip, r2, r3
 801d7a2:	460c      	mov	r4, r1
 801d7a4:	2001      	movs	r0, #1
 801d7a6:	e7a8      	b.n	801d6fa <_vfiprintf_r+0xfe>
 801d7a8:	2300      	movs	r3, #0
 801d7aa:	3401      	adds	r4, #1
 801d7ac:	9305      	str	r3, [sp, #20]
 801d7ae:	4619      	mov	r1, r3
 801d7b0:	f04f 0c0a 	mov.w	ip, #10
 801d7b4:	4620      	mov	r0, r4
 801d7b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d7ba:	3a30      	subs	r2, #48	@ 0x30
 801d7bc:	2a09      	cmp	r2, #9
 801d7be:	d903      	bls.n	801d7c8 <_vfiprintf_r+0x1cc>
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	d0c6      	beq.n	801d752 <_vfiprintf_r+0x156>
 801d7c4:	9105      	str	r1, [sp, #20]
 801d7c6:	e7c4      	b.n	801d752 <_vfiprintf_r+0x156>
 801d7c8:	fb0c 2101 	mla	r1, ip, r1, r2
 801d7cc:	4604      	mov	r4, r0
 801d7ce:	2301      	movs	r3, #1
 801d7d0:	e7f0      	b.n	801d7b4 <_vfiprintf_r+0x1b8>
 801d7d2:	ab03      	add	r3, sp, #12
 801d7d4:	9300      	str	r3, [sp, #0]
 801d7d6:	462a      	mov	r2, r5
 801d7d8:	4b12      	ldr	r3, [pc, #72]	@ (801d824 <_vfiprintf_r+0x228>)
 801d7da:	a904      	add	r1, sp, #16
 801d7dc:	4630      	mov	r0, r6
 801d7de:	f7fc fe6f 	bl	801a4c0 <_printf_float>
 801d7e2:	4607      	mov	r7, r0
 801d7e4:	1c78      	adds	r0, r7, #1
 801d7e6:	d1d6      	bne.n	801d796 <_vfiprintf_r+0x19a>
 801d7e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d7ea:	07d9      	lsls	r1, r3, #31
 801d7ec:	d405      	bmi.n	801d7fa <_vfiprintf_r+0x1fe>
 801d7ee:	89ab      	ldrh	r3, [r5, #12]
 801d7f0:	059a      	lsls	r2, r3, #22
 801d7f2:	d402      	bmi.n	801d7fa <_vfiprintf_r+0x1fe>
 801d7f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d7f6:	f7fd fe9b 	bl	801b530 <__retarget_lock_release_recursive>
 801d7fa:	89ab      	ldrh	r3, [r5, #12]
 801d7fc:	065b      	lsls	r3, r3, #25
 801d7fe:	f53f af1f 	bmi.w	801d640 <_vfiprintf_r+0x44>
 801d802:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d804:	e71e      	b.n	801d644 <_vfiprintf_r+0x48>
 801d806:	ab03      	add	r3, sp, #12
 801d808:	9300      	str	r3, [sp, #0]
 801d80a:	462a      	mov	r2, r5
 801d80c:	4b05      	ldr	r3, [pc, #20]	@ (801d824 <_vfiprintf_r+0x228>)
 801d80e:	a904      	add	r1, sp, #16
 801d810:	4630      	mov	r0, r6
 801d812:	f7fd f8ed 	bl	801a9f0 <_printf_i>
 801d816:	e7e4      	b.n	801d7e2 <_vfiprintf_r+0x1e6>
 801d818:	08021e30 	.word	0x08021e30
 801d81c:	08021e3a 	.word	0x08021e3a
 801d820:	0801a4c1 	.word	0x0801a4c1
 801d824:	0801d5d7 	.word	0x0801d5d7
 801d828:	08021e36 	.word	0x08021e36

0801d82c <__sflush_r>:
 801d82c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d834:	0716      	lsls	r6, r2, #28
 801d836:	4605      	mov	r5, r0
 801d838:	460c      	mov	r4, r1
 801d83a:	d454      	bmi.n	801d8e6 <__sflush_r+0xba>
 801d83c:	684b      	ldr	r3, [r1, #4]
 801d83e:	2b00      	cmp	r3, #0
 801d840:	dc02      	bgt.n	801d848 <__sflush_r+0x1c>
 801d842:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d844:	2b00      	cmp	r3, #0
 801d846:	dd48      	ble.n	801d8da <__sflush_r+0xae>
 801d848:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d84a:	2e00      	cmp	r6, #0
 801d84c:	d045      	beq.n	801d8da <__sflush_r+0xae>
 801d84e:	2300      	movs	r3, #0
 801d850:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d854:	682f      	ldr	r7, [r5, #0]
 801d856:	6a21      	ldr	r1, [r4, #32]
 801d858:	602b      	str	r3, [r5, #0]
 801d85a:	d030      	beq.n	801d8be <__sflush_r+0x92>
 801d85c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d85e:	89a3      	ldrh	r3, [r4, #12]
 801d860:	0759      	lsls	r1, r3, #29
 801d862:	d505      	bpl.n	801d870 <__sflush_r+0x44>
 801d864:	6863      	ldr	r3, [r4, #4]
 801d866:	1ad2      	subs	r2, r2, r3
 801d868:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d86a:	b10b      	cbz	r3, 801d870 <__sflush_r+0x44>
 801d86c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d86e:	1ad2      	subs	r2, r2, r3
 801d870:	2300      	movs	r3, #0
 801d872:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d874:	6a21      	ldr	r1, [r4, #32]
 801d876:	4628      	mov	r0, r5
 801d878:	47b0      	blx	r6
 801d87a:	1c43      	adds	r3, r0, #1
 801d87c:	89a3      	ldrh	r3, [r4, #12]
 801d87e:	d106      	bne.n	801d88e <__sflush_r+0x62>
 801d880:	6829      	ldr	r1, [r5, #0]
 801d882:	291d      	cmp	r1, #29
 801d884:	d82b      	bhi.n	801d8de <__sflush_r+0xb2>
 801d886:	4a2a      	ldr	r2, [pc, #168]	@ (801d930 <__sflush_r+0x104>)
 801d888:	410a      	asrs	r2, r1
 801d88a:	07d6      	lsls	r6, r2, #31
 801d88c:	d427      	bmi.n	801d8de <__sflush_r+0xb2>
 801d88e:	2200      	movs	r2, #0
 801d890:	6062      	str	r2, [r4, #4]
 801d892:	04d9      	lsls	r1, r3, #19
 801d894:	6922      	ldr	r2, [r4, #16]
 801d896:	6022      	str	r2, [r4, #0]
 801d898:	d504      	bpl.n	801d8a4 <__sflush_r+0x78>
 801d89a:	1c42      	adds	r2, r0, #1
 801d89c:	d101      	bne.n	801d8a2 <__sflush_r+0x76>
 801d89e:	682b      	ldr	r3, [r5, #0]
 801d8a0:	b903      	cbnz	r3, 801d8a4 <__sflush_r+0x78>
 801d8a2:	6560      	str	r0, [r4, #84]	@ 0x54
 801d8a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d8a6:	602f      	str	r7, [r5, #0]
 801d8a8:	b1b9      	cbz	r1, 801d8da <__sflush_r+0xae>
 801d8aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d8ae:	4299      	cmp	r1, r3
 801d8b0:	d002      	beq.n	801d8b8 <__sflush_r+0x8c>
 801d8b2:	4628      	mov	r0, r5
 801d8b4:	f7fe fccc 	bl	801c250 <_free_r>
 801d8b8:	2300      	movs	r3, #0
 801d8ba:	6363      	str	r3, [r4, #52]	@ 0x34
 801d8bc:	e00d      	b.n	801d8da <__sflush_r+0xae>
 801d8be:	2301      	movs	r3, #1
 801d8c0:	4628      	mov	r0, r5
 801d8c2:	47b0      	blx	r6
 801d8c4:	4602      	mov	r2, r0
 801d8c6:	1c50      	adds	r0, r2, #1
 801d8c8:	d1c9      	bne.n	801d85e <__sflush_r+0x32>
 801d8ca:	682b      	ldr	r3, [r5, #0]
 801d8cc:	2b00      	cmp	r3, #0
 801d8ce:	d0c6      	beq.n	801d85e <__sflush_r+0x32>
 801d8d0:	2b1d      	cmp	r3, #29
 801d8d2:	d001      	beq.n	801d8d8 <__sflush_r+0xac>
 801d8d4:	2b16      	cmp	r3, #22
 801d8d6:	d11e      	bne.n	801d916 <__sflush_r+0xea>
 801d8d8:	602f      	str	r7, [r5, #0]
 801d8da:	2000      	movs	r0, #0
 801d8dc:	e022      	b.n	801d924 <__sflush_r+0xf8>
 801d8de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d8e2:	b21b      	sxth	r3, r3
 801d8e4:	e01b      	b.n	801d91e <__sflush_r+0xf2>
 801d8e6:	690f      	ldr	r7, [r1, #16]
 801d8e8:	2f00      	cmp	r7, #0
 801d8ea:	d0f6      	beq.n	801d8da <__sflush_r+0xae>
 801d8ec:	0793      	lsls	r3, r2, #30
 801d8ee:	680e      	ldr	r6, [r1, #0]
 801d8f0:	bf08      	it	eq
 801d8f2:	694b      	ldreq	r3, [r1, #20]
 801d8f4:	600f      	str	r7, [r1, #0]
 801d8f6:	bf18      	it	ne
 801d8f8:	2300      	movne	r3, #0
 801d8fa:	eba6 0807 	sub.w	r8, r6, r7
 801d8fe:	608b      	str	r3, [r1, #8]
 801d900:	f1b8 0f00 	cmp.w	r8, #0
 801d904:	dde9      	ble.n	801d8da <__sflush_r+0xae>
 801d906:	6a21      	ldr	r1, [r4, #32]
 801d908:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d90a:	4643      	mov	r3, r8
 801d90c:	463a      	mov	r2, r7
 801d90e:	4628      	mov	r0, r5
 801d910:	47b0      	blx	r6
 801d912:	2800      	cmp	r0, #0
 801d914:	dc08      	bgt.n	801d928 <__sflush_r+0xfc>
 801d916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d91a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d91e:	81a3      	strh	r3, [r4, #12]
 801d920:	f04f 30ff 	mov.w	r0, #4294967295
 801d924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d928:	4407      	add	r7, r0
 801d92a:	eba8 0800 	sub.w	r8, r8, r0
 801d92e:	e7e7      	b.n	801d900 <__sflush_r+0xd4>
 801d930:	dfbffffe 	.word	0xdfbffffe

0801d934 <_fflush_r>:
 801d934:	b538      	push	{r3, r4, r5, lr}
 801d936:	690b      	ldr	r3, [r1, #16]
 801d938:	4605      	mov	r5, r0
 801d93a:	460c      	mov	r4, r1
 801d93c:	b913      	cbnz	r3, 801d944 <_fflush_r+0x10>
 801d93e:	2500      	movs	r5, #0
 801d940:	4628      	mov	r0, r5
 801d942:	bd38      	pop	{r3, r4, r5, pc}
 801d944:	b118      	cbz	r0, 801d94e <_fflush_r+0x1a>
 801d946:	6a03      	ldr	r3, [r0, #32]
 801d948:	b90b      	cbnz	r3, 801d94e <_fflush_r+0x1a>
 801d94a:	f7fd fc11 	bl	801b170 <__sinit>
 801d94e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d952:	2b00      	cmp	r3, #0
 801d954:	d0f3      	beq.n	801d93e <_fflush_r+0xa>
 801d956:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d958:	07d0      	lsls	r0, r2, #31
 801d95a:	d404      	bmi.n	801d966 <_fflush_r+0x32>
 801d95c:	0599      	lsls	r1, r3, #22
 801d95e:	d402      	bmi.n	801d966 <_fflush_r+0x32>
 801d960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d962:	f7fd fde4 	bl	801b52e <__retarget_lock_acquire_recursive>
 801d966:	4628      	mov	r0, r5
 801d968:	4621      	mov	r1, r4
 801d96a:	f7ff ff5f 	bl	801d82c <__sflush_r>
 801d96e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d970:	07da      	lsls	r2, r3, #31
 801d972:	4605      	mov	r5, r0
 801d974:	d4e4      	bmi.n	801d940 <_fflush_r+0xc>
 801d976:	89a3      	ldrh	r3, [r4, #12]
 801d978:	059b      	lsls	r3, r3, #22
 801d97a:	d4e1      	bmi.n	801d940 <_fflush_r+0xc>
 801d97c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d97e:	f7fd fdd7 	bl	801b530 <__retarget_lock_release_recursive>
 801d982:	e7dd      	b.n	801d940 <_fflush_r+0xc>

0801d984 <fiprintf>:
 801d984:	b40e      	push	{r1, r2, r3}
 801d986:	b503      	push	{r0, r1, lr}
 801d988:	4601      	mov	r1, r0
 801d98a:	ab03      	add	r3, sp, #12
 801d98c:	4805      	ldr	r0, [pc, #20]	@ (801d9a4 <fiprintf+0x20>)
 801d98e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d992:	6800      	ldr	r0, [r0, #0]
 801d994:	9301      	str	r3, [sp, #4]
 801d996:	f7ff fe31 	bl	801d5fc <_vfiprintf_r>
 801d99a:	b002      	add	sp, #8
 801d99c:	f85d eb04 	ldr.w	lr, [sp], #4
 801d9a0:	b003      	add	sp, #12
 801d9a2:	4770      	bx	lr
 801d9a4:	200002c0 	.word	0x200002c0

0801d9a8 <__swbuf_r>:
 801d9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d9aa:	460e      	mov	r6, r1
 801d9ac:	4614      	mov	r4, r2
 801d9ae:	4605      	mov	r5, r0
 801d9b0:	b118      	cbz	r0, 801d9ba <__swbuf_r+0x12>
 801d9b2:	6a03      	ldr	r3, [r0, #32]
 801d9b4:	b90b      	cbnz	r3, 801d9ba <__swbuf_r+0x12>
 801d9b6:	f7fd fbdb 	bl	801b170 <__sinit>
 801d9ba:	69a3      	ldr	r3, [r4, #24]
 801d9bc:	60a3      	str	r3, [r4, #8]
 801d9be:	89a3      	ldrh	r3, [r4, #12]
 801d9c0:	071a      	lsls	r2, r3, #28
 801d9c2:	d501      	bpl.n	801d9c8 <__swbuf_r+0x20>
 801d9c4:	6923      	ldr	r3, [r4, #16]
 801d9c6:	b943      	cbnz	r3, 801d9da <__swbuf_r+0x32>
 801d9c8:	4621      	mov	r1, r4
 801d9ca:	4628      	mov	r0, r5
 801d9cc:	f000 f82a 	bl	801da24 <__swsetup_r>
 801d9d0:	b118      	cbz	r0, 801d9da <__swbuf_r+0x32>
 801d9d2:	f04f 37ff 	mov.w	r7, #4294967295
 801d9d6:	4638      	mov	r0, r7
 801d9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d9da:	6823      	ldr	r3, [r4, #0]
 801d9dc:	6922      	ldr	r2, [r4, #16]
 801d9de:	1a98      	subs	r0, r3, r2
 801d9e0:	6963      	ldr	r3, [r4, #20]
 801d9e2:	b2f6      	uxtb	r6, r6
 801d9e4:	4283      	cmp	r3, r0
 801d9e6:	4637      	mov	r7, r6
 801d9e8:	dc05      	bgt.n	801d9f6 <__swbuf_r+0x4e>
 801d9ea:	4621      	mov	r1, r4
 801d9ec:	4628      	mov	r0, r5
 801d9ee:	f7ff ffa1 	bl	801d934 <_fflush_r>
 801d9f2:	2800      	cmp	r0, #0
 801d9f4:	d1ed      	bne.n	801d9d2 <__swbuf_r+0x2a>
 801d9f6:	68a3      	ldr	r3, [r4, #8]
 801d9f8:	3b01      	subs	r3, #1
 801d9fa:	60a3      	str	r3, [r4, #8]
 801d9fc:	6823      	ldr	r3, [r4, #0]
 801d9fe:	1c5a      	adds	r2, r3, #1
 801da00:	6022      	str	r2, [r4, #0]
 801da02:	701e      	strb	r6, [r3, #0]
 801da04:	6962      	ldr	r2, [r4, #20]
 801da06:	1c43      	adds	r3, r0, #1
 801da08:	429a      	cmp	r2, r3
 801da0a:	d004      	beq.n	801da16 <__swbuf_r+0x6e>
 801da0c:	89a3      	ldrh	r3, [r4, #12]
 801da0e:	07db      	lsls	r3, r3, #31
 801da10:	d5e1      	bpl.n	801d9d6 <__swbuf_r+0x2e>
 801da12:	2e0a      	cmp	r6, #10
 801da14:	d1df      	bne.n	801d9d6 <__swbuf_r+0x2e>
 801da16:	4621      	mov	r1, r4
 801da18:	4628      	mov	r0, r5
 801da1a:	f7ff ff8b 	bl	801d934 <_fflush_r>
 801da1e:	2800      	cmp	r0, #0
 801da20:	d0d9      	beq.n	801d9d6 <__swbuf_r+0x2e>
 801da22:	e7d6      	b.n	801d9d2 <__swbuf_r+0x2a>

0801da24 <__swsetup_r>:
 801da24:	b538      	push	{r3, r4, r5, lr}
 801da26:	4b29      	ldr	r3, [pc, #164]	@ (801dacc <__swsetup_r+0xa8>)
 801da28:	4605      	mov	r5, r0
 801da2a:	6818      	ldr	r0, [r3, #0]
 801da2c:	460c      	mov	r4, r1
 801da2e:	b118      	cbz	r0, 801da38 <__swsetup_r+0x14>
 801da30:	6a03      	ldr	r3, [r0, #32]
 801da32:	b90b      	cbnz	r3, 801da38 <__swsetup_r+0x14>
 801da34:	f7fd fb9c 	bl	801b170 <__sinit>
 801da38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da3c:	0719      	lsls	r1, r3, #28
 801da3e:	d422      	bmi.n	801da86 <__swsetup_r+0x62>
 801da40:	06da      	lsls	r2, r3, #27
 801da42:	d407      	bmi.n	801da54 <__swsetup_r+0x30>
 801da44:	2209      	movs	r2, #9
 801da46:	602a      	str	r2, [r5, #0]
 801da48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da4c:	81a3      	strh	r3, [r4, #12]
 801da4e:	f04f 30ff 	mov.w	r0, #4294967295
 801da52:	e033      	b.n	801dabc <__swsetup_r+0x98>
 801da54:	0758      	lsls	r0, r3, #29
 801da56:	d512      	bpl.n	801da7e <__swsetup_r+0x5a>
 801da58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801da5a:	b141      	cbz	r1, 801da6e <__swsetup_r+0x4a>
 801da5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801da60:	4299      	cmp	r1, r3
 801da62:	d002      	beq.n	801da6a <__swsetup_r+0x46>
 801da64:	4628      	mov	r0, r5
 801da66:	f7fe fbf3 	bl	801c250 <_free_r>
 801da6a:	2300      	movs	r3, #0
 801da6c:	6363      	str	r3, [r4, #52]	@ 0x34
 801da6e:	89a3      	ldrh	r3, [r4, #12]
 801da70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801da74:	81a3      	strh	r3, [r4, #12]
 801da76:	2300      	movs	r3, #0
 801da78:	6063      	str	r3, [r4, #4]
 801da7a:	6923      	ldr	r3, [r4, #16]
 801da7c:	6023      	str	r3, [r4, #0]
 801da7e:	89a3      	ldrh	r3, [r4, #12]
 801da80:	f043 0308 	orr.w	r3, r3, #8
 801da84:	81a3      	strh	r3, [r4, #12]
 801da86:	6923      	ldr	r3, [r4, #16]
 801da88:	b94b      	cbnz	r3, 801da9e <__swsetup_r+0x7a>
 801da8a:	89a3      	ldrh	r3, [r4, #12]
 801da8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801da90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801da94:	d003      	beq.n	801da9e <__swsetup_r+0x7a>
 801da96:	4621      	mov	r1, r4
 801da98:	4628      	mov	r0, r5
 801da9a:	f000 f8a2 	bl	801dbe2 <__smakebuf_r>
 801da9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801daa2:	f013 0201 	ands.w	r2, r3, #1
 801daa6:	d00a      	beq.n	801dabe <__swsetup_r+0x9a>
 801daa8:	2200      	movs	r2, #0
 801daaa:	60a2      	str	r2, [r4, #8]
 801daac:	6962      	ldr	r2, [r4, #20]
 801daae:	4252      	negs	r2, r2
 801dab0:	61a2      	str	r2, [r4, #24]
 801dab2:	6922      	ldr	r2, [r4, #16]
 801dab4:	b942      	cbnz	r2, 801dac8 <__swsetup_r+0xa4>
 801dab6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801daba:	d1c5      	bne.n	801da48 <__swsetup_r+0x24>
 801dabc:	bd38      	pop	{r3, r4, r5, pc}
 801dabe:	0799      	lsls	r1, r3, #30
 801dac0:	bf58      	it	pl
 801dac2:	6962      	ldrpl	r2, [r4, #20]
 801dac4:	60a2      	str	r2, [r4, #8]
 801dac6:	e7f4      	b.n	801dab2 <__swsetup_r+0x8e>
 801dac8:	2000      	movs	r0, #0
 801daca:	e7f7      	b.n	801dabc <__swsetup_r+0x98>
 801dacc:	200002c0 	.word	0x200002c0

0801dad0 <memmove>:
 801dad0:	4288      	cmp	r0, r1
 801dad2:	b510      	push	{r4, lr}
 801dad4:	eb01 0402 	add.w	r4, r1, r2
 801dad8:	d902      	bls.n	801dae0 <memmove+0x10>
 801dada:	4284      	cmp	r4, r0
 801dadc:	4623      	mov	r3, r4
 801dade:	d807      	bhi.n	801daf0 <memmove+0x20>
 801dae0:	1e43      	subs	r3, r0, #1
 801dae2:	42a1      	cmp	r1, r4
 801dae4:	d008      	beq.n	801daf8 <memmove+0x28>
 801dae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801daea:	f803 2f01 	strb.w	r2, [r3, #1]!
 801daee:	e7f8      	b.n	801dae2 <memmove+0x12>
 801daf0:	4402      	add	r2, r0
 801daf2:	4601      	mov	r1, r0
 801daf4:	428a      	cmp	r2, r1
 801daf6:	d100      	bne.n	801dafa <memmove+0x2a>
 801daf8:	bd10      	pop	{r4, pc}
 801dafa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dafe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801db02:	e7f7      	b.n	801daf4 <memmove+0x24>

0801db04 <abort>:
 801db04:	b508      	push	{r3, lr}
 801db06:	2006      	movs	r0, #6
 801db08:	f000 f8d0 	bl	801dcac <raise>
 801db0c:	2001      	movs	r0, #1
 801db0e:	f7e8 fbe5 	bl	80062dc <_exit>

0801db12 <_calloc_r>:
 801db12:	b570      	push	{r4, r5, r6, lr}
 801db14:	fba1 5402 	umull	r5, r4, r1, r2
 801db18:	b93c      	cbnz	r4, 801db2a <_calloc_r+0x18>
 801db1a:	4629      	mov	r1, r5
 801db1c:	f7fb fcb2 	bl	8019484 <_malloc_r>
 801db20:	4606      	mov	r6, r0
 801db22:	b928      	cbnz	r0, 801db30 <_calloc_r+0x1e>
 801db24:	2600      	movs	r6, #0
 801db26:	4630      	mov	r0, r6
 801db28:	bd70      	pop	{r4, r5, r6, pc}
 801db2a:	220c      	movs	r2, #12
 801db2c:	6002      	str	r2, [r0, #0]
 801db2e:	e7f9      	b.n	801db24 <_calloc_r+0x12>
 801db30:	462a      	mov	r2, r5
 801db32:	4621      	mov	r1, r4
 801db34:	f7fd fbe9 	bl	801b30a <memset>
 801db38:	e7f5      	b.n	801db26 <_calloc_r+0x14>

0801db3a <_realloc_r>:
 801db3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db3e:	4680      	mov	r8, r0
 801db40:	4615      	mov	r5, r2
 801db42:	460c      	mov	r4, r1
 801db44:	b921      	cbnz	r1, 801db50 <_realloc_r+0x16>
 801db46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801db4a:	4611      	mov	r1, r2
 801db4c:	f7fb bc9a 	b.w	8019484 <_malloc_r>
 801db50:	b92a      	cbnz	r2, 801db5e <_realloc_r+0x24>
 801db52:	f7fe fb7d 	bl	801c250 <_free_r>
 801db56:	2400      	movs	r4, #0
 801db58:	4620      	mov	r0, r4
 801db5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db5e:	f000 f8e3 	bl	801dd28 <_malloc_usable_size_r>
 801db62:	4285      	cmp	r5, r0
 801db64:	4606      	mov	r6, r0
 801db66:	d802      	bhi.n	801db6e <_realloc_r+0x34>
 801db68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801db6c:	d8f4      	bhi.n	801db58 <_realloc_r+0x1e>
 801db6e:	4629      	mov	r1, r5
 801db70:	4640      	mov	r0, r8
 801db72:	f7fb fc87 	bl	8019484 <_malloc_r>
 801db76:	4607      	mov	r7, r0
 801db78:	2800      	cmp	r0, #0
 801db7a:	d0ec      	beq.n	801db56 <_realloc_r+0x1c>
 801db7c:	42b5      	cmp	r5, r6
 801db7e:	462a      	mov	r2, r5
 801db80:	4621      	mov	r1, r4
 801db82:	bf28      	it	cs
 801db84:	4632      	movcs	r2, r6
 801db86:	f7fd fcdc 	bl	801b542 <memcpy>
 801db8a:	4621      	mov	r1, r4
 801db8c:	4640      	mov	r0, r8
 801db8e:	f7fe fb5f 	bl	801c250 <_free_r>
 801db92:	463c      	mov	r4, r7
 801db94:	e7e0      	b.n	801db58 <_realloc_r+0x1e>

0801db96 <__swhatbuf_r>:
 801db96:	b570      	push	{r4, r5, r6, lr}
 801db98:	460c      	mov	r4, r1
 801db9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801db9e:	2900      	cmp	r1, #0
 801dba0:	b096      	sub	sp, #88	@ 0x58
 801dba2:	4615      	mov	r5, r2
 801dba4:	461e      	mov	r6, r3
 801dba6:	da0d      	bge.n	801dbc4 <__swhatbuf_r+0x2e>
 801dba8:	89a3      	ldrh	r3, [r4, #12]
 801dbaa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801dbae:	f04f 0100 	mov.w	r1, #0
 801dbb2:	bf14      	ite	ne
 801dbb4:	2340      	movne	r3, #64	@ 0x40
 801dbb6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801dbba:	2000      	movs	r0, #0
 801dbbc:	6031      	str	r1, [r6, #0]
 801dbbe:	602b      	str	r3, [r5, #0]
 801dbc0:	b016      	add	sp, #88	@ 0x58
 801dbc2:	bd70      	pop	{r4, r5, r6, pc}
 801dbc4:	466a      	mov	r2, sp
 801dbc6:	f000 f879 	bl	801dcbc <_fstat_r>
 801dbca:	2800      	cmp	r0, #0
 801dbcc:	dbec      	blt.n	801dba8 <__swhatbuf_r+0x12>
 801dbce:	9901      	ldr	r1, [sp, #4]
 801dbd0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801dbd4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801dbd8:	4259      	negs	r1, r3
 801dbda:	4159      	adcs	r1, r3
 801dbdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801dbe0:	e7eb      	b.n	801dbba <__swhatbuf_r+0x24>

0801dbe2 <__smakebuf_r>:
 801dbe2:	898b      	ldrh	r3, [r1, #12]
 801dbe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dbe6:	079d      	lsls	r5, r3, #30
 801dbe8:	4606      	mov	r6, r0
 801dbea:	460c      	mov	r4, r1
 801dbec:	d507      	bpl.n	801dbfe <__smakebuf_r+0x1c>
 801dbee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801dbf2:	6023      	str	r3, [r4, #0]
 801dbf4:	6123      	str	r3, [r4, #16]
 801dbf6:	2301      	movs	r3, #1
 801dbf8:	6163      	str	r3, [r4, #20]
 801dbfa:	b003      	add	sp, #12
 801dbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dbfe:	ab01      	add	r3, sp, #4
 801dc00:	466a      	mov	r2, sp
 801dc02:	f7ff ffc8 	bl	801db96 <__swhatbuf_r>
 801dc06:	9f00      	ldr	r7, [sp, #0]
 801dc08:	4605      	mov	r5, r0
 801dc0a:	4639      	mov	r1, r7
 801dc0c:	4630      	mov	r0, r6
 801dc0e:	f7fb fc39 	bl	8019484 <_malloc_r>
 801dc12:	b948      	cbnz	r0, 801dc28 <__smakebuf_r+0x46>
 801dc14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc18:	059a      	lsls	r2, r3, #22
 801dc1a:	d4ee      	bmi.n	801dbfa <__smakebuf_r+0x18>
 801dc1c:	f023 0303 	bic.w	r3, r3, #3
 801dc20:	f043 0302 	orr.w	r3, r3, #2
 801dc24:	81a3      	strh	r3, [r4, #12]
 801dc26:	e7e2      	b.n	801dbee <__smakebuf_r+0xc>
 801dc28:	89a3      	ldrh	r3, [r4, #12]
 801dc2a:	6020      	str	r0, [r4, #0]
 801dc2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dc30:	81a3      	strh	r3, [r4, #12]
 801dc32:	9b01      	ldr	r3, [sp, #4]
 801dc34:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801dc38:	b15b      	cbz	r3, 801dc52 <__smakebuf_r+0x70>
 801dc3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dc3e:	4630      	mov	r0, r6
 801dc40:	f000 f84e 	bl	801dce0 <_isatty_r>
 801dc44:	b128      	cbz	r0, 801dc52 <__smakebuf_r+0x70>
 801dc46:	89a3      	ldrh	r3, [r4, #12]
 801dc48:	f023 0303 	bic.w	r3, r3, #3
 801dc4c:	f043 0301 	orr.w	r3, r3, #1
 801dc50:	81a3      	strh	r3, [r4, #12]
 801dc52:	89a3      	ldrh	r3, [r4, #12]
 801dc54:	431d      	orrs	r5, r3
 801dc56:	81a5      	strh	r5, [r4, #12]
 801dc58:	e7cf      	b.n	801dbfa <__smakebuf_r+0x18>

0801dc5a <_raise_r>:
 801dc5a:	291f      	cmp	r1, #31
 801dc5c:	b538      	push	{r3, r4, r5, lr}
 801dc5e:	4605      	mov	r5, r0
 801dc60:	460c      	mov	r4, r1
 801dc62:	d904      	bls.n	801dc6e <_raise_r+0x14>
 801dc64:	2316      	movs	r3, #22
 801dc66:	6003      	str	r3, [r0, #0]
 801dc68:	f04f 30ff 	mov.w	r0, #4294967295
 801dc6c:	bd38      	pop	{r3, r4, r5, pc}
 801dc6e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801dc70:	b112      	cbz	r2, 801dc78 <_raise_r+0x1e>
 801dc72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dc76:	b94b      	cbnz	r3, 801dc8c <_raise_r+0x32>
 801dc78:	4628      	mov	r0, r5
 801dc7a:	f000 f853 	bl	801dd24 <_getpid_r>
 801dc7e:	4622      	mov	r2, r4
 801dc80:	4601      	mov	r1, r0
 801dc82:	4628      	mov	r0, r5
 801dc84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dc88:	f000 b83a 	b.w	801dd00 <_kill_r>
 801dc8c:	2b01      	cmp	r3, #1
 801dc8e:	d00a      	beq.n	801dca6 <_raise_r+0x4c>
 801dc90:	1c59      	adds	r1, r3, #1
 801dc92:	d103      	bne.n	801dc9c <_raise_r+0x42>
 801dc94:	2316      	movs	r3, #22
 801dc96:	6003      	str	r3, [r0, #0]
 801dc98:	2001      	movs	r0, #1
 801dc9a:	e7e7      	b.n	801dc6c <_raise_r+0x12>
 801dc9c:	2100      	movs	r1, #0
 801dc9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801dca2:	4620      	mov	r0, r4
 801dca4:	4798      	blx	r3
 801dca6:	2000      	movs	r0, #0
 801dca8:	e7e0      	b.n	801dc6c <_raise_r+0x12>
	...

0801dcac <raise>:
 801dcac:	4b02      	ldr	r3, [pc, #8]	@ (801dcb8 <raise+0xc>)
 801dcae:	4601      	mov	r1, r0
 801dcb0:	6818      	ldr	r0, [r3, #0]
 801dcb2:	f7ff bfd2 	b.w	801dc5a <_raise_r>
 801dcb6:	bf00      	nop
 801dcb8:	200002c0 	.word	0x200002c0

0801dcbc <_fstat_r>:
 801dcbc:	b538      	push	{r3, r4, r5, lr}
 801dcbe:	4d07      	ldr	r5, [pc, #28]	@ (801dcdc <_fstat_r+0x20>)
 801dcc0:	2300      	movs	r3, #0
 801dcc2:	4604      	mov	r4, r0
 801dcc4:	4608      	mov	r0, r1
 801dcc6:	4611      	mov	r1, r2
 801dcc8:	602b      	str	r3, [r5, #0]
 801dcca:	f7e8 fb57 	bl	800637c <_fstat>
 801dcce:	1c43      	adds	r3, r0, #1
 801dcd0:	d102      	bne.n	801dcd8 <_fstat_r+0x1c>
 801dcd2:	682b      	ldr	r3, [r5, #0]
 801dcd4:	b103      	cbz	r3, 801dcd8 <_fstat_r+0x1c>
 801dcd6:	6023      	str	r3, [r4, #0]
 801dcd8:	bd38      	pop	{r3, r4, r5, pc}
 801dcda:	bf00      	nop
 801dcdc:	200030a8 	.word	0x200030a8

0801dce0 <_isatty_r>:
 801dce0:	b538      	push	{r3, r4, r5, lr}
 801dce2:	4d06      	ldr	r5, [pc, #24]	@ (801dcfc <_isatty_r+0x1c>)
 801dce4:	2300      	movs	r3, #0
 801dce6:	4604      	mov	r4, r0
 801dce8:	4608      	mov	r0, r1
 801dcea:	602b      	str	r3, [r5, #0]
 801dcec:	f7e8 fb56 	bl	800639c <_isatty>
 801dcf0:	1c43      	adds	r3, r0, #1
 801dcf2:	d102      	bne.n	801dcfa <_isatty_r+0x1a>
 801dcf4:	682b      	ldr	r3, [r5, #0]
 801dcf6:	b103      	cbz	r3, 801dcfa <_isatty_r+0x1a>
 801dcf8:	6023      	str	r3, [r4, #0]
 801dcfa:	bd38      	pop	{r3, r4, r5, pc}
 801dcfc:	200030a8 	.word	0x200030a8

0801dd00 <_kill_r>:
 801dd00:	b538      	push	{r3, r4, r5, lr}
 801dd02:	4d07      	ldr	r5, [pc, #28]	@ (801dd20 <_kill_r+0x20>)
 801dd04:	2300      	movs	r3, #0
 801dd06:	4604      	mov	r4, r0
 801dd08:	4608      	mov	r0, r1
 801dd0a:	4611      	mov	r1, r2
 801dd0c:	602b      	str	r3, [r5, #0]
 801dd0e:	f7e8 fad5 	bl	80062bc <_kill>
 801dd12:	1c43      	adds	r3, r0, #1
 801dd14:	d102      	bne.n	801dd1c <_kill_r+0x1c>
 801dd16:	682b      	ldr	r3, [r5, #0]
 801dd18:	b103      	cbz	r3, 801dd1c <_kill_r+0x1c>
 801dd1a:	6023      	str	r3, [r4, #0]
 801dd1c:	bd38      	pop	{r3, r4, r5, pc}
 801dd1e:	bf00      	nop
 801dd20:	200030a8 	.word	0x200030a8

0801dd24 <_getpid_r>:
 801dd24:	f7e8 bac2 	b.w	80062ac <_getpid>

0801dd28 <_malloc_usable_size_r>:
 801dd28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dd2c:	1f18      	subs	r0, r3, #4
 801dd2e:	2b00      	cmp	r3, #0
 801dd30:	bfbc      	itt	lt
 801dd32:	580b      	ldrlt	r3, [r1, r0]
 801dd34:	18c0      	addlt	r0, r0, r3
 801dd36:	4770      	bx	lr

0801dd38 <cos>:
 801dd38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dd3a:	ec53 2b10 	vmov	r2, r3, d0
 801dd3e:	4826      	ldr	r0, [pc, #152]	@ (801ddd8 <cos+0xa0>)
 801dd40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801dd44:	4281      	cmp	r1, r0
 801dd46:	d806      	bhi.n	801dd56 <cos+0x1e>
 801dd48:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801ddd0 <cos+0x98>
 801dd4c:	b005      	add	sp, #20
 801dd4e:	f85d eb04 	ldr.w	lr, [sp], #4
 801dd52:	f000 b9b1 	b.w	801e0b8 <__kernel_cos>
 801dd56:	4821      	ldr	r0, [pc, #132]	@ (801dddc <cos+0xa4>)
 801dd58:	4281      	cmp	r1, r0
 801dd5a:	d908      	bls.n	801dd6e <cos+0x36>
 801dd5c:	4610      	mov	r0, r2
 801dd5e:	4619      	mov	r1, r3
 801dd60:	f7e2 fa6a 	bl	8000238 <__aeabi_dsub>
 801dd64:	ec41 0b10 	vmov	d0, r0, r1
 801dd68:	b005      	add	sp, #20
 801dd6a:	f85d fb04 	ldr.w	pc, [sp], #4
 801dd6e:	4668      	mov	r0, sp
 801dd70:	f000 fb26 	bl	801e3c0 <__ieee754_rem_pio2>
 801dd74:	f000 0003 	and.w	r0, r0, #3
 801dd78:	2801      	cmp	r0, #1
 801dd7a:	d00b      	beq.n	801dd94 <cos+0x5c>
 801dd7c:	2802      	cmp	r0, #2
 801dd7e:	d015      	beq.n	801ddac <cos+0x74>
 801dd80:	b9d8      	cbnz	r0, 801ddba <cos+0x82>
 801dd82:	ed9d 1b02 	vldr	d1, [sp, #8]
 801dd86:	ed9d 0b00 	vldr	d0, [sp]
 801dd8a:	f000 f995 	bl	801e0b8 <__kernel_cos>
 801dd8e:	ec51 0b10 	vmov	r0, r1, d0
 801dd92:	e7e7      	b.n	801dd64 <cos+0x2c>
 801dd94:	ed9d 1b02 	vldr	d1, [sp, #8]
 801dd98:	ed9d 0b00 	vldr	d0, [sp]
 801dd9c:	f000 fa54 	bl	801e248 <__kernel_sin>
 801dda0:	ec53 2b10 	vmov	r2, r3, d0
 801dda4:	4610      	mov	r0, r2
 801dda6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801ddaa:	e7db      	b.n	801dd64 <cos+0x2c>
 801ddac:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ddb0:	ed9d 0b00 	vldr	d0, [sp]
 801ddb4:	f000 f980 	bl	801e0b8 <__kernel_cos>
 801ddb8:	e7f2      	b.n	801dda0 <cos+0x68>
 801ddba:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ddbe:	ed9d 0b00 	vldr	d0, [sp]
 801ddc2:	2001      	movs	r0, #1
 801ddc4:	f000 fa40 	bl	801e248 <__kernel_sin>
 801ddc8:	e7e1      	b.n	801dd8e <cos+0x56>
 801ddca:	bf00      	nop
 801ddcc:	f3af 8000 	nop.w
	...
 801ddd8:	3fe921fb 	.word	0x3fe921fb
 801dddc:	7fefffff 	.word	0x7fefffff

0801dde0 <sin>:
 801dde0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dde2:	ec53 2b10 	vmov	r2, r3, d0
 801dde6:	4826      	ldr	r0, [pc, #152]	@ (801de80 <sin+0xa0>)
 801dde8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801ddec:	4281      	cmp	r1, r0
 801ddee:	d807      	bhi.n	801de00 <sin+0x20>
 801ddf0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801de78 <sin+0x98>
 801ddf4:	2000      	movs	r0, #0
 801ddf6:	b005      	add	sp, #20
 801ddf8:	f85d eb04 	ldr.w	lr, [sp], #4
 801ddfc:	f000 ba24 	b.w	801e248 <__kernel_sin>
 801de00:	4820      	ldr	r0, [pc, #128]	@ (801de84 <sin+0xa4>)
 801de02:	4281      	cmp	r1, r0
 801de04:	d908      	bls.n	801de18 <sin+0x38>
 801de06:	4610      	mov	r0, r2
 801de08:	4619      	mov	r1, r3
 801de0a:	f7e2 fa15 	bl	8000238 <__aeabi_dsub>
 801de0e:	ec41 0b10 	vmov	d0, r0, r1
 801de12:	b005      	add	sp, #20
 801de14:	f85d fb04 	ldr.w	pc, [sp], #4
 801de18:	4668      	mov	r0, sp
 801de1a:	f000 fad1 	bl	801e3c0 <__ieee754_rem_pio2>
 801de1e:	f000 0003 	and.w	r0, r0, #3
 801de22:	2801      	cmp	r0, #1
 801de24:	d00c      	beq.n	801de40 <sin+0x60>
 801de26:	2802      	cmp	r0, #2
 801de28:	d011      	beq.n	801de4e <sin+0x6e>
 801de2a:	b9e8      	cbnz	r0, 801de68 <sin+0x88>
 801de2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801de30:	ed9d 0b00 	vldr	d0, [sp]
 801de34:	2001      	movs	r0, #1
 801de36:	f000 fa07 	bl	801e248 <__kernel_sin>
 801de3a:	ec51 0b10 	vmov	r0, r1, d0
 801de3e:	e7e6      	b.n	801de0e <sin+0x2e>
 801de40:	ed9d 1b02 	vldr	d1, [sp, #8]
 801de44:	ed9d 0b00 	vldr	d0, [sp]
 801de48:	f000 f936 	bl	801e0b8 <__kernel_cos>
 801de4c:	e7f5      	b.n	801de3a <sin+0x5a>
 801de4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801de52:	ed9d 0b00 	vldr	d0, [sp]
 801de56:	2001      	movs	r0, #1
 801de58:	f000 f9f6 	bl	801e248 <__kernel_sin>
 801de5c:	ec53 2b10 	vmov	r2, r3, d0
 801de60:	4610      	mov	r0, r2
 801de62:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801de66:	e7d2      	b.n	801de0e <sin+0x2e>
 801de68:	ed9d 1b02 	vldr	d1, [sp, #8]
 801de6c:	ed9d 0b00 	vldr	d0, [sp]
 801de70:	f000 f922 	bl	801e0b8 <__kernel_cos>
 801de74:	e7f2      	b.n	801de5c <sin+0x7c>
 801de76:	bf00      	nop
	...
 801de80:	3fe921fb 	.word	0x3fe921fb
 801de84:	7fefffff 	.word	0x7fefffff

0801de88 <expf>:
 801de88:	b508      	push	{r3, lr}
 801de8a:	ed2d 8b02 	vpush	{d8}
 801de8e:	eef0 8a40 	vmov.f32	s17, s0
 801de92:	f000 fccd 	bl	801e830 <__ieee754_expf>
 801de96:	eeb0 8a40 	vmov.f32	s16, s0
 801de9a:	eeb0 0a68 	vmov.f32	s0, s17
 801de9e:	f000 f87d 	bl	801df9c <finitef>
 801dea2:	b160      	cbz	r0, 801debe <expf+0x36>
 801dea4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801dee4 <expf+0x5c>
 801dea8:	eef4 8ae7 	vcmpe.f32	s17, s15
 801deac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801deb0:	dd0a      	ble.n	801dec8 <expf+0x40>
 801deb2:	f7fd fb11 	bl	801b4d8 <__errno>
 801deb6:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 801dee8 <expf+0x60>
 801deba:	2322      	movs	r3, #34	@ 0x22
 801debc:	6003      	str	r3, [r0, #0]
 801debe:	eeb0 0a48 	vmov.f32	s0, s16
 801dec2:	ecbd 8b02 	vpop	{d8}
 801dec6:	bd08      	pop	{r3, pc}
 801dec8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801deec <expf+0x64>
 801decc:	eef4 8ae7 	vcmpe.f32	s17, s15
 801ded0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ded4:	d5f3      	bpl.n	801debe <expf+0x36>
 801ded6:	f7fd faff 	bl	801b4d8 <__errno>
 801deda:	2322      	movs	r3, #34	@ 0x22
 801dedc:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 801def0 <expf+0x68>
 801dee0:	6003      	str	r3, [r0, #0]
 801dee2:	e7ec      	b.n	801debe <expf+0x36>
 801dee4:	42b17217 	.word	0x42b17217
 801dee8:	7f800000 	.word	0x7f800000
 801deec:	c2cff1b5 	.word	0xc2cff1b5
 801def0:	00000000 	.word	0x00000000

0801def4 <fmin>:
 801def4:	b508      	push	{r3, lr}
 801def6:	ed2d 8b04 	vpush	{d8-d9}
 801defa:	eeb0 8a40 	vmov.f32	s16, s0
 801defe:	eef0 8a60 	vmov.f32	s17, s1
 801df02:	eeb0 9a41 	vmov.f32	s18, s2
 801df06:	eef0 9a61 	vmov.f32	s19, s3
 801df0a:	f000 f81d 	bl	801df48 <__fpclassifyd>
 801df0e:	b950      	cbnz	r0, 801df26 <fmin+0x32>
 801df10:	eeb0 8a49 	vmov.f32	s16, s18
 801df14:	eef0 8a69 	vmov.f32	s17, s19
 801df18:	eeb0 0a48 	vmov.f32	s0, s16
 801df1c:	eef0 0a68 	vmov.f32	s1, s17
 801df20:	ecbd 8b04 	vpop	{d8-d9}
 801df24:	bd08      	pop	{r3, pc}
 801df26:	eeb0 0a49 	vmov.f32	s0, s18
 801df2a:	eef0 0a69 	vmov.f32	s1, s19
 801df2e:	f000 f80b 	bl	801df48 <__fpclassifyd>
 801df32:	2800      	cmp	r0, #0
 801df34:	d0f0      	beq.n	801df18 <fmin+0x24>
 801df36:	ec53 2b19 	vmov	r2, r3, d9
 801df3a:	ec51 0b18 	vmov	r0, r1, d8
 801df3e:	f7e2 fda5 	bl	8000a8c <__aeabi_dcmplt>
 801df42:	2800      	cmp	r0, #0
 801df44:	d0e4      	beq.n	801df10 <fmin+0x1c>
 801df46:	e7e7      	b.n	801df18 <fmin+0x24>

0801df48 <__fpclassifyd>:
 801df48:	ec51 0b10 	vmov	r0, r1, d0
 801df4c:	b510      	push	{r4, lr}
 801df4e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 801df52:	460b      	mov	r3, r1
 801df54:	d019      	beq.n	801df8a <__fpclassifyd+0x42>
 801df56:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 801df5a:	490e      	ldr	r1, [pc, #56]	@ (801df94 <__fpclassifyd+0x4c>)
 801df5c:	428a      	cmp	r2, r1
 801df5e:	d90e      	bls.n	801df7e <__fpclassifyd+0x36>
 801df60:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 801df64:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 801df68:	428a      	cmp	r2, r1
 801df6a:	d908      	bls.n	801df7e <__fpclassifyd+0x36>
 801df6c:	4a0a      	ldr	r2, [pc, #40]	@ (801df98 <__fpclassifyd+0x50>)
 801df6e:	4213      	tst	r3, r2
 801df70:	d007      	beq.n	801df82 <__fpclassifyd+0x3a>
 801df72:	4294      	cmp	r4, r2
 801df74:	d107      	bne.n	801df86 <__fpclassifyd+0x3e>
 801df76:	fab0 f080 	clz	r0, r0
 801df7a:	0940      	lsrs	r0, r0, #5
 801df7c:	bd10      	pop	{r4, pc}
 801df7e:	2004      	movs	r0, #4
 801df80:	e7fc      	b.n	801df7c <__fpclassifyd+0x34>
 801df82:	2003      	movs	r0, #3
 801df84:	e7fa      	b.n	801df7c <__fpclassifyd+0x34>
 801df86:	2000      	movs	r0, #0
 801df88:	e7f8      	b.n	801df7c <__fpclassifyd+0x34>
 801df8a:	2800      	cmp	r0, #0
 801df8c:	d1ee      	bne.n	801df6c <__fpclassifyd+0x24>
 801df8e:	2002      	movs	r0, #2
 801df90:	e7f4      	b.n	801df7c <__fpclassifyd+0x34>
 801df92:	bf00      	nop
 801df94:	7fdfffff 	.word	0x7fdfffff
 801df98:	7ff00000 	.word	0x7ff00000

0801df9c <finitef>:
 801df9c:	ee10 3a10 	vmov	r3, s0
 801dfa0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801dfa4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801dfa8:	bfac      	ite	ge
 801dfaa:	2000      	movge	r0, #0
 801dfac:	2001      	movlt	r0, #1
 801dfae:	4770      	bx	lr

0801dfb0 <cosl>:
 801dfb0:	f7ff bec2 	b.w	801dd38 <cos>

0801dfb4 <sinl>:
 801dfb4:	f7ff bf14 	b.w	801dde0 <sin>

0801dfb8 <acosl>:
 801dfb8:	f000 bbfe 	b.w	801e7b8 <acos>
 801dfbc:	0000      	movs	r0, r0
	...

0801dfc0 <floor>:
 801dfc0:	ec51 0b10 	vmov	r0, r1, d0
 801dfc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801dfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfcc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801dfd0:	2e13      	cmp	r6, #19
 801dfd2:	460c      	mov	r4, r1
 801dfd4:	4605      	mov	r5, r0
 801dfd6:	4680      	mov	r8, r0
 801dfd8:	dc34      	bgt.n	801e044 <floor+0x84>
 801dfda:	2e00      	cmp	r6, #0
 801dfdc:	da17      	bge.n	801e00e <floor+0x4e>
 801dfde:	a332      	add	r3, pc, #200	@ (adr r3, 801e0a8 <floor+0xe8>)
 801dfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfe4:	f7e2 f92a 	bl	800023c <__adddf3>
 801dfe8:	2200      	movs	r2, #0
 801dfea:	2300      	movs	r3, #0
 801dfec:	f7e2 fd6c 	bl	8000ac8 <__aeabi_dcmpgt>
 801dff0:	b150      	cbz	r0, 801e008 <floor+0x48>
 801dff2:	2c00      	cmp	r4, #0
 801dff4:	da55      	bge.n	801e0a2 <floor+0xe2>
 801dff6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801dffa:	432c      	orrs	r4, r5
 801dffc:	2500      	movs	r5, #0
 801dffe:	42ac      	cmp	r4, r5
 801e000:	4c2b      	ldr	r4, [pc, #172]	@ (801e0b0 <floor+0xf0>)
 801e002:	bf08      	it	eq
 801e004:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801e008:	4621      	mov	r1, r4
 801e00a:	4628      	mov	r0, r5
 801e00c:	e023      	b.n	801e056 <floor+0x96>
 801e00e:	4f29      	ldr	r7, [pc, #164]	@ (801e0b4 <floor+0xf4>)
 801e010:	4137      	asrs	r7, r6
 801e012:	ea01 0307 	and.w	r3, r1, r7
 801e016:	4303      	orrs	r3, r0
 801e018:	d01d      	beq.n	801e056 <floor+0x96>
 801e01a:	a323      	add	r3, pc, #140	@ (adr r3, 801e0a8 <floor+0xe8>)
 801e01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e020:	f7e2 f90c 	bl	800023c <__adddf3>
 801e024:	2200      	movs	r2, #0
 801e026:	2300      	movs	r3, #0
 801e028:	f7e2 fd4e 	bl	8000ac8 <__aeabi_dcmpgt>
 801e02c:	2800      	cmp	r0, #0
 801e02e:	d0eb      	beq.n	801e008 <floor+0x48>
 801e030:	2c00      	cmp	r4, #0
 801e032:	bfbe      	ittt	lt
 801e034:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801e038:	4133      	asrlt	r3, r6
 801e03a:	18e4      	addlt	r4, r4, r3
 801e03c:	ea24 0407 	bic.w	r4, r4, r7
 801e040:	2500      	movs	r5, #0
 801e042:	e7e1      	b.n	801e008 <floor+0x48>
 801e044:	2e33      	cmp	r6, #51	@ 0x33
 801e046:	dd0a      	ble.n	801e05e <floor+0x9e>
 801e048:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e04c:	d103      	bne.n	801e056 <floor+0x96>
 801e04e:	4602      	mov	r2, r0
 801e050:	460b      	mov	r3, r1
 801e052:	f7e2 f8f3 	bl	800023c <__adddf3>
 801e056:	ec41 0b10 	vmov	d0, r0, r1
 801e05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e05e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801e062:	f04f 37ff 	mov.w	r7, #4294967295
 801e066:	40df      	lsrs	r7, r3
 801e068:	4207      	tst	r7, r0
 801e06a:	d0f4      	beq.n	801e056 <floor+0x96>
 801e06c:	a30e      	add	r3, pc, #56	@ (adr r3, 801e0a8 <floor+0xe8>)
 801e06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e072:	f7e2 f8e3 	bl	800023c <__adddf3>
 801e076:	2200      	movs	r2, #0
 801e078:	2300      	movs	r3, #0
 801e07a:	f7e2 fd25 	bl	8000ac8 <__aeabi_dcmpgt>
 801e07e:	2800      	cmp	r0, #0
 801e080:	d0c2      	beq.n	801e008 <floor+0x48>
 801e082:	2c00      	cmp	r4, #0
 801e084:	da0a      	bge.n	801e09c <floor+0xdc>
 801e086:	2e14      	cmp	r6, #20
 801e088:	d101      	bne.n	801e08e <floor+0xce>
 801e08a:	3401      	adds	r4, #1
 801e08c:	e006      	b.n	801e09c <floor+0xdc>
 801e08e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e092:	2301      	movs	r3, #1
 801e094:	40b3      	lsls	r3, r6
 801e096:	441d      	add	r5, r3
 801e098:	4545      	cmp	r5, r8
 801e09a:	d3f6      	bcc.n	801e08a <floor+0xca>
 801e09c:	ea25 0507 	bic.w	r5, r5, r7
 801e0a0:	e7b2      	b.n	801e008 <floor+0x48>
 801e0a2:	2500      	movs	r5, #0
 801e0a4:	462c      	mov	r4, r5
 801e0a6:	e7af      	b.n	801e008 <floor+0x48>
 801e0a8:	8800759c 	.word	0x8800759c
 801e0ac:	7e37e43c 	.word	0x7e37e43c
 801e0b0:	bff00000 	.word	0xbff00000
 801e0b4:	000fffff 	.word	0x000fffff

0801e0b8 <__kernel_cos>:
 801e0b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0bc:	ec57 6b10 	vmov	r6, r7, d0
 801e0c0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e0c4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801e0c8:	ed8d 1b00 	vstr	d1, [sp]
 801e0cc:	d206      	bcs.n	801e0dc <__kernel_cos+0x24>
 801e0ce:	4630      	mov	r0, r6
 801e0d0:	4639      	mov	r1, r7
 801e0d2:	f7e2 fd19 	bl	8000b08 <__aeabi_d2iz>
 801e0d6:	2800      	cmp	r0, #0
 801e0d8:	f000 8088 	beq.w	801e1ec <__kernel_cos+0x134>
 801e0dc:	4632      	mov	r2, r6
 801e0de:	463b      	mov	r3, r7
 801e0e0:	4630      	mov	r0, r6
 801e0e2:	4639      	mov	r1, r7
 801e0e4:	f7e2 fa60 	bl	80005a8 <__aeabi_dmul>
 801e0e8:	4b51      	ldr	r3, [pc, #324]	@ (801e230 <__kernel_cos+0x178>)
 801e0ea:	2200      	movs	r2, #0
 801e0ec:	4604      	mov	r4, r0
 801e0ee:	460d      	mov	r5, r1
 801e0f0:	f7e2 fa5a 	bl	80005a8 <__aeabi_dmul>
 801e0f4:	a340      	add	r3, pc, #256	@ (adr r3, 801e1f8 <__kernel_cos+0x140>)
 801e0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0fa:	4682      	mov	sl, r0
 801e0fc:	468b      	mov	fp, r1
 801e0fe:	4620      	mov	r0, r4
 801e100:	4629      	mov	r1, r5
 801e102:	f7e2 fa51 	bl	80005a8 <__aeabi_dmul>
 801e106:	a33e      	add	r3, pc, #248	@ (adr r3, 801e200 <__kernel_cos+0x148>)
 801e108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e10c:	f7e2 f896 	bl	800023c <__adddf3>
 801e110:	4622      	mov	r2, r4
 801e112:	462b      	mov	r3, r5
 801e114:	f7e2 fa48 	bl	80005a8 <__aeabi_dmul>
 801e118:	a33b      	add	r3, pc, #236	@ (adr r3, 801e208 <__kernel_cos+0x150>)
 801e11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e11e:	f7e2 f88b 	bl	8000238 <__aeabi_dsub>
 801e122:	4622      	mov	r2, r4
 801e124:	462b      	mov	r3, r5
 801e126:	f7e2 fa3f 	bl	80005a8 <__aeabi_dmul>
 801e12a:	a339      	add	r3, pc, #228	@ (adr r3, 801e210 <__kernel_cos+0x158>)
 801e12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e130:	f7e2 f884 	bl	800023c <__adddf3>
 801e134:	4622      	mov	r2, r4
 801e136:	462b      	mov	r3, r5
 801e138:	f7e2 fa36 	bl	80005a8 <__aeabi_dmul>
 801e13c:	a336      	add	r3, pc, #216	@ (adr r3, 801e218 <__kernel_cos+0x160>)
 801e13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e142:	f7e2 f879 	bl	8000238 <__aeabi_dsub>
 801e146:	4622      	mov	r2, r4
 801e148:	462b      	mov	r3, r5
 801e14a:	f7e2 fa2d 	bl	80005a8 <__aeabi_dmul>
 801e14e:	a334      	add	r3, pc, #208	@ (adr r3, 801e220 <__kernel_cos+0x168>)
 801e150:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e154:	f7e2 f872 	bl	800023c <__adddf3>
 801e158:	4622      	mov	r2, r4
 801e15a:	462b      	mov	r3, r5
 801e15c:	f7e2 fa24 	bl	80005a8 <__aeabi_dmul>
 801e160:	4622      	mov	r2, r4
 801e162:	462b      	mov	r3, r5
 801e164:	f7e2 fa20 	bl	80005a8 <__aeabi_dmul>
 801e168:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e16c:	4604      	mov	r4, r0
 801e16e:	460d      	mov	r5, r1
 801e170:	4630      	mov	r0, r6
 801e172:	4639      	mov	r1, r7
 801e174:	f7e2 fa18 	bl	80005a8 <__aeabi_dmul>
 801e178:	460b      	mov	r3, r1
 801e17a:	4602      	mov	r2, r0
 801e17c:	4629      	mov	r1, r5
 801e17e:	4620      	mov	r0, r4
 801e180:	f7e2 f85a 	bl	8000238 <__aeabi_dsub>
 801e184:	4b2b      	ldr	r3, [pc, #172]	@ (801e234 <__kernel_cos+0x17c>)
 801e186:	4598      	cmp	r8, r3
 801e188:	4606      	mov	r6, r0
 801e18a:	460f      	mov	r7, r1
 801e18c:	d810      	bhi.n	801e1b0 <__kernel_cos+0xf8>
 801e18e:	4602      	mov	r2, r0
 801e190:	460b      	mov	r3, r1
 801e192:	4650      	mov	r0, sl
 801e194:	4659      	mov	r1, fp
 801e196:	f7e2 f84f 	bl	8000238 <__aeabi_dsub>
 801e19a:	460b      	mov	r3, r1
 801e19c:	4926      	ldr	r1, [pc, #152]	@ (801e238 <__kernel_cos+0x180>)
 801e19e:	4602      	mov	r2, r0
 801e1a0:	2000      	movs	r0, #0
 801e1a2:	f7e2 f849 	bl	8000238 <__aeabi_dsub>
 801e1a6:	ec41 0b10 	vmov	d0, r0, r1
 801e1aa:	b003      	add	sp, #12
 801e1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1b0:	4b22      	ldr	r3, [pc, #136]	@ (801e23c <__kernel_cos+0x184>)
 801e1b2:	4921      	ldr	r1, [pc, #132]	@ (801e238 <__kernel_cos+0x180>)
 801e1b4:	4598      	cmp	r8, r3
 801e1b6:	bf8c      	ite	hi
 801e1b8:	4d21      	ldrhi	r5, [pc, #132]	@ (801e240 <__kernel_cos+0x188>)
 801e1ba:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801e1be:	2400      	movs	r4, #0
 801e1c0:	4622      	mov	r2, r4
 801e1c2:	462b      	mov	r3, r5
 801e1c4:	2000      	movs	r0, #0
 801e1c6:	f7e2 f837 	bl	8000238 <__aeabi_dsub>
 801e1ca:	4622      	mov	r2, r4
 801e1cc:	4680      	mov	r8, r0
 801e1ce:	4689      	mov	r9, r1
 801e1d0:	462b      	mov	r3, r5
 801e1d2:	4650      	mov	r0, sl
 801e1d4:	4659      	mov	r1, fp
 801e1d6:	f7e2 f82f 	bl	8000238 <__aeabi_dsub>
 801e1da:	4632      	mov	r2, r6
 801e1dc:	463b      	mov	r3, r7
 801e1de:	f7e2 f82b 	bl	8000238 <__aeabi_dsub>
 801e1e2:	4602      	mov	r2, r0
 801e1e4:	460b      	mov	r3, r1
 801e1e6:	4640      	mov	r0, r8
 801e1e8:	4649      	mov	r1, r9
 801e1ea:	e7da      	b.n	801e1a2 <__kernel_cos+0xea>
 801e1ec:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801e228 <__kernel_cos+0x170>
 801e1f0:	e7db      	b.n	801e1aa <__kernel_cos+0xf2>
 801e1f2:	bf00      	nop
 801e1f4:	f3af 8000 	nop.w
 801e1f8:	be8838d4 	.word	0xbe8838d4
 801e1fc:	bda8fae9 	.word	0xbda8fae9
 801e200:	bdb4b1c4 	.word	0xbdb4b1c4
 801e204:	3e21ee9e 	.word	0x3e21ee9e
 801e208:	809c52ad 	.word	0x809c52ad
 801e20c:	3e927e4f 	.word	0x3e927e4f
 801e210:	19cb1590 	.word	0x19cb1590
 801e214:	3efa01a0 	.word	0x3efa01a0
 801e218:	16c15177 	.word	0x16c15177
 801e21c:	3f56c16c 	.word	0x3f56c16c
 801e220:	5555554c 	.word	0x5555554c
 801e224:	3fa55555 	.word	0x3fa55555
 801e228:	00000000 	.word	0x00000000
 801e22c:	3ff00000 	.word	0x3ff00000
 801e230:	3fe00000 	.word	0x3fe00000
 801e234:	3fd33332 	.word	0x3fd33332
 801e238:	3ff00000 	.word	0x3ff00000
 801e23c:	3fe90000 	.word	0x3fe90000
 801e240:	3fd20000 	.word	0x3fd20000
 801e244:	00000000 	.word	0x00000000

0801e248 <__kernel_sin>:
 801e248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e24c:	ec55 4b10 	vmov	r4, r5, d0
 801e250:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801e254:	b085      	sub	sp, #20
 801e256:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801e25a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801e25e:	4680      	mov	r8, r0
 801e260:	d205      	bcs.n	801e26e <__kernel_sin+0x26>
 801e262:	4620      	mov	r0, r4
 801e264:	4629      	mov	r1, r5
 801e266:	f7e2 fc4f 	bl	8000b08 <__aeabi_d2iz>
 801e26a:	2800      	cmp	r0, #0
 801e26c:	d052      	beq.n	801e314 <__kernel_sin+0xcc>
 801e26e:	4622      	mov	r2, r4
 801e270:	462b      	mov	r3, r5
 801e272:	4620      	mov	r0, r4
 801e274:	4629      	mov	r1, r5
 801e276:	f7e2 f997 	bl	80005a8 <__aeabi_dmul>
 801e27a:	4682      	mov	sl, r0
 801e27c:	468b      	mov	fp, r1
 801e27e:	4602      	mov	r2, r0
 801e280:	460b      	mov	r3, r1
 801e282:	4620      	mov	r0, r4
 801e284:	4629      	mov	r1, r5
 801e286:	f7e2 f98f 	bl	80005a8 <__aeabi_dmul>
 801e28a:	a342      	add	r3, pc, #264	@ (adr r3, 801e394 <__kernel_sin+0x14c>)
 801e28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e290:	e9cd 0100 	strd	r0, r1, [sp]
 801e294:	4650      	mov	r0, sl
 801e296:	4659      	mov	r1, fp
 801e298:	f7e2 f986 	bl	80005a8 <__aeabi_dmul>
 801e29c:	a33f      	add	r3, pc, #252	@ (adr r3, 801e39c <__kernel_sin+0x154>)
 801e29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2a2:	f7e1 ffc9 	bl	8000238 <__aeabi_dsub>
 801e2a6:	4652      	mov	r2, sl
 801e2a8:	465b      	mov	r3, fp
 801e2aa:	f7e2 f97d 	bl	80005a8 <__aeabi_dmul>
 801e2ae:	a33d      	add	r3, pc, #244	@ (adr r3, 801e3a4 <__kernel_sin+0x15c>)
 801e2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2b4:	f7e1 ffc2 	bl	800023c <__adddf3>
 801e2b8:	4652      	mov	r2, sl
 801e2ba:	465b      	mov	r3, fp
 801e2bc:	f7e2 f974 	bl	80005a8 <__aeabi_dmul>
 801e2c0:	a33a      	add	r3, pc, #232	@ (adr r3, 801e3ac <__kernel_sin+0x164>)
 801e2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2c6:	f7e1 ffb7 	bl	8000238 <__aeabi_dsub>
 801e2ca:	4652      	mov	r2, sl
 801e2cc:	465b      	mov	r3, fp
 801e2ce:	f7e2 f96b 	bl	80005a8 <__aeabi_dmul>
 801e2d2:	a338      	add	r3, pc, #224	@ (adr r3, 801e3b4 <__kernel_sin+0x16c>)
 801e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2d8:	f7e1 ffb0 	bl	800023c <__adddf3>
 801e2dc:	4606      	mov	r6, r0
 801e2de:	460f      	mov	r7, r1
 801e2e0:	f1b8 0f00 	cmp.w	r8, #0
 801e2e4:	d11b      	bne.n	801e31e <__kernel_sin+0xd6>
 801e2e6:	4602      	mov	r2, r0
 801e2e8:	460b      	mov	r3, r1
 801e2ea:	4650      	mov	r0, sl
 801e2ec:	4659      	mov	r1, fp
 801e2ee:	f7e2 f95b 	bl	80005a8 <__aeabi_dmul>
 801e2f2:	a325      	add	r3, pc, #148	@ (adr r3, 801e388 <__kernel_sin+0x140>)
 801e2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2f8:	f7e1 ff9e 	bl	8000238 <__aeabi_dsub>
 801e2fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e300:	f7e2 f952 	bl	80005a8 <__aeabi_dmul>
 801e304:	4602      	mov	r2, r0
 801e306:	460b      	mov	r3, r1
 801e308:	4620      	mov	r0, r4
 801e30a:	4629      	mov	r1, r5
 801e30c:	f7e1 ff96 	bl	800023c <__adddf3>
 801e310:	4604      	mov	r4, r0
 801e312:	460d      	mov	r5, r1
 801e314:	ec45 4b10 	vmov	d0, r4, r5
 801e318:	b005      	add	sp, #20
 801e31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e31e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e322:	4b1b      	ldr	r3, [pc, #108]	@ (801e390 <__kernel_sin+0x148>)
 801e324:	2200      	movs	r2, #0
 801e326:	f7e2 f93f 	bl	80005a8 <__aeabi_dmul>
 801e32a:	4632      	mov	r2, r6
 801e32c:	4680      	mov	r8, r0
 801e32e:	4689      	mov	r9, r1
 801e330:	463b      	mov	r3, r7
 801e332:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e336:	f7e2 f937 	bl	80005a8 <__aeabi_dmul>
 801e33a:	4602      	mov	r2, r0
 801e33c:	460b      	mov	r3, r1
 801e33e:	4640      	mov	r0, r8
 801e340:	4649      	mov	r1, r9
 801e342:	f7e1 ff79 	bl	8000238 <__aeabi_dsub>
 801e346:	4652      	mov	r2, sl
 801e348:	465b      	mov	r3, fp
 801e34a:	f7e2 f92d 	bl	80005a8 <__aeabi_dmul>
 801e34e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e352:	f7e1 ff71 	bl	8000238 <__aeabi_dsub>
 801e356:	a30c      	add	r3, pc, #48	@ (adr r3, 801e388 <__kernel_sin+0x140>)
 801e358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e35c:	4606      	mov	r6, r0
 801e35e:	460f      	mov	r7, r1
 801e360:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e364:	f7e2 f920 	bl	80005a8 <__aeabi_dmul>
 801e368:	4602      	mov	r2, r0
 801e36a:	460b      	mov	r3, r1
 801e36c:	4630      	mov	r0, r6
 801e36e:	4639      	mov	r1, r7
 801e370:	f7e1 ff64 	bl	800023c <__adddf3>
 801e374:	4602      	mov	r2, r0
 801e376:	460b      	mov	r3, r1
 801e378:	4620      	mov	r0, r4
 801e37a:	4629      	mov	r1, r5
 801e37c:	f7e1 ff5c 	bl	8000238 <__aeabi_dsub>
 801e380:	e7c6      	b.n	801e310 <__kernel_sin+0xc8>
 801e382:	bf00      	nop
 801e384:	f3af 8000 	nop.w
 801e388:	55555549 	.word	0x55555549
 801e38c:	3fc55555 	.word	0x3fc55555
 801e390:	3fe00000 	.word	0x3fe00000
 801e394:	5acfd57c 	.word	0x5acfd57c
 801e398:	3de5d93a 	.word	0x3de5d93a
 801e39c:	8a2b9ceb 	.word	0x8a2b9ceb
 801e3a0:	3e5ae5e6 	.word	0x3e5ae5e6
 801e3a4:	57b1fe7d 	.word	0x57b1fe7d
 801e3a8:	3ec71de3 	.word	0x3ec71de3
 801e3ac:	19c161d5 	.word	0x19c161d5
 801e3b0:	3f2a01a0 	.word	0x3f2a01a0
 801e3b4:	1110f8a6 	.word	0x1110f8a6
 801e3b8:	3f811111 	.word	0x3f811111
 801e3bc:	00000000 	.word	0x00000000

0801e3c0 <__ieee754_rem_pio2>:
 801e3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3c4:	ec57 6b10 	vmov	r6, r7, d0
 801e3c8:	4bc5      	ldr	r3, [pc, #788]	@ (801e6e0 <__ieee754_rem_pio2+0x320>)
 801e3ca:	b08d      	sub	sp, #52	@ 0x34
 801e3cc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e3d0:	4598      	cmp	r8, r3
 801e3d2:	4604      	mov	r4, r0
 801e3d4:	9704      	str	r7, [sp, #16]
 801e3d6:	d807      	bhi.n	801e3e8 <__ieee754_rem_pio2+0x28>
 801e3d8:	2200      	movs	r2, #0
 801e3da:	2300      	movs	r3, #0
 801e3dc:	ed80 0b00 	vstr	d0, [r0]
 801e3e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e3e4:	2500      	movs	r5, #0
 801e3e6:	e028      	b.n	801e43a <__ieee754_rem_pio2+0x7a>
 801e3e8:	4bbe      	ldr	r3, [pc, #760]	@ (801e6e4 <__ieee754_rem_pio2+0x324>)
 801e3ea:	4598      	cmp	r8, r3
 801e3ec:	d878      	bhi.n	801e4e0 <__ieee754_rem_pio2+0x120>
 801e3ee:	9b04      	ldr	r3, [sp, #16]
 801e3f0:	4dbd      	ldr	r5, [pc, #756]	@ (801e6e8 <__ieee754_rem_pio2+0x328>)
 801e3f2:	2b00      	cmp	r3, #0
 801e3f4:	4630      	mov	r0, r6
 801e3f6:	a3ac      	add	r3, pc, #688	@ (adr r3, 801e6a8 <__ieee754_rem_pio2+0x2e8>)
 801e3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3fc:	4639      	mov	r1, r7
 801e3fe:	dd38      	ble.n	801e472 <__ieee754_rem_pio2+0xb2>
 801e400:	f7e1 ff1a 	bl	8000238 <__aeabi_dsub>
 801e404:	45a8      	cmp	r8, r5
 801e406:	4606      	mov	r6, r0
 801e408:	460f      	mov	r7, r1
 801e40a:	d01a      	beq.n	801e442 <__ieee754_rem_pio2+0x82>
 801e40c:	a3a8      	add	r3, pc, #672	@ (adr r3, 801e6b0 <__ieee754_rem_pio2+0x2f0>)
 801e40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e412:	f7e1 ff11 	bl	8000238 <__aeabi_dsub>
 801e416:	4602      	mov	r2, r0
 801e418:	460b      	mov	r3, r1
 801e41a:	4680      	mov	r8, r0
 801e41c:	4689      	mov	r9, r1
 801e41e:	4630      	mov	r0, r6
 801e420:	4639      	mov	r1, r7
 801e422:	f7e1 ff09 	bl	8000238 <__aeabi_dsub>
 801e426:	a3a2      	add	r3, pc, #648	@ (adr r3, 801e6b0 <__ieee754_rem_pio2+0x2f0>)
 801e428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e42c:	f7e1 ff04 	bl	8000238 <__aeabi_dsub>
 801e430:	e9c4 8900 	strd	r8, r9, [r4]
 801e434:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e438:	2501      	movs	r5, #1
 801e43a:	4628      	mov	r0, r5
 801e43c:	b00d      	add	sp, #52	@ 0x34
 801e43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e442:	a39d      	add	r3, pc, #628	@ (adr r3, 801e6b8 <__ieee754_rem_pio2+0x2f8>)
 801e444:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e448:	f7e1 fef6 	bl	8000238 <__aeabi_dsub>
 801e44c:	a39c      	add	r3, pc, #624	@ (adr r3, 801e6c0 <__ieee754_rem_pio2+0x300>)
 801e44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e452:	4606      	mov	r6, r0
 801e454:	460f      	mov	r7, r1
 801e456:	f7e1 feef 	bl	8000238 <__aeabi_dsub>
 801e45a:	4602      	mov	r2, r0
 801e45c:	460b      	mov	r3, r1
 801e45e:	4680      	mov	r8, r0
 801e460:	4689      	mov	r9, r1
 801e462:	4630      	mov	r0, r6
 801e464:	4639      	mov	r1, r7
 801e466:	f7e1 fee7 	bl	8000238 <__aeabi_dsub>
 801e46a:	a395      	add	r3, pc, #596	@ (adr r3, 801e6c0 <__ieee754_rem_pio2+0x300>)
 801e46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e470:	e7dc      	b.n	801e42c <__ieee754_rem_pio2+0x6c>
 801e472:	f7e1 fee3 	bl	800023c <__adddf3>
 801e476:	45a8      	cmp	r8, r5
 801e478:	4606      	mov	r6, r0
 801e47a:	460f      	mov	r7, r1
 801e47c:	d018      	beq.n	801e4b0 <__ieee754_rem_pio2+0xf0>
 801e47e:	a38c      	add	r3, pc, #560	@ (adr r3, 801e6b0 <__ieee754_rem_pio2+0x2f0>)
 801e480:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e484:	f7e1 feda 	bl	800023c <__adddf3>
 801e488:	4602      	mov	r2, r0
 801e48a:	460b      	mov	r3, r1
 801e48c:	4680      	mov	r8, r0
 801e48e:	4689      	mov	r9, r1
 801e490:	4630      	mov	r0, r6
 801e492:	4639      	mov	r1, r7
 801e494:	f7e1 fed0 	bl	8000238 <__aeabi_dsub>
 801e498:	a385      	add	r3, pc, #532	@ (adr r3, 801e6b0 <__ieee754_rem_pio2+0x2f0>)
 801e49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e49e:	f7e1 fecd 	bl	800023c <__adddf3>
 801e4a2:	f04f 35ff 	mov.w	r5, #4294967295
 801e4a6:	e9c4 8900 	strd	r8, r9, [r4]
 801e4aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e4ae:	e7c4      	b.n	801e43a <__ieee754_rem_pio2+0x7a>
 801e4b0:	a381      	add	r3, pc, #516	@ (adr r3, 801e6b8 <__ieee754_rem_pio2+0x2f8>)
 801e4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4b6:	f7e1 fec1 	bl	800023c <__adddf3>
 801e4ba:	a381      	add	r3, pc, #516	@ (adr r3, 801e6c0 <__ieee754_rem_pio2+0x300>)
 801e4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4c0:	4606      	mov	r6, r0
 801e4c2:	460f      	mov	r7, r1
 801e4c4:	f7e1 feba 	bl	800023c <__adddf3>
 801e4c8:	4602      	mov	r2, r0
 801e4ca:	460b      	mov	r3, r1
 801e4cc:	4680      	mov	r8, r0
 801e4ce:	4689      	mov	r9, r1
 801e4d0:	4630      	mov	r0, r6
 801e4d2:	4639      	mov	r1, r7
 801e4d4:	f7e1 feb0 	bl	8000238 <__aeabi_dsub>
 801e4d8:	a379      	add	r3, pc, #484	@ (adr r3, 801e6c0 <__ieee754_rem_pio2+0x300>)
 801e4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4de:	e7de      	b.n	801e49e <__ieee754_rem_pio2+0xde>
 801e4e0:	4b82      	ldr	r3, [pc, #520]	@ (801e6ec <__ieee754_rem_pio2+0x32c>)
 801e4e2:	4598      	cmp	r8, r3
 801e4e4:	f200 80d1 	bhi.w	801e68a <__ieee754_rem_pio2+0x2ca>
 801e4e8:	f000 f99a 	bl	801e820 <fabs>
 801e4ec:	ec57 6b10 	vmov	r6, r7, d0
 801e4f0:	a375      	add	r3, pc, #468	@ (adr r3, 801e6c8 <__ieee754_rem_pio2+0x308>)
 801e4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4f6:	4630      	mov	r0, r6
 801e4f8:	4639      	mov	r1, r7
 801e4fa:	f7e2 f855 	bl	80005a8 <__aeabi_dmul>
 801e4fe:	4b7c      	ldr	r3, [pc, #496]	@ (801e6f0 <__ieee754_rem_pio2+0x330>)
 801e500:	2200      	movs	r2, #0
 801e502:	f7e1 fe9b 	bl	800023c <__adddf3>
 801e506:	f7e2 faff 	bl	8000b08 <__aeabi_d2iz>
 801e50a:	4605      	mov	r5, r0
 801e50c:	f7e1 ffe2 	bl	80004d4 <__aeabi_i2d>
 801e510:	4602      	mov	r2, r0
 801e512:	460b      	mov	r3, r1
 801e514:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e518:	a363      	add	r3, pc, #396	@ (adr r3, 801e6a8 <__ieee754_rem_pio2+0x2e8>)
 801e51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e51e:	f7e2 f843 	bl	80005a8 <__aeabi_dmul>
 801e522:	4602      	mov	r2, r0
 801e524:	460b      	mov	r3, r1
 801e526:	4630      	mov	r0, r6
 801e528:	4639      	mov	r1, r7
 801e52a:	f7e1 fe85 	bl	8000238 <__aeabi_dsub>
 801e52e:	a360      	add	r3, pc, #384	@ (adr r3, 801e6b0 <__ieee754_rem_pio2+0x2f0>)
 801e530:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e534:	4682      	mov	sl, r0
 801e536:	468b      	mov	fp, r1
 801e538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e53c:	f7e2 f834 	bl	80005a8 <__aeabi_dmul>
 801e540:	2d1f      	cmp	r5, #31
 801e542:	4606      	mov	r6, r0
 801e544:	460f      	mov	r7, r1
 801e546:	dc0c      	bgt.n	801e562 <__ieee754_rem_pio2+0x1a2>
 801e548:	4b6a      	ldr	r3, [pc, #424]	@ (801e6f4 <__ieee754_rem_pio2+0x334>)
 801e54a:	1e6a      	subs	r2, r5, #1
 801e54c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e550:	4543      	cmp	r3, r8
 801e552:	d006      	beq.n	801e562 <__ieee754_rem_pio2+0x1a2>
 801e554:	4632      	mov	r2, r6
 801e556:	463b      	mov	r3, r7
 801e558:	4650      	mov	r0, sl
 801e55a:	4659      	mov	r1, fp
 801e55c:	f7e1 fe6c 	bl	8000238 <__aeabi_dsub>
 801e560:	e00e      	b.n	801e580 <__ieee754_rem_pio2+0x1c0>
 801e562:	463b      	mov	r3, r7
 801e564:	4632      	mov	r2, r6
 801e566:	4650      	mov	r0, sl
 801e568:	4659      	mov	r1, fp
 801e56a:	f7e1 fe65 	bl	8000238 <__aeabi_dsub>
 801e56e:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e572:	9305      	str	r3, [sp, #20]
 801e574:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e578:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801e57c:	2b10      	cmp	r3, #16
 801e57e:	dc02      	bgt.n	801e586 <__ieee754_rem_pio2+0x1c6>
 801e580:	e9c4 0100 	strd	r0, r1, [r4]
 801e584:	e039      	b.n	801e5fa <__ieee754_rem_pio2+0x23a>
 801e586:	a34c      	add	r3, pc, #304	@ (adr r3, 801e6b8 <__ieee754_rem_pio2+0x2f8>)
 801e588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e58c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e590:	f7e2 f80a 	bl	80005a8 <__aeabi_dmul>
 801e594:	4606      	mov	r6, r0
 801e596:	460f      	mov	r7, r1
 801e598:	4602      	mov	r2, r0
 801e59a:	460b      	mov	r3, r1
 801e59c:	4650      	mov	r0, sl
 801e59e:	4659      	mov	r1, fp
 801e5a0:	f7e1 fe4a 	bl	8000238 <__aeabi_dsub>
 801e5a4:	4602      	mov	r2, r0
 801e5a6:	460b      	mov	r3, r1
 801e5a8:	4680      	mov	r8, r0
 801e5aa:	4689      	mov	r9, r1
 801e5ac:	4650      	mov	r0, sl
 801e5ae:	4659      	mov	r1, fp
 801e5b0:	f7e1 fe42 	bl	8000238 <__aeabi_dsub>
 801e5b4:	4632      	mov	r2, r6
 801e5b6:	463b      	mov	r3, r7
 801e5b8:	f7e1 fe3e 	bl	8000238 <__aeabi_dsub>
 801e5bc:	a340      	add	r3, pc, #256	@ (adr r3, 801e6c0 <__ieee754_rem_pio2+0x300>)
 801e5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5c2:	4606      	mov	r6, r0
 801e5c4:	460f      	mov	r7, r1
 801e5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e5ca:	f7e1 ffed 	bl	80005a8 <__aeabi_dmul>
 801e5ce:	4632      	mov	r2, r6
 801e5d0:	463b      	mov	r3, r7
 801e5d2:	f7e1 fe31 	bl	8000238 <__aeabi_dsub>
 801e5d6:	4602      	mov	r2, r0
 801e5d8:	460b      	mov	r3, r1
 801e5da:	4606      	mov	r6, r0
 801e5dc:	460f      	mov	r7, r1
 801e5de:	4640      	mov	r0, r8
 801e5e0:	4649      	mov	r1, r9
 801e5e2:	f7e1 fe29 	bl	8000238 <__aeabi_dsub>
 801e5e6:	9a05      	ldr	r2, [sp, #20]
 801e5e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e5ec:	1ad3      	subs	r3, r2, r3
 801e5ee:	2b31      	cmp	r3, #49	@ 0x31
 801e5f0:	dc20      	bgt.n	801e634 <__ieee754_rem_pio2+0x274>
 801e5f2:	e9c4 0100 	strd	r0, r1, [r4]
 801e5f6:	46c2      	mov	sl, r8
 801e5f8:	46cb      	mov	fp, r9
 801e5fa:	e9d4 8900 	ldrd	r8, r9, [r4]
 801e5fe:	4650      	mov	r0, sl
 801e600:	4642      	mov	r2, r8
 801e602:	464b      	mov	r3, r9
 801e604:	4659      	mov	r1, fp
 801e606:	f7e1 fe17 	bl	8000238 <__aeabi_dsub>
 801e60a:	463b      	mov	r3, r7
 801e60c:	4632      	mov	r2, r6
 801e60e:	f7e1 fe13 	bl	8000238 <__aeabi_dsub>
 801e612:	9b04      	ldr	r3, [sp, #16]
 801e614:	2b00      	cmp	r3, #0
 801e616:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e61a:	f6bf af0e 	bge.w	801e43a <__ieee754_rem_pio2+0x7a>
 801e61e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801e622:	6063      	str	r3, [r4, #4]
 801e624:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e628:	f8c4 8000 	str.w	r8, [r4]
 801e62c:	60a0      	str	r0, [r4, #8]
 801e62e:	60e3      	str	r3, [r4, #12]
 801e630:	426d      	negs	r5, r5
 801e632:	e702      	b.n	801e43a <__ieee754_rem_pio2+0x7a>
 801e634:	a326      	add	r3, pc, #152	@ (adr r3, 801e6d0 <__ieee754_rem_pio2+0x310>)
 801e636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e63a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e63e:	f7e1 ffb3 	bl	80005a8 <__aeabi_dmul>
 801e642:	4606      	mov	r6, r0
 801e644:	460f      	mov	r7, r1
 801e646:	4602      	mov	r2, r0
 801e648:	460b      	mov	r3, r1
 801e64a:	4640      	mov	r0, r8
 801e64c:	4649      	mov	r1, r9
 801e64e:	f7e1 fdf3 	bl	8000238 <__aeabi_dsub>
 801e652:	4602      	mov	r2, r0
 801e654:	460b      	mov	r3, r1
 801e656:	4682      	mov	sl, r0
 801e658:	468b      	mov	fp, r1
 801e65a:	4640      	mov	r0, r8
 801e65c:	4649      	mov	r1, r9
 801e65e:	f7e1 fdeb 	bl	8000238 <__aeabi_dsub>
 801e662:	4632      	mov	r2, r6
 801e664:	463b      	mov	r3, r7
 801e666:	f7e1 fde7 	bl	8000238 <__aeabi_dsub>
 801e66a:	a31b      	add	r3, pc, #108	@ (adr r3, 801e6d8 <__ieee754_rem_pio2+0x318>)
 801e66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e670:	4606      	mov	r6, r0
 801e672:	460f      	mov	r7, r1
 801e674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e678:	f7e1 ff96 	bl	80005a8 <__aeabi_dmul>
 801e67c:	4632      	mov	r2, r6
 801e67e:	463b      	mov	r3, r7
 801e680:	f7e1 fdda 	bl	8000238 <__aeabi_dsub>
 801e684:	4606      	mov	r6, r0
 801e686:	460f      	mov	r7, r1
 801e688:	e764      	b.n	801e554 <__ieee754_rem_pio2+0x194>
 801e68a:	4b1b      	ldr	r3, [pc, #108]	@ (801e6f8 <__ieee754_rem_pio2+0x338>)
 801e68c:	4598      	cmp	r8, r3
 801e68e:	d935      	bls.n	801e6fc <__ieee754_rem_pio2+0x33c>
 801e690:	4632      	mov	r2, r6
 801e692:	463b      	mov	r3, r7
 801e694:	4630      	mov	r0, r6
 801e696:	4639      	mov	r1, r7
 801e698:	f7e1 fdce 	bl	8000238 <__aeabi_dsub>
 801e69c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e6a0:	e9c4 0100 	strd	r0, r1, [r4]
 801e6a4:	e69e      	b.n	801e3e4 <__ieee754_rem_pio2+0x24>
 801e6a6:	bf00      	nop
 801e6a8:	54400000 	.word	0x54400000
 801e6ac:	3ff921fb 	.word	0x3ff921fb
 801e6b0:	1a626331 	.word	0x1a626331
 801e6b4:	3dd0b461 	.word	0x3dd0b461
 801e6b8:	1a600000 	.word	0x1a600000
 801e6bc:	3dd0b461 	.word	0x3dd0b461
 801e6c0:	2e037073 	.word	0x2e037073
 801e6c4:	3ba3198a 	.word	0x3ba3198a
 801e6c8:	6dc9c883 	.word	0x6dc9c883
 801e6cc:	3fe45f30 	.word	0x3fe45f30
 801e6d0:	2e000000 	.word	0x2e000000
 801e6d4:	3ba3198a 	.word	0x3ba3198a
 801e6d8:	252049c1 	.word	0x252049c1
 801e6dc:	397b839a 	.word	0x397b839a
 801e6e0:	3fe921fb 	.word	0x3fe921fb
 801e6e4:	4002d97b 	.word	0x4002d97b
 801e6e8:	3ff921fb 	.word	0x3ff921fb
 801e6ec:	413921fb 	.word	0x413921fb
 801e6f0:	3fe00000 	.word	0x3fe00000
 801e6f4:	08021e44 	.word	0x08021e44
 801e6f8:	7fefffff 	.word	0x7fefffff
 801e6fc:	ea4f 5528 	mov.w	r5, r8, asr #20
 801e700:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801e704:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801e708:	4630      	mov	r0, r6
 801e70a:	460f      	mov	r7, r1
 801e70c:	f7e2 f9fc 	bl	8000b08 <__aeabi_d2iz>
 801e710:	f7e1 fee0 	bl	80004d4 <__aeabi_i2d>
 801e714:	4602      	mov	r2, r0
 801e716:	460b      	mov	r3, r1
 801e718:	4630      	mov	r0, r6
 801e71a:	4639      	mov	r1, r7
 801e71c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e720:	f7e1 fd8a 	bl	8000238 <__aeabi_dsub>
 801e724:	4b22      	ldr	r3, [pc, #136]	@ (801e7b0 <__ieee754_rem_pio2+0x3f0>)
 801e726:	2200      	movs	r2, #0
 801e728:	f7e1 ff3e 	bl	80005a8 <__aeabi_dmul>
 801e72c:	460f      	mov	r7, r1
 801e72e:	4606      	mov	r6, r0
 801e730:	f7e2 f9ea 	bl	8000b08 <__aeabi_d2iz>
 801e734:	f7e1 fece 	bl	80004d4 <__aeabi_i2d>
 801e738:	4602      	mov	r2, r0
 801e73a:	460b      	mov	r3, r1
 801e73c:	4630      	mov	r0, r6
 801e73e:	4639      	mov	r1, r7
 801e740:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801e744:	f7e1 fd78 	bl	8000238 <__aeabi_dsub>
 801e748:	4b19      	ldr	r3, [pc, #100]	@ (801e7b0 <__ieee754_rem_pio2+0x3f0>)
 801e74a:	2200      	movs	r2, #0
 801e74c:	f7e1 ff2c 	bl	80005a8 <__aeabi_dmul>
 801e750:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801e754:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801e758:	f04f 0803 	mov.w	r8, #3
 801e75c:	2600      	movs	r6, #0
 801e75e:	2700      	movs	r7, #0
 801e760:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801e764:	4632      	mov	r2, r6
 801e766:	463b      	mov	r3, r7
 801e768:	46c2      	mov	sl, r8
 801e76a:	f108 38ff 	add.w	r8, r8, #4294967295
 801e76e:	f7e2 f983 	bl	8000a78 <__aeabi_dcmpeq>
 801e772:	2800      	cmp	r0, #0
 801e774:	d1f4      	bne.n	801e760 <__ieee754_rem_pio2+0x3a0>
 801e776:	4b0f      	ldr	r3, [pc, #60]	@ (801e7b4 <__ieee754_rem_pio2+0x3f4>)
 801e778:	9301      	str	r3, [sp, #4]
 801e77a:	2302      	movs	r3, #2
 801e77c:	9300      	str	r3, [sp, #0]
 801e77e:	462a      	mov	r2, r5
 801e780:	4653      	mov	r3, sl
 801e782:	4621      	mov	r1, r4
 801e784:	a806      	add	r0, sp, #24
 801e786:	f000 f947 	bl	801ea18 <__kernel_rem_pio2>
 801e78a:	9b04      	ldr	r3, [sp, #16]
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	4605      	mov	r5, r0
 801e790:	f6bf ae53 	bge.w	801e43a <__ieee754_rem_pio2+0x7a>
 801e794:	e9d4 2100 	ldrd	r2, r1, [r4]
 801e798:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e79c:	e9c4 2300 	strd	r2, r3, [r4]
 801e7a0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801e7a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e7a8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801e7ac:	e740      	b.n	801e630 <__ieee754_rem_pio2+0x270>
 801e7ae:	bf00      	nop
 801e7b0:	41700000 	.word	0x41700000
 801e7b4:	08021ec4 	.word	0x08021ec4

0801e7b8 <acos>:
 801e7b8:	b538      	push	{r3, r4, r5, lr}
 801e7ba:	ed2d 8b02 	vpush	{d8}
 801e7be:	ec55 4b10 	vmov	r4, r5, d0
 801e7c2:	f000 fc81 	bl	801f0c8 <__ieee754_acos>
 801e7c6:	4622      	mov	r2, r4
 801e7c8:	462b      	mov	r3, r5
 801e7ca:	4620      	mov	r0, r4
 801e7cc:	4629      	mov	r1, r5
 801e7ce:	eeb0 8a40 	vmov.f32	s16, s0
 801e7d2:	eef0 8a60 	vmov.f32	s17, s1
 801e7d6:	f7e2 f981 	bl	8000adc <__aeabi_dcmpun>
 801e7da:	b9a8      	cbnz	r0, 801e808 <acos+0x50>
 801e7dc:	ec45 4b10 	vmov	d0, r4, r5
 801e7e0:	f000 f81e 	bl	801e820 <fabs>
 801e7e4:	4b0c      	ldr	r3, [pc, #48]	@ (801e818 <acos+0x60>)
 801e7e6:	ec51 0b10 	vmov	r0, r1, d0
 801e7ea:	2200      	movs	r2, #0
 801e7ec:	f7e2 f96c 	bl	8000ac8 <__aeabi_dcmpgt>
 801e7f0:	b150      	cbz	r0, 801e808 <acos+0x50>
 801e7f2:	f7fc fe71 	bl	801b4d8 <__errno>
 801e7f6:	ecbd 8b02 	vpop	{d8}
 801e7fa:	2321      	movs	r3, #33	@ 0x21
 801e7fc:	6003      	str	r3, [r0, #0]
 801e7fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e802:	4806      	ldr	r0, [pc, #24]	@ (801e81c <acos+0x64>)
 801e804:	f7fc beac 	b.w	801b560 <nan>
 801e808:	eeb0 0a48 	vmov.f32	s0, s16
 801e80c:	eef0 0a68 	vmov.f32	s1, s17
 801e810:	ecbd 8b02 	vpop	{d8}
 801e814:	bd38      	pop	{r3, r4, r5, pc}
 801e816:	bf00      	nop
 801e818:	3ff00000 	.word	0x3ff00000
 801e81c:	08021bfe 	.word	0x08021bfe

0801e820 <fabs>:
 801e820:	ec51 0b10 	vmov	r0, r1, d0
 801e824:	4602      	mov	r2, r0
 801e826:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e82a:	ec43 2b10 	vmov	d0, r2, r3
 801e82e:	4770      	bx	lr

0801e830 <__ieee754_expf>:
 801e830:	ee10 2a10 	vmov	r2, s0
 801e834:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 801e838:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801e83c:	d902      	bls.n	801e844 <__ieee754_expf+0x14>
 801e83e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e842:	4770      	bx	lr
 801e844:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801e848:	d106      	bne.n	801e858 <__ieee754_expf+0x28>
 801e84a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801e984 <__ieee754_expf+0x154>
 801e84e:	2900      	cmp	r1, #0
 801e850:	bf18      	it	ne
 801e852:	eeb0 0a67 	vmovne.f32	s0, s15
 801e856:	4770      	bx	lr
 801e858:	484b      	ldr	r0, [pc, #300]	@ (801e988 <__ieee754_expf+0x158>)
 801e85a:	4282      	cmp	r2, r0
 801e85c:	dd02      	ble.n	801e864 <__ieee754_expf+0x34>
 801e85e:	2000      	movs	r0, #0
 801e860:	f000 b8d4 	b.w	801ea0c <__math_oflowf>
 801e864:	2a00      	cmp	r2, #0
 801e866:	da05      	bge.n	801e874 <__ieee754_expf+0x44>
 801e868:	4a48      	ldr	r2, [pc, #288]	@ (801e98c <__ieee754_expf+0x15c>)
 801e86a:	4293      	cmp	r3, r2
 801e86c:	d902      	bls.n	801e874 <__ieee754_expf+0x44>
 801e86e:	2000      	movs	r0, #0
 801e870:	f000 b8c6 	b.w	801ea00 <__math_uflowf>
 801e874:	4a46      	ldr	r2, [pc, #280]	@ (801e990 <__ieee754_expf+0x160>)
 801e876:	4293      	cmp	r3, r2
 801e878:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801e87c:	d952      	bls.n	801e924 <__ieee754_expf+0xf4>
 801e87e:	4a45      	ldr	r2, [pc, #276]	@ (801e994 <__ieee754_expf+0x164>)
 801e880:	4293      	cmp	r3, r2
 801e882:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801e886:	d834      	bhi.n	801e8f2 <__ieee754_expf+0xc2>
 801e888:	4b43      	ldr	r3, [pc, #268]	@ (801e998 <__ieee754_expf+0x168>)
 801e88a:	4413      	add	r3, r2
 801e88c:	ed93 7a00 	vldr	s14, [r3]
 801e890:	4b42      	ldr	r3, [pc, #264]	@ (801e99c <__ieee754_expf+0x16c>)
 801e892:	4413      	add	r3, r2
 801e894:	ee30 7a47 	vsub.f32	s14, s0, s14
 801e898:	f1c1 0201 	rsb	r2, r1, #1
 801e89c:	edd3 7a00 	vldr	s15, [r3]
 801e8a0:	1a52      	subs	r2, r2, r1
 801e8a2:	ee37 0a67 	vsub.f32	s0, s14, s15
 801e8a6:	ee20 6a00 	vmul.f32	s12, s0, s0
 801e8aa:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 801e9a0 <__ieee754_expf+0x170>
 801e8ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801e9a4 <__ieee754_expf+0x174>
 801e8b2:	eee6 6a05 	vfma.f32	s13, s12, s10
 801e8b6:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801e9a8 <__ieee754_expf+0x178>
 801e8ba:	eea6 5a86 	vfma.f32	s10, s13, s12
 801e8be:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801e9ac <__ieee754_expf+0x17c>
 801e8c2:	eee5 6a06 	vfma.f32	s13, s10, s12
 801e8c6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801e9b0 <__ieee754_expf+0x180>
 801e8ca:	eea6 5a86 	vfma.f32	s10, s13, s12
 801e8ce:	eef0 6a40 	vmov.f32	s13, s0
 801e8d2:	eee5 6a46 	vfms.f32	s13, s10, s12
 801e8d6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801e8da:	ee20 5a26 	vmul.f32	s10, s0, s13
 801e8de:	bb92      	cbnz	r2, 801e946 <__ieee754_expf+0x116>
 801e8e0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801e8e4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801e8e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801e8ec:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801e8f0:	4770      	bx	lr
 801e8f2:	4b30      	ldr	r3, [pc, #192]	@ (801e9b4 <__ieee754_expf+0x184>)
 801e8f4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801e9b8 <__ieee754_expf+0x188>
 801e8f8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801e9bc <__ieee754_expf+0x18c>
 801e8fc:	4413      	add	r3, r2
 801e8fe:	edd3 7a00 	vldr	s15, [r3]
 801e902:	eee0 7a07 	vfma.f32	s15, s0, s14
 801e906:	eeb0 7a40 	vmov.f32	s14, s0
 801e90a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e90e:	ee17 2a90 	vmov	r2, s15
 801e912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e916:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801e91a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801e9c0 <__ieee754_expf+0x190>
 801e91e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e922:	e7be      	b.n	801e8a2 <__ieee754_expf+0x72>
 801e924:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801e928:	d20b      	bcs.n	801e942 <__ieee754_expf+0x112>
 801e92a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801e9c4 <__ieee754_expf+0x194>
 801e92e:	ee70 6a26 	vadd.f32	s13, s0, s13
 801e932:	eef4 6ae5 	vcmpe.f32	s13, s11
 801e936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e93a:	dd02      	ble.n	801e942 <__ieee754_expf+0x112>
 801e93c:	ee30 0a25 	vadd.f32	s0, s0, s11
 801e940:	4770      	bx	lr
 801e942:	2200      	movs	r2, #0
 801e944:	e7af      	b.n	801e8a6 <__ieee754_expf+0x76>
 801e946:	ee36 6a66 	vsub.f32	s12, s12, s13
 801e94a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801e94e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801e952:	bfb8      	it	lt
 801e954:	3264      	addlt	r2, #100	@ 0x64
 801e956:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e95a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e95e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801e962:	ee17 3a90 	vmov	r3, s15
 801e966:	bfab      	itete	ge
 801e968:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801e96c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801e970:	ee00 3a10 	vmovge	s0, r3
 801e974:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 801e9c8 <__ieee754_expf+0x198>
 801e978:	bfbc      	itt	lt
 801e97a:	ee00 3a10 	vmovlt	s0, r3
 801e97e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801e982:	4770      	bx	lr
 801e984:	00000000 	.word	0x00000000
 801e988:	42b17217 	.word	0x42b17217
 801e98c:	42cff1b5 	.word	0x42cff1b5
 801e990:	3eb17218 	.word	0x3eb17218
 801e994:	3f851591 	.word	0x3f851591
 801e998:	08021fd4 	.word	0x08021fd4
 801e99c:	08021fcc 	.word	0x08021fcc
 801e9a0:	3331bb4c 	.word	0x3331bb4c
 801e9a4:	b5ddea0e 	.word	0xb5ddea0e
 801e9a8:	388ab355 	.word	0x388ab355
 801e9ac:	bb360b61 	.word	0xbb360b61
 801e9b0:	3e2aaaab 	.word	0x3e2aaaab
 801e9b4:	08021fdc 	.word	0x08021fdc
 801e9b8:	3fb8aa3b 	.word	0x3fb8aa3b
 801e9bc:	3f317180 	.word	0x3f317180
 801e9c0:	3717f7d1 	.word	0x3717f7d1
 801e9c4:	7149f2ca 	.word	0x7149f2ca
 801e9c8:	0d800000 	.word	0x0d800000

0801e9cc <with_errnof>:
 801e9cc:	b510      	push	{r4, lr}
 801e9ce:	ed2d 8b02 	vpush	{d8}
 801e9d2:	eeb0 8a40 	vmov.f32	s16, s0
 801e9d6:	4604      	mov	r4, r0
 801e9d8:	f7fc fd7e 	bl	801b4d8 <__errno>
 801e9dc:	eeb0 0a48 	vmov.f32	s0, s16
 801e9e0:	ecbd 8b02 	vpop	{d8}
 801e9e4:	6004      	str	r4, [r0, #0]
 801e9e6:	bd10      	pop	{r4, pc}

0801e9e8 <xflowf>:
 801e9e8:	b130      	cbz	r0, 801e9f8 <xflowf+0x10>
 801e9ea:	eef1 7a40 	vneg.f32	s15, s0
 801e9ee:	ee27 0a80 	vmul.f32	s0, s15, s0
 801e9f2:	2022      	movs	r0, #34	@ 0x22
 801e9f4:	f7ff bfea 	b.w	801e9cc <with_errnof>
 801e9f8:	eef0 7a40 	vmov.f32	s15, s0
 801e9fc:	e7f7      	b.n	801e9ee <xflowf+0x6>
	...

0801ea00 <__math_uflowf>:
 801ea00:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ea08 <__math_uflowf+0x8>
 801ea04:	f7ff bff0 	b.w	801e9e8 <xflowf>
 801ea08:	10000000 	.word	0x10000000

0801ea0c <__math_oflowf>:
 801ea0c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ea14 <__math_oflowf+0x8>
 801ea10:	f7ff bfea 	b.w	801e9e8 <xflowf>
 801ea14:	70000000 	.word	0x70000000

0801ea18 <__kernel_rem_pio2>:
 801ea18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea1c:	ed2d 8b02 	vpush	{d8}
 801ea20:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801ea24:	f112 0f14 	cmn.w	r2, #20
 801ea28:	9306      	str	r3, [sp, #24]
 801ea2a:	9104      	str	r1, [sp, #16]
 801ea2c:	4bbe      	ldr	r3, [pc, #760]	@ (801ed28 <__kernel_rem_pio2+0x310>)
 801ea2e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801ea30:	9008      	str	r0, [sp, #32]
 801ea32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ea36:	9300      	str	r3, [sp, #0]
 801ea38:	9b06      	ldr	r3, [sp, #24]
 801ea3a:	f103 33ff 	add.w	r3, r3, #4294967295
 801ea3e:	bfa8      	it	ge
 801ea40:	1ed4      	subge	r4, r2, #3
 801ea42:	9305      	str	r3, [sp, #20]
 801ea44:	bfb2      	itee	lt
 801ea46:	2400      	movlt	r4, #0
 801ea48:	2318      	movge	r3, #24
 801ea4a:	fb94 f4f3 	sdivge	r4, r4, r3
 801ea4e:	f06f 0317 	mvn.w	r3, #23
 801ea52:	fb04 3303 	mla	r3, r4, r3, r3
 801ea56:	eb03 0b02 	add.w	fp, r3, r2
 801ea5a:	9b00      	ldr	r3, [sp, #0]
 801ea5c:	9a05      	ldr	r2, [sp, #20]
 801ea5e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801ed18 <__kernel_rem_pio2+0x300>
 801ea62:	eb03 0802 	add.w	r8, r3, r2
 801ea66:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801ea68:	1aa7      	subs	r7, r4, r2
 801ea6a:	ae20      	add	r6, sp, #128	@ 0x80
 801ea6c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801ea70:	2500      	movs	r5, #0
 801ea72:	4545      	cmp	r5, r8
 801ea74:	dd13      	ble.n	801ea9e <__kernel_rem_pio2+0x86>
 801ea76:	9b06      	ldr	r3, [sp, #24]
 801ea78:	aa20      	add	r2, sp, #128	@ 0x80
 801ea7a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801ea7e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801ea82:	f04f 0800 	mov.w	r8, #0
 801ea86:	9b00      	ldr	r3, [sp, #0]
 801ea88:	4598      	cmp	r8, r3
 801ea8a:	dc31      	bgt.n	801eaf0 <__kernel_rem_pio2+0xd8>
 801ea8c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801ed18 <__kernel_rem_pio2+0x300>
 801ea90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ea94:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ea98:	462f      	mov	r7, r5
 801ea9a:	2600      	movs	r6, #0
 801ea9c:	e01b      	b.n	801ead6 <__kernel_rem_pio2+0xbe>
 801ea9e:	42ef      	cmn	r7, r5
 801eaa0:	d407      	bmi.n	801eab2 <__kernel_rem_pio2+0x9a>
 801eaa2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801eaa6:	f7e1 fd15 	bl	80004d4 <__aeabi_i2d>
 801eaaa:	e8e6 0102 	strd	r0, r1, [r6], #8
 801eaae:	3501      	adds	r5, #1
 801eab0:	e7df      	b.n	801ea72 <__kernel_rem_pio2+0x5a>
 801eab2:	ec51 0b18 	vmov	r0, r1, d8
 801eab6:	e7f8      	b.n	801eaaa <__kernel_rem_pio2+0x92>
 801eab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801eabc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801eac0:	f7e1 fd72 	bl	80005a8 <__aeabi_dmul>
 801eac4:	4602      	mov	r2, r0
 801eac6:	460b      	mov	r3, r1
 801eac8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eacc:	f7e1 fbb6 	bl	800023c <__adddf3>
 801ead0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ead4:	3601      	adds	r6, #1
 801ead6:	9b05      	ldr	r3, [sp, #20]
 801ead8:	429e      	cmp	r6, r3
 801eada:	f1a7 0708 	sub.w	r7, r7, #8
 801eade:	ddeb      	ble.n	801eab8 <__kernel_rem_pio2+0xa0>
 801eae0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801eae4:	f108 0801 	add.w	r8, r8, #1
 801eae8:	ecaa 7b02 	vstmia	sl!, {d7}
 801eaec:	3508      	adds	r5, #8
 801eaee:	e7ca      	b.n	801ea86 <__kernel_rem_pio2+0x6e>
 801eaf0:	9b00      	ldr	r3, [sp, #0]
 801eaf2:	f8dd 8000 	ldr.w	r8, [sp]
 801eaf6:	aa0c      	add	r2, sp, #48	@ 0x30
 801eaf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801eafc:	930a      	str	r3, [sp, #40]	@ 0x28
 801eafe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801eb00:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801eb04:	9309      	str	r3, [sp, #36]	@ 0x24
 801eb06:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801eb0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eb0c:	ab98      	add	r3, sp, #608	@ 0x260
 801eb0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801eb12:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801eb16:	ed8d 7b02 	vstr	d7, [sp, #8]
 801eb1a:	ac0c      	add	r4, sp, #48	@ 0x30
 801eb1c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801eb1e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801eb22:	46a1      	mov	r9, r4
 801eb24:	46c2      	mov	sl, r8
 801eb26:	f1ba 0f00 	cmp.w	sl, #0
 801eb2a:	f1a5 0508 	sub.w	r5, r5, #8
 801eb2e:	dc77      	bgt.n	801ec20 <__kernel_rem_pio2+0x208>
 801eb30:	4658      	mov	r0, fp
 801eb32:	ed9d 0b02 	vldr	d0, [sp, #8]
 801eb36:	f000 fd23 	bl	801f580 <scalbn>
 801eb3a:	ec57 6b10 	vmov	r6, r7, d0
 801eb3e:	2200      	movs	r2, #0
 801eb40:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801eb44:	4630      	mov	r0, r6
 801eb46:	4639      	mov	r1, r7
 801eb48:	f7e1 fd2e 	bl	80005a8 <__aeabi_dmul>
 801eb4c:	ec41 0b10 	vmov	d0, r0, r1
 801eb50:	f7ff fa36 	bl	801dfc0 <floor>
 801eb54:	4b75      	ldr	r3, [pc, #468]	@ (801ed2c <__kernel_rem_pio2+0x314>)
 801eb56:	ec51 0b10 	vmov	r0, r1, d0
 801eb5a:	2200      	movs	r2, #0
 801eb5c:	f7e1 fd24 	bl	80005a8 <__aeabi_dmul>
 801eb60:	4602      	mov	r2, r0
 801eb62:	460b      	mov	r3, r1
 801eb64:	4630      	mov	r0, r6
 801eb66:	4639      	mov	r1, r7
 801eb68:	f7e1 fb66 	bl	8000238 <__aeabi_dsub>
 801eb6c:	460f      	mov	r7, r1
 801eb6e:	4606      	mov	r6, r0
 801eb70:	f7e1 ffca 	bl	8000b08 <__aeabi_d2iz>
 801eb74:	9002      	str	r0, [sp, #8]
 801eb76:	f7e1 fcad 	bl	80004d4 <__aeabi_i2d>
 801eb7a:	4602      	mov	r2, r0
 801eb7c:	460b      	mov	r3, r1
 801eb7e:	4630      	mov	r0, r6
 801eb80:	4639      	mov	r1, r7
 801eb82:	f7e1 fb59 	bl	8000238 <__aeabi_dsub>
 801eb86:	f1bb 0f00 	cmp.w	fp, #0
 801eb8a:	4606      	mov	r6, r0
 801eb8c:	460f      	mov	r7, r1
 801eb8e:	dd6c      	ble.n	801ec6a <__kernel_rem_pio2+0x252>
 801eb90:	f108 31ff 	add.w	r1, r8, #4294967295
 801eb94:	ab0c      	add	r3, sp, #48	@ 0x30
 801eb96:	9d02      	ldr	r5, [sp, #8]
 801eb98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801eb9c:	f1cb 0018 	rsb	r0, fp, #24
 801eba0:	fa43 f200 	asr.w	r2, r3, r0
 801eba4:	4415      	add	r5, r2
 801eba6:	4082      	lsls	r2, r0
 801eba8:	1a9b      	subs	r3, r3, r2
 801ebaa:	aa0c      	add	r2, sp, #48	@ 0x30
 801ebac:	9502      	str	r5, [sp, #8]
 801ebae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801ebb2:	f1cb 0217 	rsb	r2, fp, #23
 801ebb6:	fa43 f902 	asr.w	r9, r3, r2
 801ebba:	f1b9 0f00 	cmp.w	r9, #0
 801ebbe:	dd64      	ble.n	801ec8a <__kernel_rem_pio2+0x272>
 801ebc0:	9b02      	ldr	r3, [sp, #8]
 801ebc2:	2200      	movs	r2, #0
 801ebc4:	3301      	adds	r3, #1
 801ebc6:	9302      	str	r3, [sp, #8]
 801ebc8:	4615      	mov	r5, r2
 801ebca:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801ebce:	4590      	cmp	r8, r2
 801ebd0:	f300 80b8 	bgt.w	801ed44 <__kernel_rem_pio2+0x32c>
 801ebd4:	f1bb 0f00 	cmp.w	fp, #0
 801ebd8:	dd07      	ble.n	801ebea <__kernel_rem_pio2+0x1d2>
 801ebda:	f1bb 0f01 	cmp.w	fp, #1
 801ebde:	f000 80bf 	beq.w	801ed60 <__kernel_rem_pio2+0x348>
 801ebe2:	f1bb 0f02 	cmp.w	fp, #2
 801ebe6:	f000 80c6 	beq.w	801ed76 <__kernel_rem_pio2+0x35e>
 801ebea:	f1b9 0f02 	cmp.w	r9, #2
 801ebee:	d14c      	bne.n	801ec8a <__kernel_rem_pio2+0x272>
 801ebf0:	4632      	mov	r2, r6
 801ebf2:	463b      	mov	r3, r7
 801ebf4:	494e      	ldr	r1, [pc, #312]	@ (801ed30 <__kernel_rem_pio2+0x318>)
 801ebf6:	2000      	movs	r0, #0
 801ebf8:	f7e1 fb1e 	bl	8000238 <__aeabi_dsub>
 801ebfc:	4606      	mov	r6, r0
 801ebfe:	460f      	mov	r7, r1
 801ec00:	2d00      	cmp	r5, #0
 801ec02:	d042      	beq.n	801ec8a <__kernel_rem_pio2+0x272>
 801ec04:	4658      	mov	r0, fp
 801ec06:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801ed20 <__kernel_rem_pio2+0x308>
 801ec0a:	f000 fcb9 	bl	801f580 <scalbn>
 801ec0e:	4630      	mov	r0, r6
 801ec10:	4639      	mov	r1, r7
 801ec12:	ec53 2b10 	vmov	r2, r3, d0
 801ec16:	f7e1 fb0f 	bl	8000238 <__aeabi_dsub>
 801ec1a:	4606      	mov	r6, r0
 801ec1c:	460f      	mov	r7, r1
 801ec1e:	e034      	b.n	801ec8a <__kernel_rem_pio2+0x272>
 801ec20:	4b44      	ldr	r3, [pc, #272]	@ (801ed34 <__kernel_rem_pio2+0x31c>)
 801ec22:	2200      	movs	r2, #0
 801ec24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ec28:	f7e1 fcbe 	bl	80005a8 <__aeabi_dmul>
 801ec2c:	f7e1 ff6c 	bl	8000b08 <__aeabi_d2iz>
 801ec30:	f7e1 fc50 	bl	80004d4 <__aeabi_i2d>
 801ec34:	4b40      	ldr	r3, [pc, #256]	@ (801ed38 <__kernel_rem_pio2+0x320>)
 801ec36:	2200      	movs	r2, #0
 801ec38:	4606      	mov	r6, r0
 801ec3a:	460f      	mov	r7, r1
 801ec3c:	f7e1 fcb4 	bl	80005a8 <__aeabi_dmul>
 801ec40:	4602      	mov	r2, r0
 801ec42:	460b      	mov	r3, r1
 801ec44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ec48:	f7e1 faf6 	bl	8000238 <__aeabi_dsub>
 801ec4c:	f7e1 ff5c 	bl	8000b08 <__aeabi_d2iz>
 801ec50:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ec54:	f849 0b04 	str.w	r0, [r9], #4
 801ec58:	4639      	mov	r1, r7
 801ec5a:	4630      	mov	r0, r6
 801ec5c:	f7e1 faee 	bl	800023c <__adddf3>
 801ec60:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ec64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec68:	e75d      	b.n	801eb26 <__kernel_rem_pio2+0x10e>
 801ec6a:	d107      	bne.n	801ec7c <__kernel_rem_pio2+0x264>
 801ec6c:	f108 33ff 	add.w	r3, r8, #4294967295
 801ec70:	aa0c      	add	r2, sp, #48	@ 0x30
 801ec72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ec76:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801ec7a:	e79e      	b.n	801ebba <__kernel_rem_pio2+0x1a2>
 801ec7c:	4b2f      	ldr	r3, [pc, #188]	@ (801ed3c <__kernel_rem_pio2+0x324>)
 801ec7e:	2200      	movs	r2, #0
 801ec80:	f7e1 ff18 	bl	8000ab4 <__aeabi_dcmpge>
 801ec84:	2800      	cmp	r0, #0
 801ec86:	d143      	bne.n	801ed10 <__kernel_rem_pio2+0x2f8>
 801ec88:	4681      	mov	r9, r0
 801ec8a:	2200      	movs	r2, #0
 801ec8c:	2300      	movs	r3, #0
 801ec8e:	4630      	mov	r0, r6
 801ec90:	4639      	mov	r1, r7
 801ec92:	f7e1 fef1 	bl	8000a78 <__aeabi_dcmpeq>
 801ec96:	2800      	cmp	r0, #0
 801ec98:	f000 80bf 	beq.w	801ee1a <__kernel_rem_pio2+0x402>
 801ec9c:	f108 33ff 	add.w	r3, r8, #4294967295
 801eca0:	2200      	movs	r2, #0
 801eca2:	9900      	ldr	r1, [sp, #0]
 801eca4:	428b      	cmp	r3, r1
 801eca6:	da6e      	bge.n	801ed86 <__kernel_rem_pio2+0x36e>
 801eca8:	2a00      	cmp	r2, #0
 801ecaa:	f000 8089 	beq.w	801edc0 <__kernel_rem_pio2+0x3a8>
 801ecae:	f108 38ff 	add.w	r8, r8, #4294967295
 801ecb2:	ab0c      	add	r3, sp, #48	@ 0x30
 801ecb4:	f1ab 0b18 	sub.w	fp, fp, #24
 801ecb8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801ecbc:	2b00      	cmp	r3, #0
 801ecbe:	d0f6      	beq.n	801ecae <__kernel_rem_pio2+0x296>
 801ecc0:	4658      	mov	r0, fp
 801ecc2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801ed20 <__kernel_rem_pio2+0x308>
 801ecc6:	f000 fc5b 	bl	801f580 <scalbn>
 801ecca:	f108 0301 	add.w	r3, r8, #1
 801ecce:	00da      	lsls	r2, r3, #3
 801ecd0:	9205      	str	r2, [sp, #20]
 801ecd2:	ec55 4b10 	vmov	r4, r5, d0
 801ecd6:	aa70      	add	r2, sp, #448	@ 0x1c0
 801ecd8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801ed34 <__kernel_rem_pio2+0x31c>
 801ecdc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801ece0:	4646      	mov	r6, r8
 801ece2:	f04f 0a00 	mov.w	sl, #0
 801ece6:	2e00      	cmp	r6, #0
 801ece8:	f280 80cf 	bge.w	801ee8a <__kernel_rem_pio2+0x472>
 801ecec:	4644      	mov	r4, r8
 801ecee:	2c00      	cmp	r4, #0
 801ecf0:	f2c0 80fd 	blt.w	801eeee <__kernel_rem_pio2+0x4d6>
 801ecf4:	4b12      	ldr	r3, [pc, #72]	@ (801ed40 <__kernel_rem_pio2+0x328>)
 801ecf6:	461f      	mov	r7, r3
 801ecf8:	ab70      	add	r3, sp, #448	@ 0x1c0
 801ecfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ecfe:	9306      	str	r3, [sp, #24]
 801ed00:	f04f 0a00 	mov.w	sl, #0
 801ed04:	f04f 0b00 	mov.w	fp, #0
 801ed08:	2600      	movs	r6, #0
 801ed0a:	eba8 0504 	sub.w	r5, r8, r4
 801ed0e:	e0e2      	b.n	801eed6 <__kernel_rem_pio2+0x4be>
 801ed10:	f04f 0902 	mov.w	r9, #2
 801ed14:	e754      	b.n	801ebc0 <__kernel_rem_pio2+0x1a8>
 801ed16:	bf00      	nop
	...
 801ed24:	3ff00000 	.word	0x3ff00000
 801ed28:	08022028 	.word	0x08022028
 801ed2c:	40200000 	.word	0x40200000
 801ed30:	3ff00000 	.word	0x3ff00000
 801ed34:	3e700000 	.word	0x3e700000
 801ed38:	41700000 	.word	0x41700000
 801ed3c:	3fe00000 	.word	0x3fe00000
 801ed40:	08021fe8 	.word	0x08021fe8
 801ed44:	f854 3b04 	ldr.w	r3, [r4], #4
 801ed48:	b945      	cbnz	r5, 801ed5c <__kernel_rem_pio2+0x344>
 801ed4a:	b123      	cbz	r3, 801ed56 <__kernel_rem_pio2+0x33e>
 801ed4c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801ed50:	f844 3c04 	str.w	r3, [r4, #-4]
 801ed54:	2301      	movs	r3, #1
 801ed56:	3201      	adds	r2, #1
 801ed58:	461d      	mov	r5, r3
 801ed5a:	e738      	b.n	801ebce <__kernel_rem_pio2+0x1b6>
 801ed5c:	1acb      	subs	r3, r1, r3
 801ed5e:	e7f7      	b.n	801ed50 <__kernel_rem_pio2+0x338>
 801ed60:	f108 32ff 	add.w	r2, r8, #4294967295
 801ed64:	ab0c      	add	r3, sp, #48	@ 0x30
 801ed66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ed6a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801ed6e:	a90c      	add	r1, sp, #48	@ 0x30
 801ed70:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801ed74:	e739      	b.n	801ebea <__kernel_rem_pio2+0x1d2>
 801ed76:	f108 32ff 	add.w	r2, r8, #4294967295
 801ed7a:	ab0c      	add	r3, sp, #48	@ 0x30
 801ed7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ed80:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801ed84:	e7f3      	b.n	801ed6e <__kernel_rem_pio2+0x356>
 801ed86:	a90c      	add	r1, sp, #48	@ 0x30
 801ed88:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801ed8c:	3b01      	subs	r3, #1
 801ed8e:	430a      	orrs	r2, r1
 801ed90:	e787      	b.n	801eca2 <__kernel_rem_pio2+0x28a>
 801ed92:	3401      	adds	r4, #1
 801ed94:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801ed98:	2a00      	cmp	r2, #0
 801ed9a:	d0fa      	beq.n	801ed92 <__kernel_rem_pio2+0x37a>
 801ed9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ed9e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801eda2:	eb0d 0503 	add.w	r5, sp, r3
 801eda6:	9b06      	ldr	r3, [sp, #24]
 801eda8:	aa20      	add	r2, sp, #128	@ 0x80
 801edaa:	4443      	add	r3, r8
 801edac:	f108 0701 	add.w	r7, r8, #1
 801edb0:	3d98      	subs	r5, #152	@ 0x98
 801edb2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801edb6:	4444      	add	r4, r8
 801edb8:	42bc      	cmp	r4, r7
 801edba:	da04      	bge.n	801edc6 <__kernel_rem_pio2+0x3ae>
 801edbc:	46a0      	mov	r8, r4
 801edbe:	e6a2      	b.n	801eb06 <__kernel_rem_pio2+0xee>
 801edc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801edc2:	2401      	movs	r4, #1
 801edc4:	e7e6      	b.n	801ed94 <__kernel_rem_pio2+0x37c>
 801edc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801edc8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801edcc:	f7e1 fb82 	bl	80004d4 <__aeabi_i2d>
 801edd0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801f098 <__kernel_rem_pio2+0x680>
 801edd4:	e8e6 0102 	strd	r0, r1, [r6], #8
 801edd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801eddc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ede0:	46b2      	mov	sl, r6
 801ede2:	f04f 0800 	mov.w	r8, #0
 801ede6:	9b05      	ldr	r3, [sp, #20]
 801ede8:	4598      	cmp	r8, r3
 801edea:	dd05      	ble.n	801edf8 <__kernel_rem_pio2+0x3e0>
 801edec:	ed9d 7b02 	vldr	d7, [sp, #8]
 801edf0:	3701      	adds	r7, #1
 801edf2:	eca5 7b02 	vstmia	r5!, {d7}
 801edf6:	e7df      	b.n	801edb8 <__kernel_rem_pio2+0x3a0>
 801edf8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801edfc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801ee00:	f7e1 fbd2 	bl	80005a8 <__aeabi_dmul>
 801ee04:	4602      	mov	r2, r0
 801ee06:	460b      	mov	r3, r1
 801ee08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee0c:	f7e1 fa16 	bl	800023c <__adddf3>
 801ee10:	f108 0801 	add.w	r8, r8, #1
 801ee14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ee18:	e7e5      	b.n	801ede6 <__kernel_rem_pio2+0x3ce>
 801ee1a:	f1cb 0000 	rsb	r0, fp, #0
 801ee1e:	ec47 6b10 	vmov	d0, r6, r7
 801ee22:	f000 fbad 	bl	801f580 <scalbn>
 801ee26:	ec55 4b10 	vmov	r4, r5, d0
 801ee2a:	4b9d      	ldr	r3, [pc, #628]	@ (801f0a0 <__kernel_rem_pio2+0x688>)
 801ee2c:	2200      	movs	r2, #0
 801ee2e:	4620      	mov	r0, r4
 801ee30:	4629      	mov	r1, r5
 801ee32:	f7e1 fe3f 	bl	8000ab4 <__aeabi_dcmpge>
 801ee36:	b300      	cbz	r0, 801ee7a <__kernel_rem_pio2+0x462>
 801ee38:	4b9a      	ldr	r3, [pc, #616]	@ (801f0a4 <__kernel_rem_pio2+0x68c>)
 801ee3a:	2200      	movs	r2, #0
 801ee3c:	4620      	mov	r0, r4
 801ee3e:	4629      	mov	r1, r5
 801ee40:	f7e1 fbb2 	bl	80005a8 <__aeabi_dmul>
 801ee44:	f7e1 fe60 	bl	8000b08 <__aeabi_d2iz>
 801ee48:	4606      	mov	r6, r0
 801ee4a:	f7e1 fb43 	bl	80004d4 <__aeabi_i2d>
 801ee4e:	4b94      	ldr	r3, [pc, #592]	@ (801f0a0 <__kernel_rem_pio2+0x688>)
 801ee50:	2200      	movs	r2, #0
 801ee52:	f7e1 fba9 	bl	80005a8 <__aeabi_dmul>
 801ee56:	460b      	mov	r3, r1
 801ee58:	4602      	mov	r2, r0
 801ee5a:	4629      	mov	r1, r5
 801ee5c:	4620      	mov	r0, r4
 801ee5e:	f7e1 f9eb 	bl	8000238 <__aeabi_dsub>
 801ee62:	f7e1 fe51 	bl	8000b08 <__aeabi_d2iz>
 801ee66:	ab0c      	add	r3, sp, #48	@ 0x30
 801ee68:	f10b 0b18 	add.w	fp, fp, #24
 801ee6c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801ee70:	f108 0801 	add.w	r8, r8, #1
 801ee74:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801ee78:	e722      	b.n	801ecc0 <__kernel_rem_pio2+0x2a8>
 801ee7a:	4620      	mov	r0, r4
 801ee7c:	4629      	mov	r1, r5
 801ee7e:	f7e1 fe43 	bl	8000b08 <__aeabi_d2iz>
 801ee82:	ab0c      	add	r3, sp, #48	@ 0x30
 801ee84:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801ee88:	e71a      	b.n	801ecc0 <__kernel_rem_pio2+0x2a8>
 801ee8a:	ab0c      	add	r3, sp, #48	@ 0x30
 801ee8c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801ee90:	f7e1 fb20 	bl	80004d4 <__aeabi_i2d>
 801ee94:	4622      	mov	r2, r4
 801ee96:	462b      	mov	r3, r5
 801ee98:	f7e1 fb86 	bl	80005a8 <__aeabi_dmul>
 801ee9c:	4652      	mov	r2, sl
 801ee9e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801eea2:	465b      	mov	r3, fp
 801eea4:	4620      	mov	r0, r4
 801eea6:	4629      	mov	r1, r5
 801eea8:	f7e1 fb7e 	bl	80005a8 <__aeabi_dmul>
 801eeac:	3e01      	subs	r6, #1
 801eeae:	4604      	mov	r4, r0
 801eeb0:	460d      	mov	r5, r1
 801eeb2:	e718      	b.n	801ece6 <__kernel_rem_pio2+0x2ce>
 801eeb4:	9906      	ldr	r1, [sp, #24]
 801eeb6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801eeba:	9106      	str	r1, [sp, #24]
 801eebc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801eec0:	f7e1 fb72 	bl	80005a8 <__aeabi_dmul>
 801eec4:	4602      	mov	r2, r0
 801eec6:	460b      	mov	r3, r1
 801eec8:	4650      	mov	r0, sl
 801eeca:	4659      	mov	r1, fp
 801eecc:	f7e1 f9b6 	bl	800023c <__adddf3>
 801eed0:	3601      	adds	r6, #1
 801eed2:	4682      	mov	sl, r0
 801eed4:	468b      	mov	fp, r1
 801eed6:	9b00      	ldr	r3, [sp, #0]
 801eed8:	429e      	cmp	r6, r3
 801eeda:	dc01      	bgt.n	801eee0 <__kernel_rem_pio2+0x4c8>
 801eedc:	42b5      	cmp	r5, r6
 801eede:	dae9      	bge.n	801eeb4 <__kernel_rem_pio2+0x49c>
 801eee0:	ab48      	add	r3, sp, #288	@ 0x120
 801eee2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801eee6:	e9c5 ab00 	strd	sl, fp, [r5]
 801eeea:	3c01      	subs	r4, #1
 801eeec:	e6ff      	b.n	801ecee <__kernel_rem_pio2+0x2d6>
 801eeee:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801eef0:	2b02      	cmp	r3, #2
 801eef2:	dc0b      	bgt.n	801ef0c <__kernel_rem_pio2+0x4f4>
 801eef4:	2b00      	cmp	r3, #0
 801eef6:	dc39      	bgt.n	801ef6c <__kernel_rem_pio2+0x554>
 801eef8:	d05d      	beq.n	801efb6 <__kernel_rem_pio2+0x59e>
 801eefa:	9b02      	ldr	r3, [sp, #8]
 801eefc:	f003 0007 	and.w	r0, r3, #7
 801ef00:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801ef04:	ecbd 8b02 	vpop	{d8}
 801ef08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef0c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801ef0e:	2b03      	cmp	r3, #3
 801ef10:	d1f3      	bne.n	801eefa <__kernel_rem_pio2+0x4e2>
 801ef12:	9b05      	ldr	r3, [sp, #20]
 801ef14:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801ef18:	eb0d 0403 	add.w	r4, sp, r3
 801ef1c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801ef20:	4625      	mov	r5, r4
 801ef22:	46c2      	mov	sl, r8
 801ef24:	f1ba 0f00 	cmp.w	sl, #0
 801ef28:	f1a5 0508 	sub.w	r5, r5, #8
 801ef2c:	dc6b      	bgt.n	801f006 <__kernel_rem_pio2+0x5ee>
 801ef2e:	4645      	mov	r5, r8
 801ef30:	2d01      	cmp	r5, #1
 801ef32:	f1a4 0408 	sub.w	r4, r4, #8
 801ef36:	f300 8087 	bgt.w	801f048 <__kernel_rem_pio2+0x630>
 801ef3a:	9c05      	ldr	r4, [sp, #20]
 801ef3c:	ab48      	add	r3, sp, #288	@ 0x120
 801ef3e:	441c      	add	r4, r3
 801ef40:	2000      	movs	r0, #0
 801ef42:	2100      	movs	r1, #0
 801ef44:	f1b8 0f01 	cmp.w	r8, #1
 801ef48:	f300 809c 	bgt.w	801f084 <__kernel_rem_pio2+0x66c>
 801ef4c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801ef50:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801ef54:	f1b9 0f00 	cmp.w	r9, #0
 801ef58:	f040 80a6 	bne.w	801f0a8 <__kernel_rem_pio2+0x690>
 801ef5c:	9b04      	ldr	r3, [sp, #16]
 801ef5e:	e9c3 7800 	strd	r7, r8, [r3]
 801ef62:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801ef66:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801ef6a:	e7c6      	b.n	801eefa <__kernel_rem_pio2+0x4e2>
 801ef6c:	9d05      	ldr	r5, [sp, #20]
 801ef6e:	ab48      	add	r3, sp, #288	@ 0x120
 801ef70:	441d      	add	r5, r3
 801ef72:	4644      	mov	r4, r8
 801ef74:	2000      	movs	r0, #0
 801ef76:	2100      	movs	r1, #0
 801ef78:	2c00      	cmp	r4, #0
 801ef7a:	da35      	bge.n	801efe8 <__kernel_rem_pio2+0x5d0>
 801ef7c:	f1b9 0f00 	cmp.w	r9, #0
 801ef80:	d038      	beq.n	801eff4 <__kernel_rem_pio2+0x5dc>
 801ef82:	4602      	mov	r2, r0
 801ef84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ef88:	9c04      	ldr	r4, [sp, #16]
 801ef8a:	e9c4 2300 	strd	r2, r3, [r4]
 801ef8e:	4602      	mov	r2, r0
 801ef90:	460b      	mov	r3, r1
 801ef92:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801ef96:	f7e1 f94f 	bl	8000238 <__aeabi_dsub>
 801ef9a:	ad4a      	add	r5, sp, #296	@ 0x128
 801ef9c:	2401      	movs	r4, #1
 801ef9e:	45a0      	cmp	r8, r4
 801efa0:	da2b      	bge.n	801effa <__kernel_rem_pio2+0x5e2>
 801efa2:	f1b9 0f00 	cmp.w	r9, #0
 801efa6:	d002      	beq.n	801efae <__kernel_rem_pio2+0x596>
 801efa8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801efac:	4619      	mov	r1, r3
 801efae:	9b04      	ldr	r3, [sp, #16]
 801efb0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801efb4:	e7a1      	b.n	801eefa <__kernel_rem_pio2+0x4e2>
 801efb6:	9c05      	ldr	r4, [sp, #20]
 801efb8:	ab48      	add	r3, sp, #288	@ 0x120
 801efba:	441c      	add	r4, r3
 801efbc:	2000      	movs	r0, #0
 801efbe:	2100      	movs	r1, #0
 801efc0:	f1b8 0f00 	cmp.w	r8, #0
 801efc4:	da09      	bge.n	801efda <__kernel_rem_pio2+0x5c2>
 801efc6:	f1b9 0f00 	cmp.w	r9, #0
 801efca:	d002      	beq.n	801efd2 <__kernel_rem_pio2+0x5ba>
 801efcc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801efd0:	4619      	mov	r1, r3
 801efd2:	9b04      	ldr	r3, [sp, #16]
 801efd4:	e9c3 0100 	strd	r0, r1, [r3]
 801efd8:	e78f      	b.n	801eefa <__kernel_rem_pio2+0x4e2>
 801efda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801efde:	f7e1 f92d 	bl	800023c <__adddf3>
 801efe2:	f108 38ff 	add.w	r8, r8, #4294967295
 801efe6:	e7eb      	b.n	801efc0 <__kernel_rem_pio2+0x5a8>
 801efe8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801efec:	f7e1 f926 	bl	800023c <__adddf3>
 801eff0:	3c01      	subs	r4, #1
 801eff2:	e7c1      	b.n	801ef78 <__kernel_rem_pio2+0x560>
 801eff4:	4602      	mov	r2, r0
 801eff6:	460b      	mov	r3, r1
 801eff8:	e7c6      	b.n	801ef88 <__kernel_rem_pio2+0x570>
 801effa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801effe:	f7e1 f91d 	bl	800023c <__adddf3>
 801f002:	3401      	adds	r4, #1
 801f004:	e7cb      	b.n	801ef9e <__kernel_rem_pio2+0x586>
 801f006:	ed95 7b00 	vldr	d7, [r5]
 801f00a:	ed8d 7b00 	vstr	d7, [sp]
 801f00e:	ed95 7b02 	vldr	d7, [r5, #8]
 801f012:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f016:	ec53 2b17 	vmov	r2, r3, d7
 801f01a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f01e:	f7e1 f90d 	bl	800023c <__adddf3>
 801f022:	4602      	mov	r2, r0
 801f024:	460b      	mov	r3, r1
 801f026:	4606      	mov	r6, r0
 801f028:	460f      	mov	r7, r1
 801f02a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f02e:	f7e1 f903 	bl	8000238 <__aeabi_dsub>
 801f032:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f036:	f7e1 f901 	bl	800023c <__adddf3>
 801f03a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f03e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801f042:	e9c5 6700 	strd	r6, r7, [r5]
 801f046:	e76d      	b.n	801ef24 <__kernel_rem_pio2+0x50c>
 801f048:	ed94 7b00 	vldr	d7, [r4]
 801f04c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801f050:	ec51 0b17 	vmov	r0, r1, d7
 801f054:	4652      	mov	r2, sl
 801f056:	465b      	mov	r3, fp
 801f058:	ed8d 7b00 	vstr	d7, [sp]
 801f05c:	f7e1 f8ee 	bl	800023c <__adddf3>
 801f060:	4602      	mov	r2, r0
 801f062:	460b      	mov	r3, r1
 801f064:	4606      	mov	r6, r0
 801f066:	460f      	mov	r7, r1
 801f068:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f06c:	f7e1 f8e4 	bl	8000238 <__aeabi_dsub>
 801f070:	4652      	mov	r2, sl
 801f072:	465b      	mov	r3, fp
 801f074:	f7e1 f8e2 	bl	800023c <__adddf3>
 801f078:	3d01      	subs	r5, #1
 801f07a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801f07e:	e9c4 6700 	strd	r6, r7, [r4]
 801f082:	e755      	b.n	801ef30 <__kernel_rem_pio2+0x518>
 801f084:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f088:	f7e1 f8d8 	bl	800023c <__adddf3>
 801f08c:	f108 38ff 	add.w	r8, r8, #4294967295
 801f090:	e758      	b.n	801ef44 <__kernel_rem_pio2+0x52c>
 801f092:	bf00      	nop
 801f094:	f3af 8000 	nop.w
	...
 801f0a0:	41700000 	.word	0x41700000
 801f0a4:	3e700000 	.word	0x3e700000
 801f0a8:	9b04      	ldr	r3, [sp, #16]
 801f0aa:	9a04      	ldr	r2, [sp, #16]
 801f0ac:	601f      	str	r7, [r3, #0]
 801f0ae:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801f0b2:	605c      	str	r4, [r3, #4]
 801f0b4:	609d      	str	r5, [r3, #8]
 801f0b6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f0ba:	60d3      	str	r3, [r2, #12]
 801f0bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f0c0:	6110      	str	r0, [r2, #16]
 801f0c2:	6153      	str	r3, [r2, #20]
 801f0c4:	e719      	b.n	801eefa <__kernel_rem_pio2+0x4e2>
 801f0c6:	bf00      	nop

0801f0c8 <__ieee754_acos>:
 801f0c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0cc:	ec55 4b10 	vmov	r4, r5, d0
 801f0d0:	49b7      	ldr	r1, [pc, #732]	@ (801f3b0 <__ieee754_acos+0x2e8>)
 801f0d2:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801f0d6:	428b      	cmp	r3, r1
 801f0d8:	d919      	bls.n	801f10e <__ieee754_acos+0x46>
 801f0da:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 801f0de:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 801f0e2:	4323      	orrs	r3, r4
 801f0e4:	d106      	bne.n	801f0f4 <__ieee754_acos+0x2c>
 801f0e6:	2d00      	cmp	r5, #0
 801f0e8:	f340 8210 	ble.w	801f50c <__ieee754_acos+0x444>
 801f0ec:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 801f340 <__ieee754_acos+0x278>
 801f0f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0f4:	4622      	mov	r2, r4
 801f0f6:	462b      	mov	r3, r5
 801f0f8:	4620      	mov	r0, r4
 801f0fa:	4629      	mov	r1, r5
 801f0fc:	f7e1 f89c 	bl	8000238 <__aeabi_dsub>
 801f100:	4602      	mov	r2, r0
 801f102:	460b      	mov	r3, r1
 801f104:	f7e1 fb7a 	bl	80007fc <__aeabi_ddiv>
 801f108:	ec41 0b10 	vmov	d0, r0, r1
 801f10c:	e7f0      	b.n	801f0f0 <__ieee754_acos+0x28>
 801f10e:	49a9      	ldr	r1, [pc, #676]	@ (801f3b4 <__ieee754_acos+0x2ec>)
 801f110:	428b      	cmp	r3, r1
 801f112:	f200 8085 	bhi.w	801f220 <__ieee754_acos+0x158>
 801f116:	4aa8      	ldr	r2, [pc, #672]	@ (801f3b8 <__ieee754_acos+0x2f0>)
 801f118:	4293      	cmp	r3, r2
 801f11a:	f240 81fa 	bls.w	801f512 <__ieee754_acos+0x44a>
 801f11e:	4622      	mov	r2, r4
 801f120:	462b      	mov	r3, r5
 801f122:	4620      	mov	r0, r4
 801f124:	4629      	mov	r1, r5
 801f126:	f7e1 fa3f 	bl	80005a8 <__aeabi_dmul>
 801f12a:	a387      	add	r3, pc, #540	@ (adr r3, 801f348 <__ieee754_acos+0x280>)
 801f12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f130:	4606      	mov	r6, r0
 801f132:	460f      	mov	r7, r1
 801f134:	f7e1 fa38 	bl	80005a8 <__aeabi_dmul>
 801f138:	a385      	add	r3, pc, #532	@ (adr r3, 801f350 <__ieee754_acos+0x288>)
 801f13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f13e:	f7e1 f87d 	bl	800023c <__adddf3>
 801f142:	4632      	mov	r2, r6
 801f144:	463b      	mov	r3, r7
 801f146:	f7e1 fa2f 	bl	80005a8 <__aeabi_dmul>
 801f14a:	a383      	add	r3, pc, #524	@ (adr r3, 801f358 <__ieee754_acos+0x290>)
 801f14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f150:	f7e1 f872 	bl	8000238 <__aeabi_dsub>
 801f154:	4632      	mov	r2, r6
 801f156:	463b      	mov	r3, r7
 801f158:	f7e1 fa26 	bl	80005a8 <__aeabi_dmul>
 801f15c:	a380      	add	r3, pc, #512	@ (adr r3, 801f360 <__ieee754_acos+0x298>)
 801f15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f162:	f7e1 f86b 	bl	800023c <__adddf3>
 801f166:	4632      	mov	r2, r6
 801f168:	463b      	mov	r3, r7
 801f16a:	f7e1 fa1d 	bl	80005a8 <__aeabi_dmul>
 801f16e:	a37e      	add	r3, pc, #504	@ (adr r3, 801f368 <__ieee754_acos+0x2a0>)
 801f170:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f174:	f7e1 f860 	bl	8000238 <__aeabi_dsub>
 801f178:	4632      	mov	r2, r6
 801f17a:	463b      	mov	r3, r7
 801f17c:	f7e1 fa14 	bl	80005a8 <__aeabi_dmul>
 801f180:	a37b      	add	r3, pc, #492	@ (adr r3, 801f370 <__ieee754_acos+0x2a8>)
 801f182:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f186:	f7e1 f859 	bl	800023c <__adddf3>
 801f18a:	4632      	mov	r2, r6
 801f18c:	463b      	mov	r3, r7
 801f18e:	f7e1 fa0b 	bl	80005a8 <__aeabi_dmul>
 801f192:	a379      	add	r3, pc, #484	@ (adr r3, 801f378 <__ieee754_acos+0x2b0>)
 801f194:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f198:	4680      	mov	r8, r0
 801f19a:	4689      	mov	r9, r1
 801f19c:	4630      	mov	r0, r6
 801f19e:	4639      	mov	r1, r7
 801f1a0:	f7e1 fa02 	bl	80005a8 <__aeabi_dmul>
 801f1a4:	a376      	add	r3, pc, #472	@ (adr r3, 801f380 <__ieee754_acos+0x2b8>)
 801f1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1aa:	f7e1 f845 	bl	8000238 <__aeabi_dsub>
 801f1ae:	4632      	mov	r2, r6
 801f1b0:	463b      	mov	r3, r7
 801f1b2:	f7e1 f9f9 	bl	80005a8 <__aeabi_dmul>
 801f1b6:	a374      	add	r3, pc, #464	@ (adr r3, 801f388 <__ieee754_acos+0x2c0>)
 801f1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1bc:	f7e1 f83e 	bl	800023c <__adddf3>
 801f1c0:	4632      	mov	r2, r6
 801f1c2:	463b      	mov	r3, r7
 801f1c4:	f7e1 f9f0 	bl	80005a8 <__aeabi_dmul>
 801f1c8:	a371      	add	r3, pc, #452	@ (adr r3, 801f390 <__ieee754_acos+0x2c8>)
 801f1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1ce:	f7e1 f833 	bl	8000238 <__aeabi_dsub>
 801f1d2:	4632      	mov	r2, r6
 801f1d4:	463b      	mov	r3, r7
 801f1d6:	f7e1 f9e7 	bl	80005a8 <__aeabi_dmul>
 801f1da:	4b78      	ldr	r3, [pc, #480]	@ (801f3bc <__ieee754_acos+0x2f4>)
 801f1dc:	2200      	movs	r2, #0
 801f1de:	f7e1 f82d 	bl	800023c <__adddf3>
 801f1e2:	4602      	mov	r2, r0
 801f1e4:	460b      	mov	r3, r1
 801f1e6:	4640      	mov	r0, r8
 801f1e8:	4649      	mov	r1, r9
 801f1ea:	f7e1 fb07 	bl	80007fc <__aeabi_ddiv>
 801f1ee:	4622      	mov	r2, r4
 801f1f0:	462b      	mov	r3, r5
 801f1f2:	f7e1 f9d9 	bl	80005a8 <__aeabi_dmul>
 801f1f6:	4602      	mov	r2, r0
 801f1f8:	460b      	mov	r3, r1
 801f1fa:	a167      	add	r1, pc, #412	@ (adr r1, 801f398 <__ieee754_acos+0x2d0>)
 801f1fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f200:	f7e1 f81a 	bl	8000238 <__aeabi_dsub>
 801f204:	4602      	mov	r2, r0
 801f206:	460b      	mov	r3, r1
 801f208:	4620      	mov	r0, r4
 801f20a:	4629      	mov	r1, r5
 801f20c:	f7e1 f814 	bl	8000238 <__aeabi_dsub>
 801f210:	4602      	mov	r2, r0
 801f212:	460b      	mov	r3, r1
 801f214:	a162      	add	r1, pc, #392	@ (adr r1, 801f3a0 <__ieee754_acos+0x2d8>)
 801f216:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f21a:	f7e1 f80d 	bl	8000238 <__aeabi_dsub>
 801f21e:	e773      	b.n	801f108 <__ieee754_acos+0x40>
 801f220:	2d00      	cmp	r5, #0
 801f222:	f280 80cf 	bge.w	801f3c4 <__ieee754_acos+0x2fc>
 801f226:	4b65      	ldr	r3, [pc, #404]	@ (801f3bc <__ieee754_acos+0x2f4>)
 801f228:	2200      	movs	r2, #0
 801f22a:	4620      	mov	r0, r4
 801f22c:	4629      	mov	r1, r5
 801f22e:	f7e1 f805 	bl	800023c <__adddf3>
 801f232:	4b63      	ldr	r3, [pc, #396]	@ (801f3c0 <__ieee754_acos+0x2f8>)
 801f234:	2200      	movs	r2, #0
 801f236:	f7e1 f9b7 	bl	80005a8 <__aeabi_dmul>
 801f23a:	a343      	add	r3, pc, #268	@ (adr r3, 801f348 <__ieee754_acos+0x280>)
 801f23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f240:	4604      	mov	r4, r0
 801f242:	460d      	mov	r5, r1
 801f244:	f7e1 f9b0 	bl	80005a8 <__aeabi_dmul>
 801f248:	a341      	add	r3, pc, #260	@ (adr r3, 801f350 <__ieee754_acos+0x288>)
 801f24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f24e:	f7e0 fff5 	bl	800023c <__adddf3>
 801f252:	4622      	mov	r2, r4
 801f254:	462b      	mov	r3, r5
 801f256:	f7e1 f9a7 	bl	80005a8 <__aeabi_dmul>
 801f25a:	a33f      	add	r3, pc, #252	@ (adr r3, 801f358 <__ieee754_acos+0x290>)
 801f25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f260:	f7e0 ffea 	bl	8000238 <__aeabi_dsub>
 801f264:	4622      	mov	r2, r4
 801f266:	462b      	mov	r3, r5
 801f268:	f7e1 f99e 	bl	80005a8 <__aeabi_dmul>
 801f26c:	a33c      	add	r3, pc, #240	@ (adr r3, 801f360 <__ieee754_acos+0x298>)
 801f26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f272:	f7e0 ffe3 	bl	800023c <__adddf3>
 801f276:	4622      	mov	r2, r4
 801f278:	462b      	mov	r3, r5
 801f27a:	f7e1 f995 	bl	80005a8 <__aeabi_dmul>
 801f27e:	a33a      	add	r3, pc, #232	@ (adr r3, 801f368 <__ieee754_acos+0x2a0>)
 801f280:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f284:	f7e0 ffd8 	bl	8000238 <__aeabi_dsub>
 801f288:	4622      	mov	r2, r4
 801f28a:	462b      	mov	r3, r5
 801f28c:	f7e1 f98c 	bl	80005a8 <__aeabi_dmul>
 801f290:	a337      	add	r3, pc, #220	@ (adr r3, 801f370 <__ieee754_acos+0x2a8>)
 801f292:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f296:	f7e0 ffd1 	bl	800023c <__adddf3>
 801f29a:	4622      	mov	r2, r4
 801f29c:	462b      	mov	r3, r5
 801f29e:	f7e1 f983 	bl	80005a8 <__aeabi_dmul>
 801f2a2:	a335      	add	r3, pc, #212	@ (adr r3, 801f378 <__ieee754_acos+0x2b0>)
 801f2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2a8:	4606      	mov	r6, r0
 801f2aa:	460f      	mov	r7, r1
 801f2ac:	4620      	mov	r0, r4
 801f2ae:	4629      	mov	r1, r5
 801f2b0:	f7e1 f97a 	bl	80005a8 <__aeabi_dmul>
 801f2b4:	a332      	add	r3, pc, #200	@ (adr r3, 801f380 <__ieee754_acos+0x2b8>)
 801f2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2ba:	f7e0 ffbd 	bl	8000238 <__aeabi_dsub>
 801f2be:	4622      	mov	r2, r4
 801f2c0:	462b      	mov	r3, r5
 801f2c2:	f7e1 f971 	bl	80005a8 <__aeabi_dmul>
 801f2c6:	a330      	add	r3, pc, #192	@ (adr r3, 801f388 <__ieee754_acos+0x2c0>)
 801f2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2cc:	f7e0 ffb6 	bl	800023c <__adddf3>
 801f2d0:	4622      	mov	r2, r4
 801f2d2:	462b      	mov	r3, r5
 801f2d4:	f7e1 f968 	bl	80005a8 <__aeabi_dmul>
 801f2d8:	a32d      	add	r3, pc, #180	@ (adr r3, 801f390 <__ieee754_acos+0x2c8>)
 801f2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2de:	f7e0 ffab 	bl	8000238 <__aeabi_dsub>
 801f2e2:	4622      	mov	r2, r4
 801f2e4:	462b      	mov	r3, r5
 801f2e6:	f7e1 f95f 	bl	80005a8 <__aeabi_dmul>
 801f2ea:	4b34      	ldr	r3, [pc, #208]	@ (801f3bc <__ieee754_acos+0x2f4>)
 801f2ec:	2200      	movs	r2, #0
 801f2ee:	f7e0 ffa5 	bl	800023c <__adddf3>
 801f2f2:	ec45 4b10 	vmov	d0, r4, r5
 801f2f6:	4680      	mov	r8, r0
 801f2f8:	4689      	mov	r9, r1
 801f2fa:	f000 f9bf 	bl	801f67c <__ieee754_sqrt>
 801f2fe:	ec55 4b10 	vmov	r4, r5, d0
 801f302:	4642      	mov	r2, r8
 801f304:	464b      	mov	r3, r9
 801f306:	4630      	mov	r0, r6
 801f308:	4639      	mov	r1, r7
 801f30a:	f7e1 fa77 	bl	80007fc <__aeabi_ddiv>
 801f30e:	4622      	mov	r2, r4
 801f310:	462b      	mov	r3, r5
 801f312:	f7e1 f949 	bl	80005a8 <__aeabi_dmul>
 801f316:	a320      	add	r3, pc, #128	@ (adr r3, 801f398 <__ieee754_acos+0x2d0>)
 801f318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f31c:	f7e0 ff8c 	bl	8000238 <__aeabi_dsub>
 801f320:	4622      	mov	r2, r4
 801f322:	462b      	mov	r3, r5
 801f324:	f7e0 ff8a 	bl	800023c <__adddf3>
 801f328:	4602      	mov	r2, r0
 801f32a:	460b      	mov	r3, r1
 801f32c:	f7e0 ff86 	bl	800023c <__adddf3>
 801f330:	4602      	mov	r2, r0
 801f332:	460b      	mov	r3, r1
 801f334:	a11c      	add	r1, pc, #112	@ (adr r1, 801f3a8 <__ieee754_acos+0x2e0>)
 801f336:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f33a:	e76e      	b.n	801f21a <__ieee754_acos+0x152>
 801f33c:	f3af 8000 	nop.w
	...
 801f348:	0dfdf709 	.word	0x0dfdf709
 801f34c:	3f023de1 	.word	0x3f023de1
 801f350:	7501b288 	.word	0x7501b288
 801f354:	3f49efe0 	.word	0x3f49efe0
 801f358:	b5688f3b 	.word	0xb5688f3b
 801f35c:	3fa48228 	.word	0x3fa48228
 801f360:	0e884455 	.word	0x0e884455
 801f364:	3fc9c155 	.word	0x3fc9c155
 801f368:	03eb6f7d 	.word	0x03eb6f7d
 801f36c:	3fd4d612 	.word	0x3fd4d612
 801f370:	55555555 	.word	0x55555555
 801f374:	3fc55555 	.word	0x3fc55555
 801f378:	b12e9282 	.word	0xb12e9282
 801f37c:	3fb3b8c5 	.word	0x3fb3b8c5
 801f380:	1b8d0159 	.word	0x1b8d0159
 801f384:	3fe6066c 	.word	0x3fe6066c
 801f388:	9c598ac8 	.word	0x9c598ac8
 801f38c:	40002ae5 	.word	0x40002ae5
 801f390:	1c8a2d4b 	.word	0x1c8a2d4b
 801f394:	40033a27 	.word	0x40033a27
 801f398:	33145c07 	.word	0x33145c07
 801f39c:	3c91a626 	.word	0x3c91a626
 801f3a0:	54442d18 	.word	0x54442d18
 801f3a4:	3ff921fb 	.word	0x3ff921fb
 801f3a8:	54442d18 	.word	0x54442d18
 801f3ac:	400921fb 	.word	0x400921fb
 801f3b0:	3fefffff 	.word	0x3fefffff
 801f3b4:	3fdfffff 	.word	0x3fdfffff
 801f3b8:	3c600000 	.word	0x3c600000
 801f3bc:	3ff00000 	.word	0x3ff00000
 801f3c0:	3fe00000 	.word	0x3fe00000
 801f3c4:	4622      	mov	r2, r4
 801f3c6:	462b      	mov	r3, r5
 801f3c8:	496b      	ldr	r1, [pc, #428]	@ (801f578 <__ieee754_acos+0x4b0>)
 801f3ca:	2000      	movs	r0, #0
 801f3cc:	f7e0 ff34 	bl	8000238 <__aeabi_dsub>
 801f3d0:	4b6a      	ldr	r3, [pc, #424]	@ (801f57c <__ieee754_acos+0x4b4>)
 801f3d2:	2200      	movs	r2, #0
 801f3d4:	f7e1 f8e8 	bl	80005a8 <__aeabi_dmul>
 801f3d8:	4604      	mov	r4, r0
 801f3da:	460d      	mov	r5, r1
 801f3dc:	ec45 4b10 	vmov	d0, r4, r5
 801f3e0:	f000 f94c 	bl	801f67c <__ieee754_sqrt>
 801f3e4:	a34c      	add	r3, pc, #304	@ (adr r3, 801f518 <__ieee754_acos+0x450>)
 801f3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3ea:	4620      	mov	r0, r4
 801f3ec:	4629      	mov	r1, r5
 801f3ee:	ec59 8b10 	vmov	r8, r9, d0
 801f3f2:	f7e1 f8d9 	bl	80005a8 <__aeabi_dmul>
 801f3f6:	a34a      	add	r3, pc, #296	@ (adr r3, 801f520 <__ieee754_acos+0x458>)
 801f3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3fc:	f7e0 ff1e 	bl	800023c <__adddf3>
 801f400:	4622      	mov	r2, r4
 801f402:	462b      	mov	r3, r5
 801f404:	f7e1 f8d0 	bl	80005a8 <__aeabi_dmul>
 801f408:	a347      	add	r3, pc, #284	@ (adr r3, 801f528 <__ieee754_acos+0x460>)
 801f40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f40e:	f7e0 ff13 	bl	8000238 <__aeabi_dsub>
 801f412:	4622      	mov	r2, r4
 801f414:	462b      	mov	r3, r5
 801f416:	f7e1 f8c7 	bl	80005a8 <__aeabi_dmul>
 801f41a:	a345      	add	r3, pc, #276	@ (adr r3, 801f530 <__ieee754_acos+0x468>)
 801f41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f420:	f7e0 ff0c 	bl	800023c <__adddf3>
 801f424:	4622      	mov	r2, r4
 801f426:	462b      	mov	r3, r5
 801f428:	f7e1 f8be 	bl	80005a8 <__aeabi_dmul>
 801f42c:	a342      	add	r3, pc, #264	@ (adr r3, 801f538 <__ieee754_acos+0x470>)
 801f42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f432:	f7e0 ff01 	bl	8000238 <__aeabi_dsub>
 801f436:	4622      	mov	r2, r4
 801f438:	462b      	mov	r3, r5
 801f43a:	f7e1 f8b5 	bl	80005a8 <__aeabi_dmul>
 801f43e:	a340      	add	r3, pc, #256	@ (adr r3, 801f540 <__ieee754_acos+0x478>)
 801f440:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f444:	f7e0 fefa 	bl	800023c <__adddf3>
 801f448:	4622      	mov	r2, r4
 801f44a:	462b      	mov	r3, r5
 801f44c:	f7e1 f8ac 	bl	80005a8 <__aeabi_dmul>
 801f450:	a33d      	add	r3, pc, #244	@ (adr r3, 801f548 <__ieee754_acos+0x480>)
 801f452:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f456:	4682      	mov	sl, r0
 801f458:	468b      	mov	fp, r1
 801f45a:	4620      	mov	r0, r4
 801f45c:	4629      	mov	r1, r5
 801f45e:	f7e1 f8a3 	bl	80005a8 <__aeabi_dmul>
 801f462:	a33b      	add	r3, pc, #236	@ (adr r3, 801f550 <__ieee754_acos+0x488>)
 801f464:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f468:	f7e0 fee6 	bl	8000238 <__aeabi_dsub>
 801f46c:	4622      	mov	r2, r4
 801f46e:	462b      	mov	r3, r5
 801f470:	f7e1 f89a 	bl	80005a8 <__aeabi_dmul>
 801f474:	a338      	add	r3, pc, #224	@ (adr r3, 801f558 <__ieee754_acos+0x490>)
 801f476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f47a:	f7e0 fedf 	bl	800023c <__adddf3>
 801f47e:	4622      	mov	r2, r4
 801f480:	462b      	mov	r3, r5
 801f482:	f7e1 f891 	bl	80005a8 <__aeabi_dmul>
 801f486:	a336      	add	r3, pc, #216	@ (adr r3, 801f560 <__ieee754_acos+0x498>)
 801f488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f48c:	f7e0 fed4 	bl	8000238 <__aeabi_dsub>
 801f490:	4622      	mov	r2, r4
 801f492:	462b      	mov	r3, r5
 801f494:	f7e1 f888 	bl	80005a8 <__aeabi_dmul>
 801f498:	4b37      	ldr	r3, [pc, #220]	@ (801f578 <__ieee754_acos+0x4b0>)
 801f49a:	2200      	movs	r2, #0
 801f49c:	f7e0 fece 	bl	800023c <__adddf3>
 801f4a0:	4602      	mov	r2, r0
 801f4a2:	460b      	mov	r3, r1
 801f4a4:	4650      	mov	r0, sl
 801f4a6:	4659      	mov	r1, fp
 801f4a8:	f7e1 f9a8 	bl	80007fc <__aeabi_ddiv>
 801f4ac:	4642      	mov	r2, r8
 801f4ae:	464b      	mov	r3, r9
 801f4b0:	f7e1 f87a 	bl	80005a8 <__aeabi_dmul>
 801f4b4:	2600      	movs	r6, #0
 801f4b6:	4682      	mov	sl, r0
 801f4b8:	468b      	mov	fp, r1
 801f4ba:	4632      	mov	r2, r6
 801f4bc:	464b      	mov	r3, r9
 801f4be:	4630      	mov	r0, r6
 801f4c0:	4649      	mov	r1, r9
 801f4c2:	f7e1 f871 	bl	80005a8 <__aeabi_dmul>
 801f4c6:	4602      	mov	r2, r0
 801f4c8:	460b      	mov	r3, r1
 801f4ca:	4620      	mov	r0, r4
 801f4cc:	4629      	mov	r1, r5
 801f4ce:	f7e0 feb3 	bl	8000238 <__aeabi_dsub>
 801f4d2:	4632      	mov	r2, r6
 801f4d4:	4604      	mov	r4, r0
 801f4d6:	460d      	mov	r5, r1
 801f4d8:	464b      	mov	r3, r9
 801f4da:	4640      	mov	r0, r8
 801f4dc:	4649      	mov	r1, r9
 801f4de:	f7e0 fead 	bl	800023c <__adddf3>
 801f4e2:	4602      	mov	r2, r0
 801f4e4:	460b      	mov	r3, r1
 801f4e6:	4620      	mov	r0, r4
 801f4e8:	4629      	mov	r1, r5
 801f4ea:	f7e1 f987 	bl	80007fc <__aeabi_ddiv>
 801f4ee:	4602      	mov	r2, r0
 801f4f0:	460b      	mov	r3, r1
 801f4f2:	4650      	mov	r0, sl
 801f4f4:	4659      	mov	r1, fp
 801f4f6:	f7e0 fea1 	bl	800023c <__adddf3>
 801f4fa:	4632      	mov	r2, r6
 801f4fc:	464b      	mov	r3, r9
 801f4fe:	f7e0 fe9d 	bl	800023c <__adddf3>
 801f502:	4602      	mov	r2, r0
 801f504:	460b      	mov	r3, r1
 801f506:	f7e0 fe99 	bl	800023c <__adddf3>
 801f50a:	e5fd      	b.n	801f108 <__ieee754_acos+0x40>
 801f50c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 801f568 <__ieee754_acos+0x4a0>
 801f510:	e5ee      	b.n	801f0f0 <__ieee754_acos+0x28>
 801f512:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801f570 <__ieee754_acos+0x4a8>
 801f516:	e5eb      	b.n	801f0f0 <__ieee754_acos+0x28>
 801f518:	0dfdf709 	.word	0x0dfdf709
 801f51c:	3f023de1 	.word	0x3f023de1
 801f520:	7501b288 	.word	0x7501b288
 801f524:	3f49efe0 	.word	0x3f49efe0
 801f528:	b5688f3b 	.word	0xb5688f3b
 801f52c:	3fa48228 	.word	0x3fa48228
 801f530:	0e884455 	.word	0x0e884455
 801f534:	3fc9c155 	.word	0x3fc9c155
 801f538:	03eb6f7d 	.word	0x03eb6f7d
 801f53c:	3fd4d612 	.word	0x3fd4d612
 801f540:	55555555 	.word	0x55555555
 801f544:	3fc55555 	.word	0x3fc55555
 801f548:	b12e9282 	.word	0xb12e9282
 801f54c:	3fb3b8c5 	.word	0x3fb3b8c5
 801f550:	1b8d0159 	.word	0x1b8d0159
 801f554:	3fe6066c 	.word	0x3fe6066c
 801f558:	9c598ac8 	.word	0x9c598ac8
 801f55c:	40002ae5 	.word	0x40002ae5
 801f560:	1c8a2d4b 	.word	0x1c8a2d4b
 801f564:	40033a27 	.word	0x40033a27
 801f568:	54442d18 	.word	0x54442d18
 801f56c:	400921fb 	.word	0x400921fb
 801f570:	54442d18 	.word	0x54442d18
 801f574:	3ff921fb 	.word	0x3ff921fb
 801f578:	3ff00000 	.word	0x3ff00000
 801f57c:	3fe00000 	.word	0x3fe00000

0801f580 <scalbn>:
 801f580:	b570      	push	{r4, r5, r6, lr}
 801f582:	ec55 4b10 	vmov	r4, r5, d0
 801f586:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801f58a:	4606      	mov	r6, r0
 801f58c:	462b      	mov	r3, r5
 801f58e:	b991      	cbnz	r1, 801f5b6 <scalbn+0x36>
 801f590:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801f594:	4323      	orrs	r3, r4
 801f596:	d03d      	beq.n	801f614 <scalbn+0x94>
 801f598:	4b35      	ldr	r3, [pc, #212]	@ (801f670 <scalbn+0xf0>)
 801f59a:	4620      	mov	r0, r4
 801f59c:	4629      	mov	r1, r5
 801f59e:	2200      	movs	r2, #0
 801f5a0:	f7e1 f802 	bl	80005a8 <__aeabi_dmul>
 801f5a4:	4b33      	ldr	r3, [pc, #204]	@ (801f674 <scalbn+0xf4>)
 801f5a6:	429e      	cmp	r6, r3
 801f5a8:	4604      	mov	r4, r0
 801f5aa:	460d      	mov	r5, r1
 801f5ac:	da0f      	bge.n	801f5ce <scalbn+0x4e>
 801f5ae:	a328      	add	r3, pc, #160	@ (adr r3, 801f650 <scalbn+0xd0>)
 801f5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5b4:	e01e      	b.n	801f5f4 <scalbn+0x74>
 801f5b6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801f5ba:	4291      	cmp	r1, r2
 801f5bc:	d10b      	bne.n	801f5d6 <scalbn+0x56>
 801f5be:	4622      	mov	r2, r4
 801f5c0:	4620      	mov	r0, r4
 801f5c2:	4629      	mov	r1, r5
 801f5c4:	f7e0 fe3a 	bl	800023c <__adddf3>
 801f5c8:	4604      	mov	r4, r0
 801f5ca:	460d      	mov	r5, r1
 801f5cc:	e022      	b.n	801f614 <scalbn+0x94>
 801f5ce:	460b      	mov	r3, r1
 801f5d0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801f5d4:	3936      	subs	r1, #54	@ 0x36
 801f5d6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801f5da:	4296      	cmp	r6, r2
 801f5dc:	dd0d      	ble.n	801f5fa <scalbn+0x7a>
 801f5de:	2d00      	cmp	r5, #0
 801f5e0:	a11d      	add	r1, pc, #116	@ (adr r1, 801f658 <scalbn+0xd8>)
 801f5e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f5e6:	da02      	bge.n	801f5ee <scalbn+0x6e>
 801f5e8:	a11d      	add	r1, pc, #116	@ (adr r1, 801f660 <scalbn+0xe0>)
 801f5ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f5ee:	a31a      	add	r3, pc, #104	@ (adr r3, 801f658 <scalbn+0xd8>)
 801f5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5f4:	f7e0 ffd8 	bl	80005a8 <__aeabi_dmul>
 801f5f8:	e7e6      	b.n	801f5c8 <scalbn+0x48>
 801f5fa:	1872      	adds	r2, r6, r1
 801f5fc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801f600:	428a      	cmp	r2, r1
 801f602:	dcec      	bgt.n	801f5de <scalbn+0x5e>
 801f604:	2a00      	cmp	r2, #0
 801f606:	dd08      	ble.n	801f61a <scalbn+0x9a>
 801f608:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801f60c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801f610:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f614:	ec45 4b10 	vmov	d0, r4, r5
 801f618:	bd70      	pop	{r4, r5, r6, pc}
 801f61a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801f61e:	da08      	bge.n	801f632 <scalbn+0xb2>
 801f620:	2d00      	cmp	r5, #0
 801f622:	a10b      	add	r1, pc, #44	@ (adr r1, 801f650 <scalbn+0xd0>)
 801f624:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f628:	dac1      	bge.n	801f5ae <scalbn+0x2e>
 801f62a:	a10f      	add	r1, pc, #60	@ (adr r1, 801f668 <scalbn+0xe8>)
 801f62c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f630:	e7bd      	b.n	801f5ae <scalbn+0x2e>
 801f632:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801f636:	3236      	adds	r2, #54	@ 0x36
 801f638:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801f63c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f640:	4620      	mov	r0, r4
 801f642:	4b0d      	ldr	r3, [pc, #52]	@ (801f678 <scalbn+0xf8>)
 801f644:	4629      	mov	r1, r5
 801f646:	2200      	movs	r2, #0
 801f648:	e7d4      	b.n	801f5f4 <scalbn+0x74>
 801f64a:	bf00      	nop
 801f64c:	f3af 8000 	nop.w
 801f650:	c2f8f359 	.word	0xc2f8f359
 801f654:	01a56e1f 	.word	0x01a56e1f
 801f658:	8800759c 	.word	0x8800759c
 801f65c:	7e37e43c 	.word	0x7e37e43c
 801f660:	8800759c 	.word	0x8800759c
 801f664:	fe37e43c 	.word	0xfe37e43c
 801f668:	c2f8f359 	.word	0xc2f8f359
 801f66c:	81a56e1f 	.word	0x81a56e1f
 801f670:	43500000 	.word	0x43500000
 801f674:	ffff3cb0 	.word	0xffff3cb0
 801f678:	3c900000 	.word	0x3c900000

0801f67c <__ieee754_sqrt>:
 801f67c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f680:	4a68      	ldr	r2, [pc, #416]	@ (801f824 <__ieee754_sqrt+0x1a8>)
 801f682:	ec55 4b10 	vmov	r4, r5, d0
 801f686:	43aa      	bics	r2, r5
 801f688:	462b      	mov	r3, r5
 801f68a:	4621      	mov	r1, r4
 801f68c:	d110      	bne.n	801f6b0 <__ieee754_sqrt+0x34>
 801f68e:	4622      	mov	r2, r4
 801f690:	4620      	mov	r0, r4
 801f692:	4629      	mov	r1, r5
 801f694:	f7e0 ff88 	bl	80005a8 <__aeabi_dmul>
 801f698:	4602      	mov	r2, r0
 801f69a:	460b      	mov	r3, r1
 801f69c:	4620      	mov	r0, r4
 801f69e:	4629      	mov	r1, r5
 801f6a0:	f7e0 fdcc 	bl	800023c <__adddf3>
 801f6a4:	4604      	mov	r4, r0
 801f6a6:	460d      	mov	r5, r1
 801f6a8:	ec45 4b10 	vmov	d0, r4, r5
 801f6ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6b0:	2d00      	cmp	r5, #0
 801f6b2:	dc0e      	bgt.n	801f6d2 <__ieee754_sqrt+0x56>
 801f6b4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801f6b8:	4322      	orrs	r2, r4
 801f6ba:	d0f5      	beq.n	801f6a8 <__ieee754_sqrt+0x2c>
 801f6bc:	b19d      	cbz	r5, 801f6e6 <__ieee754_sqrt+0x6a>
 801f6be:	4622      	mov	r2, r4
 801f6c0:	4620      	mov	r0, r4
 801f6c2:	4629      	mov	r1, r5
 801f6c4:	f7e0 fdb8 	bl	8000238 <__aeabi_dsub>
 801f6c8:	4602      	mov	r2, r0
 801f6ca:	460b      	mov	r3, r1
 801f6cc:	f7e1 f896 	bl	80007fc <__aeabi_ddiv>
 801f6d0:	e7e8      	b.n	801f6a4 <__ieee754_sqrt+0x28>
 801f6d2:	152a      	asrs	r2, r5, #20
 801f6d4:	d115      	bne.n	801f702 <__ieee754_sqrt+0x86>
 801f6d6:	2000      	movs	r0, #0
 801f6d8:	e009      	b.n	801f6ee <__ieee754_sqrt+0x72>
 801f6da:	0acb      	lsrs	r3, r1, #11
 801f6dc:	3a15      	subs	r2, #21
 801f6de:	0549      	lsls	r1, r1, #21
 801f6e0:	2b00      	cmp	r3, #0
 801f6e2:	d0fa      	beq.n	801f6da <__ieee754_sqrt+0x5e>
 801f6e4:	e7f7      	b.n	801f6d6 <__ieee754_sqrt+0x5a>
 801f6e6:	462a      	mov	r2, r5
 801f6e8:	e7fa      	b.n	801f6e0 <__ieee754_sqrt+0x64>
 801f6ea:	005b      	lsls	r3, r3, #1
 801f6ec:	3001      	adds	r0, #1
 801f6ee:	02dc      	lsls	r4, r3, #11
 801f6f0:	d5fb      	bpl.n	801f6ea <__ieee754_sqrt+0x6e>
 801f6f2:	1e44      	subs	r4, r0, #1
 801f6f4:	1b12      	subs	r2, r2, r4
 801f6f6:	f1c0 0420 	rsb	r4, r0, #32
 801f6fa:	fa21 f404 	lsr.w	r4, r1, r4
 801f6fe:	4323      	orrs	r3, r4
 801f700:	4081      	lsls	r1, r0
 801f702:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f706:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801f70a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f70e:	07d2      	lsls	r2, r2, #31
 801f710:	bf5c      	itt	pl
 801f712:	005b      	lslpl	r3, r3, #1
 801f714:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801f718:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f71c:	bf58      	it	pl
 801f71e:	0049      	lslpl	r1, r1, #1
 801f720:	2600      	movs	r6, #0
 801f722:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801f726:	106d      	asrs	r5, r5, #1
 801f728:	0049      	lsls	r1, r1, #1
 801f72a:	2016      	movs	r0, #22
 801f72c:	4632      	mov	r2, r6
 801f72e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801f732:	1917      	adds	r7, r2, r4
 801f734:	429f      	cmp	r7, r3
 801f736:	bfde      	ittt	le
 801f738:	193a      	addle	r2, r7, r4
 801f73a:	1bdb      	suble	r3, r3, r7
 801f73c:	1936      	addle	r6, r6, r4
 801f73e:	0fcf      	lsrs	r7, r1, #31
 801f740:	3801      	subs	r0, #1
 801f742:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801f746:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f74a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801f74e:	d1f0      	bne.n	801f732 <__ieee754_sqrt+0xb6>
 801f750:	4604      	mov	r4, r0
 801f752:	2720      	movs	r7, #32
 801f754:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801f758:	429a      	cmp	r2, r3
 801f75a:	eb00 0e0c 	add.w	lr, r0, ip
 801f75e:	db02      	blt.n	801f766 <__ieee754_sqrt+0xea>
 801f760:	d113      	bne.n	801f78a <__ieee754_sqrt+0x10e>
 801f762:	458e      	cmp	lr, r1
 801f764:	d811      	bhi.n	801f78a <__ieee754_sqrt+0x10e>
 801f766:	f1be 0f00 	cmp.w	lr, #0
 801f76a:	eb0e 000c 	add.w	r0, lr, ip
 801f76e:	da42      	bge.n	801f7f6 <__ieee754_sqrt+0x17a>
 801f770:	2800      	cmp	r0, #0
 801f772:	db40      	blt.n	801f7f6 <__ieee754_sqrt+0x17a>
 801f774:	f102 0801 	add.w	r8, r2, #1
 801f778:	1a9b      	subs	r3, r3, r2
 801f77a:	458e      	cmp	lr, r1
 801f77c:	bf88      	it	hi
 801f77e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801f782:	eba1 010e 	sub.w	r1, r1, lr
 801f786:	4464      	add	r4, ip
 801f788:	4642      	mov	r2, r8
 801f78a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801f78e:	3f01      	subs	r7, #1
 801f790:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801f794:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f798:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801f79c:	d1dc      	bne.n	801f758 <__ieee754_sqrt+0xdc>
 801f79e:	4319      	orrs	r1, r3
 801f7a0:	d01b      	beq.n	801f7da <__ieee754_sqrt+0x15e>
 801f7a2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801f828 <__ieee754_sqrt+0x1ac>
 801f7a6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801f82c <__ieee754_sqrt+0x1b0>
 801f7aa:	e9da 0100 	ldrd	r0, r1, [sl]
 801f7ae:	e9db 2300 	ldrd	r2, r3, [fp]
 801f7b2:	f7e0 fd41 	bl	8000238 <__aeabi_dsub>
 801f7b6:	e9da 8900 	ldrd	r8, r9, [sl]
 801f7ba:	4602      	mov	r2, r0
 801f7bc:	460b      	mov	r3, r1
 801f7be:	4640      	mov	r0, r8
 801f7c0:	4649      	mov	r1, r9
 801f7c2:	f7e1 f96d 	bl	8000aa0 <__aeabi_dcmple>
 801f7c6:	b140      	cbz	r0, 801f7da <__ieee754_sqrt+0x15e>
 801f7c8:	f1b4 3fff 	cmp.w	r4, #4294967295
 801f7cc:	e9da 0100 	ldrd	r0, r1, [sl]
 801f7d0:	e9db 2300 	ldrd	r2, r3, [fp]
 801f7d4:	d111      	bne.n	801f7fa <__ieee754_sqrt+0x17e>
 801f7d6:	3601      	adds	r6, #1
 801f7d8:	463c      	mov	r4, r7
 801f7da:	1072      	asrs	r2, r6, #1
 801f7dc:	0863      	lsrs	r3, r4, #1
 801f7de:	07f1      	lsls	r1, r6, #31
 801f7e0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801f7e4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801f7e8:	bf48      	it	mi
 801f7ea:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801f7ee:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801f7f2:	4618      	mov	r0, r3
 801f7f4:	e756      	b.n	801f6a4 <__ieee754_sqrt+0x28>
 801f7f6:	4690      	mov	r8, r2
 801f7f8:	e7be      	b.n	801f778 <__ieee754_sqrt+0xfc>
 801f7fa:	f7e0 fd1f 	bl	800023c <__adddf3>
 801f7fe:	e9da 8900 	ldrd	r8, r9, [sl]
 801f802:	4602      	mov	r2, r0
 801f804:	460b      	mov	r3, r1
 801f806:	4640      	mov	r0, r8
 801f808:	4649      	mov	r1, r9
 801f80a:	f7e1 f93f 	bl	8000a8c <__aeabi_dcmplt>
 801f80e:	b120      	cbz	r0, 801f81a <__ieee754_sqrt+0x19e>
 801f810:	1ca0      	adds	r0, r4, #2
 801f812:	bf08      	it	eq
 801f814:	3601      	addeq	r6, #1
 801f816:	3402      	adds	r4, #2
 801f818:	e7df      	b.n	801f7da <__ieee754_sqrt+0x15e>
 801f81a:	1c63      	adds	r3, r4, #1
 801f81c:	f023 0401 	bic.w	r4, r3, #1
 801f820:	e7db      	b.n	801f7da <__ieee754_sqrt+0x15e>
 801f822:	bf00      	nop
 801f824:	7ff00000 	.word	0x7ff00000
 801f828:	20000318 	.word	0x20000318
 801f82c:	20000310 	.word	0x20000310

0801f830 <_init>:
 801f830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f832:	bf00      	nop
 801f834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f836:	bc08      	pop	{r3}
 801f838:	469e      	mov	lr, r3
 801f83a:	4770      	bx	lr

0801f83c <_fini>:
 801f83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f83e:	bf00      	nop
 801f840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f842:	bc08      	pop	{r3}
 801f844:	469e      	mov	lr, r3
 801f846:	4770      	bx	lr
