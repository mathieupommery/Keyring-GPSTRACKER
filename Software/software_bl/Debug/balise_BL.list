
balise_BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000215a0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002858  080216e0  080216e0  000316e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08023f38  08023f38  00033f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08023f40  08023f40  00033f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08023f44  08023f44  00033f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000318  20000008  08023f48  00040008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000320  08024260  00040320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000358  08024295  00040358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ec0  20000370  080242a6  00040370  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003230  080242a6  00043230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00060000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00060000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080242a6  000501e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00050a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   0004d4e2  00000000  00000000  00050ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000a7d4  00000000  00000000  0009dfbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003f50  00000000  00000000  000a8790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00003073  00000000  00000000  000ac6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000390b2  00000000  00000000  000af753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00055d8f  00000000  00000000  000e8805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0011e43c  00000000  00000000  0013e594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00012460  00000000  00000000  0025c9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000076  00000000  00000000  0026ee30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000370 	.word	0x20000370
 800015c:	00000000 	.word	0x00000000
 8000160:	080216c8 	.word	0x080216c8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000374 	.word	0x20000374
 800017c:	080216c8 	.word	0x080216c8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a6 	b.w	8000f9c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9e08      	ldr	r6, [sp, #32]
 8000cda:	460d      	mov	r5, r1
 8000cdc:	4604      	mov	r4, r0
 8000cde:	460f      	mov	r7, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14a      	bne.n	8000d7a <__udivmoddi4+0xa6>
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	4694      	mov	ip, r2
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0xe2>
 8000cea:	fab2 f382 	clz	r3, r2
 8000cee:	b143      	cbz	r3, 8000d02 <__udivmoddi4+0x2e>
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	f1c3 0220 	rsb	r2, r3, #32
 8000cf8:	409f      	lsls	r7, r3
 8000cfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	409c      	lsls	r4, r3
 8000d02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d06:	fa1f f58c 	uxth.w	r5, ip
 8000d0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d0e:	0c22      	lsrs	r2, r4, #16
 8000d10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d18:	fb01 f005 	mul.w	r0, r1, r5
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	d90a      	bls.n	8000d36 <__udivmoddi4+0x62>
 8000d20:	eb1c 0202 	adds.w	r2, ip, r2
 8000d24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d28:	f080 811c 	bcs.w	8000f64 <__udivmoddi4+0x290>
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	f240 8119 	bls.w	8000f64 <__udivmoddi4+0x290>
 8000d32:	3902      	subs	r1, #2
 8000d34:	4462      	add	r2, ip
 8000d36:	1a12      	subs	r2, r2, r0
 8000d38:	b2a4      	uxth	r4, r4
 8000d3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d46:	fb00 f505 	mul.w	r5, r0, r5
 8000d4a:	42a5      	cmp	r5, r4
 8000d4c:	d90a      	bls.n	8000d64 <__udivmoddi4+0x90>
 8000d4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x294>
 8000d5a:	42a5      	cmp	r5, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x294>
 8000d60:	4464      	add	r4, ip
 8000d62:	3802      	subs	r0, #2
 8000d64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d68:	1b64      	subs	r4, r4, r5
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	b11e      	cbz	r6, 8000d76 <__udivmoddi4+0xa2>
 8000d6e:	40dc      	lsrs	r4, r3
 8000d70:	2300      	movs	r3, #0
 8000d72:	e9c6 4300 	strd	r4, r3, [r6]
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0xbc>
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f000 80ed 	beq.w	8000f5e <__udivmoddi4+0x28a>
 8000d84:	2100      	movs	r1, #0
 8000d86:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d90:	fab3 f183 	clz	r1, r3
 8000d94:	2900      	cmp	r1, #0
 8000d96:	d149      	bne.n	8000e2c <__udivmoddi4+0x158>
 8000d98:	42ab      	cmp	r3, r5
 8000d9a:	d302      	bcc.n	8000da2 <__udivmoddi4+0xce>
 8000d9c:	4282      	cmp	r2, r0
 8000d9e:	f200 80f8 	bhi.w	8000f92 <__udivmoddi4+0x2be>
 8000da2:	1a84      	subs	r4, r0, r2
 8000da4:	eb65 0203 	sbc.w	r2, r5, r3
 8000da8:	2001      	movs	r0, #1
 8000daa:	4617      	mov	r7, r2
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d0e2      	beq.n	8000d76 <__udivmoddi4+0xa2>
 8000db0:	e9c6 4700 	strd	r4, r7, [r6]
 8000db4:	e7df      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000db6:	b902      	cbnz	r2, 8000dba <__udivmoddi4+0xe6>
 8000db8:	deff      	udf	#255	; 0xff
 8000dba:	fab2 f382 	clz	r3, r2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f040 8090 	bne.w	8000ee4 <__udivmoddi4+0x210>
 8000dc4:	1a8a      	subs	r2, r1, r2
 8000dc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dca:	fa1f fe8c 	uxth.w	lr, ip
 8000dce:	2101      	movs	r1, #1
 8000dd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000dd8:	0c22      	lsrs	r2, r4, #16
 8000dda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dde:	fb0e f005 	mul.w	r0, lr, r5
 8000de2:	4290      	cmp	r0, r2
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x124>
 8000de6:	eb1c 0202 	adds.w	r2, ip, r2
 8000dea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0x122>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f200 80cb 	bhi.w	8000f8c <__udivmoddi4+0x2b8>
 8000df6:	4645      	mov	r5, r8
 8000df8:	1a12      	subs	r2, r2, r0
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e00:	fb07 2210 	mls	r2, r7, r0, r2
 8000e04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e08:	fb0e fe00 	mul.w	lr, lr, r0
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x14e>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e18:	d202      	bcs.n	8000e20 <__udivmoddi4+0x14c>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	f200 80bb 	bhi.w	8000f96 <__udivmoddi4+0x2c2>
 8000e20:	4610      	mov	r0, r2
 8000e22:	eba4 040e 	sub.w	r4, r4, lr
 8000e26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2a:	e79f      	b.n	8000d6c <__udivmoddi4+0x98>
 8000e2c:	f1c1 0720 	rsb	r7, r1, #32
 8000e30:	408b      	lsls	r3, r1
 8000e32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e42:	40fd      	lsrs	r5, r7
 8000e44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e48:	4323      	orrs	r3, r4
 8000e4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	fb09 5518 	mls	r5, r9, r8, r5
 8000e56:	0c1c      	lsrs	r4, r3, #16
 8000e58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e60:	42a5      	cmp	r5, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6a:	d90b      	bls.n	8000e84 <__udivmoddi4+0x1b0>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e74:	f080 8088 	bcs.w	8000f88 <__udivmoddi4+0x2b4>
 8000e78:	42a5      	cmp	r5, r4
 8000e7a:	f240 8085 	bls.w	8000f88 <__udivmoddi4+0x2b4>
 8000e7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e82:	4464      	add	r4, ip
 8000e84:	1b64      	subs	r4, r4, r5
 8000e86:	b29d      	uxth	r5, r3
 8000e88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e98:	45a6      	cmp	lr, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x1da>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea4:	d26c      	bcs.n	8000f80 <__udivmoddi4+0x2ac>
 8000ea6:	45a6      	cmp	lr, r4
 8000ea8:	d96a      	bls.n	8000f80 <__udivmoddi4+0x2ac>
 8000eaa:	3b02      	subs	r3, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000eb6:	eba4 040e 	sub.w	r4, r4, lr
 8000eba:	42ac      	cmp	r4, r5
 8000ebc:	46c8      	mov	r8, r9
 8000ebe:	46ae      	mov	lr, r5
 8000ec0:	d356      	bcc.n	8000f70 <__udivmoddi4+0x29c>
 8000ec2:	d053      	beq.n	8000f6c <__udivmoddi4+0x298>
 8000ec4:	b156      	cbz	r6, 8000edc <__udivmoddi4+0x208>
 8000ec6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eca:	eb64 040e 	sbc.w	r4, r4, lr
 8000ece:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed2:	40ca      	lsrs	r2, r1
 8000ed4:	40cc      	lsrs	r4, r1
 8000ed6:	4317      	orrs	r7, r2
 8000ed8:	e9c6 7400 	strd	r7, r4, [r6]
 8000edc:	4618      	mov	r0, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee4:	f1c3 0120 	rsb	r1, r3, #32
 8000ee8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eec:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef4:	409d      	lsls	r5, r3
 8000ef6:	432a      	orrs	r2, r5
 8000ef8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f04:	fb07 1510 	mls	r5, r7, r0, r1
 8000f08:	0c11      	lsrs	r1, r2, #16
 8000f0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f12:	428d      	cmp	r5, r1
 8000f14:	fa04 f403 	lsl.w	r4, r4, r3
 8000f18:	d908      	bls.n	8000f2c <__udivmoddi4+0x258>
 8000f1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f22:	d22f      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f24:	428d      	cmp	r5, r1
 8000f26:	d92d      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f28:	3802      	subs	r0, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1b49      	subs	r1, r1, r5
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f34:	fb07 1115 	mls	r1, r7, r5, r1
 8000f38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f40:	4291      	cmp	r1, r2
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x282>
 8000f44:	eb1c 0202 	adds.w	r2, ip, r2
 8000f48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f4c:	d216      	bcs.n	8000f7c <__udivmoddi4+0x2a8>
 8000f4e:	4291      	cmp	r1, r2
 8000f50:	d914      	bls.n	8000f7c <__udivmoddi4+0x2a8>
 8000f52:	3d02      	subs	r5, #2
 8000f54:	4462      	add	r2, ip
 8000f56:	1a52      	subs	r2, r2, r1
 8000f58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f5c:	e738      	b.n	8000dd0 <__udivmoddi4+0xfc>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e708      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000f64:	4639      	mov	r1, r7
 8000f66:	e6e6      	b.n	8000d36 <__udivmoddi4+0x62>
 8000f68:	4610      	mov	r0, r2
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x90>
 8000f6c:	4548      	cmp	r0, r9
 8000f6e:	d2a9      	bcs.n	8000ec4 <__udivmoddi4+0x1f0>
 8000f70:	ebb9 0802 	subs.w	r8, r9, r2
 8000f74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	e7a3      	b.n	8000ec4 <__udivmoddi4+0x1f0>
 8000f7c:	4645      	mov	r5, r8
 8000f7e:	e7ea      	b.n	8000f56 <__udivmoddi4+0x282>
 8000f80:	462b      	mov	r3, r5
 8000f82:	e794      	b.n	8000eae <__udivmoddi4+0x1da>
 8000f84:	4640      	mov	r0, r8
 8000f86:	e7d1      	b.n	8000f2c <__udivmoddi4+0x258>
 8000f88:	46d0      	mov	r8, sl
 8000f8a:	e77b      	b.n	8000e84 <__udivmoddi4+0x1b0>
 8000f8c:	3d02      	subs	r5, #2
 8000f8e:	4462      	add	r2, ip
 8000f90:	e732      	b.n	8000df8 <__udivmoddi4+0x124>
 8000f92:	4608      	mov	r0, r1
 8000f94:	e70a      	b.n	8000dac <__udivmoddi4+0xd8>
 8000f96:	4464      	add	r4, ip
 8000f98:	3802      	subs	r0, #2
 8000f9a:	e742      	b.n	8000e22 <__udivmoddi4+0x14e>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <PADS_continuous_init>:


}


uint8_t PADS_continuous_init(I2C_HandleTypeDef *i2c){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	6078      	str	r0, [r7, #4]

	uint8_t ctrl_2=0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	72fb      	strb	r3, [r7, #11]
	uint8_t ctrl_1=0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	72bb      	strb	r3, [r7, #10]
	int check=0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x11, 1, &ctrl_2, 1, 100)!=HAL_OK){
 8000fb4:	2364      	movs	r3, #100	; 0x64
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	f107 030b 	add.w	r3, r7, #11
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	2211      	movs	r2, #17
 8000fc6:	21bb      	movs	r1, #187	; 0xbb
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f009 fbf5 	bl	800a7b8 <HAL_I2C_Mem_Read>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <PADS_continuous_init+0x38>
			check=1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
		}

	ctrl_2|=0b00000010;
 8000fd8:	7afb      	ldrb	r3, [r7, #11]
 8000fda:	f043 0302 	orr.w	r3, r3, #2
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	72fb      	strb	r3, [r7, #11]

	if(HAL_I2C_Mem_Write(i2c, 0xBA, 0x11, 1, &ctrl_2, 1, 100)!=HAL_OK){
 8000fe2:	2364      	movs	r3, #100	; 0x64
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	f107 030b 	add.w	r3, r7, #11
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	2211      	movs	r2, #17
 8000ff4:	21ba      	movs	r1, #186	; 0xba
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f009 faca 	bl	800a590 <HAL_I2C_Mem_Write>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <PADS_continuous_init+0x66>
			check=1;
 8001002:	2301      	movs	r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
		}

	if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x10, 1, &ctrl_1, 1, 100)!=HAL_OK){
 8001006:	2364      	movs	r3, #100	; 0x64
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	2301      	movs	r3, #1
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	f107 030a 	add.w	r3, r7, #10
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2301      	movs	r3, #1
 8001016:	2210      	movs	r2, #16
 8001018:	21bb      	movs	r1, #187	; 0xbb
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f009 fbcc 	bl	800a7b8 <HAL_I2C_Mem_Read>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <PADS_continuous_init+0x8a>
				check=1;
 8001026:	2301      	movs	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
			}


	ctrl_1|=0b01001110;
 800102a:	7abb      	ldrb	r3, [r7, #10]
 800102c:	f043 034e 	orr.w	r3, r3, #78	; 0x4e
 8001030:	b2db      	uxtb	r3, r3
 8001032:	72bb      	strb	r3, [r7, #10]

	ctrl_1&=0b11001111;
 8001034:	7abb      	ldrb	r3, [r7, #10]
 8001036:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800103a:	b2db      	uxtb	r3, r3
 800103c:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Mem_Write(i2c, 0xBA, 0x10, 1, &ctrl_1, 1, 100)!=HAL_OK){
 800103e:	2364      	movs	r3, #100	; 0x64
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	2301      	movs	r3, #1
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	f107 030a 	add.w	r3, r7, #10
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	2210      	movs	r2, #16
 8001050:	21ba      	movs	r1, #186	; 0xba
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f009 fa9c 	bl	800a590 <HAL_I2C_Mem_Write>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <PADS_continuous_init+0xc2>
				check=1;
 800105e:	2301      	movs	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
			}



	return check;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	b2db      	uxtb	r3, r3

}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <PADS_continuous_read>:

uint8_t PADS_continuous_read(I2C_HandleTypeDef *i2c){
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	ed2d 8b02 	vpush	{d8}
 8001076:	b08e      	sub	sp, #56	; 0x38
 8001078:	af04      	add	r7, sp, #16
 800107a:	6078      	str	r0, [r7, #4]
		int check=0;
 800107c:	2300      	movs	r3, #0
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
		uint8_t recarray[5];
		int16_t intbuffertemp=0;
 8001080:	2300      	movs	r3, #0
 8001082:	847b      	strh	r3, [r7, #34]	; 0x22
		int32_t intbufferpres=0;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
		double tmoy=0;
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x28, 1, &recarray[0], 1, 100)!=HAL_OK){
 8001094:	2364      	movs	r3, #100	; 0x64
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2301      	movs	r3, #1
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	2228      	movs	r2, #40	; 0x28
 80010a6:	21bb      	movs	r1, #187	; 0xbb
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f009 fb85 	bl	800a7b8 <HAL_I2C_Mem_Read>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <PADS_continuous_read+0x48>
			check=1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x29, 1, &recarray[1], 1, 100)!=HAL_OK){
 80010b8:	2364      	movs	r3, #100	; 0x64
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	3301      	adds	r3, #1
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	2229      	movs	r2, #41	; 0x29
 80010cc:	21bb      	movs	r1, #187	; 0xbb
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f009 fb72 	bl	800a7b8 <HAL_I2C_Mem_Read>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <PADS_continuous_read+0x6e>
			check=1;
 80010da:	2301      	movs	r3, #1
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x2A, 1, &recarray[2], 1, 100)!=HAL_OK){
 80010de:	2364      	movs	r3, #100	; 0x64
 80010e0:	9302      	str	r3, [sp, #8]
 80010e2:	2301      	movs	r3, #1
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	3302      	adds	r3, #2
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	222a      	movs	r2, #42	; 0x2a
 80010f2:	21bb      	movs	r1, #187	; 0xbb
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f009 fb5f 	bl	800a7b8 <HAL_I2C_Mem_Read>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <PADS_continuous_read+0x94>
			check=1;
 8001100:	2301      	movs	r3, #1
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x2B, 1, &recarray[3], 1, 100)!=HAL_OK){
 8001104:	2364      	movs	r3, #100	; 0x64
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2301      	movs	r3, #1
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	3303      	adds	r3, #3
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	222b      	movs	r2, #43	; 0x2b
 8001118:	21bb      	movs	r1, #187	; 0xbb
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f009 fb4c 	bl	800a7b8 <HAL_I2C_Mem_Read>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <PADS_continuous_read+0xba>
			check=1;
 8001126:	2301      	movs	r3, #1
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x2C, 1, &recarray[4], 1, 100)!=HAL_OK){
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2301      	movs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	3304      	adds	r3, #4
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	222c      	movs	r2, #44	; 0x2c
 800113e:	21bb      	movs	r1, #187	; 0xbb
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f009 fb39 	bl	800a7b8 <HAL_I2C_Mem_Read>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <PADS_continuous_read+0xe0>
			check=1;
 800114c:	2301      	movs	r3, #1
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
		}

		if(check==0){
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	2b00      	cmp	r3, #0
 8001154:	f040 80c9 	bne.w	80012ea <PADS_continuous_read+0x27a>

		intbufferpres=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 8001158:	7abb      	ldrb	r3, [r7, #10]
 800115a:	041a      	lsls	r2, r3, #16
 800115c:	7a7b      	ldrb	r3, [r7, #9]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	4313      	orrs	r3, r2
 8001162:	7a3a      	ldrb	r2, [r7, #8]
 8001164:	4313      	orrs	r3, r2
 8001166:	61fb      	str	r3, [r7, #28]
		intbuffertemp=(recarray[4]<<8)|(recarray[3]);
 8001168:	7b3b      	ldrb	r3, [r7, #12]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	b21a      	sxth	r2, r3
 800116e:	7afb      	ldrb	r3, [r7, #11]
 8001170:	b21b      	sxth	r3, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	847b      	strh	r3, [r7, #34]	; 0x22
		finaltemp=(float)intbuffertemp*0.01;
 8001176:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001182:	ee17 0a90 	vmov	r0, s15
 8001186:	f7ff f9b7 	bl	80004f8 <__aeabi_f2d>
 800118a:	a36d      	add	r3, pc, #436	; (adr r3, 8001340 <PADS_continuous_read+0x2d0>)
 800118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001190:	f7ff fa0a 	bl	80005a8 <__aeabi_dmul>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fcfc 	bl	8000b98 <__aeabi_d2f>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a61      	ldr	r2, [pc, #388]	; (8001328 <PADS_continuous_read+0x2b8>)
 80011a4:	6013      	str	r3, [r2, #0]
		finalpress=(float) intbufferpres*(0.00002441406);
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b0:	ee17 0a90 	vmov	r0, s15
 80011b4:	f7ff f9a0 	bl	80004f8 <__aeabi_f2d>
 80011b8:	a351      	add	r3, pc, #324	; (adr r3, 8001300 <PADS_continuous_read+0x290>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff f9f3 	bl	80005a8 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f7ff fce5 	bl	8000b98 <__aeabi_d2f>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a56      	ldr	r2, [pc, #344]	; (800132c <PADS_continuous_read+0x2bc>)
 80011d2:	6013      	str	r3, [r2, #0]

		//alt=(double)(288.15/0.0065)*(1-pow((double)(finalpress*1000.0)/101325.0, (double)(287.05*0.0065)/(9.80665)));
		alt=(float) ((8.314*293.15)/(9.80665*0.028964))*logf((float)101325.0/(finalpress*1000.0));
 80011d4:	4b55      	ldr	r3, [pc, #340]	; (800132c <PADS_continuous_read+0x2bc>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f98d 	bl	80004f8 <__aeabi_f2d>
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	4b53      	ldr	r3, [pc, #332]	; (8001330 <PADS_continuous_read+0x2c0>)
 80011e4:	f7ff f9e0 	bl	80005a8 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	a146      	add	r1, pc, #280	; (adr r1, 8001308 <PADS_continuous_read+0x298>)
 80011ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011f2:	f7ff fb03 	bl	80007fc <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fccb 	bl	8000b98 <__aeabi_d2f>
 8001202:	4603      	mov	r3, r0
 8001204:	ee00 3a10 	vmov	s0, r3
 8001208:	f01e fc90 	bl	801fb2c <logf>
 800120c:	eef0 7a40 	vmov.f32	s15, s0
 8001210:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001334 <PADS_continuous_read+0x2c4>
 8001214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001218:	4b47      	ldr	r3, [pc, #284]	; (8001338 <PADS_continuous_read+0x2c8>)
 800121a:	edc3 7a00 	vstr	s15, [r3]
		tmoy=(float) 293.15+finaltemp+(0.0065*alt)/2;
 800121e:	4b42      	ldr	r3, [pc, #264]	; (8001328 <PADS_continuous_read+0x2b8>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800133c <PADS_continuous_read+0x2cc>
 8001228:	ee77 7a87 	vadd.f32	s15, s15, s14
 800122c:	ee17 0a90 	vmov	r0, s15
 8001230:	f7ff f962 	bl	80004f8 <__aeabi_f2d>
 8001234:	4604      	mov	r4, r0
 8001236:	460d      	mov	r5, r1
 8001238:	4b3f      	ldr	r3, [pc, #252]	; (8001338 <PADS_continuous_read+0x2c8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f95b 	bl	80004f8 <__aeabi_f2d>
 8001242:	a333      	add	r3, pc, #204	; (adr r3, 8001310 <PADS_continuous_read+0x2a0>)
 8001244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001248:	f7ff f9ae 	bl	80005a8 <__aeabi_dmul>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800125c:	f7ff face 	bl	80007fc <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4620      	mov	r0, r4
 8001266:	4629      	mov	r1, r5
 8001268:	f7fe ffe8 	bl	800023c <__adddf3>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	e9c7 2304 	strd	r2, r3, [r7, #16]
		alt=(float) ((8.314*tmoy)/(9.80665*0.028964))*logf((float)101325.0/(finalpress*1000.0));
 8001274:	a328      	add	r3, pc, #160	; (adr r3, 8001318 <PADS_continuous_read+0x2a8>)
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800127e:	f7ff f993 	bl	80005a8 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	a325      	add	r3, pc, #148	; (adr r3, 8001320 <PADS_continuous_read+0x2b0>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	f7ff fab4 	bl	80007fc <__aeabi_ddiv>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	f7ff fc7c 	bl	8000b98 <__aeabi_d2f>
 80012a0:	ee08 0a10 	vmov	s16, r0
 80012a4:	4b21      	ldr	r3, [pc, #132]	; (800132c <PADS_continuous_read+0x2bc>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f925 	bl	80004f8 <__aeabi_f2d>
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <PADS_continuous_read+0x2c0>)
 80012b4:	f7ff f978 	bl	80005a8 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	a112      	add	r1, pc, #72	; (adr r1, 8001308 <PADS_continuous_read+0x298>)
 80012be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012c2:	f7ff fa9b 	bl	80007fc <__aeabi_ddiv>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fc63 	bl	8000b98 <__aeabi_d2f>
 80012d2:	4603      	mov	r3, r0
 80012d4:	ee00 3a10 	vmov	s0, r3
 80012d8:	f01e fc28 	bl	801fb2c <logf>
 80012dc:	eef0 7a40 	vmov.f32	s15, s0
 80012e0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <PADS_continuous_read+0x2c8>)
 80012e6:	edc3 7a00 	vstr	s15, [r3]



		}

		return check;
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	b2db      	uxtb	r3, r3





}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3728      	adds	r7, #40	; 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	ecbd 8b02 	vpop	{d8}
 80012f8:	bdb0      	pop	{r4, r5, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	f3af 8000 	nop.w
 8001300:	6d9e99d7 	.word	0x6d9e99d7
 8001304:	3ef99999 	.word	0x3ef99999
 8001308:	00000000 	.word	0x00000000
 800130c:	40f8bcd0 	.word	0x40f8bcd0
 8001310:	76c8b439 	.word	0x76c8b439
 8001314:	3f7a9fbe 	.word	0x3f7a9fbe
 8001318:	9ba5e354 	.word	0x9ba5e354
 800131c:	4020a0c4 	.word	0x4020a0c4
 8001320:	50527f89 	.word	0x50527f89
 8001324:	3fd22db5 	.word	0x3fd22db5
 8001328:	2000038c 	.word	0x2000038c
 800132c:	20000390 	.word	0x20000390
 8001330:	408f4000 	.word	0x408f4000
 8001334:	460612a4 	.word	0x460612a4
 8001338:	20000394 	.word	0x20000394
 800133c:	43929333 	.word	0x43929333
 8001340:	47ae147b 	.word	0x47ae147b
 8001344:	3f847ae1 	.word	0x3f847ae1

08001348 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001354:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4313      	orrs	r3, r2
 800135e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4013      	ands	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800136c:	68fb      	ldr	r3, [r7, #12]
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001382:	463b      	mov	r3, r7
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
 8001390:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001392:	4b38      	ldr	r3, [pc, #224]	; (8001474 <MX_ADC1_Init+0xf8>)
 8001394:	4a38      	ldr	r2, [pc, #224]	; (8001478 <MX_ADC1_Init+0xfc>)
 8001396:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001398:	4b36      	ldr	r3, [pc, #216]	; (8001474 <MX_ADC1_Init+0xf8>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800139e:	4b35      	ldr	r3, [pc, #212]	; (8001474 <MX_ADC1_Init+0xf8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013a4:	4b33      	ldr	r3, [pc, #204]	; (8001474 <MX_ADC1_Init+0xf8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013aa:	4b32      	ldr	r3, [pc, #200]	; (8001474 <MX_ADC1_Init+0xf8>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <MX_ADC1_Init+0xf8>)
 80013b2:	2204      	movs	r2, #4
 80013b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013b6:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <MX_ADC1_Init+0xf8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013bc:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <MX_ADC1_Init+0xf8>)
 80013be:	2201      	movs	r2, #1
 80013c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80013c2:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <MX_ADC1_Init+0xf8>)
 80013c4:	2203      	movs	r2, #3
 80013c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c8:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <MX_ADC1_Init+0xf8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <MX_ADC1_Init+0xf8>)
 80013d2:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 80013d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013d8:	4b26      	ldr	r3, [pc, #152]	; (8001474 <MX_ADC1_Init+0xf8>)
 80013da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <MX_ADC1_Init+0xf8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <MX_ADC1_Init+0xf8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <MX_ADC1_Init+0xf8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f6:	481f      	ldr	r0, [pc, #124]	; (8001474 <MX_ADC1_Init+0xf8>)
 80013f8:	f007 f920 	bl	800863c <HAL_ADC_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001402:	f001 fe37 	bl	8003074 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <MX_ADC1_Init+0x100>)
 8001408:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800140a:	2306      	movs	r3, #6
 800140c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800140e:	2307      	movs	r3, #7
 8001410:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001412:	237f      	movs	r3, #127	; 0x7f
 8001414:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001416:	2304      	movs	r3, #4
 8001418:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	4814      	ldr	r0, [pc, #80]	; (8001474 <MX_ADC1_Init+0xf8>)
 8001424:	f007 faee 	bl	8008a04 <HAL_ADC_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800142e:	f001 fe21 	bl	8003074 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_ADC1_Init+0x104>)
 8001434:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001436:	230c      	movs	r3, #12
 8001438:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143a:	463b      	mov	r3, r7
 800143c:	4619      	mov	r1, r3
 800143e:	480d      	ldr	r0, [pc, #52]	; (8001474 <MX_ADC1_Init+0xf8>)
 8001440:	f007 fae0 	bl	8008a04 <HAL_ADC_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800144a:	f001 fe13 	bl	8003074 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <MX_ADC1_Init+0x108>)
 8001450:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001452:	2312      	movs	r3, #18
 8001454:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001456:	463b      	mov	r3, r7
 8001458:	4619      	mov	r1, r3
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <MX_ADC1_Init+0xf8>)
 800145c:	f007 fad2 	bl	8008a04 <HAL_ADC_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001466:	f001 fe05 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200003a0 	.word	0x200003a0
 8001478:	50040000 	.word	0x50040000
 800147c:	80000001 	.word	0x80000001
 8001480:	c7520000 	.word	0xc7520000
 8001484:	25b00200 	.word	0x25b00200

08001488 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a22      	ldr	r2, [pc, #136]	; (8001530 <HAL_ADC_MspInit+0xa8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d13e      	bne.n	8001528 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014ae:	f7ff ff4b 	bl	8001348 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2001      	movs	r0, #1
 80014b4:	f7ff ff48 	bl	8001348 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014b8:	2310      	movs	r3, #16
 80014ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014bc:	2303      	movs	r3, #3
 80014be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	4619      	mov	r1, r3
 80014ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ce:	f008 fcdb 	bl	8009e88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_ADC_MspInit+0xac>)
 80014d4:	4a18      	ldr	r2, [pc, #96]	; (8001538 <HAL_ADC_MspInit+0xb0>)
 80014d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_ADC_MspInit+0xac>)
 80014da:	2205      	movs	r2, #5
 80014dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_ADC_MspInit+0xac>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_ADC_MspInit+0xac>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_ADC_MspInit+0xac>)
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_ADC_MspInit+0xac>)
 80014f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_ADC_MspInit+0xac>)
 80014fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <HAL_ADC_MspInit+0xac>)
 8001502:	2220      	movs	r2, #32
 8001504:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_ADC_MspInit+0xac>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800150c:	4809      	ldr	r0, [pc, #36]	; (8001534 <HAL_ADC_MspInit+0xac>)
 800150e:	f008 f8e7 	bl	80096e0 <HAL_DMA_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001518:	f001 fdac 	bl	8003074 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a05      	ldr	r2, [pc, #20]	; (8001534 <HAL_ADC_MspInit+0xac>)
 8001520:	64da      	str	r2, [r3, #76]	; 0x4c
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <HAL_ADC_MspInit+0xac>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001528:	bf00      	nop
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	50040000 	.word	0x50040000
 8001534:	20000404 	.word	0x20000404
 8001538:	40020008 	.word	0x40020008
 800153c:	00000000 	.word	0x00000000

08001540 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001540:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a54      	ldr	r2, [pc, #336]	; (80016a0 <HAL_ADC_ConvCpltCallback+0x160>)
 8001550:	4293      	cmp	r3, r2
 8001552:	f040 8091 	bne.w	8001678 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 8001556:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <HAL_ADC_ConvCpltCallback+0x164>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ffba 	bl	80004d4 <__aeabi_i2d>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	a14a      	add	r1, pc, #296	; (adr r1, 8001690 <HAL_ADC_ConvCpltCallback+0x150>)
 8001566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800156a:	f7ff f947 	bl	80007fc <__aeabi_ddiv>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fb0f 	bl	8000b98 <__aeabi_d2f>
 800157a:	4603      	mov	r3, r0
 800157c:	4a4a      	ldr	r2, [pc, #296]	; (80016a8 <HAL_ADC_ConvCpltCallback+0x168>)
 800157e:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001580:	4b4a      	ldr	r3, [pc, #296]	; (80016ac <HAL_ADC_ConvCpltCallback+0x16c>)
 8001582:	ed93 7a00 	vldr	s14, [r3]
 8001586:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <HAL_ADC_ConvCpltCallback+0x170>)
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001590:	ee17 0a90 	vmov	r0, s15
 8001594:	f7fe ffb0 	bl	80004f8 <__aeabi_f2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	f04f 0000 	mov.w	r0, #0
 80015a0:	4944      	ldr	r1, [pc, #272]	; (80016b4 <HAL_ADC_ConvCpltCallback+0x174>)
 80015a2:	f7ff f92b 	bl	80007fc <__aeabi_ddiv>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4690      	mov	r8, r2
 80015ac:	4699      	mov	r9, r3
 80015ae:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <HAL_ADC_ConvCpltCallback+0x164>)
 80015b0:	885b      	ldrh	r3, [r3, #2]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ff8e 	bl	80004d4 <__aeabi_i2d>
 80015b8:	4604      	mov	r4, r0
 80015ba:	460d      	mov	r5, r1
 80015bc:	4b3a      	ldr	r3, [pc, #232]	; (80016a8 <HAL_ADC_ConvCpltCallback+0x168>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ff99 	bl	80004f8 <__aeabi_f2d>
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <HAL_ADC_ConvCpltCallback+0x178>)
 80015cc:	f7ff f916 	bl	80007fc <__aeabi_ddiv>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4620      	mov	r0, r4
 80015d6:	4629      	mov	r1, r5
 80015d8:	f7fe ffe6 	bl	80005a8 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4614      	mov	r4, r2
 80015e2:	461d      	mov	r5, r3
 80015e4:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <HAL_ADC_ConvCpltCallback+0x170>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ff85 	bl	80004f8 <__aeabi_f2d>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4620      	mov	r0, r4
 80015f4:	4629      	mov	r1, r5
 80015f6:	f7fe fe1f 	bl	8000238 <__aeabi_dsub>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4640      	mov	r0, r8
 8001600:	4649      	mov	r1, r9
 8001602:	f7fe ffd1 	bl	80005a8 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff fac3 	bl	8000b98 <__aeabi_d2f>
 8001612:	ee07 0a10 	vmov	s14, r0
 8001616:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800161a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161e:	4b27      	ldr	r3, [pc, #156]	; (80016bc <HAL_ADC_ConvCpltCallback+0x17c>)
 8001620:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <HAL_ADC_ConvCpltCallback+0x164>)
 8001626:	889b      	ldrh	r3, [r3, #4]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff53 	bl	80004d4 <__aeabi_i2d>
 800162e:	a31a      	add	r3, pc, #104	; (adr r3, 8001698 <HAL_ADC_ConvCpltCallback+0x158>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7ff f8e2 	bl	80007fc <__aeabi_ddiv>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	f7fe fdfa 	bl	800023c <__adddf3>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4614      	mov	r4, r2
 800164e:	461d      	mov	r5, r3
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_ADC_ConvCpltCallback+0x168>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff4f 	bl	80004f8 <__aeabi_f2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4620      	mov	r0, r4
 8001660:	4629      	mov	r1, r5
 8001662:	f7fe ffa1 	bl	80005a8 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff fa93 	bl	8000b98 <__aeabi_d2f>
 8001672:	4603      	mov	r3, r0
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <HAL_ADC_ConvCpltCallback+0x180>)
 8001676:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001678:	2203      	movs	r2, #3
 800167a:	490a      	ldr	r1, [pc, #40]	; (80016a4 <HAL_ADC_ConvCpltCallback+0x164>)
 800167c:	4811      	ldr	r0, [pc, #68]	; (80016c4 <HAL_ADC_ConvCpltCallback+0x184>)
 800167e:	f007 f929 	bl	80088d4 <HAL_ADC_Start_DMA>



}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800168c:	f3af 8000 	nop.w
 8001690:	d70a3d70 	.word	0xd70a3d70
 8001694:	40b36323 	.word	0x40b36323
 8001698:	00000000 	.word	0x00000000
 800169c:	40affe00 	.word	0x40affe00
 80016a0:	50040000 	.word	0x50040000
 80016a4:	200008a0 	.word	0x200008a0
 80016a8:	200008ac 	.word	0x200008ac
 80016ac:	20000008 	.word	0x20000008
 80016b0:	2000000c 	.word	0x2000000c
 80016b4:	40590000 	.word	0x40590000
 80016b8:	40080000 	.word	0x40080000
 80016bc:	200008a8 	.word	0x200008a8
 80016c0:	200008b0 	.word	0x200008b0
 80016c4:	200003a0 	.word	0x200003a0

080016c8 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80016c8:	b5b0      	push	{r4, r5, r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <APPD_EnableCPU2+0x34>)
 80016d0:	1d3c      	adds	r4, r7, #4
 80016d2:	461d      	mov	r5, r3
 80016d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016dc:	c403      	stmia	r4!, {r0, r1}
 80016de:	8022      	strh	r2, [r4, #0]
 80016e0:	3402      	adds	r4, #2
 80016e2:	0c13      	lsrs	r3, r2, #16
 80016e4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80016e6:	f016 ffa1 	bl	801862c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	4618      	mov	r0, r3
 80016ee:	f016 fa32 	bl	8017b56 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80016f2:	bf00      	nop
}
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bdb0      	pop	{r4, r5, r7, pc}
 80016fa:	bf00      	nop
 80016fc:	080216e0 	.word	0x080216e0

08001700 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <LL_C2_PWR_SetPowerMode+0x28>)
 800170a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800170e:	f023 0207 	bic.w	r2, r3, #7
 8001712:	4905      	ldr	r1, [pc, #20]	; (8001728 <LL_C2_PWR_SetPowerMode+0x28>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4313      	orrs	r3, r2
 8001718:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	58000400 	.word	0x58000400

0800172c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <LL_EXTI_EnableIT_32_63+0x24>)
 8001736:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800173a:	4905      	ldr	r1, [pc, #20]	; (8001750 <LL_EXTI_EnableIT_32_63+0x24>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4313      	orrs	r3, r2
 8001740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	58000800 	.word	0x58000800

08001754 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800175c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001760:	4a0a      	ldr	r2, [pc, #40]	; (800178c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001762:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800176e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800177a:	4313      	orrs	r3, r2
 800177c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	cafecafe 	.word	0xcafecafe

08001790 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80017a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <LL_DBGMCU_GetDeviceID+0x18>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e0042000 	.word	0xe0042000

080017d4 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <LL_DBGMCU_GetRevisionID+0x18>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0c1b      	lsrs	r3, r3, #16
 80017de:	b29b      	uxth	r3, r3
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e0042000 	.word	0xe0042000

080017f0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <LL_LPM_EnableSleep+0x1c>)
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <LL_LPM_EnableSleep+0x1c>)
 80017fa:	f023 0304 	bic.w	r3, r3, #4
 80017fe:	6113      	str	r3, [r2, #16]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	22ff      	movs	r2, #255	; 0xff
 800181c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	22ca      	movs	r2, #202	; 0xca
 8001836:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2253      	movs	r2, #83	; 0x53
 800183c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f023 0207 	bic.w	r2, r3, #7
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	609a      	str	r2, [r3, #8]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <MX_APPE_Config+0x18>)
 8001876:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800187a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800187c:	f000 f824 	bl	80018c8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001880:	f000 f829 	bl	80018d6 <Config_HSE>

  return;
 8001884:	bf00      	nop
}
 8001886:	bd80      	pop	{r7, pc}
 8001888:	58004000 	.word	0x58004000

0800188c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001890:	f000 f835 	bl	80018fe <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001894:	f000 f84e 	bl	8001934 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001898:	4903      	ldr	r1, [pc, #12]	; (80018a8 <MX_APPE_Init+0x1c>)
 800189a:	2000      	movs	r0, #0
 800189c:	f000 fe4c 	bl	8002538 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80018a0:	f000 f856 	bl	8001950 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80018a4:	bf00      	nop
}
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000d00 	.word	0x20000d00

080018ac <Init_Smps>:

void Init_Smps(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80018b0:	bf00      	nop
}
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <Init_Exti>:

void Init_Exti(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80018be:	2050      	movs	r0, #80	; 0x50
 80018c0:	f7ff ff34 	bl	800172c <LL_EXTI_EnableIT_32_63>

  return;
 80018c4:	bf00      	nop
}
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80018cc:	bf00      	nop
}
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80018dc:	2000      	movs	r0, #0
 80018de:	f016 ff31 	bl	8018744 <OTP_Read>
 80018e2:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	799b      	ldrb	r3, [r3, #6]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff30 	bl	8001754 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
}
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <System_Init>:

static void System_Init(void)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	af00      	add	r7, sp, #0
  Init_Smps();
 8001902:	f7ff ffd3 	bl	80018ac <Init_Smps>

  Init_Exti();
 8001906:	f7ff ffd8 	bl	80018ba <Init_Exti>

  Init_Rtc();
 800190a:	f000 f803 	bl	8001914 <Init_Rtc>

  return;
 800190e:	bf00      	nop
}
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <Init_Rtc+0x1c>)
 800191a:	f7ff ff86 	bl	800182a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800191e:	2100      	movs	r1, #0
 8001920:	4803      	ldr	r0, [pc, #12]	; (8001930 <Init_Rtc+0x1c>)
 8001922:	f7ff ff92 	bl	800184a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001926:	4802      	ldr	r0, [pc, #8]	; (8001930 <Init_Rtc+0x1c>)
 8001928:	f7ff ff72 	bl	8001810 <LL_RTC_EnableWriteProtection>

  return;
 800192c:	bf00      	nop
}
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40002800 	.word	0x40002800

08001934 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001938:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800193c:	f7ff ff28 	bl	8001790 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001940:	f019 f890 	bl	801aa64 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001944:	2004      	movs	r0, #4
 8001946:	f7ff fedb 	bl	8001700 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800194a:	bf00      	nop
}
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8001956:	f016 fcb3 	bl	80182c0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800195a:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <appe_Tl_Init+0x50>)
 800195c:	2100      	movs	r1, #0
 800195e:	2004      	movs	r0, #4
 8001960:	f019 f9be 	bl	801ace0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <appe_Tl_Init+0x54>)
 8001966:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <appe_Tl_Init+0x58>)
 800196a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800196c:	463b      	mov	r3, r7
 800196e:	4619      	mov	r1, r3
 8001970:	480e      	ldr	r0, [pc, #56]	; (80019ac <appe_Tl_Init+0x5c>)
 8001972:	f016 fb67 	bl	8018044 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <appe_Tl_Init+0x60>)
 8001978:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <appe_Tl_Init+0x64>)
 800197c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <appe_Tl_Init+0x68>)
 8001980:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001982:	f240 533c 	movw	r3, #1340	; 0x53c
 8001986:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001988:	f107 0308 	add.w	r3, r7, #8
 800198c:	4618      	mov	r0, r3
 800198e:	f016 fdd9 	bl	8018544 <TL_MM_Init>

  TL_Enable();
 8001992:	f016 fc8f 	bl	80182b4 <TL_Enable>

  return;
 8001996:	bf00      	nop
}
 8001998:	3720      	adds	r7, #32
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	0801807d 	.word	0x0801807d
 80019a4:	20030734 	.word	0x20030734
 80019a8:	080019bd 	.word	0x080019bd
 80019ac:	080019d5 	.word	0x080019d5
 80019b0:	2003094c 	.word	0x2003094c
 80019b4:	20030840 	.word	0x20030840
 80019b8:	200301f8 	.word	0x200301f8

080019bc <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80019c6:	bf00      	nop
}
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	330b      	adds	r3, #11
 80019e2:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80019ee:	2b07      	cmp	r3, #7
 80019f0:	d81f      	bhi.n	8001a32 <APPE_SysUserEvtRx+0x5e>
 80019f2:	a201      	add	r2, pc, #4	; (adr r2, 80019f8 <APPE_SysUserEvtRx+0x24>)
 80019f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f8:	08001a19 	.word	0x08001a19
 80019fc:	08001a2b 	.word	0x08001a2b
 8001a00:	08001a33 	.word	0x08001a33
 8001a04:	08001a33 	.word	0x08001a33
 8001a08:	08001a33 	.word	0x08001a33
 8001a0c:	08001a33 	.word	0x08001a33
 8001a10:	08001a33 	.word	0x08001a33
 8001a14:	08001a33 	.word	0x08001a33
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f016 f8c7 	bl	8017bb0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f81b 	bl	8001a5e <APPE_SysEvtReadyProcessing>
    break;
 8001a28:	e004      	b.n	8001a34 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f806 	bl	8001a3c <APPE_SysEvtError>
    break;
 8001a30:	e000      	b.n	8001a34 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8001a32:	bf00      	nop
  }

  return;
 8001a34:	bf00      	nop
}
 8001a36:	3720      	adds	r7, #32
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	330b      	adds	r3, #11
 8001a4a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3302      	adds	r3, #2
 8001a50:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001a52:	bf00      	nop
}
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b08a      	sub	sp, #40	; 0x28
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	330b      	adds	r3, #11
 8001a82:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	3302      	adds	r3, #2
 8001a88:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d11d      	bne.n	8001ace <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001a92:	f7ff fe19 	bl	80016c8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001a96:	230f      	movs	r3, #15
 8001a98:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001a9a:	237f      	movs	r3, #127	; 0x7f
 8001a9c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001a9e:	f7ff fe99 	bl	80017d4 <LL_DBGMCU_GetRevisionID>
 8001aa2:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001aaa:	f7ff fe85 	bl	80017b8 <LL_DBGMCU_GetDeviceID>
 8001aae:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	4618      	mov	r0, r3
 8001abc:	f016 f862 	bl	8017b84 <SHCI_C2_Config>

    APP_BLE_Init();
 8001ac0:	f017 fc94 	bl	80193ec <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f018 ffde 	bl	801aa88 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001acc:	e007      	b.n	8001ade <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d103      	bne.n	8001ade <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
  return;
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
}
 8001ae0:	3728      	adds	r7, #40	; 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aee:	f006 fbb9 	bl	8008264 <HAL_GetTick>
 8001af2:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afe:	d00a      	beq.n	8001b16 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001b00:	f006 fbc8 	bl	8008294 <HAL_GetTickFreq>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b0e:	e002      	b.n	8001b16 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001b10:	f7ff fe6e 	bl	80017f0 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001b14:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001b16:	f006 fba5 	bl	8008264 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d8f4      	bhi.n	8001b10 <HAL_Delay+0x2a>
  }
}
 8001b26:	bf00      	nop
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f018 ffd6 	bl	801aae8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001b44:	bf00      	nop
}
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	f018 ffc4 	bl	801aae8 <UTIL_SEQ_Run>
  return;
 8001b60:	bf00      	nop
}
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001b70:	2100      	movs	r1, #0
 8001b72:	2004      	movs	r0, #4
 8001b74:	f019 f8d6 	bl	801ad24 <UTIL_SEQ_SetTask>
  return;
 8001b78:	bf00      	nop
}
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f019 f937 	bl	801adfc <UTIL_SEQ_SetEvt>
  return;
 8001b8e:	bf00      	nop
}
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001b9e:	2002      	movs	r0, #2
 8001ba0:	f019 f94c 	bl	801ae3c <UTIL_SEQ_WaitEvt>
  return;
 8001ba4:	bf00      	nop
}
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <LL_AHB1_GRP1_EnableClock>:
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001be2:	2004      	movs	r0, #4
 8001be4:	f7ff ffe2 	bl	8001bac <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001be8:	2001      	movs	r0, #1
 8001bea:	f7ff ffdf 	bl	8001bac <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	200b      	movs	r0, #11
 8001bf4:	f007 fd15 	bl	8009622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bf8:	200b      	movs	r0, #11
 8001bfa:	f007 fd2c 	bl	8009656 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	200c      	movs	r0, #12
 8001c04:	f007 fd0d 	bl	8009622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c08:	200c      	movs	r0, #12
 8001c0a:	f007 fd24 	bl	8009656 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	200d      	movs	r0, #13
 8001c14:	f007 fd05 	bl	8009622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c18:	200d      	movs	r0, #13
 8001c1a:	f007 fd1c 	bl	8009656 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	200e      	movs	r0, #14
 8001c24:	f007 fcfd 	bl	8009622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c28:	200e      	movs	r0, #14
 8001c2a:	f007 fd14 	bl	8009656 <HAL_NVIC_EnableIRQ>

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <LL_AHB2_GRP1_EnableClock>:
{
 8001c32:	b480      	push	{r7}
 8001c34:	b085      	sub	sp, #20
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4013      	ands	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c78:	2004      	movs	r0, #4
 8001c7a:	f7ff ffda 	bl	8001c32 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7e:	2002      	movs	r0, #2
 8001c80:	f7ff ffd7 	bl	8001c32 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	2001      	movs	r0, #1
 8001c86:	f7ff ffd4 	bl	8001c32 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c92:	f008 fb5f 	bl	800a354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2183      	movs	r1, #131	; 0x83
 8001c9a:	481b      	ldr	r0, [pc, #108]	; (8001d08 <MX_GPIO_Init+0xa4>)
 8001c9c:	f008 fb5a 	bl	800a354 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001ca0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ca4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ca6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001caa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4815      	ldr	r0, [pc, #84]	; (8001d0c <MX_GPIO_Init+0xa8>)
 8001cb6:	f008 f8e7 	bl	8009e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd2:	f008 f8d9 	bl	8009e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|SPI_CS_Pin;
 8001cd6:	2383      	movs	r3, #131	; 0x83
 8001cd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4807      	ldr	r0, [pc, #28]	; (8001d08 <MX_GPIO_Init+0xa4>)
 8001cec:	f008 f8cc 	bl	8009e88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	2028      	movs	r0, #40	; 0x28
 8001cf6:	f007 fc94 	bl	8009622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cfa:	2028      	movs	r0, #40	; 0x28
 8001cfc:	f007 fcab 	bl	8009656 <HAL_NVIC_EnableIRQ>

}
 8001d00:	bf00      	nop
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	48000400 	.word	0x48000400
 8001d0c:	48000800 	.word	0x48000800

08001d10 <LL_EXTI_EnableIT_0_31>:
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <LL_EXTI_EnableIT_0_31+0x24>)
 8001d1a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001d1e:	4905      	ldr	r1, [pc, #20]	; (8001d34 <LL_EXTI_EnableIT_0_31+0x24>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	58000800 	.word	0x58000800

08001d38 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4904      	ldr	r1, [pc, #16]	; (8001d58 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	600b      	str	r3, [r1, #0]

}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	58000800 	.word	0x58000800

08001d5c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <ReadRtcSsrValue+0x3c>)
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <ReadRtcSsrValue+0x3c>)
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001d72:	e005      	b.n	8001d80 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <ReadRtcSsrValue+0x3c>)
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d1f5      	bne.n	8001d74 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001d88:	683b      	ldr	r3, [r7, #0]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40002800 	.word	0x40002800

08001d9c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	460a      	mov	r2, r1
 8001da6:	71fb      	strb	r3, [r7, #7]
 8001da8:	4613      	mov	r3, r2
 8001daa:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001dac:	79ba      	ldrb	r2, [r7, #6]
 8001dae:	491d      	ldr	r1, [pc, #116]	; (8001e24 <LinkTimerAfter+0x88>)
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	440b      	add	r3, r1
 8001dba:	3315      	adds	r3, #21
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d009      	beq.n	8001dda <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001dc6:	7bfa      	ldrb	r2, [r7, #15]
 8001dc8:	4916      	ldr	r1, [pc, #88]	; (8001e24 <LinkTimerAfter+0x88>)
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3314      	adds	r3, #20
 8001dd6:	79fa      	ldrb	r2, [r7, #7]
 8001dd8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001dda:	79fa      	ldrb	r2, [r7, #7]
 8001ddc:	4911      	ldr	r1, [pc, #68]	; (8001e24 <LinkTimerAfter+0x88>)
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	440b      	add	r3, r1
 8001de8:	3315      	adds	r3, #21
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001dee:	79fa      	ldrb	r2, [r7, #7]
 8001df0:	490c      	ldr	r1, [pc, #48]	; (8001e24 <LinkTimerAfter+0x88>)
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	440b      	add	r3, r1
 8001dfc:	3314      	adds	r3, #20
 8001dfe:	79ba      	ldrb	r2, [r7, #6]
 8001e00:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001e02:	79ba      	ldrb	r2, [r7, #6]
 8001e04:	4907      	ldr	r1, [pc, #28]	; (8001e24 <LinkTimerAfter+0x88>)
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	440b      	add	r3, r1
 8001e10:	3315      	adds	r3, #21
 8001e12:	79fa      	ldrb	r2, [r7, #7]
 8001e14:	701a      	strb	r2, [r3, #0]

  return;
 8001e16:	bf00      	nop
}
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000464 	.word	0x20000464

08001e28 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	460a      	mov	r2, r1
 8001e32:	71fb      	strb	r3, [r7, #7]
 8001e34:	4613      	mov	r3, r2
 8001e36:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001e38:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <LinkTimerBefore+0xb8>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	79ba      	ldrb	r2, [r7, #6]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d032      	beq.n	8001eaa <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001e44:	79ba      	ldrb	r2, [r7, #6]
 8001e46:	4927      	ldr	r1, [pc, #156]	; (8001ee4 <LinkTimerBefore+0xbc>)
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	440b      	add	r3, r1
 8001e52:	3314      	adds	r3, #20
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	4922      	ldr	r1, [pc, #136]	; (8001ee4 <LinkTimerBefore+0xbc>)
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	440b      	add	r3, r1
 8001e66:	3315      	adds	r3, #21
 8001e68:	79fa      	ldrb	r2, [r7, #7]
 8001e6a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001e6c:	79fa      	ldrb	r2, [r7, #7]
 8001e6e:	491d      	ldr	r1, [pc, #116]	; (8001ee4 <LinkTimerBefore+0xbc>)
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	440b      	add	r3, r1
 8001e7a:	3315      	adds	r3, #21
 8001e7c:	79ba      	ldrb	r2, [r7, #6]
 8001e7e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001e80:	79fa      	ldrb	r2, [r7, #7]
 8001e82:	4918      	ldr	r1, [pc, #96]	; (8001ee4 <LinkTimerBefore+0xbc>)
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3314      	adds	r3, #20
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001e94:	79ba      	ldrb	r2, [r7, #6]
 8001e96:	4913      	ldr	r1, [pc, #76]	; (8001ee4 <LinkTimerBefore+0xbc>)
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3314      	adds	r3, #20
 8001ea4:	79fa      	ldrb	r2, [r7, #7]
 8001ea6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001ea8:	e014      	b.n	8001ed4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001eaa:	79fa      	ldrb	r2, [r7, #7]
 8001eac:	490d      	ldr	r1, [pc, #52]	; (8001ee4 <LinkTimerBefore+0xbc>)
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	3315      	adds	r3, #21
 8001eba:	79ba      	ldrb	r2, [r7, #6]
 8001ebc:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001ebe:	79ba      	ldrb	r2, [r7, #6]
 8001ec0:	4908      	ldr	r1, [pc, #32]	; (8001ee4 <LinkTimerBefore+0xbc>)
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	440b      	add	r3, r1
 8001ecc:	3314      	adds	r3, #20
 8001ece:	79fa      	ldrb	r2, [r7, #7]
 8001ed0:	701a      	strb	r2, [r3, #0]
  return;
 8001ed2:	bf00      	nop
}
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	200004f4 	.word	0x200004f4
 8001ee4:	20000464 	.word	0x20000464

08001ee8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ef2:	4b4e      	ldr	r3, [pc, #312]	; (800202c <linkTimer+0x144>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b06      	cmp	r3, #6
 8001efa:	d118      	bne.n	8001f2e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001efc:	4b4b      	ldr	r3, [pc, #300]	; (800202c <linkTimer+0x144>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b4b      	ldr	r3, [pc, #300]	; (8002030 <linkTimer+0x148>)
 8001f04:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001f06:	4a49      	ldr	r2, [pc, #292]	; (800202c <linkTimer+0x144>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001f0c:	79fa      	ldrb	r2, [r7, #7]
 8001f0e:	4949      	ldr	r1, [pc, #292]	; (8002034 <linkTimer+0x14c>)
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	3315      	adds	r3, #21
 8001f1c:	2206      	movs	r2, #6
 8001f1e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001f20:	4b45      	ldr	r3, [pc, #276]	; (8002038 <linkTimer+0x150>)
 8001f22:	f04f 32ff 	mov.w	r2, #4294967295
 8001f26:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	81fb      	strh	r3, [r7, #14]
 8001f2c:	e078      	b.n	8002020 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001f2e:	f000 f909 	bl	8002144 <ReturnTimeElapsed>
 8001f32:	4603      	mov	r3, r0
 8001f34:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001f36:	79fa      	ldrb	r2, [r7, #7]
 8001f38:	493e      	ldr	r1, [pc, #248]	; (8002034 <linkTimer+0x14c>)
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	3308      	adds	r3, #8
 8001f46:	6819      	ldr	r1, [r3, #0]
 8001f48:	89fb      	ldrh	r3, [r7, #14]
 8001f4a:	79fa      	ldrb	r2, [r7, #7]
 8001f4c:	4419      	add	r1, r3
 8001f4e:	4839      	ldr	r0, [pc, #228]	; (8002034 <linkTimer+0x14c>)
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4403      	add	r3, r0
 8001f5a:	3308      	adds	r3, #8
 8001f5c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001f5e:	79fa      	ldrb	r2, [r7, #7]
 8001f60:	4934      	ldr	r1, [pc, #208]	; (8002034 <linkTimer+0x14c>)
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <linkTimer+0x144>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4a2e      	ldr	r2, [pc, #184]	; (8002034 <linkTimer+0x14c>)
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	440b      	add	r3, r1
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	3308      	adds	r3, #8
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d337      	bcc.n	8002000 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001f90:	4b26      	ldr	r3, [pc, #152]	; (800202c <linkTimer+0x144>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001f96:	7b7a      	ldrb	r2, [r7, #13]
 8001f98:	4926      	ldr	r1, [pc, #152]	; (8002034 <linkTimer+0x14c>)
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	440b      	add	r3, r1
 8001fa4:	3315      	adds	r3, #21
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001faa:	e013      	b.n	8001fd4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001fac:	7b7a      	ldrb	r2, [r7, #13]
 8001fae:	4921      	ldr	r1, [pc, #132]	; (8002034 <linkTimer+0x14c>)
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	440b      	add	r3, r1
 8001fba:	3315      	adds	r3, #21
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001fc0:	7b7a      	ldrb	r2, [r7, #13]
 8001fc2:	491c      	ldr	r1, [pc, #112]	; (8002034 <linkTimer+0x14c>)
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	440b      	add	r3, r1
 8001fce:	3315      	adds	r3, #21
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001fd4:	7b3b      	ldrb	r3, [r7, #12]
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d00b      	beq.n	8001ff2 <linkTimer+0x10a>
 8001fda:	7b3a      	ldrb	r2, [r7, #12]
 8001fdc:	4915      	ldr	r1, [pc, #84]	; (8002034 <linkTimer+0x14c>)
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3308      	adds	r3, #8
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d2dc      	bcs.n	8001fac <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001ff2:	7b7a      	ldrb	r2, [r7, #13]
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fecf 	bl	8001d9c <LinkTimerAfter>
 8001ffe:	e00f      	b.n	8002020 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <linkTimer+0x144>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ff0c 	bl	8001e28 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <linkTimer+0x144>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <linkTimer+0x148>)
 8002018:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800201a:	4a04      	ldr	r2, [pc, #16]	; (800202c <linkTimer+0x144>)
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002020:	89fb      	ldrh	r3, [r7, #14]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200004f4 	.word	0x200004f4
 8002030:	200004f5 	.word	0x200004f5
 8002034:	20000464 	.word	0x20000464
 8002038:	200004f8 	.word	0x200004f8

0800203c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	460a      	mov	r2, r1
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	4613      	mov	r3, r2
 800204a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800204c:	4b39      	ldr	r3, [pc, #228]	; (8002134 <UnlinkTimer+0xf8>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	79fa      	ldrb	r2, [r7, #7]
 8002054:	429a      	cmp	r2, r3
 8002056:	d111      	bne.n	800207c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002058:	4b36      	ldr	r3, [pc, #216]	; (8002134 <UnlinkTimer+0xf8>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4b36      	ldr	r3, [pc, #216]	; (8002138 <UnlinkTimer+0xfc>)
 8002060:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002062:	79fa      	ldrb	r2, [r7, #7]
 8002064:	4935      	ldr	r1, [pc, #212]	; (800213c <UnlinkTimer+0x100>)
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	440b      	add	r3, r1
 8002070:	3315      	adds	r3, #21
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4b2f      	ldr	r3, [pc, #188]	; (8002134 <UnlinkTimer+0xf8>)
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	e03e      	b.n	80020fa <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800207c:	79fa      	ldrb	r2, [r7, #7]
 800207e:	492f      	ldr	r1, [pc, #188]	; (800213c <UnlinkTimer+0x100>)
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	3314      	adds	r3, #20
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002090:	79fa      	ldrb	r2, [r7, #7]
 8002092:	492a      	ldr	r1, [pc, #168]	; (800213c <UnlinkTimer+0x100>)
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	3315      	adds	r3, #21
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80020a4:	79f9      	ldrb	r1, [r7, #7]
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	4824      	ldr	r0, [pc, #144]	; (800213c <UnlinkTimer+0x100>)
 80020aa:	460b      	mov	r3, r1
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	440b      	add	r3, r1
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4403      	add	r3, r0
 80020b4:	3315      	adds	r3, #21
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b2d8      	uxtb	r0, r3
 80020ba:	4920      	ldr	r1, [pc, #128]	; (800213c <UnlinkTimer+0x100>)
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	3315      	adds	r3, #21
 80020c8:	4602      	mov	r2, r0
 80020ca:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020cc:	7bbb      	ldrb	r3, [r7, #14]
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d013      	beq.n	80020fa <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80020d2:	79f9      	ldrb	r1, [r7, #7]
 80020d4:	7bba      	ldrb	r2, [r7, #14]
 80020d6:	4819      	ldr	r0, [pc, #100]	; (800213c <UnlinkTimer+0x100>)
 80020d8:	460b      	mov	r3, r1
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	440b      	add	r3, r1
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4403      	add	r3, r0
 80020e2:	3314      	adds	r3, #20
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	b2d8      	uxtb	r0, r3
 80020e8:	4914      	ldr	r1, [pc, #80]	; (800213c <UnlinkTimer+0x100>)
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	3314      	adds	r3, #20
 80020f6:	4602      	mov	r2, r0
 80020f8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80020fa:	79fa      	ldrb	r2, [r7, #7]
 80020fc:	490f      	ldr	r1, [pc, #60]	; (800213c <UnlinkTimer+0x100>)
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	440b      	add	r3, r1
 8002108:	330c      	adds	r3, #12
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <UnlinkTimer+0xf8>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b06      	cmp	r3, #6
 8002116:	d107      	bne.n	8002128 <UnlinkTimer+0xec>
 8002118:	79bb      	ldrb	r3, [r7, #6]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d104      	bne.n	8002128 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <UnlinkTimer+0x104>)
 8002120:	f04f 32ff 	mov.w	r2, #4294967295
 8002124:	601a      	str	r2, [r3, #0]
  }

  return;
 8002126:	bf00      	nop
 8002128:	bf00      	nop
}
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	200004f4 	.word	0x200004f4
 8002138:	200004f5 	.word	0x200004f5
 800213c:	20000464 	.word	0x20000464
 8002140:	200004f8 	.word	0x200004f8

08002144 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <ReturnTimeElapsed+0x70>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002152:	d026      	beq.n	80021a2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002154:	f7ff fe02 	bl	8001d5c <ReadRtcSsrValue>
 8002158:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <ReturnTimeElapsed+0x70>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	429a      	cmp	r2, r3
 8002162:	d805      	bhi.n	8002170 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <ReturnTimeElapsed+0x70>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	e00a      	b.n	8002186 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <ReturnTimeElapsed+0x74>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <ReturnTimeElapsed+0x70>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	4413      	add	r3, r2
 8002184:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <ReturnTimeElapsed+0x78>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <ReturnTimeElapsed+0x7c>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	40d3      	lsrs	r3, r2
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	e001      	b.n	80021a6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	b29b      	uxth	r3, r3
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200004f8 	.word	0x200004f8
 80021b8:	20000500 	.word	0x20000500
 80021bc:	200004fe 	.word	0x200004fe
 80021c0:	200004fd 	.word	0x200004fd

080021c4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d108      	bne.n	80021e6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80021d4:	f7ff fdc2 	bl	8001d5c <ReadRtcSsrValue>
 80021d8:	4603      	mov	r3, r0
 80021da:	4a21      	ldr	r2, [pc, #132]	; (8002260 <RestartWakeupCounter+0x9c>)
 80021dc:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80021de:	2003      	movs	r0, #3
 80021e0:	f007 fa61 	bl	80096a6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80021e4:	e039      	b.n	800225a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d803      	bhi.n	80021f4 <RestartWakeupCounter+0x30>
 80021ec:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <RestartWakeupCounter+0xa0>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d002      	beq.n	80021fa <RestartWakeupCounter+0x36>
      Value -= 1;
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80021fa:	bf00      	nop
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <RestartWakeupCounter+0xa4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f8      	beq.n	80021fc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <RestartWakeupCounter+0xa4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <RestartWakeupCounter+0xa4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800221a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <RestartWakeupCounter+0xa8>)
 800221e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002222:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002224:	2003      	movs	r0, #3
 8002226:	f007 fa4c 	bl	80096c2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800222a:	4b11      	ldr	r3, [pc, #68]	; (8002270 <RestartWakeupCounter+0xac>)
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	0c1b      	lsrs	r3, r3, #16
 8002230:	041b      	lsls	r3, r3, #16
 8002232:	88fa      	ldrh	r2, [r7, #6]
 8002234:	490e      	ldr	r1, [pc, #56]	; (8002270 <RestartWakeupCounter+0xac>)
 8002236:	4313      	orrs	r3, r2
 8002238:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800223a:	f7ff fd8f 	bl	8001d5c <ReadRtcSsrValue>
 800223e:	4603      	mov	r3, r0
 8002240:	4a07      	ldr	r2, [pc, #28]	; (8002260 <RestartWakeupCounter+0x9c>)
 8002242:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <RestartWakeupCounter+0xa4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <RestartWakeupCounter+0xa4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002252:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002254:	f3af 8000 	nop.w
  return ;
 8002258:	bf00      	nop
}
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	200004f8 	.word	0x200004f8
 8002264:	200004fd 	.word	0x200004fd
 8002268:	20000d00 	.word	0x20000d00
 800226c:	58000800 	.word	0x58000800
 8002270:	40002800 	.word	0x40002800

08002274 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800227a:	4b45      	ldr	r3, [pc, #276]	; (8002390 <RescheduleTimerList+0x11c>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002286:	d107      	bne.n	8002298 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002288:	bf00      	nop
 800228a:	4b42      	ldr	r3, [pc, #264]	; (8002394 <RescheduleTimerList+0x120>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f8      	bne.n	800228a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002298:	4b3e      	ldr	r3, [pc, #248]	; (8002394 <RescheduleTimerList+0x120>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <RescheduleTimerList+0x120>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022a6:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80022a8:	4b3b      	ldr	r3, [pc, #236]	; (8002398 <RescheduleTimerList+0x124>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	493a      	ldr	r1, [pc, #232]	; (800239c <RescheduleTimerList+0x128>)
 80022b2:	4613      	mov	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	3308      	adds	r3, #8
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80022c2:	f7ff ff3f 	bl	8002144 <ReturnTimeElapsed>
 80022c6:	4603      	mov	r3, r0
 80022c8:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d205      	bcs.n	80022de <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80022d6:	4b32      	ldr	r3, [pc, #200]	; (80023a0 <RescheduleTimerList+0x12c>)
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	e04d      	b.n	800237a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	4a30      	ldr	r2, [pc, #192]	; (80023a4 <RescheduleTimerList+0x130>)
 80022e2:	8812      	ldrh	r2, [r2, #0]
 80022e4:	b292      	uxth	r2, r2
 80022e6:	4413      	add	r3, r2
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d906      	bls.n	80022fe <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80022f0:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <RescheduleTimerList+0x130>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80022f6:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <RescheduleTimerList+0x12c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
 80022fc:	e03d      	b.n	800237a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	b29a      	uxth	r2, r3
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002308:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <RescheduleTimerList+0x12c>)
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800230e:	e034      	b.n	800237a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	4922      	ldr	r1, [pc, #136]	; (800239c <RescheduleTimerList+0x128>)
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	440b      	add	r3, r1
 800231e:	3308      	adds	r3, #8
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	429a      	cmp	r2, r3
 8002326:	d20a      	bcs.n	800233e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	491c      	ldr	r1, [pc, #112]	; (800239c <RescheduleTimerList+0x128>)
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	440b      	add	r3, r1
 8002336:	3308      	adds	r3, #8
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e013      	b.n	8002366 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	4916      	ldr	r1, [pc, #88]	; (800239c <RescheduleTimerList+0x128>)
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	440b      	add	r3, r1
 800234c:	3308      	adds	r3, #8
 800234e:	6819      	ldr	r1, [r3, #0]
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	1ac9      	subs	r1, r1, r3
 8002356:	4811      	ldr	r0, [pc, #68]	; (800239c <RescheduleTimerList+0x128>)
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4403      	add	r3, r0
 8002362:	3308      	adds	r3, #8
 8002364:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	490c      	ldr	r1, [pc, #48]	; (800239c <RescheduleTimerList+0x128>)
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	3315      	adds	r3, #21
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	2b06      	cmp	r3, #6
 800237e:	d1c7      	bne.n	8002310 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002380:	89bb      	ldrh	r3, [r7, #12]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff1e 	bl	80021c4 <RestartWakeupCounter>

  return ;
 8002388:	bf00      	nop
}
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40002800 	.word	0x40002800
 8002394:	20000d00 	.word	0x20000d00
 8002398:	200004f4 	.word	0x200004f4
 800239c:	20000464 	.word	0x20000464
 80023a0:	200004fc 	.word	0x200004fc
 80023a4:	20000502 	.word	0x20000502

080023a8 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ae:	f3ef 8310 	mrs	r3, PRIMASK
 80023b2:	617b      	str	r3, [r7, #20]
  return(result);
 80023b4:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80023b8:	b672      	cpsid	i
}
 80023ba:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023bc:	4b59      	ldr	r3, [pc, #356]	; (8002524 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	22ca      	movs	r2, #202	; 0xca
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24
 80023c4:	4b57      	ldr	r3, [pc, #348]	; (8002524 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2253      	movs	r2, #83	; 0x53
 80023ca:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80023cc:	4b55      	ldr	r3, [pc, #340]	; (8002524 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	4b54      	ldr	r3, [pc, #336]	; (8002524 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023da:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80023dc:	4b52      	ldr	r3, [pc, #328]	; (8002528 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80023e4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80023e8:	4950      	ldr	r1, [pc, #320]	; (800252c <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023ea:	4613      	mov	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	440b      	add	r3, r1
 80023f4:	330c      	adds	r3, #12
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d16e      	bne.n	80024dc <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80023fe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002402:	494a      	ldr	r1, [pc, #296]	; (800252c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	440b      	add	r3, r1
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002412:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002416:	4945      	ldr	r1, [pc, #276]	; (800252c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	440b      	add	r3, r1
 8002422:	3310      	adds	r3, #16
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002428:	4b41      	ldr	r3, [pc, #260]	; (8002530 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d04c      	beq.n	80024cc <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002432:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002436:	493d      	ldr	r1, [pc, #244]	; (800252c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	330d      	adds	r3, #13
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b01      	cmp	r3, #1
 800244a:	d124      	bne.n	8002496 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800244c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002450:	2101      	movs	r1, #1
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fdf2 	bl	800203c <UnlinkTimer>
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f383 8810 	msr	PRIMASK, r3
}
 8002462:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002464:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002468:	4930      	ldr	r1, [pc, #192]	; (800252c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800246a:	4613      	mov	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	440b      	add	r3, r1
 8002474:	3304      	adds	r3, #4
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f9b8 	bl	80027f4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002484:	4b27      	ldr	r3, [pc, #156]	; (8002524 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	22ca      	movs	r2, #202	; 0xca
 800248a:	625a      	str	r2, [r3, #36]	; 0x24
 800248c:	4b25      	ldr	r3, [pc, #148]	; (8002524 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2253      	movs	r2, #83	; 0x53
 8002492:	625a      	str	r2, [r3, #36]	; 0x24
 8002494:	e012      	b.n	80024bc <HW_TS_RTC_Wakeup_Handler+0x114>
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f383 8810 	msr	PRIMASK, r3
}
 80024a0:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80024a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f920 	bl	80026ec <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80024ac:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	22ca      	movs	r2, #202	; 0xca
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2253      	movs	r2, #83	; 0x53
 80024ba:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80024bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	4619      	mov	r1, r3
 80024c4:	69b8      	ldr	r0, [r7, #24]
 80024c6:	f000 fa1b 	bl	8002900 <HW_TS_RTC_Int_AppNot>
 80024ca:	e022      	b.n	8002512 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80024cc:	f7ff fed2 	bl	8002274 <RescheduleTimerList>
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f383 8810 	msr	PRIMASK, r3
}
 80024da:	e01a      	b.n	8002512 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80024dc:	bf00      	nop
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f8      	beq.n	80024de <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80024ec:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80024fc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002500:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f383 8810 	msr	PRIMASK, r3
}
 8002510:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002512:	4b04      	ldr	r3, [pc, #16]	; (8002524 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	22ff      	movs	r2, #255	; 0xff
 8002518:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800251a:	bf00      	nop
}
 800251c:	3728      	adds	r7, #40	; 0x28
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000d00 	.word	0x20000d00
 8002528:	200004f4 	.word	0x200004f4
 800252c:	20000464 	.word	0x20000464
 8002530:	200004fc 	.word	0x200004fc
 8002534:	58000800 	.word	0x58000800

08002538 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	6039      	str	r1, [r7, #0]
 8002542:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002544:	4b5e      	ldr	r3, [pc, #376]	; (80026c0 <HW_TS_Init+0x188>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	22ca      	movs	r2, #202	; 0xca
 800254a:	625a      	str	r2, [r3, #36]	; 0x24
 800254c:	4b5c      	ldr	r3, [pc, #368]	; (80026c0 <HW_TS_Init+0x188>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2253      	movs	r2, #83	; 0x53
 8002552:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002554:	4b5b      	ldr	r3, [pc, #364]	; (80026c4 <HW_TS_Init+0x18c>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4a5a      	ldr	r2, [pc, #360]	; (80026c4 <HW_TS_Init+0x18c>)
 800255a:	f043 0320 	orr.w	r3, r3, #32
 800255e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002560:	4b58      	ldr	r3, [pc, #352]	; (80026c4 <HW_TS_Init+0x18c>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	b2db      	uxtb	r3, r3
 800256c:	f1c3 0304 	rsb	r3, r3, #4
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4b55      	ldr	r3, [pc, #340]	; (80026c8 <HW_TS_Init+0x190>)
 8002574:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002576:	4b53      	ldr	r3, [pc, #332]	; (80026c4 <HW_TS_Init+0x18c>)
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800257e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002582:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	fa92 f2a2 	rbit	r2, r2
 800258a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	2a00      	cmp	r2, #0
 8002594:	d101      	bne.n	800259a <HW_TS_Init+0x62>
  {
    return 32U;
 8002596:	2220      	movs	r2, #32
 8002598:	e003      	b.n	80025a2 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	fab2 f282 	clz	r2, r2
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	40d3      	lsrs	r3, r2
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	3301      	adds	r3, #1
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b48      	ldr	r3, [pc, #288]	; (80026cc <HW_TS_Init+0x194>)
 80025ac:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80025ae:	4b45      	ldr	r3, [pc, #276]	; (80026c4 <HW_TS_Init+0x18c>)
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	4b44      	ldr	r3, [pc, #272]	; (80026d0 <HW_TS_Init+0x198>)
 80025c0:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80025c2:	4b43      	ldr	r3, [pc, #268]	; (80026d0 <HW_TS_Init+0x198>)
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	4a40      	ldr	r2, [pc, #256]	; (80026cc <HW_TS_Init+0x194>)
 80025ca:	7812      	ldrb	r2, [r2, #0]
 80025cc:	fb02 f303 	mul.w	r3, r2, r3
 80025d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80025d4:	4a3c      	ldr	r2, [pc, #240]	; (80026c8 <HW_TS_Init+0x190>)
 80025d6:	7812      	ldrb	r2, [r2, #0]
 80025d8:	40d3      	lsrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d904      	bls.n	80025f0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80025e6:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HW_TS_Init+0x19c>)
 80025e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ec:	801a      	strh	r2, [r3, #0]
 80025ee:	e003      	b.n	80025f8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <HW_TS_Init+0x19c>)
 80025f6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80025f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80025fc:	f7ff fb9c 	bl	8001d38 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002600:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002604:	f7ff fb84 	bl	8001d10 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d13d      	bne.n	800268a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800260e:	4b32      	ldr	r3, [pc, #200]	; (80026d8 <HW_TS_Init+0x1a0>)
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002614:	4b31      	ldr	r3, [pc, #196]	; (80026dc <HW_TS_Init+0x1a4>)
 8002616:	f04f 32ff 	mov.w	r2, #4294967295
 800261a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800261c:	2300      	movs	r3, #0
 800261e:	77fb      	strb	r3, [r7, #31]
 8002620:	e00c      	b.n	800263c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002622:	7ffa      	ldrb	r2, [r7, #31]
 8002624:	492e      	ldr	r1, [pc, #184]	; (80026e0 <HW_TS_Init+0x1a8>)
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	330c      	adds	r3, #12
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002636:	7ffb      	ldrb	r3, [r7, #31]
 8002638:	3301      	adds	r3, #1
 800263a:	77fb      	strb	r3, [r7, #31]
 800263c:	7ffb      	ldrb	r3, [r7, #31]
 800263e:	2b05      	cmp	r3, #5
 8002640:	d9ef      	bls.n	8002622 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002642:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <HW_TS_Init+0x1ac>)
 8002644:	2206      	movs	r2, #6
 8002646:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002648:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <HW_TS_Init+0x188>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <HW_TS_Init+0x188>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002656:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HW_TS_Init+0x188>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <HW_TS_Init+0x188>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002668:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800266a:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <HW_TS_Init+0x1b0>)
 800266c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002670:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002672:	2003      	movs	r0, #3
 8002674:	f007 f825 	bl	80096c2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <HW_TS_Init+0x188>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <HW_TS_Init+0x188>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	e009      	b.n	800269e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800268a:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <HW_TS_Init+0x188>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002698:	2003      	movs	r0, #3
 800269a:	f007 f804 	bl	80096a6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HW_TS_Init+0x188>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	22ff      	movs	r2, #255	; 0xff
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80026a6:	2200      	movs	r2, #0
 80026a8:	2103      	movs	r1, #3
 80026aa:	2003      	movs	r0, #3
 80026ac:	f006 ffb9 	bl	8009622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80026b0:	2003      	movs	r0, #3
 80026b2:	f006 ffd0 	bl	8009656 <HAL_NVIC_EnableIRQ>

  return;
 80026b6:	bf00      	nop
}
 80026b8:	3720      	adds	r7, #32
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000d00 	.word	0x20000d00
 80026c4:	40002800 	.word	0x40002800
 80026c8:	200004fd 	.word	0x200004fd
 80026cc:	200004fe 	.word	0x200004fe
 80026d0:	20000500 	.word	0x20000500
 80026d4:	20000502 	.word	0x20000502
 80026d8:	200004fc 	.word	0x200004fc
 80026dc:	200004f8 	.word	0x200004f8
 80026e0:	20000464 	.word	0x20000464
 80026e4:	200004f4 	.word	0x200004f4
 80026e8:	58000800 	.word	0x58000800

080026ec <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026f6:	f3ef 8310 	mrs	r3, PRIMASK
 80026fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80026fc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80026fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002700:	b672      	cpsid	i
}
 8002702:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002704:	2003      	movs	r0, #3
 8002706:	f006 ffb4 	bl	8009672 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800270a:	4b34      	ldr	r3, [pc, #208]	; (80027dc <HW_TS_Stop+0xf0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	22ca      	movs	r2, #202	; 0xca
 8002710:	625a      	str	r2, [r3, #36]	; 0x24
 8002712:	4b32      	ldr	r3, [pc, #200]	; (80027dc <HW_TS_Stop+0xf0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2253      	movs	r2, #83	; 0x53
 8002718:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800271a:	79fa      	ldrb	r2, [r7, #7]
 800271c:	4930      	ldr	r1, [pc, #192]	; (80027e0 <HW_TS_Stop+0xf4>)
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	440b      	add	r3, r1
 8002728:	330c      	adds	r3, #12
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d142      	bne.n	80027b8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fc80 	bl	800203c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800273c:	4b29      	ldr	r3, [pc, #164]	; (80027e4 <HW_TS_Stop+0xf8>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	2b06      	cmp	r3, #6
 8002746:	d12f      	bne.n	80027a8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002748:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <HW_TS_Stop+0xfc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002754:	d107      	bne.n	8002766 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002756:	bf00      	nop
 8002758:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HW_TS_Stop+0xf0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f8      	bne.n	8002758 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002766:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HW_TS_Stop+0xf0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HW_TS_Stop+0xf0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002774:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002776:	bf00      	nop
 8002778:	4b18      	ldr	r3, [pc, #96]	; (80027dc <HW_TS_Stop+0xf0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f8      	beq.n	8002778 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <HW_TS_Stop+0xf0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <HW_TS_Stop+0xf0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002796:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <HW_TS_Stop+0x100>)
 800279a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800279e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80027a0:	2003      	movs	r0, #3
 80027a2:	f006 ff8e 	bl	80096c2 <HAL_NVIC_ClearPendingIRQ>
 80027a6:	e007      	b.n	80027b8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HW_TS_Stop+0x104>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	7cfa      	ldrb	r2, [r7, #19]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80027b4:	f7ff fd5e 	bl	8002274 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <HW_TS_Stop+0xf0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	22ff      	movs	r2, #255	; 0xff
 80027be:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80027c0:	2003      	movs	r0, #3
 80027c2:	f006 ff48 	bl	8009656 <HAL_NVIC_EnableIRQ>
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f383 8810 	msr	PRIMASK, r3
}
 80027d0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80027d2:	bf00      	nop
}
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000d00 	.word	0x20000d00
 80027e0:	20000464 	.word	0x20000464
 80027e4:	200004f4 	.word	0x200004f4
 80027e8:	40002800 	.word	0x40002800
 80027ec:	58000800 	.word	0x58000800
 80027f0:	200004f5 	.word	0x200004f5

080027f4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	6039      	str	r1, [r7, #0]
 80027fe:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002800:	79fa      	ldrb	r2, [r7, #7]
 8002802:	493b      	ldr	r1, [pc, #236]	; (80028f0 <HW_TS_Start+0xfc>)
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	440b      	add	r3, r1
 800280e:	330c      	adds	r3, #12
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d103      	bne.n	8002820 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ff66 	bl	80026ec <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002820:	f3ef 8310 	mrs	r3, PRIMASK
 8002824:	60fb      	str	r3, [r7, #12]
  return(result);
 8002826:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002828:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800282a:	b672      	cpsid	i
}
 800282c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800282e:	2003      	movs	r0, #3
 8002830:	f006 ff1f 	bl	8009672 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002834:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <HW_TS_Start+0x100>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	22ca      	movs	r2, #202	; 0xca
 800283a:	625a      	str	r2, [r3, #36]	; 0x24
 800283c:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <HW_TS_Start+0x100>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2253      	movs	r2, #83	; 0x53
 8002842:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002844:	79fa      	ldrb	r2, [r7, #7]
 8002846:	492a      	ldr	r1, [pc, #168]	; (80028f0 <HW_TS_Start+0xfc>)
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	440b      	add	r3, r1
 8002852:	330c      	adds	r3, #12
 8002854:	2202      	movs	r2, #2
 8002856:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002858:	79fa      	ldrb	r2, [r7, #7]
 800285a:	4925      	ldr	r1, [pc, #148]	; (80028f0 <HW_TS_Start+0xfc>)
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	440b      	add	r3, r1
 8002866:	3308      	adds	r3, #8
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800286c:	79fa      	ldrb	r2, [r7, #7]
 800286e:	4920      	ldr	r1, [pc, #128]	; (80028f0 <HW_TS_Start+0xfc>)
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	440b      	add	r3, r1
 800287a:	3304      	adds	r3, #4
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fb30 	bl	8001ee8 <linkTimer>
 8002888:	4603      	mov	r3, r0
 800288a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800288c:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <HW_TS_Start+0x104>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002892:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <HW_TS_Start+0x108>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	7c7a      	ldrb	r2, [r7, #17]
 800289a:	429a      	cmp	r2, r3
 800289c:	d002      	beq.n	80028a4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800289e:	f7ff fce9 	bl	8002274 <RescheduleTimerList>
 80028a2:	e013      	b.n	80028cc <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80028a4:	79fa      	ldrb	r2, [r7, #7]
 80028a6:	4912      	ldr	r1, [pc, #72]	; (80028f0 <HW_TS_Start+0xfc>)
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	3308      	adds	r3, #8
 80028b4:	6819      	ldr	r1, [r3, #0]
 80028b6:	8a7b      	ldrh	r3, [r7, #18]
 80028b8:	79fa      	ldrb	r2, [r7, #7]
 80028ba:	1ac9      	subs	r1, r1, r3
 80028bc:	480c      	ldr	r0, [pc, #48]	; (80028f0 <HW_TS_Start+0xfc>)
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4403      	add	r3, r0
 80028c8:	3308      	adds	r3, #8
 80028ca:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80028cc:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <HW_TS_Start+0x100>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	22ff      	movs	r2, #255	; 0xff
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80028d4:	2003      	movs	r0, #3
 80028d6:	f006 febe 	bl	8009656 <HAL_NVIC_EnableIRQ>
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f383 8810 	msr	PRIMASK, r3
}
 80028e4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80028e6:	bf00      	nop
}
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000464 	.word	0x20000464
 80028f4:	20000d00 	.word	0x20000d00
 80028f8:	200004f4 	.word	0x200004f4
 80028fc:	200004f5 	.word	0x200004f5

08002900 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	460b      	mov	r3, r1
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4798      	blx	r3

  return;
 8002912:	bf00      	nop
}
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <LL_AHB2_GRP1_EnableClock>:
{
 800291a:	b480      	push	{r7}
 800291c:	b085      	sub	sp, #20
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4313      	orrs	r3, r2
 8002930:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002936:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4013      	ands	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800293e:	68fb      	ldr	r3, [r7, #12]
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002958:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800295a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4313      	orrs	r3, r2
 8002962:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002968:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4013      	ands	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002970:	68fb      	ldr	r3, [r7, #12]
}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	43db      	mvns	r3, r3
 8002990:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002994:	4013      	ands	r3, r2
 8002996:	658b      	str	r3, [r1, #88]	; 0x58
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <MX_I2C1_Init+0x74>)
 80029aa:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <MX_I2C1_Init+0x78>)
 80029ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80029ae:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <MX_I2C1_Init+0x74>)
 80029b0:	4a1b      	ldr	r2, [pc, #108]	; (8002a20 <MX_I2C1_Init+0x7c>)
 80029b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029b4:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <MX_I2C1_Init+0x74>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029ba:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <MX_I2C1_Init+0x74>)
 80029bc:	2201      	movs	r2, #1
 80029be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029c0:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <MX_I2C1_Init+0x74>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029c6:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <MX_I2C1_Init+0x74>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <MX_I2C1_Init+0x74>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029d2:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <MX_I2C1_Init+0x74>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <MX_I2C1_Init+0x74>)
 80029da:	2200      	movs	r2, #0
 80029dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029de:	480e      	ldr	r0, [pc, #56]	; (8002a18 <MX_I2C1_Init+0x74>)
 80029e0:	f007 fd0c 	bl	800a3fc <HAL_I2C_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029ea:	f000 fb43 	bl	8003074 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029ee:	2100      	movs	r1, #0
 80029f0:	4809      	ldr	r0, [pc, #36]	; (8002a18 <MX_I2C1_Init+0x74>)
 80029f2:	f008 fabd 	bl	800af70 <HAL_I2CEx_ConfigAnalogFilter>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029fc:	f000 fb3a 	bl	8003074 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a00:	2100      	movs	r1, #0
 8002a02:	4805      	ldr	r0, [pc, #20]	; (8002a18 <MX_I2C1_Init+0x74>)
 8002a04:	f008 faff 	bl	800b006 <HAL_I2CEx_ConfigDigitalFilter>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a0e:	f000 fb31 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000504 	.word	0x20000504
 8002a1c:	40005400 	.word	0x40005400
 8002a20:	10707dbc 	.word	0x10707dbc

08002a24 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002a28:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <MX_I2C3_Init+0x7c>)
 8002a2a:	4a1e      	ldr	r2, [pc, #120]	; (8002aa4 <MX_I2C3_Init+0x80>)
 8002a2c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300B29;
 8002a2e:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <MX_I2C3_Init+0x7c>)
 8002a30:	4a1d      	ldr	r2, [pc, #116]	; (8002aa8 <MX_I2C3_Init+0x84>)
 8002a32:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <MX_I2C3_Init+0x7c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a3a:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <MX_I2C3_Init+0x7c>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a40:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <MX_I2C3_Init+0x7c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <MX_I2C3_Init+0x7c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <MX_I2C3_Init+0x7c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <MX_I2C3_Init+0x7c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <MX_I2C3_Init+0x7c>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002a5e:	4810      	ldr	r0, [pc, #64]	; (8002aa0 <MX_I2C3_Init+0x7c>)
 8002a60:	f007 fccc 	bl	800a3fc <HAL_I2C_Init>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002a6a:	f000 fb03 	bl	8003074 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a6e:	2100      	movs	r1, #0
 8002a70:	480b      	ldr	r0, [pc, #44]	; (8002aa0 <MX_I2C3_Init+0x7c>)
 8002a72:	f008 fa7d 	bl	800af70 <HAL_I2CEx_ConfigAnalogFilter>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002a7c:	f000 fafa 	bl	8003074 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002a80:	2100      	movs	r1, #0
 8002a82:	4807      	ldr	r0, [pc, #28]	; (8002aa0 <MX_I2C3_Init+0x7c>)
 8002a84:	f008 fabf 	bl	800b006 <HAL_I2CEx_ConfigDigitalFilter>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002a8e:	f000 faf1 	bl	8003074 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8002a92:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002a96:	f008 fb03 	bl	800b0a0 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000558 	.word	0x20000558
 8002aa4:	40005c00 	.word	0x40005c00
 8002aa8:	00300b29 	.word	0x00300b29

08002aac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b09c      	sub	sp, #112	; 0x70
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ac4:	f107 030c 	add.w	r3, r7, #12
 8002ac8:	2250      	movs	r2, #80	; 0x50
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f01a f9e0 	bl	801ce92 <memset>
  if(i2cHandle->Instance==I2C1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a37      	ldr	r2, [pc, #220]	; (8002bb4 <HAL_I2C_MspInit+0x108>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d127      	bne.n	8002b2c <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002adc:	2304      	movs	r3, #4
 8002ade:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ae0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ae6:	f107 030c 	add.w	r3, r7, #12
 8002aea:	4618      	mov	r0, r3
 8002aec:	f00b fc08 	bl	800e300 <HAL_RCCEx_PeriphCLKConfig>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002af6:	f000 fabd 	bl	8003074 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afa:	2002      	movs	r0, #2
 8002afc:	f7ff ff0d 	bl	800291a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b04:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b06:	2312      	movs	r3, #18
 8002b08:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b12:	2304      	movs	r3, #4
 8002b14:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b16:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4826      	ldr	r0, [pc, #152]	; (8002bb8 <HAL_I2C_MspInit+0x10c>)
 8002b1e:	f007 f9b3 	bl	8009e88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b22:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b26:	f7ff ff11 	bl	800294c <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002b2a:	e03e      	b.n	8002baa <HAL_I2C_MspInit+0xfe>
  else if(i2cHandle->Instance==I2C3)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a22      	ldr	r2, [pc, #136]	; (8002bbc <HAL_I2C_MspInit+0x110>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d139      	bne.n	8002baa <HAL_I2C_MspInit+0xfe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002b36:	2308      	movs	r3, #8
 8002b38:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002b3a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8002b3e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b40:	f107 030c 	add.w	r3, r7, #12
 8002b44:	4618      	mov	r0, r3
 8002b46:	f00b fbdb 	bl	800e300 <HAL_RCCEx_PeriphCLKConfig>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8002b50:	f000 fa90 	bl	8003074 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b54:	2001      	movs	r0, #1
 8002b56:	f7ff fee0 	bl	800291a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f7ff fedd 	bl	800291a <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b64:	2312      	movs	r3, #18
 8002b66:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b70:	2304      	movs	r3, #4
 8002b72:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b7e:	f007 f983 	bl	8009e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b82:	2310      	movs	r3, #16
 8002b84:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b86:	2312      	movs	r3, #18
 8002b88:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b92:	2304      	movs	r3, #4
 8002b94:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b96:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4806      	ldr	r0, [pc, #24]	; (8002bb8 <HAL_I2C_MspInit+0x10c>)
 8002b9e:	f007 f973 	bl	8009e88 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ba2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002ba6:	f7ff fed1 	bl	800294c <LL_APB1_GRP1_EnableClock>
}
 8002baa:	bf00      	nop
 8002bac:	3770      	adds	r7, #112	; 0x70
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40005400 	.word	0x40005400
 8002bb8:	48000400 	.word	0x48000400
 8002bbc:	40005c00 	.word	0x40005c00

08002bc0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a13      	ldr	r2, [pc, #76]	; (8002c1c <HAL_I2C_MspDeInit+0x5c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002bd2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002bd6:	f7ff fed2 	bl	800297e <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bde:	4810      	ldr	r0, [pc, #64]	; (8002c20 <HAL_I2C_MspDeInit+0x60>)
 8002be0:	f007 fac2 	bl	800a168 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002be4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002be8:	480d      	ldr	r0, [pc, #52]	; (8002c20 <HAL_I2C_MspDeInit+0x60>)
 8002bea:	f007 fabd 	bl	800a168 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8002bee:	e011      	b.n	8002c14 <HAL_I2C_MspDeInit+0x54>
  else if(i2cHandle->Instance==I2C3)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <HAL_I2C_MspDeInit+0x64>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d10c      	bne.n	8002c14 <HAL_I2C_MspDeInit+0x54>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002bfa:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002bfe:	f7ff febe 	bl	800297e <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_7);
 8002c02:	2180      	movs	r1, #128	; 0x80
 8002c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c08:	f007 faae 	bl	800a168 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8002c0c:	2110      	movs	r1, #16
 8002c0e:	4804      	ldr	r0, [pc, #16]	; (8002c20 <HAL_I2C_MspDeInit+0x60>)
 8002c10:	f007 faaa 	bl	800a168 <HAL_GPIO_DeInit>
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40005400 	.word	0x40005400
 8002c20:	48000400 	.word	0x48000400
 8002c24:	40005c00 	.word	0x40005c00

08002c28 <LL_AHB3_GRP1_EnableClock>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
}
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <MX_IPCC_Init+0x20>)
 8002c62:	4a07      	ldr	r2, [pc, #28]	; (8002c80 <MX_IPCC_Init+0x24>)
 8002c64:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002c66:	4805      	ldr	r0, [pc, #20]	; (8002c7c <MX_IPCC_Init+0x20>)
 8002c68:	f008 fa2c 	bl	800b0c4 <HAL_IPCC_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002c72:	f000 f9ff 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200005ac 	.word	0x200005ac
 8002c80:	58000c00 	.word	0x58000c00

08002c84 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <HAL_IPCC_MspInit+0x44>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d113      	bne.n	8002cbe <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002c96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002c9a:	f7ff ffc5 	bl	8002c28 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	202c      	movs	r0, #44	; 0x2c
 8002ca4:	f006 fcbd 	bl	8009622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002ca8:	202c      	movs	r0, #44	; 0x2c
 8002caa:	f006 fcd4 	bl	8009656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	202d      	movs	r0, #45	; 0x2d
 8002cb4:	f006 fcb5 	bl	8009622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002cb8:	202d      	movs	r0, #45	; 0x2d
 8002cba:	f006 fccc 	bl	8009656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	58000c00 	.word	0x58000c00

08002ccc <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cdc:	d12f      	bne.n	8002d3e <HAL_GPIO_EXTI_Callback+0x72>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)== GPIO_PIN_RESET){
 8002cde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ce2:	4833      	ldr	r0, [pc, #204]	; (8002db0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002ce4:	f007 fb1e 	bl	800a324 <HAL_GPIO_ReadPin>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <HAL_GPIO_EXTI_Callback+0x36>

					boutonAtime=0;
 8002cee:	4b31      	ldr	r3, [pc, #196]	; (8002db4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
					tbtn1=HAL_GetTick();
 8002cf4:	f005 fab6 	bl	8008264 <HAL_GetTick>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4b2e      	ldr	r3, [pc, #184]	; (8002db8 <HAL_GPIO_EXTI_Callback+0xec>)
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e010      	b.n	8002d24 <HAL_GPIO_EXTI_Callback+0x58>


				}
				else{
					BTN_A++;
 8002d02:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <HAL_GPIO_EXTI_Callback+0xf0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3301      	adds	r3, #1
 8002d08:	4a2c      	ldr	r2, [pc, #176]	; (8002dbc <HAL_GPIO_EXTI_Callback+0xf0>)
 8002d0a:	6013      	str	r3, [r2, #0]

					boutonAtime=HAL_GetTick()-tbtn1;
 8002d0c:	f005 faaa 	bl	8008264 <HAL_GetTick>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4a29      	ldr	r2, [pc, #164]	; (8002db8 <HAL_GPIO_EXTI_Callback+0xec>)
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b26      	ldr	r3, [pc, #152]	; (8002db4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002d1c:	601a      	str	r2, [r3, #0]
					tbtn1=0;
 8002d1e:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <HAL_GPIO_EXTI_Callback+0xec>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]


				}

				if(boutonAtime>=400){
 8002d24:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002d2c:	db07      	blt.n	8002d3e <HAL_GPIO_EXTI_Callback+0x72>
					BTN_A_LONG++;
 8002d2e:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	4a22      	ldr	r2, [pc, #136]	; (8002dc0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002d36:	6013      	str	r3, [r2, #0]
					BTN_A=0;
 8002d38:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <HAL_GPIO_EXTI_Callback+0xf0>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
				}

	}
	if(GPIO_Pin==GPIO_PIN_15){
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d44:	d12f      	bne.n	8002da6 <HAL_GPIO_EXTI_Callback+0xda>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)== GPIO_PIN_RESET){
 8002d46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d4a:	4819      	ldr	r0, [pc, #100]	; (8002db0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002d4c:	f007 faea 	bl	800a324 <HAL_GPIO_ReadPin>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <HAL_GPIO_EXTI_Callback+0x9e>

			boutonBtime=0;
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
			tbtn2=HAL_GetTick();
 8002d5c:	f005 fa82 	bl	8008264 <HAL_GetTick>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	e010      	b.n	8002d8c <HAL_GPIO_EXTI_Callback+0xc0>


		}
		else{
			BTN_B++;
 8002d6a:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <HAL_GPIO_EXTI_Callback+0x100>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	4a16      	ldr	r2, [pc, #88]	; (8002dcc <HAL_GPIO_EXTI_Callback+0x100>)
 8002d72:	6013      	str	r3, [r2, #0]

			boutonBtime=HAL_GetTick()-tbtn2;
 8002d74:	f005 fa76 	bl	8008264 <HAL_GetTick>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002d84:	601a      	str	r2, [r3, #0]
			tbtn2=0;
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]


		}

		if(boutonBtime>=400){
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002d94:	db07      	blt.n	8002da6 <HAL_GPIO_EXTI_Callback+0xda>
			BTN_B_LONG++;
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <HAL_GPIO_EXTI_Callback+0x104>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	4a0c      	ldr	r2, [pc, #48]	; (8002dd0 <HAL_GPIO_EXTI_Callback+0x104>)
 8002d9e:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <HAL_GPIO_EXTI_Callback+0x100>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
		}



	}
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	48000800 	.word	0x48000800
 8002db4:	20000cac 	.word	0x20000cac
 8002db8:	20000cb4 	.word	0x20000cb4
 8002dbc:	20000878 	.word	0x20000878
 8002dc0:	20000cc0 	.word	0x20000cc0
 8002dc4:	20000cb0 	.word	0x20000cb0
 8002dc8:	20000cb8 	.word	0x20000cb8
 8002dcc:	2000087c 	.word	0x2000087c
 8002dd0:	20000cbc 	.word	0x20000cbc

08002dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dda:	f005 f9d5 	bl	8008188 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002dde:	f7fe fd47 	bl	8001870 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002de2:	f000 f8a5 	bl	8002f30 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002de6:	f000 f911 	bl	800300c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002dea:	f7ff ff37 	bl	8002c5c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dee:	f7fe ff39 	bl	8001c64 <MX_GPIO_Init>
  MX_DMA_Init();
 8002df2:	f7fe fef4 	bl	8001bde <MX_DMA_Init>
  MX_ADC1_Init();
 8002df6:	f7fe fac1 	bl	800137c <MX_ADC1_Init>
  MX_I2C1_Init();
 8002dfa:	f7ff fdd3 	bl	80029a4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002dfe:	f7ff fe11 	bl	8002a24 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002e02:	f004 ff47 	bl	8007c94 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8002e06:	f004 fc75 	bl	80076f4 <MX_TIM2_Init>
  MX_TIM16_Init();
 8002e0a:	f004 fcc1 	bl	8007790 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002e0e:	f004 fce7 	bl	80077e0 <MX_TIM17_Init>
  MX_SPI1_Init();
 8002e12:	f000 fe95 	bl	8003b40 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002e16:	f004 ff89 	bl	8007d2c <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8002e1a:	f017 f8d3 	bl	8019fc4 <MX_USB_Device_Init>
  MX_RTC_Init();
 8002e1e:	f000 fdf5 	bl	8003a0c <MX_RTC_Init>
  MX_RF_Init();
 8002e22:	f000 fdc1 	bl	80039a8 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Abort(&huart1);
 8002e26:	4832      	ldr	r0, [pc, #200]	; (8002ef0 <main+0x11c>)
 8002e28:	f00d fdb0 	bl	801098c <HAL_UART_Abort>
    HAL_UART_DeInit(&huart1);
 8002e2c:	4830      	ldr	r0, [pc, #192]	; (8002ef0 <main+0x11c>)
 8002e2e:	f00d fc93 	bl	8010758 <HAL_UART_DeInit>

    HAL_I2C_DeInit(&hi2c1);
 8002e32:	4830      	ldr	r0, [pc, #192]	; (8002ef4 <main+0x120>)
 8002e34:	f007 fb7d 	bl	800a532 <HAL_I2C_DeInit>



  	ssd1306_Init();
 8002e38:	f001 f966 	bl	8004108 <ssd1306_Init>

  	HAL_Delay(10);
 8002e3c:	200a      	movs	r0, #10
 8002e3e:	f7fe fe52 	bl	8001ae6 <HAL_Delay>
  	ssd1306_Fill(Black);
 8002e42:	2000      	movs	r0, #0
 8002e44:	f001 f9ca 	bl	80041dc <ssd1306_Fill>

  	ssd1306_DrawBitmap(32, 12, startimg, 64, 64, White);
 8002e48:	2301      	movs	r3, #1
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	2340      	movs	r3, #64	; 0x40
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	2340      	movs	r3, #64	; 0x40
 8002e52:	4a29      	ldr	r2, [pc, #164]	; (8002ef8 <main+0x124>)
 8002e54:	210c      	movs	r1, #12
 8002e56:	2020      	movs	r0, #32
 8002e58:	f001 fc92 	bl	8004780 <ssd1306_DrawBitmap>
  	ssd1306_UpdateScreen();
 8002e5c:	f001 f9d6 	bl	800420c <ssd1306_UpdateScreen>


  	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8002e60:	2203      	movs	r2, #3
 8002e62:	4926      	ldr	r1, [pc, #152]	; (8002efc <main+0x128>)
 8002e64:	4826      	ldr	r0, [pc, #152]	; (8002f00 <main+0x12c>)
 8002e66:	f005 fd35 	bl	80088d4 <HAL_ADC_Start_DMA>
  	HAL_TIM_Base_Start(&htim2);
 8002e6a:	4826      	ldr	r0, [pc, #152]	; (8002f04 <main+0x130>)
 8002e6c:	f00c ffb4 	bl	800fdd8 <HAL_TIM_Base_Start>
  	HAL_TIM_Base_Start_IT(&htim16);
 8002e70:	4825      	ldr	r0, [pc, #148]	; (8002f08 <main+0x134>)
 8002e72:	f00c fff7 	bl	800fe64 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim17);
 8002e76:	4825      	ldr	r0, [pc, #148]	; (8002f0c <main+0x138>)
 8002e78:	f00c fff4 	bl	800fe64 <HAL_TIM_Base_Start_IT>

  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	2101      	movs	r1, #1
 8002e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e84:	f007 fa66 	bl	800a354 <HAL_GPIO_WritePin>

  	HAL_Delay(100);
 8002e88:	2064      	movs	r0, #100	; 0x64
 8002e8a:	f7fe fe2c 	bl	8001ae6 <HAL_Delay>
  	HAL_UART_Abort(&hlpuart1);
 8002e8e:	4820      	ldr	r0, [pc, #128]	; (8002f10 <main+0x13c>)
 8002e90:	f00d fd7c 	bl	801098c <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8002e94:	2240      	movs	r2, #64	; 0x40
 8002e96:	491f      	ldr	r1, [pc, #124]	; (8002f14 <main+0x140>)
 8002e98:	481d      	ldr	r0, [pc, #116]	; (8002f10 <main+0x13c>)
 8002e9a:	f00d fd2b 	bl	80108f4 <HAL_UART_Receive_DMA>

  	memset(flashread,'1',256);
 8002e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ea2:	2131      	movs	r1, #49	; 0x31
 8002ea4:	481c      	ldr	r0, [pc, #112]	; (8002f18 <main+0x144>)
 8002ea6:	f019 fff4 	bl	801ce92 <memset>
  	memset(flashwrite,'\0',256);
 8002eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eae:	2100      	movs	r1, #0
 8002eb0:	481a      	ldr	r0, [pc, #104]	; (8002f1c <main+0x148>)
 8002eb2:	f019 ffee 	bl	801ce92 <memset>
  	memset((uint8_t *)bufferscreen ,'\0',50);
 8002eb6:	2232      	movs	r2, #50	; 0x32
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4819      	ldr	r0, [pc, #100]	; (8002f20 <main+0x14c>)
 8002ebc:	f019 ffe9 	bl	801ce92 <memset>

  	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_7);
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <main+0x150>)
 8002ec4:	4918      	ldr	r1, [pc, #96]	; (8002f28 <main+0x154>)
 8002ec6:	4819      	ldr	r0, [pc, #100]	; (8002f2c <main+0x158>)
 8002ec8:	f016 f953 	bl	8019172 <SPIF_Init>



  	getindex();
 8002ecc:	f000 ffe8 	bl	8003ea0 <getindex>

  	ssd1306_Fill(Black);
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f001 f983 	bl	80041dc <ssd1306_Fill>

  	HAL_Delay(700);
 8002ed6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002eda:	f7fe fe04 	bl	8001ae6 <HAL_Delay>

  	//LL_HSEM_1StepLock( HSEM, 5 );
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002ede:	f7fe fcd5 	bl	800188c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002ee2:	f7fe fe25 	bl	8001b30 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
	  statemachine();
 8002ee6:	f001 ff1f 	bl	8004d28 <statemachine>
	  ssd1306_UpdateScreen();
 8002eea:	f001 f98f 	bl	800420c <ssd1306_UpdateScreen>
    MX_APPE_Process();
 8002eee:	e7f8      	b.n	8002ee2 <main+0x10e>
 8002ef0:	20001444 	.word	0x20001444
 8002ef4:	20000504 	.word	0x20000504
 8002ef8:	08021c0c 	.word	0x08021c0c
 8002efc:	200008a0 	.word	0x200008a0
 8002f00:	200003a0 	.word	0x200003a0
 8002f04:	200012cc 	.word	0x200012cc
 8002f08:	20001318 	.word	0x20001318
 8002f0c:	20001364 	.word	0x20001364
 8002f10:	200013b0 	.word	0x200013b0
 8002f14:	200005f8 	.word	0x200005f8
 8002f18:	200009b4 	.word	0x200009b4
 8002f1c:	200008b4 	.word	0x200008b4
 8002f20:	20000ad8 	.word	0x20000ad8
 8002f24:	48000400 	.word	0x48000400
 8002f28:	20000d58 	.word	0x20000d58
 8002f2c:	20000880 	.word	0x20000880

08002f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b09a      	sub	sp, #104	; 0x68
 8002f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f36:	f107 0320 	add.w	r3, r7, #32
 8002f3a:	2248      	movs	r2, #72	; 0x48
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f019 ffa7 	bl	801ce92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f44:	1d3b      	adds	r3, r7, #4
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	60da      	str	r2, [r3, #12]
 8002f50:	611a      	str	r2, [r3, #16]
 8002f52:	615a      	str	r2, [r3, #20]
 8002f54:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f56:	4b2c      	ldr	r3, [pc, #176]	; (8003008 <SystemClock_Config+0xd8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f5e:	4a2a      	ldr	r2, [pc, #168]	; (8003008 <SystemClock_Config+0xd8>)
 8002f60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	4b28      	ldr	r3, [pc, #160]	; (8003008 <SystemClock_Config+0xd8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002f72:	2327      	movs	r3, #39	; 0x27
 8002f74:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f86:	2301      	movs	r3, #1
 8002f88:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f8a:	2340      	movs	r3, #64	; 0x40
 8002f8c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002f92:	2360      	movs	r3, #96	; 0x60
 8002f94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f96:	2302      	movs	r3, #2
 8002f98:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8002fa2:	2320      	movs	r3, #32
 8002fa4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002faa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002fac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002fb0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002fb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fb6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fb8:	f107 0320 	add.w	r3, r7, #32
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f00a f9df 	bl	800d380 <HAL_RCC_OscConfig>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002fc8:	f000 f854 	bl	8003074 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002fcc:	236f      	movs	r3, #111	; 0x6f
 8002fce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002fe0:	2380      	movs	r3, #128	; 0x80
 8002fe2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	2103      	movs	r1, #3
 8002fec:	4618      	mov	r0, r3
 8002fee:	f00a fd3b 	bl	800da68 <HAL_RCC_ClockConfig>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002ff8:	f000 f83c 	bl	8003074 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002ffc:	f00b faf6 	bl	800e5ec <HAL_RCCEx_EnableMSIPLLMode>
}
 8003000:	bf00      	nop
 8003002:	3768      	adds	r7, #104	; 0x68
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	58000400 	.word	0x58000400

0800300c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b094      	sub	sp, #80	; 0x50
 8003010:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003012:	463b      	mov	r3, r7
 8003014:	2250      	movs	r2, #80	; 0x50
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f019 ff3a 	bl	801ce92 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 800301e:	f44f 5354 	mov.w	r3, #13568	; 0x3500
 8003022:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8003024:	2318      	movs	r3, #24
 8003026:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8003028:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800302c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800302e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003032:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8003034:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003038:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 800303a:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 800303e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003040:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003046:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800304a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 800304c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8003052:	2300      	movs	r3, #0
 8003054:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8003056:	2310      	movs	r3, #16
 8003058:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800305a:	463b      	mov	r3, r7
 800305c:	4618      	mov	r0, r3
 800305e:	f00b f94f 	bl	800e300 <HAL_RCCEx_PeriphCLKConfig>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8003068:	f000 f804 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800306c:	bf00      	nop
 800306e:	3750      	adds	r7, #80	; 0x50
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003078:	b672      	cpsid	i
}
 800307a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800307c:	e7fe      	b.n	800307c <Error_Handler+0x8>

0800307e <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b086      	sub	sp, #24
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd f8ca 	bl	8000220 <strlen>
 800308c:	4603      	mov	r3, r0
 800308e:	2b04      	cmp	r3, #4
 8003090:	d801      	bhi.n	8003096 <gps_checksum+0x18>
 8003092:	2300      	movs	r3, #0
 8003094:	e038      	b.n	8003108 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fd f8c2 	bl	8000220 <strlen>
 800309c:	4603      	mov	r3, r0
 800309e:	3b04      	subs	r3, #4
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7fd f8b9 	bl	8000220 <strlen>
 80030ae:	4603      	mov	r3, r0
 80030b0:	3b03      	subs	r3, #3
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	e00a      	b.n	80030da <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	4053      	eors	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	3301      	adds	r3, #1
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd f8a0 	bl	8000220 <strlen>
 80030e0:	4603      	mov	r3, r0
 80030e2:	1f5a      	subs	r2, r3, #5
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d8ec      	bhi.n	80030c4 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 80030ea:	f107 0308 	add.w	r3, r7, #8
 80030ee:	2210      	movs	r2, #16
 80030f0:	2100      	movs	r1, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	f018 fef4 	bl	801bee0 <strtol>
 80030f8:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d101      	bne.n	8003106 <gps_checksum+0x88>
        return 1;
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8003106:	2300      	movs	r3, #0
    }
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b0b7      	sub	sp, #220	; 0xdc
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8003120:	f107 0320 	add.w	r3, r7, #32
 8003124:	2264      	movs	r2, #100	; 0x64
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f019 feb2 	bl	801ce92 <memset>
    char *marker = strtok(inputString, ",");
 800312e:	49c2      	ldr	r1, [pc, #776]	; (8003438 <nmea_GPGGA+0x328>)
 8003130:	6838      	ldr	r0, [r7, #0]
 8003132:	f019 fec9 	bl	801cec8 <strtok>
 8003136:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 800313a:	e027      	b.n	800318c <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800313c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003140:	f7fd f86e 	bl	8000220 <strlen>
 8003144:	4603      	mov	r3, r0
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 800314c:	1c63      	adds	r3, r4, #1
 800314e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003152:	4610      	mov	r0, r2
 8003154:	f017 ff0a 	bl	801af6c <malloc>
 8003158:	4603      	mov	r3, r0
 800315a:	461a      	mov	r2, r3
 800315c:	00a3      	lsls	r3, r4, #2
 800315e:	33d8      	adds	r3, #216	; 0xd8
 8003160:	443b      	add	r3, r7
 8003162:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8003166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800316a:	3b01      	subs	r3, #1
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	33d8      	adds	r3, #216	; 0xd8
 8003170:	443b      	add	r3, r7
 8003172:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8003176:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800317a:	4618      	mov	r0, r3
 800317c:	f019 ff9d 	bl	801d0ba <strcpy>
        marker = strtok(NULL, ",");
 8003180:	49ad      	ldr	r1, [pc, #692]	; (8003438 <nmea_GPGGA+0x328>)
 8003182:	2000      	movs	r0, #0
 8003184:	f019 fea0 	bl	801cec8 <strtok>
 8003188:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 800318c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1d3      	bne.n	800313c <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8003194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	332c      	adds	r3, #44	; 0x2c
 80031a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f019 ff84 	bl	801d0ba <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 80031b2:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80031b6:	2b53      	cmp	r3, #83	; 0x53
 80031b8:	d004      	beq.n	80031c4 <nmea_GPGGA+0xb4>
 80031ba:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80031be:	2b4e      	cmp	r3, #78	; 0x4e
 80031c0:	f040 8159 	bne.w	8003476 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 80031c4:	2300      	movs	r3, #0
 80031c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031ca:	e010      	b.n	80031ee <nmea_GPGGA+0xde>
 80031cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031d2:	4413      	add	r3, r2
 80031d4:	7819      	ldrb	r1, [r3, #0]
 80031d6:	f107 021c 	add.w	r2, r7, #28
 80031da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031de:	4413      	add	r3, r2
 80031e0:	460a      	mov	r2, r1
 80031e2:	701a      	strb	r2, [r3, #0]
 80031e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031e8:	3301      	adds	r3, #1
 80031ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	ddea      	ble.n	80031cc <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 80031f6:	2300      	movs	r3, #0
 80031f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031fc:	e011      	b.n	8003222 <nmea_GPGGA+0x112>
 80031fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003200:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003204:	3302      	adds	r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	7819      	ldrb	r1, [r3, #0]
 800320a:	f107 0214 	add.w	r2, r7, #20
 800320e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003212:	4413      	add	r3, r2
 8003214:	460a      	mov	r2, r1
 8003216:	701a      	strb	r2, [r3, #0]
 8003218:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800321c:	3301      	adds	r3, #1
 800321e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003222:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003226:	2b05      	cmp	r3, #5
 8003228:	dde9      	ble.n	80031fe <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 800322a:	f107 031c 	add.w	r3, r7, #28
 800322e:	220a      	movs	r2, #10
 8003230:	2100      	movs	r1, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f018 fe54 	bl	801bee0 <strtol>
 8003238:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 800323c:	f107 0314 	add.w	r3, r7, #20
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f018 fd62 	bl	801bd0c <strtof>
 8003248:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 800324c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003250:	ee07 3a90 	vmov	s15, r3
 8003254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003258:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800325c:	ed9f 6a77 	vldr	s12, [pc, #476]	; 800343c <nmea_GPGGA+0x32c>
 8003260:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003268:	ee17 0a90 	vmov	r0, s15
 800326c:	f7fd f944 	bl	80004f8 <__aeabi_f2d>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8003278:	2300      	movs	r3, #0
 800327a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800327e:	e010      	b.n	80032a2 <nmea_GPGGA+0x192>
 8003280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003282:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003286:	4413      	add	r3, r2
 8003288:	7819      	ldrb	r1, [r3, #0]
 800328a:	f107 0210 	add.w	r2, r7, #16
 800328e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003292:	4413      	add	r3, r2
 8003294:	460a      	mov	r2, r1
 8003296:	701a      	strb	r2, [r3, #0]
 8003298:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800329c:	3301      	adds	r3, #1
 800329e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	ddea      	ble.n	8003280 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 80032aa:	2300      	movs	r3, #0
 80032ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032b0:	e011      	b.n	80032d6 <nmea_GPGGA+0x1c6>
 80032b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032b8:	3303      	adds	r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	7819      	ldrb	r1, [r3, #0]
 80032be:	f107 0208 	add.w	r2, r7, #8
 80032c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032c6:	4413      	add	r3, r2
 80032c8:	460a      	mov	r2, r1
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032d0:	3301      	adds	r3, #1
 80032d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032da:	2b05      	cmp	r3, #5
 80032dc:	dde9      	ble.n	80032b2 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 80032de:	f107 0310 	add.w	r3, r7, #16
 80032e2:	220a      	movs	r2, #10
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f018 fdfa 	bl	801bee0 <strtol>
 80032ec:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 80032f0:	f107 0308 	add.w	r3, r7, #8
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f018 fd08 	bl	801bd0c <strtof>
 80032fc:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003300:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003304:	ee07 3a90 	vmov	s15, r3
 8003308:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800330c:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8003310:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 800343c <nmea_GPGGA+0x32c>
 8003314:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331c:	ee17 0a90 	vmov	r0, s15
 8003320:	f7fd f8ea 	bl	80004f8 <__aeabi_f2d>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003338:	f7fd fb9e 	bl	8000a78 <__aeabi_dcmpeq>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d176      	bne.n	8003430 <nmea_GPGGA+0x320>
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800334e:	f7fd fb93 	bl	8000a78 <__aeabi_dcmpeq>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d16b      	bne.n	8003430 <nmea_GPGGA+0x320>
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	4b38      	ldr	r3, [pc, #224]	; (8003440 <nmea_GPGGA+0x330>)
 800335e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003362:	f7fd fb93 	bl	8000a8c <__aeabi_dcmplt>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d061      	beq.n	8003430 <nmea_GPGGA+0x320>
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	4b34      	ldr	r3, [pc, #208]	; (8003444 <nmea_GPGGA+0x334>)
 8003372:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8003376:	f7fd fb89 	bl	8000a8c <__aeabi_dcmplt>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d057      	beq.n	8003430 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8003386:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8003390:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003398:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 80033a2:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 80033a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f018 fcaf 	bl	801bd0c <strtof>
 80033ae:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80033b2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80033b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033be:	d102      	bne.n	80033c6 <nmea_GPGGA+0x2b6>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	e001      	b.n	80033ca <nmea_GPGGA+0x2ba>
 80033c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 80033ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d0:	220a      	movs	r2, #10
 80033d2:	2100      	movs	r1, #0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f018 fd83 	bl	801bee0 <strtol>
 80033da:	4602      	mov	r2, r0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 80033e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e2:	220a      	movs	r2, #10
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f018 fd7a 	bl	801bee0 <strtol>
 80033ec:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 80033f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bfcc      	ite	gt
 80033f8:	2301      	movgt	r3, #1
 80033fa:	2300      	movle	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8003404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f018 fc7f 	bl	801bd0c <strtof>
 800340e:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8003412:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003416:	eef5 7a40 	vcmp.f32	s15, #0.0
 800341a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341e:	d102      	bne.n	8003426 <nmea_GPGGA+0x316>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	e001      	b.n	800342a <nmea_GPGGA+0x31a>
 8003426:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800342e:	e022      	b.n	8003476 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8003430:	2300      	movs	r3, #0
 8003432:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003436:	e016      	b.n	8003466 <nmea_GPGGA+0x356>
 8003438:	080216fc 	.word	0x080216fc
 800343c:	42700000 	.word	0x42700000
 8003440:	40568000 	.word	0x40568000
 8003444:	40668000 	.word	0x40668000
 8003448:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	33d8      	adds	r3, #216	; 0xd8
 8003450:	443b      	add	r3, r7
 8003452:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8003456:	4618      	mov	r0, r3
 8003458:	f017 fd90 	bl	801af7c <free>
 800345c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003460:	3301      	adds	r3, #1
 8003462:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003466:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800346a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800346e:	429a      	cmp	r2, r3
 8003470:	dbea      	blt.n	8003448 <nmea_GPGGA+0x338>
            return 0;
 8003472:	2300      	movs	r3, #0
 8003474:	e019      	b.n	80034aa <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8003476:	2300      	movs	r3, #0
 8003478:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800347c:	e00e      	b.n	800349c <nmea_GPGGA+0x38c>
 800347e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	33d8      	adds	r3, #216	; 0xd8
 8003486:	443b      	add	r3, r7
 8003488:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800348c:	4618      	mov	r0, r3
 800348e:	f017 fd75 	bl	801af7c <free>
 8003492:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003496:	3301      	adds	r3, #1
 8003498:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800349c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80034a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034a4:	429a      	cmp	r2, r3
 80034a6:	dbea      	blt.n	800347e <nmea_GPGGA+0x36e>
    return 1;
 80034a8:	2301      	movs	r3, #1
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	37dc      	adds	r7, #220	; 0xdc
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd90      	pop	{r4, r7, pc}
 80034b2:	bf00      	nop

080034b4 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 80034b4:	b590      	push	{r4, r7, lr}
 80034b6:	b0a3      	sub	sp, #140	; 0x8c
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 80034c4:	f107 030c 	add.w	r3, r7, #12
 80034c8:	2264      	movs	r2, #100	; 0x64
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f019 fce0 	bl	801ce92 <memset>
    char *marker = strtok(inputString, ",");
 80034d2:	493b      	ldr	r1, [pc, #236]	; (80035c0 <nmea_GPGSA+0x10c>)
 80034d4:	6838      	ldr	r0, [r7, #0]
 80034d6:	f019 fcf7 	bl	801cec8 <strtok>
 80034da:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 80034de:	e027      	b.n	8003530 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80034e0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80034e4:	f7fc fe9c 	bl	8000220 <strlen>
 80034e8:	4603      	mov	r3, r0
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 80034f0:	1c63      	adds	r3, r4, #1
 80034f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034f6:	4610      	mov	r0, r2
 80034f8:	f017 fd38 	bl	801af6c <malloc>
 80034fc:	4603      	mov	r3, r0
 80034fe:	461a      	mov	r2, r3
 8003500:	00a3      	lsls	r3, r4, #2
 8003502:	3388      	adds	r3, #136	; 0x88
 8003504:	443b      	add	r3, r7
 8003506:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 800350a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800350e:	3b01      	subs	r3, #1
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	3388      	adds	r3, #136	; 0x88
 8003514:	443b      	add	r3, r7
 8003516:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800351a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800351e:	4618      	mov	r0, r3
 8003520:	f019 fdcb 	bl	801d0ba <strcpy>
        marker = strtok(NULL, ",");
 8003524:	4926      	ldr	r1, [pc, #152]	; (80035c0 <nmea_GPGSA+0x10c>)
 8003526:	2000      	movs	r0, #0
 8003528:	f019 fcce 	bl	801cec8 <strtok>
 800352c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8003530:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1d3      	bne.n	80034e0 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	220a      	movs	r2, #10
 800353c:	2100      	movs	r1, #0
 800353e:	4618      	mov	r0, r3
 8003540:	f018 fcce 	bl	801bee0 <strtol>
 8003544:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8003546:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003548:	2b01      	cmp	r3, #1
 800354a:	bfcc      	ite	gt
 800354c:	2301      	movgt	r3, #1
 800354e:	2300      	movle	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	461a      	mov	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 800355c:	2303      	movs	r3, #3
 800355e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003560:	e00e      	b.n	8003580 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8003562:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	3388      	adds	r3, #136	; 0x88
 8003568:	443b      	add	r3, r7
 800356a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <nmea_GPGSA+0xc6>
            satelliteCount++;
 8003574:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003576:	3301      	adds	r3, #1
 8003578:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 800357a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800357c:	3301      	adds	r3, #1
 800357e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003582:	2b0e      	cmp	r3, #14
 8003584:	dded      	ble.n	8003562 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800358a:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 800358c:	2300      	movs	r3, #0
 800358e:	677b      	str	r3, [r7, #116]	; 0x74
 8003590:	e00b      	b.n	80035aa <nmea_GPGSA+0xf6>
 8003592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	3388      	adds	r3, #136	; 0x88
 8003598:	443b      	add	r3, r7
 800359a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800359e:	4618      	mov	r0, r3
 80035a0:	f017 fcec 	bl	801af7c <free>
 80035a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035a6:	3301      	adds	r3, #1
 80035a8:	677b      	str	r3, [r7, #116]	; 0x74
 80035aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035b0:	429a      	cmp	r2, r3
 80035b2:	dbee      	blt.n	8003592 <nmea_GPGSA+0xde>
    return 1;
 80035b4:	2301      	movs	r3, #1
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	378c      	adds	r7, #140	; 0x8c
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd90      	pop	{r4, r7, pc}
 80035be:	bf00      	nop
 80035c0:	080216fc 	.word	0x080216fc
 80035c4:	00000000 	.word	0x00000000

080035c8 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b0a1      	sub	sp, #132	; 0x84
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 80035d6:	f107 030c 	add.w	r3, r7, #12
 80035da:	2264      	movs	r2, #100	; 0x64
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f019 fc57 	bl	801ce92 <memset>
    char *marker = strtok(inputString, ",");
 80035e4:	4930      	ldr	r1, [pc, #192]	; (80036a8 <nmea_GNRMC+0xe0>)
 80035e6:	6838      	ldr	r0, [r7, #0]
 80035e8:	f019 fc6e 	bl	801cec8 <strtok>
 80035ec:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 80035ee:	e021      	b.n	8003634 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80035f0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80035f2:	f7fc fe15 	bl	8000220 <strlen>
 80035f6:	4603      	mov	r3, r0
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80035fc:	1c63      	adds	r3, r4, #1
 80035fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003600:	4610      	mov	r0, r2
 8003602:	f017 fcb3 	bl	801af6c <malloc>
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	00a3      	lsls	r3, r4, #2
 800360c:	3380      	adds	r3, #128	; 0x80
 800360e:	443b      	add	r3, r7
 8003610:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8003614:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003616:	3b01      	subs	r3, #1
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	3380      	adds	r3, #128	; 0x80
 800361c:	443b      	add	r3, r7
 800361e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8003622:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003624:	4618      	mov	r0, r3
 8003626:	f019 fd48 	bl	801d0ba <strcpy>
        marker = strtok(NULL, ",");
 800362a:	491f      	ldr	r1, [pc, #124]	; (80036a8 <nmea_GNRMC+0xe0>)
 800362c:	2000      	movs	r0, #0
 800362e:	f019 fc4b 	bl	801cec8 <strtok>
 8003632:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8003634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1da      	bne.n	80035f0 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 800363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f018 fb64 	bl	801bd0c <strtof>
 8003644:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8003648:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800364a:	f7fc ff55 	bl	80004f8 <__aeabi_f2d>
 800364e:	a314      	add	r3, pc, #80	; (adr r3, 80036a0 <nmea_GNRMC+0xd8>)
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	f7fd f8d2 	bl	80007fc <__aeabi_ddiv>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4610      	mov	r0, r2
 800365e:	4619      	mov	r1, r3
 8003660:	f7fd fa9a 	bl	8000b98 <__aeabi_d2f>
 8003664:	4602      	mov	r2, r0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 800366a:	2300      	movs	r3, #0
 800366c:	677b      	str	r3, [r7, #116]	; 0x74
 800366e:	e00b      	b.n	8003688 <nmea_GNRMC+0xc0>
 8003670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	3380      	adds	r3, #128	; 0x80
 8003676:	443b      	add	r3, r7
 8003678:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800367c:	4618      	mov	r0, r3
 800367e:	f017 fc7d 	bl	801af7c <free>
 8003682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003684:	3301      	adds	r3, #1
 8003686:	677b      	str	r3, [r7, #116]	; 0x74
 8003688:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800368a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800368c:	429a      	cmp	r2, r3
 800368e:	dbef      	blt.n	8003670 <nmea_GNRMC+0xa8>
    return 1;
 8003690:	2301      	movs	r3, #1
}
 8003692:	4618      	mov	r0, r3
 8003694:	3784      	adds	r7, #132	; 0x84
 8003696:	46bd      	mov	sp, r7
 8003698:	bd90      	pop	{r4, r7, pc}
 800369a:	bf00      	nop
 800369c:	f3af 8000 	nop.w
 80036a0:	be76c8b4 	.word	0xbe76c8b4
 80036a4:	3fff1a9f 	.word	0x3fff1a9f
 80036a8:	080216fc 	.word	0x080216fc

080036ac <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 80036b6:	223c      	movs	r2, #60	; 0x3c
 80036b8:	2100      	movs	r1, #0
 80036ba:	484e      	ldr	r0, [pc, #312]	; (80037f4 <nmea_parse+0x148>)
 80036bc:	f019 fbe9 	bl	801ce92 <memset>
    char * token = strtok(buffer, "$");
 80036c0:	494d      	ldr	r1, [pc, #308]	; (80037f8 <nmea_parse+0x14c>)
 80036c2:	6838      	ldr	r0, [r7, #0]
 80036c4:	f019 fc00 	bl	801cec8 <strtok>
 80036c8:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 80036ce:	e01d      	b.n	800370c <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 80036d0:	6978      	ldr	r0, [r7, #20]
 80036d2:	f7fc fda5 	bl	8000220 <strlen>
 80036d6:	4603      	mov	r3, r0
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	693c      	ldr	r4, [r7, #16]
 80036dc:	1c63      	adds	r3, r4, #1
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	4610      	mov	r0, r2
 80036e2:	f017 fc43 	bl	801af6c <malloc>
 80036e6:	4603      	mov	r3, r0
 80036e8:	461a      	mov	r2, r3
 80036ea:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <nmea_parse+0x148>)
 80036ec:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	4a3f      	ldr	r2, [pc, #252]	; (80037f4 <nmea_parse+0x148>)
 80036f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fa:	6979      	ldr	r1, [r7, #20]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f019 fcdc 	bl	801d0ba <strcpy>
        token = strtok(NULL, "$");
 8003702:	493d      	ldr	r1, [pc, #244]	; (80037f8 <nmea_parse+0x14c>)
 8003704:	2000      	movs	r0, #0
 8003706:	f019 fbdf 	bl	801cec8 <strtok>
 800370a:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1de      	bne.n	80036d0 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	e052      	b.n	80037be <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8003718:	4a36      	ldr	r2, [pc, #216]	; (80037f4 <nmea_parse+0x148>)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003720:	4936      	ldr	r1, [pc, #216]	; (80037fc <nmea_parse+0x150>)
 8003722:	4618      	mov	r0, r3
 8003724:	f019 fc2c 	bl	801cf80 <strstr>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d044      	beq.n	80037b8 <nmea_parse+0x10c>
 800372e:	4a31      	ldr	r2, [pc, #196]	; (80037f4 <nmea_parse+0x148>)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff fca1 	bl	800307e <gps_checksum>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d03a      	beq.n	80037b8 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 8003742:	4a2c      	ldr	r2, [pc, #176]	; (80037f4 <nmea_parse+0x148>)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374a:	492d      	ldr	r1, [pc, #180]	; (8003800 <nmea_parse+0x154>)
 800374c:	4618      	mov	r0, r3
 800374e:	f019 fc17 	bl	801cf80 <strstr>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8003758:	4a26      	ldr	r2, [pc, #152]	; (80037f4 <nmea_parse+0x148>)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003760:	4619      	mov	r1, r3
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff ff30 	bl	80035c8 <nmea_GNRMC>
 8003768:	e026      	b.n	80037b8 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 800376a:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <nmea_parse+0x148>)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003772:	4924      	ldr	r1, [pc, #144]	; (8003804 <nmea_parse+0x158>)
 8003774:	4618      	mov	r0, r3
 8003776:	f019 fc03 	bl	801cf80 <strstr>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8003780:	4a1c      	ldr	r2, [pc, #112]	; (80037f4 <nmea_parse+0x148>)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003788:	4619      	mov	r1, r3
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff fe92 	bl	80034b4 <nmea_GPGSA>
 8003790:	e012      	b.n	80037b8 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 8003792:	4a18      	ldr	r2, [pc, #96]	; (80037f4 <nmea_parse+0x148>)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379a:	491b      	ldr	r1, [pc, #108]	; (8003808 <nmea_parse+0x15c>)
 800379c:	4618      	mov	r0, r3
 800379e:	f019 fbef 	bl	801cf80 <strstr>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 80037a8:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <nmea_parse+0x148>)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b0:	4619      	mov	r1, r3
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff fcac 	bl	8003110 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	3301      	adds	r3, #1
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	dba8      	blt.n	8003718 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 80037c6:	2300      	movs	r3, #0
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	e009      	b.n	80037e0 <nmea_parse+0x134>
 80037cc:	4a09      	ldr	r2, [pc, #36]	; (80037f4 <nmea_parse+0x148>)
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f017 fbd1 	bl	801af7c <free>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	3301      	adds	r3, #1
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	dbf1      	blt.n	80037cc <nmea_parse+0x120>


}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd90      	pop	{r4, r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000cc4 	.word	0x20000cc4
 80037f8:	08021700 	.word	0x08021700
 80037fc:	08021704 	.word	0x08021704
 8003800:	08021708 	.word	0x08021708
 8003804:	08021710 	.word	0x08021710
 8003808:	08021718 	.word	0x08021718
 800380c:	00000000 	.word	0x00000000

08003810 <distancecalc>:

}



double distancecalc(double lat1, double lat2, double long1, double long2){
 8003810:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003814:	b08a      	sub	sp, #40	; 0x28
 8003816:	af00      	add	r7, sp, #0
 8003818:	ed87 0b06 	vstr	d0, [r7, #24]
 800381c:	ed87 1b04 	vstr	d1, [r7, #16]
 8003820:	ed87 2b02 	vstr	d2, [r7, #8]
 8003824:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 8003834:	a358      	add	r3, pc, #352	; (adr r3, 8003998 <distancecalc+0x188>)
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800383e:	f7fc feb3 	bl	80005a8 <__aeabi_dmul>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	ec43 2b17 	vmov	d7, r2, r3
 800384a:	eeb0 0a47 	vmov.f32	s0, s14
 800384e:	eef0 0a67 	vmov.f32	s1, s15
 8003852:	f01c f9fa 	bl	801fc4a <sinl>
 8003856:	ec55 4b10 	vmov	r4, r5, d0
 800385a:	a34f      	add	r3, pc, #316	; (adr r3, 8003998 <distancecalc+0x188>)
 800385c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003860:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003864:	f7fc fea0 	bl	80005a8 <__aeabi_dmul>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	ec43 2b17 	vmov	d7, r2, r3
 8003870:	eeb0 0a47 	vmov.f32	s0, s14
 8003874:	eef0 0a67 	vmov.f32	s1, s15
 8003878:	f01c f9e7 	bl	801fc4a <sinl>
 800387c:	ec53 2b10 	vmov	r2, r3, d0
 8003880:	4620      	mov	r0, r4
 8003882:	4629      	mov	r1, r5
 8003884:	f7fc fe90 	bl	80005a8 <__aeabi_dmul>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4614      	mov	r4, r2
 800388e:	461d      	mov	r5, r3
 8003890:	a341      	add	r3, pc, #260	; (adr r3, 8003998 <distancecalc+0x188>)
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800389a:	f7fc fe85 	bl	80005a8 <__aeabi_dmul>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	ec43 2b17 	vmov	d7, r2, r3
 80038a6:	eeb0 0a47 	vmov.f32	s0, s14
 80038aa:	eef0 0a67 	vmov.f32	s1, s15
 80038ae:	f01c f9ca 	bl	801fc46 <cosl>
 80038b2:	ec59 8b10 	vmov	r8, r9, d0
 80038b6:	a338      	add	r3, pc, #224	; (adr r3, 8003998 <distancecalc+0x188>)
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038c0:	f7fc fe72 	bl	80005a8 <__aeabi_dmul>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	ec43 2b17 	vmov	d7, r2, r3
 80038cc:	eeb0 0a47 	vmov.f32	s0, s14
 80038d0:	eef0 0a67 	vmov.f32	s1, s15
 80038d4:	f01c f9b7 	bl	801fc46 <cosl>
 80038d8:	ec53 2b10 	vmov	r2, r3, d0
 80038dc:	4640      	mov	r0, r8
 80038de:	4649      	mov	r1, r9
 80038e0:	f7fc fe62 	bl	80005a8 <__aeabi_dmul>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4690      	mov	r8, r2
 80038ea:	4699      	mov	r9, r3
 80038ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038f4:	f7fc fca0 	bl	8000238 <__aeabi_dsub>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	a325      	add	r3, pc, #148	; (adr r3, 8003998 <distancecalc+0x188>)
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	f7fc fe4f 	bl	80005a8 <__aeabi_dmul>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	ec43 2b17 	vmov	d7, r2, r3
 8003912:	eeb0 0a47 	vmov.f32	s0, s14
 8003916:	eef0 0a67 	vmov.f32	s1, s15
 800391a:	f01c f994 	bl	801fc46 <cosl>
 800391e:	ec53 2b10 	vmov	r2, r3, d0
 8003922:	4640      	mov	r0, r8
 8003924:	4649      	mov	r1, r9
 8003926:	f7fc fe3f 	bl	80005a8 <__aeabi_dmul>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4620      	mov	r0, r4
 8003930:	4629      	mov	r1, r5
 8003932:	f7fc fc83 	bl	800023c <__adddf3>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	ec43 2b17 	vmov	d7, r2, r3
 800393e:	eeb0 1a47 	vmov.f32	s2, s14
 8003942:	eef0 1a67 	vmov.f32	s3, s15
 8003946:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8003990 <distancecalc+0x180>
 800394a:	f01c f91d 	bl	801fb88 <fmin>
 800394e:	eeb0 7a40 	vmov.f32	s14, s0
 8003952:	eef0 7a60 	vmov.f32	s15, s1
 8003956:	eeb0 0a47 	vmov.f32	s0, s14
 800395a:	eef0 0a67 	vmov.f32	s1, s15
 800395e:	f01c f976 	bl	801fc4e <acosl>
 8003962:	ec51 0b10 	vmov	r0, r1, d0
 8003966:	a30e      	add	r3, pc, #56	; (adr r3, 80039a0 <distancecalc+0x190>)
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f7fc fe1c 	bl	80005a8 <__aeabi_dmul>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 8003978:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800397c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003980:	eeb0 0a47 	vmov.f32	s0, s14
 8003984:	eef0 0a67 	vmov.f32	s1, s15
 8003988:	3728      	adds	r7, #40	; 0x28
 800398a:	46bd      	mov	sp, r7
 800398c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003990:	00000000 	.word	0x00000000
 8003994:	3ff00000 	.word	0x3ff00000
 8003998:	a2529d39 	.word	0xa2529d39
 800399c:	3f91df46 	.word	0x3f91df46
 80039a0:	00000000 	.word	0x00000000
 80039a4:	41584dae 	.word	0x41584dae

080039a8 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80039ac:	bf00      	nop
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80039b6:	b480      	push	{r7}
 80039b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80039ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80039ce:	bf00      	nop
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <LL_APB1_GRP1_EnableClock>:
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80039e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80039f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4013      	ands	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039fc:	68fb      	ldr	r3, [r7, #12]
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003a10:	4b16      	ldr	r3, [pc, #88]	; (8003a6c <MX_RTC_Init+0x60>)
 8003a12:	4a17      	ldr	r2, [pc, #92]	; (8003a70 <MX_RTC_Init+0x64>)
 8003a14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003a16:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <MX_RTC_Init+0x60>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003a1c:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <MX_RTC_Init+0x60>)
 8003a1e:	227f      	movs	r2, #127	; 0x7f
 8003a20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003a22:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <MX_RTC_Init+0x60>)
 8003a24:	f641 6284 	movw	r2, #7812	; 0x1e84
 8003a28:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003a2a:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <MX_RTC_Init+0x60>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <MX_RTC_Init+0x60>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003a36:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <MX_RTC_Init+0x60>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <MX_RTC_Init+0x60>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003a42:	480a      	ldr	r0, [pc, #40]	; (8003a6c <MX_RTC_Init+0x60>)
 8003a44:	f00a feea 	bl	800e81c <HAL_RTC_Init>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003a4e:	f7ff fb11 	bl	8003074 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003a52:	2200      	movs	r2, #0
 8003a54:	2100      	movs	r1, #0
 8003a56:	4805      	ldr	r0, [pc, #20]	; (8003a6c <MX_RTC_Init+0x60>)
 8003a58:	f00a ffe0 	bl	800ea1c <HAL_RTCEx_SetWakeUpTimer_IT>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003a62:	f7ff fb07 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000d00 	.word	0x20000d00
 8003a70:	40002800 	.word	0x40002800

08003a74 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b096      	sub	sp, #88	; 0x58
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a7c:	f107 0308 	add.w	r3, r7, #8
 8003a80:	2250      	movs	r2, #80	; 0x50
 8003a82:	2100      	movs	r1, #0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f019 fa04 	bl	801ce92 <memset>
  if(rtcHandle->Instance==RTC)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a12      	ldr	r2, [pc, #72]	; (8003ad8 <HAL_RTC_MspInit+0x64>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d11d      	bne.n	8003ad0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a98:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8003a9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a9e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aa0:	f107 0308 	add.w	r3, r7, #8
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f00a fc2b 	bl	800e300 <HAL_RCCEx_PeriphCLKConfig>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003ab0:	f7ff fae0 	bl	8003074 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003ab4:	f7ff ff7f 	bl	80039b6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003ab8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003abc:	f7ff ff8c 	bl	80039d8 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	2003      	movs	r0, #3
 8003ac6:	f005 fdac 	bl	8009622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003aca:	2003      	movs	r0, #3
 8003acc:	f005 fdc3 	bl	8009656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	3758      	adds	r7, #88	; 0x58
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40002800 	.word	0x40002800

08003adc <LL_AHB2_GRP1_EnableClock>:
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4013      	ands	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b00:	68fb      	ldr	r3, [r7, #12]
}
 8003b02:	bf00      	nop
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b085      	sub	sp, #20
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b32:	68fb      	ldr	r3, [r7, #12]
}
 8003b34:	bf00      	nop
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b46:	4a1c      	ldr	r2, [pc, #112]	; (8003bb8 <MX_SPI1_Init+0x78>)
 8003b48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b4a:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b52:	4b18      	ldr	r3, [pc, #96]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003b58:	4b16      	ldr	r3, [pc, #88]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b5a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003b5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b60:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b8e:	2207      	movs	r2, #7
 8003b90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b9e:	4805      	ldr	r0, [pc, #20]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003ba0:	f00a fff8 	bl	800eb94 <HAL_SPI_Init>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003baa:	f7ff fa63 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000d58 	.word	0x20000d58
 8003bb8:	40013000 	.word	0x40013000

08003bbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc4:	f107 030c 	add.w	r3, r7, #12
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	609a      	str	r2, [r3, #8]
 8003bd0:	60da      	str	r2, [r3, #12]
 8003bd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a46      	ldr	r2, [pc, #280]	; (8003cf4 <HAL_SPI_MspInit+0x138>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	f040 8085 	bne.w	8003cea <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003be0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003be4:	f7ff ff93 	bl	8003b0e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be8:	2001      	movs	r0, #1
 8003bea:	f7ff ff77 	bl	8003adc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bee:	2002      	movs	r0, #2
 8003bf0:	f7ff ff74 	bl	8003adc <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8003bf4:	2342      	movs	r3, #66	; 0x42
 8003bf6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c04:	2305      	movs	r3, #5
 8003c06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c08:	f107 030c 	add.w	r3, r7, #12
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c12:	f006 f939 	bl	8009e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003c16:	2320      	movs	r3, #32
 8003c18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c26:	2305      	movs	r3, #5
 8003c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c2a:	f107 030c 	add.w	r3, r7, #12
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4831      	ldr	r0, [pc, #196]	; (8003cf8 <HAL_SPI_MspInit+0x13c>)
 8003c32:	f006 f929 	bl	8009e88 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8003c36:	4b31      	ldr	r3, [pc, #196]	; (8003cfc <HAL_SPI_MspInit+0x140>)
 8003c38:	4a31      	ldr	r2, [pc, #196]	; (8003d00 <HAL_SPI_MspInit+0x144>)
 8003c3a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003c3c:	4b2f      	ldr	r3, [pc, #188]	; (8003cfc <HAL_SPI_MspInit+0x140>)
 8003c3e:	2206      	movs	r2, #6
 8003c40:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c42:	4b2e      	ldr	r3, [pc, #184]	; (8003cfc <HAL_SPI_MspInit+0x140>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c48:	4b2c      	ldr	r3, [pc, #176]	; (8003cfc <HAL_SPI_MspInit+0x140>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c4e:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <HAL_SPI_MspInit+0x140>)
 8003c50:	2280      	movs	r2, #128	; 0x80
 8003c52:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c54:	4b29      	ldr	r3, [pc, #164]	; (8003cfc <HAL_SPI_MspInit+0x140>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c5a:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <HAL_SPI_MspInit+0x140>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003c60:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <HAL_SPI_MspInit+0x140>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c66:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <HAL_SPI_MspInit+0x140>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003c6c:	4823      	ldr	r0, [pc, #140]	; (8003cfc <HAL_SPI_MspInit+0x140>)
 8003c6e:	f005 fd37 	bl	80096e0 <HAL_DMA_Init>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8003c78:	f7ff f9fc 	bl	8003074 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <HAL_SPI_MspInit+0x140>)
 8003c80:	659a      	str	r2, [r3, #88]	; 0x58
 8003c82:	4a1e      	ldr	r2, [pc, #120]	; (8003cfc <HAL_SPI_MspInit+0x140>)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8003c88:	4b1e      	ldr	r3, [pc, #120]	; (8003d04 <HAL_SPI_MspInit+0x148>)
 8003c8a:	4a1f      	ldr	r2, [pc, #124]	; (8003d08 <HAL_SPI_MspInit+0x14c>)
 8003c8c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003c8e:	4b1d      	ldr	r3, [pc, #116]	; (8003d04 <HAL_SPI_MspInit+0x148>)
 8003c90:	2207      	movs	r2, #7
 8003c92:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c94:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <HAL_SPI_MspInit+0x148>)
 8003c96:	2210      	movs	r2, #16
 8003c98:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c9a:	4b1a      	ldr	r3, [pc, #104]	; (8003d04 <HAL_SPI_MspInit+0x148>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ca0:	4b18      	ldr	r3, [pc, #96]	; (8003d04 <HAL_SPI_MspInit+0x148>)
 8003ca2:	2280      	movs	r2, #128	; 0x80
 8003ca4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ca6:	4b17      	ldr	r3, [pc, #92]	; (8003d04 <HAL_SPI_MspInit+0x148>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cac:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <HAL_SPI_MspInit+0x148>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003cb2:	4b14      	ldr	r3, [pc, #80]	; (8003d04 <HAL_SPI_MspInit+0x148>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003cb8:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <HAL_SPI_MspInit+0x148>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003cbe:	4811      	ldr	r0, [pc, #68]	; (8003d04 <HAL_SPI_MspInit+0x148>)
 8003cc0:	f005 fd0e 	bl	80096e0 <HAL_DMA_Init>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8003cca:	f7ff f9d3 	bl	8003074 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a0c      	ldr	r2, [pc, #48]	; (8003d04 <HAL_SPI_MspInit+0x148>)
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54
 8003cd4:	4a0b      	ldr	r2, [pc, #44]	; (8003d04 <HAL_SPI_MspInit+0x148>)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2100      	movs	r1, #0
 8003cde:	2022      	movs	r0, #34	; 0x22
 8003ce0:	f005 fc9f 	bl	8009622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003ce4:	2022      	movs	r0, #34	; 0x22
 8003ce6:	f005 fcb6 	bl	8009656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003cea:	bf00      	nop
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40013000 	.word	0x40013000
 8003cf8:	48000400 	.word	0x48000400
 8003cfc:	20000dbc 	.word	0x20000dbc
 8003d00:	40020030 	.word	0x40020030
 8003d04:	20000e1c 	.word	0x20000e1c
 8003d08:	40020044 	.word	0x40020044
 8003d0c:	00000000 	.word	0x00000000

08003d10 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 8003d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d14:	ed2d 8b02 	vpush	{d8}
 8003d18:	b0a7      	sub	sp, #156	; 0x9c
 8003d1a:	af16      	add	r7, sp, #88	; 0x58
 8003d1c:	6378      	str	r0, [r7, #52]	; 0x34
 8003d1e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
 8003d22:	edc7 0a0b 	vstr	s1, [r7, #44]	; 0x2c
 8003d26:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d28:	627a      	str	r2, [r7, #36]	; 0x24
 8003d2a:	ed87 1a08 	vstr	s2, [r7, #32]
	int framesize=0;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	63fb      	str	r3, [r7, #60]	; 0x3c
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 8003d32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d34:	f7fc fbe0 	bl	80004f8 <__aeabi_f2d>
 8003d38:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d3e:	f7fc fbdb 	bl	80004f8 <__aeabi_f2d>
 8003d42:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fc fbd4 	bl	80004f8 <__aeabi_f2d>
 8003d50:	a332      	add	r3, pc, #200	; (adr r3, 8003e1c <csvframe+0x10c>)
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	f7fc fc27 	bl	80005a8 <__aeabi_dmul>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	ec43 2b18 	vmov	d8, r2, r3
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fc fbc0 	bl	80004f8 <__aeabi_f2d>
 8003d78:	4682      	mov	sl, r0
 8003d7a:	468b      	mov	fp, r1
 8003d7c:	6a38      	ldr	r0, [r7, #32]
 8003d7e:	f7fc fbbb 	bl	80004f8 <__aeabi_f2d>
 8003d82:	4b1f      	ldr	r3, [pc, #124]	; (8003e00 <csvframe+0xf0>)
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	4b1e      	ldr	r3, [pc, #120]	; (8003e04 <csvframe+0xf4>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	4b1e      	ldr	r3, [pc, #120]	; (8003e08 <csvframe+0xf8>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <csvframe+0xfc>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	461e      	mov	r6, r3
 8003d9a:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <csvframe+0x100>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b1c      	ldr	r3, [pc, #112]	; (8003e14 <csvframe+0x104>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	9315      	str	r3, [sp, #84]	; 0x54
 8003da6:	9214      	str	r2, [sp, #80]	; 0x50
 8003da8:	9613      	str	r6, [sp, #76]	; 0x4c
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	9212      	str	r2, [sp, #72]	; 0x48
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	9211      	str	r2, [sp, #68]	; 0x44
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	9310      	str	r3, [sp, #64]	; 0x40
 8003db6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	930c      	str	r3, [sp, #48]	; 0x30
 8003dbe:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003dc2:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003dc6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003dca:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003dce:	ed97 7b04 	vldr	d7, [r7, #16]
 8003dd2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003dd6:	ed97 7b06 	vldr	d7, [r7, #24]
 8003dda:	ed8d 7b00 	vstr	d7, [sp]
 8003dde:	4a0e      	ldr	r2, [pc, #56]	; (8003e18 <csvframe+0x108>)
 8003de0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003de4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003de6:	f018 ffbd 	bl	801cd64 <sniprintf>
 8003dea:	63f8      	str	r0, [r7, #60]	; 0x3c
	return framesize;
 8003dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3744      	adds	r7, #68	; 0x44
 8003df2:	46bd      	mov	sp, r7
 8003df4:	ecbd 8b02 	vpop	{d8}
 8003df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dfc:	f3af 8000 	nop.w
 8003e00:	20000012 	.word	0x20000012
 8003e04:	20000011 	.word	0x20000011
 8003e08:	20000010 	.word	0x20000010
 8003e0c:	20000ca5 	.word	0x20000ca5
 8003e10:	20000ca6 	.word	0x20000ca6
 8003e14:	20000ca4 	.word	0x20000ca4
 8003e18:	08021720 	.word	0x08021720
 8003e1c:	cccccccd 	.word	0xcccccccd
 8003e20:	400ccccc 	.word	0x400ccccc

08003e24 <storeindex>:


void storeindex(void){
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b09c      	sub	sp, #112	; 0x70
 8003e28:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 8003e2a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003e2e:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8003e30:	463b      	mov	r3, r7
 8003e32:	2264      	movs	r2, #100	; 0x64
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f019 f82b 	bl	801ce92 <memset>
	snprintf((char *)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 8003e3c:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <storeindex+0x6c>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <storeindex+0x70>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4638      	mov	r0, r7
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <storeindex+0x74>)
 8003e4c:	2164      	movs	r1, #100	; 0x64
 8003e4e:	f018 ff89 	bl	801cd64 <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8003e52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	da00      	bge.n	8003e5a <storeindex+0x36>
 8003e58:	330f      	adds	r3, #15
 8003e5a:	111b      	asrs	r3, r3, #4
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fc fb39 	bl	80004d4 <__aeabi_i2d>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f7fc fe4d 	bl	8000b08 <__aeabi_d2iz>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4619      	mov	r1, r3
 8003e72:	480a      	ldr	r0, [pc, #40]	; (8003e9c <storeindex+0x78>)
 8003e74:	f015 f9c9 	bl	801920a <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8003e78:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003e7a:	463a      	mov	r2, r7
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	2364      	movs	r3, #100	; 0x64
 8003e82:	4806      	ldr	r0, [pc, #24]	; (8003e9c <storeindex+0x78>)
 8003e84:	f015 fa44 	bl	8019310 <SPIF_WritePage>

}
 8003e88:	bf00      	nop
 8003e8a:	3768      	adds	r7, #104	; 0x68
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000ab4 	.word	0x20000ab4
 8003e94:	20000ab8 	.word	0x20000ab8
 8003e98:	08021774 	.word	0x08021774
 8003e9c:	20000880 	.word	0x20000880

08003ea0 <getindex>:

void getindex(void){
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8003ea6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003eaa:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	2332      	movs	r3, #50	; 0x32
 8003eb4:	4a2b      	ldr	r2, [pc, #172]	; (8003f64 <getindex+0xc4>)
 8003eb6:	482c      	ldr	r0, [pc, #176]	; (8003f68 <getindex+0xc8>)
 8003eb8:	f015 fa48 	bl	801934c <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 8003ebc:	220a      	movs	r2, #10
 8003ebe:	2124      	movs	r1, #36	; 0x24
 8003ec0:	482a      	ldr	r0, [pc, #168]	; (8003f6c <getindex+0xcc>)
 8003ec2:	f018 ffe6 	bl	801ce92 <memset>
	memset(numbuf2,'$',10);
 8003ec6:	220a      	movs	r2, #10
 8003ec8:	2124      	movs	r1, #36	; 0x24
 8003eca:	4829      	ldr	r0, [pc, #164]	; (8003f70 <getindex+0xd0>)
 8003ecc:	f018 ffe1 	bl	801ce92 <memset>
	int cnt=0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8003ed4:	4b23      	ldr	r3, [pc, #140]	; (8003f64 <getindex+0xc4>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	2b09      	cmp	r3, #9
 8003ede:	dc3a      	bgt.n	8003f56 <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8003ee0:	e00b      	b.n	8003efa <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 8003ee2:	4a20      	ldr	r2, [pc, #128]	; (8003f64 <getindex+0xc4>)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	7819      	ldrb	r1, [r3, #0]
 8003eea:	4a20      	ldr	r2, [pc, #128]	; (8003f6c <getindex+0xcc>)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	460a      	mov	r2, r1
 8003ef2:	701a      	strb	r2, [r3, #0]
			  cnt++;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 8003efa:	4a1a      	ldr	r2, [pc, #104]	; (8003f64 <getindex+0xc4>)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b24      	cmp	r3, #36	; 0x24
 8003f04:	d1ed      	bne.n	8003ee2 <getindex+0x42>
		  }
		  cnt++;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8003f10:	e00e      	b.n	8003f30 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8003f12:	4a14      	ldr	r2, [pc, #80]	; (8003f64 <getindex+0xc4>)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	7819      	ldrb	r1, [r3, #0]
 8003f1a:	4a15      	ldr	r2, [pc, #84]	; (8003f70 <getindex+0xd0>)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4413      	add	r3, r2
 8003f20:	460a      	mov	r2, r1
 8003f22:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	3301      	adds	r3, #1
 8003f28:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8003f30:	4a0c      	ldr	r2, [pc, #48]	; (8003f64 <getindex+0xc4>)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b24      	cmp	r3, #36	; 0x24
 8003f3a:	d1ea      	bne.n	8003f12 <getindex+0x72>
		  	  }

		 pageoffset=atoi((char *)numbuf1);
 8003f3c:	480b      	ldr	r0, [pc, #44]	; (8003f6c <getindex+0xcc>)
 8003f3e:	f017 f811 	bl	801af64 <atoi>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4a0b      	ldr	r2, [pc, #44]	; (8003f74 <getindex+0xd4>)
 8003f46:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((char *)numbuf2);
 8003f48:	4809      	ldr	r0, [pc, #36]	; (8003f70 <getindex+0xd0>)
 8003f4a:	f017 f80b 	bl	801af64 <atoi>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <getindex+0xd8>)
 8003f52:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8003f54:	e001      	b.n	8003f5a <getindex+0xba>
		storeindex();
 8003f56:	f7ff ff65 	bl	8003e24 <storeindex>
}
 8003f5a:	bf00      	nop
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000d24 	.word	0x20000d24
 8003f68:	20000880 	.word	0x20000880
 8003f6c:	20000ac0 	.word	0x20000ac0
 8003f70:	20000acc 	.word	0x20000acc
 8003f74:	20000ab4 	.word	0x20000ab4
 8003f78:	20000ab8 	.word	0x20000ab8

08003f7c <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 8003f86:	4b3f      	ldr	r3, [pc, #252]	; (8004084 <writebuffertoflash+0x108>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d11b      	bne.n	8003fcc <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8003f94:	4b3c      	ldr	r3, [pc, #240]	; (8004088 <writebuffertoflash+0x10c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d117      	bne.n	8003fcc <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8003f9c:	4b39      	ldr	r3, [pc, #228]	; (8004084 <writebuffertoflash+0x108>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	da00      	bge.n	8003fa8 <writebuffertoflash+0x2c>
 8003fa6:	330f      	adds	r3, #15
 8003fa8:	111b      	asrs	r3, r3, #4
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fc fa92 	bl	80004d4 <__aeabi_i2d>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f7fc fda6 	bl	8000b08 <__aeabi_d2iz>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4832      	ldr	r0, [pc, #200]	; (800408c <writebuffertoflash+0x110>)
 8003fc2:	f015 f922 	bl	801920a <SPIF_EraseSector>
		sectoreraseen=1;
 8003fc6:	4b30      	ldr	r3, [pc, #192]	; (8004088 <writebuffertoflash+0x10c>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8003fcc:	4b30      	ldr	r3, [pc, #192]	; (8004090 <writebuffertoflash+0x114>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	2bff      	cmp	r3, #255	; 0xff
 8003fd6:	dc11      	bgt.n	8003ffc <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8003fd8:	4b2a      	ldr	r3, [pc, #168]	; (8004084 <writebuffertoflash+0x108>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	4a2b      	ldr	r2, [pc, #172]	; (8004090 <writebuffertoflash+0x114>)
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	9200      	str	r2, [sp, #0]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4828      	ldr	r0, [pc, #160]	; (800408c <writebuffertoflash+0x110>)
 8003fea:	f015 f991 	bl	8019310 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8003fee:	4b28      	ldr	r3, [pc, #160]	; (8004090 <writebuffertoflash+0x114>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	4a26      	ldr	r2, [pc, #152]	; (8004090 <writebuffertoflash+0x114>)
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e03c      	b.n	8004076 <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 8003ffc:	4b21      	ldr	r3, [pc, #132]	; (8004084 <writebuffertoflash+0x108>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4619      	mov	r1, r3
 8004002:	4b23      	ldr	r3, [pc, #140]	; (8004090 <writebuffertoflash+0x114>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800400a:	461a      	mov	r2, r3
 800400c:	4b20      	ldr	r3, [pc, #128]	; (8004090 <writebuffertoflash+0x114>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	4613      	mov	r3, r2
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	481d      	ldr	r0, [pc, #116]	; (800408c <writebuffertoflash+0x110>)
 8004018:	f015 f97a 	bl	8019310 <SPIF_WritePage>
		HAL_Delay(100);
 800401c:	2064      	movs	r0, #100	; 0x64
 800401e:	f7fd fd62 	bl	8001ae6 <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8004022:	4b18      	ldr	r3, [pc, #96]	; (8004084 <writebuffertoflash+0x108>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3301      	adds	r3, #1
 8004028:	4618      	mov	r0, r3
 800402a:	4b19      	ldr	r3, [pc, #100]	; (8004090 <writebuffertoflash+0x114>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004032:	461a      	mov	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	1899      	adds	r1, r3, r2
 8004038:	4b15      	ldr	r3, [pc, #84]	; (8004090 <writebuffertoflash+0x114>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	461a      	mov	r2, r3
 8004046:	2300      	movs	r3, #0
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	4613      	mov	r3, r2
 800404c:	460a      	mov	r2, r1
 800404e:	4601      	mov	r1, r0
 8004050:	480e      	ldr	r0, [pc, #56]	; (800408c <writebuffertoflash+0x110>)
 8004052:	f015 f95d 	bl	8019310 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 8004056:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <writebuffertoflash+0x108>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	4a09      	ldr	r2, [pc, #36]	; (8004084 <writebuffertoflash+0x108>)
 800405e:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <writebuffertoflash+0x10c>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <writebuffertoflash+0x114>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	4a07      	ldr	r2, [pc, #28]	; (8004090 <writebuffertoflash+0x114>)
 8004074:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 8004076:	f7ff fed5 	bl	8003e24 <storeindex>

}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000ab8 	.word	0x20000ab8
 8004088:	20000abc 	.word	0x20000abc
 800408c:	20000880 	.word	0x20000880
 8004090:	20000ab4 	.word	0x20000ab4

08004094 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004098:	bf00      	nop
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
	...

080040a4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af04      	add	r7, sp, #16
 80040aa:	4603      	mov	r3, r0
 80040ac:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80040ae:	f04f 33ff 	mov.w	r3, #4294967295
 80040b2:	9302      	str	r3, [sp, #8]
 80040b4:	2301      	movs	r3, #1
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	1dfb      	adds	r3, r7, #7
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	2301      	movs	r3, #1
 80040be:	2200      	movs	r2, #0
 80040c0:	2178      	movs	r1, #120	; 0x78
 80040c2:	4803      	ldr	r0, [pc, #12]	; (80040d0 <ssd1306_WriteCommand+0x2c>)
 80040c4:	f006 fa64 	bl	800a590 <HAL_I2C_Mem_Write>
}
 80040c8:	bf00      	nop
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20000558 	.word	0x20000558

080040d4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af04      	add	r7, sp, #16
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f04f 32ff 	mov.w	r2, #4294967295
 80040e6:	9202      	str	r2, [sp, #8]
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	2301      	movs	r3, #1
 80040f0:	2240      	movs	r2, #64	; 0x40
 80040f2:	2178      	movs	r1, #120	; 0x78
 80040f4:	4803      	ldr	r0, [pc, #12]	; (8004104 <ssd1306_WriteData+0x30>)
 80040f6:	f006 fa4b 	bl	800a590 <HAL_I2C_Mem_Write>
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000558 	.word	0x20000558

08004108 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800410c:	f7ff ffc2 	bl	8004094 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004110:	2064      	movs	r0, #100	; 0x64
 8004112:	f7fd fce8 	bl	8001ae6 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004116:	2000      	movs	r0, #0
 8004118:	f000 fba0 	bl	800485c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800411c:	2020      	movs	r0, #32
 800411e:	f7ff ffc1 	bl	80040a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004122:	2000      	movs	r0, #0
 8004124:	f7ff ffbe 	bl	80040a4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004128:	20b0      	movs	r0, #176	; 0xb0
 800412a:	f7ff ffbb 	bl	80040a4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800412e:	20c8      	movs	r0, #200	; 0xc8
 8004130:	f7ff ffb8 	bl	80040a4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004134:	2000      	movs	r0, #0
 8004136:	f7ff ffb5 	bl	80040a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800413a:	2010      	movs	r0, #16
 800413c:	f7ff ffb2 	bl	80040a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004140:	2040      	movs	r0, #64	; 0x40
 8004142:	f7ff ffaf 	bl	80040a4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004146:	20ff      	movs	r0, #255	; 0xff
 8004148:	f000 fb75 	bl	8004836 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800414c:	20a1      	movs	r0, #161	; 0xa1
 800414e:	f7ff ffa9 	bl	80040a4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004152:	20a6      	movs	r0, #166	; 0xa6
 8004154:	f7ff ffa6 	bl	80040a4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004158:	20a8      	movs	r0, #168	; 0xa8
 800415a:	f7ff ffa3 	bl	80040a4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800415e:	203f      	movs	r0, #63	; 0x3f
 8004160:	f7ff ffa0 	bl	80040a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004164:	20a4      	movs	r0, #164	; 0xa4
 8004166:	f7ff ff9d 	bl	80040a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800416a:	20d3      	movs	r0, #211	; 0xd3
 800416c:	f7ff ff9a 	bl	80040a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004170:	2000      	movs	r0, #0
 8004172:	f7ff ff97 	bl	80040a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004176:	20d5      	movs	r0, #213	; 0xd5
 8004178:	f7ff ff94 	bl	80040a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800417c:	20f0      	movs	r0, #240	; 0xf0
 800417e:	f7ff ff91 	bl	80040a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004182:	20d9      	movs	r0, #217	; 0xd9
 8004184:	f7ff ff8e 	bl	80040a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004188:	2022      	movs	r0, #34	; 0x22
 800418a:	f7ff ff8b 	bl	80040a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800418e:	20da      	movs	r0, #218	; 0xda
 8004190:	f7ff ff88 	bl	80040a4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004194:	2012      	movs	r0, #18
 8004196:	f7ff ff85 	bl	80040a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800419a:	20db      	movs	r0, #219	; 0xdb
 800419c:	f7ff ff82 	bl	80040a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80041a0:	2020      	movs	r0, #32
 80041a2:	f7ff ff7f 	bl	80040a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80041a6:	208d      	movs	r0, #141	; 0x8d
 80041a8:	f7ff ff7c 	bl	80040a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80041ac:	2014      	movs	r0, #20
 80041ae:	f7ff ff79 	bl	80040a4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80041b2:	2001      	movs	r0, #1
 80041b4:	f000 fb52 	bl	800485c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80041b8:	2000      	movs	r0, #0
 80041ba:	f000 f80f 	bl	80041dc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80041be:	f000 f825 	bl	800420c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <ssd1306_Init+0xd0>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80041c8:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <ssd1306_Init+0xd0>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80041ce:	4b02      	ldr	r3, [pc, #8]	; (80041d8 <ssd1306_Init+0xd0>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	711a      	strb	r2, [r3, #4]
}
 80041d4:	bf00      	nop
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	2000127c 	.word	0x2000127c

080041dc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <ssd1306_Fill+0x14>
 80041ec:	2300      	movs	r3, #0
 80041ee:	e000      	b.n	80041f2 <ssd1306_Fill+0x16>
 80041f0:	23ff      	movs	r3, #255	; 0xff
 80041f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041f6:	4619      	mov	r1, r3
 80041f8:	4803      	ldr	r0, [pc, #12]	; (8004208 <ssd1306_Fill+0x2c>)
 80041fa:	f018 fe4a 	bl	801ce92 <memset>
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000e7c 	.word	0x20000e7c

0800420c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004212:	2300      	movs	r3, #0
 8004214:	71fb      	strb	r3, [r7, #7]
 8004216:	e016      	b.n	8004246 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	3b50      	subs	r3, #80	; 0x50
 800421c:	b2db      	uxtb	r3, r3
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff ff40 	bl	80040a4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004224:	2000      	movs	r0, #0
 8004226:	f7ff ff3d 	bl	80040a4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800422a:	2010      	movs	r0, #16
 800422c:	f7ff ff3a 	bl	80040a4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	01db      	lsls	r3, r3, #7
 8004234:	4a08      	ldr	r2, [pc, #32]	; (8004258 <ssd1306_UpdateScreen+0x4c>)
 8004236:	4413      	add	r3, r2
 8004238:	2180      	movs	r1, #128	; 0x80
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff ff4a 	bl	80040d4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	3301      	adds	r3, #1
 8004244:	71fb      	strb	r3, [r7, #7]
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	2b07      	cmp	r3, #7
 800424a:	d9e5      	bls.n	8004218 <ssd1306_UpdateScreen+0xc>
    }
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000e7c 	.word	0x20000e7c

0800425c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	71fb      	strb	r3, [r7, #7]
 8004266:	460b      	mov	r3, r1
 8004268:	71bb      	strb	r3, [r7, #6]
 800426a:	4613      	mov	r3, r2
 800426c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800426e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004272:	2b00      	cmp	r3, #0
 8004274:	db3d      	blt.n	80042f2 <ssd1306_DrawPixel+0x96>
 8004276:	79bb      	ldrb	r3, [r7, #6]
 8004278:	2b3f      	cmp	r3, #63	; 0x3f
 800427a:	d83a      	bhi.n	80042f2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800427c:	797b      	ldrb	r3, [r7, #5]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d11a      	bne.n	80042b8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004282:	79fa      	ldrb	r2, [r7, #7]
 8004284:	79bb      	ldrb	r3, [r7, #6]
 8004286:	08db      	lsrs	r3, r3, #3
 8004288:	b2d8      	uxtb	r0, r3
 800428a:	4603      	mov	r3, r0
 800428c:	01db      	lsls	r3, r3, #7
 800428e:	4413      	add	r3, r2
 8004290:	4a1b      	ldr	r2, [pc, #108]	; (8004300 <ssd1306_DrawPixel+0xa4>)
 8004292:	5cd3      	ldrb	r3, [r2, r3]
 8004294:	b25a      	sxtb	r2, r3
 8004296:	79bb      	ldrb	r3, [r7, #6]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	2101      	movs	r1, #1
 800429e:	fa01 f303 	lsl.w	r3, r1, r3
 80042a2:	b25b      	sxtb	r3, r3
 80042a4:	4313      	orrs	r3, r2
 80042a6:	b259      	sxtb	r1, r3
 80042a8:	79fa      	ldrb	r2, [r7, #7]
 80042aa:	4603      	mov	r3, r0
 80042ac:	01db      	lsls	r3, r3, #7
 80042ae:	4413      	add	r3, r2
 80042b0:	b2c9      	uxtb	r1, r1
 80042b2:	4a13      	ldr	r2, [pc, #76]	; (8004300 <ssd1306_DrawPixel+0xa4>)
 80042b4:	54d1      	strb	r1, [r2, r3]
 80042b6:	e01d      	b.n	80042f4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80042b8:	79fa      	ldrb	r2, [r7, #7]
 80042ba:	79bb      	ldrb	r3, [r7, #6]
 80042bc:	08db      	lsrs	r3, r3, #3
 80042be:	b2d8      	uxtb	r0, r3
 80042c0:	4603      	mov	r3, r0
 80042c2:	01db      	lsls	r3, r3, #7
 80042c4:	4413      	add	r3, r2
 80042c6:	4a0e      	ldr	r2, [pc, #56]	; (8004300 <ssd1306_DrawPixel+0xa4>)
 80042c8:	5cd3      	ldrb	r3, [r2, r3]
 80042ca:	b25a      	sxtb	r2, r3
 80042cc:	79bb      	ldrb	r3, [r7, #6]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	2101      	movs	r1, #1
 80042d4:	fa01 f303 	lsl.w	r3, r1, r3
 80042d8:	b25b      	sxtb	r3, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	b25b      	sxtb	r3, r3
 80042de:	4013      	ands	r3, r2
 80042e0:	b259      	sxtb	r1, r3
 80042e2:	79fa      	ldrb	r2, [r7, #7]
 80042e4:	4603      	mov	r3, r0
 80042e6:	01db      	lsls	r3, r3, #7
 80042e8:	4413      	add	r3, r2
 80042ea:	b2c9      	uxtb	r1, r1
 80042ec:	4a04      	ldr	r2, [pc, #16]	; (8004300 <ssd1306_DrawPixel+0xa4>)
 80042ee:	54d1      	strb	r1, [r2, r3]
 80042f0:	e000      	b.n	80042f4 <ssd1306_DrawPixel+0x98>
        return;
 80042f2:	bf00      	nop
    }
}
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	20000e7c 	.word	0x20000e7c

08004304 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8004304:	b590      	push	{r4, r7, lr}
 8004306:	b089      	sub	sp, #36	; 0x24
 8004308:	af00      	add	r7, sp, #0
 800430a:	4604      	mov	r4, r0
 800430c:	1d38      	adds	r0, r7, #4
 800430e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004312:	461a      	mov	r2, r3
 8004314:	4623      	mov	r3, r4
 8004316:	73fb      	strb	r3, [r7, #15]
 8004318:	4613      	mov	r3, r2
 800431a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	2b1f      	cmp	r3, #31
 8004320:	d902      	bls.n	8004328 <ssd1306_WriteChar+0x24>
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	2b7e      	cmp	r3, #126	; 0x7e
 8004326:	d901      	bls.n	800432c <ssd1306_WriteChar+0x28>
        return 0;
 8004328:	2300      	movs	r3, #0
 800432a:	e06d      	b.n	8004408 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800432c:	4b38      	ldr	r3, [pc, #224]	; (8004410 <ssd1306_WriteChar+0x10c>)
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	793b      	ldrb	r3, [r7, #4]
 8004334:	4413      	add	r3, r2
 8004336:	2b80      	cmp	r3, #128	; 0x80
 8004338:	dc06      	bgt.n	8004348 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800433a:	4b35      	ldr	r3, [pc, #212]	; (8004410 <ssd1306_WriteChar+0x10c>)
 800433c:	885b      	ldrh	r3, [r3, #2]
 800433e:	461a      	mov	r2, r3
 8004340:	797b      	ldrb	r3, [r7, #5]
 8004342:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	dd01      	ble.n	800434c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004348:	2300      	movs	r3, #0
 800434a:	e05d      	b.n	8004408 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800434c:	2300      	movs	r3, #0
 800434e:	61fb      	str	r3, [r7, #28]
 8004350:	e04c      	b.n	80043ec <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	3b20      	subs	r3, #32
 8004358:	7979      	ldrb	r1, [r7, #5]
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	4619      	mov	r1, r3
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	440b      	add	r3, r1
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4413      	add	r3, r2
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800436c:	2300      	movs	r3, #0
 800436e:	61bb      	str	r3, [r7, #24]
 8004370:	e034      	b.n	80043dc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d012      	beq.n	80043a8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004382:	4b23      	ldr	r3, [pc, #140]	; (8004410 <ssd1306_WriteChar+0x10c>)
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	b2da      	uxtb	r2, r3
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	4413      	add	r3, r2
 800438e:	b2d8      	uxtb	r0, r3
 8004390:	4b1f      	ldr	r3, [pc, #124]	; (8004410 <ssd1306_WriteChar+0x10c>)
 8004392:	885b      	ldrh	r3, [r3, #2]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	4413      	add	r3, r2
 800439c:	b2db      	uxtb	r3, r3
 800439e:	7bba      	ldrb	r2, [r7, #14]
 80043a0:	4619      	mov	r1, r3
 80043a2:	f7ff ff5b 	bl	800425c <ssd1306_DrawPixel>
 80043a6:	e016      	b.n	80043d6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80043a8:	4b19      	ldr	r3, [pc, #100]	; (8004410 <ssd1306_WriteChar+0x10c>)
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	4413      	add	r3, r2
 80043b4:	b2d8      	uxtb	r0, r3
 80043b6:	4b16      	ldr	r3, [pc, #88]	; (8004410 <ssd1306_WriteChar+0x10c>)
 80043b8:	885b      	ldrh	r3, [r3, #2]
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	4413      	add	r3, r2
 80043c2:	b2d9      	uxtb	r1, r3
 80043c4:	7bbb      	ldrb	r3, [r7, #14]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	bf0c      	ite	eq
 80043ca:	2301      	moveq	r3, #1
 80043cc:	2300      	movne	r3, #0
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	461a      	mov	r2, r3
 80043d2:	f7ff ff43 	bl	800425c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	3301      	adds	r3, #1
 80043da:	61bb      	str	r3, [r7, #24]
 80043dc:	793b      	ldrb	r3, [r7, #4]
 80043de:	461a      	mov	r2, r3
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d3c5      	bcc.n	8004372 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3301      	adds	r3, #1
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	797b      	ldrb	r3, [r7, #5]
 80043ee:	461a      	mov	r2, r3
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d3ad      	bcc.n	8004352 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <ssd1306_WriteChar+0x10c>)
 80043f8:	881a      	ldrh	r2, [r3, #0]
 80043fa:	793b      	ldrb	r3, [r7, #4]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	4413      	add	r3, r2
 8004400:	b29a      	uxth	r2, r3
 8004402:	4b03      	ldr	r3, [pc, #12]	; (8004410 <ssd1306_WriteChar+0x10c>)
 8004404:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004406:	7bfb      	ldrb	r3, [r7, #15]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3724      	adds	r7, #36	; 0x24
 800440c:	46bd      	mov	sp, r7
 800440e:	bd90      	pop	{r4, r7, pc}
 8004410:	2000127c 	.word	0x2000127c

08004414 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	1d38      	adds	r0, r7, #4
 800441e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004422:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8004424:	e012      	b.n	800444c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	7818      	ldrb	r0, [r3, #0]
 800442a:	78fb      	ldrb	r3, [r7, #3]
 800442c:	1d3a      	adds	r2, r7, #4
 800442e:	ca06      	ldmia	r2, {r1, r2}
 8004430:	f7ff ff68 	bl	8004304 <ssd1306_WriteChar>
 8004434:	4603      	mov	r3, r0
 8004436:	461a      	mov	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d002      	beq.n	8004446 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	e008      	b.n	8004458 <ssd1306_WriteString+0x44>
        }
        str++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3301      	adds	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e8      	bne.n	8004426 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	781b      	ldrb	r3, [r3, #0]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	460a      	mov	r2, r1
 800446a:	71fb      	strb	r3, [r7, #7]
 800446c:	4613      	mov	r3, r2
 800446e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	b29a      	uxth	r2, r3
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <ssd1306_SetCursor+0x2c>)
 8004476:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004478:	79bb      	ldrb	r3, [r7, #6]
 800447a:	b29a      	uxth	r2, r3
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <ssd1306_SetCursor+0x2c>)
 800447e:	805a      	strh	r2, [r3, #2]
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	2000127c 	.word	0x2000127c

08004490 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004490:	b590      	push	{r4, r7, lr}
 8004492:	b089      	sub	sp, #36	; 0x24
 8004494:	af00      	add	r7, sp, #0
 8004496:	4604      	mov	r4, r0
 8004498:	4608      	mov	r0, r1
 800449a:	4611      	mov	r1, r2
 800449c:	461a      	mov	r2, r3
 800449e:	4623      	mov	r3, r4
 80044a0:	71fb      	strb	r3, [r7, #7]
 80044a2:	4603      	mov	r3, r0
 80044a4:	71bb      	strb	r3, [r7, #6]
 80044a6:	460b      	mov	r3, r1
 80044a8:	717b      	strb	r3, [r7, #5]
 80044aa:	4613      	mov	r3, r2
 80044ac:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80044ae:	797a      	ldrb	r2, [r7, #5]
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	bfb8      	it	lt
 80044b8:	425b      	neglt	r3, r3
 80044ba:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80044bc:	793a      	ldrb	r2, [r7, #4]
 80044be:	79bb      	ldrb	r3, [r7, #6]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bfb8      	it	lt
 80044c6:	425b      	neglt	r3, r3
 80044c8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80044ca:	79fa      	ldrb	r2, [r7, #7]
 80044cc:	797b      	ldrb	r3, [r7, #5]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d201      	bcs.n	80044d6 <ssd1306_Line+0x46>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e001      	b.n	80044da <ssd1306_Line+0x4a>
 80044d6:	f04f 33ff 	mov.w	r3, #4294967295
 80044da:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80044dc:	79ba      	ldrb	r2, [r7, #6]
 80044de:	793b      	ldrb	r3, [r7, #4]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d201      	bcs.n	80044e8 <ssd1306_Line+0x58>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e001      	b.n	80044ec <ssd1306_Line+0x5c>
 80044e8:	f04f 33ff 	mov.w	r3, #4294967295
 80044ec:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80044f6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80044fa:	7939      	ldrb	r1, [r7, #4]
 80044fc:	797b      	ldrb	r3, [r7, #5]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff feac 	bl	800425c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8004504:	e024      	b.n	8004550 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8004506:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800450a:	79b9      	ldrb	r1, [r7, #6]
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff fea4 	bl	800425c <ssd1306_DrawPixel>
        error2 = error * 2;
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	425b      	negs	r3, r3
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	429a      	cmp	r2, r3
 8004522:	dd08      	ble.n	8004536 <ssd1306_Line+0xa6>
            error -= deltaY;
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	b2da      	uxtb	r2, r3
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	4413      	add	r3, r2
 8004534:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	429a      	cmp	r2, r3
 800453c:	da08      	bge.n	8004550 <ssd1306_Line+0xc0>
            error += deltaX;
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	4413      	add	r3, r2
 8004544:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	b2da      	uxtb	r2, r3
 800454a:	79bb      	ldrb	r3, [r7, #6]
 800454c:	4413      	add	r3, r2
 800454e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8004550:	79fa      	ldrb	r2, [r7, #7]
 8004552:	797b      	ldrb	r3, [r7, #5]
 8004554:	429a      	cmp	r2, r3
 8004556:	d1d6      	bne.n	8004506 <ssd1306_Line+0x76>
 8004558:	79ba      	ldrb	r2, [r7, #6]
 800455a:	793b      	ldrb	r3, [r7, #4]
 800455c:	429a      	cmp	r2, r3
 800455e:	d1d2      	bne.n	8004506 <ssd1306_Line+0x76>
        }
    }
    return;
 8004560:	bf00      	nop
}
 8004562:	3724      	adds	r7, #36	; 0x24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd90      	pop	{r4, r7, pc}

08004568 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8004568:	b590      	push	{r4, r7, lr}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	4604      	mov	r4, r0
 8004570:	4608      	mov	r0, r1
 8004572:	4611      	mov	r1, r2
 8004574:	461a      	mov	r2, r3
 8004576:	4623      	mov	r3, r4
 8004578:	71fb      	strb	r3, [r7, #7]
 800457a:	4603      	mov	r3, r0
 800457c:	71bb      	strb	r3, [r7, #6]
 800457e:	460b      	mov	r3, r1
 8004580:	717b      	strb	r3, [r7, #5]
 8004582:	4613      	mov	r3, r2
 8004584:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8004586:	797b      	ldrb	r3, [r7, #5]
 8004588:	425b      	negs	r3, r3
 800458a:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8004590:	797b      	ldrb	r3, [r7, #5]
 8004592:	f1c3 0301 	rsb	r3, r3, #1
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800459a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	db65      	blt.n	800466e <ssd1306_DrawCircle+0x106>
 80045a2:	79bb      	ldrb	r3, [r7, #6]
 80045a4:	2b3f      	cmp	r3, #63	; 0x3f
 80045a6:	d862      	bhi.n	800466e <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	79fa      	ldrb	r2, [r7, #7]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	b2d8      	uxtb	r0, r3
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	79bb      	ldrb	r3, [r7, #6]
 80045b8:	4413      	add	r3, r2
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	793a      	ldrb	r2, [r7, #4]
 80045be:	4619      	mov	r1, r3
 80045c0:	f7ff fe4c 	bl	800425c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	4413      	add	r3, r2
 80045cc:	b2d8      	uxtb	r0, r3
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	79bb      	ldrb	r3, [r7, #6]
 80045d4:	4413      	add	r3, r2
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	793a      	ldrb	r2, [r7, #4]
 80045da:	4619      	mov	r1, r3
 80045dc:	f7ff fe3e 	bl	800425c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	4413      	add	r3, r2
 80045e8:	b2d8      	uxtb	r0, r3
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	79ba      	ldrb	r2, [r7, #6]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	793a      	ldrb	r2, [r7, #4]
 80045f6:	4619      	mov	r1, r3
 80045f8:	f7ff fe30 	bl	800425c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	79fa      	ldrb	r2, [r7, #7]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	b2d8      	uxtb	r0, r3
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	79ba      	ldrb	r2, [r7, #6]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	b2db      	uxtb	r3, r3
 8004610:	793a      	ldrb	r2, [r7, #4]
 8004612:	4619      	mov	r1, r3
 8004614:	f7ff fe22 	bl	800425c <ssd1306_DrawPixel>
        e2 = err;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	429a      	cmp	r2, r3
 8004622:	dc13      	bgt.n	800464c <ssd1306_DrawCircle+0xe4>
            y++;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	3301      	adds	r3, #1
 8004628:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	3301      	adds	r3, #1
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	425b      	negs	r3, r3
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	429a      	cmp	r2, r3
 800463e:	d105      	bne.n	800464c <ssd1306_DrawCircle+0xe4>
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	429a      	cmp	r2, r3
 8004646:	dc01      	bgt.n	800464c <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	429a      	cmp	r2, r3
 8004652:	dd08      	ble.n	8004666 <ssd1306_DrawCircle+0xfe>
            x++;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	3301      	adds	r3, #1
 8004658:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	3301      	adds	r3, #1
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	dd9d      	ble.n	80045a8 <ssd1306_DrawCircle+0x40>

    return;
 800466c:	e000      	b.n	8004670 <ssd1306_DrawCircle+0x108>
        return;
 800466e:	bf00      	nop
}
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	bd90      	pop	{r4, r7, pc}

08004676 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004676:	b590      	push	{r4, r7, lr}
 8004678:	b085      	sub	sp, #20
 800467a:	af02      	add	r7, sp, #8
 800467c:	4604      	mov	r4, r0
 800467e:	4608      	mov	r0, r1
 8004680:	4611      	mov	r1, r2
 8004682:	461a      	mov	r2, r3
 8004684:	4623      	mov	r3, r4
 8004686:	71fb      	strb	r3, [r7, #7]
 8004688:	4603      	mov	r3, r0
 800468a:	71bb      	strb	r3, [r7, #6]
 800468c:	460b      	mov	r3, r1
 800468e:	717b      	strb	r3, [r7, #5]
 8004690:	4613      	mov	r3, r2
 8004692:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8004694:	79bc      	ldrb	r4, [r7, #6]
 8004696:	797a      	ldrb	r2, [r7, #5]
 8004698:	79b9      	ldrb	r1, [r7, #6]
 800469a:	79f8      	ldrb	r0, [r7, #7]
 800469c:	7e3b      	ldrb	r3, [r7, #24]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	4623      	mov	r3, r4
 80046a2:	f7ff fef5 	bl	8004490 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80046a6:	793c      	ldrb	r4, [r7, #4]
 80046a8:	797a      	ldrb	r2, [r7, #5]
 80046aa:	79b9      	ldrb	r1, [r7, #6]
 80046ac:	7978      	ldrb	r0, [r7, #5]
 80046ae:	7e3b      	ldrb	r3, [r7, #24]
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	4623      	mov	r3, r4
 80046b4:	f7ff feec 	bl	8004490 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80046b8:	793c      	ldrb	r4, [r7, #4]
 80046ba:	79fa      	ldrb	r2, [r7, #7]
 80046bc:	7939      	ldrb	r1, [r7, #4]
 80046be:	7978      	ldrb	r0, [r7, #5]
 80046c0:	7e3b      	ldrb	r3, [r7, #24]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	4623      	mov	r3, r4
 80046c6:	f7ff fee3 	bl	8004490 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80046ca:	79bc      	ldrb	r4, [r7, #6]
 80046cc:	79fa      	ldrb	r2, [r7, #7]
 80046ce:	7939      	ldrb	r1, [r7, #4]
 80046d0:	79f8      	ldrb	r0, [r7, #7]
 80046d2:	7e3b      	ldrb	r3, [r7, #24]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	4623      	mov	r3, r4
 80046d8:	f7ff feda 	bl	8004490 <ssd1306_Line>

    return;
 80046dc:	bf00      	nop
}
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd90      	pop	{r4, r7, pc}

080046e4 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80046e4:	b590      	push	{r4, r7, lr}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4604      	mov	r4, r0
 80046ec:	4608      	mov	r0, r1
 80046ee:	4611      	mov	r1, r2
 80046f0:	461a      	mov	r2, r3
 80046f2:	4623      	mov	r3, r4
 80046f4:	71fb      	strb	r3, [r7, #7]
 80046f6:	4603      	mov	r3, r0
 80046f8:	71bb      	strb	r3, [r7, #6]
 80046fa:	460b      	mov	r3, r1
 80046fc:	717b      	strb	r3, [r7, #5]
 80046fe:	4613      	mov	r3, r2
 8004700:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8004702:	79fa      	ldrb	r2, [r7, #7]
 8004704:	797b      	ldrb	r3, [r7, #5]
 8004706:	4293      	cmp	r3, r2
 8004708:	bf28      	it	cs
 800470a:	4613      	movcs	r3, r2
 800470c:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 800470e:	797a      	ldrb	r2, [r7, #5]
 8004710:	79fb      	ldrb	r3, [r7, #7]
 8004712:	4293      	cmp	r3, r2
 8004714:	bf38      	it	cc
 8004716:	4613      	movcc	r3, r2
 8004718:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800471a:	79ba      	ldrb	r2, [r7, #6]
 800471c:	793b      	ldrb	r3, [r7, #4]
 800471e:	4293      	cmp	r3, r2
 8004720:	bf28      	it	cs
 8004722:	4613      	movcs	r3, r2
 8004724:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8004726:	793a      	ldrb	r2, [r7, #4]
 8004728:	79bb      	ldrb	r3, [r7, #6]
 800472a:	4293      	cmp	r3, r2
 800472c:	bf38      	it	cc
 800472e:	4613      	movcc	r3, r2
 8004730:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004732:	7afb      	ldrb	r3, [r7, #11]
 8004734:	73fb      	strb	r3, [r7, #15]
 8004736:	e017      	b.n	8004768 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004738:	7b7b      	ldrb	r3, [r7, #13]
 800473a:	73bb      	strb	r3, [r7, #14]
 800473c:	e009      	b.n	8004752 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 800473e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004742:	7bf9      	ldrb	r1, [r7, #15]
 8004744:	7bbb      	ldrb	r3, [r7, #14]
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff fd88 	bl	800425c <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800474c:	7bbb      	ldrb	r3, [r7, #14]
 800474e:	3301      	adds	r3, #1
 8004750:	73bb      	strb	r3, [r7, #14]
 8004752:	7bba      	ldrb	r2, [r7, #14]
 8004754:	7b3b      	ldrb	r3, [r7, #12]
 8004756:	429a      	cmp	r2, r3
 8004758:	d803      	bhi.n	8004762 <ssd1306_FillRectangle+0x7e>
 800475a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800475e:	2b00      	cmp	r3, #0
 8004760:	daed      	bge.n	800473e <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	3301      	adds	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
 8004768:	7bfa      	ldrb	r2, [r7, #15]
 800476a:	7abb      	ldrb	r3, [r7, #10]
 800476c:	429a      	cmp	r2, r3
 800476e:	d803      	bhi.n	8004778 <ssd1306_FillRectangle+0x94>
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b3f      	cmp	r3, #63	; 0x3f
 8004774:	d9e0      	bls.n	8004738 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8004776:	bf00      	nop
 8004778:	bf00      	nop
}
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	bd90      	pop	{r4, r7, pc}

08004780 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	603a      	str	r2, [r7, #0]
 8004788:	461a      	mov	r2, r3
 800478a:	4603      	mov	r3, r0
 800478c:	71fb      	strb	r3, [r7, #7]
 800478e:	460b      	mov	r3, r1
 8004790:	71bb      	strb	r3, [r7, #6]
 8004792:	4613      	mov	r3, r2
 8004794:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004796:	797b      	ldrb	r3, [r7, #5]
 8004798:	3307      	adds	r3, #7
 800479a:	2b00      	cmp	r3, #0
 800479c:	da00      	bge.n	80047a0 <ssd1306_DrawBitmap+0x20>
 800479e:	3307      	adds	r3, #7
 80047a0:	10db      	asrs	r3, r3, #3
 80047a2:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80047a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	db3e      	blt.n	800482e <ssd1306_DrawBitmap+0xae>
 80047b0:	79bb      	ldrb	r3, [r7, #6]
 80047b2:	2b3f      	cmp	r3, #63	; 0x3f
 80047b4:	d83b      	bhi.n	800482e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80047b6:	2300      	movs	r3, #0
 80047b8:	73bb      	strb	r3, [r7, #14]
 80047ba:	e033      	b.n	8004824 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80047bc:	2300      	movs	r3, #0
 80047be:	737b      	strb	r3, [r7, #13]
 80047c0:	e026      	b.n	8004810 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80047c2:	7b7b      	ldrb	r3, [r7, #13]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
 80047d2:	e00d      	b.n	80047f0 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80047d4:	7bbb      	ldrb	r3, [r7, #14]
 80047d6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80047da:	fb02 f303 	mul.w	r3, r2, r3
 80047de:	7b7a      	ldrb	r2, [r7, #13]
 80047e0:	08d2      	lsrs	r2, r2, #3
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	4413      	add	r3, r2
 80047e6:	461a      	mov	r2, r3
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	4413      	add	r3, r2
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80047f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	da08      	bge.n	800480a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80047f8:	79fa      	ldrb	r2, [r7, #7]
 80047fa:	7b7b      	ldrb	r3, [r7, #13]
 80047fc:	4413      	add	r3, r2
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	7f3a      	ldrb	r2, [r7, #28]
 8004802:	79b9      	ldrb	r1, [r7, #6]
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff fd29 	bl	800425c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800480a:	7b7b      	ldrb	r3, [r7, #13]
 800480c:	3301      	adds	r3, #1
 800480e:	737b      	strb	r3, [r7, #13]
 8004810:	7b7a      	ldrb	r2, [r7, #13]
 8004812:	797b      	ldrb	r3, [r7, #5]
 8004814:	429a      	cmp	r2, r3
 8004816:	d3d4      	bcc.n	80047c2 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8004818:	7bbb      	ldrb	r3, [r7, #14]
 800481a:	3301      	adds	r3, #1
 800481c:	73bb      	strb	r3, [r7, #14]
 800481e:	79bb      	ldrb	r3, [r7, #6]
 8004820:	3301      	adds	r3, #1
 8004822:	71bb      	strb	r3, [r7, #6]
 8004824:	7bba      	ldrb	r2, [r7, #14]
 8004826:	7e3b      	ldrb	r3, [r7, #24]
 8004828:	429a      	cmp	r2, r3
 800482a:	d3c7      	bcc.n	80047bc <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800482c:	e000      	b.n	8004830 <ssd1306_DrawBitmap+0xb0>
        return;
 800482e:	bf00      	nop
}
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	4603      	mov	r3, r0
 800483e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004840:	2381      	movs	r3, #129	; 0x81
 8004842:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fc2c 	bl	80040a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800484c:	79fb      	ldrb	r3, [r7, #7]
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff fc28 	bl	80040a4 <ssd1306_WriteCommand>
}
 8004854:	bf00      	nop
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800486c:	23af      	movs	r3, #175	; 0xaf
 800486e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004870:	4b08      	ldr	r3, [pc, #32]	; (8004894 <ssd1306_SetDisplayOn+0x38>)
 8004872:	2201      	movs	r2, #1
 8004874:	715a      	strb	r2, [r3, #5]
 8004876:	e004      	b.n	8004882 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004878:	23ae      	movs	r3, #174	; 0xae
 800487a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <ssd1306_SetDisplayOn+0x38>)
 800487e:	2200      	movs	r2, #0
 8004880:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff fc0d 	bl	80040a4 <ssd1306_WriteCommand>
}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	2000127c 	.word	0x2000127c

08004898 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 8004898:	b590      	push	{r4, r7, lr}
 800489a:	b087      	sub	sp, #28
 800489c:	af02      	add	r7, sp, #8
 800489e:	ed87 0a03 	vstr	s0, [r7, #12]
 80048a2:	60b8      	str	r0, [r7, #8]
 80048a4:	6079      	str	r1, [r7, #4]
 80048a6:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	330f      	adds	r3, #15
 80048ae:	b2d8      	uxtb	r0, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	3301      	adds	r3, #1
 80048b6:	b2d9      	uxtb	r1, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	330f      	adds	r3, #15
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	3305      	adds	r3, #5
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2401      	movs	r4, #1
 80048ca:	9400      	str	r4, [sp, #0]
 80048cc:	f7ff fde0 	bl	8004490 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	3310      	adds	r3, #16
 80048d6:	b2d8      	uxtb	r0, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	3301      	adds	r3, #1
 80048de:	b2d9      	uxtb	r1, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	3310      	adds	r3, #16
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	3305      	adds	r3, #5
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2401      	movs	r4, #1
 80048f2:	9400      	str	r4, [sp, #0]
 80048f4:	f7ff fdcc 	bl	8004490 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	b2d8      	uxtb	r0, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	b2d9      	uxtb	r1, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	b2db      	uxtb	r3, r3
 8004904:	330e      	adds	r3, #14
 8004906:	b2da      	uxtb	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	3306      	adds	r3, #6
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2401      	movs	r4, #1
 8004912:	9400      	str	r4, [sp, #0]
 8004914:	f7ff feaf 	bl	8004676 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f7fb fded 	bl	80004f8 <__aeabi_f2d>
 800491e:	a396      	add	r3, pc, #600	; (adr r3, 8004b78 <batterygauge+0x2e0>)
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	f7fc f8bc 	bl	8000aa0 <__aeabi_dcmple>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d02a      	beq.n	8004984 <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	3302      	adds	r3, #2
 8004934:	b2d8      	uxtb	r0, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	3302      	adds	r3, #2
 800493c:	b2d9      	uxtb	r1, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	3303      	adds	r3, #3
 8004944:	b2da      	uxtb	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	3304      	adds	r3, #4
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2401      	movs	r4, #1
 8004950:	9400      	str	r4, [sp, #0]
 8004952:	f7ff fe90 	bl	8004676 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d113      	bne.n	8004984 <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	b2db      	uxtb	r3, r3
 8004960:	3302      	adds	r3, #2
 8004962:	b2d8      	uxtb	r0, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	3302      	adds	r3, #2
 800496a:	b2d9      	uxtb	r1, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	3303      	adds	r3, #3
 8004972:	b2da      	uxtb	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	3304      	adds	r3, #4
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2401      	movs	r4, #1
 800497e:	9400      	str	r4, [sp, #0]
 8004980:	f7ff fe79 	bl	8004676 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7fb fdb7 	bl	80004f8 <__aeabi_f2d>
 800498a:	a37b      	add	r3, pc, #492	; (adr r3, 8004b78 <batterygauge+0x2e0>)
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	f7fc f89a 	bl	8000ac8 <__aeabi_dcmpgt>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d035      	beq.n	8004a06 <batterygauge+0x16e>
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f7fb fdac 	bl	80004f8 <__aeabi_f2d>
 80049a0:	a377      	add	r3, pc, #476	; (adr r3, 8004b80 <batterygauge+0x2e8>)
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	f7fc f87b 	bl	8000aa0 <__aeabi_dcmple>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d02a      	beq.n	8004a06 <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	3302      	adds	r3, #2
 80049b6:	b2d8      	uxtb	r0, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	3302      	adds	r3, #2
 80049be:	b2d9      	uxtb	r1, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	3303      	adds	r3, #3
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	3304      	adds	r3, #4
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2401      	movs	r4, #1
 80049d2:	9400      	str	r4, [sp, #0]
 80049d4:	f7ff fe4f 	bl	8004676 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d113      	bne.n	8004a06 <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	3305      	adds	r3, #5
 80049e4:	b2d8      	uxtb	r0, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	3302      	adds	r3, #2
 80049ec:	b2d9      	uxtb	r1, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	3306      	adds	r3, #6
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	3304      	adds	r3, #4
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2401      	movs	r4, #1
 8004a00:	9400      	str	r4, [sp, #0]
 8004a02:	f7ff fe38 	bl	8004676 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7fb fd76 	bl	80004f8 <__aeabi_f2d>
 8004a0c:	a35c      	add	r3, pc, #368	; (adr r3, 8004b80 <batterygauge+0x2e8>)
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	f7fc f859 	bl	8000ac8 <__aeabi_dcmpgt>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d049      	beq.n	8004ab0 <batterygauge+0x218>
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f7fb fd6b 	bl	80004f8 <__aeabi_f2d>
 8004a22:	a359      	add	r3, pc, #356	; (adr r3, 8004b88 <batterygauge+0x2f0>)
 8004a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a28:	f7fc f83a 	bl	8000aa0 <__aeabi_dcmple>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d03e      	beq.n	8004ab0 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	3302      	adds	r3, #2
 8004a38:	b2d8      	uxtb	r0, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	3302      	adds	r3, #2
 8004a40:	b2d9      	uxtb	r1, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	3303      	adds	r3, #3
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	3304      	adds	r3, #4
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2401      	movs	r4, #1
 8004a54:	9400      	str	r4, [sp, #0]
 8004a56:	f7ff fe0e 	bl	8004676 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	3305      	adds	r3, #5
 8004a60:	b2d8      	uxtb	r0, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	3302      	adds	r3, #2
 8004a68:	b2d9      	uxtb	r1, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	3306      	adds	r3, #6
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	3304      	adds	r3, #4
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2401      	movs	r4, #1
 8004a7c:	9400      	str	r4, [sp, #0]
 8004a7e:	f7ff fdfa 	bl	8004676 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d113      	bne.n	8004ab0 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	b2d8      	uxtb	r0, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	3302      	adds	r3, #2
 8004a96:	b2d9      	uxtb	r1, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	3309      	adds	r3, #9
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2401      	movs	r4, #1
 8004aaa:	9400      	str	r4, [sp, #0]
 8004aac:	f7ff fde3 	bl	8004676 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7fb fd21 	bl	80004f8 <__aeabi_f2d>
 8004ab6:	a334      	add	r3, pc, #208	; (adr r3, 8004b88 <batterygauge+0x2f0>)
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	f7fc f804 	bl	8000ac8 <__aeabi_dcmpgt>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d100      	bne.n	8004ac8 <batterygauge+0x230>
	}




}
 8004ac6:	e052      	b.n	8004b6e <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	3302      	adds	r3, #2
 8004ace:	b2d8      	uxtb	r0, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	3302      	adds	r3, #2
 8004ad6:	b2d9      	uxtb	r1, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	3303      	adds	r3, #3
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2401      	movs	r4, #1
 8004aea:	9400      	str	r4, [sp, #0]
 8004aec:	f7ff fdc3 	bl	8004676 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	3305      	adds	r3, #5
 8004af6:	b2d8      	uxtb	r0, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	3302      	adds	r3, #2
 8004afe:	b2d9      	uxtb	r1, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	3306      	adds	r3, #6
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2401      	movs	r4, #1
 8004b12:	9400      	str	r4, [sp, #0]
 8004b14:	f7ff fdaf 	bl	8004676 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	b2d8      	uxtb	r0, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	3302      	adds	r3, #2
 8004b26:	b2d9      	uxtb	r1, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	3309      	adds	r3, #9
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	3304      	adds	r3, #4
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2401      	movs	r4, #1
 8004b3a:	9400      	str	r4, [sp, #0]
 8004b3c:	f7ff fd9b 	bl	8004676 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d113      	bne.n	8004b6e <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	330b      	adds	r3, #11
 8004b4c:	b2d8      	uxtb	r0, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	3302      	adds	r3, #2
 8004b54:	b2d9      	uxtb	r1, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	3304      	adds	r3, #4
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2401      	movs	r4, #1
 8004b68:	9400      	str	r4, [sp, #0]
 8004b6a:	f7ff fd84 	bl	8004676 <ssd1306_DrawRectangle>
}
 8004b6e:	bf00      	nop
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd90      	pop	{r4, r7, pc}
 8004b76:	bf00      	nop
 8004b78:	9999999a 	.word	0x9999999a
 8004b7c:	400d9999 	.word	0x400d9999
 8004b80:	33333333 	.word	0x33333333
 8004b84:	400f3333 	.word	0x400f3333
 8004b88:	66666666 	.word	0x66666666
 8004b8c:	40106666 	.word	0x40106666

08004b90 <percentage>:

void percentage(float percent){
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 40, floor(0.64*percent+32), 56, White);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fb fcac 	bl	80004f8 <__aeabi_f2d>
 8004ba0:	a329      	add	r3, pc, #164	; (adr r3, 8004c48 <percentage+0xb8>)
 8004ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba6:	f7fb fcff 	bl	80005a8 <__aeabi_dmul>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4610      	mov	r0, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	4b20      	ldr	r3, [pc, #128]	; (8004c38 <percentage+0xa8>)
 8004bb8:	f7fb fb40 	bl	800023c <__adddf3>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	ec43 2b17 	vmov	d7, r2, r3
 8004bc4:	eeb0 0a47 	vmov.f32	s0, s14
 8004bc8:	eef0 0a67 	vmov.f32	s1, s15
 8004bcc:	f01b f844 	bl	801fc58 <floor>
 8004bd0:	ec53 2b10 	vmov	r2, r3, d0
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	f7fb ffbe 	bl	8000b58 <__aeabi_d2uiz>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	2301      	movs	r3, #1
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	2338      	movs	r3, #56	; 0x38
 8004be6:	2128      	movs	r1, #40	; 0x28
 8004be8:	2020      	movs	r0, #32
 8004bea:	f7ff fd7b 	bl	80046e4 <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 40, 95, 56, White);
 8004bee:	2301      	movs	r3, #1
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	2338      	movs	r3, #56	; 0x38
 8004bf4:	225f      	movs	r2, #95	; 0x5f
 8004bf6:	2128      	movs	r1, #40	; 0x28
 8004bf8:	2020      	movs	r0, #32
 8004bfa:	f7ff fd3c 	bl	8004676 <ssd1306_DrawRectangle>
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fb fc7a 	bl	80004f8 <__aeabi_f2d>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	e9cd 2300 	strd	r2, r3, [sp]
 8004c0c:	4a0b      	ldr	r2, [pc, #44]	; (8004c3c <percentage+0xac>)
 8004c0e:	2114      	movs	r1, #20
 8004c10:	480b      	ldr	r0, [pc, #44]	; (8004c40 <percentage+0xb0>)
 8004c12:	f018 f8a7 	bl	801cd64 <sniprintf>
	ssd1306_SetCursor(45,44);
 8004c16:	212c      	movs	r1, #44	; 0x2c
 8004c18:	202d      	movs	r0, #45	; 0x2d
 8004c1a:	f7ff fc21 	bl	8004460 <ssd1306_SetCursor>
	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 8004c1e:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <percentage+0xb4>)
 8004c20:	2301      	movs	r3, #1
 8004c22:	ca06      	ldmia	r2, {r1, r2}
 8004c24:	4806      	ldr	r0, [pc, #24]	; (8004c40 <percentage+0xb0>)
 8004c26:	f7ff fbf5 	bl	8004414 <ssd1306_WriteString>


}
 8004c2a:	bf00      	nop
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	f3af 8000 	nop.w
 8004c38:	40400000 	.word	0x40400000
 8004c3c:	0802177c 	.word	0x0802177c
 8004c40:	20000ad8 	.word	0x20000ad8
 8004c44:	20000014 	.word	0x20000014
 8004c48:	47ae147b 	.word	0x47ae147b
 8004c4c:	3fe47ae1 	.word	0x3fe47ae1

08004c50 <scrollText>:


uint16_t scrollText(uint8_t *text,FontDef Font,uint8_t x,uint8_t y,uint8_t widthonscreen,uint16_t offset) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	1d38      	adds	r0, r7, #4
 8004c5a:	e880 0006 	stmia.w	r0, {r1, r2}
 8004c5e:	70fb      	strb	r3, [r7, #3]
    uint8_t text_len = strlen((char *)text);
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f7fb fadd 	bl	8000220 <strlen>
 8004c66:	4603      	mov	r3, r0
 8004c68:	77bb      	strb	r3, [r7, #30]
    uint16_t text_width = text_len * Font.FontWidth;
 8004c6a:	7fbb      	ldrb	r3, [r7, #30]
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	793b      	ldrb	r3, [r7, #4]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	fb12 f303 	smulbb	r3, r2, r3
 8004c76:	83bb      	strh	r3, [r7, #28]

        for (uint8_t i = x; i < widthonscreen; x++) {
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	76fb      	strb	r3, [r7, #27]
 8004c7c:	e016      	b.n	8004cac <scrollText+0x5c>
            for (uint8_t j = y; y < Font.FontHeight; y++) {
 8004c7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c82:	74fb      	strb	r3, [r7, #19]
 8004c84:	e00a      	b.n	8004c9c <scrollText+0x4c>
                ssd1306_DrawPixel(i, j, Black);
 8004c86:	7cf9      	ldrb	r1, [r7, #19]
 8004c88:	7efb      	ldrb	r3, [r7, #27]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff fae5 	bl	800425c <ssd1306_DrawPixel>
            for (uint8_t j = y; y < Font.FontHeight; y++) {
 8004c92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c96:	3301      	adds	r3, #1
 8004c98:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004c9c:	797b      	ldrb	r3, [r7, #5]
 8004c9e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d3ef      	bcc.n	8004c86 <scrollText+0x36>
        for (uint8_t i = x; i < widthonscreen; x++) {
 8004ca6:	78fb      	ldrb	r3, [r7, #3]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	70fb      	strb	r3, [r7, #3]
 8004cac:	7efa      	ldrb	r2, [r7, #27]
 8004cae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d3e3      	bcc.n	8004c7e <scrollText+0x2e>
            }
        }



        for (uint8_t i = 0; i < text_len; i++) {
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	77fb      	strb	r3, [r7, #31]
 8004cba:	e02a      	b.n	8004d12 <scrollText+0xc2>
            int32_t char_x = x+widthonscreen + (i * Font.FontWidth) - offset;
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004cc2:	441a      	add	r2, r3
 8004cc4:	7ffb      	ldrb	r3, [r7, #31]
 8004cc6:	7939      	ldrb	r1, [r7, #4]
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	441a      	add	r2, r3
 8004cce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	617b      	str	r3, [r7, #20]

            if (char_x >= x && char_x < x+widthonscreen) {
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	db17      	blt.n	8004d0c <scrollText+0xbc>
 8004cdc:	78fa      	ldrb	r2, [r7, #3]
 8004cde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ce2:	4413      	add	r3, r2
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	da10      	bge.n	8004d0c <scrollText+0xbc>
                ssd1306_SetCursor(char_x, y);
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff fbb3 	bl	8004460 <ssd1306_SetCursor>
                ssd1306_WriteChar(text[i], Font, White);
 8004cfa:	7ffb      	ldrb	r3, [r7, #31]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4413      	add	r3, r2
 8004d00:	7818      	ldrb	r0, [r3, #0]
 8004d02:	2301      	movs	r3, #1
 8004d04:	1d3a      	adds	r2, r7, #4
 8004d06:	ca06      	ldmia	r2, {r1, r2}
 8004d08:	f7ff fafc 	bl	8004304 <ssd1306_WriteChar>
        for (uint8_t i = 0; i < text_len; i++) {
 8004d0c:	7ffb      	ldrb	r3, [r7, #31]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	77fb      	strb	r3, [r7, #31]
 8004d12:	7ffa      	ldrb	r2, [r7, #31]
 8004d14:	7fbb      	ldrb	r3, [r7, #30]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d3d0      	bcc.n	8004cbc <scrollText+0x6c>
        }
        }
        return text_width;
 8004d1a:	8bbb      	ldrh	r3, [r7, #28]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3720      	adds	r7, #32
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	0000      	movs	r0, r0
	...

08004d28 <statemachine>:





void statemachine(void){
 8004d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d2a:	ed2d 8b02 	vpush	{d8}
 8004d2e:	b08b      	sub	sp, #44	; 0x2c
 8004d30:	af04      	add	r7, sp, #16
	switch(state){
 8004d32:	4bb9      	ldr	r3, [pc, #740]	; (8005018 <statemachine+0x2f0>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b0a      	cmp	r3, #10
 8004d38:	f202 8229 	bhi.w	800718e <statemachine+0x2466>
 8004d3c:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <statemachine+0x1c>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d71 	.word	0x08004d71
 8004d48:	0800518f 	.word	0x0800518f
 8004d4c:	080055f3 	.word	0x080055f3
 8004d50:	08005c65 	.word	0x08005c65
 8004d54:	08005d4f 	.word	0x08005d4f
 8004d58:	08005fb9 	.word	0x08005fb9
 8004d5c:	08006579 	.word	0x08006579
 8004d60:	08006a7d 	.word	0x08006a7d
 8004d64:	08006b33 	.word	0x08006b33
 8004d68:	08006df9 	.word	0x08006df9
 8004d6c:	08007037 	.word	0x08007037
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 8004d70:	2000      	movs	r0, #0
 8004d72:	f7ff fa33 	bl	80041dc <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 8004d76:	2120      	movs	r1, #32
 8004d78:	2020      	movs	r0, #32
 8004d7a:	f7ff fb71 	bl	8004460 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 8004d7e:	49a7      	ldr	r1, [pc, #668]	; (800501c <statemachine+0x2f4>)
 8004d80:	48a7      	ldr	r0, [pc, #668]	; (8005020 <statemachine+0x2f8>)
 8004d82:	f7fe fc93 	bl	80036ac <nmea_parse>
				 if(myData.speed>=vitmax){
 8004d86:	4ba6      	ldr	r3, [pc, #664]	; (8005020 <statemachine+0x2f8>)
 8004d88:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8004d8c:	4ba5      	ldr	r3, [pc, #660]	; (8005024 <statemachine+0x2fc>)
 8004d8e:	edd3 7a00 	vldr	s15, [r3]
 8004d92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9a:	db03      	blt.n	8004da4 <statemachine+0x7c>
									 vitmax=myData.speed;
 8004d9c:	4ba0      	ldr	r3, [pc, #640]	; (8005020 <statemachine+0x2f8>)
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	4aa0      	ldr	r2, [pc, #640]	; (8005024 <statemachine+0x2fc>)
 8004da2:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	617b      	str	r3, [r7, #20]
								 float sec=0;
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	613b      	str	r3, [r7, #16]
								 if (myData.speed!=0){
 8004db0:	4b9b      	ldr	r3, [pc, #620]	; (8005020 <statemachine+0x2f8>)
 8004db2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004db6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dbe:	d032      	beq.n	8004e26 <statemachine+0xfe>
									 pace=1000/(60*myData.speed);
 8004dc0:	4b97      	ldr	r3, [pc, #604]	; (8005020 <statemachine+0x2f8>)
 8004dc2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004dc6:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8005028 <statemachine+0x300>
 8004dca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004dce:	eddf 6a97 	vldr	s13, [pc, #604]	; 800502c <statemachine+0x304>
 8004dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dd6:	edc7 7a05 	vstr	s15, [r7, #20]
									 sec=(pace-floor(pace))*60;
 8004dda:	6978      	ldr	r0, [r7, #20]
 8004ddc:	f7fb fb8c 	bl	80004f8 <__aeabi_f2d>
 8004de0:	4604      	mov	r4, r0
 8004de2:	460d      	mov	r5, r1
 8004de4:	6978      	ldr	r0, [r7, #20]
 8004de6:	f7fb fb87 	bl	80004f8 <__aeabi_f2d>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	ec43 2b10 	vmov	d0, r2, r3
 8004df2:	f01a ff31 	bl	801fc58 <floor>
 8004df6:	ec53 2b10 	vmov	r2, r3, d0
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	f7fb fa1b 	bl	8000238 <__aeabi_dsub>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4610      	mov	r0, r2
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	4b88      	ldr	r3, [pc, #544]	; (8005030 <statemachine+0x308>)
 8004e10:	f7fb fbca 	bl	80005a8 <__aeabi_dmul>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4610      	mov	r0, r2
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f7fb febc 	bl	8000b98 <__aeabi_d2f>
 8004e20:	4603      	mov	r3, r0
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	e001      	b.n	8004e2a <statemachine+0x102>
								 }
								 else {
									 pace=9999;
 8004e26:	4b83      	ldr	r3, [pc, #524]	; (8005034 <statemachine+0x30c>)
 8004e28:	617b      	str	r3, [r7, #20]
								 }


				  switch(spdstate){
 8004e2a:	4b83      	ldr	r3, [pc, #524]	; (8005038 <statemachine+0x310>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	f000 8114 	beq.w	800505c <statemachine+0x334>
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	f300 8151 	bgt.w	80050dc <statemachine+0x3b4>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <statemachine+0x11e>
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	f000 8082 	beq.w	8004f48 <statemachine+0x220>
 8004e44:	e14a      	b.n	80050dc <statemachine+0x3b4>


				 case STATE_SUMMARY:

						snprintf((char *)bufferscreen,15, "MaxV=%.1f",vitmax*3.6);
 8004e46:	4b77      	ldr	r3, [pc, #476]	; (8005024 <statemachine+0x2fc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fb fb54 	bl	80004f8 <__aeabi_f2d>
 8004e50:	a36d      	add	r3, pc, #436	; (adr r3, 8005008 <statemachine+0x2e0>)
 8004e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e56:	f7fb fba7 	bl	80005a8 <__aeabi_dmul>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	e9cd 2300 	strd	r2, r3, [sp]
 8004e62:	4a76      	ldr	r2, [pc, #472]	; (800503c <statemachine+0x314>)
 8004e64:	210f      	movs	r1, #15
 8004e66:	4876      	ldr	r0, [pc, #472]	; (8005040 <statemachine+0x318>)
 8004e68:	f017 ff7c 	bl	801cd64 <sniprintf>
						ssd1306_SetCursor(32, 12);
 8004e6c:	210c      	movs	r1, #12
 8004e6e:	2020      	movs	r0, #32
 8004e70:	f7ff faf6 	bl	8004460 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004e74:	4a73      	ldr	r2, [pc, #460]	; (8005044 <statemachine+0x31c>)
 8004e76:	2301      	movs	r3, #1
 8004e78:	ca06      	ldmia	r2, {r1, r2}
 8004e7a:	4871      	ldr	r0, [pc, #452]	; (8005040 <statemachine+0x318>)
 8004e7c:	f7ff faca 	bl	8004414 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "V=%0.1f",(myData.speed)*3.6);
 8004e80:	4b67      	ldr	r3, [pc, #412]	; (8005020 <statemachine+0x2f8>)
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fb fb37 	bl	80004f8 <__aeabi_f2d>
 8004e8a:	a35f      	add	r3, pc, #380	; (adr r3, 8005008 <statemachine+0x2e0>)
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	f7fb fb8a 	bl	80005a8 <__aeabi_dmul>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	e9cd 2300 	strd	r2, r3, [sp]
 8004e9c:	4a6a      	ldr	r2, [pc, #424]	; (8005048 <statemachine+0x320>)
 8004e9e:	210f      	movs	r1, #15
 8004ea0:	4867      	ldr	r0, [pc, #412]	; (8005040 <statemachine+0x318>)
 8004ea2:	f017 ff5f 	bl	801cd64 <sniprintf>
						ssd1306_SetCursor(32, 20);
 8004ea6:	2114      	movs	r1, #20
 8004ea8:	2020      	movs	r0, #32
 8004eaa:	f7ff fad9 	bl	8004460 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004eae:	4a65      	ldr	r2, [pc, #404]	; (8005044 <statemachine+0x31c>)
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	ca06      	ldmia	r2, {r1, r2}
 8004eb4:	4862      	ldr	r0, [pc, #392]	; (8005040 <statemachine+0x318>)
 8004eb6:	f7ff faad 	bl	8004414 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));
 8004eba:	6978      	ldr	r0, [r7, #20]
 8004ebc:	f7fb fb1c 	bl	80004f8 <__aeabi_f2d>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	ec43 2b10 	vmov	d0, r2, r3
 8004ec8:	f01a fec6 	bl	801fc58 <floor>
 8004ecc:	eeb0 8a40 	vmov.f32	s16, s0
 8004ed0:	eef0 8a60 	vmov.f32	s17, s1
 8004ed4:	6938      	ldr	r0, [r7, #16]
 8004ed6:	f7fb fb0f 	bl	80004f8 <__aeabi_f2d>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	ec43 2b10 	vmov	d0, r2, r3
 8004ee2:	f01a feb9 	bl	801fc58 <floor>
 8004ee6:	eeb0 7a40 	vmov.f32	s14, s0
 8004eea:	eef0 7a60 	vmov.f32	s15, s1
 8004eee:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004ef2:	ed8d 8b00 	vstr	d8, [sp]
 8004ef6:	4a55      	ldr	r2, [pc, #340]	; (800504c <statemachine+0x324>)
 8004ef8:	210f      	movs	r1, #15
 8004efa:	4851      	ldr	r0, [pc, #324]	; (8005040 <statemachine+0x318>)
 8004efc:	f017 ff32 	bl	801cd64 <sniprintf>
						ssd1306_SetCursor(32, 28);
 8004f00:	211c      	movs	r1, #28
 8004f02:	2020      	movs	r0, #32
 8004f04:	f7ff faac 	bl	8004460 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004f08:	4a4e      	ldr	r2, [pc, #312]	; (8005044 <statemachine+0x31c>)
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	ca06      	ldmia	r2, {r1, r2}
 8004f0e:	484c      	ldr	r0, [pc, #304]	; (8005040 <statemachine+0x318>)
 8004f10:	f7ff fa80 	bl	8004414 <ssd1306_WriteString>



					 if(BTN_B>=1){
 8004f14:	4b4e      	ldr	r3, [pc, #312]	; (8005050 <statemachine+0x328>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	dd08      	ble.n	8004f2e <statemachine+0x206>
								spdstate++;
 8004f1c:	4b46      	ldr	r3, [pc, #280]	; (8005038 <statemachine+0x310>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	3301      	adds	r3, #1
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	4b44      	ldr	r3, [pc, #272]	; (8005038 <statemachine+0x310>)
 8004f26:	701a      	strb	r2, [r3, #0]
								BTN_B=0;
 8004f28:	4b49      	ldr	r3, [pc, #292]	; (8005050 <statemachine+0x328>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
					 					 				  	}
					 if(BTN_B_LONG>=1){
 8004f2e:	4b49      	ldr	r3, [pc, #292]	; (8005054 <statemachine+0x32c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f340 80cd 	ble.w	80050d2 <statemachine+0x3aa>
							  vitmax=0;
 8004f38:	4b3a      	ldr	r3, [pc, #232]	; (8005024 <statemachine+0x2fc>)
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]
							BTN_B_LONG=0;
 8004f40:	4b44      	ldr	r3, [pc, #272]	; (8005054 <statemachine+0x32c>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
						}



					 break;
 8004f46:	e0c4      	b.n	80050d2 <statemachine+0x3aa>
				 case STATE_COMPTEUR:


						snprintf((char *)bufferscreen,15, "V=%0.1f",(myData.speed)*3.6);
 8004f48:	4b35      	ldr	r3, [pc, #212]	; (8005020 <statemachine+0x2f8>)
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fb fad3 	bl	80004f8 <__aeabi_f2d>
 8004f52:	a32d      	add	r3, pc, #180	; (adr r3, 8005008 <statemachine+0x2e0>)
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	f7fb fb26 	bl	80005a8 <__aeabi_dmul>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	e9cd 2300 	strd	r2, r3, [sp]
 8004f64:	4a38      	ldr	r2, [pc, #224]	; (8005048 <statemachine+0x320>)
 8004f66:	210f      	movs	r1, #15
 8004f68:	4835      	ldr	r0, [pc, #212]	; (8005040 <statemachine+0x318>)
 8004f6a:	f017 fefb 	bl	801cd64 <sniprintf>
						ssd1306_SetCursor(32, 54);
 8004f6e:	2136      	movs	r1, #54	; 0x36
 8004f70:	2020      	movs	r0, #32
 8004f72:	f7ff fa75 	bl	8004460 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004f76:	4a33      	ldr	r2, [pc, #204]	; (8005044 <statemachine+0x31c>)
 8004f78:	2301      	movs	r3, #1
 8004f7a:	ca06      	ldmia	r2, {r1, r2}
 8004f7c:	4830      	ldr	r0, [pc, #192]	; (8005040 <statemachine+0x318>)
 8004f7e:	f7ff fa49 	bl	8004414 <ssd1306_WriteString>
						ssd1306_DrawRectangle(32, 38, 95, 53, White);
 8004f82:	2301      	movs	r3, #1
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	2335      	movs	r3, #53	; 0x35
 8004f88:	225f      	movs	r2, #95	; 0x5f
 8004f8a:	2126      	movs	r1, #38	; 0x26
 8004f8c:	2020      	movs	r0, #32
 8004f8e:	f7ff fb72 	bl	8004676 <ssd1306_DrawRectangle>
						ssd1306_FillRectangle(32, 38,(int) floor(32+(myData.speed*0.63)), 53, White);
 8004f92:	4b23      	ldr	r3, [pc, #140]	; (8005020 <statemachine+0x2f8>)
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fb faae 	bl	80004f8 <__aeabi_f2d>
 8004f9c:	a31c      	add	r3, pc, #112	; (adr r3, 8005010 <statemachine+0x2e8>)
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	f7fb fb01 	bl	80005a8 <__aeabi_dmul>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4610      	mov	r0, r2
 8004fac:	4619      	mov	r1, r3
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	4b29      	ldr	r3, [pc, #164]	; (8005058 <statemachine+0x330>)
 8004fb4:	f7fb f942 	bl	800023c <__adddf3>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	ec43 2b17 	vmov	d7, r2, r3
 8004fc0:	eeb0 0a47 	vmov.f32	s0, s14
 8004fc4:	eef0 0a67 	vmov.f32	s1, s15
 8004fc8:	f01a fe46 	bl	801fc58 <floor>
 8004fcc:	ec53 2b10 	vmov	r2, r3, d0
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	f7fb fd98 	bl	8000b08 <__aeabi_d2iz>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	2301      	movs	r3, #1
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	2335      	movs	r3, #53	; 0x35
 8004fe2:	2126      	movs	r1, #38	; 0x26
 8004fe4:	2020      	movs	r0, #32
 8004fe6:	f7ff fb7d 	bl	80046e4 <ssd1306_FillRectangle>



					 if(BTN_B>=1){
 8004fea:	4b19      	ldr	r3, [pc, #100]	; (8005050 <statemachine+0x328>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	dd71      	ble.n	80050d6 <statemachine+0x3ae>
							spdstate++;
 8004ff2:	4b11      	ldr	r3, [pc, #68]	; (8005038 <statemachine+0x310>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <statemachine+0x310>)
 8004ffc:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 8004ffe:	4b14      	ldr	r3, [pc, #80]	; (8005050 <statemachine+0x328>)
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 8005004:	e067      	b.n	80050d6 <statemachine+0x3ae>
 8005006:	bf00      	nop
 8005008:	cccccccd 	.word	0xcccccccd
 800500c:	400ccccc 	.word	0x400ccccc
 8005010:	c28f5c29 	.word	0xc28f5c29
 8005014:	3fe428f5 	.word	0x3fe428f5
 8005018:	200005e8 	.word	0x200005e8
 800501c:	20000638 	.word	0x20000638
 8005020:	20000838 	.word	0x20000838
 8005024:	20000c50 	.word	0x20000c50
 8005028:	42700000 	.word	0x42700000
 800502c:	447a0000 	.word	0x447a0000
 8005030:	404e0000 	.word	0x404e0000
 8005034:	461c3c00 	.word	0x461c3c00
 8005038:	200005ea 	.word	0x200005ea
 800503c:	08021788 	.word	0x08021788
 8005040:	20000ad8 	.word	0x20000ad8
 8005044:	20000014 	.word	0x20000014
 8005048:	08021794 	.word	0x08021794
 800504c:	0802179c 	.word	0x0802179c
 8005050:	2000087c 	.word	0x2000087c
 8005054:	20000cbc 	.word	0x20000cbc
 8005058:	40400000 	.word	0x40400000
				 case STATE_GRAPH:


						ssd1306_SetCursor(32, 32);
 800505c:	2120      	movs	r1, #32
 800505e:	2020      	movs	r0, #32
 8005060:	f7ff f9fe 	bl	8004460 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "%0.1f",(myData.speed)*3.6);
 8005064:	4b82      	ldr	r3, [pc, #520]	; (8005270 <statemachine+0x548>)
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	4618      	mov	r0, r3
 800506a:	f7fb fa45 	bl	80004f8 <__aeabi_f2d>
 800506e:	a37e      	add	r3, pc, #504	; (adr r3, 8005268 <statemachine+0x540>)
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	f7fb fa98 	bl	80005a8 <__aeabi_dmul>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	e9cd 2300 	strd	r2, r3, [sp]
 8005080:	4a7c      	ldr	r2, [pc, #496]	; (8005274 <statemachine+0x54c>)
 8005082:	210f      	movs	r1, #15
 8005084:	487c      	ldr	r0, [pc, #496]	; (8005278 <statemachine+0x550>)
 8005086:	f017 fe6d 	bl	801cd64 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_11x18, White);
 800508a:	4a7c      	ldr	r2, [pc, #496]	; (800527c <statemachine+0x554>)
 800508c:	2301      	movs	r3, #1
 800508e:	ca06      	ldmia	r2, {r1, r2}
 8005090:	4879      	ldr	r0, [pc, #484]	; (8005278 <statemachine+0x550>)
 8005092:	f7ff f9bf 	bl	8004414 <ssd1306_WriteString>
						batterygauge(vbat,35, 54,1);
 8005096:	4b7a      	ldr	r3, [pc, #488]	; (8005280 <statemachine+0x558>)
 8005098:	edd3 7a00 	vldr	s15, [r3]
 800509c:	2201      	movs	r2, #1
 800509e:	2136      	movs	r1, #54	; 0x36
 80050a0:	2023      	movs	r0, #35	; 0x23
 80050a2:	eeb0 0a67 	vmov.f32	s0, s15
 80050a6:	f7ff fbf7 	bl	8004898 <batterygauge>

					 if(BTN_B>=1){
 80050aa:	4b76      	ldr	r3, [pc, #472]	; (8005284 <statemachine+0x55c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	dd13      	ble.n	80050da <statemachine+0x3b2>
							spdstate--;
 80050b2:	4b75      	ldr	r3, [pc, #468]	; (8005288 <statemachine+0x560>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	4b73      	ldr	r3, [pc, #460]	; (8005288 <statemachine+0x560>)
 80050bc:	701a      	strb	r2, [r3, #0]
							spdstate--;
 80050be:	4b72      	ldr	r3, [pc, #456]	; (8005288 <statemachine+0x560>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	4b70      	ldr	r3, [pc, #448]	; (8005288 <statemachine+0x560>)
 80050c8:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 80050ca:	4b6e      	ldr	r3, [pc, #440]	; (8005284 <statemachine+0x55c>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 80050d0:	e003      	b.n	80050da <statemachine+0x3b2>
					 break;
 80050d2:	bf00      	nop
 80050d4:	e002      	b.n	80050dc <statemachine+0x3b4>
					 break;
 80050d6:	bf00      	nop
 80050d8:	e000      	b.n	80050dc <statemachine+0x3b4>
					 break;
 80050da:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 80050dc:	4b6b      	ldr	r3, [pc, #428]	; (800528c <statemachine+0x564>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	dd0b      	ble.n	80050fc <statemachine+0x3d4>
				 					state++;
 80050e4:	4b6a      	ldr	r3, [pc, #424]	; (8005290 <statemachine+0x568>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	3301      	adds	r3, #1
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	4b68      	ldr	r3, [pc, #416]	; (8005290 <statemachine+0x568>)
 80050ee:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 80050f0:	4b66      	ldr	r3, [pc, #408]	; (800528c <statemachine+0x564>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
				 					BTN_B=0;
 80050f6:	4b63      	ldr	r3, [pc, #396]	; (8005284 <statemachine+0x55c>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]
				  	}
				 	 if(BTN_A_LONG>=1){
 80050fc:	4b65      	ldr	r3, [pc, #404]	; (8005294 <statemachine+0x56c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	f342 8030 	ble.w	8007166 <statemachine+0x243e>
				 						 				 									state++;
 8005106:	4b62      	ldr	r3, [pc, #392]	; (8005290 <statemachine+0x568>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	3301      	adds	r3, #1
 800510c:	b2da      	uxtb	r2, r3
 800510e:	4b60      	ldr	r3, [pc, #384]	; (8005290 <statemachine+0x568>)
 8005110:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8005112:	4b5f      	ldr	r3, [pc, #380]	; (8005290 <statemachine+0x568>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	3301      	adds	r3, #1
 8005118:	b2da      	uxtb	r2, r3
 800511a:	4b5d      	ldr	r3, [pc, #372]	; (8005290 <statemachine+0x568>)
 800511c:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 800511e:	4b5c      	ldr	r3, [pc, #368]	; (8005290 <statemachine+0x568>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	3301      	adds	r3, #1
 8005124:	b2da      	uxtb	r2, r3
 8005126:	4b5a      	ldr	r3, [pc, #360]	; (8005290 <statemachine+0x568>)
 8005128:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 800512a:	4b59      	ldr	r3, [pc, #356]	; (8005290 <statemachine+0x568>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	3301      	adds	r3, #1
 8005130:	b2da      	uxtb	r2, r3
 8005132:	4b57      	ldr	r3, [pc, #348]	; (8005290 <statemachine+0x568>)
 8005134:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8005136:	4b56      	ldr	r3, [pc, #344]	; (8005290 <statemachine+0x568>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	3301      	adds	r3, #1
 800513c:	b2da      	uxtb	r2, r3
 800513e:	4b54      	ldr	r3, [pc, #336]	; (8005290 <statemachine+0x568>)
 8005140:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8005142:	4b53      	ldr	r3, [pc, #332]	; (8005290 <statemachine+0x568>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	3301      	adds	r3, #1
 8005148:	b2da      	uxtb	r2, r3
 800514a:	4b51      	ldr	r3, [pc, #324]	; (8005290 <statemachine+0x568>)
 800514c:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 800514e:	4b50      	ldr	r3, [pc, #320]	; (8005290 <statemachine+0x568>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	3301      	adds	r3, #1
 8005154:	b2da      	uxtb	r2, r3
 8005156:	4b4e      	ldr	r3, [pc, #312]	; (8005290 <statemachine+0x568>)
 8005158:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 800515a:	4b4d      	ldr	r3, [pc, #308]	; (8005290 <statemachine+0x568>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	3301      	adds	r3, #1
 8005160:	b2da      	uxtb	r2, r3
 8005162:	4b4b      	ldr	r3, [pc, #300]	; (8005290 <statemachine+0x568>)
 8005164:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8005166:	4b4a      	ldr	r3, [pc, #296]	; (8005290 <statemachine+0x568>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	3301      	adds	r3, #1
 800516c:	b2da      	uxtb	r2, r3
 800516e:	4b48      	ldr	r3, [pc, #288]	; (8005290 <statemachine+0x568>)
 8005170:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8005172:	4b47      	ldr	r3, [pc, #284]	; (8005290 <statemachine+0x568>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	3301      	adds	r3, #1
 8005178:	b2da      	uxtb	r2, r3
 800517a:	4b45      	ldr	r3, [pc, #276]	; (8005290 <statemachine+0x568>)
 800517c:	701a      	strb	r2, [r3, #0]
				 						 				 									  			 	BTN_A_LONG=0;
 800517e:	4b45      	ldr	r3, [pc, #276]	; (8005294 <statemachine+0x56c>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
				 						 				 									  			 	BTN_B=0;
 8005184:	4b3f      	ldr	r3, [pc, #252]	; (8005284 <statemachine+0x55c>)
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]
				 						 				 									  	}
				  break;
 800518a:	f001 bfec 	b.w	8007166 <statemachine+0x243e>


	case STATE_POS:
			  ssd1306_Fill(Black);
 800518e:	2000      	movs	r0, #0
 8005190:	f7ff f824 	bl	80041dc <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8005194:	4940      	ldr	r1, [pc, #256]	; (8005298 <statemachine+0x570>)
 8005196:	4836      	ldr	r0, [pc, #216]	; (8005270 <statemachine+0x548>)
 8005198:	f7fe fa88 	bl	80036ac <nmea_parse>
			  switch(posstate){
 800519c:	4b3f      	ldr	r3, [pc, #252]	; (800529c <statemachine+0x574>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	f200 8200 	bhi.w	80055a6 <statemachine+0x87e>
 80051a6:	a201      	add	r2, pc, #4	; (adr r2, 80051ac <statemachine+0x484>)
 80051a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ac:	080051bd 	.word	0x080051bd
 80051b0:	080052b1 	.word	0x080052b1
 80051b4:	0800536f 	.word	0x0800536f
 80051b8:	0800542d 	.word	0x0800542d

			  case STATE_SUMMARY1:

						ssd1306_SetCursor(32, 32);
 80051bc:	2120      	movs	r1, #32
 80051be:	2020      	movs	r0, #32
 80051c0:	f7ff f94e 	bl	8004460 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "Latitude:");
 80051c4:	4a36      	ldr	r2, [pc, #216]	; (80052a0 <statemachine+0x578>)
 80051c6:	210f      	movs	r1, #15
 80051c8:	482b      	ldr	r0, [pc, #172]	; (8005278 <statemachine+0x550>)
 80051ca:	f017 fdcb 	bl	801cd64 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80051ce:	4a35      	ldr	r2, [pc, #212]	; (80052a4 <statemachine+0x57c>)
 80051d0:	2301      	movs	r3, #1
 80051d2:	ca06      	ldmia	r2, {r1, r2}
 80051d4:	4828      	ldr	r0, [pc, #160]	; (8005278 <statemachine+0x550>)
 80051d6:	f7ff f91d 	bl	8004414 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80051da:	4b25      	ldr	r3, [pc, #148]	; (8005270 <statemachine+0x548>)
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	e9cd 2300 	strd	r2, r3, [sp]
 80051e4:	4a30      	ldr	r2, [pc, #192]	; (80052a8 <statemachine+0x580>)
 80051e6:	210f      	movs	r1, #15
 80051e8:	4823      	ldr	r0, [pc, #140]	; (8005278 <statemachine+0x550>)
 80051ea:	f017 fdbb 	bl	801cd64 <sniprintf>
						ssd1306_SetCursor(32, 40);
 80051ee:	2128      	movs	r1, #40	; 0x28
 80051f0:	2020      	movs	r0, #32
 80051f2:	f7ff f935 	bl	8004460 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80051f6:	4a2b      	ldr	r2, [pc, #172]	; (80052a4 <statemachine+0x57c>)
 80051f8:	2301      	movs	r3, #1
 80051fa:	ca06      	ldmia	r2, {r1, r2}
 80051fc:	481e      	ldr	r0, [pc, #120]	; (8005278 <statemachine+0x550>)
 80051fe:	f7ff f909 	bl	8004414 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Longitude:");
 8005202:	4a2a      	ldr	r2, [pc, #168]	; (80052ac <statemachine+0x584>)
 8005204:	210f      	movs	r1, #15
 8005206:	481c      	ldr	r0, [pc, #112]	; (8005278 <statemachine+0x550>)
 8005208:	f017 fdac 	bl	801cd64 <sniprintf>
						ssd1306_SetCursor(32, 48);
 800520c:	2130      	movs	r1, #48	; 0x30
 800520e:	2020      	movs	r0, #32
 8005210:	f7ff f926 	bl	8004460 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005214:	4a23      	ldr	r2, [pc, #140]	; (80052a4 <statemachine+0x57c>)
 8005216:	2301      	movs	r3, #1
 8005218:	ca06      	ldmia	r2, {r1, r2}
 800521a:	4817      	ldr	r0, [pc, #92]	; (8005278 <statemachine+0x550>)
 800521c:	f7ff f8fa 	bl	8004414 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 8005220:	4b13      	ldr	r3, [pc, #76]	; (8005270 <statemachine+0x548>)
 8005222:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005226:	e9cd 2300 	strd	r2, r3, [sp]
 800522a:	4a1f      	ldr	r2, [pc, #124]	; (80052a8 <statemachine+0x580>)
 800522c:	210f      	movs	r1, #15
 800522e:	4812      	ldr	r0, [pc, #72]	; (8005278 <statemachine+0x550>)
 8005230:	f017 fd98 	bl	801cd64 <sniprintf>
						ssd1306_SetCursor(32, 56);
 8005234:	2138      	movs	r1, #56	; 0x38
 8005236:	2020      	movs	r0, #32
 8005238:	f7ff f912 	bl	8004460 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800523c:	4a19      	ldr	r2, [pc, #100]	; (80052a4 <statemachine+0x57c>)
 800523e:	2301      	movs	r3, #1
 8005240:	ca06      	ldmia	r2, {r1, r2}
 8005242:	480d      	ldr	r0, [pc, #52]	; (8005278 <statemachine+0x550>)
 8005244:	f7ff f8e6 	bl	8004414 <ssd1306_WriteString>
				  if(BTN_B>=1){
 8005248:	4b0e      	ldr	r3, [pc, #56]	; (8005284 <statemachine+0x55c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	f340 817c 	ble.w	800554a <statemachine+0x822>
					  posstate++;
 8005252:	4b12      	ldr	r3, [pc, #72]	; (800529c <statemachine+0x574>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	3301      	adds	r3, #1
 8005258:	b2da      	uxtb	r2, r3
 800525a:	4b10      	ldr	r3, [pc, #64]	; (800529c <statemachine+0x574>)
 800525c:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 800525e:	4b09      	ldr	r3, [pc, #36]	; (8005284 <statemachine+0x55c>)
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]





				  break;
 8005264:	e171      	b.n	800554a <statemachine+0x822>
 8005266:	bf00      	nop
 8005268:	cccccccd 	.word	0xcccccccd
 800526c:	400ccccc 	.word	0x400ccccc
 8005270:	20000838 	.word	0x20000838
 8005274:	080217b0 	.word	0x080217b0
 8005278:	20000ad8 	.word	0x20000ad8
 800527c:	20000024 	.word	0x20000024
 8005280:	200008b0 	.word	0x200008b0
 8005284:	2000087c 	.word	0x2000087c
 8005288:	200005ea 	.word	0x200005ea
 800528c:	20000878 	.word	0x20000878
 8005290:	200005e8 	.word	0x200005e8
 8005294:	20000cc0 	.word	0x20000cc0
 8005298:	20000638 	.word	0x20000638
 800529c:	200005eb 	.word	0x200005eb
 80052a0:	080217b8 	.word	0x080217b8
 80052a4:	20000014 	.word	0x20000014
 80052a8:	080217c4 	.word	0x080217c4
 80052ac:	080217cc 	.word	0x080217cc
			  case STATE_LAT:
						ssd1306_SetCursor(32, 32);
 80052b0:	2120      	movs	r1, #32
 80052b2:	2020      	movs	r0, #32
 80052b4:	f7ff f8d4 	bl	8004460 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "LatSide:");
 80052b8:	4aa9      	ldr	r2, [pc, #676]	; (8005560 <statemachine+0x838>)
 80052ba:	210f      	movs	r1, #15
 80052bc:	48a9      	ldr	r0, [pc, #676]	; (8005564 <statemachine+0x83c>)
 80052be:	f017 fd51 	bl	801cd64 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80052c2:	4aa9      	ldr	r2, [pc, #676]	; (8005568 <statemachine+0x840>)
 80052c4:	2301      	movs	r3, #1
 80052c6:	ca06      	ldmia	r2, {r1, r2}
 80052c8:	48a6      	ldr	r0, [pc, #664]	; (8005564 <statemachine+0x83c>)
 80052ca:	f7ff f8a3 	bl	8004414 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80052ce:	4ba7      	ldr	r3, [pc, #668]	; (800556c <statemachine+0x844>)
 80052d0:	7a1b      	ldrb	r3, [r3, #8]
 80052d2:	4aa7      	ldr	r2, [pc, #668]	; (8005570 <statemachine+0x848>)
 80052d4:	210f      	movs	r1, #15
 80052d6:	48a3      	ldr	r0, [pc, #652]	; (8005564 <statemachine+0x83c>)
 80052d8:	f017 fd44 	bl	801cd64 <sniprintf>
						ssd1306_SetCursor(32, 40);
 80052dc:	2128      	movs	r1, #40	; 0x28
 80052de:	2020      	movs	r0, #32
 80052e0:	f7ff f8be 	bl	8004460 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80052e4:	4aa0      	ldr	r2, [pc, #640]	; (8005568 <statemachine+0x840>)
 80052e6:	2301      	movs	r3, #1
 80052e8:	ca06      	ldmia	r2, {r1, r2}
 80052ea:	489e      	ldr	r0, [pc, #632]	; (8005564 <statemachine+0x83c>)
 80052ec:	f7ff f892 	bl	8004414 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Latitude:");
 80052f0:	4aa0      	ldr	r2, [pc, #640]	; (8005574 <statemachine+0x84c>)
 80052f2:	210f      	movs	r1, #15
 80052f4:	489b      	ldr	r0, [pc, #620]	; (8005564 <statemachine+0x83c>)
 80052f6:	f017 fd35 	bl	801cd64 <sniprintf>
						ssd1306_SetCursor(32, 48);
 80052fa:	2130      	movs	r1, #48	; 0x30
 80052fc:	2020      	movs	r0, #32
 80052fe:	f7ff f8af 	bl	8004460 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005302:	4a99      	ldr	r2, [pc, #612]	; (8005568 <statemachine+0x840>)
 8005304:	2301      	movs	r3, #1
 8005306:	ca06      	ldmia	r2, {r1, r2}
 8005308:	4896      	ldr	r0, [pc, #600]	; (8005564 <statemachine+0x83c>)
 800530a:	f7ff f883 	bl	8004414 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);
 800530e:	4b97      	ldr	r3, [pc, #604]	; (800556c <statemachine+0x844>)
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	e9cd 2300 	strd	r2, r3, [sp]
 8005318:	4a97      	ldr	r2, [pc, #604]	; (8005578 <statemachine+0x850>)
 800531a:	210f      	movs	r1, #15
 800531c:	4891      	ldr	r0, [pc, #580]	; (8005564 <statemachine+0x83c>)
 800531e:	f017 fd21 	bl	801cd64 <sniprintf>
						ssd1306_SetCursor(32, 56);
 8005322:	2138      	movs	r1, #56	; 0x38
 8005324:	2020      	movs	r0, #32
 8005326:	f7ff f89b 	bl	8004460 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800532a:	4a8f      	ldr	r2, [pc, #572]	; (8005568 <statemachine+0x840>)
 800532c:	2301      	movs	r3, #1
 800532e:	ca06      	ldmia	r2, {r1, r2}
 8005330:	488c      	ldr	r0, [pc, #560]	; (8005564 <statemachine+0x83c>)
 8005332:	f7ff f86f 	bl	8004414 <ssd1306_WriteString>


				  if(BTN_B>=1){
 8005336:	4b91      	ldr	r3, [pc, #580]	; (800557c <statemachine+0x854>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	dd08      	ble.n	8005350 <statemachine+0x628>
				  					  posstate++;
 800533e:	4b90      	ldr	r3, [pc, #576]	; (8005580 <statemachine+0x858>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	3301      	adds	r3, #1
 8005344:	b2da      	uxtb	r2, r3
 8005346:	4b8e      	ldr	r3, [pc, #568]	; (8005580 <statemachine+0x858>)
 8005348:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 800534a:	4b8c      	ldr	r3, [pc, #560]	; (800557c <statemachine+0x854>)
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8005350:	4b8c      	ldr	r3, [pc, #560]	; (8005584 <statemachine+0x85c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	f340 80fa 	ble.w	800554e <statemachine+0x826>
									  posstate--;
 800535a:	4b89      	ldr	r3, [pc, #548]	; (8005580 <statemachine+0x858>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	3b01      	subs	r3, #1
 8005360:	b2da      	uxtb	r2, r3
 8005362:	4b87      	ldr	r3, [pc, #540]	; (8005580 <statemachine+0x858>)
 8005364:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8005366:	4b87      	ldr	r3, [pc, #540]	; (8005584 <statemachine+0x85c>)
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
								}



				  break;
 800536c:	e0ef      	b.n	800554e <statemachine+0x826>
			  case STATE_LONG:

					ssd1306_SetCursor(32, 32);
 800536e:	2120      	movs	r1, #32
 8005370:	2020      	movs	r0, #32
 8005372:	f7ff f875 	bl	8004460 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "LonSide:");
 8005376:	4a84      	ldr	r2, [pc, #528]	; (8005588 <statemachine+0x860>)
 8005378:	210f      	movs	r1, #15
 800537a:	487a      	ldr	r0, [pc, #488]	; (8005564 <statemachine+0x83c>)
 800537c:	f017 fcf2 	bl	801cd64 <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005380:	4a79      	ldr	r2, [pc, #484]	; (8005568 <statemachine+0x840>)
 8005382:	2301      	movs	r3, #1
 8005384:	ca06      	ldmia	r2, {r1, r2}
 8005386:	4877      	ldr	r0, [pc, #476]	; (8005564 <statemachine+0x83c>)
 8005388:	f7ff f844 	bl	8004414 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 800538c:	4b77      	ldr	r3, [pc, #476]	; (800556c <statemachine+0x844>)
 800538e:	7e1b      	ldrb	r3, [r3, #24]
 8005390:	4a77      	ldr	r2, [pc, #476]	; (8005570 <statemachine+0x848>)
 8005392:	210f      	movs	r1, #15
 8005394:	4873      	ldr	r0, [pc, #460]	; (8005564 <statemachine+0x83c>)
 8005396:	f017 fce5 	bl	801cd64 <sniprintf>
					ssd1306_SetCursor(32, 40);
 800539a:	2128      	movs	r1, #40	; 0x28
 800539c:	2020      	movs	r0, #32
 800539e:	f7ff f85f 	bl	8004460 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80053a2:	4a71      	ldr	r2, [pc, #452]	; (8005568 <statemachine+0x840>)
 80053a4:	2301      	movs	r3, #1
 80053a6:	ca06      	ldmia	r2, {r1, r2}
 80053a8:	486e      	ldr	r0, [pc, #440]	; (8005564 <statemachine+0x83c>)
 80053aa:	f7ff f833 	bl	8004414 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "Longitude:");
 80053ae:	4a77      	ldr	r2, [pc, #476]	; (800558c <statemachine+0x864>)
 80053b0:	210f      	movs	r1, #15
 80053b2:	486c      	ldr	r0, [pc, #432]	; (8005564 <statemachine+0x83c>)
 80053b4:	f017 fcd6 	bl	801cd64 <sniprintf>
					ssd1306_SetCursor(32, 48);
 80053b8:	2130      	movs	r1, #48	; 0x30
 80053ba:	2020      	movs	r0, #32
 80053bc:	f7ff f850 	bl	8004460 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80053c0:	4a69      	ldr	r2, [pc, #420]	; (8005568 <statemachine+0x840>)
 80053c2:	2301      	movs	r3, #1
 80053c4:	ca06      	ldmia	r2, {r1, r2}
 80053c6:	4867      	ldr	r0, [pc, #412]	; (8005564 <statemachine+0x83c>)
 80053c8:	f7ff f824 	bl	8004414 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 80053cc:	4b67      	ldr	r3, [pc, #412]	; (800556c <statemachine+0x844>)
 80053ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80053d2:	e9cd 2300 	strd	r2, r3, [sp]
 80053d6:	4a68      	ldr	r2, [pc, #416]	; (8005578 <statemachine+0x850>)
 80053d8:	210f      	movs	r1, #15
 80053da:	4862      	ldr	r0, [pc, #392]	; (8005564 <statemachine+0x83c>)
 80053dc:	f017 fcc2 	bl	801cd64 <sniprintf>
					ssd1306_SetCursor(32, 56);
 80053e0:	2138      	movs	r1, #56	; 0x38
 80053e2:	2020      	movs	r0, #32
 80053e4:	f7ff f83c 	bl	8004460 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80053e8:	4a5f      	ldr	r2, [pc, #380]	; (8005568 <statemachine+0x840>)
 80053ea:	2301      	movs	r3, #1
 80053ec:	ca06      	ldmia	r2, {r1, r2}
 80053ee:	485d      	ldr	r0, [pc, #372]	; (8005564 <statemachine+0x83c>)
 80053f0:	f7ff f810 	bl	8004414 <ssd1306_WriteString>

				  if(BTN_B>=1){
 80053f4:	4b61      	ldr	r3, [pc, #388]	; (800557c <statemachine+0x854>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	dd08      	ble.n	800540e <statemachine+0x6e6>
				  					  posstate++;
 80053fc:	4b60      	ldr	r3, [pc, #384]	; (8005580 <statemachine+0x858>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	3301      	adds	r3, #1
 8005402:	b2da      	uxtb	r2, r3
 8005404:	4b5e      	ldr	r3, [pc, #376]	; (8005580 <statemachine+0x858>)
 8005406:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8005408:	4b5c      	ldr	r3, [pc, #368]	; (800557c <statemachine+0x854>)
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 800540e:	4b5d      	ldr	r3, [pc, #372]	; (8005584 <statemachine+0x85c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	f340 809d 	ble.w	8005552 <statemachine+0x82a>
									  posstate--;
 8005418:	4b59      	ldr	r3, [pc, #356]	; (8005580 <statemachine+0x858>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	3b01      	subs	r3, #1
 800541e:	b2da      	uxtb	r2, r3
 8005420:	4b57      	ldr	r3, [pc, #348]	; (8005580 <statemachine+0x858>)
 8005422:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8005424:	4b57      	ldr	r3, [pc, #348]	; (8005584 <statemachine+0x85c>)
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
								}

				  break;
 800542a:	e092      	b.n	8005552 <statemachine+0x82a>
			  case STATE_ALT:


				  						ssd1306_SetCursor(32, 32);
 800542c:	2120      	movs	r1, #32
 800542e:	2020      	movs	r0, #32
 8005430:	f7ff f816 	bl	8004460 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "altitude:");
 8005434:	4a56      	ldr	r2, [pc, #344]	; (8005590 <statemachine+0x868>)
 8005436:	210f      	movs	r1, #15
 8005438:	484a      	ldr	r0, [pc, #296]	; (8005564 <statemachine+0x83c>)
 800543a:	f017 fc93 	bl	801cd64 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800543e:	4a4a      	ldr	r2, [pc, #296]	; (8005568 <statemachine+0x840>)
 8005440:	2301      	movs	r3, #1
 8005442:	ca06      	ldmia	r2, {r1, r2}
 8005444:	4847      	ldr	r0, [pc, #284]	; (8005564 <statemachine+0x83c>)
 8005446:	f7fe ffe5 	bl	8004414 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 800544a:	4b48      	ldr	r3, [pc, #288]	; (800556c <statemachine+0x844>)
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	4618      	mov	r0, r3
 8005450:	f7fb f852 	bl	80004f8 <__aeabi_f2d>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	e9cd 2300 	strd	r2, r3, [sp]
 800545c:	4a4d      	ldr	r2, [pc, #308]	; (8005594 <statemachine+0x86c>)
 800545e:	210f      	movs	r1, #15
 8005460:	4840      	ldr	r0, [pc, #256]	; (8005564 <statemachine+0x83c>)
 8005462:	f017 fc7f 	bl	801cd64 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8005466:	2128      	movs	r1, #40	; 0x28
 8005468:	2020      	movs	r0, #32
 800546a:	f7fe fff9 	bl	8004460 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800546e:	4a3e      	ldr	r2, [pc, #248]	; (8005568 <statemachine+0x840>)
 8005470:	2301      	movs	r3, #1
 8005472:	ca06      	ldmia	r2, {r1, r2}
 8005474:	483b      	ldr	r0, [pc, #236]	; (8005564 <statemachine+0x83c>)
 8005476:	f7fe ffcd 	bl	8004414 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "Pressure:");
 800547a:	4a47      	ldr	r2, [pc, #284]	; (8005598 <statemachine+0x870>)
 800547c:	210f      	movs	r1, #15
 800547e:	4839      	ldr	r0, [pc, #228]	; (8005564 <statemachine+0x83c>)
 8005480:	f017 fc70 	bl	801cd64 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8005484:	2130      	movs	r1, #48	; 0x30
 8005486:	2020      	movs	r0, #32
 8005488:	f7fe ffea 	bl	8004460 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800548c:	4a36      	ldr	r2, [pc, #216]	; (8005568 <statemachine+0x840>)
 800548e:	2301      	movs	r3, #1
 8005490:	ca06      	ldmia	r2, {r1, r2}
 8005492:	4834      	ldr	r0, [pc, #208]	; (8005564 <statemachine+0x83c>)
 8005494:	f7fe ffbe 	bl	8004414 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 8005498:	4b34      	ldr	r3, [pc, #208]	; (800556c <statemachine+0x844>)
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	4618      	mov	r0, r3
 800549e:	f7fb f82b 	bl	80004f8 <__aeabi_f2d>
 80054a2:	a32d      	add	r3, pc, #180	; (adr r3, 8005558 <statemachine+0x830>)
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	f7fb f87e 	bl	80005a8 <__aeabi_dmul>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4610      	mov	r0, r2
 80054b2:	4619      	mov	r1, r3
 80054b4:	f7fb fb70 	bl	8000b98 <__aeabi_d2f>
 80054b8:	4603      	mov	r3, r0
 80054ba:	ee00 3a10 	vmov	s0, r3
 80054be:	f01a faff 	bl	801fac0 <expf>
 80054c2:	eef0 7a40 	vmov.f32	s15, s0
 80054c6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800559c <statemachine+0x874>
 80054ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054ce:	ee17 0a90 	vmov	r0, s15
 80054d2:	f7fb f811 	bl	80004f8 <__aeabi_f2d>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	e9cd 2300 	strd	r2, r3, [sp]
 80054de:	4a30      	ldr	r2, [pc, #192]	; (80055a0 <statemachine+0x878>)
 80054e0:	210f      	movs	r1, #15
 80054e2:	4820      	ldr	r0, [pc, #128]	; (8005564 <statemachine+0x83c>)
 80054e4:	f017 fc3e 	bl	801cd64 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80054e8:	2138      	movs	r1, #56	; 0x38
 80054ea:	2020      	movs	r0, #32
 80054ec:	f7fe ffb8 	bl	8004460 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80054f0:	4a1d      	ldr	r2, [pc, #116]	; (8005568 <statemachine+0x840>)
 80054f2:	2301      	movs	r3, #1
 80054f4:	ca06      	ldmia	r2, {r1, r2}
 80054f6:	481b      	ldr	r0, [pc, #108]	; (8005564 <statemachine+0x83c>)
 80054f8:	f7fe ff8c 	bl	8004414 <ssd1306_WriteString>

				  if(BTN_B>=1){
 80054fc:	4b1f      	ldr	r3, [pc, #124]	; (800557c <statemachine+0x854>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	dd14      	ble.n	800552e <statemachine+0x806>
				  					posstate--;
 8005504:	4b1e      	ldr	r3, [pc, #120]	; (8005580 <statemachine+0x858>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	3b01      	subs	r3, #1
 800550a:	b2da      	uxtb	r2, r3
 800550c:	4b1c      	ldr	r3, [pc, #112]	; (8005580 <statemachine+0x858>)
 800550e:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8005510:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <statemachine+0x858>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	3b01      	subs	r3, #1
 8005516:	b2da      	uxtb	r2, r3
 8005518:	4b19      	ldr	r3, [pc, #100]	; (8005580 <statemachine+0x858>)
 800551a:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 800551c:	4b18      	ldr	r3, [pc, #96]	; (8005580 <statemachine+0x858>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	3b01      	subs	r3, #1
 8005522:	b2da      	uxtb	r2, r3
 8005524:	4b16      	ldr	r3, [pc, #88]	; (8005580 <statemachine+0x858>)
 8005526:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 8005528:	4b14      	ldr	r3, [pc, #80]	; (800557c <statemachine+0x854>)
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 800552e:	4b15      	ldr	r3, [pc, #84]	; (8005584 <statemachine+0x85c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	dd36      	ble.n	80055a4 <statemachine+0x87c>
					  posstate--;
 8005536:	4b12      	ldr	r3, [pc, #72]	; (8005580 <statemachine+0x858>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	3b01      	subs	r3, #1
 800553c:	b2da      	uxtb	r2, r3
 800553e:	4b10      	ldr	r3, [pc, #64]	; (8005580 <statemachine+0x858>)
 8005540:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 8005542:	4b10      	ldr	r3, [pc, #64]	; (8005584 <statemachine+0x85c>)
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
				}
				  break;
 8005548:	e02c      	b.n	80055a4 <statemachine+0x87c>
				  break;
 800554a:	bf00      	nop
 800554c:	e02b      	b.n	80055a6 <statemachine+0x87e>
				  break;
 800554e:	bf00      	nop
 8005550:	e029      	b.n	80055a6 <statemachine+0x87e>
				  break;
 8005552:	bf00      	nop
 8005554:	e027      	b.n	80055a6 <statemachine+0x87e>
 8005556:	bf00      	nop
 8005558:	fb798882 	.word	0xfb798882
 800555c:	bf1e1818 	.word	0xbf1e1818
 8005560:	080217d8 	.word	0x080217d8
 8005564:	20000ad8 	.word	0x20000ad8
 8005568:	20000014 	.word	0x20000014
 800556c:	20000838 	.word	0x20000838
 8005570:	080217e4 	.word	0x080217e4
 8005574:	080217b8 	.word	0x080217b8
 8005578:	080217c4 	.word	0x080217c4
 800557c:	2000087c 	.word	0x2000087c
 8005580:	200005eb 	.word	0x200005eb
 8005584:	20000cbc 	.word	0x20000cbc
 8005588:	080217e8 	.word	0x080217e8
 800558c:	080217cc 	.word	0x080217cc
 8005590:	080217f4 	.word	0x080217f4
 8005594:	08021800 	.word	0x08021800
 8005598:	08021808 	.word	0x08021808
 800559c:	447a0000 	.word	0x447a0000
 80055a0:	08021814 	.word	0x08021814
				  break;
 80055a4:	bf00      	nop
			  }

					if(BTN_A>=1){
 80055a6:	4b5d      	ldr	r3, [pc, #372]	; (800571c <statemachine+0x9f4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	dd0b      	ble.n	80055c6 <statemachine+0x89e>
							state++;
 80055ae:	4b5c      	ldr	r3, [pc, #368]	; (8005720 <statemachine+0x9f8>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	3301      	adds	r3, #1
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	4b5a      	ldr	r3, [pc, #360]	; (8005720 <statemachine+0x9f8>)
 80055b8:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 80055ba:	4b58      	ldr	r3, [pc, #352]	; (800571c <statemachine+0x9f4>)
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 80055c0:	4b58      	ldr	r3, [pc, #352]	; (8005724 <statemachine+0x9fc>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]


						}
					if(BTN_A_LONG>=1){
 80055c6:	4b58      	ldr	r3, [pc, #352]	; (8005728 <statemachine+0xa00>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f341 85cd 	ble.w	800716a <statemachine+0x2442>
									 									 									  			 	state--;
 80055d0:	4b53      	ldr	r3, [pc, #332]	; (8005720 <statemachine+0x9f8>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	4b51      	ldr	r3, [pc, #324]	; (8005720 <statemachine+0x9f8>)
 80055da:	701a      	strb	r2, [r3, #0]
									 									 									  			 	BTN_A=0;
 80055dc:	4b4f      	ldr	r3, [pc, #316]	; (800571c <statemachine+0x9f4>)
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_B=0;
 80055e2:	4b50      	ldr	r3, [pc, #320]	; (8005724 <statemachine+0x9fc>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_A_LONG=0;
 80055e8:	4b4f      	ldr	r3, [pc, #316]	; (8005728 <statemachine+0xa00>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]
									 									 									  	}
			  break;
 80055ee:	f001 bdbc 	b.w	800716a <statemachine+0x2442>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 80055f2:	2000      	movs	r0, #0
 80055f4:	f7fe fdf2 	bl	80041dc <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 80055f8:	494c      	ldr	r1, [pc, #304]	; (800572c <statemachine+0xa04>)
 80055fa:	484d      	ldr	r0, [pc, #308]	; (8005730 <statemachine+0xa08>)
 80055fc:	f7fe f856 	bl	80036ac <nmea_parse>
			  if(settimeen==0){
 8005600:	4b4c      	ldr	r3, [pc, #304]	; (8005734 <statemachine+0xa0c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d141      	bne.n	800568c <statemachine+0x964>

							settimeen=1;
 8005608:	4b4a      	ldr	r3, [pc, #296]	; (8005734 <statemachine+0xa0c>)
 800560a:	2201      	movs	r2, #1
 800560c:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 800560e:	4b48      	ldr	r3, [pc, #288]	; (8005730 <statemachine+0xa08>)
 8005610:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	b2db      	uxtb	r3, r3
 800561a:	461a      	mov	r2, r3
 800561c:	0092      	lsls	r2, r2, #2
 800561e:	4413      	add	r3, r2
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	b2da      	uxtb	r2, r3
 8005624:	4b42      	ldr	r3, [pc, #264]	; (8005730 <statemachine+0xa08>)
 8005626:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	b2db      	uxtb	r3, r3
 8005630:	4413      	add	r3, r2
 8005632:	b2da      	uxtb	r2, r3
 8005634:	4b40      	ldr	r3, [pc, #256]	; (8005738 <statemachine+0xa10>)
 8005636:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8005638:	4b3d      	ldr	r3, [pc, #244]	; (8005730 <statemachine+0xa08>)
 800563a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	b2db      	uxtb	r3, r3
 8005644:	461a      	mov	r2, r3
 8005646:	0092      	lsls	r2, r2, #2
 8005648:	4413      	add	r3, r2
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	b2da      	uxtb	r2, r3
 800564e:	4b38      	ldr	r3, [pc, #224]	; (8005730 <statemachine+0xa08>)
 8005650:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005654:	f003 030f 	and.w	r3, r3, #15
 8005658:	b2db      	uxtb	r3, r3
 800565a:	4413      	add	r3, r2
 800565c:	b2da      	uxtb	r2, r3
 800565e:	4b37      	ldr	r3, [pc, #220]	; (800573c <statemachine+0xa14>)
 8005660:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8005662:	4b33      	ldr	r3, [pc, #204]	; (8005730 <statemachine+0xa08>)
 8005664:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	b2db      	uxtb	r3, r3
 800566e:	461a      	mov	r2, r3
 8005670:	0092      	lsls	r2, r2, #2
 8005672:	4413      	add	r3, r2
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	b2da      	uxtb	r2, r3
 8005678:	4b2d      	ldr	r3, [pc, #180]	; (8005730 <statemachine+0xa08>)
 800567a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	b2db      	uxtb	r3, r3
 8005684:	4413      	add	r3, r2
 8005686:	b2da      	uxtb	r2, r3
 8005688:	4b2d      	ldr	r3, [pc, #180]	; (8005740 <statemachine+0xa18>)
 800568a:	701a      	strb	r2, [r3, #0]


					  }


				  ssd1306_SetCursor(32, 32);
 800568c:	2120      	movs	r1, #32
 800568e:	2020      	movs	r0, #32
 8005690:	f7fe fee6 	bl	8004460 <ssd1306_SetCursor>
				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 8005694:	4a2b      	ldr	r2, [pc, #172]	; (8005744 <statemachine+0xa1c>)
 8005696:	2301      	movs	r3, #1
 8005698:	ca06      	ldmia	r2, {r1, r2}
 800569a:	482b      	ldr	r0, [pc, #172]	; (8005748 <statemachine+0xa20>)
 800569c:	f7fe feba 	bl	8004414 <ssd1306_WriteString>




				  switch(hrstate){
 80056a0:	4b2a      	ldr	r3, [pc, #168]	; (800574c <statemachine+0xa24>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <statemachine+0x986>
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d059      	beq.n	8005760 <statemachine+0xa38>
 80056ac:	e295      	b.n	8005bda <statemachine+0xeb2>
				  case STATE_DIGIT:
					 ssd1306_SetCursor(32, 42);
 80056ae:	212a      	movs	r1, #42	; 0x2a
 80056b0:	2020      	movs	r0, #32
 80056b2:	f7fe fed5 	bl	8004460 <ssd1306_SetCursor>
					 snprintf((char *)bufferscreen,15, "%02d:%02d",HR,MINUTE);
 80056b6:	4b20      	ldr	r3, [pc, #128]	; (8005738 <statemachine+0xa10>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	4b1f      	ldr	r3, [pc, #124]	; (800573c <statemachine+0xa14>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	4613      	mov	r3, r2
 80056c4:	4a22      	ldr	r2, [pc, #136]	; (8005750 <statemachine+0xa28>)
 80056c6:	210f      	movs	r1, #15
 80056c8:	4822      	ldr	r0, [pc, #136]	; (8005754 <statemachine+0xa2c>)
 80056ca:	f017 fb4b 	bl	801cd64 <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80056ce:	4a22      	ldr	r2, [pc, #136]	; (8005758 <statemachine+0xa30>)
 80056d0:	2301      	movs	r3, #1
 80056d2:	ca06      	ldmia	r2, {r1, r2}
 80056d4:	481f      	ldr	r0, [pc, #124]	; (8005754 <statemachine+0xa2c>)
 80056d6:	f7fe fe9d 	bl	8004414 <ssd1306_WriteString>
					ssd1306_SetCursor(32, 50);
 80056da:	2132      	movs	r1, #50	; 0x32
 80056dc:	2020      	movs	r0, #32
 80056de:	f7fe febf 	bl	8004460 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "%02d sec",SEC);
 80056e2:	4b17      	ldr	r3, [pc, #92]	; (8005740 <statemachine+0xa18>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	4a1d      	ldr	r2, [pc, #116]	; (800575c <statemachine+0xa34>)
 80056e8:	210f      	movs	r1, #15
 80056ea:	481a      	ldr	r0, [pc, #104]	; (8005754 <statemachine+0xa2c>)
 80056ec:	f017 fb3a 	bl	801cd64 <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80056f0:	4a14      	ldr	r2, [pc, #80]	; (8005744 <statemachine+0xa1c>)
 80056f2:	2301      	movs	r3, #1
 80056f4:	ca06      	ldmia	r2, {r1, r2}
 80056f6:	4817      	ldr	r0, [pc, #92]	; (8005754 <statemachine+0xa2c>)
 80056f8:	f7fe fe8c 	bl	8004414 <ssd1306_WriteString>
					if(BTN_B>=1){
 80056fc:	4b09      	ldr	r3, [pc, #36]	; (8005724 <statemachine+0x9fc>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	f340 8267 	ble.w	8005bd4 <statemachine+0xeac>
												hrstate++;
 8005706:	4b11      	ldr	r3, [pc, #68]	; (800574c <statemachine+0xa24>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	3301      	adds	r3, #1
 800570c:	b2da      	uxtb	r2, r3
 800570e:	4b0f      	ldr	r3, [pc, #60]	; (800574c <statemachine+0xa24>)
 8005710:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 8005712:	4b04      	ldr	r3, [pc, #16]	; (8005724 <statemachine+0x9fc>)
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]
											}




					  break;
 8005718:	e25c      	b.n	8005bd4 <statemachine+0xeac>
 800571a:	bf00      	nop
 800571c:	20000878 	.word	0x20000878
 8005720:	200005e8 	.word	0x200005e8
 8005724:	2000087c 	.word	0x2000087c
 8005728:	20000cc0 	.word	0x20000cc0
 800572c:	20000638 	.word	0x20000638
 8005730:	20000838 	.word	0x20000838
 8005734:	20000ca8 	.word	0x20000ca8
 8005738:	20000ca5 	.word	0x20000ca5
 800573c:	20000ca6 	.word	0x20000ca6
 8005740:	20000ca4 	.word	0x20000ca4
 8005744:	20000014 	.word	0x20000014
 8005748:	08021820 	.word	0x08021820
 800574c:	200005e9 	.word	0x200005e9
 8005750:	08021828 	.word	0x08021828
 8005754:	20000ad8 	.word	0x20000ad8
 8005758:	2000001c 	.word	0x2000001c
 800575c:	08021834 	.word	0x08021834
				  case STATE_OLD:
					  if(HR>12){
 8005760:	4b91      	ldr	r3, [pc, #580]	; (80059a8 <statemachine+0xc80>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b0c      	cmp	r3, #12
 8005766:	d905      	bls.n	8005774 <statemachine+0xa4c>
						  HR=HR-12;
 8005768:	4b8f      	ldr	r3, [pc, #572]	; (80059a8 <statemachine+0xc80>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	3b0c      	subs	r3, #12
 800576e:	b2da      	uxtb	r2, r3
 8005770:	4b8d      	ldr	r3, [pc, #564]	; (80059a8 <statemachine+0xc80>)
 8005772:	701a      	strb	r2, [r3, #0]
					  }
					  ssd1306_DrawCircle(64, 48, 12, White);
 8005774:	2301      	movs	r3, #1
 8005776:	220c      	movs	r2, #12
 8005778:	2130      	movs	r1, #48	; 0x30
 800577a:	2040      	movs	r0, #64	; 0x40
 800577c:	f7fe fef4 	bl	8004568 <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-HR)*M_PI/6)),48-floor(6*sin((3-HR)*M_PI/6)),White);
 8005780:	4b89      	ldr	r3, [pc, #548]	; (80059a8 <statemachine+0xc80>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	f1c3 0303 	rsb	r3, r3, #3
 8005788:	4618      	mov	r0, r3
 800578a:	f7fa fea3 	bl	80004d4 <__aeabi_i2d>
 800578e:	a384      	add	r3, pc, #528	; (adr r3, 80059a0 <statemachine+0xc78>)
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f7fa ff08 	bl	80005a8 <__aeabi_dmul>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4610      	mov	r0, r2
 800579e:	4619      	mov	r1, r3
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	4b81      	ldr	r3, [pc, #516]	; (80059ac <statemachine+0xc84>)
 80057a6:	f7fb f829 	bl	80007fc <__aeabi_ddiv>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	ec43 2b17 	vmov	d7, r2, r3
 80057b2:	eeb0 0a47 	vmov.f32	s0, s14
 80057b6:	eef0 0a67 	vmov.f32	s1, s15
 80057ba:	f01a f8d5 	bl	801f968 <cos>
 80057be:	ec51 0b10 	vmov	r0, r1, d0
 80057c2:	f04f 0200 	mov.w	r2, #0
 80057c6:	4b79      	ldr	r3, [pc, #484]	; (80059ac <statemachine+0xc84>)
 80057c8:	f7fa feee 	bl	80005a8 <__aeabi_dmul>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	ec43 2b17 	vmov	d7, r2, r3
 80057d4:	eeb0 0a47 	vmov.f32	s0, s14
 80057d8:	eef0 0a67 	vmov.f32	s1, s15
 80057dc:	f01a fa3c 	bl	801fc58 <floor>
 80057e0:	ec51 0b10 	vmov	r0, r1, d0
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	4b71      	ldr	r3, [pc, #452]	; (80059b0 <statemachine+0xc88>)
 80057ea:	f7fa fd27 	bl	800023c <__adddf3>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	4610      	mov	r0, r2
 80057f4:	4619      	mov	r1, r3
 80057f6:	f7fb f9af 	bl	8000b58 <__aeabi_d2uiz>
 80057fa:	4603      	mov	r3, r0
 80057fc:	b2dc      	uxtb	r4, r3
 80057fe:	4b6a      	ldr	r3, [pc, #424]	; (80059a8 <statemachine+0xc80>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	f1c3 0303 	rsb	r3, r3, #3
 8005806:	4618      	mov	r0, r3
 8005808:	f7fa fe64 	bl	80004d4 <__aeabi_i2d>
 800580c:	a364      	add	r3, pc, #400	; (adr r3, 80059a0 <statemachine+0xc78>)
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	f7fa fec9 	bl	80005a8 <__aeabi_dmul>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4610      	mov	r0, r2
 800581c:	4619      	mov	r1, r3
 800581e:	f04f 0200 	mov.w	r2, #0
 8005822:	4b62      	ldr	r3, [pc, #392]	; (80059ac <statemachine+0xc84>)
 8005824:	f7fa ffea 	bl	80007fc <__aeabi_ddiv>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	ec43 2b17 	vmov	d7, r2, r3
 8005830:	eeb0 0a47 	vmov.f32	s0, s14
 8005834:	eef0 0a67 	vmov.f32	s1, s15
 8005838:	f01a f8ea 	bl	801fa10 <sin>
 800583c:	ec51 0b10 	vmov	r0, r1, d0
 8005840:	f04f 0200 	mov.w	r2, #0
 8005844:	4b59      	ldr	r3, [pc, #356]	; (80059ac <statemachine+0xc84>)
 8005846:	f7fa feaf 	bl	80005a8 <__aeabi_dmul>
 800584a:	4602      	mov	r2, r0
 800584c:	460b      	mov	r3, r1
 800584e:	ec43 2b17 	vmov	d7, r2, r3
 8005852:	eeb0 0a47 	vmov.f32	s0, s14
 8005856:	eef0 0a67 	vmov.f32	s1, s15
 800585a:	f01a f9fd 	bl	801fc58 <floor>
 800585e:	ec53 2b10 	vmov	r2, r3, d0
 8005862:	f04f 0000 	mov.w	r0, #0
 8005866:	4953      	ldr	r1, [pc, #332]	; (80059b4 <statemachine+0xc8c>)
 8005868:	f7fa fce6 	bl	8000238 <__aeabi_dsub>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4610      	mov	r0, r2
 8005872:	4619      	mov	r1, r3
 8005874:	f7fb f970 	bl	8000b58 <__aeabi_d2uiz>
 8005878:	4603      	mov	r3, r0
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2201      	movs	r2, #1
 800587e:	9200      	str	r2, [sp, #0]
 8005880:	4622      	mov	r2, r4
 8005882:	2130      	movs	r1, #48	; 0x30
 8005884:	2040      	movs	r0, #64	; 0x40
 8005886:	f7fe fe03 	bl	8004490 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-MINUTE)*M_PI/30)),48-floor(12*sin((15-MINUTE)*M_PI/30)),White);
 800588a:	4b4b      	ldr	r3, [pc, #300]	; (80059b8 <statemachine+0xc90>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	f1c3 030f 	rsb	r3, r3, #15
 8005892:	4618      	mov	r0, r3
 8005894:	f7fa fe1e 	bl	80004d4 <__aeabi_i2d>
 8005898:	a341      	add	r3, pc, #260	; (adr r3, 80059a0 <statemachine+0xc78>)
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	f7fa fe83 	bl	80005a8 <__aeabi_dmul>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4610      	mov	r0, r2
 80058a8:	4619      	mov	r1, r3
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	4b43      	ldr	r3, [pc, #268]	; (80059bc <statemachine+0xc94>)
 80058b0:	f7fa ffa4 	bl	80007fc <__aeabi_ddiv>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	ec43 2b17 	vmov	d7, r2, r3
 80058bc:	eeb0 0a47 	vmov.f32	s0, s14
 80058c0:	eef0 0a67 	vmov.f32	s1, s15
 80058c4:	f01a f850 	bl	801f968 <cos>
 80058c8:	ec51 0b10 	vmov	r0, r1, d0
 80058cc:	f04f 0200 	mov.w	r2, #0
 80058d0:	4b3b      	ldr	r3, [pc, #236]	; (80059c0 <statemachine+0xc98>)
 80058d2:	f7fa fe69 	bl	80005a8 <__aeabi_dmul>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	ec43 2b17 	vmov	d7, r2, r3
 80058de:	eeb0 0a47 	vmov.f32	s0, s14
 80058e2:	eef0 0a67 	vmov.f32	s1, s15
 80058e6:	f01a f9b7 	bl	801fc58 <floor>
 80058ea:	ec51 0b10 	vmov	r0, r1, d0
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	4b2f      	ldr	r3, [pc, #188]	; (80059b0 <statemachine+0xc88>)
 80058f4:	f7fa fca2 	bl	800023c <__adddf3>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4610      	mov	r0, r2
 80058fe:	4619      	mov	r1, r3
 8005900:	f7fb f92a 	bl	8000b58 <__aeabi_d2uiz>
 8005904:	4603      	mov	r3, r0
 8005906:	b2dc      	uxtb	r4, r3
 8005908:	4b2b      	ldr	r3, [pc, #172]	; (80059b8 <statemachine+0xc90>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	f1c3 030f 	rsb	r3, r3, #15
 8005910:	4618      	mov	r0, r3
 8005912:	f7fa fddf 	bl	80004d4 <__aeabi_i2d>
 8005916:	a322      	add	r3, pc, #136	; (adr r3, 80059a0 <statemachine+0xc78>)
 8005918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591c:	f7fa fe44 	bl	80005a8 <__aeabi_dmul>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4610      	mov	r0, r2
 8005926:	4619      	mov	r1, r3
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	4b23      	ldr	r3, [pc, #140]	; (80059bc <statemachine+0xc94>)
 800592e:	f7fa ff65 	bl	80007fc <__aeabi_ddiv>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	ec43 2b17 	vmov	d7, r2, r3
 800593a:	eeb0 0a47 	vmov.f32	s0, s14
 800593e:	eef0 0a67 	vmov.f32	s1, s15
 8005942:	f01a f865 	bl	801fa10 <sin>
 8005946:	ec51 0b10 	vmov	r0, r1, d0
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	4b1c      	ldr	r3, [pc, #112]	; (80059c0 <statemachine+0xc98>)
 8005950:	f7fa fe2a 	bl	80005a8 <__aeabi_dmul>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	ec43 2b17 	vmov	d7, r2, r3
 800595c:	eeb0 0a47 	vmov.f32	s0, s14
 8005960:	eef0 0a67 	vmov.f32	s1, s15
 8005964:	f01a f978 	bl	801fc58 <floor>
 8005968:	ec53 2b10 	vmov	r2, r3, d0
 800596c:	f04f 0000 	mov.w	r0, #0
 8005970:	4910      	ldr	r1, [pc, #64]	; (80059b4 <statemachine+0xc8c>)
 8005972:	f7fa fc61 	bl	8000238 <__aeabi_dsub>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4610      	mov	r0, r2
 800597c:	4619      	mov	r1, r3
 800597e:	f7fb f8eb 	bl	8000b58 <__aeabi_d2uiz>
 8005982:	4603      	mov	r3, r0
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2201      	movs	r2, #1
 8005988:	9200      	str	r2, [sp, #0]
 800598a:	4622      	mov	r2, r4
 800598c:	2130      	movs	r1, #48	; 0x30
 800598e:	2040      	movs	r0, #64	; 0x40
 8005990:	f7fe fd7e 	bl	8004490 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	e10a      	b.n	8005bb0 <statemachine+0xe88>
 800599a:	bf00      	nop
 800599c:	f3af 8000 	nop.w
 80059a0:	54442d18 	.word	0x54442d18
 80059a4:	400921fb 	.word	0x400921fb
 80059a8:	20000ca5 	.word	0x20000ca5
 80059ac:	40180000 	.word	0x40180000
 80059b0:	40500000 	.word	0x40500000
 80059b4:	40480000 	.word	0x40480000
 80059b8:	20000ca6 	.word	0x20000ca6
 80059bc:	403e0000 	.word	0x403e0000
 80059c0:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f7fa fd85 	bl	80004d4 <__aeabi_i2d>
 80059ca:	a399      	add	r3, pc, #612	; (adr r3, 8005c30 <statemachine+0xf08>)
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	f7fa fdea 	bl	80005a8 <__aeabi_dmul>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4610      	mov	r0, r2
 80059da:	4619      	mov	r1, r3
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	4b95      	ldr	r3, [pc, #596]	; (8005c38 <statemachine+0xf10>)
 80059e2:	f7fa ff0b 	bl	80007fc <__aeabi_ddiv>
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	ec43 2b17 	vmov	d7, r2, r3
 80059ee:	eeb0 0a47 	vmov.f32	s0, s14
 80059f2:	eef0 0a67 	vmov.f32	s1, s15
 80059f6:	f019 ffb7 	bl	801f968 <cos>
 80059fa:	ec51 0b10 	vmov	r0, r1, d0
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	4b8e      	ldr	r3, [pc, #568]	; (8005c3c <statemachine+0xf14>)
 8005a04:	f7fa fdd0 	bl	80005a8 <__aeabi_dmul>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	ec43 2b17 	vmov	d7, r2, r3
 8005a10:	eeb0 0a47 	vmov.f32	s0, s14
 8005a14:	eef0 0a67 	vmov.f32	s1, s15
 8005a18:	f01a f91e 	bl	801fc58 <floor>
 8005a1c:	ec51 0b10 	vmov	r0, r1, d0
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	4b86      	ldr	r3, [pc, #536]	; (8005c40 <statemachine+0xf18>)
 8005a26:	f7fa fc09 	bl	800023c <__adddf3>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4610      	mov	r0, r2
 8005a30:	4619      	mov	r1, r3
 8005a32:	f7fb f891 	bl	8000b58 <__aeabi_d2uiz>
 8005a36:	4603      	mov	r3, r0
 8005a38:	b2dc      	uxtb	r4, r3
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f7fa fd4a 	bl	80004d4 <__aeabi_i2d>
 8005a40:	a37b      	add	r3, pc, #492	; (adr r3, 8005c30 <statemachine+0xf08>)
 8005a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a46:	f7fa fdaf 	bl	80005a8 <__aeabi_dmul>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4610      	mov	r0, r2
 8005a50:	4619      	mov	r1, r3
 8005a52:	f04f 0200 	mov.w	r2, #0
 8005a56:	4b78      	ldr	r3, [pc, #480]	; (8005c38 <statemachine+0xf10>)
 8005a58:	f7fa fed0 	bl	80007fc <__aeabi_ddiv>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	ec43 2b17 	vmov	d7, r2, r3
 8005a64:	eeb0 0a47 	vmov.f32	s0, s14
 8005a68:	eef0 0a67 	vmov.f32	s1, s15
 8005a6c:	f019 ffd0 	bl	801fa10 <sin>
 8005a70:	ec51 0b10 	vmov	r0, r1, d0
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	4b70      	ldr	r3, [pc, #448]	; (8005c3c <statemachine+0xf14>)
 8005a7a:	f7fa fd95 	bl	80005a8 <__aeabi_dmul>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	ec43 2b17 	vmov	d7, r2, r3
 8005a86:	eeb0 0a47 	vmov.f32	s0, s14
 8005a8a:	eef0 0a67 	vmov.f32	s1, s15
 8005a8e:	f01a f8e3 	bl	801fc58 <floor>
 8005a92:	ec51 0b10 	vmov	r0, r1, d0
 8005a96:	f04f 0200 	mov.w	r2, #0
 8005a9a:	4b6a      	ldr	r3, [pc, #424]	; (8005c44 <statemachine+0xf1c>)
 8005a9c:	f7fa fbce 	bl	800023c <__adddf3>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	f7fb f856 	bl	8000b58 <__aeabi_d2uiz>
 8005aac:	4603      	mov	r3, r0
 8005aae:	b2dd      	uxtb	r5, r3
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7fa fd0f 	bl	80004d4 <__aeabi_i2d>
 8005ab6:	a35e      	add	r3, pc, #376	; (adr r3, 8005c30 <statemachine+0xf08>)
 8005ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abc:	f7fa fd74 	bl	80005a8 <__aeabi_dmul>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	4b5a      	ldr	r3, [pc, #360]	; (8005c38 <statemachine+0xf10>)
 8005ace:	f7fa fe95 	bl	80007fc <__aeabi_ddiv>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	ec43 2b17 	vmov	d7, r2, r3
 8005ada:	eeb0 0a47 	vmov.f32	s0, s14
 8005ade:	eef0 0a67 	vmov.f32	s1, s15
 8005ae2:	f019 ff41 	bl	801f968 <cos>
 8005ae6:	ec51 0b10 	vmov	r0, r1, d0
 8005aea:	f04f 0200 	mov.w	r2, #0
 8005aee:	4b56      	ldr	r3, [pc, #344]	; (8005c48 <statemachine+0xf20>)
 8005af0:	f7fa fd5a 	bl	80005a8 <__aeabi_dmul>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	ec43 2b17 	vmov	d7, r2, r3
 8005afc:	eeb0 0a47 	vmov.f32	s0, s14
 8005b00:	eef0 0a67 	vmov.f32	s1, s15
 8005b04:	f01a f8a8 	bl	801fc58 <floor>
 8005b08:	ec51 0b10 	vmov	r0, r1, d0
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	4b4b      	ldr	r3, [pc, #300]	; (8005c40 <statemachine+0xf18>)
 8005b12:	f7fa fb93 	bl	800023c <__adddf3>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	f7fb f81b 	bl	8000b58 <__aeabi_d2uiz>
 8005b22:	4603      	mov	r3, r0
 8005b24:	b2de      	uxtb	r6, r3
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f7fa fcd4 	bl	80004d4 <__aeabi_i2d>
 8005b2c:	a340      	add	r3, pc, #256	; (adr r3, 8005c30 <statemachine+0xf08>)
 8005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b32:	f7fa fd39 	bl	80005a8 <__aeabi_dmul>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	4b3d      	ldr	r3, [pc, #244]	; (8005c38 <statemachine+0xf10>)
 8005b44:	f7fa fe5a 	bl	80007fc <__aeabi_ddiv>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	ec43 2b17 	vmov	d7, r2, r3
 8005b50:	eeb0 0a47 	vmov.f32	s0, s14
 8005b54:	eef0 0a67 	vmov.f32	s1, s15
 8005b58:	f019 ff5a 	bl	801fa10 <sin>
 8005b5c:	ec51 0b10 	vmov	r0, r1, d0
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	4b38      	ldr	r3, [pc, #224]	; (8005c48 <statemachine+0xf20>)
 8005b66:	f7fa fd1f 	bl	80005a8 <__aeabi_dmul>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	ec43 2b17 	vmov	d7, r2, r3
 8005b72:	eeb0 0a47 	vmov.f32	s0, s14
 8005b76:	eef0 0a67 	vmov.f32	s1, s15
 8005b7a:	f01a f86d 	bl	801fc58 <floor>
 8005b7e:	ec51 0b10 	vmov	r0, r1, d0
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	4b2f      	ldr	r3, [pc, #188]	; (8005c44 <statemachine+0xf1c>)
 8005b88:	f7fa fb58 	bl	800023c <__adddf3>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4610      	mov	r0, r2
 8005b92:	4619      	mov	r1, r3
 8005b94:	f7fa ffe0 	bl	8000b58 <__aeabi_d2uiz>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	9200      	str	r2, [sp, #0]
 8005ba0:	4632      	mov	r2, r6
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f7fe fc73 	bl	8004490 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3301      	adds	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b0c      	cmp	r3, #12
 8005bb4:	f77f af06 	ble.w	80059c4 <statemachine+0xc9c>
					  }
					  if(BTN_B>=1){
 8005bb8:	4b24      	ldr	r3, [pc, #144]	; (8005c4c <statemachine+0xf24>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	dd0b      	ble.n	8005bd8 <statemachine+0xeb0>
					  	hrstate--;
 8005bc0:	4b23      	ldr	r3, [pc, #140]	; (8005c50 <statemachine+0xf28>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	4b21      	ldr	r3, [pc, #132]	; (8005c50 <statemachine+0xf28>)
 8005bca:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 8005bcc:	4b1f      	ldr	r3, [pc, #124]	; (8005c4c <statemachine+0xf24>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]
					  }


					  break;
 8005bd2:	e001      	b.n	8005bd8 <statemachine+0xeb0>
					  break;
 8005bd4:	bf00      	nop
 8005bd6:	e000      	b.n	8005bda <statemachine+0xeb2>
					  break;
 8005bd8:	bf00      	nop

				  }

				  if(BTN_A>=1){
 8005bda:	4b1e      	ldr	r3, [pc, #120]	; (8005c54 <statemachine+0xf2c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	dd0e      	ble.n	8005c00 <statemachine+0xed8>
			  		state++;
 8005be2:	4b1d      	ldr	r3, [pc, #116]	; (8005c58 <statemachine+0xf30>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	3301      	adds	r3, #1
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	4b1b      	ldr	r3, [pc, #108]	; (8005c58 <statemachine+0xf30>)
 8005bec:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8005bee:	4b19      	ldr	r3, [pc, #100]	; (8005c54 <statemachine+0xf2c>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8005bf4:	4b15      	ldr	r3, [pc, #84]	; (8005c4c <statemachine+0xf24>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
			  		settimeen=0;
 8005bfa:	4b18      	ldr	r3, [pc, #96]	; (8005c5c <statemachine+0xf34>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
			  		}
				  if(BTN_A_LONG>=1){
 8005c00:	4b17      	ldr	r3, [pc, #92]	; (8005c60 <statemachine+0xf38>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f341 82b2 	ble.w	800716e <statemachine+0x2446>
				  									 									 									  			 	state--;
 8005c0a:	4b13      	ldr	r3, [pc, #76]	; (8005c58 <statemachine+0xf30>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	4b11      	ldr	r3, [pc, #68]	; (8005c58 <statemachine+0xf30>)
 8005c14:	701a      	strb	r2, [r3, #0]
				  									 									 									  			 	BTN_A=0;
 8005c16:	4b0f      	ldr	r3, [pc, #60]	; (8005c54 <statemachine+0xf2c>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]
				  									 									 									  			 	BTN_B=0;
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <statemachine+0xf24>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]
				  									 									 									  			 	BTN_A_LONG=0;
 8005c22:	4b0f      	ldr	r3, [pc, #60]	; (8005c60 <statemachine+0xf38>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]





			  break;
 8005c28:	f001 baa1 	b.w	800716e <statemachine+0x2446>
 8005c2c:	f3af 8000 	nop.w
 8005c30:	54442d18 	.word	0x54442d18
 8005c34:	400921fb 	.word	0x400921fb
 8005c38:	40180000 	.word	0x40180000
 8005c3c:	40240000 	.word	0x40240000
 8005c40:	40500000 	.word	0x40500000
 8005c44:	40480000 	.word	0x40480000
 8005c48:	40280000 	.word	0x40280000
 8005c4c:	2000087c 	.word	0x2000087c
 8005c50:	200005e9 	.word	0x200005e9
 8005c54:	20000878 	.word	0x20000878
 8005c58:	200005e8 	.word	0x200005e8
 8005c5c:	20000ca8 	.word	0x20000ca8
 8005c60:	20000cc0 	.word	0x20000cc0
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 8005c64:	2000      	movs	r0, #0
 8005c66:	f7fe fab9 	bl	80041dc <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8005c6a:	497a      	ldr	r1, [pc, #488]	; (8005e54 <statemachine+0x112c>)
 8005c6c:	487a      	ldr	r0, [pc, #488]	; (8005e58 <statemachine+0x1130>)
 8005c6e:	f7fd fd1d 	bl	80036ac <nmea_parse>
			snprintf((char *)bufferscreen,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8005c72:	4b79      	ldr	r3, [pc, #484]	; (8005e58 <statemachine+0x1130>)
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fa fc3e 	bl	80004f8 <__aeabi_f2d>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	e9cd 2300 	strd	r2, r3, [sp]
 8005c84:	4a75      	ldr	r2, [pc, #468]	; (8005e5c <statemachine+0x1134>)
 8005c86:	210f      	movs	r1, #15
 8005c88:	4875      	ldr	r0, [pc, #468]	; (8005e60 <statemachine+0x1138>)
 8005c8a:	f017 f86b 	bl	801cd64 <sniprintf>
			ssd1306_SetCursor(32, 32);
 8005c8e:	2120      	movs	r1, #32
 8005c90:	2020      	movs	r0, #32
 8005c92:	f7fe fbe5 	bl	8004460 <ssd1306_SetCursor>
			ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005c96:	4a73      	ldr	r2, [pc, #460]	; (8005e64 <statemachine+0x113c>)
 8005c98:	2301      	movs	r3, #1
 8005c9a:	ca06      	ldmia	r2, {r1, r2}
 8005c9c:	4870      	ldr	r0, [pc, #448]	; (8005e60 <statemachine+0x1138>)
 8005c9e:	f7fe fbb9 	bl	8004414 <ssd1306_WriteString>
			snprintf((char *)bufferscreen,20, "v=%0.2fV",vbat);
 8005ca2:	4b71      	ldr	r3, [pc, #452]	; (8005e68 <statemachine+0x1140>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fa fc26 	bl	80004f8 <__aeabi_f2d>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	e9cd 2300 	strd	r2, r3, [sp]
 8005cb4:	4a6d      	ldr	r2, [pc, #436]	; (8005e6c <statemachine+0x1144>)
 8005cb6:	2114      	movs	r1, #20
 8005cb8:	4869      	ldr	r0, [pc, #420]	; (8005e60 <statemachine+0x1138>)
 8005cba:	f017 f853 	bl	801cd64 <sniprintf>
			ssd1306_SetCursor(32, 42);
 8005cbe:	212a      	movs	r1, #42	; 0x2a
 8005cc0:	2020      	movs	r0, #32
 8005cc2:	f7fe fbcd 	bl	8004460 <ssd1306_SetCursor>
			ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005cc6:	4a67      	ldr	r2, [pc, #412]	; (8005e64 <statemachine+0x113c>)
 8005cc8:	2301      	movs	r3, #1
 8005cca:	ca06      	ldmia	r2, {r1, r2}
 8005ccc:	4864      	ldr	r0, [pc, #400]	; (8005e60 <statemachine+0x1138>)
 8005cce:	f7fe fba1 	bl	8004414 <ssd1306_WriteString>
			ssd1306_SetCursor(32, 50);
 8005cd2:	2132      	movs	r1, #50	; 0x32
 8005cd4:	2020      	movs	r0, #32
 8005cd6:	f7fe fbc3 	bl	8004460 <ssd1306_SetCursor>
			snprintf((char *)bufferscreen,15,  "T=%0.2fC",temp);
 8005cda:	4b65      	ldr	r3, [pc, #404]	; (8005e70 <statemachine+0x1148>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fa fc0a 	bl	80004f8 <__aeabi_f2d>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	e9cd 2300 	strd	r2, r3, [sp]
 8005cec:	4a61      	ldr	r2, [pc, #388]	; (8005e74 <statemachine+0x114c>)
 8005cee:	210f      	movs	r1, #15
 8005cf0:	485b      	ldr	r0, [pc, #364]	; (8005e60 <statemachine+0x1138>)
 8005cf2:	f017 f837 	bl	801cd64 <sniprintf>
			ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005cf6:	4a5b      	ldr	r2, [pc, #364]	; (8005e64 <statemachine+0x113c>)
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	ca06      	ldmia	r2, {r1, r2}
 8005cfc:	4858      	ldr	r0, [pc, #352]	; (8005e60 <statemachine+0x1138>)
 8005cfe:	f7fe fb89 	bl	8004414 <ssd1306_WriteString>

			  if(BTN_A>=1){
 8005d02:	4b5d      	ldr	r3, [pc, #372]	; (8005e78 <statemachine+0x1150>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	dd0b      	ble.n	8005d22 <statemachine+0xffa>
			  		state++;
 8005d0a:	4b5c      	ldr	r3, [pc, #368]	; (8005e7c <statemachine+0x1154>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	4b5a      	ldr	r3, [pc, #360]	; (8005e7c <statemachine+0x1154>)
 8005d14:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8005d16:	4b58      	ldr	r3, [pc, #352]	; (8005e78 <statemachine+0x1150>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8005d1c:	4b58      	ldr	r3, [pc, #352]	; (8005e80 <statemachine+0x1158>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]
			  		}
			  if(BTN_A_LONG>=1){
 8005d22:	4b58      	ldr	r3, [pc, #352]	; (8005e84 <statemachine+0x115c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f341 8223 	ble.w	8007172 <statemachine+0x244a>
			  				 									 									  			 	state--;
 8005d2c:	4b53      	ldr	r3, [pc, #332]	; (8005e7c <statemachine+0x1154>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	4b51      	ldr	r3, [pc, #324]	; (8005e7c <statemachine+0x1154>)
 8005d36:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8005d38:	4b4f      	ldr	r3, [pc, #316]	; (8005e78 <statemachine+0x1150>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8005d3e:	4b50      	ldr	r3, [pc, #320]	; (8005e80 <statemachine+0x1158>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8005d44:	4b4f      	ldr	r3, [pc, #316]	; (8005e84 <statemachine+0x115c>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8005d4a:	f001 ba12 	b.w	8007172 <statemachine+0x244a>

		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8005d4e:	2000      	movs	r0, #0
 8005d50:	f7fe fa44 	bl	80041dc <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 8005d54:	2120      	movs	r1, #32
 8005d56:	2020      	movs	r0, #32
 8005d58:	f7fe fb82 	bl	8004460 <ssd1306_SetCursor>
			  ssd1306_WriteString("chrono", Font_6x8, White);
 8005d5c:	4a41      	ldr	r2, [pc, #260]	; (8005e64 <statemachine+0x113c>)
 8005d5e:	2301      	movs	r3, #1
 8005d60:	ca06      	ldmia	r2, {r1, r2}
 8005d62:	4849      	ldr	r0, [pc, #292]	; (8005e88 <statemachine+0x1160>)
 8005d64:	f7fe fb56 	bl	8004414 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 40);
 8005d68:	2128      	movs	r1, #40	; 0x28
 8005d6a:	2020      	movs	r0, #32
 8005d6c:	f7fe fb78 	bl	8004460 <ssd1306_SetCursor>

			  switch(chronostate){
 8005d70:	4b46      	ldr	r3, [pc, #280]	; (8005e8c <statemachine+0x1164>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d03c      	beq.n	8005df2 <statemachine+0x10ca>
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	f300 8098 	bgt.w	8005eae <statemachine+0x1186>
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <statemachine+0x1060>
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d01d      	beq.n	8005dc2 <statemachine+0x109a>
 8005d86:	e092      	b.n	8005eae <statemachine+0x1186>
			  case STATE_RESET:
				  min=0;
 8005d88:	4b41      	ldr	r3, [pc, #260]	; (8005e90 <statemachine+0x1168>)
 8005d8a:	f04f 0200 	mov.w	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8005d90:	4b40      	ldr	r3, [pc, #256]	; (8005e94 <statemachine+0x116c>)
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8005d98:	4b3f      	ldr	r3, [pc, #252]	; (8005e98 <statemachine+0x1170>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]

				  	 if(BTN_B>=1){
 8005d9e:	4b38      	ldr	r3, [pc, #224]	; (8005e80 <statemachine+0x1158>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	dd51      	ble.n	8005e4a <statemachine+0x1122>
				  		chronostate++;
 8005da6:	4b39      	ldr	r3, [pc, #228]	; (8005e8c <statemachine+0x1164>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	3301      	adds	r3, #1
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	4b37      	ldr	r3, [pc, #220]	; (8005e8c <statemachine+0x1164>)
 8005db0:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005db2:	4b33      	ldr	r3, [pc, #204]	; (8005e80 <statemachine+0x1158>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8005db8:	4b38      	ldr	r3, [pc, #224]	; (8005e9c <statemachine+0x1174>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a38      	ldr	r2, [pc, #224]	; (8005ea0 <statemachine+0x1178>)
 8005dbe:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8005dc0:	e043      	b.n	8005e4a <statemachine+0x1122>
			  case STATE_RUN:
				  calctime=uwTick-starttime+timehandler;
 8005dc2:	4b36      	ldr	r3, [pc, #216]	; (8005e9c <statemachine+0x1174>)
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4b36      	ldr	r3, [pc, #216]	; (8005ea0 <statemachine+0x1178>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	1ad2      	subs	r2, r2, r3
 8005dcc:	4b35      	ldr	r3, [pc, #212]	; (8005ea4 <statemachine+0x117c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	4a31      	ldr	r2, [pc, #196]	; (8005e98 <statemachine+0x1170>)
 8005dd4:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8005dd6:	4b2a      	ldr	r3, [pc, #168]	; (8005e80 <statemachine+0x1158>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	dd37      	ble.n	8005e4e <statemachine+0x1126>
				  		chronostate++;
 8005dde:	4b2b      	ldr	r3, [pc, #172]	; (8005e8c <statemachine+0x1164>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	3301      	adds	r3, #1
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	4b29      	ldr	r3, [pc, #164]	; (8005e8c <statemachine+0x1164>)
 8005de8:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005dea:	4b25      	ldr	r3, [pc, #148]	; (8005e80 <statemachine+0x1158>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8005df0:	e02d      	b.n	8005e4e <statemachine+0x1126>
			  case STATE_PAUSE:
				  timehandler=calctime;
 8005df2:	4b29      	ldr	r3, [pc, #164]	; (8005e98 <statemachine+0x1170>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a2b      	ldr	r2, [pc, #172]	; (8005ea4 <statemachine+0x117c>)
 8005df8:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8005dfa:	4b21      	ldr	r3, [pc, #132]	; (8005e80 <statemachine+0x1158>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	dd0c      	ble.n	8005e1c <statemachine+0x10f4>
				  			chronostate--;
 8005e02:	4b22      	ldr	r3, [pc, #136]	; (8005e8c <statemachine+0x1164>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	4b20      	ldr	r3, [pc, #128]	; (8005e8c <statemachine+0x1164>)
 8005e0c:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8005e0e:	4b1c      	ldr	r3, [pc, #112]	; (8005e80 <statemachine+0x1158>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
				  			starttime=uwTick;
 8005e14:	4b21      	ldr	r3, [pc, #132]	; (8005e9c <statemachine+0x1174>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a21      	ldr	r2, [pc, #132]	; (8005ea0 <statemachine+0x1178>)
 8005e1a:	6013      	str	r3, [r2, #0]

			 }
				  if(BTN_B_LONG>=1){
 8005e1c:	4b22      	ldr	r3, [pc, #136]	; (8005ea8 <statemachine+0x1180>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	dd43      	ble.n	8005eac <statemachine+0x1184>
				  				  	chronostate--;
 8005e24:	4b19      	ldr	r3, [pc, #100]	; (8005e8c <statemachine+0x1164>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	4b17      	ldr	r3, [pc, #92]	; (8005e8c <statemachine+0x1164>)
 8005e2e:	701a      	strb	r2, [r3, #0]
				  				  	chronostate--;
 8005e30:	4b16      	ldr	r3, [pc, #88]	; (8005e8c <statemachine+0x1164>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	4b14      	ldr	r3, [pc, #80]	; (8005e8c <statemachine+0x1164>)
 8005e3a:	701a      	strb	r2, [r3, #0]
				  				  	BTN_B_LONG=0;
 8005e3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ea8 <statemachine+0x1180>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
				  				  	timehandler=0;
 8005e42:	4b18      	ldr	r3, [pc, #96]	; (8005ea4 <statemachine+0x117c>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
				  			 }


				  break;
 8005e48:	e030      	b.n	8005eac <statemachine+0x1184>
				  break;
 8005e4a:	bf00      	nop
 8005e4c:	e02f      	b.n	8005eae <statemachine+0x1186>
				  break;
 8005e4e:	bf00      	nop
 8005e50:	e02d      	b.n	8005eae <statemachine+0x1186>
 8005e52:	bf00      	nop
 8005e54:	20000638 	.word	0x20000638
 8005e58:	20000838 	.word	0x20000838
 8005e5c:	08021840 	.word	0x08021840
 8005e60:	20000ad8 	.word	0x20000ad8
 8005e64:	20000014 	.word	0x20000014
 8005e68:	200008b0 	.word	0x200008b0
 8005e6c:	0802184c 	.word	0x0802184c
 8005e70:	200008a8 	.word	0x200008a8
 8005e74:	08021858 	.word	0x08021858
 8005e78:	20000878 	.word	0x20000878
 8005e7c:	200005e8 	.word	0x200005e8
 8005e80:	2000087c 	.word	0x2000087c
 8005e84:	20000cc0 	.word	0x20000cc0
 8005e88:	08021864 	.word	0x08021864
 8005e8c:	200005ec 	.word	0x200005ec
 8005e90:	20000c58 	.word	0x20000c58
 8005e94:	20000c54 	.word	0x20000c54
 8005e98:	20000c60 	.word	0x20000c60
 8005e9c:	20001550 	.word	0x20001550
 8005ea0:	20000c5c 	.word	0x20000c5c
 8005ea4:	20000c64 	.word	0x20000c64
 8005ea8:	20000cbc 	.word	0x20000cbc
				  break;
 8005eac:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8005eae:	4ba4      	ldr	r3, [pc, #656]	; (8006140 <statemachine+0x1418>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eba:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8006144 <statemachine+0x141c>
 8005ebe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ec2:	ee16 0a90 	vmov	r0, s13
 8005ec6:	f7fa fb17 	bl	80004f8 <__aeabi_f2d>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	ec43 2b10 	vmov	d0, r2, r3
 8005ed2:	f019 fec1 	bl	801fc58 <floor>
 8005ed6:	ec53 2b10 	vmov	r2, r3, d0
 8005eda:	4610      	mov	r0, r2
 8005edc:	4619      	mov	r1, r3
 8005ede:	f7fa fe5b 	bl	8000b98 <__aeabi_d2f>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	4a98      	ldr	r2, [pc, #608]	; (8006148 <statemachine+0x1420>)
 8005ee6:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8005ee8:	4b95      	ldr	r3, [pc, #596]	; (8006140 <statemachine+0x1418>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	ee07 3a90 	vmov	s15, r3
 8005ef0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ef4:	4b94      	ldr	r3, [pc, #592]	; (8006148 <statemachine+0x1420>)
 8005ef6:	edd3 7a00 	vldr	s15, [r3]
 8005efa:	eddf 6a92 	vldr	s13, [pc, #584]	; 8006144 <statemachine+0x141c>
 8005efe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005f02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f06:	eddf 6a91 	vldr	s13, [pc, #580]	; 800614c <statemachine+0x1424>
 8005f0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f0e:	4b90      	ldr	r3, [pc, #576]	; (8006150 <statemachine+0x1428>)
 8005f10:	edc3 7a00 	vstr	s15, [r3]
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 8005f14:	4b8c      	ldr	r3, [pc, #560]	; (8006148 <statemachine+0x1420>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fa faed 	bl	80004f8 <__aeabi_f2d>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	e9cd 2300 	strd	r2, r3, [sp]
 8005f26:	4a8b      	ldr	r2, [pc, #556]	; (8006154 <statemachine+0x142c>)
 8005f28:	210f      	movs	r1, #15
 8005f2a:	488b      	ldr	r0, [pc, #556]	; (8006158 <statemachine+0x1430>)
 8005f2c:	f016 ff1a 	bl	801cd64 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005f30:	4a8a      	ldr	r2, [pc, #552]	; (800615c <statemachine+0x1434>)
 8005f32:	2301      	movs	r3, #1
 8005f34:	ca06      	ldmia	r2, {r1, r2}
 8005f36:	4888      	ldr	r0, [pc, #544]	; (8006158 <statemachine+0x1430>)
 8005f38:	f7fe fa6c 	bl	8004414 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8005f3c:	2132      	movs	r1, #50	; 0x32
 8005f3e:	2020      	movs	r0, #32
 8005f40:	f7fe fa8e 	bl	8004460 <ssd1306_SetCursor>
			  snprintf((char *)bufferscreen,15, "%0.3fs",seconde);
 8005f44:	4b82      	ldr	r3, [pc, #520]	; (8006150 <statemachine+0x1428>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fa fad5 	bl	80004f8 <__aeabi_f2d>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	e9cd 2300 	strd	r2, r3, [sp]
 8005f56:	4a82      	ldr	r2, [pc, #520]	; (8006160 <statemachine+0x1438>)
 8005f58:	210f      	movs	r1, #15
 8005f5a:	487f      	ldr	r0, [pc, #508]	; (8006158 <statemachine+0x1430>)
 8005f5c:	f016 ff02 	bl	801cd64 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005f60:	4a7e      	ldr	r2, [pc, #504]	; (800615c <statemachine+0x1434>)
 8005f62:	2301      	movs	r3, #1
 8005f64:	ca06      	ldmia	r2, {r1, r2}
 8005f66:	487c      	ldr	r0, [pc, #496]	; (8006158 <statemachine+0x1430>)
 8005f68:	f7fe fa54 	bl	8004414 <ssd1306_WriteString>


			  if(BTN_A>=1){
 8005f6c:	4b7d      	ldr	r3, [pc, #500]	; (8006164 <statemachine+0x143c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	dd0b      	ble.n	8005f8c <statemachine+0x1264>
			 	state++;
 8005f74:	4b7c      	ldr	r3, [pc, #496]	; (8006168 <statemachine+0x1440>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	4b7a      	ldr	r3, [pc, #488]	; (8006168 <statemachine+0x1440>)
 8005f7e:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8005f80:	4b78      	ldr	r3, [pc, #480]	; (8006164 <statemachine+0x143c>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8005f86:	4b79      	ldr	r3, [pc, #484]	; (800616c <statemachine+0x1444>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]


	}
			  if(BTN_A_LONG>=1){
 8005f8c:	4b78      	ldr	r3, [pc, #480]	; (8006170 <statemachine+0x1448>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f341 80f0 	ble.w	8007176 <statemachine+0x244e>
			  				 									 									  			 	state--;
 8005f96:	4b74      	ldr	r3, [pc, #464]	; (8006168 <statemachine+0x1440>)
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	4b72      	ldr	r3, [pc, #456]	; (8006168 <statemachine+0x1440>)
 8005fa0:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8005fa2:	4b70      	ldr	r3, [pc, #448]	; (8006164 <statemachine+0x143c>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8005fa8:	4b70      	ldr	r3, [pc, #448]	; (800616c <statemachine+0x1444>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8005fae:	4b70      	ldr	r3, [pc, #448]	; (8006170 <statemachine+0x1448>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8005fb4:	f001 b8df 	b.w	8007176 <statemachine+0x244e>


			  case STATE_BALISE:
				  ssd1306_Fill(Black);
 8005fb8:	2000      	movs	r0, #0
 8005fba:	f7fe f90f 	bl	80041dc <ssd1306_Fill>

				  if(settimeen==0){
 8005fbe:	4b6d      	ldr	r3, [pc, #436]	; (8006174 <statemachine+0x144c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d145      	bne.n	8006052 <statemachine+0x132a>

					  if(myData.fix==1){
 8005fc6:	4b6c      	ldr	r3, [pc, #432]	; (8006178 <statemachine+0x1450>)
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d141      	bne.n	8006052 <statemachine+0x132a>
						settimeen=1;
 8005fce:	4b69      	ldr	r3, [pc, #420]	; (8006174 <statemachine+0x144c>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]
						HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8005fd4:	4b68      	ldr	r3, [pc, #416]	; (8006178 <statemachine+0x1450>)
 8005fd6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	0092      	lsls	r2, r2, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	4b63      	ldr	r3, [pc, #396]	; (8006178 <statemachine+0x1450>)
 8005fec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ff0:	f003 030f 	and.w	r3, r3, #15
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	4413      	add	r3, r2
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	4b60      	ldr	r3, [pc, #384]	; (800617c <statemachine+0x1454>)
 8005ffc:	701a      	strb	r2, [r3, #0]
						MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8005ffe:	4b5e      	ldr	r3, [pc, #376]	; (8006178 <statemachine+0x1450>)
 8006000:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	b2db      	uxtb	r3, r3
 800600a:	461a      	mov	r2, r3
 800600c:	0092      	lsls	r2, r2, #2
 800600e:	4413      	add	r3, r2
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	b2da      	uxtb	r2, r3
 8006014:	4b58      	ldr	r3, [pc, #352]	; (8006178 <statemachine+0x1450>)
 8006016:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	b2db      	uxtb	r3, r3
 8006020:	4413      	add	r3, r2
 8006022:	b2da      	uxtb	r2, r3
 8006024:	4b56      	ldr	r3, [pc, #344]	; (8006180 <statemachine+0x1458>)
 8006026:	701a      	strb	r2, [r3, #0]
						SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8006028:	4b53      	ldr	r3, [pc, #332]	; (8006178 <statemachine+0x1450>)
 800602a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800602e:	f003 030f 	and.w	r3, r3, #15
 8006032:	b2db      	uxtb	r3, r3
 8006034:	461a      	mov	r2, r3
 8006036:	0092      	lsls	r2, r2, #2
 8006038:	4413      	add	r3, r2
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	b2da      	uxtb	r2, r3
 800603e:	4b4e      	ldr	r3, [pc, #312]	; (8006178 <statemachine+0x1450>)
 8006040:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	b2db      	uxtb	r3, r3
 800604a:	4413      	add	r3, r2
 800604c:	b2da      	uxtb	r2, r3
 800604e:	4b4d      	ldr	r3, [pc, #308]	; (8006184 <statemachine+0x145c>)
 8006050:	701a      	strb	r2, [r3, #0]





				  switch(balisestate){
 8006052:	4b4d      	ldr	r3, [pc, #308]	; (8006188 <statemachine+0x1460>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b02      	cmp	r3, #2
 8006058:	f000 8236 	beq.w	80064c8 <statemachine+0x17a0>
 800605c:	2b02      	cmp	r3, #2
 800605e:	f301 808c 	bgt.w	800717a <statemachine+0x2452>
 8006062:	2b00      	cmp	r3, #0
 8006064:	d004      	beq.n	8006070 <statemachine+0x1348>
 8006066:	2b01      	cmp	r3, #1
 8006068:	f000 809e 	beq.w	80061a8 <statemachine+0x1480>
					  				 									 									  	}

				  }


				  break;
 800606c:	f001 b885 	b.w	800717a <statemachine+0x2452>
					  ssd1306_SetCursor(32,32);
 8006070:	2120      	movs	r1, #32
 8006072:	2020      	movs	r0, #32
 8006074:	f7fe f9f4 	bl	8004460 <ssd1306_SetCursor>
					  ssd1306_WriteString("Tracker",Font_6x8,White);
 8006078:	4a44      	ldr	r2, [pc, #272]	; (800618c <statemachine+0x1464>)
 800607a:	2301      	movs	r3, #1
 800607c:	ca06      	ldmia	r2, {r1, r2}
 800607e:	4844      	ldr	r0, [pc, #272]	; (8006190 <statemachine+0x1468>)
 8006080:	f7fe f9c8 	bl	8004414 <ssd1306_WriteString>
					  snprintf((char *)bufferscreen,50, "off=%d",pageoffset);
 8006084:	4b43      	ldr	r3, [pc, #268]	; (8006194 <statemachine+0x146c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a43      	ldr	r2, [pc, #268]	; (8006198 <statemachine+0x1470>)
 800608a:	2132      	movs	r1, #50	; 0x32
 800608c:	4832      	ldr	r0, [pc, #200]	; (8006158 <statemachine+0x1430>)
 800608e:	f016 fe69 	bl	801cd64 <sniprintf>
					  ssd1306_SetCursor(32,40);
 8006092:	2128      	movs	r1, #40	; 0x28
 8006094:	2020      	movs	r0, #32
 8006096:	f7fe f9e3 	bl	8004460 <ssd1306_SetCursor>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 800609a:	4a3c      	ldr	r2, [pc, #240]	; (800618c <statemachine+0x1464>)
 800609c:	2301      	movs	r3, #1
 800609e:	ca06      	ldmia	r2, {r1, r2}
 80060a0:	482d      	ldr	r0, [pc, #180]	; (8006158 <statemachine+0x1430>)
 80060a2:	f7fe f9b7 	bl	8004414 <ssd1306_WriteString>
					  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 80060a6:	4b3d      	ldr	r3, [pc, #244]	; (800619c <statemachine+0x1474>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a3d      	ldr	r2, [pc, #244]	; (80061a0 <statemachine+0x1478>)
 80060ac:	2132      	movs	r1, #50	; 0x32
 80060ae:	482a      	ldr	r0, [pc, #168]	; (8006158 <statemachine+0x1430>)
 80060b0:	f016 fe58 	bl	801cd64 <sniprintf>
					  ssd1306_SetCursor(32,48);
 80060b4:	2130      	movs	r1, #48	; 0x30
 80060b6:	2020      	movs	r0, #32
 80060b8:	f7fe f9d2 	bl	8004460 <ssd1306_SetCursor>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80060bc:	4a33      	ldr	r2, [pc, #204]	; (800618c <statemachine+0x1464>)
 80060be:	2301      	movs	r3, #1
 80060c0:	ca06      	ldmia	r2, {r1, r2}
 80060c2:	4825      	ldr	r0, [pc, #148]	; (8006158 <statemachine+0x1430>)
 80060c4:	f7fe f9a6 	bl	8004414 <ssd1306_WriteString>
					  if(BTN_B>=1){
 80060c8:	4b28      	ldr	r3, [pc, #160]	; (800616c <statemachine+0x1444>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	dd0e      	ble.n	80060ee <statemachine+0x13c6>
						balisestate++;
 80060d0:	4b2d      	ldr	r3, [pc, #180]	; (8006188 <statemachine+0x1460>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	3301      	adds	r3, #1
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	4b2b      	ldr	r3, [pc, #172]	; (8006188 <statemachine+0x1460>)
 80060da:	701a      	strb	r2, [r3, #0]
						BTN_B=0;
 80060dc:	4b23      	ldr	r3, [pc, #140]	; (800616c <statemachine+0x1444>)
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]
						BTN_A=0;
 80060e2:	4b20      	ldr	r3, [pc, #128]	; (8006164 <statemachine+0x143c>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim17);
 80060e8:	482e      	ldr	r0, [pc, #184]	; (80061a4 <statemachine+0x147c>)
 80060ea:	f009 febb 	bl	800fe64 <HAL_TIM_Base_Start_IT>
					  if(BTN_A>=1){
 80060ee:	4b1d      	ldr	r3, [pc, #116]	; (8006164 <statemachine+0x143c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	dd0e      	ble.n	8006114 <statemachine+0x13ec>
					  				  			 	state++;
 80060f6:	4b1c      	ldr	r3, [pc, #112]	; (8006168 <statemachine+0x1440>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	3301      	adds	r3, #1
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	4b1a      	ldr	r3, [pc, #104]	; (8006168 <statemachine+0x1440>)
 8006100:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 8006102:	4b18      	ldr	r3, [pc, #96]	; (8006164 <statemachine+0x143c>)
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 8006108:	4b18      	ldr	r3, [pc, #96]	; (800616c <statemachine+0x1444>)
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
					  				  			 	settimeen=0;
 800610e:	4b19      	ldr	r3, [pc, #100]	; (8006174 <statemachine+0x144c>)
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]
					  if(BTN_A_LONG>=1){
 8006114:	4b16      	ldr	r3, [pc, #88]	; (8006170 <statemachine+0x1448>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f340 8227 	ble.w	800656c <statemachine+0x1844>
					  				 									 									  			 	state--;
 800611e:	4b12      	ldr	r3, [pc, #72]	; (8006168 <statemachine+0x1440>)
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	3b01      	subs	r3, #1
 8006124:	b2da      	uxtb	r2, r3
 8006126:	4b10      	ldr	r3, [pc, #64]	; (8006168 <statemachine+0x1440>)
 8006128:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 800612a:	4b0e      	ldr	r3, [pc, #56]	; (8006164 <statemachine+0x143c>)
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 8006130:	4b0e      	ldr	r3, [pc, #56]	; (800616c <statemachine+0x1444>)
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 8006136:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <statemachine+0x1448>)
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]
					  break;
 800613c:	e216      	b.n	800656c <statemachine+0x1844>
 800613e:	bf00      	nop
 8006140:	20000c60 	.word	0x20000c60
 8006144:	476a6000 	.word	0x476a6000
 8006148:	20000c58 	.word	0x20000c58
 800614c:	447a0000 	.word	0x447a0000
 8006150:	20000c54 	.word	0x20000c54
 8006154:	0802186c 	.word	0x0802186c
 8006158:	20000ad8 	.word	0x20000ad8
 800615c:	2000001c 	.word	0x2000001c
 8006160:	08021878 	.word	0x08021878
 8006164:	20000878 	.word	0x20000878
 8006168:	200005e8 	.word	0x200005e8
 800616c:	2000087c 	.word	0x2000087c
 8006170:	20000cc0 	.word	0x20000cc0
 8006174:	20000ca8 	.word	0x20000ca8
 8006178:	20000838 	.word	0x20000838
 800617c:	20000ca5 	.word	0x20000ca5
 8006180:	20000ca6 	.word	0x20000ca6
 8006184:	20000ca4 	.word	0x20000ca4
 8006188:	200005ee 	.word	0x200005ee
 800618c:	20000014 	.word	0x20000014
 8006190:	08021880 	.word	0x08021880
 8006194:	20000ab4 	.word	0x20000ab4
 8006198:	08021888 	.word	0x08021888
 800619c:	20000ab8 	.word	0x20000ab8
 80061a0:	08021890 	.word	0x08021890
 80061a4:	20001364 	.word	0x20001364
					  erasetime=HAL_GetTick();
 80061a8:	f002 f85c 	bl	8008264 <HAL_GetTick>
 80061ac:	4603      	mov	r3, r0
 80061ae:	461a      	mov	r2, r3
 80061b0:	4bab      	ldr	r3, [pc, #684]	; (8006460 <statemachine+0x1738>)
 80061b2:	601a      	str	r2, [r3, #0]
					  if(pagenumber+1>=MAX_WRITE_PAGE){
 80061b4:	4bab      	ldr	r3, [pc, #684]	; (8006464 <statemachine+0x173c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f246 32fd 	movw	r2, #25597	; 0x63fd
 80061bc:	4293      	cmp	r3, r2
 80061be:	dd05      	ble.n	80061cc <statemachine+0x14a4>
						  HAL_TIM_Base_Stop_IT(&htim17);
 80061c0:	48a9      	ldr	r0, [pc, #676]	; (8006468 <statemachine+0x1740>)
 80061c2:	f009 fe9d 	bl	800ff00 <HAL_TIM_Base_Stop_IT>
						  balisestate=2;
 80061c6:	4ba9      	ldr	r3, [pc, #676]	; (800646c <statemachine+0x1744>)
 80061c8:	2202      	movs	r2, #2
 80061ca:	701a      	strb	r2, [r3, #0]
					  if(enablewrite==1){
 80061cc:	4ba8      	ldr	r3, [pc, #672]	; (8006470 <statemachine+0x1748>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	f040 80b0 	bne.w	8006336 <statemachine+0x160e>
						  oldlat=myData.latitude;
 80061d6:	4ba7      	ldr	r3, [pc, #668]	; (8006474 <statemachine+0x174c>)
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	49a6      	ldr	r1, [pc, #664]	; (8006478 <statemachine+0x1750>)
 80061de:	e9c1 2300 	strd	r2, r3, [r1]
						  oldlong=myData.longitude;
 80061e2:	4ba4      	ldr	r3, [pc, #656]	; (8006474 <statemachine+0x174c>)
 80061e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80061e8:	49a4      	ldr	r1, [pc, #656]	; (800647c <statemachine+0x1754>)
 80061ea:	e9c1 2300 	strd	r2, r3, [r1]
						  nmea_parse(&myData, DataBuffer);
 80061ee:	49a4      	ldr	r1, [pc, #656]	; (8006480 <statemachine+0x1758>)
 80061f0:	48a0      	ldr	r0, [pc, #640]	; (8006474 <statemachine+0x174c>)
 80061f2:	f7fd fa5b 	bl	80036ac <nmea_parse>
						  if(distancecalc(oldlat, myData.latitude,oldlong, myData.longitude) > 139.0){//correspond à 500kmh pendant 1sec
 80061f6:	4ba0      	ldr	r3, [pc, #640]	; (8006478 <statemachine+0x1750>)
 80061f8:	ed93 7b00 	vldr	d7, [r3]
 80061fc:	4b9d      	ldr	r3, [pc, #628]	; (8006474 <statemachine+0x174c>)
 80061fe:	ed93 6b00 	vldr	d6, [r3]
 8006202:	4b9e      	ldr	r3, [pc, #632]	; (800647c <statemachine+0x1754>)
 8006204:	ed93 5b00 	vldr	d5, [r3]
 8006208:	4b9a      	ldr	r3, [pc, #616]	; (8006474 <statemachine+0x174c>)
 800620a:	ed93 4b04 	vldr	d4, [r3, #16]
 800620e:	eeb0 3a44 	vmov.f32	s6, s8
 8006212:	eef0 3a64 	vmov.f32	s7, s9
 8006216:	eeb0 2a45 	vmov.f32	s4, s10
 800621a:	eef0 2a65 	vmov.f32	s5, s11
 800621e:	eeb0 1a46 	vmov.f32	s2, s12
 8006222:	eef0 1a66 	vmov.f32	s3, s13
 8006226:	eeb0 0a47 	vmov.f32	s0, s14
 800622a:	eef0 0a67 	vmov.f32	s1, s15
 800622e:	f7fd faef 	bl	8003810 <distancecalc>
 8006232:	ec51 0b10 	vmov	r0, r1, d0
 8006236:	a388      	add	r3, pc, #544	; (adr r3, 8006458 <statemachine+0x1730>)
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	f7fa fc44 	bl	8000ac8 <__aeabi_dcmpgt>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d02b      	beq.n	800629e <statemachine+0x1576>
							  myData.latitude=oldlat;
 8006246:	4b8c      	ldr	r3, [pc, #560]	; (8006478 <statemachine+0x1750>)
 8006248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624c:	4989      	ldr	r1, [pc, #548]	; (8006474 <statemachine+0x174c>)
 800624e:	e9c1 2300 	strd	r2, r3, [r1]
							  myData.longitude=oldlong;
 8006252:	4b8a      	ldr	r3, [pc, #552]	; (800647c <statemachine+0x1754>)
 8006254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006258:	4986      	ldr	r1, [pc, #536]	; (8006474 <statemachine+0x174c>)
 800625a:	e9c1 2304 	strd	r2, r3, [r1, #16]
							  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 800625e:	4b89      	ldr	r3, [pc, #548]	; (8006484 <statemachine+0x175c>)
 8006260:	edd3 7a00 	vldr	s15, [r3]
 8006264:	4b88      	ldr	r3, [pc, #544]	; (8006488 <statemachine+0x1760>)
 8006266:	ed93 7a00 	vldr	s14, [r3]
 800626a:	4b82      	ldr	r3, [pc, #520]	; (8006474 <statemachine+0x174c>)
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	4a81      	ldr	r2, [pc, #516]	; (8006474 <statemachine+0x174c>)
 8006270:	edd2 6a08 	vldr	s13, [r2, #32]
 8006274:	eeb0 1a66 	vmov.f32	s2, s13
 8006278:	461a      	mov	r2, r3
 800627a:	497e      	ldr	r1, [pc, #504]	; (8006474 <statemachine+0x174c>)
 800627c:	eef0 0a47 	vmov.f32	s1, s14
 8006280:	eeb0 0a67 	vmov.f32	s0, s15
 8006284:	4881      	ldr	r0, [pc, #516]	; (800648c <statemachine+0x1764>)
 8006286:	f7fd fd43 	bl	8003d10 <csvframe>
 800628a:	4603      	mov	r3, r0
 800628c:	4a80      	ldr	r2, [pc, #512]	; (8006490 <statemachine+0x1768>)
 800628e:	6013      	str	r3, [r2, #0]
							  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8006290:	4b7f      	ldr	r3, [pc, #508]	; (8006490 <statemachine+0x1768>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4619      	mov	r1, r3
 8006296:	487d      	ldr	r0, [pc, #500]	; (800648c <statemachine+0x1764>)
 8006298:	f7fd fe70 	bl	8003f7c <writebuffertoflash>
 800629c:	e048      	b.n	8006330 <statemachine+0x1608>
							  distanceparcouru=distanceparcouru + distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 800629e:	4b76      	ldr	r3, [pc, #472]	; (8006478 <statemachine+0x1750>)
 80062a0:	ed93 7b00 	vldr	d7, [r3]
 80062a4:	4b73      	ldr	r3, [pc, #460]	; (8006474 <statemachine+0x174c>)
 80062a6:	ed93 6b00 	vldr	d6, [r3]
 80062aa:	4b74      	ldr	r3, [pc, #464]	; (800647c <statemachine+0x1754>)
 80062ac:	ed93 5b00 	vldr	d5, [r3]
 80062b0:	4b70      	ldr	r3, [pc, #448]	; (8006474 <statemachine+0x174c>)
 80062b2:	ed93 4b04 	vldr	d4, [r3, #16]
 80062b6:	eeb0 3a44 	vmov.f32	s6, s8
 80062ba:	eef0 3a64 	vmov.f32	s7, s9
 80062be:	eeb0 2a45 	vmov.f32	s4, s10
 80062c2:	eef0 2a65 	vmov.f32	s5, s11
 80062c6:	eeb0 1a46 	vmov.f32	s2, s12
 80062ca:	eef0 1a66 	vmov.f32	s3, s13
 80062ce:	eeb0 0a47 	vmov.f32	s0, s14
 80062d2:	eef0 0a67 	vmov.f32	s1, s15
 80062d6:	f7fd fa9b 	bl	8003810 <distancecalc>
 80062da:	ec51 0b10 	vmov	r0, r1, d0
 80062de:	4b6d      	ldr	r3, [pc, #436]	; (8006494 <statemachine+0x176c>)
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	f7f9 ffaa 	bl	800023c <__adddf3>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4969      	ldr	r1, [pc, #420]	; (8006494 <statemachine+0x176c>)
 80062ee:	e9c1 2300 	strd	r2, r3, [r1]
							  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 80062f2:	4b64      	ldr	r3, [pc, #400]	; (8006484 <statemachine+0x175c>)
 80062f4:	edd3 7a00 	vldr	s15, [r3]
 80062f8:	4b63      	ldr	r3, [pc, #396]	; (8006488 <statemachine+0x1760>)
 80062fa:	ed93 7a00 	vldr	s14, [r3]
 80062fe:	4b5d      	ldr	r3, [pc, #372]	; (8006474 <statemachine+0x174c>)
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	4a5c      	ldr	r2, [pc, #368]	; (8006474 <statemachine+0x174c>)
 8006304:	edd2 6a08 	vldr	s13, [r2, #32]
 8006308:	eeb0 1a66 	vmov.f32	s2, s13
 800630c:	461a      	mov	r2, r3
 800630e:	4959      	ldr	r1, [pc, #356]	; (8006474 <statemachine+0x174c>)
 8006310:	eef0 0a47 	vmov.f32	s1, s14
 8006314:	eeb0 0a67 	vmov.f32	s0, s15
 8006318:	485c      	ldr	r0, [pc, #368]	; (800648c <statemachine+0x1764>)
 800631a:	f7fd fcf9 	bl	8003d10 <csvframe>
 800631e:	4603      	mov	r3, r0
 8006320:	4a5b      	ldr	r2, [pc, #364]	; (8006490 <statemachine+0x1768>)
 8006322:	6013      	str	r3, [r2, #0]
							  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8006324:	4b5a      	ldr	r3, [pc, #360]	; (8006490 <statemachine+0x1768>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4619      	mov	r1, r3
 800632a:	4858      	ldr	r0, [pc, #352]	; (800648c <statemachine+0x1764>)
 800632c:	f7fd fe26 	bl	8003f7c <writebuffertoflash>
						  enablewrite=0;
 8006330:	4b4f      	ldr	r3, [pc, #316]	; (8006470 <statemachine+0x1748>)
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
					  if(doubledonnee==0){
 8006336:	4b58      	ldr	r3, [pc, #352]	; (8006498 <statemachine+0x1770>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d111      	bne.n	8006362 <statemachine+0x163a>
					 	ssd1306_SetCursor(32,32);
 800633e:	2120      	movs	r1, #32
 8006340:	2020      	movs	r0, #32
 8006342:	f7fe f88d 	bl	8004460 <ssd1306_SetCursor>
					 	snprintf((char *)bufferscreen,50,"p=%d",pagenumber);
 8006346:	4b47      	ldr	r3, [pc, #284]	; (8006464 <statemachine+0x173c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a54      	ldr	r2, [pc, #336]	; (800649c <statemachine+0x1774>)
 800634c:	2132      	movs	r1, #50	; 0x32
 800634e:	4854      	ldr	r0, [pc, #336]	; (80064a0 <statemachine+0x1778>)
 8006350:	f016 fd08 	bl	801cd64 <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8006354:	4a53      	ldr	r2, [pc, #332]	; (80064a4 <statemachine+0x177c>)
 8006356:	2301      	movs	r3, #1
 8006358:	ca06      	ldmia	r2, {r1, r2}
 800635a:	4851      	ldr	r0, [pc, #324]	; (80064a0 <statemachine+0x1778>)
 800635c:	f7fe f85a 	bl	8004414 <ssd1306_WriteString>
 8006360:	e013      	b.n	800638a <statemachine+0x1662>
					 	ssd1306_SetCursor(32,32);
 8006362:	2120      	movs	r1, #32
 8006364:	2020      	movs	r0, #32
 8006366:	f7fe f87b 	bl	8004460 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50,"d=%0.1lfm",distanceparcouru);
 800636a:	4b4a      	ldr	r3, [pc, #296]	; (8006494 <statemachine+0x176c>)
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	e9cd 2300 	strd	r2, r3, [sp]
 8006374:	4a4c      	ldr	r2, [pc, #304]	; (80064a8 <statemachine+0x1780>)
 8006376:	2132      	movs	r1, #50	; 0x32
 8006378:	4849      	ldr	r0, [pc, #292]	; (80064a0 <statemachine+0x1778>)
 800637a:	f016 fcf3 	bl	801cd64 <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 800637e:	4a49      	ldr	r2, [pc, #292]	; (80064a4 <statemachine+0x177c>)
 8006380:	2301      	movs	r3, #1
 8006382:	ca06      	ldmia	r2, {r1, r2}
 8006384:	4846      	ldr	r0, [pc, #280]	; (80064a0 <statemachine+0x1778>)
 8006386:	f7fe f845 	bl	8004414 <ssd1306_WriteString>
					 	ssd1306_SetCursor(32,42);
 800638a:	212a      	movs	r1, #42	; 0x2a
 800638c:	2020      	movs	r0, #32
 800638e:	f7fe f867 	bl	8004460 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 8006392:	4b38      	ldr	r3, [pc, #224]	; (8006474 <statemachine+0x174c>)
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	4a45      	ldr	r2, [pc, #276]	; (80064ac <statemachine+0x1784>)
 8006398:	2132      	movs	r1, #50	; 0x32
 800639a:	4841      	ldr	r0, [pc, #260]	; (80064a0 <statemachine+0x1778>)
 800639c:	f016 fce2 	bl	801cd64 <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80063a0:	4a43      	ldr	r2, [pc, #268]	; (80064b0 <statemachine+0x1788>)
 80063a2:	2301      	movs	r3, #1
 80063a4:	ca06      	ldmia	r2, {r1, r2}
 80063a6:	483e      	ldr	r0, [pc, #248]	; (80064a0 <statemachine+0x1778>)
 80063a8:	f7fe f834 	bl	8004414 <ssd1306_WriteString>
					 	batterygauge(vbat,34, 50,1);
 80063ac:	4b36      	ldr	r3, [pc, #216]	; (8006488 <statemachine+0x1760>)
 80063ae:	edd3 7a00 	vldr	s15, [r3]
 80063b2:	2201      	movs	r2, #1
 80063b4:	2132      	movs	r1, #50	; 0x32
 80063b6:	2022      	movs	r0, #34	; 0x22
 80063b8:	eeb0 0a67 	vmov.f32	s0, s15
 80063bc:	f7fe fa6c 	bl	8004898 <batterygauge>
					 	ssd1306_SetCursor(60,50);
 80063c0:	2132      	movs	r1, #50	; 0x32
 80063c2:	203c      	movs	r0, #60	; 0x3c
 80063c4:	f7fe f84c 	bl	8004460 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 80063c8:	4b2f      	ldr	r3, [pc, #188]	; (8006488 <statemachine+0x1760>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fa f893 	bl	80004f8 <__aeabi_f2d>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	e9cd 2300 	strd	r2, r3, [sp]
 80063da:	4a36      	ldr	r2, [pc, #216]	; (80064b4 <statemachine+0x178c>)
 80063dc:	2132      	movs	r1, #50	; 0x32
 80063de:	4830      	ldr	r0, [pc, #192]	; (80064a0 <statemachine+0x1778>)
 80063e0:	f016 fcc0 	bl	801cd64 <sniprintf>
					 	if(cptdoubledonnee==3){
 80063e4:	4b34      	ldr	r3, [pc, #208]	; (80064b8 <statemachine+0x1790>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d108      	bne.n	80063fe <statemachine+0x16d6>
					 	  		doubledonnee=1-doubledonnee;
 80063ec:	4b2a      	ldr	r3, [pc, #168]	; (8006498 <statemachine+0x1770>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f1c3 0301 	rsb	r3, r3, #1
 80063f4:	4a28      	ldr	r2, [pc, #160]	; (8006498 <statemachine+0x1770>)
 80063f6:	6013      	str	r3, [r2, #0]
					 	  		cptdoubledonnee=0;
 80063f8:	4b2f      	ldr	r3, [pc, #188]	; (80064b8 <statemachine+0x1790>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]
					 	erasetime=HAL_GetTick()-erasetime;
 80063fe:	f001 ff31 	bl	8008264 <HAL_GetTick>
 8006402:	4603      	mov	r3, r0
 8006404:	4a16      	ldr	r2, [pc, #88]	; (8006460 <statemachine+0x1738>)
 8006406:	6812      	ldr	r2, [r2, #0]
 8006408:	1a9b      	subs	r3, r3, r2
 800640a:	461a      	mov	r2, r3
 800640c:	4b14      	ldr	r3, [pc, #80]	; (8006460 <statemachine+0x1738>)
 800640e:	601a      	str	r2, [r3, #0]
					  if(BTN_B>=1){
 8006410:	4b2a      	ldr	r3, [pc, #168]	; (80064bc <statemachine+0x1794>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	dd0e      	ble.n	8006436 <statemachine+0x170e>
					  						  balisestate--;
 8006418:	4b14      	ldr	r3, [pc, #80]	; (800646c <statemachine+0x1744>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	3b01      	subs	r3, #1
 800641e:	b2da      	uxtb	r2, r3
 8006420:	4b12      	ldr	r3, [pc, #72]	; (800646c <statemachine+0x1744>)
 8006422:	701a      	strb	r2, [r3, #0]
					  						  BTN_B=0;
 8006424:	4b25      	ldr	r3, [pc, #148]	; (80064bc <statemachine+0x1794>)
 8006426:	2200      	movs	r2, #0
 8006428:	601a      	str	r2, [r3, #0]
					  						  BTN_A=0;
 800642a:	4b25      	ldr	r3, [pc, #148]	; (80064c0 <statemachine+0x1798>)
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]
					  						  HAL_TIM_Base_Stop_IT(&htim17);
 8006430:	480d      	ldr	r0, [pc, #52]	; (8006468 <statemachine+0x1740>)
 8006432:	f009 fd65 	bl	800ff00 <HAL_TIM_Base_Stop_IT>
					  if(BTN_B_LONG>=1){
 8006436:	4b23      	ldr	r3, [pc, #140]	; (80064c4 <statemachine+0x179c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	f340 8099 	ble.w	8006572 <statemachine+0x184a>
						distanceparcouru=0;
 8006440:	4914      	ldr	r1, [pc, #80]	; (8006494 <statemachine+0x176c>)
 8006442:	f04f 0200 	mov.w	r2, #0
 8006446:	f04f 0300 	mov.w	r3, #0
 800644a:	e9c1 2300 	strd	r2, r3, [r1]
					  	BTN_B_LONG=0;
 800644e:	4b1d      	ldr	r3, [pc, #116]	; (80064c4 <statemachine+0x179c>)
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]
					  break;
 8006454:	e08d      	b.n	8006572 <statemachine+0x184a>
 8006456:	bf00      	nop
 8006458:	00000000 	.word	0x00000000
 800645c:	40616000 	.word	0x40616000
 8006460:	20000c6c 	.word	0x20000c6c
 8006464:	20000ab8 	.word	0x20000ab8
 8006468:	20001364 	.word	0x20001364
 800646c:	200005ee 	.word	0x200005ee
 8006470:	20000ca0 	.word	0x20000ca0
 8006474:	20000838 	.word	0x20000838
 8006478:	20000c90 	.word	0x20000c90
 800647c:	20000c98 	.word	0x20000c98
 8006480:	20000638 	.word	0x20000638
 8006484:	200008a8 	.word	0x200008a8
 8006488:	200008b0 	.word	0x200008b0
 800648c:	200008b4 	.word	0x200008b4
 8006490:	20000c68 	.word	0x20000c68
 8006494:	20000c88 	.word	0x20000c88
 8006498:	20000c7c 	.word	0x20000c7c
 800649c:	08021898 	.word	0x08021898
 80064a0:	20000ad8 	.word	0x20000ad8
 80064a4:	2000001c 	.word	0x2000001c
 80064a8:	080218a0 	.word	0x080218a0
 80064ac:	080218ac 	.word	0x080218ac
 80064b0:	20000014 	.word	0x20000014
 80064b4:	080218b4 	.word	0x080218b4
 80064b8:	20000c80 	.word	0x20000c80
 80064bc:	2000087c 	.word	0x2000087c
 80064c0:	20000878 	.word	0x20000878
 80064c4:	20000cbc 	.word	0x20000cbc
					  ssd1306_SetCursor(32,32);
 80064c8:	2120      	movs	r1, #32
 80064ca:	2020      	movs	r0, #32
 80064cc:	f7fd ffc8 	bl	8004460 <ssd1306_SetCursor>
					  ssd1306_WriteString("fin de",Font_6x8,White);
 80064d0:	4aa2      	ldr	r2, [pc, #648]	; (800675c <statemachine+0x1a34>)
 80064d2:	2301      	movs	r3, #1
 80064d4:	ca06      	ldmia	r2, {r1, r2}
 80064d6:	48a2      	ldr	r0, [pc, #648]	; (8006760 <statemachine+0x1a38>)
 80064d8:	f7fd ff9c 	bl	8004414 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 80064dc:	2128      	movs	r1, #40	; 0x28
 80064de:	2020      	movs	r0, #32
 80064e0:	f7fd ffbe 	bl	8004460 <ssd1306_SetCursor>
					  ssd1306_WriteString("memoire",Font_6x8,White);
 80064e4:	4a9d      	ldr	r2, [pc, #628]	; (800675c <statemachine+0x1a34>)
 80064e6:	2301      	movs	r3, #1
 80064e8:	ca06      	ldmia	r2, {r1, r2}
 80064ea:	489e      	ldr	r0, [pc, #632]	; (8006764 <statemachine+0x1a3c>)
 80064ec:	f7fd ff92 	bl	8004414 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,48);
 80064f0:	2130      	movs	r1, #48	; 0x30
 80064f2:	2020      	movs	r0, #32
 80064f4:	f7fd ffb4 	bl	8004460 <ssd1306_SetCursor>
					  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 80064f8:	4b9b      	ldr	r3, [pc, #620]	; (8006768 <statemachine+0x1a40>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	4b9b      	ldr	r3, [pc, #620]	; (800676c <statemachine+0x1a44>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	4613      	mov	r3, r2
 8006504:	4a9a      	ldr	r2, [pc, #616]	; (8006770 <statemachine+0x1a48>)
 8006506:	2132      	movs	r1, #50	; 0x32
 8006508:	489a      	ldr	r0, [pc, #616]	; (8006774 <statemachine+0x1a4c>)
 800650a:	f016 fc2b 	bl	801cd64 <sniprintf>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 800650e:	4a93      	ldr	r2, [pc, #588]	; (800675c <statemachine+0x1a34>)
 8006510:	2301      	movs	r3, #1
 8006512:	ca06      	ldmia	r2, {r1, r2}
 8006514:	4897      	ldr	r0, [pc, #604]	; (8006774 <statemachine+0x1a4c>)
 8006516:	f7fd ff7d 	bl	8004414 <ssd1306_WriteString>
					  if(BTN_A>=1){
 800651a:	4b97      	ldr	r3, [pc, #604]	; (8006778 <statemachine+0x1a50>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	dd0e      	ble.n	8006540 <statemachine+0x1818>
					  				  			 	state++;
 8006522:	4b96      	ldr	r3, [pc, #600]	; (800677c <statemachine+0x1a54>)
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	3301      	adds	r3, #1
 8006528:	b2da      	uxtb	r2, r3
 800652a:	4b94      	ldr	r3, [pc, #592]	; (800677c <statemachine+0x1a54>)
 800652c:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 800652e:	4b92      	ldr	r3, [pc, #584]	; (8006778 <statemachine+0x1a50>)
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 8006534:	4b92      	ldr	r3, [pc, #584]	; (8006780 <statemachine+0x1a58>)
 8006536:	2200      	movs	r2, #0
 8006538:	601a      	str	r2, [r3, #0]
					  				  			settimeen=0;
 800653a:	4b92      	ldr	r3, [pc, #584]	; (8006784 <statemachine+0x1a5c>)
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
					  if(BTN_A_LONG>=1){
 8006540:	4b91      	ldr	r3, [pc, #580]	; (8006788 <statemachine+0x1a60>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	f340 8618 	ble.w	800717a <statemachine+0x2452>
					  				 									 									  			 	state--;
 800654a:	4b8c      	ldr	r3, [pc, #560]	; (800677c <statemachine+0x1a54>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	3b01      	subs	r3, #1
 8006550:	b2da      	uxtb	r2, r3
 8006552:	4b8a      	ldr	r3, [pc, #552]	; (800677c <statemachine+0x1a54>)
 8006554:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 8006556:	4b88      	ldr	r3, [pc, #544]	; (8006778 <statemachine+0x1a50>)
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 800655c:	4b88      	ldr	r3, [pc, #544]	; (8006780 <statemachine+0x1a58>)
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 8006562:	4b89      	ldr	r3, [pc, #548]	; (8006788 <statemachine+0x1a60>)
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]
				  break;
 8006568:	f000 be07 	b.w	800717a <statemachine+0x2452>
					  break;
 800656c:	bf00      	nop
 800656e:	f000 be04 	b.w	800717a <statemachine+0x2452>
					  break;
 8006572:	bf00      	nop
				  break;
 8006574:	f000 be01 	b.w	800717a <statemachine+0x2452>


			  case STATE_USB:
				  ssd1306_Fill(Black);
 8006578:	2000      	movs	r0, #0
 800657a:	f7fd fe2f 	bl	80041dc <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 800657e:	2120      	movs	r1, #32
 8006580:	2020      	movs	r0, #32
 8006582:	f7fd ff6d 	bl	8004460 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8006586:	4a75      	ldr	r2, [pc, #468]	; (800675c <statemachine+0x1a34>)
 8006588:	2301      	movs	r3, #1
 800658a:	ca06      	ldmia	r2, {r1, r2}
 800658c:	487f      	ldr	r0, [pc, #508]	; (800678c <statemachine+0x1a64>)
 800658e:	f7fd ff41 	bl	8004414 <ssd1306_WriteString>
				  switch(usbstate){
 8006592:	4b7f      	ldr	r3, [pc, #508]	; (8006790 <statemachine+0x1a68>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b02      	cmp	r3, #2
 8006598:	f000 8162 	beq.w	8006860 <statemachine+0x1b38>
 800659c:	2b02      	cmp	r3, #2
 800659e:	f300 85ee 	bgt.w	800717e <statemachine+0x2456>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <statemachine+0x1886>
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d043      	beq.n	8006632 <statemachine+0x190a>
				 									 									  			 	BTN_B=0;
				 									 									  			 	BTN_A_LONG=0;
				 									 									  	}
				 					 break;
				 				  }
				  break;
 80065aa:	f000 bde8 	b.w	800717e <statemachine+0x2456>
				 					  ssd1306_SetCursor(32,40);
 80065ae:	2128      	movs	r1, #40	; 0x28
 80065b0:	2020      	movs	r0, #32
 80065b2:	f7fd ff55 	bl	8004460 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 80065b6:	4a69      	ldr	r2, [pc, #420]	; (800675c <statemachine+0x1a34>)
 80065b8:	2301      	movs	r3, #1
 80065ba:	ca06      	ldmia	r2, {r1, r2}
 80065bc:	4875      	ldr	r0, [pc, #468]	; (8006794 <statemachine+0x1a6c>)
 80065be:	f7fd ff29 	bl	8004414 <ssd1306_WriteString>
				 					  usbtransmiten=0;
 80065c2:	4b75      	ldr	r3, [pc, #468]	; (8006798 <statemachine+0x1a70>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 80065c8:	4b6d      	ldr	r3, [pc, #436]	; (8006780 <statemachine+0x1a58>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	dd0b      	ble.n	80065e8 <statemachine+0x18c0>
				 						  usbstate++;
 80065d0:	4b6f      	ldr	r3, [pc, #444]	; (8006790 <statemachine+0x1a68>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	3301      	adds	r3, #1
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	4b6d      	ldr	r3, [pc, #436]	; (8006790 <statemachine+0x1a68>)
 80065da:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 80065dc:	4b68      	ldr	r3, [pc, #416]	; (8006780 <statemachine+0x1a58>)
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 80065e2:	4b65      	ldr	r3, [pc, #404]	; (8006778 <statemachine+0x1a50>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 80065e8:	4b63      	ldr	r3, [pc, #396]	; (8006778 <statemachine+0x1a50>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	dd0b      	ble.n	8006608 <statemachine+0x18e0>
				 						 state++;
 80065f0:	4b62      	ldr	r3, [pc, #392]	; (800677c <statemachine+0x1a54>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	3301      	adds	r3, #1
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	4b60      	ldr	r3, [pc, #384]	; (800677c <statemachine+0x1a54>)
 80065fa:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 80065fc:	4b5e      	ldr	r3, [pc, #376]	; (8006778 <statemachine+0x1a50>)
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8006602:	4b5f      	ldr	r3, [pc, #380]	; (8006780 <statemachine+0x1a58>)
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8006608:	4b5f      	ldr	r3, [pc, #380]	; (8006788 <statemachine+0x1a60>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	f340 8207 	ble.w	8006a20 <statemachine+0x1cf8>
				 									 									 									  			 	state--;
 8006612:	4b5a      	ldr	r3, [pc, #360]	; (800677c <statemachine+0x1a54>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	3b01      	subs	r3, #1
 8006618:	b2da      	uxtb	r2, r3
 800661a:	4b58      	ldr	r3, [pc, #352]	; (800677c <statemachine+0x1a54>)
 800661c:	701a      	strb	r2, [r3, #0]
				 									 									 									  			 	BTN_A=0;
 800661e:	4b56      	ldr	r3, [pc, #344]	; (8006778 <statemachine+0x1a50>)
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_B=0;
 8006624:	4b56      	ldr	r3, [pc, #344]	; (8006780 <statemachine+0x1a58>)
 8006626:	2200      	movs	r2, #0
 8006628:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_A_LONG=0;
 800662a:	4b57      	ldr	r3, [pc, #348]	; (8006788 <statemachine+0x1a60>)
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
				 					  break;
 8006630:	e1f6      	b.n	8006a20 <statemachine+0x1cf8>
				 					 ssd1306_SetCursor(32,40);
 8006632:	2128      	movs	r1, #40	; 0x28
 8006634:	2020      	movs	r0, #32
 8006636:	f7fd ff13 	bl	8004460 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 800663a:	4a48      	ldr	r2, [pc, #288]	; (800675c <statemachine+0x1a34>)
 800663c:	2301      	movs	r3, #1
 800663e:	ca06      	ldmia	r2, {r1, r2}
 8006640:	4856      	ldr	r0, [pc, #344]	; (800679c <statemachine+0x1a74>)
 8006642:	f7fd fee7 	bl	8004414 <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,48);
 8006646:	2130      	movs	r1, #48	; 0x30
 8006648:	2020      	movs	r0, #32
 800664a:	f7fd ff09 	bl	8004460 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 800664e:	4a43      	ldr	r2, [pc, #268]	; (800675c <statemachine+0x1a34>)
 8006650:	2301      	movs	r3, #1
 8006652:	ca06      	ldmia	r2, {r1, r2}
 8006654:	4852      	ldr	r0, [pc, #328]	; (80067a0 <statemachine+0x1a78>)
 8006656:	f7fd fedd 	bl	8004414 <ssd1306_WriteString>
				 					if(erasedisplay==1){
 800665a:	4b52      	ldr	r3, [pc, #328]	; (80067a4 <statemachine+0x1a7c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d137      	bne.n	80066d2 <statemachine+0x19aa>
					 					 ssd1306_Fill(Black);
 8006662:	2000      	movs	r0, #0
 8006664:	f7fd fdba 	bl	80041dc <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,32);
 8006668:	2120      	movs	r1, #32
 800666a:	2020      	movs	r0, #32
 800666c:	f7fd fef8 	bl	8004460 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 8006670:	4a3a      	ldr	r2, [pc, #232]	; (800675c <statemachine+0x1a34>)
 8006672:	2301      	movs	r3, #1
 8006674:	ca06      	ldmia	r2, {r1, r2}
 8006676:	4845      	ldr	r0, [pc, #276]	; (800678c <statemachine+0x1a64>)
 8006678:	f7fd fecc 	bl	8004414 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,40);
 800667c:	2128      	movs	r1, #40	; 0x28
 800667e:	2020      	movs	r0, #32
 8006680:	f7fd feee 	bl	8004460 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 8006684:	4a48      	ldr	r2, [pc, #288]	; (80067a8 <statemachine+0x1a80>)
 8006686:	2301      	movs	r3, #1
 8006688:	ca06      	ldmia	r2, {r1, r2}
 800668a:	4848      	ldr	r0, [pc, #288]	; (80067ac <statemachine+0x1a84>)
 800668c:	f7fd fec2 	bl	8004414 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,56);
 8006690:	2138      	movs	r1, #56	; 0x38
 8006692:	2020      	movs	r0, #32
 8006694:	f7fd fee4 	bl	8004460 <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 8006698:	4b45      	ldr	r3, [pc, #276]	; (80067b0 <statemachine+0x1a88>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	ee07 3a90 	vmov	s15, r3
 80066a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066a4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80067b4 <statemachine+0x1a8c>
 80066a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80066ac:	ee16 0a90 	vmov	r0, s13
 80066b0:	f7f9 ff22 	bl	80004f8 <__aeabi_f2d>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	e9cd 2300 	strd	r2, r3, [sp]
 80066bc:	4a3e      	ldr	r2, [pc, #248]	; (80067b8 <statemachine+0x1a90>)
 80066be:	2132      	movs	r1, #50	; 0x32
 80066c0:	482c      	ldr	r0, [pc, #176]	; (8006774 <statemachine+0x1a4c>)
 80066c2:	f016 fb4f 	bl	801cd64 <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80066c6:	4a25      	ldr	r2, [pc, #148]	; (800675c <statemachine+0x1a34>)
 80066c8:	2301      	movs	r3, #1
 80066ca:	ca06      	ldmia	r2, {r1, r2}
 80066cc:	4829      	ldr	r0, [pc, #164]	; (8006774 <statemachine+0x1a4c>)
 80066ce:	f7fd fea1 	bl	8004414 <ssd1306_WriteString>
				 					if(BTN_A>=1){
 80066d2:	4b29      	ldr	r3, [pc, #164]	; (8006778 <statemachine+0x1a50>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f340 80b0 	ble.w	800683c <statemachine+0x1b14>
				 						erasetime=HAL_GetTick();
 80066dc:	f001 fdc2 	bl	8008264 <HAL_GetTick>
 80066e0:	4603      	mov	r3, r0
 80066e2:	461a      	mov	r2, r3
 80066e4:	4b32      	ldr	r3, [pc, #200]	; (80067b0 <statemachine+0x1a88>)
 80066e6:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 80066e8:	2300      	movs	r3, #0
 80066ea:	60bb      	str	r3, [r7, #8]
 80066ec:	e073      	b.n	80067d6 <statemachine+0x1aae>
				 							ssd1306_Fill(Black);
 80066ee:	2000      	movs	r0, #0
 80066f0:	f7fd fd74 	bl	80041dc <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 80066f4:	2120      	movs	r1, #32
 80066f6:	2020      	movs	r0, #32
 80066f8:	f7fd feb2 	bl	8004460 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 80066fc:	4a17      	ldr	r2, [pc, #92]	; (800675c <statemachine+0x1a34>)
 80066fe:	2301      	movs	r3, #1
 8006700:	ca06      	ldmia	r2, {r1, r2}
 8006702:	4822      	ldr	r0, [pc, #136]	; (800678c <statemachine+0x1a64>)
 8006704:	f7fd fe86 	bl	8004414 <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4619      	mov	r1, r3
 800670c:	482b      	ldr	r0, [pc, #172]	; (80067bc <statemachine+0x1a94>)
 800670e:	f012 fd7c 	bl	801920a <SPIF_EraseSector>
				 							if(i>=1){
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	dd55      	ble.n	80067c4 <statemachine+0x1a9c>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2264      	movs	r2, #100	; 0x64
 800671c:	fb02 f303 	mul.w	r3, r2, r3
 8006720:	ee07 3a90 	vmov	s15, r3
 8006724:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006728:	4b10      	ldr	r3, [pc, #64]	; (800676c <statemachine+0x1a44>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	da00      	bge.n	8006732 <statemachine+0x1a0a>
 8006730:	330f      	adds	r3, #15
 8006732:	111b      	asrs	r3, r3, #4
 8006734:	4618      	mov	r0, r3
 8006736:	f7f9 fecd 	bl	80004d4 <__aeabi_i2d>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4610      	mov	r0, r2
 8006740:	4619      	mov	r1, r3
 8006742:	f7fa f9e1 	bl	8000b08 <__aeabi_d2iz>
 8006746:	ee07 0a90 	vmov	s15, r0
 800674a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800674e:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8006752:	eeb0 0a47 	vmov.f32	s0, s14
 8006756:	f7fe fa1b 	bl	8004b90 <percentage>
 800675a:	e037      	b.n	80067cc <statemachine+0x1aa4>
 800675c:	20000014 	.word	0x20000014
 8006760:	080218bc 	.word	0x080218bc
 8006764:	080218c4 	.word	0x080218c4
 8006768:	20000ab4 	.word	0x20000ab4
 800676c:	20000ab8 	.word	0x20000ab8
 8006770:	080218cc 	.word	0x080218cc
 8006774:	20000ad8 	.word	0x20000ad8
 8006778:	20000878 	.word	0x20000878
 800677c:	200005e8 	.word	0x200005e8
 8006780:	2000087c 	.word	0x2000087c
 8006784:	20000ca8 	.word	0x20000ca8
 8006788:	20000cc0 	.word	0x20000cc0
 800678c:	080218d4 	.word	0x080218d4
 8006790:	200005ed 	.word	0x200005ed
 8006794:	080218d8 	.word	0x080218d8
 8006798:	20000c74 	.word	0x20000c74
 800679c:	080218e4 	.word	0x080218e4
 80067a0:	080218ec 	.word	0x080218ec
 80067a4:	20000c70 	.word	0x20000c70
 80067a8:	2000001c 	.word	0x2000001c
 80067ac:	080218f8 	.word	0x080218f8
 80067b0:	20000c6c 	.word	0x20000c6c
 80067b4:	447a0000 	.word	0x447a0000
 80067b8:	080218fc 	.word	0x080218fc
 80067bc:	20000880 	.word	0x20000880
 80067c0:	00000000 	.word	0x00000000
				 								percentage((float) 0);
 80067c4:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 80067c0 <statemachine+0x1a98>
 80067c8:	f7fe f9e2 	bl	8004b90 <percentage>
				 							ssd1306_UpdateScreen();
 80067cc:	f7fd fd1e 	bl	800420c <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	3301      	adds	r3, #1
 80067d4:	60bb      	str	r3, [r7, #8]
 80067d6:	4b95      	ldr	r3, [pc, #596]	; (8006a2c <statemachine+0x1d04>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	da00      	bge.n	80067e0 <statemachine+0x1ab8>
 80067de:	330f      	adds	r3, #15
 80067e0:	111b      	asrs	r3, r3, #4
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7f9 fe76 	bl	80004d4 <__aeabi_i2d>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4610      	mov	r0, r2
 80067ee:	4619      	mov	r1, r3
 80067f0:	f7fa f98a 	bl	8000b08 <__aeabi_d2iz>
 80067f4:	4602      	mov	r2, r0
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	4293      	cmp	r3, r2
 80067fa:	f77f af78 	ble.w	80066ee <statemachine+0x19c6>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 80067fe:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8006802:	488b      	ldr	r0, [pc, #556]	; (8006a30 <statemachine+0x1d08>)
 8006804:	f012 fd01 	bl	801920a <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 8006808:	f001 fd2c 	bl	8008264 <HAL_GetTick>
 800680c:	4603      	mov	r3, r0
 800680e:	4a89      	ldr	r2, [pc, #548]	; (8006a34 <statemachine+0x1d0c>)
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	1a9b      	subs	r3, r3, r2
 8006814:	461a      	mov	r2, r3
 8006816:	4b87      	ldr	r3, [pc, #540]	; (8006a34 <statemachine+0x1d0c>)
 8006818:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 800681a:	4b87      	ldr	r3, [pc, #540]	; (8006a38 <statemachine+0x1d10>)
 800681c:	2201      	movs	r2, #1
 800681e:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 8006820:	4b86      	ldr	r3, [pc, #536]	; (8006a3c <statemachine+0x1d14>)
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 8006826:	4b81      	ldr	r3, [pc, #516]	; (8006a2c <statemachine+0x1d04>)
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]
				 						storeindex();
 800682c:	f7fd fafa 	bl	8003e24 <storeindex>
				 						BTN_A=0;
 8006830:	4b83      	ldr	r3, [pc, #524]	; (8006a40 <statemachine+0x1d18>)
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 8006836:	4b83      	ldr	r3, [pc, #524]	; (8006a44 <statemachine+0x1d1c>)
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 800683c:	4b81      	ldr	r3, [pc, #516]	; (8006a44 <statemachine+0x1d1c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	f340 80ef 	ble.w	8006a24 <statemachine+0x1cfc>
					 						usbstate++;
 8006846:	4b80      	ldr	r3, [pc, #512]	; (8006a48 <statemachine+0x1d20>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	3301      	adds	r3, #1
 800684c:	b2da      	uxtb	r2, r3
 800684e:	4b7e      	ldr	r3, [pc, #504]	; (8006a48 <statemachine+0x1d20>)
 8006850:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 8006852:	4b7c      	ldr	r3, [pc, #496]	; (8006a44 <statemachine+0x1d1c>)
 8006854:	2200      	movs	r2, #0
 8006856:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 8006858:	4b79      	ldr	r3, [pc, #484]	; (8006a40 <statemachine+0x1d18>)
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
				 			  break;
 800685e:	e0e1      	b.n	8006a24 <statemachine+0x1cfc>
				 					ssd1306_Fill(Black);
 8006860:	2000      	movs	r0, #0
 8006862:	f7fd fcbb 	bl	80041dc <ssd1306_Fill>
				 					ssd1306_SetCursor(32,40);
 8006866:	2128      	movs	r1, #40	; 0x28
 8006868:	2020      	movs	r0, #32
 800686a:	f7fd fdf9 	bl	8004460 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 800686e:	4a77      	ldr	r2, [pc, #476]	; (8006a4c <statemachine+0x1d24>)
 8006870:	2301      	movs	r3, #1
 8006872:	ca06      	ldmia	r2, {r1, r2}
 8006874:	4876      	ldr	r0, [pc, #472]	; (8006a50 <statemachine+0x1d28>)
 8006876:	f7fd fdcd 	bl	8004414 <ssd1306_WriteString>
				 					if(pagenumber>0){
 800687a:	4b6c      	ldr	r3, [pc, #432]	; (8006a2c <statemachine+0x1d04>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	dd7d      	ble.n	800697e <statemachine+0x1c56>
				 					int i=0;
 8006882:	2300      	movs	r3, #0
 8006884:	607b      	str	r3, [r7, #4]
				 					if(usbtransmiten==0){
 8006886:	4b73      	ldr	r3, [pc, #460]	; (8006a54 <statemachine+0x1d2c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d165      	bne.n	800695a <statemachine+0x1c32>
				 						while(i<pagenumber){
 800688e:	e036      	b.n	80068fe <statemachine+0x1bd6>
				 							ssd1306_Fill(Black);
 8006890:	2000      	movs	r0, #0
 8006892:	f7fd fca3 	bl	80041dc <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8006896:	2120      	movs	r1, #32
 8006898:	2020      	movs	r0, #32
 800689a:	f7fd fde1 	bl	8004460 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 800689e:	4a6b      	ldr	r2, [pc, #428]	; (8006a4c <statemachine+0x1d24>)
 80068a0:	2301      	movs	r3, #1
 80068a2:	ca06      	ldmia	r2, {r1, r2}
 80068a4:	486a      	ldr	r0, [pc, #424]	; (8006a50 <statemachine+0x1d28>)
 80068a6:	f7fd fdb5 	bl	8004414 <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t  *)flashread, 256, 0);
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	2300      	movs	r3, #0
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068b4:	4a68      	ldr	r2, [pc, #416]	; (8006a58 <statemachine+0x1d30>)
 80068b6:	485e      	ldr	r0, [pc, #376]	; (8006a30 <statemachine+0x1d08>)
 80068b8:	f012 fd48 	bl	801934c <SPIF_ReadPage>
				 							CDC_Transmit_FS((char  * )flashread,256);
 80068bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068c0:	4865      	ldr	r0, [pc, #404]	; (8006a58 <statemachine+0x1d30>)
 80068c2:	f013 fc53 	bl	801a16c <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2264      	movs	r2, #100	; 0x64
 80068ca:	fb02 f303 	mul.w	r3, r2, r3
 80068ce:	ee07 3a90 	vmov	s15, r3
 80068d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068d6:	4b55      	ldr	r3, [pc, #340]	; (8006a2c <statemachine+0x1d04>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	ee07 3a90 	vmov	s15, r3
 80068de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80068e6:	eeb0 0a66 	vmov.f32	s0, s13
 80068ea:	f7fe f951 	bl	8004b90 <percentage>
				 							ssd1306_UpdateScreen();
 80068ee:	f7fd fc8d 	bl	800420c <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 80068f2:	207d      	movs	r0, #125	; 0x7d
 80068f4:	f7fb f8f7 	bl	8001ae6 <HAL_Delay>
				 							i++;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3301      	adds	r3, #1
 80068fc:	607b      	str	r3, [r7, #4]
				 						while(i<pagenumber){
 80068fe:	4b4b      	ldr	r3, [pc, #300]	; (8006a2c <statemachine+0x1d04>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	429a      	cmp	r2, r3
 8006906:	dbc3      	blt.n	8006890 <statemachine+0x1b68>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 8006908:	4b48      	ldr	r3, [pc, #288]	; (8006a2c <statemachine+0x1d04>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4619      	mov	r1, r3
 800690e:	4b4b      	ldr	r3, [pc, #300]	; (8006a3c <statemachine+0x1d14>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	2300      	movs	r3, #0
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	4613      	mov	r3, r2
 800691a:	4a4f      	ldr	r2, [pc, #316]	; (8006a58 <statemachine+0x1d30>)
 800691c:	4844      	ldr	r0, [pc, #272]	; (8006a30 <statemachine+0x1d08>)
 800691e:	f012 fd15 	bl	801934c <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 8006922:	4b46      	ldr	r3, [pc, #280]	; (8006a3c <statemachine+0x1d14>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	4619      	mov	r1, r3
 800692a:	484b      	ldr	r0, [pc, #300]	; (8006a58 <statemachine+0x1d30>)
 800692c:	f013 fc1e 	bl	801a16c <CDC_Transmit_FS>
				 						HAL_Delay(125);
 8006930:	207d      	movs	r0, #125	; 0x7d
 8006932:	f7fb f8d8 	bl	8001ae6 <HAL_Delay>
				 						int taillefin=0;
 8006936:	2300      	movs	r3, #0
 8006938:	603b      	str	r3, [r7, #0]
										taillefin = snprintf((char  *)usbbuffer,64,"findetrame\n\r");
 800693a:	4a48      	ldr	r2, [pc, #288]	; (8006a5c <statemachine+0x1d34>)
 800693c:	2140      	movs	r1, #64	; 0x40
 800693e:	4848      	ldr	r0, [pc, #288]	; (8006a60 <statemachine+0x1d38>)
 8006940:	f016 fa10 	bl	801cd64 <sniprintf>
 8006944:	6038      	str	r0, [r7, #0]
				 						CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	4619      	mov	r1, r3
 800694c:	4844      	ldr	r0, [pc, #272]	; (8006a60 <statemachine+0x1d38>)
 800694e:	f013 fc0d 	bl	801a16c <CDC_Transmit_FS>
				 						usbtransmiten=1;
 8006952:	4b40      	ldr	r3, [pc, #256]	; (8006a54 <statemachine+0x1d2c>)
 8006954:	2201      	movs	r2, #1
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	e003      	b.n	8006962 <statemachine+0x1c3a>
				 						usbpercent=1;
 800695a:	4b42      	ldr	r3, [pc, #264]	; (8006a64 <statemachine+0x1d3c>)
 800695c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006960:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 8006962:	2000      	movs	r0, #0
 8006964:	f7fd fc3a 	bl	80041dc <ssd1306_Fill>
				 					ssd1306_SetCursor(32,45);
 8006968:	212d      	movs	r1, #45	; 0x2d
 800696a:	2020      	movs	r0, #32
 800696c:	f7fd fd78 	bl	8004460 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 8006970:	4a3d      	ldr	r2, [pc, #244]	; (8006a68 <statemachine+0x1d40>)
 8006972:	2301      	movs	r3, #1
 8006974:	ca06      	ldmia	r2, {r1, r2}
 8006976:	483d      	ldr	r0, [pc, #244]	; (8006a6c <statemachine+0x1d44>)
 8006978:	f7fd fd4c 	bl	8004414 <ssd1306_WriteString>
 800697c:	e016      	b.n	80069ac <statemachine+0x1c84>
				 							ssd1306_Fill(Black);
 800697e:	2000      	movs	r0, #0
 8006980:	f7fd fc2c 	bl	80041dc <ssd1306_Fill>
				 							ssd1306_SetCursor(32,40);
 8006984:	2128      	movs	r1, #40	; 0x28
 8006986:	2020      	movs	r0, #32
 8006988:	f7fd fd6a 	bl	8004460 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 800698c:	4a2f      	ldr	r2, [pc, #188]	; (8006a4c <statemachine+0x1d24>)
 800698e:	2301      	movs	r3, #1
 8006990:	ca06      	ldmia	r2, {r1, r2}
 8006992:	482f      	ldr	r0, [pc, #188]	; (8006a50 <statemachine+0x1d28>)
 8006994:	f7fd fd3e 	bl	8004414 <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,48);
 8006998:	2130      	movs	r1, #48	; 0x30
 800699a:	2020      	movs	r0, #32
 800699c:	f7fd fd60 	bl	8004460 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_6x8,White);
 80069a0:	4a2a      	ldr	r2, [pc, #168]	; (8006a4c <statemachine+0x1d24>)
 80069a2:	2301      	movs	r3, #1
 80069a4:	ca06      	ldmia	r2, {r1, r2}
 80069a6:	4832      	ldr	r0, [pc, #200]	; (8006a70 <statemachine+0x1d48>)
 80069a8:	f7fd fd34 	bl	8004414 <ssd1306_WriteString>
				 					if(BTN_B>=1){
 80069ac:	4b25      	ldr	r3, [pc, #148]	; (8006a44 <statemachine+0x1d1c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	dd11      	ble.n	80069d8 <statemachine+0x1cb0>
				 									 						usbstate--;
 80069b4:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <statemachine+0x1d20>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	4b22      	ldr	r3, [pc, #136]	; (8006a48 <statemachine+0x1d20>)
 80069be:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 80069c0:	4b21      	ldr	r3, [pc, #132]	; (8006a48 <statemachine+0x1d20>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	4b1f      	ldr	r3, [pc, #124]	; (8006a48 <statemachine+0x1d20>)
 80069ca:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 80069cc:	4b1d      	ldr	r3, [pc, #116]	; (8006a44 <statemachine+0x1d1c>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 80069d2:	4b1b      	ldr	r3, [pc, #108]	; (8006a40 <statemachine+0x1d18>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 80069d8:	4b19      	ldr	r3, [pc, #100]	; (8006a40 <statemachine+0x1d18>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	dd0b      	ble.n	80069f8 <statemachine+0x1cd0>
				 									  			 	state++;
 80069e0:	4b24      	ldr	r3, [pc, #144]	; (8006a74 <statemachine+0x1d4c>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	3301      	adds	r3, #1
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	4b22      	ldr	r3, [pc, #136]	; (8006a74 <statemachine+0x1d4c>)
 80069ea:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 80069ec:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <statemachine+0x1d18>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 80069f2:	4b14      	ldr	r3, [pc, #80]	; (8006a44 <statemachine+0x1d1c>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 80069f8:	4b1f      	ldr	r3, [pc, #124]	; (8006a78 <statemachine+0x1d50>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	dd13      	ble.n	8006a28 <statemachine+0x1d00>
				 									 									  			 	state--;
 8006a00:	4b1c      	ldr	r3, [pc, #112]	; (8006a74 <statemachine+0x1d4c>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	4b1a      	ldr	r3, [pc, #104]	; (8006a74 <statemachine+0x1d4c>)
 8006a0a:	701a      	strb	r2, [r3, #0]
				 									 									  			 	BTN_A=0;
 8006a0c:	4b0c      	ldr	r3, [pc, #48]	; (8006a40 <statemachine+0x1d18>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_B=0;
 8006a12:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <statemachine+0x1d1c>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_A_LONG=0;
 8006a18:	4b17      	ldr	r3, [pc, #92]	; (8006a78 <statemachine+0x1d50>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]
				 					 break;
 8006a1e:	e003      	b.n	8006a28 <statemachine+0x1d00>
				 					  break;
 8006a20:	bf00      	nop
 8006a22:	e3ac      	b.n	800717e <statemachine+0x2456>
				 			  break;
 8006a24:	bf00      	nop
 8006a26:	e3aa      	b.n	800717e <statemachine+0x2456>
				 					 break;
 8006a28:	bf00      	nop
				  break;
 8006a2a:	e3a8      	b.n	800717e <statemachine+0x2456>
 8006a2c:	20000ab8 	.word	0x20000ab8
 8006a30:	20000880 	.word	0x20000880
 8006a34:	20000c6c 	.word	0x20000c6c
 8006a38:	20000c70 	.word	0x20000c70
 8006a3c:	20000ab4 	.word	0x20000ab4
 8006a40:	20000878 	.word	0x20000878
 8006a44:	2000087c 	.word	0x2000087c
 8006a48:	200005ed 	.word	0x200005ed
 8006a4c:	20000014 	.word	0x20000014
 8006a50:	08021904 	.word	0x08021904
 8006a54:	20000c74 	.word	0x20000c74
 8006a58:	200009b4 	.word	0x200009b4
 8006a5c:	0802190c 	.word	0x0802190c
 8006a60:	20000c0c 	.word	0x20000c0c
 8006a64:	20000c78 	.word	0x20000c78
 8006a68:	2000001c 	.word	0x2000001c
 8006a6c:	0802191c 	.word	0x0802191c
 8006a70:	08021924 	.word	0x08021924
 8006a74:	200005e8 	.word	0x200005e8
 8006a78:	20000cc0 	.word	0x20000cc0



				  case STATE_MONITOR:
					  ssd1306_Fill(Black);
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	f7fd fbad 	bl	80041dc <ssd1306_Fill>
					  ssd1306_SetCursor(32,32);
 8006a82:	2120      	movs	r1, #32
 8006a84:	2020      	movs	r0, #32
 8006a86:	f7fd fceb 	bl	8004460 <ssd1306_SetCursor>
					  ssd1306_WriteString("gputemp",Font_6x8,White);
 8006a8a:	4a92      	ldr	r2, [pc, #584]	; (8006cd4 <statemachine+0x1fac>)
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	ca06      	ldmia	r2, {r1, r2}
 8006a90:	4891      	ldr	r0, [pc, #580]	; (8006cd8 <statemachine+0x1fb0>)
 8006a92:	f7fd fcbf 	bl	8004414 <ssd1306_WriteString>

					  usbbuffer[60]='$';
 8006a96:	4b91      	ldr	r3, [pc, #580]	; (8006cdc <statemachine+0x1fb4>)
 8006a98:	2224      	movs	r2, #36	; 0x24
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					  getgpu((uint8_t  *)usbbuffer);
 8006a9e:	488f      	ldr	r0, [pc, #572]	; (8006cdc <statemachine+0x1fb4>)
 8006aa0:	f001 fade 	bl	8008060 <getgpu>
					  ssd1306_SetCursor(32,40);
 8006aa4:	2128      	movs	r1, #40	; 0x28
 8006aa6:	2020      	movs	r0, #32
 8006aa8:	f7fd fcda 	bl	8004460 <ssd1306_SetCursor>
					  snprintf((char  *)bufferscreen,50,"T=%d*C",gputemp);
 8006aac:	4b8c      	ldr	r3, [pc, #560]	; (8006ce0 <statemachine+0x1fb8>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a8c      	ldr	r2, [pc, #560]	; (8006ce4 <statemachine+0x1fbc>)
 8006ab2:	2132      	movs	r1, #50	; 0x32
 8006ab4:	488c      	ldr	r0, [pc, #560]	; (8006ce8 <statemachine+0x1fc0>)
 8006ab6:	f016 f955 	bl	801cd64 <sniprintf>
					  ssd1306_WriteString((char  *)bufferscreen,Font_7x10,White);
 8006aba:	4a8c      	ldr	r2, [pc, #560]	; (8006cec <statemachine+0x1fc4>)
 8006abc:	2301      	movs	r3, #1
 8006abe:	ca06      	ldmia	r2, {r1, r2}
 8006ac0:	4889      	ldr	r0, [pc, #548]	; (8006ce8 <statemachine+0x1fc0>)
 8006ac2:	f7fd fca7 	bl	8004414 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,50);
 8006ac6:	2132      	movs	r1, #50	; 0x32
 8006ac8:	2020      	movs	r0, #32
 8006aca:	f7fd fcc9 	bl	8004460 <ssd1306_SetCursor>
					  snprintf((char  *)bufferscreen,50,"p=%dW",(int) gpupower);
 8006ace:	4b88      	ldr	r3, [pc, #544]	; (8006cf0 <statemachine+0x1fc8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a88      	ldr	r2, [pc, #544]	; (8006cf4 <statemachine+0x1fcc>)
 8006ad4:	2132      	movs	r1, #50	; 0x32
 8006ad6:	4884      	ldr	r0, [pc, #528]	; (8006ce8 <statemachine+0x1fc0>)
 8006ad8:	f016 f944 	bl	801cd64 <sniprintf>
					  ssd1306_WriteString((char  *)bufferscreen,Font_7x10,White);
 8006adc:	4a83      	ldr	r2, [pc, #524]	; (8006cec <statemachine+0x1fc4>)
 8006ade:	2301      	movs	r3, #1
 8006ae0:	ca06      	ldmia	r2, {r1, r2}
 8006ae2:	4881      	ldr	r0, [pc, #516]	; (8006ce8 <statemachine+0x1fc0>)
 8006ae4:	f7fd fc96 	bl	8004414 <ssd1306_WriteString>


					  if(BTN_A>=1){
 8006ae8:	4b83      	ldr	r3, [pc, #524]	; (8006cf8 <statemachine+0x1fd0>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	dd0b      	ble.n	8006b08 <statemachine+0x1de0>
					 				 									  			 	state++;
 8006af0:	4b82      	ldr	r3, [pc, #520]	; (8006cfc <statemachine+0x1fd4>)
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	3301      	adds	r3, #1
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	4b80      	ldr	r3, [pc, #512]	; (8006cfc <statemachine+0x1fd4>)
 8006afa:	701a      	strb	r2, [r3, #0]
					 				 									  			 	BTN_A=0;
 8006afc:	4b7e      	ldr	r3, [pc, #504]	; (8006cf8 <statemachine+0x1fd0>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]
					 				 									  			 	BTN_B=0;
 8006b02:	4b7f      	ldr	r3, [pc, #508]	; (8006d00 <statemachine+0x1fd8>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]
					 				 									  	}
					 				 					if(BTN_A_LONG>=1){
 8006b08:	4b7e      	ldr	r3, [pc, #504]	; (8006d04 <statemachine+0x1fdc>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f340 8338 	ble.w	8007182 <statemachine+0x245a>
					 				 									 									  			 	state--;
 8006b12:	4b7a      	ldr	r3, [pc, #488]	; (8006cfc <statemachine+0x1fd4>)
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	4b78      	ldr	r3, [pc, #480]	; (8006cfc <statemachine+0x1fd4>)
 8006b1c:	701a      	strb	r2, [r3, #0]
					 				 									 									  			 	BTN_A=0;
 8006b1e:	4b76      	ldr	r3, [pc, #472]	; (8006cf8 <statemachine+0x1fd0>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]
					 				 									 									  			 	BTN_B=0;
 8006b24:	4b76      	ldr	r3, [pc, #472]	; (8006d00 <statemachine+0x1fd8>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	601a      	str	r2, [r3, #0]
					 				 									 									  			 	BTN_A_LONG=0;
 8006b2a:	4b76      	ldr	r3, [pc, #472]	; (8006d04 <statemachine+0x1fdc>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	601a      	str	r2, [r3, #0]
					 				 									 									  	}


					  break;
 8006b30:	e327      	b.n	8007182 <statemachine+0x245a>


				  case STATE_TARVOS:
					  ssd1306_Fill(Black);
 8006b32:	2000      	movs	r0, #0
 8006b34:	f7fd fb52 	bl	80041dc <ssd1306_Fill>
					  				  ssd1306_SetCursor(32,32);
 8006b38:	2120      	movs	r1, #32
 8006b3a:	2020      	movs	r0, #32
 8006b3c:	f7fd fc90 	bl	8004460 <ssd1306_SetCursor>
					  				  ssd1306_WriteString("tarvos",Font_6x8,White);
 8006b40:	4a64      	ldr	r2, [pc, #400]	; (8006cd4 <statemachine+0x1fac>)
 8006b42:	2301      	movs	r3, #1
 8006b44:	ca06      	ldmia	r2, {r1, r2}
 8006b46:	4870      	ldr	r0, [pc, #448]	; (8006d08 <statemachine+0x1fe0>)
 8006b48:	f7fd fc64 	bl	8004414 <ssd1306_WriteString>
					  				  switch(tarvosstate){
 8006b4c:	4b6f      	ldr	r3, [pc, #444]	; (8006d0c <statemachine+0x1fe4>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	f000 80f1 	beq.w	8006d38 <statemachine+0x2010>
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	f300 8315 	bgt.w	8007186 <statemachine+0x245e>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <statemachine+0x1e3e>
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d07d      	beq.n	8006c60 <statemachine+0x1f38>





					  break;
 8006b64:	e30f      	b.n	8007186 <statemachine+0x245e>
					  				 					  ssd1306_SetCursor(32,40);
 8006b66:	2128      	movs	r1, #40	; 0x28
 8006b68:	2020      	movs	r0, #32
 8006b6a:	f7fd fc79 	bl	8004460 <ssd1306_SetCursor>
					  				 					  ssd1306_WriteString("push B",Font_6x8,White);
 8006b6e:	4a59      	ldr	r2, [pc, #356]	; (8006cd4 <statemachine+0x1fac>)
 8006b70:	2301      	movs	r3, #1
 8006b72:	ca06      	ldmia	r2, {r1, r2}
 8006b74:	4866      	ldr	r0, [pc, #408]	; (8006d10 <statemachine+0x1fe8>)
 8006b76:	f7fd fc4d 	bl	8004414 <ssd1306_WriteString>
					  									  if(BTN_A>=1){
 8006b7a:	4b5f      	ldr	r3, [pc, #380]	; (8006cf8 <statemachine+0x1fd0>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	dd0b      	ble.n	8006b9a <statemachine+0x1e72>
					  											state++;
 8006b82:	4b5e      	ldr	r3, [pc, #376]	; (8006cfc <statemachine+0x1fd4>)
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	3301      	adds	r3, #1
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	4b5c      	ldr	r3, [pc, #368]	; (8006cfc <statemachine+0x1fd4>)
 8006b8c:	701a      	strb	r2, [r3, #0]
					  											BTN_A=0;
 8006b8e:	4b5a      	ldr	r3, [pc, #360]	; (8006cf8 <statemachine+0x1fd0>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]
					  											BTN_B=0;
 8006b94:	4b5a      	ldr	r3, [pc, #360]	; (8006d00 <statemachine+0x1fd8>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]
					  									if(BTN_A_LONG>=1){
 8006b9a:	4b5a      	ldr	r3, [pc, #360]	; (8006d04 <statemachine+0x1fdc>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	dd0e      	ble.n	8006bc0 <statemachine+0x1e98>
					  											state--;
 8006ba2:	4b56      	ldr	r3, [pc, #344]	; (8006cfc <statemachine+0x1fd4>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	4b54      	ldr	r3, [pc, #336]	; (8006cfc <statemachine+0x1fd4>)
 8006bac:	701a      	strb	r2, [r3, #0]
					  											BTN_A=0;
 8006bae:	4b52      	ldr	r3, [pc, #328]	; (8006cf8 <statemachine+0x1fd0>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]
					  											BTN_B=0;
 8006bb4:	4b52      	ldr	r3, [pc, #328]	; (8006d00 <statemachine+0x1fd8>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	601a      	str	r2, [r3, #0]
					  											BTN_A_LONG=0;
 8006bba:	4b52      	ldr	r3, [pc, #328]	; (8006d04 <statemachine+0x1fdc>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]
					  				 					  if(BTN_B_LONG>=1){
 8006bc0:	4b54      	ldr	r3, [pc, #336]	; (8006d14 <statemachine+0x1fec>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f340 8111 	ble.w	8006dec <statemachine+0x20c4>
					  				 						 huart1.Instance = USART1;
 8006bca:	4b53      	ldr	r3, [pc, #332]	; (8006d18 <statemachine+0x1ff0>)
 8006bcc:	4a53      	ldr	r2, [pc, #332]	; (8006d1c <statemachine+0x1ff4>)
 8006bce:	601a      	str	r2, [r3, #0]
					  				 						 huart1.Init.BaudRate = 115200;
 8006bd0:	4b51      	ldr	r3, [pc, #324]	; (8006d18 <statemachine+0x1ff0>)
 8006bd2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006bd6:	605a      	str	r2, [r3, #4]
					  				 						 huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006bd8:	4b4f      	ldr	r3, [pc, #316]	; (8006d18 <statemachine+0x1ff0>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	609a      	str	r2, [r3, #8]
					  				 						 huart1.Init.StopBits = UART_STOPBITS_1;
 8006bde:	4b4e      	ldr	r3, [pc, #312]	; (8006d18 <statemachine+0x1ff0>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	60da      	str	r2, [r3, #12]
					  				 						 huart1.Init.Parity = UART_PARITY_NONE;
 8006be4:	4b4c      	ldr	r3, [pc, #304]	; (8006d18 <statemachine+0x1ff0>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	611a      	str	r2, [r3, #16]
					  				 						 huart1.Init.Mode = UART_MODE_TX_RX;
 8006bea:	4b4b      	ldr	r3, [pc, #300]	; (8006d18 <statemachine+0x1ff0>)
 8006bec:	220c      	movs	r2, #12
 8006bee:	615a      	str	r2, [r3, #20]
					  				 						 huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006bf0:	4b49      	ldr	r3, [pc, #292]	; (8006d18 <statemachine+0x1ff0>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	619a      	str	r2, [r3, #24]
					  				 						 huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006bf6:	4b48      	ldr	r3, [pc, #288]	; (8006d18 <statemachine+0x1ff0>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	61da      	str	r2, [r3, #28]
					  				 						 huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006bfc:	4b46      	ldr	r3, [pc, #280]	; (8006d18 <statemachine+0x1ff0>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	621a      	str	r2, [r3, #32]
					  				 						 huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006c02:	4b45      	ldr	r3, [pc, #276]	; (8006d18 <statemachine+0x1ff0>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	629a      	str	r2, [r3, #40]	; 0x28
					  				 						  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006c08:	4843      	ldr	r0, [pc, #268]	; (8006d18 <statemachine+0x1ff0>)
 8006c0a:	f009 fd55 	bl	80106b8 <HAL_UART_Init>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d012      	beq.n	8006c3a <statemachine+0x1f12>
					  				 						ssd1306_Fill(Black);
 8006c14:	2000      	movs	r0, #0
 8006c16:	f7fd fae1 	bl	80041dc <ssd1306_Fill>
					  				 						 ssd1306_WriteString("problem",Font_6x8,White);
 8006c1a:	4a2e      	ldr	r2, [pc, #184]	; (8006cd4 <statemachine+0x1fac>)
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	ca06      	ldmia	r2, {r1, r2}
 8006c20:	483f      	ldr	r0, [pc, #252]	; (8006d20 <statemachine+0x1ff8>)
 8006c22:	f7fd fbf7 	bl	8004414 <ssd1306_WriteString>
					  				 						ssd1306_UpdateScreen();
 8006c26:	f7fd faf1 	bl	800420c <ssd1306_UpdateScreen>
					  				 						HAL_Delay(1500);
 8006c2a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006c2e:	f7fa ff5a 	bl	8001ae6 <HAL_Delay>
					  				 						correctentarvos=0;
 8006c32:	4b3c      	ldr	r3, [pc, #240]	; (8006d24 <statemachine+0x1ffc>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	e002      	b.n	8006c40 <statemachine+0x1f18>
					  				 							correctentarvos=1;
 8006c3a:	4b3a      	ldr	r3, [pc, #232]	; (8006d24 <statemachine+0x1ffc>)
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]
					  				 						  HAL_Delay(10);
 8006c40:	200a      	movs	r0, #10
 8006c42:	f7fa ff50 	bl	8001ae6 <HAL_Delay>
					  				 						  tarvosstate++;
 8006c46:	4b31      	ldr	r3, [pc, #196]	; (8006d0c <statemachine+0x1fe4>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	4b2f      	ldr	r3, [pc, #188]	; (8006d0c <statemachine+0x1fe4>)
 8006c50:	701a      	strb	r2, [r3, #0]
					  				 						BTN_B_LONG=0;
 8006c52:	4b30      	ldr	r3, [pc, #192]	; (8006d14 <statemachine+0x1fec>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]
					  				 						BTN_A=0;
 8006c58:	4b27      	ldr	r3, [pc, #156]	; (8006cf8 <statemachine+0x1fd0>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
					  				 					  break;
 8006c5e:	e0c5      	b.n	8006dec <statemachine+0x20c4>
					  				 					 ssd1306_SetCursor(32,40);
 8006c60:	2128      	movs	r1, #40	; 0x28
 8006c62:	2020      	movs	r0, #32
 8006c64:	f7fd fbfc 	bl	8004460 <ssd1306_SetCursor>
					  				 					ssd1306_WriteString("send1",Font_6x8,White);
 8006c68:	4a1a      	ldr	r2, [pc, #104]	; (8006cd4 <statemachine+0x1fac>)
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	ca06      	ldmia	r2, {r1, r2}
 8006c6e:	482e      	ldr	r0, [pc, #184]	; (8006d28 <statemachine+0x2000>)
 8006c70:	f7fd fbd0 	bl	8004414 <ssd1306_WriteString>
					  				 					if(correctentarvos==1){
 8006c74:	4b2b      	ldr	r3, [pc, #172]	; (8006d24 <statemachine+0x1ffc>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d118      	bne.n	8006cae <statemachine+0x1f86>
					  				 					snprintf((char  *)tarvosbuf,50,"cputemp=%0.2f\n\r",temp);
 8006c7c:	4b2b      	ldr	r3, [pc, #172]	; (8006d2c <statemachine+0x2004>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7f9 fc39 	bl	80004f8 <__aeabi_f2d>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	e9cd 2300 	strd	r2, r3, [sp]
 8006c8e:	4a28      	ldr	r2, [pc, #160]	; (8006d30 <statemachine+0x2008>)
 8006c90:	2132      	movs	r1, #50	; 0x32
 8006c92:	4828      	ldr	r0, [pc, #160]	; (8006d34 <statemachine+0x200c>)
 8006c94:	f016 f866 	bl	801cd64 <sniprintf>
					  				 					HAL_UART_Transmit(&huart1,(uint8_t  *)tarvosbuf,sizeof(tarvosbuf),HAL_MAX_DELAY);
 8006c98:	f04f 33ff 	mov.w	r3, #4294967295
 8006c9c:	2232      	movs	r2, #50	; 0x32
 8006c9e:	4925      	ldr	r1, [pc, #148]	; (8006d34 <statemachine+0x200c>)
 8006ca0:	481d      	ldr	r0, [pc, #116]	; (8006d18 <statemachine+0x1ff0>)
 8006ca2:	f009 fd98 	bl	80107d6 <HAL_UART_Transmit>
					  				 					HAL_Delay(1000);
 8006ca6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006caa:	f7fa ff1c 	bl	8001ae6 <HAL_Delay>
					  				 					if(BTN_B>=1){
 8006cae:	4b14      	ldr	r3, [pc, #80]	; (8006d00 <statemachine+0x1fd8>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f340 809c 	ble.w	8006df0 <statemachine+0x20c8>
					  					 						tarvosstate++;
 8006cb8:	4b14      	ldr	r3, [pc, #80]	; (8006d0c <statemachine+0x1fe4>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	4b12      	ldr	r3, [pc, #72]	; (8006d0c <statemachine+0x1fe4>)
 8006cc2:	701a      	strb	r2, [r3, #0]
					  					 						  BTN_B=0;
 8006cc4:	4b0e      	ldr	r3, [pc, #56]	; (8006d00 <statemachine+0x1fd8>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	601a      	str	r2, [r3, #0]
					  					 						  BTN_A=0;
 8006cca:	4b0b      	ldr	r3, [pc, #44]	; (8006cf8 <statemachine+0x1fd0>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]
					  				 			  break;
 8006cd0:	e08e      	b.n	8006df0 <statemachine+0x20c8>
 8006cd2:	bf00      	nop
 8006cd4:	20000014 	.word	0x20000014
 8006cd8:	0802192c 	.word	0x0802192c
 8006cdc:	20000c0c 	.word	0x20000c0c
 8006ce0:	20001284 	.word	0x20001284
 8006ce4:	08021934 	.word	0x08021934
 8006ce8:	20000ad8 	.word	0x20000ad8
 8006cec:	2000001c 	.word	0x2000001c
 8006cf0:	20001288 	.word	0x20001288
 8006cf4:	0802193c 	.word	0x0802193c
 8006cf8:	20000878 	.word	0x20000878
 8006cfc:	200005e8 	.word	0x200005e8
 8006d00:	2000087c 	.word	0x2000087c
 8006d04:	20000cc0 	.word	0x20000cc0
 8006d08:	08021944 	.word	0x08021944
 8006d0c:	200005ef 	.word	0x200005ef
 8006d10:	0802194c 	.word	0x0802194c
 8006d14:	20000cbc 	.word	0x20000cbc
 8006d18:	20001444 	.word	0x20001444
 8006d1c:	40013800 	.word	0x40013800
 8006d20:	08021954 	.word	0x08021954
 8006d24:	200012c0 	.word	0x200012c0
 8006d28:	0802195c 	.word	0x0802195c
 8006d2c:	200008a8 	.word	0x200008a8
 8006d30:	08021964 	.word	0x08021964
 8006d34:	2000128c 	.word	0x2000128c
					  				 					ssd1306_Fill(Black);
 8006d38:	2000      	movs	r0, #0
 8006d3a:	f7fd fa4f 	bl	80041dc <ssd1306_Fill>
					  				 					ssd1306_SetCursor(32,40);
 8006d3e:	2128      	movs	r1, #40	; 0x28
 8006d40:	2020      	movs	r0, #32
 8006d42:	f7fd fb8d 	bl	8004460 <ssd1306_SetCursor>
					  				 					ssd1306_WriteString("send2",Font_6x8,White);
 8006d46:	4a7f      	ldr	r2, [pc, #508]	; (8006f44 <statemachine+0x221c>)
 8006d48:	2301      	movs	r3, #1
 8006d4a:	ca06      	ldmia	r2, {r1, r2}
 8006d4c:	487e      	ldr	r0, [pc, #504]	; (8006f48 <statemachine+0x2220>)
 8006d4e:	f7fd fb61 	bl	8004414 <ssd1306_WriteString>
					  				 					if(correctentarvos==1){
 8006d52:	4b7e      	ldr	r3, [pc, #504]	; (8006f4c <statemachine+0x2224>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d118      	bne.n	8006d8c <statemachine+0x2064>
					  				 						snprintf((char  *)tarvosbuf,50,"je suis à =%0.2f\n\r",vbat);
 8006d5a:	4b7d      	ldr	r3, [pc, #500]	; (8006f50 <statemachine+0x2228>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7f9 fbca 	bl	80004f8 <__aeabi_f2d>
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	e9cd 2300 	strd	r2, r3, [sp]
 8006d6c:	4a79      	ldr	r2, [pc, #484]	; (8006f54 <statemachine+0x222c>)
 8006d6e:	2132      	movs	r1, #50	; 0x32
 8006d70:	4879      	ldr	r0, [pc, #484]	; (8006f58 <statemachine+0x2230>)
 8006d72:	f015 fff7 	bl	801cd64 <sniprintf>
					  				 						HAL_UART_Transmit(&huart1,(uint8_t  *)tarvosbuf,sizeof(tarvosbuf),HAL_MAX_DELAY);
 8006d76:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7a:	2232      	movs	r2, #50	; 0x32
 8006d7c:	4976      	ldr	r1, [pc, #472]	; (8006f58 <statemachine+0x2230>)
 8006d7e:	4877      	ldr	r0, [pc, #476]	; (8006f5c <statemachine+0x2234>)
 8006d80:	f009 fd29 	bl	80107d6 <HAL_UART_Transmit>
					  				 						HAL_Delay(1000);
 8006d84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d88:	f7fa fead 	bl	8001ae6 <HAL_Delay>
					  				 					if(BTN_B>=1){
 8006d8c:	4b74      	ldr	r3, [pc, #464]	; (8006f60 <statemachine+0x2238>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	dd0b      	ble.n	8006dac <statemachine+0x2084>
					  				 									 						tarvosstate--;
 8006d94:	4b73      	ldr	r3, [pc, #460]	; (8006f64 <statemachine+0x223c>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	4b71      	ldr	r3, [pc, #452]	; (8006f64 <statemachine+0x223c>)
 8006d9e:	701a      	strb	r2, [r3, #0]
					  				 									 						  BTN_B=0;
 8006da0:	4b6f      	ldr	r3, [pc, #444]	; (8006f60 <statemachine+0x2238>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	601a      	str	r2, [r3, #0]
					  				 									 						  BTN_A=0;
 8006da6:	4b70      	ldr	r3, [pc, #448]	; (8006f68 <statemachine+0x2240>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]
					  				 					if(BTN_B_LONG>=1){
 8006dac:	4b6f      	ldr	r3, [pc, #444]	; (8006f6c <statemachine+0x2244>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	dd1f      	ble.n	8006df4 <statemachine+0x20cc>
					  				 						HAL_UART_Abort(&huart1);
 8006db4:	4869      	ldr	r0, [pc, #420]	; (8006f5c <statemachine+0x2234>)
 8006db6:	f009 fde9 	bl	801098c <HAL_UART_Abort>
					  				 						HAL_UART_DeInit(&huart1);
 8006dba:	4868      	ldr	r0, [pc, #416]	; (8006f5c <statemachine+0x2234>)
 8006dbc:	f009 fccc 	bl	8010758 <HAL_UART_DeInit>
					  				 										  				 									 						tarvosstate--;
 8006dc0:	4b68      	ldr	r3, [pc, #416]	; (8006f64 <statemachine+0x223c>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	4b66      	ldr	r3, [pc, #408]	; (8006f64 <statemachine+0x223c>)
 8006dca:	701a      	strb	r2, [r3, #0]
					  				 										  				 									 					tarvosstate--;
 8006dcc:	4b65      	ldr	r3, [pc, #404]	; (8006f64 <statemachine+0x223c>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	4b63      	ldr	r3, [pc, #396]	; (8006f64 <statemachine+0x223c>)
 8006dd6:	701a      	strb	r2, [r3, #0]
					  				 										  				 									 						  BTN_B_LONG=0;
 8006dd8:	4b64      	ldr	r3, [pc, #400]	; (8006f6c <statemachine+0x2244>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]
					  				 										  				 									 						  BTN_B=0;
 8006dde:	4b60      	ldr	r3, [pc, #384]	; (8006f60 <statemachine+0x2238>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]
					  				 										  				 									 						  BTN_A=0;
 8006de4:	4b60      	ldr	r3, [pc, #384]	; (8006f68 <statemachine+0x2240>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	601a      	str	r2, [r3, #0]
					  				 					 break;
 8006dea:	e003      	b.n	8006df4 <statemachine+0x20cc>
					  				 					  break;
 8006dec:	bf00      	nop
 8006dee:	e1ca      	b.n	8007186 <statemachine+0x245e>
					  				 			  break;
 8006df0:	bf00      	nop
 8006df2:	e1c8      	b.n	8007186 <statemachine+0x245e>
					  				 					 break;
 8006df4:	bf00      	nop
					  break;
 8006df6:	e1c6      	b.n	8007186 <statemachine+0x245e>



					  				 case STATE_BARO:
					  									  ssd1306_Fill(Black);
 8006df8:	2000      	movs	r0, #0
 8006dfa:	f7fd f9ef 	bl	80041dc <ssd1306_Fill>
					  									  				  ssd1306_SetCursor(32,32);
 8006dfe:	2120      	movs	r1, #32
 8006e00:	2020      	movs	r0, #32
 8006e02:	f7fd fb2d 	bl	8004460 <ssd1306_SetCursor>
					  									  				  ssd1306_WriteString("baro",Font_6x8,White);
 8006e06:	4a4f      	ldr	r2, [pc, #316]	; (8006f44 <statemachine+0x221c>)
 8006e08:	2301      	movs	r3, #1
 8006e0a:	ca06      	ldmia	r2, {r1, r2}
 8006e0c:	4858      	ldr	r0, [pc, #352]	; (8006f70 <statemachine+0x2248>)
 8006e0e:	f7fd fb01 	bl	8004414 <ssd1306_WriteString>
					  									  				  switch(barostate){
 8006e12:	4b58      	ldr	r3, [pc, #352]	; (8006f74 <statemachine+0x224c>)
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <statemachine+0x20fa>
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	f000 80bc 	beq.w	8006f98 <statemachine+0x2270>
					  									  				 			  break;


					  									  				 				  }

					  									  break;
 8006e20:	e1b4      	b.n	800718c <statemachine+0x2464>
					  									  				 					  ssd1306_SetCursor(32,40);
 8006e22:	2128      	movs	r1, #40	; 0x28
 8006e24:	2020      	movs	r0, #32
 8006e26:	f7fd fb1b 	bl	8004460 <ssd1306_SetCursor>
					  									  				 					  ssd1306_WriteString("push B",Font_6x8,White);
 8006e2a:	4a46      	ldr	r2, [pc, #280]	; (8006f44 <statemachine+0x221c>)
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	ca06      	ldmia	r2, {r1, r2}
 8006e30:	4851      	ldr	r0, [pc, #324]	; (8006f78 <statemachine+0x2250>)
 8006e32:	f7fd faef 	bl	8004414 <ssd1306_WriteString>
					  									  									  if(BTN_A>=1){
 8006e36:	4b4c      	ldr	r3, [pc, #304]	; (8006f68 <statemachine+0x2240>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	dd0b      	ble.n	8006e56 <statemachine+0x212e>
					  									  											state++;
 8006e3e:	4b4f      	ldr	r3, [pc, #316]	; (8006f7c <statemachine+0x2254>)
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	3301      	adds	r3, #1
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	4b4d      	ldr	r3, [pc, #308]	; (8006f7c <statemachine+0x2254>)
 8006e48:	701a      	strb	r2, [r3, #0]
					  									  											BTN_A=0;
 8006e4a:	4b47      	ldr	r3, [pc, #284]	; (8006f68 <statemachine+0x2240>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	601a      	str	r2, [r3, #0]
					  									  											BTN_B=0;
 8006e50:	4b43      	ldr	r3, [pc, #268]	; (8006f60 <statemachine+0x2238>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]
					  									  									if(BTN_A_LONG>=1){
 8006e56:	4b4a      	ldr	r3, [pc, #296]	; (8006f80 <statemachine+0x2258>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	dd0e      	ble.n	8006e7c <statemachine+0x2154>
					  									  											state--;
 8006e5e:	4b47      	ldr	r3, [pc, #284]	; (8006f7c <statemachine+0x2254>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	4b45      	ldr	r3, [pc, #276]	; (8006f7c <statemachine+0x2254>)
 8006e68:	701a      	strb	r2, [r3, #0]
					  									  											BTN_A=0;
 8006e6a:	4b3f      	ldr	r3, [pc, #252]	; (8006f68 <statemachine+0x2240>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	601a      	str	r2, [r3, #0]
					  									  											BTN_B=0;
 8006e70:	4b3b      	ldr	r3, [pc, #236]	; (8006f60 <statemachine+0x2238>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]
					  									  											BTN_A_LONG=0;
 8006e76:	4b42      	ldr	r3, [pc, #264]	; (8006f80 <statemachine+0x2258>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	601a      	str	r2, [r3, #0]
					  									  				 					  if(BTN_B_LONG>=1){
 8006e7c:	4b3b      	ldr	r3, [pc, #236]	; (8006f6c <statemachine+0x2244>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f340 80d4 	ble.w	800702e <statemachine+0x2306>
					  									  				 					 hi2c1.Instance = I2C1;
 8006e86:	4b3f      	ldr	r3, [pc, #252]	; (8006f84 <statemachine+0x225c>)
 8006e88:	4a3f      	ldr	r2, [pc, #252]	; (8006f88 <statemachine+0x2260>)
 8006e8a:	601a      	str	r2, [r3, #0]
					  									  				 					  hi2c1.Init.Timing = 0x00202538;
 8006e8c:	4b3d      	ldr	r3, [pc, #244]	; (8006f84 <statemachine+0x225c>)
 8006e8e:	4a3f      	ldr	r2, [pc, #252]	; (8006f8c <statemachine+0x2264>)
 8006e90:	605a      	str	r2, [r3, #4]
					  									  				 					  hi2c1.Init.OwnAddress1 = 0;
 8006e92:	4b3c      	ldr	r3, [pc, #240]	; (8006f84 <statemachine+0x225c>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	609a      	str	r2, [r3, #8]
					  									  				 					  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e98:	4b3a      	ldr	r3, [pc, #232]	; (8006f84 <statemachine+0x225c>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	60da      	str	r2, [r3, #12]
					  									  				 					  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e9e:	4b39      	ldr	r3, [pc, #228]	; (8006f84 <statemachine+0x225c>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	611a      	str	r2, [r3, #16]
					  									  				 					  hi2c1.Init.OwnAddress2 = 0;
 8006ea4:	4b37      	ldr	r3, [pc, #220]	; (8006f84 <statemachine+0x225c>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	615a      	str	r2, [r3, #20]
					  									  				 					  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006eaa:	4b36      	ldr	r3, [pc, #216]	; (8006f84 <statemachine+0x225c>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	619a      	str	r2, [r3, #24]
					  									  				 					  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006eb0:	4b34      	ldr	r3, [pc, #208]	; (8006f84 <statemachine+0x225c>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	61da      	str	r2, [r3, #28]
					  									  				 					  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006eb6:	4b33      	ldr	r3, [pc, #204]	; (8006f84 <statemachine+0x225c>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	621a      	str	r2, [r3, #32]
					  									  				 					  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006ebc:	4831      	ldr	r0, [pc, #196]	; (8006f84 <statemachine+0x225c>)
 8006ebe:	f003 fa9d 	bl	800a3fc <HAL_I2C_Init>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <statemachine+0x21a6>
					  									  				 						i2cerrcheck=1;
 8006ec8:	4b31      	ldr	r3, [pc, #196]	; (8006f90 <statemachine+0x2268>)
 8006eca:	2201      	movs	r2, #1
 8006ecc:	601a      	str	r2, [r3, #0]
					  									  				 					  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006ece:	2100      	movs	r1, #0
 8006ed0:	482c      	ldr	r0, [pc, #176]	; (8006f84 <statemachine+0x225c>)
 8006ed2:	f004 f84d 	bl	800af70 <HAL_I2CEx_ConfigAnalogFilter>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <statemachine+0x21ba>
					  									  				 						i2cerrcheck=1;
 8006edc:	4b2c      	ldr	r3, [pc, #176]	; (8006f90 <statemachine+0x2268>)
 8006ede:	2201      	movs	r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]
					  									  				 					  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	4827      	ldr	r0, [pc, #156]	; (8006f84 <statemachine+0x225c>)
 8006ee6:	f004 f88e 	bl	800b006 <HAL_I2CEx_ConfigDigitalFilter>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <statemachine+0x21ce>
					  									  				 						i2cerrcheck=1;
 8006ef0:	4b27      	ldr	r3, [pc, #156]	; (8006f90 <statemachine+0x2268>)
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]
					  									  				 					  if(i2cerrcheck>=1){
 8006ef6:	4b26      	ldr	r3, [pc, #152]	; (8006f90 <statemachine+0x2268>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	dd0f      	ble.n	8006f1e <statemachine+0x21f6>
					  									  				 						ssd1306_Fill(Black);
 8006efe:	2000      	movs	r0, #0
 8006f00:	f7fd f96c 	bl	80041dc <ssd1306_Fill>
					  									  				 						 ssd1306_WriteString("problem",Font_6x8,White);
 8006f04:	4a0f      	ldr	r2, [pc, #60]	; (8006f44 <statemachine+0x221c>)
 8006f06:	2301      	movs	r3, #1
 8006f08:	ca06      	ldmia	r2, {r1, r2}
 8006f0a:	4822      	ldr	r0, [pc, #136]	; (8006f94 <statemachine+0x226c>)
 8006f0c:	f7fd fa82 	bl	8004414 <ssd1306_WriteString>
					  									  				 						ssd1306_UpdateScreen();
 8006f10:	f7fd f97c 	bl	800420c <ssd1306_UpdateScreen>
					  									  				 						HAL_Delay(1500);
 8006f14:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006f18:	f7fa fde5 	bl	8001ae6 <HAL_Delay>
 8006f1c:	e00b      	b.n	8006f36 <statemachine+0x220e>
					  									  				 						HAL_Delay(10);
 8006f1e:	200a      	movs	r0, #10
 8006f20:	f7fa fde1 	bl	8001ae6 <HAL_Delay>
					  									  				 						  barostate++;
 8006f24:	4b13      	ldr	r3, [pc, #76]	; (8006f74 <statemachine+0x224c>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	4b11      	ldr	r3, [pc, #68]	; (8006f74 <statemachine+0x224c>)
 8006f2e:	701a      	strb	r2, [r3, #0]
					  									  				 						PADS_continuous_init(&hi2c1);
 8006f30:	4814      	ldr	r0, [pc, #80]	; (8006f84 <statemachine+0x225c>)
 8006f32:	f7fa f835 	bl	8000fa0 <PADS_continuous_init>
					  									  				 					BTN_B_LONG=0;
 8006f36:	4b0d      	ldr	r3, [pc, #52]	; (8006f6c <statemachine+0x2244>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]
					  									  				 					BTN_A=0;
 8006f3c:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <statemachine+0x2240>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]
					  									  				 					  break;
 8006f42:	e074      	b.n	800702e <statemachine+0x2306>
 8006f44:	20000014 	.word	0x20000014
 8006f48:	08021974 	.word	0x08021974
 8006f4c:	200012c0 	.word	0x200012c0
 8006f50:	200008b0 	.word	0x200008b0
 8006f54:	0802197c 	.word	0x0802197c
 8006f58:	2000128c 	.word	0x2000128c
 8006f5c:	20001444 	.word	0x20001444
 8006f60:	2000087c 	.word	0x2000087c
 8006f64:	200005ef 	.word	0x200005ef
 8006f68:	20000878 	.word	0x20000878
 8006f6c:	20000cbc 	.word	0x20000cbc
 8006f70:	08021990 	.word	0x08021990
 8006f74:	200005f0 	.word	0x200005f0
 8006f78:	0802194c 	.word	0x0802194c
 8006f7c:	200005e8 	.word	0x200005e8
 8006f80:	20000cc0 	.word	0x20000cc0
 8006f84:	20000504 	.word	0x20000504
 8006f88:	40005400 	.word	0x40005400
 8006f8c:	00202538 	.word	0x00202538
 8006f90:	200012c4 	.word	0x200012c4
 8006f94:	08021954 	.word	0x08021954
					  									  				 					 ssd1306_SetCursor(32,40);
 8006f98:	2128      	movs	r1, #40	; 0x28
 8006f9a:	2020      	movs	r0, #32
 8006f9c:	f7fd fa60 	bl	8004460 <ssd1306_SetCursor>
					  									  				 					ssd1306_WriteString("read",Font_6x8,White);
 8006fa0:	4a7e      	ldr	r2, [pc, #504]	; (800719c <statemachine+0x2474>)
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	ca06      	ldmia	r2, {r1, r2}
 8006fa6:	487e      	ldr	r0, [pc, #504]	; (80071a0 <statemachine+0x2478>)
 8006fa8:	f7fd fa34 	bl	8004414 <ssd1306_WriteString>
					  									  				 					if(i2cerrcheck==0){
 8006fac:	4b7d      	ldr	r3, [pc, #500]	; (80071a4 <statemachine+0x247c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d128      	bne.n	8007006 <statemachine+0x22de>
					  									  				 					PADS_continuous_read(&hi2c1);
 8006fb4:	487c      	ldr	r0, [pc, #496]	; (80071a8 <statemachine+0x2480>)
 8006fb6:	f7fa f85b 	bl	8001070 <PADS_continuous_read>
					  									  				 				ssd1306_SetCursor(32,48);
 8006fba:	2130      	movs	r1, #48	; 0x30
 8006fbc:	2020      	movs	r0, #32
 8006fbe:	f7fd fa4f 	bl	8004460 <ssd1306_SetCursor>
					  									  				 			snprintf((char  *)bufferscreen,50,"t=%d",inttemp);
 8006fc2:	4b7a      	ldr	r3, [pc, #488]	; (80071ac <statemachine+0x2484>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a7a      	ldr	r2, [pc, #488]	; (80071b0 <statemachine+0x2488>)
 8006fc8:	2132      	movs	r1, #50	; 0x32
 8006fca:	487a      	ldr	r0, [pc, #488]	; (80071b4 <statemachine+0x248c>)
 8006fcc:	f015 feca 	bl	801cd64 <sniprintf>
					  									  				 			ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 8006fd0:	4a72      	ldr	r2, [pc, #456]	; (800719c <statemachine+0x2474>)
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	ca06      	ldmia	r2, {r1, r2}
 8006fd6:	4877      	ldr	r0, [pc, #476]	; (80071b4 <statemachine+0x248c>)
 8006fd8:	f7fd fa1c 	bl	8004414 <ssd1306_WriteString>
					  									  				 			snprintf((char  *)bufferscreen,50,"p=%d",intpress);
 8006fdc:	4b76      	ldr	r3, [pc, #472]	; (80071b8 <statemachine+0x2490>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a76      	ldr	r2, [pc, #472]	; (80071bc <statemachine+0x2494>)
 8006fe2:	2132      	movs	r1, #50	; 0x32
 8006fe4:	4873      	ldr	r0, [pc, #460]	; (80071b4 <statemachine+0x248c>)
 8006fe6:	f015 febd 	bl	801cd64 <sniprintf>
					  									  				 		ssd1306_SetCursor(32,56);
 8006fea:	2138      	movs	r1, #56	; 0x38
 8006fec:	2020      	movs	r0, #32
 8006fee:	f7fd fa37 	bl	8004460 <ssd1306_SetCursor>
					  									  				 	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 8006ff2:	4a6a      	ldr	r2, [pc, #424]	; (800719c <statemachine+0x2474>)
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	ca06      	ldmia	r2, {r1, r2}
 8006ff8:	486e      	ldr	r0, [pc, #440]	; (80071b4 <statemachine+0x248c>)
 8006ffa:	f7fd fa0b 	bl	8004414 <ssd1306_WriteString>
					  									  				 	HAL_Delay(500);
 8006ffe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007002:	f7fa fd70 	bl	8001ae6 <HAL_Delay>
					  									  				 					if(BTN_B_LONG>=1){
 8007006:	4b6e      	ldr	r3, [pc, #440]	; (80071c0 <statemachine+0x2498>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	dd11      	ble.n	8007032 <statemachine+0x230a>
					  									  				 					HAL_I2C_DeInit(&hi2c1);
 800700e:	4866      	ldr	r0, [pc, #408]	; (80071a8 <statemachine+0x2480>)
 8007010:	f003 fa8f 	bl	800a532 <HAL_I2C_DeInit>
					  									  					 						barostate--;
 8007014:	4b6b      	ldr	r3, [pc, #428]	; (80071c4 <statemachine+0x249c>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	3b01      	subs	r3, #1
 800701a:	b2da      	uxtb	r2, r3
 800701c:	4b69      	ldr	r3, [pc, #420]	; (80071c4 <statemachine+0x249c>)
 800701e:	701a      	strb	r2, [r3, #0]
					  									  					 						  BTN_B_LONG=0;
 8007020:	4b67      	ldr	r3, [pc, #412]	; (80071c0 <statemachine+0x2498>)
 8007022:	2200      	movs	r2, #0
 8007024:	601a      	str	r2, [r3, #0]
					  									  					 						  BTN_A=0;
 8007026:	4b68      	ldr	r3, [pc, #416]	; (80071c8 <statemachine+0x24a0>)
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]
					  									  				 			  break;
 800702c:	e001      	b.n	8007032 <statemachine+0x230a>
					  									  				 					  break;
 800702e:	bf00      	nop
 8007030:	e0ac      	b.n	800718c <statemachine+0x2464>
					  									  				 			  break;
 8007032:	bf00      	nop
					  									  break;
 8007034:	e0aa      	b.n	800718c <statemachine+0x2464>


				  case STATE_TEST:
					  ssd1306_Fill(Black);
 8007036:	2000      	movs	r0, #0
 8007038:	f7fd f8d0 	bl	80041dc <ssd1306_Fill>
					  ssd1306_SetCursor(32,32);
 800703c:	2120      	movs	r1, #32
 800703e:	2020      	movs	r0, #32
 8007040:	f7fd fa0e 	bl	8004460 <ssd1306_SetCursor>
					  ssd1306_WriteString("test",Font_6x8,White);
 8007044:	4a55      	ldr	r2, [pc, #340]	; (800719c <statemachine+0x2474>)
 8007046:	2301      	movs	r3, #1
 8007048:	ca06      	ldmia	r2, {r1, r2}
 800704a:	4860      	ldr	r0, [pc, #384]	; (80071cc <statemachine+0x24a4>)
 800704c:	f7fd f9e2 	bl	8004414 <ssd1306_WriteString>
					  memcpy((char  *)longbufferscreen,"ceci est un text plutot long, qui ne s'arrette toujours pas et pourtant il s'affiche complet",sizeof("ceci est un text plutot long, qui ne s'arrette toujours pas et pourtant il s'affiche complet"));
 8007050:	225d      	movs	r2, #93	; 0x5d
 8007052:	495f      	ldr	r1, [pc, #380]	; (80071d0 <statemachine+0x24a8>)
 8007054:	485f      	ldr	r0, [pc, #380]	; (80071d4 <statemachine+0x24ac>)
 8007056:	f016 f838 	bl	801d0ca <memcpy>
					  scrolltextmax=scrollText(longbufferscreen,Font_7x10,32,40,32,offsetforscroltext);
 800705a:	4b5f      	ldr	r3, [pc, #380]	; (80071d8 <statemachine+0x24b0>)
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	4a5f      	ldr	r2, [pc, #380]	; (80071dc <statemachine+0x24b4>)
 8007060:	9302      	str	r3, [sp, #8]
 8007062:	2320      	movs	r3, #32
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	2328      	movs	r3, #40	; 0x28
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	2320      	movs	r3, #32
 800706c:	ca06      	ldmia	r2, {r1, r2}
 800706e:	4859      	ldr	r0, [pc, #356]	; (80071d4 <statemachine+0x24ac>)
 8007070:	f7fd fdee 	bl	8004c50 <scrollText>
 8007074:	4603      	mov	r3, r0
 8007076:	461a      	mov	r2, r3
 8007078:	4b59      	ldr	r3, [pc, #356]	; (80071e0 <statemachine+0x24b8>)
 800707a:	801a      	strh	r2, [r3, #0]
					  ssd1306_SetCursor(32,55);
 800707c:	2137      	movs	r1, #55	; 0x37
 800707e:	2020      	movs	r0, #32
 8007080:	f7fd f9ee 	bl	8004460 <ssd1306_SetCursor>
					  snprintf((char *)bufferscreen,50,"%d",offsetforscroltext);
 8007084:	4b54      	ldr	r3, [pc, #336]	; (80071d8 <statemachine+0x24b0>)
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	4a56      	ldr	r2, [pc, #344]	; (80071e4 <statemachine+0x24bc>)
 800708a:	2132      	movs	r1, #50	; 0x32
 800708c:	4849      	ldr	r0, [pc, #292]	; (80071b4 <statemachine+0x248c>)
 800708e:	f015 fe69 	bl	801cd64 <sniprintf>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8007092:	4a42      	ldr	r2, [pc, #264]	; (800719c <statemachine+0x2474>)
 8007094:	2301      	movs	r3, #1
 8007096:	ca06      	ldmia	r2, {r1, r2}
 8007098:	4846      	ldr	r0, [pc, #280]	; (80071b4 <statemachine+0x248c>)
 800709a:	f7fd f9bb 	bl	8004414 <ssd1306_WriteString>


					  if(offsetforscroltext>=scrolltextmax+16){
 800709e:	4b50      	ldr	r3, [pc, #320]	; (80071e0 <statemachine+0x24b8>)
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	330f      	adds	r3, #15
 80070a4:	4a4c      	ldr	r2, [pc, #304]	; (80071d8 <statemachine+0x24b0>)
 80070a6:	8812      	ldrh	r2, [r2, #0]
 80070a8:	4293      	cmp	r3, r2
 80070aa:	da02      	bge.n	80070b2 <statemachine+0x238a>
					  	  offsetforscroltext=0;
 80070ac:	4b4a      	ldr	r3, [pc, #296]	; (80071d8 <statemachine+0x24b0>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	801a      	strh	r2, [r3, #0]





					  if(BTN_A>=1){
 80070b2:	4b45      	ldr	r3, [pc, #276]	; (80071c8 <statemachine+0x24a0>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	dd41      	ble.n	800713e <statemachine+0x2416>
					 				 									state--;
 80070ba:	4b4b      	ldr	r3, [pc, #300]	; (80071e8 <statemachine+0x24c0>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	3b01      	subs	r3, #1
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	4b49      	ldr	r3, [pc, #292]	; (80071e8 <statemachine+0x24c0>)
 80070c4:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80070c6:	4b48      	ldr	r3, [pc, #288]	; (80071e8 <statemachine+0x24c0>)
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	4b46      	ldr	r3, [pc, #280]	; (80071e8 <statemachine+0x24c0>)
 80070d0:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80070d2:	4b45      	ldr	r3, [pc, #276]	; (80071e8 <statemachine+0x24c0>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	4b43      	ldr	r3, [pc, #268]	; (80071e8 <statemachine+0x24c0>)
 80070dc:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80070de:	4b42      	ldr	r3, [pc, #264]	; (80071e8 <statemachine+0x24c0>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	4b40      	ldr	r3, [pc, #256]	; (80071e8 <statemachine+0x24c0>)
 80070e8:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80070ea:	4b3f      	ldr	r3, [pc, #252]	; (80071e8 <statemachine+0x24c0>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	4b3d      	ldr	r3, [pc, #244]	; (80071e8 <statemachine+0x24c0>)
 80070f4:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80070f6:	4b3c      	ldr	r3, [pc, #240]	; (80071e8 <statemachine+0x24c0>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	4b3a      	ldr	r3, [pc, #232]	; (80071e8 <statemachine+0x24c0>)
 8007100:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8007102:	4b39      	ldr	r3, [pc, #228]	; (80071e8 <statemachine+0x24c0>)
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	3b01      	subs	r3, #1
 8007108:	b2da      	uxtb	r2, r3
 800710a:	4b37      	ldr	r3, [pc, #220]	; (80071e8 <statemachine+0x24c0>)
 800710c:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 800710e:	4b36      	ldr	r3, [pc, #216]	; (80071e8 <statemachine+0x24c0>)
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	3b01      	subs	r3, #1
 8007114:	b2da      	uxtb	r2, r3
 8007116:	4b34      	ldr	r3, [pc, #208]	; (80071e8 <statemachine+0x24c0>)
 8007118:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 800711a:	4b33      	ldr	r3, [pc, #204]	; (80071e8 <statemachine+0x24c0>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	3b01      	subs	r3, #1
 8007120:	b2da      	uxtb	r2, r3
 8007122:	4b31      	ldr	r3, [pc, #196]	; (80071e8 <statemachine+0x24c0>)
 8007124:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8007126:	4b30      	ldr	r3, [pc, #192]	; (80071e8 <statemachine+0x24c0>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	3b01      	subs	r3, #1
 800712c:	b2da      	uxtb	r2, r3
 800712e:	4b2e      	ldr	r3, [pc, #184]	; (80071e8 <statemachine+0x24c0>)
 8007130:	701a      	strb	r2, [r3, #0]
					 				 									  			 	BTN_A=0;
 8007132:	4b25      	ldr	r3, [pc, #148]	; (80071c8 <statemachine+0x24a0>)
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]
					 				 									  			 	BTN_B=0;
 8007138:	4b2c      	ldr	r3, [pc, #176]	; (80071ec <statemachine+0x24c4>)
 800713a:	2200      	movs	r2, #0
 800713c:	601a      	str	r2, [r3, #0]
					 				 									  	}
					  if(BTN_A_LONG>=1){
 800713e:	4b2c      	ldr	r3, [pc, #176]	; (80071f0 <statemachine+0x24c8>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	dd21      	ble.n	800718a <statemachine+0x2462>
					  				 									 									  			 	state--;
 8007146:	4b28      	ldr	r3, [pc, #160]	; (80071e8 <statemachine+0x24c0>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	3b01      	subs	r3, #1
 800714c:	b2da      	uxtb	r2, r3
 800714e:	4b26      	ldr	r3, [pc, #152]	; (80071e8 <statemachine+0x24c0>)
 8007150:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 8007152:	4b1d      	ldr	r3, [pc, #116]	; (80071c8 <statemachine+0x24a0>)
 8007154:	2200      	movs	r2, #0
 8007156:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 8007158:	4b24      	ldr	r3, [pc, #144]	; (80071ec <statemachine+0x24c4>)
 800715a:	2200      	movs	r2, #0
 800715c:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 800715e:	4b24      	ldr	r3, [pc, #144]	; (80071f0 <statemachine+0x24c8>)
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]
					  				 									 									  	}



					  break;
 8007164:	e011      	b.n	800718a <statemachine+0x2462>
				  break;
 8007166:	bf00      	nop
 8007168:	e010      	b.n	800718c <statemachine+0x2464>
			  break;
 800716a:	bf00      	nop
 800716c:	e00e      	b.n	800718c <statemachine+0x2464>
			  break;
 800716e:	bf00      	nop
 8007170:	e00c      	b.n	800718c <statemachine+0x2464>
			  break;
 8007172:	bf00      	nop
 8007174:	e00a      	b.n	800718c <statemachine+0x2464>
			  break;
 8007176:	bf00      	nop
 8007178:	e008      	b.n	800718c <statemachine+0x2464>
				  break;
 800717a:	bf00      	nop
 800717c:	e006      	b.n	800718c <statemachine+0x2464>
				  break;
 800717e:	bf00      	nop
 8007180:	e004      	b.n	800718c <statemachine+0x2464>
					  break;
 8007182:	bf00      	nop
 8007184:	e002      	b.n	800718c <statemachine+0x2464>
					  break;
 8007186:	bf00      	nop
 8007188:	e000      	b.n	800718c <statemachine+0x2464>
					  break;
 800718a:	bf00      	nop
	}
return ;
 800718c:	bf00      	nop
 800718e:	bf00      	nop
}
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	ecbd 8b02 	vpop	{d8}
 8007198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800719a:	bf00      	nop
 800719c:	20000014 	.word	0x20000014
 80071a0:	08021998 	.word	0x08021998
 80071a4:	200012c4 	.word	0x200012c4
 80071a8:	20000504 	.word	0x20000504
 80071ac:	20000398 	.word	0x20000398
 80071b0:	080219a0 	.word	0x080219a0
 80071b4:	20000ad8 	.word	0x20000ad8
 80071b8:	2000039c 	.word	0x2000039c
 80071bc:	08021898 	.word	0x08021898
 80071c0:	20000cbc 	.word	0x20000cbc
 80071c4:	200005f0 	.word	0x200005f0
 80071c8:	20000878 	.word	0x20000878
 80071cc:	080219a8 	.word	0x080219a8
 80071d0:	080219b0 	.word	0x080219b0
 80071d4:	20000b0c 	.word	0x20000b0c
 80071d8:	20000c4c 	.word	0x20000c4c
 80071dc:	2000001c 	.word	0x2000001c
 80071e0:	20000c4e 	.word	0x20000c4e
 80071e4:	08021a10 	.word	0x08021a10
 80071e8:	200005e8 	.word	0x200005e8
 80071ec:	2000087c 	.word	0x2000087c
 80071f0:	20000cc0 	.word	0x20000cc0

080071f4 <LL_AHB3_GRP1_EnableClock>:
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80071fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4313      	orrs	r3, r2
 800720a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800720c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4013      	ands	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007218:	68fb      	ldr	r3, [r7, #12]
}
 800721a:	bf00      	nop
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	af00      	add	r7, sp, #0



  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800722a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800722e:	f7ff ffe1 	bl	80071f4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8007232:	2200      	movs	r2, #0
 8007234:	2100      	movs	r1, #0
 8007236:	202e      	movs	r0, #46	; 0x2e
 8007238:	f002 f9f3 	bl	8009622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800723c:	202e      	movs	r0, #46	; 0x2e
 800723e:	f002 fa0a 	bl	8009656 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007242:	bf00      	nop
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   ssd1306_SetCursor(32, 20);
 800724c:	2114      	movs	r1, #20
 800724e:	2020      	movs	r0, #32
 8007250:	f7fd f906 	bl	8004460 <ssd1306_SetCursor>
	   	  ssd1306_WriteString("problem1", Font_7x10, White);
 8007254:	4a04      	ldr	r2, [pc, #16]	; (8007268 <NMI_Handler+0x20>)
 8007256:	2301      	movs	r3, #1
 8007258:	ca06      	ldmia	r2, {r1, r2}
 800725a:	4804      	ldr	r0, [pc, #16]	; (800726c <NMI_Handler+0x24>)
 800725c:	f7fd f8da 	bl	8004414 <ssd1306_WriteString>
	   	  ssd1306_UpdateScreen();
 8007260:	f7fc ffd4 	bl	800420c <ssd1306_UpdateScreen>
	   ssd1306_SetCursor(32, 20);
 8007264:	e7f2      	b.n	800724c <NMI_Handler+0x4>
 8007266:	bf00      	nop
 8007268:	2000001c 	.word	0x2000001c
 800726c:	08021a14 	.word	0x08021a14

08007270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8007274:	2114      	movs	r1, #20
 8007276:	2020      	movs	r0, #32
 8007278:	f7fd f8f2 	bl	8004460 <ssd1306_SetCursor>
	  ssd1306_WriteString("problem1", Font_7x10, White);
 800727c:	4a04      	ldr	r2, [pc, #16]	; (8007290 <HardFault_Handler+0x20>)
 800727e:	2301      	movs	r3, #1
 8007280:	ca06      	ldmia	r2, {r1, r2}
 8007282:	4804      	ldr	r0, [pc, #16]	; (8007294 <HardFault_Handler+0x24>)
 8007284:	f7fd f8c6 	bl	8004414 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8007288:	f7fc ffc0 	bl	800420c <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 800728c:	e7f2      	b.n	8007274 <HardFault_Handler+0x4>
 800728e:	bf00      	nop
 8007290:	2000001c 	.word	0x2000001c
 8007294:	08021a14 	.word	0x08021a14

08007298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 800729c:	2114      	movs	r1, #20
 800729e:	2020      	movs	r0, #32
 80072a0:	f7fd f8de 	bl	8004460 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("problem1", Font_7x10, White);
 80072a4:	4a04      	ldr	r2, [pc, #16]	; (80072b8 <MemManage_Handler+0x20>)
 80072a6:	2301      	movs	r3, #1
 80072a8:	ca06      	ldmia	r2, {r1, r2}
 80072aa:	4804      	ldr	r0, [pc, #16]	; (80072bc <MemManage_Handler+0x24>)
 80072ac:	f7fd f8b2 	bl	8004414 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 80072b0:	f7fc ffac 	bl	800420c <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80072b4:	e7f2      	b.n	800729c <MemManage_Handler+0x4>
 80072b6:	bf00      	nop
 80072b8:	2000001c 	.word	0x2000001c
 80072bc:	08021a14 	.word	0x08021a14

080072c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80072c4:	2114      	movs	r1, #20
 80072c6:	2020      	movs	r0, #32
 80072c8:	f7fd f8ca 	bl	8004460 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("problem1", Font_7x10, White);
 80072cc:	4a04      	ldr	r2, [pc, #16]	; (80072e0 <BusFault_Handler+0x20>)
 80072ce:	2301      	movs	r3, #1
 80072d0:	ca06      	ldmia	r2, {r1, r2}
 80072d2:	4804      	ldr	r0, [pc, #16]	; (80072e4 <BusFault_Handler+0x24>)
 80072d4:	f7fd f89e 	bl	8004414 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 80072d8:	f7fc ff98 	bl	800420c <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80072dc:	e7f2      	b.n	80072c4 <BusFault_Handler+0x4>
 80072de:	bf00      	nop
 80072e0:	2000001c 	.word	0x2000001c
 80072e4:	08021a14 	.word	0x08021a14

080072e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80072ec:	2114      	movs	r1, #20
 80072ee:	2020      	movs	r0, #32
 80072f0:	f7fd f8b6 	bl	8004460 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("problem1", Font_7x10, White);
 80072f4:	4a04      	ldr	r2, [pc, #16]	; (8007308 <UsageFault_Handler+0x20>)
 80072f6:	2301      	movs	r3, #1
 80072f8:	ca06      	ldmia	r2, {r1, r2}
 80072fa:	4804      	ldr	r0, [pc, #16]	; (800730c <UsageFault_Handler+0x24>)
 80072fc:	f7fd f88a 	bl	8004414 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8007300:	f7fc ff84 	bl	800420c <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8007304:	e7f2      	b.n	80072ec <UsageFault_Handler+0x4>
 8007306:	bf00      	nop
 8007308:	2000001c 	.word	0x2000001c
 800730c:	08021a14 	.word	0x08021a14

08007310 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007310:	b480      	push	{r7}
 8007312:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007314:	bf00      	nop
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800731e:	b480      	push	{r7}
 8007320:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007322:	bf00      	nop
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800732c:	b480      	push	{r7}
 800732e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007330:	bf00      	nop
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800733e:	f000 ff7d 	bl	800823c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007342:	bf00      	nop
 8007344:	bd80      	pop	{r7, pc}

08007346 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800734a:	f7fb f82d 	bl	80023a8 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800734e:	bf00      	nop
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007358:	4802      	ldr	r0, [pc, #8]	; (8007364 <DMA1_Channel1_IRQHandler+0x10>)
 800735a:	f002 fc38 	bl	8009bce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800735e:	bf00      	nop
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20000404 	.word	0x20000404

08007368 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800736c:	4802      	ldr	r0, [pc, #8]	; (8007378 <DMA1_Channel2_IRQHandler+0x10>)
 800736e:	f002 fc2e 	bl	8009bce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007372:	bf00      	nop
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	200014d8 	.word	0x200014d8

0800737c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8007380:	4802      	ldr	r0, [pc, #8]	; (800738c <DMA1_Channel3_IRQHandler+0x10>)
 8007382:	f002 fc24 	bl	8009bce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007386:	bf00      	nop
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20000dbc 	.word	0x20000dbc

08007390 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8007394:	4802      	ldr	r0, [pc, #8]	; (80073a0 <DMA1_Channel4_IRQHandler+0x10>)
 8007396:	f002 fc1a 	bl	8009bce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800739a:	bf00      	nop
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	20000e1c 	.word	0x20000e1c

080073a4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80073a8:	4802      	ldr	r0, [pc, #8]	; (80073b4 <USB_LP_IRQHandler+0x10>)
 80073aa:	f004 f801 	bl	800b3b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80073ae:	bf00      	nop
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20002b40 	.word	0x20002b40

080073b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80073bc:	4803      	ldr	r0, [pc, #12]	; (80073cc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80073be:	f008 fdce 	bl	800ff5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  updatedate();
 80073c2:	f000 fa6d 	bl	80078a0 <updatedate>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80073c6:	bf00      	nop
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20001318 	.word	0x20001318

080073d0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80073d4:	4806      	ldr	r0, [pc, #24]	; (80073f0 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>)
 80073d6:	f008 fdc2 	bl	800ff5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  cptdoubledonnee+=1;
 80073da:	4b06      	ldr	r3, [pc, #24]	; (80073f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x24>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3301      	adds	r3, #1
 80073e0:	4a04      	ldr	r2, [pc, #16]	; (80073f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x24>)
 80073e2:	6013      	str	r3, [r2, #0]
  enablewrite=1;
 80073e4:	4b04      	ldr	r3, [pc, #16]	; (80073f8 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 80073e6:	2201      	movs	r2, #1
 80073e8:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80073ea:	bf00      	nop
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	20001364 	.word	0x20001364
 80073f4:	20000c80 	.word	0x20000c80
 80073f8:	20000ca0 	.word	0x20000ca0

080073fc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007400:	4802      	ldr	r0, [pc, #8]	; (800740c <SPI1_IRQHandler+0x10>)
 8007402:	f008 f83f 	bl	800f484 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007406:	bf00      	nop
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	20000d58 	.word	0x20000d58

08007410 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8007414:	4802      	ldr	r0, [pc, #8]	; (8007420 <LPUART1_IRQHandler+0x10>)
 8007416:	f009 fbc7 	bl	8010ba8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800741a:	bf00      	nop
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	200013b0 	.word	0x200013b0

08007424 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8007428:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800742c:	f002 ffaa 	bl	800a384 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007430:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007434:	f002 ffa6 	bl	800a384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007438:	bf00      	nop
 800743a:	bd80      	pop	{r7, pc}

0800743c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8007440:	f012 fc82 	bl	8019d48 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8007444:	bf00      	nop
 8007446:	bd80      	pop	{r7, pc}

08007448 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800744c:	f012 fcb2 	bl	8019db4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8007450:	bf00      	nop
 8007452:	bd80      	pop	{r7, pc}

08007454 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8007458:	f002 ffac 	bl	800a3b4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800745c:	bf00      	nop
 800745e:	bd80      	pop	{r7, pc}

08007460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007460:	b480      	push	{r7}
 8007462:	af00      	add	r7, sp, #0
  return 1;
 8007464:	2301      	movs	r3, #1
}
 8007466:	4618      	mov	r0, r3
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <_kill>:

int _kill(int pid, int sig)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800747a:	f015 fdf1 	bl	801d060 <__errno>
 800747e:	4603      	mov	r3, r0
 8007480:	2216      	movs	r2, #22
 8007482:	601a      	str	r2, [r3, #0]
  return -1;
 8007484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <_exit>:

void _exit (int status)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007498:	f04f 31ff 	mov.w	r1, #4294967295
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff ffe7 	bl	8007470 <_kill>
  while (1) {}    /* Make sure we hang here */
 80074a2:	e7fe      	b.n	80074a2 <_exit+0x12>

080074a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074b0:	2300      	movs	r3, #0
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	e00a      	b.n	80074cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80074b6:	f3af 8000 	nop.w
 80074ba:	4601      	mov	r1, r0
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	60ba      	str	r2, [r7, #8]
 80074c2:	b2ca      	uxtb	r2, r1
 80074c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	3301      	adds	r3, #1
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	dbf0      	blt.n	80074b6 <_read+0x12>
  }

  return len;
 80074d4:	687b      	ldr	r3, [r7, #4]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b086      	sub	sp, #24
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074ea:	2300      	movs	r3, #0
 80074ec:	617b      	str	r3, [r7, #20]
 80074ee:	e009      	b.n	8007504 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	60ba      	str	r2, [r7, #8]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	3301      	adds	r3, #1
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	429a      	cmp	r2, r3
 800750a:	dbf1      	blt.n	80074f0 <_write+0x12>
  }
  return len;
 800750c:	687b      	ldr	r3, [r7, #4]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <_close>:

int _close(int file)
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800751e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007522:	4618      	mov	r0, r3
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800753e:	605a      	str	r2, [r3, #4]
  return 0;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <_isatty>:

int _isatty(int file)
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007556:	2301      	movs	r3, #1
}
 8007558:	4618      	mov	r0, r3
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
	...

08007580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007588:	4a14      	ldr	r2, [pc, #80]	; (80075dc <_sbrk+0x5c>)
 800758a:	4b15      	ldr	r3, [pc, #84]	; (80075e0 <_sbrk+0x60>)
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007594:	4b13      	ldr	r3, [pc, #76]	; (80075e4 <_sbrk+0x64>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d102      	bne.n	80075a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800759c:	4b11      	ldr	r3, [pc, #68]	; (80075e4 <_sbrk+0x64>)
 800759e:	4a12      	ldr	r2, [pc, #72]	; (80075e8 <_sbrk+0x68>)
 80075a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80075a2:	4b10      	ldr	r3, [pc, #64]	; (80075e4 <_sbrk+0x64>)
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4413      	add	r3, r2
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d207      	bcs.n	80075c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80075b0:	f015 fd56 	bl	801d060 <__errno>
 80075b4:	4603      	mov	r3, r0
 80075b6:	220c      	movs	r2, #12
 80075b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80075ba:	f04f 33ff 	mov.w	r3, #4294967295
 80075be:	e009      	b.n	80075d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80075c0:	4b08      	ldr	r3, [pc, #32]	; (80075e4 <_sbrk+0x64>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80075c6:	4b07      	ldr	r3, [pc, #28]	; (80075e4 <_sbrk+0x64>)
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4413      	add	r3, r2
 80075ce:	4a05      	ldr	r2, [pc, #20]	; (80075e4 <_sbrk+0x64>)
 80075d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80075d2:	68fb      	ldr	r3, [r7, #12]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	20030000 	.word	0x20030000
 80075e0:	00000400 	.word	0x00000400
 80075e4:	200012c8 	.word	0x200012c8
 80075e8:	20003230 	.word	0x20003230

080075ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80075f0:	4b24      	ldr	r3, [pc, #144]	; (8007684 <SystemInit+0x98>)
 80075f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f6:	4a23      	ldr	r2, [pc, #140]	; (8007684 <SystemInit+0x98>)
 80075f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800760a:	f043 0301 	orr.w	r3, r3, #1
 800760e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8007610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007614:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8007618:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800761a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007624:	4b18      	ldr	r3, [pc, #96]	; (8007688 <SystemInit+0x9c>)
 8007626:	4013      	ands	r3, r2
 8007628:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800762a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800762e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007636:	f023 0305 	bic.w	r3, r3, #5
 800763a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800763e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007642:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007646:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800764a:	f023 0301 	bic.w	r3, r3, #1
 800764e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8007652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007656:	4a0d      	ldr	r2, [pc, #52]	; (800768c <SystemInit+0xa0>)
 8007658:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800765a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800765e:	4a0b      	ldr	r2, [pc, #44]	; (800768c <SystemInit+0xa0>)
 8007660:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800766c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007670:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007676:	2200      	movs	r2, #0
 8007678:	619a      	str	r2, [r3, #24]
}
 800767a:	bf00      	nop
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	e000ed00 	.word	0xe000ed00
 8007688:	faf6fefb 	.word	0xfaf6fefb
 800768c:	22041000 	.word	0x22041000

08007690 <LL_APB1_GRP1_EnableClock>:
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800769c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800769e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80076a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4013      	ands	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80076b4:	68fb      	ldr	r3, [r7, #12]
}
 80076b6:	bf00      	nop
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <LL_APB2_GRP1_EnableClock>:
{
 80076c2:	b480      	push	{r7}
 80076c4:	b085      	sub	sp, #20
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80076ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80076d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80076da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4013      	ands	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80076e6:	68fb      	ldr	r3, [r7, #12]
}
 80076e8:	bf00      	nop
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80076fa:	f107 0310 	add.w	r3, r7, #16
 80076fe:	2200      	movs	r2, #0
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	605a      	str	r2, [r3, #4]
 8007704:	609a      	str	r2, [r3, #8]
 8007706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007708:	1d3b      	adds	r3, r7, #4
 800770a:	2200      	movs	r2, #0
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	605a      	str	r2, [r3, #4]
 8007710:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007712:	4b1e      	ldr	r3, [pc, #120]	; (800778c <MX_TIM2_Init+0x98>)
 8007714:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007718:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 800771a:	4b1c      	ldr	r3, [pc, #112]	; (800778c <MX_TIM2_Init+0x98>)
 800771c:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8007720:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007722:	4b1a      	ldr	r3, [pc, #104]	; (800778c <MX_TIM2_Init+0x98>)
 8007724:	2200      	movs	r2, #0
 8007726:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8007728:	4b18      	ldr	r3, [pc, #96]	; (800778c <MX_TIM2_Init+0x98>)
 800772a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800772e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007730:	4b16      	ldr	r3, [pc, #88]	; (800778c <MX_TIM2_Init+0x98>)
 8007732:	2200      	movs	r2, #0
 8007734:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007736:	4b15      	ldr	r3, [pc, #84]	; (800778c <MX_TIM2_Init+0x98>)
 8007738:	2200      	movs	r2, #0
 800773a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800773c:	4813      	ldr	r0, [pc, #76]	; (800778c <MX_TIM2_Init+0x98>)
 800773e:	f008 faf3 	bl	800fd28 <HAL_TIM_Base_Init>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8007748:	f7fb fc94 	bl	8003074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800774c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007752:	f107 0310 	add.w	r3, r7, #16
 8007756:	4619      	mov	r1, r3
 8007758:	480c      	ldr	r0, [pc, #48]	; (800778c <MX_TIM2_Init+0x98>)
 800775a:	f008 fd07 	bl	801016c <HAL_TIM_ConfigClockSource>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8007764:	f7fb fc86 	bl	8003074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007768:	2320      	movs	r3, #32
 800776a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800776c:	2300      	movs	r3, #0
 800776e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007770:	1d3b      	adds	r3, r7, #4
 8007772:	4619      	mov	r1, r3
 8007774:	4805      	ldr	r0, [pc, #20]	; (800778c <MX_TIM2_Init+0x98>)
 8007776:	f008 ff01 	bl	801057c <HAL_TIMEx_MasterConfigSynchronization>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8007780:	f7fb fc78 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007784:	bf00      	nop
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	200012cc 	.word	0x200012cc

08007790 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8007794:	4b10      	ldr	r3, [pc, #64]	; (80077d8 <MX_TIM16_Init+0x48>)
 8007796:	4a11      	ldr	r2, [pc, #68]	; (80077dc <MX_TIM16_Init+0x4c>)
 8007798:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000-1;
 800779a:	4b0f      	ldr	r3, [pc, #60]	; (80077d8 <MX_TIM16_Init+0x48>)
 800779c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80077a0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077a2:	4b0d      	ldr	r3, [pc, #52]	; (80077d8 <MX_TIM16_Init+0x48>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80077a8:	4b0b      	ldr	r3, [pc, #44]	; (80077d8 <MX_TIM16_Init+0x48>)
 80077aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80077ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077b0:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <MX_TIM16_Init+0x48>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80077b6:	4b08      	ldr	r3, [pc, #32]	; (80077d8 <MX_TIM16_Init+0x48>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077bc:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <MX_TIM16_Init+0x48>)
 80077be:	2200      	movs	r2, #0
 80077c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80077c2:	4805      	ldr	r0, [pc, #20]	; (80077d8 <MX_TIM16_Init+0x48>)
 80077c4:	f008 fab0 	bl	800fd28 <HAL_TIM_Base_Init>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80077ce:	f7fb fc51 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80077d2:	bf00      	nop
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	20001318 	.word	0x20001318
 80077dc:	40014400 	.word	0x40014400

080077e0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80077e4:	4b10      	ldr	r3, [pc, #64]	; (8007828 <MX_TIM17_Init+0x48>)
 80077e6:	4a11      	ldr	r2, [pc, #68]	; (800782c <MX_TIM17_Init+0x4c>)
 80077e8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000-1;
 80077ea:	4b0f      	ldr	r3, [pc, #60]	; (8007828 <MX_TIM17_Init+0x48>)
 80077ec:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80077f0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077f2:	4b0d      	ldr	r3, [pc, #52]	; (8007828 <MX_TIM17_Init+0x48>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 80077f8:	4b0b      	ldr	r3, [pc, #44]	; (8007828 <MX_TIM17_Init+0x48>)
 80077fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80077fe:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007800:	4b09      	ldr	r3, [pc, #36]	; (8007828 <MX_TIM17_Init+0x48>)
 8007802:	2200      	movs	r2, #0
 8007804:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8007806:	4b08      	ldr	r3, [pc, #32]	; (8007828 <MX_TIM17_Init+0x48>)
 8007808:	2200      	movs	r2, #0
 800780a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800780c:	4b06      	ldr	r3, [pc, #24]	; (8007828 <MX_TIM17_Init+0x48>)
 800780e:	2200      	movs	r2, #0
 8007810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8007812:	4805      	ldr	r0, [pc, #20]	; (8007828 <MX_TIM17_Init+0x48>)
 8007814:	f008 fa88 	bl	800fd28 <HAL_TIM_Base_Init>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 800781e:	f7fb fc29 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8007822:	bf00      	nop
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20001364 	.word	0x20001364
 800782c:	40014800 	.word	0x40014800

08007830 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007840:	d103      	bne.n	800784a <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007842:	2001      	movs	r0, #1
 8007844:	f7ff ff24 	bl	8007690 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8007848:	e022      	b.n	8007890 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM16)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a12      	ldr	r2, [pc, #72]	; (8007898 <HAL_TIM_Base_MspInit+0x68>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d10c      	bne.n	800786e <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007854:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007858:	f7ff ff33 	bl	80076c2 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800785c:	2200      	movs	r2, #0
 800785e:	2100      	movs	r1, #0
 8007860:	2019      	movs	r0, #25
 8007862:	f001 fede 	bl	8009622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007866:	2019      	movs	r0, #25
 8007868:	f001 fef5 	bl	8009656 <HAL_NVIC_EnableIRQ>
}
 800786c:	e010      	b.n	8007890 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM17)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a0a      	ldr	r2, [pc, #40]	; (800789c <HAL_TIM_Base_MspInit+0x6c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d10b      	bne.n	8007890 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8007878:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800787c:	f7ff ff21 	bl	80076c2 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8007880:	2200      	movs	r2, #0
 8007882:	2100      	movs	r1, #0
 8007884:	201a      	movs	r0, #26
 8007886:	f001 fecc 	bl	8009622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800788a:	201a      	movs	r0, #26
 800788c:	f001 fee3 	bl	8009656 <HAL_NVIC_EnableIRQ>
}
 8007890:	bf00      	nop
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	40014400 	.word	0x40014400
 800789c:	40014800 	.word	0x40014800

080078a0 <updatedate>:
  /* USER CODE END TIM17_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0

	SEC+=1;
 80078a4:	4b98      	ldr	r3, [pc, #608]	; (8007b08 <updatedate+0x268>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	3301      	adds	r3, #1
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	4b96      	ldr	r3, [pc, #600]	; (8007b08 <updatedate+0x268>)
 80078ae:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 80078b0:	4b95      	ldr	r3, [pc, #596]	; (8007b08 <updatedate+0x268>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b3b      	cmp	r3, #59	; 0x3b
 80078b6:	d908      	bls.n	80078ca <updatedate+0x2a>
		SEC=0;
 80078b8:	4b93      	ldr	r3, [pc, #588]	; (8007b08 <updatedate+0x268>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 80078be:	4b93      	ldr	r3, [pc, #588]	; (8007b0c <updatedate+0x26c>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	3301      	adds	r3, #1
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	4b91      	ldr	r3, [pc, #580]	; (8007b0c <updatedate+0x26c>)
 80078c8:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 80078ca:	4b90      	ldr	r3, [pc, #576]	; (8007b0c <updatedate+0x26c>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b3b      	cmp	r3, #59	; 0x3b
 80078d0:	d908      	bls.n	80078e4 <updatedate+0x44>

		MINUTE=0;
 80078d2:	4b8e      	ldr	r3, [pc, #568]	; (8007b0c <updatedate+0x26c>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	701a      	strb	r2, [r3, #0]
		HR+=1;
 80078d8:	4b8d      	ldr	r3, [pc, #564]	; (8007b10 <updatedate+0x270>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	3301      	adds	r3, #1
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	4b8b      	ldr	r3, [pc, #556]	; (8007b10 <updatedate+0x270>)
 80078e2:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 80078e4:	4b8a      	ldr	r3, [pc, #552]	; (8007b10 <updatedate+0x270>)
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	2b17      	cmp	r3, #23
 80078ea:	d908      	bls.n	80078fe <updatedate+0x5e>
		HR=0;
 80078ec:	4b88      	ldr	r3, [pc, #544]	; (8007b10 <updatedate+0x270>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 80078f2:	4b88      	ldr	r3, [pc, #544]	; (8007b14 <updatedate+0x274>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	3301      	adds	r3, #1
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	4b86      	ldr	r3, [pc, #536]	; (8007b14 <updatedate+0x274>)
 80078fc:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 80078fe:	4b86      	ldr	r3, [pc, #536]	; (8007b18 <updatedate+0x278>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	2b0b      	cmp	r3, #11
 8007904:	f200 8137 	bhi.w	8007b76 <updatedate+0x2d6>
 8007908:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <updatedate+0x70>)
 800790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790e:	bf00      	nop
 8007910:	08007941 	.word	0x08007941
 8007914:	0800796b 	.word	0x0800796b
 8007918:	08007995 	.word	0x08007995
 800791c:	080079bf 	.word	0x080079bf
 8007920:	080079e9 	.word	0x080079e9
 8007924:	08007a13 	.word	0x08007a13
 8007928:	08007a3d 	.word	0x08007a3d
 800792c:	08007a67 	.word	0x08007a67
 8007930:	08007a8f 	.word	0x08007a8f
 8007934:	08007ab7 	.word	0x08007ab7
 8007938:	08007adf 	.word	0x08007adf
 800793c:	08007b21 	.word	0x08007b21

	case JANVIER:
		if(JOURS>31){
 8007940:	4b74      	ldr	r3, [pc, #464]	; (8007b14 <updatedate+0x274>)
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2b1f      	cmp	r3, #31
 8007946:	f240 80ff 	bls.w	8007b48 <updatedate+0x2a8>
			JOURS=1;
 800794a:	4b72      	ldr	r3, [pc, #456]	; (8007b14 <updatedate+0x274>)
 800794c:	2201      	movs	r2, #1
 800794e:	701a      	strb	r2, [r3, #0]
			mois++;
 8007950:	4b71      	ldr	r3, [pc, #452]	; (8007b18 <updatedate+0x278>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	3301      	adds	r3, #1
 8007956:	b2da      	uxtb	r2, r3
 8007958:	4b6f      	ldr	r3, [pc, #444]	; (8007b18 <updatedate+0x278>)
 800795a:	701a      	strb	r2, [r3, #0]
			MOIS++;
 800795c:	4b6f      	ldr	r3, [pc, #444]	; (8007b1c <updatedate+0x27c>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	3301      	adds	r3, #1
 8007962:	b2da      	uxtb	r2, r3
 8007964:	4b6d      	ldr	r3, [pc, #436]	; (8007b1c <updatedate+0x27c>)
 8007966:	701a      	strb	r2, [r3, #0]
		}

		break;
 8007968:	e0ee      	b.n	8007b48 <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 800796a:	4b6a      	ldr	r3, [pc, #424]	; (8007b14 <updatedate+0x274>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b1d      	cmp	r3, #29
 8007970:	f240 80ec 	bls.w	8007b4c <updatedate+0x2ac>
					JOURS=1;
 8007974:	4b67      	ldr	r3, [pc, #412]	; (8007b14 <updatedate+0x274>)
 8007976:	2201      	movs	r2, #1
 8007978:	701a      	strb	r2, [r3, #0]
					mois++;
 800797a:	4b67      	ldr	r3, [pc, #412]	; (8007b18 <updatedate+0x278>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	3301      	adds	r3, #1
 8007980:	b2da      	uxtb	r2, r3
 8007982:	4b65      	ldr	r3, [pc, #404]	; (8007b18 <updatedate+0x278>)
 8007984:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007986:	4b65      	ldr	r3, [pc, #404]	; (8007b1c <updatedate+0x27c>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	3301      	adds	r3, #1
 800798c:	b2da      	uxtb	r2, r3
 800798e:	4b63      	ldr	r3, [pc, #396]	; (8007b1c <updatedate+0x27c>)
 8007990:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007992:	e0db      	b.n	8007b4c <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 8007994:	4b5f      	ldr	r3, [pc, #380]	; (8007b14 <updatedate+0x274>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b1f      	cmp	r3, #31
 800799a:	f240 80d9 	bls.w	8007b50 <updatedate+0x2b0>
					JOURS=1;
 800799e:	4b5d      	ldr	r3, [pc, #372]	; (8007b14 <updatedate+0x274>)
 80079a0:	2201      	movs	r2, #1
 80079a2:	701a      	strb	r2, [r3, #0]
					mois++;
 80079a4:	4b5c      	ldr	r3, [pc, #368]	; (8007b18 <updatedate+0x278>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	3301      	adds	r3, #1
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	4b5a      	ldr	r3, [pc, #360]	; (8007b18 <updatedate+0x278>)
 80079ae:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80079b0:	4b5a      	ldr	r3, [pc, #360]	; (8007b1c <updatedate+0x27c>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	3301      	adds	r3, #1
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	4b58      	ldr	r3, [pc, #352]	; (8007b1c <updatedate+0x27c>)
 80079ba:	701a      	strb	r2, [r3, #0]
				}
		break;
 80079bc:	e0c8      	b.n	8007b50 <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 80079be:	4b55      	ldr	r3, [pc, #340]	; (8007b14 <updatedate+0x274>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	2b1e      	cmp	r3, #30
 80079c4:	f240 80c6 	bls.w	8007b54 <updatedate+0x2b4>
					JOURS=1;
 80079c8:	4b52      	ldr	r3, [pc, #328]	; (8007b14 <updatedate+0x274>)
 80079ca:	2201      	movs	r2, #1
 80079cc:	701a      	strb	r2, [r3, #0]
					mois++;
 80079ce:	4b52      	ldr	r3, [pc, #328]	; (8007b18 <updatedate+0x278>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	3301      	adds	r3, #1
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	4b50      	ldr	r3, [pc, #320]	; (8007b18 <updatedate+0x278>)
 80079d8:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80079da:	4b50      	ldr	r3, [pc, #320]	; (8007b1c <updatedate+0x27c>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	3301      	adds	r3, #1
 80079e0:	b2da      	uxtb	r2, r3
 80079e2:	4b4e      	ldr	r3, [pc, #312]	; (8007b1c <updatedate+0x27c>)
 80079e4:	701a      	strb	r2, [r3, #0]
				}
		break;
 80079e6:	e0b5      	b.n	8007b54 <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 80079e8:	4b4a      	ldr	r3, [pc, #296]	; (8007b14 <updatedate+0x274>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b1f      	cmp	r3, #31
 80079ee:	f240 80b3 	bls.w	8007b58 <updatedate+0x2b8>
					JOURS=1;
 80079f2:	4b48      	ldr	r3, [pc, #288]	; (8007b14 <updatedate+0x274>)
 80079f4:	2201      	movs	r2, #1
 80079f6:	701a      	strb	r2, [r3, #0]
					mois++;
 80079f8:	4b47      	ldr	r3, [pc, #284]	; (8007b18 <updatedate+0x278>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	3301      	adds	r3, #1
 80079fe:	b2da      	uxtb	r2, r3
 8007a00:	4b45      	ldr	r3, [pc, #276]	; (8007b18 <updatedate+0x278>)
 8007a02:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007a04:	4b45      	ldr	r3, [pc, #276]	; (8007b1c <updatedate+0x27c>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	4b43      	ldr	r3, [pc, #268]	; (8007b1c <updatedate+0x27c>)
 8007a0e:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007a10:	e0a2      	b.n	8007b58 <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 8007a12:	4b40      	ldr	r3, [pc, #256]	; (8007b14 <updatedate+0x274>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b1e      	cmp	r3, #30
 8007a18:	f240 80a0 	bls.w	8007b5c <updatedate+0x2bc>
					JOURS=1;
 8007a1c:	4b3d      	ldr	r3, [pc, #244]	; (8007b14 <updatedate+0x274>)
 8007a1e:	2201      	movs	r2, #1
 8007a20:	701a      	strb	r2, [r3, #0]
					mois++;
 8007a22:	4b3d      	ldr	r3, [pc, #244]	; (8007b18 <updatedate+0x278>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	3301      	adds	r3, #1
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	4b3b      	ldr	r3, [pc, #236]	; (8007b18 <updatedate+0x278>)
 8007a2c:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007a2e:	4b3b      	ldr	r3, [pc, #236]	; (8007b1c <updatedate+0x27c>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	3301      	adds	r3, #1
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	4b39      	ldr	r3, [pc, #228]	; (8007b1c <updatedate+0x27c>)
 8007a38:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007a3a:	e08f      	b.n	8007b5c <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 8007a3c:	4b35      	ldr	r3, [pc, #212]	; (8007b14 <updatedate+0x274>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2b1f      	cmp	r3, #31
 8007a42:	f240 808d 	bls.w	8007b60 <updatedate+0x2c0>
					JOURS=1;
 8007a46:	4b33      	ldr	r3, [pc, #204]	; (8007b14 <updatedate+0x274>)
 8007a48:	2201      	movs	r2, #1
 8007a4a:	701a      	strb	r2, [r3, #0]
					mois++;
 8007a4c:	4b32      	ldr	r3, [pc, #200]	; (8007b18 <updatedate+0x278>)
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	3301      	adds	r3, #1
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	4b30      	ldr	r3, [pc, #192]	; (8007b18 <updatedate+0x278>)
 8007a56:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007a58:	4b30      	ldr	r3, [pc, #192]	; (8007b1c <updatedate+0x27c>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	4b2e      	ldr	r3, [pc, #184]	; (8007b1c <updatedate+0x27c>)
 8007a62:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007a64:	e07c      	b.n	8007b60 <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 8007a66:	4b2b      	ldr	r3, [pc, #172]	; (8007b14 <updatedate+0x274>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	2b1f      	cmp	r3, #31
 8007a6c:	d97a      	bls.n	8007b64 <updatedate+0x2c4>
					JOURS=1;
 8007a6e:	4b29      	ldr	r3, [pc, #164]	; (8007b14 <updatedate+0x274>)
 8007a70:	2201      	movs	r2, #1
 8007a72:	701a      	strb	r2, [r3, #0]
					mois++;
 8007a74:	4b28      	ldr	r3, [pc, #160]	; (8007b18 <updatedate+0x278>)
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	4b26      	ldr	r3, [pc, #152]	; (8007b18 <updatedate+0x278>)
 8007a7e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007a80:	4b26      	ldr	r3, [pc, #152]	; (8007b1c <updatedate+0x27c>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	3301      	adds	r3, #1
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	4b24      	ldr	r3, [pc, #144]	; (8007b1c <updatedate+0x27c>)
 8007a8a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007a8c:	e06a      	b.n	8007b64 <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 8007a8e:	4b21      	ldr	r3, [pc, #132]	; (8007b14 <updatedate+0x274>)
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	2b1e      	cmp	r3, #30
 8007a94:	d968      	bls.n	8007b68 <updatedate+0x2c8>
					JOURS=1;
 8007a96:	4b1f      	ldr	r3, [pc, #124]	; (8007b14 <updatedate+0x274>)
 8007a98:	2201      	movs	r2, #1
 8007a9a:	701a      	strb	r2, [r3, #0]
					mois++;
 8007a9c:	4b1e      	ldr	r3, [pc, #120]	; (8007b18 <updatedate+0x278>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	4b1c      	ldr	r3, [pc, #112]	; (8007b18 <updatedate+0x278>)
 8007aa6:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007aa8:	4b1c      	ldr	r3, [pc, #112]	; (8007b1c <updatedate+0x27c>)
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	3301      	adds	r3, #1
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	4b1a      	ldr	r3, [pc, #104]	; (8007b1c <updatedate+0x27c>)
 8007ab2:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007ab4:	e058      	b.n	8007b68 <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 8007ab6:	4b17      	ldr	r3, [pc, #92]	; (8007b14 <updatedate+0x274>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	2b1f      	cmp	r3, #31
 8007abc:	d956      	bls.n	8007b6c <updatedate+0x2cc>
					JOURS=1;
 8007abe:	4b15      	ldr	r3, [pc, #84]	; (8007b14 <updatedate+0x274>)
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	701a      	strb	r2, [r3, #0]
					mois++;
 8007ac4:	4b14      	ldr	r3, [pc, #80]	; (8007b18 <updatedate+0x278>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	4b12      	ldr	r3, [pc, #72]	; (8007b18 <updatedate+0x278>)
 8007ace:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007ad0:	4b12      	ldr	r3, [pc, #72]	; (8007b1c <updatedate+0x27c>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	4b10      	ldr	r3, [pc, #64]	; (8007b1c <updatedate+0x27c>)
 8007ada:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007adc:	e046      	b.n	8007b6c <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 8007ade:	4b0d      	ldr	r3, [pc, #52]	; (8007b14 <updatedate+0x274>)
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	2b1e      	cmp	r3, #30
 8007ae4:	d944      	bls.n	8007b70 <updatedate+0x2d0>
					JOURS=1;
 8007ae6:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <updatedate+0x274>)
 8007ae8:	2201      	movs	r2, #1
 8007aea:	701a      	strb	r2, [r3, #0]
					mois++;
 8007aec:	4b0a      	ldr	r3, [pc, #40]	; (8007b18 <updatedate+0x278>)
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	3301      	adds	r3, #1
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	4b08      	ldr	r3, [pc, #32]	; (8007b18 <updatedate+0x278>)
 8007af6:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007af8:	4b08      	ldr	r3, [pc, #32]	; (8007b1c <updatedate+0x27c>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	3301      	adds	r3, #1
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	4b06      	ldr	r3, [pc, #24]	; (8007b1c <updatedate+0x27c>)
 8007b02:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007b04:	e034      	b.n	8007b70 <updatedate+0x2d0>
 8007b06:	bf00      	nop
 8007b08:	20000ca4 	.word	0x20000ca4
 8007b0c:	20000ca6 	.word	0x20000ca6
 8007b10:	20000ca5 	.word	0x20000ca5
 8007b14:	20000010 	.word	0x20000010
 8007b18:	20000ca7 	.word	0x20000ca7
 8007b1c:	20000011 	.word	0x20000011
	case DECEMBRE:
		if(JOURS>31){
 8007b20:	4b1f      	ldr	r3, [pc, #124]	; (8007ba0 <updatedate+0x300>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b1f      	cmp	r3, #31
 8007b26:	d925      	bls.n	8007b74 <updatedate+0x2d4>
					JOURS=1;
 8007b28:	4b1d      	ldr	r3, [pc, #116]	; (8007ba0 <updatedate+0x300>)
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	701a      	strb	r2, [r3, #0]
					mois++;
 8007b2e:	4b1d      	ldr	r3, [pc, #116]	; (8007ba4 <updatedate+0x304>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	3301      	adds	r3, #1
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	4b1b      	ldr	r3, [pc, #108]	; (8007ba4 <updatedate+0x304>)
 8007b38:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007b3a:	4b1b      	ldr	r3, [pc, #108]	; (8007ba8 <updatedate+0x308>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	4b19      	ldr	r3, [pc, #100]	; (8007ba8 <updatedate+0x308>)
 8007b44:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007b46:	e015      	b.n	8007b74 <updatedate+0x2d4>
		break;
 8007b48:	bf00      	nop
 8007b4a:	e014      	b.n	8007b76 <updatedate+0x2d6>
		break;
 8007b4c:	bf00      	nop
 8007b4e:	e012      	b.n	8007b76 <updatedate+0x2d6>
		break;
 8007b50:	bf00      	nop
 8007b52:	e010      	b.n	8007b76 <updatedate+0x2d6>
		break;
 8007b54:	bf00      	nop
 8007b56:	e00e      	b.n	8007b76 <updatedate+0x2d6>
		break;
 8007b58:	bf00      	nop
 8007b5a:	e00c      	b.n	8007b76 <updatedate+0x2d6>
		break;
 8007b5c:	bf00      	nop
 8007b5e:	e00a      	b.n	8007b76 <updatedate+0x2d6>
		break;
 8007b60:	bf00      	nop
 8007b62:	e008      	b.n	8007b76 <updatedate+0x2d6>
		break;
 8007b64:	bf00      	nop
 8007b66:	e006      	b.n	8007b76 <updatedate+0x2d6>
		break;
 8007b68:	bf00      	nop
 8007b6a:	e004      	b.n	8007b76 <updatedate+0x2d6>
		break;
 8007b6c:	bf00      	nop
 8007b6e:	e002      	b.n	8007b76 <updatedate+0x2d6>
		break;
 8007b70:	bf00      	nop
 8007b72:	e000      	b.n	8007b76 <updatedate+0x2d6>
		break;
 8007b74:	bf00      	nop

	}

	if(MOIS>12){
 8007b76:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <updatedate+0x308>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	2b0c      	cmp	r3, #12
 8007b7c:	d90b      	bls.n	8007b96 <updatedate+0x2f6>
		mois=JANVIER;
 8007b7e:	4b09      	ldr	r3, [pc, #36]	; (8007ba4 <updatedate+0x304>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 8007b84:	4b08      	ldr	r3, [pc, #32]	; (8007ba8 <updatedate+0x308>)
 8007b86:	2201      	movs	r2, #1
 8007b88:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 8007b8a:	4b08      	ldr	r3, [pc, #32]	; (8007bac <updatedate+0x30c>)
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	4b06      	ldr	r3, [pc, #24]	; (8007bac <updatedate+0x30c>)
 8007b94:	801a      	strh	r2, [r3, #0]
	}
}
 8007b96:	bf00      	nop
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	20000010 	.word	0x20000010
 8007ba4:	20000ca7 	.word	0x20000ca7
 8007ba8:	20000011 	.word	0x20000011
 8007bac:	20000012 	.word	0x20000012

08007bb0 <LL_AHB2_GRP1_EnableClock>:
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
}
 8007bd6:	bf00      	nop
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <LL_APB1_GRP2_EnableClock>:
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8007bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007bf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8007bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4013      	ands	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c06:	68fb      	ldr	r3, [r7, #12]
}
 8007c08:	bf00      	nop
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <LL_APB1_GRP2_DisableClock>:
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8007c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	43db      	mvns	r3, r3
 8007c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 8007c2e:	bf00      	nop
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <LL_APB2_GRP1_EnableClock>:
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007c48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
}
 8007c60:	bf00      	nop
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8007c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	43db      	mvns	r3, r3
 8007c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c82:	4013      	ands	r3, r2
 8007c84:	660b      	str	r3, [r1, #96]	; 0x60
}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
	...

08007c94 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8007c98:	4b22      	ldr	r3, [pc, #136]	; (8007d24 <MX_LPUART1_UART_Init+0x90>)
 8007c9a:	4a23      	ldr	r2, [pc, #140]	; (8007d28 <MX_LPUART1_UART_Init+0x94>)
 8007c9c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8007c9e:	4b21      	ldr	r3, [pc, #132]	; (8007d24 <MX_LPUART1_UART_Init+0x90>)
 8007ca0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007ca4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007ca6:	4b1f      	ldr	r3, [pc, #124]	; (8007d24 <MX_LPUART1_UART_Init+0x90>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8007cac:	4b1d      	ldr	r3, [pc, #116]	; (8007d24 <MX_LPUART1_UART_Init+0x90>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8007cb2:	4b1c      	ldr	r3, [pc, #112]	; (8007d24 <MX_LPUART1_UART_Init+0x90>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8007cb8:	4b1a      	ldr	r3, [pc, #104]	; (8007d24 <MX_LPUART1_UART_Init+0x90>)
 8007cba:	220c      	movs	r2, #12
 8007cbc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007cbe:	4b19      	ldr	r3, [pc, #100]	; (8007d24 <MX_LPUART1_UART_Init+0x90>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007cc4:	4b17      	ldr	r3, [pc, #92]	; (8007d24 <MX_LPUART1_UART_Init+0x90>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007cca:	4b16      	ldr	r3, [pc, #88]	; (8007d24 <MX_LPUART1_UART_Init+0x90>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007cd0:	4b14      	ldr	r3, [pc, #80]	; (8007d24 <MX_LPUART1_UART_Init+0x90>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8007cd6:	4b13      	ldr	r3, [pc, #76]	; (8007d24 <MX_LPUART1_UART_Init+0x90>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8007cdc:	4811      	ldr	r0, [pc, #68]	; (8007d24 <MX_LPUART1_UART_Init+0x90>)
 8007cde:	f008 fceb 	bl	80106b8 <HAL_UART_Init>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8007ce8:	f7fb f9c4 	bl	8003074 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007cec:	2100      	movs	r1, #0
 8007cee:	480d      	ldr	r0, [pc, #52]	; (8007d24 <MX_LPUART1_UART_Init+0x90>)
 8007cf0:	f00a f964 	bl	8011fbc <HAL_UARTEx_SetTxFifoThreshold>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007cfa:	f7fb f9bb 	bl	8003074 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007cfe:	2100      	movs	r1, #0
 8007d00:	4808      	ldr	r0, [pc, #32]	; (8007d24 <MX_LPUART1_UART_Init+0x90>)
 8007d02:	f00a f999 	bl	8012038 <HAL_UARTEx_SetRxFifoThreshold>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007d0c:	f7fb f9b2 	bl	8003074 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8007d10:	4804      	ldr	r0, [pc, #16]	; (8007d24 <MX_LPUART1_UART_Init+0x90>)
 8007d12:	f00a f91a 	bl	8011f4a <HAL_UARTEx_DisableFifoMode>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007d1c:	f7fb f9aa 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8007d20:	bf00      	nop
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	200013b0 	.word	0x200013b0
 8007d28:	40008000 	.word	0x40008000

08007d2c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007d30:	4b22      	ldr	r3, [pc, #136]	; (8007dbc <MX_USART1_UART_Init+0x90>)
 8007d32:	4a23      	ldr	r2, [pc, #140]	; (8007dc0 <MX_USART1_UART_Init+0x94>)
 8007d34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007d36:	4b21      	ldr	r3, [pc, #132]	; (8007dbc <MX_USART1_UART_Init+0x90>)
 8007d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007d3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007d3e:	4b1f      	ldr	r3, [pc, #124]	; (8007dbc <MX_USART1_UART_Init+0x90>)
 8007d40:	2200      	movs	r2, #0
 8007d42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007d44:	4b1d      	ldr	r3, [pc, #116]	; (8007dbc <MX_USART1_UART_Init+0x90>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007d4a:	4b1c      	ldr	r3, [pc, #112]	; (8007dbc <MX_USART1_UART_Init+0x90>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007d50:	4b1a      	ldr	r3, [pc, #104]	; (8007dbc <MX_USART1_UART_Init+0x90>)
 8007d52:	220c      	movs	r2, #12
 8007d54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d56:	4b19      	ldr	r3, [pc, #100]	; (8007dbc <MX_USART1_UART_Init+0x90>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d5c:	4b17      	ldr	r3, [pc, #92]	; (8007dbc <MX_USART1_UART_Init+0x90>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007d62:	4b16      	ldr	r3, [pc, #88]	; (8007dbc <MX_USART1_UART_Init+0x90>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007d68:	4b14      	ldr	r3, [pc, #80]	; (8007dbc <MX_USART1_UART_Init+0x90>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007d6e:	4b13      	ldr	r3, [pc, #76]	; (8007dbc <MX_USART1_UART_Init+0x90>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007d74:	4811      	ldr	r0, [pc, #68]	; (8007dbc <MX_USART1_UART_Init+0x90>)
 8007d76:	f008 fc9f 	bl	80106b8 <HAL_UART_Init>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8007d80:	f7fb f978 	bl	8003074 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007d84:	2100      	movs	r1, #0
 8007d86:	480d      	ldr	r0, [pc, #52]	; (8007dbc <MX_USART1_UART_Init+0x90>)
 8007d88:	f00a f918 	bl	8011fbc <HAL_UARTEx_SetTxFifoThreshold>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007d92:	f7fb f96f 	bl	8003074 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007d96:	2100      	movs	r1, #0
 8007d98:	4808      	ldr	r0, [pc, #32]	; (8007dbc <MX_USART1_UART_Init+0x90>)
 8007d9a:	f00a f94d 	bl	8012038 <HAL_UARTEx_SetRxFifoThreshold>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007da4:	f7fb f966 	bl	8003074 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007da8:	4804      	ldr	r0, [pc, #16]	; (8007dbc <MX_USART1_UART_Init+0x90>)
 8007daa:	f00a f8ce 	bl	8011f4a <HAL_UARTEx_DisableFifoMode>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007db4:	f7fb f95e 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007db8:	bf00      	nop
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	20001444 	.word	0x20001444
 8007dc0:	40013800 	.word	0x40013800

08007dc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b09c      	sub	sp, #112	; 0x70
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dcc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	605a      	str	r2, [r3, #4]
 8007dd6:	609a      	str	r2, [r3, #8]
 8007dd8:	60da      	str	r2, [r3, #12]
 8007dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007ddc:	f107 030c 	add.w	r3, r7, #12
 8007de0:	2250      	movs	r2, #80	; 0x50
 8007de2:	2100      	movs	r1, #0
 8007de4:	4618      	mov	r0, r3
 8007de6:	f015 f854 	bl	801ce92 <memset>
  if(uartHandle->Instance==LPUART1)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a46      	ldr	r2, [pc, #280]	; (8007f08 <HAL_UART_MspInit+0x144>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d158      	bne.n	8007ea6 <HAL_UART_MspInit+0xe2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8007df4:	2302      	movs	r3, #2
 8007df6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8007df8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007dfe:	f107 030c 	add.w	r3, r7, #12
 8007e02:	4618      	mov	r0, r3
 8007e04:	f006 fa7c 	bl	800e300 <HAL_RCCEx_PeriphCLKConfig>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007e0e:	f7fb f931 	bl	8003074 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8007e12:	2001      	movs	r0, #1
 8007e14:	f7ff fee5 	bl	8007be2 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e18:	2001      	movs	r0, #1
 8007e1a:	f7ff fec9 	bl	8007bb0 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007e1e:	230c      	movs	r3, #12
 8007e20:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e22:	2302      	movs	r3, #2
 8007e24:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8007e2e:	2308      	movs	r3, #8
 8007e30:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e32:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007e36:	4619      	mov	r1, r3
 8007e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e3c:	f002 f824 	bl	8009e88 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8007e40:	4b32      	ldr	r3, [pc, #200]	; (8007f0c <HAL_UART_MspInit+0x148>)
 8007e42:	4a33      	ldr	r2, [pc, #204]	; (8007f10 <HAL_UART_MspInit+0x14c>)
 8007e44:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8007e46:	4b31      	ldr	r3, [pc, #196]	; (8007f0c <HAL_UART_MspInit+0x148>)
 8007e48:	2210      	movs	r2, #16
 8007e4a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007e4c:	4b2f      	ldr	r3, [pc, #188]	; (8007f0c <HAL_UART_MspInit+0x148>)
 8007e4e:	2200      	movs	r2, #0
 8007e50:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e52:	4b2e      	ldr	r3, [pc, #184]	; (8007f0c <HAL_UART_MspInit+0x148>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007e58:	4b2c      	ldr	r3, [pc, #176]	; (8007f0c <HAL_UART_MspInit+0x148>)
 8007e5a:	2280      	movs	r2, #128	; 0x80
 8007e5c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007e5e:	4b2b      	ldr	r3, [pc, #172]	; (8007f0c <HAL_UART_MspInit+0x148>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007e64:	4b29      	ldr	r3, [pc, #164]	; (8007f0c <HAL_UART_MspInit+0x148>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8007e6a:	4b28      	ldr	r3, [pc, #160]	; (8007f0c <HAL_UART_MspInit+0x148>)
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007e70:	4b26      	ldr	r3, [pc, #152]	; (8007f0c <HAL_UART_MspInit+0x148>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8007e76:	4825      	ldr	r0, [pc, #148]	; (8007f0c <HAL_UART_MspInit+0x148>)
 8007e78:	f001 fc32 	bl	80096e0 <HAL_DMA_Init>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8007e82:	f7fb f8f7 	bl	8003074 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a20      	ldr	r2, [pc, #128]	; (8007f0c <HAL_UART_MspInit+0x148>)
 8007e8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007e8e:	4a1f      	ldr	r2, [pc, #124]	; (8007f0c <HAL_UART_MspInit+0x148>)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8007e94:	2200      	movs	r2, #0
 8007e96:	2100      	movs	r1, #0
 8007e98:	2025      	movs	r0, #37	; 0x25
 8007e9a:	f001 fbc2 	bl	8009622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8007e9e:	2025      	movs	r0, #37	; 0x25
 8007ea0:	f001 fbd9 	bl	8009656 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007ea4:	e02b      	b.n	8007efe <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART1)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a1a      	ldr	r2, [pc, #104]	; (8007f14 <HAL_UART_MspInit+0x150>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d126      	bne.n	8007efe <HAL_UART_MspInit+0x13a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007eb8:	f107 030c 	add.w	r3, r7, #12
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f006 fa1f 	bl	800e300 <HAL_RCCEx_PeriphCLKConfig>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <HAL_UART_MspInit+0x108>
      Error_Handler();
 8007ec8:	f7fb f8d4 	bl	8003074 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007ecc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007ed0:	f7ff feb3 	bl	8007c3a <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ed4:	2001      	movs	r0, #1
 8007ed6:	f7ff fe6b 	bl	8007bb0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007eda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007ede:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007eec:	2307      	movs	r3, #7
 8007eee:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ef0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007efa:	f001 ffc5 	bl	8009e88 <HAL_GPIO_Init>
}
 8007efe:	bf00      	nop
 8007f00:	3770      	adds	r7, #112	; 0x70
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	40008000 	.word	0x40008000
 8007f0c:	200014d8 	.word	0x200014d8
 8007f10:	4002001c 	.word	0x4002001c
 8007f14:	40013800 	.word	0x40013800

08007f18 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a13      	ldr	r2, [pc, #76]	; (8007f74 <HAL_UART_MspDeInit+0x5c>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d111      	bne.n	8007f4e <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8007f2a:	2001      	movs	r0, #1
 8007f2c:	f7ff fe72 	bl	8007c14 <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8007f30:	210c      	movs	r1, #12
 8007f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f36:	f002 f917 	bl	800a168 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f40:	4618      	mov	r0, r3
 8007f42:	f001 fc75 	bl	8009830 <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8007f46:	2025      	movs	r0, #37	; 0x25
 8007f48:	f001 fb93 	bl	8009672 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8007f4c:	e00e      	b.n	8007f6c <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART1)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a09      	ldr	r2, [pc, #36]	; (8007f78 <HAL_UART_MspDeInit+0x60>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d109      	bne.n	8007f6c <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART1_CLK_DISABLE();
 8007f58:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007f5c:	f7ff fe86 	bl	8007c6c <LL_APB2_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8007f60:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f68:	f002 f8fe 	bl	800a168 <HAL_GPIO_DeInit>
}
 8007f6c:	bf00      	nop
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	40008000 	.word	0x40008000
 8007f78:	40013800 	.word	0x40013800

08007f7c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8007f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8007f84:	4b30      	ldr	r3, [pc, #192]	; (8008048 <HAL_UART_RxCpltCallback+0xcc>)
 8007f86:	881a      	ldrh	r2, [r3, #0]
 8007f88:	4b30      	ldr	r3, [pc, #192]	; (800804c <HAL_UART_RxCpltCallback+0xd0>)
 8007f8a:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8007f8c:	4b2f      	ldr	r3, [pc, #188]	; (800804c <HAL_UART_RxCpltCallback+0xd0>)
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8007f94:	d922      	bls.n	8007fdc <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 8007f96:	4b2d      	ldr	r3, [pc, #180]	; (800804c <HAL_UART_RxCpltCallback+0xd0>)
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007f9e:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8007fa0:	4b2a      	ldr	r3, [pc, #168]	; (800804c <HAL_UART_RxCpltCallback+0xd0>)
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	4b2a      	ldr	r3, [pc, #168]	; (8008050 <HAL_UART_RxCpltCallback+0xd4>)
 8007fa8:	4413      	add	r3, r2
 8007faa:	89fa      	ldrh	r2, [r7, #14]
 8007fac:	4929      	ldr	r1, [pc, #164]	; (8008054 <HAL_UART_RxCpltCallback+0xd8>)
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f015 f88b 	bl	801d0ca <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8007fb4:	4b25      	ldr	r3, [pc, #148]	; (800804c <HAL_UART_RxCpltCallback+0xd0>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8007fba:	89fb      	ldrh	r3, [r7, #14]
 8007fbc:	4a25      	ldr	r2, [pc, #148]	; (8008054 <HAL_UART_RxCpltCallback+0xd8>)
 8007fbe:	1899      	adds	r1, r3, r2
 8007fc0:	89fb      	ldrh	r3, [r7, #14]
 8007fc2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	4821      	ldr	r0, [pc, #132]	; (8008050 <HAL_UART_RxCpltCallback+0xd4>)
 8007fca:	f015 f87e 	bl	801d0ca <memcpy>
				newPos = (64-datatocopy);  // update the position
 8007fce:	89fb      	ldrh	r3, [r7, #14]
 8007fd0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	4b1c      	ldr	r3, [pc, #112]	; (8008048 <HAL_UART_RxCpltCallback+0xcc>)
 8007fd8:	801a      	strh	r2, [r3, #0]
 8007fda:	e01e      	b.n	800801a <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8007fdc:	4b1b      	ldr	r3, [pc, #108]	; (800804c <HAL_UART_RxCpltCallback+0xd0>)
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	4b1b      	ldr	r3, [pc, #108]	; (8008050 <HAL_UART_RxCpltCallback+0xd4>)
 8007fe4:	441a      	add	r2, r3
 8007fe6:	4b1b      	ldr	r3, [pc, #108]	; (8008054 <HAL_UART_RxCpltCallback+0xd8>)
 8007fe8:	4610      	mov	r0, r2
 8007fea:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8007fee:	4602      	mov	r2, r0
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	f8d1 c000 	ldr.w	ip, [r1]
 8007ff6:	684e      	ldr	r6, [r1, #4]
 8007ff8:	688d      	ldr	r5, [r1, #8]
 8007ffa:	68c9      	ldr	r1, [r1, #12]
 8007ffc:	f8c2 c000 	str.w	ip, [r2]
 8008000:	6056      	str	r6, [r2, #4]
 8008002:	6095      	str	r5, [r2, #8]
 8008004:	60d1      	str	r1, [r2, #12]
 8008006:	3310      	adds	r3, #16
 8008008:	3010      	adds	r0, #16
 800800a:	42a3      	cmp	r3, r4
 800800c:	d1ef      	bne.n	8007fee <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 800800e:	4b0f      	ldr	r3, [pc, #60]	; (800804c <HAL_UART_RxCpltCallback+0xd0>)
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	3340      	adds	r3, #64	; 0x40
 8008014:	b29a      	uxth	r2, r3
 8008016:	4b0c      	ldr	r3, [pc, #48]	; (8008048 <HAL_UART_RxCpltCallback+0xcc>)
 8008018:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 800801a:	2240      	movs	r2, #64	; 0x40
 800801c:	490d      	ldr	r1, [pc, #52]	; (8008054 <HAL_UART_RxCpltCallback+0xd8>)
 800801e:	480e      	ldr	r0, [pc, #56]	; (8008058 <HAL_UART_RxCpltCallback+0xdc>)
 8008020:	f008 fc68 	bl	80108f4 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8008024:	4b0d      	ldr	r3, [pc, #52]	; (800805c <HAL_UART_RxCpltCallback+0xe0>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	4b0c      	ldr	r3, [pc, #48]	; (800805c <HAL_UART_RxCpltCallback+0xe0>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0204 	bic.w	r2, r2, #4
 8008032:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 8008034:	2240      	movs	r2, #64	; 0x40
 8008036:	4907      	ldr	r1, [pc, #28]	; (8008054 <HAL_UART_RxCpltCallback+0xd8>)
 8008038:	4807      	ldr	r0, [pc, #28]	; (8008058 <HAL_UART_RxCpltCallback+0xdc>)
 800803a:	f008 fc5b 	bl	80108f4 <HAL_UART_Receive_DMA>
}
 800803e:	bf00      	nop
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008046:	bf00      	nop
 8008048:	200005f4 	.word	0x200005f4
 800804c:	200005f2 	.word	0x200005f2
 8008050:	20000638 	.word	0x20000638
 8008054:	200005f8 	.word	0x200005f8
 8008058:	200013b0 	.word	0x200013b0
 800805c:	200014d8 	.word	0x200014d8

08008060 <getgpu>:
uint8_t usbnumbuf2[10];




void getgpu(uint8_t * usbbuffer){
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
	usbbuffer[64]='$';
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3340      	adds	r3, #64	; 0x40
 800806c:	2224      	movs	r2, #36	; 0x24
 800806e:	701a      	strb	r2, [r3, #0]
	memset(usbnumbuf1,'$',10);
 8008070:	220a      	movs	r2, #10
 8008072:	2124      	movs	r1, #36	; 0x24
 8008074:	4823      	ldr	r0, [pc, #140]	; (8008104 <getgpu+0xa4>)
 8008076:	f014 ff0c 	bl	801ce92 <memset>
	memset(usbnumbuf2,'$',10);
 800807a:	220a      	movs	r2, #10
 800807c:	2124      	movs	r1, #36	; 0x24
 800807e:	4822      	ldr	r0, [pc, #136]	; (8008108 <getgpu+0xa8>)
 8008080:	f014 ff07 	bl	801ce92 <memset>


	int cnt=0;
 8008084:	2300      	movs	r3, #0
 8008086:	60fb      	str	r3, [r7, #12]
	while(usbbuffer[cnt]!='$'){
 8008088:	e00b      	b.n	80080a2 <getgpu+0x42>

		usbnumbuf1[cnt]=usbbuffer[cnt];
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	4413      	add	r3, r2
 8008090:	7819      	ldrb	r1, [r3, #0]
 8008092:	4a1c      	ldr	r2, [pc, #112]	; (8008104 <getgpu+0xa4>)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	4413      	add	r3, r2
 8008098:	460a      	mov	r2, r1
 800809a:	701a      	strb	r2, [r3, #0]
				  cnt++;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	3301      	adds	r3, #1
 80080a0:	60fb      	str	r3, [r7, #12]
	while(usbbuffer[cnt]!='$'){
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	4413      	add	r3, r2
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	2b24      	cmp	r3, #36	; 0x24
 80080ac:	d1ed      	bne.n	800808a <getgpu+0x2a>
			  }
			  cnt++;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	3301      	adds	r3, #1
 80080b2:	60fb      	str	r3, [r7, #12]
			  int cnt1=0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	60bb      	str	r3, [r7, #8]
			  while(usbbuffer[cnt]!='$'){
 80080b8:	e00e      	b.n	80080d8 <getgpu+0x78>

			  		  usbnumbuf2[cnt1]=usbbuffer[cnt];
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	4413      	add	r3, r2
 80080c0:	7819      	ldrb	r1, [r3, #0]
 80080c2:	4a11      	ldr	r2, [pc, #68]	; (8008108 <getgpu+0xa8>)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4413      	add	r3, r2
 80080c8:	460a      	mov	r2, r1
 80080ca:	701a      	strb	r2, [r3, #0]
			  		  cnt1++;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	3301      	adds	r3, #1
 80080d0:	60bb      	str	r3, [r7, #8]
			  		  cnt++;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	3301      	adds	r3, #1
 80080d6:	60fb      	str	r3, [r7, #12]
			  while(usbbuffer[cnt]!='$'){
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	4413      	add	r3, r2
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b24      	cmp	r3, #36	; 0x24
 80080e2:	d1ea      	bne.n	80080ba <getgpu+0x5a>
			  	  }

	gputemp=atoi((uint8_t *)usbnumbuf1);
 80080e4:	4807      	ldr	r0, [pc, #28]	; (8008104 <getgpu+0xa4>)
 80080e6:	f012 ff3d 	bl	801af64 <atoi>
 80080ea:	4603      	mov	r3, r0
 80080ec:	4a07      	ldr	r2, [pc, #28]	; (800810c <getgpu+0xac>)
 80080ee:	6013      	str	r3, [r2, #0]
	gpupower=atoi((uint8_t *)usbnumbuf2);
 80080f0:	4805      	ldr	r0, [pc, #20]	; (8008108 <getgpu+0xa8>)
 80080f2:	f012 ff37 	bl	801af64 <atoi>
 80080f6:	4603      	mov	r3, r0
 80080f8:	4a05      	ldr	r2, [pc, #20]	; (8008110 <getgpu+0xb0>)
 80080fa:	6013      	str	r3, [r2, #0]


}
 80080fc:	bf00      	nop
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	20001538 	.word	0x20001538
 8008108:	20001544 	.word	0x20001544
 800810c:	20001284 	.word	0x20001284
 8008110:	20001288 	.word	0x20001288

08008114 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8008114:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008116:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008118:	3304      	adds	r3, #4

0800811a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800811a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800811c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800811e:	d3f9      	bcc.n	8008114 <CopyDataInit>
  bx lr
 8008120:	4770      	bx	lr

08008122 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8008122:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8008124:	3004      	adds	r0, #4

08008126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8008126:	4288      	cmp	r0, r1
  bcc FillZerobss
 8008128:	d3fb      	bcc.n	8008122 <FillZerobss>
  bx lr
 800812a:	4770      	bx	lr

0800812c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800812c:	480c      	ldr	r0, [pc, #48]	; (8008160 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800812e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008130:	f7ff fa5c 	bl	80075ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8008134:	480b      	ldr	r0, [pc, #44]	; (8008164 <LoopForever+0x6>)
 8008136:	490c      	ldr	r1, [pc, #48]	; (8008168 <LoopForever+0xa>)
 8008138:	4a0c      	ldr	r2, [pc, #48]	; (800816c <LoopForever+0xe>)
 800813a:	2300      	movs	r3, #0
 800813c:	f7ff ffed 	bl	800811a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8008140:	480b      	ldr	r0, [pc, #44]	; (8008170 <LoopForever+0x12>)
 8008142:	490c      	ldr	r1, [pc, #48]	; (8008174 <LoopForever+0x16>)
 8008144:	4a0c      	ldr	r2, [pc, #48]	; (8008178 <LoopForever+0x1a>)
 8008146:	2300      	movs	r3, #0
 8008148:	f7ff ffe7 	bl	800811a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800814c:	480b      	ldr	r0, [pc, #44]	; (800817c <LoopForever+0x1e>)
 800814e:	490c      	ldr	r1, [pc, #48]	; (8008180 <LoopForever+0x22>)
 8008150:	2300      	movs	r3, #0
 8008152:	f7ff ffe8 	bl	8008126 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008156:	f014 ff89 	bl	801d06c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800815a:	f7fa fe3b 	bl	8002dd4 <main>

0800815e <LoopForever>:

LoopForever:
  b LoopForever
 800815e:	e7fe      	b.n	800815e <LoopForever>
  ldr   r0, =_estack
 8008160:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8008164:	20000008 	.word	0x20000008
 8008168:	20000320 	.word	0x20000320
 800816c:	08023f48 	.word	0x08023f48
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8008170:	200301e4 	.word	0x200301e4
 8008174:	20030a67 	.word	0x20030a67
 8008178:	080242a6 	.word	0x080242a6
  INIT_BSS _sbss, _ebss
 800817c:	20000370 	.word	0x20000370
 8008180:	20003230 	.word	0x20003230

08008184 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008184:	e7fe      	b.n	8008184 <ADC1_IRQHandler>
	...

08008188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008192:	4b0c      	ldr	r3, [pc, #48]	; (80081c4 <HAL_Init+0x3c>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a0b      	ldr	r2, [pc, #44]	; (80081c4 <HAL_Init+0x3c>)
 8008198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800819c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800819e:	2003      	movs	r0, #3
 80081a0:	f001 fa34 	bl	800960c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80081a4:	200f      	movs	r0, #15
 80081a6:	f000 f80f 	bl	80081c8 <HAL_InitTick>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	71fb      	strb	r3, [r7, #7]
 80081b4:	e001      	b.n	80081ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80081b6:	f7ff f836 	bl	8007226 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80081ba:	79fb      	ldrb	r3, [r7, #7]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	58004000 	.word	0x58004000

080081c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80081d4:	4b17      	ldr	r3, [pc, #92]	; (8008234 <HAL_InitTick+0x6c>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d024      	beq.n	8008226 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80081dc:	f005 fdf0 	bl	800ddc0 <HAL_RCC_GetHCLKFreq>
 80081e0:	4602      	mov	r2, r0
 80081e2:	4b14      	ldr	r3, [pc, #80]	; (8008234 <HAL_InitTick+0x6c>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	4619      	mov	r1, r3
 80081e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80081ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80081f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f4:	4618      	mov	r0, r3
 80081f6:	f001 fa4a 	bl	800968e <HAL_SYSTICK_Config>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10f      	bne.n	8008220 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b0f      	cmp	r3, #15
 8008204:	d809      	bhi.n	800821a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008206:	2200      	movs	r2, #0
 8008208:	6879      	ldr	r1, [r7, #4]
 800820a:	f04f 30ff 	mov.w	r0, #4294967295
 800820e:	f001 fa08 	bl	8009622 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008212:	4a09      	ldr	r2, [pc, #36]	; (8008238 <HAL_InitTick+0x70>)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	e007      	b.n	800822a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	73fb      	strb	r3, [r7, #15]
 800821e:	e004      	b.n	800822a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	73fb      	strb	r3, [r7, #15]
 8008224:	e001      	b.n	800822a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800822a:	7bfb      	ldrb	r3, [r7, #15]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	20000034 	.word	0x20000034
 8008238:	20000030 	.word	0x20000030

0800823c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008240:	4b06      	ldr	r3, [pc, #24]	; (800825c <HAL_IncTick+0x20>)
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	461a      	mov	r2, r3
 8008246:	4b06      	ldr	r3, [pc, #24]	; (8008260 <HAL_IncTick+0x24>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4413      	add	r3, r2
 800824c:	4a04      	ldr	r2, [pc, #16]	; (8008260 <HAL_IncTick+0x24>)
 800824e:	6013      	str	r3, [r2, #0]
}
 8008250:	bf00      	nop
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	20000034 	.word	0x20000034
 8008260:	20001550 	.word	0x20001550

08008264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008264:	b480      	push	{r7}
 8008266:	af00      	add	r7, sp, #0
  return uwTick;
 8008268:	4b03      	ldr	r3, [pc, #12]	; (8008278 <HAL_GetTick+0x14>)
 800826a:	681b      	ldr	r3, [r3, #0]
}
 800826c:	4618      	mov	r0, r3
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	20001550 	.word	0x20001550

0800827c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800827c:	b480      	push	{r7}
 800827e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8008280:	4b03      	ldr	r3, [pc, #12]	; (8008290 <HAL_GetTickPrio+0x14>)
 8008282:	681b      	ldr	r3, [r3, #0]
}
 8008284:	4618      	mov	r0, r3
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	20000030 	.word	0x20000030

08008294 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8008294:	b480      	push	{r7}
 8008296:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8008298:	4b03      	ldr	r3, [pc, #12]	; (80082a8 <HAL_GetTickFreq+0x14>)
 800829a:	781b      	ldrb	r3, [r3, #0]
}
 800829c:	4618      	mov	r0, r3
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	20000034 	.word	0x20000034

080082ac <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	431a      	orrs	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	431a      	orrs	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	609a      	str	r2, [r3, #8]
}
 80082ec:	bf00      	nop
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008308:	4618      	mov	r0, r3
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3360      	adds	r3, #96	; 0x60
 8008326:	461a      	mov	r2, r3
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	4b08      	ldr	r3, [pc, #32]	; (8008358 <LL_ADC_SetOffset+0x44>)
 8008336:	4013      	ands	r3, r2
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	430a      	orrs	r2, r1
 8008342:	4313      	orrs	r3, r2
 8008344:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800834c:	bf00      	nop
 800834e:	371c      	adds	r7, #28
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	03fff000 	.word	0x03fff000

0800835c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	3360      	adds	r3, #96	; 0x60
 800836a:	461a      	mov	r2, r3
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800837c:	4618      	mov	r0, r3
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008388:	b480      	push	{r7}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	3360      	adds	r3, #96	; 0x60
 8008398:	461a      	mov	r2, r3
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	431a      	orrs	r2, r3
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80083b2:	bf00      	nop
 80083b4:	371c      	adds	r7, #28
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80083be:	b480      	push	{r7}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80083d2:	2301      	movs	r3, #1
 80083d4:	e000      	b.n	80083d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80083d6:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	3330      	adds	r3, #48	; 0x30
 80083f4:	461a      	mov	r2, r3
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	0a1b      	lsrs	r3, r3, #8
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	f003 030c 	and.w	r3, r3, #12
 8008400:	4413      	add	r3, r2
 8008402:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f003 031f 	and.w	r3, r3, #31
 800840e:	211f      	movs	r1, #31
 8008410:	fa01 f303 	lsl.w	r3, r1, r3
 8008414:	43db      	mvns	r3, r3
 8008416:	401a      	ands	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	0e9b      	lsrs	r3, r3, #26
 800841c:	f003 011f 	and.w	r1, r3, #31
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	f003 031f 	and.w	r3, r3, #31
 8008426:	fa01 f303 	lsl.w	r3, r1, r3
 800842a:	431a      	orrs	r2, r3
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008430:	bf00      	nop
 8008432:	371c      	adds	r7, #28
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800843c:	b480      	push	{r7}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3314      	adds	r3, #20
 800844c:	461a      	mov	r2, r3
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	0e5b      	lsrs	r3, r3, #25
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	f003 0304 	and.w	r3, r3, #4
 8008458:	4413      	add	r3, r2
 800845a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	0d1b      	lsrs	r3, r3, #20
 8008464:	f003 031f 	and.w	r3, r3, #31
 8008468:	2107      	movs	r1, #7
 800846a:	fa01 f303 	lsl.w	r3, r1, r3
 800846e:	43db      	mvns	r3, r3
 8008470:	401a      	ands	r2, r3
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	0d1b      	lsrs	r3, r3, #20
 8008476:	f003 031f 	and.w	r3, r3, #31
 800847a:	6879      	ldr	r1, [r7, #4]
 800847c:	fa01 f303 	lsl.w	r3, r1, r3
 8008480:	431a      	orrs	r2, r3
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008486:	bf00      	nop
 8008488:	371c      	adds	r7, #28
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
	...

08008494 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084ac:	43db      	mvns	r3, r3
 80084ae:	401a      	ands	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f003 0318 	and.w	r3, r3, #24
 80084b6:	4908      	ldr	r1, [pc, #32]	; (80084d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80084b8:	40d9      	lsrs	r1, r3
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	400b      	ands	r3, r1
 80084be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084c2:	431a      	orrs	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80084ca:	bf00      	nop
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	0007ffff 	.word	0x0007ffff

080084dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80084ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	6093      	str	r3, [r2, #8]
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008514:	d101      	bne.n	800851a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008516:	2301      	movs	r3, #1
 8008518:	e000      	b.n	800851c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008538:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800853c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008560:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008564:	d101      	bne.n	800856a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008566:	2301      	movs	r3, #1
 8008568:	e000      	b.n	800856c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008588:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800858c:	f043 0201 	orr.w	r2, r3, #1
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d101      	bne.n	80085b8 <LL_ADC_IsEnabled+0x18>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e000      	b.n	80085ba <LL_ADC_IsEnabled+0x1a>
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b083      	sub	sp, #12
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80085da:	f043 0204 	orr.w	r2, r3, #4
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80085e2:	bf00      	nop
 80085e4:	370c      	adds	r7, #12
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b083      	sub	sp, #12
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f003 0304 	and.w	r3, r3, #4
 80085fe:	2b04      	cmp	r3, #4
 8008600:	d101      	bne.n	8008606 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008602:	2301      	movs	r3, #1
 8008604:	e000      	b.n	8008608 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b08      	cmp	r3, #8
 8008626:	d101      	bne.n	800862c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008628:	2301      	movs	r3, #1
 800862a:	e000      	b.n	800862e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
	...

0800863c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b088      	sub	sp, #32
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8008648:	2300      	movs	r3, #0
 800864a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800864c:	2300      	movs	r3, #0
 800864e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e12e      	b.n	80088b8 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008664:	2b00      	cmp	r3, #0
 8008666:	d109      	bne.n	800867c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7f8 ff0d 	bl	8001488 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4618      	mov	r0, r3
 8008682:	f7ff ff3d 	bl	8008500 <LL_ADC_IsDeepPowerDownEnabled>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d004      	beq.n	8008696 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4618      	mov	r0, r3
 8008692:	f7ff ff23 	bl	80084dc <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4618      	mov	r0, r3
 800869c:	f7ff ff58 	bl	8008550 <LL_ADC_IsInternalRegulatorEnabled>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d115      	bne.n	80086d2 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7ff ff3c 	bl	8008528 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80086b0:	4b83      	ldr	r3, [pc, #524]	; (80088c0 <HAL_ADC_Init+0x284>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	099b      	lsrs	r3, r3, #6
 80086b6:	4a83      	ldr	r2, [pc, #524]	; (80088c4 <HAL_ADC_Init+0x288>)
 80086b8:	fba2 2303 	umull	r2, r3, r2, r3
 80086bc:	099b      	lsrs	r3, r3, #6
 80086be:	3301      	adds	r3, #1
 80086c0:	005b      	lsls	r3, r3, #1
 80086c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80086c4:	e002      	b.n	80086cc <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1f9      	bne.n	80086c6 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7ff ff3a 	bl	8008550 <LL_ADC_IsInternalRegulatorEnabled>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10d      	bne.n	80086fe <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e6:	f043 0210 	orr.w	r2, r3, #16
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f2:	f043 0201 	orr.w	r2, r3, #1
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff ff73 	bl	80085ee <LL_ADC_REG_IsConversionOngoing>
 8008708:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800870e:	f003 0310 	and.w	r3, r3, #16
 8008712:	2b00      	cmp	r3, #0
 8008714:	f040 80c7 	bne.w	80088a6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	2b00      	cmp	r3, #0
 800871c:	f040 80c3 	bne.w	80088a6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008724:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008728:	f043 0202 	orr.w	r2, r3, #2
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4618      	mov	r0, r3
 8008736:	f7ff ff33 	bl	80085a0 <LL_ADC_IsEnabled>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10b      	bne.n	8008758 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008740:	4861      	ldr	r0, [pc, #388]	; (80088c8 <HAL_ADC_Init+0x28c>)
 8008742:	f7ff ff2d 	bl	80085a0 <LL_ADC_IsEnabled>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d105      	bne.n	8008758 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	4619      	mov	r1, r3
 8008752:	485e      	ldr	r0, [pc, #376]	; (80088cc <HAL_ADC_Init+0x290>)
 8008754:	f7ff fdaa 	bl	80082ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	7e5b      	ldrb	r3, [r3, #25]
 800875c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008762:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008768:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800876e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008776:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8008778:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	4313      	orrs	r3, r2
 800877e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d106      	bne.n	8008798 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	3b01      	subs	r3, #1
 8008790:	045b      	lsls	r3, r3, #17
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	4313      	orrs	r3, r2
 8008796:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879c:	2b00      	cmp	r3, #0
 800879e:	d009      	beq.n	80087b4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	4b45      	ldr	r3, [pc, #276]	; (80088d0 <HAL_ADC_Init+0x294>)
 80087bc:	4013      	ands	r3, r2
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	6812      	ldr	r2, [r2, #0]
 80087c2:	69b9      	ldr	r1, [r7, #24]
 80087c4:	430b      	orrs	r3, r1
 80087c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff ff0e 	bl	80085ee <LL_ADC_REG_IsConversionOngoing>
 80087d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff ff1b 	bl	8008614 <LL_ADC_INJ_IsConversionOngoing>
 80087de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d13d      	bne.n	8008862 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d13a      	bne.n	8008862 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80087f0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087f8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80087fa:	4313      	orrs	r3, r2
 80087fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008808:	f023 0302 	bic.w	r3, r3, #2
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6812      	ldr	r2, [r2, #0]
 8008810:	69b9      	ldr	r1, [r7, #24]
 8008812:	430b      	orrs	r3, r1
 8008814:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800881c:	2b01      	cmp	r3, #1
 800881e:	d118      	bne.n	8008852 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800882a:	f023 0304 	bic.w	r3, r3, #4
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008836:	4311      	orrs	r1, r2
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800883c:	4311      	orrs	r1, r2
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008842:	430a      	orrs	r2, r1
 8008844:	431a      	orrs	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f042 0201 	orr.w	r2, r2, #1
 800884e:	611a      	str	r2, [r3, #16]
 8008850:	e007      	b.n	8008862 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	691a      	ldr	r2, [r3, #16]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f022 0201 	bic.w	r2, r2, #1
 8008860:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d10c      	bne.n	8008884 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008870:	f023 010f 	bic.w	r1, r3, #15
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	1e5a      	subs	r2, r3, #1
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	430a      	orrs	r2, r1
 8008880:	631a      	str	r2, [r3, #48]	; 0x30
 8008882:	e007      	b.n	8008894 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f022 020f 	bic.w	r2, r2, #15
 8008892:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008898:	f023 0303 	bic.w	r3, r3, #3
 800889c:	f043 0201 	orr.w	r2, r3, #1
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	655a      	str	r2, [r3, #84]	; 0x54
 80088a4:	e007      	b.n	80088b6 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088aa:	f043 0210 	orr.w	r2, r3, #16
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80088b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3720      	adds	r7, #32
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	2000002c 	.word	0x2000002c
 80088c4:	053e2d63 	.word	0x053e2d63
 80088c8:	50040000 	.word	0x50040000
 80088cc:	50040300 	.word	0x50040300
 80088d0:	fff0c007 	.word	0xfff0c007

080088d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7ff fe82 	bl	80085ee <LL_ADC_REG_IsConversionOngoing>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d167      	bne.n	80089c0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d101      	bne.n	80088fe <HAL_ADC_Start_DMA+0x2a>
 80088fa:	2302      	movs	r3, #2
 80088fc:	e063      	b.n	80089c6 <HAL_ADC_Start_DMA+0xf2>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f000 fc42 	bl	8009190 <ADC_Enable>
 800890c:	4603      	mov	r3, r0
 800890e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008910:	7dfb      	ldrb	r3, [r7, #23]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d14f      	bne.n	80089b6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800891e:	f023 0301 	bic.w	r3, r3, #1
 8008922:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800892e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008932:	2b00      	cmp	r3, #0
 8008934:	d006      	beq.n	8008944 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800893a:	f023 0206 	bic.w	r2, r3, #6
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	659a      	str	r2, [r3, #88]	; 0x58
 8008942:	e002      	b.n	800894a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800894e:	4a20      	ldr	r2, [pc, #128]	; (80089d0 <HAL_ADC_Start_DMA+0xfc>)
 8008950:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008956:	4a1f      	ldr	r2, [pc, #124]	; (80089d4 <HAL_ADC_Start_DMA+0x100>)
 8008958:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800895e:	4a1e      	ldr	r2, [pc, #120]	; (80089d8 <HAL_ADC_Start_DMA+0x104>)
 8008960:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	221c      	movs	r2, #28
 8008968:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	685a      	ldr	r2, [r3, #4]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f042 0210 	orr.w	r2, r2, #16
 8008980:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68da      	ldr	r2, [r3, #12]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f042 0201 	orr.w	r2, r2, #1
 8008990:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	3340      	adds	r3, #64	; 0x40
 800899c:	4619      	mov	r1, r3
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f000 ffdb 	bl	800995c <HAL_DMA_Start_IT>
 80089a6:	4603      	mov	r3, r0
 80089a8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7ff fe09 	bl	80085c6 <LL_ADC_REG_StartConversion>
 80089b4:	e006      	b.n	80089c4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80089be:	e001      	b.n	80089c4 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80089c0:	2302      	movs	r3, #2
 80089c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3718      	adds	r7, #24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	08009285 	.word	0x08009285
 80089d4:	0800935d 	.word	0x0800935d
 80089d8:	08009379 	.word	0x08009379

080089dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80089f8:	bf00      	nop
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b0b6      	sub	sp, #216	; 0xd8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008a14:	2300      	movs	r3, #0
 8008a16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d101      	bne.n	8008a26 <HAL_ADC_ConfigChannel+0x22>
 8008a22:	2302      	movs	r3, #2
 8008a24:	e39f      	b.n	8009166 <HAL_ADC_ConfigChannel+0x762>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7ff fddb 	bl	80085ee <LL_ADC_REG_IsConversionOngoing>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f040 8384 	bne.w	8009148 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6818      	ldr	r0, [r3, #0]
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	6859      	ldr	r1, [r3, #4]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	f7ff fcc9 	bl	80083e4 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7ff fdc9 	bl	80085ee <LL_ADC_REG_IsConversionOngoing>
 8008a5c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7ff fdd5 	bl	8008614 <LL_ADC_INJ_IsConversionOngoing>
 8008a6a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008a6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f040 81a6 	bne.w	8008dc4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008a78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f040 81a1 	bne.w	8008dc4 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6818      	ldr	r0, [r3, #0]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	6819      	ldr	r1, [r3, #0]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	f7ff fcd4 	bl	800843c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	695a      	ldr	r2, [r3, #20]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	08db      	lsrs	r3, r3, #3
 8008aa0:	f003 0303 	and.w	r3, r3, #3
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	2b04      	cmp	r3, #4
 8008ab4:	d00a      	beq.n	8008acc <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6818      	ldr	r0, [r3, #0]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	6919      	ldr	r1, [r3, #16]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ac6:	f7ff fc25 	bl	8008314 <LL_ADC_SetOffset>
 8008aca:	e17b      	b.n	8008dc4 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7ff fc42 	bl	800835c <LL_ADC_GetOffsetChannel>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10a      	bne.n	8008af8 <HAL_ADC_ConfigChannel+0xf4>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff fc37 	bl	800835c <LL_ADC_GetOffsetChannel>
 8008aee:	4603      	mov	r3, r0
 8008af0:	0e9b      	lsrs	r3, r3, #26
 8008af2:	f003 021f 	and.w	r2, r3, #31
 8008af6:	e01e      	b.n	8008b36 <HAL_ADC_ConfigChannel+0x132>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2100      	movs	r1, #0
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7ff fc2c 	bl	800835c <LL_ADC_GetOffsetChannel>
 8008b04:	4603      	mov	r3, r0
 8008b06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b0e:	fa93 f3a3 	rbit	r3, r3
 8008b12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8008b16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8008b1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8008b26:	2320      	movs	r3, #32
 8008b28:	e004      	b.n	8008b34 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8008b2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008b2e:	fab3 f383 	clz	r3, r3
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	461a      	mov	r2, r3
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d105      	bne.n	8008b4e <HAL_ADC_ConfigChannel+0x14a>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	0e9b      	lsrs	r3, r3, #26
 8008b48:	f003 031f 	and.w	r3, r3, #31
 8008b4c:	e018      	b.n	8008b80 <HAL_ADC_ConfigChannel+0x17c>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008b5a:	fa93 f3a3 	rbit	r3, r3
 8008b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8008b62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8008b6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8008b72:	2320      	movs	r3, #32
 8008b74:	e004      	b.n	8008b80 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8008b76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b7a:	fab3 f383 	clz	r3, r3
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d106      	bne.n	8008b92 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7ff fbfb 	bl	8008388 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2101      	movs	r1, #1
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7ff fbdf 	bl	800835c <LL_ADC_GetOffsetChannel>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <HAL_ADC_ConfigChannel+0x1ba>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2101      	movs	r1, #1
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7ff fbd4 	bl	800835c <LL_ADC_GetOffsetChannel>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	0e9b      	lsrs	r3, r3, #26
 8008bb8:	f003 021f 	and.w	r2, r3, #31
 8008bbc:	e01e      	b.n	8008bfc <HAL_ADC_ConfigChannel+0x1f8>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7ff fbc9 	bl	800835c <LL_ADC_GetOffsetChannel>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008bd4:	fa93 f3a3 	rbit	r3, r3
 8008bd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8008bdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008be0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8008be4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8008bec:	2320      	movs	r3, #32
 8008bee:	e004      	b.n	8008bfa <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8008bf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008bf4:	fab3 f383 	clz	r3, r3
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d105      	bne.n	8008c14 <HAL_ADC_ConfigChannel+0x210>
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	0e9b      	lsrs	r3, r3, #26
 8008c0e:	f003 031f 	and.w	r3, r3, #31
 8008c12:	e018      	b.n	8008c46 <HAL_ADC_ConfigChannel+0x242>
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c20:	fa93 f3a3 	rbit	r3, r3
 8008c24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8008c28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008c2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8008c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8008c38:	2320      	movs	r3, #32
 8008c3a:	e004      	b.n	8008c46 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8008c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c40:	fab3 f383 	clz	r3, r3
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d106      	bne.n	8008c58 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	2101      	movs	r1, #1
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff fb98 	bl	8008388 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2102      	movs	r1, #2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff fb7c 	bl	800835c <LL_ADC_GetOffsetChannel>
 8008c64:	4603      	mov	r3, r0
 8008c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10a      	bne.n	8008c84 <HAL_ADC_ConfigChannel+0x280>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2102      	movs	r1, #2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7ff fb71 	bl	800835c <LL_ADC_GetOffsetChannel>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	0e9b      	lsrs	r3, r3, #26
 8008c7e:	f003 021f 	and.w	r2, r3, #31
 8008c82:	e01e      	b.n	8008cc2 <HAL_ADC_ConfigChannel+0x2be>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2102      	movs	r1, #2
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7ff fb66 	bl	800835c <LL_ADC_GetOffsetChannel>
 8008c90:	4603      	mov	r3, r0
 8008c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c9a:	fa93 f3a3 	rbit	r3, r3
 8008c9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8008ca2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ca6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8008caa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d101      	bne.n	8008cb6 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8008cb2:	2320      	movs	r3, #32
 8008cb4:	e004      	b.n	8008cc0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8008cb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008cba:	fab3 f383 	clz	r3, r3
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d105      	bne.n	8008cda <HAL_ADC_ConfigChannel+0x2d6>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	0e9b      	lsrs	r3, r3, #26
 8008cd4:	f003 031f 	and.w	r3, r3, #31
 8008cd8:	e016      	b.n	8008d08 <HAL_ADC_ConfigChannel+0x304>
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ce2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ce6:	fa93 f3a3 	rbit	r3, r3
 8008cea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008cec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008cee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8008cf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8008cfa:	2320      	movs	r3, #32
 8008cfc:	e004      	b.n	8008d08 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8008cfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d02:	fab3 f383 	clz	r3, r3
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d106      	bne.n	8008d1a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2200      	movs	r2, #0
 8008d12:	2102      	movs	r1, #2
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7ff fb37 	bl	8008388 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2103      	movs	r1, #3
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7ff fb1b 	bl	800835c <LL_ADC_GetOffsetChannel>
 8008d26:	4603      	mov	r3, r0
 8008d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10a      	bne.n	8008d46 <HAL_ADC_ConfigChannel+0x342>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2103      	movs	r1, #3
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7ff fb10 	bl	800835c <LL_ADC_GetOffsetChannel>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	0e9b      	lsrs	r3, r3, #26
 8008d40:	f003 021f 	and.w	r2, r3, #31
 8008d44:	e017      	b.n	8008d76 <HAL_ADC_ConfigChannel+0x372>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2103      	movs	r1, #3
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7ff fb05 	bl	800835c <LL_ADC_GetOffsetChannel>
 8008d52:	4603      	mov	r3, r0
 8008d54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d58:	fa93 f3a3 	rbit	r3, r3
 8008d5c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008d5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d60:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8008d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8008d68:	2320      	movs	r3, #32
 8008d6a:	e003      	b.n	8008d74 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8008d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d6e:	fab3 f383 	clz	r3, r3
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	461a      	mov	r2, r3
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d105      	bne.n	8008d8e <HAL_ADC_ConfigChannel+0x38a>
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	0e9b      	lsrs	r3, r3, #26
 8008d88:	f003 031f 	and.w	r3, r3, #31
 8008d8c:	e011      	b.n	8008db2 <HAL_ADC_ConfigChannel+0x3ae>
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d96:	fa93 f3a3 	rbit	r3, r3
 8008d9a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8008da6:	2320      	movs	r3, #32
 8008da8:	e003      	b.n	8008db2 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8008daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dac:	fab3 f383 	clz	r3, r3
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d106      	bne.n	8008dc4 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	2103      	movs	r1, #3
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7ff fae2 	bl	8008388 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7ff fbe9 	bl	80085a0 <LL_ADC_IsEnabled>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f040 81c2 	bne.w	800915a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6818      	ldr	r0, [r3, #0]
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	6819      	ldr	r1, [r3, #0]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	461a      	mov	r2, r3
 8008de4:	f7ff fb56 	bl	8008494 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	4a8e      	ldr	r2, [pc, #568]	; (8009028 <HAL_ADC_ConfigChannel+0x624>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	f040 8130 	bne.w	8009054 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10b      	bne.n	8008e1c <HAL_ADC_ConfigChannel+0x418>
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	0e9b      	lsrs	r3, r3, #26
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	f003 031f 	and.w	r3, r3, #31
 8008e10:	2b09      	cmp	r3, #9
 8008e12:	bf94      	ite	ls
 8008e14:	2301      	movls	r3, #1
 8008e16:	2300      	movhi	r3, #0
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	e019      	b.n	8008e50 <HAL_ADC_ConfigChannel+0x44c>
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e24:	fa93 f3a3 	rbit	r3, r3
 8008e28:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e2c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8008e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d101      	bne.n	8008e38 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8008e34:	2320      	movs	r3, #32
 8008e36:	e003      	b.n	8008e40 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8008e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e3a:	fab3 f383 	clz	r3, r3
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	3301      	adds	r3, #1
 8008e42:	f003 031f 	and.w	r3, r3, #31
 8008e46:	2b09      	cmp	r3, #9
 8008e48:	bf94      	ite	ls
 8008e4a:	2301      	movls	r3, #1
 8008e4c:	2300      	movhi	r3, #0
 8008e4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d079      	beq.n	8008f48 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d107      	bne.n	8008e70 <HAL_ADC_ConfigChannel+0x46c>
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	0e9b      	lsrs	r3, r3, #26
 8008e66:	3301      	adds	r3, #1
 8008e68:	069b      	lsls	r3, r3, #26
 8008e6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008e6e:	e015      	b.n	8008e9c <HAL_ADC_ConfigChannel+0x498>
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e78:	fa93 f3a3 	rbit	r3, r3
 8008e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e80:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8008e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d101      	bne.n	8008e8c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008e88:	2320      	movs	r3, #32
 8008e8a:	e003      	b.n	8008e94 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8008e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e8e:	fab3 f383 	clz	r3, r3
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	3301      	adds	r3, #1
 8008e96:	069b      	lsls	r3, r3, #26
 8008e98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d109      	bne.n	8008ebc <HAL_ADC_ConfigChannel+0x4b8>
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	0e9b      	lsrs	r3, r3, #26
 8008eae:	3301      	adds	r3, #1
 8008eb0:	f003 031f 	and.w	r3, r3, #31
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eba:	e017      	b.n	8008eec <HAL_ADC_ConfigChannel+0x4e8>
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ec4:	fa93 f3a3 	rbit	r3, r3
 8008ec8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ecc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d101      	bne.n	8008ed8 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8008ed4:	2320      	movs	r3, #32
 8008ed6:	e003      	b.n	8008ee0 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8008ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eda:	fab3 f383 	clz	r3, r3
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	f003 031f 	and.w	r3, r3, #31
 8008ee6:	2101      	movs	r1, #1
 8008ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8008eec:	ea42 0103 	orr.w	r1, r2, r3
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10a      	bne.n	8008f12 <HAL_ADC_ConfigChannel+0x50e>
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	0e9b      	lsrs	r3, r3, #26
 8008f02:	3301      	adds	r3, #1
 8008f04:	f003 021f 	and.w	r2, r3, #31
 8008f08:	4613      	mov	r3, r2
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	4413      	add	r3, r2
 8008f0e:	051b      	lsls	r3, r3, #20
 8008f10:	e018      	b.n	8008f44 <HAL_ADC_ConfigChannel+0x540>
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1a:	fa93 f3a3 	rbit	r3, r3
 8008f1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8008f2a:	2320      	movs	r3, #32
 8008f2c:	e003      	b.n	8008f36 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8008f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f30:	fab3 f383 	clz	r3, r3
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	3301      	adds	r3, #1
 8008f38:	f003 021f 	and.w	r2, r3, #31
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	005b      	lsls	r3, r3, #1
 8008f40:	4413      	add	r3, r2
 8008f42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008f44:	430b      	orrs	r3, r1
 8008f46:	e080      	b.n	800904a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d107      	bne.n	8008f64 <HAL_ADC_ConfigChannel+0x560>
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	0e9b      	lsrs	r3, r3, #26
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	069b      	lsls	r3, r3, #26
 8008f5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008f62:	e015      	b.n	8008f90 <HAL_ADC_ConfigChannel+0x58c>
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6c:	fa93 f3a3 	rbit	r3, r3
 8008f70:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8008f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f74:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8008f7c:	2320      	movs	r3, #32
 8008f7e:	e003      	b.n	8008f88 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	fab3 f383 	clz	r3, r3
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	3301      	adds	r3, #1
 8008f8a:	069b      	lsls	r3, r3, #26
 8008f8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d109      	bne.n	8008fb0 <HAL_ADC_ConfigChannel+0x5ac>
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	0e9b      	lsrs	r3, r3, #26
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	f003 031f 	and.w	r3, r3, #31
 8008fa8:	2101      	movs	r1, #1
 8008faa:	fa01 f303 	lsl.w	r3, r1, r3
 8008fae:	e017      	b.n	8008fe0 <HAL_ADC_ConfigChannel+0x5dc>
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fb6:	6a3b      	ldr	r3, [r7, #32]
 8008fb8:	fa93 f3a3 	rbit	r3, r3
 8008fbc:	61fb      	str	r3, [r7, #28]
  return result;
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d101      	bne.n	8008fcc <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8008fc8:	2320      	movs	r3, #32
 8008fca:	e003      	b.n	8008fd4 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	fab3 f383 	clz	r3, r3
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	f003 031f 	and.w	r3, r3, #31
 8008fda:	2101      	movs	r1, #1
 8008fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8008fe0:	ea42 0103 	orr.w	r1, r2, r3
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10d      	bne.n	800900c <HAL_ADC_ConfigChannel+0x608>
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	0e9b      	lsrs	r3, r3, #26
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	f003 021f 	and.w	r2, r3, #31
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	005b      	lsls	r3, r3, #1
 8009000:	4413      	add	r3, r2
 8009002:	3b1e      	subs	r3, #30
 8009004:	051b      	lsls	r3, r3, #20
 8009006:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800900a:	e01d      	b.n	8009048 <HAL_ADC_ConfigChannel+0x644>
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	fa93 f3a3 	rbit	r3, r3
 8009018:	613b      	str	r3, [r7, #16]
  return result;
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d103      	bne.n	800902c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8009024:	2320      	movs	r3, #32
 8009026:	e005      	b.n	8009034 <HAL_ADC_ConfigChannel+0x630>
 8009028:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	fab3 f383 	clz	r3, r3
 8009032:	b2db      	uxtb	r3, r3
 8009034:	3301      	adds	r3, #1
 8009036:	f003 021f 	and.w	r2, r3, #31
 800903a:	4613      	mov	r3, r2
 800903c:	005b      	lsls	r3, r3, #1
 800903e:	4413      	add	r3, r2
 8009040:	3b1e      	subs	r3, #30
 8009042:	051b      	lsls	r3, r3, #20
 8009044:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009048:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800904e:	4619      	mov	r1, r3
 8009050:	f7ff f9f4 	bl	800843c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	4b45      	ldr	r3, [pc, #276]	; (8009170 <HAL_ADC_ConfigChannel+0x76c>)
 800905a:	4013      	ands	r3, r2
 800905c:	2b00      	cmp	r3, #0
 800905e:	d07c      	beq.n	800915a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009060:	4844      	ldr	r0, [pc, #272]	; (8009174 <HAL_ADC_ConfigChannel+0x770>)
 8009062:	f7ff f949 	bl	80082f8 <LL_ADC_GetCommonPathInternalCh>
 8009066:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800906a:	4843      	ldr	r0, [pc, #268]	; (8009178 <HAL_ADC_ConfigChannel+0x774>)
 800906c:	f7ff fa98 	bl	80085a0 <LL_ADC_IsEnabled>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d15e      	bne.n	8009134 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a40      	ldr	r2, [pc, #256]	; (800917c <HAL_ADC_ConfigChannel+0x778>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d127      	bne.n	80090d0 <HAL_ADC_ConfigChannel+0x6cc>
 8009080:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d121      	bne.n	80090d0 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a39      	ldr	r2, [pc, #228]	; (8009178 <HAL_ADC_ConfigChannel+0x774>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d161      	bne.n	800915a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8009096:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800909a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800909e:	4619      	mov	r1, r3
 80090a0:	4834      	ldr	r0, [pc, #208]	; (8009174 <HAL_ADC_ConfigChannel+0x770>)
 80090a2:	f7ff f916 	bl	80082d2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80090a6:	4b36      	ldr	r3, [pc, #216]	; (8009180 <HAL_ADC_ConfigChannel+0x77c>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	099b      	lsrs	r3, r3, #6
 80090ac:	4a35      	ldr	r2, [pc, #212]	; (8009184 <HAL_ADC_ConfigChannel+0x780>)
 80090ae:	fba2 2303 	umull	r2, r3, r2, r3
 80090b2:	099b      	lsrs	r3, r3, #6
 80090b4:	1c5a      	adds	r2, r3, #1
 80090b6:	4613      	mov	r3, r2
 80090b8:	005b      	lsls	r3, r3, #1
 80090ba:	4413      	add	r3, r2
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80090c0:	e002      	b.n	80090c8 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	3b01      	subs	r3, #1
 80090c6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1f9      	bne.n	80090c2 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80090ce:	e044      	b.n	800915a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a2c      	ldr	r2, [pc, #176]	; (8009188 <HAL_ADC_ConfigChannel+0x784>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d113      	bne.n	8009102 <HAL_ADC_ConfigChannel+0x6fe>
 80090da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80090de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10d      	bne.n	8009102 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a23      	ldr	r2, [pc, #140]	; (8009178 <HAL_ADC_ConfigChannel+0x774>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d134      	bne.n	800915a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80090f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80090f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090f8:	4619      	mov	r1, r3
 80090fa:	481e      	ldr	r0, [pc, #120]	; (8009174 <HAL_ADC_ConfigChannel+0x770>)
 80090fc:	f7ff f8e9 	bl	80082d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009100:	e02b      	b.n	800915a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a21      	ldr	r2, [pc, #132]	; (800918c <HAL_ADC_ConfigChannel+0x788>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d126      	bne.n	800915a <HAL_ADC_ConfigChannel+0x756>
 800910c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009114:	2b00      	cmp	r3, #0
 8009116:	d120      	bne.n	800915a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a16      	ldr	r2, [pc, #88]	; (8009178 <HAL_ADC_ConfigChannel+0x774>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d11b      	bne.n	800915a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8009122:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009126:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800912a:	4619      	mov	r1, r3
 800912c:	4811      	ldr	r0, [pc, #68]	; (8009174 <HAL_ADC_ConfigChannel+0x770>)
 800912e:	f7ff f8d0 	bl	80082d2 <LL_ADC_SetCommonPathInternalCh>
 8009132:	e012      	b.n	800915a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009138:	f043 0220 	orr.w	r2, r3, #32
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8009146:	e008      	b.n	800915a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800914c:	f043 0220 	orr.w	r2, r3, #32
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8009162:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8009166:	4618      	mov	r0, r3
 8009168:	37d8      	adds	r7, #216	; 0xd8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	80080000 	.word	0x80080000
 8009174:	50040300 	.word	0x50040300
 8009178:	50040000 	.word	0x50040000
 800917c:	c7520000 	.word	0xc7520000
 8009180:	2000002c 	.word	0x2000002c
 8009184:	053e2d63 	.word	0x053e2d63
 8009188:	cb840000 	.word	0xcb840000
 800918c:	80000001 	.word	0x80000001

08009190 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8009198:	2300      	movs	r3, #0
 800919a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7ff f9fd 	bl	80085a0 <LL_ADC_IsEnabled>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d15e      	bne.n	800926a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	689a      	ldr	r2, [r3, #8]
 80091b2:	4b30      	ldr	r3, [pc, #192]	; (8009274 <ADC_Enable+0xe4>)
 80091b4:	4013      	ands	r3, r2
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00d      	beq.n	80091d6 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091be:	f043 0210 	orr.w	r2, r3, #16
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ca:	f043 0201 	orr.w	r2, r3, #1
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e04a      	b.n	800926c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff f9cc 	bl	8008578 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80091e0:	4825      	ldr	r0, [pc, #148]	; (8009278 <ADC_Enable+0xe8>)
 80091e2:	f7ff f889 	bl	80082f8 <LL_ADC_GetCommonPathInternalCh>
 80091e6:	4603      	mov	r3, r0
 80091e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00f      	beq.n	8009210 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80091f0:	4b22      	ldr	r3, [pc, #136]	; (800927c <ADC_Enable+0xec>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	099b      	lsrs	r3, r3, #6
 80091f6:	4a22      	ldr	r2, [pc, #136]	; (8009280 <ADC_Enable+0xf0>)
 80091f8:	fba2 2303 	umull	r2, r3, r2, r3
 80091fc:	099b      	lsrs	r3, r3, #6
 80091fe:	3301      	adds	r3, #1
 8009200:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8009202:	e002      	b.n	800920a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	3b01      	subs	r3, #1
 8009208:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1f9      	bne.n	8009204 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8009210:	f7ff f828 	bl	8008264 <HAL_GetTick>
 8009214:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009216:	e021      	b.n	800925c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4618      	mov	r0, r3
 800921e:	f7ff f9bf 	bl	80085a0 <LL_ADC_IsEnabled>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d104      	bne.n	8009232 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f7ff f9a3 	bl	8008578 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009232:	f7ff f817 	bl	8008264 <HAL_GetTick>
 8009236:	4602      	mov	r2, r0
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	2b02      	cmp	r3, #2
 800923e:	d90d      	bls.n	800925c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009244:	f043 0210 	orr.w	r2, r3, #16
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009250:	f043 0201 	orr.w	r2, r3, #1
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	e007      	b.n	800926c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b01      	cmp	r3, #1
 8009268:	d1d6      	bne.n	8009218 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	8000003f 	.word	0x8000003f
 8009278:	50040300 	.word	0x50040300
 800927c:	2000002c 	.word	0x2000002c
 8009280:	053e2d63 	.word	0x053e2d63

08009284 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009290:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009296:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800929a:	2b00      	cmp	r3, #0
 800929c:	d14b      	bne.n	8009336 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 0308 	and.w	r3, r3, #8
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d021      	beq.n	80092fc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4618      	mov	r0, r3
 80092be:	f7ff f87e 	bl	80083be <LL_ADC_REG_IsTriggerSourceSWStart>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d032      	beq.n	800932e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d12b      	bne.n	800932e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d11f      	bne.n	800932e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f2:	f043 0201 	orr.w	r2, r3, #1
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	655a      	str	r2, [r3, #84]	; 0x54
 80092fa:	e018      	b.n	800932e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f003 0302 	and.w	r3, r3, #2
 8009306:	2b00      	cmp	r3, #0
 8009308:	d111      	bne.n	800932e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800930e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800931a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d105      	bne.n	800932e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009326:	f043 0201 	orr.w	r2, r3, #1
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f7f8 f906 	bl	8001540 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009334:	e00e      	b.n	8009354 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800933a:	f003 0310 	and.w	r3, r3, #16
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f7ff fb54 	bl	80089f0 <HAL_ADC_ErrorCallback>
}
 8009348:	e004      	b.n	8009354 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800934e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	4798      	blx	r3
}
 8009354:	bf00      	nop
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009368:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f7ff fb36 	bl	80089dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009370:	bf00      	nop
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009384:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800938a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009396:	f043 0204 	orr.w	r2, r3, #4
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f7ff fb26 	bl	80089f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80093a4:	bf00      	nop
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f003 0307 	and.w	r3, r3, #7
 80093ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80093bc:	4b0c      	ldr	r3, [pc, #48]	; (80093f0 <__NVIC_SetPriorityGrouping+0x44>)
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80093c8:	4013      	ands	r3, r2
 80093ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80093d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80093d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80093de:	4a04      	ldr	r2, [pc, #16]	; (80093f0 <__NVIC_SetPriorityGrouping+0x44>)
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	60d3      	str	r3, [r2, #12]
}
 80093e4:	bf00      	nop
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	e000ed00 	.word	0xe000ed00

080093f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80093f4:	b480      	push	{r7}
 80093f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80093f8:	4b04      	ldr	r3, [pc, #16]	; (800940c <__NVIC_GetPriorityGrouping+0x18>)
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	0a1b      	lsrs	r3, r3, #8
 80093fe:	f003 0307 	and.w	r3, r3, #7
}
 8009402:	4618      	mov	r0, r3
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	e000ed00 	.word	0xe000ed00

08009410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800941a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800941e:	2b00      	cmp	r3, #0
 8009420:	db0b      	blt.n	800943a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009422:	79fb      	ldrb	r3, [r7, #7]
 8009424:	f003 021f 	and.w	r2, r3, #31
 8009428:	4907      	ldr	r1, [pc, #28]	; (8009448 <__NVIC_EnableIRQ+0x38>)
 800942a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800942e:	095b      	lsrs	r3, r3, #5
 8009430:	2001      	movs	r0, #1
 8009432:	fa00 f202 	lsl.w	r2, r0, r2
 8009436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800943a:	bf00      	nop
 800943c:	370c      	adds	r7, #12
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	e000e100 	.word	0xe000e100

0800944c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	4603      	mov	r3, r0
 8009454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800945a:	2b00      	cmp	r3, #0
 800945c:	db12      	blt.n	8009484 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800945e:	79fb      	ldrb	r3, [r7, #7]
 8009460:	f003 021f 	and.w	r2, r3, #31
 8009464:	490a      	ldr	r1, [pc, #40]	; (8009490 <__NVIC_DisableIRQ+0x44>)
 8009466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800946a:	095b      	lsrs	r3, r3, #5
 800946c:	2001      	movs	r0, #1
 800946e:	fa00 f202 	lsl.w	r2, r0, r2
 8009472:	3320      	adds	r3, #32
 8009474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009478:	f3bf 8f4f 	dsb	sy
}
 800947c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800947e:	f3bf 8f6f 	isb	sy
}
 8009482:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr
 8009490:	e000e100 	.word	0xe000e100

08009494 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	4603      	mov	r3, r0
 800949c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800949e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	db0c      	blt.n	80094c0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80094a6:	79fb      	ldrb	r3, [r7, #7]
 80094a8:	f003 021f 	and.w	r2, r3, #31
 80094ac:	4907      	ldr	r1, [pc, #28]	; (80094cc <__NVIC_SetPendingIRQ+0x38>)
 80094ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094b2:	095b      	lsrs	r3, r3, #5
 80094b4:	2001      	movs	r0, #1
 80094b6:	fa00 f202 	lsl.w	r2, r0, r2
 80094ba:	3340      	adds	r3, #64	; 0x40
 80094bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	e000e100 	.word	0xe000e100

080094d0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	4603      	mov	r3, r0
 80094d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	db0c      	blt.n	80094fc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80094e2:	79fb      	ldrb	r3, [r7, #7]
 80094e4:	f003 021f 	and.w	r2, r3, #31
 80094e8:	4907      	ldr	r1, [pc, #28]	; (8009508 <__NVIC_ClearPendingIRQ+0x38>)
 80094ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094ee:	095b      	lsrs	r3, r3, #5
 80094f0:	2001      	movs	r0, #1
 80094f2:	fa00 f202 	lsl.w	r2, r0, r2
 80094f6:	3360      	adds	r3, #96	; 0x60
 80094f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	e000e100 	.word	0xe000e100

0800950c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	4603      	mov	r3, r0
 8009514:	6039      	str	r1, [r7, #0]
 8009516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800951c:	2b00      	cmp	r3, #0
 800951e:	db0a      	blt.n	8009536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	b2da      	uxtb	r2, r3
 8009524:	490c      	ldr	r1, [pc, #48]	; (8009558 <__NVIC_SetPriority+0x4c>)
 8009526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800952a:	0112      	lsls	r2, r2, #4
 800952c:	b2d2      	uxtb	r2, r2
 800952e:	440b      	add	r3, r1
 8009530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009534:	e00a      	b.n	800954c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	b2da      	uxtb	r2, r3
 800953a:	4908      	ldr	r1, [pc, #32]	; (800955c <__NVIC_SetPriority+0x50>)
 800953c:	79fb      	ldrb	r3, [r7, #7]
 800953e:	f003 030f 	and.w	r3, r3, #15
 8009542:	3b04      	subs	r3, #4
 8009544:	0112      	lsls	r2, r2, #4
 8009546:	b2d2      	uxtb	r2, r2
 8009548:	440b      	add	r3, r1
 800954a:	761a      	strb	r2, [r3, #24]
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	e000e100 	.word	0xe000e100
 800955c:	e000ed00 	.word	0xe000ed00

08009560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009560:	b480      	push	{r7}
 8009562:	b089      	sub	sp, #36	; 0x24
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f003 0307 	and.w	r3, r3, #7
 8009572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	f1c3 0307 	rsb	r3, r3, #7
 800957a:	2b04      	cmp	r3, #4
 800957c:	bf28      	it	cs
 800957e:	2304      	movcs	r3, #4
 8009580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	3304      	adds	r3, #4
 8009586:	2b06      	cmp	r3, #6
 8009588:	d902      	bls.n	8009590 <NVIC_EncodePriority+0x30>
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	3b03      	subs	r3, #3
 800958e:	e000      	b.n	8009592 <NVIC_EncodePriority+0x32>
 8009590:	2300      	movs	r3, #0
 8009592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009594:	f04f 32ff 	mov.w	r2, #4294967295
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	fa02 f303 	lsl.w	r3, r2, r3
 800959e:	43da      	mvns	r2, r3
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	401a      	ands	r2, r3
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80095a8:	f04f 31ff 	mov.w	r1, #4294967295
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	fa01 f303 	lsl.w	r3, r1, r3
 80095b2:	43d9      	mvns	r1, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095b8:	4313      	orrs	r3, r2
         );
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3724      	adds	r7, #36	; 0x24
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
	...

080095c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	3b01      	subs	r3, #1
 80095d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80095d8:	d301      	bcc.n	80095de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80095da:	2301      	movs	r3, #1
 80095dc:	e00f      	b.n	80095fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80095de:	4a0a      	ldr	r2, [pc, #40]	; (8009608 <SysTick_Config+0x40>)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3b01      	subs	r3, #1
 80095e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80095e6:	210f      	movs	r1, #15
 80095e8:	f04f 30ff 	mov.w	r0, #4294967295
 80095ec:	f7ff ff8e 	bl	800950c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80095f0:	4b05      	ldr	r3, [pc, #20]	; (8009608 <SysTick_Config+0x40>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80095f6:	4b04      	ldr	r3, [pc, #16]	; (8009608 <SysTick_Config+0x40>)
 80095f8:	2207      	movs	r2, #7
 80095fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	e000e010 	.word	0xe000e010

0800960c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f7ff fec9 	bl	80093ac <__NVIC_SetPriorityGrouping>
}
 800961a:	bf00      	nop
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b086      	sub	sp, #24
 8009626:	af00      	add	r7, sp, #0
 8009628:	4603      	mov	r3, r0
 800962a:	60b9      	str	r1, [r7, #8]
 800962c:	607a      	str	r2, [r7, #4]
 800962e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009630:	f7ff fee0 	bl	80093f4 <__NVIC_GetPriorityGrouping>
 8009634:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	68b9      	ldr	r1, [r7, #8]
 800963a:	6978      	ldr	r0, [r7, #20]
 800963c:	f7ff ff90 	bl	8009560 <NVIC_EncodePriority>
 8009640:	4602      	mov	r2, r0
 8009642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009646:	4611      	mov	r1, r2
 8009648:	4618      	mov	r0, r3
 800964a:	f7ff ff5f 	bl	800950c <__NVIC_SetPriority>
}
 800964e:	bf00      	nop
 8009650:	3718      	adds	r7, #24
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b082      	sub	sp, #8
 800965a:	af00      	add	r7, sp, #0
 800965c:	4603      	mov	r3, r0
 800965e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009664:	4618      	mov	r0, r3
 8009666:	f7ff fed3 	bl	8009410 <__NVIC_EnableIRQ>
}
 800966a:	bf00      	nop
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b082      	sub	sp, #8
 8009676:	af00      	add	r7, sp, #0
 8009678:	4603      	mov	r3, r0
 800967a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800967c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009680:	4618      	mov	r0, r3
 8009682:	f7ff fee3 	bl	800944c <__NVIC_DisableIRQ>
}
 8009686:	bf00      	nop
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b082      	sub	sp, #8
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7ff ff96 	bl	80095c8 <SysTick_Config>
 800969c:	4603      	mov	r3, r0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b082      	sub	sp, #8
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	4603      	mov	r3, r0
 80096ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80096b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7ff feed 	bl	8009494 <__NVIC_SetPendingIRQ>
}
 80096ba:	bf00      	nop
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b082      	sub	sp, #8
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	4603      	mov	r3, r0
 80096ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80096cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7ff fefd 	bl	80094d0 <__NVIC_ClearPendingIRQ>
}
 80096d6:	bf00      	nop
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d101      	bne.n	80096f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e08e      	b.n	8009810 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	461a      	mov	r2, r3
 80096f8:	4b47      	ldr	r3, [pc, #284]	; (8009818 <HAL_DMA_Init+0x138>)
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d80f      	bhi.n	800971e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	461a      	mov	r2, r3
 8009704:	4b45      	ldr	r3, [pc, #276]	; (800981c <HAL_DMA_Init+0x13c>)
 8009706:	4413      	add	r3, r2
 8009708:	4a45      	ldr	r2, [pc, #276]	; (8009820 <HAL_DMA_Init+0x140>)
 800970a:	fba2 2303 	umull	r2, r3, r2, r3
 800970e:	091b      	lsrs	r3, r3, #4
 8009710:	009a      	lsls	r2, r3, #2
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a42      	ldr	r2, [pc, #264]	; (8009824 <HAL_DMA_Init+0x144>)
 800971a:	641a      	str	r2, [r3, #64]	; 0x40
 800971c:	e00e      	b.n	800973c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	461a      	mov	r2, r3
 8009724:	4b40      	ldr	r3, [pc, #256]	; (8009828 <HAL_DMA_Init+0x148>)
 8009726:	4413      	add	r3, r2
 8009728:	4a3d      	ldr	r2, [pc, #244]	; (8009820 <HAL_DMA_Init+0x140>)
 800972a:	fba2 2303 	umull	r2, r3, r2, r3
 800972e:	091b      	lsrs	r3, r3, #4
 8009730:	009a      	lsls	r2, r3, #2
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a3c      	ldr	r2, [pc, #240]	; (800982c <HAL_DMA_Init+0x14c>)
 800973a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2202      	movs	r2, #2
 8009740:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009756:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009760:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800976c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009778:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a1b      	ldr	r3, [r3, #32]
 800977e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	4313      	orrs	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fb16 	bl	8009dc0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800979c:	d102      	bne.n	80097a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80097b0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80097ba:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d010      	beq.n	80097e6 <HAL_DMA_Init+0x106>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	2b04      	cmp	r3, #4
 80097ca:	d80c      	bhi.n	80097e6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 fb35 	bl	8009e3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097d6:	2200      	movs	r2, #0
 80097d8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80097e2:	605a      	str	r2, [r3, #4]
 80097e4:	e008      	b.n	80097f8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	40020407 	.word	0x40020407
 800981c:	bffdfff8 	.word	0xbffdfff8
 8009820:	cccccccd 	.word	0xcccccccd
 8009824:	40020000 	.word	0x40020000
 8009828:	bffdfbf8 	.word	0xbffdfbf8
 800982c:	40020400 	.word	0x40020400

08009830 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d101      	bne.n	8009842 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	e07b      	b.n	800993a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0201 	bic.w	r2, r2, #1
 8009850:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	461a      	mov	r2, r3
 8009858:	4b3a      	ldr	r3, [pc, #232]	; (8009944 <HAL_DMA_DeInit+0x114>)
 800985a:	429a      	cmp	r2, r3
 800985c:	d80f      	bhi.n	800987e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	4b38      	ldr	r3, [pc, #224]	; (8009948 <HAL_DMA_DeInit+0x118>)
 8009866:	4413      	add	r3, r2
 8009868:	4a38      	ldr	r2, [pc, #224]	; (800994c <HAL_DMA_DeInit+0x11c>)
 800986a:	fba2 2303 	umull	r2, r3, r2, r3
 800986e:	091b      	lsrs	r3, r3, #4
 8009870:	009a      	lsls	r2, r3, #2
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a35      	ldr	r2, [pc, #212]	; (8009950 <HAL_DMA_DeInit+0x120>)
 800987a:	641a      	str	r2, [r3, #64]	; 0x40
 800987c:	e00e      	b.n	800989c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	461a      	mov	r2, r3
 8009884:	4b33      	ldr	r3, [pc, #204]	; (8009954 <HAL_DMA_DeInit+0x124>)
 8009886:	4413      	add	r3, r2
 8009888:	4a30      	ldr	r2, [pc, #192]	; (800994c <HAL_DMA_DeInit+0x11c>)
 800988a:	fba2 2303 	umull	r2, r3, r2, r3
 800988e:	091b      	lsrs	r3, r3, #4
 8009890:	009a      	lsls	r2, r3, #2
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a2f      	ldr	r2, [pc, #188]	; (8009958 <HAL_DMA_DeInit+0x128>)
 800989a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2200      	movs	r2, #0
 80098a2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a8:	f003 021c 	and.w	r2, r3, #28
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b0:	2101      	movs	r1, #1
 80098b2:	fa01 f202 	lsl.w	r2, r1, r2
 80098b6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fa81 	bl	8009dc0 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098c2:	2200      	movs	r2, #0
 80098c4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80098ce:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00f      	beq.n	80098f8 <HAL_DMA_DeInit+0xc8>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	2b04      	cmp	r3, #4
 80098de:	d80b      	bhi.n	80098f8 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 faab 	bl	8009e3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ea:	2200      	movs	r2, #0
 80098ec:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80098f6:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	40020407 	.word	0x40020407
 8009948:	bffdfff8 	.word	0xbffdfff8
 800994c:	cccccccd 	.word	0xcccccccd
 8009950:	40020000 	.word	0x40020000
 8009954:	bffdfbf8 	.word	0xbffdfbf8
 8009958:	40020400 	.word	0x40020400

0800995c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b086      	sub	sp, #24
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
 8009968:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009974:	2b01      	cmp	r3, #1
 8009976:	d101      	bne.n	800997c <HAL_DMA_Start_IT+0x20>
 8009978:	2302      	movs	r3, #2
 800997a:	e066      	b.n	8009a4a <HAL_DMA_Start_IT+0xee>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800998a:	b2db      	uxtb	r3, r3
 800998c:	2b01      	cmp	r3, #1
 800998e:	d155      	bne.n	8009a3c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2202      	movs	r2, #2
 8009994:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2200      	movs	r2, #0
 800999c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f022 0201 	bic.w	r2, r2, #1
 80099ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	68b9      	ldr	r1, [r7, #8]
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f000 f9c5 	bl	8009d44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d008      	beq.n	80099d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f042 020e 	orr.w	r2, r2, #14
 80099d0:	601a      	str	r2, [r3, #0]
 80099d2:	e00f      	b.n	80099f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f022 0204 	bic.w	r2, r2, #4
 80099e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f042 020a 	orr.w	r2, r2, #10
 80099f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d007      	beq.n	8009a12 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a10:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d007      	beq.n	8009a2a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a28:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f042 0201 	orr.w	r2, r2, #1
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	e005      	b.n	8009a48 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009a44:	2302      	movs	r3, #2
 8009a46:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3718      	adds	r7, #24
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b083      	sub	sp, #12
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d101      	bne.n	8009a64 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8009a60:	2301      	movs	r3, #1
 8009a62:	e04f      	b.n	8009b04 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d008      	beq.n	8009a82 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2204      	movs	r2, #4
 8009a74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e040      	b.n	8009b04 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f022 020e 	bic.w	r2, r2, #14
 8009a90:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009aa0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f022 0201 	bic.w	r2, r2, #1
 8009ab0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab6:	f003 021c 	and.w	r2, r3, #28
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abe:	2101      	movs	r1, #1
 8009ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8009ac4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009ace:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00c      	beq.n	8009af2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ae2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ae6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009af0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2201      	movs	r2, #1
 8009af6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d005      	beq.n	8009b34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2204      	movs	r2, #4
 8009b2c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	73fb      	strb	r3, [r7, #15]
 8009b32:	e047      	b.n	8009bc4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f022 020e 	bic.w	r2, r2, #14
 8009b42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f022 0201 	bic.w	r2, r2, #1
 8009b52:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b68:	f003 021c 	and.w	r2, r3, #28
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b70:	2101      	movs	r1, #1
 8009b72:	fa01 f202 	lsl.w	r2, r1, r2
 8009b76:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009b80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00c      	beq.n	8009ba4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009ba2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	4798      	blx	r3
    }
  }
  return status;
 8009bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b084      	sub	sp, #16
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bea:	f003 031c 	and.w	r3, r3, #28
 8009bee:	2204      	movs	r2, #4
 8009bf0:	409a      	lsls	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d026      	beq.n	8009c48 <HAL_DMA_IRQHandler+0x7a>
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	f003 0304 	and.w	r3, r3, #4
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d021      	beq.n	8009c48 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 0320 	and.w	r3, r3, #32
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d107      	bne.n	8009c22 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f022 0204 	bic.w	r2, r2, #4
 8009c20:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c26:	f003 021c 	and.w	r2, r3, #28
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2e:	2104      	movs	r1, #4
 8009c30:	fa01 f202 	lsl.w	r2, r1, r2
 8009c34:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d071      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009c46:	e06c      	b.n	8009d22 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c4c:	f003 031c 	and.w	r3, r3, #28
 8009c50:	2202      	movs	r2, #2
 8009c52:	409a      	lsls	r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	4013      	ands	r3, r2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d02e      	beq.n	8009cba <HAL_DMA_IRQHandler+0xec>
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	f003 0302 	and.w	r3, r3, #2
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d029      	beq.n	8009cba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0320 	and.w	r3, r3, #32
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10b      	bne.n	8009c8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f022 020a 	bic.w	r2, r2, #10
 8009c82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c90:	f003 021c 	and.w	r2, r3, #28
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c98:	2102      	movs	r1, #2
 8009c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8009c9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d038      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009cb8:	e033      	b.n	8009d22 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cbe:	f003 031c 	and.w	r3, r3, #28
 8009cc2:	2208      	movs	r2, #8
 8009cc4:	409a      	lsls	r2, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	4013      	ands	r3, r2
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d02a      	beq.n	8009d24 <HAL_DMA_IRQHandler+0x156>
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f003 0308 	and.w	r3, r3, #8
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d025      	beq.n	8009d24 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f022 020e 	bic.w	r2, r2, #14
 8009ce6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cec:	f003 021c 	and.w	r2, r3, #28
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf4:	2101      	movs	r1, #1
 8009cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8009cfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d004      	beq.n	8009d24 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009d22:	bf00      	nop
 8009d24:	bf00      	nop
}
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
 8009d50:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009d5a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d004      	beq.n	8009d6e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009d6c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d72:	f003 021c 	and.w	r2, r3, #28
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7a:	2101      	movs	r1, #1
 8009d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8009d80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	2b10      	cmp	r3, #16
 8009d90:	d108      	bne.n	8009da4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009da2:	e007      	b.n	8009db4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	60da      	str	r2, [r3, #12]
}
 8009db4:	bf00      	nop
 8009db6:	3714      	adds	r7, #20
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	461a      	mov	r2, r3
 8009dce:	4b17      	ldr	r3, [pc, #92]	; (8009e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d80a      	bhi.n	8009dea <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dd8:	089b      	lsrs	r3, r3, #2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009de0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	6493      	str	r3, [r2, #72]	; 0x48
 8009de8:	e007      	b.n	8009dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dee:	089b      	lsrs	r3, r3, #2
 8009df0:	009a      	lsls	r2, r3, #2
 8009df2:	4b0f      	ldr	r3, [pc, #60]	; (8009e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009df4:	4413      	add	r3, r2
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	3b08      	subs	r3, #8
 8009e02:	4a0c      	ldr	r2, [pc, #48]	; (8009e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009e04:	fba2 2303 	umull	r2, r3, r2, r3
 8009e08:	091b      	lsrs	r3, r3, #4
 8009e0a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a0a      	ldr	r2, [pc, #40]	; (8009e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009e10:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f003 031f 	and.w	r3, r3, #31
 8009e18:	2201      	movs	r2, #1
 8009e1a:	409a      	lsls	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009e20:	bf00      	nop
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	40020407 	.word	0x40020407
 8009e30:	4002081c 	.word	0x4002081c
 8009e34:	cccccccd 	.word	0xcccccccd
 8009e38:	40020880 	.word	0x40020880

08009e3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e4c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	4b0b      	ldr	r3, [pc, #44]	; (8009e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009e52:	4413      	add	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	461a      	mov	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a09      	ldr	r2, [pc, #36]	; (8009e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8009e60:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	3b01      	subs	r3, #1
 8009e66:	f003 0303 	and.w	r3, r3, #3
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	409a      	lsls	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009e72:	bf00      	nop
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	1000823f 	.word	0x1000823f
 8009e84:	40020940 	.word	0x40020940

08009e88 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b087      	sub	sp, #28
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009e92:	2300      	movs	r3, #0
 8009e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009e96:	e14c      	b.n	800a132 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	f000 813e 	beq.w	800a12c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	f003 0303 	and.w	r3, r3, #3
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d005      	beq.n	8009ec8 <HAL_GPIO_Init+0x40>
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	f003 0303 	and.w	r3, r3, #3
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d130      	bne.n	8009f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	005b      	lsls	r3, r3, #1
 8009ed2:	2203      	movs	r2, #3
 8009ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed8:	43db      	mvns	r3, r3
 8009eda:	693a      	ldr	r2, [r7, #16]
 8009edc:	4013      	ands	r3, r2
 8009ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	68da      	ldr	r2, [r3, #12]
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8009eec:	693a      	ldr	r2, [r7, #16]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	693a      	ldr	r2, [r7, #16]
 8009ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009efe:	2201      	movs	r2, #1
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	fa02 f303 	lsl.w	r3, r2, r3
 8009f06:	43db      	mvns	r3, r3
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	091b      	lsrs	r3, r3, #4
 8009f14:	f003 0201 	and.w	r2, r3, #1
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	f003 0303 	and.w	r3, r3, #3
 8009f32:	2b03      	cmp	r3, #3
 8009f34:	d017      	beq.n	8009f66 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	005b      	lsls	r3, r3, #1
 8009f40:	2203      	movs	r2, #3
 8009f42:	fa02 f303 	lsl.w	r3, r2, r3
 8009f46:	43db      	mvns	r3, r3
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	689a      	ldr	r2, [r3, #8]
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	005b      	lsls	r3, r3, #1
 8009f56:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	693a      	ldr	r2, [r7, #16]
 8009f64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	f003 0303 	and.w	r3, r3, #3
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d123      	bne.n	8009fba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	08da      	lsrs	r2, r3, #3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	3208      	adds	r2, #8
 8009f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	f003 0307 	and.w	r3, r3, #7
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	220f      	movs	r2, #15
 8009f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f8e:	43db      	mvns	r3, r3
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	4013      	ands	r3, r2
 8009f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	691a      	ldr	r2, [r3, #16]
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f003 0307 	and.w	r3, r3, #7
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	08da      	lsrs	r2, r3, #3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3208      	adds	r2, #8
 8009fb4:	6939      	ldr	r1, [r7, #16]
 8009fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	005b      	lsls	r3, r3, #1
 8009fc4:	2203      	movs	r2, #3
 8009fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fca:	43db      	mvns	r3, r3
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	4013      	ands	r3, r2
 8009fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	f003 0203 	and.w	r2, r3, #3
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	005b      	lsls	r3, r3, #1
 8009fde:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	693a      	ldr	r2, [r7, #16]
 8009fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f000 8098 	beq.w	800a12c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8009ffc:	4a54      	ldr	r2, [pc, #336]	; (800a150 <HAL_GPIO_Init+0x2c8>)
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	089b      	lsrs	r3, r3, #2
 800a002:	3302      	adds	r3, #2
 800a004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a008:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	f003 0303 	and.w	r3, r3, #3
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	220f      	movs	r2, #15
 800a014:	fa02 f303 	lsl.w	r3, r2, r3
 800a018:	43db      	mvns	r3, r3
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	4013      	ands	r3, r2
 800a01e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a026:	d019      	beq.n	800a05c <HAL_GPIO_Init+0x1d4>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a4a      	ldr	r2, [pc, #296]	; (800a154 <HAL_GPIO_Init+0x2cc>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d013      	beq.n	800a058 <HAL_GPIO_Init+0x1d0>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a49      	ldr	r2, [pc, #292]	; (800a158 <HAL_GPIO_Init+0x2d0>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d00d      	beq.n	800a054 <HAL_GPIO_Init+0x1cc>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a48      	ldr	r2, [pc, #288]	; (800a15c <HAL_GPIO_Init+0x2d4>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d007      	beq.n	800a050 <HAL_GPIO_Init+0x1c8>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a47      	ldr	r2, [pc, #284]	; (800a160 <HAL_GPIO_Init+0x2d8>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d101      	bne.n	800a04c <HAL_GPIO_Init+0x1c4>
 800a048:	2304      	movs	r3, #4
 800a04a:	e008      	b.n	800a05e <HAL_GPIO_Init+0x1d6>
 800a04c:	2307      	movs	r3, #7
 800a04e:	e006      	b.n	800a05e <HAL_GPIO_Init+0x1d6>
 800a050:	2303      	movs	r3, #3
 800a052:	e004      	b.n	800a05e <HAL_GPIO_Init+0x1d6>
 800a054:	2302      	movs	r3, #2
 800a056:	e002      	b.n	800a05e <HAL_GPIO_Init+0x1d6>
 800a058:	2301      	movs	r3, #1
 800a05a:	e000      	b.n	800a05e <HAL_GPIO_Init+0x1d6>
 800a05c:	2300      	movs	r3, #0
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	f002 0203 	and.w	r2, r2, #3
 800a064:	0092      	lsls	r2, r2, #2
 800a066:	4093      	lsls	r3, r2
 800a068:	693a      	ldr	r2, [r7, #16]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a06e:	4938      	ldr	r1, [pc, #224]	; (800a150 <HAL_GPIO_Init+0x2c8>)
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	089b      	lsrs	r3, r3, #2
 800a074:	3302      	adds	r3, #2
 800a076:	693a      	ldr	r2, [r7, #16]
 800a078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a07c:	4b39      	ldr	r3, [pc, #228]	; (800a164 <HAL_GPIO_Init+0x2dc>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	43db      	mvns	r3, r3
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	4013      	ands	r3, r2
 800a08a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d003      	beq.n	800a0a0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a0a0:	4a30      	ldr	r2, [pc, #192]	; (800a164 <HAL_GPIO_Init+0x2dc>)
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a0a6:	4b2f      	ldr	r3, [pc, #188]	; (800a164 <HAL_GPIO_Init+0x2dc>)
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	43db      	mvns	r3, r3
 800a0b0:	693a      	ldr	r2, [r7, #16]
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d003      	beq.n	800a0ca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800a0c2:	693a      	ldr	r2, [r7, #16]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a0ca:	4a26      	ldr	r2, [pc, #152]	; (800a164 <HAL_GPIO_Init+0x2dc>)
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a0d0:	4b24      	ldr	r3, [pc, #144]	; (800a164 <HAL_GPIO_Init+0x2dc>)
 800a0d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	43db      	mvns	r3, r3
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	4013      	ands	r3, r2
 800a0e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d003      	beq.n	800a0f6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a0f6:	4a1b      	ldr	r2, [pc, #108]	; (800a164 <HAL_GPIO_Init+0x2dc>)
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800a0fe:	4b19      	ldr	r3, [pc, #100]	; (800a164 <HAL_GPIO_Init+0x2dc>)
 800a100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	43db      	mvns	r3, r3
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	4013      	ands	r3, r2
 800a10e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d003      	beq.n	800a124 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	4313      	orrs	r3, r2
 800a122:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a124:	4a0f      	ldr	r2, [pc, #60]	; (800a164 <HAL_GPIO_Init+0x2dc>)
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	3301      	adds	r3, #1
 800a130:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	fa22 f303 	lsr.w	r3, r2, r3
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f47f aeab 	bne.w	8009e98 <HAL_GPIO_Init+0x10>
  }
}
 800a142:	bf00      	nop
 800a144:	bf00      	nop
 800a146:	371c      	adds	r7, #28
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr
 800a150:	40010000 	.word	0x40010000
 800a154:	48000400 	.word	0x48000400
 800a158:	48000800 	.word	0x48000800
 800a15c:	48000c00 	.word	0x48000c00
 800a160:	48001000 	.word	0x48001000
 800a164:	58000800 	.word	0x58000800

0800a168 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a168:	b480      	push	{r7}
 800a16a:	b087      	sub	sp, #28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a172:	2300      	movs	r3, #0
 800a174:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800a176:	e0bb      	b.n	800a2f0 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a178:	2201      	movs	r2, #1
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	fa02 f303 	lsl.w	r3, r2, r3
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	4013      	ands	r3, r2
 800a184:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 80ae 	beq.w	800a2ea <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800a18e:	4a5f      	ldr	r2, [pc, #380]	; (800a30c <HAL_GPIO_DeInit+0x1a4>)
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	089b      	lsrs	r3, r3, #2
 800a194:	3302      	adds	r3, #2
 800a196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a19a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	f003 0303 	and.w	r3, r3, #3
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	220f      	movs	r2, #15
 800a1a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a1b6:	d019      	beq.n	800a1ec <HAL_GPIO_DeInit+0x84>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	4a55      	ldr	r2, [pc, #340]	; (800a310 <HAL_GPIO_DeInit+0x1a8>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d013      	beq.n	800a1e8 <HAL_GPIO_DeInit+0x80>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a54      	ldr	r2, [pc, #336]	; (800a314 <HAL_GPIO_DeInit+0x1ac>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d00d      	beq.n	800a1e4 <HAL_GPIO_DeInit+0x7c>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4a53      	ldr	r2, [pc, #332]	; (800a318 <HAL_GPIO_DeInit+0x1b0>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d007      	beq.n	800a1e0 <HAL_GPIO_DeInit+0x78>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a52      	ldr	r2, [pc, #328]	; (800a31c <HAL_GPIO_DeInit+0x1b4>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d101      	bne.n	800a1dc <HAL_GPIO_DeInit+0x74>
 800a1d8:	2304      	movs	r3, #4
 800a1da:	e008      	b.n	800a1ee <HAL_GPIO_DeInit+0x86>
 800a1dc:	2307      	movs	r3, #7
 800a1de:	e006      	b.n	800a1ee <HAL_GPIO_DeInit+0x86>
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e004      	b.n	800a1ee <HAL_GPIO_DeInit+0x86>
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	e002      	b.n	800a1ee <HAL_GPIO_DeInit+0x86>
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e000      	b.n	800a1ee <HAL_GPIO_DeInit+0x86>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	f002 0203 	and.w	r2, r2, #3
 800a1f4:	0092      	lsls	r2, r2, #2
 800a1f6:	4093      	lsls	r3, r2
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d136      	bne.n	800a26c <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a1fe:	4b48      	ldr	r3, [pc, #288]	; (800a320 <HAL_GPIO_DeInit+0x1b8>)
 800a200:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	43db      	mvns	r3, r3
 800a208:	4945      	ldr	r1, [pc, #276]	; (800a320 <HAL_GPIO_DeInit+0x1b8>)
 800a20a:	4013      	ands	r3, r2
 800a20c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800a210:	4b43      	ldr	r3, [pc, #268]	; (800a320 <HAL_GPIO_DeInit+0x1b8>)
 800a212:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	43db      	mvns	r3, r3
 800a21a:	4941      	ldr	r1, [pc, #260]	; (800a320 <HAL_GPIO_DeInit+0x1b8>)
 800a21c:	4013      	ands	r3, r2
 800a21e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800a222:	4b3f      	ldr	r3, [pc, #252]	; (800a320 <HAL_GPIO_DeInit+0x1b8>)
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	43db      	mvns	r3, r3
 800a22a:	493d      	ldr	r1, [pc, #244]	; (800a320 <HAL_GPIO_DeInit+0x1b8>)
 800a22c:	4013      	ands	r3, r2
 800a22e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800a230:	4b3b      	ldr	r3, [pc, #236]	; (800a320 <HAL_GPIO_DeInit+0x1b8>)
 800a232:	685a      	ldr	r2, [r3, #4]
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	43db      	mvns	r3, r3
 800a238:	4939      	ldr	r1, [pc, #228]	; (800a320 <HAL_GPIO_DeInit+0x1b8>)
 800a23a:	4013      	ands	r3, r2
 800a23c:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f003 0303 	and.w	r3, r3, #3
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	220f      	movs	r2, #15
 800a248:	fa02 f303 	lsl.w	r3, r2, r3
 800a24c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800a24e:	4a2f      	ldr	r2, [pc, #188]	; (800a30c <HAL_GPIO_DeInit+0x1a4>)
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	089b      	lsrs	r3, r3, #2
 800a254:	3302      	adds	r3, #2
 800a256:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	43da      	mvns	r2, r3
 800a25e:	482b      	ldr	r0, [pc, #172]	; (800a30c <HAL_GPIO_DeInit+0x1a4>)
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	089b      	lsrs	r3, r3, #2
 800a264:	400a      	ands	r2, r1
 800a266:	3302      	adds	r3, #2
 800a268:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	005b      	lsls	r3, r3, #1
 800a274:	2103      	movs	r1, #3
 800a276:	fa01 f303 	lsl.w	r3, r1, r3
 800a27a:	431a      	orrs	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	08da      	lsrs	r2, r3, #3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3208      	adds	r2, #8
 800a288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	f003 0307 	and.w	r3, r3, #7
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	220f      	movs	r2, #15
 800a296:	fa02 f303 	lsl.w	r3, r2, r3
 800a29a:	43db      	mvns	r3, r3
 800a29c:	697a      	ldr	r2, [r7, #20]
 800a29e:	08d2      	lsrs	r2, r2, #3
 800a2a0:	4019      	ands	r1, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	3208      	adds	r2, #8
 800a2a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	68da      	ldr	r2, [r3, #12]
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	005b      	lsls	r3, r3, #1
 800a2b2:	2103      	movs	r1, #3
 800a2b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a2b8:	43db      	mvns	r3, r3
 800a2ba:	401a      	ands	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685a      	ldr	r2, [r3, #4]
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2cc:	43db      	mvns	r3, r3
 800a2ce:	401a      	ands	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	689a      	ldr	r2, [r3, #8]
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	005b      	lsls	r3, r3, #1
 800a2dc:	2103      	movs	r1, #3
 800a2de:	fa01 f303 	lsl.w	r3, r1, r3
 800a2e2:	43db      	mvns	r3, r3
 800a2e4:	401a      	ands	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	609a      	str	r2, [r3, #8]
    }

    position++;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f47f af3d 	bne.w	800a178 <HAL_GPIO_DeInit+0x10>
  }
}
 800a2fe:	bf00      	nop
 800a300:	bf00      	nop
 800a302:	371c      	adds	r7, #28
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	40010000 	.word	0x40010000
 800a310:	48000400 	.word	0x48000400
 800a314:	48000800 	.word	0x48000800
 800a318:	48000c00 	.word	0x48000c00
 800a31c:	48001000 	.word	0x48001000
 800a320:	58000800 	.word	0x58000800

0800a324 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	460b      	mov	r3, r1
 800a32e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	691a      	ldr	r2, [r3, #16]
 800a334:	887b      	ldrh	r3, [r7, #2]
 800a336:	4013      	ands	r3, r2
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a33c:	2301      	movs	r3, #1
 800a33e:	73fb      	strb	r3, [r7, #15]
 800a340:	e001      	b.n	800a346 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a342:	2300      	movs	r3, #0
 800a344:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a346:	7bfb      	ldrb	r3, [r7, #15]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	460b      	mov	r3, r1
 800a35e:	807b      	strh	r3, [r7, #2]
 800a360:	4613      	mov	r3, r2
 800a362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a364:	787b      	ldrb	r3, [r7, #1]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d003      	beq.n	800a372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a36a:	887a      	ldrh	r2, [r7, #2]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a370:	e002      	b.n	800a378 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a372:	887a      	ldrh	r2, [r7, #2]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	4603      	mov	r3, r0
 800a38c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a38e:	4b08      	ldr	r3, [pc, #32]	; (800a3b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a390:	68da      	ldr	r2, [r3, #12]
 800a392:	88fb      	ldrh	r3, [r7, #6]
 800a394:	4013      	ands	r3, r2
 800a396:	2b00      	cmp	r3, #0
 800a398:	d006      	beq.n	800a3a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a39a:	4a05      	ldr	r2, [pc, #20]	; (800a3b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a39c:	88fb      	ldrh	r3, [r7, #6]
 800a39e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a3a0:	88fb      	ldrh	r3, [r7, #6]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7f8 fc92 	bl	8002ccc <HAL_GPIO_EXTI_Callback>
  }
}
 800a3a8:	bf00      	nop
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	58000800 	.word	0x58000800

0800a3b4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800a3ba:	4b0a      	ldr	r3, [pc, #40]	; (800a3e4 <HAL_HSEM_IRQHandler+0x30>)
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800a3c0:	4b08      	ldr	r3, [pc, #32]	; (800a3e4 <HAL_HSEM_IRQHandler+0x30>)
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	43db      	mvns	r3, r3
 800a3c8:	4906      	ldr	r1, [pc, #24]	; (800a3e4 <HAL_HSEM_IRQHandler+0x30>)
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800a3ce:	4a05      	ldr	r2, [pc, #20]	; (800a3e4 <HAL_HSEM_IRQHandler+0x30>)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 f807 	bl	800a3e8 <HAL_HSEM_FreeCallback>
}
 800a3da:	bf00      	nop
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	58001500 	.word	0x58001500

0800a3e8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800a3f0:	bf00      	nop
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d101      	bne.n	800a40e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a40a:	2301      	movs	r3, #1
 800a40c:	e08d      	b.n	800a52a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b00      	cmp	r3, #0
 800a418:	d106      	bne.n	800a428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7f8 fb42 	bl	8002aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2224      	movs	r2, #36	; 0x24
 800a42c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f022 0201 	bic.w	r2, r2, #1
 800a43e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	685a      	ldr	r2, [r3, #4]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a44c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	689a      	ldr	r2, [r3, #8]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a45c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d107      	bne.n	800a476 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	689a      	ldr	r2, [r3, #8]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a472:	609a      	str	r2, [r3, #8]
 800a474:	e006      	b.n	800a484 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	689a      	ldr	r2, [r3, #8]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a482:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d108      	bne.n	800a49e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685a      	ldr	r2, [r3, #4]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a49a:	605a      	str	r2, [r3, #4]
 800a49c:	e007      	b.n	800a4ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	685a      	ldr	r2, [r3, #4]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	6812      	ldr	r2, [r2, #0]
 800a4b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a4bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68da      	ldr	r2, [r3, #12]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a4d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	691a      	ldr	r2, [r3, #16]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	69d9      	ldr	r1, [r3, #28]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a1a      	ldr	r2, [r3, #32]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	430a      	orrs	r2, r1
 800a4fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f042 0201 	orr.w	r2, r2, #1
 800a50a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2220      	movs	r2, #32
 800a516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b082      	sub	sp, #8
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e021      	b.n	800a588 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2224      	movs	r2, #36	; 0x24
 800a548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f022 0201 	bic.w	r2, r2, #1
 800a55a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7f8 fb2f 	bl	8002bc0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b088      	sub	sp, #32
 800a594:	af02      	add	r7, sp, #8
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	4608      	mov	r0, r1
 800a59a:	4611      	mov	r1, r2
 800a59c:	461a      	mov	r2, r3
 800a59e:	4603      	mov	r3, r0
 800a5a0:	817b      	strh	r3, [r7, #10]
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	813b      	strh	r3, [r7, #8]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	2b20      	cmp	r3, #32
 800a5b4:	f040 80f9 	bne.w	800a7aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5b8:	6a3b      	ldr	r3, [r7, #32]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <HAL_I2C_Mem_Write+0x34>
 800a5be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d105      	bne.n	800a5d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e0ed      	b.n	800a7ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d101      	bne.n	800a5de <HAL_I2C_Mem_Write+0x4e>
 800a5da:	2302      	movs	r3, #2
 800a5dc:	e0e6      	b.n	800a7ac <HAL_I2C_Mem_Write+0x21c>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a5e6:	f7fd fe3d 	bl	8008264 <HAL_GetTick>
 800a5ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	9300      	str	r3, [sp, #0]
 800a5f0:	2319      	movs	r3, #25
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f000 fac3 	bl	800ab84 <I2C_WaitOnFlagUntilTimeout>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d001      	beq.n	800a608 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	e0d1      	b.n	800a7ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2221      	movs	r2, #33	; 0x21
 800a60c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2240      	movs	r2, #64	; 0x40
 800a614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6a3a      	ldr	r2, [r7, #32]
 800a622:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a628:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a630:	88f8      	ldrh	r0, [r7, #6]
 800a632:	893a      	ldrh	r2, [r7, #8]
 800a634:	8979      	ldrh	r1, [r7, #10]
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	9301      	str	r3, [sp, #4]
 800a63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	4603      	mov	r3, r0
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f000 f9d3 	bl	800a9ec <I2C_RequestMemoryWrite>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d005      	beq.n	800a658 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	e0a9      	b.n	800a7ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	2bff      	cmp	r3, #255	; 0xff
 800a660:	d90e      	bls.n	800a680 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	22ff      	movs	r2, #255	; 0xff
 800a666:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	8979      	ldrh	r1, [r7, #10]
 800a670:	2300      	movs	r3, #0
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f000 fc47 	bl	800af0c <I2C_TransferConfig>
 800a67e:	e00f      	b.n	800a6a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a684:	b29a      	uxth	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a68e:	b2da      	uxtb	r2, r3
 800a690:	8979      	ldrh	r1, [r7, #10]
 800a692:	2300      	movs	r3, #0
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f000 fc36 	bl	800af0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6a0:	697a      	ldr	r2, [r7, #20]
 800a6a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 fac6 	bl	800ac36 <I2C_WaitOnTXISFlagUntilTimeout>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d001      	beq.n	800a6b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e07b      	b.n	800a7ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b8:	781a      	ldrb	r2, [r3, #0]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c4:	1c5a      	adds	r2, r3, #1
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d034      	beq.n	800a758 <HAL_I2C_Mem_Write+0x1c8>
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d130      	bne.n	800a758 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	2180      	movs	r1, #128	; 0x80
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f000 fa3f 	bl	800ab84 <I2C_WaitOnFlagUntilTimeout>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d001      	beq.n	800a710 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e04d      	b.n	800a7ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a714:	b29b      	uxth	r3, r3
 800a716:	2bff      	cmp	r3, #255	; 0xff
 800a718:	d90e      	bls.n	800a738 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	22ff      	movs	r2, #255	; 0xff
 800a71e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a724:	b2da      	uxtb	r2, r3
 800a726:	8979      	ldrh	r1, [r7, #10]
 800a728:	2300      	movs	r3, #0
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a730:	68f8      	ldr	r0, [r7, #12]
 800a732:	f000 fbeb 	bl	800af0c <I2C_TransferConfig>
 800a736:	e00f      	b.n	800a758 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a73c:	b29a      	uxth	r2, r3
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a746:	b2da      	uxtb	r2, r3
 800a748:	8979      	ldrh	r1, [r7, #10]
 800a74a:	2300      	movs	r3, #0
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f000 fbda 	bl	800af0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d19e      	bne.n	800a6a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a762:	697a      	ldr	r2, [r7, #20]
 800a764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f000 faac 	bl	800acc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d001      	beq.n	800a776 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e01a      	b.n	800a7ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2220      	movs	r2, #32
 800a77c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6859      	ldr	r1, [r3, #4]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	4b0a      	ldr	r3, [pc, #40]	; (800a7b4 <HAL_I2C_Mem_Write+0x224>)
 800a78a:	400b      	ands	r3, r1
 800a78c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2220      	movs	r2, #32
 800a792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2200      	movs	r2, #0
 800a79a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e000      	b.n	800a7ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a7aa:	2302      	movs	r3, #2
  }
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3718      	adds	r7, #24
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	fe00e800 	.word	0xfe00e800

0800a7b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b088      	sub	sp, #32
 800a7bc:	af02      	add	r7, sp, #8
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	4608      	mov	r0, r1
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	817b      	strh	r3, [r7, #10]
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	813b      	strh	r3, [r7, #8]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	2b20      	cmp	r3, #32
 800a7dc:	f040 80fd 	bne.w	800a9da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7e0:	6a3b      	ldr	r3, [r7, #32]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d002      	beq.n	800a7ec <HAL_I2C_Mem_Read+0x34>
 800a7e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d105      	bne.n	800a7f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e0f1      	b.n	800a9dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d101      	bne.n	800a806 <HAL_I2C_Mem_Read+0x4e>
 800a802:	2302      	movs	r3, #2
 800a804:	e0ea      	b.n	800a9dc <HAL_I2C_Mem_Read+0x224>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2201      	movs	r2, #1
 800a80a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a80e:	f7fd fd29 	bl	8008264 <HAL_GetTick>
 800a812:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	2319      	movs	r3, #25
 800a81a:	2201      	movs	r2, #1
 800a81c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f000 f9af 	bl	800ab84 <I2C_WaitOnFlagUntilTimeout>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e0d5      	b.n	800a9dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2222      	movs	r2, #34	; 0x22
 800a834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2240      	movs	r2, #64	; 0x40
 800a83c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	6a3a      	ldr	r2, [r7, #32]
 800a84a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a850:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a858:	88f8      	ldrh	r0, [r7, #6]
 800a85a:	893a      	ldrh	r2, [r7, #8]
 800a85c:	8979      	ldrh	r1, [r7, #10]
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	4603      	mov	r3, r0
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f000 f913 	bl	800aa94 <I2C_RequestMemoryRead>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d005      	beq.n	800a880 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2200      	movs	r2, #0
 800a878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	e0ad      	b.n	800a9dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a884:	b29b      	uxth	r3, r3
 800a886:	2bff      	cmp	r3, #255	; 0xff
 800a888:	d90e      	bls.n	800a8a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	22ff      	movs	r2, #255	; 0xff
 800a88e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a894:	b2da      	uxtb	r2, r3
 800a896:	8979      	ldrh	r1, [r7, #10]
 800a898:	4b52      	ldr	r3, [pc, #328]	; (800a9e4 <HAL_I2C_Mem_Read+0x22c>)
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f000 fb33 	bl	800af0c <I2C_TransferConfig>
 800a8a6:	e00f      	b.n	800a8c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8b6:	b2da      	uxtb	r2, r3
 800a8b8:	8979      	ldrh	r1, [r7, #10]
 800a8ba:	4b4a      	ldr	r3, [pc, #296]	; (800a9e4 <HAL_I2C_Mem_Read+0x22c>)
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 fb22 	bl	800af0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	9300      	str	r3, [sp, #0]
 800a8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	2104      	movs	r1, #4
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f000 f956 	bl	800ab84 <I2C_WaitOnFlagUntilTimeout>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e07c      	b.n	800a9dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ec:	b2d2      	uxtb	r2, r2
 800a8ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f4:	1c5a      	adds	r2, r3, #1
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8fe:	3b01      	subs	r3, #1
 800a900:	b29a      	uxth	r2, r3
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	3b01      	subs	r3, #1
 800a90e:	b29a      	uxth	r2, r3
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a918:	b29b      	uxth	r3, r3
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d034      	beq.n	800a988 <HAL_I2C_Mem_Read+0x1d0>
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a922:	2b00      	cmp	r3, #0
 800a924:	d130      	bne.n	800a988 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	9300      	str	r3, [sp, #0]
 800a92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92c:	2200      	movs	r2, #0
 800a92e:	2180      	movs	r1, #128	; 0x80
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f000 f927 	bl	800ab84 <I2C_WaitOnFlagUntilTimeout>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d001      	beq.n	800a940 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	e04d      	b.n	800a9dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a944:	b29b      	uxth	r3, r3
 800a946:	2bff      	cmp	r3, #255	; 0xff
 800a948:	d90e      	bls.n	800a968 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	22ff      	movs	r2, #255	; 0xff
 800a94e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a954:	b2da      	uxtb	r2, r3
 800a956:	8979      	ldrh	r1, [r7, #10]
 800a958:	2300      	movs	r3, #0
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f000 fad3 	bl	800af0c <I2C_TransferConfig>
 800a966:	e00f      	b.n	800a988 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a976:	b2da      	uxtb	r2, r3
 800a978:	8979      	ldrh	r1, [r7, #10]
 800a97a:	2300      	movs	r3, #0
 800a97c:	9300      	str	r3, [sp, #0]
 800a97e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f000 fac2 	bl	800af0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d19a      	bne.n	800a8c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f000 f994 	bl	800acc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d001      	beq.n	800a9a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e01a      	b.n	800a9dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2220      	movs	r2, #32
 800a9ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	6859      	ldr	r1, [r3, #4]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	4b0b      	ldr	r3, [pc, #44]	; (800a9e8 <HAL_I2C_Mem_Read+0x230>)
 800a9ba:	400b      	ands	r3, r1
 800a9bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2220      	movs	r2, #32
 800a9c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	e000      	b.n	800a9dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a9da:	2302      	movs	r3, #2
  }
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3718      	adds	r7, #24
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	80002400 	.word	0x80002400
 800a9e8:	fe00e800 	.word	0xfe00e800

0800a9ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af02      	add	r7, sp, #8
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	4608      	mov	r0, r1
 800a9f6:	4611      	mov	r1, r2
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	817b      	strh	r3, [r7, #10]
 800a9fe:	460b      	mov	r3, r1
 800aa00:	813b      	strh	r3, [r7, #8]
 800aa02:	4613      	mov	r3, r2
 800aa04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800aa06:	88fb      	ldrh	r3, [r7, #6]
 800aa08:	b2da      	uxtb	r2, r3
 800aa0a:	8979      	ldrh	r1, [r7, #10]
 800aa0c:	4b20      	ldr	r3, [pc, #128]	; (800aa90 <I2C_RequestMemoryWrite+0xa4>)
 800aa0e:	9300      	str	r3, [sp, #0]
 800aa10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f000 fa79 	bl	800af0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa1a:	69fa      	ldr	r2, [r7, #28]
 800aa1c:	69b9      	ldr	r1, [r7, #24]
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f000 f909 	bl	800ac36 <I2C_WaitOnTXISFlagUntilTimeout>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d001      	beq.n	800aa2e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e02c      	b.n	800aa88 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa2e:	88fb      	ldrh	r3, [r7, #6]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d105      	bne.n	800aa40 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aa34:	893b      	ldrh	r3, [r7, #8]
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	629a      	str	r2, [r3, #40]	; 0x28
 800aa3e:	e015      	b.n	800aa6c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800aa40:	893b      	ldrh	r3, [r7, #8]
 800aa42:	0a1b      	lsrs	r3, r3, #8
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	b2da      	uxtb	r2, r3
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa4e:	69fa      	ldr	r2, [r7, #28]
 800aa50:	69b9      	ldr	r1, [r7, #24]
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f000 f8ef 	bl	800ac36 <I2C_WaitOnTXISFlagUntilTimeout>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e012      	b.n	800aa88 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aa62:	893b      	ldrh	r3, [r7, #8]
 800aa64:	b2da      	uxtb	r2, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	2200      	movs	r2, #0
 800aa74:	2180      	movs	r1, #128	; 0x80
 800aa76:	68f8      	ldr	r0, [r7, #12]
 800aa78:	f000 f884 	bl	800ab84 <I2C_WaitOnFlagUntilTimeout>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d001      	beq.n	800aa86 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e000      	b.n	800aa88 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	80002000 	.word	0x80002000

0800aa94 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af02      	add	r7, sp, #8
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	4608      	mov	r0, r1
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	817b      	strh	r3, [r7, #10]
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	813b      	strh	r3, [r7, #8]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800aaae:	88fb      	ldrh	r3, [r7, #6]
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	8979      	ldrh	r1, [r7, #10]
 800aab4:	4b20      	ldr	r3, [pc, #128]	; (800ab38 <I2C_RequestMemoryRead+0xa4>)
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	2300      	movs	r3, #0
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f000 fa26 	bl	800af0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aac0:	69fa      	ldr	r2, [r7, #28]
 800aac2:	69b9      	ldr	r1, [r7, #24]
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f000 f8b6 	bl	800ac36 <I2C_WaitOnTXISFlagUntilTimeout>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800aad0:	2301      	movs	r3, #1
 800aad2:	e02c      	b.n	800ab2e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aad4:	88fb      	ldrh	r3, [r7, #6]
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d105      	bne.n	800aae6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aada:	893b      	ldrh	r3, [r7, #8]
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	629a      	str	r2, [r3, #40]	; 0x28
 800aae4:	e015      	b.n	800ab12 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800aae6:	893b      	ldrh	r3, [r7, #8]
 800aae8:	0a1b      	lsrs	r3, r3, #8
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	b2da      	uxtb	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aaf4:	69fa      	ldr	r2, [r7, #28]
 800aaf6:	69b9      	ldr	r1, [r7, #24]
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f000 f89c 	bl	800ac36 <I2C_WaitOnTXISFlagUntilTimeout>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d001      	beq.n	800ab08 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e012      	b.n	800ab2e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ab08:	893b      	ldrh	r3, [r7, #8]
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	9300      	str	r3, [sp, #0]
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	2140      	movs	r1, #64	; 0x40
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	f000 f831 	bl	800ab84 <I2C_WaitOnFlagUntilTimeout>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d001      	beq.n	800ab2c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e000      	b.n	800ab2e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	80002000 	.word	0x80002000

0800ab3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	699b      	ldr	r3, [r3, #24]
 800ab4a:	f003 0302 	and.w	r3, r3, #2
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	d103      	bne.n	800ab5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2200      	movs	r2, #0
 800ab58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	699b      	ldr	r3, [r3, #24]
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d007      	beq.n	800ab78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	699a      	ldr	r2, [r3, #24]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f042 0201 	orr.w	r2, r2, #1
 800ab76:	619a      	str	r2, [r3, #24]
  }
}
 800ab78:	bf00      	nop
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	603b      	str	r3, [r7, #0]
 800ab90:	4613      	mov	r3, r2
 800ab92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ab94:	e03b      	b.n	800ac0e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab96:	69ba      	ldr	r2, [r7, #24]
 800ab98:	6839      	ldr	r1, [r7, #0]
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f000 f8d6 	bl	800ad4c <I2C_IsErrorOccurred>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e041      	b.n	800ac2e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb0:	d02d      	beq.n	800ac0e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abb2:	f7fd fb57 	bl	8008264 <HAL_GetTick>
 800abb6:	4602      	mov	r2, r0
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d302      	bcc.n	800abc8 <I2C_WaitOnFlagUntilTimeout+0x44>
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d122      	bne.n	800ac0e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	699a      	ldr	r2, [r3, #24]
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	4013      	ands	r3, r2
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	bf0c      	ite	eq
 800abd8:	2301      	moveq	r3, #1
 800abda:	2300      	movne	r3, #0
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	461a      	mov	r2, r3
 800abe0:	79fb      	ldrb	r3, [r7, #7]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d113      	bne.n	800ac0e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abea:	f043 0220 	orr.w	r2, r3, #32
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2220      	movs	r2, #32
 800abf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e00f      	b.n	800ac2e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	699a      	ldr	r2, [r3, #24]
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	4013      	ands	r3, r2
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	bf0c      	ite	eq
 800ac1e:	2301      	moveq	r3, #1
 800ac20:	2300      	movne	r3, #0
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	461a      	mov	r2, r3
 800ac26:	79fb      	ldrb	r3, [r7, #7]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d0b4      	beq.n	800ab96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b084      	sub	sp, #16
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	60f8      	str	r0, [r7, #12]
 800ac3e:	60b9      	str	r1, [r7, #8]
 800ac40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ac42:	e033      	b.n	800acac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	68b9      	ldr	r1, [r7, #8]
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 f87f 	bl	800ad4c <I2C_IsErrorOccurred>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e031      	b.n	800acbc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac5e:	d025      	beq.n	800acac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac60:	f7fd fb00 	bl	8008264 <HAL_GetTick>
 800ac64:	4602      	mov	r2, r0
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d302      	bcc.n	800ac76 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d11a      	bne.n	800acac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	f003 0302 	and.w	r3, r3, #2
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d013      	beq.n	800acac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac88:	f043 0220 	orr.w	r2, r3, #32
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2220      	movs	r2, #32
 800ac94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	e007      	b.n	800acbc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	699b      	ldr	r3, [r3, #24]
 800acb2:	f003 0302 	and.w	r3, r3, #2
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d1c4      	bne.n	800ac44 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800acba:	2300      	movs	r3, #0
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3710      	adds	r7, #16
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800acd0:	e02f      	b.n	800ad32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	68b9      	ldr	r1, [r7, #8]
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f000 f838 	bl	800ad4c <I2C_IsErrorOccurred>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d001      	beq.n	800ace6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e02d      	b.n	800ad42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ace6:	f7fd fabd 	bl	8008264 <HAL_GetTick>
 800acea:	4602      	mov	r2, r0
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	1ad3      	subs	r3, r2, r3
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d302      	bcc.n	800acfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d11a      	bne.n	800ad32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	699b      	ldr	r3, [r3, #24]
 800ad02:	f003 0320 	and.w	r3, r3, #32
 800ad06:	2b20      	cmp	r3, #32
 800ad08:	d013      	beq.n	800ad32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad0e:	f043 0220 	orr.w	r2, r3, #32
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2220      	movs	r2, #32
 800ad1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2200      	movs	r2, #0
 800ad22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e007      	b.n	800ad42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	f003 0320 	and.w	r3, r3, #32
 800ad3c:	2b20      	cmp	r3, #32
 800ad3e:	d1c8      	bne.n	800acd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
	...

0800ad4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b08a      	sub	sp, #40	; 0x28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	699b      	ldr	r3, [r3, #24]
 800ad64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	f003 0310 	and.w	r3, r3, #16
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d068      	beq.n	800ae4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2210      	movs	r2, #16
 800ad7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ad80:	e049      	b.n	800ae16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad88:	d045      	beq.n	800ae16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ad8a:	f7fd fa6b 	bl	8008264 <HAL_GetTick>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	1ad3      	subs	r3, r2, r3
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d302      	bcc.n	800ada0 <I2C_IsErrorOccurred+0x54>
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d13a      	bne.n	800ae16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adaa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800adb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	699b      	ldr	r3, [r3, #24]
 800adba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adc2:	d121      	bne.n	800ae08 <I2C_IsErrorOccurred+0xbc>
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adca:	d01d      	beq.n	800ae08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800adcc:	7cfb      	ldrb	r3, [r7, #19]
 800adce:	2b20      	cmp	r3, #32
 800add0:	d01a      	beq.n	800ae08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	685a      	ldr	r2, [r3, #4]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ade0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ade2:	f7fd fa3f 	bl	8008264 <HAL_GetTick>
 800ade6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ade8:	e00e      	b.n	800ae08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800adea:	f7fd fa3b 	bl	8008264 <HAL_GetTick>
 800adee:	4602      	mov	r2, r0
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	1ad3      	subs	r3, r2, r3
 800adf4:	2b19      	cmp	r3, #25
 800adf6:	d907      	bls.n	800ae08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800adf8:	6a3b      	ldr	r3, [r7, #32]
 800adfa:	f043 0320 	orr.w	r3, r3, #32
 800adfe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800ae06:	e006      	b.n	800ae16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	f003 0320 	and.w	r3, r3, #32
 800ae12:	2b20      	cmp	r3, #32
 800ae14:	d1e9      	bne.n	800adea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	699b      	ldr	r3, [r3, #24]
 800ae1c:	f003 0320 	and.w	r3, r3, #32
 800ae20:	2b20      	cmp	r3, #32
 800ae22:	d003      	beq.n	800ae2c <I2C_IsErrorOccurred+0xe0>
 800ae24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d0aa      	beq.n	800ad82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ae2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d103      	bne.n	800ae3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2220      	movs	r2, #32
 800ae3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ae3c:	6a3b      	ldr	r3, [r7, #32]
 800ae3e:	f043 0304 	orr.w	r3, r3, #4
 800ae42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	699b      	ldr	r3, [r3, #24]
 800ae50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00b      	beq.n	800ae74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ae5c:	6a3b      	ldr	r3, [r7, #32]
 800ae5e:	f043 0301 	orr.w	r3, r3, #1
 800ae62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00b      	beq.n	800ae96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ae7e:	6a3b      	ldr	r3, [r7, #32]
 800ae80:	f043 0308 	orr.w	r3, r3, #8
 800ae84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
 800ae92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00b      	beq.n	800aeb8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	f043 0302 	orr.w	r3, r3, #2
 800aea6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aeb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800aeb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d01c      	beq.n	800aefa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f7ff fe3b 	bl	800ab3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	6859      	ldr	r1, [r3, #4]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	4b0d      	ldr	r3, [pc, #52]	; (800af08 <I2C_IsErrorOccurred+0x1bc>)
 800aed2:	400b      	ands	r3, r1
 800aed4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeda:	6a3b      	ldr	r3, [r7, #32]
 800aedc:	431a      	orrs	r2, r3
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2220      	movs	r2, #32
 800aee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800aefa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3728      	adds	r7, #40	; 0x28
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	fe00e800 	.word	0xfe00e800

0800af0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b087      	sub	sp, #28
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	607b      	str	r3, [r7, #4]
 800af16:	460b      	mov	r3, r1
 800af18:	817b      	strh	r3, [r7, #10]
 800af1a:	4613      	mov	r3, r2
 800af1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af1e:	897b      	ldrh	r3, [r7, #10]
 800af20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800af24:	7a7b      	ldrb	r3, [r7, #9]
 800af26:	041b      	lsls	r3, r3, #16
 800af28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	4313      	orrs	r3, r2
 800af36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685a      	ldr	r2, [r3, #4]
 800af42:	6a3b      	ldr	r3, [r7, #32]
 800af44:	0d5b      	lsrs	r3, r3, #21
 800af46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800af4a:	4b08      	ldr	r3, [pc, #32]	; (800af6c <I2C_TransferConfig+0x60>)
 800af4c:	430b      	orrs	r3, r1
 800af4e:	43db      	mvns	r3, r3
 800af50:	ea02 0103 	and.w	r1, r2, r3
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	430a      	orrs	r2, r1
 800af5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800af5e:	bf00      	nop
 800af60:	371c      	adds	r7, #28
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	03ff63ff 	.word	0x03ff63ff

0800af70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af80:	b2db      	uxtb	r3, r3
 800af82:	2b20      	cmp	r3, #32
 800af84:	d138      	bne.n	800aff8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d101      	bne.n	800af94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800af90:	2302      	movs	r3, #2
 800af92:	e032      	b.n	800affa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2224      	movs	r2, #36	; 0x24
 800afa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f022 0201 	bic.w	r2, r2, #1
 800afb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800afc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	6819      	ldr	r1, [r3, #0]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	430a      	orrs	r2, r1
 800afd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f042 0201 	orr.w	r2, r2, #1
 800afe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2220      	movs	r2, #32
 800afe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aff4:	2300      	movs	r3, #0
 800aff6:	e000      	b.n	800affa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aff8:	2302      	movs	r3, #2
  }
}
 800affa:	4618      	mov	r0, r3
 800affc:	370c      	adds	r7, #12
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b006:	b480      	push	{r7}
 800b008:	b085      	sub	sp, #20
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b016:	b2db      	uxtb	r3, r3
 800b018:	2b20      	cmp	r3, #32
 800b01a:	d139      	bne.n	800b090 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b022:	2b01      	cmp	r3, #1
 800b024:	d101      	bne.n	800b02a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b026:	2302      	movs	r3, #2
 800b028:	e033      	b.n	800b092 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2201      	movs	r2, #1
 800b02e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2224      	movs	r2, #36	; 0x24
 800b036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f022 0201 	bic.w	r2, r2, #1
 800b048:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b058:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	021b      	lsls	r3, r3, #8
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	4313      	orrs	r3, r2
 800b062:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f042 0201 	orr.w	r2, r2, #1
 800b07a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2220      	movs	r2, #32
 800b080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	e000      	b.n	800b092 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b090:	2302      	movs	r3, #2
  }
}
 800b092:	4618      	mov	r0, r3
 800b094:	3714      	adds	r7, #20
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
	...

0800b0a0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800b0a8:	4b05      	ldr	r3, [pc, #20]	; (800b0c0 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800b0aa:	685a      	ldr	r2, [r3, #4]
 800b0ac:	4904      	ldr	r1, [pc, #16]	; (800b0c0 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	604b      	str	r3, [r1, #4]
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	40010000 	.word	0x40010000

0800b0c4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d01e      	beq.n	800b114 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800b0d6:	4b13      	ldr	r3, [pc, #76]	; (800b124 <HAL_IPCC_Init+0x60>)
 800b0d8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d102      	bne.n	800b0ec <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f7f7 fdcc 	bl	8002c84 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800b0ec:	68b8      	ldr	r0, [r7, #8]
 800b0ee:	f000 f85b 	bl	800b1a8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f82c 	bl	800b15c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2201      	movs	r2, #1
 800b10e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800b112:	e001      	b.n	800b118 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800b114:	2301      	movs	r3, #1
 800b116:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800b118:	7bfb      	ldrb	r3, [r7, #15]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	58000c00 	.word	0x58000c00

0800b128 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800b128:	b480      	push	{r7}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	4613      	mov	r3, r2
 800b134:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800b136:	bf00      	nop
 800b138:	3714      	adds	r7, #20
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800b142:	b480      	push	{r7}
 800b144:	b085      	sub	sp, #20
 800b146:	af00      	add	r7, sp, #0
 800b148:	60f8      	str	r0, [r7, #12]
 800b14a:	60b9      	str	r1, [r7, #8]
 800b14c:	4613      	mov	r3, r2
 800b14e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800b150:	bf00      	nop
 800b152:	3714      	adds	r7, #20
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800b164:	2300      	movs	r3, #0
 800b166:	60fb      	str	r3, [r7, #12]
 800b168:	e00f      	b.n	800b18a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4413      	add	r3, r2
 800b172:	4a0b      	ldr	r2, [pc, #44]	; (800b1a0 <IPCC_SetDefaultCallbacks+0x44>)
 800b174:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	3306      	adds	r3, #6
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4413      	add	r3, r2
 800b180:	4a08      	ldr	r2, [pc, #32]	; (800b1a4 <IPCC_SetDefaultCallbacks+0x48>)
 800b182:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	3301      	adds	r3, #1
 800b188:	60fb      	str	r3, [r7, #12]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2b05      	cmp	r3, #5
 800b18e:	d9ec      	bls.n	800b16a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800b190:	bf00      	nop
 800b192:	bf00      	nop
 800b194:	3714      	adds	r7, #20
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	0800b129 	.word	0x0800b129
 800b1a4:	0800b143 	.word	0x0800b143

0800b1a8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800b1bc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	223f      	movs	r2, #63	; 0x3f
 800b1c2:	609a      	str	r2, [r3, #8]
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d101      	bne.n	800b1e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e0c0      	b.n	800b364 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d106      	bne.n	800b1fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f00f f932 	bl	801a460 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2203      	movs	r2, #3
 800b200:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4618      	mov	r0, r3
 800b20a:	f006 ffb8 	bl	801217e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b20e:	2300      	movs	r3, #0
 800b210:	73fb      	strb	r3, [r7, #15]
 800b212:	e03e      	b.n	800b292 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b214:	7bfa      	ldrb	r2, [r7, #15]
 800b216:	6879      	ldr	r1, [r7, #4]
 800b218:	4613      	mov	r3, r2
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	4413      	add	r3, r2
 800b21e:	00db      	lsls	r3, r3, #3
 800b220:	440b      	add	r3, r1
 800b222:	3311      	adds	r3, #17
 800b224:	2201      	movs	r2, #1
 800b226:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b228:	7bfa      	ldrb	r2, [r7, #15]
 800b22a:	6879      	ldr	r1, [r7, #4]
 800b22c:	4613      	mov	r3, r2
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4413      	add	r3, r2
 800b232:	00db      	lsls	r3, r3, #3
 800b234:	440b      	add	r3, r1
 800b236:	3310      	adds	r3, #16
 800b238:	7bfa      	ldrb	r2, [r7, #15]
 800b23a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b23c:	7bfa      	ldrb	r2, [r7, #15]
 800b23e:	6879      	ldr	r1, [r7, #4]
 800b240:	4613      	mov	r3, r2
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	4413      	add	r3, r2
 800b246:	00db      	lsls	r3, r3, #3
 800b248:	440b      	add	r3, r1
 800b24a:	3313      	adds	r3, #19
 800b24c:	2200      	movs	r2, #0
 800b24e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b250:	7bfa      	ldrb	r2, [r7, #15]
 800b252:	6879      	ldr	r1, [r7, #4]
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	00db      	lsls	r3, r3, #3
 800b25c:	440b      	add	r3, r1
 800b25e:	3320      	adds	r3, #32
 800b260:	2200      	movs	r2, #0
 800b262:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b264:	7bfa      	ldrb	r2, [r7, #15]
 800b266:	6879      	ldr	r1, [r7, #4]
 800b268:	4613      	mov	r3, r2
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	4413      	add	r3, r2
 800b26e:	00db      	lsls	r3, r3, #3
 800b270:	440b      	add	r3, r1
 800b272:	3324      	adds	r3, #36	; 0x24
 800b274:	2200      	movs	r2, #0
 800b276:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b278:	7bfb      	ldrb	r3, [r7, #15]
 800b27a:	6879      	ldr	r1, [r7, #4]
 800b27c:	1c5a      	adds	r2, r3, #1
 800b27e:	4613      	mov	r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	4413      	add	r3, r2
 800b284:	00db      	lsls	r3, r3, #3
 800b286:	440b      	add	r3, r1
 800b288:	2200      	movs	r2, #0
 800b28a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b28c:	7bfb      	ldrb	r3, [r7, #15]
 800b28e:	3301      	adds	r3, #1
 800b290:	73fb      	strb	r3, [r7, #15]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	791b      	ldrb	r3, [r3, #4]
 800b296:	7bfa      	ldrb	r2, [r7, #15]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d3bb      	bcc.n	800b214 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b29c:	2300      	movs	r3, #0
 800b29e:	73fb      	strb	r3, [r7, #15]
 800b2a0:	e044      	b.n	800b32c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b2a2:	7bfa      	ldrb	r2, [r7, #15]
 800b2a4:	6879      	ldr	r1, [r7, #4]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	4413      	add	r3, r2
 800b2ac:	00db      	lsls	r3, r3, #3
 800b2ae:	440b      	add	r3, r1
 800b2b0:	f203 1351 	addw	r3, r3, #337	; 0x151
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b2b8:	7bfa      	ldrb	r2, [r7, #15]
 800b2ba:	6879      	ldr	r1, [r7, #4]
 800b2bc:	4613      	mov	r3, r2
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	00db      	lsls	r3, r3, #3
 800b2c4:	440b      	add	r3, r1
 800b2c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2ca:	7bfa      	ldrb	r2, [r7, #15]
 800b2cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b2ce:	7bfa      	ldrb	r2, [r7, #15]
 800b2d0:	6879      	ldr	r1, [r7, #4]
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	4413      	add	r3, r2
 800b2d8:	00db      	lsls	r3, r3, #3
 800b2da:	440b      	add	r3, r1
 800b2dc:	f203 1353 	addw	r3, r3, #339	; 0x153
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b2e4:	7bfa      	ldrb	r2, [r7, #15]
 800b2e6:	6879      	ldr	r1, [r7, #4]
 800b2e8:	4613      	mov	r3, r2
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4413      	add	r3, r2
 800b2ee:	00db      	lsls	r3, r3, #3
 800b2f0:	440b      	add	r3, r1
 800b2f2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b2fa:	7bfa      	ldrb	r2, [r7, #15]
 800b2fc:	6879      	ldr	r1, [r7, #4]
 800b2fe:	4613      	mov	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	00db      	lsls	r3, r3, #3
 800b306:	440b      	add	r3, r1
 800b308:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b30c:	2200      	movs	r2, #0
 800b30e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b310:	7bfa      	ldrb	r2, [r7, #15]
 800b312:	6879      	ldr	r1, [r7, #4]
 800b314:	4613      	mov	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4413      	add	r3, r2
 800b31a:	00db      	lsls	r3, r3, #3
 800b31c:	440b      	add	r3, r1
 800b31e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b322:	2200      	movs	r2, #0
 800b324:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b326:	7bfb      	ldrb	r3, [r7, #15]
 800b328:	3301      	adds	r3, #1
 800b32a:	73fb      	strb	r3, [r7, #15]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	791b      	ldrb	r3, [r3, #4]
 800b330:	7bfa      	ldrb	r2, [r7, #15]
 800b332:	429a      	cmp	r2, r3
 800b334:	d3b5      	bcc.n	800b2a2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6818      	ldr	r0, [r3, #0]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	3304      	adds	r3, #4
 800b33e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b342:	f006 ff37 	bl	80121b4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	7a9b      	ldrb	r3, [r3, #10]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d102      	bne.n	800b362 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f001 fc41 	bl	800cbe4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d101      	bne.n	800b382 <HAL_PCD_Start+0x16>
 800b37e:	2302      	movs	r3, #2
 800b380:	e012      	b.n	800b3a8 <HAL_PCD_Start+0x3c>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2201      	movs	r2, #1
 800b386:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4618      	mov	r0, r3
 800b390:	f006 fede 	bl	8012150 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4618      	mov	r0, r3
 800b39a:	f009 f99e 	bl	80146da <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f009 f9a3 	bl	8014708 <USB_ReadInterrupts>
 800b3c2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d003      	beq.n	800b3d6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fb04 	bl	800b9dc <PCD_EP_ISR_Handler>

    return;
 800b3d4:	e110      	b.n	800b5f8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d013      	beq.n	800b408 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b3e8:	b29a      	uxth	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3f2:	b292      	uxth	r2, r2
 800b3f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f00f f8be 	bl	801a57a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800b3fe:	2100      	movs	r1, #0
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 f8fc 	bl	800b5fe <HAL_PCD_SetAddress>

    return;
 800b406:	e0f7      	b.n	800b5f8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00c      	beq.n	800b42c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b424:	b292      	uxth	r2, r2
 800b426:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b42a:	e0e5      	b.n	800b5f8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00c      	beq.n	800b450 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b43e:	b29a      	uxth	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b448:	b292      	uxth	r2, r2
 800b44a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b44e:	e0d3      	b.n	800b5f8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b456:	2b00      	cmp	r3, #0
 800b458:	d034      	beq.n	800b4c4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b462:	b29a      	uxth	r2, r3
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f022 0204 	bic.w	r2, r2, #4
 800b46c:	b292      	uxth	r2, r2
 800b46e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f022 0208 	bic.w	r2, r2, #8
 800b484:	b292      	uxth	r2, r2
 800b486:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800b490:	2b01      	cmp	r3, #1
 800b492:	d107      	bne.n	800b4a4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b49c:	2100      	movs	r1, #0
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f00f fa60 	bl	801a964 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f00f f8a1 	bl	801a5ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b4b2:	b29a      	uxth	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b4bc:	b292      	uxth	r2, r2
 800b4be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b4c2:	e099      	b.n	800b5f8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d027      	beq.n	800b51e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b4d6:	b29a      	uxth	r2, r3
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f042 0208 	orr.w	r2, r2, #8
 800b4e0:	b292      	uxth	r2, r2
 800b4e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b4f8:	b292      	uxth	r2, r2
 800b4fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b506:	b29a      	uxth	r2, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f042 0204 	orr.w	r2, r2, #4
 800b510:	b292      	uxth	r2, r2
 800b512:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f00f f84e 	bl	801a5b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b51c:	e06c      	b.n	800b5f8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b524:	2b00      	cmp	r3, #0
 800b526:	d040      	beq.n	800b5aa <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b530:	b29a      	uxth	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b53a:	b292      	uxth	r2, r2
 800b53c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800b546:	2b00      	cmp	r3, #0
 800b548:	d12b      	bne.n	800b5a2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b552:	b29a      	uxth	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f042 0204 	orr.w	r2, r2, #4
 800b55c:	b292      	uxth	r2, r2
 800b55e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b56a:	b29a      	uxth	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f042 0208 	orr.w	r2, r2, #8
 800b574:	b292      	uxth	r2, r2
 800b576:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2201      	movs	r2, #1
 800b57e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	089b      	lsrs	r3, r3, #2
 800b58e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b598:	2101      	movs	r1, #1
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f00f f9e2 	bl	801a964 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800b5a0:	e02a      	b.n	800b5f8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f00f f808 	bl	801a5b8 <HAL_PCD_SuspendCallback>
    return;
 800b5a8:	e026      	b.n	800b5f8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00f      	beq.n	800b5d4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b5c6:	b292      	uxth	r2, r2
 800b5c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f00e ffc6 	bl	801a55e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b5d2:	e011      	b.n	800b5f8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d00c      	beq.n	800b5f8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b5e6:	b29a      	uxth	r2, r3
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5f0:	b292      	uxth	r2, r2
 800b5f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b5f6:	bf00      	nop
  }
}
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b082      	sub	sp, #8
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	460b      	mov	r3, r1
 800b608:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800b610:	2b01      	cmp	r3, #1
 800b612:	d101      	bne.n	800b618 <HAL_PCD_SetAddress+0x1a>
 800b614:	2302      	movs	r3, #2
 800b616:	e012      	b.n	800b63e <HAL_PCD_SetAddress+0x40>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	78fa      	ldrb	r2, [r7, #3]
 800b624:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	78fa      	ldrb	r2, [r7, #3]
 800b62c:	4611      	mov	r1, r2
 800b62e:	4618      	mov	r0, r3
 800b630:	f009 f83f 	bl	80146b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b084      	sub	sp, #16
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	4608      	mov	r0, r1
 800b650:	4611      	mov	r1, r2
 800b652:	461a      	mov	r2, r3
 800b654:	4603      	mov	r3, r0
 800b656:	70fb      	strb	r3, [r7, #3]
 800b658:	460b      	mov	r3, r1
 800b65a:	803b      	strh	r3, [r7, #0]
 800b65c:	4613      	mov	r3, r2
 800b65e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b660:	2300      	movs	r3, #0
 800b662:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	da0e      	bge.n	800b68a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b66c:	78fb      	ldrb	r3, [r7, #3]
 800b66e:	f003 0207 	and.w	r2, r3, #7
 800b672:	4613      	mov	r3, r2
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	4413      	add	r3, r2
 800b678:	00db      	lsls	r3, r3, #3
 800b67a:	3310      	adds	r3, #16
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	4413      	add	r3, r2
 800b680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2201      	movs	r2, #1
 800b686:	705a      	strb	r2, [r3, #1]
 800b688:	e00e      	b.n	800b6a8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b68a:	78fb      	ldrb	r3, [r7, #3]
 800b68c:	f003 0207 	and.w	r2, r3, #7
 800b690:	4613      	mov	r3, r2
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	4413      	add	r3, r2
 800b696:	00db      	lsls	r3, r3, #3
 800b698:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	4413      	add	r3, r2
 800b6a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b6a8:	78fb      	ldrb	r3, [r7, #3]
 800b6aa:	f003 0307 	and.w	r3, r3, #7
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b6b4:	883a      	ldrh	r2, [r7, #0]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	78ba      	ldrb	r2, [r7, #2]
 800b6be:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b6c0:	78bb      	ldrb	r3, [r7, #2]
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d102      	bne.n	800b6cc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d101      	bne.n	800b6da <HAL_PCD_EP_Open+0x94>
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	e00e      	b.n	800b6f8 <HAL_PCD_EP_Open+0xb2>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68f9      	ldr	r1, [r7, #12]
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f006 fd81 	bl	80121f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800b6f6:	7afb      	ldrb	r3, [r7, #11]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3710      	adds	r7, #16
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	460b      	mov	r3, r1
 800b70a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b70c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b710:	2b00      	cmp	r3, #0
 800b712:	da0e      	bge.n	800b732 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b714:	78fb      	ldrb	r3, [r7, #3]
 800b716:	f003 0207 	and.w	r2, r3, #7
 800b71a:	4613      	mov	r3, r2
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	4413      	add	r3, r2
 800b720:	00db      	lsls	r3, r3, #3
 800b722:	3310      	adds	r3, #16
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	4413      	add	r3, r2
 800b728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2201      	movs	r2, #1
 800b72e:	705a      	strb	r2, [r3, #1]
 800b730:	e00e      	b.n	800b750 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b732:	78fb      	ldrb	r3, [r7, #3]
 800b734:	f003 0207 	and.w	r2, r3, #7
 800b738:	4613      	mov	r3, r2
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	4413      	add	r3, r2
 800b73e:	00db      	lsls	r3, r3, #3
 800b740:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	4413      	add	r3, r2
 800b748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2200      	movs	r2, #0
 800b74e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b750:	78fb      	ldrb	r3, [r7, #3]
 800b752:	f003 0307 	and.w	r3, r3, #7
 800b756:	b2da      	uxtb	r2, r3
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800b762:	2b01      	cmp	r3, #1
 800b764:	d101      	bne.n	800b76a <HAL_PCD_EP_Close+0x6a>
 800b766:	2302      	movs	r3, #2
 800b768:	e00e      	b.n	800b788 <HAL_PCD_EP_Close+0x88>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2201      	movs	r2, #1
 800b76e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	68f9      	ldr	r1, [r7, #12]
 800b778:	4618      	mov	r0, r3
 800b77a:	f007 f8fd 	bl	8012978 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b086      	sub	sp, #24
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	607a      	str	r2, [r7, #4]
 800b79a:	603b      	str	r3, [r7, #0]
 800b79c:	460b      	mov	r3, r1
 800b79e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b7a0:	7afb      	ldrb	r3, [r7, #11]
 800b7a2:	f003 0207 	and.w	r2, r3, #7
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	009b      	lsls	r3, r3, #2
 800b7aa:	4413      	add	r3, r2
 800b7ac:	00db      	lsls	r3, r3, #3
 800b7ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	683a      	ldr	r2, [r7, #0]
 800b7c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b7d0:	7afb      	ldrb	r3, [r7, #11]
 800b7d2:	f003 0307 	and.w	r3, r3, #7
 800b7d6:	b2da      	uxtb	r2, r3
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	6979      	ldr	r1, [r7, #20]
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f007 fab5 	bl	8012d52 <USB_EPStartXfer>

  return HAL_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3718      	adds	r7, #24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800b7f2:	b480      	push	{r7}
 800b7f4:	b083      	sub	sp, #12
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b7fe:	78fb      	ldrb	r3, [r7, #3]
 800b800:	f003 0207 	and.w	r2, r3, #7
 800b804:	6879      	ldr	r1, [r7, #4]
 800b806:	4613      	mov	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4413      	add	r3, r2
 800b80c:	00db      	lsls	r3, r3, #3
 800b80e:	440b      	add	r3, r1
 800b810:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800b814:	681b      	ldr	r3, [r3, #0]
}
 800b816:	4618      	mov	r0, r3
 800b818:	370c      	adds	r7, #12
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr

0800b822 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b086      	sub	sp, #24
 800b826:	af00      	add	r7, sp, #0
 800b828:	60f8      	str	r0, [r7, #12]
 800b82a:	607a      	str	r2, [r7, #4]
 800b82c:	603b      	str	r3, [r7, #0]
 800b82e:	460b      	mov	r3, r1
 800b830:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b832:	7afb      	ldrb	r3, [r7, #11]
 800b834:	f003 0207 	and.w	r2, r3, #7
 800b838:	4613      	mov	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	4413      	add	r3, r2
 800b83e:	00db      	lsls	r3, r3, #3
 800b840:	3310      	adds	r3, #16
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	4413      	add	r3, r2
 800b846:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	683a      	ldr	r2, [r7, #0]
 800b852:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	683a      	ldr	r2, [r7, #0]
 800b860:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	2200      	movs	r2, #0
 800b866:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	2201      	movs	r2, #1
 800b86c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b86e:	7afb      	ldrb	r3, [r7, #11]
 800b870:	f003 0307 	and.w	r3, r3, #7
 800b874:	b2da      	uxtb	r2, r3
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	6979      	ldr	r1, [r7, #20]
 800b880:	4618      	mov	r0, r3
 800b882:	f007 fa66 	bl	8012d52 <USB_EPStartXfer>

  return HAL_OK;
 800b886:	2300      	movs	r3, #0
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3718      	adds	r7, #24
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	460b      	mov	r3, r1
 800b89a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b89c:	78fb      	ldrb	r3, [r7, #3]
 800b89e:	f003 0307 	and.w	r3, r3, #7
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	7912      	ldrb	r2, [r2, #4]
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d901      	bls.n	800b8ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e03e      	b.n	800b92c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b8ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	da0e      	bge.n	800b8d4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b8b6:	78fb      	ldrb	r3, [r7, #3]
 800b8b8:	f003 0207 	and.w	r2, r3, #7
 800b8bc:	4613      	mov	r3, r2
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4413      	add	r3, r2
 800b8c2:	00db      	lsls	r3, r3, #3
 800b8c4:	3310      	adds	r3, #16
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	705a      	strb	r2, [r3, #1]
 800b8d2:	e00c      	b.n	800b8ee <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b8d4:	78fa      	ldrb	r2, [r7, #3]
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	4413      	add	r3, r2
 800b8dc:	00db      	lsls	r3, r3, #3
 800b8de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b8f4:	78fb      	ldrb	r3, [r7, #3]
 800b8f6:	f003 0307 	and.w	r3, r3, #7
 800b8fa:	b2da      	uxtb	r2, r3
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800b906:	2b01      	cmp	r3, #1
 800b908:	d101      	bne.n	800b90e <HAL_PCD_EP_SetStall+0x7e>
 800b90a:	2302      	movs	r3, #2
 800b90c:	e00e      	b.n	800b92c <HAL_PCD_EP_SetStall+0x9c>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	68f9      	ldr	r1, [r7, #12]
 800b91c:	4618      	mov	r0, r3
 800b91e:	f008 fdc9 	bl	80144b4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3710      	adds	r7, #16
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	460b      	mov	r3, r1
 800b93e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b940:	78fb      	ldrb	r3, [r7, #3]
 800b942:	f003 030f 	and.w	r3, r3, #15
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	7912      	ldrb	r2, [r2, #4]
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d901      	bls.n	800b952 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e040      	b.n	800b9d4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b956:	2b00      	cmp	r3, #0
 800b958:	da0e      	bge.n	800b978 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b95a:	78fb      	ldrb	r3, [r7, #3]
 800b95c:	f003 0207 	and.w	r2, r3, #7
 800b960:	4613      	mov	r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	4413      	add	r3, r2
 800b966:	00db      	lsls	r3, r3, #3
 800b968:	3310      	adds	r3, #16
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	4413      	add	r3, r2
 800b96e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2201      	movs	r2, #1
 800b974:	705a      	strb	r2, [r3, #1]
 800b976:	e00e      	b.n	800b996 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b978:	78fb      	ldrb	r3, [r7, #3]
 800b97a:	f003 0207 	and.w	r2, r3, #7
 800b97e:	4613      	mov	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	00db      	lsls	r3, r3, #3
 800b986:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	4413      	add	r3, r2
 800b98e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2200      	movs	r2, #0
 800b994:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2200      	movs	r2, #0
 800b99a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b99c:	78fb      	ldrb	r3, [r7, #3]
 800b99e:	f003 0307 	and.w	r3, r3, #7
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d101      	bne.n	800b9b6 <HAL_PCD_EP_ClrStall+0x82>
 800b9b2:	2302      	movs	r3, #2
 800b9b4:	e00e      	b.n	800b9d4 <HAL_PCD_EP_ClrStall+0xa0>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	68f9      	ldr	r1, [r7, #12]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f008 fdc6 	bl	8014556 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3710      	adds	r7, #16
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b096      	sub	sp, #88	; 0x58
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b9e4:	e3ae      	b.n	800c144 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b9ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800b9f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	f003 030f 	and.w	r3, r3, #15
 800b9fc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800ba00:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f040 8170 	bne.w	800bcea <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800ba0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ba0e:	f003 0310 	and.w	r3, r3, #16
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d14d      	bne.n	800bab2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	881b      	ldrh	r3, [r3, #0]
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800ba22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba26:	81fb      	strh	r3, [r7, #14]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	89fb      	ldrh	r3, [r7, #14]
 800ba2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	3310      	adds	r3, #16
 800ba3e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	00db      	lsls	r3, r3, #3
 800ba52:	4413      	add	r3, r2
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	6812      	ldr	r2, [r2, #0]
 800ba58:	4413      	add	r3, r2
 800ba5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ba5e:	881b      	ldrh	r3, [r3, #0]
 800ba60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ba64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800ba68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba6a:	695a      	ldr	r2, [r3, #20]
 800ba6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba6e:	69db      	ldr	r3, [r3, #28]
 800ba70:	441a      	add	r2, r3
 800ba72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba74:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800ba76:	2100      	movs	r1, #0
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f00e fd56 	bl	801a52a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	7b1b      	ldrb	r3, [r3, #12]
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 835d 	beq.w	800c144 <PCD_EP_ISR_Handler+0x768>
 800ba8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba8c:	699b      	ldr	r3, [r3, #24]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f040 8358 	bne.w	800c144 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	7b1b      	ldrb	r3, [r3, #12]
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba9e:	b2da      	uxtb	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	b292      	uxth	r2, r2
 800baa6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	731a      	strb	r2, [r3, #12]
 800bab0:	e348      	b.n	800c144 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bab8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	881b      	ldrh	r3, [r3, #0]
 800bac0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800bac4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d032      	beq.n	800bb36 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bad8:	b29b      	uxth	r3, r3
 800bada:	461a      	mov	r2, r3
 800badc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	00db      	lsls	r3, r3, #3
 800bae2:	4413      	add	r3, r2
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	6812      	ldr	r2, [r2, #0]
 800bae8:	4413      	add	r3, r2
 800baea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800baee:	881b      	ldrh	r3, [r3, #0]
 800baf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800baf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baf6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6818      	ldr	r0, [r3, #0]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800bb02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb04:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800bb06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb08:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	f008 fe4e 	bl	80147ac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	881b      	ldrh	r3, [r3, #0]
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	f640 738f 	movw	r3, #3983	; 0xf8f
 800bb1c:	4013      	ands	r3, r2
 800bb1e:	823b      	strh	r3, [r7, #16]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	8a3a      	ldrh	r2, [r7, #16]
 800bb26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bb2a:	b292      	uxth	r2, r2
 800bb2c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f00e fcce 	bl	801a4d0 <HAL_PCD_SetupStageCallback>
 800bb34:	e306      	b.n	800c144 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800bb36:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f280 8302 	bge.w	800c144 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	881b      	ldrh	r3, [r3, #0]
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	f640 738f 	movw	r3, #3983	; 0xf8f
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	83fb      	strh	r3, [r7, #30]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	8bfa      	ldrh	r2, [r7, #30]
 800bb56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bb5a:	b292      	uxth	r2, r2
 800bb5c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	461a      	mov	r2, r3
 800bb6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	00db      	lsls	r3, r3, #3
 800bb70:	4413      	add	r3, r2
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	6812      	ldr	r2, [r2, #0]
 800bb76:	4413      	add	r3, r2
 800bb78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb7c:	881b      	ldrh	r3, [r3, #0]
 800bb7e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bb82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb84:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800bb86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb88:	69db      	ldr	r3, [r3, #28]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d019      	beq.n	800bbc2 <PCD_EP_ISR_Handler+0x1e6>
 800bb8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d015      	beq.n	800bbc2 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6818      	ldr	r0, [r3, #0]
 800bb9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb9c:	6959      	ldr	r1, [r3, #20]
 800bb9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bba0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800bba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bba4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	f008 fe00 	bl	80147ac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800bbac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbae:	695a      	ldr	r2, [r3, #20]
 800bbb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbb2:	69db      	ldr	r3, [r3, #28]
 800bbb4:	441a      	add	r2, r3
 800bbb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbb8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800bbba:	2100      	movs	r1, #0
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f00e fc99 	bl	801a4f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	881b      	ldrh	r3, [r3, #0]
 800bbc8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800bbcc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bbd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f040 82b5 	bne.w	800c144 <PCD_EP_ISR_Handler+0x768>
 800bbda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bbde:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bbe2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bbe6:	f000 82ad 	beq.w	800c144 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	61bb      	str	r3, [r7, #24]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	4413      	add	r3, r2
 800bc00:	61bb      	str	r3, [r7, #24]
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bc08:	617b      	str	r3, [r7, #20]
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	881b      	ldrh	r3, [r3, #0]
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	801a      	strh	r2, [r3, #0]
 800bc1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	2b3e      	cmp	r3, #62	; 0x3e
 800bc20:	d91d      	bls.n	800bc5e <PCD_EP_ISR_Handler+0x282>
 800bc22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	095b      	lsrs	r3, r3, #5
 800bc28:	647b      	str	r3, [r7, #68]	; 0x44
 800bc2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	f003 031f 	and.w	r3, r3, #31
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d102      	bne.n	800bc3c <PCD_EP_ISR_Handler+0x260>
 800bc36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	647b      	str	r3, [r7, #68]	; 0x44
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	881b      	ldrh	r3, [r3, #0]
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	029b      	lsls	r3, r3, #10
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	801a      	strh	r2, [r3, #0]
 800bc5c:	e026      	b.n	800bcac <PCD_EP_ISR_Handler+0x2d0>
 800bc5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc60:	691b      	ldr	r3, [r3, #16]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d10a      	bne.n	800bc7c <PCD_EP_ISR_Handler+0x2a0>
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	881b      	ldrh	r3, [r3, #0]
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	801a      	strh	r2, [r3, #0]
 800bc7a:	e017      	b.n	800bcac <PCD_EP_ISR_Handler+0x2d0>
 800bc7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc7e:	691b      	ldr	r3, [r3, #16]
 800bc80:	085b      	lsrs	r3, r3, #1
 800bc82:	647b      	str	r3, [r7, #68]	; 0x44
 800bc84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc86:	691b      	ldr	r3, [r3, #16]
 800bc88:	f003 0301 	and.w	r3, r3, #1
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d002      	beq.n	800bc96 <PCD_EP_ISR_Handler+0x2ba>
 800bc90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc92:	3301      	adds	r3, #1
 800bc94:	647b      	str	r3, [r7, #68]	; 0x44
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	881b      	ldrh	r3, [r3, #0]
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	029b      	lsls	r3, r3, #10
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	4313      	orrs	r3, r2
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bcb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcbc:	827b      	strh	r3, [r7, #18]
 800bcbe:	8a7b      	ldrh	r3, [r7, #18]
 800bcc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bcc4:	827b      	strh	r3, [r7, #18]
 800bcc6:	8a7b      	ldrh	r3, [r7, #18]
 800bcc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bccc:	827b      	strh	r3, [r7, #18]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	8a7b      	ldrh	r3, [r7, #18]
 800bcd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	8013      	strh	r3, [r2, #0]
 800bce8:	e22c      	b.n	800c144 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	461a      	mov	r2, r3
 800bcf0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	4413      	add	r3, r2
 800bcf8:	881b      	ldrh	r3, [r3, #0]
 800bcfa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800bcfe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	f280 80f6 	bge.w	800bef4 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	4413      	add	r3, r2
 800bd16:	881b      	ldrh	r3, [r3, #0]
 800bd18:	b29a      	uxth	r2, r3
 800bd1a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800bd1e:	4013      	ands	r3, r2
 800bd20:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	461a      	mov	r2, r3
 800bd2a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	4413      	add	r3, r2
 800bd32:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800bd36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bd3a:	b292      	uxth	r2, r2
 800bd3c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800bd3e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800bd42:	4613      	mov	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4413      	add	r3, r2
 800bd48:	00db      	lsls	r3, r3, #3
 800bd4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	4413      	add	r3, r2
 800bd52:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800bd54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd56:	7b1b      	ldrb	r3, [r3, #12]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d123      	bne.n	800bda4 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	461a      	mov	r2, r3
 800bd68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	00db      	lsls	r3, r3, #3
 800bd6e:	4413      	add	r3, r2
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	6812      	ldr	r2, [r2, #0]
 800bd74:	4413      	add	r3, r2
 800bd76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd7a:	881b      	ldrh	r3, [r3, #0]
 800bd7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd80:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800bd84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f000 808e 	beq.w	800beaa <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6818      	ldr	r0, [r3, #0]
 800bd92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd94:	6959      	ldr	r1, [r3, #20]
 800bd96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd98:	88da      	ldrh	r2, [r3, #6]
 800bd9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800bd9e:	f008 fd05 	bl	80147ac <USB_ReadPMA>
 800bda2:	e082      	b.n	800beaa <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800bda4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bda6:	78db      	ldrb	r3, [r3, #3]
 800bda8:	2b02      	cmp	r3, #2
 800bdaa:	d10a      	bne.n	800bdc2 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800bdac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f000 f9d3 	bl	800c160 <HAL_PCD_EP_DB_Receive>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800bdc0:	e073      	b.n	800beaa <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4413      	add	r3, r2
 800bdd0:	881b      	ldrh	r3, [r3, #0]
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bddc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	461a      	mov	r2, r3
 800bde6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	441a      	add	r2, r3
 800bdee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bdf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800be02:	b29b      	uxth	r3, r3
 800be04:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	461a      	mov	r2, r3
 800be0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4413      	add	r3, r2
 800be14:	881b      	ldrh	r3, [r3, #0]
 800be16:	b29b      	uxth	r3, r3
 800be18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d022      	beq.n	800be66 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be28:	b29b      	uxth	r3, r3
 800be2a:	461a      	mov	r2, r3
 800be2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	00db      	lsls	r3, r3, #3
 800be32:	4413      	add	r3, r2
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	6812      	ldr	r2, [r2, #0]
 800be38:	4413      	add	r3, r2
 800be3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800be3e:	881b      	ldrh	r3, [r3, #0]
 800be40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be44:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800be48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d02c      	beq.n	800beaa <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6818      	ldr	r0, [r3, #0]
 800be54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be56:	6959      	ldr	r1, [r3, #20]
 800be58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be5a:	891a      	ldrh	r2, [r3, #8]
 800be5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800be60:	f008 fca4 	bl	80147ac <USB_ReadPMA>
 800be64:	e021      	b.n	800beaa <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be6e:	b29b      	uxth	r3, r3
 800be70:	461a      	mov	r2, r3
 800be72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	00db      	lsls	r3, r3, #3
 800be78:	4413      	add	r3, r2
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	6812      	ldr	r2, [r2, #0]
 800be7e:	4413      	add	r3, r2
 800be80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be84:	881b      	ldrh	r3, [r3, #0]
 800be86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be8a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800be8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800be92:	2b00      	cmp	r3, #0
 800be94:	d009      	beq.n	800beaa <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6818      	ldr	r0, [r3, #0]
 800be9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be9c:	6959      	ldr	r1, [r3, #20]
 800be9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bea0:	895a      	ldrh	r2, [r3, #10]
 800bea2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800bea6:	f008 fc81 	bl	80147ac <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800beaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beac:	69da      	ldr	r2, [r3, #28]
 800beae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800beb2:	441a      	add	r2, r3
 800beb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beb6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800beb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beba:	695a      	ldr	r2, [r3, #20]
 800bebc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800bec0:	441a      	add	r2, r3
 800bec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bec4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800bec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bec8:	699b      	ldr	r3, [r3, #24]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d005      	beq.n	800beda <PCD_EP_ISR_Handler+0x4fe>
 800bece:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800bed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d206      	bcs.n	800bee8 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800beda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	4619      	mov	r1, r3
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f00e fb07 	bl	801a4f4 <HAL_PCD_DataOutStageCallback>
 800bee6:	e005      	b.n	800bef4 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800beee:	4618      	mov	r0, r3
 800bef0:	f006 ff2f 	bl	8012d52 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800bef4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800befc:	2b00      	cmp	r3, #0
 800befe:	f000 8121 	beq.w	800c144 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800bf02:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800bf06:	4613      	mov	r3, r2
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	4413      	add	r3, r2
 800bf0c:	00db      	lsls	r3, r3, #3
 800bf0e:	3310      	adds	r3, #16
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	4413      	add	r3, r2
 800bf14:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4413      	add	r3, r2
 800bf24:	881b      	ldrh	r3, [r3, #0]
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800bf2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	441a      	add	r2, r3
 800bf42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800bf52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf54:	78db      	ldrb	r3, [r3, #3]
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	f040 80a2 	bne.w	800c0a0 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800bf5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf5e:	2200      	movs	r2, #0
 800bf60:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800bf62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf64:	7b1b      	ldrb	r3, [r3, #12]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f000 8093 	beq.w	800c092 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bf6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bf70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d046      	beq.n	800c006 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bf78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf7a:	785b      	ldrb	r3, [r3, #1]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d126      	bne.n	800bfce <PCD_EP_ISR_Handler+0x5f2>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	627b      	str	r3, [r7, #36]	; 0x24
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	461a      	mov	r2, r3
 800bf92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf94:	4413      	add	r3, r2
 800bf96:	627b      	str	r3, [r7, #36]	; 0x24
 800bf98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	00da      	lsls	r2, r3, #3
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa0:	4413      	add	r3, r2
 800bfa2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bfa6:	623b      	str	r3, [r7, #32]
 800bfa8:	6a3b      	ldr	r3, [r7, #32]
 800bfaa:	881b      	ldrh	r3, [r3, #0]
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfb2:	b29a      	uxth	r2, r3
 800bfb4:	6a3b      	ldr	r3, [r7, #32]
 800bfb6:	801a      	strh	r2, [r3, #0]
 800bfb8:	6a3b      	ldr	r3, [r7, #32]
 800bfba:	881b      	ldrh	r3, [r3, #0]
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	6a3b      	ldr	r3, [r7, #32]
 800bfca:	801a      	strh	r2, [r3, #0]
 800bfcc:	e061      	b.n	800c092 <PCD_EP_ISR_Handler+0x6b6>
 800bfce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfd0:	785b      	ldrb	r3, [r3, #1]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d15d      	bne.n	800c092 <PCD_EP_ISR_Handler+0x6b6>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfea:	4413      	add	r3, r2
 800bfec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	00da      	lsls	r2, r3, #3
 800bff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff6:	4413      	add	r3, r2
 800bff8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bffc:	62bb      	str	r3, [r7, #40]	; 0x28
 800bffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c000:	2200      	movs	r2, #0
 800c002:	801a      	strh	r2, [r3, #0]
 800c004:	e045      	b.n	800c092 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c00c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c00e:	785b      	ldrb	r3, [r3, #1]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d126      	bne.n	800c062 <PCD_EP_ISR_Handler+0x686>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	637b      	str	r3, [r7, #52]	; 0x34
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c022:	b29b      	uxth	r3, r3
 800c024:	461a      	mov	r2, r3
 800c026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c028:	4413      	add	r3, r2
 800c02a:	637b      	str	r3, [r7, #52]	; 0x34
 800c02c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	00da      	lsls	r2, r3, #3
 800c032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c034:	4413      	add	r3, r2
 800c036:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c03a:	633b      	str	r3, [r7, #48]	; 0x30
 800c03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03e:	881b      	ldrh	r3, [r3, #0]
 800c040:	b29b      	uxth	r3, r3
 800c042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c046:	b29a      	uxth	r2, r3
 800c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04a:	801a      	strh	r2, [r3, #0]
 800c04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04e:	881b      	ldrh	r3, [r3, #0]
 800c050:	b29b      	uxth	r3, r3
 800c052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c05a:	b29a      	uxth	r2, r3
 800c05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05e:	801a      	strh	r2, [r3, #0]
 800c060:	e017      	b.n	800c092 <PCD_EP_ISR_Handler+0x6b6>
 800c062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c064:	785b      	ldrb	r3, [r3, #1]
 800c066:	2b01      	cmp	r3, #1
 800c068:	d113      	bne.n	800c092 <PCD_EP_ISR_Handler+0x6b6>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c072:	b29b      	uxth	r3, r3
 800c074:	461a      	mov	r2, r3
 800c076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c078:	4413      	add	r3, r2
 800c07a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c07c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	00da      	lsls	r2, r3, #3
 800c082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c084:	4413      	add	r3, r2
 800c086:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c08a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08e:	2200      	movs	r2, #0
 800c090:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	4619      	mov	r1, r3
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f00e fa46 	bl	801a52a <HAL_PCD_DataInStageCallback>
 800c09e:	e051      	b.n	800c144 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800c0a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c0a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d144      	bne.n	800c136 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	00db      	lsls	r3, r3, #3
 800c0be:	4413      	add	r3, r2
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	6812      	ldr	r2, [r2, #0]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c0ca:	881b      	ldrh	r3, [r3, #0]
 800c0cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c0d0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800c0d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0d6:	699a      	ldr	r2, [r3, #24]
 800c0d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d907      	bls.n	800c0f0 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800c0e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0e2:	699a      	ldr	r2, [r3, #24]
 800c0e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c0e8:	1ad2      	subs	r2, r2, r3
 800c0ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0ec:	619a      	str	r2, [r3, #24]
 800c0ee:	e002      	b.n	800c0f6 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800c0f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800c0f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0f8:	699b      	ldr	r3, [r3, #24]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d106      	bne.n	800c10c <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c0fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	4619      	mov	r1, r3
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f00e fa10 	bl	801a52a <HAL_PCD_DataInStageCallback>
 800c10a:	e01b      	b.n	800c144 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800c10c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c10e:	695a      	ldr	r2, [r3, #20]
 800c110:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c114:	441a      	add	r2, r3
 800c116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c118:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800c11a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c11c:	69da      	ldr	r2, [r3, #28]
 800c11e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c122:	441a      	add	r2, r3
 800c124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c126:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c12e:	4618      	mov	r0, r3
 800c130:	f006 fe0f 	bl	8012d52 <USB_EPStartXfer>
 800c134:	e006      	b.n	800c144 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800c136:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c13a:	461a      	mov	r2, r3
 800c13c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 f917 	bl	800c372 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	b21b      	sxth	r3, r3
 800c150:	2b00      	cmp	r3, #0
 800c152:	f6ff ac48 	blt.w	800b9e6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800c156:	2300      	movs	r3, #0
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3758      	adds	r7, #88	; 0x58
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b088      	sub	sp, #32
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	4613      	mov	r3, r2
 800c16c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c16e:	88fb      	ldrh	r3, [r7, #6]
 800c170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c174:	2b00      	cmp	r3, #0
 800c176:	d07c      	beq.n	800c272 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c180:	b29b      	uxth	r3, r3
 800c182:	461a      	mov	r2, r3
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	00db      	lsls	r3, r3, #3
 800c18a:	4413      	add	r3, r2
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	6812      	ldr	r2, [r2, #0]
 800c190:	4413      	add	r3, r2
 800c192:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c196:	881b      	ldrh	r3, [r3, #0]
 800c198:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c19c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	699a      	ldr	r2, [r3, #24]
 800c1a2:	8b7b      	ldrh	r3, [r7, #26]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d306      	bcc.n	800c1b6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	699a      	ldr	r2, [r3, #24]
 800c1ac:	8b7b      	ldrh	r3, [r7, #26]
 800c1ae:	1ad2      	subs	r2, r2, r3
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	619a      	str	r2, [r3, #24]
 800c1b4:	e002      	b.n	800c1bc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	699b      	ldr	r3, [r3, #24]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d123      	bne.n	800c20c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4413      	add	r3, r2
 800c1d2:	881b      	ldrh	r3, [r3, #0]
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c1da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1de:	833b      	strh	r3, [r7, #24]
 800c1e0:	8b3b      	ldrh	r3, [r7, #24]
 800c1e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c1e6:	833b      	strh	r3, [r7, #24]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	441a      	add	r2, r3
 800c1f6:	8b3b      	ldrh	r3, [r7, #24]
 800c1f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c208:	b29b      	uxth	r3, r3
 800c20a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c20c:	88fb      	ldrh	r3, [r7, #6]
 800c20e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c212:	2b00      	cmp	r3, #0
 800c214:	d01f      	beq.n	800c256 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	461a      	mov	r2, r3
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	4413      	add	r3, r2
 800c224:	881b      	ldrh	r3, [r3, #0]
 800c226:	b29b      	uxth	r3, r3
 800c228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c22c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c230:	82fb      	strh	r3, [r7, #22]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	461a      	mov	r2, r3
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	441a      	add	r2, r3
 800c240:	8afb      	ldrh	r3, [r7, #22]
 800c242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c24a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c24e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c252:	b29b      	uxth	r3, r3
 800c254:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c256:	8b7b      	ldrh	r3, [r7, #26]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	f000 8085 	beq.w	800c368 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6818      	ldr	r0, [r3, #0]
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	6959      	ldr	r1, [r3, #20]
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	891a      	ldrh	r2, [r3, #8]
 800c26a:	8b7b      	ldrh	r3, [r7, #26]
 800c26c:	f008 fa9e 	bl	80147ac <USB_ReadPMA>
 800c270:	e07a      	b.n	800c368 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	461a      	mov	r2, r3
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	00db      	lsls	r3, r3, #3
 800c284:	4413      	add	r3, r2
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	6812      	ldr	r2, [r2, #0]
 800c28a:	4413      	add	r3, r2
 800c28c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c290:	881b      	ldrh	r3, [r3, #0]
 800c292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c296:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	699a      	ldr	r2, [r3, #24]
 800c29c:	8b7b      	ldrh	r3, [r7, #26]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d306      	bcc.n	800c2b0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	699a      	ldr	r2, [r3, #24]
 800c2a6:	8b7b      	ldrh	r3, [r7, #26]
 800c2a8:	1ad2      	subs	r2, r2, r3
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	619a      	str	r2, [r3, #24]
 800c2ae:	e002      	b.n	800c2b6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	699b      	ldr	r3, [r3, #24]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d123      	bne.n	800c306 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	4413      	add	r3, r2
 800c2cc:	881b      	ldrh	r3, [r3, #0]
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c2d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2d8:	83fb      	strh	r3, [r7, #30]
 800c2da:	8bfb      	ldrh	r3, [r7, #30]
 800c2dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c2e0:	83fb      	strh	r3, [r7, #30]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	441a      	add	r2, r3
 800c2f0:	8bfb      	ldrh	r3, [r7, #30]
 800c2f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c302:	b29b      	uxth	r3, r3
 800c304:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800c306:	88fb      	ldrh	r3, [r7, #6]
 800c308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d11f      	bne.n	800c350 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	461a      	mov	r2, r3
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	009b      	lsls	r3, r3, #2
 800c31c:	4413      	add	r3, r2
 800c31e:	881b      	ldrh	r3, [r3, #0]
 800c320:	b29b      	uxth	r3, r3
 800c322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c32a:	83bb      	strh	r3, [r7, #28]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	461a      	mov	r2, r3
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	441a      	add	r2, r3
 800c33a:	8bbb      	ldrh	r3, [r7, #28]
 800c33c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c348:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c350:	8b7b      	ldrh	r3, [r7, #26]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d008      	beq.n	800c368 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	6818      	ldr	r0, [r3, #0]
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	6959      	ldr	r1, [r3, #20]
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	895a      	ldrh	r2, [r3, #10]
 800c362:	8b7b      	ldrh	r3, [r7, #26]
 800c364:	f008 fa22 	bl	80147ac <USB_ReadPMA>
    }
  }

  return count;
 800c368:	8b7b      	ldrh	r3, [r7, #26]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3720      	adds	r7, #32
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c372:	b580      	push	{r7, lr}
 800c374:	b0a4      	sub	sp, #144	; 0x90
 800c376:	af00      	add	r7, sp, #0
 800c378:	60f8      	str	r0, [r7, #12]
 800c37a:	60b9      	str	r1, [r7, #8]
 800c37c:	4613      	mov	r3, r2
 800c37e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c380:	88fb      	ldrh	r3, [r7, #6]
 800c382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c386:	2b00      	cmp	r3, #0
 800c388:	f000 81db 	beq.w	800c742 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c394:	b29b      	uxth	r3, r3
 800c396:	461a      	mov	r2, r3
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	00db      	lsls	r3, r3, #3
 800c39e:	4413      	add	r3, r2
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	6812      	ldr	r2, [r2, #0]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c3aa:	881b      	ldrh	r3, [r3, #0]
 800c3ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3b0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	699a      	ldr	r2, [r3, #24]
 800c3b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d907      	bls.n	800c3d0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	699a      	ldr	r2, [r3, #24]
 800c3c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c3c8:	1ad2      	subs	r2, r2, r3
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	619a      	str	r2, [r3, #24]
 800c3ce:	e002      	b.n	800c3d6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	699b      	ldr	r3, [r3, #24]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f040 80b9 	bne.w	800c552 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	785b      	ldrb	r3, [r3, #1]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d126      	bne.n	800c436 <HAL_PCD_EP_DB_Transmit+0xc4>
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fc:	4413      	add	r3, r2
 800c3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	00da      	lsls	r2, r3, #3
 800c406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c408:	4413      	add	r3, r2
 800c40a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c40e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c412:	881b      	ldrh	r3, [r3, #0]
 800c414:	b29b      	uxth	r3, r3
 800c416:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41e:	801a      	strh	r2, [r3, #0]
 800c420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c422:	881b      	ldrh	r3, [r3, #0]
 800c424:	b29b      	uxth	r3, r3
 800c426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c42a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c42e:	b29a      	uxth	r2, r3
 800c430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c432:	801a      	strh	r2, [r3, #0]
 800c434:	e01a      	b.n	800c46c <HAL_PCD_EP_DB_Transmit+0xfa>
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	785b      	ldrb	r3, [r3, #1]
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d116      	bne.n	800c46c <HAL_PCD_EP_DB_Transmit+0xfa>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	637b      	str	r3, [r7, #52]	; 0x34
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	461a      	mov	r2, r3
 800c450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c452:	4413      	add	r3, r2
 800c454:	637b      	str	r3, [r7, #52]	; 0x34
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	00da      	lsls	r2, r3, #3
 800c45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c45e:	4413      	add	r3, r2
 800c460:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c464:	633b      	str	r3, [r7, #48]	; 0x30
 800c466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c468:	2200      	movs	r2, #0
 800c46a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	627b      	str	r3, [r7, #36]	; 0x24
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	785b      	ldrb	r3, [r3, #1]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d126      	bne.n	800c4c8 <HAL_PCD_EP_DB_Transmit+0x156>
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	61fb      	str	r3, [r7, #28]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c488:	b29b      	uxth	r3, r3
 800c48a:	461a      	mov	r2, r3
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	4413      	add	r3, r2
 800c490:	61fb      	str	r3, [r7, #28]
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	00da      	lsls	r2, r3, #3
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	4413      	add	r3, r2
 800c49c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c4a0:	61bb      	str	r3, [r7, #24]
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	881b      	ldrh	r3, [r3, #0]
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4ac:	b29a      	uxth	r2, r3
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	801a      	strh	r2, [r3, #0]
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	881b      	ldrh	r3, [r3, #0]
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4c0:	b29a      	uxth	r2, r3
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	801a      	strh	r2, [r3, #0]
 800c4c6:	e017      	b.n	800c4f8 <HAL_PCD_EP_DB_Transmit+0x186>
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	785b      	ldrb	r3, [r3, #1]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d113      	bne.n	800c4f8 <HAL_PCD_EP_DB_Transmit+0x186>
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	461a      	mov	r2, r3
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4de:	4413      	add	r3, r2
 800c4e0:	627b      	str	r3, [r7, #36]	; 0x24
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	00da      	lsls	r2, r3, #3
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	4413      	add	r3, r2
 800c4ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c4f0:	623b      	str	r3, [r7, #32]
 800c4f2:	6a3b      	ldr	r3, [r7, #32]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f00e f813 	bl	801a52a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c504:	88fb      	ldrh	r3, [r7, #6]
 800c506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f000 82fa 	beq.w	800cb04 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	461a      	mov	r2, r3
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	4413      	add	r3, r2
 800c51e:	881b      	ldrh	r3, [r3, #0]
 800c520:	b29b      	uxth	r3, r3
 800c522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c52a:	82fb      	strh	r3, [r7, #22]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	461a      	mov	r2, r3
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	441a      	add	r2, r3
 800c53a:	8afb      	ldrh	r3, [r7, #22]
 800c53c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	8013      	strh	r3, [r2, #0]
 800c550:	e2d8      	b.n	800cb04 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c552:	88fb      	ldrh	r3, [r7, #6]
 800c554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d021      	beq.n	800c5a0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	461a      	mov	r2, r3
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	4413      	add	r3, r2
 800c56a:	881b      	ldrh	r3, [r3, #0]
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c576:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	461a      	mov	r2, r3
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	441a      	add	r2, r3
 800c588:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c58c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	f040 82ac 	bne.w	800cb04 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	695a      	ldr	r2, [r3, #20]
 800c5b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c5b4:	441a      	add	r2, r3
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	69da      	ldr	r2, [r3, #28]
 800c5be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c5c2:	441a      	add	r2, r3
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	6a1a      	ldr	r2, [r3, #32]
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	691b      	ldr	r3, [r3, #16]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d30b      	bcc.n	800c5ec <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	691b      	ldr	r3, [r3, #16]
 800c5d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	6a1a      	ldr	r2, [r3, #32]
 800c5e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5e4:	1ad2      	subs	r2, r2, r3
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	621a      	str	r2, [r3, #32]
 800c5ea:	e017      	b.n	800c61c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	6a1b      	ldr	r3, [r3, #32]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d108      	bne.n	800c606 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800c5f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c5f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c604:	e00a      	b.n	800c61c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	2200      	movs	r2, #0
 800c60a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	6a1b      	ldr	r3, [r3, #32]
 800c612:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	2200      	movs	r2, #0
 800c61a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	785b      	ldrb	r3, [r3, #1]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d165      	bne.n	800c6f0 <HAL_PCD_EP_DB_Transmit+0x37e>
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c632:	b29b      	uxth	r3, r3
 800c634:	461a      	mov	r2, r3
 800c636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c638:	4413      	add	r3, r2
 800c63a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	00da      	lsls	r2, r3, #3
 800c642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c644:	4413      	add	r3, r2
 800c646:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c64a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64e:	881b      	ldrh	r3, [r3, #0]
 800c650:	b29b      	uxth	r3, r3
 800c652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c656:	b29a      	uxth	r2, r3
 800c658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65a:	801a      	strh	r2, [r3, #0]
 800c65c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c660:	2b3e      	cmp	r3, #62	; 0x3e
 800c662:	d91d      	bls.n	800c6a0 <HAL_PCD_EP_DB_Transmit+0x32e>
 800c664:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c668:	095b      	lsrs	r3, r3, #5
 800c66a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c66c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c670:	f003 031f 	and.w	r3, r3, #31
 800c674:	2b00      	cmp	r3, #0
 800c676:	d102      	bne.n	800c67e <HAL_PCD_EP_DB_Transmit+0x30c>
 800c678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c67a:	3b01      	subs	r3, #1
 800c67c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c680:	881b      	ldrh	r3, [r3, #0]
 800c682:	b29a      	uxth	r2, r3
 800c684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c686:	b29b      	uxth	r3, r3
 800c688:	029b      	lsls	r3, r3, #10
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	4313      	orrs	r3, r2
 800c68e:	b29b      	uxth	r3, r3
 800c690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c698:	b29a      	uxth	r2, r3
 800c69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69c:	801a      	strh	r2, [r3, #0]
 800c69e:	e044      	b.n	800c72a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800c6a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10a      	bne.n	800c6be <HAL_PCD_EP_DB_Transmit+0x34c>
 800c6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6aa:	881b      	ldrh	r3, [r3, #0]
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6b6:	b29a      	uxth	r2, r3
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ba:	801a      	strh	r2, [r3, #0]
 800c6bc:	e035      	b.n	800c72a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800c6be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6c2:	085b      	lsrs	r3, r3, #1
 800c6c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6ca:	f003 0301 	and.w	r3, r3, #1
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d002      	beq.n	800c6d8 <HAL_PCD_EP_DB_Transmit+0x366>
 800c6d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6da:	881b      	ldrh	r3, [r3, #0]
 800c6dc:	b29a      	uxth	r2, r3
 800c6de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	029b      	lsls	r3, r3, #10
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	b29a      	uxth	r2, r3
 800c6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ec:	801a      	strh	r2, [r3, #0]
 800c6ee:	e01c      	b.n	800c72a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	785b      	ldrb	r3, [r3, #1]
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d118      	bne.n	800c72a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	647b      	str	r3, [r7, #68]	; 0x44
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c706:	b29b      	uxth	r3, r3
 800c708:	461a      	mov	r2, r3
 800c70a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c70c:	4413      	add	r3, r2
 800c70e:	647b      	str	r3, [r7, #68]	; 0x44
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	00da      	lsls	r2, r3, #3
 800c716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c718:	4413      	add	r3, r2
 800c71a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c71e:	643b      	str	r3, [r7, #64]	; 0x40
 800c720:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c724:	b29a      	uxth	r2, r3
 800c726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c728:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	6818      	ldr	r0, [r3, #0]
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	6959      	ldr	r1, [r3, #20]
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	891a      	ldrh	r2, [r3, #8]
 800c736:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	f007 fff4 	bl	8014728 <USB_WritePMA>
 800c740:	e1e0      	b.n	800cb04 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	461a      	mov	r2, r3
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	00db      	lsls	r3, r3, #3
 800c754:	4413      	add	r3, r2
 800c756:	68fa      	ldr	r2, [r7, #12]
 800c758:	6812      	ldr	r2, [r2, #0]
 800c75a:	4413      	add	r3, r2
 800c75c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c760:	881b      	ldrh	r3, [r3, #0]
 800c762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c766:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	699a      	ldr	r2, [r3, #24]
 800c76e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c772:	429a      	cmp	r2, r3
 800c774:	d307      	bcc.n	800c786 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	699a      	ldr	r2, [r3, #24]
 800c77a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c77e:	1ad2      	subs	r2, r2, r3
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	619a      	str	r2, [r3, #24]
 800c784:	e002      	b.n	800c78c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	2200      	movs	r2, #0
 800c78a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	2b00      	cmp	r3, #0
 800c792:	f040 80c0 	bne.w	800c916 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	785b      	ldrb	r3, [r3, #1]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d126      	bne.n	800c7ec <HAL_PCD_EP_DB_Transmit+0x47a>
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c7b2:	4413      	add	r3, r2
 800c7b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	00da      	lsls	r2, r3, #3
 800c7bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c7be:	4413      	add	r3, r2
 800c7c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c7c4:	67bb      	str	r3, [r7, #120]	; 0x78
 800c7c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7c8:	881b      	ldrh	r3, [r3, #0]
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c7d0:	b29a      	uxth	r2, r3
 800c7d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7d4:	801a      	strh	r2, [r3, #0]
 800c7d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7d8:	881b      	ldrh	r3, [r3, #0]
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7e4:	b29a      	uxth	r2, r3
 800c7e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7e8:	801a      	strh	r2, [r3, #0]
 800c7ea:	e01a      	b.n	800c822 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	785b      	ldrb	r3, [r3, #1]
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d116      	bne.n	800c822 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	667b      	str	r3, [r7, #100]	; 0x64
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c802:	b29b      	uxth	r3, r3
 800c804:	461a      	mov	r2, r3
 800c806:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c808:	4413      	add	r3, r2
 800c80a:	667b      	str	r3, [r7, #100]	; 0x64
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	00da      	lsls	r2, r3, #3
 800c812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c814:	4413      	add	r3, r2
 800c816:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c81a:	663b      	str	r3, [r7, #96]	; 0x60
 800c81c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c81e:	2200      	movs	r2, #0
 800c820:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	677b      	str	r3, [r7, #116]	; 0x74
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	785b      	ldrb	r3, [r3, #1]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d12b      	bne.n	800c888 <HAL_PCD_EP_DB_Transmit+0x516>
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c83e:	b29b      	uxth	r3, r3
 800c840:	461a      	mov	r2, r3
 800c842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c844:	4413      	add	r3, r2
 800c846:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	00da      	lsls	r2, r3, #3
 800c84e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c850:	4413      	add	r3, r2
 800c852:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c85a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c85e:	881b      	ldrh	r3, [r3, #0]
 800c860:	b29b      	uxth	r3, r3
 800c862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c866:	b29a      	uxth	r2, r3
 800c868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c86c:	801a      	strh	r2, [r3, #0]
 800c86e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c872:	881b      	ldrh	r3, [r3, #0]
 800c874:	b29b      	uxth	r3, r3
 800c876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c87a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c87e:	b29a      	uxth	r2, r3
 800c880:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c884:	801a      	strh	r2, [r3, #0]
 800c886:	e017      	b.n	800c8b8 <HAL_PCD_EP_DB_Transmit+0x546>
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	785b      	ldrb	r3, [r3, #1]
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d113      	bne.n	800c8b8 <HAL_PCD_EP_DB_Transmit+0x546>
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c898:	b29b      	uxth	r3, r3
 800c89a:	461a      	mov	r2, r3
 800c89c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c89e:	4413      	add	r3, r2
 800c8a0:	677b      	str	r3, [r7, #116]	; 0x74
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	00da      	lsls	r2, r3, #3
 800c8a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c8aa:	4413      	add	r3, r2
 800c8ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c8b0:	673b      	str	r3, [r7, #112]	; 0x70
 800c8b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	4619      	mov	r1, r3
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f00d fe33 	bl	801a52a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c8c4:	88fb      	ldrh	r3, [r7, #6]
 800c8c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f040 811a 	bne.w	800cb04 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	4413      	add	r3, r2
 800c8de:	881b      	ldrh	r3, [r3, #0]
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8ea:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	441a      	add	r2, r3
 800c8fc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800c900:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c904:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c908:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c90c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c910:	b29b      	uxth	r3, r3
 800c912:	8013      	strh	r3, [r2, #0]
 800c914:	e0f6      	b.n	800cb04 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c916:	88fb      	ldrh	r3, [r7, #6]
 800c918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d121      	bne.n	800c964 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	461a      	mov	r2, r3
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	4413      	add	r3, r2
 800c92e:	881b      	ldrh	r3, [r3, #0]
 800c930:	b29b      	uxth	r3, r3
 800c932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c93a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	461a      	mov	r2, r3
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	441a      	add	r2, r3
 800c94c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c95c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c960:	b29b      	uxth	r3, r3
 800c962:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	f040 80ca 	bne.w	800cb04 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	695a      	ldr	r2, [r3, #20]
 800c974:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c978:	441a      	add	r2, r3
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	69da      	ldr	r2, [r3, #28]
 800c982:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c986:	441a      	add	r2, r3
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	6a1a      	ldr	r2, [r3, #32]
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	691b      	ldr	r3, [r3, #16]
 800c994:	429a      	cmp	r2, r3
 800c996:	d30b      	bcc.n	800c9b0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	691b      	ldr	r3, [r3, #16]
 800c99c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	6a1a      	ldr	r2, [r3, #32]
 800c9a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c9a8:	1ad2      	subs	r2, r2, r3
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	621a      	str	r2, [r3, #32]
 800c9ae:	e017      	b.n	800c9e0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	6a1b      	ldr	r3, [r3, #32]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d108      	bne.n	800c9ca <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800c9b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c9bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c9c8:	e00a      	b.n	800c9e0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	657b      	str	r3, [r7, #84]	; 0x54
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	785b      	ldrb	r3, [r3, #1]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d165      	bne.n	800caba <HAL_PCD_EP_DB_Transmit+0x748>
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	461a      	mov	r2, r3
 800ca00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca02:	4413      	add	r3, r2
 800ca04:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	00da      	lsls	r2, r3, #3
 800ca0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca0e:	4413      	add	r3, r2
 800ca10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ca14:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca24:	801a      	strh	r2, [r3, #0]
 800ca26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca2a:	2b3e      	cmp	r3, #62	; 0x3e
 800ca2c:	d91d      	bls.n	800ca6a <HAL_PCD_EP_DB_Transmit+0x6f8>
 800ca2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca32:	095b      	lsrs	r3, r3, #5
 800ca34:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca3a:	f003 031f 	and.w	r3, r3, #31
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d102      	bne.n	800ca48 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800ca42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca44:	3b01      	subs	r3, #1
 800ca46:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca4a:	881b      	ldrh	r3, [r3, #0]
 800ca4c:	b29a      	uxth	r2, r3
 800ca4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	029b      	lsls	r3, r3, #10
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	4313      	orrs	r3, r2
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca62:	b29a      	uxth	r2, r3
 800ca64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca66:	801a      	strh	r2, [r3, #0]
 800ca68:	e041      	b.n	800caee <HAL_PCD_EP_DB_Transmit+0x77c>
 800ca6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d10a      	bne.n	800ca88 <HAL_PCD_EP_DB_Transmit+0x716>
 800ca72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca74:	881b      	ldrh	r3, [r3, #0]
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca80:	b29a      	uxth	r2, r3
 800ca82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca84:	801a      	strh	r2, [r3, #0]
 800ca86:	e032      	b.n	800caee <HAL_PCD_EP_DB_Transmit+0x77c>
 800ca88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca8c:	085b      	lsrs	r3, r3, #1
 800ca8e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca94:	f003 0301 	and.w	r3, r3, #1
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d002      	beq.n	800caa2 <HAL_PCD_EP_DB_Transmit+0x730>
 800ca9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca9e:	3301      	adds	r3, #1
 800caa0:	66bb      	str	r3, [r7, #104]	; 0x68
 800caa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800caa4:	881b      	ldrh	r3, [r3, #0]
 800caa6:	b29a      	uxth	r2, r3
 800caa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800caaa:	b29b      	uxth	r3, r3
 800caac:	029b      	lsls	r3, r3, #10
 800caae:	b29b      	uxth	r3, r3
 800cab0:	4313      	orrs	r3, r2
 800cab2:	b29a      	uxth	r2, r3
 800cab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cab6:	801a      	strh	r2, [r3, #0]
 800cab8:	e019      	b.n	800caee <HAL_PCD_EP_DB_Transmit+0x77c>
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	785b      	ldrb	r3, [r3, #1]
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	d115      	bne.n	800caee <HAL_PCD_EP_DB_Transmit+0x77c>
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800caca:	b29b      	uxth	r3, r3
 800cacc:	461a      	mov	r2, r3
 800cace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cad0:	4413      	add	r3, r2
 800cad2:	657b      	str	r3, [r7, #84]	; 0x54
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	00da      	lsls	r2, r3, #3
 800cada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cadc:	4413      	add	r3, r2
 800cade:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cae2:	653b      	str	r3, [r7, #80]	; 0x50
 800cae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cae8:	b29a      	uxth	r2, r3
 800caea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caec:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	6818      	ldr	r0, [r3, #0]
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	6959      	ldr	r1, [r3, #20]
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	895a      	ldrh	r2, [r3, #10]
 800cafa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	f007 fe12 	bl	8014728 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	461a      	mov	r2, r3
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	4413      	add	r3, r2
 800cb12:	881b      	ldrh	r3, [r3, #0]
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb1e:	82bb      	strh	r3, [r7, #20]
 800cb20:	8abb      	ldrh	r3, [r7, #20]
 800cb22:	f083 0310 	eor.w	r3, r3, #16
 800cb26:	82bb      	strh	r3, [r7, #20]
 800cb28:	8abb      	ldrh	r3, [r7, #20]
 800cb2a:	f083 0320 	eor.w	r3, r3, #32
 800cb2e:	82bb      	strh	r3, [r7, #20]
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	461a      	mov	r2, r3
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	441a      	add	r2, r3
 800cb3e:	8abb      	ldrh	r3, [r7, #20]
 800cb40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3790      	adds	r7, #144	; 0x90
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800cb5e:	b480      	push	{r7}
 800cb60:	b087      	sub	sp, #28
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	60f8      	str	r0, [r7, #12]
 800cb66:	607b      	str	r3, [r7, #4]
 800cb68:	460b      	mov	r3, r1
 800cb6a:	817b      	strh	r3, [r7, #10]
 800cb6c:	4613      	mov	r3, r2
 800cb6e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800cb70:	897b      	ldrh	r3, [r7, #10]
 800cb72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d00b      	beq.n	800cb94 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb7c:	897b      	ldrh	r3, [r7, #10]
 800cb7e:	f003 0207 	and.w	r2, r3, #7
 800cb82:	4613      	mov	r3, r2
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	4413      	add	r3, r2
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	3310      	adds	r3, #16
 800cb8c:	68fa      	ldr	r2, [r7, #12]
 800cb8e:	4413      	add	r3, r2
 800cb90:	617b      	str	r3, [r7, #20]
 800cb92:	e009      	b.n	800cba8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cb94:	897a      	ldrh	r2, [r7, #10]
 800cb96:	4613      	mov	r3, r2
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	4413      	add	r3, r2
 800cb9c:	00db      	lsls	r3, r3, #3
 800cb9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	4413      	add	r3, r2
 800cba6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800cba8:	893b      	ldrh	r3, [r7, #8]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d107      	bne.n	800cbbe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	80da      	strh	r2, [r3, #6]
 800cbbc:	e00b      	b.n	800cbd6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	b29a      	uxth	r2, r3
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	0c1b      	lsrs	r3, r3, #16
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cbd6:	2300      	movs	r3, #0
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	371c      	adds	r7, #28
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr

0800cbe4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	f043 0301 	orr.w	r3, r3, #1
 800cc0e:	b29a      	uxth	r2, r3
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	f043 0302 	orr.w	r3, r3, #2
 800cc22:	b29a      	uxth	r2, r3
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3714      	adds	r7, #20
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cc3c:	4b05      	ldr	r3, [pc, #20]	; (800cc54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a04      	ldr	r2, [pc, #16]	; (800cc54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800cc42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc46:	6013      	str	r3, [r2, #0]
}
 800cc48:	bf00      	nop
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr
 800cc52:	bf00      	nop
 800cc54:	58000400 	.word	0x58000400

0800cc58 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800cc5c:	4b04      	ldr	r3, [pc, #16]	; (800cc70 <HAL_PWREx_GetVoltageRange+0x18>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	58000400 	.word	0x58000400

0800cc74 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800cc74:	b480      	push	{r7}
 800cc76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800cc78:	4b05      	ldr	r3, [pc, #20]	; (800cc90 <HAL_PWREx_EnableVddUSB+0x1c>)
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	4a04      	ldr	r2, [pc, #16]	; (800cc90 <HAL_PWREx_EnableVddUSB+0x1c>)
 800cc7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cc82:	6053      	str	r3, [r2, #4]
}
 800cc84:	bf00      	nop
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	58000400 	.word	0x58000400

0800cc94 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800cc94:	b480      	push	{r7}
 800cc96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800cc98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cca6:	d101      	bne.n	800ccac <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e000      	b.n	800ccae <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800ccac:	2300      	movs	r3, #0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <LL_RCC_HSE_Enable>:
{
 800ccb8:	b480      	push	{r7}
 800ccba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800ccbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ccc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ccca:	6013      	str	r3, [r2, #0]
}
 800cccc:	bf00      	nop
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr

0800ccd6 <LL_RCC_HSE_Disable>:
{
 800ccd6:	b480      	push	{r7}
 800ccd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800ccda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cce8:	6013      	str	r3, [r2, #0]
}
 800ccea:	bf00      	nop
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <LL_RCC_HSE_IsReady>:
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800ccf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd06:	d101      	bne.n	800cd0c <LL_RCC_HSE_IsReady+0x18>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e000      	b.n	800cd0e <LL_RCC_HSE_IsReady+0x1a>
 800cd0c:	2300      	movs	r3, #0
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <LL_RCC_HSI_Enable>:
{
 800cd18:	b480      	push	{r7}
 800cd1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800cd1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cd26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd2a:	6013      	str	r3, [r2, #0]
}
 800cd2c:	bf00      	nop
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr

0800cd36 <LL_RCC_HSI_Disable>:
{
 800cd36:	b480      	push	{r7}
 800cd38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800cd3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cd44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd48:	6013      	str	r3, [r2, #0]
}
 800cd4a:	bf00      	nop
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <LL_RCC_HSI_IsReady>:
{
 800cd54:	b480      	push	{r7}
 800cd56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800cd58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd66:	d101      	bne.n	800cd6c <LL_RCC_HSI_IsReady+0x18>
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e000      	b.n	800cd6e <LL_RCC_HSI_IsReady+0x1a>
 800cd6c:	2300      	movs	r3, #0
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <LL_RCC_HSI_SetCalibTrimming>:
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b083      	sub	sp, #12
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800cd80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	061b      	lsls	r3, r3, #24
 800cd8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cd92:	4313      	orrs	r3, r2
 800cd94:	604b      	str	r3, [r1, #4]
}
 800cd96:	bf00      	nop
 800cd98:	370c      	adds	r7, #12
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr

0800cda2 <LL_RCC_HSI48_Enable>:
{
 800cda2:	b480      	push	{r7}
 800cda4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800cda6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cdaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cdae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cdb2:	f043 0301 	orr.w	r3, r3, #1
 800cdb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800cdba:	bf00      	nop
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <LL_RCC_HSI48_Disable>:
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800cdc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cdcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cdd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cdd4:	f023 0301 	bic.w	r3, r3, #1
 800cdd8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800cddc:	bf00      	nop
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr

0800cde6 <LL_RCC_HSI48_IsReady>:
{
 800cde6:	b480      	push	{r7}
 800cde8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800cdea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cdee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cdf2:	f003 0302 	and.w	r3, r3, #2
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d101      	bne.n	800cdfe <LL_RCC_HSI48_IsReady+0x18>
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	e000      	b.n	800ce00 <LL_RCC_HSI48_IsReady+0x1a>
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr

0800ce0a <LL_RCC_LSE_Enable>:
{
 800ce0a:	b480      	push	{r7}
 800ce0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ce0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ce1a:	f043 0301 	orr.w	r3, r3, #1
 800ce1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800ce22:	bf00      	nop
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <LL_RCC_LSE_Disable>:
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ce30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ce3c:	f023 0301 	bic.w	r3, r3, #1
 800ce40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800ce44:	bf00      	nop
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr

0800ce4e <LL_RCC_LSE_EnableBypass>:
{
 800ce4e:	b480      	push	{r7}
 800ce50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ce52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ce5e:	f043 0304 	orr.w	r3, r3, #4
 800ce62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800ce66:	bf00      	nop
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr

0800ce70 <LL_RCC_LSE_DisableBypass>:
{
 800ce70:	b480      	push	{r7}
 800ce72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ce74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ce80:	f023 0304 	bic.w	r3, r3, #4
 800ce84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800ce88:	bf00      	nop
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr

0800ce92 <LL_RCC_LSE_IsReady>:
{
 800ce92:	b480      	push	{r7}
 800ce94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ce96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce9e:	f003 0302 	and.w	r3, r3, #2
 800cea2:	2b02      	cmp	r3, #2
 800cea4:	d101      	bne.n	800ceaa <LL_RCC_LSE_IsReady+0x18>
 800cea6:	2301      	movs	r3, #1
 800cea8:	e000      	b.n	800ceac <LL_RCC_LSE_IsReady+0x1a>
 800ceaa:	2300      	movs	r3, #0
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr

0800ceb6 <LL_RCC_LSI1_Enable>:
{
 800ceb6:	b480      	push	{r7}
 800ceb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800ceba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cec6:	f043 0301 	orr.w	r3, r3, #1
 800ceca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800cece:	bf00      	nop
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <LL_RCC_LSI1_Disable>:
{
 800ced8:	b480      	push	{r7}
 800ceda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800cedc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cee8:	f023 0301 	bic.w	r3, r3, #1
 800ceec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800cef0:	bf00      	nop
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr

0800cefa <LL_RCC_LSI1_IsReady>:
{
 800cefa:	b480      	push	{r7}
 800cefc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800cefe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf06:	f003 0302 	and.w	r3, r3, #2
 800cf0a:	2b02      	cmp	r3, #2
 800cf0c:	d101      	bne.n	800cf12 <LL_RCC_LSI1_IsReady+0x18>
 800cf0e:	2301      	movs	r3, #1
 800cf10:	e000      	b.n	800cf14 <LL_RCC_LSI1_IsReady+0x1a>
 800cf12:	2300      	movs	r3, #0
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr

0800cf1e <LL_RCC_LSI2_Enable>:
{
 800cf1e:	b480      	push	{r7}
 800cf20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800cf22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cf2e:	f043 0304 	orr.w	r3, r3, #4
 800cf32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800cf36:	bf00      	nop
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <LL_RCC_LSI2_Disable>:
{
 800cf40:	b480      	push	{r7}
 800cf42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800cf44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cf50:	f023 0304 	bic.w	r3, r3, #4
 800cf54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800cf58:	bf00      	nop
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr

0800cf62 <LL_RCC_LSI2_IsReady>:
{
 800cf62:	b480      	push	{r7}
 800cf64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800cf66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf6e:	f003 0308 	and.w	r3, r3, #8
 800cf72:	2b08      	cmp	r3, #8
 800cf74:	d101      	bne.n	800cf7a <LL_RCC_LSI2_IsReady+0x18>
 800cf76:	2301      	movs	r3, #1
 800cf78:	e000      	b.n	800cf7c <LL_RCC_LSI2_IsReady+0x1a>
 800cf7a:	2300      	movs	r3, #0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr

0800cf86 <LL_RCC_LSI2_SetTrimming>:
{
 800cf86:	b480      	push	{r7}
 800cf88:	b083      	sub	sp, #12
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800cf8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf96:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	021b      	lsls	r3, r3, #8
 800cf9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800cfa8:	bf00      	nop
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <LL_RCC_MSI_Enable>:
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800cfb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cfc2:	f043 0301 	orr.w	r3, r3, #1
 800cfc6:	6013      	str	r3, [r2, #0]
}
 800cfc8:	bf00      	nop
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr

0800cfd2 <LL_RCC_MSI_Disable>:
{
 800cfd2:	b480      	push	{r7}
 800cfd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800cfd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cfe0:	f023 0301 	bic.w	r3, r3, #1
 800cfe4:	6013      	str	r3, [r2, #0]
}
 800cfe6:	bf00      	nop
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <LL_RCC_MSI_IsReady>:
{
 800cff0:	b480      	push	{r7}
 800cff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800cff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f003 0302 	and.w	r3, r3, #2
 800cffe:	2b02      	cmp	r3, #2
 800d000:	d101      	bne.n	800d006 <LL_RCC_MSI_IsReady+0x16>
 800d002:	2301      	movs	r3, #1
 800d004:	e000      	b.n	800d008 <LL_RCC_MSI_IsReady+0x18>
 800d006:	2300      	movs	r3, #0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr

0800d012 <LL_RCC_MSI_SetRange>:
{
 800d012:	b480      	push	{r7}
 800d014:	b083      	sub	sp, #12
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800d01a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	4313      	orrs	r3, r2
 800d02c:	600b      	str	r3, [r1, #0]
}
 800d02e:	bf00      	nop
 800d030:	370c      	adds	r7, #12
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr

0800d03a <LL_RCC_MSI_GetRange>:
{
 800d03a:	b480      	push	{r7}
 800d03c:	b083      	sub	sp, #12
 800d03e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800d040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d04a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2bb0      	cmp	r3, #176	; 0xb0
 800d050:	d901      	bls.n	800d056 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800d052:	23b0      	movs	r3, #176	; 0xb0
 800d054:	607b      	str	r3, [r7, #4]
  return msiRange;
 800d056:	687b      	ldr	r3, [r7, #4]
}
 800d058:	4618      	mov	r0, r3
 800d05a:	370c      	adds	r7, #12
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr

0800d064 <LL_RCC_MSI_SetCalibTrimming>:
{
 800d064:	b480      	push	{r7}
 800d066:	b083      	sub	sp, #12
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800d06c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	021b      	lsls	r3, r3, #8
 800d07a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d07e:	4313      	orrs	r3, r2
 800d080:	604b      	str	r3, [r1, #4]
}
 800d082:	bf00      	nop
 800d084:	370c      	adds	r7, #12
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr

0800d08e <LL_RCC_SetSysClkSource>:
{
 800d08e:	b480      	push	{r7}
 800d090:	b083      	sub	sp, #12
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800d096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	f023 0203 	bic.w	r2, r3, #3
 800d0a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	608b      	str	r3, [r1, #8]
}
 800d0aa:	bf00      	nop
 800d0ac:	370c      	adds	r7, #12
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr

0800d0b6 <LL_RCC_GetSysClkSource>:
{
 800d0b6:	b480      	push	{r7}
 800d0b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800d0ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	f003 030c 	and.w	r3, r3, #12
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr

0800d0ce <LL_RCC_SetAHBPrescaler>:
{
 800d0ce:	b480      	push	{r7}
 800d0d0:	b083      	sub	sp, #12
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800d0d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d0e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	608b      	str	r3, [r1, #8]
}
 800d0ea:	bf00      	nop
 800d0ec:	370c      	adds	r7, #12
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <LL_C2_RCC_SetAHBPrescaler>:
{
 800d0f6:	b480      	push	{r7}
 800d0f8:	b083      	sub	sp, #12
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800d0fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d102:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d106:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d10a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	4313      	orrs	r3, r2
 800d112:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800d116:	bf00      	nop
 800d118:	370c      	adds	r7, #12
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr

0800d122 <LL_RCC_SetAHB4Prescaler>:
{
 800d122:	b480      	push	{r7}
 800d124:	b083      	sub	sp, #12
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800d12a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d12e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d132:	f023 020f 	bic.w	r2, r3, #15
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	091b      	lsrs	r3, r3, #4
 800d13a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d13e:	4313      	orrs	r3, r2
 800d140:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800d144:	bf00      	nop
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <LL_RCC_SetAPB1Prescaler>:
{
 800d150:	b480      	push	{r7}
 800d152:	b083      	sub	sp, #12
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800d158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d162:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	4313      	orrs	r3, r2
 800d16a:	608b      	str	r3, [r1, #8]
}
 800d16c:	bf00      	nop
 800d16e:	370c      	adds	r7, #12
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <LL_RCC_SetAPB2Prescaler>:
{
 800d178:	b480      	push	{r7}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800d180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d18a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	4313      	orrs	r3, r2
 800d192:	608b      	str	r3, [r1, #8]
}
 800d194:	bf00      	nop
 800d196:	370c      	adds	r7, #12
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <LL_RCC_GetAHBPrescaler>:
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800d1a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <LL_RCC_GetAHB4Prescaler>:
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800d1bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d1c4:	011b      	lsls	r3, r3, #4
 800d1c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <LL_RCC_GetAPB1Prescaler>:
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800d1d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr

0800d1ec <LL_RCC_GetAPB2Prescaler>:
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800d1f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800d204:	b480      	push	{r7}
 800d206:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800d208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d216:	6013      	str	r3, [r2, #0]
}
 800d218:	bf00      	nop
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr

0800d222 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800d222:	b480      	push	{r7}
 800d224:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800d226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d230:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d234:	6013      	str	r3, [r2, #0]
}
 800d236:	bf00      	nop
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800d240:	b480      	push	{r7}
 800d242:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800d244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d24e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d252:	d101      	bne.n	800d258 <LL_RCC_PLL_IsReady+0x18>
 800d254:	2301      	movs	r3, #1
 800d256:	e000      	b.n	800d25a <LL_RCC_PLL_IsReady+0x1a>
 800d258:	2300      	movs	r3, #0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr

0800d264 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800d264:	b480      	push	{r7}
 800d266:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800d268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	0a1b      	lsrs	r3, r3, #8
 800d270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800d274:	4618      	mov	r0, r3
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr

0800d27e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800d27e:	b480      	push	{r7}
 800d280:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800d282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d286:	68db      	ldr	r3, [r3, #12]
 800d288:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr

0800d296 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800d296:	b480      	push	{r7}
 800d298:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800d29a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800d2ae:	b480      	push	{r7}
 800d2b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800d2b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	f003 0303 	and.w	r3, r3, #3
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c4:	4770      	bx	lr

0800d2c6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800d2c6:	b480      	push	{r7}
 800d2c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800d2ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2d8:	d101      	bne.n	800d2de <LL_RCC_IsActiveFlag_HPRE+0x18>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e000      	b.n	800d2e0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr

0800d2ea <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800d2ea:	b480      	push	{r7}
 800d2ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800d2ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d2f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d2f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d2fe:	d101      	bne.n	800d304 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800d300:	2301      	movs	r3, #1
 800d302:	e000      	b.n	800d306 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr

0800d310 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800d310:	b480      	push	{r7}
 800d312:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800d314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d318:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d31c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d324:	d101      	bne.n	800d32a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800d326:	2301      	movs	r3, #1
 800d328:	e000      	b.n	800d32c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800d32a:	2300      	movs	r3, #0
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr

0800d336 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800d336:	b480      	push	{r7}
 800d338:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800d33a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d348:	d101      	bne.n	800d34e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800d34a:	2301      	movs	r3, #1
 800d34c:	e000      	b.n	800d350 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800d34e:	2300      	movs	r3, #0
}
 800d350:	4618      	mov	r0, r3
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr

0800d35a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800d35a:	b480      	push	{r7}
 800d35c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800d35e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d362:	689b      	ldr	r3, [r3, #8]
 800d364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d368:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d36c:	d101      	bne.n	800d372 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800d36e:	2301      	movs	r3, #1
 800d370:	e000      	b.n	800d374 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800d372:	2300      	movs	r3, #0
}
 800d374:	4618      	mov	r0, r3
 800d376:	46bd      	mov	sp, r7
 800d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37c:	4770      	bx	lr
	...

0800d380 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d380:	b590      	push	{r4, r7, lr}
 800d382:	b08d      	sub	sp, #52	; 0x34
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d101      	bne.n	800d392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d38e:	2301      	movs	r3, #1
 800d390:	e363      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f003 0320 	and.w	r3, r3, #32
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	f000 808d 	beq.w	800d4ba <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d3a0:	f7ff fe89 	bl	800d0b6 <LL_RCC_GetSysClkSource>
 800d3a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d3a6:	f7ff ff82 	bl	800d2ae <LL_RCC_PLL_GetMainSource>
 800d3aa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d005      	beq.n	800d3be <HAL_RCC_OscConfig+0x3e>
 800d3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b4:	2b0c      	cmp	r3, #12
 800d3b6:	d147      	bne.n	800d448 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800d3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d144      	bne.n	800d448 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	69db      	ldr	r3, [r3, #28]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d101      	bne.n	800d3ca <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e347      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d3ce:	f7ff fe34 	bl	800d03a <LL_RCC_MSI_GetRange>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	429c      	cmp	r4, r3
 800d3d6:	d914      	bls.n	800d402 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f000 fd2f 	bl	800de40 <RCC_SetFlashLatencyFromMSIRange>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d001      	beq.n	800d3ec <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	e336      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7ff fe0e 	bl	800d012 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6a1b      	ldr	r3, [r3, #32]
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7ff fe32 	bl	800d064 <LL_RCC_MSI_SetCalibTrimming>
 800d400:	e013      	b.n	800d42a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d406:	4618      	mov	r0, r3
 800d408:	f7ff fe03 	bl	800d012 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6a1b      	ldr	r3, [r3, #32]
 800d410:	4618      	mov	r0, r3
 800d412:	f7ff fe27 	bl	800d064 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d41a:	4618      	mov	r0, r3
 800d41c:	f000 fd10 	bl	800de40 <RCC_SetFlashLatencyFromMSIRange>
 800d420:	4603      	mov	r3, r0
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800d426:	2301      	movs	r3, #1
 800d428:	e317      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800d42a:	f000 fcc9 	bl	800ddc0 <HAL_RCC_GetHCLKFreq>
 800d42e:	4603      	mov	r3, r0
 800d430:	4aa4      	ldr	r2, [pc, #656]	; (800d6c4 <HAL_RCC_OscConfig+0x344>)
 800d432:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d434:	4ba4      	ldr	r3, [pc, #656]	; (800d6c8 <HAL_RCC_OscConfig+0x348>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4618      	mov	r0, r3
 800d43a:	f7fa fec5 	bl	80081c8 <HAL_InitTick>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d039      	beq.n	800d4b8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800d444:	2301      	movs	r3, #1
 800d446:	e308      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	69db      	ldr	r3, [r3, #28]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d01e      	beq.n	800d48e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800d450:	f7ff fdb0 	bl	800cfb4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d454:	f7fa ff06 	bl	8008264 <HAL_GetTick>
 800d458:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800d45a:	e008      	b.n	800d46e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d45c:	f7fa ff02 	bl	8008264 <HAL_GetTick>
 800d460:	4602      	mov	r2, r0
 800d462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d464:	1ad3      	subs	r3, r2, r3
 800d466:	2b02      	cmp	r3, #2
 800d468:	d901      	bls.n	800d46e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800d46a:	2303      	movs	r3, #3
 800d46c:	e2f5      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800d46e:	f7ff fdbf 	bl	800cff0 <LL_RCC_MSI_IsReady>
 800d472:	4603      	mov	r3, r0
 800d474:	2b00      	cmp	r3, #0
 800d476:	d0f1      	beq.n	800d45c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7ff fdc8 	bl	800d012 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6a1b      	ldr	r3, [r3, #32]
 800d486:	4618      	mov	r0, r3
 800d488:	f7ff fdec 	bl	800d064 <LL_RCC_MSI_SetCalibTrimming>
 800d48c:	e015      	b.n	800d4ba <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800d48e:	f7ff fda0 	bl	800cfd2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d492:	f7fa fee7 	bl	8008264 <HAL_GetTick>
 800d496:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800d498:	e008      	b.n	800d4ac <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d49a:	f7fa fee3 	bl	8008264 <HAL_GetTick>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a2:	1ad3      	subs	r3, r2, r3
 800d4a4:	2b02      	cmp	r3, #2
 800d4a6:	d901      	bls.n	800d4ac <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800d4a8:	2303      	movs	r3, #3
 800d4aa:	e2d6      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800d4ac:	f7ff fda0 	bl	800cff0 <LL_RCC_MSI_IsReady>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d1f1      	bne.n	800d49a <HAL_RCC_OscConfig+0x11a>
 800d4b6:	e000      	b.n	800d4ba <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800d4b8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f003 0301 	and.w	r3, r3, #1
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d047      	beq.n	800d556 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d4c6:	f7ff fdf6 	bl	800d0b6 <LL_RCC_GetSysClkSource>
 800d4ca:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d4cc:	f7ff feef 	bl	800d2ae <LL_RCC_PLL_GetMainSource>
 800d4d0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800d4d2:	6a3b      	ldr	r3, [r7, #32]
 800d4d4:	2b08      	cmp	r3, #8
 800d4d6:	d005      	beq.n	800d4e4 <HAL_RCC_OscConfig+0x164>
 800d4d8:	6a3b      	ldr	r3, [r7, #32]
 800d4da:	2b0c      	cmp	r3, #12
 800d4dc:	d108      	bne.n	800d4f0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800d4de:	69fb      	ldr	r3, [r7, #28]
 800d4e0:	2b03      	cmp	r3, #3
 800d4e2:	d105      	bne.n	800d4f0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d134      	bne.n	800d556 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	e2b4      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4f8:	d102      	bne.n	800d500 <HAL_RCC_OscConfig+0x180>
 800d4fa:	f7ff fbdd 	bl	800ccb8 <LL_RCC_HSE_Enable>
 800d4fe:	e001      	b.n	800d504 <HAL_RCC_OscConfig+0x184>
 800d500:	f7ff fbe9 	bl	800ccd6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d012      	beq.n	800d532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d50c:	f7fa feaa 	bl	8008264 <HAL_GetTick>
 800d510:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800d512:	e008      	b.n	800d526 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d514:	f7fa fea6 	bl	8008264 <HAL_GetTick>
 800d518:	4602      	mov	r2, r0
 800d51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51c:	1ad3      	subs	r3, r2, r3
 800d51e:	2b64      	cmp	r3, #100	; 0x64
 800d520:	d901      	bls.n	800d526 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800d522:	2303      	movs	r3, #3
 800d524:	e299      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800d526:	f7ff fbe5 	bl	800ccf4 <LL_RCC_HSE_IsReady>
 800d52a:	4603      	mov	r3, r0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d0f1      	beq.n	800d514 <HAL_RCC_OscConfig+0x194>
 800d530:	e011      	b.n	800d556 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d532:	f7fa fe97 	bl	8008264 <HAL_GetTick>
 800d536:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800d538:	e008      	b.n	800d54c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d53a:	f7fa fe93 	bl	8008264 <HAL_GetTick>
 800d53e:	4602      	mov	r2, r0
 800d540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d542:	1ad3      	subs	r3, r2, r3
 800d544:	2b64      	cmp	r3, #100	; 0x64
 800d546:	d901      	bls.n	800d54c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800d548:	2303      	movs	r3, #3
 800d54a:	e286      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800d54c:	f7ff fbd2 	bl	800ccf4 <LL_RCC_HSE_IsReady>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d1f1      	bne.n	800d53a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f003 0302 	and.w	r3, r3, #2
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d04c      	beq.n	800d5fc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d562:	f7ff fda8 	bl	800d0b6 <LL_RCC_GetSysClkSource>
 800d566:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d568:	f7ff fea1 	bl	800d2ae <LL_RCC_PLL_GetMainSource>
 800d56c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	2b04      	cmp	r3, #4
 800d572:	d005      	beq.n	800d580 <HAL_RCC_OscConfig+0x200>
 800d574:	69bb      	ldr	r3, [r7, #24]
 800d576:	2b0c      	cmp	r3, #12
 800d578:	d10e      	bne.n	800d598 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	2b02      	cmp	r3, #2
 800d57e:	d10b      	bne.n	800d598 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d101      	bne.n	800d58c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800d588:	2301      	movs	r3, #1
 800d58a:	e266      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	691b      	ldr	r3, [r3, #16]
 800d590:	4618      	mov	r0, r3
 800d592:	f7ff fbf1 	bl	800cd78 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800d596:	e031      	b.n	800d5fc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	68db      	ldr	r3, [r3, #12]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d019      	beq.n	800d5d4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d5a0:	f7ff fbba 	bl	800cd18 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5a4:	f7fa fe5e 	bl	8008264 <HAL_GetTick>
 800d5a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800d5aa:	e008      	b.n	800d5be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d5ac:	f7fa fe5a 	bl	8008264 <HAL_GetTick>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	2b02      	cmp	r3, #2
 800d5b8:	d901      	bls.n	800d5be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	e24d      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800d5be:	f7ff fbc9 	bl	800cd54 <LL_RCC_HSI_IsReady>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d0f1      	beq.n	800d5ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	691b      	ldr	r3, [r3, #16]
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7ff fbd3 	bl	800cd78 <LL_RCC_HSI_SetCalibTrimming>
 800d5d2:	e013      	b.n	800d5fc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d5d4:	f7ff fbaf 	bl	800cd36 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5d8:	f7fa fe44 	bl	8008264 <HAL_GetTick>
 800d5dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800d5de:	e008      	b.n	800d5f2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d5e0:	f7fa fe40 	bl	8008264 <HAL_GetTick>
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e8:	1ad3      	subs	r3, r2, r3
 800d5ea:	2b02      	cmp	r3, #2
 800d5ec:	d901      	bls.n	800d5f2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800d5ee:	2303      	movs	r3, #3
 800d5f0:	e233      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800d5f2:	f7ff fbaf 	bl	800cd54 <LL_RCC_HSI_IsReady>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1f1      	bne.n	800d5e0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f003 0308 	and.w	r3, r3, #8
 800d604:	2b00      	cmp	r3, #0
 800d606:	d106      	bne.n	800d616 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800d610:	2b00      	cmp	r3, #0
 800d612:	f000 80a3 	beq.w	800d75c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	695b      	ldr	r3, [r3, #20]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d076      	beq.n	800d70c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f003 0310 	and.w	r3, r3, #16
 800d626:	2b00      	cmp	r3, #0
 800d628:	d046      	beq.n	800d6b8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800d62a:	f7ff fc66 	bl	800cefa <LL_RCC_LSI1_IsReady>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d113      	bne.n	800d65c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800d634:	f7ff fc3f 	bl	800ceb6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d638:	f7fa fe14 	bl	8008264 <HAL_GetTick>
 800d63c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800d63e:	e008      	b.n	800d652 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d640:	f7fa fe10 	bl	8008264 <HAL_GetTick>
 800d644:	4602      	mov	r2, r0
 800d646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d648:	1ad3      	subs	r3, r2, r3
 800d64a:	2b02      	cmp	r3, #2
 800d64c:	d901      	bls.n	800d652 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800d64e:	2303      	movs	r3, #3
 800d650:	e203      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800d652:	f7ff fc52 	bl	800cefa <LL_RCC_LSI1_IsReady>
 800d656:	4603      	mov	r3, r0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d0f1      	beq.n	800d640 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800d65c:	f7ff fc5f 	bl	800cf1e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d660:	f7fa fe00 	bl	8008264 <HAL_GetTick>
 800d664:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800d666:	e008      	b.n	800d67a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800d668:	f7fa fdfc 	bl	8008264 <HAL_GetTick>
 800d66c:	4602      	mov	r2, r0
 800d66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d670:	1ad3      	subs	r3, r2, r3
 800d672:	2b03      	cmp	r3, #3
 800d674:	d901      	bls.n	800d67a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800d676:	2303      	movs	r3, #3
 800d678:	e1ef      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800d67a:	f7ff fc72 	bl	800cf62 <LL_RCC_LSI2_IsReady>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d0f1      	beq.n	800d668 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	699b      	ldr	r3, [r3, #24]
 800d688:	4618      	mov	r0, r3
 800d68a:	f7ff fc7c 	bl	800cf86 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800d68e:	f7ff fc23 	bl	800ced8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d692:	f7fa fde7 	bl	8008264 <HAL_GetTick>
 800d696:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800d698:	e008      	b.n	800d6ac <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d69a:	f7fa fde3 	bl	8008264 <HAL_GetTick>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a2:	1ad3      	subs	r3, r2, r3
 800d6a4:	2b02      	cmp	r3, #2
 800d6a6:	d901      	bls.n	800d6ac <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800d6a8:	2303      	movs	r3, #3
 800d6aa:	e1d6      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800d6ac:	f7ff fc25 	bl	800cefa <LL_RCC_LSI1_IsReady>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d1f1      	bne.n	800d69a <HAL_RCC_OscConfig+0x31a>
 800d6b6:	e051      	b.n	800d75c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800d6b8:	f7ff fbfd 	bl	800ceb6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6bc:	f7fa fdd2 	bl	8008264 <HAL_GetTick>
 800d6c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800d6c2:	e00c      	b.n	800d6de <HAL_RCC_OscConfig+0x35e>
 800d6c4:	2000002c 	.word	0x2000002c
 800d6c8:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d6cc:	f7fa fdca 	bl	8008264 <HAL_GetTick>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d4:	1ad3      	subs	r3, r2, r3
 800d6d6:	2b02      	cmp	r3, #2
 800d6d8:	d901      	bls.n	800d6de <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800d6da:	2303      	movs	r3, #3
 800d6dc:	e1bd      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800d6de:	f7ff fc0c 	bl	800cefa <LL_RCC_LSI1_IsReady>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d0f1      	beq.n	800d6cc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800d6e8:	f7ff fc2a 	bl	800cf40 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800d6ec:	e008      	b.n	800d700 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800d6ee:	f7fa fdb9 	bl	8008264 <HAL_GetTick>
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f6:	1ad3      	subs	r3, r2, r3
 800d6f8:	2b03      	cmp	r3, #3
 800d6fa:	d901      	bls.n	800d700 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800d6fc:	2303      	movs	r3, #3
 800d6fe:	e1ac      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800d700:	f7ff fc2f 	bl	800cf62 <LL_RCC_LSI2_IsReady>
 800d704:	4603      	mov	r3, r0
 800d706:	2b00      	cmp	r3, #0
 800d708:	d1f1      	bne.n	800d6ee <HAL_RCC_OscConfig+0x36e>
 800d70a:	e027      	b.n	800d75c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800d70c:	f7ff fc18 	bl	800cf40 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d710:	f7fa fda8 	bl	8008264 <HAL_GetTick>
 800d714:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800d716:	e008      	b.n	800d72a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800d718:	f7fa fda4 	bl	8008264 <HAL_GetTick>
 800d71c:	4602      	mov	r2, r0
 800d71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d720:	1ad3      	subs	r3, r2, r3
 800d722:	2b03      	cmp	r3, #3
 800d724:	d901      	bls.n	800d72a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800d726:	2303      	movs	r3, #3
 800d728:	e197      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800d72a:	f7ff fc1a 	bl	800cf62 <LL_RCC_LSI2_IsReady>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d1f1      	bne.n	800d718 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800d734:	f7ff fbd0 	bl	800ced8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d738:	f7fa fd94 	bl	8008264 <HAL_GetTick>
 800d73c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800d73e:	e008      	b.n	800d752 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d740:	f7fa fd90 	bl	8008264 <HAL_GetTick>
 800d744:	4602      	mov	r2, r0
 800d746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d748:	1ad3      	subs	r3, r2, r3
 800d74a:	2b02      	cmp	r3, #2
 800d74c:	d901      	bls.n	800d752 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800d74e:	2303      	movs	r3, #3
 800d750:	e183      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800d752:	f7ff fbd2 	bl	800cefa <LL_RCC_LSI1_IsReady>
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d1f1      	bne.n	800d740 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f003 0304 	and.w	r3, r3, #4
 800d764:	2b00      	cmp	r3, #0
 800d766:	d05b      	beq.n	800d820 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d768:	4ba7      	ldr	r3, [pc, #668]	; (800da08 <HAL_RCC_OscConfig+0x688>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d770:	2b00      	cmp	r3, #0
 800d772:	d114      	bne.n	800d79e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d774:	f7ff fa60 	bl	800cc38 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d778:	f7fa fd74 	bl	8008264 <HAL_GetTick>
 800d77c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d77e:	e008      	b.n	800d792 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d780:	f7fa fd70 	bl	8008264 <HAL_GetTick>
 800d784:	4602      	mov	r2, r0
 800d786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d788:	1ad3      	subs	r3, r2, r3
 800d78a:	2b02      	cmp	r3, #2
 800d78c:	d901      	bls.n	800d792 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800d78e:	2303      	movs	r3, #3
 800d790:	e163      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d792:	4b9d      	ldr	r3, [pc, #628]	; (800da08 <HAL_RCC_OscConfig+0x688>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d0f0      	beq.n	800d780 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	689b      	ldr	r3, [r3, #8]
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d102      	bne.n	800d7ac <HAL_RCC_OscConfig+0x42c>
 800d7a6:	f7ff fb30 	bl	800ce0a <LL_RCC_LSE_Enable>
 800d7aa:	e00c      	b.n	800d7c6 <HAL_RCC_OscConfig+0x446>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	2b05      	cmp	r3, #5
 800d7b2:	d104      	bne.n	800d7be <HAL_RCC_OscConfig+0x43e>
 800d7b4:	f7ff fb4b 	bl	800ce4e <LL_RCC_LSE_EnableBypass>
 800d7b8:	f7ff fb27 	bl	800ce0a <LL_RCC_LSE_Enable>
 800d7bc:	e003      	b.n	800d7c6 <HAL_RCC_OscConfig+0x446>
 800d7be:	f7ff fb35 	bl	800ce2c <LL_RCC_LSE_Disable>
 800d7c2:	f7ff fb55 	bl	800ce70 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	689b      	ldr	r3, [r3, #8]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d014      	beq.n	800d7f8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d7ce:	f7fa fd49 	bl	8008264 <HAL_GetTick>
 800d7d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800d7d4:	e00a      	b.n	800d7ec <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d7d6:	f7fa fd45 	bl	8008264 <HAL_GetTick>
 800d7da:	4602      	mov	r2, r0
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7de:	1ad3      	subs	r3, r2, r3
 800d7e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d901      	bls.n	800d7ec <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800d7e8:	2303      	movs	r3, #3
 800d7ea:	e136      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800d7ec:	f7ff fb51 	bl	800ce92 <LL_RCC_LSE_IsReady>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d0ef      	beq.n	800d7d6 <HAL_RCC_OscConfig+0x456>
 800d7f6:	e013      	b.n	800d820 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d7f8:	f7fa fd34 	bl	8008264 <HAL_GetTick>
 800d7fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800d7fe:	e00a      	b.n	800d816 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d800:	f7fa fd30 	bl	8008264 <HAL_GetTick>
 800d804:	4602      	mov	r2, r0
 800d806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d808:	1ad3      	subs	r3, r2, r3
 800d80a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d80e:	4293      	cmp	r3, r2
 800d810:	d901      	bls.n	800d816 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800d812:	2303      	movs	r3, #3
 800d814:	e121      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800d816:	f7ff fb3c 	bl	800ce92 <LL_RCC_LSE_IsReady>
 800d81a:	4603      	mov	r3, r0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d1ef      	bne.n	800d800 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d02c      	beq.n	800d886 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d830:	2b00      	cmp	r3, #0
 800d832:	d014      	beq.n	800d85e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d834:	f7ff fab5 	bl	800cda2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d838:	f7fa fd14 	bl	8008264 <HAL_GetTick>
 800d83c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800d83e:	e008      	b.n	800d852 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d840:	f7fa fd10 	bl	8008264 <HAL_GetTick>
 800d844:	4602      	mov	r2, r0
 800d846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d848:	1ad3      	subs	r3, r2, r3
 800d84a:	2b02      	cmp	r3, #2
 800d84c:	d901      	bls.n	800d852 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800d84e:	2303      	movs	r3, #3
 800d850:	e103      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800d852:	f7ff fac8 	bl	800cde6 <LL_RCC_HSI48_IsReady>
 800d856:	4603      	mov	r3, r0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d0f1      	beq.n	800d840 <HAL_RCC_OscConfig+0x4c0>
 800d85c:	e013      	b.n	800d886 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d85e:	f7ff fab1 	bl	800cdc4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d862:	f7fa fcff 	bl	8008264 <HAL_GetTick>
 800d866:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800d868:	e008      	b.n	800d87c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d86a:	f7fa fcfb 	bl	8008264 <HAL_GetTick>
 800d86e:	4602      	mov	r2, r0
 800d870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d872:	1ad3      	subs	r3, r2, r3
 800d874:	2b02      	cmp	r3, #2
 800d876:	d901      	bls.n	800d87c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800d878:	2303      	movs	r3, #3
 800d87a:	e0ee      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800d87c:	f7ff fab3 	bl	800cde6 <LL_RCC_HSI48_IsReady>
 800d880:	4603      	mov	r3, r0
 800d882:	2b00      	cmp	r3, #0
 800d884:	d1f1      	bne.n	800d86a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	f000 80e4 	beq.w	800da58 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d890:	f7ff fc11 	bl	800d0b6 <LL_RCC_GetSysClkSource>
 800d894:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800d896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d89a:	68db      	ldr	r3, [r3, #12]
 800d89c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a2:	2b02      	cmp	r3, #2
 800d8a4:	f040 80b4 	bne.w	800da10 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f003 0203 	and.w	r2, r3, #3
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d123      	bne.n	800d8fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d11c      	bne.n	800d8fe <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	0a1b      	lsrs	r3, r3, #8
 800d8c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d114      	bne.n	800d8fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d10d      	bne.n	800d8fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d106      	bne.n	800d8fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d05d      	beq.n	800d9ba <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	2b0c      	cmp	r3, #12
 800d902:	d058      	beq.n	800d9b6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800d904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d001      	beq.n	800d916 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800d912:	2301      	movs	r3, #1
 800d914:	e0a1      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800d916:	f7ff fc84 	bl	800d222 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d91a:	f7fa fca3 	bl	8008264 <HAL_GetTick>
 800d91e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d920:	e008      	b.n	800d934 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d922:	f7fa fc9f 	bl	8008264 <HAL_GetTick>
 800d926:	4602      	mov	r2, r0
 800d928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92a:	1ad3      	subs	r3, r2, r3
 800d92c:	2b02      	cmp	r3, #2
 800d92e:	d901      	bls.n	800d934 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800d930:	2303      	movs	r3, #3
 800d932:	e092      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d1ef      	bne.n	800d922 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d946:	68da      	ldr	r2, [r3, #12]
 800d948:	4b30      	ldr	r3, [pc, #192]	; (800da0c <HAL_RCC_OscConfig+0x68c>)
 800d94a:	4013      	ands	r3, r2
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d954:	4311      	orrs	r1, r2
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d95a:	0212      	lsls	r2, r2, #8
 800d95c:	4311      	orrs	r1, r2
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d962:	4311      	orrs	r1, r2
 800d964:	687a      	ldr	r2, [r7, #4]
 800d966:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d968:	4311      	orrs	r1, r2
 800d96a:	687a      	ldr	r2, [r7, #4]
 800d96c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d96e:	430a      	orrs	r2, r1
 800d970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d974:	4313      	orrs	r3, r2
 800d976:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800d978:	f7ff fc44 	bl	800d204 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d97c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d980:	68db      	ldr	r3, [r3, #12]
 800d982:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d98a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d98c:	f7fa fc6a 	bl	8008264 <HAL_GetTick>
 800d990:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d992:	e008      	b.n	800d9a6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d994:	f7fa fc66 	bl	8008264 <HAL_GetTick>
 800d998:	4602      	mov	r2, r0
 800d99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99c:	1ad3      	subs	r3, r2, r3
 800d99e:	2b02      	cmp	r3, #2
 800d9a0:	d901      	bls.n	800d9a6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800d9a2:	2303      	movs	r3, #3
 800d9a4:	e059      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d9a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d0ef      	beq.n	800d994 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d9b4:	e050      	b.n	800da58 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e04f      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d9ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d147      	bne.n	800da58 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800d9c8:	f7ff fc1c 	bl	800d204 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d9cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9d0:	68db      	ldr	r3, [r3, #12]
 800d9d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d9d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d9dc:	f7fa fc42 	bl	8008264 <HAL_GetTick>
 800d9e0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d9e2:	e008      	b.n	800d9f6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d9e4:	f7fa fc3e 	bl	8008264 <HAL_GetTick>
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ec:	1ad3      	subs	r3, r2, r3
 800d9ee:	2b02      	cmp	r3, #2
 800d9f0:	d901      	bls.n	800d9f6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800d9f2:	2303      	movs	r3, #3
 800d9f4:	e031      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d9f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da00:	2b00      	cmp	r3, #0
 800da02:	d0ef      	beq.n	800d9e4 <HAL_RCC_OscConfig+0x664>
 800da04:	e028      	b.n	800da58 <HAL_RCC_OscConfig+0x6d8>
 800da06:	bf00      	nop
 800da08:	58000400 	.word	0x58000400
 800da0c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	2b0c      	cmp	r3, #12
 800da14:	d01e      	beq.n	800da54 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800da16:	f7ff fc04 	bl	800d222 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da1a:	f7fa fc23 	bl	8008264 <HAL_GetTick>
 800da1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800da20:	e008      	b.n	800da34 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800da22:	f7fa fc1f 	bl	8008264 <HAL_GetTick>
 800da26:	4602      	mov	r2, r0
 800da28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2a:	1ad3      	subs	r3, r2, r3
 800da2c:	2b02      	cmp	r3, #2
 800da2e:	d901      	bls.n	800da34 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800da30:	2303      	movs	r3, #3
 800da32:	e012      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800da34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d1ef      	bne.n	800da22 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800da42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da46:	68da      	ldr	r2, [r3, #12]
 800da48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800da4c:	4b05      	ldr	r3, [pc, #20]	; (800da64 <HAL_RCC_OscConfig+0x6e4>)
 800da4e:	4013      	ands	r3, r2
 800da50:	60cb      	str	r3, [r1, #12]
 800da52:	e001      	b.n	800da58 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800da54:	2301      	movs	r3, #1
 800da56:	e000      	b.n	800da5a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800da58:	2300      	movs	r3, #0
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3734      	adds	r7, #52	; 0x34
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd90      	pop	{r4, r7, pc}
 800da62:	bf00      	nop
 800da64:	eefefffc 	.word	0xeefefffc

0800da68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d101      	bne.n	800da7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800da78:	2301      	movs	r3, #1
 800da7a:	e12d      	b.n	800dcd8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800da7c:	4b98      	ldr	r3, [pc, #608]	; (800dce0 <HAL_RCC_ClockConfig+0x278>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f003 0307 	and.w	r3, r3, #7
 800da84:	683a      	ldr	r2, [r7, #0]
 800da86:	429a      	cmp	r2, r3
 800da88:	d91b      	bls.n	800dac2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da8a:	4b95      	ldr	r3, [pc, #596]	; (800dce0 <HAL_RCC_ClockConfig+0x278>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f023 0207 	bic.w	r2, r3, #7
 800da92:	4993      	ldr	r1, [pc, #588]	; (800dce0 <HAL_RCC_ClockConfig+0x278>)
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	4313      	orrs	r3, r2
 800da98:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da9a:	f7fa fbe3 	bl	8008264 <HAL_GetTick>
 800da9e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800daa0:	e008      	b.n	800dab4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800daa2:	f7fa fbdf 	bl	8008264 <HAL_GetTick>
 800daa6:	4602      	mov	r2, r0
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	1ad3      	subs	r3, r2, r3
 800daac:	2b02      	cmp	r3, #2
 800daae:	d901      	bls.n	800dab4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800dab0:	2303      	movs	r3, #3
 800dab2:	e111      	b.n	800dcd8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dab4:	4b8a      	ldr	r3, [pc, #552]	; (800dce0 <HAL_RCC_ClockConfig+0x278>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f003 0307 	and.w	r3, r3, #7
 800dabc:	683a      	ldr	r2, [r7, #0]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d1ef      	bne.n	800daa2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f003 0302 	and.w	r3, r3, #2
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d016      	beq.n	800dafc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7ff fafb 	bl	800d0ce <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800dad8:	f7fa fbc4 	bl	8008264 <HAL_GetTick>
 800dadc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800dade:	e008      	b.n	800daf2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800dae0:	f7fa fbc0 	bl	8008264 <HAL_GetTick>
 800dae4:	4602      	mov	r2, r0
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	2b02      	cmp	r3, #2
 800daec:	d901      	bls.n	800daf2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800daee:	2303      	movs	r3, #3
 800daf0:	e0f2      	b.n	800dcd8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800daf2:	f7ff fbe8 	bl	800d2c6 <LL_RCC_IsActiveFlag_HPRE>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d0f1      	beq.n	800dae0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f003 0320 	and.w	r3, r3, #32
 800db04:	2b00      	cmp	r3, #0
 800db06:	d016      	beq.n	800db36 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	695b      	ldr	r3, [r3, #20]
 800db0c:	4618      	mov	r0, r3
 800db0e:	f7ff faf2 	bl	800d0f6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800db12:	f7fa fba7 	bl	8008264 <HAL_GetTick>
 800db16:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800db18:	e008      	b.n	800db2c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800db1a:	f7fa fba3 	bl	8008264 <HAL_GetTick>
 800db1e:	4602      	mov	r2, r0
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	1ad3      	subs	r3, r2, r3
 800db24:	2b02      	cmp	r3, #2
 800db26:	d901      	bls.n	800db2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800db28:	2303      	movs	r3, #3
 800db2a:	e0d5      	b.n	800dcd8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800db2c:	f7ff fbdd 	bl	800d2ea <LL_RCC_IsActiveFlag_C2HPRE>
 800db30:	4603      	mov	r3, r0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d0f1      	beq.n	800db1a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d016      	beq.n	800db70 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	699b      	ldr	r3, [r3, #24]
 800db46:	4618      	mov	r0, r3
 800db48:	f7ff faeb 	bl	800d122 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800db4c:	f7fa fb8a 	bl	8008264 <HAL_GetTick>
 800db50:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800db52:	e008      	b.n	800db66 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800db54:	f7fa fb86 	bl	8008264 <HAL_GetTick>
 800db58:	4602      	mov	r2, r0
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	1ad3      	subs	r3, r2, r3
 800db5e:	2b02      	cmp	r3, #2
 800db60:	d901      	bls.n	800db66 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800db62:	2303      	movs	r3, #3
 800db64:	e0b8      	b.n	800dcd8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800db66:	f7ff fbd3 	bl	800d310 <LL_RCC_IsActiveFlag_SHDHPRE>
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d0f1      	beq.n	800db54 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f003 0304 	and.w	r3, r3, #4
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d016      	beq.n	800dbaa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	4618      	mov	r0, r3
 800db82:	f7ff fae5 	bl	800d150 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800db86:	f7fa fb6d 	bl	8008264 <HAL_GetTick>
 800db8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800db8c:	e008      	b.n	800dba0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800db8e:	f7fa fb69 	bl	8008264 <HAL_GetTick>
 800db92:	4602      	mov	r2, r0
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	1ad3      	subs	r3, r2, r3
 800db98:	2b02      	cmp	r3, #2
 800db9a:	d901      	bls.n	800dba0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800db9c:	2303      	movs	r3, #3
 800db9e:	e09b      	b.n	800dcd8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800dba0:	f7ff fbc9 	bl	800d336 <LL_RCC_IsActiveFlag_PPRE1>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d0f1      	beq.n	800db8e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f003 0308 	and.w	r3, r3, #8
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d017      	beq.n	800dbe6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	691b      	ldr	r3, [r3, #16]
 800dbba:	00db      	lsls	r3, r3, #3
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f7ff fadb 	bl	800d178 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800dbc2:	f7fa fb4f 	bl	8008264 <HAL_GetTick>
 800dbc6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800dbc8:	e008      	b.n	800dbdc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800dbca:	f7fa fb4b 	bl	8008264 <HAL_GetTick>
 800dbce:	4602      	mov	r2, r0
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	1ad3      	subs	r3, r2, r3
 800dbd4:	2b02      	cmp	r3, #2
 800dbd6:	d901      	bls.n	800dbdc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800dbd8:	2303      	movs	r3, #3
 800dbda:	e07d      	b.n	800dcd8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800dbdc:	f7ff fbbd 	bl	800d35a <LL_RCC_IsActiveFlag_PPRE2>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d0f1      	beq.n	800dbca <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f003 0301 	and.w	r3, r3, #1
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d043      	beq.n	800dc7a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	d106      	bne.n	800dc08 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800dbfa:	f7ff f87b 	bl	800ccf4 <LL_RCC_HSE_IsReady>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d11e      	bne.n	800dc42 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800dc04:	2301      	movs	r3, #1
 800dc06:	e067      	b.n	800dcd8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	685b      	ldr	r3, [r3, #4]
 800dc0c:	2b03      	cmp	r3, #3
 800dc0e:	d106      	bne.n	800dc1e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800dc10:	f7ff fb16 	bl	800d240 <LL_RCC_PLL_IsReady>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d113      	bne.n	800dc42 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	e05c      	b.n	800dcd8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d106      	bne.n	800dc34 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800dc26:	f7ff f9e3 	bl	800cff0 <LL_RCC_MSI_IsReady>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d108      	bne.n	800dc42 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800dc30:	2301      	movs	r3, #1
 800dc32:	e051      	b.n	800dcd8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800dc34:	f7ff f88e 	bl	800cd54 <LL_RCC_HSI_IsReady>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d101      	bne.n	800dc42 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	e04a      	b.n	800dcd8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7ff fa21 	bl	800d08e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc4c:	f7fa fb0a 	bl	8008264 <HAL_GetTick>
 800dc50:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc52:	e00a      	b.n	800dc6a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dc54:	f7fa fb06 	bl	8008264 <HAL_GetTick>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	1ad3      	subs	r3, r2, r3
 800dc5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d901      	bls.n	800dc6a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800dc66:	2303      	movs	r3, #3
 800dc68:	e036      	b.n	800dcd8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc6a:	f7ff fa24 	bl	800d0b6 <LL_RCC_GetSysClkSource>
 800dc6e:	4602      	mov	r2, r0
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	009b      	lsls	r3, r3, #2
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d1ec      	bne.n	800dc54 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dc7a:	4b19      	ldr	r3, [pc, #100]	; (800dce0 <HAL_RCC_ClockConfig+0x278>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f003 0307 	and.w	r3, r3, #7
 800dc82:	683a      	ldr	r2, [r7, #0]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d21b      	bcs.n	800dcc0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc88:	4b15      	ldr	r3, [pc, #84]	; (800dce0 <HAL_RCC_ClockConfig+0x278>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f023 0207 	bic.w	r2, r3, #7
 800dc90:	4913      	ldr	r1, [pc, #76]	; (800dce0 <HAL_RCC_ClockConfig+0x278>)
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	4313      	orrs	r3, r2
 800dc96:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc98:	f7fa fae4 	bl	8008264 <HAL_GetTick>
 800dc9c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc9e:	e008      	b.n	800dcb2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800dca0:	f7fa fae0 	bl	8008264 <HAL_GetTick>
 800dca4:	4602      	mov	r2, r0
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	1ad3      	subs	r3, r2, r3
 800dcaa:	2b02      	cmp	r3, #2
 800dcac:	d901      	bls.n	800dcb2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800dcae:	2303      	movs	r3, #3
 800dcb0:	e012      	b.n	800dcd8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcb2:	4b0b      	ldr	r3, [pc, #44]	; (800dce0 <HAL_RCC_ClockConfig+0x278>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f003 0307 	and.w	r3, r3, #7
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d1ef      	bne.n	800dca0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800dcc0:	f000 f87e 	bl	800ddc0 <HAL_RCC_GetHCLKFreq>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	4a07      	ldr	r2, [pc, #28]	; (800dce4 <HAL_RCC_ClockConfig+0x27c>)
 800dcc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800dcca:	f7fa fad7 	bl	800827c <HAL_GetTickPrio>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7fa fa79 	bl	80081c8 <HAL_InitTick>
 800dcd6:	4603      	mov	r3, r0
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3710      	adds	r7, #16
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}
 800dce0:	58004000 	.word	0x58004000
 800dce4:	2000002c 	.word	0x2000002c

0800dce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dce8:	b590      	push	{r4, r7, lr}
 800dcea:	b085      	sub	sp, #20
 800dcec:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dcee:	f7ff f9e2 	bl	800d0b6 <LL_RCC_GetSysClkSource>
 800dcf2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d10a      	bne.n	800dd10 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800dcfa:	f7ff f99e 	bl	800d03a <LL_RCC_MSI_GetRange>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	091b      	lsrs	r3, r3, #4
 800dd02:	f003 030f 	and.w	r3, r3, #15
 800dd06:	4a2b      	ldr	r2, [pc, #172]	; (800ddb4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800dd08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd0c:	60fb      	str	r3, [r7, #12]
 800dd0e:	e04b      	b.n	800dda8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2b04      	cmp	r3, #4
 800dd14:	d102      	bne.n	800dd1c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800dd16:	4b28      	ldr	r3, [pc, #160]	; (800ddb8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800dd18:	60fb      	str	r3, [r7, #12]
 800dd1a:	e045      	b.n	800dda8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2b08      	cmp	r3, #8
 800dd20:	d10a      	bne.n	800dd38 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800dd22:	f7fe ffb7 	bl	800cc94 <LL_RCC_HSE_IsEnabledDiv2>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d102      	bne.n	800dd32 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800dd2c:	4b22      	ldr	r3, [pc, #136]	; (800ddb8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800dd2e:	60fb      	str	r3, [r7, #12]
 800dd30:	e03a      	b.n	800dda8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800dd32:	4b22      	ldr	r3, [pc, #136]	; (800ddbc <HAL_RCC_GetSysClockFreq+0xd4>)
 800dd34:	60fb      	str	r3, [r7, #12]
 800dd36:	e037      	b.n	800dda8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800dd38:	f7ff fab9 	bl	800d2ae <LL_RCC_PLL_GetMainSource>
 800dd3c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	d003      	beq.n	800dd4c <HAL_RCC_GetSysClockFreq+0x64>
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	2b03      	cmp	r3, #3
 800dd48:	d003      	beq.n	800dd52 <HAL_RCC_GetSysClockFreq+0x6a>
 800dd4a:	e00d      	b.n	800dd68 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800dd4c:	4b1a      	ldr	r3, [pc, #104]	; (800ddb8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800dd4e:	60bb      	str	r3, [r7, #8]
        break;
 800dd50:	e015      	b.n	800dd7e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800dd52:	f7fe ff9f 	bl	800cc94 <LL_RCC_HSE_IsEnabledDiv2>
 800dd56:	4603      	mov	r3, r0
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d102      	bne.n	800dd62 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800dd5c:	4b16      	ldr	r3, [pc, #88]	; (800ddb8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800dd5e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800dd60:	e00d      	b.n	800dd7e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800dd62:	4b16      	ldr	r3, [pc, #88]	; (800ddbc <HAL_RCC_GetSysClockFreq+0xd4>)
 800dd64:	60bb      	str	r3, [r7, #8]
        break;
 800dd66:	e00a      	b.n	800dd7e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800dd68:	f7ff f967 	bl	800d03a <LL_RCC_MSI_GetRange>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	091b      	lsrs	r3, r3, #4
 800dd70:	f003 030f 	and.w	r3, r3, #15
 800dd74:	4a0f      	ldr	r2, [pc, #60]	; (800ddb4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800dd76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd7a:	60bb      	str	r3, [r7, #8]
        break;
 800dd7c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800dd7e:	f7ff fa71 	bl	800d264 <LL_RCC_PLL_GetN>
 800dd82:	4602      	mov	r2, r0
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	fb03 f402 	mul.w	r4, r3, r2
 800dd8a:	f7ff fa84 	bl	800d296 <LL_RCC_PLL_GetDivider>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	091b      	lsrs	r3, r3, #4
 800dd92:	3301      	adds	r3, #1
 800dd94:	fbb4 f4f3 	udiv	r4, r4, r3
 800dd98:	f7ff fa71 	bl	800d27e <LL_RCC_PLL_GetR>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	0f5b      	lsrs	r3, r3, #29
 800dda0:	3301      	adds	r3, #1
 800dda2:	fbb4 f3f3 	udiv	r3, r4, r3
 800dda6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800dda8:	68fb      	ldr	r3, [r7, #12]
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3714      	adds	r7, #20
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd90      	pop	{r4, r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	08023824 	.word	0x08023824
 800ddb8:	00f42400 	.word	0x00f42400
 800ddbc:	01e84800 	.word	0x01e84800

0800ddc0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ddc0:	b598      	push	{r3, r4, r7, lr}
 800ddc2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ddc4:	f7ff ff90 	bl	800dce8 <HAL_RCC_GetSysClockFreq>
 800ddc8:	4604      	mov	r4, r0
 800ddca:	f7ff f9e9 	bl	800d1a0 <LL_RCC_GetAHBPrescaler>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	091b      	lsrs	r3, r3, #4
 800ddd2:	f003 030f 	and.w	r3, r3, #15
 800ddd6:	4a03      	ldr	r2, [pc, #12]	; (800dde4 <HAL_RCC_GetHCLKFreq+0x24>)
 800ddd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dddc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	bd98      	pop	{r3, r4, r7, pc}
 800dde4:	080237c4 	.word	0x080237c4

0800dde8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dde8:	b598      	push	{r3, r4, r7, lr}
 800ddea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800ddec:	f7ff ffe8 	bl	800ddc0 <HAL_RCC_GetHCLKFreq>
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	f7ff f9ef 	bl	800d1d4 <LL_RCC_GetAPB1Prescaler>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	0a1b      	lsrs	r3, r3, #8
 800ddfa:	f003 0307 	and.w	r3, r3, #7
 800ddfe:	4a04      	ldr	r2, [pc, #16]	; (800de10 <HAL_RCC_GetPCLK1Freq+0x28>)
 800de00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de04:	f003 031f 	and.w	r3, r3, #31
 800de08:	fa24 f303 	lsr.w	r3, r4, r3
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	bd98      	pop	{r3, r4, r7, pc}
 800de10:	08023804 	.word	0x08023804

0800de14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800de14:	b598      	push	{r3, r4, r7, lr}
 800de16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800de18:	f7ff ffd2 	bl	800ddc0 <HAL_RCC_GetHCLKFreq>
 800de1c:	4604      	mov	r4, r0
 800de1e:	f7ff f9e5 	bl	800d1ec <LL_RCC_GetAPB2Prescaler>
 800de22:	4603      	mov	r3, r0
 800de24:	0adb      	lsrs	r3, r3, #11
 800de26:	f003 0307 	and.w	r3, r3, #7
 800de2a:	4a04      	ldr	r2, [pc, #16]	; (800de3c <HAL_RCC_GetPCLK2Freq+0x28>)
 800de2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de30:	f003 031f 	and.w	r3, r3, #31
 800de34:	fa24 f303 	lsr.w	r3, r4, r3
}
 800de38:	4618      	mov	r0, r3
 800de3a:	bd98      	pop	{r3, r4, r7, pc}
 800de3c:	08023804 	.word	0x08023804

0800de40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800de40:	b590      	push	{r4, r7, lr}
 800de42:	b085      	sub	sp, #20
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2bb0      	cmp	r3, #176	; 0xb0
 800de4c:	d903      	bls.n	800de56 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800de4e:	4b15      	ldr	r3, [pc, #84]	; (800dea4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800de50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de52:	60fb      	str	r3, [r7, #12]
 800de54:	e007      	b.n	800de66 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	091b      	lsrs	r3, r3, #4
 800de5a:	f003 030f 	and.w	r3, r3, #15
 800de5e:	4a11      	ldr	r2, [pc, #68]	; (800dea4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800de60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de64:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800de66:	f7ff f9a7 	bl	800d1b8 <LL_RCC_GetAHB4Prescaler>
 800de6a:	4603      	mov	r3, r0
 800de6c:	091b      	lsrs	r3, r3, #4
 800de6e:	f003 030f 	and.w	r3, r3, #15
 800de72:	4a0d      	ldr	r2, [pc, #52]	; (800dea8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800de74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de78:	68fa      	ldr	r2, [r7, #12]
 800de7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800de7e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	4a0a      	ldr	r2, [pc, #40]	; (800deac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800de84:	fba2 2303 	umull	r2, r3, r2, r3
 800de88:	0c9c      	lsrs	r4, r3, #18
 800de8a:	f7fe fee5 	bl	800cc58 <HAL_PWREx_GetVoltageRange>
 800de8e:	4603      	mov	r3, r0
 800de90:	4619      	mov	r1, r3
 800de92:	4620      	mov	r0, r4
 800de94:	f000 f80c 	bl	800deb0 <RCC_SetFlashLatency>
 800de98:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3714      	adds	r7, #20
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd90      	pop	{r4, r7, pc}
 800dea2:	bf00      	nop
 800dea4:	08023824 	.word	0x08023824
 800dea8:	080237c4 	.word	0x080237c4
 800deac:	431bde83 	.word	0x431bde83

0800deb0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800deb0:	b590      	push	{r4, r7, lr}
 800deb2:	b093      	sub	sp, #76	; 0x4c
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800deba:	4b37      	ldr	r3, [pc, #220]	; (800df98 <RCC_SetFlashLatency+0xe8>)
 800debc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800dec0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dec2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800dec6:	4a35      	ldr	r2, [pc, #212]	; (800df9c <RCC_SetFlashLatency+0xec>)
 800dec8:	f107 031c 	add.w	r3, r7, #28
 800decc:	ca07      	ldmia	r2, {r0, r1, r2}
 800dece:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800ded2:	4b33      	ldr	r3, [pc, #204]	; (800dfa0 <RCC_SetFlashLatency+0xf0>)
 800ded4:	f107 040c 	add.w	r4, r7, #12
 800ded8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800deda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800dede:	2300      	movs	r3, #0
 800dee0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dee8:	d11a      	bne.n	800df20 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800deea:	2300      	movs	r3, #0
 800deec:	643b      	str	r3, [r7, #64]	; 0x40
 800deee:	e013      	b.n	800df18 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800def0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	3348      	adds	r3, #72	; 0x48
 800def6:	443b      	add	r3, r7
 800def8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800defc:	687a      	ldr	r2, [r7, #4]
 800defe:	429a      	cmp	r2, r3
 800df00:	d807      	bhi.n	800df12 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800df02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	3348      	adds	r3, #72	; 0x48
 800df08:	443b      	add	r3, r7
 800df0a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800df0e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800df10:	e020      	b.n	800df54 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800df12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df14:	3301      	adds	r3, #1
 800df16:	643b      	str	r3, [r7, #64]	; 0x40
 800df18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df1a:	2b03      	cmp	r3, #3
 800df1c:	d9e8      	bls.n	800def0 <RCC_SetFlashLatency+0x40>
 800df1e:	e019      	b.n	800df54 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800df20:	2300      	movs	r3, #0
 800df22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df24:	e013      	b.n	800df4e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800df26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	3348      	adds	r3, #72	; 0x48
 800df2c:	443b      	add	r3, r7
 800df2e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	429a      	cmp	r2, r3
 800df36:	d807      	bhi.n	800df48 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800df38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df3a:	009b      	lsls	r3, r3, #2
 800df3c:	3348      	adds	r3, #72	; 0x48
 800df3e:	443b      	add	r3, r7
 800df40:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800df44:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800df46:	e005      	b.n	800df54 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800df48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df4a:	3301      	adds	r3, #1
 800df4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df50:	2b02      	cmp	r3, #2
 800df52:	d9e8      	bls.n	800df26 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800df54:	4b13      	ldr	r3, [pc, #76]	; (800dfa4 <RCC_SetFlashLatency+0xf4>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f023 0207 	bic.w	r2, r3, #7
 800df5c:	4911      	ldr	r1, [pc, #68]	; (800dfa4 <RCC_SetFlashLatency+0xf4>)
 800df5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df60:	4313      	orrs	r3, r2
 800df62:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800df64:	f7fa f97e 	bl	8008264 <HAL_GetTick>
 800df68:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800df6a:	e008      	b.n	800df7e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800df6c:	f7fa f97a 	bl	8008264 <HAL_GetTick>
 800df70:	4602      	mov	r2, r0
 800df72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	2b02      	cmp	r3, #2
 800df78:	d901      	bls.n	800df7e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800df7a:	2303      	movs	r3, #3
 800df7c:	e007      	b.n	800df8e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800df7e:	4b09      	ldr	r3, [pc, #36]	; (800dfa4 <RCC_SetFlashLatency+0xf4>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f003 0307 	and.w	r3, r3, #7
 800df86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df88:	429a      	cmp	r2, r3
 800df8a:	d1ef      	bne.n	800df6c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800df8c:	2300      	movs	r3, #0
}
 800df8e:	4618      	mov	r0, r3
 800df90:	374c      	adds	r7, #76	; 0x4c
 800df92:	46bd      	mov	sp, r7
 800df94:	bd90      	pop	{r4, r7, pc}
 800df96:	bf00      	nop
 800df98:	08021a20 	.word	0x08021a20
 800df9c:	08021a30 	.word	0x08021a30
 800dfa0:	08021a3c 	.word	0x08021a3c
 800dfa4:	58004000 	.word	0x58004000

0800dfa8 <LL_RCC_LSE_IsEnabled>:
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800dfac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dfb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfb4:	f003 0301 	and.w	r3, r3, #1
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d101      	bne.n	800dfc0 <LL_RCC_LSE_IsEnabled+0x18>
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e000      	b.n	800dfc2 <LL_RCC_LSE_IsEnabled+0x1a>
 800dfc0:	2300      	movs	r3, #0
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <LL_RCC_LSE_IsReady>:
{
 800dfcc:	b480      	push	{r7}
 800dfce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800dfd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dfd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfd8:	f003 0302 	and.w	r3, r3, #2
 800dfdc:	2b02      	cmp	r3, #2
 800dfde:	d101      	bne.n	800dfe4 <LL_RCC_LSE_IsReady+0x18>
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	e000      	b.n	800dfe6 <LL_RCC_LSE_IsReady+0x1a>
 800dfe4:	2300      	movs	r3, #0
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfee:	4770      	bx	lr

0800dff0 <LL_RCC_MSI_EnablePLLMode>:
{
 800dff0:	b480      	push	{r7}
 800dff2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800dff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dffe:	f043 0304 	orr.w	r3, r3, #4
 800e002:	6013      	str	r3, [r2, #0]
}
 800e004:	bf00      	nop
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr

0800e00e <LL_RCC_SetRFWKPClockSource>:
{
 800e00e:	b480      	push	{r7}
 800e010:	b083      	sub	sp, #12
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800e016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e01a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e01e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	4313      	orrs	r3, r2
 800e02a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800e02e:	bf00      	nop
 800e030:	370c      	adds	r7, #12
 800e032:	46bd      	mov	sp, r7
 800e034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e038:	4770      	bx	lr

0800e03a <LL_RCC_SetSMPSClockSource>:
{
 800e03a:	b480      	push	{r7}
 800e03c:	b083      	sub	sp, #12
 800e03e:	af00      	add	r7, sp, #0
 800e040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800e042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e048:	f023 0203 	bic.w	r2, r3, #3
 800e04c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	4313      	orrs	r3, r2
 800e054:	624b      	str	r3, [r1, #36]	; 0x24
}
 800e056:	bf00      	nop
 800e058:	370c      	adds	r7, #12
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <LL_RCC_SetSMPSPrescaler>:
{
 800e062:	b480      	push	{r7}
 800e064:	b083      	sub	sp, #12
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800e06a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e070:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e074:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	4313      	orrs	r3, r2
 800e07c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800e07e:	bf00      	nop
 800e080:	370c      	adds	r7, #12
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr

0800e08a <LL_RCC_SetUSARTClockSource>:
{
 800e08a:	b480      	push	{r7}
 800e08c:	b083      	sub	sp, #12
 800e08e:	af00      	add	r7, sp, #0
 800e090:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800e092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e09a:	f023 0203 	bic.w	r2, r3, #3
 800e09e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	4313      	orrs	r3, r2
 800e0a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800e0aa:	bf00      	nop
 800e0ac:	370c      	adds	r7, #12
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b4:	4770      	bx	lr

0800e0b6 <LL_RCC_SetLPUARTClockSource>:
{
 800e0b6:	b480      	push	{r7}
 800e0b8:	b083      	sub	sp, #12
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800e0be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e0c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e0ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	4313      	orrs	r3, r2
 800e0d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800e0d6:	bf00      	nop
 800e0d8:	370c      	adds	r7, #12
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e0:	4770      	bx	lr

0800e0e2 <LL_RCC_SetI2CClockSource>:
{
 800e0e2:	b480      	push	{r7}
 800e0e4:	b083      	sub	sp, #12
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800e0ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e0ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	091b      	lsrs	r3, r3, #4
 800e0f6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800e0fa:	43db      	mvns	r3, r3
 800e0fc:	401a      	ands	r2, r3
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	011b      	lsls	r3, r3, #4
 800e102:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800e106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e10a:	4313      	orrs	r3, r2
 800e10c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800e110:	bf00      	nop
 800e112:	370c      	adds	r7, #12
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr

0800e11c <LL_RCC_SetLPTIMClockSource>:
{
 800e11c:	b480      	push	{r7}
 800e11e:	b083      	sub	sp, #12
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800e124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e128:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	0c1b      	lsrs	r3, r3, #16
 800e130:	041b      	lsls	r3, r3, #16
 800e132:	43db      	mvns	r3, r3
 800e134:	401a      	ands	r2, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	041b      	lsls	r3, r3, #16
 800e13a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e13e:	4313      	orrs	r3, r2
 800e140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800e144:	bf00      	nop
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <LL_RCC_SetSAIClockSource>:
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800e158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e15c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e160:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	4313      	orrs	r3, r2
 800e16c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800e170:	bf00      	nop
 800e172:	370c      	adds	r7, #12
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr

0800e17c <LL_RCC_SetRNGClockSource>:
{
 800e17c:	b480      	push	{r7}
 800e17e:	b083      	sub	sp, #12
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800e184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e18c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800e190:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	4313      	orrs	r3, r2
 800e198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800e19c:	bf00      	nop
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <LL_RCC_SetCLK48ClockSource>:
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800e1b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e1b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e1bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800e1c8:	bf00      	nop
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <LL_RCC_SetUSBClockSource>:
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f7ff ffe3 	bl	800e1a8 <LL_RCC_SetCLK48ClockSource>
}
 800e1e2:	bf00      	nop
 800e1e4:	3708      	adds	r7, #8
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}

0800e1ea <LL_RCC_SetADCClockSource>:
{
 800e1ea:	b480      	push	{r7}
 800e1ec:	b083      	sub	sp, #12
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800e1f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e1f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e1fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	4313      	orrs	r3, r2
 800e206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800e20a:	bf00      	nop
 800e20c:	370c      	adds	r7, #12
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr

0800e216 <LL_RCC_SetRTCClockSource>:
{
 800e216:	b480      	push	{r7}
 800e218:	b083      	sub	sp, #12
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800e21e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e226:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e22a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	4313      	orrs	r3, r2
 800e232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800e236:	bf00      	nop
 800e238:	370c      	adds	r7, #12
 800e23a:	46bd      	mov	sp, r7
 800e23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e240:	4770      	bx	lr

0800e242 <LL_RCC_GetRTCClockSource>:
{
 800e242:	b480      	push	{r7}
 800e244:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800e246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e24a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e24e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800e252:	4618      	mov	r0, r3
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr

0800e25c <LL_RCC_ForceBackupDomainReset>:
{
 800e25c:	b480      	push	{r7}
 800e25e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800e260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e26c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800e274:	bf00      	nop
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr

0800e27e <LL_RCC_ReleaseBackupDomainReset>:
{
 800e27e:	b480      	push	{r7}
 800e280:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800e282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e28a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e28e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800e296:	bf00      	nop
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr

0800e2a0 <LL_RCC_PLLSAI1_Enable>:
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800e2a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e2ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e2b2:	6013      	str	r3, [r2, #0]
}
 800e2b4:	bf00      	nop
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr

0800e2be <LL_RCC_PLLSAI1_Disable>:
{
 800e2be:	b480      	push	{r7}
 800e2c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800e2c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e2cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e2d0:	6013      	str	r3, [r2, #0]
}
 800e2d2:	bf00      	nop
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr

0800e2dc <LL_RCC_PLLSAI1_IsReady>:
{
 800e2dc:	b480      	push	{r7}
 800e2de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800e2e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e2ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e2ee:	d101      	bne.n	800e2f4 <LL_RCC_PLLSAI1_IsReady+0x18>
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	e000      	b.n	800e2f6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800e2f4:	2300      	movs	r3, #0
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr

0800e300 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b088      	sub	sp, #32
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800e308:	2300      	movs	r3, #0
 800e30a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800e30c:	2300      	movs	r3, #0
 800e30e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d034      	beq.n	800e386 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e320:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800e324:	d021      	beq.n	800e36a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800e326:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800e32a:	d81b      	bhi.n	800e364 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e32c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e330:	d01d      	beq.n	800e36e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800e332:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e336:	d815      	bhi.n	800e364 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00b      	beq.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800e33c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e340:	d110      	bne.n	800e364 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800e342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e34c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e350:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800e352:	e00d      	b.n	800e370 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	3304      	adds	r3, #4
 800e358:	4618      	mov	r0, r3
 800e35a:	f000 f94d 	bl	800e5f8 <RCCEx_PLLSAI1_ConfigNP>
 800e35e:	4603      	mov	r3, r0
 800e360:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e362:	e005      	b.n	800e370 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800e364:	2301      	movs	r3, #1
 800e366:	77fb      	strb	r3, [r7, #31]
        break;
 800e368:	e002      	b.n	800e370 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800e36a:	bf00      	nop
 800e36c:	e000      	b.n	800e370 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800e36e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e370:	7ffb      	ldrb	r3, [r7, #31]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d105      	bne.n	800e382 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7ff fee8 	bl	800e150 <LL_RCC_SetSAIClockSource>
 800e380:	e001      	b.n	800e386 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e382:	7ffb      	ldrb	r3, [r7, #31]
 800e384:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d046      	beq.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800e392:	f7ff ff56 	bl	800e242 <LL_RCC_GetRTCClockSource>
 800e396:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e39c:	69ba      	ldr	r2, [r7, #24]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d03c      	beq.n	800e41c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800e3a2:	f7fe fc49 	bl	800cc38 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d105      	bne.n	800e3b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7ff ff30 	bl	800e216 <LL_RCC_SetRTCClockSource>
 800e3b6:	e02e      	b.n	800e416 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800e3b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e3bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3c0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800e3c2:	f7ff ff4b 	bl	800e25c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800e3c6:	f7ff ff5a 	bl	800e27e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800e3d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800e3e2:	f7ff fde1 	bl	800dfa8 <LL_RCC_LSE_IsEnabled>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d114      	bne.n	800e416 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e3ec:	f7f9 ff3a 	bl	8008264 <HAL_GetTick>
 800e3f0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800e3f2:	e00b      	b.n	800e40c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e3f4:	f7f9 ff36 	bl	8008264 <HAL_GetTick>
 800e3f8:	4602      	mov	r2, r0
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	1ad3      	subs	r3, r2, r3
 800e3fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800e402:	4293      	cmp	r3, r2
 800e404:	d902      	bls.n	800e40c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800e406:	2303      	movs	r3, #3
 800e408:	77fb      	strb	r3, [r7, #31]
              break;
 800e40a:	e004      	b.n	800e416 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800e40c:	f7ff fdde 	bl	800dfcc <LL_RCC_LSE_IsReady>
 800e410:	4603      	mov	r3, r0
 800e412:	2b01      	cmp	r3, #1
 800e414:	d1ee      	bne.n	800e3f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800e416:	7ffb      	ldrb	r3, [r7, #31]
 800e418:	77bb      	strb	r3, [r7, #30]
 800e41a:	e001      	b.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e41c:	7ffb      	ldrb	r3, [r7, #31]
 800e41e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f003 0301 	and.w	r3, r3, #1
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d004      	beq.n	800e436 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	699b      	ldr	r3, [r3, #24]
 800e430:	4618      	mov	r0, r3
 800e432:	f7ff fe2a 	bl	800e08a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f003 0302 	and.w	r3, r3, #2
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d004      	beq.n	800e44c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	69db      	ldr	r3, [r3, #28]
 800e446:	4618      	mov	r0, r3
 800e448:	f7ff fe35 	bl	800e0b6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f003 0310 	and.w	r3, r3, #16
 800e454:	2b00      	cmp	r3, #0
 800e456:	d004      	beq.n	800e462 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7ff fe5d 	bl	800e11c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f003 0320 	and.w	r3, r3, #32
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d004      	beq.n	800e478 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e472:	4618      	mov	r0, r3
 800e474:	f7ff fe52 	bl	800e11c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f003 0304 	and.w	r3, r3, #4
 800e480:	2b00      	cmp	r3, #0
 800e482:	d004      	beq.n	800e48e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6a1b      	ldr	r3, [r3, #32]
 800e488:	4618      	mov	r0, r3
 800e48a:	f7ff fe2a 	bl	800e0e2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f003 0308 	and.w	r3, r3, #8
 800e496:	2b00      	cmp	r3, #0
 800e498:	d004      	beq.n	800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7ff fe1f 	bl	800e0e2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d022      	beq.n	800e4f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7ff fe8d 	bl	800e1d4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4c2:	d107      	bne.n	800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800e4c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e4c8:	68db      	ldr	r3, [r3, #12]
 800e4ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e4ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e4d2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e4dc:	d10b      	bne.n	800e4f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	3304      	adds	r3, #4
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f000 f8e3 	bl	800e6ae <RCCEx_PLLSAI1_ConfigNQ>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800e4ec:	7ffb      	ldrb	r3, [r7, #31]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d001      	beq.n	800e4f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800e4f2:	7ffb      	ldrb	r3, [r7, #31]
 800e4f4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d02b      	beq.n	800e55a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e50a:	d008      	beq.n	800e51e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e514:	d003      	beq.n	800e51e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d105      	bne.n	800e52a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e522:	4618      	mov	r0, r3
 800e524:	f7ff fe2a 	bl	800e17c <LL_RCC_SetRNGClockSource>
 800e528:	e00a      	b.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e532:	60fb      	str	r3, [r7, #12]
 800e534:	2000      	movs	r0, #0
 800e536:	f7ff fe21 	bl	800e17c <LL_RCC_SetRNGClockSource>
 800e53a:	68f8      	ldr	r0, [r7, #12]
 800e53c:	f7ff fe34 	bl	800e1a8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e544:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800e548:	d107      	bne.n	800e55a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800e54a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e54e:	68db      	ldr	r3, [r3, #12]
 800e550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e554:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e558:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e562:	2b00      	cmp	r3, #0
 800e564:	d022      	beq.n	800e5ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7ff fe3d 	bl	800e1ea <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e578:	d107      	bne.n	800e58a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e57a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e588:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e58e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e592:	d10b      	bne.n	800e5ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	3304      	adds	r3, #4
 800e598:	4618      	mov	r0, r3
 800e59a:	f000 f8e3 	bl	800e764 <RCCEx_PLLSAI1_ConfigNR>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800e5a2:	7ffb      	ldrb	r3, [r7, #31]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d001      	beq.n	800e5ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800e5a8:	7ffb      	ldrb	r3, [r7, #31]
 800e5aa:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d004      	beq.n	800e5c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7ff fd26 	bl	800e00e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d009      	beq.n	800e5e2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7ff fd45 	bl	800e062 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f7ff fd2c 	bl	800e03a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800e5e2:	7fbb      	ldrb	r3, [r7, #30]
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3720      	adds	r7, #32
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800e5f0:	f7ff fcfe 	bl	800dff0 <LL_RCC_MSI_EnablePLLMode>
}
 800e5f4:	bf00      	nop
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e600:	2300      	movs	r3, #0
 800e602:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800e604:	f7ff fe5b 	bl	800e2be <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e608:	f7f9 fe2c 	bl	8008264 <HAL_GetTick>
 800e60c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e60e:	e009      	b.n	800e624 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e610:	f7f9 fe28 	bl	8008264 <HAL_GetTick>
 800e614:	4602      	mov	r2, r0
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	1ad3      	subs	r3, r2, r3
 800e61a:	2b02      	cmp	r3, #2
 800e61c:	d902      	bls.n	800e624 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800e61e:	2303      	movs	r3, #3
 800e620:	73fb      	strb	r3, [r7, #15]
      break;
 800e622:	e004      	b.n	800e62e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e624:	f7ff fe5a 	bl	800e2dc <LL_RCC_PLLSAI1_IsReady>
 800e628:	4603      	mov	r3, r0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d1f0      	bne.n	800e610 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800e62e:	7bfb      	ldrb	r3, [r7, #15]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d137      	bne.n	800e6a4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800e634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e638:	691b      	ldr	r3, [r3, #16]
 800e63a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	021b      	lsls	r3, r3, #8
 800e644:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e648:	4313      	orrs	r3, r2
 800e64a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800e64c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e650:	691b      	ldr	r3, [r3, #16]
 800e652:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e65e:	4313      	orrs	r3, r2
 800e660:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800e662:	f7ff fe1d 	bl	800e2a0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e666:	f7f9 fdfd 	bl	8008264 <HAL_GetTick>
 800e66a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e66c:	e009      	b.n	800e682 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e66e:	f7f9 fdf9 	bl	8008264 <HAL_GetTick>
 800e672:	4602      	mov	r2, r0
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	1ad3      	subs	r3, r2, r3
 800e678:	2b02      	cmp	r3, #2
 800e67a:	d902      	bls.n	800e682 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800e67c:	2303      	movs	r3, #3
 800e67e:	73fb      	strb	r3, [r7, #15]
        break;
 800e680:	e004      	b.n	800e68c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e682:	f7ff fe2b 	bl	800e2dc <LL_RCC_PLLSAI1_IsReady>
 800e686:	4603      	mov	r3, r0
 800e688:	2b01      	cmp	r3, #1
 800e68a:	d1f0      	bne.n	800e66e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800e68c:	7bfb      	ldrb	r3, [r7, #15]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d108      	bne.n	800e6a4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800e692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e696:	691a      	ldr	r2, [r3, #16]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	691b      	ldr	r3, [r3, #16]
 800e69c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800e6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3710      	adds	r7, #16
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800e6ae:	b580      	push	{r7, lr}
 800e6b0:	b084      	sub	sp, #16
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800e6ba:	f7ff fe00 	bl	800e2be <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e6be:	f7f9 fdd1 	bl	8008264 <HAL_GetTick>
 800e6c2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e6c4:	e009      	b.n	800e6da <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e6c6:	f7f9 fdcd 	bl	8008264 <HAL_GetTick>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	1ad3      	subs	r3, r2, r3
 800e6d0:	2b02      	cmp	r3, #2
 800e6d2:	d902      	bls.n	800e6da <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800e6d4:	2303      	movs	r3, #3
 800e6d6:	73fb      	strb	r3, [r7, #15]
      break;
 800e6d8:	e004      	b.n	800e6e4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e6da:	f7ff fdff 	bl	800e2dc <LL_RCC_PLLSAI1_IsReady>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d1f0      	bne.n	800e6c6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800e6e4:	7bfb      	ldrb	r3, [r7, #15]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d137      	bne.n	800e75a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800e6ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e6ee:	691b      	ldr	r3, [r3, #16]
 800e6f0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	021b      	lsls	r3, r3, #8
 800e6fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e6fe:	4313      	orrs	r3, r2
 800e700:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800e702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e706:	691b      	ldr	r3, [r3, #16]
 800e708:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	689b      	ldr	r3, [r3, #8]
 800e710:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e714:	4313      	orrs	r3, r2
 800e716:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800e718:	f7ff fdc2 	bl	800e2a0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e71c:	f7f9 fda2 	bl	8008264 <HAL_GetTick>
 800e720:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e722:	e009      	b.n	800e738 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e724:	f7f9 fd9e 	bl	8008264 <HAL_GetTick>
 800e728:	4602      	mov	r2, r0
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	1ad3      	subs	r3, r2, r3
 800e72e:	2b02      	cmp	r3, #2
 800e730:	d902      	bls.n	800e738 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800e732:	2303      	movs	r3, #3
 800e734:	73fb      	strb	r3, [r7, #15]
        break;
 800e736:	e004      	b.n	800e742 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e738:	f7ff fdd0 	bl	800e2dc <LL_RCC_PLLSAI1_IsReady>
 800e73c:	4603      	mov	r3, r0
 800e73e:	2b01      	cmp	r3, #1
 800e740:	d1f0      	bne.n	800e724 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800e742:	7bfb      	ldrb	r3, [r7, #15]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d108      	bne.n	800e75a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800e748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e74c:	691a      	ldr	r2, [r3, #16]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	691b      	ldr	r3, [r3, #16]
 800e752:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e756:	4313      	orrs	r3, r2
 800e758:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800e75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3710      	adds	r7, #16
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}

0800e764 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e76c:	2300      	movs	r3, #0
 800e76e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800e770:	f7ff fda5 	bl	800e2be <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e774:	f7f9 fd76 	bl	8008264 <HAL_GetTick>
 800e778:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e77a:	e009      	b.n	800e790 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e77c:	f7f9 fd72 	bl	8008264 <HAL_GetTick>
 800e780:	4602      	mov	r2, r0
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	1ad3      	subs	r3, r2, r3
 800e786:	2b02      	cmp	r3, #2
 800e788:	d902      	bls.n	800e790 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800e78a:	2303      	movs	r3, #3
 800e78c:	73fb      	strb	r3, [r7, #15]
      break;
 800e78e:	e004      	b.n	800e79a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e790:	f7ff fda4 	bl	800e2dc <LL_RCC_PLLSAI1_IsReady>
 800e794:	4603      	mov	r3, r0
 800e796:	2b00      	cmp	r3, #0
 800e798:	d1f0      	bne.n	800e77c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800e79a:	7bfb      	ldrb	r3, [r7, #15]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d137      	bne.n	800e810 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800e7a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e7a4:	691b      	ldr	r3, [r3, #16]
 800e7a6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	021b      	lsls	r3, r3, #8
 800e7b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e7b4:	4313      	orrs	r3, r2
 800e7b6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800e7b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e7bc:	691b      	ldr	r3, [r3, #16]
 800e7be:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	68db      	ldr	r3, [r3, #12]
 800e7c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800e7ce:	f7ff fd67 	bl	800e2a0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e7d2:	f7f9 fd47 	bl	8008264 <HAL_GetTick>
 800e7d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e7d8:	e009      	b.n	800e7ee <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e7da:	f7f9 fd43 	bl	8008264 <HAL_GetTick>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	1ad3      	subs	r3, r2, r3
 800e7e4:	2b02      	cmp	r3, #2
 800e7e6:	d902      	bls.n	800e7ee <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800e7e8:	2303      	movs	r3, #3
 800e7ea:	73fb      	strb	r3, [r7, #15]
        break;
 800e7ec:	e004      	b.n	800e7f8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e7ee:	f7ff fd75 	bl	800e2dc <LL_RCC_PLLSAI1_IsReady>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	2b01      	cmp	r3, #1
 800e7f6:	d1f0      	bne.n	800e7da <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800e7f8:	7bfb      	ldrb	r3, [r7, #15]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d108      	bne.n	800e810 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800e7fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e802:	691a      	ldr	r2, [r3, #16]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	691b      	ldr	r3, [r3, #16]
 800e808:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e80c:	4313      	orrs	r3, r2
 800e80e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800e810:	7bfb      	ldrb	r3, [r7, #15]
}
 800e812:	4618      	mov	r0, r3
 800e814:	3710      	adds	r7, #16
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
	...

0800e81c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d101      	bne.n	800e82e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800e82a:	2301      	movs	r3, #1
 800e82c:	e09f      	b.n	800e96e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e834:	b2db      	uxtb	r3, r3
 800e836:	2b00      	cmp	r3, #0
 800e838:	d106      	bne.n	800e848 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2200      	movs	r2, #0
 800e83e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7f5 f916 	bl	8003a74 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2202      	movs	r2, #2
 800e84c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800e850:	4b49      	ldr	r3, [pc, #292]	; (800e978 <HAL_RTC_Init+0x15c>)
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	f003 0310 	and.w	r3, r3, #16
 800e858:	2b10      	cmp	r3, #16
 800e85a:	d07e      	beq.n	800e95a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	22ca      	movs	r2, #202	; 0xca
 800e862:	625a      	str	r2, [r3, #36]	; 0x24
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	2253      	movs	r2, #83	; 0x53
 800e86a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 f8ab 	bl	800e9c8 <RTC_EnterInitMode>
 800e872:	4603      	mov	r3, r0
 800e874:	2b00      	cmp	r3, #0
 800e876:	d00a      	beq.n	800e88e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	22ff      	movs	r2, #255	; 0xff
 800e87e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2204      	movs	r2, #4
 800e884:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800e888:	2301      	movs	r3, #1
 800e88a:	73fb      	strb	r3, [r7, #15]
 800e88c:	e067      	b.n	800e95e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	689b      	ldr	r3, [r3, #8]
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	6812      	ldr	r2, [r2, #0]
 800e898:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e89c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8a0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	6899      	ldr	r1, [r3, #8]
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	685a      	ldr	r2, [r3, #4]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	691b      	ldr	r3, [r3, #16]
 800e8b0:	431a      	orrs	r2, r3
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	699b      	ldr	r3, [r3, #24]
 800e8b6:	431a      	orrs	r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	430a      	orrs	r2, r1
 800e8be:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	68d2      	ldr	r2, [r2, #12]
 800e8c8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	6919      	ldr	r1, [r3, #16]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	689b      	ldr	r3, [r3, #8]
 800e8d4:	041a      	lsls	r2, r3, #16
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	430a      	orrs	r2, r1
 800e8dc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	68da      	ldr	r2, [r3, #12]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e8ec:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f022 0203 	bic.w	r2, r2, #3
 800e8fc:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	69da      	ldr	r2, [r3, #28]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	695b      	ldr	r3, [r3, #20]
 800e90c:	431a      	orrs	r2, r3
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	430a      	orrs	r2, r1
 800e914:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	689b      	ldr	r3, [r3, #8]
 800e91c:	f003 0320 	and.w	r3, r3, #32
 800e920:	2b00      	cmp	r3, #0
 800e922:	d113      	bne.n	800e94c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f000 f829 	bl	800e97c <HAL_RTC_WaitForSynchro>
 800e92a:	4603      	mov	r3, r0
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d00d      	beq.n	800e94c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	22ff      	movs	r2, #255	; 0xff
 800e936:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2204      	movs	r2, #4
 800e93c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800e948:	2301      	movs	r3, #1
 800e94a:	e010      	b.n	800e96e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	22ff      	movs	r2, #255	; 0xff
 800e952:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800e954:	2300      	movs	r3, #0
 800e956:	73fb      	strb	r3, [r7, #15]
 800e958:	e001      	b.n	800e95e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800e95a:	2300      	movs	r3, #0
 800e95c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800e95e:	7bfb      	ldrb	r3, [r7, #15]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d103      	bne.n	800e96c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2201      	movs	r2, #1
 800e968:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800e96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	40002800 	.word	0x40002800

0800e97c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	68da      	ldr	r2, [r3, #12]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e992:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800e994:	f7f9 fc66 	bl	8008264 <HAL_GetTick>
 800e998:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e99a:	e009      	b.n	800e9b0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e99c:	f7f9 fc62 	bl	8008264 <HAL_GetTick>
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	1ad3      	subs	r3, r2, r3
 800e9a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e9aa:	d901      	bls.n	800e9b0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800e9ac:	2303      	movs	r3, #3
 800e9ae:	e007      	b.n	800e9c0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	68db      	ldr	r3, [r3, #12]
 800e9b6:	f003 0320 	and.w	r3, r3, #32
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d0ee      	beq.n	800e99c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800e9be:	2300      	movs	r3, #0
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3710      	adds	r7, #16
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b084      	sub	sp, #16
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	68db      	ldr	r3, [r3, #12]
 800e9d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d119      	bne.n	800ea12 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e9e6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e9e8:	f7f9 fc3c 	bl	8008264 <HAL_GetTick>
 800e9ec:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e9ee:	e009      	b.n	800ea04 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e9f0:	f7f9 fc38 	bl	8008264 <HAL_GetTick>
 800e9f4:	4602      	mov	r2, r0
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	1ad3      	subs	r3, r2, r3
 800e9fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e9fe:	d901      	bls.n	800ea04 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800ea00:	2303      	movs	r3, #3
 800ea02:	e007      	b.n	800ea14 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	68db      	ldr	r3, [r3, #12]
 800ea0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d0ee      	beq.n	800e9f0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800ea12:	2300      	movs	r3, #0
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3710      	adds	r7, #16
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b086      	sub	sp, #24
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d101      	bne.n	800ea36 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800ea32:	2302      	movs	r3, #2
 800ea34:	e0a8      	b.n	800eb88 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	2202      	movs	r2, #2
 800ea42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	22ca      	movs	r2, #202	; 0xca
 800ea4c:	625a      	str	r2, [r3, #36]	; 0x24
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	2253      	movs	r2, #83	; 0x53
 800ea54:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	689b      	ldr	r3, [r3, #8]
 800ea5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d020      	beq.n	800eaa6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800ea64:	f7f9 fbfe 	bl	8008264 <HAL_GetTick>
 800ea68:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800ea6a:	e015      	b.n	800ea98 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ea6c:	f7f9 fbfa 	bl	8008264 <HAL_GetTick>
 800ea70:	4602      	mov	r2, r0
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	1ad3      	subs	r3, r2, r3
 800ea76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ea7a:	d90d      	bls.n	800ea98 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	22ff      	movs	r2, #255	; 0xff
 800ea82:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2203      	movs	r2, #3
 800ea88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800ea94:	2303      	movs	r3, #3
 800ea96:	e077      	b.n	800eb88 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	68db      	ldr	r3, [r3, #12]
 800ea9e:	f003 0304 	and.w	r3, r3, #4
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d1e2      	bne.n	800ea6c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	689a      	ldr	r2, [r3, #8]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eab4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	68db      	ldr	r3, [r3, #12]
 800eabc:	b2da      	uxtb	r2, r3
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800eac6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800eac8:	f7f9 fbcc 	bl	8008264 <HAL_GetTick>
 800eacc:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800eace:	e015      	b.n	800eafc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ead0:	f7f9 fbc8 	bl	8008264 <HAL_GetTick>
 800ead4:	4602      	mov	r2, r0
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	1ad3      	subs	r3, r2, r3
 800eada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eade:	d90d      	bls.n	800eafc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	22ff      	movs	r2, #255	; 0xff
 800eae6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2203      	movs	r2, #3
 800eaec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800eaf8:	2303      	movs	r3, #3
 800eafa:	e045      	b.n	800eb88 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	68db      	ldr	r3, [r3, #12]
 800eb02:	f003 0304 	and.w	r3, r3, #4
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d0e2      	beq.n	800ead0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	68ba      	ldr	r2, [r7, #8]
 800eb10:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	689a      	ldr	r2, [r3, #8]
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f022 0207 	bic.w	r2, r2, #7
 800eb20:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	6899      	ldr	r1, [r3, #8]
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	430a      	orrs	r2, r1
 800eb30:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800eb32:	4b17      	ldr	r3, [pc, #92]	; (800eb90 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800eb34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb38:	4a15      	ldr	r2, [pc, #84]	; (800eb90 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800eb3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eb3e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800eb42:	4b13      	ldr	r3, [pc, #76]	; (800eb90 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	4a12      	ldr	r2, [pc, #72]	; (800eb90 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800eb48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eb4c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	689a      	ldr	r2, [r3, #8]
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800eb5c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	689a      	ldr	r2, [r3, #8]
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eb6c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	22ff      	movs	r2, #255	; 0xff
 800eb74:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	2201      	movs	r2, #1
 800eb7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2200      	movs	r2, #0
 800eb82:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800eb86:	2300      	movs	r3, #0
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3718      	adds	r7, #24
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	58000800 	.word	0x58000800

0800eb94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d101      	bne.n	800eba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800eba2:	2301      	movs	r3, #1
 800eba4:	e095      	b.n	800ecd2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d108      	bne.n	800ebc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ebb6:	d009      	beq.n	800ebcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	61da      	str	r2, [r3, #28]
 800ebbe:	e005      	b.n	800ebcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d106      	bne.n	800ebec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f7f4 ffe8 	bl	8003bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2202      	movs	r2, #2
 800ebf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ec0c:	d902      	bls.n	800ec14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	60fb      	str	r3, [r7, #12]
 800ec12:	e002      	b.n	800ec1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ec14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	68db      	ldr	r3, [r3, #12]
 800ec1e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ec22:	d007      	beq.n	800ec34 <HAL_SPI_Init+0xa0>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ec2c:	d002      	beq.n	800ec34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2200      	movs	r2, #0
 800ec32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	689b      	ldr	r3, [r3, #8]
 800ec40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ec44:	431a      	orrs	r2, r3
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	691b      	ldr	r3, [r3, #16]
 800ec4a:	f003 0302 	and.w	r3, r3, #2
 800ec4e:	431a      	orrs	r2, r3
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	695b      	ldr	r3, [r3, #20]
 800ec54:	f003 0301 	and.w	r3, r3, #1
 800ec58:	431a      	orrs	r2, r3
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	699b      	ldr	r3, [r3, #24]
 800ec5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ec62:	431a      	orrs	r2, r3
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	69db      	ldr	r3, [r3, #28]
 800ec68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec6c:	431a      	orrs	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6a1b      	ldr	r3, [r3, #32]
 800ec72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec76:	ea42 0103 	orr.w	r1, r2, r3
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec7e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	430a      	orrs	r2, r1
 800ec88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	699b      	ldr	r3, [r3, #24]
 800ec8e:	0c1b      	lsrs	r3, r3, #16
 800ec90:	f003 0204 	and.w	r2, r3, #4
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec98:	f003 0310 	and.w	r3, r3, #16
 800ec9c:	431a      	orrs	r2, r3
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eca2:	f003 0308 	and.w	r3, r3, #8
 800eca6:	431a      	orrs	r2, r3
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ecb0:	ea42 0103 	orr.w	r1, r2, r3
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	430a      	orrs	r2, r1
 800ecc0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2201      	movs	r2, #1
 800eccc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ecd0:	2300      	movs	r3, #0
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3710      	adds	r7, #16
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
	...

0800ecdc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b086      	sub	sp, #24
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	4613      	mov	r3, r2
 800ece8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ecea:	2300      	movs	r3, #0
 800ecec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d101      	bne.n	800ecfc <HAL_SPI_Transmit_DMA+0x20>
 800ecf8:	2302      	movs	r3, #2
 800ecfa:	e0d4      	b.n	800eea6 <HAL_SPI_Transmit_DMA+0x1ca>
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2201      	movs	r2, #1
 800ed00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ed0a:	b2db      	uxtb	r3, r3
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d002      	beq.n	800ed16 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800ed10:	2302      	movs	r3, #2
 800ed12:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ed14:	e0c2      	b.n	800ee9c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d002      	beq.n	800ed22 <HAL_SPI_Transmit_DMA+0x46>
 800ed1c:	88fb      	ldrh	r3, [r7, #6]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d102      	bne.n	800ed28 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800ed22:	2301      	movs	r3, #1
 800ed24:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ed26:	e0b9      	b.n	800ee9c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2203      	movs	r2, #3
 800ed2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2200      	movs	r2, #0
 800ed34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	68ba      	ldr	r2, [r7, #8]
 800ed3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	88fa      	ldrh	r2, [r7, #6]
 800ed40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	88fa      	ldrh	r2, [r7, #6]
 800ed46:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2200      	movs	r2, #0
 800ed52:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2200      	movs	r2, #0
 800ed58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2200      	movs	r2, #0
 800ed66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	689b      	ldr	r3, [r3, #8]
 800ed6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed72:	d10f      	bne.n	800ed94 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	681a      	ldr	r2, [r3, #0]
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ed92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed98:	4a45      	ldr	r2, [pc, #276]	; (800eeb0 <HAL_SPI_Transmit_DMA+0x1d4>)
 800ed9a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eda0:	4a44      	ldr	r2, [pc, #272]	; (800eeb4 <HAL_SPI_Transmit_DMA+0x1d8>)
 800eda2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eda8:	4a43      	ldr	r2, [pc, #268]	; (800eeb8 <HAL_SPI_Transmit_DMA+0x1dc>)
 800edaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edb0:	2200      	movs	r2, #0
 800edb2:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	685a      	ldr	r2, [r3, #4]
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800edc2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	68db      	ldr	r3, [r3, #12]
 800edc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800edcc:	d82d      	bhi.n	800ee2a <HAL_SPI_Transmit_DMA+0x14e>
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edd2:	699b      	ldr	r3, [r3, #24]
 800edd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edd8:	d127      	bne.n	800ee2a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edde:	b29b      	uxth	r3, r3
 800ede0:	f003 0301 	and.w	r3, r3, #1
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d10f      	bne.n	800ee08 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	685a      	ldr	r2, [r3, #4]
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800edf6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edfc:	b29b      	uxth	r3, r3
 800edfe:	085b      	lsrs	r3, r3, #1
 800ee00:	b29a      	uxth	r2, r3
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ee06:	e010      	b.n	800ee2a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	685a      	ldr	r2, [r3, #4]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ee16:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	085b      	lsrs	r3, r3, #1
 800ee20:	b29b      	uxth	r3, r3
 800ee22:	3301      	adds	r3, #1
 800ee24:	b29a      	uxth	r2, r3
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee32:	4619      	mov	r1, r3
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	330c      	adds	r3, #12
 800ee3a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee40:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ee42:	f7fa fd8b 	bl	800995c <HAL_DMA_Start_IT>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d008      	beq.n	800ee5e <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee50:	f043 0210 	orr.w	r2, r3, #16
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800ee58:	2301      	movs	r3, #1
 800ee5a:	75fb      	strb	r3, [r7, #23]

    goto error;
 800ee5c:	e01e      	b.n	800ee9c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee68:	2b40      	cmp	r3, #64	; 0x40
 800ee6a:	d007      	beq.n	800ee7c <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	681a      	ldr	r2, [r3, #0]
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ee7a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	685a      	ldr	r2, [r3, #4]
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f042 0220 	orr.w	r2, r2, #32
 800ee8a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	685a      	ldr	r2, [r3, #4]
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f042 0202 	orr.w	r2, r2, #2
 800ee9a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800eea4:	7dfb      	ldrb	r3, [r7, #23]
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3718      	adds	r7, #24
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	0800f8f3 	.word	0x0800f8f3
 800eeb4:	0800f715 	.word	0x0800f715
 800eeb8:	0800f947 	.word	0x0800f947

0800eebc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b086      	sub	sp, #24
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	4613      	mov	r3, r2
 800eec8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eeca:	2300      	movs	r3, #0
 800eecc:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800eed4:	b2db      	uxtb	r3, r3
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d002      	beq.n	800eee0 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800eeda:	2302      	movs	r3, #2
 800eedc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eede:	e0fe      	b.n	800f0de <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	689b      	ldr	r3, [r3, #8]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d110      	bne.n	800ef0a <HAL_SPI_Receive_DMA+0x4e>
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eef0:	d10b      	bne.n	800ef0a <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2204      	movs	r2, #4
 800eef6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800eefa:	88fb      	ldrh	r3, [r7, #6]
 800eefc:	68ba      	ldr	r2, [r7, #8]
 800eefe:	68b9      	ldr	r1, [r7, #8]
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f000 f8fb 	bl	800f0fc <HAL_SPI_TransmitReceive_DMA>
 800ef06:	4603      	mov	r3, r0
 800ef08:	e0ee      	b.n	800f0e8 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d101      	bne.n	800ef18 <HAL_SPI_Receive_DMA+0x5c>
 800ef14:	2302      	movs	r3, #2
 800ef16:	e0e7      	b.n	800f0e8 <HAL_SPI_Receive_DMA+0x22c>
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d002      	beq.n	800ef2c <HAL_SPI_Receive_DMA+0x70>
 800ef26:	88fb      	ldrh	r3, [r7, #6]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d102      	bne.n	800ef32 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ef30:	e0d5      	b.n	800f0de <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2204      	movs	r2, #4
 800ef36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	68ba      	ldr	r2, [r7, #8]
 800ef44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	88fa      	ldrh	r2, [r7, #6]
 800ef4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	88fa      	ldrh	r2, [r7, #6]
 800ef52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2200      	movs	r2, #0
 800ef66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	689b      	ldr	r3, [r3, #8]
 800ef72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef76:	d10f      	bne.n	800ef98 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	681a      	ldr	r2, [r3, #0]
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ef86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	681a      	ldr	r2, [r3, #0]
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ef96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	685a      	ldr	r2, [r3, #4]
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800efa6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800efb0:	d908      	bls.n	800efc4 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	685a      	ldr	r2, [r3, #4]
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800efc0:	605a      	str	r2, [r3, #4]
 800efc2:	e042      	b.n	800f04a <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	685a      	ldr	r2, [r3, #4]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800efd2:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800efd8:	699b      	ldr	r3, [r3, #24]
 800efda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efde:	d134      	bne.n	800f04a <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	685a      	ldr	r2, [r3, #4]
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800efee:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800eff6:	b29b      	uxth	r3, r3
 800eff8:	f003 0301 	and.w	r3, r3, #1
 800effc:	2b00      	cmp	r3, #0
 800effe:	d111      	bne.n	800f024 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	685a      	ldr	r2, [r3, #4]
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f00e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f016:	b29b      	uxth	r3, r3
 800f018:	085b      	lsrs	r3, r3, #1
 800f01a:	b29a      	uxth	r2, r3
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800f022:	e012      	b.n	800f04a <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	685a      	ldr	r2, [r3, #4]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f032:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	085b      	lsrs	r3, r3, #1
 800f03e:	b29b      	uxth	r3, r3
 800f040:	3301      	adds	r3, #1
 800f042:	b29a      	uxth	r2, r3
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f04e:	4a28      	ldr	r2, [pc, #160]	; (800f0f0 <HAL_SPI_Receive_DMA+0x234>)
 800f050:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f056:	4a27      	ldr	r2, [pc, #156]	; (800f0f4 <HAL_SPI_Receive_DMA+0x238>)
 800f058:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f05e:	4a26      	ldr	r2, [pc, #152]	; (800f0f8 <HAL_SPI_Receive_DMA+0x23c>)
 800f060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f066:	2200      	movs	r2, #0
 800f068:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	330c      	adds	r3, #12
 800f074:	4619      	mov	r1, r3
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f07a:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f082:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800f084:	f7fa fc6a 	bl	800995c <HAL_DMA_Start_IT>
 800f088:	4603      	mov	r3, r0
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d008      	beq.n	800f0a0 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f092:	f043 0210 	orr.w	r2, r3, #16
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800f09a:	2301      	movs	r3, #1
 800f09c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800f09e:	e01e      	b.n	800f0de <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0aa:	2b40      	cmp	r3, #64	; 0x40
 800f0ac:	d007      	beq.n	800f0be <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f0bc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	685a      	ldr	r2, [r3, #4]
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f042 0220 	orr.w	r2, r2, #32
 800f0cc:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	685a      	ldr	r2, [r3, #4]
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f042 0201 	orr.w	r2, r2, #1
 800f0dc:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f0e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3718      	adds	r7, #24
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}
 800f0f0:	0800f90f 	.word	0x0800f90f
 800f0f4:	0800f7bb 	.word	0x0800f7bb
 800f0f8:	0800f947 	.word	0x0800f947

0800f0fc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b086      	sub	sp, #24
 800f100:	af00      	add	r7, sp, #0
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	607a      	str	r2, [r7, #4]
 800f108:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f10a:	2300      	movs	r3, #0
 800f10c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f114:	2b01      	cmp	r3, #1
 800f116:	d101      	bne.n	800f11c <HAL_SPI_TransmitReceive_DMA+0x20>
 800f118:	2302      	movs	r3, #2
 800f11a:	e164      	b.n	800f3e6 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2201      	movs	r2, #1
 800f120:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f12a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800f132:	7dbb      	ldrb	r3, [r7, #22]
 800f134:	2b01      	cmp	r3, #1
 800f136:	d00d      	beq.n	800f154 <HAL_SPI_TransmitReceive_DMA+0x58>
 800f138:	693b      	ldr	r3, [r7, #16]
 800f13a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f13e:	d106      	bne.n	800f14e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	689b      	ldr	r3, [r3, #8]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d102      	bne.n	800f14e <HAL_SPI_TransmitReceive_DMA+0x52>
 800f148:	7dbb      	ldrb	r3, [r7, #22]
 800f14a:	2b04      	cmp	r3, #4
 800f14c:	d002      	beq.n	800f154 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800f14e:	2302      	movs	r3, #2
 800f150:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f152:	e143      	b.n	800f3dc <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d005      	beq.n	800f166 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d002      	beq.n	800f166 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800f160:	887b      	ldrh	r3, [r7, #2]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d102      	bne.n	800f16c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800f166:	2301      	movs	r3, #1
 800f168:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f16a:	e137      	b.n	800f3dc <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f172:	b2db      	uxtb	r3, r3
 800f174:	2b04      	cmp	r3, #4
 800f176:	d003      	beq.n	800f180 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2205      	movs	r2, #5
 800f17c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2200      	movs	r2, #0
 800f184:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	68ba      	ldr	r2, [r7, #8]
 800f18a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	887a      	ldrh	r2, [r7, #2]
 800f190:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	887a      	ldrh	r2, [r7, #2]
 800f196:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	687a      	ldr	r2, [r7, #4]
 800f19c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	887a      	ldrh	r2, [r7, #2]
 800f1a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	887a      	ldrh	r2, [r7, #2]
 800f1aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	685a      	ldr	r2, [r3, #4]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800f1c8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f1d2:	d908      	bls.n	800f1e6 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	685a      	ldr	r2, [r3, #4]
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f1e2:	605a      	str	r2, [r3, #4]
 800f1e4:	e06f      	b.n	800f2c6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	685a      	ldr	r2, [r3, #4]
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f1f4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1fa:	699b      	ldr	r3, [r3, #24]
 800f1fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f200:	d126      	bne.n	800f250 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800f206:	f003 0301 	and.w	r3, r3, #1
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d10f      	bne.n	800f22e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	685a      	ldr	r2, [r3, #4]
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f21c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f222:	b29b      	uxth	r3, r3
 800f224:	085b      	lsrs	r3, r3, #1
 800f226:	b29a      	uxth	r2, r3
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f22c:	e010      	b.n	800f250 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	685a      	ldr	r2, [r3, #4]
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f23c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f242:	b29b      	uxth	r3, r3
 800f244:	085b      	lsrs	r3, r3, #1
 800f246:	b29b      	uxth	r3, r3
 800f248:	3301      	adds	r3, #1
 800f24a:	b29a      	uxth	r2, r3
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f254:	699b      	ldr	r3, [r3, #24]
 800f256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f25a:	d134      	bne.n	800f2c6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	685a      	ldr	r2, [r3, #4]
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f26a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f272:	b29b      	uxth	r3, r3
 800f274:	f003 0301 	and.w	r3, r3, #1
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d111      	bne.n	800f2a0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	685a      	ldr	r2, [r3, #4]
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f28a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f292:	b29b      	uxth	r3, r3
 800f294:	085b      	lsrs	r3, r3, #1
 800f296:	b29a      	uxth	r2, r3
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800f29e:	e012      	b.n	800f2c6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	685a      	ldr	r2, [r3, #4]
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f2ae:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f2b6:	b29b      	uxth	r3, r3
 800f2b8:	085b      	lsrs	r3, r3, #1
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	3301      	adds	r3, #1
 800f2be:	b29a      	uxth	r2, r3
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f2cc:	b2db      	uxtb	r3, r3
 800f2ce:	2b04      	cmp	r3, #4
 800f2d0:	d108      	bne.n	800f2e4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2d6:	4a46      	ldr	r2, [pc, #280]	; (800f3f0 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 800f2d8:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2de:	4a45      	ldr	r2, [pc, #276]	; (800f3f4 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800f2e0:	62da      	str	r2, [r3, #44]	; 0x2c
 800f2e2:	e007      	b.n	800f2f4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2e8:	4a43      	ldr	r2, [pc, #268]	; (800f3f8 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800f2ea:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2f0:	4a42      	ldr	r2, [pc, #264]	; (800f3fc <HAL_SPI_TransmitReceive_DMA+0x300>)
 800f2f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2f8:	4a41      	ldr	r2, [pc, #260]	; (800f400 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800f2fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f300:	2200      	movs	r2, #0
 800f302:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	330c      	adds	r3, #12
 800f30e:	4619      	mov	r1, r3
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f314:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f31c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800f31e:	f7fa fb1d 	bl	800995c <HAL_DMA_Start_IT>
 800f322:	4603      	mov	r3, r0
 800f324:	2b00      	cmp	r3, #0
 800f326:	d008      	beq.n	800f33a <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f32c:	f043 0210 	orr.w	r2, r3, #16
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800f334:	2301      	movs	r3, #1
 800f336:	75fb      	strb	r3, [r7, #23]

    goto error;
 800f338:	e050      	b.n	800f3dc <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	685a      	ldr	r2, [r3, #4]
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	f042 0201 	orr.w	r2, r2, #1
 800f348:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f34e:	2200      	movs	r2, #0
 800f350:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f356:	2200      	movs	r2, #0
 800f358:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f35e:	2200      	movs	r2, #0
 800f360:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f366:	2200      	movs	r2, #0
 800f368:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f372:	4619      	mov	r1, r3
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	330c      	adds	r3, #12
 800f37a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f380:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f382:	f7fa faeb 	bl	800995c <HAL_DMA_Start_IT>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d008      	beq.n	800f39e <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f390:	f043 0210 	orr.w	r2, r3, #16
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800f398:	2301      	movs	r3, #1
 800f39a:	75fb      	strb	r3, [r7, #23]

    goto error;
 800f39c:	e01e      	b.n	800f3dc <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3a8:	2b40      	cmp	r3, #64	; 0x40
 800f3aa:	d007      	beq.n	800f3bc <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	681a      	ldr	r2, [r3, #0]
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f3ba:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	685a      	ldr	r2, [r3, #4]
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f042 0220 	orr.w	r2, r2, #32
 800f3ca:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	685a      	ldr	r2, [r3, #4]
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f042 0202 	orr.w	r2, r2, #2
 800f3da:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f3e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3718      	adds	r7, #24
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	0800f90f 	.word	0x0800f90f
 800f3f4:	0800f7bb 	.word	0x0800f7bb
 800f3f8:	0800f92b 	.word	0x0800f92b
 800f3fc:	0800f863 	.word	0x0800f863
 800f400:	0800f947 	.word	0x0800f947

0800f404 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b084      	sub	sp, #16
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f40c:	2300      	movs	r3, #0
 800f40e:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f414:	2b00      	cmp	r3, #0
 800f416:	d00f      	beq.n	800f438 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7fa fb18 	bl	8009a52 <HAL_DMA_Abort>
 800f422:	4603      	mov	r3, r0
 800f424:	2b00      	cmp	r3, #0
 800f426:	d007      	beq.n	800f438 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f42c:	f043 0210 	orr.w	r2, r3, #16
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800f434:	2301      	movs	r3, #1
 800f436:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d00f      	beq.n	800f460 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f444:	4618      	mov	r0, r3
 800f446:	f7fa fb04 	bl	8009a52 <HAL_DMA_Abort>
 800f44a:	4603      	mov	r3, r0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d007      	beq.n	800f460 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f454:	f043 0210 	orr.w	r2, r3, #16
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800f45c:	2301      	movs	r3, #1
 800f45e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	685a      	ldr	r2, [r3, #4]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f022 0203 	bic.w	r2, r2, #3
 800f46e:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2201      	movs	r2, #1
 800f474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 800f478:	7bfb      	ldrb	r3, [r7, #15]
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3710      	adds	r7, #16
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
	...

0800f484 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b088      	sub	sp, #32
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	689b      	ldr	r3, [r3, #8]
 800f49a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f49c:	69bb      	ldr	r3, [r7, #24]
 800f49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d10e      	bne.n	800f4c4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f4a6:	69bb      	ldr	r3, [r7, #24]
 800f4a8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d009      	beq.n	800f4c4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f4b0:	69fb      	ldr	r3, [r7, #28]
 800f4b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d004      	beq.n	800f4c4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	4798      	blx	r3
    return;
 800f4c2:	e0ce      	b.n	800f662 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f4c4:	69bb      	ldr	r3, [r7, #24]
 800f4c6:	f003 0302 	and.w	r3, r3, #2
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d009      	beq.n	800f4e2 <HAL_SPI_IRQHandler+0x5e>
 800f4ce:	69fb      	ldr	r3, [r7, #28]
 800f4d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d004      	beq.n	800f4e2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	4798      	blx	r3
    return;
 800f4e0:	e0bf      	b.n	800f662 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f4e2:	69bb      	ldr	r3, [r7, #24]
 800f4e4:	f003 0320 	and.w	r3, r3, #32
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d10a      	bne.n	800f502 <HAL_SPI_IRQHandler+0x7e>
 800f4ec:	69bb      	ldr	r3, [r7, #24]
 800f4ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d105      	bne.n	800f502 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f4f6:	69bb      	ldr	r3, [r7, #24]
 800f4f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	f000 80b0 	beq.w	800f662 <HAL_SPI_IRQHandler+0x1de>
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	f003 0320 	and.w	r3, r3, #32
 800f508:	2b00      	cmp	r3, #0
 800f50a:	f000 80aa 	beq.w	800f662 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f50e:	69bb      	ldr	r3, [r7, #24]
 800f510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f514:	2b00      	cmp	r3, #0
 800f516:	d023      	beq.n	800f560 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f51e:	b2db      	uxtb	r3, r3
 800f520:	2b03      	cmp	r3, #3
 800f522:	d011      	beq.n	800f548 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f528:	f043 0204 	orr.w	r2, r3, #4
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f530:	2300      	movs	r3, #0
 800f532:	617b      	str	r3, [r7, #20]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	617b      	str	r3, [r7, #20]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	689b      	ldr	r3, [r3, #8]
 800f542:	617b      	str	r3, [r7, #20]
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	e00b      	b.n	800f560 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f548:	2300      	movs	r3, #0
 800f54a:	613b      	str	r3, [r7, #16]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	613b      	str	r3, [r7, #16]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	689b      	ldr	r3, [r3, #8]
 800f55a:	613b      	str	r3, [r7, #16]
 800f55c:	693b      	ldr	r3, [r7, #16]
        return;
 800f55e:	e080      	b.n	800f662 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f560:	69bb      	ldr	r3, [r7, #24]
 800f562:	f003 0320 	and.w	r3, r3, #32
 800f566:	2b00      	cmp	r3, #0
 800f568:	d014      	beq.n	800f594 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f56e:	f043 0201 	orr.w	r2, r3, #1
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f576:	2300      	movs	r3, #0
 800f578:	60fb      	str	r3, [r7, #12]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	689b      	ldr	r3, [r3, #8]
 800f580:	60fb      	str	r3, [r7, #12]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	681a      	ldr	r2, [r3, #0]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f590:	601a      	str	r2, [r3, #0]
 800f592:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d00c      	beq.n	800f5b8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f5a2:	f043 0208 	orr.w	r2, r3, #8
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	60bb      	str	r3, [r7, #8]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	689b      	ldr	r3, [r3, #8]
 800f5b4:	60bb      	str	r3, [r7, #8]
 800f5b6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d04f      	beq.n	800f660 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	685a      	ldr	r2, [r3, #4]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f5ce:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	f003 0302 	and.w	r3, r3, #2
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d104      	bne.n	800f5ec <HAL_SPI_IRQHandler+0x168>
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	f003 0301 	and.w	r3, r3, #1
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d034      	beq.n	800f656 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	685a      	ldr	r2, [r3, #4]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	f022 0203 	bic.w	r2, r2, #3
 800f5fa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f600:	2b00      	cmp	r3, #0
 800f602:	d011      	beq.n	800f628 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f608:	4a17      	ldr	r2, [pc, #92]	; (800f668 <HAL_SPI_IRQHandler+0x1e4>)
 800f60a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f610:	4618      	mov	r0, r3
 800f612:	f7fa fa7d 	bl	8009b10 <HAL_DMA_Abort_IT>
 800f616:	4603      	mov	r3, r0
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d005      	beq.n	800f628 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f620:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d016      	beq.n	800f65e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f634:	4a0c      	ldr	r2, [pc, #48]	; (800f668 <HAL_SPI_IRQHandler+0x1e4>)
 800f636:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f63c:	4618      	mov	r0, r3
 800f63e:	f7fa fa67 	bl	8009b10 <HAL_DMA_Abort_IT>
 800f642:	4603      	mov	r3, r0
 800f644:	2b00      	cmp	r3, #0
 800f646:	d00a      	beq.n	800f65e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f64c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800f654:	e003      	b.n	800f65e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f000 f844 	bl	800f6e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f65c:	e000      	b.n	800f660 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800f65e:	bf00      	nop
    return;
 800f660:	bf00      	nop
  }
}
 800f662:	3720      	adds	r7, #32
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}
 800f668:	0800f987 	.word	0x0800f987

0800f66c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b083      	sub	sp, #12
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800f674:	bf00      	nop
 800f676:	370c      	adds	r7, #12
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr

0800f680 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f680:	b480      	push	{r7}
 800f682:	b083      	sub	sp, #12
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800f688:	bf00      	nop
 800f68a:	370c      	adds	r7, #12
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr

0800f694 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800f69c:	bf00      	nop
 800f69e:	370c      	adds	r7, #12
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a6:	4770      	bx	lr

0800f6a8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b083      	sub	sp, #12
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800f6b0:	bf00      	nop
 800f6b2:	370c      	adds	r7, #12
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr

0800f6bc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800f6c4:	bf00      	nop
 800f6c6:	370c      	adds	r7, #12
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr

0800f6d0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800f6d8:	bf00      	nop
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f6ec:	bf00      	nop
 800f6ee:	370c      	adds	r7, #12
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr

0800f6f8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f706:	b2db      	uxtb	r3, r3
}
 800f708:	4618      	mov	r0, r3
 800f70a:	370c      	adds	r7, #12
 800f70c:	46bd      	mov	sp, r7
 800f70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f712:	4770      	bx	lr

0800f714 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b086      	sub	sp, #24
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f720:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f722:	f7f8 fd9f 	bl	8008264 <HAL_GetTick>
 800f726:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	f003 0320 	and.w	r3, r3, #32
 800f732:	2b20      	cmp	r3, #32
 800f734:	d03b      	beq.n	800f7ae <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	685a      	ldr	r2, [r3, #4]
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f022 0220 	bic.w	r2, r2, #32
 800f744:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	685a      	ldr	r2, [r3, #4]
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f022 0202 	bic.w	r2, r2, #2
 800f754:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f756:	693a      	ldr	r2, [r7, #16]
 800f758:	2164      	movs	r1, #100	; 0x64
 800f75a:	6978      	ldr	r0, [r7, #20]
 800f75c:	f000 fa9e 	bl	800fc9c <SPI_EndRxTxTransaction>
 800f760:	4603      	mov	r3, r0
 800f762:	2b00      	cmp	r3, #0
 800f764:	d005      	beq.n	800f772 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f76a:	f043 0220 	orr.w	r2, r3, #32
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	689b      	ldr	r3, [r3, #8]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d10a      	bne.n	800f790 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f77a:	2300      	movs	r3, #0
 800f77c:	60fb      	str	r3, [r7, #12]
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	68db      	ldr	r3, [r3, #12]
 800f784:	60fb      	str	r3, [r7, #12]
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	689b      	ldr	r3, [r3, #8]
 800f78c:	60fb      	str	r3, [r7, #12]
 800f78e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	2200      	movs	r2, #0
 800f794:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	2201      	movs	r2, #1
 800f79a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d003      	beq.n	800f7ae <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f7a6:	6978      	ldr	r0, [r7, #20]
 800f7a8:	f7ff ff9c 	bl	800f6e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f7ac:	e002      	b.n	800f7b4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800f7ae:	6978      	ldr	r0, [r7, #20]
 800f7b0:	f7ff ff5c 	bl	800f66c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f7b4:	3718      	adds	r7, #24
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}

0800f7ba <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f7ba:	b580      	push	{r7, lr}
 800f7bc:	b084      	sub	sp, #16
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7c6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f7c8:	f7f8 fd4c 	bl	8008264 <HAL_GetTick>
 800f7cc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f003 0320 	and.w	r3, r3, #32
 800f7d8:	2b20      	cmp	r3, #32
 800f7da:	d03c      	beq.n	800f856 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	685a      	ldr	r2, [r3, #4]
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	f022 0220 	bic.w	r2, r2, #32
 800f7ea:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	689b      	ldr	r3, [r3, #8]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d10d      	bne.n	800f810 <SPI_DMAReceiveCplt+0x56>
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f7fc:	d108      	bne.n	800f810 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	685a      	ldr	r2, [r3, #4]
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	f022 0203 	bic.w	r2, r2, #3
 800f80c:	605a      	str	r2, [r3, #4]
 800f80e:	e007      	b.n	800f820 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	685a      	ldr	r2, [r3, #4]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f022 0201 	bic.w	r2, r2, #1
 800f81e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f820:	68ba      	ldr	r2, [r7, #8]
 800f822:	2164      	movs	r1, #100	; 0x64
 800f824:	68f8      	ldr	r0, [r7, #12]
 800f826:	f000 f9e1 	bl	800fbec <SPI_EndRxTransaction>
 800f82a:	4603      	mov	r3, r0
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d002      	beq.n	800f836 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2220      	movs	r2, #32
 800f834:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2200      	movs	r2, #0
 800f83a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	2201      	movs	r2, #1
 800f842:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d003      	beq.n	800f856 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f84e:	68f8      	ldr	r0, [r7, #12]
 800f850:	f7ff ff48 	bl	800f6e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f854:	e002      	b.n	800f85c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800f856:	68f8      	ldr	r0, [r7, #12]
 800f858:	f7ff ff12 	bl	800f680 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f85c:	3710      	adds	r7, #16
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}

0800f862 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f862:	b580      	push	{r7, lr}
 800f864:	b084      	sub	sp, #16
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f86e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f870:	f7f8 fcf8 	bl	8008264 <HAL_GetTick>
 800f874:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	f003 0320 	and.w	r3, r3, #32
 800f880:	2b20      	cmp	r3, #32
 800f882:	d030      	beq.n	800f8e6 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	685a      	ldr	r2, [r3, #4]
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	f022 0220 	bic.w	r2, r2, #32
 800f892:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f894:	68ba      	ldr	r2, [r7, #8]
 800f896:	2164      	movs	r1, #100	; 0x64
 800f898:	68f8      	ldr	r0, [r7, #12]
 800f89a:	f000 f9ff 	bl	800fc9c <SPI_EndRxTxTransaction>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d005      	beq.n	800f8b0 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f8a8:	f043 0220 	orr.w	r2, r3, #32
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	685a      	ldr	r2, [r3, #4]
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f022 0203 	bic.w	r2, r2, #3
 800f8be:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d003      	beq.n	800f8e6 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f8de:	68f8      	ldr	r0, [r7, #12]
 800f8e0:	f7ff ff00 	bl	800f6e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f8e4:	e002      	b.n	800f8ec <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800f8e6:	68f8      	ldr	r0, [r7, #12]
 800f8e8:	f7ff fed4 	bl	800f694 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f8ec:	3710      	adds	r7, #16
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}

0800f8f2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f8f2:	b580      	push	{r7, lr}
 800f8f4:	b084      	sub	sp, #16
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8fe:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800f900:	68f8      	ldr	r0, [r7, #12]
 800f902:	f7ff fed1 	bl	800f6a8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f906:	bf00      	nop
 800f908:	3710      	adds	r7, #16
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}

0800f90e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f90e:	b580      	push	{r7, lr}
 800f910:	b084      	sub	sp, #16
 800f912:	af00      	add	r7, sp, #0
 800f914:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f91a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800f91c:	68f8      	ldr	r0, [r7, #12]
 800f91e:	f7ff fecd 	bl	800f6bc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f922:	bf00      	nop
 800f924:	3710      	adds	r7, #16
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}

0800f92a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f92a:	b580      	push	{r7, lr}
 800f92c:	b084      	sub	sp, #16
 800f92e:	af00      	add	r7, sp, #0
 800f930:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f936:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800f938:	68f8      	ldr	r0, [r7, #12]
 800f93a:	f7ff fec9 	bl	800f6d0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f93e:	bf00      	nop
 800f940:	3710      	adds	r7, #16
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}

0800f946 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f946:	b580      	push	{r7, lr}
 800f948:	b084      	sub	sp, #16
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f952:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	685a      	ldr	r2, [r3, #4]
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	f022 0203 	bic.w	r2, r2, #3
 800f962:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f968:	f043 0210 	orr.w	r2, r3, #16
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2201      	movs	r2, #1
 800f974:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f7ff feb3 	bl	800f6e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f97e:	bf00      	nop
 800f980:	3710      	adds	r7, #16
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}

0800f986 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f986:	b580      	push	{r7, lr}
 800f988:	b084      	sub	sp, #16
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f992:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2200      	movs	r2, #0
 800f998:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	f7ff fe9e 	bl	800f6e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f9a8:	bf00      	nop
 800f9aa:	3710      	adds	r7, #16
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b088      	sub	sp, #32
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	60f8      	str	r0, [r7, #12]
 800f9b8:	60b9      	str	r1, [r7, #8]
 800f9ba:	603b      	str	r3, [r7, #0]
 800f9bc:	4613      	mov	r3, r2
 800f9be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f9c0:	f7f8 fc50 	bl	8008264 <HAL_GetTick>
 800f9c4:	4602      	mov	r2, r0
 800f9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c8:	1a9b      	subs	r3, r3, r2
 800f9ca:	683a      	ldr	r2, [r7, #0]
 800f9cc:	4413      	add	r3, r2
 800f9ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f9d0:	f7f8 fc48 	bl	8008264 <HAL_GetTick>
 800f9d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f9d6:	4b39      	ldr	r3, [pc, #228]	; (800fabc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	015b      	lsls	r3, r3, #5
 800f9dc:	0d1b      	lsrs	r3, r3, #20
 800f9de:	69fa      	ldr	r2, [r7, #28]
 800f9e0:	fb02 f303 	mul.w	r3, r2, r3
 800f9e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f9e6:	e054      	b.n	800fa92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ee:	d050      	beq.n	800fa92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f9f0:	f7f8 fc38 	bl	8008264 <HAL_GetTick>
 800f9f4:	4602      	mov	r2, r0
 800f9f6:	69bb      	ldr	r3, [r7, #24]
 800f9f8:	1ad3      	subs	r3, r2, r3
 800f9fa:	69fa      	ldr	r2, [r7, #28]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d902      	bls.n	800fa06 <SPI_WaitFlagStateUntilTimeout+0x56>
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d13d      	bne.n	800fa82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	685a      	ldr	r2, [r3, #4]
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fa14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	685b      	ldr	r3, [r3, #4]
 800fa1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fa1e:	d111      	bne.n	800fa44 <SPI_WaitFlagStateUntilTimeout+0x94>
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	689b      	ldr	r3, [r3, #8]
 800fa24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa28:	d004      	beq.n	800fa34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	689b      	ldr	r3, [r3, #8]
 800fa2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa32:	d107      	bne.n	800fa44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fa42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa4c:	d10f      	bne.n	800fa6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	681a      	ldr	r2, [r3, #0]
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fa5c:	601a      	str	r2, [r3, #0]
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fa6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2201      	movs	r2, #1
 800fa72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800fa7e:	2303      	movs	r3, #3
 800fa80:	e017      	b.n	800fab2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d101      	bne.n	800fa8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	3b01      	subs	r3, #1
 800fa90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	689a      	ldr	r2, [r3, #8]
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	4013      	ands	r3, r2
 800fa9c:	68ba      	ldr	r2, [r7, #8]
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	bf0c      	ite	eq
 800faa2:	2301      	moveq	r3, #1
 800faa4:	2300      	movne	r3, #0
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	461a      	mov	r2, r3
 800faaa:	79fb      	ldrb	r3, [r7, #7]
 800faac:	429a      	cmp	r2, r3
 800faae:	d19b      	bne.n	800f9e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800fab0:	2300      	movs	r3, #0
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3720      	adds	r7, #32
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
 800faba:	bf00      	nop
 800fabc:	2000002c 	.word	0x2000002c

0800fac0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b08a      	sub	sp, #40	; 0x28
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	60b9      	str	r1, [r7, #8]
 800faca:	607a      	str	r2, [r7, #4]
 800facc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800face:	2300      	movs	r3, #0
 800fad0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800fad2:	f7f8 fbc7 	bl	8008264 <HAL_GetTick>
 800fad6:	4602      	mov	r2, r0
 800fad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fada:	1a9b      	subs	r3, r3, r2
 800fadc:	683a      	ldr	r2, [r7, #0]
 800fade:	4413      	add	r3, r2
 800fae0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800fae2:	f7f8 fbbf 	bl	8008264 <HAL_GetTick>
 800fae6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	330c      	adds	r3, #12
 800faee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800faf0:	4b3d      	ldr	r3, [pc, #244]	; (800fbe8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	4613      	mov	r3, r2
 800faf6:	009b      	lsls	r3, r3, #2
 800faf8:	4413      	add	r3, r2
 800fafa:	00da      	lsls	r2, r3, #3
 800fafc:	1ad3      	subs	r3, r2, r3
 800fafe:	0d1b      	lsrs	r3, r3, #20
 800fb00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb02:	fb02 f303 	mul.w	r3, r2, r3
 800fb06:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800fb08:	e060      	b.n	800fbcc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800fb10:	d107      	bne.n	800fb22 <SPI_WaitFifoStateUntilTimeout+0x62>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d104      	bne.n	800fb22 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800fb18:	69fb      	ldr	r3, [r7, #28]
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	b2db      	uxtb	r3, r3
 800fb1e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800fb20:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb28:	d050      	beq.n	800fbcc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fb2a:	f7f8 fb9b 	bl	8008264 <HAL_GetTick>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	6a3b      	ldr	r3, [r7, #32]
 800fb32:	1ad3      	subs	r3, r2, r3
 800fb34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d902      	bls.n	800fb40 <SPI_WaitFifoStateUntilTimeout+0x80>
 800fb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d13d      	bne.n	800fbbc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	685a      	ldr	r2, [r3, #4]
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fb4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fb58:	d111      	bne.n	800fb7e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	689b      	ldr	r3, [r3, #8]
 800fb5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb62:	d004      	beq.n	800fb6e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	689b      	ldr	r3, [r3, #8]
 800fb68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb6c:	d107      	bne.n	800fb7e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fb7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb86:	d10f      	bne.n	800fba8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	681a      	ldr	r2, [r3, #0]
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fb96:	601a      	str	r2, [r3, #0]
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	681a      	ldr	r2, [r3, #0]
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fba6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2201      	movs	r2, #1
 800fbac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800fbb8:	2303      	movs	r3, #3
 800fbba:	e010      	b.n	800fbde <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fbbc:	69bb      	ldr	r3, [r7, #24]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d101      	bne.n	800fbc6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800fbc6:	69bb      	ldr	r3, [r7, #24]
 800fbc8:	3b01      	subs	r3, #1
 800fbca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	689a      	ldr	r2, [r3, #8]
 800fbd2:	68bb      	ldr	r3, [r7, #8]
 800fbd4:	4013      	ands	r3, r2
 800fbd6:	687a      	ldr	r2, [r7, #4]
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	d196      	bne.n	800fb0a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800fbdc:	2300      	movs	r3, #0
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3728      	adds	r7, #40	; 0x28
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
 800fbe6:	bf00      	nop
 800fbe8:	2000002c 	.word	0x2000002c

0800fbec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b086      	sub	sp, #24
 800fbf0:	af02      	add	r7, sp, #8
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fc00:	d111      	bne.n	800fc26 <SPI_EndRxTransaction+0x3a>
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	689b      	ldr	r3, [r3, #8]
 800fc06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc0a:	d004      	beq.n	800fc16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	689b      	ldr	r3, [r3, #8]
 800fc10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc14:	d107      	bne.n	800fc26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	681a      	ldr	r2, [r3, #0]
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fc24:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	9300      	str	r3, [sp, #0]
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	2180      	movs	r1, #128	; 0x80
 800fc30:	68f8      	ldr	r0, [r7, #12]
 800fc32:	f7ff febd 	bl	800f9b0 <SPI_WaitFlagStateUntilTimeout>
 800fc36:	4603      	mov	r3, r0
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d007      	beq.n	800fc4c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc40:	f043 0220 	orr.w	r2, r3, #32
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fc48:	2303      	movs	r3, #3
 800fc4a:	e023      	b.n	800fc94 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fc54:	d11d      	bne.n	800fc92 <SPI_EndRxTransaction+0xa6>
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	689b      	ldr	r3, [r3, #8]
 800fc5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc5e:	d004      	beq.n	800fc6a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	689b      	ldr	r3, [r3, #8]
 800fc64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc68:	d113      	bne.n	800fc92 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	9300      	str	r3, [sp, #0]
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	2200      	movs	r2, #0
 800fc72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800fc76:	68f8      	ldr	r0, [r7, #12]
 800fc78:	f7ff ff22 	bl	800fac0 <SPI_WaitFifoStateUntilTimeout>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d007      	beq.n	800fc92 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc86:	f043 0220 	orr.w	r2, r3, #32
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800fc8e:	2303      	movs	r3, #3
 800fc90:	e000      	b.n	800fc94 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800fc92:	2300      	movs	r3, #0
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3710      	adds	r7, #16
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b086      	sub	sp, #24
 800fca0:	af02      	add	r7, sp, #8
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	60b9      	str	r1, [r7, #8]
 800fca6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	9300      	str	r3, [sp, #0]
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800fcb4:	68f8      	ldr	r0, [r7, #12]
 800fcb6:	f7ff ff03 	bl	800fac0 <SPI_WaitFifoStateUntilTimeout>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d007      	beq.n	800fcd0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fcc4:	f043 0220 	orr.w	r2, r3, #32
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fccc:	2303      	movs	r3, #3
 800fcce:	e027      	b.n	800fd20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	9300      	str	r3, [sp, #0]
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	2180      	movs	r1, #128	; 0x80
 800fcda:	68f8      	ldr	r0, [r7, #12]
 800fcdc:	f7ff fe68 	bl	800f9b0 <SPI_WaitFlagStateUntilTimeout>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d007      	beq.n	800fcf6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fcea:	f043 0220 	orr.w	r2, r3, #32
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fcf2:	2303      	movs	r3, #3
 800fcf4:	e014      	b.n	800fd20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	9300      	str	r3, [sp, #0]
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800fd02:	68f8      	ldr	r0, [r7, #12]
 800fd04:	f7ff fedc 	bl	800fac0 <SPI_WaitFifoStateUntilTimeout>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d007      	beq.n	800fd1e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd12:	f043 0220 	orr.w	r2, r3, #32
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fd1a:	2303      	movs	r3, #3
 800fd1c:	e000      	b.n	800fd20 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800fd1e:	2300      	movs	r3, #0
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3710      	adds	r7, #16
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b082      	sub	sp, #8
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d101      	bne.n	800fd3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fd36:	2301      	movs	r3, #1
 800fd38:	e049      	b.n	800fdce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd40:	b2db      	uxtb	r3, r3
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d106      	bne.n	800fd54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f7f7 fd6e 	bl	8007830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2202      	movs	r2, #2
 800fd58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681a      	ldr	r2, [r3, #0]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	3304      	adds	r3, #4
 800fd64:	4619      	mov	r1, r3
 800fd66:	4610      	mov	r0, r2
 800fd68:	f000 fafc 	bl	8010364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2201      	movs	r2, #1
 800fd70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2201      	movs	r2, #1
 800fd78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2201      	movs	r2, #1
 800fd80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2201      	movs	r2, #1
 800fd88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2201      	movs	r2, #1
 800fd90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2201      	movs	r2, #1
 800fd98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2201      	movs	r2, #1
 800fda0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2201      	movs	r2, #1
 800fda8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2201      	movs	r2, #1
 800fdb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2201      	movs	r2, #1
 800fdb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fdcc:	2300      	movs	r3, #0
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	3708      	adds	r7, #8
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	bd80      	pop	{r7, pc}
	...

0800fdd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b085      	sub	sp, #20
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	2b01      	cmp	r3, #1
 800fdea:	d001      	beq.n	800fdf0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800fdec:	2301      	movs	r3, #1
 800fdee:	e02e      	b.n	800fe4e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2202      	movs	r2, #2
 800fdf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	4a17      	ldr	r2, [pc, #92]	; (800fe5c <HAL_TIM_Base_Start+0x84>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d004      	beq.n	800fe0c <HAL_TIM_Base_Start+0x34>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe0a:	d115      	bne.n	800fe38 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	689a      	ldr	r2, [r3, #8]
 800fe12:	4b13      	ldr	r3, [pc, #76]	; (800fe60 <HAL_TIM_Base_Start+0x88>)
 800fe14:	4013      	ands	r3, r2
 800fe16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	2b06      	cmp	r3, #6
 800fe1c:	d015      	beq.n	800fe4a <HAL_TIM_Base_Start+0x72>
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe24:	d011      	beq.n	800fe4a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	f042 0201 	orr.w	r2, r2, #1
 800fe34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe36:	e008      	b.n	800fe4a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	681a      	ldr	r2, [r3, #0]
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	f042 0201 	orr.w	r2, r2, #1
 800fe46:	601a      	str	r2, [r3, #0]
 800fe48:	e000      	b.n	800fe4c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fe4c:	2300      	movs	r3, #0
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3714      	adds	r7, #20
 800fe52:	46bd      	mov	sp, r7
 800fe54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe58:	4770      	bx	lr
 800fe5a:	bf00      	nop
 800fe5c:	40012c00 	.word	0x40012c00
 800fe60:	00010007 	.word	0x00010007

0800fe64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b085      	sub	sp, #20
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe72:	b2db      	uxtb	r3, r3
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d001      	beq.n	800fe7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fe78:	2301      	movs	r3, #1
 800fe7a:	e036      	b.n	800feea <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2202      	movs	r2, #2
 800fe80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	68da      	ldr	r2, [r3, #12]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	f042 0201 	orr.w	r2, r2, #1
 800fe92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4a17      	ldr	r2, [pc, #92]	; (800fef8 <HAL_TIM_Base_Start_IT+0x94>)
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d004      	beq.n	800fea8 <HAL_TIM_Base_Start_IT+0x44>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fea6:	d115      	bne.n	800fed4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	689a      	ldr	r2, [r3, #8]
 800feae:	4b13      	ldr	r3, [pc, #76]	; (800fefc <HAL_TIM_Base_Start_IT+0x98>)
 800feb0:	4013      	ands	r3, r2
 800feb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2b06      	cmp	r3, #6
 800feb8:	d015      	beq.n	800fee6 <HAL_TIM_Base_Start_IT+0x82>
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fec0:	d011      	beq.n	800fee6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	681a      	ldr	r2, [r3, #0]
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	f042 0201 	orr.w	r2, r2, #1
 800fed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fed2:	e008      	b.n	800fee6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	681a      	ldr	r2, [r3, #0]
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	f042 0201 	orr.w	r2, r2, #1
 800fee2:	601a      	str	r2, [r3, #0]
 800fee4:	e000      	b.n	800fee8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fee6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fee8:	2300      	movs	r3, #0
}
 800feea:	4618      	mov	r0, r3
 800feec:	3714      	adds	r7, #20
 800feee:	46bd      	mov	sp, r7
 800fef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef4:	4770      	bx	lr
 800fef6:	bf00      	nop
 800fef8:	40012c00 	.word	0x40012c00
 800fefc:	00010007 	.word	0x00010007

0800ff00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	68da      	ldr	r2, [r3, #12]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	f022 0201 	bic.w	r2, r2, #1
 800ff16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	6a1a      	ldr	r2, [r3, #32]
 800ff1e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ff22:	4013      	ands	r3, r2
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d10f      	bne.n	800ff48 <HAL_TIM_Base_Stop_IT+0x48>
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	6a1a      	ldr	r2, [r3, #32]
 800ff2e:	f240 4344 	movw	r3, #1092	; 0x444
 800ff32:	4013      	ands	r3, r2
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d107      	bne.n	800ff48 <HAL_TIM_Base_Stop_IT+0x48>
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	681a      	ldr	r2, [r3, #0]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	f022 0201 	bic.w	r2, r2, #1
 800ff46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2201      	movs	r2, #1
 800ff4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ff50:	2300      	movs	r3, #0
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	370c      	adds	r7, #12
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr

0800ff5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ff5e:	b580      	push	{r7, lr}
 800ff60:	b084      	sub	sp, #16
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	68db      	ldr	r3, [r3, #12]
 800ff6c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	691b      	ldr	r3, [r3, #16]
 800ff74:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	f003 0302 	and.w	r3, r3, #2
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d020      	beq.n	800ffc2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	f003 0302 	and.w	r3, r3, #2
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d01b      	beq.n	800ffc2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	f06f 0202 	mvn.w	r2, #2
 800ff92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2201      	movs	r2, #1
 800ff98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	699b      	ldr	r3, [r3, #24]
 800ffa0:	f003 0303 	and.w	r3, r3, #3
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d003      	beq.n	800ffb0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f000 f9bc 	bl	8010326 <HAL_TIM_IC_CaptureCallback>
 800ffae:	e005      	b.n	800ffbc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f000 f9ae 	bl	8010312 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f000 f9bf 	bl	801033a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	f003 0304 	and.w	r3, r3, #4
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d020      	beq.n	801000e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	f003 0304 	and.w	r3, r3, #4
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d01b      	beq.n	801000e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	f06f 0204 	mvn.w	r2, #4
 800ffde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2202      	movs	r2, #2
 800ffe4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	699b      	ldr	r3, [r3, #24]
 800ffec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d003      	beq.n	800fffc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f000 f996 	bl	8010326 <HAL_TIM_IC_CaptureCallback>
 800fffa:	e005      	b.n	8010008 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f000 f988 	bl	8010312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f000 f999 	bl	801033a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2200      	movs	r2, #0
 801000c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	f003 0308 	and.w	r3, r3, #8
 8010014:	2b00      	cmp	r3, #0
 8010016:	d020      	beq.n	801005a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	f003 0308 	and.w	r3, r3, #8
 801001e:	2b00      	cmp	r3, #0
 8010020:	d01b      	beq.n	801005a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f06f 0208 	mvn.w	r2, #8
 801002a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2204      	movs	r2, #4
 8010030:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	69db      	ldr	r3, [r3, #28]
 8010038:	f003 0303 	and.w	r3, r3, #3
 801003c:	2b00      	cmp	r3, #0
 801003e:	d003      	beq.n	8010048 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f000 f970 	bl	8010326 <HAL_TIM_IC_CaptureCallback>
 8010046:	e005      	b.n	8010054 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f000 f962 	bl	8010312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 f973 	bl	801033a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2200      	movs	r2, #0
 8010058:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	f003 0310 	and.w	r3, r3, #16
 8010060:	2b00      	cmp	r3, #0
 8010062:	d020      	beq.n	80100a6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	f003 0310 	and.w	r3, r3, #16
 801006a:	2b00      	cmp	r3, #0
 801006c:	d01b      	beq.n	80100a6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	f06f 0210 	mvn.w	r2, #16
 8010076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2208      	movs	r2, #8
 801007c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	69db      	ldr	r3, [r3, #28]
 8010084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010088:	2b00      	cmp	r3, #0
 801008a:	d003      	beq.n	8010094 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f000 f94a 	bl	8010326 <HAL_TIM_IC_CaptureCallback>
 8010092:	e005      	b.n	80100a0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f000 f93c 	bl	8010312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f000 f94d 	bl	801033a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2200      	movs	r2, #0
 80100a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	f003 0301 	and.w	r3, r3, #1
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d00c      	beq.n	80100ca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f003 0301 	and.w	r3, r3, #1
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d007      	beq.n	80100ca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f06f 0201 	mvn.w	r2, #1
 80100c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f000 f91a 	bl	80102fe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d104      	bne.n	80100de <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d00c      	beq.n	80100f8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d007      	beq.n	80100f8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80100f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f000 faac 	bl	8010650 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d00c      	beq.n	801011c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010108:	2b00      	cmp	r3, #0
 801010a:	d007      	beq.n	801011c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f000 faa4 	bl	8010664 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010122:	2b00      	cmp	r3, #0
 8010124:	d00c      	beq.n	8010140 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801012c:	2b00      	cmp	r3, #0
 801012e:	d007      	beq.n	8010140 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f000 f907 	bl	801034e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	f003 0320 	and.w	r3, r3, #32
 8010146:	2b00      	cmp	r3, #0
 8010148:	d00c      	beq.n	8010164 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	f003 0320 	and.w	r3, r3, #32
 8010150:	2b00      	cmp	r3, #0
 8010152:	d007      	beq.n	8010164 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	f06f 0220 	mvn.w	r2, #32
 801015c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f000 fa6c 	bl	801063c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010164:	bf00      	nop
 8010166:	3710      	adds	r7, #16
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b084      	sub	sp, #16
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010176:	2300      	movs	r3, #0
 8010178:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010180:	2b01      	cmp	r3, #1
 8010182:	d101      	bne.n	8010188 <HAL_TIM_ConfigClockSource+0x1c>
 8010184:	2302      	movs	r3, #2
 8010186:	e0b6      	b.n	80102f6 <HAL_TIM_ConfigClockSource+0x18a>
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2201      	movs	r2, #1
 801018c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2202      	movs	r2, #2
 8010194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	689b      	ldr	r3, [r3, #8]
 801019e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80101a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80101aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80101b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	68ba      	ldr	r2, [r7, #8]
 80101ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80101c4:	d03e      	beq.n	8010244 <HAL_TIM_ConfigClockSource+0xd8>
 80101c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80101ca:	f200 8087 	bhi.w	80102dc <HAL_TIM_ConfigClockSource+0x170>
 80101ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101d2:	f000 8086 	beq.w	80102e2 <HAL_TIM_ConfigClockSource+0x176>
 80101d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101da:	d87f      	bhi.n	80102dc <HAL_TIM_ConfigClockSource+0x170>
 80101dc:	2b70      	cmp	r3, #112	; 0x70
 80101de:	d01a      	beq.n	8010216 <HAL_TIM_ConfigClockSource+0xaa>
 80101e0:	2b70      	cmp	r3, #112	; 0x70
 80101e2:	d87b      	bhi.n	80102dc <HAL_TIM_ConfigClockSource+0x170>
 80101e4:	2b60      	cmp	r3, #96	; 0x60
 80101e6:	d050      	beq.n	801028a <HAL_TIM_ConfigClockSource+0x11e>
 80101e8:	2b60      	cmp	r3, #96	; 0x60
 80101ea:	d877      	bhi.n	80102dc <HAL_TIM_ConfigClockSource+0x170>
 80101ec:	2b50      	cmp	r3, #80	; 0x50
 80101ee:	d03c      	beq.n	801026a <HAL_TIM_ConfigClockSource+0xfe>
 80101f0:	2b50      	cmp	r3, #80	; 0x50
 80101f2:	d873      	bhi.n	80102dc <HAL_TIM_ConfigClockSource+0x170>
 80101f4:	2b40      	cmp	r3, #64	; 0x40
 80101f6:	d058      	beq.n	80102aa <HAL_TIM_ConfigClockSource+0x13e>
 80101f8:	2b40      	cmp	r3, #64	; 0x40
 80101fa:	d86f      	bhi.n	80102dc <HAL_TIM_ConfigClockSource+0x170>
 80101fc:	2b30      	cmp	r3, #48	; 0x30
 80101fe:	d064      	beq.n	80102ca <HAL_TIM_ConfigClockSource+0x15e>
 8010200:	2b30      	cmp	r3, #48	; 0x30
 8010202:	d86b      	bhi.n	80102dc <HAL_TIM_ConfigClockSource+0x170>
 8010204:	2b20      	cmp	r3, #32
 8010206:	d060      	beq.n	80102ca <HAL_TIM_ConfigClockSource+0x15e>
 8010208:	2b20      	cmp	r3, #32
 801020a:	d867      	bhi.n	80102dc <HAL_TIM_ConfigClockSource+0x170>
 801020c:	2b00      	cmp	r3, #0
 801020e:	d05c      	beq.n	80102ca <HAL_TIM_ConfigClockSource+0x15e>
 8010210:	2b10      	cmp	r3, #16
 8010212:	d05a      	beq.n	80102ca <HAL_TIM_ConfigClockSource+0x15e>
 8010214:	e062      	b.n	80102dc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010226:	f000 f989 	bl	801053c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	689b      	ldr	r3, [r3, #8]
 8010230:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010238:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	68ba      	ldr	r2, [r7, #8]
 8010240:	609a      	str	r2, [r3, #8]
      break;
 8010242:	e04f      	b.n	80102e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010254:	f000 f972 	bl	801053c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	689a      	ldr	r2, [r3, #8]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010266:	609a      	str	r2, [r3, #8]
      break;
 8010268:	e03c      	b.n	80102e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010276:	461a      	mov	r2, r3
 8010278:	f000 f8e4 	bl	8010444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	2150      	movs	r1, #80	; 0x50
 8010282:	4618      	mov	r0, r3
 8010284:	f000 f93d 	bl	8010502 <TIM_ITRx_SetConfig>
      break;
 8010288:	e02c      	b.n	80102e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010296:	461a      	mov	r2, r3
 8010298:	f000 f903 	bl	80104a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	2160      	movs	r1, #96	; 0x60
 80102a2:	4618      	mov	r0, r3
 80102a4:	f000 f92d 	bl	8010502 <TIM_ITRx_SetConfig>
      break;
 80102a8:	e01c      	b.n	80102e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80102b6:	461a      	mov	r2, r3
 80102b8:	f000 f8c4 	bl	8010444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	2140      	movs	r1, #64	; 0x40
 80102c2:	4618      	mov	r0, r3
 80102c4:	f000 f91d 	bl	8010502 <TIM_ITRx_SetConfig>
      break;
 80102c8:	e00c      	b.n	80102e4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	4619      	mov	r1, r3
 80102d4:	4610      	mov	r0, r2
 80102d6:	f000 f914 	bl	8010502 <TIM_ITRx_SetConfig>
      break;
 80102da:	e003      	b.n	80102e4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80102dc:	2301      	movs	r3, #1
 80102de:	73fb      	strb	r3, [r7, #15]
      break;
 80102e0:	e000      	b.n	80102e4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80102e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2201      	movs	r2, #1
 80102e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2200      	movs	r2, #0
 80102f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80102f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3710      	adds	r7, #16
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}

080102fe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80102fe:	b480      	push	{r7}
 8010300:	b083      	sub	sp, #12
 8010302:	af00      	add	r7, sp, #0
 8010304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010306:	bf00      	nop
 8010308:	370c      	adds	r7, #12
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr

08010312 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010312:	b480      	push	{r7}
 8010314:	b083      	sub	sp, #12
 8010316:	af00      	add	r7, sp, #0
 8010318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801031a:	bf00      	nop
 801031c:	370c      	adds	r7, #12
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr

08010326 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010326:	b480      	push	{r7}
 8010328:	b083      	sub	sp, #12
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801032e:	bf00      	nop
 8010330:	370c      	adds	r7, #12
 8010332:	46bd      	mov	sp, r7
 8010334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010338:	4770      	bx	lr

0801033a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801033a:	b480      	push	{r7}
 801033c:	b083      	sub	sp, #12
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010342:	bf00      	nop
 8010344:	370c      	adds	r7, #12
 8010346:	46bd      	mov	sp, r7
 8010348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034c:	4770      	bx	lr

0801034e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801034e:	b480      	push	{r7}
 8010350:	b083      	sub	sp, #12
 8010352:	af00      	add	r7, sp, #0
 8010354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010356:	bf00      	nop
 8010358:	370c      	adds	r7, #12
 801035a:	46bd      	mov	sp, r7
 801035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010360:	4770      	bx	lr
	...

08010364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010364:	b480      	push	{r7}
 8010366:	b085      	sub	sp, #20
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	4a30      	ldr	r2, [pc, #192]	; (8010438 <TIM_Base_SetConfig+0xd4>)
 8010378:	4293      	cmp	r3, r2
 801037a:	d003      	beq.n	8010384 <TIM_Base_SetConfig+0x20>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010382:	d108      	bne.n	8010396 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801038a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	68fa      	ldr	r2, [r7, #12]
 8010392:	4313      	orrs	r3, r2
 8010394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	4a27      	ldr	r2, [pc, #156]	; (8010438 <TIM_Base_SetConfig+0xd4>)
 801039a:	4293      	cmp	r3, r2
 801039c:	d00b      	beq.n	80103b6 <TIM_Base_SetConfig+0x52>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80103a4:	d007      	beq.n	80103b6 <TIM_Base_SetConfig+0x52>
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	4a24      	ldr	r2, [pc, #144]	; (801043c <TIM_Base_SetConfig+0xd8>)
 80103aa:	4293      	cmp	r3, r2
 80103ac:	d003      	beq.n	80103b6 <TIM_Base_SetConfig+0x52>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	4a23      	ldr	r2, [pc, #140]	; (8010440 <TIM_Base_SetConfig+0xdc>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d108      	bne.n	80103c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80103bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	68db      	ldr	r3, [r3, #12]
 80103c2:	68fa      	ldr	r2, [r7, #12]
 80103c4:	4313      	orrs	r3, r2
 80103c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	695b      	ldr	r3, [r3, #20]
 80103d2:	4313      	orrs	r3, r2
 80103d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	68fa      	ldr	r2, [r7, #12]
 80103da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	689a      	ldr	r2, [r3, #8]
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	681a      	ldr	r2, [r3, #0]
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	4a12      	ldr	r2, [pc, #72]	; (8010438 <TIM_Base_SetConfig+0xd4>)
 80103f0:	4293      	cmp	r3, r2
 80103f2:	d007      	beq.n	8010404 <TIM_Base_SetConfig+0xa0>
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	4a11      	ldr	r2, [pc, #68]	; (801043c <TIM_Base_SetConfig+0xd8>)
 80103f8:	4293      	cmp	r3, r2
 80103fa:	d003      	beq.n	8010404 <TIM_Base_SetConfig+0xa0>
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	4a10      	ldr	r2, [pc, #64]	; (8010440 <TIM_Base_SetConfig+0xdc>)
 8010400:	4293      	cmp	r3, r2
 8010402:	d103      	bne.n	801040c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	691a      	ldr	r2, [r3, #16]
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2201      	movs	r2, #1
 8010410:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	691b      	ldr	r3, [r3, #16]
 8010416:	f003 0301 	and.w	r3, r3, #1
 801041a:	2b01      	cmp	r3, #1
 801041c:	d105      	bne.n	801042a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	691b      	ldr	r3, [r3, #16]
 8010422:	f023 0201 	bic.w	r2, r3, #1
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	611a      	str	r2, [r3, #16]
  }
}
 801042a:	bf00      	nop
 801042c:	3714      	adds	r7, #20
 801042e:	46bd      	mov	sp, r7
 8010430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010434:	4770      	bx	lr
 8010436:	bf00      	nop
 8010438:	40012c00 	.word	0x40012c00
 801043c:	40014400 	.word	0x40014400
 8010440:	40014800 	.word	0x40014800

08010444 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010444:	b480      	push	{r7}
 8010446:	b087      	sub	sp, #28
 8010448:	af00      	add	r7, sp, #0
 801044a:	60f8      	str	r0, [r7, #12]
 801044c:	60b9      	str	r1, [r7, #8]
 801044e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	6a1b      	ldr	r3, [r3, #32]
 8010454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	6a1b      	ldr	r3, [r3, #32]
 801045a:	f023 0201 	bic.w	r2, r3, #1
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	699b      	ldr	r3, [r3, #24]
 8010466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801046e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	011b      	lsls	r3, r3, #4
 8010474:	693a      	ldr	r2, [r7, #16]
 8010476:	4313      	orrs	r3, r2
 8010478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801047a:	697b      	ldr	r3, [r7, #20]
 801047c:	f023 030a 	bic.w	r3, r3, #10
 8010480:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010482:	697a      	ldr	r2, [r7, #20]
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	4313      	orrs	r3, r2
 8010488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	693a      	ldr	r2, [r7, #16]
 801048e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	697a      	ldr	r2, [r7, #20]
 8010494:	621a      	str	r2, [r3, #32]
}
 8010496:	bf00      	nop
 8010498:	371c      	adds	r7, #28
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr

080104a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80104a2:	b480      	push	{r7}
 80104a4:	b087      	sub	sp, #28
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	60f8      	str	r0, [r7, #12]
 80104aa:	60b9      	str	r1, [r7, #8]
 80104ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	6a1b      	ldr	r3, [r3, #32]
 80104b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	6a1b      	ldr	r3, [r3, #32]
 80104b8:	f023 0210 	bic.w	r2, r3, #16
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	699b      	ldr	r3, [r3, #24]
 80104c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80104cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	031b      	lsls	r3, r3, #12
 80104d2:	693a      	ldr	r2, [r7, #16]
 80104d4:	4313      	orrs	r3, r2
 80104d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80104de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	011b      	lsls	r3, r3, #4
 80104e4:	697a      	ldr	r2, [r7, #20]
 80104e6:	4313      	orrs	r3, r2
 80104e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	693a      	ldr	r2, [r7, #16]
 80104ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	697a      	ldr	r2, [r7, #20]
 80104f4:	621a      	str	r2, [r3, #32]
}
 80104f6:	bf00      	nop
 80104f8:	371c      	adds	r7, #28
 80104fa:	46bd      	mov	sp, r7
 80104fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010500:	4770      	bx	lr

08010502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010502:	b480      	push	{r7}
 8010504:	b085      	sub	sp, #20
 8010506:	af00      	add	r7, sp, #0
 8010508:	6078      	str	r0, [r7, #4]
 801050a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	689b      	ldr	r3, [r3, #8]
 8010510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8010518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801051c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801051e:	683a      	ldr	r2, [r7, #0]
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	4313      	orrs	r3, r2
 8010524:	f043 0307 	orr.w	r3, r3, #7
 8010528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	68fa      	ldr	r2, [r7, #12]
 801052e:	609a      	str	r2, [r3, #8]
}
 8010530:	bf00      	nop
 8010532:	3714      	adds	r7, #20
 8010534:	46bd      	mov	sp, r7
 8010536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053a:	4770      	bx	lr

0801053c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801053c:	b480      	push	{r7}
 801053e:	b087      	sub	sp, #28
 8010540:	af00      	add	r7, sp, #0
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	60b9      	str	r1, [r7, #8]
 8010546:	607a      	str	r2, [r7, #4]
 8010548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	689b      	ldr	r3, [r3, #8]
 801054e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	021a      	lsls	r2, r3, #8
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	431a      	orrs	r2, r3
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	4313      	orrs	r3, r2
 8010564:	697a      	ldr	r2, [r7, #20]
 8010566:	4313      	orrs	r3, r2
 8010568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	697a      	ldr	r2, [r7, #20]
 801056e:	609a      	str	r2, [r3, #8]
}
 8010570:	bf00      	nop
 8010572:	371c      	adds	r7, #28
 8010574:	46bd      	mov	sp, r7
 8010576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057a:	4770      	bx	lr

0801057c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801057c:	b480      	push	{r7}
 801057e:	b085      	sub	sp, #20
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
 8010584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801058c:	2b01      	cmp	r3, #1
 801058e:	d101      	bne.n	8010594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010590:	2302      	movs	r3, #2
 8010592:	e04a      	b.n	801062a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2201      	movs	r2, #1
 8010598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2202      	movs	r2, #2
 80105a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	689b      	ldr	r3, [r3, #8]
 80105b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	4a1f      	ldr	r2, [pc, #124]	; (8010638 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80105ba:	4293      	cmp	r3, r2
 80105bc:	d108      	bne.n	80105d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80105c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	685b      	ldr	r3, [r3, #4]
 80105ca:	68fa      	ldr	r2, [r7, #12]
 80105cc:	4313      	orrs	r3, r2
 80105ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	68fa      	ldr	r2, [r7, #12]
 80105de:	4313      	orrs	r3, r2
 80105e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	68fa      	ldr	r2, [r7, #12]
 80105e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	4a12      	ldr	r2, [pc, #72]	; (8010638 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d004      	beq.n	80105fe <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105fc:	d10c      	bne.n	8010618 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010604:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	689b      	ldr	r3, [r3, #8]
 801060a:	68ba      	ldr	r2, [r7, #8]
 801060c:	4313      	orrs	r3, r2
 801060e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	68ba      	ldr	r2, [r7, #8]
 8010616:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2201      	movs	r2, #1
 801061c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2200      	movs	r2, #0
 8010624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010628:	2300      	movs	r3, #0
}
 801062a:	4618      	mov	r0, r3
 801062c:	3714      	adds	r7, #20
 801062e:	46bd      	mov	sp, r7
 8010630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010634:	4770      	bx	lr
 8010636:	bf00      	nop
 8010638:	40012c00 	.word	0x40012c00

0801063c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801063c:	b480      	push	{r7}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010644:	bf00      	nop
 8010646:	370c      	adds	r7, #12
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	4770      	bx	lr

08010650 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010650:	b480      	push	{r7}
 8010652:	b083      	sub	sp, #12
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010658:	bf00      	nop
 801065a:	370c      	adds	r7, #12
 801065c:	46bd      	mov	sp, r7
 801065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010662:	4770      	bx	lr

08010664 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010664:	b480      	push	{r7}
 8010666:	b083      	sub	sp, #12
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801066c:	bf00      	nop
 801066e:	370c      	adds	r7, #12
 8010670:	46bd      	mov	sp, r7
 8010672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010676:	4770      	bx	lr

08010678 <LL_RCC_GetUSARTClockSource>:
{
 8010678:	b480      	push	{r7}
 801067a:	b083      	sub	sp, #12
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8010680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010684:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	4013      	ands	r3, r2
}
 801068c:	4618      	mov	r0, r3
 801068e:	370c      	adds	r7, #12
 8010690:	46bd      	mov	sp, r7
 8010692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010696:	4770      	bx	lr

08010698 <LL_RCC_GetLPUARTClockSource>:
{
 8010698:	b480      	push	{r7}
 801069a:	b083      	sub	sp, #12
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80106a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80106a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	4013      	ands	r3, r2
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	370c      	adds	r7, #12
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr

080106b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d101      	bne.n	80106ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80106c6:	2301      	movs	r3, #1
 80106c8:	e042      	b.n	8010750 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d106      	bne.n	80106e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2200      	movs	r2, #0
 80106d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f7f7 fb71 	bl	8007dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2224      	movs	r2, #36	; 0x24
 80106e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	681a      	ldr	r2, [r3, #0]
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	f022 0201 	bic.w	r2, r2, #1
 80106f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d002      	beq.n	8010708 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 ffc6 	bl	8011694 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f000 fd9b 	bl	8011244 <UART_SetConfig>
 801070e:	4603      	mov	r3, r0
 8010710:	2b01      	cmp	r3, #1
 8010712:	d101      	bne.n	8010718 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010714:	2301      	movs	r3, #1
 8010716:	e01b      	b.n	8010750 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	685a      	ldr	r2, [r3, #4]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010726:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	689a      	ldr	r2, [r3, #8]
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010736:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	681a      	ldr	r2, [r3, #0]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	f042 0201 	orr.w	r2, r2, #1
 8010746:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f001 f845 	bl	80117d8 <UART_CheckIdleState>
 801074e:	4603      	mov	r3, r0
}
 8010750:	4618      	mov	r0, r3
 8010752:	3708      	adds	r7, #8
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d101      	bne.n	801076a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8010766:	2301      	movs	r3, #1
 8010768:	e031      	b.n	80107ce <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2224      	movs	r2, #36	; 0x24
 801076e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	681a      	ldr	r2, [r3, #0]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	f022 0201 	bic.w	r2, r2, #1
 8010780:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	2200      	movs	r2, #0
 8010788:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	2200      	movs	r2, #0
 8010790:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	2200      	movs	r2, #0
 8010798:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f7f7 fbbc 	bl	8007f18 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2200      	movs	r2, #0
 80107a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2200      	movs	r2, #0
 80107ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2200      	movs	r2, #0
 80107b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2200      	movs	r2, #0
 80107bc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2200      	movs	r2, #0
 80107c2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2200      	movs	r2, #0
 80107c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80107cc:	2300      	movs	r3, #0
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	3708      	adds	r7, #8
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}

080107d6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80107d6:	b580      	push	{r7, lr}
 80107d8:	b08a      	sub	sp, #40	; 0x28
 80107da:	af02      	add	r7, sp, #8
 80107dc:	60f8      	str	r0, [r7, #12]
 80107de:	60b9      	str	r1, [r7, #8]
 80107e0:	603b      	str	r3, [r7, #0]
 80107e2:	4613      	mov	r3, r2
 80107e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107ec:	2b20      	cmp	r3, #32
 80107ee:	d17b      	bne.n	80108e8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d002      	beq.n	80107fc <HAL_UART_Transmit+0x26>
 80107f6:	88fb      	ldrh	r3, [r7, #6]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d101      	bne.n	8010800 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80107fc:	2301      	movs	r3, #1
 80107fe:	e074      	b.n	80108ea <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2200      	movs	r2, #0
 8010804:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	2221      	movs	r2, #33	; 0x21
 801080c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010810:	f7f7 fd28 	bl	8008264 <HAL_GetTick>
 8010814:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	88fa      	ldrh	r2, [r7, #6]
 801081a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	88fa      	ldrh	r2, [r7, #6]
 8010822:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	689b      	ldr	r3, [r3, #8]
 801082a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801082e:	d108      	bne.n	8010842 <HAL_UART_Transmit+0x6c>
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	691b      	ldr	r3, [r3, #16]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d104      	bne.n	8010842 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010838:	2300      	movs	r3, #0
 801083a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	61bb      	str	r3, [r7, #24]
 8010840:	e003      	b.n	801084a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010846:	2300      	movs	r3, #0
 8010848:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801084a:	e030      	b.n	80108ae <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	9300      	str	r3, [sp, #0]
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	2200      	movs	r2, #0
 8010854:	2180      	movs	r1, #128	; 0x80
 8010856:	68f8      	ldr	r0, [r7, #12]
 8010858:	f001 f868 	bl	801192c <UART_WaitOnFlagUntilTimeout>
 801085c:	4603      	mov	r3, r0
 801085e:	2b00      	cmp	r3, #0
 8010860:	d005      	beq.n	801086e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	2220      	movs	r2, #32
 8010866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801086a:	2303      	movs	r3, #3
 801086c:	e03d      	b.n	80108ea <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801086e:	69fb      	ldr	r3, [r7, #28]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d10b      	bne.n	801088c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010874:	69bb      	ldr	r3, [r7, #24]
 8010876:	881b      	ldrh	r3, [r3, #0]
 8010878:	461a      	mov	r2, r3
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010882:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010884:	69bb      	ldr	r3, [r7, #24]
 8010886:	3302      	adds	r3, #2
 8010888:	61bb      	str	r3, [r7, #24]
 801088a:	e007      	b.n	801089c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801088c:	69fb      	ldr	r3, [r7, #28]
 801088e:	781a      	ldrb	r2, [r3, #0]
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010896:	69fb      	ldr	r3, [r7, #28]
 8010898:	3301      	adds	r3, #1
 801089a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80108a2:	b29b      	uxth	r3, r3
 80108a4:	3b01      	subs	r3, #1
 80108a6:	b29a      	uxth	r2, r3
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80108b4:	b29b      	uxth	r3, r3
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d1c8      	bne.n	801084c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	9300      	str	r3, [sp, #0]
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	2200      	movs	r2, #0
 80108c2:	2140      	movs	r1, #64	; 0x40
 80108c4:	68f8      	ldr	r0, [r7, #12]
 80108c6:	f001 f831 	bl	801192c <UART_WaitOnFlagUntilTimeout>
 80108ca:	4603      	mov	r3, r0
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d005      	beq.n	80108dc <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2220      	movs	r2, #32
 80108d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80108d8:	2303      	movs	r3, #3
 80108da:	e006      	b.n	80108ea <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	2220      	movs	r2, #32
 80108e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80108e4:	2300      	movs	r3, #0
 80108e6:	e000      	b.n	80108ea <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80108e8:	2302      	movs	r3, #2
  }
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3720      	adds	r7, #32
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
	...

080108f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b08a      	sub	sp, #40	; 0x28
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	60f8      	str	r0, [r7, #12]
 80108fc:	60b9      	str	r1, [r7, #8]
 80108fe:	4613      	mov	r3, r2
 8010900:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010908:	2b20      	cmp	r3, #32
 801090a:	d137      	bne.n	801097c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d002      	beq.n	8010918 <HAL_UART_Receive_DMA+0x24>
 8010912:	88fb      	ldrh	r3, [r7, #6]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d101      	bne.n	801091c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010918:	2301      	movs	r3, #1
 801091a:	e030      	b.n	801097e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	2200      	movs	r2, #0
 8010920:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	4a18      	ldr	r2, [pc, #96]	; (8010988 <HAL_UART_Receive_DMA+0x94>)
 8010928:	4293      	cmp	r3, r2
 801092a:	d01f      	beq.n	801096c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	685b      	ldr	r3, [r3, #4]
 8010932:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010936:	2b00      	cmp	r3, #0
 8010938:	d018      	beq.n	801096c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	e853 3f00 	ldrex	r3, [r3]
 8010946:	613b      	str	r3, [r7, #16]
   return(result);
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801094e:	627b      	str	r3, [r7, #36]	; 0x24
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	461a      	mov	r2, r3
 8010956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010958:	623b      	str	r3, [r7, #32]
 801095a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801095c:	69f9      	ldr	r1, [r7, #28]
 801095e:	6a3a      	ldr	r2, [r7, #32]
 8010960:	e841 2300 	strex	r3, r2, [r1]
 8010964:	61bb      	str	r3, [r7, #24]
   return(result);
 8010966:	69bb      	ldr	r3, [r7, #24]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d1e6      	bne.n	801093a <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801096c:	88fb      	ldrh	r3, [r7, #6]
 801096e:	461a      	mov	r2, r3
 8010970:	68b9      	ldr	r1, [r7, #8]
 8010972:	68f8      	ldr	r0, [r7, #12]
 8010974:	f001 f848 	bl	8011a08 <UART_Start_Receive_DMA>
 8010978:	4603      	mov	r3, r0
 801097a:	e000      	b.n	801097e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801097c:	2302      	movs	r3, #2
  }
}
 801097e:	4618      	mov	r0, r3
 8010980:	3728      	adds	r7, #40	; 0x28
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}
 8010986:	bf00      	nop
 8010988:	40008000 	.word	0x40008000

0801098c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b0a0      	sub	sp, #128	; 0x80
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801099a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801099c:	e853 3f00 	ldrex	r3, [r3]
 80109a0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80109a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109a4:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80109a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	461a      	mov	r2, r3
 80109b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80109b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80109b4:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109b6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80109b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80109ba:	e841 2300 	strex	r3, r2, [r1]
 80109be:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80109c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d1e6      	bne.n	8010994 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	3308      	adds	r3, #8
 80109cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109d0:	e853 3f00 	ldrex	r3, [r3]
 80109d4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80109d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109d8:	f023 5384 	bic.w	r3, r3, #276824064	; 0x10800000
 80109dc:	f023 0301 	bic.w	r3, r3, #1
 80109e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	3308      	adds	r3, #8
 80109e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80109ea:	657a      	str	r2, [r7, #84]	; 0x54
 80109ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80109f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80109f2:	e841 2300 	strex	r3, r2, [r1]
 80109f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80109f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d1e3      	bne.n	80109c6 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a02:	2b01      	cmp	r3, #1
 8010a04:	d118      	bne.n	8010a38 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a0e:	e853 3f00 	ldrex	r3, [r3]
 8010a12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a16:	f023 0310 	bic.w	r3, r3, #16
 8010a1a:	677b      	str	r3, [r7, #116]	; 0x74
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	461a      	mov	r2, r3
 8010a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a24:	643b      	str	r3, [r7, #64]	; 0x40
 8010a26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a2c:	e841 2300 	strex	r3, r2, [r1]
 8010a30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d1e6      	bne.n	8010a06 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	689b      	ldr	r3, [r3, #8]
 8010a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a42:	2b80      	cmp	r3, #128	; 0x80
 8010a44:	d137      	bne.n	8010ab6 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	3308      	adds	r3, #8
 8010a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a4e:	6a3b      	ldr	r3, [r7, #32]
 8010a50:	e853 3f00 	ldrex	r3, [r3]
 8010a54:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a56:	69fb      	ldr	r3, [r7, #28]
 8010a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a5c:	673b      	str	r3, [r7, #112]	; 0x70
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	3308      	adds	r3, #8
 8010a64:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010a66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010a68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a6e:	e841 2300 	strex	r3, r2, [r1]
 8010a72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d1e5      	bne.n	8010a46 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d019      	beq.n	8010ab6 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a86:	2200      	movs	r2, #0
 8010a88:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7f8 ffdf 	bl	8009a52 <HAL_DMA_Abort>
 8010a94:	4603      	mov	r3, r0
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d00d      	beq.n	8010ab6 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7f9 f944 	bl	8009d2c <HAL_DMA_GetError>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	2b20      	cmp	r3, #32
 8010aa8:	d105      	bne.n	8010ab6 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2210      	movs	r2, #16
 8010aae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8010ab2:	2303      	movs	r3, #3
 8010ab4:	e073      	b.n	8010b9e <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	689b      	ldr	r3, [r3, #8]
 8010abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ac0:	2b40      	cmp	r3, #64	; 0x40
 8010ac2:	d13b      	bne.n	8010b3c <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	3308      	adds	r3, #8
 8010aca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	e853 3f00 	ldrex	r3, [r3]
 8010ad2:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ada:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	3308      	adds	r3, #8
 8010ae2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010ae4:	61ba      	str	r2, [r7, #24]
 8010ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ae8:	6979      	ldr	r1, [r7, #20]
 8010aea:	69ba      	ldr	r2, [r7, #24]
 8010aec:	e841 2300 	strex	r3, r2, [r1]
 8010af0:	613b      	str	r3, [r7, #16]
   return(result);
 8010af2:	693b      	ldr	r3, [r7, #16]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d1e5      	bne.n	8010ac4 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d01c      	beq.n	8010b3c <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b08:	2200      	movs	r2, #0
 8010b0a:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7f8 ff9d 	bl	8009a52 <HAL_DMA_Abort>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d00e      	beq.n	8010b3c <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b24:	4618      	mov	r0, r3
 8010b26:	f7f9 f901 	bl	8009d2c <HAL_DMA_GetError>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	2b20      	cmp	r3, #32
 8010b2e:	d105      	bne.n	8010b3c <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2210      	movs	r2, #16
 8010b34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8010b38:	2303      	movs	r3, #3
 8010b3a:	e030      	b.n	8010b9e <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2200      	movs	r2, #0
 8010b40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2200      	movs	r2, #0
 8010b48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	220f      	movs	r2, #15
 8010b52:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010b5c:	d107      	bne.n	8010b6e <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	699a      	ldr	r2, [r3, #24]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f042 0210 	orr.w	r2, r2, #16
 8010b6c:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	699a      	ldr	r2, [r3, #24]
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f042 0208 	orr.w	r2, r2, #8
 8010b7c:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2220      	movs	r2, #32
 8010b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2220      	movs	r2, #32
 8010b8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2200      	movs	r2, #0
 8010b92:	66da      	str	r2, [r3, #108]	; 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2200      	movs	r2, #0
 8010b98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8010b9c:	2300      	movs	r3, #0
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3780      	adds	r7, #128	; 0x80
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}
	...

08010ba8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b0ba      	sub	sp, #232	; 0xe8
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	69db      	ldr	r3, [r3, #28]
 8010bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	689b      	ldr	r3, [r3, #8]
 8010bca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010bce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010bd2:	f640 030f 	movw	r3, #2063	; 0x80f
 8010bd6:	4013      	ands	r3, r2
 8010bd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010bdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d11b      	bne.n	8010c1c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010be8:	f003 0320 	and.w	r3, r3, #32
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d015      	beq.n	8010c1c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bf4:	f003 0320 	and.w	r3, r3, #32
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d105      	bne.n	8010c08 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d009      	beq.n	8010c1c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	f000 82e3 	beq.w	80111d8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	4798      	blx	r3
      }
      return;
 8010c1a:	e2dd      	b.n	80111d8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010c1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	f000 8123 	beq.w	8010e6c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010c26:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010c2a:	4b8d      	ldr	r3, [pc, #564]	; (8010e60 <HAL_UART_IRQHandler+0x2b8>)
 8010c2c:	4013      	ands	r3, r2
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d106      	bne.n	8010c40 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010c32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010c36:	4b8b      	ldr	r3, [pc, #556]	; (8010e64 <HAL_UART_IRQHandler+0x2bc>)
 8010c38:	4013      	ands	r3, r2
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	f000 8116 	beq.w	8010e6c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c44:	f003 0301 	and.w	r3, r3, #1
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d011      	beq.n	8010c70 <HAL_UART_IRQHandler+0xc8>
 8010c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d00b      	beq.n	8010c70 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	2201      	movs	r2, #1
 8010c5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c66:	f043 0201 	orr.w	r2, r3, #1
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c74:	f003 0302 	and.w	r3, r3, #2
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d011      	beq.n	8010ca0 <HAL_UART_IRQHandler+0xf8>
 8010c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c80:	f003 0301 	and.w	r3, r3, #1
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d00b      	beq.n	8010ca0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	2202      	movs	r2, #2
 8010c8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c96:	f043 0204 	orr.w	r2, r3, #4
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ca4:	f003 0304 	and.w	r3, r3, #4
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d011      	beq.n	8010cd0 <HAL_UART_IRQHandler+0x128>
 8010cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010cb0:	f003 0301 	and.w	r3, r3, #1
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d00b      	beq.n	8010cd0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	2204      	movs	r2, #4
 8010cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cc6:	f043 0202 	orr.w	r2, r3, #2
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010cd4:	f003 0308 	and.w	r3, r3, #8
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d017      	beq.n	8010d0c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ce0:	f003 0320 	and.w	r3, r3, #32
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d105      	bne.n	8010cf4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010ce8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010cec:	4b5c      	ldr	r3, [pc, #368]	; (8010e60 <HAL_UART_IRQHandler+0x2b8>)
 8010cee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d00b      	beq.n	8010d0c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2208      	movs	r2, #8
 8010cfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d02:	f043 0208 	orr.w	r2, r3, #8
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d012      	beq.n	8010d3e <HAL_UART_IRQHandler+0x196>
 8010d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d00c      	beq.n	8010d3e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010d2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d34:	f043 0220 	orr.w	r2, r3, #32
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	f000 8249 	beq.w	80111dc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d4e:	f003 0320 	and.w	r3, r3, #32
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d013      	beq.n	8010d7e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d5a:	f003 0320 	and.w	r3, r3, #32
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d105      	bne.n	8010d6e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d007      	beq.n	8010d7e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d003      	beq.n	8010d7e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	689b      	ldr	r3, [r3, #8]
 8010d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d92:	2b40      	cmp	r3, #64	; 0x40
 8010d94:	d005      	beq.n	8010da2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010d9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d054      	beq.n	8010e4c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010da2:	6878      	ldr	r0, [r7, #4]
 8010da4:	f000 ff17 	bl	8011bd6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	689b      	ldr	r3, [r3, #8]
 8010dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010db2:	2b40      	cmp	r3, #64	; 0x40
 8010db4:	d146      	bne.n	8010e44 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	3308      	adds	r3, #8
 8010dbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010dc4:	e853 3f00 	ldrex	r3, [r3]
 8010dc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010dcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	3308      	adds	r3, #8
 8010dde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010de2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010de6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010dee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010df2:	e841 2300 	strex	r3, r2, [r1]
 8010df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d1d9      	bne.n	8010db6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d017      	beq.n	8010e3c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e12:	4a15      	ldr	r2, [pc, #84]	; (8010e68 <HAL_UART_IRQHandler+0x2c0>)
 8010e14:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f7f8 fe77 	bl	8009b10 <HAL_DMA_Abort_IT>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d019      	beq.n	8010e5c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e30:	687a      	ldr	r2, [r7, #4]
 8010e32:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010e36:	4610      	mov	r0, r2
 8010e38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e3a:	e00f      	b.n	8010e5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f000 f9eb 	bl	8011218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e42:	e00b      	b.n	8010e5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010e44:	6878      	ldr	r0, [r7, #4]
 8010e46:	f000 f9e7 	bl	8011218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e4a:	e007      	b.n	8010e5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f000 f9e3 	bl	8011218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2200      	movs	r2, #0
 8010e56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010e5a:	e1bf      	b.n	80111dc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e5c:	bf00      	nop
    return;
 8010e5e:	e1bd      	b.n	80111dc <HAL_UART_IRQHandler+0x634>
 8010e60:	10000001 	.word	0x10000001
 8010e64:	04000120 	.word	0x04000120
 8010e68:	08011e8d 	.word	0x08011e8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e70:	2b01      	cmp	r3, #1
 8010e72:	f040 8153 	bne.w	801111c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e7a:	f003 0310 	and.w	r3, r3, #16
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	f000 814c 	beq.w	801111c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e88:	f003 0310 	and.w	r3, r3, #16
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	f000 8145 	beq.w	801111c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	2210      	movs	r2, #16
 8010e98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	689b      	ldr	r3, [r3, #8]
 8010ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ea4:	2b40      	cmp	r3, #64	; 0x40
 8010ea6:	f040 80bb 	bne.w	8011020 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	685b      	ldr	r3, [r3, #4]
 8010eb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010eb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	f000 818f 	beq.w	80111e0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010ec8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	f080 8187 	bcs.w	80111e0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010ed8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f003 0320 	and.w	r3, r3, #32
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	f040 8087 	bne.w	8010ffe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010efc:	e853 3f00 	ldrex	r3, [r3]
 8010f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	461a      	mov	r2, r3
 8010f16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010f1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010f1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010f26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010f2a:	e841 2300 	strex	r3, r2, [r1]
 8010f2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d1da      	bne.n	8010ef0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	3308      	adds	r3, #8
 8010f40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f44:	e853 3f00 	ldrex	r3, [r3]
 8010f48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010f4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010f4c:	f023 0301 	bic.w	r3, r3, #1
 8010f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	3308      	adds	r3, #8
 8010f5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010f5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010f62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010f66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010f6a:	e841 2300 	strex	r3, r2, [r1]
 8010f6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d1e1      	bne.n	8010f3a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	3308      	adds	r3, #8
 8010f7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f80:	e853 3f00 	ldrex	r3, [r3]
 8010f84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	3308      	adds	r3, #8
 8010f96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010f9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010f9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010fa0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010fa2:	e841 2300 	strex	r3, r2, [r1]
 8010fa6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d1e3      	bne.n	8010f76 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2220      	movs	r2, #32
 8010fb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2200      	movs	r2, #0
 8010fba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fc4:	e853 3f00 	ldrex	r3, [r3]
 8010fc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fcc:	f023 0310 	bic.w	r3, r3, #16
 8010fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	461a      	mov	r2, r3
 8010fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010fde:	65bb      	str	r3, [r7, #88]	; 0x58
 8010fe0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fe2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010fe4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010fe6:	e841 2300 	strex	r3, r2, [r1]
 8010fea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d1e4      	bne.n	8010fbc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7f8 fd2a 	bl	8009a52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2202      	movs	r2, #2
 8011002:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011010:	b29b      	uxth	r3, r3
 8011012:	1ad3      	subs	r3, r2, r3
 8011014:	b29b      	uxth	r3, r3
 8011016:	4619      	mov	r1, r3
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	f000 f907 	bl	801122c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801101e:	e0df      	b.n	80111e0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801102c:	b29b      	uxth	r3, r3
 801102e:	1ad3      	subs	r3, r2, r3
 8011030:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801103a:	b29b      	uxth	r3, r3
 801103c:	2b00      	cmp	r3, #0
 801103e:	f000 80d1 	beq.w	80111e4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8011042:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011046:	2b00      	cmp	r3, #0
 8011048:	f000 80cc 	beq.w	80111e4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011054:	e853 3f00 	ldrex	r3, [r3]
 8011058:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801105c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011060:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	461a      	mov	r2, r3
 801106a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801106e:	647b      	str	r3, [r7, #68]	; 0x44
 8011070:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011072:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011074:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011076:	e841 2300 	strex	r3, r2, [r1]
 801107a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801107c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801107e:	2b00      	cmp	r3, #0
 8011080:	d1e4      	bne.n	801104c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	3308      	adds	r3, #8
 8011088:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108c:	e853 3f00 	ldrex	r3, [r3]
 8011090:	623b      	str	r3, [r7, #32]
   return(result);
 8011092:	6a3b      	ldr	r3, [r7, #32]
 8011094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011098:	f023 0301 	bic.w	r3, r3, #1
 801109c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	3308      	adds	r3, #8
 80110a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80110aa:	633a      	str	r2, [r7, #48]	; 0x30
 80110ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80110b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110b2:	e841 2300 	strex	r3, r2, [r1]
 80110b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80110b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d1e1      	bne.n	8011082 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2220      	movs	r2, #32
 80110c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	2200      	movs	r2, #0
 80110ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2200      	movs	r2, #0
 80110d0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110d8:	693b      	ldr	r3, [r7, #16]
 80110da:	e853 3f00 	ldrex	r3, [r3]
 80110de:	60fb      	str	r3, [r7, #12]
   return(result);
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	f023 0310 	bic.w	r3, r3, #16
 80110e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	461a      	mov	r2, r3
 80110f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80110f4:	61fb      	str	r3, [r7, #28]
 80110f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110f8:	69b9      	ldr	r1, [r7, #24]
 80110fa:	69fa      	ldr	r2, [r7, #28]
 80110fc:	e841 2300 	strex	r3, r2, [r1]
 8011100:	617b      	str	r3, [r7, #20]
   return(result);
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d1e4      	bne.n	80110d2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2202      	movs	r2, #2
 801110c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801110e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011112:	4619      	mov	r1, r3
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f000 f889 	bl	801122c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801111a:	e063      	b.n	80111e4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801111c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011124:	2b00      	cmp	r3, #0
 8011126:	d00e      	beq.n	8011146 <HAL_UART_IRQHandler+0x59e>
 8011128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801112c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011130:	2b00      	cmp	r3, #0
 8011132:	d008      	beq.n	8011146 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801113c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f000 fee5 	bl	8011f0e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011144:	e051      	b.n	80111ea <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801114e:	2b00      	cmp	r3, #0
 8011150:	d014      	beq.n	801117c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801115a:	2b00      	cmp	r3, #0
 801115c:	d105      	bne.n	801116a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801115e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011162:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011166:	2b00      	cmp	r3, #0
 8011168:	d008      	beq.n	801117c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801116e:	2b00      	cmp	r3, #0
 8011170:	d03a      	beq.n	80111e8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	4798      	blx	r3
    }
    return;
 801117a:	e035      	b.n	80111e8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801117c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011184:	2b00      	cmp	r3, #0
 8011186:	d009      	beq.n	801119c <HAL_UART_IRQHandler+0x5f4>
 8011188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801118c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011190:	2b00      	cmp	r3, #0
 8011192:	d003      	beq.n	801119c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f000 fe8f 	bl	8011eb8 <UART_EndTransmit_IT>
    return;
 801119a:	e026      	b.n	80111ea <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801119c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d009      	beq.n	80111bc <HAL_UART_IRQHandler+0x614>
 80111a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80111ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d003      	beq.n	80111bc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80111b4:	6878      	ldr	r0, [r7, #4]
 80111b6:	f000 febe 	bl	8011f36 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80111ba:	e016      	b.n	80111ea <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80111bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d010      	beq.n	80111ea <HAL_UART_IRQHandler+0x642>
 80111c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	da0c      	bge.n	80111ea <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f000 fea6 	bl	8011f22 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80111d6:	e008      	b.n	80111ea <HAL_UART_IRQHandler+0x642>
      return;
 80111d8:	bf00      	nop
 80111da:	e006      	b.n	80111ea <HAL_UART_IRQHandler+0x642>
    return;
 80111dc:	bf00      	nop
 80111de:	e004      	b.n	80111ea <HAL_UART_IRQHandler+0x642>
      return;
 80111e0:	bf00      	nop
 80111e2:	e002      	b.n	80111ea <HAL_UART_IRQHandler+0x642>
      return;
 80111e4:	bf00      	nop
 80111e6:	e000      	b.n	80111ea <HAL_UART_IRQHandler+0x642>
    return;
 80111e8:	bf00      	nop
  }
}
 80111ea:	37e8      	adds	r7, #232	; 0xe8
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}

080111f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80111f0:	b480      	push	{r7}
 80111f2:	b083      	sub	sp, #12
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80111f8:	bf00      	nop
 80111fa:	370c      	adds	r7, #12
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr

08011204 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011204:	b480      	push	{r7}
 8011206:	b083      	sub	sp, #12
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801120c:	bf00      	nop
 801120e:	370c      	adds	r7, #12
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr

08011218 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011218:	b480      	push	{r7}
 801121a:	b083      	sub	sp, #12
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011220:	bf00      	nop
 8011222:	370c      	adds	r7, #12
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr

0801122c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801122c:	b480      	push	{r7}
 801122e:	b083      	sub	sp, #12
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
 8011234:	460b      	mov	r3, r1
 8011236:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011238:	bf00      	nop
 801123a:	370c      	adds	r7, #12
 801123c:	46bd      	mov	sp, r7
 801123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011242:	4770      	bx	lr

08011244 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011248:	b08c      	sub	sp, #48	; 0x30
 801124a:	af00      	add	r7, sp, #0
 801124c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801124e:	2300      	movs	r3, #0
 8011250:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	689a      	ldr	r2, [r3, #8]
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	691b      	ldr	r3, [r3, #16]
 801125c:	431a      	orrs	r2, r3
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	695b      	ldr	r3, [r3, #20]
 8011262:	431a      	orrs	r2, r3
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	69db      	ldr	r3, [r3, #28]
 8011268:	4313      	orrs	r3, r2
 801126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	681a      	ldr	r2, [r3, #0]
 8011272:	4baf      	ldr	r3, [pc, #700]	; (8011530 <UART_SetConfig+0x2ec>)
 8011274:	4013      	ands	r3, r2
 8011276:	697a      	ldr	r2, [r7, #20]
 8011278:	6812      	ldr	r2, [r2, #0]
 801127a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801127c:	430b      	orrs	r3, r1
 801127e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	68da      	ldr	r2, [r3, #12]
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	430a      	orrs	r2, r1
 8011294:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	699b      	ldr	r3, [r3, #24]
 801129a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	4aa4      	ldr	r2, [pc, #656]	; (8011534 <UART_SetConfig+0x2f0>)
 80112a2:	4293      	cmp	r3, r2
 80112a4:	d004      	beq.n	80112b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	6a1b      	ldr	r3, [r3, #32]
 80112aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112ac:	4313      	orrs	r3, r2
 80112ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80112b0:	697b      	ldr	r3, [r7, #20]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	689b      	ldr	r3, [r3, #8]
 80112b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80112ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80112be:	697a      	ldr	r2, [r7, #20]
 80112c0:	6812      	ldr	r2, [r2, #0]
 80112c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80112c4:	430b      	orrs	r3, r1
 80112c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80112c8:	697b      	ldr	r3, [r7, #20]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ce:	f023 010f 	bic.w	r1, r3, #15
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	430a      	orrs	r2, r1
 80112dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	4a95      	ldr	r2, [pc, #596]	; (8011538 <UART_SetConfig+0x2f4>)
 80112e4:	4293      	cmp	r3, r2
 80112e6:	d125      	bne.n	8011334 <UART_SetConfig+0xf0>
 80112e8:	2003      	movs	r0, #3
 80112ea:	f7ff f9c5 	bl	8010678 <LL_RCC_GetUSARTClockSource>
 80112ee:	4603      	mov	r3, r0
 80112f0:	2b03      	cmp	r3, #3
 80112f2:	d81b      	bhi.n	801132c <UART_SetConfig+0xe8>
 80112f4:	a201      	add	r2, pc, #4	; (adr r2, 80112fc <UART_SetConfig+0xb8>)
 80112f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112fa:	bf00      	nop
 80112fc:	0801130d 	.word	0x0801130d
 8011300:	0801131d 	.word	0x0801131d
 8011304:	08011315 	.word	0x08011315
 8011308:	08011325 	.word	0x08011325
 801130c:	2301      	movs	r3, #1
 801130e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011312:	e042      	b.n	801139a <UART_SetConfig+0x156>
 8011314:	2302      	movs	r3, #2
 8011316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801131a:	e03e      	b.n	801139a <UART_SetConfig+0x156>
 801131c:	2304      	movs	r3, #4
 801131e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011322:	e03a      	b.n	801139a <UART_SetConfig+0x156>
 8011324:	2308      	movs	r3, #8
 8011326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801132a:	e036      	b.n	801139a <UART_SetConfig+0x156>
 801132c:	2310      	movs	r3, #16
 801132e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011332:	e032      	b.n	801139a <UART_SetConfig+0x156>
 8011334:	697b      	ldr	r3, [r7, #20]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	4a7e      	ldr	r2, [pc, #504]	; (8011534 <UART_SetConfig+0x2f0>)
 801133a:	4293      	cmp	r3, r2
 801133c:	d12a      	bne.n	8011394 <UART_SetConfig+0x150>
 801133e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8011342:	f7ff f9a9 	bl	8010698 <LL_RCC_GetLPUARTClockSource>
 8011346:	4603      	mov	r3, r0
 8011348:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801134c:	d01a      	beq.n	8011384 <UART_SetConfig+0x140>
 801134e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011352:	d81b      	bhi.n	801138c <UART_SetConfig+0x148>
 8011354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011358:	d00c      	beq.n	8011374 <UART_SetConfig+0x130>
 801135a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801135e:	d815      	bhi.n	801138c <UART_SetConfig+0x148>
 8011360:	2b00      	cmp	r3, #0
 8011362:	d003      	beq.n	801136c <UART_SetConfig+0x128>
 8011364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011368:	d008      	beq.n	801137c <UART_SetConfig+0x138>
 801136a:	e00f      	b.n	801138c <UART_SetConfig+0x148>
 801136c:	2300      	movs	r3, #0
 801136e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011372:	e012      	b.n	801139a <UART_SetConfig+0x156>
 8011374:	2302      	movs	r3, #2
 8011376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801137a:	e00e      	b.n	801139a <UART_SetConfig+0x156>
 801137c:	2304      	movs	r3, #4
 801137e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011382:	e00a      	b.n	801139a <UART_SetConfig+0x156>
 8011384:	2308      	movs	r3, #8
 8011386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801138a:	e006      	b.n	801139a <UART_SetConfig+0x156>
 801138c:	2310      	movs	r3, #16
 801138e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011392:	e002      	b.n	801139a <UART_SetConfig+0x156>
 8011394:	2310      	movs	r3, #16
 8011396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	4a65      	ldr	r2, [pc, #404]	; (8011534 <UART_SetConfig+0x2f0>)
 80113a0:	4293      	cmp	r3, r2
 80113a2:	f040 8097 	bne.w	80114d4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80113a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80113aa:	2b08      	cmp	r3, #8
 80113ac:	d823      	bhi.n	80113f6 <UART_SetConfig+0x1b2>
 80113ae:	a201      	add	r2, pc, #4	; (adr r2, 80113b4 <UART_SetConfig+0x170>)
 80113b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113b4:	080113d9 	.word	0x080113d9
 80113b8:	080113f7 	.word	0x080113f7
 80113bc:	080113e1 	.word	0x080113e1
 80113c0:	080113f7 	.word	0x080113f7
 80113c4:	080113e7 	.word	0x080113e7
 80113c8:	080113f7 	.word	0x080113f7
 80113cc:	080113f7 	.word	0x080113f7
 80113d0:	080113f7 	.word	0x080113f7
 80113d4:	080113ef 	.word	0x080113ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80113d8:	f7fc fd06 	bl	800dde8 <HAL_RCC_GetPCLK1Freq>
 80113dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80113de:	e010      	b.n	8011402 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80113e0:	4b56      	ldr	r3, [pc, #344]	; (801153c <UART_SetConfig+0x2f8>)
 80113e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80113e4:	e00d      	b.n	8011402 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80113e6:	f7fc fc7f 	bl	800dce8 <HAL_RCC_GetSysClockFreq>
 80113ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80113ec:	e009      	b.n	8011402 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80113ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80113f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80113f4:	e005      	b.n	8011402 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80113f6:	2300      	movs	r3, #0
 80113f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80113fa:	2301      	movs	r3, #1
 80113fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011400:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011404:	2b00      	cmp	r3, #0
 8011406:	f000 812b 	beq.w	8011660 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801140e:	4a4c      	ldr	r2, [pc, #304]	; (8011540 <UART_SetConfig+0x2fc>)
 8011410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011414:	461a      	mov	r2, r3
 8011416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011418:	fbb3 f3f2 	udiv	r3, r3, r2
 801141c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	685a      	ldr	r2, [r3, #4]
 8011422:	4613      	mov	r3, r2
 8011424:	005b      	lsls	r3, r3, #1
 8011426:	4413      	add	r3, r2
 8011428:	69ba      	ldr	r2, [r7, #24]
 801142a:	429a      	cmp	r2, r3
 801142c:	d305      	bcc.n	801143a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	685b      	ldr	r3, [r3, #4]
 8011432:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011434:	69ba      	ldr	r2, [r7, #24]
 8011436:	429a      	cmp	r2, r3
 8011438:	d903      	bls.n	8011442 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801143a:	2301      	movs	r3, #1
 801143c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8011440:	e10e      	b.n	8011660 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011444:	2200      	movs	r2, #0
 8011446:	60bb      	str	r3, [r7, #8]
 8011448:	60fa      	str	r2, [r7, #12]
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801144e:	4a3c      	ldr	r2, [pc, #240]	; (8011540 <UART_SetConfig+0x2fc>)
 8011450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011454:	b29b      	uxth	r3, r3
 8011456:	2200      	movs	r2, #0
 8011458:	603b      	str	r3, [r7, #0]
 801145a:	607a      	str	r2, [r7, #4]
 801145c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011460:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011464:	f7ef fbe8 	bl	8000c38 <__aeabi_uldivmod>
 8011468:	4602      	mov	r2, r0
 801146a:	460b      	mov	r3, r1
 801146c:	4610      	mov	r0, r2
 801146e:	4619      	mov	r1, r3
 8011470:	f04f 0200 	mov.w	r2, #0
 8011474:	f04f 0300 	mov.w	r3, #0
 8011478:	020b      	lsls	r3, r1, #8
 801147a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801147e:	0202      	lsls	r2, r0, #8
 8011480:	6979      	ldr	r1, [r7, #20]
 8011482:	6849      	ldr	r1, [r1, #4]
 8011484:	0849      	lsrs	r1, r1, #1
 8011486:	2000      	movs	r0, #0
 8011488:	460c      	mov	r4, r1
 801148a:	4605      	mov	r5, r0
 801148c:	eb12 0804 	adds.w	r8, r2, r4
 8011490:	eb43 0905 	adc.w	r9, r3, r5
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	2200      	movs	r2, #0
 801149a:	469a      	mov	sl, r3
 801149c:	4693      	mov	fp, r2
 801149e:	4652      	mov	r2, sl
 80114a0:	465b      	mov	r3, fp
 80114a2:	4640      	mov	r0, r8
 80114a4:	4649      	mov	r1, r9
 80114a6:	f7ef fbc7 	bl	8000c38 <__aeabi_uldivmod>
 80114aa:	4602      	mov	r2, r0
 80114ac:	460b      	mov	r3, r1
 80114ae:	4613      	mov	r3, r2
 80114b0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80114b2:	6a3b      	ldr	r3, [r7, #32]
 80114b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80114b8:	d308      	bcc.n	80114cc <UART_SetConfig+0x288>
 80114ba:	6a3b      	ldr	r3, [r7, #32]
 80114bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80114c0:	d204      	bcs.n	80114cc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80114c2:	697b      	ldr	r3, [r7, #20]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	6a3a      	ldr	r2, [r7, #32]
 80114c8:	60da      	str	r2, [r3, #12]
 80114ca:	e0c9      	b.n	8011660 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80114cc:	2301      	movs	r3, #1
 80114ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80114d2:	e0c5      	b.n	8011660 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	69db      	ldr	r3, [r3, #28]
 80114d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80114dc:	d16d      	bne.n	80115ba <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80114de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80114e2:	3b01      	subs	r3, #1
 80114e4:	2b07      	cmp	r3, #7
 80114e6:	d82d      	bhi.n	8011544 <UART_SetConfig+0x300>
 80114e8:	a201      	add	r2, pc, #4	; (adr r2, 80114f0 <UART_SetConfig+0x2ac>)
 80114ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ee:	bf00      	nop
 80114f0:	08011511 	.word	0x08011511
 80114f4:	08011519 	.word	0x08011519
 80114f8:	08011545 	.word	0x08011545
 80114fc:	0801151f 	.word	0x0801151f
 8011500:	08011545 	.word	0x08011545
 8011504:	08011545 	.word	0x08011545
 8011508:	08011545 	.word	0x08011545
 801150c:	08011527 	.word	0x08011527
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011510:	f7fc fc80 	bl	800de14 <HAL_RCC_GetPCLK2Freq>
 8011514:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011516:	e01b      	b.n	8011550 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011518:	4b08      	ldr	r3, [pc, #32]	; (801153c <UART_SetConfig+0x2f8>)
 801151a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801151c:	e018      	b.n	8011550 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801151e:	f7fc fbe3 	bl	800dce8 <HAL_RCC_GetSysClockFreq>
 8011522:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011524:	e014      	b.n	8011550 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801152a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801152c:	e010      	b.n	8011550 <UART_SetConfig+0x30c>
 801152e:	bf00      	nop
 8011530:	cfff69f3 	.word	0xcfff69f3
 8011534:	40008000 	.word	0x40008000
 8011538:	40013800 	.word	0x40013800
 801153c:	00f42400 	.word	0x00f42400
 8011540:	08023864 	.word	0x08023864
      default:
        pclk = 0U;
 8011544:	2300      	movs	r3, #0
 8011546:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8011548:	2301      	movs	r3, #1
 801154a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801154e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011552:	2b00      	cmp	r3, #0
 8011554:	f000 8084 	beq.w	8011660 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011558:	697b      	ldr	r3, [r7, #20]
 801155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801155c:	4a4b      	ldr	r2, [pc, #300]	; (801168c <UART_SetConfig+0x448>)
 801155e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011562:	461a      	mov	r2, r3
 8011564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011566:	fbb3 f3f2 	udiv	r3, r3, r2
 801156a:	005a      	lsls	r2, r3, #1
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	685b      	ldr	r3, [r3, #4]
 8011570:	085b      	lsrs	r3, r3, #1
 8011572:	441a      	add	r2, r3
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	685b      	ldr	r3, [r3, #4]
 8011578:	fbb2 f3f3 	udiv	r3, r2, r3
 801157c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801157e:	6a3b      	ldr	r3, [r7, #32]
 8011580:	2b0f      	cmp	r3, #15
 8011582:	d916      	bls.n	80115b2 <UART_SetConfig+0x36e>
 8011584:	6a3b      	ldr	r3, [r7, #32]
 8011586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801158a:	d212      	bcs.n	80115b2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801158c:	6a3b      	ldr	r3, [r7, #32]
 801158e:	b29b      	uxth	r3, r3
 8011590:	f023 030f 	bic.w	r3, r3, #15
 8011594:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011596:	6a3b      	ldr	r3, [r7, #32]
 8011598:	085b      	lsrs	r3, r3, #1
 801159a:	b29b      	uxth	r3, r3
 801159c:	f003 0307 	and.w	r3, r3, #7
 80115a0:	b29a      	uxth	r2, r3
 80115a2:	8bfb      	ldrh	r3, [r7, #30]
 80115a4:	4313      	orrs	r3, r2
 80115a6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	8bfa      	ldrh	r2, [r7, #30]
 80115ae:	60da      	str	r2, [r3, #12]
 80115b0:	e056      	b.n	8011660 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80115b2:	2301      	movs	r3, #1
 80115b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80115b8:	e052      	b.n	8011660 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80115ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80115be:	3b01      	subs	r3, #1
 80115c0:	2b07      	cmp	r3, #7
 80115c2:	d822      	bhi.n	801160a <UART_SetConfig+0x3c6>
 80115c4:	a201      	add	r2, pc, #4	; (adr r2, 80115cc <UART_SetConfig+0x388>)
 80115c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115ca:	bf00      	nop
 80115cc:	080115ed 	.word	0x080115ed
 80115d0:	080115f5 	.word	0x080115f5
 80115d4:	0801160b 	.word	0x0801160b
 80115d8:	080115fb 	.word	0x080115fb
 80115dc:	0801160b 	.word	0x0801160b
 80115e0:	0801160b 	.word	0x0801160b
 80115e4:	0801160b 	.word	0x0801160b
 80115e8:	08011603 	.word	0x08011603
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80115ec:	f7fc fc12 	bl	800de14 <HAL_RCC_GetPCLK2Freq>
 80115f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80115f2:	e010      	b.n	8011616 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80115f4:	4b26      	ldr	r3, [pc, #152]	; (8011690 <UART_SetConfig+0x44c>)
 80115f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80115f8:	e00d      	b.n	8011616 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80115fa:	f7fc fb75 	bl	800dce8 <HAL_RCC_GetSysClockFreq>
 80115fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011600:	e009      	b.n	8011616 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011606:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011608:	e005      	b.n	8011616 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801160a:	2300      	movs	r3, #0
 801160c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801160e:	2301      	movs	r3, #1
 8011610:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011614:	bf00      	nop
    }

    if (pclk != 0U)
 8011616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011618:	2b00      	cmp	r3, #0
 801161a:	d021      	beq.n	8011660 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011620:	4a1a      	ldr	r2, [pc, #104]	; (801168c <UART_SetConfig+0x448>)
 8011622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011626:	461a      	mov	r2, r3
 8011628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801162a:	fbb3 f2f2 	udiv	r2, r3, r2
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	085b      	lsrs	r3, r3, #1
 8011634:	441a      	add	r2, r3
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	685b      	ldr	r3, [r3, #4]
 801163a:	fbb2 f3f3 	udiv	r3, r2, r3
 801163e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011640:	6a3b      	ldr	r3, [r7, #32]
 8011642:	2b0f      	cmp	r3, #15
 8011644:	d909      	bls.n	801165a <UART_SetConfig+0x416>
 8011646:	6a3b      	ldr	r3, [r7, #32]
 8011648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801164c:	d205      	bcs.n	801165a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801164e:	6a3b      	ldr	r3, [r7, #32]
 8011650:	b29a      	uxth	r2, r3
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	60da      	str	r2, [r3, #12]
 8011658:	e002      	b.n	8011660 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801165a:	2301      	movs	r3, #1
 801165c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	2201      	movs	r2, #1
 8011664:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	2201      	movs	r2, #1
 801166c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	2200      	movs	r2, #0
 8011674:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	2200      	movs	r2, #0
 801167a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801167c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8011680:	4618      	mov	r0, r3
 8011682:	3730      	adds	r7, #48	; 0x30
 8011684:	46bd      	mov	sp, r7
 8011686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801168a:	bf00      	nop
 801168c:	08023864 	.word	0x08023864
 8011690:	00f42400 	.word	0x00f42400

08011694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011694:	b480      	push	{r7}
 8011696:	b083      	sub	sp, #12
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116a0:	f003 0308 	and.w	r3, r3, #8
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d00a      	beq.n	80116be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	430a      	orrs	r2, r1
 80116bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116c2:	f003 0301 	and.w	r3, r3, #1
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d00a      	beq.n	80116e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	685b      	ldr	r3, [r3, #4]
 80116d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	430a      	orrs	r2, r1
 80116de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116e4:	f003 0302 	and.w	r3, r3, #2
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d00a      	beq.n	8011702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	685b      	ldr	r3, [r3, #4]
 80116f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	430a      	orrs	r2, r1
 8011700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011706:	f003 0304 	and.w	r3, r3, #4
 801170a:	2b00      	cmp	r3, #0
 801170c:	d00a      	beq.n	8011724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	685b      	ldr	r3, [r3, #4]
 8011714:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	430a      	orrs	r2, r1
 8011722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011728:	f003 0310 	and.w	r3, r3, #16
 801172c:	2b00      	cmp	r3, #0
 801172e:	d00a      	beq.n	8011746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	689b      	ldr	r3, [r3, #8]
 8011736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	430a      	orrs	r2, r1
 8011744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801174a:	f003 0320 	and.w	r3, r3, #32
 801174e:	2b00      	cmp	r3, #0
 8011750:	d00a      	beq.n	8011768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	689b      	ldr	r3, [r3, #8]
 8011758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	430a      	orrs	r2, r1
 8011766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801176c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011770:	2b00      	cmp	r3, #0
 8011772:	d01a      	beq.n	80117aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	685b      	ldr	r3, [r3, #4]
 801177a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	430a      	orrs	r2, r1
 8011788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801178e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011792:	d10a      	bne.n	80117aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	430a      	orrs	r2, r1
 80117a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d00a      	beq.n	80117cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	685b      	ldr	r3, [r3, #4]
 80117bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	430a      	orrs	r2, r1
 80117ca:	605a      	str	r2, [r3, #4]
  }
}
 80117cc:	bf00      	nop
 80117ce:	370c      	adds	r7, #12
 80117d0:	46bd      	mov	sp, r7
 80117d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d6:	4770      	bx	lr

080117d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b098      	sub	sp, #96	; 0x60
 80117dc:	af02      	add	r7, sp, #8
 80117de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2200      	movs	r2, #0
 80117e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80117e8:	f7f6 fd3c 	bl	8008264 <HAL_GetTick>
 80117ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	f003 0308 	and.w	r3, r3, #8
 80117f8:	2b08      	cmp	r3, #8
 80117fa:	d12f      	bne.n	801185c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80117fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011800:	9300      	str	r3, [sp, #0]
 8011802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011804:	2200      	movs	r2, #0
 8011806:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f000 f88e 	bl	801192c <UART_WaitOnFlagUntilTimeout>
 8011810:	4603      	mov	r3, r0
 8011812:	2b00      	cmp	r3, #0
 8011814:	d022      	beq.n	801185c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801181c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801181e:	e853 3f00 	ldrex	r3, [r3]
 8011822:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801182a:	653b      	str	r3, [r7, #80]	; 0x50
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	461a      	mov	r2, r3
 8011832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011834:	647b      	str	r3, [r7, #68]	; 0x44
 8011836:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011838:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801183a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801183c:	e841 2300 	strex	r3, r2, [r1]
 8011840:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011844:	2b00      	cmp	r3, #0
 8011846:	d1e6      	bne.n	8011816 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2220      	movs	r2, #32
 801184c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2200      	movs	r2, #0
 8011854:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011858:	2303      	movs	r3, #3
 801185a:	e063      	b.n	8011924 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	f003 0304 	and.w	r3, r3, #4
 8011866:	2b04      	cmp	r3, #4
 8011868:	d149      	bne.n	80118fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801186a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801186e:	9300      	str	r3, [sp, #0]
 8011870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011872:	2200      	movs	r2, #0
 8011874:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f000 f857 	bl	801192c <UART_WaitOnFlagUntilTimeout>
 801187e:	4603      	mov	r3, r0
 8011880:	2b00      	cmp	r3, #0
 8011882:	d03c      	beq.n	80118fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188c:	e853 3f00 	ldrex	r3, [r3]
 8011890:	623b      	str	r3, [r7, #32]
   return(result);
 8011892:	6a3b      	ldr	r3, [r7, #32]
 8011894:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011898:	64fb      	str	r3, [r7, #76]	; 0x4c
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	461a      	mov	r2, r3
 80118a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118a2:	633b      	str	r3, [r7, #48]	; 0x30
 80118a4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80118a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118aa:	e841 2300 	strex	r3, r2, [r1]
 80118ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80118b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d1e6      	bne.n	8011884 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	3308      	adds	r3, #8
 80118bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118be:	693b      	ldr	r3, [r7, #16]
 80118c0:	e853 3f00 	ldrex	r3, [r3]
 80118c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	f023 0301 	bic.w	r3, r3, #1
 80118cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	3308      	adds	r3, #8
 80118d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80118d6:	61fa      	str	r2, [r7, #28]
 80118d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118da:	69b9      	ldr	r1, [r7, #24]
 80118dc:	69fa      	ldr	r2, [r7, #28]
 80118de:	e841 2300 	strex	r3, r2, [r1]
 80118e2:	617b      	str	r3, [r7, #20]
   return(result);
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d1e5      	bne.n	80118b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2220      	movs	r2, #32
 80118ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	2200      	movs	r2, #0
 80118f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80118fa:	2303      	movs	r3, #3
 80118fc:	e012      	b.n	8011924 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2220      	movs	r2, #32
 8011902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2220      	movs	r2, #32
 801190a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2200      	movs	r2, #0
 8011912:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2200      	movs	r2, #0
 8011918:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	2200      	movs	r2, #0
 801191e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011922:	2300      	movs	r3, #0
}
 8011924:	4618      	mov	r0, r3
 8011926:	3758      	adds	r7, #88	; 0x58
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}

0801192c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b084      	sub	sp, #16
 8011930:	af00      	add	r7, sp, #0
 8011932:	60f8      	str	r0, [r7, #12]
 8011934:	60b9      	str	r1, [r7, #8]
 8011936:	603b      	str	r3, [r7, #0]
 8011938:	4613      	mov	r3, r2
 801193a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801193c:	e04f      	b.n	80119de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801193e:	69bb      	ldr	r3, [r7, #24]
 8011940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011944:	d04b      	beq.n	80119de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011946:	f7f6 fc8d 	bl	8008264 <HAL_GetTick>
 801194a:	4602      	mov	r2, r0
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	1ad3      	subs	r3, r2, r3
 8011950:	69ba      	ldr	r2, [r7, #24]
 8011952:	429a      	cmp	r2, r3
 8011954:	d302      	bcc.n	801195c <UART_WaitOnFlagUntilTimeout+0x30>
 8011956:	69bb      	ldr	r3, [r7, #24]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d101      	bne.n	8011960 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801195c:	2303      	movs	r3, #3
 801195e:	e04e      	b.n	80119fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f003 0304 	and.w	r3, r3, #4
 801196a:	2b00      	cmp	r3, #0
 801196c:	d037      	beq.n	80119de <UART_WaitOnFlagUntilTimeout+0xb2>
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	2b80      	cmp	r3, #128	; 0x80
 8011972:	d034      	beq.n	80119de <UART_WaitOnFlagUntilTimeout+0xb2>
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	2b40      	cmp	r3, #64	; 0x40
 8011978:	d031      	beq.n	80119de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	69db      	ldr	r3, [r3, #28]
 8011980:	f003 0308 	and.w	r3, r3, #8
 8011984:	2b08      	cmp	r3, #8
 8011986:	d110      	bne.n	80119aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	2208      	movs	r2, #8
 801198e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011990:	68f8      	ldr	r0, [r7, #12]
 8011992:	f000 f920 	bl	8011bd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	2208      	movs	r2, #8
 801199a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	2200      	movs	r2, #0
 80119a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80119a6:	2301      	movs	r3, #1
 80119a8:	e029      	b.n	80119fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	69db      	ldr	r3, [r3, #28]
 80119b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80119b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80119b8:	d111      	bne.n	80119de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80119c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80119c4:	68f8      	ldr	r0, [r7, #12]
 80119c6:	f000 f906 	bl	8011bd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	2220      	movs	r2, #32
 80119ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	2200      	movs	r2, #0
 80119d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80119da:	2303      	movs	r3, #3
 80119dc:	e00f      	b.n	80119fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	69da      	ldr	r2, [r3, #28]
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	4013      	ands	r3, r2
 80119e8:	68ba      	ldr	r2, [r7, #8]
 80119ea:	429a      	cmp	r2, r3
 80119ec:	bf0c      	ite	eq
 80119ee:	2301      	moveq	r3, #1
 80119f0:	2300      	movne	r3, #0
 80119f2:	b2db      	uxtb	r3, r3
 80119f4:	461a      	mov	r2, r3
 80119f6:	79fb      	ldrb	r3, [r7, #7]
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d0a0      	beq.n	801193e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80119fc:	2300      	movs	r3, #0
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3710      	adds	r7, #16
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}
	...

08011a08 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b096      	sub	sp, #88	; 0x58
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	60f8      	str	r0, [r7, #12]
 8011a10:	60b9      	str	r1, [r7, #8]
 8011a12:	4613      	mov	r3, r2
 8011a14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	68ba      	ldr	r2, [r7, #8]
 8011a1a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	88fa      	ldrh	r2, [r7, #6]
 8011a20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	2200      	movs	r2, #0
 8011a28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	2222      	movs	r2, #34	; 0x22
 8011a30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d02d      	beq.n	8011a9a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a44:	4a40      	ldr	r2, [pc, #256]	; (8011b48 <UART_Start_Receive_DMA+0x140>)
 8011a46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a4e:	4a3f      	ldr	r2, [pc, #252]	; (8011b4c <UART_Start_Receive_DMA+0x144>)
 8011a50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a58:	4a3d      	ldr	r2, [pc, #244]	; (8011b50 <UART_Start_Receive_DMA+0x148>)
 8011a5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a62:	2200      	movs	r2, #0
 8011a64:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	3324      	adds	r3, #36	; 0x24
 8011a72:	4619      	mov	r1, r3
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a78:	461a      	mov	r2, r3
 8011a7a:	88fb      	ldrh	r3, [r7, #6]
 8011a7c:	f7f7 ff6e 	bl	800995c <HAL_DMA_Start_IT>
 8011a80:	4603      	mov	r3, r0
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d009      	beq.n	8011a9a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	2210      	movs	r2, #16
 8011a8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	2220      	movs	r2, #32
 8011a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8011a96:	2301      	movs	r3, #1
 8011a98:	e051      	b.n	8011b3e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	691b      	ldr	r3, [r3, #16]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d018      	beq.n	8011ad4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011aaa:	e853 3f00 	ldrex	r3, [r3]
 8011aae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011ab6:	657b      	str	r3, [r7, #84]	; 0x54
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	461a      	mov	r2, r3
 8011abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8011ac2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ac4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011ac6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ac8:	e841 2300 	strex	r3, r2, [r1]
 8011acc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d1e6      	bne.n	8011aa2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	3308      	adds	r3, #8
 8011ada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ade:	e853 3f00 	ldrex	r3, [r3]
 8011ae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae6:	f043 0301 	orr.w	r3, r3, #1
 8011aea:	653b      	str	r3, [r7, #80]	; 0x50
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	3308      	adds	r3, #8
 8011af2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011af4:	637a      	str	r2, [r7, #52]	; 0x34
 8011af6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011af8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011afc:	e841 2300 	strex	r3, r2, [r1]
 8011b00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d1e5      	bne.n	8011ad4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	3308      	adds	r3, #8
 8011b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	e853 3f00 	ldrex	r3, [r3]
 8011b16:	613b      	str	r3, [r7, #16]
   return(result);
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	3308      	adds	r3, #8
 8011b26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011b28:	623a      	str	r2, [r7, #32]
 8011b2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b2c:	69f9      	ldr	r1, [r7, #28]
 8011b2e:	6a3a      	ldr	r2, [r7, #32]
 8011b30:	e841 2300 	strex	r3, r2, [r1]
 8011b34:	61bb      	str	r3, [r7, #24]
   return(result);
 8011b36:	69bb      	ldr	r3, [r7, #24]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d1e5      	bne.n	8011b08 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8011b3c:	2300      	movs	r3, #0
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	3758      	adds	r7, #88	; 0x58
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
 8011b46:	bf00      	nop
 8011b48:	08011ca3 	.word	0x08011ca3
 8011b4c:	08011dcf 	.word	0x08011dcf
 8011b50:	08011e0d 	.word	0x08011e0d

08011b54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011b54:	b480      	push	{r7}
 8011b56:	b08f      	sub	sp, #60	; 0x3c
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b62:	6a3b      	ldr	r3, [r7, #32]
 8011b64:	e853 3f00 	ldrex	r3, [r3]
 8011b68:	61fb      	str	r3, [r7, #28]
   return(result);
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011b70:	637b      	str	r3, [r7, #52]	; 0x34
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	461a      	mov	r2, r3
 8011b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b7c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b82:	e841 2300 	strex	r3, r2, [r1]
 8011b86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d1e6      	bne.n	8011b5c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	3308      	adds	r3, #8
 8011b94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	e853 3f00 	ldrex	r3, [r3]
 8011b9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	3308      	adds	r3, #8
 8011bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bae:	61ba      	str	r2, [r7, #24]
 8011bb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bb2:	6979      	ldr	r1, [r7, #20]
 8011bb4:	69ba      	ldr	r2, [r7, #24]
 8011bb6:	e841 2300 	strex	r3, r2, [r1]
 8011bba:	613b      	str	r3, [r7, #16]
   return(result);
 8011bbc:	693b      	ldr	r3, [r7, #16]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d1e5      	bne.n	8011b8e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2220      	movs	r2, #32
 8011bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011bca:	bf00      	nop
 8011bcc:	373c      	adds	r7, #60	; 0x3c
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd4:	4770      	bx	lr

08011bd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011bd6:	b480      	push	{r7}
 8011bd8:	b095      	sub	sp, #84	; 0x54
 8011bda:	af00      	add	r7, sp, #0
 8011bdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011be6:	e853 3f00 	ldrex	r3, [r3]
 8011bea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	461a      	mov	r2, r3
 8011bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bfc:	643b      	str	r3, [r7, #64]	; 0x40
 8011bfe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011c04:	e841 2300 	strex	r3, r2, [r1]
 8011c08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d1e6      	bne.n	8011bde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	3308      	adds	r3, #8
 8011c16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c18:	6a3b      	ldr	r3, [r7, #32]
 8011c1a:	e853 3f00 	ldrex	r3, [r3]
 8011c1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011c20:	69fb      	ldr	r3, [r7, #28]
 8011c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011c26:	f023 0301 	bic.w	r3, r3, #1
 8011c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	3308      	adds	r3, #8
 8011c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011c36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c3c:	e841 2300 	strex	r3, r2, [r1]
 8011c40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d1e3      	bne.n	8011c10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c4c:	2b01      	cmp	r3, #1
 8011c4e:	d118      	bne.n	8011c82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	e853 3f00 	ldrex	r3, [r3]
 8011c5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	f023 0310 	bic.w	r3, r3, #16
 8011c64:	647b      	str	r3, [r7, #68]	; 0x44
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c6e:	61bb      	str	r3, [r7, #24]
 8011c70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c72:	6979      	ldr	r1, [r7, #20]
 8011c74:	69ba      	ldr	r2, [r7, #24]
 8011c76:	e841 2300 	strex	r3, r2, [r1]
 8011c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8011c7c:	693b      	ldr	r3, [r7, #16]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d1e6      	bne.n	8011c50 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	2220      	movs	r2, #32
 8011c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2200      	movs	r2, #0
 8011c94:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011c96:	bf00      	nop
 8011c98:	3754      	adds	r7, #84	; 0x54
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca0:	4770      	bx	lr

08011ca2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011ca2:	b580      	push	{r7, lr}
 8011ca4:	b09c      	sub	sp, #112	; 0x70
 8011ca6:	af00      	add	r7, sp, #0
 8011ca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cae:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	f003 0320 	and.w	r3, r3, #32
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d171      	bne.n	8011da2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8011cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cce:	e853 3f00 	ldrex	r3, [r3]
 8011cd2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011cda:	66bb      	str	r3, [r7, #104]	; 0x68
 8011cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011ce4:	65bb      	str	r3, [r7, #88]	; 0x58
 8011ce6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ce8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011cea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011cec:	e841 2300 	strex	r3, r2, [r1]
 8011cf0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d1e6      	bne.n	8011cc6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	3308      	adds	r3, #8
 8011cfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d02:	e853 3f00 	ldrex	r3, [r3]
 8011d06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d0a:	f023 0301 	bic.w	r3, r3, #1
 8011d0e:	667b      	str	r3, [r7, #100]	; 0x64
 8011d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	3308      	adds	r3, #8
 8011d16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011d18:	647a      	str	r2, [r7, #68]	; 0x44
 8011d1a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d20:	e841 2300 	strex	r3, r2, [r1]
 8011d24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d1e5      	bne.n	8011cf8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	3308      	adds	r3, #8
 8011d32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d36:	e853 3f00 	ldrex	r3, [r3]
 8011d3a:	623b      	str	r3, [r7, #32]
   return(result);
 8011d3c:	6a3b      	ldr	r3, [r7, #32]
 8011d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d42:	663b      	str	r3, [r7, #96]	; 0x60
 8011d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	3308      	adds	r3, #8
 8011d4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011d4c:	633a      	str	r2, [r7, #48]	; 0x30
 8011d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d54:	e841 2300 	strex	r3, r2, [r1]
 8011d58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d1e5      	bne.n	8011d2c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d62:	2220      	movs	r2, #32
 8011d64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	d118      	bne.n	8011da2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d76:	693b      	ldr	r3, [r7, #16]
 8011d78:	e853 3f00 	ldrex	r3, [r3]
 8011d7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	f023 0310 	bic.w	r3, r3, #16
 8011d84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	461a      	mov	r2, r3
 8011d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d8e:	61fb      	str	r3, [r7, #28]
 8011d90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d92:	69b9      	ldr	r1, [r7, #24]
 8011d94:	69fa      	ldr	r2, [r7, #28]
 8011d96:	e841 2300 	strex	r3, r2, [r1]
 8011d9a:	617b      	str	r3, [r7, #20]
   return(result);
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d1e6      	bne.n	8011d70 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011da4:	2200      	movs	r2, #0
 8011da6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dac:	2b01      	cmp	r3, #1
 8011dae:	d107      	bne.n	8011dc0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011db2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011db6:	4619      	mov	r1, r3
 8011db8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011dba:	f7ff fa37 	bl	801122c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011dbe:	e002      	b.n	8011dc6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8011dc0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011dc2:	f7f6 f8db 	bl	8007f7c <HAL_UART_RxCpltCallback>
}
 8011dc6:	bf00      	nop
 8011dc8:	3770      	adds	r7, #112	; 0x70
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	bd80      	pop	{r7, pc}

08011dce <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011dce:	b580      	push	{r7, lr}
 8011dd0:	b084      	sub	sp, #16
 8011dd2:	af00      	add	r7, sp, #0
 8011dd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dda:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	2201      	movs	r2, #1
 8011de0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011de6:	2b01      	cmp	r3, #1
 8011de8:	d109      	bne.n	8011dfe <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011df0:	085b      	lsrs	r3, r3, #1
 8011df2:	b29b      	uxth	r3, r3
 8011df4:	4619      	mov	r1, r3
 8011df6:	68f8      	ldr	r0, [r7, #12]
 8011df8:	f7ff fa18 	bl	801122c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011dfc:	e002      	b.n	8011e04 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8011dfe:	68f8      	ldr	r0, [r7, #12]
 8011e00:	f7ff fa00 	bl	8011204 <HAL_UART_RxHalfCpltCallback>
}
 8011e04:	bf00      	nop
 8011e06:	3710      	adds	r7, #16
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}

08011e0c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b086      	sub	sp, #24
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e18:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e20:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e28:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011e2a:	697b      	ldr	r3, [r7, #20]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	689b      	ldr	r3, [r3, #8]
 8011e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e34:	2b80      	cmp	r3, #128	; 0x80
 8011e36:	d109      	bne.n	8011e4c <UART_DMAError+0x40>
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	2b21      	cmp	r3, #33	; 0x21
 8011e3c:	d106      	bne.n	8011e4c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011e3e:	697b      	ldr	r3, [r7, #20]
 8011e40:	2200      	movs	r2, #0
 8011e42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011e46:	6978      	ldr	r0, [r7, #20]
 8011e48:	f7ff fe84 	bl	8011b54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	689b      	ldr	r3, [r3, #8]
 8011e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e56:	2b40      	cmp	r3, #64	; 0x40
 8011e58:	d109      	bne.n	8011e6e <UART_DMAError+0x62>
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2b22      	cmp	r3, #34	; 0x22
 8011e5e:	d106      	bne.n	8011e6e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	2200      	movs	r2, #0
 8011e64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011e68:	6978      	ldr	r0, [r7, #20]
 8011e6a:	f7ff feb4 	bl	8011bd6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011e6e:	697b      	ldr	r3, [r7, #20]
 8011e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e74:	f043 0210 	orr.w	r2, r3, #16
 8011e78:	697b      	ldr	r3, [r7, #20]
 8011e7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011e7e:	6978      	ldr	r0, [r7, #20]
 8011e80:	f7ff f9ca 	bl	8011218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011e84:	bf00      	nop
 8011e86:	3718      	adds	r7, #24
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}

08011e8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b084      	sub	sp, #16
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011eaa:	68f8      	ldr	r0, [r7, #12]
 8011eac:	f7ff f9b4 	bl	8011218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011eb0:	bf00      	nop
 8011eb2:	3710      	adds	r7, #16
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}

08011eb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b088      	sub	sp, #32
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	e853 3f00 	ldrex	r3, [r3]
 8011ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ece:	68bb      	ldr	r3, [r7, #8]
 8011ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011ed4:	61fb      	str	r3, [r7, #28]
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	461a      	mov	r2, r3
 8011edc:	69fb      	ldr	r3, [r7, #28]
 8011ede:	61bb      	str	r3, [r7, #24]
 8011ee0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ee2:	6979      	ldr	r1, [r7, #20]
 8011ee4:	69ba      	ldr	r2, [r7, #24]
 8011ee6:	e841 2300 	strex	r3, r2, [r1]
 8011eea:	613b      	str	r3, [r7, #16]
   return(result);
 8011eec:	693b      	ldr	r3, [r7, #16]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d1e6      	bne.n	8011ec0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	2220      	movs	r2, #32
 8011ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	2200      	movs	r2, #0
 8011efe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f7ff f975 	bl	80111f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f06:	bf00      	nop
 8011f08:	3720      	adds	r7, #32
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}

08011f0e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011f0e:	b480      	push	{r7}
 8011f10:	b083      	sub	sp, #12
 8011f12:	af00      	add	r7, sp, #0
 8011f14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011f16:	bf00      	nop
 8011f18:	370c      	adds	r7, #12
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f20:	4770      	bx	lr

08011f22 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011f22:	b480      	push	{r7}
 8011f24:	b083      	sub	sp, #12
 8011f26:	af00      	add	r7, sp, #0
 8011f28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011f2a:	bf00      	nop
 8011f2c:	370c      	adds	r7, #12
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f34:	4770      	bx	lr

08011f36 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011f36:	b480      	push	{r7}
 8011f38:	b083      	sub	sp, #12
 8011f3a:	af00      	add	r7, sp, #0
 8011f3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011f3e:	bf00      	nop
 8011f40:	370c      	adds	r7, #12
 8011f42:	46bd      	mov	sp, r7
 8011f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f48:	4770      	bx	lr

08011f4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011f4a:	b480      	push	{r7}
 8011f4c:	b085      	sub	sp, #20
 8011f4e:	af00      	add	r7, sp, #0
 8011f50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011f58:	2b01      	cmp	r3, #1
 8011f5a:	d101      	bne.n	8011f60 <HAL_UARTEx_DisableFifoMode+0x16>
 8011f5c:	2302      	movs	r3, #2
 8011f5e:	e027      	b.n	8011fb0 <HAL_UARTEx_DisableFifoMode+0x66>
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2201      	movs	r2, #1
 8011f64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2224      	movs	r2, #36	; 0x24
 8011f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	681a      	ldr	r2, [r3, #0]
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	f022 0201 	bic.w	r2, r2, #1
 8011f86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011f8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2200      	movs	r2, #0
 8011f94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	68fa      	ldr	r2, [r7, #12]
 8011f9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2220      	movs	r2, #32
 8011fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2200      	movs	r2, #0
 8011faa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011fae:	2300      	movs	r3, #0
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	3714      	adds	r7, #20
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fba:	4770      	bx	lr

08011fbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b084      	sub	sp, #16
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
 8011fc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011fcc:	2b01      	cmp	r3, #1
 8011fce:	d101      	bne.n	8011fd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011fd0:	2302      	movs	r3, #2
 8011fd2:	e02d      	b.n	8012030 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2201      	movs	r2, #1
 8011fd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2224      	movs	r2, #36	; 0x24
 8011fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	681a      	ldr	r2, [r3, #0]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	f022 0201 	bic.w	r2, r2, #1
 8011ffa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	689b      	ldr	r3, [r3, #8]
 8012002:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	683a      	ldr	r2, [r7, #0]
 801200c:	430a      	orrs	r2, r1
 801200e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f000 f84f 	bl	80120b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	68fa      	ldr	r2, [r7, #12]
 801201c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2220      	movs	r2, #32
 8012022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2200      	movs	r2, #0
 801202a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801202e:	2300      	movs	r3, #0
}
 8012030:	4618      	mov	r0, r3
 8012032:	3710      	adds	r7, #16
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}

08012038 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b084      	sub	sp, #16
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
 8012040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012048:	2b01      	cmp	r3, #1
 801204a:	d101      	bne.n	8012050 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801204c:	2302      	movs	r3, #2
 801204e:	e02d      	b.n	80120ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2201      	movs	r2, #1
 8012054:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2224      	movs	r2, #36	; 0x24
 801205c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	681a      	ldr	r2, [r3, #0]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	f022 0201 	bic.w	r2, r2, #1
 8012076:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	689b      	ldr	r3, [r3, #8]
 801207e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	683a      	ldr	r2, [r7, #0]
 8012088:	430a      	orrs	r2, r1
 801208a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f000 f811 	bl	80120b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	68fa      	ldr	r2, [r7, #12]
 8012098:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	2220      	movs	r2, #32
 801209e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2200      	movs	r2, #0
 80120a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80120aa:	2300      	movs	r3, #0
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3710      	adds	r7, #16
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}

080120b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80120b4:	b480      	push	{r7}
 80120b6:	b085      	sub	sp, #20
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d108      	bne.n	80120d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2201      	movs	r2, #1
 80120c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2201      	movs	r2, #1
 80120d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80120d4:	e031      	b.n	801213a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80120d6:	2308      	movs	r3, #8
 80120d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80120da:	2308      	movs	r3, #8
 80120dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	689b      	ldr	r3, [r3, #8]
 80120e4:	0e5b      	lsrs	r3, r3, #25
 80120e6:	b2db      	uxtb	r3, r3
 80120e8:	f003 0307 	and.w	r3, r3, #7
 80120ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	689b      	ldr	r3, [r3, #8]
 80120f4:	0f5b      	lsrs	r3, r3, #29
 80120f6:	b2db      	uxtb	r3, r3
 80120f8:	f003 0307 	and.w	r3, r3, #7
 80120fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80120fe:	7bbb      	ldrb	r3, [r7, #14]
 8012100:	7b3a      	ldrb	r2, [r7, #12]
 8012102:	4911      	ldr	r1, [pc, #68]	; (8012148 <UARTEx_SetNbDataToProcess+0x94>)
 8012104:	5c8a      	ldrb	r2, [r1, r2]
 8012106:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801210a:	7b3a      	ldrb	r2, [r7, #12]
 801210c:	490f      	ldr	r1, [pc, #60]	; (801214c <UARTEx_SetNbDataToProcess+0x98>)
 801210e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012110:	fb93 f3f2 	sdiv	r3, r3, r2
 8012114:	b29a      	uxth	r2, r3
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801211c:	7bfb      	ldrb	r3, [r7, #15]
 801211e:	7b7a      	ldrb	r2, [r7, #13]
 8012120:	4909      	ldr	r1, [pc, #36]	; (8012148 <UARTEx_SetNbDataToProcess+0x94>)
 8012122:	5c8a      	ldrb	r2, [r1, r2]
 8012124:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012128:	7b7a      	ldrb	r2, [r7, #13]
 801212a:	4908      	ldr	r1, [pc, #32]	; (801214c <UARTEx_SetNbDataToProcess+0x98>)
 801212c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801212e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012132:	b29a      	uxth	r2, r3
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801213a:	bf00      	nop
 801213c:	3714      	adds	r7, #20
 801213e:	46bd      	mov	sp, r7
 8012140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012144:	4770      	bx	lr
 8012146:	bf00      	nop
 8012148:	0802387c 	.word	0x0802387c
 801214c:	08023884 	.word	0x08023884

08012150 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8012150:	b480      	push	{r7}
 8012152:	b085      	sub	sp, #20
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2200      	movs	r2, #0
 801215c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012160:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8012164:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	b29a      	uxth	r2, r3
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8012170:	2300      	movs	r3, #0
}
 8012172:	4618      	mov	r0, r3
 8012174:	3714      	adds	r7, #20
 8012176:	46bd      	mov	sp, r7
 8012178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217c:	4770      	bx	lr

0801217e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801217e:	b480      	push	{r7}
 8012180:	b085      	sub	sp, #20
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012186:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801218a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8012192:	b29a      	uxth	r2, r3
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	b29b      	uxth	r3, r3
 8012198:	43db      	mvns	r3, r3
 801219a:	b29b      	uxth	r3, r3
 801219c:	4013      	ands	r3, r2
 801219e:	b29a      	uxth	r2, r3
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80121a6:	2300      	movs	r3, #0
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3714      	adds	r7, #20
 80121ac:	46bd      	mov	sp, r7
 80121ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b2:	4770      	bx	lr

080121b4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80121b4:	b480      	push	{r7}
 80121b6:	b085      	sub	sp, #20
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	60f8      	str	r0, [r7, #12]
 80121bc:	1d3b      	adds	r3, r7, #4
 80121be:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	2201      	movs	r2, #1
 80121c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	2200      	movs	r2, #0
 80121ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	2200      	movs	r2, #0
 80121d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2200      	movs	r2, #0
 80121de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80121e2:	2300      	movs	r3, #0
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	3714      	adds	r7, #20
 80121e8:	46bd      	mov	sp, r7
 80121ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ee:	4770      	bx	lr

080121f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80121f0:	b480      	push	{r7}
 80121f2:	b09d      	sub	sp, #116	; 0x74
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
 80121f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80121fa:	2300      	movs	r3, #0
 80121fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8012200:	687a      	ldr	r2, [r7, #4]
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	781b      	ldrb	r3, [r3, #0]
 8012206:	009b      	lsls	r3, r3, #2
 8012208:	4413      	add	r3, r2
 801220a:	881b      	ldrh	r3, [r3, #0]
 801220c:	b29b      	uxth	r3, r3
 801220e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8012212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012216:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	78db      	ldrb	r3, [r3, #3]
 801221e:	2b03      	cmp	r3, #3
 8012220:	d81f      	bhi.n	8012262 <USB_ActivateEndpoint+0x72>
 8012222:	a201      	add	r2, pc, #4	; (adr r2, 8012228 <USB_ActivateEndpoint+0x38>)
 8012224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012228:	08012239 	.word	0x08012239
 801222c:	08012255 	.word	0x08012255
 8012230:	0801226b 	.word	0x0801226b
 8012234:	08012247 	.word	0x08012247
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8012238:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801223c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012240:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8012244:	e012      	b.n	801226c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8012246:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801224a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 801224e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8012252:	e00b      	b.n	801226c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8012254:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801225c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8012260:	e004      	b.n	801226c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8012262:	2301      	movs	r3, #1
 8012264:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8012268:	e000      	b.n	801226c <USB_ActivateEndpoint+0x7c>
      break;
 801226a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801226c:	687a      	ldr	r2, [r7, #4]
 801226e:	683b      	ldr	r3, [r7, #0]
 8012270:	781b      	ldrb	r3, [r3, #0]
 8012272:	009b      	lsls	r3, r3, #2
 8012274:	441a      	add	r2, r3
 8012276:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801227a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801227e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801228a:	b29b      	uxth	r3, r3
 801228c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801228e:	687a      	ldr	r2, [r7, #4]
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	781b      	ldrb	r3, [r3, #0]
 8012294:	009b      	lsls	r3, r3, #2
 8012296:	4413      	add	r3, r2
 8012298:	881b      	ldrh	r3, [r3, #0]
 801229a:	b29b      	uxth	r3, r3
 801229c:	b21b      	sxth	r3, r3
 801229e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80122a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80122a6:	b21a      	sxth	r2, r3
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	781b      	ldrb	r3, [r3, #0]
 80122ac:	b21b      	sxth	r3, r3
 80122ae:	4313      	orrs	r3, r2
 80122b0:	b21b      	sxth	r3, r3
 80122b2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80122b6:	687a      	ldr	r2, [r7, #4]
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	781b      	ldrb	r3, [r3, #0]
 80122bc:	009b      	lsls	r3, r3, #2
 80122be:	441a      	add	r2, r3
 80122c0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80122c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80122c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80122cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80122d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122d4:	b29b      	uxth	r3, r3
 80122d6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	7b1b      	ldrb	r3, [r3, #12]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	f040 8178 	bne.w	80125d2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	785b      	ldrb	r3, [r3, #1]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	f000 8084 	beq.w	80123f4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	61bb      	str	r3, [r7, #24]
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80122f6:	b29b      	uxth	r3, r3
 80122f8:	461a      	mov	r2, r3
 80122fa:	69bb      	ldr	r3, [r7, #24]
 80122fc:	4413      	add	r3, r2
 80122fe:	61bb      	str	r3, [r7, #24]
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	781b      	ldrb	r3, [r3, #0]
 8012304:	00da      	lsls	r2, r3, #3
 8012306:	69bb      	ldr	r3, [r7, #24]
 8012308:	4413      	add	r3, r2
 801230a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801230e:	617b      	str	r3, [r7, #20]
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	88db      	ldrh	r3, [r3, #6]
 8012314:	085b      	lsrs	r3, r3, #1
 8012316:	b29b      	uxth	r3, r3
 8012318:	005b      	lsls	r3, r3, #1
 801231a:	b29a      	uxth	r2, r3
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012320:	687a      	ldr	r2, [r7, #4]
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	781b      	ldrb	r3, [r3, #0]
 8012326:	009b      	lsls	r3, r3, #2
 8012328:	4413      	add	r3, r2
 801232a:	881b      	ldrh	r3, [r3, #0]
 801232c:	827b      	strh	r3, [r7, #18]
 801232e:	8a7b      	ldrh	r3, [r7, #18]
 8012330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012334:	2b00      	cmp	r3, #0
 8012336:	d01b      	beq.n	8012370 <USB_ActivateEndpoint+0x180>
 8012338:	687a      	ldr	r2, [r7, #4]
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	781b      	ldrb	r3, [r3, #0]
 801233e:	009b      	lsls	r3, r3, #2
 8012340:	4413      	add	r3, r2
 8012342:	881b      	ldrh	r3, [r3, #0]
 8012344:	b29b      	uxth	r3, r3
 8012346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801234a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801234e:	823b      	strh	r3, [r7, #16]
 8012350:	687a      	ldr	r2, [r7, #4]
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	009b      	lsls	r3, r3, #2
 8012358:	441a      	add	r2, r3
 801235a:	8a3b      	ldrh	r3, [r7, #16]
 801235c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012368:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801236c:	b29b      	uxth	r3, r3
 801236e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012370:	683b      	ldr	r3, [r7, #0]
 8012372:	78db      	ldrb	r3, [r3, #3]
 8012374:	2b01      	cmp	r3, #1
 8012376:	d020      	beq.n	80123ba <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012378:	687a      	ldr	r2, [r7, #4]
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	781b      	ldrb	r3, [r3, #0]
 801237e:	009b      	lsls	r3, r3, #2
 8012380:	4413      	add	r3, r2
 8012382:	881b      	ldrh	r3, [r3, #0]
 8012384:	b29b      	uxth	r3, r3
 8012386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801238a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801238e:	81bb      	strh	r3, [r7, #12]
 8012390:	89bb      	ldrh	r3, [r7, #12]
 8012392:	f083 0320 	eor.w	r3, r3, #32
 8012396:	81bb      	strh	r3, [r7, #12]
 8012398:	687a      	ldr	r2, [r7, #4]
 801239a:	683b      	ldr	r3, [r7, #0]
 801239c:	781b      	ldrb	r3, [r3, #0]
 801239e:	009b      	lsls	r3, r3, #2
 80123a0:	441a      	add	r2, r3
 80123a2:	89bb      	ldrh	r3, [r7, #12]
 80123a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80123a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80123ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80123b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123b4:	b29b      	uxth	r3, r3
 80123b6:	8013      	strh	r3, [r2, #0]
 80123b8:	e2d5      	b.n	8012966 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80123ba:	687a      	ldr	r2, [r7, #4]
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	781b      	ldrb	r3, [r3, #0]
 80123c0:	009b      	lsls	r3, r3, #2
 80123c2:	4413      	add	r3, r2
 80123c4:	881b      	ldrh	r3, [r3, #0]
 80123c6:	b29b      	uxth	r3, r3
 80123c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80123cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80123d0:	81fb      	strh	r3, [r7, #14]
 80123d2:	687a      	ldr	r2, [r7, #4]
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	781b      	ldrb	r3, [r3, #0]
 80123d8:	009b      	lsls	r3, r3, #2
 80123da:	441a      	add	r2, r3
 80123dc:	89fb      	ldrh	r3, [r7, #14]
 80123de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80123e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80123e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80123ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123ee:	b29b      	uxth	r3, r3
 80123f0:	8013      	strh	r3, [r2, #0]
 80123f2:	e2b8      	b.n	8012966 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	633b      	str	r3, [r7, #48]	; 0x30
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80123fe:	b29b      	uxth	r3, r3
 8012400:	461a      	mov	r2, r3
 8012402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012404:	4413      	add	r3, r2
 8012406:	633b      	str	r3, [r7, #48]	; 0x30
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	781b      	ldrb	r3, [r3, #0]
 801240c:	00da      	lsls	r2, r3, #3
 801240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012410:	4413      	add	r3, r2
 8012412:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	88db      	ldrh	r3, [r3, #6]
 801241c:	085b      	lsrs	r3, r3, #1
 801241e:	b29b      	uxth	r3, r3
 8012420:	005b      	lsls	r3, r3, #1
 8012422:	b29a      	uxth	r2, r3
 8012424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012426:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	62bb      	str	r3, [r7, #40]	; 0x28
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012432:	b29b      	uxth	r3, r3
 8012434:	461a      	mov	r2, r3
 8012436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012438:	4413      	add	r3, r2
 801243a:	62bb      	str	r3, [r7, #40]	; 0x28
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	00da      	lsls	r2, r3, #3
 8012442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012444:	4413      	add	r3, r2
 8012446:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801244a:	627b      	str	r3, [r7, #36]	; 0x24
 801244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801244e:	881b      	ldrh	r3, [r3, #0]
 8012450:	b29b      	uxth	r3, r3
 8012452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012456:	b29a      	uxth	r2, r3
 8012458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245a:	801a      	strh	r2, [r3, #0]
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	691b      	ldr	r3, [r3, #16]
 8012460:	2b3e      	cmp	r3, #62	; 0x3e
 8012462:	d91d      	bls.n	80124a0 <USB_ActivateEndpoint+0x2b0>
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	691b      	ldr	r3, [r3, #16]
 8012468:	095b      	lsrs	r3, r3, #5
 801246a:	66bb      	str	r3, [r7, #104]	; 0x68
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	691b      	ldr	r3, [r3, #16]
 8012470:	f003 031f 	and.w	r3, r3, #31
 8012474:	2b00      	cmp	r3, #0
 8012476:	d102      	bne.n	801247e <USB_ActivateEndpoint+0x28e>
 8012478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801247a:	3b01      	subs	r3, #1
 801247c:	66bb      	str	r3, [r7, #104]	; 0x68
 801247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012480:	881b      	ldrh	r3, [r3, #0]
 8012482:	b29a      	uxth	r2, r3
 8012484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012486:	b29b      	uxth	r3, r3
 8012488:	029b      	lsls	r3, r3, #10
 801248a:	b29b      	uxth	r3, r3
 801248c:	4313      	orrs	r3, r2
 801248e:	b29b      	uxth	r3, r3
 8012490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012498:	b29a      	uxth	r2, r3
 801249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801249c:	801a      	strh	r2, [r3, #0]
 801249e:	e026      	b.n	80124ee <USB_ActivateEndpoint+0x2fe>
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	691b      	ldr	r3, [r3, #16]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d10a      	bne.n	80124be <USB_ActivateEndpoint+0x2ce>
 80124a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124aa:	881b      	ldrh	r3, [r3, #0]
 80124ac:	b29b      	uxth	r3, r3
 80124ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80124b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80124b6:	b29a      	uxth	r2, r3
 80124b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ba:	801a      	strh	r2, [r3, #0]
 80124bc:	e017      	b.n	80124ee <USB_ActivateEndpoint+0x2fe>
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	691b      	ldr	r3, [r3, #16]
 80124c2:	085b      	lsrs	r3, r3, #1
 80124c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	691b      	ldr	r3, [r3, #16]
 80124ca:	f003 0301 	and.w	r3, r3, #1
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d002      	beq.n	80124d8 <USB_ActivateEndpoint+0x2e8>
 80124d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80124d4:	3301      	adds	r3, #1
 80124d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80124d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124da:	881b      	ldrh	r3, [r3, #0]
 80124dc:	b29a      	uxth	r2, r3
 80124de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80124e0:	b29b      	uxth	r3, r3
 80124e2:	029b      	lsls	r3, r3, #10
 80124e4:	b29b      	uxth	r3, r3
 80124e6:	4313      	orrs	r3, r2
 80124e8:	b29a      	uxth	r2, r3
 80124ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80124ee:	687a      	ldr	r2, [r7, #4]
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	781b      	ldrb	r3, [r3, #0]
 80124f4:	009b      	lsls	r3, r3, #2
 80124f6:	4413      	add	r3, r2
 80124f8:	881b      	ldrh	r3, [r3, #0]
 80124fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80124fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80124fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012502:	2b00      	cmp	r3, #0
 8012504:	d01b      	beq.n	801253e <USB_ActivateEndpoint+0x34e>
 8012506:	687a      	ldr	r2, [r7, #4]
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	781b      	ldrb	r3, [r3, #0]
 801250c:	009b      	lsls	r3, r3, #2
 801250e:	4413      	add	r3, r2
 8012510:	881b      	ldrh	r3, [r3, #0]
 8012512:	b29b      	uxth	r3, r3
 8012514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801251c:	843b      	strh	r3, [r7, #32]
 801251e:	687a      	ldr	r2, [r7, #4]
 8012520:	683b      	ldr	r3, [r7, #0]
 8012522:	781b      	ldrb	r3, [r3, #0]
 8012524:	009b      	lsls	r3, r3, #2
 8012526:	441a      	add	r2, r3
 8012528:	8c3b      	ldrh	r3, [r7, #32]
 801252a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801252e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012532:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801253a:	b29b      	uxth	r3, r3
 801253c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d124      	bne.n	8012590 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012546:	687a      	ldr	r2, [r7, #4]
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	009b      	lsls	r3, r3, #2
 801254e:	4413      	add	r3, r2
 8012550:	881b      	ldrh	r3, [r3, #0]
 8012552:	b29b      	uxth	r3, r3
 8012554:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801255c:	83bb      	strh	r3, [r7, #28]
 801255e:	8bbb      	ldrh	r3, [r7, #28]
 8012560:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012564:	83bb      	strh	r3, [r7, #28]
 8012566:	8bbb      	ldrh	r3, [r7, #28]
 8012568:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801256c:	83bb      	strh	r3, [r7, #28]
 801256e:	687a      	ldr	r2, [r7, #4]
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	781b      	ldrb	r3, [r3, #0]
 8012574:	009b      	lsls	r3, r3, #2
 8012576:	441a      	add	r2, r3
 8012578:	8bbb      	ldrh	r3, [r7, #28]
 801257a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801257e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801258a:	b29b      	uxth	r3, r3
 801258c:	8013      	strh	r3, [r2, #0]
 801258e:	e1ea      	b.n	8012966 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8012590:	687a      	ldr	r2, [r7, #4]
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	009b      	lsls	r3, r3, #2
 8012598:	4413      	add	r3, r2
 801259a:	881b      	ldrh	r3, [r3, #0]
 801259c:	b29b      	uxth	r3, r3
 801259e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80125a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80125a6:	83fb      	strh	r3, [r7, #30]
 80125a8:	8bfb      	ldrh	r3, [r7, #30]
 80125aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80125ae:	83fb      	strh	r3, [r7, #30]
 80125b0:	687a      	ldr	r2, [r7, #4]
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	009b      	lsls	r3, r3, #2
 80125b8:	441a      	add	r2, r3
 80125ba:	8bfb      	ldrh	r3, [r7, #30]
 80125bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80125c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80125c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80125c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	8013      	strh	r3, [r2, #0]
 80125d0:	e1c9      	b.n	8012966 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	78db      	ldrb	r3, [r3, #3]
 80125d6:	2b02      	cmp	r3, #2
 80125d8:	d11e      	bne.n	8012618 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80125da:	687a      	ldr	r2, [r7, #4]
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	781b      	ldrb	r3, [r3, #0]
 80125e0:	009b      	lsls	r3, r3, #2
 80125e2:	4413      	add	r3, r2
 80125e4:	881b      	ldrh	r3, [r3, #0]
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80125ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80125f0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80125f4:	687a      	ldr	r2, [r7, #4]
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	781b      	ldrb	r3, [r3, #0]
 80125fa:	009b      	lsls	r3, r3, #2
 80125fc:	441a      	add	r2, r3
 80125fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8012602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801260a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 801260e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012612:	b29b      	uxth	r3, r3
 8012614:	8013      	strh	r3, [r2, #0]
 8012616:	e01d      	b.n	8012654 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8012618:	687a      	ldr	r2, [r7, #4]
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	781b      	ldrb	r3, [r3, #0]
 801261e:	009b      	lsls	r3, r3, #2
 8012620:	4413      	add	r3, r2
 8012622:	881b      	ldrh	r3, [r3, #0]
 8012624:	b29b      	uxth	r3, r3
 8012626:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801262a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801262e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8012632:	687a      	ldr	r2, [r7, #4]
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	781b      	ldrb	r3, [r3, #0]
 8012638:	009b      	lsls	r3, r3, #2
 801263a:	441a      	add	r2, r3
 801263c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8012640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801264c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012650:	b29b      	uxth	r3, r3
 8012652:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801265e:	b29b      	uxth	r3, r3
 8012660:	461a      	mov	r2, r3
 8012662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012664:	4413      	add	r3, r2
 8012666:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	00da      	lsls	r2, r3, #3
 801266e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012670:	4413      	add	r3, r2
 8012672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012676:	65bb      	str	r3, [r7, #88]	; 0x58
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	891b      	ldrh	r3, [r3, #8]
 801267c:	085b      	lsrs	r3, r3, #1
 801267e:	b29b      	uxth	r3, r3
 8012680:	005b      	lsls	r3, r3, #1
 8012682:	b29a      	uxth	r2, r3
 8012684:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012686:	801a      	strh	r2, [r3, #0]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	657b      	str	r3, [r7, #84]	; 0x54
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012692:	b29b      	uxth	r3, r3
 8012694:	461a      	mov	r2, r3
 8012696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012698:	4413      	add	r3, r2
 801269a:	657b      	str	r3, [r7, #84]	; 0x54
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	781b      	ldrb	r3, [r3, #0]
 80126a0:	00da      	lsls	r2, r3, #3
 80126a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80126a4:	4413      	add	r3, r2
 80126a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80126aa:	653b      	str	r3, [r7, #80]	; 0x50
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	895b      	ldrh	r3, [r3, #10]
 80126b0:	085b      	lsrs	r3, r3, #1
 80126b2:	b29b      	uxth	r3, r3
 80126b4:	005b      	lsls	r3, r3, #1
 80126b6:	b29a      	uxth	r2, r3
 80126b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126ba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	785b      	ldrb	r3, [r3, #1]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	f040 8093 	bne.w	80127ec <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80126c6:	687a      	ldr	r2, [r7, #4]
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	781b      	ldrb	r3, [r3, #0]
 80126cc:	009b      	lsls	r3, r3, #2
 80126ce:	4413      	add	r3, r2
 80126d0:	881b      	ldrh	r3, [r3, #0]
 80126d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80126d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80126da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d01b      	beq.n	801271a <USB_ActivateEndpoint+0x52a>
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	009b      	lsls	r3, r3, #2
 80126ea:	4413      	add	r3, r2
 80126ec:	881b      	ldrh	r3, [r3, #0]
 80126ee:	b29b      	uxth	r3, r3
 80126f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80126f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80126f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80126fa:	687a      	ldr	r2, [r7, #4]
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	009b      	lsls	r3, r3, #2
 8012702:	441a      	add	r2, r3
 8012704:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801270a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801270e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012716:	b29b      	uxth	r3, r3
 8012718:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801271a:	687a      	ldr	r2, [r7, #4]
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	781b      	ldrb	r3, [r3, #0]
 8012720:	009b      	lsls	r3, r3, #2
 8012722:	4413      	add	r3, r2
 8012724:	881b      	ldrh	r3, [r3, #0]
 8012726:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012728:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801272e:	2b00      	cmp	r3, #0
 8012730:	d01b      	beq.n	801276a <USB_ActivateEndpoint+0x57a>
 8012732:	687a      	ldr	r2, [r7, #4]
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	009b      	lsls	r3, r3, #2
 801273a:	4413      	add	r3, r2
 801273c:	881b      	ldrh	r3, [r3, #0]
 801273e:	b29b      	uxth	r3, r3
 8012740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012748:	877b      	strh	r3, [r7, #58]	; 0x3a
 801274a:	687a      	ldr	r2, [r7, #4]
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	781b      	ldrb	r3, [r3, #0]
 8012750:	009b      	lsls	r3, r3, #2
 8012752:	441a      	add	r2, r3
 8012754:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801275a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801275e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012762:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012766:	b29b      	uxth	r3, r3
 8012768:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801276a:	687a      	ldr	r2, [r7, #4]
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	781b      	ldrb	r3, [r3, #0]
 8012770:	009b      	lsls	r3, r3, #2
 8012772:	4413      	add	r3, r2
 8012774:	881b      	ldrh	r3, [r3, #0]
 8012776:	b29b      	uxth	r3, r3
 8012778:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801277c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012780:	873b      	strh	r3, [r7, #56]	; 0x38
 8012782:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012784:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012788:	873b      	strh	r3, [r7, #56]	; 0x38
 801278a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801278c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012790:	873b      	strh	r3, [r7, #56]	; 0x38
 8012792:	687a      	ldr	r2, [r7, #4]
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	781b      	ldrb	r3, [r3, #0]
 8012798:	009b      	lsls	r3, r3, #2
 801279a:	441a      	add	r2, r3
 801279c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801279e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80127a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80127a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80127aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127ae:	b29b      	uxth	r3, r3
 80127b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80127b2:	687a      	ldr	r2, [r7, #4]
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	781b      	ldrb	r3, [r3, #0]
 80127b8:	009b      	lsls	r3, r3, #2
 80127ba:	4413      	add	r3, r2
 80127bc:	881b      	ldrh	r3, [r3, #0]
 80127be:	b29b      	uxth	r3, r3
 80127c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80127c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80127c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80127ca:	687a      	ldr	r2, [r7, #4]
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	009b      	lsls	r3, r3, #2
 80127d2:	441a      	add	r2, r3
 80127d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80127d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80127da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80127de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80127e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	8013      	strh	r3, [r2, #0]
 80127ea:	e0bc      	b.n	8012966 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80127ec:	687a      	ldr	r2, [r7, #4]
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	009b      	lsls	r3, r3, #2
 80127f4:	4413      	add	r3, r2
 80127f6:	881b      	ldrh	r3, [r3, #0]
 80127f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80127fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012804:	2b00      	cmp	r3, #0
 8012806:	d01d      	beq.n	8012844 <USB_ActivateEndpoint+0x654>
 8012808:	687a      	ldr	r2, [r7, #4]
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	781b      	ldrb	r3, [r3, #0]
 801280e:	009b      	lsls	r3, r3, #2
 8012810:	4413      	add	r3, r2
 8012812:	881b      	ldrh	r3, [r3, #0]
 8012814:	b29b      	uxth	r3, r3
 8012816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801281e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8012822:	687a      	ldr	r2, [r7, #4]
 8012824:	683b      	ldr	r3, [r7, #0]
 8012826:	781b      	ldrb	r3, [r3, #0]
 8012828:	009b      	lsls	r3, r3, #2
 801282a:	441a      	add	r2, r3
 801282c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8012830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801283c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012840:	b29b      	uxth	r3, r3
 8012842:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012844:	687a      	ldr	r2, [r7, #4]
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	009b      	lsls	r3, r3, #2
 801284c:	4413      	add	r3, r2
 801284e:	881b      	ldrh	r3, [r3, #0]
 8012850:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8012854:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8012858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801285c:	2b00      	cmp	r3, #0
 801285e:	d01d      	beq.n	801289c <USB_ActivateEndpoint+0x6ac>
 8012860:	687a      	ldr	r2, [r7, #4]
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	009b      	lsls	r3, r3, #2
 8012868:	4413      	add	r3, r2
 801286a:	881b      	ldrh	r3, [r3, #0]
 801286c:	b29b      	uxth	r3, r3
 801286e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012876:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801287a:	687a      	ldr	r2, [r7, #4]
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	009b      	lsls	r3, r3, #2
 8012882:	441a      	add	r2, r3
 8012884:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8012888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801288c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012894:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012898:	b29b      	uxth	r3, r3
 801289a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	78db      	ldrb	r3, [r3, #3]
 80128a0:	2b01      	cmp	r3, #1
 80128a2:	d024      	beq.n	80128ee <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80128a4:	687a      	ldr	r2, [r7, #4]
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	781b      	ldrb	r3, [r3, #0]
 80128aa:	009b      	lsls	r3, r3, #2
 80128ac:	4413      	add	r3, r2
 80128ae:	881b      	ldrh	r3, [r3, #0]
 80128b0:	b29b      	uxth	r3, r3
 80128b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80128b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80128ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80128be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80128c2:	f083 0320 	eor.w	r3, r3, #32
 80128c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80128ca:	687a      	ldr	r2, [r7, #4]
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	781b      	ldrb	r3, [r3, #0]
 80128d0:	009b      	lsls	r3, r3, #2
 80128d2:	441a      	add	r2, r3
 80128d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80128d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80128dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80128e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80128e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128e8:	b29b      	uxth	r3, r3
 80128ea:	8013      	strh	r3, [r2, #0]
 80128ec:	e01d      	b.n	801292a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80128ee:	687a      	ldr	r2, [r7, #4]
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	009b      	lsls	r3, r3, #2
 80128f6:	4413      	add	r3, r2
 80128f8:	881b      	ldrh	r3, [r3, #0]
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012904:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8012908:	687a      	ldr	r2, [r7, #4]
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	781b      	ldrb	r3, [r3, #0]
 801290e:	009b      	lsls	r3, r3, #2
 8012910:	441a      	add	r2, r3
 8012912:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801291a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801291e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012926:	b29b      	uxth	r3, r3
 8012928:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801292a:	687a      	ldr	r2, [r7, #4]
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	781b      	ldrb	r3, [r3, #0]
 8012930:	009b      	lsls	r3, r3, #2
 8012932:	4413      	add	r3, r2
 8012934:	881b      	ldrh	r3, [r3, #0]
 8012936:	b29b      	uxth	r3, r3
 8012938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801293c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012940:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012944:	687a      	ldr	r2, [r7, #4]
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	781b      	ldrb	r3, [r3, #0]
 801294a:	009b      	lsls	r3, r3, #2
 801294c:	441a      	add	r2, r3
 801294e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801295a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801295e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012962:	b29b      	uxth	r3, r3
 8012964:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8012966:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 801296a:	4618      	mov	r0, r3
 801296c:	3774      	adds	r7, #116	; 0x74
 801296e:	46bd      	mov	sp, r7
 8012970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012974:	4770      	bx	lr
 8012976:	bf00      	nop

08012978 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012978:	b480      	push	{r7}
 801297a:	b08d      	sub	sp, #52	; 0x34
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	7b1b      	ldrb	r3, [r3, #12]
 8012986:	2b00      	cmp	r3, #0
 8012988:	f040 808e 	bne.w	8012aa8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	785b      	ldrb	r3, [r3, #1]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d044      	beq.n	8012a1e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012994:	687a      	ldr	r2, [r7, #4]
 8012996:	683b      	ldr	r3, [r7, #0]
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	009b      	lsls	r3, r3, #2
 801299c:	4413      	add	r3, r2
 801299e:	881b      	ldrh	r3, [r3, #0]
 80129a0:	81bb      	strh	r3, [r7, #12]
 80129a2:	89bb      	ldrh	r3, [r7, #12]
 80129a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d01b      	beq.n	80129e4 <USB_DeactivateEndpoint+0x6c>
 80129ac:	687a      	ldr	r2, [r7, #4]
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	009b      	lsls	r3, r3, #2
 80129b4:	4413      	add	r3, r2
 80129b6:	881b      	ldrh	r3, [r3, #0]
 80129b8:	b29b      	uxth	r3, r3
 80129ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80129be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80129c2:	817b      	strh	r3, [r7, #10]
 80129c4:	687a      	ldr	r2, [r7, #4]
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	009b      	lsls	r3, r3, #2
 80129cc:	441a      	add	r2, r3
 80129ce:	897b      	ldrh	r3, [r7, #10]
 80129d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80129d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80129d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80129dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80129e0:	b29b      	uxth	r3, r3
 80129e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80129e4:	687a      	ldr	r2, [r7, #4]
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	781b      	ldrb	r3, [r3, #0]
 80129ea:	009b      	lsls	r3, r3, #2
 80129ec:	4413      	add	r3, r2
 80129ee:	881b      	ldrh	r3, [r3, #0]
 80129f0:	b29b      	uxth	r3, r3
 80129f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80129f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80129fa:	813b      	strh	r3, [r7, #8]
 80129fc:	687a      	ldr	r2, [r7, #4]
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	009b      	lsls	r3, r3, #2
 8012a04:	441a      	add	r2, r3
 8012a06:	893b      	ldrh	r3, [r7, #8]
 8012a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a18:	b29b      	uxth	r3, r3
 8012a1a:	8013      	strh	r3, [r2, #0]
 8012a1c:	e192      	b.n	8012d44 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012a1e:	687a      	ldr	r2, [r7, #4]
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	009b      	lsls	r3, r3, #2
 8012a26:	4413      	add	r3, r2
 8012a28:	881b      	ldrh	r3, [r3, #0]
 8012a2a:	827b      	strh	r3, [r7, #18]
 8012a2c:	8a7b      	ldrh	r3, [r7, #18]
 8012a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d01b      	beq.n	8012a6e <USB_DeactivateEndpoint+0xf6>
 8012a36:	687a      	ldr	r2, [r7, #4]
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	009b      	lsls	r3, r3, #2
 8012a3e:	4413      	add	r3, r2
 8012a40:	881b      	ldrh	r3, [r3, #0]
 8012a42:	b29b      	uxth	r3, r3
 8012a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a4c:	823b      	strh	r3, [r7, #16]
 8012a4e:	687a      	ldr	r2, [r7, #4]
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	009b      	lsls	r3, r3, #2
 8012a56:	441a      	add	r2, r3
 8012a58:	8a3b      	ldrh	r3, [r7, #16]
 8012a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a6a:	b29b      	uxth	r3, r3
 8012a6c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012a6e:	687a      	ldr	r2, [r7, #4]
 8012a70:	683b      	ldr	r3, [r7, #0]
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	009b      	lsls	r3, r3, #2
 8012a76:	4413      	add	r3, r2
 8012a78:	881b      	ldrh	r3, [r3, #0]
 8012a7a:	b29b      	uxth	r3, r3
 8012a7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a84:	81fb      	strh	r3, [r7, #14]
 8012a86:	687a      	ldr	r2, [r7, #4]
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	781b      	ldrb	r3, [r3, #0]
 8012a8c:	009b      	lsls	r3, r3, #2
 8012a8e:	441a      	add	r2, r3
 8012a90:	89fb      	ldrh	r3, [r7, #14]
 8012a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012aa2:	b29b      	uxth	r3, r3
 8012aa4:	8013      	strh	r3, [r2, #0]
 8012aa6:	e14d      	b.n	8012d44 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	785b      	ldrb	r3, [r3, #1]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	f040 80a5 	bne.w	8012bfc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	781b      	ldrb	r3, [r3, #0]
 8012ab8:	009b      	lsls	r3, r3, #2
 8012aba:	4413      	add	r3, r2
 8012abc:	881b      	ldrh	r3, [r3, #0]
 8012abe:	843b      	strh	r3, [r7, #32]
 8012ac0:	8c3b      	ldrh	r3, [r7, #32]
 8012ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d01b      	beq.n	8012b02 <USB_DeactivateEndpoint+0x18a>
 8012aca:	687a      	ldr	r2, [r7, #4]
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	781b      	ldrb	r3, [r3, #0]
 8012ad0:	009b      	lsls	r3, r3, #2
 8012ad2:	4413      	add	r3, r2
 8012ad4:	881b      	ldrh	r3, [r3, #0]
 8012ad6:	b29b      	uxth	r3, r3
 8012ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ae0:	83fb      	strh	r3, [r7, #30]
 8012ae2:	687a      	ldr	r2, [r7, #4]
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	009b      	lsls	r3, r3, #2
 8012aea:	441a      	add	r2, r3
 8012aec:	8bfb      	ldrh	r3, [r7, #30]
 8012aee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012af2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012af6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012afe:	b29b      	uxth	r3, r3
 8012b00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012b02:	687a      	ldr	r2, [r7, #4]
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	781b      	ldrb	r3, [r3, #0]
 8012b08:	009b      	lsls	r3, r3, #2
 8012b0a:	4413      	add	r3, r2
 8012b0c:	881b      	ldrh	r3, [r3, #0]
 8012b0e:	83bb      	strh	r3, [r7, #28]
 8012b10:	8bbb      	ldrh	r3, [r7, #28]
 8012b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d01b      	beq.n	8012b52 <USB_DeactivateEndpoint+0x1da>
 8012b1a:	687a      	ldr	r2, [r7, #4]
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	781b      	ldrb	r3, [r3, #0]
 8012b20:	009b      	lsls	r3, r3, #2
 8012b22:	4413      	add	r3, r2
 8012b24:	881b      	ldrh	r3, [r3, #0]
 8012b26:	b29b      	uxth	r3, r3
 8012b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012b30:	837b      	strh	r3, [r7, #26]
 8012b32:	687a      	ldr	r2, [r7, #4]
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	781b      	ldrb	r3, [r3, #0]
 8012b38:	009b      	lsls	r3, r3, #2
 8012b3a:	441a      	add	r2, r3
 8012b3c:	8b7b      	ldrh	r3, [r7, #26]
 8012b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012b4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012b4e:	b29b      	uxth	r3, r3
 8012b50:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8012b52:	687a      	ldr	r2, [r7, #4]
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	781b      	ldrb	r3, [r3, #0]
 8012b58:	009b      	lsls	r3, r3, #2
 8012b5a:	4413      	add	r3, r2
 8012b5c:	881b      	ldrh	r3, [r3, #0]
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012b68:	833b      	strh	r3, [r7, #24]
 8012b6a:	687a      	ldr	r2, [r7, #4]
 8012b6c:	683b      	ldr	r3, [r7, #0]
 8012b6e:	781b      	ldrb	r3, [r3, #0]
 8012b70:	009b      	lsls	r3, r3, #2
 8012b72:	441a      	add	r2, r3
 8012b74:	8b3b      	ldrh	r3, [r7, #24]
 8012b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012b82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012b86:	b29b      	uxth	r3, r3
 8012b88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012b8a:	687a      	ldr	r2, [r7, #4]
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	009b      	lsls	r3, r3, #2
 8012b92:	4413      	add	r3, r2
 8012b94:	881b      	ldrh	r3, [r3, #0]
 8012b96:	b29b      	uxth	r3, r3
 8012b98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ba0:	82fb      	strh	r3, [r7, #22]
 8012ba2:	687a      	ldr	r2, [r7, #4]
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	781b      	ldrb	r3, [r3, #0]
 8012ba8:	009b      	lsls	r3, r3, #2
 8012baa:	441a      	add	r2, r3
 8012bac:	8afb      	ldrh	r3, [r7, #22]
 8012bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bbe:	b29b      	uxth	r3, r3
 8012bc0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012bc2:	687a      	ldr	r2, [r7, #4]
 8012bc4:	683b      	ldr	r3, [r7, #0]
 8012bc6:	781b      	ldrb	r3, [r3, #0]
 8012bc8:	009b      	lsls	r3, r3, #2
 8012bca:	4413      	add	r3, r2
 8012bcc:	881b      	ldrh	r3, [r3, #0]
 8012bce:	b29b      	uxth	r3, r3
 8012bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012bd8:	82bb      	strh	r3, [r7, #20]
 8012bda:	687a      	ldr	r2, [r7, #4]
 8012bdc:	683b      	ldr	r3, [r7, #0]
 8012bde:	781b      	ldrb	r3, [r3, #0]
 8012be0:	009b      	lsls	r3, r3, #2
 8012be2:	441a      	add	r2, r3
 8012be4:	8abb      	ldrh	r3, [r7, #20]
 8012be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bf6:	b29b      	uxth	r3, r3
 8012bf8:	8013      	strh	r3, [r2, #0]
 8012bfa:	e0a3      	b.n	8012d44 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012bfc:	687a      	ldr	r2, [r7, #4]
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	009b      	lsls	r3, r3, #2
 8012c04:	4413      	add	r3, r2
 8012c06:	881b      	ldrh	r3, [r3, #0]
 8012c08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012c0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d01b      	beq.n	8012c4c <USB_DeactivateEndpoint+0x2d4>
 8012c14:	687a      	ldr	r2, [r7, #4]
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	009b      	lsls	r3, r3, #2
 8012c1c:	4413      	add	r3, r2
 8012c1e:	881b      	ldrh	r3, [r3, #0]
 8012c20:	b29b      	uxth	r3, r3
 8012c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012c2a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012c2c:	687a      	ldr	r2, [r7, #4]
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	781b      	ldrb	r3, [r3, #0]
 8012c32:	009b      	lsls	r3, r3, #2
 8012c34:	441a      	add	r2, r3
 8012c36:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c48:	b29b      	uxth	r3, r3
 8012c4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012c4c:	687a      	ldr	r2, [r7, #4]
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	781b      	ldrb	r3, [r3, #0]
 8012c52:	009b      	lsls	r3, r3, #2
 8012c54:	4413      	add	r3, r2
 8012c56:	881b      	ldrh	r3, [r3, #0]
 8012c58:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012c5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d01b      	beq.n	8012c9c <USB_DeactivateEndpoint+0x324>
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	781b      	ldrb	r3, [r3, #0]
 8012c6a:	009b      	lsls	r3, r3, #2
 8012c6c:	4413      	add	r3, r2
 8012c6e:	881b      	ldrh	r3, [r3, #0]
 8012c70:	b29b      	uxth	r3, r3
 8012c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012c7a:	853b      	strh	r3, [r7, #40]	; 0x28
 8012c7c:	687a      	ldr	r2, [r7, #4]
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	781b      	ldrb	r3, [r3, #0]
 8012c82:	009b      	lsls	r3, r3, #2
 8012c84:	441a      	add	r2, r3
 8012c86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012c94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012c98:	b29b      	uxth	r3, r3
 8012c9a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8012c9c:	687a      	ldr	r2, [r7, #4]
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	009b      	lsls	r3, r3, #2
 8012ca4:	4413      	add	r3, r2
 8012ca6:	881b      	ldrh	r3, [r3, #0]
 8012ca8:	b29b      	uxth	r3, r3
 8012caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012cb2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012cb4:	687a      	ldr	r2, [r7, #4]
 8012cb6:	683b      	ldr	r3, [r7, #0]
 8012cb8:	781b      	ldrb	r3, [r3, #0]
 8012cba:	009b      	lsls	r3, r3, #2
 8012cbc:	441a      	add	r2, r3
 8012cbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012cc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cd0:	b29b      	uxth	r3, r3
 8012cd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012cd4:	687a      	ldr	r2, [r7, #4]
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	4413      	add	r3, r2
 8012cde:	881b      	ldrh	r3, [r3, #0]
 8012ce0:	b29b      	uxth	r3, r3
 8012ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012cea:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012cec:	687a      	ldr	r2, [r7, #4]
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	781b      	ldrb	r3, [r3, #0]
 8012cf2:	009b      	lsls	r3, r3, #2
 8012cf4:	441a      	add	r2, r3
 8012cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d08:	b29b      	uxth	r3, r3
 8012d0a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012d0c:	687a      	ldr	r2, [r7, #4]
 8012d0e:	683b      	ldr	r3, [r7, #0]
 8012d10:	781b      	ldrb	r3, [r3, #0]
 8012d12:	009b      	lsls	r3, r3, #2
 8012d14:	4413      	add	r3, r2
 8012d16:	881b      	ldrh	r3, [r3, #0]
 8012d18:	b29b      	uxth	r3, r3
 8012d1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012d22:	847b      	strh	r3, [r7, #34]	; 0x22
 8012d24:	687a      	ldr	r2, [r7, #4]
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	009b      	lsls	r3, r3, #2
 8012d2c:	441a      	add	r2, r3
 8012d2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d40:	b29b      	uxth	r3, r3
 8012d42:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8012d44:	2300      	movs	r3, #0
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	3734      	adds	r7, #52	; 0x34
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d50:	4770      	bx	lr

08012d52 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012d52:	b580      	push	{r7, lr}
 8012d54:	b0c2      	sub	sp, #264	; 0x108
 8012d56:	af00      	add	r7, sp, #0
 8012d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012d60:	6018      	str	r0, [r3, #0]
 8012d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d6a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	785b      	ldrb	r3, [r3, #1]
 8012d78:	2b01      	cmp	r3, #1
 8012d7a:	f040 86b7 	bne.w	8013aec <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8012d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	699a      	ldr	r2, [r3, #24]
 8012d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	691b      	ldr	r3, [r3, #16]
 8012d96:	429a      	cmp	r2, r3
 8012d98:	d908      	bls.n	8012dac <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8012d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	691b      	ldr	r3, [r3, #16]
 8012da6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8012daa:	e007      	b.n	8012dbc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8012dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	699b      	ldr	r3, [r3, #24]
 8012db8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8012dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	7b1b      	ldrb	r3, [r3, #12]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d13a      	bne.n	8012e42 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8012dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	6959      	ldr	r1, [r3, #20]
 8012dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	88da      	ldrh	r2, [r3, #6]
 8012de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012de8:	b29b      	uxth	r3, r3
 8012dea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012dee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012df2:	6800      	ldr	r0, [r0, #0]
 8012df4:	f001 fc98 	bl	8014728 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8012df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	613b      	str	r3, [r7, #16]
 8012e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012e12:	b29b      	uxth	r3, r3
 8012e14:	461a      	mov	r2, r3
 8012e16:	693b      	ldr	r3, [r7, #16]
 8012e18:	4413      	add	r3, r2
 8012e1a:	613b      	str	r3, [r7, #16]
 8012e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	00da      	lsls	r2, r3, #3
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	4413      	add	r3, r2
 8012e2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012e32:	60fb      	str	r3, [r7, #12]
 8012e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012e38:	b29a      	uxth	r2, r3
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	801a      	strh	r2, [r3, #0]
 8012e3e:	f000 be1f 	b.w	8013a80 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8012e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	78db      	ldrb	r3, [r3, #3]
 8012e4e:	2b02      	cmp	r3, #2
 8012e50:	f040 8462 	bne.w	8013718 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8012e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	6a1a      	ldr	r2, [r3, #32]
 8012e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	691b      	ldr	r3, [r3, #16]
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	f240 83df 	bls.w	8013630 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8012e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e7a:	681a      	ldr	r2, [r3, #0]
 8012e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	781b      	ldrb	r3, [r3, #0]
 8012e88:	009b      	lsls	r3, r3, #2
 8012e8a:	4413      	add	r3, r2
 8012e8c:	881b      	ldrh	r3, [r3, #0]
 8012e8e:	b29b      	uxth	r3, r3
 8012e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012e98:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8012e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ea0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012ea4:	681a      	ldr	r2, [r3, #0]
 8012ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	009b      	lsls	r3, r3, #2
 8012eb4:	441a      	add	r2, r3
 8012eb6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012ec2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8012ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012eca:	b29b      	uxth	r3, r3
 8012ecc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8012ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	6a1a      	ldr	r2, [r3, #32]
 8012eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ede:	1ad2      	subs	r2, r2, r3
 8012ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012ef4:	681a      	ldr	r2, [r3, #0]
 8012ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	781b      	ldrb	r3, [r3, #0]
 8012f02:	009b      	lsls	r3, r3, #2
 8012f04:	4413      	add	r3, r2
 8012f06:	881b      	ldrh	r3, [r3, #0]
 8012f08:	b29b      	uxth	r3, r3
 8012f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	f000 81c7 	beq.w	80132a2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8012f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	785b      	ldrb	r3, [r3, #1]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d177      	bne.n	8013020 <USB_EPStartXfer+0x2ce>
 8012f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012f4a:	b29b      	uxth	r3, r3
 8012f4c:	461a      	mov	r2, r3
 8012f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f50:	4413      	add	r3, r2
 8012f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	00da      	lsls	r2, r3, #3
 8012f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f64:	4413      	add	r3, r2
 8012f66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8012f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6e:	881b      	ldrh	r3, [r3, #0]
 8012f70:	b29b      	uxth	r3, r3
 8012f72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012f76:	b29a      	uxth	r2, r3
 8012f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f7a:	801a      	strh	r2, [r3, #0]
 8012f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f80:	2b3e      	cmp	r3, #62	; 0x3e
 8012f82:	d921      	bls.n	8012fc8 <USB_EPStartXfer+0x276>
 8012f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f88:	095b      	lsrs	r3, r3, #5
 8012f8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8012f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f92:	f003 031f 	and.w	r3, r3, #31
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d104      	bne.n	8012fa4 <USB_EPStartXfer+0x252>
 8012f9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8012f9e:	3b01      	subs	r3, #1
 8012fa0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8012fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa6:	881b      	ldrh	r3, [r3, #0]
 8012fa8:	b29a      	uxth	r2, r3
 8012faa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8012fae:	b29b      	uxth	r3, r3
 8012fb0:	029b      	lsls	r3, r3, #10
 8012fb2:	b29b      	uxth	r3, r3
 8012fb4:	4313      	orrs	r3, r2
 8012fb6:	b29b      	uxth	r3, r3
 8012fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012fc0:	b29a      	uxth	r2, r3
 8012fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fc4:	801a      	strh	r2, [r3, #0]
 8012fc6:	e050      	b.n	801306a <USB_EPStartXfer+0x318>
 8012fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d10a      	bne.n	8012fe6 <USB_EPStartXfer+0x294>
 8012fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd2:	881b      	ldrh	r3, [r3, #0]
 8012fd4:	b29b      	uxth	r3, r3
 8012fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012fde:	b29a      	uxth	r2, r3
 8012fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fe2:	801a      	strh	r2, [r3, #0]
 8012fe4:	e041      	b.n	801306a <USB_EPStartXfer+0x318>
 8012fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012fea:	085b      	lsrs	r3, r3, #1
 8012fec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8012ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ff4:	f003 0301 	and.w	r3, r3, #1
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d004      	beq.n	8013006 <USB_EPStartXfer+0x2b4>
 8012ffc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013000:	3301      	adds	r3, #1
 8013002:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013008:	881b      	ldrh	r3, [r3, #0]
 801300a:	b29a      	uxth	r2, r3
 801300c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013010:	b29b      	uxth	r3, r3
 8013012:	029b      	lsls	r3, r3, #10
 8013014:	b29b      	uxth	r3, r3
 8013016:	4313      	orrs	r3, r2
 8013018:	b29a      	uxth	r2, r3
 801301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801301c:	801a      	strh	r2, [r3, #0]
 801301e:	e024      	b.n	801306a <USB_EPStartXfer+0x318>
 8013020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	785b      	ldrb	r3, [r3, #1]
 801302c:	2b01      	cmp	r3, #1
 801302e:	d11c      	bne.n	801306a <USB_EPStartXfer+0x318>
 8013030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801303e:	b29b      	uxth	r3, r3
 8013040:	461a      	mov	r2, r3
 8013042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013044:	4413      	add	r3, r2
 8013046:	633b      	str	r3, [r7, #48]	; 0x30
 8013048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801304c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	781b      	ldrb	r3, [r3, #0]
 8013054:	00da      	lsls	r2, r3, #3
 8013056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013058:	4413      	add	r3, r2
 801305a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801305e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013064:	b29a      	uxth	r2, r3
 8013066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013068:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801306a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801306e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	895b      	ldrh	r3, [r3, #10]
 8013076:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801307a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801307e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	6959      	ldr	r1, [r3, #20]
 8013086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801308a:	b29b      	uxth	r3, r3
 801308c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013090:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013094:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013098:	6800      	ldr	r0, [r0, #0]
 801309a:	f001 fb45 	bl	8014728 <USB_WritePMA>
            ep->xfer_buff += len;
 801309e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	695a      	ldr	r2, [r3, #20]
 80130aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80130ae:	441a      	add	r2, r3
 80130b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80130bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	6a1a      	ldr	r2, [r3, #32]
 80130c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	691b      	ldr	r3, [r3, #16]
 80130d4:	429a      	cmp	r2, r3
 80130d6:	d90f      	bls.n	80130f8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80130d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	6a1a      	ldr	r2, [r3, #32]
 80130e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80130e8:	1ad2      	subs	r2, r2, r3
 80130ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	621a      	str	r2, [r3, #32]
 80130f6:	e00e      	b.n	8013116 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80130f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	6a1b      	ldr	r3, [r3, #32]
 8013104:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8013108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801310c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	2200      	movs	r2, #0
 8013114:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801311a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	785b      	ldrb	r3, [r3, #1]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d177      	bne.n	8013216 <USB_EPStartXfer+0x4c4>
 8013126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801312a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	61bb      	str	r3, [r7, #24]
 8013132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013136:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013140:	b29b      	uxth	r3, r3
 8013142:	461a      	mov	r2, r3
 8013144:	69bb      	ldr	r3, [r7, #24]
 8013146:	4413      	add	r3, r2
 8013148:	61bb      	str	r3, [r7, #24]
 801314a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801314e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	781b      	ldrb	r3, [r3, #0]
 8013156:	00da      	lsls	r2, r3, #3
 8013158:	69bb      	ldr	r3, [r7, #24]
 801315a:	4413      	add	r3, r2
 801315c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013160:	617b      	str	r3, [r7, #20]
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	881b      	ldrh	r3, [r3, #0]
 8013166:	b29b      	uxth	r3, r3
 8013168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801316c:	b29a      	uxth	r2, r3
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	801a      	strh	r2, [r3, #0]
 8013172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013176:	2b3e      	cmp	r3, #62	; 0x3e
 8013178:	d921      	bls.n	80131be <USB_EPStartXfer+0x46c>
 801317a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801317e:	095b      	lsrs	r3, r3, #5
 8013180:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013188:	f003 031f 	and.w	r3, r3, #31
 801318c:	2b00      	cmp	r3, #0
 801318e:	d104      	bne.n	801319a <USB_EPStartXfer+0x448>
 8013190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013194:	3b01      	subs	r3, #1
 8013196:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801319a:	697b      	ldr	r3, [r7, #20]
 801319c:	881b      	ldrh	r3, [r3, #0]
 801319e:	b29a      	uxth	r2, r3
 80131a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	029b      	lsls	r3, r3, #10
 80131a8:	b29b      	uxth	r3, r3
 80131aa:	4313      	orrs	r3, r2
 80131ac:	b29b      	uxth	r3, r3
 80131ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80131b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80131b6:	b29a      	uxth	r2, r3
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	801a      	strh	r2, [r3, #0]
 80131bc:	e056      	b.n	801326c <USB_EPStartXfer+0x51a>
 80131be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d10a      	bne.n	80131dc <USB_EPStartXfer+0x48a>
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	881b      	ldrh	r3, [r3, #0]
 80131ca:	b29b      	uxth	r3, r3
 80131cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80131d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80131d4:	b29a      	uxth	r2, r3
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	801a      	strh	r2, [r3, #0]
 80131da:	e047      	b.n	801326c <USB_EPStartXfer+0x51a>
 80131dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80131e0:	085b      	lsrs	r3, r3, #1
 80131e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80131e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80131ea:	f003 0301 	and.w	r3, r3, #1
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d004      	beq.n	80131fc <USB_EPStartXfer+0x4aa>
 80131f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80131f6:	3301      	adds	r3, #1
 80131f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80131fc:	697b      	ldr	r3, [r7, #20]
 80131fe:	881b      	ldrh	r3, [r3, #0]
 8013200:	b29a      	uxth	r2, r3
 8013202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013206:	b29b      	uxth	r3, r3
 8013208:	029b      	lsls	r3, r3, #10
 801320a:	b29b      	uxth	r3, r3
 801320c:	4313      	orrs	r3, r2
 801320e:	b29a      	uxth	r2, r3
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	801a      	strh	r2, [r3, #0]
 8013214:	e02a      	b.n	801326c <USB_EPStartXfer+0x51a>
 8013216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801321a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	785b      	ldrb	r3, [r3, #1]
 8013222:	2b01      	cmp	r3, #1
 8013224:	d122      	bne.n	801326c <USB_EPStartXfer+0x51a>
 8013226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801322a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	623b      	str	r3, [r7, #32]
 8013232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013240:	b29b      	uxth	r3, r3
 8013242:	461a      	mov	r2, r3
 8013244:	6a3b      	ldr	r3, [r7, #32]
 8013246:	4413      	add	r3, r2
 8013248:	623b      	str	r3, [r7, #32]
 801324a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801324e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	781b      	ldrb	r3, [r3, #0]
 8013256:	00da      	lsls	r2, r3, #3
 8013258:	6a3b      	ldr	r3, [r7, #32]
 801325a:	4413      	add	r3, r2
 801325c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013260:	61fb      	str	r3, [r7, #28]
 8013262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013266:	b29a      	uxth	r2, r3
 8013268:	69fb      	ldr	r3, [r7, #28]
 801326a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801326c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	891b      	ldrh	r3, [r3, #8]
 8013278:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801327c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	6959      	ldr	r1, [r3, #20]
 8013288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801328c:	b29b      	uxth	r3, r3
 801328e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013292:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013296:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801329a:	6800      	ldr	r0, [r0, #0]
 801329c:	f001 fa44 	bl	8014728 <USB_WritePMA>
 80132a0:	e3ee      	b.n	8013a80 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80132a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80132a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	785b      	ldrb	r3, [r3, #1]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d177      	bne.n	80133a2 <USB_EPStartXfer+0x650>
 80132b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80132b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80132be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80132c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80132cc:	b29b      	uxth	r3, r3
 80132ce:	461a      	mov	r2, r3
 80132d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132d2:	4413      	add	r3, r2
 80132d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80132d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80132da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	781b      	ldrb	r3, [r3, #0]
 80132e2:	00da      	lsls	r2, r3, #3
 80132e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132e6:	4413      	add	r3, r2
 80132e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80132ec:	647b      	str	r3, [r7, #68]	; 0x44
 80132ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132f0:	881b      	ldrh	r3, [r3, #0]
 80132f2:	b29b      	uxth	r3, r3
 80132f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80132f8:	b29a      	uxth	r2, r3
 80132fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132fc:	801a      	strh	r2, [r3, #0]
 80132fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013302:	2b3e      	cmp	r3, #62	; 0x3e
 8013304:	d921      	bls.n	801334a <USB_EPStartXfer+0x5f8>
 8013306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801330a:	095b      	lsrs	r3, r3, #5
 801330c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013314:	f003 031f 	and.w	r3, r3, #31
 8013318:	2b00      	cmp	r3, #0
 801331a:	d104      	bne.n	8013326 <USB_EPStartXfer+0x5d4>
 801331c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013320:	3b01      	subs	r3, #1
 8013322:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013328:	881b      	ldrh	r3, [r3, #0]
 801332a:	b29a      	uxth	r2, r3
 801332c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013330:	b29b      	uxth	r3, r3
 8013332:	029b      	lsls	r3, r3, #10
 8013334:	b29b      	uxth	r3, r3
 8013336:	4313      	orrs	r3, r2
 8013338:	b29b      	uxth	r3, r3
 801333a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801333e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013342:	b29a      	uxth	r2, r3
 8013344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013346:	801a      	strh	r2, [r3, #0]
 8013348:	e056      	b.n	80133f8 <USB_EPStartXfer+0x6a6>
 801334a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801334e:	2b00      	cmp	r3, #0
 8013350:	d10a      	bne.n	8013368 <USB_EPStartXfer+0x616>
 8013352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013354:	881b      	ldrh	r3, [r3, #0]
 8013356:	b29b      	uxth	r3, r3
 8013358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801335c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013360:	b29a      	uxth	r2, r3
 8013362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013364:	801a      	strh	r2, [r3, #0]
 8013366:	e047      	b.n	80133f8 <USB_EPStartXfer+0x6a6>
 8013368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801336c:	085b      	lsrs	r3, r3, #1
 801336e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013376:	f003 0301 	and.w	r3, r3, #1
 801337a:	2b00      	cmp	r3, #0
 801337c:	d004      	beq.n	8013388 <USB_EPStartXfer+0x636>
 801337e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013382:	3301      	adds	r3, #1
 8013384:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801338a:	881b      	ldrh	r3, [r3, #0]
 801338c:	b29a      	uxth	r2, r3
 801338e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013392:	b29b      	uxth	r3, r3
 8013394:	029b      	lsls	r3, r3, #10
 8013396:	b29b      	uxth	r3, r3
 8013398:	4313      	orrs	r3, r2
 801339a:	b29a      	uxth	r2, r3
 801339c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801339e:	801a      	strh	r2, [r3, #0]
 80133a0:	e02a      	b.n	80133f8 <USB_EPStartXfer+0x6a6>
 80133a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	785b      	ldrb	r3, [r3, #1]
 80133ae:	2b01      	cmp	r3, #1
 80133b0:	d122      	bne.n	80133f8 <USB_EPStartXfer+0x6a6>
 80133b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	653b      	str	r3, [r7, #80]	; 0x50
 80133be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80133cc:	b29b      	uxth	r3, r3
 80133ce:	461a      	mov	r2, r3
 80133d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133d2:	4413      	add	r3, r2
 80133d4:	653b      	str	r3, [r7, #80]	; 0x50
 80133d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	781b      	ldrb	r3, [r3, #0]
 80133e2:	00da      	lsls	r2, r3, #3
 80133e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133e6:	4413      	add	r3, r2
 80133e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80133ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80133ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80133f2:	b29a      	uxth	r2, r3
 80133f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80133f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	891b      	ldrh	r3, [r3, #8]
 8013404:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801340c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	6959      	ldr	r1, [r3, #20]
 8013414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013418:	b29b      	uxth	r3, r3
 801341a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801341e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013422:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013426:	6800      	ldr	r0, [r0, #0]
 8013428:	f001 f97e 	bl	8014728 <USB_WritePMA>
            ep->xfer_buff += len;
 801342c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	695a      	ldr	r2, [r3, #20]
 8013438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801343c:	441a      	add	r2, r3
 801343e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801344a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801344e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	6a1a      	ldr	r2, [r3, #32]
 8013456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801345a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	691b      	ldr	r3, [r3, #16]
 8013462:	429a      	cmp	r2, r3
 8013464:	d90f      	bls.n	8013486 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8013466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801346a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	6a1a      	ldr	r2, [r3, #32]
 8013472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013476:	1ad2      	subs	r2, r2, r3
 8013478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801347c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	621a      	str	r2, [r3, #32]
 8013484:	e00e      	b.n	80134a4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8013486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801348a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	6a1b      	ldr	r3, [r3, #32]
 8013492:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8013496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801349a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	2200      	movs	r2, #0
 80134a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80134a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	643b      	str	r3, [r7, #64]	; 0x40
 80134b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	785b      	ldrb	r3, [r3, #1]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d177      	bne.n	80135b0 <USB_EPStartXfer+0x85e>
 80134c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80134cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80134da:	b29b      	uxth	r3, r3
 80134dc:	461a      	mov	r2, r3
 80134de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134e0:	4413      	add	r3, r2
 80134e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80134e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	781b      	ldrb	r3, [r3, #0]
 80134f0:	00da      	lsls	r2, r3, #3
 80134f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f4:	4413      	add	r3, r2
 80134f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80134fa:	637b      	str	r3, [r7, #52]	; 0x34
 80134fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134fe:	881b      	ldrh	r3, [r3, #0]
 8013500:	b29b      	uxth	r3, r3
 8013502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013506:	b29a      	uxth	r2, r3
 8013508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801350a:	801a      	strh	r2, [r3, #0]
 801350c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013510:	2b3e      	cmp	r3, #62	; 0x3e
 8013512:	d921      	bls.n	8013558 <USB_EPStartXfer+0x806>
 8013514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013518:	095b      	lsrs	r3, r3, #5
 801351a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801351e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013522:	f003 031f 	and.w	r3, r3, #31
 8013526:	2b00      	cmp	r3, #0
 8013528:	d104      	bne.n	8013534 <USB_EPStartXfer+0x7e2>
 801352a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801352e:	3b01      	subs	r3, #1
 8013530:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013536:	881b      	ldrh	r3, [r3, #0]
 8013538:	b29a      	uxth	r2, r3
 801353a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801353e:	b29b      	uxth	r3, r3
 8013540:	029b      	lsls	r3, r3, #10
 8013542:	b29b      	uxth	r3, r3
 8013544:	4313      	orrs	r3, r2
 8013546:	b29b      	uxth	r3, r3
 8013548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801354c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013550:	b29a      	uxth	r2, r3
 8013552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013554:	801a      	strh	r2, [r3, #0]
 8013556:	e050      	b.n	80135fa <USB_EPStartXfer+0x8a8>
 8013558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801355c:	2b00      	cmp	r3, #0
 801355e:	d10a      	bne.n	8013576 <USB_EPStartXfer+0x824>
 8013560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013562:	881b      	ldrh	r3, [r3, #0]
 8013564:	b29b      	uxth	r3, r3
 8013566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801356a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801356e:	b29a      	uxth	r2, r3
 8013570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013572:	801a      	strh	r2, [r3, #0]
 8013574:	e041      	b.n	80135fa <USB_EPStartXfer+0x8a8>
 8013576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801357a:	085b      	lsrs	r3, r3, #1
 801357c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013584:	f003 0301 	and.w	r3, r3, #1
 8013588:	2b00      	cmp	r3, #0
 801358a:	d004      	beq.n	8013596 <USB_EPStartXfer+0x844>
 801358c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013590:	3301      	adds	r3, #1
 8013592:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013598:	881b      	ldrh	r3, [r3, #0]
 801359a:	b29a      	uxth	r2, r3
 801359c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80135a0:	b29b      	uxth	r3, r3
 80135a2:	029b      	lsls	r3, r3, #10
 80135a4:	b29b      	uxth	r3, r3
 80135a6:	4313      	orrs	r3, r2
 80135a8:	b29a      	uxth	r2, r3
 80135aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135ac:	801a      	strh	r2, [r3, #0]
 80135ae:	e024      	b.n	80135fa <USB_EPStartXfer+0x8a8>
 80135b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	785b      	ldrb	r3, [r3, #1]
 80135bc:	2b01      	cmp	r3, #1
 80135be:	d11c      	bne.n	80135fa <USB_EPStartXfer+0x8a8>
 80135c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80135ce:	b29b      	uxth	r3, r3
 80135d0:	461a      	mov	r2, r3
 80135d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80135d4:	4413      	add	r3, r2
 80135d6:	643b      	str	r3, [r7, #64]	; 0x40
 80135d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	781b      	ldrb	r3, [r3, #0]
 80135e4:	00da      	lsls	r2, r3, #3
 80135e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80135e8:	4413      	add	r3, r2
 80135ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80135ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80135f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80135f4:	b29a      	uxth	r2, r3
 80135f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80135fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	895b      	ldrh	r3, [r3, #10]
 8013606:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801360a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801360e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	6959      	ldr	r1, [r3, #20]
 8013616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801361a:	b29b      	uxth	r3, r3
 801361c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013620:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013624:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013628:	6800      	ldr	r0, [r0, #0]
 801362a:	f001 f87d 	bl	8014728 <USB_WritePMA>
 801362e:	e227      	b.n	8013a80 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8013630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	6a1b      	ldr	r3, [r3, #32]
 801363c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8013640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013648:	681a      	ldr	r2, [r3, #0]
 801364a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801364e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	781b      	ldrb	r3, [r3, #0]
 8013656:	009b      	lsls	r3, r3, #2
 8013658:	4413      	add	r3, r2
 801365a:	881b      	ldrh	r3, [r3, #0]
 801365c:	b29b      	uxth	r3, r3
 801365e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8013662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013666:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801366a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801366e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013672:	681a      	ldr	r2, [r3, #0]
 8013674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	781b      	ldrb	r3, [r3, #0]
 8013680:	009b      	lsls	r3, r3, #2
 8013682:	441a      	add	r2, r3
 8013684:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8013688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801368c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013698:	b29b      	uxth	r3, r3
 801369a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801369c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80136a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80136b6:	b29b      	uxth	r3, r3
 80136b8:	461a      	mov	r2, r3
 80136ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80136bc:	4413      	add	r3, r2
 80136be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80136c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	781b      	ldrb	r3, [r3, #0]
 80136cc:	00da      	lsls	r2, r3, #3
 80136ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80136d0:	4413      	add	r3, r2
 80136d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80136d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80136d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80136dc:	b29a      	uxth	r2, r3
 80136de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80136e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80136e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	891b      	ldrh	r3, [r3, #8]
 80136ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80136f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	6959      	ldr	r1, [r3, #20]
 80136fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013702:	b29b      	uxth	r3, r3
 8013704:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013708:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801370c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013710:	6800      	ldr	r0, [r0, #0]
 8013712:	f001 f809 	bl	8014728 <USB_WritePMA>
 8013716:	e1b3      	b.n	8013a80 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8013718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801371c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	6a1a      	ldr	r2, [r3, #32]
 8013724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013728:	1ad2      	subs	r2, r2, r3
 801372a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801372e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801373a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801373e:	681a      	ldr	r2, [r3, #0]
 8013740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	781b      	ldrb	r3, [r3, #0]
 801374c:	009b      	lsls	r3, r3, #2
 801374e:	4413      	add	r3, r2
 8013750:	881b      	ldrh	r3, [r3, #0]
 8013752:	b29b      	uxth	r3, r3
 8013754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013758:	2b00      	cmp	r3, #0
 801375a:	f000 80c6 	beq.w	80138ea <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801375e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013762:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	673b      	str	r3, [r7, #112]	; 0x70
 801376a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801376e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	785b      	ldrb	r3, [r3, #1]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d177      	bne.n	801386a <USB_EPStartXfer+0xb18>
 801377a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801377e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	66bb      	str	r3, [r7, #104]	; 0x68
 8013786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801378a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013794:	b29b      	uxth	r3, r3
 8013796:	461a      	mov	r2, r3
 8013798:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801379a:	4413      	add	r3, r2
 801379c:	66bb      	str	r3, [r7, #104]	; 0x68
 801379e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	781b      	ldrb	r3, [r3, #0]
 80137aa:	00da      	lsls	r2, r3, #3
 80137ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80137ae:	4413      	add	r3, r2
 80137b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80137b4:	667b      	str	r3, [r7, #100]	; 0x64
 80137b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137b8:	881b      	ldrh	r3, [r3, #0]
 80137ba:	b29b      	uxth	r3, r3
 80137bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80137c0:	b29a      	uxth	r2, r3
 80137c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137c4:	801a      	strh	r2, [r3, #0]
 80137c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80137ca:	2b3e      	cmp	r3, #62	; 0x3e
 80137cc:	d921      	bls.n	8013812 <USB_EPStartXfer+0xac0>
 80137ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80137d2:	095b      	lsrs	r3, r3, #5
 80137d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80137d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80137dc:	f003 031f 	and.w	r3, r3, #31
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d104      	bne.n	80137ee <USB_EPStartXfer+0xa9c>
 80137e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80137e8:	3b01      	subs	r3, #1
 80137ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80137ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137f0:	881b      	ldrh	r3, [r3, #0]
 80137f2:	b29a      	uxth	r2, r3
 80137f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80137f8:	b29b      	uxth	r3, r3
 80137fa:	029b      	lsls	r3, r3, #10
 80137fc:	b29b      	uxth	r3, r3
 80137fe:	4313      	orrs	r3, r2
 8013800:	b29b      	uxth	r3, r3
 8013802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801380a:	b29a      	uxth	r2, r3
 801380c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801380e:	801a      	strh	r2, [r3, #0]
 8013810:	e050      	b.n	80138b4 <USB_EPStartXfer+0xb62>
 8013812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013816:	2b00      	cmp	r3, #0
 8013818:	d10a      	bne.n	8013830 <USB_EPStartXfer+0xade>
 801381a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801381c:	881b      	ldrh	r3, [r3, #0]
 801381e:	b29b      	uxth	r3, r3
 8013820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013828:	b29a      	uxth	r2, r3
 801382a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801382c:	801a      	strh	r2, [r3, #0]
 801382e:	e041      	b.n	80138b4 <USB_EPStartXfer+0xb62>
 8013830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013834:	085b      	lsrs	r3, r3, #1
 8013836:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801383a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801383e:	f003 0301 	and.w	r3, r3, #1
 8013842:	2b00      	cmp	r3, #0
 8013844:	d004      	beq.n	8013850 <USB_EPStartXfer+0xafe>
 8013846:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801384a:	3301      	adds	r3, #1
 801384c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8013850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013852:	881b      	ldrh	r3, [r3, #0]
 8013854:	b29a      	uxth	r2, r3
 8013856:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801385a:	b29b      	uxth	r3, r3
 801385c:	029b      	lsls	r3, r3, #10
 801385e:	b29b      	uxth	r3, r3
 8013860:	4313      	orrs	r3, r2
 8013862:	b29a      	uxth	r2, r3
 8013864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013866:	801a      	strh	r2, [r3, #0]
 8013868:	e024      	b.n	80138b4 <USB_EPStartXfer+0xb62>
 801386a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801386e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	785b      	ldrb	r3, [r3, #1]
 8013876:	2b01      	cmp	r3, #1
 8013878:	d11c      	bne.n	80138b4 <USB_EPStartXfer+0xb62>
 801387a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801387e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013888:	b29b      	uxth	r3, r3
 801388a:	461a      	mov	r2, r3
 801388c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801388e:	4413      	add	r3, r2
 8013890:	673b      	str	r3, [r7, #112]	; 0x70
 8013892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	781b      	ldrb	r3, [r3, #0]
 801389e:	00da      	lsls	r2, r3, #3
 80138a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80138a2:	4413      	add	r3, r2
 80138a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80138a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80138aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80138ae:	b29a      	uxth	r2, r3
 80138b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80138b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80138b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80138b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	895b      	ldrh	r3, [r3, #10]
 80138c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80138c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80138c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	6959      	ldr	r1, [r3, #20]
 80138d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80138d4:	b29b      	uxth	r3, r3
 80138d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80138da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80138de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80138e2:	6800      	ldr	r0, [r0, #0]
 80138e4:	f000 ff20 	bl	8014728 <USB_WritePMA>
 80138e8:	e0ca      	b.n	8013a80 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80138ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80138ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	785b      	ldrb	r3, [r3, #1]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d177      	bne.n	80139ea <USB_EPStartXfer+0xc98>
 80138fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80138fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801390a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013914:	b29b      	uxth	r3, r3
 8013916:	461a      	mov	r2, r3
 8013918:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801391a:	4413      	add	r3, r2
 801391c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801391e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	781b      	ldrb	r3, [r3, #0]
 801392a:	00da      	lsls	r2, r3, #3
 801392c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801392e:	4413      	add	r3, r2
 8013930:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013934:	67bb      	str	r3, [r7, #120]	; 0x78
 8013936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013938:	881b      	ldrh	r3, [r3, #0]
 801393a:	b29b      	uxth	r3, r3
 801393c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013940:	b29a      	uxth	r2, r3
 8013942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013944:	801a      	strh	r2, [r3, #0]
 8013946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801394a:	2b3e      	cmp	r3, #62	; 0x3e
 801394c:	d921      	bls.n	8013992 <USB_EPStartXfer+0xc40>
 801394e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013952:	095b      	lsrs	r3, r3, #5
 8013954:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801395c:	f003 031f 	and.w	r3, r3, #31
 8013960:	2b00      	cmp	r3, #0
 8013962:	d104      	bne.n	801396e <USB_EPStartXfer+0xc1c>
 8013964:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013968:	3b01      	subs	r3, #1
 801396a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801396e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013970:	881b      	ldrh	r3, [r3, #0]
 8013972:	b29a      	uxth	r2, r3
 8013974:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013978:	b29b      	uxth	r3, r3
 801397a:	029b      	lsls	r3, r3, #10
 801397c:	b29b      	uxth	r3, r3
 801397e:	4313      	orrs	r3, r2
 8013980:	b29b      	uxth	r3, r3
 8013982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801398a:	b29a      	uxth	r2, r3
 801398c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801398e:	801a      	strh	r2, [r3, #0]
 8013990:	e05c      	b.n	8013a4c <USB_EPStartXfer+0xcfa>
 8013992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013996:	2b00      	cmp	r3, #0
 8013998:	d10a      	bne.n	80139b0 <USB_EPStartXfer+0xc5e>
 801399a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801399c:	881b      	ldrh	r3, [r3, #0]
 801399e:	b29b      	uxth	r3, r3
 80139a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80139a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80139a8:	b29a      	uxth	r2, r3
 80139aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80139ac:	801a      	strh	r2, [r3, #0]
 80139ae:	e04d      	b.n	8013a4c <USB_EPStartXfer+0xcfa>
 80139b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80139b4:	085b      	lsrs	r3, r3, #1
 80139b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80139ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80139be:	f003 0301 	and.w	r3, r3, #1
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d004      	beq.n	80139d0 <USB_EPStartXfer+0xc7e>
 80139c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80139ca:	3301      	adds	r3, #1
 80139cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80139d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80139d2:	881b      	ldrh	r3, [r3, #0]
 80139d4:	b29a      	uxth	r2, r3
 80139d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80139da:	b29b      	uxth	r3, r3
 80139dc:	029b      	lsls	r3, r3, #10
 80139de:	b29b      	uxth	r3, r3
 80139e0:	4313      	orrs	r3, r2
 80139e2:	b29a      	uxth	r2, r3
 80139e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80139e6:	801a      	strh	r2, [r3, #0]
 80139e8:	e030      	b.n	8013a4c <USB_EPStartXfer+0xcfa>
 80139ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	785b      	ldrb	r3, [r3, #1]
 80139f6:	2b01      	cmp	r3, #1
 80139f8:	d128      	bne.n	8013a4c <USB_EPStartXfer+0xcfa>
 80139fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013a16:	b29b      	uxth	r3, r3
 8013a18:	461a      	mov	r2, r3
 8013a1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013a1e:	4413      	add	r3, r2
 8013a20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	00da      	lsls	r2, r3, #3
 8013a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013a36:	4413      	add	r3, r2
 8013a38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013a3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013a44:	b29a      	uxth	r2, r3
 8013a46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013a4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8013a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	891b      	ldrh	r3, [r3, #8]
 8013a58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	6959      	ldr	r1, [r3, #20]
 8013a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013a6c:	b29b      	uxth	r3, r3
 8013a6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013a72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013a76:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013a7a:	6800      	ldr	r0, [r0, #0]
 8013a7c:	f000 fe54 	bl	8014728 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8013a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013a88:	681a      	ldr	r2, [r3, #0]
 8013a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	009b      	lsls	r3, r3, #2
 8013a98:	4413      	add	r3, r2
 8013a9a:	881b      	ldrh	r3, [r3, #0]
 8013a9c:	b29b      	uxth	r3, r3
 8013a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013aa6:	817b      	strh	r3, [r7, #10]
 8013aa8:	897b      	ldrh	r3, [r7, #10]
 8013aaa:	f083 0310 	eor.w	r3, r3, #16
 8013aae:	817b      	strh	r3, [r7, #10]
 8013ab0:	897b      	ldrh	r3, [r7, #10]
 8013ab2:	f083 0320 	eor.w	r3, r3, #32
 8013ab6:	817b      	strh	r3, [r7, #10]
 8013ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013abc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013ac0:	681a      	ldr	r2, [r3, #0]
 8013ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	781b      	ldrb	r3, [r3, #0]
 8013ace:	009b      	lsls	r3, r3, #2
 8013ad0:	441a      	add	r2, r3
 8013ad2:	897b      	ldrh	r3, [r7, #10]
 8013ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ae4:	b29b      	uxth	r3, r3
 8013ae6:	8013      	strh	r3, [r2, #0]
 8013ae8:	f000 bcde 	b.w	80144a8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8013aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	7b1b      	ldrb	r3, [r3, #12]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	f040 80bb 	bne.w	8013c74 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8013afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	699a      	ldr	r2, [r3, #24]
 8013b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	691b      	ldr	r3, [r3, #16]
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d917      	bls.n	8013b4a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8013b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	691b      	ldr	r3, [r3, #16]
 8013b26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8013b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	699a      	ldr	r2, [r3, #24]
 8013b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b3a:	1ad2      	subs	r2, r2, r3
 8013b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	619a      	str	r2, [r3, #24]
 8013b48:	e00e      	b.n	8013b68 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8013b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	699b      	ldr	r3, [r3, #24]
 8013b56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8013b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	2200      	movs	r2, #0
 8013b66:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8013b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013b84:	b29b      	uxth	r3, r3
 8013b86:	461a      	mov	r2, r3
 8013b88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b8c:	4413      	add	r3, r2
 8013b8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	781b      	ldrb	r3, [r3, #0]
 8013b9e:	00da      	lsls	r2, r3, #3
 8013ba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013ba4:	4413      	add	r3, r2
 8013ba6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013bb2:	881b      	ldrh	r3, [r3, #0]
 8013bb4:	b29b      	uxth	r3, r3
 8013bb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013bba:	b29a      	uxth	r2, r3
 8013bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013bc0:	801a      	strh	r2, [r3, #0]
 8013bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013bc6:	2b3e      	cmp	r3, #62	; 0x3e
 8013bc8:	d924      	bls.n	8013c14 <USB_EPStartXfer+0xec2>
 8013bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013bce:	095b      	lsrs	r3, r3, #5
 8013bd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013bd8:	f003 031f 	and.w	r3, r3, #31
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d104      	bne.n	8013bea <USB_EPStartXfer+0xe98>
 8013be0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013be4:	3b01      	subs	r3, #1
 8013be6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013bee:	881b      	ldrh	r3, [r3, #0]
 8013bf0:	b29a      	uxth	r2, r3
 8013bf2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013bf6:	b29b      	uxth	r3, r3
 8013bf8:	029b      	lsls	r3, r3, #10
 8013bfa:	b29b      	uxth	r3, r3
 8013bfc:	4313      	orrs	r3, r2
 8013bfe:	b29b      	uxth	r3, r3
 8013c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013c08:	b29a      	uxth	r2, r3
 8013c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013c0e:	801a      	strh	r2, [r3, #0]
 8013c10:	f000 bc10 	b.w	8014434 <USB_EPStartXfer+0x16e2>
 8013c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d10c      	bne.n	8013c36 <USB_EPStartXfer+0xee4>
 8013c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013c20:	881b      	ldrh	r3, [r3, #0]
 8013c22:	b29b      	uxth	r3, r3
 8013c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013c2c:	b29a      	uxth	r2, r3
 8013c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013c32:	801a      	strh	r2, [r3, #0]
 8013c34:	e3fe      	b.n	8014434 <USB_EPStartXfer+0x16e2>
 8013c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013c3a:	085b      	lsrs	r3, r3, #1
 8013c3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013c44:	f003 0301 	and.w	r3, r3, #1
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d004      	beq.n	8013c56 <USB_EPStartXfer+0xf04>
 8013c4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013c50:	3301      	adds	r3, #1
 8013c52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013c5a:	881b      	ldrh	r3, [r3, #0]
 8013c5c:	b29a      	uxth	r2, r3
 8013c5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013c62:	b29b      	uxth	r3, r3
 8013c64:	029b      	lsls	r3, r3, #10
 8013c66:	b29b      	uxth	r3, r3
 8013c68:	4313      	orrs	r3, r2
 8013c6a:	b29a      	uxth	r2, r3
 8013c6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013c70:	801a      	strh	r2, [r3, #0]
 8013c72:	e3df      	b.n	8014434 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8013c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	78db      	ldrb	r3, [r3, #3]
 8013c80:	2b02      	cmp	r3, #2
 8013c82:	f040 8218 	bne.w	80140b6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8013c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	785b      	ldrb	r3, [r3, #1]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	f040 809d 	bne.w	8013dd2 <USB_EPStartXfer+0x1080>
 8013c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013c9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013caa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013cb4:	b29b      	uxth	r3, r3
 8013cb6:	461a      	mov	r2, r3
 8013cb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013cbc:	4413      	add	r3, r2
 8013cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	781b      	ldrb	r3, [r3, #0]
 8013cce:	00da      	lsls	r2, r3, #3
 8013cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013cd4:	4413      	add	r3, r2
 8013cd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013cda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013cde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013ce2:	881b      	ldrh	r3, [r3, #0]
 8013ce4:	b29b      	uxth	r3, r3
 8013ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013cea:	b29a      	uxth	r2, r3
 8013cec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013cf0:	801a      	strh	r2, [r3, #0]
 8013cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	691b      	ldr	r3, [r3, #16]
 8013cfe:	2b3e      	cmp	r3, #62	; 0x3e
 8013d00:	d92b      	bls.n	8013d5a <USB_EPStartXfer+0x1008>
 8013d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	691b      	ldr	r3, [r3, #16]
 8013d0e:	095b      	lsrs	r3, r3, #5
 8013d10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	691b      	ldr	r3, [r3, #16]
 8013d20:	f003 031f 	and.w	r3, r3, #31
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d104      	bne.n	8013d32 <USB_EPStartXfer+0xfe0>
 8013d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013d2c:	3b01      	subs	r3, #1
 8013d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013d32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013d36:	881b      	ldrh	r3, [r3, #0]
 8013d38:	b29a      	uxth	r2, r3
 8013d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013d3e:	b29b      	uxth	r3, r3
 8013d40:	029b      	lsls	r3, r3, #10
 8013d42:	b29b      	uxth	r3, r3
 8013d44:	4313      	orrs	r3, r2
 8013d46:	b29b      	uxth	r3, r3
 8013d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013d50:	b29a      	uxth	r2, r3
 8013d52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013d56:	801a      	strh	r2, [r3, #0]
 8013d58:	e070      	b.n	8013e3c <USB_EPStartXfer+0x10ea>
 8013d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	691b      	ldr	r3, [r3, #16]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d10c      	bne.n	8013d84 <USB_EPStartXfer+0x1032>
 8013d6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013d6e:	881b      	ldrh	r3, [r3, #0]
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013d7a:	b29a      	uxth	r2, r3
 8013d7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013d80:	801a      	strh	r2, [r3, #0]
 8013d82:	e05b      	b.n	8013e3c <USB_EPStartXfer+0x10ea>
 8013d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	691b      	ldr	r3, [r3, #16]
 8013d90:	085b      	lsrs	r3, r3, #1
 8013d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	691b      	ldr	r3, [r3, #16]
 8013da2:	f003 0301 	and.w	r3, r3, #1
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d004      	beq.n	8013db4 <USB_EPStartXfer+0x1062>
 8013daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013dae:	3301      	adds	r3, #1
 8013db0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013db4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013db8:	881b      	ldrh	r3, [r3, #0]
 8013dba:	b29a      	uxth	r2, r3
 8013dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013dc0:	b29b      	uxth	r3, r3
 8013dc2:	029b      	lsls	r3, r3, #10
 8013dc4:	b29b      	uxth	r3, r3
 8013dc6:	4313      	orrs	r3, r2
 8013dc8:	b29a      	uxth	r2, r3
 8013dca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013dce:	801a      	strh	r2, [r3, #0]
 8013dd0:	e034      	b.n	8013e3c <USB_EPStartXfer+0x10ea>
 8013dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	785b      	ldrb	r3, [r3, #1]
 8013dde:	2b01      	cmp	r3, #1
 8013de0:	d12c      	bne.n	8013e3c <USB_EPStartXfer+0x10ea>
 8013de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013de6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013df4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013dfe:	b29b      	uxth	r3, r3
 8013e00:	461a      	mov	r2, r3
 8013e02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013e06:	4413      	add	r3, r2
 8013e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	781b      	ldrb	r3, [r3, #0]
 8013e18:	00da      	lsls	r2, r3, #3
 8013e1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013e1e:	4413      	add	r3, r2
 8013e20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	691b      	ldr	r3, [r3, #16]
 8013e34:	b29a      	uxth	r2, r3
 8013e36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013e3a:	801a      	strh	r2, [r3, #0]
 8013e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8013e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	785b      	ldrb	r3, [r3, #1]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	f040 809d 	bne.w	8013f96 <USB_EPStartXfer+0x1244>
 8013e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013e78:	b29b      	uxth	r3, r3
 8013e7a:	461a      	mov	r2, r3
 8013e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013e80:	4413      	add	r3, r2
 8013e82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	781b      	ldrb	r3, [r3, #0]
 8013e92:	00da      	lsls	r2, r3, #3
 8013e94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013e98:	4413      	add	r3, r2
 8013e9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013e9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013ea2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013ea6:	881b      	ldrh	r3, [r3, #0]
 8013ea8:	b29b      	uxth	r3, r3
 8013eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013eae:	b29a      	uxth	r2, r3
 8013eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013eb4:	801a      	strh	r2, [r3, #0]
 8013eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	691b      	ldr	r3, [r3, #16]
 8013ec2:	2b3e      	cmp	r3, #62	; 0x3e
 8013ec4:	d92b      	bls.n	8013f1e <USB_EPStartXfer+0x11cc>
 8013ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	691b      	ldr	r3, [r3, #16]
 8013ed2:	095b      	lsrs	r3, r3, #5
 8013ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	691b      	ldr	r3, [r3, #16]
 8013ee4:	f003 031f 	and.w	r3, r3, #31
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d104      	bne.n	8013ef6 <USB_EPStartXfer+0x11a4>
 8013eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013ef0:	3b01      	subs	r3, #1
 8013ef2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013ef6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013efa:	881b      	ldrh	r3, [r3, #0]
 8013efc:	b29a      	uxth	r2, r3
 8013efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013f02:	b29b      	uxth	r3, r3
 8013f04:	029b      	lsls	r3, r3, #10
 8013f06:	b29b      	uxth	r3, r3
 8013f08:	4313      	orrs	r3, r2
 8013f0a:	b29b      	uxth	r3, r3
 8013f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013f14:	b29a      	uxth	r2, r3
 8013f16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013f1a:	801a      	strh	r2, [r3, #0]
 8013f1c:	e069      	b.n	8013ff2 <USB_EPStartXfer+0x12a0>
 8013f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	691b      	ldr	r3, [r3, #16]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d10c      	bne.n	8013f48 <USB_EPStartXfer+0x11f6>
 8013f2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013f32:	881b      	ldrh	r3, [r3, #0]
 8013f34:	b29b      	uxth	r3, r3
 8013f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013f3e:	b29a      	uxth	r2, r3
 8013f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013f44:	801a      	strh	r2, [r3, #0]
 8013f46:	e054      	b.n	8013ff2 <USB_EPStartXfer+0x12a0>
 8013f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	691b      	ldr	r3, [r3, #16]
 8013f54:	085b      	lsrs	r3, r3, #1
 8013f56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	691b      	ldr	r3, [r3, #16]
 8013f66:	f003 0301 	and.w	r3, r3, #1
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d004      	beq.n	8013f78 <USB_EPStartXfer+0x1226>
 8013f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013f72:	3301      	adds	r3, #1
 8013f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013f7c:	881b      	ldrh	r3, [r3, #0]
 8013f7e:	b29a      	uxth	r2, r3
 8013f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013f84:	b29b      	uxth	r3, r3
 8013f86:	029b      	lsls	r3, r3, #10
 8013f88:	b29b      	uxth	r3, r3
 8013f8a:	4313      	orrs	r3, r2
 8013f8c:	b29a      	uxth	r2, r3
 8013f8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013f92:	801a      	strh	r2, [r3, #0]
 8013f94:	e02d      	b.n	8013ff2 <USB_EPStartXfer+0x12a0>
 8013f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	785b      	ldrb	r3, [r3, #1]
 8013fa2:	2b01      	cmp	r3, #1
 8013fa4:	d125      	bne.n	8013ff2 <USB_EPStartXfer+0x12a0>
 8013fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013faa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013fb4:	b29b      	uxth	r3, r3
 8013fb6:	461a      	mov	r2, r3
 8013fb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013fbc:	4413      	add	r3, r2
 8013fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8013fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	781b      	ldrb	r3, [r3, #0]
 8013fce:	00da      	lsls	r2, r3, #3
 8013fd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013fd4:	4413      	add	r3, r2
 8013fd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8013fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	691b      	ldr	r3, [r3, #16]
 8013fea:	b29a      	uxth	r2, r3
 8013fec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013ff0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8013ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	69db      	ldr	r3, [r3, #28]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	f000 8218 	beq.w	8014434 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8014004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014008:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801400c:	681a      	ldr	r2, [r3, #0]
 801400e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	781b      	ldrb	r3, [r3, #0]
 801401a:	009b      	lsls	r3, r3, #2
 801401c:	4413      	add	r3, r2
 801401e:	881b      	ldrh	r3, [r3, #0]
 8014020:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014024:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8014028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801402c:	2b00      	cmp	r3, #0
 801402e:	d005      	beq.n	801403c <USB_EPStartXfer+0x12ea>
 8014030:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8014034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014038:	2b00      	cmp	r3, #0
 801403a:	d10d      	bne.n	8014058 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801403c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8014040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014044:	2b00      	cmp	r3, #0
 8014046:	f040 81f5 	bne.w	8014434 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801404a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014052:	2b00      	cmp	r3, #0
 8014054:	f040 81ee 	bne.w	8014434 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8014058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801405c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014060:	681a      	ldr	r2, [r3, #0]
 8014062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	781b      	ldrb	r3, [r3, #0]
 801406e:	009b      	lsls	r3, r3, #2
 8014070:	4413      	add	r3, r2
 8014072:	881b      	ldrh	r3, [r3, #0]
 8014074:	b29b      	uxth	r3, r3
 8014076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801407e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8014082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014086:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801408a:	681a      	ldr	r2, [r3, #0]
 801408c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	781b      	ldrb	r3, [r3, #0]
 8014098:	009b      	lsls	r3, r3, #2
 801409a:	441a      	add	r2, r3
 801409c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80140a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80140a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80140a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80140ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80140b0:	b29b      	uxth	r3, r3
 80140b2:	8013      	strh	r3, [r2, #0]
 80140b4:	e1be      	b.n	8014434 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80140b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80140ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	78db      	ldrb	r3, [r3, #3]
 80140c2:	2b01      	cmp	r3, #1
 80140c4:	f040 81b4 	bne.w	8014430 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80140c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80140cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	699a      	ldr	r2, [r3, #24]
 80140d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80140d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	691b      	ldr	r3, [r3, #16]
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d917      	bls.n	8014114 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80140e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80140e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	691b      	ldr	r3, [r3, #16]
 80140f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80140f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80140f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	699a      	ldr	r2, [r3, #24]
 8014100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014104:	1ad2      	subs	r2, r2, r3
 8014106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801410a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	619a      	str	r2, [r3, #24]
 8014112:	e00e      	b.n	8014132 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8014114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	699b      	ldr	r3, [r3, #24]
 8014120:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8014124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	2200      	movs	r2, #0
 8014130:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8014132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	785b      	ldrb	r3, [r3, #1]
 801413e:	2b00      	cmp	r3, #0
 8014140:	f040 8085 	bne.w	801424e <USB_EPStartXfer+0x14fc>
 8014144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014148:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8014152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014156:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014160:	b29b      	uxth	r3, r3
 8014162:	461a      	mov	r2, r3
 8014164:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014168:	4413      	add	r3, r2
 801416a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801416e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	781b      	ldrb	r3, [r3, #0]
 801417a:	00da      	lsls	r2, r3, #3
 801417c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014180:	4413      	add	r3, r2
 8014182:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014186:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801418a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801418e:	881b      	ldrh	r3, [r3, #0]
 8014190:	b29b      	uxth	r3, r3
 8014192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014196:	b29a      	uxth	r2, r3
 8014198:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801419c:	801a      	strh	r2, [r3, #0]
 801419e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80141a2:	2b3e      	cmp	r3, #62	; 0x3e
 80141a4:	d923      	bls.n	80141ee <USB_EPStartXfer+0x149c>
 80141a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80141aa:	095b      	lsrs	r3, r3, #5
 80141ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80141b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80141b4:	f003 031f 	and.w	r3, r3, #31
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d104      	bne.n	80141c6 <USB_EPStartXfer+0x1474>
 80141bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80141c0:	3b01      	subs	r3, #1
 80141c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80141c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80141ca:	881b      	ldrh	r3, [r3, #0]
 80141cc:	b29a      	uxth	r2, r3
 80141ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80141d2:	b29b      	uxth	r3, r3
 80141d4:	029b      	lsls	r3, r3, #10
 80141d6:	b29b      	uxth	r3, r3
 80141d8:	4313      	orrs	r3, r2
 80141da:	b29b      	uxth	r3, r3
 80141dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80141e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80141e4:	b29a      	uxth	r2, r3
 80141e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80141ea:	801a      	strh	r2, [r3, #0]
 80141ec:	e060      	b.n	80142b0 <USB_EPStartXfer+0x155e>
 80141ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d10c      	bne.n	8014210 <USB_EPStartXfer+0x14be>
 80141f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80141fa:	881b      	ldrh	r3, [r3, #0]
 80141fc:	b29b      	uxth	r3, r3
 80141fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014206:	b29a      	uxth	r2, r3
 8014208:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801420c:	801a      	strh	r2, [r3, #0]
 801420e:	e04f      	b.n	80142b0 <USB_EPStartXfer+0x155e>
 8014210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014214:	085b      	lsrs	r3, r3, #1
 8014216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801421a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801421e:	f003 0301 	and.w	r3, r3, #1
 8014222:	2b00      	cmp	r3, #0
 8014224:	d004      	beq.n	8014230 <USB_EPStartXfer+0x14de>
 8014226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801422a:	3301      	adds	r3, #1
 801422c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014230:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014234:	881b      	ldrh	r3, [r3, #0]
 8014236:	b29a      	uxth	r2, r3
 8014238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801423c:	b29b      	uxth	r3, r3
 801423e:	029b      	lsls	r3, r3, #10
 8014240:	b29b      	uxth	r3, r3
 8014242:	4313      	orrs	r3, r2
 8014244:	b29a      	uxth	r2, r3
 8014246:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801424a:	801a      	strh	r2, [r3, #0]
 801424c:	e030      	b.n	80142b0 <USB_EPStartXfer+0x155e>
 801424e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	785b      	ldrb	r3, [r3, #1]
 801425a:	2b01      	cmp	r3, #1
 801425c:	d128      	bne.n	80142b0 <USB_EPStartXfer+0x155e>
 801425e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801426c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801427a:	b29b      	uxth	r3, r3
 801427c:	461a      	mov	r2, r3
 801427e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014282:	4413      	add	r3, r2
 8014284:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8014288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801428c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	781b      	ldrb	r3, [r3, #0]
 8014294:	00da      	lsls	r2, r3, #3
 8014296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801429a:	4413      	add	r3, r2
 801429c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80142a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80142a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80142a8:	b29a      	uxth	r2, r3
 80142aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80142ae:	801a      	strh	r2, [r3, #0]
 80142b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80142b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80142be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80142c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	785b      	ldrb	r3, [r3, #1]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	f040 8085 	bne.w	80143da <USB_EPStartXfer+0x1688>
 80142d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80142d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80142de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80142e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80142ec:	b29b      	uxth	r3, r3
 80142ee:	461a      	mov	r2, r3
 80142f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80142f4:	4413      	add	r3, r2
 80142f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80142fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80142fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	781b      	ldrb	r3, [r3, #0]
 8014306:	00da      	lsls	r2, r3, #3
 8014308:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801430c:	4413      	add	r3, r2
 801430e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014312:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014316:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801431a:	881b      	ldrh	r3, [r3, #0]
 801431c:	b29b      	uxth	r3, r3
 801431e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014322:	b29a      	uxth	r2, r3
 8014324:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014328:	801a      	strh	r2, [r3, #0]
 801432a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801432e:	2b3e      	cmp	r3, #62	; 0x3e
 8014330:	d923      	bls.n	801437a <USB_EPStartXfer+0x1628>
 8014332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014336:	095b      	lsrs	r3, r3, #5
 8014338:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801433c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014340:	f003 031f 	and.w	r3, r3, #31
 8014344:	2b00      	cmp	r3, #0
 8014346:	d104      	bne.n	8014352 <USB_EPStartXfer+0x1600>
 8014348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801434c:	3b01      	subs	r3, #1
 801434e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014352:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014356:	881b      	ldrh	r3, [r3, #0]
 8014358:	b29a      	uxth	r2, r3
 801435a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801435e:	b29b      	uxth	r3, r3
 8014360:	029b      	lsls	r3, r3, #10
 8014362:	b29b      	uxth	r3, r3
 8014364:	4313      	orrs	r3, r2
 8014366:	b29b      	uxth	r3, r3
 8014368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801436c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014370:	b29a      	uxth	r2, r3
 8014372:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014376:	801a      	strh	r2, [r3, #0]
 8014378:	e05c      	b.n	8014434 <USB_EPStartXfer+0x16e2>
 801437a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801437e:	2b00      	cmp	r3, #0
 8014380:	d10c      	bne.n	801439c <USB_EPStartXfer+0x164a>
 8014382:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014386:	881b      	ldrh	r3, [r3, #0]
 8014388:	b29b      	uxth	r3, r3
 801438a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801438e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014392:	b29a      	uxth	r2, r3
 8014394:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014398:	801a      	strh	r2, [r3, #0]
 801439a:	e04b      	b.n	8014434 <USB_EPStartXfer+0x16e2>
 801439c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80143a0:	085b      	lsrs	r3, r3, #1
 80143a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80143a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80143aa:	f003 0301 	and.w	r3, r3, #1
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d004      	beq.n	80143bc <USB_EPStartXfer+0x166a>
 80143b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80143b6:	3301      	adds	r3, #1
 80143b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80143bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80143c0:	881b      	ldrh	r3, [r3, #0]
 80143c2:	b29a      	uxth	r2, r3
 80143c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80143c8:	b29b      	uxth	r3, r3
 80143ca:	029b      	lsls	r3, r3, #10
 80143cc:	b29b      	uxth	r3, r3
 80143ce:	4313      	orrs	r3, r2
 80143d0:	b29a      	uxth	r2, r3
 80143d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80143d6:	801a      	strh	r2, [r3, #0]
 80143d8:	e02c      	b.n	8014434 <USB_EPStartXfer+0x16e2>
 80143da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80143de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	785b      	ldrb	r3, [r3, #1]
 80143e6:	2b01      	cmp	r3, #1
 80143e8:	d124      	bne.n	8014434 <USB_EPStartXfer+0x16e2>
 80143ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80143ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80143f8:	b29b      	uxth	r3, r3
 80143fa:	461a      	mov	r2, r3
 80143fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014400:	4413      	add	r3, r2
 8014402:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801440a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	781b      	ldrb	r3, [r3, #0]
 8014412:	00da      	lsls	r2, r3, #3
 8014414:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014418:	4413      	add	r3, r2
 801441a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801441e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014426:	b29a      	uxth	r2, r3
 8014428:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801442c:	801a      	strh	r2, [r3, #0]
 801442e:	e001      	b.n	8014434 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8014430:	2301      	movs	r3, #1
 8014432:	e03a      	b.n	80144aa <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801443c:	681a      	ldr	r2, [r3, #0]
 801443e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	781b      	ldrb	r3, [r3, #0]
 801444a:	009b      	lsls	r3, r3, #2
 801444c:	4413      	add	r3, r2
 801444e:	881b      	ldrh	r3, [r3, #0]
 8014450:	b29b      	uxth	r3, r3
 8014452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801445a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801445e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8014462:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8014466:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801446a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801446e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8014472:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8014476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801447a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801447e:	681a      	ldr	r2, [r3, #0]
 8014480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	781b      	ldrb	r3, [r3, #0]
 801448c:	009b      	lsls	r3, r3, #2
 801448e:	441a      	add	r2, r3
 8014490:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8014494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801449c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80144a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80144a4:	b29b      	uxth	r3, r3
 80144a6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80144a8:	2300      	movs	r3, #0
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}

080144b4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80144b4:	b480      	push	{r7}
 80144b6:	b085      	sub	sp, #20
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
 80144bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80144be:	683b      	ldr	r3, [r7, #0]
 80144c0:	785b      	ldrb	r3, [r3, #1]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d020      	beq.n	8014508 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80144c6:	687a      	ldr	r2, [r7, #4]
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	781b      	ldrb	r3, [r3, #0]
 80144cc:	009b      	lsls	r3, r3, #2
 80144ce:	4413      	add	r3, r2
 80144d0:	881b      	ldrh	r3, [r3, #0]
 80144d2:	b29b      	uxth	r3, r3
 80144d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80144d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80144dc:	81bb      	strh	r3, [r7, #12]
 80144de:	89bb      	ldrh	r3, [r7, #12]
 80144e0:	f083 0310 	eor.w	r3, r3, #16
 80144e4:	81bb      	strh	r3, [r7, #12]
 80144e6:	687a      	ldr	r2, [r7, #4]
 80144e8:	683b      	ldr	r3, [r7, #0]
 80144ea:	781b      	ldrb	r3, [r3, #0]
 80144ec:	009b      	lsls	r3, r3, #2
 80144ee:	441a      	add	r2, r3
 80144f0:	89bb      	ldrh	r3, [r7, #12]
 80144f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80144f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80144fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80144fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014502:	b29b      	uxth	r3, r3
 8014504:	8013      	strh	r3, [r2, #0]
 8014506:	e01f      	b.n	8014548 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8014508:	687a      	ldr	r2, [r7, #4]
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	781b      	ldrb	r3, [r3, #0]
 801450e:	009b      	lsls	r3, r3, #2
 8014510:	4413      	add	r3, r2
 8014512:	881b      	ldrh	r3, [r3, #0]
 8014514:	b29b      	uxth	r3, r3
 8014516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801451e:	81fb      	strh	r3, [r7, #14]
 8014520:	89fb      	ldrh	r3, [r7, #14]
 8014522:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8014526:	81fb      	strh	r3, [r7, #14]
 8014528:	687a      	ldr	r2, [r7, #4]
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	781b      	ldrb	r3, [r3, #0]
 801452e:	009b      	lsls	r3, r3, #2
 8014530:	441a      	add	r2, r3
 8014532:	89fb      	ldrh	r3, [r7, #14]
 8014534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801453c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014544:	b29b      	uxth	r3, r3
 8014546:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8014548:	2300      	movs	r3, #0
}
 801454a:	4618      	mov	r0, r3
 801454c:	3714      	adds	r7, #20
 801454e:	46bd      	mov	sp, r7
 8014550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014554:	4770      	bx	lr

08014556 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014556:	b480      	push	{r7}
 8014558:	b087      	sub	sp, #28
 801455a:	af00      	add	r7, sp, #0
 801455c:	6078      	str	r0, [r7, #4]
 801455e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	7b1b      	ldrb	r3, [r3, #12]
 8014564:	2b00      	cmp	r3, #0
 8014566:	f040 809d 	bne.w	80146a4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 801456a:	683b      	ldr	r3, [r7, #0]
 801456c:	785b      	ldrb	r3, [r3, #1]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d04c      	beq.n	801460c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014572:	687a      	ldr	r2, [r7, #4]
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	009b      	lsls	r3, r3, #2
 801457a:	4413      	add	r3, r2
 801457c:	881b      	ldrh	r3, [r3, #0]
 801457e:	823b      	strh	r3, [r7, #16]
 8014580:	8a3b      	ldrh	r3, [r7, #16]
 8014582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014586:	2b00      	cmp	r3, #0
 8014588:	d01b      	beq.n	80145c2 <USB_EPClearStall+0x6c>
 801458a:	687a      	ldr	r2, [r7, #4]
 801458c:	683b      	ldr	r3, [r7, #0]
 801458e:	781b      	ldrb	r3, [r3, #0]
 8014590:	009b      	lsls	r3, r3, #2
 8014592:	4413      	add	r3, r2
 8014594:	881b      	ldrh	r3, [r3, #0]
 8014596:	b29b      	uxth	r3, r3
 8014598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801459c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80145a0:	81fb      	strh	r3, [r7, #14]
 80145a2:	687a      	ldr	r2, [r7, #4]
 80145a4:	683b      	ldr	r3, [r7, #0]
 80145a6:	781b      	ldrb	r3, [r3, #0]
 80145a8:	009b      	lsls	r3, r3, #2
 80145aa:	441a      	add	r2, r3
 80145ac:	89fb      	ldrh	r3, [r7, #14]
 80145ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80145b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80145b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80145ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80145be:	b29b      	uxth	r3, r3
 80145c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80145c2:	683b      	ldr	r3, [r7, #0]
 80145c4:	78db      	ldrb	r3, [r3, #3]
 80145c6:	2b01      	cmp	r3, #1
 80145c8:	d06c      	beq.n	80146a4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80145ca:	687a      	ldr	r2, [r7, #4]
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	781b      	ldrb	r3, [r3, #0]
 80145d0:	009b      	lsls	r3, r3, #2
 80145d2:	4413      	add	r3, r2
 80145d4:	881b      	ldrh	r3, [r3, #0]
 80145d6:	b29b      	uxth	r3, r3
 80145d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80145dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80145e0:	81bb      	strh	r3, [r7, #12]
 80145e2:	89bb      	ldrh	r3, [r7, #12]
 80145e4:	f083 0320 	eor.w	r3, r3, #32
 80145e8:	81bb      	strh	r3, [r7, #12]
 80145ea:	687a      	ldr	r2, [r7, #4]
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	781b      	ldrb	r3, [r3, #0]
 80145f0:	009b      	lsls	r3, r3, #2
 80145f2:	441a      	add	r2, r3
 80145f4:	89bb      	ldrh	r3, [r7, #12]
 80145f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80145fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80145fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014606:	b29b      	uxth	r3, r3
 8014608:	8013      	strh	r3, [r2, #0]
 801460a:	e04b      	b.n	80146a4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801460c:	687a      	ldr	r2, [r7, #4]
 801460e:	683b      	ldr	r3, [r7, #0]
 8014610:	781b      	ldrb	r3, [r3, #0]
 8014612:	009b      	lsls	r3, r3, #2
 8014614:	4413      	add	r3, r2
 8014616:	881b      	ldrh	r3, [r3, #0]
 8014618:	82fb      	strh	r3, [r7, #22]
 801461a:	8afb      	ldrh	r3, [r7, #22]
 801461c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014620:	2b00      	cmp	r3, #0
 8014622:	d01b      	beq.n	801465c <USB_EPClearStall+0x106>
 8014624:	687a      	ldr	r2, [r7, #4]
 8014626:	683b      	ldr	r3, [r7, #0]
 8014628:	781b      	ldrb	r3, [r3, #0]
 801462a:	009b      	lsls	r3, r3, #2
 801462c:	4413      	add	r3, r2
 801462e:	881b      	ldrh	r3, [r3, #0]
 8014630:	b29b      	uxth	r3, r3
 8014632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801463a:	82bb      	strh	r3, [r7, #20]
 801463c:	687a      	ldr	r2, [r7, #4]
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	781b      	ldrb	r3, [r3, #0]
 8014642:	009b      	lsls	r3, r3, #2
 8014644:	441a      	add	r2, r3
 8014646:	8abb      	ldrh	r3, [r7, #20]
 8014648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801464c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8014654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014658:	b29b      	uxth	r3, r3
 801465a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801465c:	687a      	ldr	r2, [r7, #4]
 801465e:	683b      	ldr	r3, [r7, #0]
 8014660:	781b      	ldrb	r3, [r3, #0]
 8014662:	009b      	lsls	r3, r3, #2
 8014664:	4413      	add	r3, r2
 8014666:	881b      	ldrh	r3, [r3, #0]
 8014668:	b29b      	uxth	r3, r3
 801466a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801466e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014672:	827b      	strh	r3, [r7, #18]
 8014674:	8a7b      	ldrh	r3, [r7, #18]
 8014676:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801467a:	827b      	strh	r3, [r7, #18]
 801467c:	8a7b      	ldrh	r3, [r7, #18]
 801467e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8014682:	827b      	strh	r3, [r7, #18]
 8014684:	687a      	ldr	r2, [r7, #4]
 8014686:	683b      	ldr	r3, [r7, #0]
 8014688:	781b      	ldrb	r3, [r3, #0]
 801468a:	009b      	lsls	r3, r3, #2
 801468c:	441a      	add	r2, r3
 801468e:	8a7b      	ldrh	r3, [r7, #18]
 8014690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801469c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146a0:	b29b      	uxth	r3, r3
 80146a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80146a4:	2300      	movs	r3, #0
}
 80146a6:	4618      	mov	r0, r3
 80146a8:	371c      	adds	r7, #28
 80146aa:	46bd      	mov	sp, r7
 80146ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b0:	4770      	bx	lr

080146b2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80146b2:	b480      	push	{r7}
 80146b4:	b083      	sub	sp, #12
 80146b6:	af00      	add	r7, sp, #0
 80146b8:	6078      	str	r0, [r7, #4]
 80146ba:	460b      	mov	r3, r1
 80146bc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80146be:	78fb      	ldrb	r3, [r7, #3]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d103      	bne.n	80146cc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2280      	movs	r2, #128	; 0x80
 80146c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80146cc:	2300      	movs	r3, #0
}
 80146ce:	4618      	mov	r0, r3
 80146d0:	370c      	adds	r7, #12
 80146d2:	46bd      	mov	sp, r7
 80146d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d8:	4770      	bx	lr

080146da <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80146da:	b480      	push	{r7}
 80146dc:	b083      	sub	sp, #12
 80146de:	af00      	add	r7, sp, #0
 80146e0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80146e8:	b29b      	uxth	r3, r3
 80146ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80146ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80146f2:	b29a      	uxth	r2, r3
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80146fa:	2300      	movs	r3, #0
}
 80146fc:	4618      	mov	r0, r3
 80146fe:	370c      	adds	r7, #12
 8014700:	46bd      	mov	sp, r7
 8014702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014706:	4770      	bx	lr

08014708 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8014708:	b480      	push	{r7}
 801470a:	b085      	sub	sp, #20
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8014716:	b29b      	uxth	r3, r3
 8014718:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801471a:	68fb      	ldr	r3, [r7, #12]
}
 801471c:	4618      	mov	r0, r3
 801471e:	3714      	adds	r7, #20
 8014720:	46bd      	mov	sp, r7
 8014722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014726:	4770      	bx	lr

08014728 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014728:	b480      	push	{r7}
 801472a:	b08b      	sub	sp, #44	; 0x2c
 801472c:	af00      	add	r7, sp, #0
 801472e:	60f8      	str	r0, [r7, #12]
 8014730:	60b9      	str	r1, [r7, #8]
 8014732:	4611      	mov	r1, r2
 8014734:	461a      	mov	r2, r3
 8014736:	460b      	mov	r3, r1
 8014738:	80fb      	strh	r3, [r7, #6]
 801473a:	4613      	mov	r3, r2
 801473c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801473e:	88bb      	ldrh	r3, [r7, #4]
 8014740:	3301      	adds	r3, #1
 8014742:	085b      	lsrs	r3, r3, #1
 8014744:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801474e:	88fa      	ldrh	r2, [r7, #6]
 8014750:	697b      	ldr	r3, [r7, #20]
 8014752:	4413      	add	r3, r2
 8014754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014758:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801475a:	69bb      	ldr	r3, [r7, #24]
 801475c:	627b      	str	r3, [r7, #36]	; 0x24
 801475e:	e01b      	b.n	8014798 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8014760:	69fb      	ldr	r3, [r7, #28]
 8014762:	781b      	ldrb	r3, [r3, #0]
 8014764:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8014766:	69fb      	ldr	r3, [r7, #28]
 8014768:	3301      	adds	r3, #1
 801476a:	781b      	ldrb	r3, [r3, #0]
 801476c:	021b      	lsls	r3, r3, #8
 801476e:	b21a      	sxth	r2, r3
 8014770:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014774:	4313      	orrs	r3, r2
 8014776:	b21b      	sxth	r3, r3
 8014778:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 801477a:	6a3b      	ldr	r3, [r7, #32]
 801477c:	8a7a      	ldrh	r2, [r7, #18]
 801477e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8014780:	6a3b      	ldr	r3, [r7, #32]
 8014782:	3302      	adds	r3, #2
 8014784:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8014786:	69fb      	ldr	r3, [r7, #28]
 8014788:	3301      	adds	r3, #1
 801478a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801478c:	69fb      	ldr	r3, [r7, #28]
 801478e:	3301      	adds	r3, #1
 8014790:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8014792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014794:	3b01      	subs	r3, #1
 8014796:	627b      	str	r3, [r7, #36]	; 0x24
 8014798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801479a:	2b00      	cmp	r3, #0
 801479c:	d1e0      	bne.n	8014760 <USB_WritePMA+0x38>
  }
}
 801479e:	bf00      	nop
 80147a0:	bf00      	nop
 80147a2:	372c      	adds	r7, #44	; 0x2c
 80147a4:	46bd      	mov	sp, r7
 80147a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147aa:	4770      	bx	lr

080147ac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80147ac:	b480      	push	{r7}
 80147ae:	b08b      	sub	sp, #44	; 0x2c
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	60f8      	str	r0, [r7, #12]
 80147b4:	60b9      	str	r1, [r7, #8]
 80147b6:	4611      	mov	r1, r2
 80147b8:	461a      	mov	r2, r3
 80147ba:	460b      	mov	r3, r1
 80147bc:	80fb      	strh	r3, [r7, #6]
 80147be:	4613      	mov	r3, r2
 80147c0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80147c2:	88bb      	ldrh	r3, [r7, #4]
 80147c4:	085b      	lsrs	r3, r3, #1
 80147c6:	b29b      	uxth	r3, r3
 80147c8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80147ce:	68bb      	ldr	r3, [r7, #8]
 80147d0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80147d2:	88fa      	ldrh	r2, [r7, #6]
 80147d4:	697b      	ldr	r3, [r7, #20]
 80147d6:	4413      	add	r3, r2
 80147d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80147dc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80147de:	69bb      	ldr	r3, [r7, #24]
 80147e0:	627b      	str	r3, [r7, #36]	; 0x24
 80147e2:	e018      	b.n	8014816 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80147e4:	6a3b      	ldr	r3, [r7, #32]
 80147e6:	881b      	ldrh	r3, [r3, #0]
 80147e8:	b29b      	uxth	r3, r3
 80147ea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80147ec:	6a3b      	ldr	r3, [r7, #32]
 80147ee:	3302      	adds	r3, #2
 80147f0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80147f2:	693b      	ldr	r3, [r7, #16]
 80147f4:	b2da      	uxtb	r2, r3
 80147f6:	69fb      	ldr	r3, [r7, #28]
 80147f8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80147fa:	69fb      	ldr	r3, [r7, #28]
 80147fc:	3301      	adds	r3, #1
 80147fe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8014800:	693b      	ldr	r3, [r7, #16]
 8014802:	0a1b      	lsrs	r3, r3, #8
 8014804:	b2da      	uxtb	r2, r3
 8014806:	69fb      	ldr	r3, [r7, #28]
 8014808:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801480a:	69fb      	ldr	r3, [r7, #28]
 801480c:	3301      	adds	r3, #1
 801480e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8014810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014812:	3b01      	subs	r3, #1
 8014814:	627b      	str	r3, [r7, #36]	; 0x24
 8014816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014818:	2b00      	cmp	r3, #0
 801481a:	d1e3      	bne.n	80147e4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801481c:	88bb      	ldrh	r3, [r7, #4]
 801481e:	f003 0301 	and.w	r3, r3, #1
 8014822:	b29b      	uxth	r3, r3
 8014824:	2b00      	cmp	r3, #0
 8014826:	d007      	beq.n	8014838 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8014828:	6a3b      	ldr	r3, [r7, #32]
 801482a:	881b      	ldrh	r3, [r3, #0]
 801482c:	b29b      	uxth	r3, r3
 801482e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8014830:	693b      	ldr	r3, [r7, #16]
 8014832:	b2da      	uxtb	r2, r3
 8014834:	69fb      	ldr	r3, [r7, #28]
 8014836:	701a      	strb	r2, [r3, #0]
  }
}
 8014838:	bf00      	nop
 801483a:	372c      	adds	r7, #44	; 0x2c
 801483c:	46bd      	mov	sp, r7
 801483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014842:	4770      	bx	lr

08014844 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b084      	sub	sp, #16
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
 801484c:	460b      	mov	r3, r1
 801484e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014850:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014854:	f006 f8bc 	bl	801a9d0 <USBD_static_malloc>
 8014858:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d109      	bne.n	8014874 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	32b0      	adds	r2, #176	; 0xb0
 801486a:	2100      	movs	r1, #0
 801486c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014870:	2302      	movs	r3, #2
 8014872:	e0d4      	b.n	8014a1e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014874:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014878:	2100      	movs	r1, #0
 801487a:	68f8      	ldr	r0, [r7, #12]
 801487c:	f008 fb09 	bl	801ce92 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	32b0      	adds	r2, #176	; 0xb0
 801488a:	68f9      	ldr	r1, [r7, #12]
 801488c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	32b0      	adds	r2, #176	; 0xb0
 801489a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	7c1b      	ldrb	r3, [r3, #16]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d138      	bne.n	801491e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80148ac:	4b5e      	ldr	r3, [pc, #376]	; (8014a28 <USBD_CDC_Init+0x1e4>)
 80148ae:	7819      	ldrb	r1, [r3, #0]
 80148b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80148b4:	2202      	movs	r2, #2
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f005 ff31 	bl	801a71e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80148bc:	4b5a      	ldr	r3, [pc, #360]	; (8014a28 <USBD_CDC_Init+0x1e4>)
 80148be:	781b      	ldrb	r3, [r3, #0]
 80148c0:	f003 020f 	and.w	r2, r3, #15
 80148c4:	6879      	ldr	r1, [r7, #4]
 80148c6:	4613      	mov	r3, r2
 80148c8:	009b      	lsls	r3, r3, #2
 80148ca:	4413      	add	r3, r2
 80148cc:	009b      	lsls	r3, r3, #2
 80148ce:	440b      	add	r3, r1
 80148d0:	3324      	adds	r3, #36	; 0x24
 80148d2:	2201      	movs	r2, #1
 80148d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80148d6:	4b55      	ldr	r3, [pc, #340]	; (8014a2c <USBD_CDC_Init+0x1e8>)
 80148d8:	7819      	ldrb	r1, [r3, #0]
 80148da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80148de:	2202      	movs	r2, #2
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f005 ff1c 	bl	801a71e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80148e6:	4b51      	ldr	r3, [pc, #324]	; (8014a2c <USBD_CDC_Init+0x1e8>)
 80148e8:	781b      	ldrb	r3, [r3, #0]
 80148ea:	f003 020f 	and.w	r2, r3, #15
 80148ee:	6879      	ldr	r1, [r7, #4]
 80148f0:	4613      	mov	r3, r2
 80148f2:	009b      	lsls	r3, r3, #2
 80148f4:	4413      	add	r3, r2
 80148f6:	009b      	lsls	r3, r3, #2
 80148f8:	440b      	add	r3, r1
 80148fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80148fe:	2201      	movs	r2, #1
 8014900:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014902:	4b4b      	ldr	r3, [pc, #300]	; (8014a30 <USBD_CDC_Init+0x1ec>)
 8014904:	781b      	ldrb	r3, [r3, #0]
 8014906:	f003 020f 	and.w	r2, r3, #15
 801490a:	6879      	ldr	r1, [r7, #4]
 801490c:	4613      	mov	r3, r2
 801490e:	009b      	lsls	r3, r3, #2
 8014910:	4413      	add	r3, r2
 8014912:	009b      	lsls	r3, r3, #2
 8014914:	440b      	add	r3, r1
 8014916:	3326      	adds	r3, #38	; 0x26
 8014918:	2210      	movs	r2, #16
 801491a:	801a      	strh	r2, [r3, #0]
 801491c:	e035      	b.n	801498a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801491e:	4b42      	ldr	r3, [pc, #264]	; (8014a28 <USBD_CDC_Init+0x1e4>)
 8014920:	7819      	ldrb	r1, [r3, #0]
 8014922:	2340      	movs	r3, #64	; 0x40
 8014924:	2202      	movs	r2, #2
 8014926:	6878      	ldr	r0, [r7, #4]
 8014928:	f005 fef9 	bl	801a71e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801492c:	4b3e      	ldr	r3, [pc, #248]	; (8014a28 <USBD_CDC_Init+0x1e4>)
 801492e:	781b      	ldrb	r3, [r3, #0]
 8014930:	f003 020f 	and.w	r2, r3, #15
 8014934:	6879      	ldr	r1, [r7, #4]
 8014936:	4613      	mov	r3, r2
 8014938:	009b      	lsls	r3, r3, #2
 801493a:	4413      	add	r3, r2
 801493c:	009b      	lsls	r3, r3, #2
 801493e:	440b      	add	r3, r1
 8014940:	3324      	adds	r3, #36	; 0x24
 8014942:	2201      	movs	r2, #1
 8014944:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014946:	4b39      	ldr	r3, [pc, #228]	; (8014a2c <USBD_CDC_Init+0x1e8>)
 8014948:	7819      	ldrb	r1, [r3, #0]
 801494a:	2340      	movs	r3, #64	; 0x40
 801494c:	2202      	movs	r2, #2
 801494e:	6878      	ldr	r0, [r7, #4]
 8014950:	f005 fee5 	bl	801a71e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014954:	4b35      	ldr	r3, [pc, #212]	; (8014a2c <USBD_CDC_Init+0x1e8>)
 8014956:	781b      	ldrb	r3, [r3, #0]
 8014958:	f003 020f 	and.w	r2, r3, #15
 801495c:	6879      	ldr	r1, [r7, #4]
 801495e:	4613      	mov	r3, r2
 8014960:	009b      	lsls	r3, r3, #2
 8014962:	4413      	add	r3, r2
 8014964:	009b      	lsls	r3, r3, #2
 8014966:	440b      	add	r3, r1
 8014968:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801496c:	2201      	movs	r2, #1
 801496e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014970:	4b2f      	ldr	r3, [pc, #188]	; (8014a30 <USBD_CDC_Init+0x1ec>)
 8014972:	781b      	ldrb	r3, [r3, #0]
 8014974:	f003 020f 	and.w	r2, r3, #15
 8014978:	6879      	ldr	r1, [r7, #4]
 801497a:	4613      	mov	r3, r2
 801497c:	009b      	lsls	r3, r3, #2
 801497e:	4413      	add	r3, r2
 8014980:	009b      	lsls	r3, r3, #2
 8014982:	440b      	add	r3, r1
 8014984:	3326      	adds	r3, #38	; 0x26
 8014986:	2210      	movs	r2, #16
 8014988:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801498a:	4b29      	ldr	r3, [pc, #164]	; (8014a30 <USBD_CDC_Init+0x1ec>)
 801498c:	7819      	ldrb	r1, [r3, #0]
 801498e:	2308      	movs	r3, #8
 8014990:	2203      	movs	r2, #3
 8014992:	6878      	ldr	r0, [r7, #4]
 8014994:	f005 fec3 	bl	801a71e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014998:	4b25      	ldr	r3, [pc, #148]	; (8014a30 <USBD_CDC_Init+0x1ec>)
 801499a:	781b      	ldrb	r3, [r3, #0]
 801499c:	f003 020f 	and.w	r2, r3, #15
 80149a0:	6879      	ldr	r1, [r7, #4]
 80149a2:	4613      	mov	r3, r2
 80149a4:	009b      	lsls	r3, r3, #2
 80149a6:	4413      	add	r3, r2
 80149a8:	009b      	lsls	r3, r3, #2
 80149aa:	440b      	add	r3, r1
 80149ac:	3324      	adds	r3, #36	; 0x24
 80149ae:	2201      	movs	r2, #1
 80149b0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	2200      	movs	r2, #0
 80149b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149c0:	687a      	ldr	r2, [r7, #4]
 80149c2:	33b0      	adds	r3, #176	; 0xb0
 80149c4:	009b      	lsls	r3, r3, #2
 80149c6:	4413      	add	r3, r2
 80149c8:	685b      	ldr	r3, [r3, #4]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	2200      	movs	r2, #0
 80149d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	2200      	movs	r2, #0
 80149da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d101      	bne.n	80149ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80149e8:	2302      	movs	r3, #2
 80149ea:	e018      	b.n	8014a1e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	7c1b      	ldrb	r3, [r3, #16]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d10a      	bne.n	8014a0a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80149f4:	4b0d      	ldr	r3, [pc, #52]	; (8014a2c <USBD_CDC_Init+0x1e8>)
 80149f6:	7819      	ldrb	r1, [r3, #0]
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80149fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a02:	6878      	ldr	r0, [r7, #4]
 8014a04:	f005 ff7a 	bl	801a8fc <USBD_LL_PrepareReceive>
 8014a08:	e008      	b.n	8014a1c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014a0a:	4b08      	ldr	r3, [pc, #32]	; (8014a2c <USBD_CDC_Init+0x1e8>)
 8014a0c:	7819      	ldrb	r1, [r3, #0]
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014a14:	2340      	movs	r3, #64	; 0x40
 8014a16:	6878      	ldr	r0, [r7, #4]
 8014a18:	f005 ff70 	bl	801a8fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014a1c:	2300      	movs	r3, #0
}
 8014a1e:	4618      	mov	r0, r3
 8014a20:	3710      	adds	r7, #16
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}
 8014a26:	bf00      	nop
 8014a28:	200000bf 	.word	0x200000bf
 8014a2c:	200000c0 	.word	0x200000c0
 8014a30:	200000c1 	.word	0x200000c1

08014a34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b082      	sub	sp, #8
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
 8014a3c:	460b      	mov	r3, r1
 8014a3e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014a40:	4b3a      	ldr	r3, [pc, #232]	; (8014b2c <USBD_CDC_DeInit+0xf8>)
 8014a42:	781b      	ldrb	r3, [r3, #0]
 8014a44:	4619      	mov	r1, r3
 8014a46:	6878      	ldr	r0, [r7, #4]
 8014a48:	f005 fe8f 	bl	801a76a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014a4c:	4b37      	ldr	r3, [pc, #220]	; (8014b2c <USBD_CDC_DeInit+0xf8>)
 8014a4e:	781b      	ldrb	r3, [r3, #0]
 8014a50:	f003 020f 	and.w	r2, r3, #15
 8014a54:	6879      	ldr	r1, [r7, #4]
 8014a56:	4613      	mov	r3, r2
 8014a58:	009b      	lsls	r3, r3, #2
 8014a5a:	4413      	add	r3, r2
 8014a5c:	009b      	lsls	r3, r3, #2
 8014a5e:	440b      	add	r3, r1
 8014a60:	3324      	adds	r3, #36	; 0x24
 8014a62:	2200      	movs	r2, #0
 8014a64:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014a66:	4b32      	ldr	r3, [pc, #200]	; (8014b30 <USBD_CDC_DeInit+0xfc>)
 8014a68:	781b      	ldrb	r3, [r3, #0]
 8014a6a:	4619      	mov	r1, r3
 8014a6c:	6878      	ldr	r0, [r7, #4]
 8014a6e:	f005 fe7c 	bl	801a76a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014a72:	4b2f      	ldr	r3, [pc, #188]	; (8014b30 <USBD_CDC_DeInit+0xfc>)
 8014a74:	781b      	ldrb	r3, [r3, #0]
 8014a76:	f003 020f 	and.w	r2, r3, #15
 8014a7a:	6879      	ldr	r1, [r7, #4]
 8014a7c:	4613      	mov	r3, r2
 8014a7e:	009b      	lsls	r3, r3, #2
 8014a80:	4413      	add	r3, r2
 8014a82:	009b      	lsls	r3, r3, #2
 8014a84:	440b      	add	r3, r1
 8014a86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014a8e:	4b29      	ldr	r3, [pc, #164]	; (8014b34 <USBD_CDC_DeInit+0x100>)
 8014a90:	781b      	ldrb	r3, [r3, #0]
 8014a92:	4619      	mov	r1, r3
 8014a94:	6878      	ldr	r0, [r7, #4]
 8014a96:	f005 fe68 	bl	801a76a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014a9a:	4b26      	ldr	r3, [pc, #152]	; (8014b34 <USBD_CDC_DeInit+0x100>)
 8014a9c:	781b      	ldrb	r3, [r3, #0]
 8014a9e:	f003 020f 	and.w	r2, r3, #15
 8014aa2:	6879      	ldr	r1, [r7, #4]
 8014aa4:	4613      	mov	r3, r2
 8014aa6:	009b      	lsls	r3, r3, #2
 8014aa8:	4413      	add	r3, r2
 8014aaa:	009b      	lsls	r3, r3, #2
 8014aac:	440b      	add	r3, r1
 8014aae:	3324      	adds	r3, #36	; 0x24
 8014ab0:	2200      	movs	r2, #0
 8014ab2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014ab4:	4b1f      	ldr	r3, [pc, #124]	; (8014b34 <USBD_CDC_DeInit+0x100>)
 8014ab6:	781b      	ldrb	r3, [r3, #0]
 8014ab8:	f003 020f 	and.w	r2, r3, #15
 8014abc:	6879      	ldr	r1, [r7, #4]
 8014abe:	4613      	mov	r3, r2
 8014ac0:	009b      	lsls	r3, r3, #2
 8014ac2:	4413      	add	r3, r2
 8014ac4:	009b      	lsls	r3, r3, #2
 8014ac6:	440b      	add	r3, r1
 8014ac8:	3326      	adds	r3, #38	; 0x26
 8014aca:	2200      	movs	r2, #0
 8014acc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	32b0      	adds	r2, #176	; 0xb0
 8014ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d01f      	beq.n	8014b20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ae6:	687a      	ldr	r2, [r7, #4]
 8014ae8:	33b0      	adds	r3, #176	; 0xb0
 8014aea:	009b      	lsls	r3, r3, #2
 8014aec:	4413      	add	r3, r2
 8014aee:	685b      	ldr	r3, [r3, #4]
 8014af0:	685b      	ldr	r3, [r3, #4]
 8014af2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	32b0      	adds	r2, #176	; 0xb0
 8014afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b02:	4618      	mov	r0, r3
 8014b04:	f005 ff72 	bl	801a9ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	32b0      	adds	r2, #176	; 0xb0
 8014b12:	2100      	movs	r1, #0
 8014b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014b20:	2300      	movs	r3, #0
}
 8014b22:	4618      	mov	r0, r3
 8014b24:	3708      	adds	r7, #8
 8014b26:	46bd      	mov	sp, r7
 8014b28:	bd80      	pop	{r7, pc}
 8014b2a:	bf00      	nop
 8014b2c:	200000bf 	.word	0x200000bf
 8014b30:	200000c0 	.word	0x200000c0
 8014b34:	200000c1 	.word	0x200000c1

08014b38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b086      	sub	sp, #24
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
 8014b40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	32b0      	adds	r2, #176	; 0xb0
 8014b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014b52:	2300      	movs	r3, #0
 8014b54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014b56:	2300      	movs	r3, #0
 8014b58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014b5e:	693b      	ldr	r3, [r7, #16]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d101      	bne.n	8014b68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014b64:	2303      	movs	r3, #3
 8014b66:	e0bf      	b.n	8014ce8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014b68:	683b      	ldr	r3, [r7, #0]
 8014b6a:	781b      	ldrb	r3, [r3, #0]
 8014b6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d050      	beq.n	8014c16 <USBD_CDC_Setup+0xde>
 8014b74:	2b20      	cmp	r3, #32
 8014b76:	f040 80af 	bne.w	8014cd8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	88db      	ldrh	r3, [r3, #6]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d03a      	beq.n	8014bf8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014b82:	683b      	ldr	r3, [r7, #0]
 8014b84:	781b      	ldrb	r3, [r3, #0]
 8014b86:	b25b      	sxtb	r3, r3
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	da1b      	bge.n	8014bc4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b92:	687a      	ldr	r2, [r7, #4]
 8014b94:	33b0      	adds	r3, #176	; 0xb0
 8014b96:	009b      	lsls	r3, r3, #2
 8014b98:	4413      	add	r3, r2
 8014b9a:	685b      	ldr	r3, [r3, #4]
 8014b9c:	689b      	ldr	r3, [r3, #8]
 8014b9e:	683a      	ldr	r2, [r7, #0]
 8014ba0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014ba2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014ba4:	683a      	ldr	r2, [r7, #0]
 8014ba6:	88d2      	ldrh	r2, [r2, #6]
 8014ba8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014baa:	683b      	ldr	r3, [r7, #0]
 8014bac:	88db      	ldrh	r3, [r3, #6]
 8014bae:	2b07      	cmp	r3, #7
 8014bb0:	bf28      	it	cs
 8014bb2:	2307      	movcs	r3, #7
 8014bb4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014bb6:	693b      	ldr	r3, [r7, #16]
 8014bb8:	89fa      	ldrh	r2, [r7, #14]
 8014bba:	4619      	mov	r1, r3
 8014bbc:	6878      	ldr	r0, [r7, #4]
 8014bbe:	f001 fd21 	bl	8016604 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014bc2:	e090      	b.n	8014ce6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014bc4:	683b      	ldr	r3, [r7, #0]
 8014bc6:	785a      	ldrb	r2, [r3, #1]
 8014bc8:	693b      	ldr	r3, [r7, #16]
 8014bca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014bce:	683b      	ldr	r3, [r7, #0]
 8014bd0:	88db      	ldrh	r3, [r3, #6]
 8014bd2:	2b3f      	cmp	r3, #63	; 0x3f
 8014bd4:	d803      	bhi.n	8014bde <USBD_CDC_Setup+0xa6>
 8014bd6:	683b      	ldr	r3, [r7, #0]
 8014bd8:	88db      	ldrh	r3, [r3, #6]
 8014bda:	b2da      	uxtb	r2, r3
 8014bdc:	e000      	b.n	8014be0 <USBD_CDC_Setup+0xa8>
 8014bde:	2240      	movs	r2, #64	; 0x40
 8014be0:	693b      	ldr	r3, [r7, #16]
 8014be2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014be6:	6939      	ldr	r1, [r7, #16]
 8014be8:	693b      	ldr	r3, [r7, #16]
 8014bea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014bee:	461a      	mov	r2, r3
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f001 fd33 	bl	801665c <USBD_CtlPrepareRx>
      break;
 8014bf6:	e076      	b.n	8014ce6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014bfe:	687a      	ldr	r2, [r7, #4]
 8014c00:	33b0      	adds	r3, #176	; 0xb0
 8014c02:	009b      	lsls	r3, r3, #2
 8014c04:	4413      	add	r3, r2
 8014c06:	685b      	ldr	r3, [r3, #4]
 8014c08:	689b      	ldr	r3, [r3, #8]
 8014c0a:	683a      	ldr	r2, [r7, #0]
 8014c0c:	7850      	ldrb	r0, [r2, #1]
 8014c0e:	2200      	movs	r2, #0
 8014c10:	6839      	ldr	r1, [r7, #0]
 8014c12:	4798      	blx	r3
      break;
 8014c14:	e067      	b.n	8014ce6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014c16:	683b      	ldr	r3, [r7, #0]
 8014c18:	785b      	ldrb	r3, [r3, #1]
 8014c1a:	2b0b      	cmp	r3, #11
 8014c1c:	d851      	bhi.n	8014cc2 <USBD_CDC_Setup+0x18a>
 8014c1e:	a201      	add	r2, pc, #4	; (adr r2, 8014c24 <USBD_CDC_Setup+0xec>)
 8014c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c24:	08014c55 	.word	0x08014c55
 8014c28:	08014cd1 	.word	0x08014cd1
 8014c2c:	08014cc3 	.word	0x08014cc3
 8014c30:	08014cc3 	.word	0x08014cc3
 8014c34:	08014cc3 	.word	0x08014cc3
 8014c38:	08014cc3 	.word	0x08014cc3
 8014c3c:	08014cc3 	.word	0x08014cc3
 8014c40:	08014cc3 	.word	0x08014cc3
 8014c44:	08014cc3 	.word	0x08014cc3
 8014c48:	08014cc3 	.word	0x08014cc3
 8014c4c:	08014c7f 	.word	0x08014c7f
 8014c50:	08014ca9 	.word	0x08014ca9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c5a:	b2db      	uxtb	r3, r3
 8014c5c:	2b03      	cmp	r3, #3
 8014c5e:	d107      	bne.n	8014c70 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014c60:	f107 030a 	add.w	r3, r7, #10
 8014c64:	2202      	movs	r2, #2
 8014c66:	4619      	mov	r1, r3
 8014c68:	6878      	ldr	r0, [r7, #4]
 8014c6a:	f001 fccb 	bl	8016604 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014c6e:	e032      	b.n	8014cd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014c70:	6839      	ldr	r1, [r7, #0]
 8014c72:	6878      	ldr	r0, [r7, #4]
 8014c74:	f001 fc55 	bl	8016522 <USBD_CtlError>
            ret = USBD_FAIL;
 8014c78:	2303      	movs	r3, #3
 8014c7a:	75fb      	strb	r3, [r7, #23]
          break;
 8014c7c:	e02b      	b.n	8014cd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c84:	b2db      	uxtb	r3, r3
 8014c86:	2b03      	cmp	r3, #3
 8014c88:	d107      	bne.n	8014c9a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014c8a:	f107 030d 	add.w	r3, r7, #13
 8014c8e:	2201      	movs	r2, #1
 8014c90:	4619      	mov	r1, r3
 8014c92:	6878      	ldr	r0, [r7, #4]
 8014c94:	f001 fcb6 	bl	8016604 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014c98:	e01d      	b.n	8014cd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014c9a:	6839      	ldr	r1, [r7, #0]
 8014c9c:	6878      	ldr	r0, [r7, #4]
 8014c9e:	f001 fc40 	bl	8016522 <USBD_CtlError>
            ret = USBD_FAIL;
 8014ca2:	2303      	movs	r3, #3
 8014ca4:	75fb      	strb	r3, [r7, #23]
          break;
 8014ca6:	e016      	b.n	8014cd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014cae:	b2db      	uxtb	r3, r3
 8014cb0:	2b03      	cmp	r3, #3
 8014cb2:	d00f      	beq.n	8014cd4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014cb4:	6839      	ldr	r1, [r7, #0]
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f001 fc33 	bl	8016522 <USBD_CtlError>
            ret = USBD_FAIL;
 8014cbc:	2303      	movs	r3, #3
 8014cbe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014cc0:	e008      	b.n	8014cd4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014cc2:	6839      	ldr	r1, [r7, #0]
 8014cc4:	6878      	ldr	r0, [r7, #4]
 8014cc6:	f001 fc2c 	bl	8016522 <USBD_CtlError>
          ret = USBD_FAIL;
 8014cca:	2303      	movs	r3, #3
 8014ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8014cce:	e002      	b.n	8014cd6 <USBD_CDC_Setup+0x19e>
          break;
 8014cd0:	bf00      	nop
 8014cd2:	e008      	b.n	8014ce6 <USBD_CDC_Setup+0x1ae>
          break;
 8014cd4:	bf00      	nop
      }
      break;
 8014cd6:	e006      	b.n	8014ce6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014cd8:	6839      	ldr	r1, [r7, #0]
 8014cda:	6878      	ldr	r0, [r7, #4]
 8014cdc:	f001 fc21 	bl	8016522 <USBD_CtlError>
      ret = USBD_FAIL;
 8014ce0:	2303      	movs	r3, #3
 8014ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8014ce4:	bf00      	nop
  }

  return (uint8_t)ret;
 8014ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ce8:	4618      	mov	r0, r3
 8014cea:	3718      	adds	r7, #24
 8014cec:	46bd      	mov	sp, r7
 8014cee:	bd80      	pop	{r7, pc}

08014cf0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b084      	sub	sp, #16
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
 8014cf8:	460b      	mov	r3, r1
 8014cfa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014d02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	32b0      	adds	r2, #176	; 0xb0
 8014d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d101      	bne.n	8014d1a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014d16:	2303      	movs	r3, #3
 8014d18:	e065      	b.n	8014de6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	32b0      	adds	r2, #176	; 0xb0
 8014d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014d2a:	78fb      	ldrb	r3, [r7, #3]
 8014d2c:	f003 020f 	and.w	r2, r3, #15
 8014d30:	6879      	ldr	r1, [r7, #4]
 8014d32:	4613      	mov	r3, r2
 8014d34:	009b      	lsls	r3, r3, #2
 8014d36:	4413      	add	r3, r2
 8014d38:	009b      	lsls	r3, r3, #2
 8014d3a:	440b      	add	r3, r1
 8014d3c:	3318      	adds	r3, #24
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d02f      	beq.n	8014da4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014d44:	78fb      	ldrb	r3, [r7, #3]
 8014d46:	f003 020f 	and.w	r2, r3, #15
 8014d4a:	6879      	ldr	r1, [r7, #4]
 8014d4c:	4613      	mov	r3, r2
 8014d4e:	009b      	lsls	r3, r3, #2
 8014d50:	4413      	add	r3, r2
 8014d52:	009b      	lsls	r3, r3, #2
 8014d54:	440b      	add	r3, r1
 8014d56:	3318      	adds	r3, #24
 8014d58:	681a      	ldr	r2, [r3, #0]
 8014d5a:	78fb      	ldrb	r3, [r7, #3]
 8014d5c:	f003 010f 	and.w	r1, r3, #15
 8014d60:	68f8      	ldr	r0, [r7, #12]
 8014d62:	460b      	mov	r3, r1
 8014d64:	009b      	lsls	r3, r3, #2
 8014d66:	440b      	add	r3, r1
 8014d68:	00db      	lsls	r3, r3, #3
 8014d6a:	4403      	add	r3, r0
 8014d6c:	3320      	adds	r3, #32
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	fbb2 f1f3 	udiv	r1, r2, r3
 8014d74:	fb01 f303 	mul.w	r3, r1, r3
 8014d78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d112      	bne.n	8014da4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014d7e:	78fb      	ldrb	r3, [r7, #3]
 8014d80:	f003 020f 	and.w	r2, r3, #15
 8014d84:	6879      	ldr	r1, [r7, #4]
 8014d86:	4613      	mov	r3, r2
 8014d88:	009b      	lsls	r3, r3, #2
 8014d8a:	4413      	add	r3, r2
 8014d8c:	009b      	lsls	r3, r3, #2
 8014d8e:	440b      	add	r3, r1
 8014d90:	3318      	adds	r3, #24
 8014d92:	2200      	movs	r2, #0
 8014d94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014d96:	78f9      	ldrb	r1, [r7, #3]
 8014d98:	2300      	movs	r3, #0
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	f005 fd8c 	bl	801a8ba <USBD_LL_Transmit>
 8014da2:	e01f      	b.n	8014de4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014da4:	68bb      	ldr	r3, [r7, #8]
 8014da6:	2200      	movs	r2, #0
 8014da8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014db2:	687a      	ldr	r2, [r7, #4]
 8014db4:	33b0      	adds	r3, #176	; 0xb0
 8014db6:	009b      	lsls	r3, r3, #2
 8014db8:	4413      	add	r3, r2
 8014dba:	685b      	ldr	r3, [r3, #4]
 8014dbc:	691b      	ldr	r3, [r3, #16]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d010      	beq.n	8014de4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014dc8:	687a      	ldr	r2, [r7, #4]
 8014dca:	33b0      	adds	r3, #176	; 0xb0
 8014dcc:	009b      	lsls	r3, r3, #2
 8014dce:	4413      	add	r3, r2
 8014dd0:	685b      	ldr	r3, [r3, #4]
 8014dd2:	691b      	ldr	r3, [r3, #16]
 8014dd4:	68ba      	ldr	r2, [r7, #8]
 8014dd6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014dda:	68ba      	ldr	r2, [r7, #8]
 8014ddc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014de0:	78fa      	ldrb	r2, [r7, #3]
 8014de2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014de4:	2300      	movs	r3, #0
}
 8014de6:	4618      	mov	r0, r3
 8014de8:	3710      	adds	r7, #16
 8014dea:	46bd      	mov	sp, r7
 8014dec:	bd80      	pop	{r7, pc}

08014dee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014dee:	b580      	push	{r7, lr}
 8014df0:	b084      	sub	sp, #16
 8014df2:	af00      	add	r7, sp, #0
 8014df4:	6078      	str	r0, [r7, #4]
 8014df6:	460b      	mov	r3, r1
 8014df8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	32b0      	adds	r2, #176	; 0xb0
 8014e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	32b0      	adds	r2, #176	; 0xb0
 8014e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d101      	bne.n	8014e20 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014e1c:	2303      	movs	r3, #3
 8014e1e:	e01a      	b.n	8014e56 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014e20:	78fb      	ldrb	r3, [r7, #3]
 8014e22:	4619      	mov	r1, r3
 8014e24:	6878      	ldr	r0, [r7, #4]
 8014e26:	f005 fd8a 	bl	801a93e <USBD_LL_GetRxDataSize>
 8014e2a:	4602      	mov	r2, r0
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e38:	687a      	ldr	r2, [r7, #4]
 8014e3a:	33b0      	adds	r3, #176	; 0xb0
 8014e3c:	009b      	lsls	r3, r3, #2
 8014e3e:	4413      	add	r3, r2
 8014e40:	685b      	ldr	r3, [r3, #4]
 8014e42:	68db      	ldr	r3, [r3, #12]
 8014e44:	68fa      	ldr	r2, [r7, #12]
 8014e46:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014e4a:	68fa      	ldr	r2, [r7, #12]
 8014e4c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014e50:	4611      	mov	r1, r2
 8014e52:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014e54:	2300      	movs	r3, #0
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	3710      	adds	r7, #16
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}

08014e5e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014e5e:	b580      	push	{r7, lr}
 8014e60:	b084      	sub	sp, #16
 8014e62:	af00      	add	r7, sp, #0
 8014e64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	32b0      	adds	r2, #176	; 0xb0
 8014e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d101      	bne.n	8014e80 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014e7c:	2303      	movs	r3, #3
 8014e7e:	e025      	b.n	8014ecc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e86:	687a      	ldr	r2, [r7, #4]
 8014e88:	33b0      	adds	r3, #176	; 0xb0
 8014e8a:	009b      	lsls	r3, r3, #2
 8014e8c:	4413      	add	r3, r2
 8014e8e:	685b      	ldr	r3, [r3, #4]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d01a      	beq.n	8014eca <USBD_CDC_EP0_RxReady+0x6c>
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014e9a:	2bff      	cmp	r3, #255	; 0xff
 8014e9c:	d015      	beq.n	8014eca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ea4:	687a      	ldr	r2, [r7, #4]
 8014ea6:	33b0      	adds	r3, #176	; 0xb0
 8014ea8:	009b      	lsls	r3, r3, #2
 8014eaa:	4413      	add	r3, r2
 8014eac:	685b      	ldr	r3, [r3, #4]
 8014eae:	689b      	ldr	r3, [r3, #8]
 8014eb0:	68fa      	ldr	r2, [r7, #12]
 8014eb2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014eb6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014eb8:	68fa      	ldr	r2, [r7, #12]
 8014eba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014ebe:	b292      	uxth	r2, r2
 8014ec0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	22ff      	movs	r2, #255	; 0xff
 8014ec6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014eca:	2300      	movs	r3, #0
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3710      	adds	r7, #16
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}

08014ed4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b086      	sub	sp, #24
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014edc:	2182      	movs	r1, #130	; 0x82
 8014ede:	4818      	ldr	r0, [pc, #96]	; (8014f40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014ee0:	f000 fcbd 	bl	801585e <USBD_GetEpDesc>
 8014ee4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014ee6:	2101      	movs	r1, #1
 8014ee8:	4815      	ldr	r0, [pc, #84]	; (8014f40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014eea:	f000 fcb8 	bl	801585e <USBD_GetEpDesc>
 8014eee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014ef0:	2181      	movs	r1, #129	; 0x81
 8014ef2:	4813      	ldr	r0, [pc, #76]	; (8014f40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014ef4:	f000 fcb3 	bl	801585e <USBD_GetEpDesc>
 8014ef8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014efa:	697b      	ldr	r3, [r7, #20]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d002      	beq.n	8014f06 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014f00:	697b      	ldr	r3, [r7, #20]
 8014f02:	2210      	movs	r2, #16
 8014f04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014f06:	693b      	ldr	r3, [r7, #16]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d006      	beq.n	8014f1a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014f0c:	693b      	ldr	r3, [r7, #16]
 8014f0e:	2200      	movs	r2, #0
 8014f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014f14:	711a      	strb	r2, [r3, #4]
 8014f16:	2200      	movs	r2, #0
 8014f18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d006      	beq.n	8014f2e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	2200      	movs	r2, #0
 8014f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014f28:	711a      	strb	r2, [r3, #4]
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	2243      	movs	r2, #67	; 0x43
 8014f32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014f34:	4b02      	ldr	r3, [pc, #8]	; (8014f40 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014f36:	4618      	mov	r0, r3
 8014f38:	3718      	adds	r7, #24
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bd80      	pop	{r7, pc}
 8014f3e:	bf00      	nop
 8014f40:	2000007c 	.word	0x2000007c

08014f44 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b086      	sub	sp, #24
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014f4c:	2182      	movs	r1, #130	; 0x82
 8014f4e:	4818      	ldr	r0, [pc, #96]	; (8014fb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014f50:	f000 fc85 	bl	801585e <USBD_GetEpDesc>
 8014f54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014f56:	2101      	movs	r1, #1
 8014f58:	4815      	ldr	r0, [pc, #84]	; (8014fb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014f5a:	f000 fc80 	bl	801585e <USBD_GetEpDesc>
 8014f5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014f60:	2181      	movs	r1, #129	; 0x81
 8014f62:	4813      	ldr	r0, [pc, #76]	; (8014fb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014f64:	f000 fc7b 	bl	801585e <USBD_GetEpDesc>
 8014f68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014f6a:	697b      	ldr	r3, [r7, #20]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d002      	beq.n	8014f76 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014f70:	697b      	ldr	r3, [r7, #20]
 8014f72:	2210      	movs	r2, #16
 8014f74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014f76:	693b      	ldr	r3, [r7, #16]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d006      	beq.n	8014f8a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014f7c:	693b      	ldr	r3, [r7, #16]
 8014f7e:	2200      	movs	r2, #0
 8014f80:	711a      	strb	r2, [r3, #4]
 8014f82:	2200      	movs	r2, #0
 8014f84:	f042 0202 	orr.w	r2, r2, #2
 8014f88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d006      	beq.n	8014f9e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	2200      	movs	r2, #0
 8014f94:	711a      	strb	r2, [r3, #4]
 8014f96:	2200      	movs	r2, #0
 8014f98:	f042 0202 	orr.w	r2, r2, #2
 8014f9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	2243      	movs	r2, #67	; 0x43
 8014fa2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014fa4:	4b02      	ldr	r3, [pc, #8]	; (8014fb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3718      	adds	r7, #24
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	2000007c 	.word	0x2000007c

08014fb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b086      	sub	sp, #24
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014fbc:	2182      	movs	r1, #130	; 0x82
 8014fbe:	4818      	ldr	r0, [pc, #96]	; (8015020 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014fc0:	f000 fc4d 	bl	801585e <USBD_GetEpDesc>
 8014fc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014fc6:	2101      	movs	r1, #1
 8014fc8:	4815      	ldr	r0, [pc, #84]	; (8015020 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014fca:	f000 fc48 	bl	801585e <USBD_GetEpDesc>
 8014fce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014fd0:	2181      	movs	r1, #129	; 0x81
 8014fd2:	4813      	ldr	r0, [pc, #76]	; (8015020 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014fd4:	f000 fc43 	bl	801585e <USBD_GetEpDesc>
 8014fd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d002      	beq.n	8014fe6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	2210      	movs	r2, #16
 8014fe4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014fe6:	693b      	ldr	r3, [r7, #16]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d006      	beq.n	8014ffa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014fec:	693b      	ldr	r3, [r7, #16]
 8014fee:	2200      	movs	r2, #0
 8014ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014ff4:	711a      	strb	r2, [r3, #4]
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d006      	beq.n	801500e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	2200      	movs	r2, #0
 8015004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015008:	711a      	strb	r2, [r3, #4]
 801500a:	2200      	movs	r2, #0
 801500c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	2243      	movs	r2, #67	; 0x43
 8015012:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015014:	4b02      	ldr	r3, [pc, #8]	; (8015020 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015016:	4618      	mov	r0, r3
 8015018:	3718      	adds	r7, #24
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}
 801501e:	bf00      	nop
 8015020:	2000007c 	.word	0x2000007c

08015024 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015024:	b480      	push	{r7}
 8015026:	b083      	sub	sp, #12
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	220a      	movs	r2, #10
 8015030:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015032:	4b03      	ldr	r3, [pc, #12]	; (8015040 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015034:	4618      	mov	r0, r3
 8015036:	370c      	adds	r7, #12
 8015038:	46bd      	mov	sp, r7
 801503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503e:	4770      	bx	lr
 8015040:	20000038 	.word	0x20000038

08015044 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015044:	b480      	push	{r7}
 8015046:	b083      	sub	sp, #12
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
 801504c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d101      	bne.n	8015058 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015054:	2303      	movs	r3, #3
 8015056:	e009      	b.n	801506c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801505e:	687a      	ldr	r2, [r7, #4]
 8015060:	33b0      	adds	r3, #176	; 0xb0
 8015062:	009b      	lsls	r3, r3, #2
 8015064:	4413      	add	r3, r2
 8015066:	683a      	ldr	r2, [r7, #0]
 8015068:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801506a:	2300      	movs	r3, #0
}
 801506c:	4618      	mov	r0, r3
 801506e:	370c      	adds	r7, #12
 8015070:	46bd      	mov	sp, r7
 8015072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015076:	4770      	bx	lr

08015078 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015078:	b480      	push	{r7}
 801507a:	b087      	sub	sp, #28
 801507c:	af00      	add	r7, sp, #0
 801507e:	60f8      	str	r0, [r7, #12]
 8015080:	60b9      	str	r1, [r7, #8]
 8015082:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	32b0      	adds	r2, #176	; 0xb0
 801508e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015092:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015094:	697b      	ldr	r3, [r7, #20]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d101      	bne.n	801509e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801509a:	2303      	movs	r3, #3
 801509c:	e008      	b.n	80150b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	68ba      	ldr	r2, [r7, #8]
 80150a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80150a6:	697b      	ldr	r3, [r7, #20]
 80150a8:	687a      	ldr	r2, [r7, #4]
 80150aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80150ae:	2300      	movs	r3, #0
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	371c      	adds	r7, #28
 80150b4:	46bd      	mov	sp, r7
 80150b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ba:	4770      	bx	lr

080150bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80150bc:	b480      	push	{r7}
 80150be:	b085      	sub	sp, #20
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
 80150c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	32b0      	adds	r2, #176	; 0xb0
 80150d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d101      	bne.n	80150e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80150dc:	2303      	movs	r3, #3
 80150de:	e004      	b.n	80150ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	683a      	ldr	r2, [r7, #0]
 80150e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80150e8:	2300      	movs	r3, #0
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	3714      	adds	r7, #20
 80150ee:	46bd      	mov	sp, r7
 80150f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f4:	4770      	bx	lr
	...

080150f8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b084      	sub	sp, #16
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	32b0      	adds	r2, #176	; 0xb0
 801510a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801510e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015110:	2301      	movs	r3, #1
 8015112:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015114:	68bb      	ldr	r3, [r7, #8]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d101      	bne.n	801511e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801511a:	2303      	movs	r3, #3
 801511c:	e025      	b.n	801516a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801511e:	68bb      	ldr	r3, [r7, #8]
 8015120:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015124:	2b00      	cmp	r3, #0
 8015126:	d11f      	bne.n	8015168 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015128:	68bb      	ldr	r3, [r7, #8]
 801512a:	2201      	movs	r2, #1
 801512c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015130:	4b10      	ldr	r3, [pc, #64]	; (8015174 <USBD_CDC_TransmitPacket+0x7c>)
 8015132:	781b      	ldrb	r3, [r3, #0]
 8015134:	f003 020f 	and.w	r2, r3, #15
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801513e:	6878      	ldr	r0, [r7, #4]
 8015140:	4613      	mov	r3, r2
 8015142:	009b      	lsls	r3, r3, #2
 8015144:	4413      	add	r3, r2
 8015146:	009b      	lsls	r3, r3, #2
 8015148:	4403      	add	r3, r0
 801514a:	3318      	adds	r3, #24
 801514c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801514e:	4b09      	ldr	r3, [pc, #36]	; (8015174 <USBD_CDC_TransmitPacket+0x7c>)
 8015150:	7819      	ldrb	r1, [r3, #0]
 8015152:	68bb      	ldr	r3, [r7, #8]
 8015154:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015158:	68bb      	ldr	r3, [r7, #8]
 801515a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	f005 fbab 	bl	801a8ba <USBD_LL_Transmit>

    ret = USBD_OK;
 8015164:	2300      	movs	r3, #0
 8015166:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015168:	7bfb      	ldrb	r3, [r7, #15]
}
 801516a:	4618      	mov	r0, r3
 801516c:	3710      	adds	r7, #16
 801516e:	46bd      	mov	sp, r7
 8015170:	bd80      	pop	{r7, pc}
 8015172:	bf00      	nop
 8015174:	200000bf 	.word	0x200000bf

08015178 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b084      	sub	sp, #16
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	32b0      	adds	r2, #176	; 0xb0
 801518a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801518e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	32b0      	adds	r2, #176	; 0xb0
 801519a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d101      	bne.n	80151a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80151a2:	2303      	movs	r3, #3
 80151a4:	e018      	b.n	80151d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	7c1b      	ldrb	r3, [r3, #16]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d10a      	bne.n	80151c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80151ae:	4b0c      	ldr	r3, [pc, #48]	; (80151e0 <USBD_CDC_ReceivePacket+0x68>)
 80151b0:	7819      	ldrb	r1, [r3, #0]
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80151b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80151bc:	6878      	ldr	r0, [r7, #4]
 80151be:	f005 fb9d 	bl	801a8fc <USBD_LL_PrepareReceive>
 80151c2:	e008      	b.n	80151d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80151c4:	4b06      	ldr	r3, [pc, #24]	; (80151e0 <USBD_CDC_ReceivePacket+0x68>)
 80151c6:	7819      	ldrb	r1, [r3, #0]
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80151ce:	2340      	movs	r3, #64	; 0x40
 80151d0:	6878      	ldr	r0, [r7, #4]
 80151d2:	f005 fb93 	bl	801a8fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80151d6:	2300      	movs	r3, #0
}
 80151d8:	4618      	mov	r0, r3
 80151da:	3710      	adds	r7, #16
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd80      	pop	{r7, pc}
 80151e0:	200000c0 	.word	0x200000c0

080151e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b086      	sub	sp, #24
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	60f8      	str	r0, [r7, #12]
 80151ec:	60b9      	str	r1, [r7, #8]
 80151ee:	4613      	mov	r3, r2
 80151f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d101      	bne.n	80151fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80151f8:	2303      	movs	r3, #3
 80151fa:	e01f      	b.n	801523c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	2200      	movs	r2, #0
 8015200:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	2200      	movs	r2, #0
 8015208:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	2200      	movs	r2, #0
 8015210:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015214:	68bb      	ldr	r3, [r7, #8]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d003      	beq.n	8015222 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	68ba      	ldr	r2, [r7, #8]
 801521e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	2201      	movs	r2, #1
 8015226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	79fa      	ldrb	r2, [r7, #7]
 801522e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015230:	68f8      	ldr	r0, [r7, #12]
 8015232:	f005 f9f7 	bl	801a624 <USBD_LL_Init>
 8015236:	4603      	mov	r3, r0
 8015238:	75fb      	strb	r3, [r7, #23]

  return ret;
 801523a:	7dfb      	ldrb	r3, [r7, #23]
}
 801523c:	4618      	mov	r0, r3
 801523e:	3718      	adds	r7, #24
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}

08015244 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b084      	sub	sp, #16
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
 801524c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801524e:	2300      	movs	r3, #0
 8015250:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015252:	683b      	ldr	r3, [r7, #0]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d101      	bne.n	801525c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015258:	2303      	movs	r3, #3
 801525a:	e025      	b.n	80152a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	683a      	ldr	r2, [r7, #0]
 8015260:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	32ae      	adds	r2, #174	; 0xae
 801526e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015274:	2b00      	cmp	r3, #0
 8015276:	d00f      	beq.n	8015298 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	32ae      	adds	r2, #174	; 0xae
 8015282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015288:	f107 020e 	add.w	r2, r7, #14
 801528c:	4610      	mov	r0, r2
 801528e:	4798      	blx	r3
 8015290:	4602      	mov	r2, r0
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801529e:	1c5a      	adds	r2, r3, #1
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80152a6:	2300      	movs	r3, #0
}
 80152a8:	4618      	mov	r0, r3
 80152aa:	3710      	adds	r7, #16
 80152ac:	46bd      	mov	sp, r7
 80152ae:	bd80      	pop	{r7, pc}

080152b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80152b8:	6878      	ldr	r0, [r7, #4]
 80152ba:	f005 fa15 	bl	801a6e8 <USBD_LL_Start>
 80152be:	4603      	mov	r3, r0
}
 80152c0:	4618      	mov	r0, r3
 80152c2:	3708      	adds	r7, #8
 80152c4:	46bd      	mov	sp, r7
 80152c6:	bd80      	pop	{r7, pc}

080152c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80152c8:	b480      	push	{r7}
 80152ca:	b083      	sub	sp, #12
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80152d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80152d2:	4618      	mov	r0, r3
 80152d4:	370c      	adds	r7, #12
 80152d6:	46bd      	mov	sp, r7
 80152d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152dc:	4770      	bx	lr

080152de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80152de:	b580      	push	{r7, lr}
 80152e0:	b084      	sub	sp, #16
 80152e2:	af00      	add	r7, sp, #0
 80152e4:	6078      	str	r0, [r7, #4]
 80152e6:	460b      	mov	r3, r1
 80152e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80152ea:	2300      	movs	r3, #0
 80152ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d009      	beq.n	801530c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	78fa      	ldrb	r2, [r7, #3]
 8015302:	4611      	mov	r1, r2
 8015304:	6878      	ldr	r0, [r7, #4]
 8015306:	4798      	blx	r3
 8015308:	4603      	mov	r3, r0
 801530a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801530c:	7bfb      	ldrb	r3, [r7, #15]
}
 801530e:	4618      	mov	r0, r3
 8015310:	3710      	adds	r7, #16
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}

08015316 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015316:	b580      	push	{r7, lr}
 8015318:	b084      	sub	sp, #16
 801531a:	af00      	add	r7, sp, #0
 801531c:	6078      	str	r0, [r7, #4]
 801531e:	460b      	mov	r3, r1
 8015320:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015322:	2300      	movs	r3, #0
 8015324:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801532c:	685b      	ldr	r3, [r3, #4]
 801532e:	78fa      	ldrb	r2, [r7, #3]
 8015330:	4611      	mov	r1, r2
 8015332:	6878      	ldr	r0, [r7, #4]
 8015334:	4798      	blx	r3
 8015336:	4603      	mov	r3, r0
 8015338:	2b00      	cmp	r3, #0
 801533a:	d001      	beq.n	8015340 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801533c:	2303      	movs	r3, #3
 801533e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015340:	7bfb      	ldrb	r3, [r7, #15]
}
 8015342:	4618      	mov	r0, r3
 8015344:	3710      	adds	r7, #16
 8015346:	46bd      	mov	sp, r7
 8015348:	bd80      	pop	{r7, pc}

0801534a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801534a:	b580      	push	{r7, lr}
 801534c:	b084      	sub	sp, #16
 801534e:	af00      	add	r7, sp, #0
 8015350:	6078      	str	r0, [r7, #4]
 8015352:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801535a:	6839      	ldr	r1, [r7, #0]
 801535c:	4618      	mov	r0, r3
 801535e:	f001 f8a6 	bl	80164ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	2201      	movs	r2, #1
 8015366:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015370:	461a      	mov	r2, r3
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801537e:	f003 031f 	and.w	r3, r3, #31
 8015382:	2b02      	cmp	r3, #2
 8015384:	d01a      	beq.n	80153bc <USBD_LL_SetupStage+0x72>
 8015386:	2b02      	cmp	r3, #2
 8015388:	d822      	bhi.n	80153d0 <USBD_LL_SetupStage+0x86>
 801538a:	2b00      	cmp	r3, #0
 801538c:	d002      	beq.n	8015394 <USBD_LL_SetupStage+0x4a>
 801538e:	2b01      	cmp	r3, #1
 8015390:	d00a      	beq.n	80153a8 <USBD_LL_SetupStage+0x5e>
 8015392:	e01d      	b.n	80153d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801539a:	4619      	mov	r1, r3
 801539c:	6878      	ldr	r0, [r7, #4]
 801539e:	f000 fad3 	bl	8015948 <USBD_StdDevReq>
 80153a2:	4603      	mov	r3, r0
 80153a4:	73fb      	strb	r3, [r7, #15]
      break;
 80153a6:	e020      	b.n	80153ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153ae:	4619      	mov	r1, r3
 80153b0:	6878      	ldr	r0, [r7, #4]
 80153b2:	f000 fb3b 	bl	8015a2c <USBD_StdItfReq>
 80153b6:	4603      	mov	r3, r0
 80153b8:	73fb      	strb	r3, [r7, #15]
      break;
 80153ba:	e016      	b.n	80153ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153c2:	4619      	mov	r1, r3
 80153c4:	6878      	ldr	r0, [r7, #4]
 80153c6:	f000 fb9d 	bl	8015b04 <USBD_StdEPReq>
 80153ca:	4603      	mov	r3, r0
 80153cc:	73fb      	strb	r3, [r7, #15]
      break;
 80153ce:	e00c      	b.n	80153ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80153d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80153da:	b2db      	uxtb	r3, r3
 80153dc:	4619      	mov	r1, r3
 80153de:	6878      	ldr	r0, [r7, #4]
 80153e0:	f005 f9e2 	bl	801a7a8 <USBD_LL_StallEP>
 80153e4:	4603      	mov	r3, r0
 80153e6:	73fb      	strb	r3, [r7, #15]
      break;
 80153e8:	bf00      	nop
  }

  return ret;
 80153ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80153ec:	4618      	mov	r0, r3
 80153ee:	3710      	adds	r7, #16
 80153f0:	46bd      	mov	sp, r7
 80153f2:	bd80      	pop	{r7, pc}

080153f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b086      	sub	sp, #24
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	60f8      	str	r0, [r7, #12]
 80153fc:	460b      	mov	r3, r1
 80153fe:	607a      	str	r2, [r7, #4]
 8015400:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015402:	2300      	movs	r3, #0
 8015404:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015406:	7afb      	ldrb	r3, [r7, #11]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d16e      	bne.n	80154ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015412:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801541a:	2b03      	cmp	r3, #3
 801541c:	f040 8098 	bne.w	8015550 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015420:	693b      	ldr	r3, [r7, #16]
 8015422:	689a      	ldr	r2, [r3, #8]
 8015424:	693b      	ldr	r3, [r7, #16]
 8015426:	68db      	ldr	r3, [r3, #12]
 8015428:	429a      	cmp	r2, r3
 801542a:	d913      	bls.n	8015454 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801542c:	693b      	ldr	r3, [r7, #16]
 801542e:	689a      	ldr	r2, [r3, #8]
 8015430:	693b      	ldr	r3, [r7, #16]
 8015432:	68db      	ldr	r3, [r3, #12]
 8015434:	1ad2      	subs	r2, r2, r3
 8015436:	693b      	ldr	r3, [r7, #16]
 8015438:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801543a:	693b      	ldr	r3, [r7, #16]
 801543c:	68da      	ldr	r2, [r3, #12]
 801543e:	693b      	ldr	r3, [r7, #16]
 8015440:	689b      	ldr	r3, [r3, #8]
 8015442:	4293      	cmp	r3, r2
 8015444:	bf28      	it	cs
 8015446:	4613      	movcs	r3, r2
 8015448:	461a      	mov	r2, r3
 801544a:	6879      	ldr	r1, [r7, #4]
 801544c:	68f8      	ldr	r0, [r7, #12]
 801544e:	f001 f922 	bl	8016696 <USBD_CtlContinueRx>
 8015452:	e07d      	b.n	8015550 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801545a:	f003 031f 	and.w	r3, r3, #31
 801545e:	2b02      	cmp	r3, #2
 8015460:	d014      	beq.n	801548c <USBD_LL_DataOutStage+0x98>
 8015462:	2b02      	cmp	r3, #2
 8015464:	d81d      	bhi.n	80154a2 <USBD_LL_DataOutStage+0xae>
 8015466:	2b00      	cmp	r3, #0
 8015468:	d002      	beq.n	8015470 <USBD_LL_DataOutStage+0x7c>
 801546a:	2b01      	cmp	r3, #1
 801546c:	d003      	beq.n	8015476 <USBD_LL_DataOutStage+0x82>
 801546e:	e018      	b.n	80154a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015470:	2300      	movs	r3, #0
 8015472:	75bb      	strb	r3, [r7, #22]
            break;
 8015474:	e018      	b.n	80154a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801547c:	b2db      	uxtb	r3, r3
 801547e:	4619      	mov	r1, r3
 8015480:	68f8      	ldr	r0, [r7, #12]
 8015482:	f000 f9d2 	bl	801582a <USBD_CoreFindIF>
 8015486:	4603      	mov	r3, r0
 8015488:	75bb      	strb	r3, [r7, #22]
            break;
 801548a:	e00d      	b.n	80154a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015492:	b2db      	uxtb	r3, r3
 8015494:	4619      	mov	r1, r3
 8015496:	68f8      	ldr	r0, [r7, #12]
 8015498:	f000 f9d4 	bl	8015844 <USBD_CoreFindEP>
 801549c:	4603      	mov	r3, r0
 801549e:	75bb      	strb	r3, [r7, #22]
            break;
 80154a0:	e002      	b.n	80154a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80154a2:	2300      	movs	r3, #0
 80154a4:	75bb      	strb	r3, [r7, #22]
            break;
 80154a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80154a8:	7dbb      	ldrb	r3, [r7, #22]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d119      	bne.n	80154e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154b4:	b2db      	uxtb	r3, r3
 80154b6:	2b03      	cmp	r3, #3
 80154b8:	d113      	bne.n	80154e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80154ba:	7dba      	ldrb	r2, [r7, #22]
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	32ae      	adds	r2, #174	; 0xae
 80154c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154c4:	691b      	ldr	r3, [r3, #16]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d00b      	beq.n	80154e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80154ca:	7dba      	ldrb	r2, [r7, #22]
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80154d2:	7dba      	ldrb	r2, [r7, #22]
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	32ae      	adds	r2, #174	; 0xae
 80154d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154dc:	691b      	ldr	r3, [r3, #16]
 80154de:	68f8      	ldr	r0, [r7, #12]
 80154e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80154e2:	68f8      	ldr	r0, [r7, #12]
 80154e4:	f001 f8e8 	bl	80166b8 <USBD_CtlSendStatus>
 80154e8:	e032      	b.n	8015550 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80154ea:	7afb      	ldrb	r3, [r7, #11]
 80154ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80154f0:	b2db      	uxtb	r3, r3
 80154f2:	4619      	mov	r1, r3
 80154f4:	68f8      	ldr	r0, [r7, #12]
 80154f6:	f000 f9a5 	bl	8015844 <USBD_CoreFindEP>
 80154fa:	4603      	mov	r3, r0
 80154fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80154fe:	7dbb      	ldrb	r3, [r7, #22]
 8015500:	2bff      	cmp	r3, #255	; 0xff
 8015502:	d025      	beq.n	8015550 <USBD_LL_DataOutStage+0x15c>
 8015504:	7dbb      	ldrb	r3, [r7, #22]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d122      	bne.n	8015550 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015510:	b2db      	uxtb	r3, r3
 8015512:	2b03      	cmp	r3, #3
 8015514:	d117      	bne.n	8015546 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015516:	7dba      	ldrb	r2, [r7, #22]
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	32ae      	adds	r2, #174	; 0xae
 801551c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015520:	699b      	ldr	r3, [r3, #24]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d00f      	beq.n	8015546 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015526:	7dba      	ldrb	r2, [r7, #22]
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801552e:	7dba      	ldrb	r2, [r7, #22]
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	32ae      	adds	r2, #174	; 0xae
 8015534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015538:	699b      	ldr	r3, [r3, #24]
 801553a:	7afa      	ldrb	r2, [r7, #11]
 801553c:	4611      	mov	r1, r2
 801553e:	68f8      	ldr	r0, [r7, #12]
 8015540:	4798      	blx	r3
 8015542:	4603      	mov	r3, r0
 8015544:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015546:	7dfb      	ldrb	r3, [r7, #23]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d001      	beq.n	8015550 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801554c:	7dfb      	ldrb	r3, [r7, #23]
 801554e:	e000      	b.n	8015552 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015550:	2300      	movs	r3, #0
}
 8015552:	4618      	mov	r0, r3
 8015554:	3718      	adds	r7, #24
 8015556:	46bd      	mov	sp, r7
 8015558:	bd80      	pop	{r7, pc}

0801555a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801555a:	b580      	push	{r7, lr}
 801555c:	b086      	sub	sp, #24
 801555e:	af00      	add	r7, sp, #0
 8015560:	60f8      	str	r0, [r7, #12]
 8015562:	460b      	mov	r3, r1
 8015564:	607a      	str	r2, [r7, #4]
 8015566:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015568:	7afb      	ldrb	r3, [r7, #11]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d16f      	bne.n	801564e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	3314      	adds	r3, #20
 8015572:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801557a:	2b02      	cmp	r3, #2
 801557c:	d15a      	bne.n	8015634 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801557e:	693b      	ldr	r3, [r7, #16]
 8015580:	689a      	ldr	r2, [r3, #8]
 8015582:	693b      	ldr	r3, [r7, #16]
 8015584:	68db      	ldr	r3, [r3, #12]
 8015586:	429a      	cmp	r2, r3
 8015588:	d914      	bls.n	80155b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	689a      	ldr	r2, [r3, #8]
 801558e:	693b      	ldr	r3, [r7, #16]
 8015590:	68db      	ldr	r3, [r3, #12]
 8015592:	1ad2      	subs	r2, r2, r3
 8015594:	693b      	ldr	r3, [r7, #16]
 8015596:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015598:	693b      	ldr	r3, [r7, #16]
 801559a:	689b      	ldr	r3, [r3, #8]
 801559c:	461a      	mov	r2, r3
 801559e:	6879      	ldr	r1, [r7, #4]
 80155a0:	68f8      	ldr	r0, [r7, #12]
 80155a2:	f001 f84a 	bl	801663a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80155a6:	2300      	movs	r3, #0
 80155a8:	2200      	movs	r2, #0
 80155aa:	2100      	movs	r1, #0
 80155ac:	68f8      	ldr	r0, [r7, #12]
 80155ae:	f005 f9a5 	bl	801a8fc <USBD_LL_PrepareReceive>
 80155b2:	e03f      	b.n	8015634 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80155b4:	693b      	ldr	r3, [r7, #16]
 80155b6:	68da      	ldr	r2, [r3, #12]
 80155b8:	693b      	ldr	r3, [r7, #16]
 80155ba:	689b      	ldr	r3, [r3, #8]
 80155bc:	429a      	cmp	r2, r3
 80155be:	d11c      	bne.n	80155fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80155c0:	693b      	ldr	r3, [r7, #16]
 80155c2:	685a      	ldr	r2, [r3, #4]
 80155c4:	693b      	ldr	r3, [r7, #16]
 80155c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80155c8:	429a      	cmp	r2, r3
 80155ca:	d316      	bcc.n	80155fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80155cc:	693b      	ldr	r3, [r7, #16]
 80155ce:	685a      	ldr	r2, [r3, #4]
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80155d6:	429a      	cmp	r2, r3
 80155d8:	d20f      	bcs.n	80155fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80155da:	2200      	movs	r2, #0
 80155dc:	2100      	movs	r1, #0
 80155de:	68f8      	ldr	r0, [r7, #12]
 80155e0:	f001 f82b 	bl	801663a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	2200      	movs	r2, #0
 80155e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80155ec:	2300      	movs	r3, #0
 80155ee:	2200      	movs	r2, #0
 80155f0:	2100      	movs	r1, #0
 80155f2:	68f8      	ldr	r0, [r7, #12]
 80155f4:	f005 f982 	bl	801a8fc <USBD_LL_PrepareReceive>
 80155f8:	e01c      	b.n	8015634 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015600:	b2db      	uxtb	r3, r3
 8015602:	2b03      	cmp	r3, #3
 8015604:	d10f      	bne.n	8015626 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801560c:	68db      	ldr	r3, [r3, #12]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d009      	beq.n	8015626 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	2200      	movs	r2, #0
 8015616:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015620:	68db      	ldr	r3, [r3, #12]
 8015622:	68f8      	ldr	r0, [r7, #12]
 8015624:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015626:	2180      	movs	r1, #128	; 0x80
 8015628:	68f8      	ldr	r0, [r7, #12]
 801562a:	f005 f8bd 	bl	801a7a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801562e:	68f8      	ldr	r0, [r7, #12]
 8015630:	f001 f855 	bl	80166de <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801563a:	2b00      	cmp	r3, #0
 801563c:	d03a      	beq.n	80156b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801563e:	68f8      	ldr	r0, [r7, #12]
 8015640:	f7ff fe42 	bl	80152c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	2200      	movs	r2, #0
 8015648:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801564c:	e032      	b.n	80156b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801564e:	7afb      	ldrb	r3, [r7, #11]
 8015650:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015654:	b2db      	uxtb	r3, r3
 8015656:	4619      	mov	r1, r3
 8015658:	68f8      	ldr	r0, [r7, #12]
 801565a:	f000 f8f3 	bl	8015844 <USBD_CoreFindEP>
 801565e:	4603      	mov	r3, r0
 8015660:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015662:	7dfb      	ldrb	r3, [r7, #23]
 8015664:	2bff      	cmp	r3, #255	; 0xff
 8015666:	d025      	beq.n	80156b4 <USBD_LL_DataInStage+0x15a>
 8015668:	7dfb      	ldrb	r3, [r7, #23]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d122      	bne.n	80156b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015674:	b2db      	uxtb	r3, r3
 8015676:	2b03      	cmp	r3, #3
 8015678:	d11c      	bne.n	80156b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801567a:	7dfa      	ldrb	r2, [r7, #23]
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	32ae      	adds	r2, #174	; 0xae
 8015680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015684:	695b      	ldr	r3, [r3, #20]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d014      	beq.n	80156b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801568a:	7dfa      	ldrb	r2, [r7, #23]
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015692:	7dfa      	ldrb	r2, [r7, #23]
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	32ae      	adds	r2, #174	; 0xae
 8015698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801569c:	695b      	ldr	r3, [r3, #20]
 801569e:	7afa      	ldrb	r2, [r7, #11]
 80156a0:	4611      	mov	r1, r2
 80156a2:	68f8      	ldr	r0, [r7, #12]
 80156a4:	4798      	blx	r3
 80156a6:	4603      	mov	r3, r0
 80156a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80156aa:	7dbb      	ldrb	r3, [r7, #22]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d001      	beq.n	80156b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80156b0:	7dbb      	ldrb	r3, [r7, #22]
 80156b2:	e000      	b.n	80156b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80156b4:	2300      	movs	r3, #0
}
 80156b6:	4618      	mov	r0, r3
 80156b8:	3718      	adds	r7, #24
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bd80      	pop	{r7, pc}

080156be <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80156be:	b580      	push	{r7, lr}
 80156c0:	b084      	sub	sp, #16
 80156c2:	af00      	add	r7, sp, #0
 80156c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80156c6:	2300      	movs	r3, #0
 80156c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	2201      	movs	r2, #1
 80156ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	2200      	movs	r2, #0
 80156d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	2200      	movs	r2, #0
 80156de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	2200      	movs	r2, #0
 80156e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	2200      	movs	r2, #0
 80156ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d014      	beq.n	8015724 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015700:	685b      	ldr	r3, [r3, #4]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d00e      	beq.n	8015724 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801570c:	685b      	ldr	r3, [r3, #4]
 801570e:	687a      	ldr	r2, [r7, #4]
 8015710:	6852      	ldr	r2, [r2, #4]
 8015712:	b2d2      	uxtb	r2, r2
 8015714:	4611      	mov	r1, r2
 8015716:	6878      	ldr	r0, [r7, #4]
 8015718:	4798      	blx	r3
 801571a:	4603      	mov	r3, r0
 801571c:	2b00      	cmp	r3, #0
 801571e:	d001      	beq.n	8015724 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015720:	2303      	movs	r3, #3
 8015722:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015724:	2340      	movs	r3, #64	; 0x40
 8015726:	2200      	movs	r2, #0
 8015728:	2100      	movs	r1, #0
 801572a:	6878      	ldr	r0, [r7, #4]
 801572c:	f004 fff7 	bl	801a71e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2201      	movs	r2, #1
 8015734:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	2240      	movs	r2, #64	; 0x40
 801573c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015740:	2340      	movs	r3, #64	; 0x40
 8015742:	2200      	movs	r2, #0
 8015744:	2180      	movs	r1, #128	; 0x80
 8015746:	6878      	ldr	r0, [r7, #4]
 8015748:	f004 ffe9 	bl	801a71e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	2201      	movs	r2, #1
 8015750:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	2240      	movs	r2, #64	; 0x40
 8015756:	621a      	str	r2, [r3, #32]

  return ret;
 8015758:	7bfb      	ldrb	r3, [r7, #15]
}
 801575a:	4618      	mov	r0, r3
 801575c:	3710      	adds	r7, #16
 801575e:	46bd      	mov	sp, r7
 8015760:	bd80      	pop	{r7, pc}

08015762 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015762:	b480      	push	{r7}
 8015764:	b083      	sub	sp, #12
 8015766:	af00      	add	r7, sp, #0
 8015768:	6078      	str	r0, [r7, #4]
 801576a:	460b      	mov	r3, r1
 801576c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	78fa      	ldrb	r2, [r7, #3]
 8015772:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015774:	2300      	movs	r3, #0
}
 8015776:	4618      	mov	r0, r3
 8015778:	370c      	adds	r7, #12
 801577a:	46bd      	mov	sp, r7
 801577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015780:	4770      	bx	lr

08015782 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015782:	b480      	push	{r7}
 8015784:	b083      	sub	sp, #12
 8015786:	af00      	add	r7, sp, #0
 8015788:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015790:	b2db      	uxtb	r3, r3
 8015792:	2b04      	cmp	r3, #4
 8015794:	d006      	beq.n	80157a4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801579c:	b2da      	uxtb	r2, r3
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	2204      	movs	r2, #4
 80157a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80157ac:	2300      	movs	r3, #0
}
 80157ae:	4618      	mov	r0, r3
 80157b0:	370c      	adds	r7, #12
 80157b2:	46bd      	mov	sp, r7
 80157b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b8:	4770      	bx	lr

080157ba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80157ba:	b480      	push	{r7}
 80157bc:	b083      	sub	sp, #12
 80157be:	af00      	add	r7, sp, #0
 80157c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157c8:	b2db      	uxtb	r3, r3
 80157ca:	2b04      	cmp	r3, #4
 80157cc:	d106      	bne.n	80157dc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80157d4:	b2da      	uxtb	r2, r3
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80157dc:	2300      	movs	r3, #0
}
 80157de:	4618      	mov	r0, r3
 80157e0:	370c      	adds	r7, #12
 80157e2:	46bd      	mov	sp, r7
 80157e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e8:	4770      	bx	lr

080157ea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80157ea:	b580      	push	{r7, lr}
 80157ec:	b082      	sub	sp, #8
 80157ee:	af00      	add	r7, sp, #0
 80157f0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157f8:	b2db      	uxtb	r3, r3
 80157fa:	2b03      	cmp	r3, #3
 80157fc:	d110      	bne.n	8015820 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015804:	2b00      	cmp	r3, #0
 8015806:	d00b      	beq.n	8015820 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801580e:	69db      	ldr	r3, [r3, #28]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d005      	beq.n	8015820 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801581a:	69db      	ldr	r3, [r3, #28]
 801581c:	6878      	ldr	r0, [r7, #4]
 801581e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015820:	2300      	movs	r3, #0
}
 8015822:	4618      	mov	r0, r3
 8015824:	3708      	adds	r7, #8
 8015826:	46bd      	mov	sp, r7
 8015828:	bd80      	pop	{r7, pc}

0801582a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801582a:	b480      	push	{r7}
 801582c:	b083      	sub	sp, #12
 801582e:	af00      	add	r7, sp, #0
 8015830:	6078      	str	r0, [r7, #4]
 8015832:	460b      	mov	r3, r1
 8015834:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015836:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015838:	4618      	mov	r0, r3
 801583a:	370c      	adds	r7, #12
 801583c:	46bd      	mov	sp, r7
 801583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015842:	4770      	bx	lr

08015844 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015844:	b480      	push	{r7}
 8015846:	b083      	sub	sp, #12
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
 801584c:	460b      	mov	r3, r1
 801584e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015850:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015852:	4618      	mov	r0, r3
 8015854:	370c      	adds	r7, #12
 8015856:	46bd      	mov	sp, r7
 8015858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585c:	4770      	bx	lr

0801585e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801585e:	b580      	push	{r7, lr}
 8015860:	b086      	sub	sp, #24
 8015862:	af00      	add	r7, sp, #0
 8015864:	6078      	str	r0, [r7, #4]
 8015866:	460b      	mov	r3, r1
 8015868:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015872:	2300      	movs	r3, #0
 8015874:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	885b      	ldrh	r3, [r3, #2]
 801587a:	b29a      	uxth	r2, r3
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	781b      	ldrb	r3, [r3, #0]
 8015880:	b29b      	uxth	r3, r3
 8015882:	429a      	cmp	r2, r3
 8015884:	d920      	bls.n	80158c8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	781b      	ldrb	r3, [r3, #0]
 801588a:	b29b      	uxth	r3, r3
 801588c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801588e:	e013      	b.n	80158b8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015890:	f107 030a 	add.w	r3, r7, #10
 8015894:	4619      	mov	r1, r3
 8015896:	6978      	ldr	r0, [r7, #20]
 8015898:	f000 f81b 	bl	80158d2 <USBD_GetNextDesc>
 801589c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801589e:	697b      	ldr	r3, [r7, #20]
 80158a0:	785b      	ldrb	r3, [r3, #1]
 80158a2:	2b05      	cmp	r3, #5
 80158a4:	d108      	bne.n	80158b8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80158a6:	697b      	ldr	r3, [r7, #20]
 80158a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80158aa:	693b      	ldr	r3, [r7, #16]
 80158ac:	789b      	ldrb	r3, [r3, #2]
 80158ae:	78fa      	ldrb	r2, [r7, #3]
 80158b0:	429a      	cmp	r2, r3
 80158b2:	d008      	beq.n	80158c6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80158b4:	2300      	movs	r3, #0
 80158b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	885b      	ldrh	r3, [r3, #2]
 80158bc:	b29a      	uxth	r2, r3
 80158be:	897b      	ldrh	r3, [r7, #10]
 80158c0:	429a      	cmp	r2, r3
 80158c2:	d8e5      	bhi.n	8015890 <USBD_GetEpDesc+0x32>
 80158c4:	e000      	b.n	80158c8 <USBD_GetEpDesc+0x6a>
          break;
 80158c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80158c8:	693b      	ldr	r3, [r7, #16]
}
 80158ca:	4618      	mov	r0, r3
 80158cc:	3718      	adds	r7, #24
 80158ce:	46bd      	mov	sp, r7
 80158d0:	bd80      	pop	{r7, pc}

080158d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80158d2:	b480      	push	{r7}
 80158d4:	b085      	sub	sp, #20
 80158d6:	af00      	add	r7, sp, #0
 80158d8:	6078      	str	r0, [r7, #4]
 80158da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80158e0:	683b      	ldr	r3, [r7, #0]
 80158e2:	881a      	ldrh	r2, [r3, #0]
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	781b      	ldrb	r3, [r3, #0]
 80158e8:	b29b      	uxth	r3, r3
 80158ea:	4413      	add	r3, r2
 80158ec:	b29a      	uxth	r2, r3
 80158ee:	683b      	ldr	r3, [r7, #0]
 80158f0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	781b      	ldrb	r3, [r3, #0]
 80158f6:	461a      	mov	r2, r3
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	4413      	add	r3, r2
 80158fc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80158fe:	68fb      	ldr	r3, [r7, #12]
}
 8015900:	4618      	mov	r0, r3
 8015902:	3714      	adds	r7, #20
 8015904:	46bd      	mov	sp, r7
 8015906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801590a:	4770      	bx	lr

0801590c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801590c:	b480      	push	{r7}
 801590e:	b087      	sub	sp, #28
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015918:	697b      	ldr	r3, [r7, #20]
 801591a:	781b      	ldrb	r3, [r3, #0]
 801591c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801591e:	697b      	ldr	r3, [r7, #20]
 8015920:	3301      	adds	r3, #1
 8015922:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015924:	697b      	ldr	r3, [r7, #20]
 8015926:	781b      	ldrb	r3, [r3, #0]
 8015928:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801592a:	8a3b      	ldrh	r3, [r7, #16]
 801592c:	021b      	lsls	r3, r3, #8
 801592e:	b21a      	sxth	r2, r3
 8015930:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015934:	4313      	orrs	r3, r2
 8015936:	b21b      	sxth	r3, r3
 8015938:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801593a:	89fb      	ldrh	r3, [r7, #14]
}
 801593c:	4618      	mov	r0, r3
 801593e:	371c      	adds	r7, #28
 8015940:	46bd      	mov	sp, r7
 8015942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015946:	4770      	bx	lr

08015948 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b084      	sub	sp, #16
 801594c:	af00      	add	r7, sp, #0
 801594e:	6078      	str	r0, [r7, #4]
 8015950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015952:	2300      	movs	r3, #0
 8015954:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015956:	683b      	ldr	r3, [r7, #0]
 8015958:	781b      	ldrb	r3, [r3, #0]
 801595a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801595e:	2b40      	cmp	r3, #64	; 0x40
 8015960:	d005      	beq.n	801596e <USBD_StdDevReq+0x26>
 8015962:	2b40      	cmp	r3, #64	; 0x40
 8015964:	d857      	bhi.n	8015a16 <USBD_StdDevReq+0xce>
 8015966:	2b00      	cmp	r3, #0
 8015968:	d00f      	beq.n	801598a <USBD_StdDevReq+0x42>
 801596a:	2b20      	cmp	r3, #32
 801596c:	d153      	bne.n	8015a16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	32ae      	adds	r2, #174	; 0xae
 8015978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801597c:	689b      	ldr	r3, [r3, #8]
 801597e:	6839      	ldr	r1, [r7, #0]
 8015980:	6878      	ldr	r0, [r7, #4]
 8015982:	4798      	blx	r3
 8015984:	4603      	mov	r3, r0
 8015986:	73fb      	strb	r3, [r7, #15]
      break;
 8015988:	e04a      	b.n	8015a20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801598a:	683b      	ldr	r3, [r7, #0]
 801598c:	785b      	ldrb	r3, [r3, #1]
 801598e:	2b09      	cmp	r3, #9
 8015990:	d83b      	bhi.n	8015a0a <USBD_StdDevReq+0xc2>
 8015992:	a201      	add	r2, pc, #4	; (adr r2, 8015998 <USBD_StdDevReq+0x50>)
 8015994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015998:	080159ed 	.word	0x080159ed
 801599c:	08015a01 	.word	0x08015a01
 80159a0:	08015a0b 	.word	0x08015a0b
 80159a4:	080159f7 	.word	0x080159f7
 80159a8:	08015a0b 	.word	0x08015a0b
 80159ac:	080159cb 	.word	0x080159cb
 80159b0:	080159c1 	.word	0x080159c1
 80159b4:	08015a0b 	.word	0x08015a0b
 80159b8:	080159e3 	.word	0x080159e3
 80159bc:	080159d5 	.word	0x080159d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80159c0:	6839      	ldr	r1, [r7, #0]
 80159c2:	6878      	ldr	r0, [r7, #4]
 80159c4:	f000 fa3c 	bl	8015e40 <USBD_GetDescriptor>
          break;
 80159c8:	e024      	b.n	8015a14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80159ca:	6839      	ldr	r1, [r7, #0]
 80159cc:	6878      	ldr	r0, [r7, #4]
 80159ce:	f000 fbcb 	bl	8016168 <USBD_SetAddress>
          break;
 80159d2:	e01f      	b.n	8015a14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80159d4:	6839      	ldr	r1, [r7, #0]
 80159d6:	6878      	ldr	r0, [r7, #4]
 80159d8:	f000 fc0a 	bl	80161f0 <USBD_SetConfig>
 80159dc:	4603      	mov	r3, r0
 80159de:	73fb      	strb	r3, [r7, #15]
          break;
 80159e0:	e018      	b.n	8015a14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80159e2:	6839      	ldr	r1, [r7, #0]
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f000 fcad 	bl	8016344 <USBD_GetConfig>
          break;
 80159ea:	e013      	b.n	8015a14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80159ec:	6839      	ldr	r1, [r7, #0]
 80159ee:	6878      	ldr	r0, [r7, #4]
 80159f0:	f000 fcde 	bl	80163b0 <USBD_GetStatus>
          break;
 80159f4:	e00e      	b.n	8015a14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80159f6:	6839      	ldr	r1, [r7, #0]
 80159f8:	6878      	ldr	r0, [r7, #4]
 80159fa:	f000 fd0d 	bl	8016418 <USBD_SetFeature>
          break;
 80159fe:	e009      	b.n	8015a14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015a00:	6839      	ldr	r1, [r7, #0]
 8015a02:	6878      	ldr	r0, [r7, #4]
 8015a04:	f000 fd31 	bl	801646a <USBD_ClrFeature>
          break;
 8015a08:	e004      	b.n	8015a14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015a0a:	6839      	ldr	r1, [r7, #0]
 8015a0c:	6878      	ldr	r0, [r7, #4]
 8015a0e:	f000 fd88 	bl	8016522 <USBD_CtlError>
          break;
 8015a12:	bf00      	nop
      }
      break;
 8015a14:	e004      	b.n	8015a20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015a16:	6839      	ldr	r1, [r7, #0]
 8015a18:	6878      	ldr	r0, [r7, #4]
 8015a1a:	f000 fd82 	bl	8016522 <USBD_CtlError>
      break;
 8015a1e:	bf00      	nop
  }

  return ret;
 8015a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a22:	4618      	mov	r0, r3
 8015a24:	3710      	adds	r7, #16
 8015a26:	46bd      	mov	sp, r7
 8015a28:	bd80      	pop	{r7, pc}
 8015a2a:	bf00      	nop

08015a2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b084      	sub	sp, #16
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
 8015a34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a36:	2300      	movs	r3, #0
 8015a38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a3a:	683b      	ldr	r3, [r7, #0]
 8015a3c:	781b      	ldrb	r3, [r3, #0]
 8015a3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015a42:	2b40      	cmp	r3, #64	; 0x40
 8015a44:	d005      	beq.n	8015a52 <USBD_StdItfReq+0x26>
 8015a46:	2b40      	cmp	r3, #64	; 0x40
 8015a48:	d852      	bhi.n	8015af0 <USBD_StdItfReq+0xc4>
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d001      	beq.n	8015a52 <USBD_StdItfReq+0x26>
 8015a4e:	2b20      	cmp	r3, #32
 8015a50:	d14e      	bne.n	8015af0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a58:	b2db      	uxtb	r3, r3
 8015a5a:	3b01      	subs	r3, #1
 8015a5c:	2b02      	cmp	r3, #2
 8015a5e:	d840      	bhi.n	8015ae2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015a60:	683b      	ldr	r3, [r7, #0]
 8015a62:	889b      	ldrh	r3, [r3, #4]
 8015a64:	b2db      	uxtb	r3, r3
 8015a66:	2b01      	cmp	r3, #1
 8015a68:	d836      	bhi.n	8015ad8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	889b      	ldrh	r3, [r3, #4]
 8015a6e:	b2db      	uxtb	r3, r3
 8015a70:	4619      	mov	r1, r3
 8015a72:	6878      	ldr	r0, [r7, #4]
 8015a74:	f7ff fed9 	bl	801582a <USBD_CoreFindIF>
 8015a78:	4603      	mov	r3, r0
 8015a7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a7c:	7bbb      	ldrb	r3, [r7, #14]
 8015a7e:	2bff      	cmp	r3, #255	; 0xff
 8015a80:	d01d      	beq.n	8015abe <USBD_StdItfReq+0x92>
 8015a82:	7bbb      	ldrb	r3, [r7, #14]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d11a      	bne.n	8015abe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015a88:	7bba      	ldrb	r2, [r7, #14]
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	32ae      	adds	r2, #174	; 0xae
 8015a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a92:	689b      	ldr	r3, [r3, #8]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d00f      	beq.n	8015ab8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015a98:	7bba      	ldrb	r2, [r7, #14]
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015aa0:	7bba      	ldrb	r2, [r7, #14]
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	32ae      	adds	r2, #174	; 0xae
 8015aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015aaa:	689b      	ldr	r3, [r3, #8]
 8015aac:	6839      	ldr	r1, [r7, #0]
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	4798      	blx	r3
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015ab6:	e004      	b.n	8015ac2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015ab8:	2303      	movs	r3, #3
 8015aba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015abc:	e001      	b.n	8015ac2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015abe:	2303      	movs	r3, #3
 8015ac0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015ac2:	683b      	ldr	r3, [r7, #0]
 8015ac4:	88db      	ldrh	r3, [r3, #6]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d110      	bne.n	8015aec <USBD_StdItfReq+0xc0>
 8015aca:	7bfb      	ldrb	r3, [r7, #15]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d10d      	bne.n	8015aec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015ad0:	6878      	ldr	r0, [r7, #4]
 8015ad2:	f000 fdf1 	bl	80166b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015ad6:	e009      	b.n	8015aec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015ad8:	6839      	ldr	r1, [r7, #0]
 8015ada:	6878      	ldr	r0, [r7, #4]
 8015adc:	f000 fd21 	bl	8016522 <USBD_CtlError>
          break;
 8015ae0:	e004      	b.n	8015aec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015ae2:	6839      	ldr	r1, [r7, #0]
 8015ae4:	6878      	ldr	r0, [r7, #4]
 8015ae6:	f000 fd1c 	bl	8016522 <USBD_CtlError>
          break;
 8015aea:	e000      	b.n	8015aee <USBD_StdItfReq+0xc2>
          break;
 8015aec:	bf00      	nop
      }
      break;
 8015aee:	e004      	b.n	8015afa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015af0:	6839      	ldr	r1, [r7, #0]
 8015af2:	6878      	ldr	r0, [r7, #4]
 8015af4:	f000 fd15 	bl	8016522 <USBD_CtlError>
      break;
 8015af8:	bf00      	nop
  }

  return ret;
 8015afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8015afc:	4618      	mov	r0, r3
 8015afe:	3710      	adds	r7, #16
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}

08015b04 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b084      	sub	sp, #16
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
 8015b0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015b0e:	2300      	movs	r3, #0
 8015b10:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015b12:	683b      	ldr	r3, [r7, #0]
 8015b14:	889b      	ldrh	r3, [r3, #4]
 8015b16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015b18:	683b      	ldr	r3, [r7, #0]
 8015b1a:	781b      	ldrb	r3, [r3, #0]
 8015b1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015b20:	2b40      	cmp	r3, #64	; 0x40
 8015b22:	d007      	beq.n	8015b34 <USBD_StdEPReq+0x30>
 8015b24:	2b40      	cmp	r3, #64	; 0x40
 8015b26:	f200 817f 	bhi.w	8015e28 <USBD_StdEPReq+0x324>
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d02a      	beq.n	8015b84 <USBD_StdEPReq+0x80>
 8015b2e:	2b20      	cmp	r3, #32
 8015b30:	f040 817a 	bne.w	8015e28 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015b34:	7bbb      	ldrb	r3, [r7, #14]
 8015b36:	4619      	mov	r1, r3
 8015b38:	6878      	ldr	r0, [r7, #4]
 8015b3a:	f7ff fe83 	bl	8015844 <USBD_CoreFindEP>
 8015b3e:	4603      	mov	r3, r0
 8015b40:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015b42:	7b7b      	ldrb	r3, [r7, #13]
 8015b44:	2bff      	cmp	r3, #255	; 0xff
 8015b46:	f000 8174 	beq.w	8015e32 <USBD_StdEPReq+0x32e>
 8015b4a:	7b7b      	ldrb	r3, [r7, #13]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	f040 8170 	bne.w	8015e32 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015b52:	7b7a      	ldrb	r2, [r7, #13]
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015b5a:	7b7a      	ldrb	r2, [r7, #13]
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	32ae      	adds	r2, #174	; 0xae
 8015b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b64:	689b      	ldr	r3, [r3, #8]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	f000 8163 	beq.w	8015e32 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015b6c:	7b7a      	ldrb	r2, [r7, #13]
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	32ae      	adds	r2, #174	; 0xae
 8015b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b76:	689b      	ldr	r3, [r3, #8]
 8015b78:	6839      	ldr	r1, [r7, #0]
 8015b7a:	6878      	ldr	r0, [r7, #4]
 8015b7c:	4798      	blx	r3
 8015b7e:	4603      	mov	r3, r0
 8015b80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015b82:	e156      	b.n	8015e32 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015b84:	683b      	ldr	r3, [r7, #0]
 8015b86:	785b      	ldrb	r3, [r3, #1]
 8015b88:	2b03      	cmp	r3, #3
 8015b8a:	d008      	beq.n	8015b9e <USBD_StdEPReq+0x9a>
 8015b8c:	2b03      	cmp	r3, #3
 8015b8e:	f300 8145 	bgt.w	8015e1c <USBD_StdEPReq+0x318>
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	f000 809b 	beq.w	8015cce <USBD_StdEPReq+0x1ca>
 8015b98:	2b01      	cmp	r3, #1
 8015b9a:	d03c      	beq.n	8015c16 <USBD_StdEPReq+0x112>
 8015b9c:	e13e      	b.n	8015e1c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ba4:	b2db      	uxtb	r3, r3
 8015ba6:	2b02      	cmp	r3, #2
 8015ba8:	d002      	beq.n	8015bb0 <USBD_StdEPReq+0xac>
 8015baa:	2b03      	cmp	r3, #3
 8015bac:	d016      	beq.n	8015bdc <USBD_StdEPReq+0xd8>
 8015bae:	e02c      	b.n	8015c0a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015bb0:	7bbb      	ldrb	r3, [r7, #14]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d00d      	beq.n	8015bd2 <USBD_StdEPReq+0xce>
 8015bb6:	7bbb      	ldrb	r3, [r7, #14]
 8015bb8:	2b80      	cmp	r3, #128	; 0x80
 8015bba:	d00a      	beq.n	8015bd2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015bbc:	7bbb      	ldrb	r3, [r7, #14]
 8015bbe:	4619      	mov	r1, r3
 8015bc0:	6878      	ldr	r0, [r7, #4]
 8015bc2:	f004 fdf1 	bl	801a7a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015bc6:	2180      	movs	r1, #128	; 0x80
 8015bc8:	6878      	ldr	r0, [r7, #4]
 8015bca:	f004 fded 	bl	801a7a8 <USBD_LL_StallEP>
 8015bce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015bd0:	e020      	b.n	8015c14 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015bd2:	6839      	ldr	r1, [r7, #0]
 8015bd4:	6878      	ldr	r0, [r7, #4]
 8015bd6:	f000 fca4 	bl	8016522 <USBD_CtlError>
              break;
 8015bda:	e01b      	b.n	8015c14 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	885b      	ldrh	r3, [r3, #2]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d10e      	bne.n	8015c02 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015be4:	7bbb      	ldrb	r3, [r7, #14]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d00b      	beq.n	8015c02 <USBD_StdEPReq+0xfe>
 8015bea:	7bbb      	ldrb	r3, [r7, #14]
 8015bec:	2b80      	cmp	r3, #128	; 0x80
 8015bee:	d008      	beq.n	8015c02 <USBD_StdEPReq+0xfe>
 8015bf0:	683b      	ldr	r3, [r7, #0]
 8015bf2:	88db      	ldrh	r3, [r3, #6]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d104      	bne.n	8015c02 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015bf8:	7bbb      	ldrb	r3, [r7, #14]
 8015bfa:	4619      	mov	r1, r3
 8015bfc:	6878      	ldr	r0, [r7, #4]
 8015bfe:	f004 fdd3 	bl	801a7a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015c02:	6878      	ldr	r0, [r7, #4]
 8015c04:	f000 fd58 	bl	80166b8 <USBD_CtlSendStatus>

              break;
 8015c08:	e004      	b.n	8015c14 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015c0a:	6839      	ldr	r1, [r7, #0]
 8015c0c:	6878      	ldr	r0, [r7, #4]
 8015c0e:	f000 fc88 	bl	8016522 <USBD_CtlError>
              break;
 8015c12:	bf00      	nop
          }
          break;
 8015c14:	e107      	b.n	8015e26 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c1c:	b2db      	uxtb	r3, r3
 8015c1e:	2b02      	cmp	r3, #2
 8015c20:	d002      	beq.n	8015c28 <USBD_StdEPReq+0x124>
 8015c22:	2b03      	cmp	r3, #3
 8015c24:	d016      	beq.n	8015c54 <USBD_StdEPReq+0x150>
 8015c26:	e04b      	b.n	8015cc0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015c28:	7bbb      	ldrb	r3, [r7, #14]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d00d      	beq.n	8015c4a <USBD_StdEPReq+0x146>
 8015c2e:	7bbb      	ldrb	r3, [r7, #14]
 8015c30:	2b80      	cmp	r3, #128	; 0x80
 8015c32:	d00a      	beq.n	8015c4a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015c34:	7bbb      	ldrb	r3, [r7, #14]
 8015c36:	4619      	mov	r1, r3
 8015c38:	6878      	ldr	r0, [r7, #4]
 8015c3a:	f004 fdb5 	bl	801a7a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015c3e:	2180      	movs	r1, #128	; 0x80
 8015c40:	6878      	ldr	r0, [r7, #4]
 8015c42:	f004 fdb1 	bl	801a7a8 <USBD_LL_StallEP>
 8015c46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015c48:	e040      	b.n	8015ccc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015c4a:	6839      	ldr	r1, [r7, #0]
 8015c4c:	6878      	ldr	r0, [r7, #4]
 8015c4e:	f000 fc68 	bl	8016522 <USBD_CtlError>
              break;
 8015c52:	e03b      	b.n	8015ccc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015c54:	683b      	ldr	r3, [r7, #0]
 8015c56:	885b      	ldrh	r3, [r3, #2]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d136      	bne.n	8015cca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015c5c:	7bbb      	ldrb	r3, [r7, #14]
 8015c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d004      	beq.n	8015c70 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015c66:	7bbb      	ldrb	r3, [r7, #14]
 8015c68:	4619      	mov	r1, r3
 8015c6a:	6878      	ldr	r0, [r7, #4]
 8015c6c:	f004 fdbb 	bl	801a7e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015c70:	6878      	ldr	r0, [r7, #4]
 8015c72:	f000 fd21 	bl	80166b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015c76:	7bbb      	ldrb	r3, [r7, #14]
 8015c78:	4619      	mov	r1, r3
 8015c7a:	6878      	ldr	r0, [r7, #4]
 8015c7c:	f7ff fde2 	bl	8015844 <USBD_CoreFindEP>
 8015c80:	4603      	mov	r3, r0
 8015c82:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015c84:	7b7b      	ldrb	r3, [r7, #13]
 8015c86:	2bff      	cmp	r3, #255	; 0xff
 8015c88:	d01f      	beq.n	8015cca <USBD_StdEPReq+0x1c6>
 8015c8a:	7b7b      	ldrb	r3, [r7, #13]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d11c      	bne.n	8015cca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015c90:	7b7a      	ldrb	r2, [r7, #13]
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015c98:	7b7a      	ldrb	r2, [r7, #13]
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	32ae      	adds	r2, #174	; 0xae
 8015c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ca2:	689b      	ldr	r3, [r3, #8]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d010      	beq.n	8015cca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015ca8:	7b7a      	ldrb	r2, [r7, #13]
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	32ae      	adds	r2, #174	; 0xae
 8015cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cb2:	689b      	ldr	r3, [r3, #8]
 8015cb4:	6839      	ldr	r1, [r7, #0]
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	4798      	blx	r3
 8015cba:	4603      	mov	r3, r0
 8015cbc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015cbe:	e004      	b.n	8015cca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015cc0:	6839      	ldr	r1, [r7, #0]
 8015cc2:	6878      	ldr	r0, [r7, #4]
 8015cc4:	f000 fc2d 	bl	8016522 <USBD_CtlError>
              break;
 8015cc8:	e000      	b.n	8015ccc <USBD_StdEPReq+0x1c8>
              break;
 8015cca:	bf00      	nop
          }
          break;
 8015ccc:	e0ab      	b.n	8015e26 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015cd4:	b2db      	uxtb	r3, r3
 8015cd6:	2b02      	cmp	r3, #2
 8015cd8:	d002      	beq.n	8015ce0 <USBD_StdEPReq+0x1dc>
 8015cda:	2b03      	cmp	r3, #3
 8015cdc:	d032      	beq.n	8015d44 <USBD_StdEPReq+0x240>
 8015cde:	e097      	b.n	8015e10 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ce0:	7bbb      	ldrb	r3, [r7, #14]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d007      	beq.n	8015cf6 <USBD_StdEPReq+0x1f2>
 8015ce6:	7bbb      	ldrb	r3, [r7, #14]
 8015ce8:	2b80      	cmp	r3, #128	; 0x80
 8015cea:	d004      	beq.n	8015cf6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015cec:	6839      	ldr	r1, [r7, #0]
 8015cee:	6878      	ldr	r0, [r7, #4]
 8015cf0:	f000 fc17 	bl	8016522 <USBD_CtlError>
                break;
 8015cf4:	e091      	b.n	8015e1a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015cf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	da0b      	bge.n	8015d16 <USBD_StdEPReq+0x212>
 8015cfe:	7bbb      	ldrb	r3, [r7, #14]
 8015d00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015d04:	4613      	mov	r3, r2
 8015d06:	009b      	lsls	r3, r3, #2
 8015d08:	4413      	add	r3, r2
 8015d0a:	009b      	lsls	r3, r3, #2
 8015d0c:	3310      	adds	r3, #16
 8015d0e:	687a      	ldr	r2, [r7, #4]
 8015d10:	4413      	add	r3, r2
 8015d12:	3304      	adds	r3, #4
 8015d14:	e00b      	b.n	8015d2e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015d16:	7bbb      	ldrb	r3, [r7, #14]
 8015d18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015d1c:	4613      	mov	r3, r2
 8015d1e:	009b      	lsls	r3, r3, #2
 8015d20:	4413      	add	r3, r2
 8015d22:	009b      	lsls	r3, r3, #2
 8015d24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015d28:	687a      	ldr	r2, [r7, #4]
 8015d2a:	4413      	add	r3, r2
 8015d2c:	3304      	adds	r3, #4
 8015d2e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015d30:	68bb      	ldr	r3, [r7, #8]
 8015d32:	2200      	movs	r2, #0
 8015d34:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015d36:	68bb      	ldr	r3, [r7, #8]
 8015d38:	2202      	movs	r2, #2
 8015d3a:	4619      	mov	r1, r3
 8015d3c:	6878      	ldr	r0, [r7, #4]
 8015d3e:	f000 fc61 	bl	8016604 <USBD_CtlSendData>
              break;
 8015d42:	e06a      	b.n	8015e1a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015d44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	da11      	bge.n	8015d70 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015d4c:	7bbb      	ldrb	r3, [r7, #14]
 8015d4e:	f003 020f 	and.w	r2, r3, #15
 8015d52:	6879      	ldr	r1, [r7, #4]
 8015d54:	4613      	mov	r3, r2
 8015d56:	009b      	lsls	r3, r3, #2
 8015d58:	4413      	add	r3, r2
 8015d5a:	009b      	lsls	r3, r3, #2
 8015d5c:	440b      	add	r3, r1
 8015d5e:	3324      	adds	r3, #36	; 0x24
 8015d60:	881b      	ldrh	r3, [r3, #0]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d117      	bne.n	8015d96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015d66:	6839      	ldr	r1, [r7, #0]
 8015d68:	6878      	ldr	r0, [r7, #4]
 8015d6a:	f000 fbda 	bl	8016522 <USBD_CtlError>
                  break;
 8015d6e:	e054      	b.n	8015e1a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015d70:	7bbb      	ldrb	r3, [r7, #14]
 8015d72:	f003 020f 	and.w	r2, r3, #15
 8015d76:	6879      	ldr	r1, [r7, #4]
 8015d78:	4613      	mov	r3, r2
 8015d7a:	009b      	lsls	r3, r3, #2
 8015d7c:	4413      	add	r3, r2
 8015d7e:	009b      	lsls	r3, r3, #2
 8015d80:	440b      	add	r3, r1
 8015d82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015d86:	881b      	ldrh	r3, [r3, #0]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d104      	bne.n	8015d96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015d8c:	6839      	ldr	r1, [r7, #0]
 8015d8e:	6878      	ldr	r0, [r7, #4]
 8015d90:	f000 fbc7 	bl	8016522 <USBD_CtlError>
                  break;
 8015d94:	e041      	b.n	8015e1a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015d96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	da0b      	bge.n	8015db6 <USBD_StdEPReq+0x2b2>
 8015d9e:	7bbb      	ldrb	r3, [r7, #14]
 8015da0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015da4:	4613      	mov	r3, r2
 8015da6:	009b      	lsls	r3, r3, #2
 8015da8:	4413      	add	r3, r2
 8015daa:	009b      	lsls	r3, r3, #2
 8015dac:	3310      	adds	r3, #16
 8015dae:	687a      	ldr	r2, [r7, #4]
 8015db0:	4413      	add	r3, r2
 8015db2:	3304      	adds	r3, #4
 8015db4:	e00b      	b.n	8015dce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015db6:	7bbb      	ldrb	r3, [r7, #14]
 8015db8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015dbc:	4613      	mov	r3, r2
 8015dbe:	009b      	lsls	r3, r3, #2
 8015dc0:	4413      	add	r3, r2
 8015dc2:	009b      	lsls	r3, r3, #2
 8015dc4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015dc8:	687a      	ldr	r2, [r7, #4]
 8015dca:	4413      	add	r3, r2
 8015dcc:	3304      	adds	r3, #4
 8015dce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015dd0:	7bbb      	ldrb	r3, [r7, #14]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d002      	beq.n	8015ddc <USBD_StdEPReq+0x2d8>
 8015dd6:	7bbb      	ldrb	r3, [r7, #14]
 8015dd8:	2b80      	cmp	r3, #128	; 0x80
 8015dda:	d103      	bne.n	8015de4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015ddc:	68bb      	ldr	r3, [r7, #8]
 8015dde:	2200      	movs	r2, #0
 8015de0:	601a      	str	r2, [r3, #0]
 8015de2:	e00e      	b.n	8015e02 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015de4:	7bbb      	ldrb	r3, [r7, #14]
 8015de6:	4619      	mov	r1, r3
 8015de8:	6878      	ldr	r0, [r7, #4]
 8015dea:	f004 fd1b 	bl	801a824 <USBD_LL_IsStallEP>
 8015dee:	4603      	mov	r3, r0
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d003      	beq.n	8015dfc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015df4:	68bb      	ldr	r3, [r7, #8]
 8015df6:	2201      	movs	r2, #1
 8015df8:	601a      	str	r2, [r3, #0]
 8015dfa:	e002      	b.n	8015e02 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015dfc:	68bb      	ldr	r3, [r7, #8]
 8015dfe:	2200      	movs	r2, #0
 8015e00:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	2202      	movs	r2, #2
 8015e06:	4619      	mov	r1, r3
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	f000 fbfb 	bl	8016604 <USBD_CtlSendData>
              break;
 8015e0e:	e004      	b.n	8015e1a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015e10:	6839      	ldr	r1, [r7, #0]
 8015e12:	6878      	ldr	r0, [r7, #4]
 8015e14:	f000 fb85 	bl	8016522 <USBD_CtlError>
              break;
 8015e18:	bf00      	nop
          }
          break;
 8015e1a:	e004      	b.n	8015e26 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015e1c:	6839      	ldr	r1, [r7, #0]
 8015e1e:	6878      	ldr	r0, [r7, #4]
 8015e20:	f000 fb7f 	bl	8016522 <USBD_CtlError>
          break;
 8015e24:	bf00      	nop
      }
      break;
 8015e26:	e005      	b.n	8015e34 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015e28:	6839      	ldr	r1, [r7, #0]
 8015e2a:	6878      	ldr	r0, [r7, #4]
 8015e2c:	f000 fb79 	bl	8016522 <USBD_CtlError>
      break;
 8015e30:	e000      	b.n	8015e34 <USBD_StdEPReq+0x330>
      break;
 8015e32:	bf00      	nop
  }

  return ret;
 8015e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e36:	4618      	mov	r0, r3
 8015e38:	3710      	adds	r7, #16
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	bd80      	pop	{r7, pc}
	...

08015e40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b084      	sub	sp, #16
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
 8015e48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015e4e:	2300      	movs	r3, #0
 8015e50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015e52:	2300      	movs	r3, #0
 8015e54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015e56:	683b      	ldr	r3, [r7, #0]
 8015e58:	885b      	ldrh	r3, [r3, #2]
 8015e5a:	0a1b      	lsrs	r3, r3, #8
 8015e5c:	b29b      	uxth	r3, r3
 8015e5e:	3b01      	subs	r3, #1
 8015e60:	2b0e      	cmp	r3, #14
 8015e62:	f200 8152 	bhi.w	801610a <USBD_GetDescriptor+0x2ca>
 8015e66:	a201      	add	r2, pc, #4	; (adr r2, 8015e6c <USBD_GetDescriptor+0x2c>)
 8015e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e6c:	08015edd 	.word	0x08015edd
 8015e70:	08015ef5 	.word	0x08015ef5
 8015e74:	08015f35 	.word	0x08015f35
 8015e78:	0801610b 	.word	0x0801610b
 8015e7c:	0801610b 	.word	0x0801610b
 8015e80:	080160ab 	.word	0x080160ab
 8015e84:	080160d7 	.word	0x080160d7
 8015e88:	0801610b 	.word	0x0801610b
 8015e8c:	0801610b 	.word	0x0801610b
 8015e90:	0801610b 	.word	0x0801610b
 8015e94:	0801610b 	.word	0x0801610b
 8015e98:	0801610b 	.word	0x0801610b
 8015e9c:	0801610b 	.word	0x0801610b
 8015ea0:	0801610b 	.word	0x0801610b
 8015ea4:	08015ea9 	.word	0x08015ea9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eae:	69db      	ldr	r3, [r3, #28]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d00b      	beq.n	8015ecc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eba:	69db      	ldr	r3, [r3, #28]
 8015ebc:	687a      	ldr	r2, [r7, #4]
 8015ebe:	7c12      	ldrb	r2, [r2, #16]
 8015ec0:	f107 0108 	add.w	r1, r7, #8
 8015ec4:	4610      	mov	r0, r2
 8015ec6:	4798      	blx	r3
 8015ec8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015eca:	e126      	b.n	801611a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015ecc:	6839      	ldr	r1, [r7, #0]
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f000 fb27 	bl	8016522 <USBD_CtlError>
        err++;
 8015ed4:	7afb      	ldrb	r3, [r7, #11]
 8015ed6:	3301      	adds	r3, #1
 8015ed8:	72fb      	strb	r3, [r7, #11]
      break;
 8015eda:	e11e      	b.n	801611a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	687a      	ldr	r2, [r7, #4]
 8015ee6:	7c12      	ldrb	r2, [r2, #16]
 8015ee8:	f107 0108 	add.w	r1, r7, #8
 8015eec:	4610      	mov	r0, r2
 8015eee:	4798      	blx	r3
 8015ef0:	60f8      	str	r0, [r7, #12]
      break;
 8015ef2:	e112      	b.n	801611a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	7c1b      	ldrb	r3, [r3, #16]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d10d      	bne.n	8015f18 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f04:	f107 0208 	add.w	r2, r7, #8
 8015f08:	4610      	mov	r0, r2
 8015f0a:	4798      	blx	r3
 8015f0c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	3301      	adds	r3, #1
 8015f12:	2202      	movs	r2, #2
 8015f14:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015f16:	e100      	b.n	801611a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f20:	f107 0208 	add.w	r2, r7, #8
 8015f24:	4610      	mov	r0, r2
 8015f26:	4798      	blx	r3
 8015f28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	3301      	adds	r3, #1
 8015f2e:	2202      	movs	r2, #2
 8015f30:	701a      	strb	r2, [r3, #0]
      break;
 8015f32:	e0f2      	b.n	801611a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015f34:	683b      	ldr	r3, [r7, #0]
 8015f36:	885b      	ldrh	r3, [r3, #2]
 8015f38:	b2db      	uxtb	r3, r3
 8015f3a:	2b05      	cmp	r3, #5
 8015f3c:	f200 80ac 	bhi.w	8016098 <USBD_GetDescriptor+0x258>
 8015f40:	a201      	add	r2, pc, #4	; (adr r2, 8015f48 <USBD_GetDescriptor+0x108>)
 8015f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f46:	bf00      	nop
 8015f48:	08015f61 	.word	0x08015f61
 8015f4c:	08015f95 	.word	0x08015f95
 8015f50:	08015fc9 	.word	0x08015fc9
 8015f54:	08015ffd 	.word	0x08015ffd
 8015f58:	08016031 	.word	0x08016031
 8015f5c:	08016065 	.word	0x08016065
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f66:	685b      	ldr	r3, [r3, #4]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d00b      	beq.n	8015f84 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f72:	685b      	ldr	r3, [r3, #4]
 8015f74:	687a      	ldr	r2, [r7, #4]
 8015f76:	7c12      	ldrb	r2, [r2, #16]
 8015f78:	f107 0108 	add.w	r1, r7, #8
 8015f7c:	4610      	mov	r0, r2
 8015f7e:	4798      	blx	r3
 8015f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f82:	e091      	b.n	80160a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015f84:	6839      	ldr	r1, [r7, #0]
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f000 facb 	bl	8016522 <USBD_CtlError>
            err++;
 8015f8c:	7afb      	ldrb	r3, [r7, #11]
 8015f8e:	3301      	adds	r3, #1
 8015f90:	72fb      	strb	r3, [r7, #11]
          break;
 8015f92:	e089      	b.n	80160a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f9a:	689b      	ldr	r3, [r3, #8]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d00b      	beq.n	8015fb8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015fa6:	689b      	ldr	r3, [r3, #8]
 8015fa8:	687a      	ldr	r2, [r7, #4]
 8015faa:	7c12      	ldrb	r2, [r2, #16]
 8015fac:	f107 0108 	add.w	r1, r7, #8
 8015fb0:	4610      	mov	r0, r2
 8015fb2:	4798      	blx	r3
 8015fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015fb6:	e077      	b.n	80160a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015fb8:	6839      	ldr	r1, [r7, #0]
 8015fba:	6878      	ldr	r0, [r7, #4]
 8015fbc:	f000 fab1 	bl	8016522 <USBD_CtlError>
            err++;
 8015fc0:	7afb      	ldrb	r3, [r7, #11]
 8015fc2:	3301      	adds	r3, #1
 8015fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8015fc6:	e06f      	b.n	80160a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015fce:	68db      	ldr	r3, [r3, #12]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d00b      	beq.n	8015fec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015fda:	68db      	ldr	r3, [r3, #12]
 8015fdc:	687a      	ldr	r2, [r7, #4]
 8015fde:	7c12      	ldrb	r2, [r2, #16]
 8015fe0:	f107 0108 	add.w	r1, r7, #8
 8015fe4:	4610      	mov	r0, r2
 8015fe6:	4798      	blx	r3
 8015fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015fea:	e05d      	b.n	80160a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015fec:	6839      	ldr	r1, [r7, #0]
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f000 fa97 	bl	8016522 <USBD_CtlError>
            err++;
 8015ff4:	7afb      	ldrb	r3, [r7, #11]
 8015ff6:	3301      	adds	r3, #1
 8015ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8015ffa:	e055      	b.n	80160a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016002:	691b      	ldr	r3, [r3, #16]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d00b      	beq.n	8016020 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801600e:	691b      	ldr	r3, [r3, #16]
 8016010:	687a      	ldr	r2, [r7, #4]
 8016012:	7c12      	ldrb	r2, [r2, #16]
 8016014:	f107 0108 	add.w	r1, r7, #8
 8016018:	4610      	mov	r0, r2
 801601a:	4798      	blx	r3
 801601c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801601e:	e043      	b.n	80160a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016020:	6839      	ldr	r1, [r7, #0]
 8016022:	6878      	ldr	r0, [r7, #4]
 8016024:	f000 fa7d 	bl	8016522 <USBD_CtlError>
            err++;
 8016028:	7afb      	ldrb	r3, [r7, #11]
 801602a:	3301      	adds	r3, #1
 801602c:	72fb      	strb	r3, [r7, #11]
          break;
 801602e:	e03b      	b.n	80160a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016036:	695b      	ldr	r3, [r3, #20]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d00b      	beq.n	8016054 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016042:	695b      	ldr	r3, [r3, #20]
 8016044:	687a      	ldr	r2, [r7, #4]
 8016046:	7c12      	ldrb	r2, [r2, #16]
 8016048:	f107 0108 	add.w	r1, r7, #8
 801604c:	4610      	mov	r0, r2
 801604e:	4798      	blx	r3
 8016050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016052:	e029      	b.n	80160a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016054:	6839      	ldr	r1, [r7, #0]
 8016056:	6878      	ldr	r0, [r7, #4]
 8016058:	f000 fa63 	bl	8016522 <USBD_CtlError>
            err++;
 801605c:	7afb      	ldrb	r3, [r7, #11]
 801605e:	3301      	adds	r3, #1
 8016060:	72fb      	strb	r3, [r7, #11]
          break;
 8016062:	e021      	b.n	80160a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801606a:	699b      	ldr	r3, [r3, #24]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d00b      	beq.n	8016088 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016076:	699b      	ldr	r3, [r3, #24]
 8016078:	687a      	ldr	r2, [r7, #4]
 801607a:	7c12      	ldrb	r2, [r2, #16]
 801607c:	f107 0108 	add.w	r1, r7, #8
 8016080:	4610      	mov	r0, r2
 8016082:	4798      	blx	r3
 8016084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016086:	e00f      	b.n	80160a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016088:	6839      	ldr	r1, [r7, #0]
 801608a:	6878      	ldr	r0, [r7, #4]
 801608c:	f000 fa49 	bl	8016522 <USBD_CtlError>
            err++;
 8016090:	7afb      	ldrb	r3, [r7, #11]
 8016092:	3301      	adds	r3, #1
 8016094:	72fb      	strb	r3, [r7, #11]
          break;
 8016096:	e007      	b.n	80160a8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016098:	6839      	ldr	r1, [r7, #0]
 801609a:	6878      	ldr	r0, [r7, #4]
 801609c:	f000 fa41 	bl	8016522 <USBD_CtlError>
          err++;
 80160a0:	7afb      	ldrb	r3, [r7, #11]
 80160a2:	3301      	adds	r3, #1
 80160a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80160a6:	bf00      	nop
      }
      break;
 80160a8:	e037      	b.n	801611a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	7c1b      	ldrb	r3, [r3, #16]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d109      	bne.n	80160c6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80160b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80160ba:	f107 0208 	add.w	r2, r7, #8
 80160be:	4610      	mov	r0, r2
 80160c0:	4798      	blx	r3
 80160c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80160c4:	e029      	b.n	801611a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80160c6:	6839      	ldr	r1, [r7, #0]
 80160c8:	6878      	ldr	r0, [r7, #4]
 80160ca:	f000 fa2a 	bl	8016522 <USBD_CtlError>
        err++;
 80160ce:	7afb      	ldrb	r3, [r7, #11]
 80160d0:	3301      	adds	r3, #1
 80160d2:	72fb      	strb	r3, [r7, #11]
      break;
 80160d4:	e021      	b.n	801611a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	7c1b      	ldrb	r3, [r3, #16]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d10d      	bne.n	80160fa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80160e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160e6:	f107 0208 	add.w	r2, r7, #8
 80160ea:	4610      	mov	r0, r2
 80160ec:	4798      	blx	r3
 80160ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	3301      	adds	r3, #1
 80160f4:	2207      	movs	r2, #7
 80160f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80160f8:	e00f      	b.n	801611a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80160fa:	6839      	ldr	r1, [r7, #0]
 80160fc:	6878      	ldr	r0, [r7, #4]
 80160fe:	f000 fa10 	bl	8016522 <USBD_CtlError>
        err++;
 8016102:	7afb      	ldrb	r3, [r7, #11]
 8016104:	3301      	adds	r3, #1
 8016106:	72fb      	strb	r3, [r7, #11]
      break;
 8016108:	e007      	b.n	801611a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801610a:	6839      	ldr	r1, [r7, #0]
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	f000 fa08 	bl	8016522 <USBD_CtlError>
      err++;
 8016112:	7afb      	ldrb	r3, [r7, #11]
 8016114:	3301      	adds	r3, #1
 8016116:	72fb      	strb	r3, [r7, #11]
      break;
 8016118:	bf00      	nop
  }

  if (err != 0U)
 801611a:	7afb      	ldrb	r3, [r7, #11]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d11e      	bne.n	801615e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8016120:	683b      	ldr	r3, [r7, #0]
 8016122:	88db      	ldrh	r3, [r3, #6]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d016      	beq.n	8016156 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8016128:	893b      	ldrh	r3, [r7, #8]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d00e      	beq.n	801614c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801612e:	683b      	ldr	r3, [r7, #0]
 8016130:	88da      	ldrh	r2, [r3, #6]
 8016132:	893b      	ldrh	r3, [r7, #8]
 8016134:	4293      	cmp	r3, r2
 8016136:	bf28      	it	cs
 8016138:	4613      	movcs	r3, r2
 801613a:	b29b      	uxth	r3, r3
 801613c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801613e:	893b      	ldrh	r3, [r7, #8]
 8016140:	461a      	mov	r2, r3
 8016142:	68f9      	ldr	r1, [r7, #12]
 8016144:	6878      	ldr	r0, [r7, #4]
 8016146:	f000 fa5d 	bl	8016604 <USBD_CtlSendData>
 801614a:	e009      	b.n	8016160 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801614c:	6839      	ldr	r1, [r7, #0]
 801614e:	6878      	ldr	r0, [r7, #4]
 8016150:	f000 f9e7 	bl	8016522 <USBD_CtlError>
 8016154:	e004      	b.n	8016160 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016156:	6878      	ldr	r0, [r7, #4]
 8016158:	f000 faae 	bl	80166b8 <USBD_CtlSendStatus>
 801615c:	e000      	b.n	8016160 <USBD_GetDescriptor+0x320>
    return;
 801615e:	bf00      	nop
  }
}
 8016160:	3710      	adds	r7, #16
 8016162:	46bd      	mov	sp, r7
 8016164:	bd80      	pop	{r7, pc}
 8016166:	bf00      	nop

08016168 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b084      	sub	sp, #16
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
 8016170:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016172:	683b      	ldr	r3, [r7, #0]
 8016174:	889b      	ldrh	r3, [r3, #4]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d131      	bne.n	80161de <USBD_SetAddress+0x76>
 801617a:	683b      	ldr	r3, [r7, #0]
 801617c:	88db      	ldrh	r3, [r3, #6]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d12d      	bne.n	80161de <USBD_SetAddress+0x76>
 8016182:	683b      	ldr	r3, [r7, #0]
 8016184:	885b      	ldrh	r3, [r3, #2]
 8016186:	2b7f      	cmp	r3, #127	; 0x7f
 8016188:	d829      	bhi.n	80161de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801618a:	683b      	ldr	r3, [r7, #0]
 801618c:	885b      	ldrh	r3, [r3, #2]
 801618e:	b2db      	uxtb	r3, r3
 8016190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016194:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801619c:	b2db      	uxtb	r3, r3
 801619e:	2b03      	cmp	r3, #3
 80161a0:	d104      	bne.n	80161ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80161a2:	6839      	ldr	r1, [r7, #0]
 80161a4:	6878      	ldr	r0, [r7, #4]
 80161a6:	f000 f9bc 	bl	8016522 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161aa:	e01d      	b.n	80161e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	7bfa      	ldrb	r2, [r7, #15]
 80161b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80161b4:	7bfb      	ldrb	r3, [r7, #15]
 80161b6:	4619      	mov	r1, r3
 80161b8:	6878      	ldr	r0, [r7, #4]
 80161ba:	f004 fb5f 	bl	801a87c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80161be:	6878      	ldr	r0, [r7, #4]
 80161c0:	f000 fa7a 	bl	80166b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80161c4:	7bfb      	ldrb	r3, [r7, #15]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d004      	beq.n	80161d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	2202      	movs	r2, #2
 80161ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161d2:	e009      	b.n	80161e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	2201      	movs	r2, #1
 80161d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161dc:	e004      	b.n	80161e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80161de:	6839      	ldr	r1, [r7, #0]
 80161e0:	6878      	ldr	r0, [r7, #4]
 80161e2:	f000 f99e 	bl	8016522 <USBD_CtlError>
  }
}
 80161e6:	bf00      	nop
 80161e8:	bf00      	nop
 80161ea:	3710      	adds	r7, #16
 80161ec:	46bd      	mov	sp, r7
 80161ee:	bd80      	pop	{r7, pc}

080161f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b084      	sub	sp, #16
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]
 80161f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80161fa:	2300      	movs	r3, #0
 80161fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80161fe:	683b      	ldr	r3, [r7, #0]
 8016200:	885b      	ldrh	r3, [r3, #2]
 8016202:	b2da      	uxtb	r2, r3
 8016204:	4b4e      	ldr	r3, [pc, #312]	; (8016340 <USBD_SetConfig+0x150>)
 8016206:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016208:	4b4d      	ldr	r3, [pc, #308]	; (8016340 <USBD_SetConfig+0x150>)
 801620a:	781b      	ldrb	r3, [r3, #0]
 801620c:	2b01      	cmp	r3, #1
 801620e:	d905      	bls.n	801621c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016210:	6839      	ldr	r1, [r7, #0]
 8016212:	6878      	ldr	r0, [r7, #4]
 8016214:	f000 f985 	bl	8016522 <USBD_CtlError>
    return USBD_FAIL;
 8016218:	2303      	movs	r3, #3
 801621a:	e08c      	b.n	8016336 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016222:	b2db      	uxtb	r3, r3
 8016224:	2b02      	cmp	r3, #2
 8016226:	d002      	beq.n	801622e <USBD_SetConfig+0x3e>
 8016228:	2b03      	cmp	r3, #3
 801622a:	d029      	beq.n	8016280 <USBD_SetConfig+0x90>
 801622c:	e075      	b.n	801631a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801622e:	4b44      	ldr	r3, [pc, #272]	; (8016340 <USBD_SetConfig+0x150>)
 8016230:	781b      	ldrb	r3, [r3, #0]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d020      	beq.n	8016278 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016236:	4b42      	ldr	r3, [pc, #264]	; (8016340 <USBD_SetConfig+0x150>)
 8016238:	781b      	ldrb	r3, [r3, #0]
 801623a:	461a      	mov	r2, r3
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016240:	4b3f      	ldr	r3, [pc, #252]	; (8016340 <USBD_SetConfig+0x150>)
 8016242:	781b      	ldrb	r3, [r3, #0]
 8016244:	4619      	mov	r1, r3
 8016246:	6878      	ldr	r0, [r7, #4]
 8016248:	f7ff f849 	bl	80152de <USBD_SetClassConfig>
 801624c:	4603      	mov	r3, r0
 801624e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016250:	7bfb      	ldrb	r3, [r7, #15]
 8016252:	2b00      	cmp	r3, #0
 8016254:	d008      	beq.n	8016268 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016256:	6839      	ldr	r1, [r7, #0]
 8016258:	6878      	ldr	r0, [r7, #4]
 801625a:	f000 f962 	bl	8016522 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	2202      	movs	r2, #2
 8016262:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016266:	e065      	b.n	8016334 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016268:	6878      	ldr	r0, [r7, #4]
 801626a:	f000 fa25 	bl	80166b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	2203      	movs	r2, #3
 8016272:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016276:	e05d      	b.n	8016334 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016278:	6878      	ldr	r0, [r7, #4]
 801627a:	f000 fa1d 	bl	80166b8 <USBD_CtlSendStatus>
      break;
 801627e:	e059      	b.n	8016334 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016280:	4b2f      	ldr	r3, [pc, #188]	; (8016340 <USBD_SetConfig+0x150>)
 8016282:	781b      	ldrb	r3, [r3, #0]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d112      	bne.n	80162ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	2202      	movs	r2, #2
 801628c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016290:	4b2b      	ldr	r3, [pc, #172]	; (8016340 <USBD_SetConfig+0x150>)
 8016292:	781b      	ldrb	r3, [r3, #0]
 8016294:	461a      	mov	r2, r3
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801629a:	4b29      	ldr	r3, [pc, #164]	; (8016340 <USBD_SetConfig+0x150>)
 801629c:	781b      	ldrb	r3, [r3, #0]
 801629e:	4619      	mov	r1, r3
 80162a0:	6878      	ldr	r0, [r7, #4]
 80162a2:	f7ff f838 	bl	8015316 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80162a6:	6878      	ldr	r0, [r7, #4]
 80162a8:	f000 fa06 	bl	80166b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80162ac:	e042      	b.n	8016334 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80162ae:	4b24      	ldr	r3, [pc, #144]	; (8016340 <USBD_SetConfig+0x150>)
 80162b0:	781b      	ldrb	r3, [r3, #0]
 80162b2:	461a      	mov	r2, r3
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	685b      	ldr	r3, [r3, #4]
 80162b8:	429a      	cmp	r2, r3
 80162ba:	d02a      	beq.n	8016312 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	685b      	ldr	r3, [r3, #4]
 80162c0:	b2db      	uxtb	r3, r3
 80162c2:	4619      	mov	r1, r3
 80162c4:	6878      	ldr	r0, [r7, #4]
 80162c6:	f7ff f826 	bl	8015316 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80162ca:	4b1d      	ldr	r3, [pc, #116]	; (8016340 <USBD_SetConfig+0x150>)
 80162cc:	781b      	ldrb	r3, [r3, #0]
 80162ce:	461a      	mov	r2, r3
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80162d4:	4b1a      	ldr	r3, [pc, #104]	; (8016340 <USBD_SetConfig+0x150>)
 80162d6:	781b      	ldrb	r3, [r3, #0]
 80162d8:	4619      	mov	r1, r3
 80162da:	6878      	ldr	r0, [r7, #4]
 80162dc:	f7fe ffff 	bl	80152de <USBD_SetClassConfig>
 80162e0:	4603      	mov	r3, r0
 80162e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80162e4:	7bfb      	ldrb	r3, [r7, #15]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d00f      	beq.n	801630a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80162ea:	6839      	ldr	r1, [r7, #0]
 80162ec:	6878      	ldr	r0, [r7, #4]
 80162ee:	f000 f918 	bl	8016522 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	685b      	ldr	r3, [r3, #4]
 80162f6:	b2db      	uxtb	r3, r3
 80162f8:	4619      	mov	r1, r3
 80162fa:	6878      	ldr	r0, [r7, #4]
 80162fc:	f7ff f80b 	bl	8015316 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	2202      	movs	r2, #2
 8016304:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016308:	e014      	b.n	8016334 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801630a:	6878      	ldr	r0, [r7, #4]
 801630c:	f000 f9d4 	bl	80166b8 <USBD_CtlSendStatus>
      break;
 8016310:	e010      	b.n	8016334 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016312:	6878      	ldr	r0, [r7, #4]
 8016314:	f000 f9d0 	bl	80166b8 <USBD_CtlSendStatus>
      break;
 8016318:	e00c      	b.n	8016334 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801631a:	6839      	ldr	r1, [r7, #0]
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	f000 f900 	bl	8016522 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016322:	4b07      	ldr	r3, [pc, #28]	; (8016340 <USBD_SetConfig+0x150>)
 8016324:	781b      	ldrb	r3, [r3, #0]
 8016326:	4619      	mov	r1, r3
 8016328:	6878      	ldr	r0, [r7, #4]
 801632a:	f7fe fff4 	bl	8015316 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801632e:	2303      	movs	r3, #3
 8016330:	73fb      	strb	r3, [r7, #15]
      break;
 8016332:	bf00      	nop
  }

  return ret;
 8016334:	7bfb      	ldrb	r3, [r7, #15]
}
 8016336:	4618      	mov	r0, r3
 8016338:	3710      	adds	r7, #16
 801633a:	46bd      	mov	sp, r7
 801633c:	bd80      	pop	{r7, pc}
 801633e:	bf00      	nop
 8016340:	20001554 	.word	0x20001554

08016344 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016344:	b580      	push	{r7, lr}
 8016346:	b082      	sub	sp, #8
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
 801634c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	88db      	ldrh	r3, [r3, #6]
 8016352:	2b01      	cmp	r3, #1
 8016354:	d004      	beq.n	8016360 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016356:	6839      	ldr	r1, [r7, #0]
 8016358:	6878      	ldr	r0, [r7, #4]
 801635a:	f000 f8e2 	bl	8016522 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801635e:	e023      	b.n	80163a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016366:	b2db      	uxtb	r3, r3
 8016368:	2b02      	cmp	r3, #2
 801636a:	dc02      	bgt.n	8016372 <USBD_GetConfig+0x2e>
 801636c:	2b00      	cmp	r3, #0
 801636e:	dc03      	bgt.n	8016378 <USBD_GetConfig+0x34>
 8016370:	e015      	b.n	801639e <USBD_GetConfig+0x5a>
 8016372:	2b03      	cmp	r3, #3
 8016374:	d00b      	beq.n	801638e <USBD_GetConfig+0x4a>
 8016376:	e012      	b.n	801639e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	2200      	movs	r2, #0
 801637c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	3308      	adds	r3, #8
 8016382:	2201      	movs	r2, #1
 8016384:	4619      	mov	r1, r3
 8016386:	6878      	ldr	r0, [r7, #4]
 8016388:	f000 f93c 	bl	8016604 <USBD_CtlSendData>
        break;
 801638c:	e00c      	b.n	80163a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	3304      	adds	r3, #4
 8016392:	2201      	movs	r2, #1
 8016394:	4619      	mov	r1, r3
 8016396:	6878      	ldr	r0, [r7, #4]
 8016398:	f000 f934 	bl	8016604 <USBD_CtlSendData>
        break;
 801639c:	e004      	b.n	80163a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801639e:	6839      	ldr	r1, [r7, #0]
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f000 f8be 	bl	8016522 <USBD_CtlError>
        break;
 80163a6:	bf00      	nop
}
 80163a8:	bf00      	nop
 80163aa:	3708      	adds	r7, #8
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bd80      	pop	{r7, pc}

080163b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b082      	sub	sp, #8
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
 80163b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163c0:	b2db      	uxtb	r3, r3
 80163c2:	3b01      	subs	r3, #1
 80163c4:	2b02      	cmp	r3, #2
 80163c6:	d81e      	bhi.n	8016406 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80163c8:	683b      	ldr	r3, [r7, #0]
 80163ca:	88db      	ldrh	r3, [r3, #6]
 80163cc:	2b02      	cmp	r3, #2
 80163ce:	d004      	beq.n	80163da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80163d0:	6839      	ldr	r1, [r7, #0]
 80163d2:	6878      	ldr	r0, [r7, #4]
 80163d4:	f000 f8a5 	bl	8016522 <USBD_CtlError>
        break;
 80163d8:	e01a      	b.n	8016410 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	2201      	movs	r2, #1
 80163de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d005      	beq.n	80163f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	68db      	ldr	r3, [r3, #12]
 80163ee:	f043 0202 	orr.w	r2, r3, #2
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	330c      	adds	r3, #12
 80163fa:	2202      	movs	r2, #2
 80163fc:	4619      	mov	r1, r3
 80163fe:	6878      	ldr	r0, [r7, #4]
 8016400:	f000 f900 	bl	8016604 <USBD_CtlSendData>
      break;
 8016404:	e004      	b.n	8016410 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016406:	6839      	ldr	r1, [r7, #0]
 8016408:	6878      	ldr	r0, [r7, #4]
 801640a:	f000 f88a 	bl	8016522 <USBD_CtlError>
      break;
 801640e:	bf00      	nop
  }
}
 8016410:	bf00      	nop
 8016412:	3708      	adds	r7, #8
 8016414:	46bd      	mov	sp, r7
 8016416:	bd80      	pop	{r7, pc}

08016418 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b082      	sub	sp, #8
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
 8016420:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016422:	683b      	ldr	r3, [r7, #0]
 8016424:	885b      	ldrh	r3, [r3, #2]
 8016426:	2b01      	cmp	r3, #1
 8016428:	d107      	bne.n	801643a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	2201      	movs	r2, #1
 801642e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016432:	6878      	ldr	r0, [r7, #4]
 8016434:	f000 f940 	bl	80166b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016438:	e013      	b.n	8016462 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801643a:	683b      	ldr	r3, [r7, #0]
 801643c:	885b      	ldrh	r3, [r3, #2]
 801643e:	2b02      	cmp	r3, #2
 8016440:	d10b      	bne.n	801645a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8016442:	683b      	ldr	r3, [r7, #0]
 8016444:	889b      	ldrh	r3, [r3, #4]
 8016446:	0a1b      	lsrs	r3, r3, #8
 8016448:	b29b      	uxth	r3, r3
 801644a:	b2da      	uxtb	r2, r3
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	f000 f930 	bl	80166b8 <USBD_CtlSendStatus>
}
 8016458:	e003      	b.n	8016462 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801645a:	6839      	ldr	r1, [r7, #0]
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	f000 f860 	bl	8016522 <USBD_CtlError>
}
 8016462:	bf00      	nop
 8016464:	3708      	adds	r7, #8
 8016466:	46bd      	mov	sp, r7
 8016468:	bd80      	pop	{r7, pc}

0801646a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801646a:	b580      	push	{r7, lr}
 801646c:	b082      	sub	sp, #8
 801646e:	af00      	add	r7, sp, #0
 8016470:	6078      	str	r0, [r7, #4]
 8016472:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801647a:	b2db      	uxtb	r3, r3
 801647c:	3b01      	subs	r3, #1
 801647e:	2b02      	cmp	r3, #2
 8016480:	d80b      	bhi.n	801649a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016482:	683b      	ldr	r3, [r7, #0]
 8016484:	885b      	ldrh	r3, [r3, #2]
 8016486:	2b01      	cmp	r3, #1
 8016488:	d10c      	bne.n	80164a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	2200      	movs	r2, #0
 801648e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016492:	6878      	ldr	r0, [r7, #4]
 8016494:	f000 f910 	bl	80166b8 <USBD_CtlSendStatus>
      }
      break;
 8016498:	e004      	b.n	80164a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801649a:	6839      	ldr	r1, [r7, #0]
 801649c:	6878      	ldr	r0, [r7, #4]
 801649e:	f000 f840 	bl	8016522 <USBD_CtlError>
      break;
 80164a2:	e000      	b.n	80164a6 <USBD_ClrFeature+0x3c>
      break;
 80164a4:	bf00      	nop
  }
}
 80164a6:	bf00      	nop
 80164a8:	3708      	adds	r7, #8
 80164aa:	46bd      	mov	sp, r7
 80164ac:	bd80      	pop	{r7, pc}

080164ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80164ae:	b580      	push	{r7, lr}
 80164b0:	b084      	sub	sp, #16
 80164b2:	af00      	add	r7, sp, #0
 80164b4:	6078      	str	r0, [r7, #4]
 80164b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80164b8:	683b      	ldr	r3, [r7, #0]
 80164ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	781a      	ldrb	r2, [r3, #0]
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	3301      	adds	r3, #1
 80164c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	781a      	ldrb	r2, [r3, #0]
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	3301      	adds	r3, #1
 80164d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80164d8:	68f8      	ldr	r0, [r7, #12]
 80164da:	f7ff fa17 	bl	801590c <SWAPBYTE>
 80164de:	4603      	mov	r3, r0
 80164e0:	461a      	mov	r2, r3
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	3301      	adds	r3, #1
 80164ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	3301      	adds	r3, #1
 80164f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80164f2:	68f8      	ldr	r0, [r7, #12]
 80164f4:	f7ff fa0a 	bl	801590c <SWAPBYTE>
 80164f8:	4603      	mov	r3, r0
 80164fa:	461a      	mov	r2, r3
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	3301      	adds	r3, #1
 8016504:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	3301      	adds	r3, #1
 801650a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801650c:	68f8      	ldr	r0, [r7, #12]
 801650e:	f7ff f9fd 	bl	801590c <SWAPBYTE>
 8016512:	4603      	mov	r3, r0
 8016514:	461a      	mov	r2, r3
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	80da      	strh	r2, [r3, #6]
}
 801651a:	bf00      	nop
 801651c:	3710      	adds	r7, #16
 801651e:	46bd      	mov	sp, r7
 8016520:	bd80      	pop	{r7, pc}

08016522 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016522:	b580      	push	{r7, lr}
 8016524:	b082      	sub	sp, #8
 8016526:	af00      	add	r7, sp, #0
 8016528:	6078      	str	r0, [r7, #4]
 801652a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801652c:	2180      	movs	r1, #128	; 0x80
 801652e:	6878      	ldr	r0, [r7, #4]
 8016530:	f004 f93a 	bl	801a7a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016534:	2100      	movs	r1, #0
 8016536:	6878      	ldr	r0, [r7, #4]
 8016538:	f004 f936 	bl	801a7a8 <USBD_LL_StallEP>
}
 801653c:	bf00      	nop
 801653e:	3708      	adds	r7, #8
 8016540:	46bd      	mov	sp, r7
 8016542:	bd80      	pop	{r7, pc}

08016544 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b086      	sub	sp, #24
 8016548:	af00      	add	r7, sp, #0
 801654a:	60f8      	str	r0, [r7, #12]
 801654c:	60b9      	str	r1, [r7, #8]
 801654e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016550:	2300      	movs	r3, #0
 8016552:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d036      	beq.n	80165c8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801655e:	6938      	ldr	r0, [r7, #16]
 8016560:	f000 f836 	bl	80165d0 <USBD_GetLen>
 8016564:	4603      	mov	r3, r0
 8016566:	3301      	adds	r3, #1
 8016568:	b29b      	uxth	r3, r3
 801656a:	005b      	lsls	r3, r3, #1
 801656c:	b29a      	uxth	r2, r3
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016572:	7dfb      	ldrb	r3, [r7, #23]
 8016574:	68ba      	ldr	r2, [r7, #8]
 8016576:	4413      	add	r3, r2
 8016578:	687a      	ldr	r2, [r7, #4]
 801657a:	7812      	ldrb	r2, [r2, #0]
 801657c:	701a      	strb	r2, [r3, #0]
  idx++;
 801657e:	7dfb      	ldrb	r3, [r7, #23]
 8016580:	3301      	adds	r3, #1
 8016582:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016584:	7dfb      	ldrb	r3, [r7, #23]
 8016586:	68ba      	ldr	r2, [r7, #8]
 8016588:	4413      	add	r3, r2
 801658a:	2203      	movs	r2, #3
 801658c:	701a      	strb	r2, [r3, #0]
  idx++;
 801658e:	7dfb      	ldrb	r3, [r7, #23]
 8016590:	3301      	adds	r3, #1
 8016592:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016594:	e013      	b.n	80165be <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016596:	7dfb      	ldrb	r3, [r7, #23]
 8016598:	68ba      	ldr	r2, [r7, #8]
 801659a:	4413      	add	r3, r2
 801659c:	693a      	ldr	r2, [r7, #16]
 801659e:	7812      	ldrb	r2, [r2, #0]
 80165a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80165a2:	693b      	ldr	r3, [r7, #16]
 80165a4:	3301      	adds	r3, #1
 80165a6:	613b      	str	r3, [r7, #16]
    idx++;
 80165a8:	7dfb      	ldrb	r3, [r7, #23]
 80165aa:	3301      	adds	r3, #1
 80165ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80165ae:	7dfb      	ldrb	r3, [r7, #23]
 80165b0:	68ba      	ldr	r2, [r7, #8]
 80165b2:	4413      	add	r3, r2
 80165b4:	2200      	movs	r2, #0
 80165b6:	701a      	strb	r2, [r3, #0]
    idx++;
 80165b8:	7dfb      	ldrb	r3, [r7, #23]
 80165ba:	3301      	adds	r3, #1
 80165bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80165be:	693b      	ldr	r3, [r7, #16]
 80165c0:	781b      	ldrb	r3, [r3, #0]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d1e7      	bne.n	8016596 <USBD_GetString+0x52>
 80165c6:	e000      	b.n	80165ca <USBD_GetString+0x86>
    return;
 80165c8:	bf00      	nop
  }
}
 80165ca:	3718      	adds	r7, #24
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bd80      	pop	{r7, pc}

080165d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80165d0:	b480      	push	{r7}
 80165d2:	b085      	sub	sp, #20
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80165d8:	2300      	movs	r3, #0
 80165da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80165e0:	e005      	b.n	80165ee <USBD_GetLen+0x1e>
  {
    len++;
 80165e2:	7bfb      	ldrb	r3, [r7, #15]
 80165e4:	3301      	adds	r3, #1
 80165e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80165e8:	68bb      	ldr	r3, [r7, #8]
 80165ea:	3301      	adds	r3, #1
 80165ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80165ee:	68bb      	ldr	r3, [r7, #8]
 80165f0:	781b      	ldrb	r3, [r3, #0]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d1f5      	bne.n	80165e2 <USBD_GetLen+0x12>
  }

  return len;
 80165f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80165f8:	4618      	mov	r0, r3
 80165fa:	3714      	adds	r7, #20
 80165fc:	46bd      	mov	sp, r7
 80165fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016602:	4770      	bx	lr

08016604 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b084      	sub	sp, #16
 8016608:	af00      	add	r7, sp, #0
 801660a:	60f8      	str	r0, [r7, #12]
 801660c:	60b9      	str	r1, [r7, #8]
 801660e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	2202      	movs	r2, #2
 8016614:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	687a      	ldr	r2, [r7, #4]
 801661c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	687a      	ldr	r2, [r7, #4]
 8016622:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	68ba      	ldr	r2, [r7, #8]
 8016628:	2100      	movs	r1, #0
 801662a:	68f8      	ldr	r0, [r7, #12]
 801662c:	f004 f945 	bl	801a8ba <USBD_LL_Transmit>

  return USBD_OK;
 8016630:	2300      	movs	r3, #0
}
 8016632:	4618      	mov	r0, r3
 8016634:	3710      	adds	r7, #16
 8016636:	46bd      	mov	sp, r7
 8016638:	bd80      	pop	{r7, pc}

0801663a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801663a:	b580      	push	{r7, lr}
 801663c:	b084      	sub	sp, #16
 801663e:	af00      	add	r7, sp, #0
 8016640:	60f8      	str	r0, [r7, #12]
 8016642:	60b9      	str	r1, [r7, #8]
 8016644:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	68ba      	ldr	r2, [r7, #8]
 801664a:	2100      	movs	r1, #0
 801664c:	68f8      	ldr	r0, [r7, #12]
 801664e:	f004 f934 	bl	801a8ba <USBD_LL_Transmit>

  return USBD_OK;
 8016652:	2300      	movs	r3, #0
}
 8016654:	4618      	mov	r0, r3
 8016656:	3710      	adds	r7, #16
 8016658:	46bd      	mov	sp, r7
 801665a:	bd80      	pop	{r7, pc}

0801665c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b084      	sub	sp, #16
 8016660:	af00      	add	r7, sp, #0
 8016662:	60f8      	str	r0, [r7, #12]
 8016664:	60b9      	str	r1, [r7, #8]
 8016666:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	2203      	movs	r2, #3
 801666c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	687a      	ldr	r2, [r7, #4]
 8016674:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	687a      	ldr	r2, [r7, #4]
 801667c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	68ba      	ldr	r2, [r7, #8]
 8016684:	2100      	movs	r1, #0
 8016686:	68f8      	ldr	r0, [r7, #12]
 8016688:	f004 f938 	bl	801a8fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801668c:	2300      	movs	r3, #0
}
 801668e:	4618      	mov	r0, r3
 8016690:	3710      	adds	r7, #16
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}

08016696 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016696:	b580      	push	{r7, lr}
 8016698:	b084      	sub	sp, #16
 801669a:	af00      	add	r7, sp, #0
 801669c:	60f8      	str	r0, [r7, #12]
 801669e:	60b9      	str	r1, [r7, #8]
 80166a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	68ba      	ldr	r2, [r7, #8]
 80166a6:	2100      	movs	r1, #0
 80166a8:	68f8      	ldr	r0, [r7, #12]
 80166aa:	f004 f927 	bl	801a8fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80166ae:	2300      	movs	r3, #0
}
 80166b0:	4618      	mov	r0, r3
 80166b2:	3710      	adds	r7, #16
 80166b4:	46bd      	mov	sp, r7
 80166b6:	bd80      	pop	{r7, pc}

080166b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b082      	sub	sp, #8
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	2204      	movs	r2, #4
 80166c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80166c8:	2300      	movs	r3, #0
 80166ca:	2200      	movs	r2, #0
 80166cc:	2100      	movs	r1, #0
 80166ce:	6878      	ldr	r0, [r7, #4]
 80166d0:	f004 f8f3 	bl	801a8ba <USBD_LL_Transmit>

  return USBD_OK;
 80166d4:	2300      	movs	r3, #0
}
 80166d6:	4618      	mov	r0, r3
 80166d8:	3708      	adds	r7, #8
 80166da:	46bd      	mov	sp, r7
 80166dc:	bd80      	pop	{r7, pc}

080166de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80166de:	b580      	push	{r7, lr}
 80166e0:	b082      	sub	sp, #8
 80166e2:	af00      	add	r7, sp, #0
 80166e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	2205      	movs	r2, #5
 80166ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80166ee:	2300      	movs	r3, #0
 80166f0:	2200      	movs	r2, #0
 80166f2:	2100      	movs	r1, #0
 80166f4:	6878      	ldr	r0, [r7, #4]
 80166f6:	f004 f901 	bl	801a8fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80166fa:	2300      	movs	r3, #0
}
 80166fc:	4618      	mov	r0, r3
 80166fe:	3708      	adds	r7, #8
 8016700:	46bd      	mov	sp, r7
 8016702:	bd80      	pop	{r7, pc}

08016704 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b088      	sub	sp, #32
 8016708:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801670a:	2300      	movs	r3, #0
 801670c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801670e:	f107 0308 	add.w	r3, r7, #8
 8016712:	2218      	movs	r2, #24
 8016714:	2100      	movs	r1, #0
 8016716:	4618      	mov	r0, r3
 8016718:	f001 f8d8 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x3f;
 801671c:	233f      	movs	r3, #63	; 0x3f
 801671e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8016720:	2381      	movs	r3, #129	; 0x81
 8016722:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8016724:	1dfb      	adds	r3, r7, #7
 8016726:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8016728:	2301      	movs	r3, #1
 801672a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801672c:	f107 0308 	add.w	r3, r7, #8
 8016730:	2100      	movs	r1, #0
 8016732:	4618      	mov	r0, r3
 8016734:	f001 fb54 	bl	8017de0 <hci_send_req>
 8016738:	4603      	mov	r3, r0
 801673a:	2b00      	cmp	r3, #0
 801673c:	da01      	bge.n	8016742 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 801673e:	23ff      	movs	r3, #255	; 0xff
 8016740:	e000      	b.n	8016744 <aci_gap_set_non_discoverable+0x40>
  return status;
 8016742:	79fb      	ldrb	r3, [r7, #7]
}
 8016744:	4618      	mov	r0, r3
 8016746:	3720      	adds	r7, #32
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}

0801674c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 801674c:	b5b0      	push	{r4, r5, r7, lr}
 801674e:	b0ce      	sub	sp, #312	; 0x138
 8016750:	af00      	add	r7, sp, #0
 8016752:	4605      	mov	r5, r0
 8016754:	460c      	mov	r4, r1
 8016756:	4610      	mov	r0, r2
 8016758:	4619      	mov	r1, r3
 801675a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801675e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8016762:	462a      	mov	r2, r5
 8016764:	701a      	strb	r2, [r3, #0]
 8016766:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801676a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801676e:	4622      	mov	r2, r4
 8016770:	801a      	strh	r2, [r3, #0]
 8016772:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016776:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 801677a:	4602      	mov	r2, r0
 801677c:	801a      	strh	r2, [r3, #0]
 801677e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016782:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8016786:	460a      	mov	r2, r1
 8016788:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 801678a:	f107 0310 	add.w	r3, r7, #16
 801678e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8016792:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8016796:	3308      	adds	r3, #8
 8016798:	f107 0210 	add.w	r2, r7, #16
 801679c:	4413      	add	r3, r2
 801679e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80167a2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80167a6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80167aa:	4413      	add	r3, r2
 80167ac:	3309      	adds	r3, #9
 80167ae:	f107 0210 	add.w	r2, r7, #16
 80167b2:	4413      	add	r3, r2
 80167b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80167b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80167bc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80167c0:	2200      	movs	r2, #0
 80167c2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80167c4:	2300      	movs	r3, #0
 80167c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80167ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80167ce:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80167d2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80167d6:	7812      	ldrb	r2, [r2, #0]
 80167d8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80167da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80167de:	3301      	adds	r3, #1
 80167e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80167e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80167e8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80167ec:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80167f0:	8812      	ldrh	r2, [r2, #0]
 80167f2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80167f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80167fa:	3302      	adds	r3, #2
 80167fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8016800:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016804:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8016808:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 801680c:	8812      	ldrh	r2, [r2, #0]
 801680e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8016812:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016816:	3302      	adds	r3, #2
 8016818:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 801681c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016820:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8016824:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8016828:	7812      	ldrb	r2, [r2, #0]
 801682a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801682c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016830:	3301      	adds	r3, #1
 8016832:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8016836:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801683a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 801683e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8016840:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016844:	3301      	adds	r3, #1
 8016846:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 801684a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801684e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8016852:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8016854:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016858:	3301      	adds	r3, #1
 801685a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 801685e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016862:	3308      	adds	r3, #8
 8016864:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8016868:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 801686c:	4618      	mov	r0, r3
 801686e:	f001 f81d 	bl	80178ac <Osal_MemCpy>
    index_input += Local_Name_Length;
 8016872:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8016876:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801687a:	4413      	add	r3, r2
 801687c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8016880:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016884:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8016888:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 801688a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801688e:	3301      	adds	r3, #1
 8016890:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8016894:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016898:	3301      	adds	r3, #1
 801689a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 801689e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80168a2:	4618      	mov	r0, r3
 80168a4:	f001 f802 	bl	80178ac <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80168a8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80168ac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80168b0:	4413      	add	r3, r2
 80168b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80168b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80168ba:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80168be:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80168c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80168c4:	3302      	adds	r3, #2
 80168c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80168ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80168ce:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80168d2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80168d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80168d8:	3302      	adds	r3, #2
 80168da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80168de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80168e2:	2218      	movs	r2, #24
 80168e4:	2100      	movs	r1, #0
 80168e6:	4618      	mov	r0, r3
 80168e8:	f000 fff0 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x3f;
 80168ec:	233f      	movs	r3, #63	; 0x3f
 80168ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80168f2:	2383      	movs	r3, #131	; 0x83
 80168f4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80168f8:	f107 0310 	add.w	r3, r7, #16
 80168fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8016900:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016904:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8016908:	f107 030f 	add.w	r3, r7, #15
 801690c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8016910:	2301      	movs	r3, #1
 8016912:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016916:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801691a:	2100      	movs	r1, #0
 801691c:	4618      	mov	r0, r3
 801691e:	f001 fa5f 	bl	8017de0 <hci_send_req>
 8016922:	4603      	mov	r3, r0
 8016924:	2b00      	cmp	r3, #0
 8016926:	da01      	bge.n	801692c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8016928:	23ff      	movs	r3, #255	; 0xff
 801692a:	e004      	b.n	8016936 <aci_gap_set_discoverable+0x1ea>
  return status;
 801692c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016930:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8016934:	781b      	ldrb	r3, [r3, #0]
}
 8016936:	4618      	mov	r0, r3
 8016938:	f507 779c 	add.w	r7, r7, #312	; 0x138
 801693c:	46bd      	mov	sp, r7
 801693e:	bdb0      	pop	{r4, r5, r7, pc}

08016940 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b0cc      	sub	sp, #304	; 0x130
 8016944:	af00      	add	r7, sp, #0
 8016946:	4602      	mov	r2, r0
 8016948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801694c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8016950:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8016952:	f107 0310 	add.w	r3, r7, #16
 8016956:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801695a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801695e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8016962:	2200      	movs	r2, #0
 8016964:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016966:	2300      	movs	r3, #0
 8016968:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 801696c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016970:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016974:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8016978:	7812      	ldrb	r2, [r2, #0]
 801697a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801697c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016980:	3301      	adds	r3, #1
 8016982:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016986:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801698a:	2218      	movs	r2, #24
 801698c:	2100      	movs	r1, #0
 801698e:	4618      	mov	r0, r3
 8016990:	f000 ff9c 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8016994:	233f      	movs	r3, #63	; 0x3f
 8016996:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 801699a:	2385      	movs	r3, #133	; 0x85
 801699c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80169a0:	f107 0310 	add.w	r3, r7, #16
 80169a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80169a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80169ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80169b0:	f107 030f 	add.w	r3, r7, #15
 80169b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80169b8:	2301      	movs	r3, #1
 80169ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80169be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80169c2:	2100      	movs	r1, #0
 80169c4:	4618      	mov	r0, r3
 80169c6:	f001 fa0b 	bl	8017de0 <hci_send_req>
 80169ca:	4603      	mov	r3, r0
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	da01      	bge.n	80169d4 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80169d0:	23ff      	movs	r3, #255	; 0xff
 80169d2:	e004      	b.n	80169de <aci_gap_set_io_capability+0x9e>
  return status;
 80169d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80169d8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80169dc:	781b      	ldrb	r3, [r3, #0]
}
 80169de:	4618      	mov	r0, r3
 80169e0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80169e4:	46bd      	mov	sp, r7
 80169e6:	bd80      	pop	{r7, pc}

080169e8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80169e8:	b5b0      	push	{r4, r5, r7, lr}
 80169ea:	b0cc      	sub	sp, #304	; 0x130
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	4605      	mov	r5, r0
 80169f0:	460c      	mov	r4, r1
 80169f2:	4610      	mov	r0, r2
 80169f4:	4619      	mov	r1, r3
 80169f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80169fa:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80169fe:	462a      	mov	r2, r5
 8016a00:	701a      	strb	r2, [r3, #0]
 8016a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016a06:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8016a0a:	4622      	mov	r2, r4
 8016a0c:	701a      	strb	r2, [r3, #0]
 8016a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016a12:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8016a16:	4602      	mov	r2, r0
 8016a18:	701a      	strb	r2, [r3, #0]
 8016a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016a1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016a22:	460a      	mov	r2, r1
 8016a24:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8016a26:	f107 0310 	add.w	r3, r7, #16
 8016a2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8016a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016a32:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8016a36:	2200      	movs	r2, #0
 8016a38:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8016a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016a44:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016a48:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8016a4c:	7812      	ldrb	r2, [r2, #0]
 8016a4e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8016a50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016a54:	3301      	adds	r3, #1
 8016a56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8016a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016a5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016a62:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8016a66:	7812      	ldrb	r2, [r2, #0]
 8016a68:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8016a6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016a6e:	3301      	adds	r3, #1
 8016a70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8016a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016a78:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016a7c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8016a80:	7812      	ldrb	r2, [r2, #0]
 8016a82:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8016a84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016a88:	3301      	adds	r3, #1
 8016a8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8016a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016a92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016a96:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8016a9a:	7812      	ldrb	r2, [r2, #0]
 8016a9c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8016a9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016aa2:	3301      	adds	r3, #1
 8016aa4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8016aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016aac:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8016ab0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8016ab2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016ab6:	3301      	adds	r3, #1
 8016ab8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8016abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016ac0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8016ac4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8016ac6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016aca:	3301      	adds	r3, #1
 8016acc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8016ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016ad4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8016ad8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8016ada:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016ade:	3301      	adds	r3, #1
 8016ae0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8016ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016ae8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8016aec:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8016af0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016af4:	3304      	adds	r3, #4
 8016af6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8016afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016afe:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8016b02:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8016b04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016b08:	3301      	adds	r3, #1
 8016b0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016b0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016b12:	2218      	movs	r2, #24
 8016b14:	2100      	movs	r1, #0
 8016b16:	4618      	mov	r0, r3
 8016b18:	f000 fed8 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8016b1c:	233f      	movs	r3, #63	; 0x3f
 8016b1e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8016b22:	2386      	movs	r3, #134	; 0x86
 8016b24:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8016b28:	f107 0310 	add.w	r3, r7, #16
 8016b2c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8016b30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016b34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8016b38:	f107 030f 	add.w	r3, r7, #15
 8016b3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8016b40:	2301      	movs	r3, #1
 8016b42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016b46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016b4a:	2100      	movs	r1, #0
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	f001 f947 	bl	8017de0 <hci_send_req>
 8016b52:	4603      	mov	r3, r0
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	da01      	bge.n	8016b5c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8016b58:	23ff      	movs	r3, #255	; 0xff
 8016b5a:	e004      	b.n	8016b66 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8016b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016b60:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8016b64:	781b      	ldrb	r3, [r3, #0]
}
 8016b66:	4618      	mov	r0, r3
 8016b68:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8016b6c:	46bd      	mov	sp, r7
 8016b6e:	bdb0      	pop	{r4, r5, r7, pc}

08016b70 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8016b70:	b580      	push	{r7, lr}
 8016b72:	b0cc      	sub	sp, #304	; 0x130
 8016b74:	af00      	add	r7, sp, #0
 8016b76:	4602      	mov	r2, r0
 8016b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016b7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016b80:	6019      	str	r1, [r3, #0]
 8016b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016b86:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8016b8a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8016b8c:	f107 0310 	add.w	r3, r7, #16
 8016b90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8016b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016b98:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8016b9c:	2200      	movs	r2, #0
 8016b9e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8016ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016baa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016bae:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8016bb2:	8812      	ldrh	r2, [r2, #0]
 8016bb4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8016bb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016bba:	3302      	adds	r3, #2
 8016bbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8016bc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016bc4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016bc8:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8016bcc:	6812      	ldr	r2, [r2, #0]
 8016bce:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8016bd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016bd6:	3304      	adds	r3, #4
 8016bd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016bdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016be0:	2218      	movs	r2, #24
 8016be2:	2100      	movs	r1, #0
 8016be4:	4618      	mov	r0, r3
 8016be6:	f000 fe71 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8016bea:	233f      	movs	r3, #63	; 0x3f
 8016bec:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8016bf0:	2388      	movs	r3, #136	; 0x88
 8016bf2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8016bf6:	f107 0310 	add.w	r3, r7, #16
 8016bfa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8016bfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016c02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8016c06:	f107 030f 	add.w	r3, r7, #15
 8016c0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8016c0e:	2301      	movs	r3, #1
 8016c10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016c14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016c18:	2100      	movs	r1, #0
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f001 f8e0 	bl	8017de0 <hci_send_req>
 8016c20:	4603      	mov	r3, r0
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	da01      	bge.n	8016c2a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8016c26:	23ff      	movs	r3, #255	; 0xff
 8016c28:	e004      	b.n	8016c34 <aci_gap_pass_key_resp+0xc4>
  return status;
 8016c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016c2e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8016c32:	781b      	ldrb	r3, [r3, #0]
}
 8016c34:	4618      	mov	r0, r3
 8016c36:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8016c3a:	46bd      	mov	sp, r7
 8016c3c:	bd80      	pop	{r7, pc}

08016c3e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8016c3e:	b590      	push	{r4, r7, lr}
 8016c40:	b0cd      	sub	sp, #308	; 0x134
 8016c42:	af00      	add	r7, sp, #0
 8016c44:	4604      	mov	r4, r0
 8016c46:	4608      	mov	r0, r1
 8016c48:	4611      	mov	r1, r2
 8016c4a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016c4e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8016c52:	6013      	str	r3, [r2, #0]
 8016c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016c58:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8016c5c:	4622      	mov	r2, r4
 8016c5e:	701a      	strb	r2, [r3, #0]
 8016c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016c64:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8016c68:	4602      	mov	r2, r0
 8016c6a:	701a      	strb	r2, [r3, #0]
 8016c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016c70:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8016c74:	460a      	mov	r2, r1
 8016c76:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8016c78:	f107 0310 	add.w	r3, r7, #16
 8016c7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8016c80:	f107 0308 	add.w	r3, r7, #8
 8016c84:	2207      	movs	r2, #7
 8016c86:	2100      	movs	r1, #0
 8016c88:	4618      	mov	r0, r3
 8016c8a:	f000 fe1f 	bl	80178cc <Osal_MemSet>
  int index_input = 0;
 8016c8e:	2300      	movs	r3, #0
 8016c90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8016c94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016c98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016c9c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8016ca0:	7812      	ldrb	r2, [r2, #0]
 8016ca2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8016ca4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016ca8:	3301      	adds	r3, #1
 8016caa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8016cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016cb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016cb6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8016cba:	7812      	ldrb	r2, [r2, #0]
 8016cbc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8016cbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016cc2:	3301      	adds	r3, #1
 8016cc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8016cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016ccc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016cd0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8016cd4:	7812      	ldrb	r2, [r2, #0]
 8016cd6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8016cd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016cdc:	3301      	adds	r3, #1
 8016cde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016ce2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016ce6:	2218      	movs	r2, #24
 8016ce8:	2100      	movs	r1, #0
 8016cea:	4618      	mov	r0, r3
 8016cec:	f000 fdee 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8016cf0:	233f      	movs	r3, #63	; 0x3f
 8016cf2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8016cf6:	238a      	movs	r3, #138	; 0x8a
 8016cf8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8016cfc:	f107 0310 	add.w	r3, r7, #16
 8016d00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8016d04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016d08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8016d0c:	f107 0308 	add.w	r3, r7, #8
 8016d10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8016d14:	2307      	movs	r3, #7
 8016d16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016d1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016d1e:	2100      	movs	r1, #0
 8016d20:	4618      	mov	r0, r3
 8016d22:	f001 f85d 	bl	8017de0 <hci_send_req>
 8016d26:	4603      	mov	r3, r0
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	da01      	bge.n	8016d30 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8016d2c:	23ff      	movs	r3, #255	; 0xff
 8016d2e:	e02e      	b.n	8016d8e <aci_gap_init+0x150>
  if ( resp.Status )
 8016d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016d34:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016d38:	781b      	ldrb	r3, [r3, #0]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d005      	beq.n	8016d4a <aci_gap_init+0x10c>
    return resp.Status;
 8016d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016d42:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016d46:	781b      	ldrb	r3, [r3, #0]
 8016d48:	e021      	b.n	8016d8e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8016d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016d4e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016d52:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8016d56:	b29a      	uxth	r2, r3
 8016d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8016d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016d68:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016d6c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8016d70:	b29a      	uxth	r2, r3
 8016d72:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016d76:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8016d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016d7c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016d80:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8016d84:	b29a      	uxth	r2, r3
 8016d86:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8016d8a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8016d8c:	2300      	movs	r3, #0
}
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8016d94:	46bd      	mov	sp, r7
 8016d96:	bd90      	pop	{r4, r7, pc}

08016d98 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8016d98:	b580      	push	{r7, lr}
 8016d9a:	b0cc      	sub	sp, #304	; 0x130
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	4602      	mov	r2, r0
 8016da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016da4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016da8:	6019      	str	r1, [r3, #0]
 8016daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016dae:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8016db2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8016db4:	f107 0310 	add.w	r3, r7, #16
 8016db8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8016dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016dc0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8016dc4:	2200      	movs	r2, #0
 8016dc6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016dc8:	2300      	movs	r3, #0
 8016dca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8016dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016dd2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016dd6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8016dda:	7812      	ldrb	r2, [r2, #0]
 8016ddc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8016dde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016de2:	3301      	adds	r3, #1
 8016de4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8016de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016dec:	1c58      	adds	r0, r3, #1
 8016dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016df2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8016df6:	781a      	ldrb	r2, [r3, #0]
 8016df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016dfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016e00:	6819      	ldr	r1, [r3, #0]
 8016e02:	f000 fd53 	bl	80178ac <Osal_MemCpy>
  index_input += AdvDataLen;
 8016e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016e0a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8016e0e:	781b      	ldrb	r3, [r3, #0]
 8016e10:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8016e14:	4413      	add	r3, r2
 8016e16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016e1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016e1e:	2218      	movs	r2, #24
 8016e20:	2100      	movs	r1, #0
 8016e22:	4618      	mov	r0, r3
 8016e24:	f000 fd52 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8016e28:	233f      	movs	r3, #63	; 0x3f
 8016e2a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8016e2e:	238e      	movs	r3, #142	; 0x8e
 8016e30:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8016e34:	f107 0310 	add.w	r3, r7, #16
 8016e38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8016e3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016e40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8016e44:	f107 030f 	add.w	r3, r7, #15
 8016e48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8016e4c:	2301      	movs	r3, #1
 8016e4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016e52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016e56:	2100      	movs	r1, #0
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f000 ffc1 	bl	8017de0 <hci_send_req>
 8016e5e:	4603      	mov	r3, r0
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	da01      	bge.n	8016e68 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8016e64:	23ff      	movs	r3, #255	; 0xff
 8016e66:	e004      	b.n	8016e72 <aci_gap_update_adv_data+0xda>
  return status;
 8016e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016e6c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8016e70:	781b      	ldrb	r3, [r3, #0]
}
 8016e72:	4618      	mov	r0, r3
 8016e74:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	bd80      	pop	{r7, pc}

08016e7c <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b088      	sub	sp, #32
 8016e80:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8016e82:	2300      	movs	r3, #0
 8016e84:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016e86:	f107 0308 	add.w	r3, r7, #8
 8016e8a:	2218      	movs	r2, #24
 8016e8c:	2100      	movs	r1, #0
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f000 fd1c 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8016e94:	233f      	movs	r3, #63	; 0x3f
 8016e96:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8016e98:	2392      	movs	r3, #146	; 0x92
 8016e9a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8016e9c:	1dfb      	adds	r3, r7, #7
 8016e9e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8016ea0:	2301      	movs	r3, #1
 8016ea2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016ea4:	f107 0308 	add.w	r3, r7, #8
 8016ea8:	2100      	movs	r1, #0
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f000 ff98 	bl	8017de0 <hci_send_req>
 8016eb0:	4603      	mov	r3, r0
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	da01      	bge.n	8016eba <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8016eb6:	23ff      	movs	r3, #255	; 0xff
 8016eb8:	e000      	b.n	8016ebc <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8016eba:	79fb      	ldrb	r3, [r7, #7]
}
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	3720      	adds	r7, #32
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	bd80      	pop	{r7, pc}

08016ec4 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b0cc      	sub	sp, #304	; 0x130
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	4602      	mov	r2, r0
 8016ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016ed0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8016ed4:	801a      	strh	r2, [r3, #0]
 8016ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016eda:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8016ede:	460a      	mov	r2, r1
 8016ee0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8016ee2:	f107 0310 	add.w	r3, r7, #16
 8016ee6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8016eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016eee:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8016efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016f00:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016f04:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8016f08:	8812      	ldrh	r2, [r2, #0]
 8016f0a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8016f0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016f10:	3302      	adds	r3, #2
 8016f12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8016f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016f1a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016f1e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8016f22:	7812      	ldrb	r2, [r2, #0]
 8016f24:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8016f26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016f2a:	3301      	adds	r3, #1
 8016f2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016f30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016f34:	2218      	movs	r2, #24
 8016f36:	2100      	movs	r1, #0
 8016f38:	4618      	mov	r0, r3
 8016f3a:	f000 fcc7 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8016f3e:	233f      	movs	r3, #63	; 0x3f
 8016f40:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8016f44:	23a5      	movs	r3, #165	; 0xa5
 8016f46:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8016f4a:	f107 0310 	add.w	r3, r7, #16
 8016f4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8016f52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016f56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8016f5a:	f107 030f 	add.w	r3, r7, #15
 8016f5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8016f62:	2301      	movs	r3, #1
 8016f64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016f68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016f6c:	2100      	movs	r1, #0
 8016f6e:	4618      	mov	r0, r3
 8016f70:	f000 ff36 	bl	8017de0 <hci_send_req>
 8016f74:	4603      	mov	r3, r0
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	da01      	bge.n	8016f7e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8016f7a:	23ff      	movs	r3, #255	; 0xff
 8016f7c:	e004      	b.n	8016f88 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8016f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016f82:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8016f86:	781b      	ldrb	r3, [r3, #0]
}
 8016f88:	4618      	mov	r0, r3
 8016f8a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bd80      	pop	{r7, pc}

08016f92 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8016f92:	b580      	push	{r7, lr}
 8016f94:	b088      	sub	sp, #32
 8016f96:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8016f98:	2300      	movs	r3, #0
 8016f9a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016f9c:	f107 0308 	add.w	r3, r7, #8
 8016fa0:	2218      	movs	r2, #24
 8016fa2:	2100      	movs	r1, #0
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	f000 fc91 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8016faa:	233f      	movs	r3, #63	; 0x3f
 8016fac:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8016fae:	f240 1301 	movw	r3, #257	; 0x101
 8016fb2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8016fb4:	1dfb      	adds	r3, r7, #7
 8016fb6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8016fb8:	2301      	movs	r3, #1
 8016fba:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016fbc:	f107 0308 	add.w	r3, r7, #8
 8016fc0:	2100      	movs	r1, #0
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	f000 ff0c 	bl	8017de0 <hci_send_req>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	da01      	bge.n	8016fd2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8016fce:	23ff      	movs	r3, #255	; 0xff
 8016fd0:	e000      	b.n	8016fd4 <aci_gatt_init+0x42>
  return status;
 8016fd2:	79fb      	ldrb	r3, [r7, #7]
}
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	3720      	adds	r7, #32
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd80      	pop	{r7, pc}

08016fdc <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8016fdc:	b590      	push	{r4, r7, lr}
 8016fde:	b0cf      	sub	sp, #316	; 0x13c
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	4604      	mov	r4, r0
 8016fe4:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8016fe8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8016fec:	6001      	str	r1, [r0, #0]
 8016fee:	4610      	mov	r0, r2
 8016ff0:	4619      	mov	r1, r3
 8016ff2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016ff6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8016ffa:	4622      	mov	r2, r4
 8016ffc:	701a      	strb	r2, [r3, #0]
 8016ffe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8017002:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8017006:	4602      	mov	r2, r0
 8017008:	701a      	strb	r2, [r3, #0]
 801700a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801700e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8017012:	460a      	mov	r2, r1
 8017014:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8017016:	f107 0310 	add.w	r3, r7, #16
 801701a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 801701e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8017022:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8017026:	781b      	ldrb	r3, [r3, #0]
 8017028:	2b01      	cmp	r3, #1
 801702a:	d00a      	beq.n	8017042 <aci_gatt_add_service+0x66>
 801702c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8017030:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8017034:	781b      	ldrb	r3, [r3, #0]
 8017036:	2b02      	cmp	r3, #2
 8017038:	d101      	bne.n	801703e <aci_gatt_add_service+0x62>
 801703a:	2311      	movs	r3, #17
 801703c:	e002      	b.n	8017044 <aci_gatt_add_service+0x68>
 801703e:	2301      	movs	r3, #1
 8017040:	e000      	b.n	8017044 <aci_gatt_add_service+0x68>
 8017042:	2303      	movs	r3, #3
 8017044:	f107 0210 	add.w	r2, r7, #16
 8017048:	4413      	add	r3, r2
 801704a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801704e:	f107 030c 	add.w	r3, r7, #12
 8017052:	2203      	movs	r2, #3
 8017054:	2100      	movs	r1, #0
 8017056:	4618      	mov	r0, r3
 8017058:	f000 fc38 	bl	80178cc <Osal_MemSet>
  int index_input = 0;
 801705c:	2300      	movs	r3, #0
 801705e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8017062:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017066:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801706a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 801706e:	7812      	ldrb	r2, [r2, #0]
 8017070:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8017072:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017076:	3301      	adds	r3, #1
 8017078:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 801707c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8017080:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8017084:	781b      	ldrb	r3, [r3, #0]
 8017086:	2b01      	cmp	r3, #1
 8017088:	d002      	beq.n	8017090 <aci_gatt_add_service+0xb4>
 801708a:	2b02      	cmp	r3, #2
 801708c:	d004      	beq.n	8017098 <aci_gatt_add_service+0xbc>
 801708e:	e007      	b.n	80170a0 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8017090:	2302      	movs	r3, #2
 8017092:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8017096:	e005      	b.n	80170a4 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8017098:	2310      	movs	r3, #16
 801709a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 801709e:	e001      	b.n	80170a4 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80170a0:	2397      	movs	r3, #151	; 0x97
 80170a2:	e06c      	b.n	801717e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80170a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80170a8:	1c58      	adds	r0, r3, #1
 80170aa:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80170ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80170b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80170b6:	6819      	ldr	r1, [r3, #0]
 80170b8:	f000 fbf8 	bl	80178ac <Osal_MemCpy>
    index_input += size;
 80170bc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80170c0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80170c4:	4413      	add	r3, r2
 80170c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80170ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80170ce:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80170d2:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80170d6:	7812      	ldrb	r2, [r2, #0]
 80170d8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80170da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80170de:	3301      	adds	r3, #1
 80170e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80170e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80170e8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80170ec:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80170f0:	7812      	ldrb	r2, [r2, #0]
 80170f2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80170f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80170f8:	3301      	adds	r3, #1
 80170fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80170fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017102:	2218      	movs	r2, #24
 8017104:	2100      	movs	r1, #0
 8017106:	4618      	mov	r0, r3
 8017108:	f000 fbe0 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x3f;
 801710c:	233f      	movs	r3, #63	; 0x3f
 801710e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8017112:	f44f 7381 	mov.w	r3, #258	; 0x102
 8017116:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801711a:	f107 0310 	add.w	r3, r7, #16
 801711e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8017122:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017126:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 801712a:	f107 030c 	add.w	r3, r7, #12
 801712e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8017132:	2303      	movs	r3, #3
 8017134:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8017138:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801713c:	2100      	movs	r1, #0
 801713e:	4618      	mov	r0, r3
 8017140:	f000 fe4e 	bl	8017de0 <hci_send_req>
 8017144:	4603      	mov	r3, r0
 8017146:	2b00      	cmp	r3, #0
 8017148:	da01      	bge.n	801714e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 801714a:	23ff      	movs	r3, #255	; 0xff
 801714c:	e017      	b.n	801717e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 801714e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8017152:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8017156:	781b      	ldrb	r3, [r3, #0]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d005      	beq.n	8017168 <aci_gatt_add_service+0x18c>
    return resp.Status;
 801715c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8017160:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8017164:	781b      	ldrb	r3, [r3, #0]
 8017166:	e00a      	b.n	801717e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8017168:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801716c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8017170:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017174:	b29a      	uxth	r2, r3
 8017176:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801717a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 801717c:	2300      	movs	r3, #0
}
 801717e:	4618      	mov	r0, r3
 8017180:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8017184:	46bd      	mov	sp, r7
 8017186:	bd90      	pop	{r4, r7, pc}

08017188 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8017188:	b590      	push	{r4, r7, lr}
 801718a:	b0d1      	sub	sp, #324	; 0x144
 801718c:	af00      	add	r7, sp, #0
 801718e:	4604      	mov	r4, r0
 8017190:	4608      	mov	r0, r1
 8017192:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8017196:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 801719a:	600a      	str	r2, [r1, #0]
 801719c:	4619      	mov	r1, r3
 801719e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80171a2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80171a6:	4622      	mov	r2, r4
 80171a8:	801a      	strh	r2, [r3, #0]
 80171aa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80171ae:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80171b2:	4602      	mov	r2, r0
 80171b4:	701a      	strb	r2, [r3, #0]
 80171b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80171ba:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 80171be:	460a      	mov	r2, r1
 80171c0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80171c2:	f107 0318 	add.w	r3, r7, #24
 80171c6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80171ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80171ce:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80171d2:	781b      	ldrb	r3, [r3, #0]
 80171d4:	2b01      	cmp	r3, #1
 80171d6:	d00a      	beq.n	80171ee <aci_gatt_add_char+0x66>
 80171d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80171dc:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80171e0:	781b      	ldrb	r3, [r3, #0]
 80171e2:	2b02      	cmp	r3, #2
 80171e4:	d101      	bne.n	80171ea <aci_gatt_add_char+0x62>
 80171e6:	2313      	movs	r3, #19
 80171e8:	e002      	b.n	80171f0 <aci_gatt_add_char+0x68>
 80171ea:	2303      	movs	r3, #3
 80171ec:	e000      	b.n	80171f0 <aci_gatt_add_char+0x68>
 80171ee:	2305      	movs	r3, #5
 80171f0:	f107 0218 	add.w	r2, r7, #24
 80171f4:	4413      	add	r3, r2
 80171f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80171fa:	f107 0314 	add.w	r3, r7, #20
 80171fe:	2203      	movs	r2, #3
 8017200:	2100      	movs	r1, #0
 8017202:	4618      	mov	r0, r3
 8017204:	f000 fb62 	bl	80178cc <Osal_MemSet>
  int index_input = 0;
 8017208:	2300      	movs	r3, #0
 801720a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 801720e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017212:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8017216:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 801721a:	8812      	ldrh	r2, [r2, #0]
 801721c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801721e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017222:	3302      	adds	r3, #2
 8017224:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8017228:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801722c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8017230:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8017234:	7812      	ldrb	r2, [r2, #0]
 8017236:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8017238:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801723c:	3301      	adds	r3, #1
 801723e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8017242:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8017246:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 801724a:	781b      	ldrb	r3, [r3, #0]
 801724c:	2b01      	cmp	r3, #1
 801724e:	d002      	beq.n	8017256 <aci_gatt_add_char+0xce>
 8017250:	2b02      	cmp	r3, #2
 8017252:	d004      	beq.n	801725e <aci_gatt_add_char+0xd6>
 8017254:	e007      	b.n	8017266 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8017256:	2302      	movs	r3, #2
 8017258:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 801725c:	e005      	b.n	801726a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 801725e:	2310      	movs	r3, #16
 8017260:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8017264:	e001      	b.n	801726a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8017266:	2397      	movs	r3, #151	; 0x97
 8017268:	e091      	b.n	801738e <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 801726a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801726e:	1cd8      	adds	r0, r3, #3
 8017270:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8017274:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8017278:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801727c:	6819      	ldr	r1, [r3, #0]
 801727e:	f000 fb15 	bl	80178ac <Osal_MemCpy>
    index_input += size;
 8017282:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8017286:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801728a:	4413      	add	r3, r2
 801728c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8017290:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8017294:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8017298:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 801729c:	8812      	ldrh	r2, [r2, #0]
 801729e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80172a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80172a4:	3302      	adds	r3, #2
 80172a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80172aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80172ae:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80172b2:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80172b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80172b8:	3301      	adds	r3, #1
 80172ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80172be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80172c2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80172c6:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80172c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80172cc:	3301      	adds	r3, #1
 80172ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80172d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80172d6:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80172da:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80172dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80172e0:	3301      	adds	r3, #1
 80172e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80172e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80172ea:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80172ee:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80172f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80172f4:	3301      	adds	r3, #1
 80172f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80172fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80172fe:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8017302:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8017304:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017308:	3301      	adds	r3, #1
 801730a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801730e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8017312:	2218      	movs	r2, #24
 8017314:	2100      	movs	r1, #0
 8017316:	4618      	mov	r0, r3
 8017318:	f000 fad8 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x3f;
 801731c:	233f      	movs	r3, #63	; 0x3f
 801731e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8017322:	f44f 7382 	mov.w	r3, #260	; 0x104
 8017326:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 801732a:	f107 0318 	add.w	r3, r7, #24
 801732e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8017332:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017336:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 801733a:	f107 0314 	add.w	r3, r7, #20
 801733e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8017342:	2303      	movs	r3, #3
 8017344:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8017348:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801734c:	2100      	movs	r1, #0
 801734e:	4618      	mov	r0, r3
 8017350:	f000 fd46 	bl	8017de0 <hci_send_req>
 8017354:	4603      	mov	r3, r0
 8017356:	2b00      	cmp	r3, #0
 8017358:	da01      	bge.n	801735e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 801735a:	23ff      	movs	r3, #255	; 0xff
 801735c:	e017      	b.n	801738e <aci_gatt_add_char+0x206>
  if ( resp.Status )
 801735e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8017362:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8017366:	781b      	ldrb	r3, [r3, #0]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d005      	beq.n	8017378 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 801736c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8017370:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8017374:	781b      	ldrb	r3, [r3, #0]
 8017376:	e00a      	b.n	801738e <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8017378:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801737c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8017380:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017384:	b29a      	uxth	r2, r3
 8017386:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801738a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 801738c:	2300      	movs	r3, #0
}
 801738e:	4618      	mov	r0, r3
 8017390:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8017394:	46bd      	mov	sp, r7
 8017396:	bd90      	pop	{r4, r7, pc}

08017398 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8017398:	b5b0      	push	{r4, r5, r7, lr}
 801739a:	b0cc      	sub	sp, #304	; 0x130
 801739c:	af00      	add	r7, sp, #0
 801739e:	4605      	mov	r5, r0
 80173a0:	460c      	mov	r4, r1
 80173a2:	4610      	mov	r0, r2
 80173a4:	4619      	mov	r1, r3
 80173a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80173aa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80173ae:	462a      	mov	r2, r5
 80173b0:	801a      	strh	r2, [r3, #0]
 80173b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80173b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80173ba:	4622      	mov	r2, r4
 80173bc:	801a      	strh	r2, [r3, #0]
 80173be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80173c2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80173c6:	4602      	mov	r2, r0
 80173c8:	701a      	strb	r2, [r3, #0]
 80173ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80173ce:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80173d2:	460a      	mov	r2, r1
 80173d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80173d6:	f107 0310 	add.w	r3, r7, #16
 80173da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80173de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80173e2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80173e6:	2200      	movs	r2, #0
 80173e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80173ea:	2300      	movs	r3, #0
 80173ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80173f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80173f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80173f8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80173fc:	8812      	ldrh	r2, [r2, #0]
 80173fe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8017400:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017404:	3302      	adds	r3, #2
 8017406:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 801740a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801740e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8017412:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8017416:	8812      	ldrh	r2, [r2, #0]
 8017418:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 801741a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801741e:	3302      	adds	r3, #2
 8017420:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8017424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017428:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801742c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8017430:	7812      	ldrb	r2, [r2, #0]
 8017432:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8017434:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017438:	3301      	adds	r3, #1
 801743a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 801743e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017442:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8017446:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 801744a:	7812      	ldrb	r2, [r2, #0]
 801744c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801744e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017452:	3301      	adds	r3, #1
 8017454:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8017458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801745c:	1d98      	adds	r0, r3, #6
 801745e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8017462:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8017466:	781b      	ldrb	r3, [r3, #0]
 8017468:	461a      	mov	r2, r3
 801746a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 801746e:	f000 fa1d 	bl	80178ac <Osal_MemCpy>
  index_input += Char_Value_Length;
 8017472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8017476:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 801747a:	781b      	ldrb	r3, [r3, #0]
 801747c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8017480:	4413      	add	r3, r2
 8017482:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8017486:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801748a:	2218      	movs	r2, #24
 801748c:	2100      	movs	r1, #0
 801748e:	4618      	mov	r0, r3
 8017490:	f000 fa1c 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8017494:	233f      	movs	r3, #63	; 0x3f
 8017496:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 801749a:	f44f 7383 	mov.w	r3, #262	; 0x106
 801749e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80174a2:	f107 0310 	add.w	r3, r7, #16
 80174a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80174aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80174ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80174b2:	f107 030f 	add.w	r3, r7, #15
 80174b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80174ba:	2301      	movs	r3, #1
 80174bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80174c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80174c4:	2100      	movs	r1, #0
 80174c6:	4618      	mov	r0, r3
 80174c8:	f000 fc8a 	bl	8017de0 <hci_send_req>
 80174cc:	4603      	mov	r3, r0
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	da01      	bge.n	80174d6 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80174d2:	23ff      	movs	r3, #255	; 0xff
 80174d4:	e004      	b.n	80174e0 <aci_gatt_update_char_value+0x148>
  return status;
 80174d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80174da:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80174de:	781b      	ldrb	r3, [r3, #0]
}
 80174e0:	4618      	mov	r0, r3
 80174e2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bdb0      	pop	{r4, r5, r7, pc}

080174ea <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80174ea:	b580      	push	{r7, lr}
 80174ec:	b0cc      	sub	sp, #304	; 0x130
 80174ee:	af00      	add	r7, sp, #0
 80174f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80174f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80174f8:	601a      	str	r2, [r3, #0]
 80174fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80174fe:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8017502:	4602      	mov	r2, r0
 8017504:	701a      	strb	r2, [r3, #0]
 8017506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801750a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801750e:	460a      	mov	r2, r1
 8017510:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8017512:	f107 0310 	add.w	r3, r7, #16
 8017516:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801751a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801751e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8017522:	2200      	movs	r2, #0
 8017524:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8017526:	2300      	movs	r3, #0
 8017528:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 801752c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017530:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8017534:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8017538:	7812      	ldrb	r2, [r2, #0]
 801753a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801753c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017540:	3301      	adds	r3, #1
 8017542:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8017546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801754a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801754e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8017552:	7812      	ldrb	r2, [r2, #0]
 8017554:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8017556:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801755a:	3301      	adds	r3, #1
 801755c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8017560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017564:	1c98      	adds	r0, r3, #2
 8017566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801756a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801756e:	781a      	ldrb	r2, [r3, #0]
 8017570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8017574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017578:	6819      	ldr	r1, [r3, #0]
 801757a:	f000 f997 	bl	80178ac <Osal_MemCpy>
  index_input += Length;
 801757e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8017582:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8017586:	781b      	ldrb	r3, [r3, #0]
 8017588:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801758c:	4413      	add	r3, r2
 801758e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8017592:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017596:	2218      	movs	r2, #24
 8017598:	2100      	movs	r1, #0
 801759a:	4618      	mov	r0, r3
 801759c:	f000 f996 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x3f;
 80175a0:	233f      	movs	r3, #63	; 0x3f
 80175a2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80175a6:	230c      	movs	r3, #12
 80175a8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80175ac:	f107 0310 	add.w	r3, r7, #16
 80175b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80175b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80175b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80175bc:	f107 030f 	add.w	r3, r7, #15
 80175c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80175c4:	2301      	movs	r3, #1
 80175c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80175ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80175ce:	2100      	movs	r1, #0
 80175d0:	4618      	mov	r0, r3
 80175d2:	f000 fc05 	bl	8017de0 <hci_send_req>
 80175d6:	4603      	mov	r3, r0
 80175d8:	2b00      	cmp	r3, #0
 80175da:	da01      	bge.n	80175e0 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80175dc:	23ff      	movs	r3, #255	; 0xff
 80175de:	e004      	b.n	80175ea <aci_hal_write_config_data+0x100>
  return status;
 80175e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80175e4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80175e8:	781b      	ldrb	r3, [r3, #0]
}
 80175ea:	4618      	mov	r0, r3
 80175ec:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80175f0:	46bd      	mov	sp, r7
 80175f2:	bd80      	pop	{r7, pc}

080175f4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80175f4:	b580      	push	{r7, lr}
 80175f6:	b0cc      	sub	sp, #304	; 0x130
 80175f8:	af00      	add	r7, sp, #0
 80175fa:	4602      	mov	r2, r0
 80175fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8017600:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8017604:	701a      	strb	r2, [r3, #0]
 8017606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801760a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801760e:	460a      	mov	r2, r1
 8017610:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8017612:	f107 0310 	add.w	r3, r7, #16
 8017616:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801761a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801761e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8017622:	2200      	movs	r2, #0
 8017624:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8017626:	2300      	movs	r3, #0
 8017628:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 801762c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017630:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8017634:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8017638:	7812      	ldrb	r2, [r2, #0]
 801763a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801763c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017640:	3301      	adds	r3, #1
 8017642:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8017646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801764a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801764e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8017652:	7812      	ldrb	r2, [r2, #0]
 8017654:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8017656:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801765a:	3301      	adds	r3, #1
 801765c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8017660:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017664:	2218      	movs	r2, #24
 8017666:	2100      	movs	r1, #0
 8017668:	4618      	mov	r0, r3
 801766a:	f000 f92f 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x3f;
 801766e:	233f      	movs	r3, #63	; 0x3f
 8017670:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8017674:	230f      	movs	r3, #15
 8017676:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801767a:	f107 0310 	add.w	r3, r7, #16
 801767e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8017682:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017686:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801768a:	f107 030f 	add.w	r3, r7, #15
 801768e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8017692:	2301      	movs	r3, #1
 8017694:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8017698:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801769c:	2100      	movs	r1, #0
 801769e:	4618      	mov	r0, r3
 80176a0:	f000 fb9e 	bl	8017de0 <hci_send_req>
 80176a4:	4603      	mov	r3, r0
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	da01      	bge.n	80176ae <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80176aa:	23ff      	movs	r3, #255	; 0xff
 80176ac:	e004      	b.n	80176b8 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80176ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80176b2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80176b6:	781b      	ldrb	r3, [r3, #0]
}
 80176b8:	4618      	mov	r0, r3
 80176ba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80176be:	46bd      	mov	sp, r7
 80176c0:	bd80      	pop	{r7, pc}

080176c2 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80176c2:	b580      	push	{r7, lr}
 80176c4:	b0cc      	sub	sp, #304	; 0x130
 80176c6:	af00      	add	r7, sp, #0
 80176c8:	4602      	mov	r2, r0
 80176ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80176ce:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80176d2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80176d4:	f107 0310 	add.w	r3, r7, #16
 80176d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80176dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80176e0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80176e4:	2200      	movs	r2, #0
 80176e6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80176e8:	2300      	movs	r3, #0
 80176ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80176ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80176f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80176f6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80176fa:	8812      	ldrh	r2, [r2, #0]
 80176fc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80176fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017702:	3302      	adds	r3, #2
 8017704:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8017708:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801770c:	2218      	movs	r2, #24
 801770e:	2100      	movs	r1, #0
 8017710:	4618      	mov	r0, r3
 8017712:	f000 f8db 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8017716:	233f      	movs	r3, #63	; 0x3f
 8017718:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 801771c:	2318      	movs	r3, #24
 801771e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8017722:	f107 0310 	add.w	r3, r7, #16
 8017726:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801772a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801772e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8017732:	f107 030f 	add.w	r3, r7, #15
 8017736:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801773a:	2301      	movs	r3, #1
 801773c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8017740:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017744:	2100      	movs	r1, #0
 8017746:	4618      	mov	r0, r3
 8017748:	f000 fb4a 	bl	8017de0 <hci_send_req>
 801774c:	4603      	mov	r3, r0
 801774e:	2b00      	cmp	r3, #0
 8017750:	da01      	bge.n	8017756 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8017752:	23ff      	movs	r3, #255	; 0xff
 8017754:	e004      	b.n	8017760 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8017756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801775a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801775e:	781b      	ldrb	r3, [r3, #0]
}
 8017760:	4618      	mov	r0, r3
 8017762:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8017766:	46bd      	mov	sp, r7
 8017768:	bd80      	pop	{r7, pc}

0801776a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 801776a:	b580      	push	{r7, lr}
 801776c:	b088      	sub	sp, #32
 801776e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8017770:	2300      	movs	r3, #0
 8017772:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8017774:	f107 0308 	add.w	r3, r7, #8
 8017778:	2218      	movs	r2, #24
 801777a:	2100      	movs	r1, #0
 801777c:	4618      	mov	r0, r3
 801777e:	f000 f8a5 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x03;
 8017782:	2303      	movs	r3, #3
 8017784:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8017786:	2303      	movs	r3, #3
 8017788:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801778a:	1dfb      	adds	r3, r7, #7
 801778c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801778e:	2301      	movs	r3, #1
 8017790:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8017792:	f107 0308 	add.w	r3, r7, #8
 8017796:	2100      	movs	r1, #0
 8017798:	4618      	mov	r0, r3
 801779a:	f000 fb21 	bl	8017de0 <hci_send_req>
 801779e:	4603      	mov	r3, r0
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	da01      	bge.n	80177a8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80177a4:	23ff      	movs	r3, #255	; 0xff
 80177a6:	e000      	b.n	80177aa <hci_reset+0x40>
  return status;
 80177a8:	79fb      	ldrb	r3, [r7, #7]
}
 80177aa:	4618      	mov	r0, r3
 80177ac:	3720      	adds	r7, #32
 80177ae:	46bd      	mov	sp, r7
 80177b0:	bd80      	pop	{r7, pc}

080177b2 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80177b2:	b590      	push	{r4, r7, lr}
 80177b4:	b0cd      	sub	sp, #308	; 0x134
 80177b6:	af00      	add	r7, sp, #0
 80177b8:	4604      	mov	r4, r0
 80177ba:	4608      	mov	r0, r1
 80177bc:	4611      	mov	r1, r2
 80177be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80177c2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80177c6:	4622      	mov	r2, r4
 80177c8:	701a      	strb	r2, [r3, #0]
 80177ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80177ce:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80177d2:	4602      	mov	r2, r0
 80177d4:	701a      	strb	r2, [r3, #0]
 80177d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80177da:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80177de:	460a      	mov	r2, r1
 80177e0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80177e2:	f107 0310 	add.w	r3, r7, #16
 80177e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80177ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80177ee:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80177f2:	2200      	movs	r2, #0
 80177f4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80177f6:	2300      	movs	r3, #0
 80177f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80177fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017800:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8017804:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8017808:	7812      	ldrb	r2, [r2, #0]
 801780a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801780c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017810:	3301      	adds	r3, #1
 8017812:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8017816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801781a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801781e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8017822:	7812      	ldrb	r2, [r2, #0]
 8017824:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8017826:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801782a:	3301      	adds	r3, #1
 801782c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8017830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017834:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8017838:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 801783c:	7812      	ldrb	r2, [r2, #0]
 801783e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8017840:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017844:	3301      	adds	r3, #1
 8017846:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801784a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801784e:	2218      	movs	r2, #24
 8017850:	2100      	movs	r1, #0
 8017852:	4618      	mov	r0, r3
 8017854:	f000 f83a 	bl	80178cc <Osal_MemSet>
  rq.ogf = 0x08;
 8017858:	2308      	movs	r3, #8
 801785a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 801785e:	2331      	movs	r3, #49	; 0x31
 8017860:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8017864:	f107 0310 	add.w	r3, r7, #16
 8017868:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801786c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017870:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8017874:	f107 030f 	add.w	r3, r7, #15
 8017878:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801787c:	2301      	movs	r3, #1
 801787e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8017882:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017886:	2100      	movs	r1, #0
 8017888:	4618      	mov	r0, r3
 801788a:	f000 faa9 	bl	8017de0 <hci_send_req>
 801788e:	4603      	mov	r3, r0
 8017890:	2b00      	cmp	r3, #0
 8017892:	da01      	bge.n	8017898 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8017894:	23ff      	movs	r3, #255	; 0xff
 8017896:	e004      	b.n	80178a2 <hci_le_set_default_phy+0xf0>
  return status;
 8017898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801789c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80178a0:	781b      	ldrb	r3, [r3, #0]
}
 80178a2:	4618      	mov	r0, r3
 80178a4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80178a8:	46bd      	mov	sp, r7
 80178aa:	bd90      	pop	{r4, r7, pc}

080178ac <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b084      	sub	sp, #16
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	60f8      	str	r0, [r7, #12]
 80178b4:	60b9      	str	r1, [r7, #8]
 80178b6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80178b8:	687a      	ldr	r2, [r7, #4]
 80178ba:	68b9      	ldr	r1, [r7, #8]
 80178bc:	68f8      	ldr	r0, [r7, #12]
 80178be:	f005 fc04 	bl	801d0ca <memcpy>
 80178c2:	4603      	mov	r3, r0
}
 80178c4:	4618      	mov	r0, r3
 80178c6:	3710      	adds	r7, #16
 80178c8:	46bd      	mov	sp, r7
 80178ca:	bd80      	pop	{r7, pc}

080178cc <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b084      	sub	sp, #16
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	60f8      	str	r0, [r7, #12]
 80178d4:	60b9      	str	r1, [r7, #8]
 80178d6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80178d8:	687a      	ldr	r2, [r7, #4]
 80178da:	68b9      	ldr	r1, [r7, #8]
 80178dc:	68f8      	ldr	r0, [r7, #12]
 80178de:	f005 fad8 	bl	801ce92 <memset>
 80178e2:	4603      	mov	r3, r0
}
 80178e4:	4618      	mov	r0, r3
 80178e6:	3710      	adds	r7, #16
 80178e8:	46bd      	mov	sp, r7
 80178ea:	bd80      	pop	{r7, pc}

080178ec <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80178ec:	b480      	push	{r7}
 80178ee:	af00      	add	r7, sp, #0
  return;
 80178f0:	bf00      	nop
}
 80178f2:	46bd      	mov	sp, r7
 80178f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f8:	4770      	bx	lr

080178fa <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80178fa:	b480      	push	{r7}
 80178fc:	af00      	add	r7, sp, #0
  return;
 80178fe:	bf00      	nop
}
 8017900:	46bd      	mov	sp, r7
 8017902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017906:	4770      	bx	lr

08017908 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8017908:	b480      	push	{r7}
 801790a:	af00      	add	r7, sp, #0
  return;
 801790c:	bf00      	nop
}
 801790e:	46bd      	mov	sp, r7
 8017910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017914:	4770      	bx	lr

08017916 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8017916:	b480      	push	{r7}
 8017918:	af00      	add	r7, sp, #0
  return;
 801791a:	bf00      	nop
}
 801791c:	46bd      	mov	sp, r7
 801791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017922:	4770      	bx	lr

08017924 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8017924:	b480      	push	{r7}
 8017926:	af00      	add	r7, sp, #0
  return;
 8017928:	bf00      	nop
}
 801792a:	46bd      	mov	sp, r7
 801792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017930:	4770      	bx	lr

08017932 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8017932:	b480      	push	{r7}
 8017934:	af00      	add	r7, sp, #0
  return;
 8017936:	bf00      	nop
}
 8017938:	46bd      	mov	sp, r7
 801793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793e:	4770      	bx	lr

08017940 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8017940:	b480      	push	{r7}
 8017942:	af00      	add	r7, sp, #0
  return;
 8017944:	bf00      	nop
}
 8017946:	46bd      	mov	sp, r7
 8017948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801794c:	4770      	bx	lr

0801794e <HTS_Init>:
__WEAK void HTS_Init( void )
{
 801794e:	b480      	push	{r7}
 8017950:	af00      	add	r7, sp, #0
  return;
 8017952:	bf00      	nop
}
 8017954:	46bd      	mov	sp, r7
 8017956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801795a:	4770      	bx	lr

0801795c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 801795c:	b480      	push	{r7}
 801795e:	af00      	add	r7, sp, #0
  return;
 8017960:	bf00      	nop
}
 8017962:	46bd      	mov	sp, r7
 8017964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017968:	4770      	bx	lr

0801796a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 801796a:	b480      	push	{r7}
 801796c:	af00      	add	r7, sp, #0
  return;
 801796e:	bf00      	nop
}
 8017970:	46bd      	mov	sp, r7
 8017972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017976:	4770      	bx	lr

08017978 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8017978:	b480      	push	{r7}
 801797a:	af00      	add	r7, sp, #0
  return;
 801797c:	bf00      	nop
}
 801797e:	46bd      	mov	sp, r7
 8017980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017984:	4770      	bx	lr

08017986 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8017986:	b480      	push	{r7}
 8017988:	af00      	add	r7, sp, #0
  return;
 801798a:	bf00      	nop
}
 801798c:	46bd      	mov	sp, r7
 801798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017992:	4770      	bx	lr

08017994 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8017994:	b480      	push	{r7}
 8017996:	af00      	add	r7, sp, #0
  return;
 8017998:	bf00      	nop
}
 801799a:	46bd      	mov	sp, r7
 801799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a0:	4770      	bx	lr

080179a2 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80179a2:	b480      	push	{r7}
 80179a4:	af00      	add	r7, sp, #0
  return;
 80179a6:	bf00      	nop
}
 80179a8:	46bd      	mov	sp, r7
 80179aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ae:	4770      	bx	lr

080179b0 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80179b0:	b480      	push	{r7}
 80179b2:	af00      	add	r7, sp, #0
  return;
 80179b4:	bf00      	nop
}
 80179b6:	46bd      	mov	sp, r7
 80179b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179bc:	4770      	bx	lr

080179be <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80179be:	b480      	push	{r7}
 80179c0:	af00      	add	r7, sp, #0
  return;
 80179c2:	bf00      	nop
}
 80179c4:	46bd      	mov	sp, r7
 80179c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ca:	4770      	bx	lr

080179cc <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80179cc:	b480      	push	{r7}
 80179ce:	af00      	add	r7, sp, #0
  return;
 80179d0:	bf00      	nop
}
 80179d2:	46bd      	mov	sp, r7
 80179d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d8:	4770      	bx	lr
	...

080179dc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80179e0:	4b04      	ldr	r3, [pc, #16]	; (80179f4 <SVCCTL_Init+0x18>)
 80179e2:	2200      	movs	r2, #0
 80179e4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80179e6:	4b04      	ldr	r3, [pc, #16]	; (80179f8 <SVCCTL_Init+0x1c>)
 80179e8:	2200      	movs	r2, #0
 80179ea:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80179ec:	f000 f806 	bl	80179fc <SVCCTL_SvcInit>

  return;
 80179f0:	bf00      	nop
}
 80179f2:	bd80      	pop	{r7, pc}
 80179f4:	20000320 	.word	0x20000320
 80179f8:	20000340 	.word	0x20000340

080179fc <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	af00      	add	r7, sp, #0
  BAS_Init();
 8017a00:	f7ff ff74 	bl	80178ec <BAS_Init>

  BLS_Init();
 8017a04:	f7ff ff79 	bl	80178fa <BLS_Init>

  CRS_STM_Init();
 8017a08:	f7ff ff7e 	bl	8017908 <CRS_STM_Init>

  DIS_Init();
 8017a0c:	f7ff ff83 	bl	8017916 <DIS_Init>

  EDS_STM_Init();
 8017a10:	f7ff ff88 	bl	8017924 <EDS_STM_Init>

  HIDS_Init();
 8017a14:	f7ff ff8d 	bl	8017932 <HIDS_Init>

  HRS_Init();
 8017a18:	f7ff ff92 	bl	8017940 <HRS_Init>

  HTS_Init();
 8017a1c:	f7ff ff97 	bl	801794e <HTS_Init>

  IAS_Init();
 8017a20:	f7ff ff9c 	bl	801795c <IAS_Init>

  LLS_Init();
 8017a24:	f7ff ffa1 	bl	801796a <LLS_Init>

  TPS_Init();
 8017a28:	f7ff ffa6 	bl	8017978 <TPS_Init>

  MOTENV_STM_Init();
 8017a2c:	f7ff ffab 	bl	8017986 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8017a30:	f7ff ffb0 	bl	8017994 <P2PS_STM_Init>

  ZDD_STM_Init();
 8017a34:	f7ff ffb5 	bl	80179a2 <ZDD_STM_Init>

  OTAS_STM_Init();
 8017a38:	f7ff ffba 	bl	80179b0 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8017a3c:	f7ff ffc6 	bl	80179cc <BVOPUS_STM_Init>

  MESH_Init();
 8017a40:	f7ff ffbd 	bl	80179be <MESH_Init>

  SVCCTL_InitCustomSvc();
 8017a44:	f001 fffe 	bl	8019a44 <SVCCTL_InitCustomSvc>
  
  return;
 8017a48:	bf00      	nop
}
 8017a4a:	bd80      	pop	{r7, pc}

08017a4c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8017a4c:	b480      	push	{r7}
 8017a4e:	b083      	sub	sp, #12
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8017a54:	4b09      	ldr	r3, [pc, #36]	; (8017a7c <SVCCTL_RegisterSvcHandler+0x30>)
 8017a56:	7f1b      	ldrb	r3, [r3, #28]
 8017a58:	4619      	mov	r1, r3
 8017a5a:	4a08      	ldr	r2, [pc, #32]	; (8017a7c <SVCCTL_RegisterSvcHandler+0x30>)
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8017a62:	4b06      	ldr	r3, [pc, #24]	; (8017a7c <SVCCTL_RegisterSvcHandler+0x30>)
 8017a64:	7f1b      	ldrb	r3, [r3, #28]
 8017a66:	3301      	adds	r3, #1
 8017a68:	b2da      	uxtb	r2, r3
 8017a6a:	4b04      	ldr	r3, [pc, #16]	; (8017a7c <SVCCTL_RegisterSvcHandler+0x30>)
 8017a6c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8017a6e:	bf00      	nop
}
 8017a70:	370c      	adds	r7, #12
 8017a72:	46bd      	mov	sp, r7
 8017a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a78:	4770      	bx	lr
 8017a7a:	bf00      	nop
 8017a7c:	20000320 	.word	0x20000320

08017a80 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b086      	sub	sp, #24
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	3301      	adds	r3, #1
 8017a8c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8017a8e:	2300      	movs	r3, #0
 8017a90:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8017a92:	693b      	ldr	r3, [r7, #16]
 8017a94:	781b      	ldrb	r3, [r3, #0]
 8017a96:	2bff      	cmp	r3, #255	; 0xff
 8017a98:	d125      	bne.n	8017ae6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8017a9a:	693b      	ldr	r3, [r7, #16]
 8017a9c:	3302      	adds	r3, #2
 8017a9e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8017aa0:	68fb      	ldr	r3, [r7, #12]
 8017aa2:	881b      	ldrh	r3, [r3, #0]
 8017aa4:	b29b      	uxth	r3, r3
 8017aa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017aaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8017aae:	d118      	bne.n	8017ae2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8017ab0:	2300      	movs	r3, #0
 8017ab2:	757b      	strb	r3, [r7, #21]
 8017ab4:	e00d      	b.n	8017ad2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8017ab6:	7d7b      	ldrb	r3, [r7, #21]
 8017ab8:	4a1a      	ldr	r2, [pc, #104]	; (8017b24 <SVCCTL_UserEvtRx+0xa4>)
 8017aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017abe:	6878      	ldr	r0, [r7, #4]
 8017ac0:	4798      	blx	r3
 8017ac2:	4603      	mov	r3, r0
 8017ac4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8017ac6:	7dfb      	ldrb	r3, [r7, #23]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d108      	bne.n	8017ade <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8017acc:	7d7b      	ldrb	r3, [r7, #21]
 8017ace:	3301      	adds	r3, #1
 8017ad0:	757b      	strb	r3, [r7, #21]
 8017ad2:	4b14      	ldr	r3, [pc, #80]	; (8017b24 <SVCCTL_UserEvtRx+0xa4>)
 8017ad4:	7f1b      	ldrb	r3, [r3, #28]
 8017ad6:	7d7a      	ldrb	r2, [r7, #21]
 8017ad8:	429a      	cmp	r2, r3
 8017ada:	d3ec      	bcc.n	8017ab6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8017adc:	e002      	b.n	8017ae4 <SVCCTL_UserEvtRx+0x64>
              break;
 8017ade:	bf00      	nop
          break;
 8017ae0:	e000      	b.n	8017ae4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8017ae2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8017ae4:	e000      	b.n	8017ae8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8017ae6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8017ae8:	7dfb      	ldrb	r3, [r7, #23]
 8017aea:	2b02      	cmp	r3, #2
 8017aec:	d00f      	beq.n	8017b0e <SVCCTL_UserEvtRx+0x8e>
 8017aee:	2b02      	cmp	r3, #2
 8017af0:	dc10      	bgt.n	8017b14 <SVCCTL_UserEvtRx+0x94>
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d002      	beq.n	8017afc <SVCCTL_UserEvtRx+0x7c>
 8017af6:	2b01      	cmp	r3, #1
 8017af8:	d006      	beq.n	8017b08 <SVCCTL_UserEvtRx+0x88>
 8017afa:	e00b      	b.n	8017b14 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8017afc:	6878      	ldr	r0, [r7, #4]
 8017afe:	f001 fccf 	bl	80194a0 <SVCCTL_App_Notification>
 8017b02:	4603      	mov	r3, r0
 8017b04:	75bb      	strb	r3, [r7, #22]
      break;
 8017b06:	e008      	b.n	8017b1a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8017b08:	2301      	movs	r3, #1
 8017b0a:	75bb      	strb	r3, [r7, #22]
      break;
 8017b0c:	e005      	b.n	8017b1a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8017b0e:	2300      	movs	r3, #0
 8017b10:	75bb      	strb	r3, [r7, #22]
      break;
 8017b12:	e002      	b.n	8017b1a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8017b14:	2301      	movs	r3, #1
 8017b16:	75bb      	strb	r3, [r7, #22]
      break;
 8017b18:	bf00      	nop
  }

  return (return_status);
 8017b1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	3718      	adds	r7, #24
 8017b20:	46bd      	mov	sp, r7
 8017b22:	bd80      	pop	{r7, pc}
 8017b24:	20000320 	.word	0x20000320

08017b28 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b088      	sub	sp, #32
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8017b30:	f107 030c 	add.w	r3, r7, #12
 8017b34:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8017b3c:	69fb      	ldr	r3, [r7, #28]
 8017b3e:	212e      	movs	r1, #46	; 0x2e
 8017b40:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8017b44:	f000 fae8 	bl	8018118 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8017b48:	69fb      	ldr	r3, [r7, #28]
 8017b4a:	330b      	adds	r3, #11
 8017b4c:	78db      	ldrb	r3, [r3, #3]
}
 8017b4e:	4618      	mov	r0, r3
 8017b50:	3720      	adds	r7, #32
 8017b52:	46bd      	mov	sp, r7
 8017b54:	bd80      	pop	{r7, pc}

08017b56 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8017b56:	b580      	push	{r7, lr}
 8017b58:	b088      	sub	sp, #32
 8017b5a:	af00      	add	r7, sp, #0
 8017b5c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8017b5e:	f107 030c 	add.w	r3, r7, #12
 8017b62:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8017b6a:	69fb      	ldr	r3, [r7, #28]
 8017b6c:	210f      	movs	r1, #15
 8017b6e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8017b72:	f000 fad1 	bl	8018118 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8017b76:	69fb      	ldr	r3, [r7, #28]
 8017b78:	330b      	adds	r3, #11
 8017b7a:	78db      	ldrb	r3, [r3, #3]
}
 8017b7c:	4618      	mov	r0, r3
 8017b7e:	3720      	adds	r7, #32
 8017b80:	46bd      	mov	sp, r7
 8017b82:	bd80      	pop	{r7, pc}

08017b84 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b088      	sub	sp, #32
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8017b8c:	f107 030c 	add.w	r3, r7, #12
 8017b90:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8017b92:	69fb      	ldr	r3, [r7, #28]
 8017b94:	687a      	ldr	r2, [r7, #4]
 8017b96:	2110      	movs	r1, #16
 8017b98:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8017b9c:	f000 fabc 	bl	8018118 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8017ba0:	69fb      	ldr	r3, [r7, #28]
 8017ba2:	330b      	adds	r3, #11
 8017ba4:	78db      	ldrb	r3, [r3, #3]
}
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	3720      	adds	r7, #32
 8017baa:	46bd      	mov	sp, r7
 8017bac:	bd80      	pop	{r7, pc}
	...

08017bb0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8017bb0:	b480      	push	{r7}
 8017bb2:	b08b      	sub	sp, #44	; 0x2c
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8017bb8:	2300      	movs	r3, #0
 8017bba:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8017bc8:	2300      	movs	r3, #0
 8017bca:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8017bcc:	2300      	movs	r3, #0
 8017bce:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8017bd8:	4b4a      	ldr	r3, [pc, #296]	; (8017d04 <SHCI_GetWirelessFwInfo+0x154>)
 8017bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017bdc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017be0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8017be2:	693b      	ldr	r3, [r7, #16]
 8017be4:	009b      	lsls	r3, r3, #2
 8017be6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8017bea:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8017bf2:	68bb      	ldr	r3, [r7, #8]
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	4a44      	ldr	r2, [pc, #272]	; (8017d08 <SHCI_GetWirelessFwInfo+0x158>)
 8017bf8:	4293      	cmp	r3, r2
 8017bfa:	d10f      	bne.n	8017c1c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8017bfc:	68bb      	ldr	r3, [r7, #8]
 8017bfe:	695b      	ldr	r3, [r3, #20]
 8017c00:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8017c02:	68bb      	ldr	r3, [r7, #8]
 8017c04:	699b      	ldr	r3, [r3, #24]
 8017c06:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8017c08:	68bb      	ldr	r3, [r7, #8]
 8017c0a:	69db      	ldr	r3, [r3, #28]
 8017c0c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8017c0e:	68bb      	ldr	r3, [r7, #8]
 8017c10:	68db      	ldr	r3, [r3, #12]
 8017c12:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8017c14:	68bb      	ldr	r3, [r7, #8]
 8017c16:	691b      	ldr	r3, [r3, #16]
 8017c18:	617b      	str	r3, [r7, #20]
 8017c1a:	e01a      	b.n	8017c52 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8017c1c:	693b      	ldr	r3, [r7, #16]
 8017c1e:	009b      	lsls	r3, r3, #2
 8017c20:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8017c24:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8017c28:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	691b      	ldr	r3, [r3, #16]
 8017c30:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	695b      	ldr	r3, [r3, #20]
 8017c38:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	699b      	ldr	r3, [r3, #24]
 8017c40:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	685b      	ldr	r3, [r3, #4]
 8017c48:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	689b      	ldr	r3, [r3, #8]
 8017c50:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8017c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c54:	0e1b      	lsrs	r3, r3, #24
 8017c56:	b2da      	uxtb	r2, r3
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8017c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c5e:	0c1b      	lsrs	r3, r3, #16
 8017c60:	b2da      	uxtb	r2, r3
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8017c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c68:	0a1b      	lsrs	r3, r3, #8
 8017c6a:	b2da      	uxtb	r2, r3
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8017c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c72:	091b      	lsrs	r3, r3, #4
 8017c74:	b2db      	uxtb	r3, r3
 8017c76:	f003 030f 	and.w	r3, r3, #15
 8017c7a:	b2da      	uxtb	r2, r3
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8017c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c82:	b2db      	uxtb	r3, r3
 8017c84:	f003 030f 	and.w	r3, r3, #15
 8017c88:	b2da      	uxtb	r2, r3
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8017c8e:	6a3b      	ldr	r3, [r7, #32]
 8017c90:	0e1b      	lsrs	r3, r3, #24
 8017c92:	b2da      	uxtb	r2, r3
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8017c98:	6a3b      	ldr	r3, [r7, #32]
 8017c9a:	0c1b      	lsrs	r3, r3, #16
 8017c9c:	b2da      	uxtb	r2, r3
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8017ca2:	6a3b      	ldr	r3, [r7, #32]
 8017ca4:	0a1b      	lsrs	r3, r3, #8
 8017ca6:	b2da      	uxtb	r2, r3
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8017cac:	6a3b      	ldr	r3, [r7, #32]
 8017cae:	b2da      	uxtb	r2, r3
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8017cb4:	69fb      	ldr	r3, [r7, #28]
 8017cb6:	b2da      	uxtb	r2, r3
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8017cbc:	69bb      	ldr	r3, [r7, #24]
 8017cbe:	0e1b      	lsrs	r3, r3, #24
 8017cc0:	b2da      	uxtb	r2, r3
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8017cc6:	69bb      	ldr	r3, [r7, #24]
 8017cc8:	0c1b      	lsrs	r3, r3, #16
 8017cca:	b2da      	uxtb	r2, r3
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8017cd0:	69bb      	ldr	r3, [r7, #24]
 8017cd2:	0a1b      	lsrs	r3, r3, #8
 8017cd4:	b2da      	uxtb	r2, r3
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8017cda:	697b      	ldr	r3, [r7, #20]
 8017cdc:	0e1b      	lsrs	r3, r3, #24
 8017cde:	b2da      	uxtb	r2, r3
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8017ce4:	697b      	ldr	r3, [r7, #20]
 8017ce6:	0c1b      	lsrs	r3, r3, #16
 8017ce8:	b2da      	uxtb	r2, r3
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8017cee:	697b      	ldr	r3, [r7, #20]
 8017cf0:	b2da      	uxtb	r2, r3
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8017cf6:	2300      	movs	r3, #0
}
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	372c      	adds	r7, #44	; 0x2c
 8017cfc:	46bd      	mov	sp, r7
 8017cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d02:	4770      	bx	lr
 8017d04:	58004000 	.word	0x58004000
 8017d08:	a94656b9 	.word	0xa94656b9

08017d0c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b082      	sub	sp, #8
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	6078      	str	r0, [r7, #4]
 8017d14:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8017d16:	683b      	ldr	r3, [r7, #0]
 8017d18:	685b      	ldr	r3, [r3, #4]
 8017d1a:	4a08      	ldr	r2, [pc, #32]	; (8017d3c <hci_init+0x30>)
 8017d1c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8017d1e:	4a08      	ldr	r2, [pc, #32]	; (8017d40 <hci_init+0x34>)
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8017d24:	4806      	ldr	r0, [pc, #24]	; (8017d40 <hci_init+0x34>)
 8017d26:	f000 f979 	bl	801801c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8017d2a:	683b      	ldr	r3, [r7, #0]
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	4618      	mov	r0, r3
 8017d30:	f000 f8da 	bl	8017ee8 <TlInit>

  return;
 8017d34:	bf00      	nop
}
 8017d36:	3708      	adds	r7, #8
 8017d38:	46bd      	mov	sp, r7
 8017d3a:	bd80      	pop	{r7, pc}
 8017d3c:	20001580 	.word	0x20001580
 8017d40:	20001558 	.word	0x20001558

08017d44 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b084      	sub	sp, #16
 8017d48:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8017d4a:	4822      	ldr	r0, [pc, #136]	; (8017dd4 <hci_user_evt_proc+0x90>)
 8017d4c:	f000 fd32 	bl	80187b4 <LST_is_empty>
 8017d50:	4603      	mov	r3, r0
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d12b      	bne.n	8017dae <hci_user_evt_proc+0x6a>
 8017d56:	4b20      	ldr	r3, [pc, #128]	; (8017dd8 <hci_user_evt_proc+0x94>)
 8017d58:	781b      	ldrb	r3, [r3, #0]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d027      	beq.n	8017dae <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8017d5e:	f107 030c 	add.w	r3, r7, #12
 8017d62:	4619      	mov	r1, r3
 8017d64:	481b      	ldr	r0, [pc, #108]	; (8017dd4 <hci_user_evt_proc+0x90>)
 8017d66:	f000 fdb4 	bl	80188d2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8017d6a:	4b1c      	ldr	r3, [pc, #112]	; (8017ddc <hci_user_evt_proc+0x98>)
 8017d6c:	69db      	ldr	r3, [r3, #28]
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d00c      	beq.n	8017d8c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8017d76:	2301      	movs	r3, #1
 8017d78:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8017d7a:	4b18      	ldr	r3, [pc, #96]	; (8017ddc <hci_user_evt_proc+0x98>)
 8017d7c:	69db      	ldr	r3, [r3, #28]
 8017d7e:	1d3a      	adds	r2, r7, #4
 8017d80:	4610      	mov	r0, r2
 8017d82:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8017d84:	793a      	ldrb	r2, [r7, #4]
 8017d86:	4b14      	ldr	r3, [pc, #80]	; (8017dd8 <hci_user_evt_proc+0x94>)
 8017d88:	701a      	strb	r2, [r3, #0]
 8017d8a:	e002      	b.n	8017d92 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8017d8c:	4b12      	ldr	r3, [pc, #72]	; (8017dd8 <hci_user_evt_proc+0x94>)
 8017d8e:	2201      	movs	r2, #1
 8017d90:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8017d92:	4b11      	ldr	r3, [pc, #68]	; (8017dd8 <hci_user_evt_proc+0x94>)
 8017d94:	781b      	ldrb	r3, [r3, #0]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d004      	beq.n	8017da4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	4618      	mov	r0, r3
 8017d9e:	f000 fc0d 	bl	80185bc <TL_MM_EvtDone>
 8017da2:	e004      	b.n	8017dae <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	4619      	mov	r1, r3
 8017da8:	480a      	ldr	r0, [pc, #40]	; (8017dd4 <hci_user_evt_proc+0x90>)
 8017daa:	f000 fd25 	bl	80187f8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8017dae:	4809      	ldr	r0, [pc, #36]	; (8017dd4 <hci_user_evt_proc+0x90>)
 8017db0:	f000 fd00 	bl	80187b4 <LST_is_empty>
 8017db4:	4603      	mov	r3, r0
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d107      	bne.n	8017dca <hci_user_evt_proc+0x86>
 8017dba:	4b07      	ldr	r3, [pc, #28]	; (8017dd8 <hci_user_evt_proc+0x94>)
 8017dbc:	781b      	ldrb	r3, [r3, #0]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d003      	beq.n	8017dca <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8017dc2:	4804      	ldr	r0, [pc, #16]	; (8017dd4 <hci_user_evt_proc+0x90>)
 8017dc4:	f001 fd84 	bl	80198d0 <hci_notify_asynch_evt>
  }


  return;
 8017dc8:	bf00      	nop
 8017dca:	bf00      	nop
}
 8017dcc:	3710      	adds	r7, #16
 8017dce:	46bd      	mov	sp, r7
 8017dd0:	bd80      	pop	{r7, pc}
 8017dd2:	bf00      	nop
 8017dd4:	20000348 	.word	0x20000348
 8017dd8:	20000354 	.word	0x20000354
 8017ddc:	20001558 	.word	0x20001558

08017de0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8017de0:	b580      	push	{r7, lr}
 8017de2:	b088      	sub	sp, #32
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	6078      	str	r0, [r7, #4]
 8017de8:	460b      	mov	r3, r1
 8017dea:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8017dec:	2000      	movs	r0, #0
 8017dee:	f000 f8d1 	bl	8017f94 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8017df2:	2300      	movs	r3, #0
 8017df4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	885b      	ldrh	r3, [r3, #2]
 8017dfa:	b21b      	sxth	r3, r3
 8017dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8017e00:	b21a      	sxth	r2, r3
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	881b      	ldrh	r3, [r3, #0]
 8017e06:	029b      	lsls	r3, r3, #10
 8017e08:	b21b      	sxth	r3, r3
 8017e0a:	4313      	orrs	r3, r2
 8017e0c:	b21b      	sxth	r3, r3
 8017e0e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8017e10:	4b33      	ldr	r3, [pc, #204]	; (8017ee0 <hci_send_req+0x100>)
 8017e12:	2201      	movs	r2, #1
 8017e14:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	68db      	ldr	r3, [r3, #12]
 8017e1a:	b2d9      	uxtb	r1, r3
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	689a      	ldr	r2, [r3, #8]
 8017e20:	8bbb      	ldrh	r3, [r7, #28]
 8017e22:	4618      	mov	r0, r3
 8017e24:	f000 f890 	bl	8017f48 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8017e28:	e04e      	b.n	8017ec8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8017e2a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8017e2e:	f001 fd66 	bl	80198fe <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8017e32:	e043      	b.n	8017ebc <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8017e34:	f107 030c 	add.w	r3, r7, #12
 8017e38:	4619      	mov	r1, r3
 8017e3a:	482a      	ldr	r0, [pc, #168]	; (8017ee4 <hci_send_req+0x104>)
 8017e3c:	f000 fd49 	bl	80188d2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	7a5b      	ldrb	r3, [r3, #9]
 8017e44:	2b0f      	cmp	r3, #15
 8017e46:	d114      	bne.n	8017e72 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	330b      	adds	r3, #11
 8017e4c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8017e4e:	693b      	ldr	r3, [r7, #16]
 8017e50:	885b      	ldrh	r3, [r3, #2]
 8017e52:	b29b      	uxth	r3, r3
 8017e54:	8bba      	ldrh	r2, [r7, #28]
 8017e56:	429a      	cmp	r2, r3
 8017e58:	d104      	bne.n	8017e64 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	691b      	ldr	r3, [r3, #16]
 8017e5e:	693a      	ldr	r2, [r7, #16]
 8017e60:	7812      	ldrb	r2, [r2, #0]
 8017e62:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8017e64:	693b      	ldr	r3, [r7, #16]
 8017e66:	785b      	ldrb	r3, [r3, #1]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d027      	beq.n	8017ebc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8017e6c:	2301      	movs	r3, #1
 8017e6e:	77fb      	strb	r3, [r7, #31]
 8017e70:	e024      	b.n	8017ebc <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	330b      	adds	r3, #11
 8017e76:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8017e78:	69bb      	ldr	r3, [r7, #24]
 8017e7a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017e7e:	b29b      	uxth	r3, r3
 8017e80:	8bba      	ldrh	r2, [r7, #28]
 8017e82:	429a      	cmp	r2, r3
 8017e84:	d114      	bne.n	8017eb0 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	7a9b      	ldrb	r3, [r3, #10]
 8017e8a:	3b03      	subs	r3, #3
 8017e8c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	695a      	ldr	r2, [r3, #20]
 8017e92:	7dfb      	ldrb	r3, [r7, #23]
 8017e94:	429a      	cmp	r2, r3
 8017e96:	bfa8      	it	ge
 8017e98:	461a      	movge	r2, r3
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	6918      	ldr	r0, [r3, #16]
 8017ea2:	69bb      	ldr	r3, [r7, #24]
 8017ea4:	1cd9      	adds	r1, r3, #3
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	695b      	ldr	r3, [r3, #20]
 8017eaa:	461a      	mov	r2, r3
 8017eac:	f005 f90d 	bl	801d0ca <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8017eb0:	69bb      	ldr	r3, [r7, #24]
 8017eb2:	781b      	ldrb	r3, [r3, #0]
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d001      	beq.n	8017ebc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8017eb8:	2301      	movs	r3, #1
 8017eba:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8017ebc:	4809      	ldr	r0, [pc, #36]	; (8017ee4 <hci_send_req+0x104>)
 8017ebe:	f000 fc79 	bl	80187b4 <LST_is_empty>
 8017ec2:	4603      	mov	r3, r0
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d0b5      	beq.n	8017e34 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8017ec8:	7ffb      	ldrb	r3, [r7, #31]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d0ad      	beq.n	8017e2a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8017ece:	2001      	movs	r0, #1
 8017ed0:	f000 f860 	bl	8017f94 <NotifyCmdStatus>

  return 0;
 8017ed4:	2300      	movs	r3, #0
}
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	3720      	adds	r7, #32
 8017eda:	46bd      	mov	sp, r7
 8017edc:	bd80      	pop	{r7, pc}
 8017ede:	bf00      	nop
 8017ee0:	20001584 	.word	0x20001584
 8017ee4:	20001578 	.word	0x20001578

08017ee8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b086      	sub	sp, #24
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8017ef0:	480f      	ldr	r0, [pc, #60]	; (8017f30 <TlInit+0x48>)
 8017ef2:	f000 fc4f 	bl	8018794 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8017ef6:	4a0f      	ldr	r2, [pc, #60]	; (8017f34 <TlInit+0x4c>)
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8017efc:	480e      	ldr	r0, [pc, #56]	; (8017f38 <TlInit+0x50>)
 8017efe:	f000 fc49 	bl	8018794 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8017f02:	4b0e      	ldr	r3, [pc, #56]	; (8017f3c <TlInit+0x54>)
 8017f04:	2201      	movs	r2, #1
 8017f06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8017f08:	4b0d      	ldr	r3, [pc, #52]	; (8017f40 <TlInit+0x58>)
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d00a      	beq.n	8017f26 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8017f14:	4b0b      	ldr	r3, [pc, #44]	; (8017f44 <TlInit+0x5c>)
 8017f16:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8017f18:	4b09      	ldr	r3, [pc, #36]	; (8017f40 <TlInit+0x58>)
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	f107 0208 	add.w	r2, r7, #8
 8017f20:	4610      	mov	r0, r2
 8017f22:	4798      	blx	r3
  }

  return;
 8017f24:	bf00      	nop
 8017f26:	bf00      	nop
}
 8017f28:	3718      	adds	r7, #24
 8017f2a:	46bd      	mov	sp, r7
 8017f2c:	bd80      	pop	{r7, pc}
 8017f2e:	bf00      	nop
 8017f30:	20001578 	.word	0x20001578
 8017f34:	20000350 	.word	0x20000350
 8017f38:	20000348 	.word	0x20000348
 8017f3c:	20000354 	.word	0x20000354
 8017f40:	20001558 	.word	0x20001558
 8017f44:	08017fd5 	.word	0x08017fd5

08017f48 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	b082      	sub	sp, #8
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	4603      	mov	r3, r0
 8017f50:	603a      	str	r2, [r7, #0]
 8017f52:	80fb      	strh	r3, [r7, #6]
 8017f54:	460b      	mov	r3, r1
 8017f56:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8017f58:	4b0c      	ldr	r3, [pc, #48]	; (8017f8c <SendCmd+0x44>)
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	88fa      	ldrh	r2, [r7, #6]
 8017f5e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8017f62:	4b0a      	ldr	r3, [pc, #40]	; (8017f8c <SendCmd+0x44>)
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	797a      	ldrb	r2, [r7, #5]
 8017f68:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8017f6a:	4b08      	ldr	r3, [pc, #32]	; (8017f8c <SendCmd+0x44>)
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	330c      	adds	r3, #12
 8017f70:	797a      	ldrb	r2, [r7, #5]
 8017f72:	6839      	ldr	r1, [r7, #0]
 8017f74:	4618      	mov	r0, r3
 8017f76:	f005 f8a8 	bl	801d0ca <memcpy>

  hciContext.io.Send(0,0);
 8017f7a:	4b05      	ldr	r3, [pc, #20]	; (8017f90 <SendCmd+0x48>)
 8017f7c:	691b      	ldr	r3, [r3, #16]
 8017f7e:	2100      	movs	r1, #0
 8017f80:	2000      	movs	r0, #0
 8017f82:	4798      	blx	r3

  return;
 8017f84:	bf00      	nop
}
 8017f86:	3708      	adds	r7, #8
 8017f88:	46bd      	mov	sp, r7
 8017f8a:	bd80      	pop	{r7, pc}
 8017f8c:	20000350 	.word	0x20000350
 8017f90:	20001558 	.word	0x20001558

08017f94 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8017f94:	b580      	push	{r7, lr}
 8017f96:	b082      	sub	sp, #8
 8017f98:	af00      	add	r7, sp, #0
 8017f9a:	4603      	mov	r3, r0
 8017f9c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8017f9e:	79fb      	ldrb	r3, [r7, #7]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d108      	bne.n	8017fb6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8017fa4:	4b0a      	ldr	r3, [pc, #40]	; (8017fd0 <NotifyCmdStatus+0x3c>)
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d00d      	beq.n	8017fc8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8017fac:	4b08      	ldr	r3, [pc, #32]	; (8017fd0 <NotifyCmdStatus+0x3c>)
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	2000      	movs	r0, #0
 8017fb2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8017fb4:	e008      	b.n	8017fc8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8017fb6:	4b06      	ldr	r3, [pc, #24]	; (8017fd0 <NotifyCmdStatus+0x3c>)
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d004      	beq.n	8017fc8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8017fbe:	4b04      	ldr	r3, [pc, #16]	; (8017fd0 <NotifyCmdStatus+0x3c>)
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	2001      	movs	r0, #1
 8017fc4:	4798      	blx	r3
  return;
 8017fc6:	bf00      	nop
 8017fc8:	bf00      	nop
}
 8017fca:	3708      	adds	r7, #8
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	bd80      	pop	{r7, pc}
 8017fd0:	20001580 	.word	0x20001580

08017fd4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b082      	sub	sp, #8
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	7a5b      	ldrb	r3, [r3, #9]
 8017fe0:	2b0f      	cmp	r3, #15
 8017fe2:	d003      	beq.n	8017fec <TlEvtReceived+0x18>
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	7a5b      	ldrb	r3, [r3, #9]
 8017fe8:	2b0e      	cmp	r3, #14
 8017fea:	d107      	bne.n	8017ffc <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8017fec:	6879      	ldr	r1, [r7, #4]
 8017fee:	4809      	ldr	r0, [pc, #36]	; (8018014 <TlEvtReceived+0x40>)
 8017ff0:	f000 fc28 	bl	8018844 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8017ff4:	2000      	movs	r0, #0
 8017ff6:	f001 fc77 	bl	80198e8 <hci_cmd_resp_release>
 8017ffa:	e006      	b.n	801800a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8017ffc:	6879      	ldr	r1, [r7, #4]
 8017ffe:	4806      	ldr	r0, [pc, #24]	; (8018018 <TlEvtReceived+0x44>)
 8018000:	f000 fc20 	bl	8018844 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8018004:	4804      	ldr	r0, [pc, #16]	; (8018018 <TlEvtReceived+0x44>)
 8018006:	f001 fc63 	bl	80198d0 <hci_notify_asynch_evt>
  }

  return;
 801800a:	bf00      	nop
}
 801800c:	3708      	adds	r7, #8
 801800e:	46bd      	mov	sp, r7
 8018010:	bd80      	pop	{r7, pc}
 8018012:	bf00      	nop
 8018014:	20001578 	.word	0x20001578
 8018018:	20000348 	.word	0x20000348

0801801c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 801801c:	b480      	push	{r7}
 801801e:	b083      	sub	sp, #12
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	4a05      	ldr	r2, [pc, #20]	; (801803c <hci_register_io_bus+0x20>)
 8018028:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	4a04      	ldr	r2, [pc, #16]	; (8018040 <hci_register_io_bus+0x24>)
 801802e:	611a      	str	r2, [r3, #16]

  return;
 8018030:	bf00      	nop
}
 8018032:	370c      	adds	r7, #12
 8018034:	46bd      	mov	sp, r7
 8018036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803a:	4770      	bx	lr
 801803c:	08018335 	.word	0x08018335
 8018040:	0801839d 	.word	0x0801839d

08018044 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8018044:	b580      	push	{r7, lr}
 8018046:	b082      	sub	sp, #8
 8018048:	af00      	add	r7, sp, #0
 801804a:	6078      	str	r0, [r7, #4]
 801804c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801804e:	683b      	ldr	r3, [r7, #0]
 8018050:	685b      	ldr	r3, [r3, #4]
 8018052:	4a08      	ldr	r2, [pc, #32]	; (8018074 <shci_init+0x30>)
 8018054:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8018056:	4a08      	ldr	r2, [pc, #32]	; (8018078 <shci_init+0x34>)
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 801805c:	4806      	ldr	r0, [pc, #24]	; (8018078 <shci_init+0x34>)
 801805e:	f000 f915 	bl	801828c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8018062:	683b      	ldr	r3, [r7, #0]
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	4618      	mov	r0, r3
 8018068:	f000 f898 	bl	801819c <TlInit>

  return;
 801806c:	bf00      	nop
}
 801806e:	3708      	adds	r7, #8
 8018070:	46bd      	mov	sp, r7
 8018072:	bd80      	pop	{r7, pc}
 8018074:	200015a8 	.word	0x200015a8
 8018078:	20001588 	.word	0x20001588

0801807c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 801807c:	b580      	push	{r7, lr}
 801807e:	b084      	sub	sp, #16
 8018080:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8018082:	4822      	ldr	r0, [pc, #136]	; (801810c <shci_user_evt_proc+0x90>)
 8018084:	f000 fb96 	bl	80187b4 <LST_is_empty>
 8018088:	4603      	mov	r3, r0
 801808a:	2b00      	cmp	r3, #0
 801808c:	d12b      	bne.n	80180e6 <shci_user_evt_proc+0x6a>
 801808e:	4b20      	ldr	r3, [pc, #128]	; (8018110 <shci_user_evt_proc+0x94>)
 8018090:	781b      	ldrb	r3, [r3, #0]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d027      	beq.n	80180e6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8018096:	f107 030c 	add.w	r3, r7, #12
 801809a:	4619      	mov	r1, r3
 801809c:	481b      	ldr	r0, [pc, #108]	; (801810c <shci_user_evt_proc+0x90>)
 801809e:	f000 fc18 	bl	80188d2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80180a2:	4b1c      	ldr	r3, [pc, #112]	; (8018114 <shci_user_evt_proc+0x98>)
 80180a4:	69db      	ldr	r3, [r3, #28]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d00c      	beq.n	80180c4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80180ae:	2301      	movs	r3, #1
 80180b0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80180b2:	4b18      	ldr	r3, [pc, #96]	; (8018114 <shci_user_evt_proc+0x98>)
 80180b4:	69db      	ldr	r3, [r3, #28]
 80180b6:	1d3a      	adds	r2, r7, #4
 80180b8:	4610      	mov	r0, r2
 80180ba:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80180bc:	793a      	ldrb	r2, [r7, #4]
 80180be:	4b14      	ldr	r3, [pc, #80]	; (8018110 <shci_user_evt_proc+0x94>)
 80180c0:	701a      	strb	r2, [r3, #0]
 80180c2:	e002      	b.n	80180ca <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80180c4:	4b12      	ldr	r3, [pc, #72]	; (8018110 <shci_user_evt_proc+0x94>)
 80180c6:	2201      	movs	r2, #1
 80180c8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80180ca:	4b11      	ldr	r3, [pc, #68]	; (8018110 <shci_user_evt_proc+0x94>)
 80180cc:	781b      	ldrb	r3, [r3, #0]
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d004      	beq.n	80180dc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80180d2:	68fb      	ldr	r3, [r7, #12]
 80180d4:	4618      	mov	r0, r3
 80180d6:	f000 fa71 	bl	80185bc <TL_MM_EvtDone>
 80180da:	e004      	b.n	80180e6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	4619      	mov	r1, r3
 80180e0:	480a      	ldr	r0, [pc, #40]	; (801810c <shci_user_evt_proc+0x90>)
 80180e2:	f000 fb89 	bl	80187f8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80180e6:	4809      	ldr	r0, [pc, #36]	; (801810c <shci_user_evt_proc+0x90>)
 80180e8:	f000 fb64 	bl	80187b4 <LST_is_empty>
 80180ec:	4603      	mov	r3, r0
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d107      	bne.n	8018102 <shci_user_evt_proc+0x86>
 80180f2:	4b07      	ldr	r3, [pc, #28]	; (8018110 <shci_user_evt_proc+0x94>)
 80180f4:	781b      	ldrb	r3, [r3, #0]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d003      	beq.n	8018102 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80180fa:	4804      	ldr	r0, [pc, #16]	; (801810c <shci_user_evt_proc+0x90>)
 80180fc:	f7e9 fd34 	bl	8001b68 <shci_notify_asynch_evt>
  }


  return;
 8018100:	bf00      	nop
 8018102:	bf00      	nop
}
 8018104:	3710      	adds	r7, #16
 8018106:	46bd      	mov	sp, r7
 8018108:	bd80      	pop	{r7, pc}
 801810a:	bf00      	nop
 801810c:	20000358 	.word	0x20000358
 8018110:	20000368 	.word	0x20000368
 8018114:	20001588 	.word	0x20001588

08018118 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8018118:	b580      	push	{r7, lr}
 801811a:	b084      	sub	sp, #16
 801811c:	af00      	add	r7, sp, #0
 801811e:	60ba      	str	r2, [r7, #8]
 8018120:	607b      	str	r3, [r7, #4]
 8018122:	4603      	mov	r3, r0
 8018124:	81fb      	strh	r3, [r7, #14]
 8018126:	460b      	mov	r3, r1
 8018128:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 801812a:	2000      	movs	r0, #0
 801812c:	f000 f868 	bl	8018200 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8018130:	4b17      	ldr	r3, [pc, #92]	; (8018190 <shci_send+0x78>)
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	89fa      	ldrh	r2, [r7, #14]
 8018136:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 801813a:	4b15      	ldr	r3, [pc, #84]	; (8018190 <shci_send+0x78>)
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	7b7a      	ldrb	r2, [r7, #13]
 8018140:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8018142:	4b13      	ldr	r3, [pc, #76]	; (8018190 <shci_send+0x78>)
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	330c      	adds	r3, #12
 8018148:	7b7a      	ldrb	r2, [r7, #13]
 801814a:	68b9      	ldr	r1, [r7, #8]
 801814c:	4618      	mov	r0, r3
 801814e:	f004 ffbc 	bl	801d0ca <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8018152:	4b10      	ldr	r3, [pc, #64]	; (8018194 <shci_send+0x7c>)
 8018154:	2201      	movs	r2, #1
 8018156:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8018158:	4b0f      	ldr	r3, [pc, #60]	; (8018198 <shci_send+0x80>)
 801815a:	691b      	ldr	r3, [r3, #16]
 801815c:	2100      	movs	r1, #0
 801815e:	2000      	movs	r0, #0
 8018160:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8018162:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8018166:	f7e9 fd16 	bl	8001b96 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	f103 0008 	add.w	r0, r3, #8
 8018170:	4b07      	ldr	r3, [pc, #28]	; (8018190 <shci_send+0x78>)
 8018172:	6819      	ldr	r1, [r3, #0]
 8018174:	4b06      	ldr	r3, [pc, #24]	; (8018190 <shci_send+0x78>)
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	789b      	ldrb	r3, [r3, #2]
 801817a:	3303      	adds	r3, #3
 801817c:	461a      	mov	r2, r3
 801817e:	f004 ffa4 	bl	801d0ca <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8018182:	2001      	movs	r0, #1
 8018184:	f000 f83c 	bl	8018200 <Cmd_SetStatus>

  return;
 8018188:	bf00      	nop
}
 801818a:	3710      	adds	r7, #16
 801818c:	46bd      	mov	sp, r7
 801818e:	bd80      	pop	{r7, pc}
 8018190:	20000364 	.word	0x20000364
 8018194:	200015ac 	.word	0x200015ac
 8018198:	20001588 	.word	0x20001588

0801819c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801819c:	b580      	push	{r7, lr}
 801819e:	b086      	sub	sp, #24
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80181a4:	4a10      	ldr	r2, [pc, #64]	; (80181e8 <TlInit+0x4c>)
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80181aa:	4810      	ldr	r0, [pc, #64]	; (80181ec <TlInit+0x50>)
 80181ac:	f000 faf2 	bl	8018794 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80181b0:	2001      	movs	r0, #1
 80181b2:	f000 f825 	bl	8018200 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80181b6:	4b0e      	ldr	r3, [pc, #56]	; (80181f0 <TlInit+0x54>)
 80181b8:	2201      	movs	r2, #1
 80181ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80181bc:	4b0d      	ldr	r3, [pc, #52]	; (80181f4 <TlInit+0x58>)
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d00c      	beq.n	80181de <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80181c8:	4b0b      	ldr	r3, [pc, #44]	; (80181f8 <TlInit+0x5c>)
 80181ca:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80181cc:	4b0b      	ldr	r3, [pc, #44]	; (80181fc <TlInit+0x60>)
 80181ce:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80181d0:	4b08      	ldr	r3, [pc, #32]	; (80181f4 <TlInit+0x58>)
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	f107 020c 	add.w	r2, r7, #12
 80181d8:	4610      	mov	r0, r2
 80181da:	4798      	blx	r3
  }

  return;
 80181dc:	bf00      	nop
 80181de:	bf00      	nop
}
 80181e0:	3718      	adds	r7, #24
 80181e2:	46bd      	mov	sp, r7
 80181e4:	bd80      	pop	{r7, pc}
 80181e6:	bf00      	nop
 80181e8:	20000364 	.word	0x20000364
 80181ec:	20000358 	.word	0x20000358
 80181f0:	20000368 	.word	0x20000368
 80181f4:	20001588 	.word	0x20001588
 80181f8:	08018251 	.word	0x08018251
 80181fc:	08018269 	.word	0x08018269

08018200 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8018200:	b580      	push	{r7, lr}
 8018202:	b082      	sub	sp, #8
 8018204:	af00      	add	r7, sp, #0
 8018206:	4603      	mov	r3, r0
 8018208:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 801820a:	79fb      	ldrb	r3, [r7, #7]
 801820c:	2b00      	cmp	r3, #0
 801820e:	d10b      	bne.n	8018228 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8018210:	4b0d      	ldr	r3, [pc, #52]	; (8018248 <Cmd_SetStatus+0x48>)
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d003      	beq.n	8018220 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8018218:	4b0b      	ldr	r3, [pc, #44]	; (8018248 <Cmd_SetStatus+0x48>)
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	2000      	movs	r0, #0
 801821e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8018220:	4b0a      	ldr	r3, [pc, #40]	; (801824c <Cmd_SetStatus+0x4c>)
 8018222:	2200      	movs	r2, #0
 8018224:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8018226:	e00b      	b.n	8018240 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8018228:	4b08      	ldr	r3, [pc, #32]	; (801824c <Cmd_SetStatus+0x4c>)
 801822a:	2201      	movs	r2, #1
 801822c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 801822e:	4b06      	ldr	r3, [pc, #24]	; (8018248 <Cmd_SetStatus+0x48>)
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	2b00      	cmp	r3, #0
 8018234:	d004      	beq.n	8018240 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8018236:	4b04      	ldr	r3, [pc, #16]	; (8018248 <Cmd_SetStatus+0x48>)
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	2001      	movs	r0, #1
 801823c:	4798      	blx	r3
  return;
 801823e:	bf00      	nop
 8018240:	bf00      	nop
}
 8018242:	3708      	adds	r7, #8
 8018244:	46bd      	mov	sp, r7
 8018246:	bd80      	pop	{r7, pc}
 8018248:	200015a8 	.word	0x200015a8
 801824c:	20000360 	.word	0x20000360

08018250 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8018250:	b580      	push	{r7, lr}
 8018252:	b082      	sub	sp, #8
 8018254:	af00      	add	r7, sp, #0
 8018256:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8018258:	2000      	movs	r0, #0
 801825a:	f7e9 fc91 	bl	8001b80 <shci_cmd_resp_release>

  return;
 801825e:	bf00      	nop
}
 8018260:	3708      	adds	r7, #8
 8018262:	46bd      	mov	sp, r7
 8018264:	bd80      	pop	{r7, pc}
	...

08018268 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8018268:	b580      	push	{r7, lr}
 801826a:	b082      	sub	sp, #8
 801826c:	af00      	add	r7, sp, #0
 801826e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8018270:	6879      	ldr	r1, [r7, #4]
 8018272:	4805      	ldr	r0, [pc, #20]	; (8018288 <TlUserEvtReceived+0x20>)
 8018274:	f000 fae6 	bl	8018844 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8018278:	4803      	ldr	r0, [pc, #12]	; (8018288 <TlUserEvtReceived+0x20>)
 801827a:	f7e9 fc75 	bl	8001b68 <shci_notify_asynch_evt>

  return;
 801827e:	bf00      	nop
}
 8018280:	3708      	adds	r7, #8
 8018282:	46bd      	mov	sp, r7
 8018284:	bd80      	pop	{r7, pc}
 8018286:	bf00      	nop
 8018288:	20000358 	.word	0x20000358

0801828c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 801828c:	b480      	push	{r7}
 801828e:	b083      	sub	sp, #12
 8018290:	af00      	add	r7, sp, #0
 8018292:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	4a05      	ldr	r2, [pc, #20]	; (80182ac <shci_register_io_bus+0x20>)
 8018298:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	4a04      	ldr	r2, [pc, #16]	; (80182b0 <shci_register_io_bus+0x24>)
 801829e:	611a      	str	r2, [r3, #16]

  return;
 80182a0:	bf00      	nop
}
 80182a2:	370c      	adds	r7, #12
 80182a4:	46bd      	mov	sp, r7
 80182a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182aa:	4770      	bx	lr
 80182ac:	08018449 	.word	0x08018449
 80182b0:	0801849d 	.word	0x0801849d

080182b4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80182b4:	b580      	push	{r7, lr}
 80182b6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80182b8:	f001 fdb2 	bl	8019e20 <HW_IPCC_Enable>

  return;
 80182bc:	bf00      	nop
}
 80182be:	bd80      	pop	{r7, pc}

080182c0 <TL_Init>:


void TL_Init( void )
{
 80182c0:	b580      	push	{r7, lr}
 80182c2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80182c4:	4b10      	ldr	r3, [pc, #64]	; (8018308 <TL_Init+0x48>)
 80182c6:	4a11      	ldr	r2, [pc, #68]	; (801830c <TL_Init+0x4c>)
 80182c8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80182ca:	4b0f      	ldr	r3, [pc, #60]	; (8018308 <TL_Init+0x48>)
 80182cc:	4a10      	ldr	r2, [pc, #64]	; (8018310 <TL_Init+0x50>)
 80182ce:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80182d0:	4b0d      	ldr	r3, [pc, #52]	; (8018308 <TL_Init+0x48>)
 80182d2:	4a10      	ldr	r2, [pc, #64]	; (8018314 <TL_Init+0x54>)
 80182d4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80182d6:	4b0c      	ldr	r3, [pc, #48]	; (8018308 <TL_Init+0x48>)
 80182d8:	4a0f      	ldr	r2, [pc, #60]	; (8018318 <TL_Init+0x58>)
 80182da:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80182dc:	4b0a      	ldr	r3, [pc, #40]	; (8018308 <TL_Init+0x48>)
 80182de:	4a0f      	ldr	r2, [pc, #60]	; (801831c <TL_Init+0x5c>)
 80182e0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80182e2:	4b09      	ldr	r3, [pc, #36]	; (8018308 <TL_Init+0x48>)
 80182e4:	4a0e      	ldr	r2, [pc, #56]	; (8018320 <TL_Init+0x60>)
 80182e6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80182e8:	4b07      	ldr	r3, [pc, #28]	; (8018308 <TL_Init+0x48>)
 80182ea:	4a0e      	ldr	r2, [pc, #56]	; (8018324 <TL_Init+0x64>)
 80182ec:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80182ee:	4b06      	ldr	r3, [pc, #24]	; (8018308 <TL_Init+0x48>)
 80182f0:	4a0d      	ldr	r2, [pc, #52]	; (8018328 <TL_Init+0x68>)
 80182f2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80182f4:	4b04      	ldr	r3, [pc, #16]	; (8018308 <TL_Init+0x48>)
 80182f6:	4a0d      	ldr	r2, [pc, #52]	; (801832c <TL_Init+0x6c>)
 80182f8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80182fa:	4b03      	ldr	r3, [pc, #12]	; (8018308 <TL_Init+0x48>)
 80182fc:	4a0c      	ldr	r2, [pc, #48]	; (8018330 <TL_Init+0x70>)
 80182fe:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8018300:	f001 fda2 	bl	8019e48 <HW_IPCC_Init>

  return;
 8018304:	bf00      	nop
}
 8018306:	bd80      	pop	{r7, pc}
 8018308:	20030000 	.word	0x20030000
 801830c:	20030028 	.word	0x20030028
 8018310:	20030048 	.word	0x20030048
 8018314:	20030058 	.word	0x20030058
 8018318:	20030068 	.word	0x20030068
 801831c:	20030070 	.word	0x20030070
 8018320:	20030078 	.word	0x20030078
 8018324:	20030080 	.word	0x20030080
 8018328:	2003009c 	.word	0x2003009c
 801832c:	200300a0 	.word	0x200300a0
 8018330:	200300ac 	.word	0x200300ac

08018334 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8018334:	b580      	push	{r7, lr}
 8018336:	b084      	sub	sp, #16
 8018338:	af00      	add	r7, sp, #0
 801833a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8018340:	4811      	ldr	r0, [pc, #68]	; (8018388 <TL_BLE_Init+0x54>)
 8018342:	f000 fa27 	bl	8018794 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8018346:	4b11      	ldr	r3, [pc, #68]	; (801838c <TL_BLE_Init+0x58>)
 8018348:	685b      	ldr	r3, [r3, #4]
 801834a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	689a      	ldr	r2, [r3, #8]
 8018350:	68bb      	ldr	r3, [r7, #8]
 8018352:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	68da      	ldr	r2, [r3, #12]
 8018358:	68bb      	ldr	r3, [r7, #8]
 801835a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 801835c:	68bb      	ldr	r3, [r7, #8]
 801835e:	4a0c      	ldr	r2, [pc, #48]	; (8018390 <TL_BLE_Init+0x5c>)
 8018360:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8018362:	68bb      	ldr	r3, [r7, #8]
 8018364:	4a08      	ldr	r2, [pc, #32]	; (8018388 <TL_BLE_Init+0x54>)
 8018366:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8018368:	f001 fd84 	bl	8019e74 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	4a08      	ldr	r2, [pc, #32]	; (8018394 <TL_BLE_Init+0x60>)
 8018372:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	685b      	ldr	r3, [r3, #4]
 8018378:	4a07      	ldr	r2, [pc, #28]	; (8018398 <TL_BLE_Init+0x64>)
 801837a:	6013      	str	r3, [r2, #0]

  return 0;
 801837c:	2300      	movs	r3, #0
}
 801837e:	4618      	mov	r0, r3
 8018380:	3710      	adds	r7, #16
 8018382:	46bd      	mov	sp, r7
 8018384:	bd80      	pop	{r7, pc}
 8018386:	bf00      	nop
 8018388:	200300c8 	.word	0x200300c8
 801838c:	20030000 	.word	0x20030000
 8018390:	20030a58 	.word	0x20030a58
 8018394:	200015b8 	.word	0x200015b8
 8018398:	200015bc 	.word	0x200015bc

0801839c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 801839c:	b580      	push	{r7, lr}
 801839e:	b082      	sub	sp, #8
 80183a0:	af00      	add	r7, sp, #0
 80183a2:	6078      	str	r0, [r7, #4]
 80183a4:	460b      	mov	r3, r1
 80183a6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80183a8:	4b09      	ldr	r3, [pc, #36]	; (80183d0 <TL_BLE_SendCmd+0x34>)
 80183aa:	685b      	ldr	r3, [r3, #4]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	2201      	movs	r2, #1
 80183b0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80183b2:	4b07      	ldr	r3, [pc, #28]	; (80183d0 <TL_BLE_SendCmd+0x34>)
 80183b4:	685b      	ldr	r3, [r3, #4]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	4619      	mov	r1, r3
 80183ba:	2001      	movs	r0, #1
 80183bc:	f000 f96c 	bl	8018698 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80183c0:	f001 fd62 	bl	8019e88 <HW_IPCC_BLE_SendCmd>

  return 0;
 80183c4:	2300      	movs	r3, #0
}
 80183c6:	4618      	mov	r0, r3
 80183c8:	3708      	adds	r7, #8
 80183ca:	46bd      	mov	sp, r7
 80183cc:	bd80      	pop	{r7, pc}
 80183ce:	bf00      	nop
 80183d0:	20030000 	.word	0x20030000

080183d4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80183d4:	b580      	push	{r7, lr}
 80183d6:	b082      	sub	sp, #8
 80183d8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80183da:	e01c      	b.n	8018416 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80183dc:	1d3b      	adds	r3, r7, #4
 80183de:	4619      	mov	r1, r3
 80183e0:	4812      	ldr	r0, [pc, #72]	; (801842c <HW_IPCC_BLE_RxEvtNot+0x58>)
 80183e2:	f000 fa76 	bl	80188d2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	7a5b      	ldrb	r3, [r3, #9]
 80183ea:	2b0f      	cmp	r3, #15
 80183ec:	d003      	beq.n	80183f6 <HW_IPCC_BLE_RxEvtNot+0x22>
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	7a5b      	ldrb	r3, [r3, #9]
 80183f2:	2b0e      	cmp	r3, #14
 80183f4:	d105      	bne.n	8018402 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	4619      	mov	r1, r3
 80183fa:	2002      	movs	r0, #2
 80183fc:	f000 f94c 	bl	8018698 <OutputDbgTrace>
 8018400:	e004      	b.n	801840c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	4619      	mov	r1, r3
 8018406:	2003      	movs	r0, #3
 8018408:	f000 f946 	bl	8018698 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 801840c:	4b08      	ldr	r3, [pc, #32]	; (8018430 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	687a      	ldr	r2, [r7, #4]
 8018412:	4610      	mov	r0, r2
 8018414:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8018416:	4805      	ldr	r0, [pc, #20]	; (801842c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8018418:	f000 f9cc 	bl	80187b4 <LST_is_empty>
 801841c:	4603      	mov	r3, r0
 801841e:	2b00      	cmp	r3, #0
 8018420:	d0dc      	beq.n	80183dc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8018422:	bf00      	nop
}
 8018424:	3708      	adds	r7, #8
 8018426:	46bd      	mov	sp, r7
 8018428:	bd80      	pop	{r7, pc}
 801842a:	bf00      	nop
 801842c:	200300c8 	.word	0x200300c8
 8018430:	200015b8 	.word	0x200015b8

08018434 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8018434:	b580      	push	{r7, lr}
 8018436:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8018438:	4b02      	ldr	r3, [pc, #8]	; (8018444 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	4798      	blx	r3

  return;
 801843e:	bf00      	nop
}
 8018440:	bd80      	pop	{r7, pc}
 8018442:	bf00      	nop
 8018444:	200015bc 	.word	0x200015bc

08018448 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8018448:	b580      	push	{r7, lr}
 801844a:	b084      	sub	sp, #16
 801844c:	af00      	add	r7, sp, #0
 801844e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8018454:	480d      	ldr	r0, [pc, #52]	; (801848c <TL_SYS_Init+0x44>)
 8018456:	f000 f99d 	bl	8018794 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 801845a:	4b0d      	ldr	r3, [pc, #52]	; (8018490 <TL_SYS_Init+0x48>)
 801845c:	68db      	ldr	r3, [r3, #12]
 801845e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	689a      	ldr	r2, [r3, #8]
 8018464:	68bb      	ldr	r3, [r7, #8]
 8018466:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8018468:	68bb      	ldr	r3, [r7, #8]
 801846a:	4a08      	ldr	r2, [pc, #32]	; (801848c <TL_SYS_Init+0x44>)
 801846c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801846e:	f001 fd2d 	bl	8019ecc <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	4a07      	ldr	r2, [pc, #28]	; (8018494 <TL_SYS_Init+0x4c>)
 8018478:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 801847a:	68fb      	ldr	r3, [r7, #12]
 801847c:	685b      	ldr	r3, [r3, #4]
 801847e:	4a06      	ldr	r2, [pc, #24]	; (8018498 <TL_SYS_Init+0x50>)
 8018480:	6013      	str	r3, [r2, #0]

  return 0;
 8018482:	2300      	movs	r3, #0
}
 8018484:	4618      	mov	r0, r3
 8018486:	3710      	adds	r7, #16
 8018488:	46bd      	mov	sp, r7
 801848a:	bd80      	pop	{r7, pc}
 801848c:	200300d0 	.word	0x200300d0
 8018490:	20030000 	.word	0x20030000
 8018494:	200015c0 	.word	0x200015c0
 8018498:	200015c4 	.word	0x200015c4

0801849c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 801849c:	b580      	push	{r7, lr}
 801849e:	b082      	sub	sp, #8
 80184a0:	af00      	add	r7, sp, #0
 80184a2:	6078      	str	r0, [r7, #4]
 80184a4:	460b      	mov	r3, r1
 80184a6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80184a8:	4b09      	ldr	r3, [pc, #36]	; (80184d0 <TL_SYS_SendCmd+0x34>)
 80184aa:	68db      	ldr	r3, [r3, #12]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	2210      	movs	r2, #16
 80184b0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80184b2:	4b07      	ldr	r3, [pc, #28]	; (80184d0 <TL_SYS_SendCmd+0x34>)
 80184b4:	68db      	ldr	r3, [r3, #12]
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	4619      	mov	r1, r3
 80184ba:	2004      	movs	r0, #4
 80184bc:	f000 f8ec 	bl	8018698 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80184c0:	f001 fd0e 	bl	8019ee0 <HW_IPCC_SYS_SendCmd>

  return 0;
 80184c4:	2300      	movs	r3, #0
}
 80184c6:	4618      	mov	r0, r3
 80184c8:	3708      	adds	r7, #8
 80184ca:	46bd      	mov	sp, r7
 80184cc:	bd80      	pop	{r7, pc}
 80184ce:	bf00      	nop
 80184d0:	20030000 	.word	0x20030000

080184d4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80184d4:	b580      	push	{r7, lr}
 80184d6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80184d8:	4b07      	ldr	r3, [pc, #28]	; (80184f8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80184da:	68db      	ldr	r3, [r3, #12]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	4619      	mov	r1, r3
 80184e0:	2005      	movs	r0, #5
 80184e2:	f000 f8d9 	bl	8018698 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80184e6:	4b05      	ldr	r3, [pc, #20]	; (80184fc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	4a03      	ldr	r2, [pc, #12]	; (80184f8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80184ec:	68d2      	ldr	r2, [r2, #12]
 80184ee:	6812      	ldr	r2, [r2, #0]
 80184f0:	4610      	mov	r0, r2
 80184f2:	4798      	blx	r3

  return;
 80184f4:	bf00      	nop
}
 80184f6:	bd80      	pop	{r7, pc}
 80184f8:	20030000 	.word	0x20030000
 80184fc:	200015c0 	.word	0x200015c0

08018500 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8018500:	b580      	push	{r7, lr}
 8018502:	b082      	sub	sp, #8
 8018504:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8018506:	e00e      	b.n	8018526 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8018508:	1d3b      	adds	r3, r7, #4
 801850a:	4619      	mov	r1, r3
 801850c:	480b      	ldr	r0, [pc, #44]	; (801853c <HW_IPCC_SYS_EvtNot+0x3c>)
 801850e:	f000 f9e0 	bl	80188d2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	4619      	mov	r1, r3
 8018516:	2006      	movs	r0, #6
 8018518:	f000 f8be 	bl	8018698 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 801851c:	4b08      	ldr	r3, [pc, #32]	; (8018540 <HW_IPCC_SYS_EvtNot+0x40>)
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	687a      	ldr	r2, [r7, #4]
 8018522:	4610      	mov	r0, r2
 8018524:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8018526:	4805      	ldr	r0, [pc, #20]	; (801853c <HW_IPCC_SYS_EvtNot+0x3c>)
 8018528:	f000 f944 	bl	80187b4 <LST_is_empty>
 801852c:	4603      	mov	r3, r0
 801852e:	2b00      	cmp	r3, #0
 8018530:	d0ea      	beq.n	8018508 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8018532:	bf00      	nop
}
 8018534:	3708      	adds	r7, #8
 8018536:	46bd      	mov	sp, r7
 8018538:	bd80      	pop	{r7, pc}
 801853a:	bf00      	nop
 801853c:	200300d0 	.word	0x200300d0
 8018540:	200015c4 	.word	0x200015c4

08018544 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8018544:	b580      	push	{r7, lr}
 8018546:	b082      	sub	sp, #8
 8018548:	af00      	add	r7, sp, #0
 801854a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 801854c:	4817      	ldr	r0, [pc, #92]	; (80185ac <TL_MM_Init+0x68>)
 801854e:	f000 f921 	bl	8018794 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8018552:	4817      	ldr	r0, [pc, #92]	; (80185b0 <TL_MM_Init+0x6c>)
 8018554:	f000 f91e 	bl	8018794 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8018558:	4b16      	ldr	r3, [pc, #88]	; (80185b4 <TL_MM_Init+0x70>)
 801855a:	691b      	ldr	r3, [r3, #16]
 801855c:	4a16      	ldr	r2, [pc, #88]	; (80185b8 <TL_MM_Init+0x74>)
 801855e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8018560:	4b15      	ldr	r3, [pc, #84]	; (80185b8 <TL_MM_Init+0x74>)
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	687a      	ldr	r2, [r7, #4]
 8018566:	6892      	ldr	r2, [r2, #8]
 8018568:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801856a:	4b13      	ldr	r3, [pc, #76]	; (80185b8 <TL_MM_Init+0x74>)
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	687a      	ldr	r2, [r7, #4]
 8018570:	68d2      	ldr	r2, [r2, #12]
 8018572:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8018574:	4b10      	ldr	r3, [pc, #64]	; (80185b8 <TL_MM_Init+0x74>)
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	4a0c      	ldr	r2, [pc, #48]	; (80185ac <TL_MM_Init+0x68>)
 801857a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 801857c:	4b0e      	ldr	r3, [pc, #56]	; (80185b8 <TL_MM_Init+0x74>)
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	687a      	ldr	r2, [r7, #4]
 8018582:	6812      	ldr	r2, [r2, #0]
 8018584:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8018586:	4b0c      	ldr	r3, [pc, #48]	; (80185b8 <TL_MM_Init+0x74>)
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	687a      	ldr	r2, [r7, #4]
 801858c:	6852      	ldr	r2, [r2, #4]
 801858e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8018590:	4b09      	ldr	r3, [pc, #36]	; (80185b8 <TL_MM_Init+0x74>)
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	687a      	ldr	r2, [r7, #4]
 8018596:	6912      	ldr	r2, [r2, #16]
 8018598:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 801859a:	4b07      	ldr	r3, [pc, #28]	; (80185b8 <TL_MM_Init+0x74>)
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	687a      	ldr	r2, [r7, #4]
 80185a0:	6952      	ldr	r2, [r2, #20]
 80185a2:	619a      	str	r2, [r3, #24]

  return;
 80185a4:	bf00      	nop
}
 80185a6:	3708      	adds	r7, #8
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bd80      	pop	{r7, pc}
 80185ac:	200300b8 	.word	0x200300b8
 80185b0:	200015b0 	.word	0x200015b0
 80185b4:	20030000 	.word	0x20030000
 80185b8:	200015c8 	.word	0x200015c8

080185bc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b082      	sub	sp, #8
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80185c4:	6879      	ldr	r1, [r7, #4]
 80185c6:	4807      	ldr	r0, [pc, #28]	; (80185e4 <TL_MM_EvtDone+0x28>)
 80185c8:	f000 f93c 	bl	8018844 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80185cc:	6879      	ldr	r1, [r7, #4]
 80185ce:	2000      	movs	r0, #0
 80185d0:	f000 f862 	bl	8018698 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80185d4:	4804      	ldr	r0, [pc, #16]	; (80185e8 <TL_MM_EvtDone+0x2c>)
 80185d6:	f001 fca9 	bl	8019f2c <HW_IPCC_MM_SendFreeBuf>

  return;
 80185da:	bf00      	nop
}
 80185dc:	3708      	adds	r7, #8
 80185de:	46bd      	mov	sp, r7
 80185e0:	bd80      	pop	{r7, pc}
 80185e2:	bf00      	nop
 80185e4:	200015b0 	.word	0x200015b0
 80185e8:	080185ed 	.word	0x080185ed

080185ec <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	b082      	sub	sp, #8
 80185f0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80185f2:	e00c      	b.n	801860e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80185f4:	1d3b      	adds	r3, r7, #4
 80185f6:	4619      	mov	r1, r3
 80185f8:	480a      	ldr	r0, [pc, #40]	; (8018624 <SendFreeBuf+0x38>)
 80185fa:	f000 f96a 	bl	80188d2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80185fe:	4b0a      	ldr	r3, [pc, #40]	; (8018628 <SendFreeBuf+0x3c>)
 8018600:	691b      	ldr	r3, [r3, #16]
 8018602:	691b      	ldr	r3, [r3, #16]
 8018604:	687a      	ldr	r2, [r7, #4]
 8018606:	4611      	mov	r1, r2
 8018608:	4618      	mov	r0, r3
 801860a:	f000 f91b 	bl	8018844 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801860e:	4805      	ldr	r0, [pc, #20]	; (8018624 <SendFreeBuf+0x38>)
 8018610:	f000 f8d0 	bl	80187b4 <LST_is_empty>
 8018614:	4603      	mov	r3, r0
 8018616:	2b00      	cmp	r3, #0
 8018618:	d0ec      	beq.n	80185f4 <SendFreeBuf+0x8>
  }

  return;
 801861a:	bf00      	nop
}
 801861c:	3708      	adds	r7, #8
 801861e:	46bd      	mov	sp, r7
 8018620:	bd80      	pop	{r7, pc}
 8018622:	bf00      	nop
 8018624:	200015b0 	.word	0x200015b0
 8018628:	20030000 	.word	0x20030000

0801862c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 801862c:	b580      	push	{r7, lr}
 801862e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8018630:	4805      	ldr	r0, [pc, #20]	; (8018648 <TL_TRACES_Init+0x1c>)
 8018632:	f000 f8af 	bl	8018794 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8018636:	4b05      	ldr	r3, [pc, #20]	; (801864c <TL_TRACES_Init+0x20>)
 8018638:	695b      	ldr	r3, [r3, #20]
 801863a:	4a03      	ldr	r2, [pc, #12]	; (8018648 <TL_TRACES_Init+0x1c>)
 801863c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801863e:	f001 fcab 	bl	8019f98 <HW_IPCC_TRACES_Init>

  return;
 8018642:	bf00      	nop
}
 8018644:	bd80      	pop	{r7, pc}
 8018646:	bf00      	nop
 8018648:	200300c0 	.word	0x200300c0
 801864c:	20030000 	.word	0x20030000

08018650 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8018650:	b580      	push	{r7, lr}
 8018652:	b082      	sub	sp, #8
 8018654:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8018656:	e008      	b.n	801866a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8018658:	1d3b      	adds	r3, r7, #4
 801865a:	4619      	mov	r1, r3
 801865c:	4808      	ldr	r0, [pc, #32]	; (8018680 <HW_IPCC_TRACES_EvtNot+0x30>)
 801865e:	f000 f938 	bl	80188d2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	4618      	mov	r0, r3
 8018666:	f000 f80d 	bl	8018684 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801866a:	4805      	ldr	r0, [pc, #20]	; (8018680 <HW_IPCC_TRACES_EvtNot+0x30>)
 801866c:	f000 f8a2 	bl	80187b4 <LST_is_empty>
 8018670:	4603      	mov	r3, r0
 8018672:	2b00      	cmp	r3, #0
 8018674:	d0f0      	beq.n	8018658 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8018676:	bf00      	nop
}
 8018678:	3708      	adds	r7, #8
 801867a:	46bd      	mov	sp, r7
 801867c:	bd80      	pop	{r7, pc}
 801867e:	bf00      	nop
 8018680:	200300c0 	.word	0x200300c0

08018684 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8018684:	b480      	push	{r7}
 8018686:	b083      	sub	sp, #12
 8018688:	af00      	add	r7, sp, #0
 801868a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 801868c:	bf00      	nop
 801868e:	370c      	adds	r7, #12
 8018690:	46bd      	mov	sp, r7
 8018692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018696:	4770      	bx	lr

08018698 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8018698:	b480      	push	{r7}
 801869a:	b085      	sub	sp, #20
 801869c:	af00      	add	r7, sp, #0
 801869e:	4603      	mov	r3, r0
 80186a0:	6039      	str	r1, [r7, #0]
 80186a2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80186a4:	79fb      	ldrb	r3, [r7, #7]
 80186a6:	2b06      	cmp	r3, #6
 80186a8:	d845      	bhi.n	8018736 <OutputDbgTrace+0x9e>
 80186aa:	a201      	add	r2, pc, #4	; (adr r2, 80186b0 <OutputDbgTrace+0x18>)
 80186ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186b0:	080186cd 	.word	0x080186cd
 80186b4:	080186f1 	.word	0x080186f1
 80186b8:	080186f7 	.word	0x080186f7
 80186bc:	0801870b 	.word	0x0801870b
 80186c0:	08018717 	.word	0x08018717
 80186c4:	0801871d 	.word	0x0801871d
 80186c8:	0801872b 	.word	0x0801872b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80186cc:	683b      	ldr	r3, [r7, #0]
 80186ce:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	7a5b      	ldrb	r3, [r3, #9]
 80186d4:	2bff      	cmp	r3, #255	; 0xff
 80186d6:	d005      	beq.n	80186e4 <OutputDbgTrace+0x4c>
 80186d8:	2bff      	cmp	r3, #255	; 0xff
 80186da:	dc05      	bgt.n	80186e8 <OutputDbgTrace+0x50>
 80186dc:	2b0e      	cmp	r3, #14
 80186de:	d005      	beq.n	80186ec <OutputDbgTrace+0x54>
 80186e0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80186e2:	e001      	b.n	80186e8 <OutputDbgTrace+0x50>
          break;
 80186e4:	bf00      	nop
 80186e6:	e027      	b.n	8018738 <OutputDbgTrace+0xa0>
          break;
 80186e8:	bf00      	nop
 80186ea:	e025      	b.n	8018738 <OutputDbgTrace+0xa0>
          break;
 80186ec:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80186ee:	e023      	b.n	8018738 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80186f0:	683b      	ldr	r3, [r7, #0]
 80186f2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80186f4:	e020      	b.n	8018738 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80186f6:	683b      	ldr	r3, [r7, #0]
 80186f8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	7a5b      	ldrb	r3, [r3, #9]
 80186fe:	2b0e      	cmp	r3, #14
 8018700:	d001      	beq.n	8018706 <OutputDbgTrace+0x6e>
 8018702:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8018704:	e000      	b.n	8018708 <OutputDbgTrace+0x70>
          break;
 8018706:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8018708:	e016      	b.n	8018738 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801870a:	683b      	ldr	r3, [r7, #0]
 801870c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	7a5b      	ldrb	r3, [r3, #9]
 8018712:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8018714:	e010      	b.n	8018738 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8018716:	683b      	ldr	r3, [r7, #0]
 8018718:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801871a:	e00d      	b.n	8018738 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801871c:	683b      	ldr	r3, [r7, #0]
 801871e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	7a5b      	ldrb	r3, [r3, #9]
 8018724:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8018726:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8018728:	e006      	b.n	8018738 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801872a:	683b      	ldr	r3, [r7, #0]
 801872c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	7a5b      	ldrb	r3, [r3, #9]
 8018732:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8018734:	e000      	b.n	8018738 <OutputDbgTrace+0xa0>

    default:
      break;
 8018736:	bf00      	nop
  }

  return;
 8018738:	bf00      	nop
}
 801873a:	3714      	adds	r7, #20
 801873c:	46bd      	mov	sp, r7
 801873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018742:	4770      	bx	lr

08018744 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8018744:	b480      	push	{r7}
 8018746:	b085      	sub	sp, #20
 8018748:	af00      	add	r7, sp, #0
 801874a:	4603      	mov	r3, r0
 801874c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 801874e:	4b0f      	ldr	r3, [pc, #60]	; (801878c <OTP_Read+0x48>)
 8018750:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8018752:	e002      	b.n	801875a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	3b08      	subs	r3, #8
 8018758:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	3307      	adds	r3, #7
 801875e:	781b      	ldrb	r3, [r3, #0]
 8018760:	79fa      	ldrb	r2, [r7, #7]
 8018762:	429a      	cmp	r2, r3
 8018764:	d003      	beq.n	801876e <OTP_Read+0x2a>
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	4a09      	ldr	r2, [pc, #36]	; (8018790 <OTP_Read+0x4c>)
 801876a:	4293      	cmp	r3, r2
 801876c:	d1f2      	bne.n	8018754 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	3307      	adds	r3, #7
 8018772:	781b      	ldrb	r3, [r3, #0]
 8018774:	79fa      	ldrb	r2, [r7, #7]
 8018776:	429a      	cmp	r2, r3
 8018778:	d001      	beq.n	801877e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 801877a:	2300      	movs	r3, #0
 801877c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 801877e:	68fb      	ldr	r3, [r7, #12]
}
 8018780:	4618      	mov	r0, r3
 8018782:	3714      	adds	r7, #20
 8018784:	46bd      	mov	sp, r7
 8018786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801878a:	4770      	bx	lr
 801878c:	1fff73f8 	.word	0x1fff73f8
 8018790:	1fff7000 	.word	0x1fff7000

08018794 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8018794:	b480      	push	{r7}
 8018796:	b083      	sub	sp, #12
 8018798:	af00      	add	r7, sp, #0
 801879a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	687a      	ldr	r2, [r7, #4]
 80187a0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	687a      	ldr	r2, [r7, #4]
 80187a6:	605a      	str	r2, [r3, #4]
}
 80187a8:	bf00      	nop
 80187aa:	370c      	adds	r7, #12
 80187ac:	46bd      	mov	sp, r7
 80187ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187b2:	4770      	bx	lr

080187b4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80187b4:	b480      	push	{r7}
 80187b6:	b087      	sub	sp, #28
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187bc:	f3ef 8310 	mrs	r3, PRIMASK
 80187c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80187c2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80187c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80187c6:	b672      	cpsid	i
}
 80187c8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	687a      	ldr	r2, [r7, #4]
 80187d0:	429a      	cmp	r2, r3
 80187d2:	d102      	bne.n	80187da <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80187d4:	2301      	movs	r3, #1
 80187d6:	75fb      	strb	r3, [r7, #23]
 80187d8:	e001      	b.n	80187de <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80187da:	2300      	movs	r3, #0
 80187dc:	75fb      	strb	r3, [r7, #23]
 80187de:	693b      	ldr	r3, [r7, #16]
 80187e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187e2:	68bb      	ldr	r3, [r7, #8]
 80187e4:	f383 8810 	msr	PRIMASK, r3
}
 80187e8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80187ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80187ec:	4618      	mov	r0, r3
 80187ee:	371c      	adds	r7, #28
 80187f0:	46bd      	mov	sp, r7
 80187f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f6:	4770      	bx	lr

080187f8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80187f8:	b480      	push	{r7}
 80187fa:	b087      	sub	sp, #28
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
 8018800:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018802:	f3ef 8310 	mrs	r3, PRIMASK
 8018806:	60fb      	str	r3, [r7, #12]
  return(result);
 8018808:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801880a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801880c:	b672      	cpsid	i
}
 801880e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	681a      	ldr	r2, [r3, #0]
 8018814:	683b      	ldr	r3, [r7, #0]
 8018816:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8018818:	683b      	ldr	r3, [r7, #0]
 801881a:	687a      	ldr	r2, [r7, #4]
 801881c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	683a      	ldr	r2, [r7, #0]
 8018822:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8018824:	683b      	ldr	r3, [r7, #0]
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	683a      	ldr	r2, [r7, #0]
 801882a:	605a      	str	r2, [r3, #4]
 801882c:	697b      	ldr	r3, [r7, #20]
 801882e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018830:	693b      	ldr	r3, [r7, #16]
 8018832:	f383 8810 	msr	PRIMASK, r3
}
 8018836:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8018838:	bf00      	nop
 801883a:	371c      	adds	r7, #28
 801883c:	46bd      	mov	sp, r7
 801883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018842:	4770      	bx	lr

08018844 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8018844:	b480      	push	{r7}
 8018846:	b087      	sub	sp, #28
 8018848:	af00      	add	r7, sp, #0
 801884a:	6078      	str	r0, [r7, #4]
 801884c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801884e:	f3ef 8310 	mrs	r3, PRIMASK
 8018852:	60fb      	str	r3, [r7, #12]
  return(result);
 8018854:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8018856:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018858:	b672      	cpsid	i
}
 801885a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 801885c:	683b      	ldr	r3, [r7, #0]
 801885e:	687a      	ldr	r2, [r7, #4]
 8018860:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	685a      	ldr	r2, [r3, #4]
 8018866:	683b      	ldr	r3, [r7, #0]
 8018868:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	683a      	ldr	r2, [r7, #0]
 801886e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8018870:	683b      	ldr	r3, [r7, #0]
 8018872:	685b      	ldr	r3, [r3, #4]
 8018874:	683a      	ldr	r2, [r7, #0]
 8018876:	601a      	str	r2, [r3, #0]
 8018878:	697b      	ldr	r3, [r7, #20]
 801887a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801887c:	693b      	ldr	r3, [r7, #16]
 801887e:	f383 8810 	msr	PRIMASK, r3
}
 8018882:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8018884:	bf00      	nop
 8018886:	371c      	adds	r7, #28
 8018888:	46bd      	mov	sp, r7
 801888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801888e:	4770      	bx	lr

08018890 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8018890:	b480      	push	{r7}
 8018892:	b087      	sub	sp, #28
 8018894:	af00      	add	r7, sp, #0
 8018896:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018898:	f3ef 8310 	mrs	r3, PRIMASK
 801889c:	60fb      	str	r3, [r7, #12]
  return(result);
 801889e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80188a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80188a2:	b672      	cpsid	i
}
 80188a4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	685b      	ldr	r3, [r3, #4]
 80188aa:	687a      	ldr	r2, [r7, #4]
 80188ac:	6812      	ldr	r2, [r2, #0]
 80188ae:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	687a      	ldr	r2, [r7, #4]
 80188b6:	6852      	ldr	r2, [r2, #4]
 80188b8:	605a      	str	r2, [r3, #4]
 80188ba:	697b      	ldr	r3, [r7, #20]
 80188bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188be:	693b      	ldr	r3, [r7, #16]
 80188c0:	f383 8810 	msr	PRIMASK, r3
}
 80188c4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80188c6:	bf00      	nop
 80188c8:	371c      	adds	r7, #28
 80188ca:	46bd      	mov	sp, r7
 80188cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188d0:	4770      	bx	lr

080188d2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80188d2:	b580      	push	{r7, lr}
 80188d4:	b086      	sub	sp, #24
 80188d6:	af00      	add	r7, sp, #0
 80188d8:	6078      	str	r0, [r7, #4]
 80188da:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188dc:	f3ef 8310 	mrs	r3, PRIMASK
 80188e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80188e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80188e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80188e6:	b672      	cpsid	i
}
 80188e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	681a      	ldr	r2, [r3, #0]
 80188ee:	683b      	ldr	r3, [r7, #0]
 80188f0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	4618      	mov	r0, r3
 80188f8:	f7ff ffca 	bl	8018890 <LST_remove_node>
 80188fc:	697b      	ldr	r3, [r7, #20]
 80188fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018900:	693b      	ldr	r3, [r7, #16]
 8018902:	f383 8810 	msr	PRIMASK, r3
}
 8018906:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8018908:	bf00      	nop
 801890a:	3718      	adds	r7, #24
 801890c:	46bd      	mov	sp, r7
 801890e:	bd80      	pop	{r7, pc}

08018910 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8018910:	b580      	push	{r7, lr}
 8018912:	b082      	sub	sp, #8
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8018918:	6878      	ldr	r0, [r7, #4]
 801891a:	f7e9 f8e4 	bl	8001ae6 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 801891e:	bf00      	nop
 8018920:	3708      	adds	r7, #8
 8018922:	46bd      	mov	sp, r7
 8018924:	bd80      	pop	{r7, pc}

08018926 <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8018926:	b580      	push	{r7, lr}
 8018928:	b082      	sub	sp, #8
 801892a:	af00      	add	r7, sp, #0
 801892c:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 801892e:	e002      	b.n	8018936 <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8018930:	2001      	movs	r0, #1
 8018932:	f7ff ffed 	bl	8018910 <SPIF_Delay>
  while (Handle->Lock)
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	7b1b      	ldrb	r3, [r3, #12]
 801893a:	2b00      	cmp	r3, #0
 801893c:	d1f8      	bne.n	8018930 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	2201      	movs	r2, #1
 8018942:	731a      	strb	r2, [r3, #12]
}
 8018944:	bf00      	nop
 8018946:	3708      	adds	r7, #8
 8018948:	46bd      	mov	sp, r7
 801894a:	bd80      	pop	{r7, pc}

0801894c <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 801894c:	b480      	push	{r7}
 801894e:	b083      	sub	sp, #12
 8018950:	af00      	add	r7, sp, #0
 8018952:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	2200      	movs	r2, #0
 8018958:	731a      	strb	r2, [r3, #12]
}
 801895a:	bf00      	nop
 801895c:	370c      	adds	r7, #12
 801895e:	46bd      	mov	sp, r7
 8018960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018964:	4770      	bx	lr

08018966 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8018966:	b580      	push	{r7, lr}
 8018968:	b084      	sub	sp, #16
 801896a:	af00      	add	r7, sp, #0
 801896c:	6078      	str	r0, [r7, #4]
 801896e:	460b      	mov	r3, r1
 8018970:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	6858      	ldr	r0, [r3, #4]
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	691b      	ldr	r3, [r3, #16]
 801897a:	b29b      	uxth	r3, r3
 801897c:	78fa      	ldrb	r2, [r7, #3]
 801897e:	4619      	mov	r1, r3
 8018980:	f7f1 fce8 	bl	800a354 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 8018984:	2300      	movs	r3, #0
 8018986:	60fb      	str	r3, [r7, #12]
 8018988:	e002      	b.n	8018990 <SPIF_CsPin+0x2a>
 801898a:	68fb      	ldr	r3, [r7, #12]
 801898c:	3301      	adds	r3, #1
 801898e:	60fb      	str	r3, [r7, #12]
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	2b09      	cmp	r3, #9
 8018994:	ddf9      	ble.n	801898a <SPIF_CsPin+0x24>
}
 8018996:	bf00      	nop
 8018998:	bf00      	nop
 801899a:	3710      	adds	r7, #16
 801899c:	46bd      	mov	sp, r7
 801899e:	bd80      	pop	{r7, pc}

080189a0 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b086      	sub	sp, #24
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	60f8      	str	r0, [r7, #12]
 80189a8:	60b9      	str	r1, [r7, #8]
 80189aa:	607a      	str	r2, [r7, #4]
 80189ac:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80189ae:	2300      	movs	r3, #0
 80189b0:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 80189b2:	f7ef fc57 	bl	8008264 <HAL_GetTick>
 80189b6:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_TransmitReceive_DMA(Handle->HSpi, Tx, Rx, Size) != HAL_OK)
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	6818      	ldr	r0, [r3, #0]
 80189bc:	683b      	ldr	r3, [r7, #0]
 80189be:	b29b      	uxth	r3, r3
 80189c0:	687a      	ldr	r2, [r7, #4]
 80189c2:	68b9      	ldr	r1, [r7, #8]
 80189c4:	f7f6 fb9a 	bl	800f0fc <HAL_SPI_TransmitReceive_DMA>
 80189c8:	4603      	mov	r3, r0
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d11a      	bne.n	8018a04 <SPIF_TransmitReceive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 80189ce:	2001      	movs	r0, #1
 80189d0:	f7ff ff9e 	bl	8018910 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 80189d4:	f7ef fc46 	bl	8008264 <HAL_GetTick>
 80189d8:	4602      	mov	r2, r0
 80189da:	693b      	ldr	r3, [r7, #16]
 80189dc:	1ad3      	subs	r3, r2, r3
 80189de:	6a3a      	ldr	r2, [r7, #32]
 80189e0:	429a      	cmp	r2, r3
 80189e2:	d805      	bhi.n	80189f0 <SPIF_TransmitReceive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	4618      	mov	r0, r3
 80189ea:	f7f6 fd0b 	bl	800f404 <HAL_SPI_DMAStop>
        break;
 80189ee:	e009      	b.n	8018a04 <SPIF_TransmitReceive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	4618      	mov	r0, r3
 80189f6:	f7f6 fe7f 	bl	800f6f8 <HAL_SPI_GetState>
 80189fa:	4603      	mov	r3, r0
 80189fc:	2b01      	cmp	r3, #1
 80189fe:	d1e6      	bne.n	80189ce <SPIF_TransmitReceive+0x2e>
      {
        retVal = true;
 8018a00:	2301      	movs	r3, #1
 8018a02:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8018a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8018a06:	4618      	mov	r0, r3
 8018a08:	3718      	adds	r7, #24
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	bd80      	pop	{r7, pc}

08018a0e <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8018a0e:	b580      	push	{r7, lr}
 8018a10:	b086      	sub	sp, #24
 8018a12:	af00      	add	r7, sp, #0
 8018a14:	60f8      	str	r0, [r7, #12]
 8018a16:	60b9      	str	r1, [r7, #8]
 8018a18:	607a      	str	r2, [r7, #4]
 8018a1a:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8018a20:	f7ef fc20 	bl	8008264 <HAL_GetTick>
 8018a24:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Transmit_DMA(Handle->HSpi, Tx, Size) != HAL_OK)
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	681b      	ldr	r3, [r3, #0]
 8018a2a:	687a      	ldr	r2, [r7, #4]
 8018a2c:	b292      	uxth	r2, r2
 8018a2e:	68b9      	ldr	r1, [r7, #8]
 8018a30:	4618      	mov	r0, r3
 8018a32:	f7f6 f953 	bl	800ecdc <HAL_SPI_Transmit_DMA>
 8018a36:	4603      	mov	r3, r0
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d11a      	bne.n	8018a72 <SPIF_Transmit+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8018a3c:	2001      	movs	r0, #1
 8018a3e:	f7ff ff67 	bl	8018910 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8018a42:	f7ef fc0f 	bl	8008264 <HAL_GetTick>
 8018a46:	4602      	mov	r2, r0
 8018a48:	693b      	ldr	r3, [r7, #16]
 8018a4a:	1ad3      	subs	r3, r2, r3
 8018a4c:	683a      	ldr	r2, [r7, #0]
 8018a4e:	429a      	cmp	r2, r3
 8018a50:	d805      	bhi.n	8018a5e <SPIF_Transmit+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	4618      	mov	r0, r3
 8018a58:	f7f6 fcd4 	bl	800f404 <HAL_SPI_DMAStop>
        break;
 8018a5c:	e009      	b.n	8018a72 <SPIF_Transmit+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8018a5e:	68fb      	ldr	r3, [r7, #12]
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	4618      	mov	r0, r3
 8018a64:	f7f6 fe48 	bl	800f6f8 <HAL_SPI_GetState>
 8018a68:	4603      	mov	r3, r0
 8018a6a:	2b01      	cmp	r3, #1
 8018a6c:	d1e6      	bne.n	8018a3c <SPIF_Transmit+0x2e>
      {
        retVal = true;
 8018a6e:	2301      	movs	r3, #1
 8018a70:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8018a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8018a74:	4618      	mov	r0, r3
 8018a76:	3718      	adds	r7, #24
 8018a78:	46bd      	mov	sp, r7
 8018a7a:	bd80      	pop	{r7, pc}

08018a7c <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8018a7c:	b580      	push	{r7, lr}
 8018a7e:	b086      	sub	sp, #24
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	60f8      	str	r0, [r7, #12]
 8018a84:	60b9      	str	r1, [r7, #8]
 8018a86:	607a      	str	r2, [r7, #4]
 8018a88:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8018a8a:	2300      	movs	r3, #0
 8018a8c:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8018a8e:	f7ef fbe9 	bl	8008264 <HAL_GetTick>
 8018a92:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Receive_DMA(Handle->HSpi, Rx, Size) != HAL_OK)
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	687a      	ldr	r2, [r7, #4]
 8018a9a:	b292      	uxth	r2, r2
 8018a9c:	68b9      	ldr	r1, [r7, #8]
 8018a9e:	4618      	mov	r0, r3
 8018aa0:	f7f6 fa0c 	bl	800eebc <HAL_SPI_Receive_DMA>
 8018aa4:	4603      	mov	r3, r0
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d11a      	bne.n	8018ae0 <SPIF_Receive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8018aaa:	2001      	movs	r0, #1
 8018aac:	f7ff ff30 	bl	8018910 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8018ab0:	f7ef fbd8 	bl	8008264 <HAL_GetTick>
 8018ab4:	4602      	mov	r2, r0
 8018ab6:	693b      	ldr	r3, [r7, #16]
 8018ab8:	1ad3      	subs	r3, r2, r3
 8018aba:	683a      	ldr	r2, [r7, #0]
 8018abc:	429a      	cmp	r2, r3
 8018abe:	d805      	bhi.n	8018acc <SPIF_Receive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	4618      	mov	r0, r3
 8018ac6:	f7f6 fc9d 	bl	800f404 <HAL_SPI_DMAStop>
        break;
 8018aca:	e009      	b.n	8018ae0 <SPIF_Receive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8018acc:	68fb      	ldr	r3, [r7, #12]
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	f7f6 fe11 	bl	800f6f8 <HAL_SPI_GetState>
 8018ad6:	4603      	mov	r3, r0
 8018ad8:	2b01      	cmp	r3, #1
 8018ada:	d1e6      	bne.n	8018aaa <SPIF_Receive+0x2e>
      {
        retVal = true;
 8018adc:	2301      	movs	r3, #1
 8018ade:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8018ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8018ae2:	4618      	mov	r0, r3
 8018ae4:	3718      	adds	r7, #24
 8018ae6:	46bd      	mov	sp, r7
 8018ae8:	bd80      	pop	{r7, pc}

08018aea <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 8018aea:	b580      	push	{r7, lr}
 8018aec:	b084      	sub	sp, #16
 8018aee:	af00      	add	r7, sp, #0
 8018af0:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8018af2:	2301      	movs	r3, #1
 8018af4:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 8018af6:	2306      	movs	r3, #6
 8018af8:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8018afa:	2100      	movs	r1, #0
 8018afc:	6878      	ldr	r0, [r7, #4]
 8018afe:	f7ff ff32 	bl	8018966 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8018b02:	f107 010c 	add.w	r1, r7, #12
 8018b06:	2364      	movs	r3, #100	; 0x64
 8018b08:	2201      	movs	r2, #1
 8018b0a:	6878      	ldr	r0, [r7, #4]
 8018b0c:	f7ff ff7f 	bl	8018a0e <SPIF_Transmit>
 8018b10:	4603      	mov	r3, r0
 8018b12:	f083 0301 	eor.w	r3, r3, #1
 8018b16:	b2db      	uxtb	r3, r3
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d001      	beq.n	8018b20 <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8018b20:	2101      	movs	r1, #1
 8018b22:	6878      	ldr	r0, [r7, #4]
 8018b24:	f7ff ff1f 	bl	8018966 <SPIF_CsPin>
  return retVal;
 8018b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b2a:	4618      	mov	r0, r3
 8018b2c:	3710      	adds	r7, #16
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	bd80      	pop	{r7, pc}

08018b32 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8018b32:	b580      	push	{r7, lr}
 8018b34:	b084      	sub	sp, #16
 8018b36:	af00      	add	r7, sp, #0
 8018b38:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8018b3a:	2301      	movs	r3, #1
 8018b3c:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 8018b3e:	2304      	movs	r3, #4
 8018b40:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8018b42:	2100      	movs	r1, #0
 8018b44:	6878      	ldr	r0, [r7, #4]
 8018b46:	f7ff ff0e 	bl	8018966 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8018b4a:	f107 010c 	add.w	r1, r7, #12
 8018b4e:	2364      	movs	r3, #100	; 0x64
 8018b50:	2201      	movs	r2, #1
 8018b52:	6878      	ldr	r0, [r7, #4]
 8018b54:	f7ff ff5b 	bl	8018a0e <SPIF_Transmit>
 8018b58:	4603      	mov	r3, r0
 8018b5a:	f083 0301 	eor.w	r3, r3, #1
 8018b5e:	b2db      	uxtb	r3, r3
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d001      	beq.n	8018b68 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8018b64:	2300      	movs	r3, #0
 8018b66:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8018b68:	2101      	movs	r1, #1
 8018b6a:	6878      	ldr	r0, [r7, #4]
 8018b6c:	f7ff fefb 	bl	8018966 <SPIF_CsPin>
  return retVal;
 8018b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b72:	4618      	mov	r0, r3
 8018b74:	3710      	adds	r7, #16
 8018b76:	46bd      	mov	sp, r7
 8018b78:	bd80      	pop	{r7, pc}

08018b7a <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8018b7a:	b580      	push	{r7, lr}
 8018b7c:	b086      	sub	sp, #24
 8018b7e:	af02      	add	r7, sp, #8
 8018b80:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 8018b82:	2300      	movs	r3, #0
 8018b84:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 8018b86:	f24a 5305 	movw	r3, #42245	; 0xa505
 8018b8a:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 8018b8c:	2100      	movs	r1, #0
 8018b8e:	6878      	ldr	r0, [r7, #4]
 8018b90:	f7ff fee9 	bl	8018966 <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 8018b94:	f107 0208 	add.w	r2, r7, #8
 8018b98:	f107 010c 	add.w	r1, r7, #12
 8018b9c:	2364      	movs	r3, #100	; 0x64
 8018b9e:	9300      	str	r3, [sp, #0]
 8018ba0:	2302      	movs	r3, #2
 8018ba2:	6878      	ldr	r0, [r7, #4]
 8018ba4:	f7ff fefc 	bl	80189a0 <SPIF_TransmitReceive>
 8018ba8:	4603      	mov	r3, r0
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d001      	beq.n	8018bb2 <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 8018bae:	7a7b      	ldrb	r3, [r7, #9]
 8018bb0:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 8018bb2:	2101      	movs	r1, #1
 8018bb4:	6878      	ldr	r0, [r7, #4]
 8018bb6:	f7ff fed6 	bl	8018966 <SPIF_CsPin>
  return retVal;
 8018bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	3710      	adds	r7, #16
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	bd80      	pop	{r7, pc}

08018bc4 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 8018bc4:	b580      	push	{r7, lr}
 8018bc6:	b084      	sub	sp, #16
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	6078      	str	r0, [r7, #4]
 8018bcc:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 8018bce:	2300      	movs	r3, #0
 8018bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 8018bd2:	f7ef fb47 	bl	8008264 <HAL_GetTick>
 8018bd6:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 8018bd8:	2001      	movs	r0, #1
 8018bda:	f7ff fe99 	bl	8018910 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 8018bde:	f7ef fb41 	bl	8008264 <HAL_GetTick>
 8018be2:	4602      	mov	r2, r0
 8018be4:	68bb      	ldr	r3, [r7, #8]
 8018be6:	1ad3      	subs	r3, r2, r3
 8018be8:	683a      	ldr	r2, [r7, #0]
 8018bea:	429a      	cmp	r2, r3
 8018bec:	d90a      	bls.n	8018c04 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 8018bee:	6878      	ldr	r0, [r7, #4]
 8018bf0:	f7ff ffc3 	bl	8018b7a <SPIF_ReadReg1>
 8018bf4:	4603      	mov	r3, r0
 8018bf6:	f003 0301 	and.w	r3, r3, #1
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d1ec      	bne.n	8018bd8 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 8018bfe:	2301      	movs	r3, #1
 8018c00:	73fb      	strb	r3, [r7, #15]
      break;
 8018c02:	e000      	b.n	8018c06 <SPIF_WaitForWriting+0x42>
      break;
 8018c04:	bf00      	nop
    }
  }
  return retVal;
 8018c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c08:	4618      	mov	r0, r3
 8018c0a:	3710      	adds	r7, #16
 8018c0c:	46bd      	mov	sp, r7
 8018c0e:	bd80      	pop	{r7, pc}

08018c10 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8018c10:	b580      	push	{r7, lr}
 8018c12:	b088      	sub	sp, #32
 8018c14:	af02      	add	r7, sp, #8
 8018c16:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8018c18:	f06f 0360 	mvn.w	r3, #96	; 0x60
 8018c1c:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 8018c1e:	2300      	movs	r3, #0
 8018c20:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 8018c22:	2100      	movs	r1, #0
 8018c24:	6878      	ldr	r0, [r7, #4]
 8018c26:	f7ff fe9e 	bl	8018966 <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 8018c2a:	f107 020c 	add.w	r2, r7, #12
 8018c2e:	f107 0110 	add.w	r1, r7, #16
 8018c32:	2364      	movs	r3, #100	; 0x64
 8018c34:	9300      	str	r3, [sp, #0]
 8018c36:	2304      	movs	r3, #4
 8018c38:	6878      	ldr	r0, [r7, #4]
 8018c3a:	f7ff feb1 	bl	80189a0 <SPIF_TransmitReceive>
 8018c3e:	4603      	mov	r3, r0
 8018c40:	f083 0301 	eor.w	r3, r3, #1
 8018c44:	b2db      	uxtb	r3, r3
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d004      	beq.n	8018c54 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 8018c4a:	2101      	movs	r1, #1
 8018c4c:	6878      	ldr	r0, [r7, #4]
 8018c4e:	f7ff fe8a 	bl	8018966 <SPIF_CsPin>
      break;
 8018c52:	e16f      	b.n	8018f34 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8018c54:	2101      	movs	r1, #1
 8018c56:	6878      	ldr	r0, [r7, #4]
 8018c58:	f7ff fe85 	bl	8018966 <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8018c5c:	7b7a      	ldrb	r2, [r7, #13]
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 8018c62:	7bba      	ldrb	r2, [r7, #14]
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8018c68:	7bfa      	ldrb	r2, [r7, #15]
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	7a1b      	ldrb	r3, [r3, #8]
 8018c72:	2bef      	cmp	r3, #239	; 0xef
 8018c74:	f000 80f0 	beq.w	8018e58 <SPIF_FindChip+0x248>
 8018c78:	2bef      	cmp	r3, #239	; 0xef
 8018c7a:	f300 80e9 	bgt.w	8018e50 <SPIF_FindChip+0x240>
 8018c7e:	2bc8      	cmp	r3, #200	; 0xc8
 8018c80:	f300 80e6 	bgt.w	8018e50 <SPIF_FindChip+0x240>
 8018c84:	2b85      	cmp	r3, #133	; 0x85
 8018c86:	da0c      	bge.n	8018ca2 <SPIF_FindChip+0x92>
 8018c88:	2b62      	cmp	r3, #98	; 0x62
 8018c8a:	f000 80e7 	beq.w	8018e5c <SPIF_FindChip+0x24c>
 8018c8e:	2b62      	cmp	r3, #98	; 0x62
 8018c90:	f300 80de 	bgt.w	8018e50 <SPIF_FindChip+0x240>
 8018c94:	2b20      	cmp	r3, #32
 8018c96:	f300 80d9 	bgt.w	8018e4c <SPIF_FindChip+0x23c>
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	f300 8090 	bgt.w	8018dc0 <SPIF_FindChip+0x1b0>
 8018ca0:	e0d6      	b.n	8018e50 <SPIF_FindChip+0x240>
 8018ca2:	3b85      	subs	r3, #133	; 0x85
 8018ca4:	2b43      	cmp	r3, #67	; 0x43
 8018ca6:	f200 80d3 	bhi.w	8018e50 <SPIF_FindChip+0x240>
 8018caa:	a201      	add	r2, pc, #4	; (adr r2, 8018cb0 <SPIF_FindChip+0xa0>)
 8018cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cb0:	08018e61 	.word	0x08018e61
 8018cb4:	08018e51 	.word	0x08018e51
 8018cb8:	08018e51 	.word	0x08018e51
 8018cbc:	08018e51 	.word	0x08018e51
 8018cc0:	08018e61 	.word	0x08018e61
 8018cc4:	08018e51 	.word	0x08018e51
 8018cc8:	08018e51 	.word	0x08018e51
 8018ccc:	08018e61 	.word	0x08018e61
 8018cd0:	08018e51 	.word	0x08018e51
 8018cd4:	08018e51 	.word	0x08018e51
 8018cd8:	08018e51 	.word	0x08018e51
 8018cdc:	08018e51 	.word	0x08018e51
 8018ce0:	08018e51 	.word	0x08018e51
 8018ce4:	08018e51 	.word	0x08018e51
 8018ce8:	08018e51 	.word	0x08018e51
 8018cec:	08018e51 	.word	0x08018e51
 8018cf0:	08018e51 	.word	0x08018e51
 8018cf4:	08018e51 	.word	0x08018e51
 8018cf8:	08018e51 	.word	0x08018e51
 8018cfc:	08018e51 	.word	0x08018e51
 8018d00:	08018e51 	.word	0x08018e51
 8018d04:	08018e51 	.word	0x08018e51
 8018d08:	08018e51 	.word	0x08018e51
 8018d0c:	08018e51 	.word	0x08018e51
 8018d10:	08018e61 	.word	0x08018e61
 8018d14:	08018e51 	.word	0x08018e51
 8018d18:	08018e51 	.word	0x08018e51
 8018d1c:	08018e51 	.word	0x08018e51
 8018d20:	08018e61 	.word	0x08018e61
 8018d24:	08018e51 	.word	0x08018e51
 8018d28:	08018e51 	.word	0x08018e51
 8018d2c:	08018e51 	.word	0x08018e51
 8018d30:	08018e51 	.word	0x08018e51
 8018d34:	08018e51 	.word	0x08018e51
 8018d38:	08018e51 	.word	0x08018e51
 8018d3c:	08018e51 	.word	0x08018e51
 8018d40:	08018e51 	.word	0x08018e51
 8018d44:	08018e51 	.word	0x08018e51
 8018d48:	08018e51 	.word	0x08018e51
 8018d4c:	08018e51 	.word	0x08018e51
 8018d50:	08018e61 	.word	0x08018e61
 8018d54:	08018e51 	.word	0x08018e51
 8018d58:	08018e51 	.word	0x08018e51
 8018d5c:	08018e51 	.word	0x08018e51
 8018d60:	08018e51 	.word	0x08018e51
 8018d64:	08018e51 	.word	0x08018e51
 8018d68:	08018e51 	.word	0x08018e51
 8018d6c:	08018e51 	.word	0x08018e51
 8018d70:	08018e51 	.word	0x08018e51
 8018d74:	08018e51 	.word	0x08018e51
 8018d78:	08018e51 	.word	0x08018e51
 8018d7c:	08018e51 	.word	0x08018e51
 8018d80:	08018e51 	.word	0x08018e51
 8018d84:	08018e51 	.word	0x08018e51
 8018d88:	08018e51 	.word	0x08018e51
 8018d8c:	08018e51 	.word	0x08018e51
 8018d90:	08018e51 	.word	0x08018e51
 8018d94:	08018e51 	.word	0x08018e51
 8018d98:	08018e61 	.word	0x08018e61
 8018d9c:	08018e51 	.word	0x08018e51
 8018da0:	08018e51 	.word	0x08018e51
 8018da4:	08018e61 	.word	0x08018e61
 8018da8:	08018e51 	.word	0x08018e51
 8018dac:	08018e51 	.word	0x08018e51
 8018db0:	08018e51 	.word	0x08018e51
 8018db4:	08018e51 	.word	0x08018e51
 8018db8:	08018e51 	.word	0x08018e51
 8018dbc:	08018e61 	.word	0x08018e61
 8018dc0:	3b01      	subs	r3, #1
 8018dc2:	2b1f      	cmp	r3, #31
 8018dc4:	d844      	bhi.n	8018e50 <SPIF_FindChip+0x240>
 8018dc6:	a201      	add	r2, pc, #4	; (adr r2, 8018dcc <SPIF_FindChip+0x1bc>)
 8018dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018dcc:	08018e65 	.word	0x08018e65
 8018dd0:	08018e51 	.word	0x08018e51
 8018dd4:	08018e51 	.word	0x08018e51
 8018dd8:	08018e65 	.word	0x08018e65
 8018ddc:	08018e51 	.word	0x08018e51
 8018de0:	08018e51 	.word	0x08018e51
 8018de4:	08018e51 	.word	0x08018e51
 8018de8:	08018e51 	.word	0x08018e51
 8018dec:	08018e51 	.word	0x08018e51
 8018df0:	08018e51 	.word	0x08018e51
 8018df4:	08018e51 	.word	0x08018e51
 8018df8:	08018e51 	.word	0x08018e51
 8018dfc:	08018e51 	.word	0x08018e51
 8018e00:	08018e51 	.word	0x08018e51
 8018e04:	08018e51 	.word	0x08018e51
 8018e08:	08018e51 	.word	0x08018e51
 8018e0c:	08018e51 	.word	0x08018e51
 8018e10:	08018e51 	.word	0x08018e51
 8018e14:	08018e51 	.word	0x08018e51
 8018e18:	08018e51 	.word	0x08018e51
 8018e1c:	08018e51 	.word	0x08018e51
 8018e20:	08018e51 	.word	0x08018e51
 8018e24:	08018e51 	.word	0x08018e51
 8018e28:	08018e51 	.word	0x08018e51
 8018e2c:	08018e51 	.word	0x08018e51
 8018e30:	08018e51 	.word	0x08018e51
 8018e34:	08018e51 	.word	0x08018e51
 8018e38:	08018e65 	.word	0x08018e65
 8018e3c:	08018e51 	.word	0x08018e51
 8018e40:	08018e51 	.word	0x08018e51
 8018e44:	08018e51 	.word	0x08018e51
 8018e48:	08018e65 	.word	0x08018e65
 8018e4c:	2b37      	cmp	r3, #55	; 0x37
 8018e4e:	d00b      	beq.n	8018e68 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	2200      	movs	r2, #0
 8018e54:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 8018e56:	e008      	b.n	8018e6a <SPIF_FindChip+0x25a>
      break;
 8018e58:	bf00      	nop
 8018e5a:	e006      	b.n	8018e6a <SPIF_FindChip+0x25a>
      break;
 8018e5c:	bf00      	nop
 8018e5e:	e004      	b.n	8018e6a <SPIF_FindChip+0x25a>
      break;
 8018e60:	bf00      	nop
 8018e62:	e002      	b.n	8018e6a <SPIF_FindChip+0x25a>
      break;
 8018e64:	bf00      	nop
 8018e66:	e000      	b.n	8018e6a <SPIF_FindChip+0x25a>
      break;
 8018e68:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	7a5b      	ldrb	r3, [r3, #9]
 8018e6e:	3b11      	subs	r3, #17
 8018e70:	2b0f      	cmp	r3, #15
 8018e72:	d84e      	bhi.n	8018f12 <SPIF_FindChip+0x302>
 8018e74:	a201      	add	r2, pc, #4	; (adr r2, 8018e7c <SPIF_FindChip+0x26c>)
 8018e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e7a:	bf00      	nop
 8018e7c:	08018ebd 	.word	0x08018ebd
 8018e80:	08018ec5 	.word	0x08018ec5
 8018e84:	08018ecd 	.word	0x08018ecd
 8018e88:	08018ed5 	.word	0x08018ed5
 8018e8c:	08018edd 	.word	0x08018edd
 8018e90:	08018ee5 	.word	0x08018ee5
 8018e94:	08018eed 	.word	0x08018eed
 8018e98:	08018ef5 	.word	0x08018ef5
 8018e9c:	08018eff 	.word	0x08018eff
 8018ea0:	08018f13 	.word	0x08018f13
 8018ea4:	08018f13 	.word	0x08018f13
 8018ea8:	08018f13 	.word	0x08018f13
 8018eac:	08018f13 	.word	0x08018f13
 8018eb0:	08018f13 	.word	0x08018f13
 8018eb4:	08018f13 	.word	0x08018f13
 8018eb8:	08018f09 	.word	0x08018f09
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	2202      	movs	r2, #2
 8018ec0:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 8018ec2:	e02a      	b.n	8018f1a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	2204      	movs	r2, #4
 8018ec8:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 8018eca:	e026      	b.n	8018f1a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	2208      	movs	r2, #8
 8018ed0:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 8018ed2:	e022      	b.n	8018f1a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	2210      	movs	r2, #16
 8018ed8:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 8018eda:	e01e      	b.n	8018f1a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	2220      	movs	r2, #32
 8018ee0:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 8018ee2:	e01a      	b.n	8018f1a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	2240      	movs	r2, #64	; 0x40
 8018ee8:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 8018eea:	e016      	b.n	8018f1a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	2280      	movs	r2, #128	; 0x80
 8018ef0:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 8018ef2:	e012      	b.n	8018f1a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018efa:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 8018efc:	e00d      	b.n	8018f1a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018f04:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 8018f06:	e008      	b.n	8018f1a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018f0e:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 8018f10:	e003      	b.n	8018f1a <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	2200      	movs	r2, #0
 8018f16:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 8018f18:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	69db      	ldr	r3, [r3, #28]
 8018f1e:	011a      	lsls	r2, r3, #4
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	699b      	ldr	r3, [r3, #24]
 8018f28:	031b      	lsls	r3, r3, #12
 8018f2a:	0a1a      	lsrs	r2, r3, #8
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 8018f30:	2301      	movs	r3, #1
 8018f32:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8018f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8018f36:	4618      	mov	r0, r3
 8018f38:	3718      	adds	r7, #24
 8018f3a:	46bd      	mov	sp, r7
 8018f3c:	bd80      	pop	{r7, pc}
 8018f3e:	bf00      	nop

08018f40 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b08a      	sub	sp, #40	; 0x28
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	60f8      	str	r0, [r7, #12]
 8018f48:	60b9      	str	r1, [r7, #8]
 8018f4a:	607a      	str	r2, [r7, #4]
 8018f4c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8018f4e:	2300      	movs	r3, #0
 8018f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8018f54:	2300      	movs	r3, #0
 8018f56:	623b      	str	r3, [r7, #32]
 8018f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f5a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8018f5e:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	695b      	ldr	r3, [r3, #20]
 8018f64:	68ba      	ldr	r2, [r7, #8]
 8018f66:	429a      	cmp	r2, r3
 8018f68:	f080 8084 	bcs.w	8019074 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 8018f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f6e:	2bff      	cmp	r3, #255	; 0xff
 8018f70:	f200 8082 	bhi.w	8019078 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8018f74:	683a      	ldr	r2, [r7, #0]
 8018f76:	69fb      	ldr	r3, [r7, #28]
 8018f78:	429a      	cmp	r2, r3
 8018f7a:	d901      	bls.n	8018f80 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 8018f7c:	69fb      	ldr	r3, [r7, #28]
 8018f7e:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 8018f80:	68bb      	ldr	r3, [r7, #8]
 8018f82:	021b      	lsls	r3, r3, #8
 8018f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018f86:	4413      	add	r3, r2
 8018f88:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 8018f8a:	68f8      	ldr	r0, [r7, #12]
 8018f8c:	f7ff fdad 	bl	8018aea <SPIF_WriteEnable>
 8018f90:	4603      	mov	r3, r0
 8018f92:	f083 0301 	eor.w	r3, r3, #1
 8018f96:	b2db      	uxtb	r3, r3
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d16f      	bne.n	801907c <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8018f9c:	2100      	movs	r1, #0
 8018f9e:	68f8      	ldr	r0, [r7, #12]
 8018fa0:	f7ff fce1 	bl	8018966 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	69db      	ldr	r3, [r3, #28]
 8018fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018fac:	d322      	bcc.n	8018ff4 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 8018fae:	2312      	movs	r3, #18
 8018fb0:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 8018fb2:	6a3b      	ldr	r3, [r7, #32]
 8018fb4:	0e1b      	lsrs	r3, r3, #24
 8018fb6:	b2db      	uxtb	r3, r3
 8018fb8:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 8018fba:	6a3b      	ldr	r3, [r7, #32]
 8018fbc:	0c1b      	lsrs	r3, r3, #16
 8018fbe:	b2db      	uxtb	r3, r3
 8018fc0:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 8018fc2:	6a3b      	ldr	r3, [r7, #32]
 8018fc4:	0a1b      	lsrs	r3, r3, #8
 8018fc6:	b2db      	uxtb	r3, r3
 8018fc8:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 8018fca:	6a3b      	ldr	r3, [r7, #32]
 8018fcc:	b2db      	uxtb	r3, r3
 8018fce:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8018fd0:	f107 0114 	add.w	r1, r7, #20
 8018fd4:	2364      	movs	r3, #100	; 0x64
 8018fd6:	2205      	movs	r2, #5
 8018fd8:	68f8      	ldr	r0, [r7, #12]
 8018fda:	f7ff fd18 	bl	8018a0e <SPIF_Transmit>
 8018fde:	4603      	mov	r3, r0
 8018fe0:	f083 0301 	eor.w	r3, r3, #1
 8018fe4:	b2db      	uxtb	r3, r3
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d023      	beq.n	8019032 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8018fea:	2101      	movs	r1, #1
 8018fec:	68f8      	ldr	r0, [r7, #12]
 8018fee:	f7ff fcba 	bl	8018966 <SPIF_CsPin>
        break;
 8018ff2:	e044      	b.n	801907e <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8018ff4:	2302      	movs	r3, #2
 8018ff6:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 8018ff8:	6a3b      	ldr	r3, [r7, #32]
 8018ffa:	0c1b      	lsrs	r3, r3, #16
 8018ffc:	b2db      	uxtb	r3, r3
 8018ffe:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 8019000:	6a3b      	ldr	r3, [r7, #32]
 8019002:	0a1b      	lsrs	r3, r3, #8
 8019004:	b2db      	uxtb	r3, r3
 8019006:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8019008:	6a3b      	ldr	r3, [r7, #32]
 801900a:	b2db      	uxtb	r3, r3
 801900c:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 801900e:	f107 0114 	add.w	r1, r7, #20
 8019012:	2364      	movs	r3, #100	; 0x64
 8019014:	2204      	movs	r2, #4
 8019016:	68f8      	ldr	r0, [r7, #12]
 8019018:	f7ff fcf9 	bl	8018a0e <SPIF_Transmit>
 801901c:	4603      	mov	r3, r0
 801901e:	f083 0301 	eor.w	r3, r3, #1
 8019022:	b2db      	uxtb	r3, r3
 8019024:	2b00      	cmp	r3, #0
 8019026:	d004      	beq.n	8019032 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8019028:	2101      	movs	r1, #1
 801902a:	68f8      	ldr	r0, [r7, #12]
 801902c:	f7ff fc9b 	bl	8018966 <SPIF_CsPin>
        break;
 8019030:	e025      	b.n	801907e <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 8019032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019036:	683a      	ldr	r2, [r7, #0]
 8019038:	6879      	ldr	r1, [r7, #4]
 801903a:	68f8      	ldr	r0, [r7, #12]
 801903c:	f7ff fce7 	bl	8018a0e <SPIF_Transmit>
 8019040:	4603      	mov	r3, r0
 8019042:	f083 0301 	eor.w	r3, r3, #1
 8019046:	b2db      	uxtb	r3, r3
 8019048:	2b00      	cmp	r3, #0
 801904a:	d004      	beq.n	8019056 <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 801904c:	2101      	movs	r1, #1
 801904e:	68f8      	ldr	r0, [r7, #12]
 8019050:	f7ff fc89 	bl	8018966 <SPIF_CsPin>
      break;
 8019054:	e013      	b.n	801907e <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 8019056:	2101      	movs	r1, #1
 8019058:	68f8      	ldr	r0, [r7, #12]
 801905a:	f7ff fc84 	bl	8018966 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 801905e:	2164      	movs	r1, #100	; 0x64
 8019060:	68f8      	ldr	r0, [r7, #12]
 8019062:	f7ff fdaf 	bl	8018bc4 <SPIF_WaitForWriting>
 8019066:	4603      	mov	r3, r0
 8019068:	2b00      	cmp	r3, #0
 801906a:	d008      	beq.n	801907e <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 801906c:	2301      	movs	r3, #1
 801906e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019072:	e004      	b.n	801907e <SPIF_WriteFn+0x13e>
      break;
 8019074:	bf00      	nop
 8019076:	e002      	b.n	801907e <SPIF_WriteFn+0x13e>
      break;
 8019078:	bf00      	nop
 801907a:	e000      	b.n	801907e <SPIF_WriteFn+0x13e>
      break;
 801907c:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 801907e:	68f8      	ldr	r0, [r7, #12]
 8019080:	f7ff fd57 	bl	8018b32 <SPIF_WriteDisable>
  return retVal;
 8019084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8019088:	4618      	mov	r0, r3
 801908a:	3728      	adds	r7, #40	; 0x28
 801908c:	46bd      	mov	sp, r7
 801908e:	bd80      	pop	{r7, pc}

08019090 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8019090:	b580      	push	{r7, lr}
 8019092:	b086      	sub	sp, #24
 8019094:	af00      	add	r7, sp, #0
 8019096:	60f8      	str	r0, [r7, #12]
 8019098:	60b9      	str	r1, [r7, #8]
 801909a:	607a      	str	r2, [r7, #4]
 801909c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801909e:	2300      	movs	r3, #0
 80190a0:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 80190a2:	2100      	movs	r1, #0
 80190a4:	68f8      	ldr	r0, [r7, #12]
 80190a6:	f7ff fc5e 	bl	8018966 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	69db      	ldr	r3, [r3, #28]
 80190ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80190b2:	d322      	bcc.n	80190fa <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 80190b4:	2313      	movs	r3, #19
 80190b6:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 80190b8:	68bb      	ldr	r3, [r7, #8]
 80190ba:	0e1b      	lsrs	r3, r3, #24
 80190bc:	b2db      	uxtb	r3, r3
 80190be:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 80190c0:	68bb      	ldr	r3, [r7, #8]
 80190c2:	0c1b      	lsrs	r3, r3, #16
 80190c4:	b2db      	uxtb	r3, r3
 80190c6:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 80190c8:	68bb      	ldr	r3, [r7, #8]
 80190ca:	0a1b      	lsrs	r3, r3, #8
 80190cc:	b2db      	uxtb	r3, r3
 80190ce:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 80190d0:	68bb      	ldr	r3, [r7, #8]
 80190d2:	b2db      	uxtb	r3, r3
 80190d4:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80190d6:	f107 0110 	add.w	r1, r7, #16
 80190da:	2364      	movs	r3, #100	; 0x64
 80190dc:	2205      	movs	r2, #5
 80190de:	68f8      	ldr	r0, [r7, #12]
 80190e0:	f7ff fc95 	bl	8018a0e <SPIF_Transmit>
 80190e4:	4603      	mov	r3, r0
 80190e6:	f083 0301 	eor.w	r3, r3, #1
 80190ea:	b2db      	uxtb	r3, r3
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d023      	beq.n	8019138 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 80190f0:	2101      	movs	r1, #1
 80190f2:	68f8      	ldr	r0, [r7, #12]
 80190f4:	f7ff fc37 	bl	8018966 <SPIF_CsPin>
        break;
 80190f8:	e036      	b.n	8019168 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 80190fa:	2303      	movs	r3, #3
 80190fc:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 80190fe:	68bb      	ldr	r3, [r7, #8]
 8019100:	0c1b      	lsrs	r3, r3, #16
 8019102:	b2db      	uxtb	r3, r3
 8019104:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8019106:	68bb      	ldr	r3, [r7, #8]
 8019108:	0a1b      	lsrs	r3, r3, #8
 801910a:	b2db      	uxtb	r3, r3
 801910c:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 801910e:	68bb      	ldr	r3, [r7, #8]
 8019110:	b2db      	uxtb	r3, r3
 8019112:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8019114:	f107 0110 	add.w	r1, r7, #16
 8019118:	2364      	movs	r3, #100	; 0x64
 801911a:	2204      	movs	r2, #4
 801911c:	68f8      	ldr	r0, [r7, #12]
 801911e:	f7ff fc76 	bl	8018a0e <SPIF_Transmit>
 8019122:	4603      	mov	r3, r0
 8019124:	f083 0301 	eor.w	r3, r3, #1
 8019128:	b2db      	uxtb	r3, r3
 801912a:	2b00      	cmp	r3, #0
 801912c:	d004      	beq.n	8019138 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 801912e:	2101      	movs	r1, #1
 8019130:	68f8      	ldr	r0, [r7, #12]
 8019132:	f7ff fc18 	bl	8018966 <SPIF_CsPin>
        break;
 8019136:	e017      	b.n	8019168 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8019138:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801913c:	683a      	ldr	r2, [r7, #0]
 801913e:	6879      	ldr	r1, [r7, #4]
 8019140:	68f8      	ldr	r0, [r7, #12]
 8019142:	f7ff fc9b 	bl	8018a7c <SPIF_Receive>
 8019146:	4603      	mov	r3, r0
 8019148:	f083 0301 	eor.w	r3, r3, #1
 801914c:	b2db      	uxtb	r3, r3
 801914e:	2b00      	cmp	r3, #0
 8019150:	d004      	beq.n	801915c <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 8019152:	2101      	movs	r1, #1
 8019154:	68f8      	ldr	r0, [r7, #12]
 8019156:	f7ff fc06 	bl	8018966 <SPIF_CsPin>
      break;
 801915a:	e005      	b.n	8019168 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 801915c:	2101      	movs	r1, #1
 801915e:	68f8      	ldr	r0, [r7, #12]
 8019160:	f7ff fc01 	bl	8018966 <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8019164:	2301      	movs	r3, #1
 8019166:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8019168:	7dfb      	ldrb	r3, [r7, #23]
}
 801916a:	4618      	mov	r0, r3
 801916c:	3718      	adds	r7, #24
 801916e:	46bd      	mov	sp, r7
 8019170:	bd80      	pop	{r7, pc}

08019172 <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8019172:	b580      	push	{r7, lr}
 8019174:	b086      	sub	sp, #24
 8019176:	af00      	add	r7, sp, #0
 8019178:	60f8      	str	r0, [r7, #12]
 801917a:	60b9      	str	r1, [r7, #8]
 801917c:	607a      	str	r2, [r7, #4]
 801917e:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8019180:	2300      	movs	r3, #0
 8019182:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	2b00      	cmp	r3, #0
 8019188:	d03a      	beq.n	8019200 <SPIF_Init+0x8e>
 801918a:	68bb      	ldr	r3, [r7, #8]
 801918c:	2b00      	cmp	r3, #0
 801918e:	d037      	beq.n	8019200 <SPIF_Init+0x8e>
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	2b00      	cmp	r3, #0
 8019194:	d034      	beq.n	8019200 <SPIF_Init+0x8e>
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	7a9b      	ldrb	r3, [r3, #10]
 801919a:	2b01      	cmp	r3, #1
 801919c:	d030      	beq.n	8019200 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 801919e:	2220      	movs	r2, #32
 80191a0:	2100      	movs	r1, #0
 80191a2:	68f8      	ldr	r0, [r7, #12]
 80191a4:	f003 fe75 	bl	801ce92 <memset>
    Handle->HSpi = HSpi;
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	68ba      	ldr	r2, [r7, #8]
 80191ac:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	687a      	ldr	r2, [r7, #4]
 80191b2:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 80191b4:	887a      	ldrh	r2, [r7, #2]
 80191b6:	68fb      	ldr	r3, [r7, #12]
 80191b8:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 80191ba:	2101      	movs	r1, #1
 80191bc:	68f8      	ldr	r0, [r7, #12]
 80191be:	f7ff fbd2 	bl	8018966 <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 80191c2:	e002      	b.n	80191ca <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 80191c4:	2001      	movs	r0, #1
 80191c6:	f7ff fba3 	bl	8018910 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 80191ca:	f7ef f84b 	bl	8008264 <HAL_GetTick>
 80191ce:	4603      	mov	r3, r0
 80191d0:	2b13      	cmp	r3, #19
 80191d2:	d9f7      	bls.n	80191c4 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 80191d4:	68f8      	ldr	r0, [r7, #12]
 80191d6:	f7ff fcac 	bl	8018b32 <SPIF_WriteDisable>
 80191da:	4603      	mov	r3, r0
 80191dc:	f083 0301 	eor.w	r3, r3, #1
 80191e0:	b2db      	uxtb	r3, r3
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d10b      	bne.n	80191fe <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 80191e6:	68f8      	ldr	r0, [r7, #12]
 80191e8:	f7ff fd12 	bl	8018c10 <SPIF_FindChip>
 80191ec:	4603      	mov	r3, r0
 80191ee:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 80191f0:	7dfb      	ldrb	r3, [r7, #23]
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d004      	beq.n	8019200 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	2201      	movs	r2, #1
 80191fa:	729a      	strb	r2, [r3, #10]
 80191fc:	e000      	b.n	8019200 <SPIF_Init+0x8e>
      break;
 80191fe:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8019200:	7dfb      	ldrb	r3, [r7, #23]
}
 8019202:	4618      	mov	r0, r3
 8019204:	3718      	adds	r7, #24
 8019206:	46bd      	mov	sp, r7
 8019208:	bd80      	pop	{r7, pc}

0801920a <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 801920a:	b580      	push	{r7, lr}
 801920c:	b086      	sub	sp, #24
 801920e:	af00      	add	r7, sp, #0
 8019210:	6078      	str	r0, [r7, #4]
 8019212:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8019214:	6878      	ldr	r0, [r7, #4]
 8019216:	f7ff fb86 	bl	8018926 <SPIF_Lock>
  bool retVal = false;
 801921a:	2300      	movs	r3, #0
 801921c:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 801921e:	683b      	ldr	r3, [r7, #0]
 8019220:	031b      	lsls	r3, r3, #12
 8019222:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	699b      	ldr	r3, [r3, #24]
 8019228:	683a      	ldr	r2, [r7, #0]
 801922a:	429a      	cmp	r2, r3
 801922c:	d262      	bcs.n	80192f4 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 801922e:	6878      	ldr	r0, [r7, #4]
 8019230:	f7ff fc5b 	bl	8018aea <SPIF_WriteEnable>
 8019234:	4603      	mov	r3, r0
 8019236:	f083 0301 	eor.w	r3, r3, #1
 801923a:	b2db      	uxtb	r3, r3
 801923c:	2b00      	cmp	r3, #0
 801923e:	d15b      	bne.n	80192f8 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8019240:	2100      	movs	r1, #0
 8019242:	6878      	ldr	r0, [r7, #4]
 8019244:	f7ff fb8f 	bl	8018966 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	69db      	ldr	r3, [r3, #28]
 801924c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019250:	d322      	bcc.n	8019298 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 8019252:	2321      	movs	r3, #33	; 0x21
 8019254:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 8019256:	693b      	ldr	r3, [r7, #16]
 8019258:	0e1b      	lsrs	r3, r3, #24
 801925a:	b2db      	uxtb	r3, r3
 801925c:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 801925e:	693b      	ldr	r3, [r7, #16]
 8019260:	0c1b      	lsrs	r3, r3, #16
 8019262:	b2db      	uxtb	r3, r3
 8019264:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 8019266:	693b      	ldr	r3, [r7, #16]
 8019268:	0a1b      	lsrs	r3, r3, #8
 801926a:	b2db      	uxtb	r3, r3
 801926c:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 801926e:	693b      	ldr	r3, [r7, #16]
 8019270:	b2db      	uxtb	r3, r3
 8019272:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8019274:	f107 0108 	add.w	r1, r7, #8
 8019278:	2364      	movs	r3, #100	; 0x64
 801927a:	2205      	movs	r2, #5
 801927c:	6878      	ldr	r0, [r7, #4]
 801927e:	f7ff fbc6 	bl	8018a0e <SPIF_Transmit>
 8019282:	4603      	mov	r3, r0
 8019284:	f083 0301 	eor.w	r3, r3, #1
 8019288:	b2db      	uxtb	r3, r3
 801928a:	2b00      	cmp	r3, #0
 801928c:	d023      	beq.n	80192d6 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 801928e:	2101      	movs	r1, #1
 8019290:	6878      	ldr	r0, [r7, #4]
 8019292:	f7ff fb68 	bl	8018966 <SPIF_CsPin>
        break;
 8019296:	e030      	b.n	80192fa <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 8019298:	2320      	movs	r3, #32
 801929a:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 801929c:	693b      	ldr	r3, [r7, #16]
 801929e:	0c1b      	lsrs	r3, r3, #16
 80192a0:	b2db      	uxtb	r3, r3
 80192a2:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 80192a4:	693b      	ldr	r3, [r7, #16]
 80192a6:	0a1b      	lsrs	r3, r3, #8
 80192a8:	b2db      	uxtb	r3, r3
 80192aa:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 80192ac:	693b      	ldr	r3, [r7, #16]
 80192ae:	b2db      	uxtb	r3, r3
 80192b0:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80192b2:	f107 0108 	add.w	r1, r7, #8
 80192b6:	2364      	movs	r3, #100	; 0x64
 80192b8:	2204      	movs	r2, #4
 80192ba:	6878      	ldr	r0, [r7, #4]
 80192bc:	f7ff fba7 	bl	8018a0e <SPIF_Transmit>
 80192c0:	4603      	mov	r3, r0
 80192c2:	f083 0301 	eor.w	r3, r3, #1
 80192c6:	b2db      	uxtb	r3, r3
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d004      	beq.n	80192d6 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80192cc:	2101      	movs	r1, #1
 80192ce:	6878      	ldr	r0, [r7, #4]
 80192d0:	f7ff fb49 	bl	8018966 <SPIF_CsPin>
        break;
 80192d4:	e011      	b.n	80192fa <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 80192d6:	2101      	movs	r1, #1
 80192d8:	6878      	ldr	r0, [r7, #4]
 80192da:	f7ff fb44 	bl	8018966 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 80192de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80192e2:	6878      	ldr	r0, [r7, #4]
 80192e4:	f7ff fc6e 	bl	8018bc4 <SPIF_WaitForWriting>
 80192e8:	4603      	mov	r3, r0
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d005      	beq.n	80192fa <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 80192ee:	2301      	movs	r3, #1
 80192f0:	75fb      	strb	r3, [r7, #23]
 80192f2:	e002      	b.n	80192fa <SPIF_EraseSector+0xf0>
      break;
 80192f4:	bf00      	nop
 80192f6:	e000      	b.n	80192fa <SPIF_EraseSector+0xf0>
      break;
 80192f8:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 80192fa:	6878      	ldr	r0, [r7, #4]
 80192fc:	f7ff fc19 	bl	8018b32 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8019300:	6878      	ldr	r0, [r7, #4]
 8019302:	f7ff fb23 	bl	801894c <SPIF_UnLock>
  return retVal;
 8019306:	7dfb      	ldrb	r3, [r7, #23]
}
 8019308:	4618      	mov	r0, r3
 801930a:	3718      	adds	r7, #24
 801930c:	46bd      	mov	sp, r7
 801930e:	bd80      	pop	{r7, pc}

08019310 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b088      	sub	sp, #32
 8019314:	af02      	add	r7, sp, #8
 8019316:	60f8      	str	r0, [r7, #12]
 8019318:	60b9      	str	r1, [r7, #8]
 801931a:	607a      	str	r2, [r7, #4]
 801931c:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 801931e:	68f8      	ldr	r0, [r7, #12]
 8019320:	f7ff fb01 	bl	8018926 <SPIF_Lock>
  bool retVal = false;
 8019324:	2300      	movs	r3, #0
 8019326:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 8019328:	6a3b      	ldr	r3, [r7, #32]
 801932a:	9300      	str	r3, [sp, #0]
 801932c:	683b      	ldr	r3, [r7, #0]
 801932e:	687a      	ldr	r2, [r7, #4]
 8019330:	68b9      	ldr	r1, [r7, #8]
 8019332:	68f8      	ldr	r0, [r7, #12]
 8019334:	f7ff fe04 	bl	8018f40 <SPIF_WriteFn>
 8019338:	4603      	mov	r3, r0
 801933a:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 801933c:	68f8      	ldr	r0, [r7, #12]
 801933e:	f7ff fb05 	bl	801894c <SPIF_UnLock>
  return retVal;
 8019342:	7dfb      	ldrb	r3, [r7, #23]
}
 8019344:	4618      	mov	r0, r3
 8019346:	3718      	adds	r7, #24
 8019348:	46bd      	mov	sp, r7
 801934a:	bd80      	pop	{r7, pc}

0801934c <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 801934c:	b580      	push	{r7, lr}
 801934e:	b088      	sub	sp, #32
 8019350:	af00      	add	r7, sp, #0
 8019352:	60f8      	str	r0, [r7, #12]
 8019354:	60b9      	str	r1, [r7, #8]
 8019356:	607a      	str	r2, [r7, #4]
 8019358:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 801935a:	68f8      	ldr	r0, [r7, #12]
 801935c:	f7ff fae3 	bl	8018926 <SPIF_Lock>
  bool retVal = false;
 8019360:	2300      	movs	r3, #0
 8019362:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 8019364:	68bb      	ldr	r3, [r7, #8]
 8019366:	021b      	lsls	r3, r3, #8
 8019368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801936a:	4413      	add	r3, r2
 801936c:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 801936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019370:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8019374:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 8019376:	683a      	ldr	r2, [r7, #0]
 8019378:	697b      	ldr	r3, [r7, #20]
 801937a:	429a      	cmp	r2, r3
 801937c:	d901      	bls.n	8019382 <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 801937e:	697b      	ldr	r3, [r7, #20]
 8019380:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 8019382:	683b      	ldr	r3, [r7, #0]
 8019384:	687a      	ldr	r2, [r7, #4]
 8019386:	69b9      	ldr	r1, [r7, #24]
 8019388:	68f8      	ldr	r0, [r7, #12]
 801938a:	f7ff fe81 	bl	8019090 <SPIF_ReadFn>
 801938e:	4603      	mov	r3, r0
 8019390:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 8019392:	68f8      	ldr	r0, [r7, #12]
 8019394:	f7ff fada 	bl	801894c <SPIF_UnLock>
  return retVal;
 8019398:	7ffb      	ldrb	r3, [r7, #31]
}
 801939a:	4618      	mov	r0, r3
 801939c:	3720      	adds	r7, #32
 801939e:	46bd      	mov	sp, r7
 80193a0:	bd80      	pop	{r7, pc}
	...

080193a4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80193a4:	b480      	push	{r7}
 80193a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80193a8:	4b03      	ldr	r3, [pc, #12]	; (80193b8 <LL_FLASH_GetUDN+0x14>)
 80193aa:	681b      	ldr	r3, [r3, #0]
}
 80193ac:	4618      	mov	r0, r3
 80193ae:	46bd      	mov	sp, r7
 80193b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b4:	4770      	bx	lr
 80193b6:	bf00      	nop
 80193b8:	1fff7580 	.word	0x1fff7580

080193bc <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80193bc:	b480      	push	{r7}
 80193be:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80193c0:	4b03      	ldr	r3, [pc, #12]	; (80193d0 <LL_FLASH_GetDeviceID+0x14>)
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	b2db      	uxtb	r3, r3
}
 80193c6:	4618      	mov	r0, r3
 80193c8:	46bd      	mov	sp, r7
 80193ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ce:	4770      	bx	lr
 80193d0:	1fff7584 	.word	0x1fff7584

080193d4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80193d4:	b480      	push	{r7}
 80193d6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80193d8:	4b03      	ldr	r3, [pc, #12]	; (80193e8 <LL_FLASH_GetSTCompanyID+0x14>)
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	0a1b      	lsrs	r3, r3, #8
}
 80193de:	4618      	mov	r0, r3
 80193e0:	46bd      	mov	sp, r7
 80193e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193e6:	4770      	bx	lr
 80193e8:	1fff7584 	.word	0x1fff7584

080193ec <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80193ec:	b5b0      	push	{r4, r5, r7, lr}
 80193ee:	b090      	sub	sp, #64	; 0x40
 80193f0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80193f2:	2392      	movs	r3, #146	; 0x92
 80193f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80193f8:	4b25      	ldr	r3, [pc, #148]	; (8019490 <APP_BLE_Init+0xa4>)
 80193fa:	1d3c      	adds	r4, r7, #4
 80193fc:	461d      	mov	r5, r3
 80193fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801940a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801940e:	c403      	stmia	r4!, {r0, r1}
 8019410:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8019412:	f000 f905 	bl	8019620 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8019416:	2101      	movs	r1, #1
 8019418:	2002      	movs	r0, #2
 801941a:	f001 fb35 	bl	801aa88 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 801941e:	4a1d      	ldr	r2, [pc, #116]	; (8019494 <APP_BLE_Init+0xa8>)
 8019420:	2100      	movs	r1, #0
 8019422:	2002      	movs	r0, #2
 8019424:	f001 fc5c 	bl	801ace0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8019428:	1d3b      	adds	r3, r7, #4
 801942a:	4618      	mov	r0, r3
 801942c:	f7fe fb7c 	bl	8017b28 <SHCI_C2_BLE_Init>
 8019430:	4603      	mov	r3, r0
 8019432:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8019436:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801943a:	2b00      	cmp	r3, #0
 801943c:	d001      	beq.n	8019442 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 801943e:	f7e9 fe19 	bl	8003074 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8019442:	f000 f903 	bl	801964c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8019446:	f7fe fac9 	bl	80179dc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 801944a:	4b13      	ldr	r3, [pc, #76]	; (8019498 <APP_BLE_Init+0xac>)
 801944c:	2200      	movs	r2, #0
 801944e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8019452:	4b11      	ldr	r3, [pc, #68]	; (8019498 <APP_BLE_Init+0xac>)
 8019454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019458:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 801945a:	4a10      	ldr	r2, [pc, #64]	; (801949c <APP_BLE_Init+0xb0>)
 801945c:	2100      	movs	r1, #0
 801945e:	2001      	movs	r0, #1
 8019460:	f001 fc3e 	bl	801ace0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8019464:	2006      	movs	r0, #6
 8019466:	f7fe f92c 	bl	80176c2 <aci_hal_set_radio_activity_mask>
 801946a:	4603      	mov	r3, r0
 801946c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8019470:	f000 fa9b 	bl	80199aa <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8019474:	4b08      	ldr	r3, [pc, #32]	; (8019498 <APP_BLE_Init+0xac>)
 8019476:	2200      	movs	r2, #0
 8019478:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 801947a:	4b07      	ldr	r3, [pc, #28]	; (8019498 <APP_BLE_Init+0xac>)
 801947c:	2200      	movs	r2, #0
 801947e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8019480:	2001      	movs	r0, #1
 8019482:	f000 f997 	bl	80197b4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8019486:	bf00      	nop
}
 8019488:	3740      	adds	r7, #64	; 0x40
 801948a:	46bd      	mov	sp, r7
 801948c:	bdb0      	pop	{r4, r5, r7, pc}
 801948e:	bf00      	nop
 8019490:	08021a4c 	.word	0x08021a4c
 8019494:	08017d45 	.word	0x08017d45
 8019498:	200015d4 	.word	0x200015d4
 801949c:	0801989d 	.word	0x0801989d

080194a0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80194a0:	b580      	push	{r7, lr}
 80194a2:	b08a      	sub	sp, #40	; 0x28
 80194a4:	af00      	add	r7, sp, #0
 80194a6:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80194a8:	2392      	movs	r3, #146	; 0x92
 80194aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	3301      	adds	r3, #1
 80194b2:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 80194b4:	6a3b      	ldr	r3, [r7, #32]
 80194b6:	781b      	ldrb	r3, [r3, #0]
 80194b8:	2bff      	cmp	r3, #255	; 0xff
 80194ba:	d053      	beq.n	8019564 <SVCCTL_App_Notification+0xc4>
 80194bc:	2bff      	cmp	r3, #255	; 0xff
 80194be:	f300 80a1 	bgt.w	8019604 <SVCCTL_App_Notification+0x164>
 80194c2:	2b05      	cmp	r3, #5
 80194c4:	d002      	beq.n	80194cc <SVCCTL_App_Notification+0x2c>
 80194c6:	2b3e      	cmp	r3, #62	; 0x3e
 80194c8:	d020      	beq.n	801950c <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80194ca:	e09b      	b.n	8019604 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80194cc:	6a3b      	ldr	r3, [r7, #32]
 80194ce:	3302      	adds	r3, #2
 80194d0:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80194d8:	b29a      	uxth	r2, r3
 80194da:	4b4e      	ldr	r3, [pc, #312]	; (8019614 <SVCCTL_App_Notification+0x174>)
 80194dc:	8adb      	ldrh	r3, [r3, #22]
 80194de:	429a      	cmp	r2, r3
 80194e0:	d106      	bne.n	80194f0 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80194e2:	4b4c      	ldr	r3, [pc, #304]	; (8019614 <SVCCTL_App_Notification+0x174>)
 80194e4:	2200      	movs	r2, #0
 80194e6:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80194e8:	4b4a      	ldr	r3, [pc, #296]	; (8019614 <SVCCTL_App_Notification+0x174>)
 80194ea:	2200      	movs	r2, #0
 80194ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80194f0:	2001      	movs	r0, #1
 80194f2:	f000 f95f 	bl	80197b4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80194f6:	4b48      	ldr	r3, [pc, #288]	; (8019618 <SVCCTL_App_Notification+0x178>)
 80194f8:	2201      	movs	r2, #1
 80194fa:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80194fc:	4b45      	ldr	r3, [pc, #276]	; (8019614 <SVCCTL_App_Notification+0x174>)
 80194fe:	8ada      	ldrh	r2, [r3, #22]
 8019500:	4b45      	ldr	r3, [pc, #276]	; (8019618 <SVCCTL_App_Notification+0x178>)
 8019502:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8019504:	4844      	ldr	r0, [pc, #272]	; (8019618 <SVCCTL_App_Notification+0x178>)
 8019506:	f000 fa3c 	bl	8019982 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 801950a:	e07e      	b.n	801960a <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 801950c:	6a3b      	ldr	r3, [r7, #32]
 801950e:	3302      	adds	r3, #2
 8019510:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8019512:	697b      	ldr	r3, [r7, #20]
 8019514:	781b      	ldrb	r3, [r3, #0]
 8019516:	2b01      	cmp	r3, #1
 8019518:	d001      	beq.n	801951e <SVCCTL_App_Notification+0x7e>
 801951a:	2b03      	cmp	r3, #3
          break;
 801951c:	e021      	b.n	8019562 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 801951e:	697b      	ldr	r3, [r7, #20]
 8019520:	3301      	adds	r3, #1
 8019522:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8019524:	4b3b      	ldr	r3, [pc, #236]	; (8019614 <SVCCTL_App_Notification+0x174>)
 8019526:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801952a:	2b04      	cmp	r3, #4
 801952c:	d104      	bne.n	8019538 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 801952e:	4b39      	ldr	r3, [pc, #228]	; (8019614 <SVCCTL_App_Notification+0x174>)
 8019530:	2206      	movs	r2, #6
 8019532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8019536:	e003      	b.n	8019540 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8019538:	4b36      	ldr	r3, [pc, #216]	; (8019614 <SVCCTL_App_Notification+0x174>)
 801953a:	2205      	movs	r2, #5
 801953c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8019540:	693b      	ldr	r3, [r7, #16]
 8019542:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8019546:	b29a      	uxth	r2, r3
 8019548:	4b32      	ldr	r3, [pc, #200]	; (8019614 <SVCCTL_App_Notification+0x174>)
 801954a:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 801954c:	4b32      	ldr	r3, [pc, #200]	; (8019618 <SVCCTL_App_Notification+0x178>)
 801954e:	2200      	movs	r2, #0
 8019550:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8019552:	4b30      	ldr	r3, [pc, #192]	; (8019614 <SVCCTL_App_Notification+0x174>)
 8019554:	8ada      	ldrh	r2, [r3, #22]
 8019556:	4b30      	ldr	r3, [pc, #192]	; (8019618 <SVCCTL_App_Notification+0x178>)
 8019558:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 801955a:	482f      	ldr	r0, [pc, #188]	; (8019618 <SVCCTL_App_Notification+0x178>)
 801955c:	f000 fa11 	bl	8019982 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8019560:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8019562:	e052      	b.n	801960a <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8019564:	6a3b      	ldr	r3, [r7, #32]
 8019566:	3302      	adds	r3, #2
 8019568:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 801956a:	69fb      	ldr	r3, [r7, #28]
 801956c:	881b      	ldrh	r3, [r3, #0]
 801956e:	b29b      	uxth	r3, r3
 8019570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019574:	d040      	beq.n	80195f8 <SVCCTL_App_Notification+0x158>
 8019576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801957a:	dc45      	bgt.n	8019608 <SVCCTL_App_Notification+0x168>
 801957c:	2b04      	cmp	r3, #4
 801957e:	d03d      	beq.n	80195fc <SVCCTL_App_Notification+0x15c>
 8019580:	2b04      	cmp	r3, #4
 8019582:	db41      	blt.n	8019608 <SVCCTL_App_Notification+0x168>
 8019584:	f240 420a 	movw	r2, #1034	; 0x40a
 8019588:	4293      	cmp	r3, r2
 801958a:	dc3d      	bgt.n	8019608 <SVCCTL_App_Notification+0x168>
 801958c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019590:	dd3a      	ble.n	8019608 <SVCCTL_App_Notification+0x168>
 8019592:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8019596:	2b09      	cmp	r3, #9
 8019598:	d836      	bhi.n	8019608 <SVCCTL_App_Notification+0x168>
 801959a:	a201      	add	r2, pc, #4	; (adr r2, 80195a0 <SVCCTL_App_Notification+0x100>)
 801959c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195a0:	080195f1 	.word	0x080195f1
 80195a4:	080195c9 	.word	0x080195c9
 80195a8:	08019609 	.word	0x08019609
 80195ac:	08019609 	.word	0x08019609
 80195b0:	08019609 	.word	0x08019609
 80195b4:	08019609 	.word	0x08019609
 80195b8:	08019601 	.word	0x08019601
 80195bc:	08019609 	.word	0x08019609
 80195c0:	080195dd 	.word	0x080195dd
 80195c4:	08019601 	.word	0x08019601
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80195c8:	4b12      	ldr	r3, [pc, #72]	; (8019614 <SVCCTL_App_Notification+0x174>)
 80195ca:	8adb      	ldrh	r3, [r3, #22]
 80195cc:	4913      	ldr	r1, [pc, #76]	; (801961c <SVCCTL_App_Notification+0x17c>)
 80195ce:	4618      	mov	r0, r3
 80195d0:	f7fd face 	bl	8016b70 <aci_gap_pass_key_resp>
 80195d4:	4603      	mov	r3, r0
 80195d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80195da:	e012      	b.n	8019602 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80195dc:	4b0d      	ldr	r3, [pc, #52]	; (8019614 <SVCCTL_App_Notification+0x174>)
 80195de:	8adb      	ldrh	r3, [r3, #22]
 80195e0:	2101      	movs	r1, #1
 80195e2:	4618      	mov	r0, r3
 80195e4:	f7fd fc6e 	bl	8016ec4 <aci_gap_numeric_comparison_value_confirm_yesno>
 80195e8:	4603      	mov	r3, r0
 80195ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80195ee:	e008      	b.n	8019602 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80195f0:	69fb      	ldr	r3, [r7, #28]
 80195f2:	3302      	adds	r3, #2
 80195f4:	61bb      	str	r3, [r7, #24]
          break;
 80195f6:	e004      	b.n	8019602 <SVCCTL_App_Notification+0x162>
          break;
 80195f8:	bf00      	nop
 80195fa:	e005      	b.n	8019608 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80195fc:	bf00      	nop
 80195fe:	e003      	b.n	8019608 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8019600:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8019602:	e001      	b.n	8019608 <SVCCTL_App_Notification+0x168>
      break;
 8019604:	bf00      	nop
 8019606:	e000      	b.n	801960a <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8019608:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 801960a:	2301      	movs	r3, #1
}
 801960c:	4618      	mov	r0, r3
 801960e:	3728      	adds	r7, #40	; 0x28
 8019610:	46bd      	mov	sp, r7
 8019612:	bd80      	pop	{r7, pc}
 8019614:	200015d4 	.word	0x200015d4
 8019618:	20001658 	.word	0x20001658
 801961c:	0001b207 	.word	0x0001b207

08019620 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8019620:	b580      	push	{r7, lr}
 8019622:	b082      	sub	sp, #8
 8019624:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8019626:	4b06      	ldr	r3, [pc, #24]	; (8019640 <Ble_Tl_Init+0x20>)
 8019628:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 801962a:	4b06      	ldr	r3, [pc, #24]	; (8019644 <Ble_Tl_Init+0x24>)
 801962c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 801962e:	463b      	mov	r3, r7
 8019630:	4619      	mov	r1, r3
 8019632:	4805      	ldr	r0, [pc, #20]	; (8019648 <Ble_Tl_Init+0x28>)
 8019634:	f7fe fb6a 	bl	8017d0c <hci_init>

  return;
 8019638:	bf00      	nop
}
 801963a:	3708      	adds	r7, #8
 801963c:	46bd      	mov	sp, r7
 801963e:	bd80      	pop	{r7, pc}
 8019640:	200300d8 	.word	0x200300d8
 8019644:	0801994d 	.word	0x0801994d
 8019648:	08019915 	.word	0x08019915

0801964c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 801964c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801964e:	b08d      	sub	sp, #52	; 0x34
 8019650:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8019652:	2300      	movs	r3, #0
 8019654:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8019656:	2392      	movs	r3, #146	; 0x92
 8019658:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 801965a:	f7fe f886 	bl	801776a <hci_reset>
 801965e:	4603      	mov	r3, r0
 8019660:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8019662:	f000 f8d7 	bl	8019814 <BleGetBdAddress>
 8019666:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8019668:	693a      	ldr	r2, [r7, #16]
 801966a:	2106      	movs	r1, #6
 801966c:	2000      	movs	r0, #0
 801966e:	f7fd ff3c 	bl	80174ea <aci_hal_write_config_data>
 8019672:	4603      	mov	r3, r0
 8019674:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8019676:	4a4a      	ldr	r2, [pc, #296]	; (80197a0 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8019678:	2110      	movs	r1, #16
 801967a:	2018      	movs	r0, #24
 801967c:	f7fd ff35 	bl	80174ea <aci_hal_write_config_data>
 8019680:	4603      	mov	r3, r0
 8019682:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8019684:	4a47      	ldr	r2, [pc, #284]	; (80197a4 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8019686:	2110      	movs	r1, #16
 8019688:	2008      	movs	r0, #8
 801968a:	f7fd ff2e 	bl	80174ea <aci_hal_write_config_data>
 801968e:	4603      	mov	r3, r0
 8019690:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8019692:	2118      	movs	r1, #24
 8019694:	2001      	movs	r0, #1
 8019696:	f7fd ffad 	bl	80175f4 <aci_hal_set_tx_power_level>
 801969a:	4603      	mov	r3, r0
 801969c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 801969e:	f7fd fc78 	bl	8016f92 <aci_gatt_init>
 80196a2:	4603      	mov	r3, r0
 80196a4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80196a6:	2300      	movs	r3, #0
 80196a8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80196aa:	7bfb      	ldrb	r3, [r7, #15]
 80196ac:	f043 0301 	orr.w	r3, r3, #1
 80196b0:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80196b2:	7bfb      	ldrb	r3, [r7, #15]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d01f      	beq.n	80196f8 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80196b8:	4b3b      	ldr	r3, [pc, #236]	; (80197a8 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 80196ba:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80196bc:	1dba      	adds	r2, r7, #6
 80196be:	7bf8      	ldrb	r0, [r7, #15]
 80196c0:	1cbb      	adds	r3, r7, #2
 80196c2:	9301      	str	r3, [sp, #4]
 80196c4:	1d3b      	adds	r3, r7, #4
 80196c6:	9300      	str	r3, [sp, #0]
 80196c8:	4613      	mov	r3, r2
 80196ca:	2208      	movs	r2, #8
 80196cc:	2100      	movs	r1, #0
 80196ce:	f7fd fab6 	bl	8016c3e <aci_gap_init>
 80196d2:	4603      	mov	r3, r0
 80196d4:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80196d6:	88fc      	ldrh	r4, [r7, #6]
 80196d8:	88bd      	ldrh	r5, [r7, #4]
 80196da:	68b8      	ldr	r0, [r7, #8]
 80196dc:	f7e6 fda0 	bl	8000220 <strlen>
 80196e0:	4603      	mov	r3, r0
 80196e2:	b2da      	uxtb	r2, r3
 80196e4:	68bb      	ldr	r3, [r7, #8]
 80196e6:	9300      	str	r3, [sp, #0]
 80196e8:	4613      	mov	r3, r2
 80196ea:	2200      	movs	r2, #0
 80196ec:	4629      	mov	r1, r5
 80196ee:	4620      	mov	r0, r4
 80196f0:	f7fd fe52 	bl	8017398 <aci_gatt_update_char_value>
 80196f4:	4603      	mov	r3, r0
 80196f6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80196f8:	88f8      	ldrh	r0, [r7, #6]
 80196fa:	8879      	ldrh	r1, [r7, #2]
 80196fc:	463b      	mov	r3, r7
 80196fe:	9300      	str	r3, [sp, #0]
 8019700:	2302      	movs	r3, #2
 8019702:	2200      	movs	r2, #0
 8019704:	f7fd fe48 	bl	8017398 <aci_gatt_update_char_value>
 8019708:	4603      	mov	r3, r0
 801970a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 801970c:	2202      	movs	r2, #2
 801970e:	2102      	movs	r1, #2
 8019710:	2000      	movs	r0, #0
 8019712:	f7fe f84e 	bl	80177b2 <hci_le_set_default_phy>
 8019716:	4603      	mov	r3, r0
 8019718:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 801971a:	4b24      	ldr	r3, [pc, #144]	; (80197ac <Ble_Hci_Gap_Gatt_Init+0x160>)
 801971c:	2201      	movs	r2, #1
 801971e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8019720:	4b22      	ldr	r3, [pc, #136]	; (80197ac <Ble_Hci_Gap_Gatt_Init+0x160>)
 8019722:	781b      	ldrb	r3, [r3, #0]
 8019724:	4618      	mov	r0, r3
 8019726:	f7fd f90b 	bl	8016940 <aci_gap_set_io_capability>
 801972a:	4603      	mov	r3, r0
 801972c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 801972e:	4b1f      	ldr	r3, [pc, #124]	; (80197ac <Ble_Hci_Gap_Gatt_Init+0x160>)
 8019730:	2201      	movs	r2, #1
 8019732:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8019734:	4b1d      	ldr	r3, [pc, #116]	; (80197ac <Ble_Hci_Gap_Gatt_Init+0x160>)
 8019736:	2208      	movs	r2, #8
 8019738:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 801973a:	4b1c      	ldr	r3, [pc, #112]	; (80197ac <Ble_Hci_Gap_Gatt_Init+0x160>)
 801973c:	2210      	movs	r2, #16
 801973e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8019740:	4b1a      	ldr	r3, [pc, #104]	; (80197ac <Ble_Hci_Gap_Gatt_Init+0x160>)
 8019742:	2200      	movs	r2, #0
 8019744:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8019746:	4b19      	ldr	r3, [pc, #100]	; (80197ac <Ble_Hci_Gap_Gatt_Init+0x160>)
 8019748:	4a19      	ldr	r2, [pc, #100]	; (80197b0 <Ble_Hci_Gap_Gatt_Init+0x164>)
 801974a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 801974c:	4b17      	ldr	r3, [pc, #92]	; (80197ac <Ble_Hci_Gap_Gatt_Init+0x160>)
 801974e:	2200      	movs	r2, #0
 8019750:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8019752:	4b16      	ldr	r3, [pc, #88]	; (80197ac <Ble_Hci_Gap_Gatt_Init+0x160>)
 8019754:	789c      	ldrb	r4, [r3, #2]
 8019756:	4b15      	ldr	r3, [pc, #84]	; (80197ac <Ble_Hci_Gap_Gatt_Init+0x160>)
 8019758:	785d      	ldrb	r5, [r3, #1]
 801975a:	4b14      	ldr	r3, [pc, #80]	; (80197ac <Ble_Hci_Gap_Gatt_Init+0x160>)
 801975c:	791b      	ldrb	r3, [r3, #4]
 801975e:	4a13      	ldr	r2, [pc, #76]	; (80197ac <Ble_Hci_Gap_Gatt_Init+0x160>)
 8019760:	7952      	ldrb	r2, [r2, #5]
 8019762:	4912      	ldr	r1, [pc, #72]	; (80197ac <Ble_Hci_Gap_Gatt_Init+0x160>)
 8019764:	78c9      	ldrb	r1, [r1, #3]
 8019766:	4811      	ldr	r0, [pc, #68]	; (80197ac <Ble_Hci_Gap_Gatt_Init+0x160>)
 8019768:	6880      	ldr	r0, [r0, #8]
 801976a:	2600      	movs	r6, #0
 801976c:	9604      	str	r6, [sp, #16]
 801976e:	9003      	str	r0, [sp, #12]
 8019770:	9102      	str	r1, [sp, #8]
 8019772:	9201      	str	r2, [sp, #4]
 8019774:	9300      	str	r3, [sp, #0]
 8019776:	2300      	movs	r3, #0
 8019778:	2201      	movs	r2, #1
 801977a:	4629      	mov	r1, r5
 801977c:	4620      	mov	r0, r4
 801977e:	f7fd f933 	bl	80169e8 <aci_gap_set_authentication_requirement>
 8019782:	4603      	mov	r3, r0
 8019784:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8019786:	4b09      	ldr	r3, [pc, #36]	; (80197ac <Ble_Hci_Gap_Gatt_Init+0x160>)
 8019788:	789b      	ldrb	r3, [r3, #2]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d003      	beq.n	8019796 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 801978e:	f7fd fb75 	bl	8016e7c <aci_gap_configure_filter_accept_list>
 8019792:	4603      	mov	r3, r0
 8019794:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8019796:	bf00      	nop
 8019798:	371c      	adds	r7, #28
 801979a:	46bd      	mov	sp, r7
 801979c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801979e:	bf00      	nop
 80197a0:	08023894 	.word	0x08023894
 80197a4:	080238a4 	.word	0x080238a4
 80197a8:	08021a88 	.word	0x08021a88
 80197ac:	200015d4 	.word	0x200015d4
 80197b0:	0001b207 	.word	0x0001b207

080197b4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80197b4:	b580      	push	{r7, lr}
 80197b6:	b08c      	sub	sp, #48	; 0x30
 80197b8:	af08      	add	r7, sp, #32
 80197ba:	4603      	mov	r3, r0
 80197bc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80197be:	2392      	movs	r3, #146	; 0x92
 80197c0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80197c2:	4a12      	ldr	r2, [pc, #72]	; (801980c <Adv_Request+0x58>)
 80197c4:	79fb      	ldrb	r3, [r7, #7]
 80197c6:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80197ca:	2300      	movs	r3, #0
 80197cc:	9306      	str	r3, [sp, #24]
 80197ce:	2300      	movs	r3, #0
 80197d0:	9305      	str	r3, [sp, #20]
 80197d2:	2300      	movs	r3, #0
 80197d4:	9304      	str	r3, [sp, #16]
 80197d6:	2300      	movs	r3, #0
 80197d8:	9303      	str	r3, [sp, #12]
 80197da:	2300      	movs	r3, #0
 80197dc:	9302      	str	r3, [sp, #8]
 80197de:	2300      	movs	r3, #0
 80197e0:	9301      	str	r3, [sp, #4]
 80197e2:	2300      	movs	r3, #0
 80197e4:	9300      	str	r3, [sp, #0]
 80197e6:	2300      	movs	r3, #0
 80197e8:	22a0      	movs	r2, #160	; 0xa0
 80197ea:	2180      	movs	r1, #128	; 0x80
 80197ec:	2000      	movs	r0, #0
 80197ee:	f7fc ffad 	bl	801674c <aci_gap_set_discoverable>
 80197f2:	4603      	mov	r3, r0
 80197f4:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80197f6:	4906      	ldr	r1, [pc, #24]	; (8019810 <Adv_Request+0x5c>)
 80197f8:	200c      	movs	r0, #12
 80197fa:	f7fd facd 	bl	8016d98 <aci_gap_update_adv_data>
 80197fe:	4603      	mov	r3, r0
 8019800:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8019802:	bf00      	nop
}
 8019804:	3710      	adds	r7, #16
 8019806:	46bd      	mov	sp, r7
 8019808:	bd80      	pop	{r7, pc}
 801980a:	bf00      	nop
 801980c:	200015d4 	.word	0x200015d4
 8019810:	200000c4 	.word	0x200000c4

08019814 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8019814:	b580      	push	{r7, lr}
 8019816:	b086      	sub	sp, #24
 8019818:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 801981a:	f7ff fdc3 	bl	80193a4 <LL_FLASH_GetUDN>
 801981e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8019820:	693b      	ldr	r3, [r7, #16]
 8019822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019826:	d023      	beq.n	8019870 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8019828:	f7ff fdd4 	bl	80193d4 <LL_FLASH_GetSTCompanyID>
 801982c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 801982e:	f7ff fdc5 	bl	80193bc <LL_FLASH_GetDeviceID>
 8019832:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8019834:	693b      	ldr	r3, [r7, #16]
 8019836:	b2da      	uxtb	r2, r3
 8019838:	4b16      	ldr	r3, [pc, #88]	; (8019894 <BleGetBdAddress+0x80>)
 801983a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 801983c:	693b      	ldr	r3, [r7, #16]
 801983e:	0a1b      	lsrs	r3, r3, #8
 8019840:	b2da      	uxtb	r2, r3
 8019842:	4b14      	ldr	r3, [pc, #80]	; (8019894 <BleGetBdAddress+0x80>)
 8019844:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	b2da      	uxtb	r2, r3
 801984a:	4b12      	ldr	r3, [pc, #72]	; (8019894 <BleGetBdAddress+0x80>)
 801984c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 801984e:	68bb      	ldr	r3, [r7, #8]
 8019850:	b2da      	uxtb	r2, r3
 8019852:	4b10      	ldr	r3, [pc, #64]	; (8019894 <BleGetBdAddress+0x80>)
 8019854:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8019856:	68bb      	ldr	r3, [r7, #8]
 8019858:	0a1b      	lsrs	r3, r3, #8
 801985a:	b2da      	uxtb	r2, r3
 801985c:	4b0d      	ldr	r3, [pc, #52]	; (8019894 <BleGetBdAddress+0x80>)
 801985e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8019860:	68bb      	ldr	r3, [r7, #8]
 8019862:	0c1b      	lsrs	r3, r3, #16
 8019864:	b2da      	uxtb	r2, r3
 8019866:	4b0b      	ldr	r3, [pc, #44]	; (8019894 <BleGetBdAddress+0x80>)
 8019868:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 801986a:	4b0a      	ldr	r3, [pc, #40]	; (8019894 <BleGetBdAddress+0x80>)
 801986c:	617b      	str	r3, [r7, #20]
 801986e:	e00b      	b.n	8019888 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8019870:	2000      	movs	r0, #0
 8019872:	f7fe ff67 	bl	8018744 <OTP_Read>
 8019876:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d002      	beq.n	8019884 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	617b      	str	r3, [r7, #20]
 8019882:	e001      	b.n	8019888 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8019884:	4b04      	ldr	r3, [pc, #16]	; (8019898 <BleGetBdAddress+0x84>)
 8019886:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8019888:	697b      	ldr	r3, [r7, #20]
}
 801988a:	4618      	mov	r0, r3
 801988c:	3718      	adds	r7, #24
 801988e:	46bd      	mov	sp, r7
 8019890:	bd80      	pop	{r7, pc}
 8019892:	bf00      	nop
 8019894:	200015cc 	.word	0x200015cc
 8019898:	0802388c 	.word	0x0802388c

0801989c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 801989c:	b580      	push	{r7, lr}
 801989e:	b082      	sub	sp, #8
 80198a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80198a2:	4b0a      	ldr	r3, [pc, #40]	; (80198cc <Adv_Cancel+0x30>)
 80198a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80198a8:	2b05      	cmp	r3, #5
 80198aa:	d00a      	beq.n	80198c2 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80198ac:	2392      	movs	r3, #146	; 0x92
 80198ae:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80198b0:	f7fc ff28 	bl	8016704 <aci_gap_set_non_discoverable>
 80198b4:	4603      	mov	r3, r0
 80198b6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80198b8:	4b04      	ldr	r3, [pc, #16]	; (80198cc <Adv_Cancel+0x30>)
 80198ba:	2200      	movs	r2, #0
 80198bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80198c0:	bf00      	nop
 80198c2:	bf00      	nop
}
 80198c4:	3708      	adds	r7, #8
 80198c6:	46bd      	mov	sp, r7
 80198c8:	bd80      	pop	{r7, pc}
 80198ca:	bf00      	nop
 80198cc:	200015d4 	.word	0x200015d4

080198d0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80198d0:	b580      	push	{r7, lr}
 80198d2:	b082      	sub	sp, #8
 80198d4:	af00      	add	r7, sp, #0
 80198d6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80198d8:	2100      	movs	r1, #0
 80198da:	2002      	movs	r0, #2
 80198dc:	f001 fa22 	bl	801ad24 <UTIL_SEQ_SetTask>

  return;
 80198e0:	bf00      	nop
}
 80198e2:	3708      	adds	r7, #8
 80198e4:	46bd      	mov	sp, r7
 80198e6:	bd80      	pop	{r7, pc}

080198e8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80198e8:	b580      	push	{r7, lr}
 80198ea:	b082      	sub	sp, #8
 80198ec:	af00      	add	r7, sp, #0
 80198ee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80198f0:	2001      	movs	r0, #1
 80198f2:	f001 fa83 	bl	801adfc <UTIL_SEQ_SetEvt>

  return;
 80198f6:	bf00      	nop
}
 80198f8:	3708      	adds	r7, #8
 80198fa:	46bd      	mov	sp, r7
 80198fc:	bd80      	pop	{r7, pc}

080198fe <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80198fe:	b580      	push	{r7, lr}
 8019900:	b082      	sub	sp, #8
 8019902:	af00      	add	r7, sp, #0
 8019904:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8019906:	2001      	movs	r0, #1
 8019908:	f001 fa98 	bl	801ae3c <UTIL_SEQ_WaitEvt>

  return;
 801990c:	bf00      	nop
}
 801990e:	3708      	adds	r7, #8
 8019910:	46bd      	mov	sp, r7
 8019912:	bd80      	pop	{r7, pc}

08019914 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8019914:	b580      	push	{r7, lr}
 8019916:	b084      	sub	sp, #16
 8019918:	af00      	add	r7, sp, #0
 801991a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	685b      	ldr	r3, [r3, #4]
 8019924:	3308      	adds	r3, #8
 8019926:	4618      	mov	r0, r3
 8019928:	f7fe f8aa 	bl	8017a80 <SVCCTL_UserEvtRx>
 801992c:	4603      	mov	r3, r0
 801992e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8019930:	7afb      	ldrb	r3, [r7, #11]
 8019932:	2b00      	cmp	r3, #0
 8019934:	d003      	beq.n	801993e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	2201      	movs	r2, #1
 801993a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 801993c:	e003      	b.n	8019946 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	2200      	movs	r2, #0
 8019942:	701a      	strb	r2, [r3, #0]
  return;
 8019944:	bf00      	nop
}
 8019946:	3710      	adds	r7, #16
 8019948:	46bd      	mov	sp, r7
 801994a:	bd80      	pop	{r7, pc}

0801994c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 801994c:	b580      	push	{r7, lr}
 801994e:	b084      	sub	sp, #16
 8019950:	af00      	add	r7, sp, #0
 8019952:	4603      	mov	r3, r0
 8019954:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8019956:	79fb      	ldrb	r3, [r7, #7]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d002      	beq.n	8019962 <BLE_StatusNot+0x16>
 801995c:	2b01      	cmp	r3, #1
 801995e:	d006      	beq.n	801996e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8019960:	e00b      	b.n	801997a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8019962:	2303      	movs	r3, #3
 8019964:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8019966:	68f8      	ldr	r0, [r7, #12]
 8019968:	f001 fa08 	bl	801ad7c <UTIL_SEQ_PauseTask>
      break;
 801996c:	e005      	b.n	801997a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801996e:	2303      	movs	r3, #3
 8019970:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8019972:	68f8      	ldr	r0, [r7, #12]
 8019974:	f001 fa22 	bl	801adbc <UTIL_SEQ_ResumeTask>
      break;
 8019978:	bf00      	nop
  }

  return;
 801997a:	bf00      	nop
}
 801997c:	3710      	adds	r7, #16
 801997e:	46bd      	mov	sp, r7
 8019980:	bd80      	pop	{r7, pc}

08019982 <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8019982:	b480      	push	{r7}
 8019984:	b083      	sub	sp, #12
 8019986:	af00      	add	r7, sp, #0
 8019988:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	781b      	ldrb	r3, [r3, #0]
 801998e:	2b00      	cmp	r3, #0
 8019990:	d002      	beq.n	8019998 <Custom_APP_Notification+0x16>
 8019992:	2b01      	cmp	r3, #1
 8019994:	d002      	beq.n	801999c <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8019996:	e002      	b.n	801999e <Custom_APP_Notification+0x1c>
      break;
 8019998:	bf00      	nop
 801999a:	e000      	b.n	801999e <Custom_APP_Notification+0x1c>
      break;
 801999c:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 801999e:	bf00      	nop
}
 80199a0:	370c      	adds	r7, #12
 80199a2:	46bd      	mov	sp, r7
 80199a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199a8:	4770      	bx	lr

080199aa <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80199aa:	b480      	push	{r7}
 80199ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80199ae:	bf00      	nop
}
 80199b0:	46bd      	mov	sp, r7
 80199b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199b6:	4770      	bx	lr

080199b8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80199b8:	b480      	push	{r7}
 80199ba:	b08b      	sub	sp, #44	; 0x2c
 80199bc:	af00      	add	r7, sp, #0
 80199be:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80199c0:	2300      	movs	r3, #0
 80199c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	3301      	adds	r3, #1
 80199ca:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 80199cc:	6a3b      	ldr	r3, [r7, #32]
 80199ce:	781b      	ldrb	r3, [r3, #0]
 80199d0:	2bff      	cmp	r3, #255	; 0xff
 80199d2:	d12b      	bne.n	8019a2c <Custom_STM_Event_Handler+0x74>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80199d4:	6a3b      	ldr	r3, [r7, #32]
 80199d6:	3302      	adds	r3, #2
 80199d8:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 80199da:	69fb      	ldr	r3, [r7, #28]
 80199dc:	881b      	ldrh	r3, [r3, #0]
 80199de:	b29b      	uxth	r3, r3
 80199e0:	f640 4214 	movw	r2, #3092	; 0xc14
 80199e4:	4293      	cmp	r3, r2
 80199e6:	d01b      	beq.n	8019a20 <Custom_STM_Event_Handler+0x68>
 80199e8:	f640 4214 	movw	r2, #3092	; 0xc14
 80199ec:	4293      	cmp	r3, r2
 80199ee:	dc19      	bgt.n	8019a24 <Custom_STM_Event_Handler+0x6c>
 80199f0:	f640 4201 	movw	r2, #3073	; 0xc01
 80199f4:	4293      	cmp	r3, r2
 80199f6:	d003      	beq.n	8019a00 <Custom_STM_Event_Handler+0x48>
 80199f8:	f640 4213 	movw	r2, #3091	; 0xc13
 80199fc:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 80199fe:	e014      	b.n	8019a2a <Custom_STM_Event_Handler+0x72>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8019a00:	69fb      	ldr	r3, [r7, #28]
 8019a02:	3302      	adds	r3, #2
 8019a04:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8019a06:	69bb      	ldr	r3, [r7, #24]
 8019a08:	885b      	ldrh	r3, [r3, #2]
 8019a0a:	b29b      	uxth	r3, r3
 8019a0c:	461a      	mov	r2, r3
 8019a0e:	4b0c      	ldr	r3, [pc, #48]	; (8019a40 <Custom_STM_Event_Handler+0x88>)
 8019a10:	885b      	ldrh	r3, [r3, #2]
 8019a12:	3301      	adds	r3, #1
 8019a14:	429a      	cmp	r2, r3
 8019a16:	d107      	bne.n	8019a28 <Custom_STM_Event_Handler+0x70>
            return_value = SVCCTL_EvtAckFlowEnable;
 8019a18:	2301      	movs	r3, #1
 8019a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8019a1e:	e003      	b.n	8019a28 <Custom_STM_Event_Handler+0x70>
          break;
 8019a20:	bf00      	nop
 8019a22:	e004      	b.n	8019a2e <Custom_STM_Event_Handler+0x76>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8019a24:	bf00      	nop
 8019a26:	e002      	b.n	8019a2e <Custom_STM_Event_Handler+0x76>
          break;
 8019a28:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8019a2a:	e000      	b.n	8019a2e <Custom_STM_Event_Handler+0x76>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8019a2c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8019a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8019a32:	4618      	mov	r0, r3
 8019a34:	372c      	adds	r7, #44	; 0x2c
 8019a36:	46bd      	mov	sp, r7
 8019a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a3c:	4770      	bx	lr
 8019a3e:	bf00      	nop
 8019a40:	2000165c 	.word	0x2000165c

08019a44 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8019a44:	b580      	push	{r7, lr}
 8019a46:	b08c      	sub	sp, #48	; 0x30
 8019a48:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8019a4a:	2392      	movs	r3, #146	; 0x92
 8019a4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8019a4e:	4835      	ldr	r0, [pc, #212]	; (8019b24 <SVCCTL_InitCustomSvc+0xe0>)
 8019a50:	f7fd fffc 	bl	8017a4c <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 8019a54:	2303      	movs	r3, #3
 8019a56:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BPSERVICE_UUID(uuid.Char_UUID_128);
 8019a58:	238f      	movs	r3, #143	; 0x8f
 8019a5a:	713b      	strb	r3, [r7, #4]
 8019a5c:	23e5      	movs	r3, #229	; 0xe5
 8019a5e:	717b      	strb	r3, [r7, #5]
 8019a60:	23b3      	movs	r3, #179	; 0xb3
 8019a62:	71bb      	strb	r3, [r7, #6]
 8019a64:	23d5      	movs	r3, #213	; 0xd5
 8019a66:	71fb      	strb	r3, [r7, #7]
 8019a68:	232e      	movs	r3, #46	; 0x2e
 8019a6a:	723b      	strb	r3, [r7, #8]
 8019a6c:	237f      	movs	r3, #127	; 0x7f
 8019a6e:	727b      	strb	r3, [r7, #9]
 8019a70:	234a      	movs	r3, #74	; 0x4a
 8019a72:	72bb      	strb	r3, [r7, #10]
 8019a74:	2398      	movs	r3, #152	; 0x98
 8019a76:	72fb      	strb	r3, [r7, #11]
 8019a78:	232a      	movs	r3, #42	; 0x2a
 8019a7a:	733b      	strb	r3, [r7, #12]
 8019a7c:	2348      	movs	r3, #72	; 0x48
 8019a7e:	737b      	strb	r3, [r7, #13]
 8019a80:	237a      	movs	r3, #122	; 0x7a
 8019a82:	73bb      	strb	r3, [r7, #14]
 8019a84:	23cc      	movs	r3, #204	; 0xcc
 8019a86:	73fb      	strb	r3, [r7, #15]
 8019a88:	2300      	movs	r3, #0
 8019a8a:	743b      	strb	r3, [r7, #16]
 8019a8c:	2300      	movs	r3, #0
 8019a8e:	747b      	strb	r3, [r7, #17]
 8019a90:	2300      	movs	r3, #0
 8019a92:	74bb      	strb	r3, [r7, #18]
 8019a94:	2300      	movs	r3, #0
 8019a96:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8019a98:	7dbb      	ldrb	r3, [r7, #22]
 8019a9a:	1d39      	adds	r1, r7, #4
 8019a9c:	4a22      	ldr	r2, [pc, #136]	; (8019b28 <SVCCTL_InitCustomSvc+0xe4>)
 8019a9e:	9200      	str	r2, [sp, #0]
 8019aa0:	2201      	movs	r2, #1
 8019aa2:	2002      	movs	r0, #2
 8019aa4:	f7fd fa9a 	bl	8016fdc <aci_gatt_add_service>
 8019aa8:	4603      	mov	r3, r0
 8019aaa:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  charWrite
   */
  COPY_CHARWRITE_UUID(uuid.Char_UUID_128);
 8019aac:	2319      	movs	r3, #25
 8019aae:	713b      	strb	r3, [r7, #4]
 8019ab0:	23ed      	movs	r3, #237	; 0xed
 8019ab2:	717b      	strb	r3, [r7, #5]
 8019ab4:	2382      	movs	r3, #130	; 0x82
 8019ab6:	71bb      	strb	r3, [r7, #6]
 8019ab8:	23ae      	movs	r3, #174	; 0xae
 8019aba:	71fb      	strb	r3, [r7, #7]
 8019abc:	23ed      	movs	r3, #237	; 0xed
 8019abe:	723b      	strb	r3, [r7, #8]
 8019ac0:	2321      	movs	r3, #33	; 0x21
 8019ac2:	727b      	strb	r3, [r7, #9]
 8019ac4:	234c      	movs	r3, #76	; 0x4c
 8019ac6:	72bb      	strb	r3, [r7, #10]
 8019ac8:	239d      	movs	r3, #157	; 0x9d
 8019aca:	72fb      	strb	r3, [r7, #11]
 8019acc:	2341      	movs	r3, #65	; 0x41
 8019ace:	733b      	strb	r3, [r7, #12]
 8019ad0:	2345      	movs	r3, #69	; 0x45
 8019ad2:	737b      	strb	r3, [r7, #13]
 8019ad4:	2322      	movs	r3, #34	; 0x22
 8019ad6:	73bb      	strb	r3, [r7, #14]
 8019ad8:	238e      	movs	r3, #142	; 0x8e
 8019ada:	73fb      	strb	r3, [r7, #15]
 8019adc:	2300      	movs	r3, #0
 8019ade:	743b      	strb	r3, [r7, #16]
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	747b      	strb	r3, [r7, #17]
 8019ae4:	2300      	movs	r3, #0
 8019ae6:	74bb      	strb	r3, [r7, #18]
 8019ae8:	2300      	movs	r3, #0
 8019aea:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBpserviceHdle,
 8019aec:	4b0e      	ldr	r3, [pc, #56]	; (8019b28 <SVCCTL_InitCustomSvc+0xe4>)
 8019aee:	8818      	ldrh	r0, [r3, #0]
 8019af0:	4b0e      	ldr	r3, [pc, #56]	; (8019b2c <SVCCTL_InitCustomSvc+0xe8>)
 8019af2:	781b      	ldrb	r3, [r3, #0]
 8019af4:	b29b      	uxth	r3, r3
 8019af6:	1d3a      	adds	r2, r7, #4
 8019af8:	490d      	ldr	r1, [pc, #52]	; (8019b30 <SVCCTL_InitCustomSvc+0xec>)
 8019afa:	9105      	str	r1, [sp, #20]
 8019afc:	2100      	movs	r1, #0
 8019afe:	9104      	str	r1, [sp, #16]
 8019b00:	2110      	movs	r1, #16
 8019b02:	9103      	str	r1, [sp, #12]
 8019b04:	2101      	movs	r1, #1
 8019b06:	9102      	str	r1, [sp, #8]
 8019b08:	2100      	movs	r1, #0
 8019b0a:	9101      	str	r1, [sp, #4]
 8019b0c:	2108      	movs	r1, #8
 8019b0e:	9100      	str	r1, [sp, #0]
 8019b10:	2102      	movs	r1, #2
 8019b12:	f7fd fb39 	bl	8017188 <aci_gatt_add_char>
 8019b16:	4603      	mov	r3, r0
 8019b18:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8019b1a:	bf00      	nop
}
 8019b1c:	3718      	adds	r7, #24
 8019b1e:	46bd      	mov	sp, r7
 8019b20:	bd80      	pop	{r7, pc}
 8019b22:	bf00      	nop
 8019b24:	080199b9 	.word	0x080199b9
 8019b28:	2000165c 	.word	0x2000165c
 8019b2c:	200000d0 	.word	0x200000d0
 8019b30:	2000165e 	.word	0x2000165e

08019b34 <LL_PWR_EnableBootC2>:
{
 8019b34:	b480      	push	{r7}
 8019b36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8019b38:	4b05      	ldr	r3, [pc, #20]	; (8019b50 <LL_PWR_EnableBootC2+0x1c>)
 8019b3a:	68db      	ldr	r3, [r3, #12]
 8019b3c:	4a04      	ldr	r2, [pc, #16]	; (8019b50 <LL_PWR_EnableBootC2+0x1c>)
 8019b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8019b42:	60d3      	str	r3, [r2, #12]
}
 8019b44:	bf00      	nop
 8019b46:	46bd      	mov	sp, r7
 8019b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b4c:	4770      	bx	lr
 8019b4e:	bf00      	nop
 8019b50:	58000400 	.word	0x58000400

08019b54 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8019b54:	b480      	push	{r7}
 8019b56:	b083      	sub	sp, #12
 8019b58:	af00      	add	r7, sp, #0
 8019b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8019b5c:	4b06      	ldr	r3, [pc, #24]	; (8019b78 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8019b5e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8019b62:	4905      	ldr	r1, [pc, #20]	; (8019b78 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	4313      	orrs	r3, r2
 8019b68:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8019b6c:	bf00      	nop
 8019b6e:	370c      	adds	r7, #12
 8019b70:	46bd      	mov	sp, r7
 8019b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b76:	4770      	bx	lr
 8019b78:	58000800 	.word	0x58000800

08019b7c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8019b7c:	b480      	push	{r7}
 8019b7e:	b083      	sub	sp, #12
 8019b80:	af00      	add	r7, sp, #0
 8019b82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8019b84:	4b05      	ldr	r3, [pc, #20]	; (8019b9c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8019b86:	6a1a      	ldr	r2, [r3, #32]
 8019b88:	4904      	ldr	r1, [pc, #16]	; (8019b9c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	4313      	orrs	r3, r2
 8019b8e:	620b      	str	r3, [r1, #32]
}
 8019b90:	bf00      	nop
 8019b92:	370c      	adds	r7, #12
 8019b94:	46bd      	mov	sp, r7
 8019b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b9a:	4770      	bx	lr
 8019b9c:	58000800 	.word	0x58000800

08019ba0 <LL_AHB3_GRP1_EnableClock>:
{
 8019ba0:	b480      	push	{r7}
 8019ba2:	b085      	sub	sp, #20
 8019ba4:	af00      	add	r7, sp, #0
 8019ba6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8019ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019bae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	4313      	orrs	r3, r2
 8019bb6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8019bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019bbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	4013      	ands	r3, r2
 8019bc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8019bc4:	68fb      	ldr	r3, [r7, #12]
}
 8019bc6:	bf00      	nop
 8019bc8:	3714      	adds	r7, #20
 8019bca:	46bd      	mov	sp, r7
 8019bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd0:	4770      	bx	lr

08019bd2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8019bd2:	b480      	push	{r7}
 8019bd4:	b085      	sub	sp, #20
 8019bd6:	af00      	add	r7, sp, #0
 8019bd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8019bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019bde:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8019be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	4313      	orrs	r3, r2
 8019bea:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8019bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019bf2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	4013      	ands	r3, r2
 8019bfa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8019bfc:	68fb      	ldr	r3, [r7, #12]
}
 8019bfe:	bf00      	nop
 8019c00:	3714      	adds	r7, #20
 8019c02:	46bd      	mov	sp, r7
 8019c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c08:	4770      	bx	lr

08019c0a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8019c0a:	b480      	push	{r7}
 8019c0c:	b083      	sub	sp, #12
 8019c0e:	af00      	add	r7, sp, #0
 8019c10:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	601a      	str	r2, [r3, #0]
}
 8019c1e:	bf00      	nop
 8019c20:	370c      	adds	r7, #12
 8019c22:	46bd      	mov	sp, r7
 8019c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c28:	4770      	bx	lr

08019c2a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8019c2a:	b480      	push	{r7}
 8019c2c:	b083      	sub	sp, #12
 8019c2e:	af00      	add	r7, sp, #0
 8019c30:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	f043 0201 	orr.w	r2, r3, #1
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	601a      	str	r2, [r3, #0]
}
 8019c3e:	bf00      	nop
 8019c40:	370c      	adds	r7, #12
 8019c42:	46bd      	mov	sp, r7
 8019c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c48:	4770      	bx	lr

08019c4a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8019c4a:	b480      	push	{r7}
 8019c4c:	b083      	sub	sp, #12
 8019c4e:	af00      	add	r7, sp, #0
 8019c50:	6078      	str	r0, [r7, #4]
 8019c52:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	685a      	ldr	r2, [r3, #4]
 8019c58:	683b      	ldr	r3, [r7, #0]
 8019c5a:	041b      	lsls	r3, r3, #16
 8019c5c:	43db      	mvns	r3, r3
 8019c5e:	401a      	ands	r2, r3
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	605a      	str	r2, [r3, #4]
}
 8019c64:	bf00      	nop
 8019c66:	370c      	adds	r7, #12
 8019c68:	46bd      	mov	sp, r7
 8019c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c6e:	4770      	bx	lr

08019c70 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8019c70:	b480      	push	{r7}
 8019c72:	b083      	sub	sp, #12
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	6078      	str	r0, [r7, #4]
 8019c78:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	685a      	ldr	r2, [r3, #4]
 8019c7e:	683b      	ldr	r3, [r7, #0]
 8019c80:	041b      	lsls	r3, r3, #16
 8019c82:	431a      	orrs	r2, r3
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	605a      	str	r2, [r3, #4]
}
 8019c88:	bf00      	nop
 8019c8a:	370c      	adds	r7, #12
 8019c8c:	46bd      	mov	sp, r7
 8019c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c92:	4770      	bx	lr

08019c94 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8019c94:	b480      	push	{r7}
 8019c96:	b083      	sub	sp, #12
 8019c98:	af00      	add	r7, sp, #0
 8019c9a:	6078      	str	r0, [r7, #4]
 8019c9c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	685a      	ldr	r2, [r3, #4]
 8019ca2:	683b      	ldr	r3, [r7, #0]
 8019ca4:	43db      	mvns	r3, r3
 8019ca6:	401a      	ands	r2, r3
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	605a      	str	r2, [r3, #4]
}
 8019cac:	bf00      	nop
 8019cae:	370c      	adds	r7, #12
 8019cb0:	46bd      	mov	sp, r7
 8019cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb6:	4770      	bx	lr

08019cb8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8019cb8:	b480      	push	{r7}
 8019cba:	b083      	sub	sp, #12
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	6078      	str	r0, [r7, #4]
 8019cc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	683a      	ldr	r2, [r7, #0]
 8019cc6:	609a      	str	r2, [r3, #8]
}
 8019cc8:	bf00      	nop
 8019cca:	370c      	adds	r7, #12
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cd2:	4770      	bx	lr

08019cd4 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8019cd4:	b480      	push	{r7}
 8019cd6:	b083      	sub	sp, #12
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	6078      	str	r0, [r7, #4]
 8019cdc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8019cde:	683b      	ldr	r3, [r7, #0]
 8019ce0:	041a      	lsls	r2, r3, #16
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	609a      	str	r2, [r3, #8]
}
 8019ce6:	bf00      	nop
 8019ce8:	370c      	adds	r7, #12
 8019cea:	46bd      	mov	sp, r7
 8019cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cf0:	4770      	bx	lr

08019cf2 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8019cf2:	b480      	push	{r7}
 8019cf4:	b083      	sub	sp, #12
 8019cf6:	af00      	add	r7, sp, #0
 8019cf8:	6078      	str	r0, [r7, #4]
 8019cfa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	68da      	ldr	r2, [r3, #12]
 8019d00:	683b      	ldr	r3, [r7, #0]
 8019d02:	4013      	ands	r3, r2
 8019d04:	683a      	ldr	r2, [r7, #0]
 8019d06:	429a      	cmp	r2, r3
 8019d08:	d101      	bne.n	8019d0e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8019d0a:	2301      	movs	r3, #1
 8019d0c:	e000      	b.n	8019d10 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8019d0e:	2300      	movs	r3, #0
}
 8019d10:	4618      	mov	r0, r3
 8019d12:	370c      	adds	r7, #12
 8019d14:	46bd      	mov	sp, r7
 8019d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d1a:	4770      	bx	lr

08019d1c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8019d1c:	b480      	push	{r7}
 8019d1e:	b083      	sub	sp, #12
 8019d20:	af00      	add	r7, sp, #0
 8019d22:	6078      	str	r0, [r7, #4]
 8019d24:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	69da      	ldr	r2, [r3, #28]
 8019d2a:	683b      	ldr	r3, [r7, #0]
 8019d2c:	4013      	ands	r3, r2
 8019d2e:	683a      	ldr	r2, [r7, #0]
 8019d30:	429a      	cmp	r2, r3
 8019d32:	d101      	bne.n	8019d38 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8019d34:	2301      	movs	r3, #1
 8019d36:	e000      	b.n	8019d3a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8019d38:	2300      	movs	r3, #0
}
 8019d3a:	4618      	mov	r0, r3
 8019d3c:	370c      	adds	r7, #12
 8019d3e:	46bd      	mov	sp, r7
 8019d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d44:	4770      	bx	lr
	...

08019d48 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8019d4c:	2102      	movs	r1, #2
 8019d4e:	4818      	ldr	r0, [pc, #96]	; (8019db0 <HW_IPCC_Rx_Handler+0x68>)
 8019d50:	f7ff ffe4 	bl	8019d1c <LL_C2_IPCC_IsActiveFlag_CHx>
 8019d54:	4603      	mov	r3, r0
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d008      	beq.n	8019d6c <HW_IPCC_Rx_Handler+0x24>
 8019d5a:	4b15      	ldr	r3, [pc, #84]	; (8019db0 <HW_IPCC_Rx_Handler+0x68>)
 8019d5c:	685b      	ldr	r3, [r3, #4]
 8019d5e:	f003 0302 	and.w	r3, r3, #2
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d102      	bne.n	8019d6c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8019d66:	f000 f8d5 	bl	8019f14 <HW_IPCC_SYS_EvtHandler>
 8019d6a:	e01e      	b.n	8019daa <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8019d6c:	2101      	movs	r1, #1
 8019d6e:	4810      	ldr	r0, [pc, #64]	; (8019db0 <HW_IPCC_Rx_Handler+0x68>)
 8019d70:	f7ff ffd4 	bl	8019d1c <LL_C2_IPCC_IsActiveFlag_CHx>
 8019d74:	4603      	mov	r3, r0
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d008      	beq.n	8019d8c <HW_IPCC_Rx_Handler+0x44>
 8019d7a:	4b0d      	ldr	r3, [pc, #52]	; (8019db0 <HW_IPCC_Rx_Handler+0x68>)
 8019d7c:	685b      	ldr	r3, [r3, #4]
 8019d7e:	f003 0301 	and.w	r3, r3, #1
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d102      	bne.n	8019d8c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8019d86:	f000 f889 	bl	8019e9c <HW_IPCC_BLE_EvtHandler>
 8019d8a:	e00e      	b.n	8019daa <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8019d8c:	2108      	movs	r1, #8
 8019d8e:	4808      	ldr	r0, [pc, #32]	; (8019db0 <HW_IPCC_Rx_Handler+0x68>)
 8019d90:	f7ff ffc4 	bl	8019d1c <LL_C2_IPCC_IsActiveFlag_CHx>
 8019d94:	4603      	mov	r3, r0
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d008      	beq.n	8019dac <HW_IPCC_Rx_Handler+0x64>
 8019d9a:	4b05      	ldr	r3, [pc, #20]	; (8019db0 <HW_IPCC_Rx_Handler+0x68>)
 8019d9c:	685b      	ldr	r3, [r3, #4]
 8019d9e:	f003 0308 	and.w	r3, r3, #8
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d102      	bne.n	8019dac <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8019da6:	f000 f901 	bl	8019fac <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8019daa:	bf00      	nop
 8019dac:	bf00      	nop
}
 8019dae:	bd80      	pop	{r7, pc}
 8019db0:	58000c00 	.word	0x58000c00

08019db4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8019db4:	b580      	push	{r7, lr}
 8019db6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8019db8:	2102      	movs	r1, #2
 8019dba:	4818      	ldr	r0, [pc, #96]	; (8019e1c <HW_IPCC_Tx_Handler+0x68>)
 8019dbc:	f7ff ff99 	bl	8019cf2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8019dc0:	4603      	mov	r3, r0
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d108      	bne.n	8019dd8 <HW_IPCC_Tx_Handler+0x24>
 8019dc6:	4b15      	ldr	r3, [pc, #84]	; (8019e1c <HW_IPCC_Tx_Handler+0x68>)
 8019dc8:	685b      	ldr	r3, [r3, #4]
 8019dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d102      	bne.n	8019dd8 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8019dd2:	f000 f893 	bl	8019efc <HW_IPCC_SYS_CmdEvtHandler>
 8019dd6:	e01e      	b.n	8019e16 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8019dd8:	2108      	movs	r1, #8
 8019dda:	4810      	ldr	r0, [pc, #64]	; (8019e1c <HW_IPCC_Tx_Handler+0x68>)
 8019ddc:	f7ff ff89 	bl	8019cf2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8019de0:	4603      	mov	r3, r0
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d108      	bne.n	8019df8 <HW_IPCC_Tx_Handler+0x44>
 8019de6:	4b0d      	ldr	r3, [pc, #52]	; (8019e1c <HW_IPCC_Tx_Handler+0x68>)
 8019de8:	685b      	ldr	r3, [r3, #4]
 8019dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	d102      	bne.n	8019df8 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8019df2:	f000 f8bd 	bl	8019f70 <HW_IPCC_MM_FreeBufHandler>
 8019df6:	e00e      	b.n	8019e16 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8019df8:	2120      	movs	r1, #32
 8019dfa:	4808      	ldr	r0, [pc, #32]	; (8019e1c <HW_IPCC_Tx_Handler+0x68>)
 8019dfc:	f7ff ff79 	bl	8019cf2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8019e00:	4603      	mov	r3, r0
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d108      	bne.n	8019e18 <HW_IPCC_Tx_Handler+0x64>
 8019e06:	4b05      	ldr	r3, [pc, #20]	; (8019e1c <HW_IPCC_Tx_Handler+0x68>)
 8019e08:	685b      	ldr	r3, [r3, #4]
 8019e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d102      	bne.n	8019e18 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8019e12:	f000 f84f 	bl	8019eb4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8019e16:	bf00      	nop
 8019e18:	bf00      	nop
}
 8019e1a:	bd80      	pop	{r7, pc}
 8019e1c:	58000c00 	.word	0x58000c00

08019e20 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8019e20:	b580      	push	{r7, lr}
 8019e22:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8019e24:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8019e28:	f7ff fed3 	bl	8019bd2 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8019e2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8019e30:	f7ff fea4 	bl	8019b7c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8019e34:	f44f 7000 	mov.w	r0, #512	; 0x200
 8019e38:	f7ff fe8c 	bl	8019b54 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8019e3c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8019e3e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8019e40:	f7ff fe78 	bl	8019b34 <LL_PWR_EnableBootC2>

  return;
 8019e44:	bf00      	nop
}
 8019e46:	bd80      	pop	{r7, pc}

08019e48 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8019e48:	b580      	push	{r7, lr}
 8019e4a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8019e4c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8019e50:	f7ff fea6 	bl	8019ba0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8019e54:	4806      	ldr	r0, [pc, #24]	; (8019e70 <HW_IPCC_Init+0x28>)
 8019e56:	f7ff fee8 	bl	8019c2a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8019e5a:	4805      	ldr	r0, [pc, #20]	; (8019e70 <HW_IPCC_Init+0x28>)
 8019e5c:	f7ff fed5 	bl	8019c0a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8019e60:	202c      	movs	r0, #44	; 0x2c
 8019e62:	f7ef fbf8 	bl	8009656 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8019e66:	202d      	movs	r0, #45	; 0x2d
 8019e68:	f7ef fbf5 	bl	8009656 <HAL_NVIC_EnableIRQ>

  return;
 8019e6c:	bf00      	nop
}
 8019e6e:	bd80      	pop	{r7, pc}
 8019e70:	58000c00 	.word	0x58000c00

08019e74 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8019e74:	b580      	push	{r7, lr}
 8019e76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8019e78:	2101      	movs	r1, #1
 8019e7a:	4802      	ldr	r0, [pc, #8]	; (8019e84 <HW_IPCC_BLE_Init+0x10>)
 8019e7c:	f7ff ff0a 	bl	8019c94 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8019e80:	bf00      	nop
}
 8019e82:	bd80      	pop	{r7, pc}
 8019e84:	58000c00 	.word	0x58000c00

08019e88 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8019e88:	b580      	push	{r7, lr}
 8019e8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8019e8c:	2101      	movs	r1, #1
 8019e8e:	4802      	ldr	r0, [pc, #8]	; (8019e98 <HW_IPCC_BLE_SendCmd+0x10>)
 8019e90:	f7ff ff20 	bl	8019cd4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8019e94:	bf00      	nop
}
 8019e96:	bd80      	pop	{r7, pc}
 8019e98:	58000c00 	.word	0x58000c00

08019e9c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8019e9c:	b580      	push	{r7, lr}
 8019e9e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8019ea0:	f7fe fa98 	bl	80183d4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8019ea4:	2101      	movs	r1, #1
 8019ea6:	4802      	ldr	r0, [pc, #8]	; (8019eb0 <HW_IPCC_BLE_EvtHandler+0x14>)
 8019ea8:	f7ff ff06 	bl	8019cb8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8019eac:	bf00      	nop
}
 8019eae:	bd80      	pop	{r7, pc}
 8019eb0:	58000c00 	.word	0x58000c00

08019eb4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8019eb4:	b580      	push	{r7, lr}
 8019eb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8019eb8:	2120      	movs	r1, #32
 8019eba:	4803      	ldr	r0, [pc, #12]	; (8019ec8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8019ebc:	f7ff fed8 	bl	8019c70 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8019ec0:	f7fe fab8 	bl	8018434 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8019ec4:	bf00      	nop
}
 8019ec6:	bd80      	pop	{r7, pc}
 8019ec8:	58000c00 	.word	0x58000c00

08019ecc <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8019ecc:	b580      	push	{r7, lr}
 8019ece:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8019ed0:	2102      	movs	r1, #2
 8019ed2:	4802      	ldr	r0, [pc, #8]	; (8019edc <HW_IPCC_SYS_Init+0x10>)
 8019ed4:	f7ff fede 	bl	8019c94 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8019ed8:	bf00      	nop
}
 8019eda:	bd80      	pop	{r7, pc}
 8019edc:	58000c00 	.word	0x58000c00

08019ee0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8019ee0:	b580      	push	{r7, lr}
 8019ee2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8019ee4:	2102      	movs	r1, #2
 8019ee6:	4804      	ldr	r0, [pc, #16]	; (8019ef8 <HW_IPCC_SYS_SendCmd+0x18>)
 8019ee8:	f7ff fef4 	bl	8019cd4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8019eec:	2102      	movs	r1, #2
 8019eee:	4802      	ldr	r0, [pc, #8]	; (8019ef8 <HW_IPCC_SYS_SendCmd+0x18>)
 8019ef0:	f7ff feab 	bl	8019c4a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8019ef4:	bf00      	nop
}
 8019ef6:	bd80      	pop	{r7, pc}
 8019ef8:	58000c00 	.word	0x58000c00

08019efc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8019efc:	b580      	push	{r7, lr}
 8019efe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8019f00:	2102      	movs	r1, #2
 8019f02:	4803      	ldr	r0, [pc, #12]	; (8019f10 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8019f04:	f7ff feb4 	bl	8019c70 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8019f08:	f7fe fae4 	bl	80184d4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8019f0c:	bf00      	nop
}
 8019f0e:	bd80      	pop	{r7, pc}
 8019f10:	58000c00 	.word	0x58000c00

08019f14 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8019f14:	b580      	push	{r7, lr}
 8019f16:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8019f18:	f7fe faf2 	bl	8018500 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8019f1c:	2102      	movs	r1, #2
 8019f1e:	4802      	ldr	r0, [pc, #8]	; (8019f28 <HW_IPCC_SYS_EvtHandler+0x14>)
 8019f20:	f7ff feca 	bl	8019cb8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8019f24:	bf00      	nop
}
 8019f26:	bd80      	pop	{r7, pc}
 8019f28:	58000c00 	.word	0x58000c00

08019f2c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8019f2c:	b580      	push	{r7, lr}
 8019f2e:	b082      	sub	sp, #8
 8019f30:	af00      	add	r7, sp, #0
 8019f32:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8019f34:	2108      	movs	r1, #8
 8019f36:	480c      	ldr	r0, [pc, #48]	; (8019f68 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8019f38:	f7ff fedb 	bl	8019cf2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8019f3c:	4603      	mov	r3, r0
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d007      	beq.n	8019f52 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8019f42:	4a0a      	ldr	r2, [pc, #40]	; (8019f6c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019f48:	2108      	movs	r1, #8
 8019f4a:	4807      	ldr	r0, [pc, #28]	; (8019f68 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8019f4c:	f7ff fe7d 	bl	8019c4a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8019f50:	e006      	b.n	8019f60 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019f56:	2108      	movs	r1, #8
 8019f58:	4803      	ldr	r0, [pc, #12]	; (8019f68 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8019f5a:	f7ff febb 	bl	8019cd4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8019f5e:	bf00      	nop
}
 8019f60:	3708      	adds	r7, #8
 8019f62:	46bd      	mov	sp, r7
 8019f64:	bd80      	pop	{r7, pc}
 8019f66:	bf00      	nop
 8019f68:	58000c00 	.word	0x58000c00
 8019f6c:	20001660 	.word	0x20001660

08019f70 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8019f70:	b580      	push	{r7, lr}
 8019f72:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019f74:	2108      	movs	r1, #8
 8019f76:	4806      	ldr	r0, [pc, #24]	; (8019f90 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8019f78:	f7ff fe7a 	bl	8019c70 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8019f7c:	4b05      	ldr	r3, [pc, #20]	; (8019f94 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019f82:	2108      	movs	r1, #8
 8019f84:	4802      	ldr	r0, [pc, #8]	; (8019f90 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8019f86:	f7ff fea5 	bl	8019cd4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8019f8a:	bf00      	nop
}
 8019f8c:	bd80      	pop	{r7, pc}
 8019f8e:	bf00      	nop
 8019f90:	58000c00 	.word	0x58000c00
 8019f94:	20001660 	.word	0x20001660

08019f98 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8019f98:	b580      	push	{r7, lr}
 8019f9a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8019f9c:	2108      	movs	r1, #8
 8019f9e:	4802      	ldr	r0, [pc, #8]	; (8019fa8 <HW_IPCC_TRACES_Init+0x10>)
 8019fa0:	f7ff fe78 	bl	8019c94 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8019fa4:	bf00      	nop
}
 8019fa6:	bd80      	pop	{r7, pc}
 8019fa8:	58000c00 	.word	0x58000c00

08019fac <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8019fac:	b580      	push	{r7, lr}
 8019fae:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8019fb0:	f7fe fb4e 	bl	8018650 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8019fb4:	2108      	movs	r1, #8
 8019fb6:	4802      	ldr	r0, [pc, #8]	; (8019fc0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8019fb8:	f7ff fe7e 	bl	8019cb8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8019fbc:	bf00      	nop
}
 8019fbe:	bd80      	pop	{r7, pc}
 8019fc0:	58000c00 	.word	0x58000c00

08019fc4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8019fc4:	b580      	push	{r7, lr}
 8019fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8019fc8:	2200      	movs	r2, #0
 8019fca:	4912      	ldr	r1, [pc, #72]	; (801a014 <MX_USB_Device_Init+0x50>)
 8019fcc:	4812      	ldr	r0, [pc, #72]	; (801a018 <MX_USB_Device_Init+0x54>)
 8019fce:	f7fb f909 	bl	80151e4 <USBD_Init>
 8019fd2:	4603      	mov	r3, r0
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d001      	beq.n	8019fdc <MX_USB_Device_Init+0x18>
    Error_Handler();
 8019fd8:	f7e9 f84c 	bl	8003074 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8019fdc:	490f      	ldr	r1, [pc, #60]	; (801a01c <MX_USB_Device_Init+0x58>)
 8019fde:	480e      	ldr	r0, [pc, #56]	; (801a018 <MX_USB_Device_Init+0x54>)
 8019fe0:	f7fb f930 	bl	8015244 <USBD_RegisterClass>
 8019fe4:	4603      	mov	r3, r0
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d001      	beq.n	8019fee <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8019fea:	f7e9 f843 	bl	8003074 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8019fee:	490c      	ldr	r1, [pc, #48]	; (801a020 <MX_USB_Device_Init+0x5c>)
 8019ff0:	4809      	ldr	r0, [pc, #36]	; (801a018 <MX_USB_Device_Init+0x54>)
 8019ff2:	f7fb f827 	bl	8015044 <USBD_CDC_RegisterInterface>
 8019ff6:	4603      	mov	r3, r0
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d001      	beq.n	801a000 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8019ffc:	f7e9 f83a 	bl	8003074 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801a000:	4805      	ldr	r0, [pc, #20]	; (801a018 <MX_USB_Device_Init+0x54>)
 801a002:	f7fb f955 	bl	80152b0 <USBD_Start>
 801a006:	4603      	mov	r3, r0
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d001      	beq.n	801a010 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 801a00c:	f7e9 f832 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801a010:	bf00      	nop
 801a012:	bd80      	pop	{r7, pc}
 801a014:	200000e8 	.word	0x200000e8
 801a018:	20001664 	.word	0x20001664
 801a01c:	20000044 	.word	0x20000044
 801a020:	200000d4 	.word	0x200000d4

0801a024 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801a024:	b580      	push	{r7, lr}
 801a026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801a028:	2200      	movs	r2, #0
 801a02a:	4905      	ldr	r1, [pc, #20]	; (801a040 <CDC_Init_FS+0x1c>)
 801a02c:	4805      	ldr	r0, [pc, #20]	; (801a044 <CDC_Init_FS+0x20>)
 801a02e:	f7fb f823 	bl	8015078 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801a032:	4905      	ldr	r1, [pc, #20]	; (801a048 <CDC_Init_FS+0x24>)
 801a034:	4803      	ldr	r0, [pc, #12]	; (801a044 <CDC_Init_FS+0x20>)
 801a036:	f7fb f841 	bl	80150bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a03a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801a03c:	4618      	mov	r0, r3
 801a03e:	bd80      	pop	{r7, pc}
 801a040:	20002140 	.word	0x20002140
 801a044:	20001664 	.word	0x20001664
 801a048:	20001940 	.word	0x20001940

0801a04c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801a04c:	b480      	push	{r7}
 801a04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801a050:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801a052:	4618      	mov	r0, r3
 801a054:	46bd      	mov	sp, r7
 801a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a05a:	4770      	bx	lr

0801a05c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a05c:	b480      	push	{r7}
 801a05e:	b083      	sub	sp, #12
 801a060:	af00      	add	r7, sp, #0
 801a062:	4603      	mov	r3, r0
 801a064:	6039      	str	r1, [r7, #0]
 801a066:	71fb      	strb	r3, [r7, #7]
 801a068:	4613      	mov	r3, r2
 801a06a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801a06c:	79fb      	ldrb	r3, [r7, #7]
 801a06e:	2b23      	cmp	r3, #35	; 0x23
 801a070:	d84a      	bhi.n	801a108 <CDC_Control_FS+0xac>
 801a072:	a201      	add	r2, pc, #4	; (adr r2, 801a078 <CDC_Control_FS+0x1c>)
 801a074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a078:	0801a109 	.word	0x0801a109
 801a07c:	0801a109 	.word	0x0801a109
 801a080:	0801a109 	.word	0x0801a109
 801a084:	0801a109 	.word	0x0801a109
 801a088:	0801a109 	.word	0x0801a109
 801a08c:	0801a109 	.word	0x0801a109
 801a090:	0801a109 	.word	0x0801a109
 801a094:	0801a109 	.word	0x0801a109
 801a098:	0801a109 	.word	0x0801a109
 801a09c:	0801a109 	.word	0x0801a109
 801a0a0:	0801a109 	.word	0x0801a109
 801a0a4:	0801a109 	.word	0x0801a109
 801a0a8:	0801a109 	.word	0x0801a109
 801a0ac:	0801a109 	.word	0x0801a109
 801a0b0:	0801a109 	.word	0x0801a109
 801a0b4:	0801a109 	.word	0x0801a109
 801a0b8:	0801a109 	.word	0x0801a109
 801a0bc:	0801a109 	.word	0x0801a109
 801a0c0:	0801a109 	.word	0x0801a109
 801a0c4:	0801a109 	.word	0x0801a109
 801a0c8:	0801a109 	.word	0x0801a109
 801a0cc:	0801a109 	.word	0x0801a109
 801a0d0:	0801a109 	.word	0x0801a109
 801a0d4:	0801a109 	.word	0x0801a109
 801a0d8:	0801a109 	.word	0x0801a109
 801a0dc:	0801a109 	.word	0x0801a109
 801a0e0:	0801a109 	.word	0x0801a109
 801a0e4:	0801a109 	.word	0x0801a109
 801a0e8:	0801a109 	.word	0x0801a109
 801a0ec:	0801a109 	.word	0x0801a109
 801a0f0:	0801a109 	.word	0x0801a109
 801a0f4:	0801a109 	.word	0x0801a109
 801a0f8:	0801a109 	.word	0x0801a109
 801a0fc:	0801a109 	.word	0x0801a109
 801a100:	0801a109 	.word	0x0801a109
 801a104:	0801a109 	.word	0x0801a109
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a108:	bf00      	nop
  }

  return (USBD_OK);
 801a10a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801a10c:	4618      	mov	r0, r3
 801a10e:	370c      	adds	r7, #12
 801a110:	46bd      	mov	sp, r7
 801a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a116:	4770      	bx	lr

0801a118 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801a118:	b580      	push	{r7, lr}
 801a11a:	b084      	sub	sp, #16
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	6078      	str	r0, [r7, #4]
 801a120:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801a122:	6879      	ldr	r1, [r7, #4]
 801a124:	480f      	ldr	r0, [pc, #60]	; (801a164 <CDC_Receive_FS+0x4c>)
 801a126:	f7fa ffc9 	bl	80150bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801a12a:	480e      	ldr	r0, [pc, #56]	; (801a164 <CDC_Receive_FS+0x4c>)
 801a12c:	f7fb f824 	bl	8015178 <USBD_CDC_ReceivePacket>

  memset (usbbuffer, '\0', 64);  // clear the buffer
 801a130:	2240      	movs	r2, #64	; 0x40
 801a132:	2100      	movs	r1, #0
 801a134:	480c      	ldr	r0, [pc, #48]	; (801a168 <CDC_Receive_FS+0x50>)
 801a136:	f002 feac 	bl	801ce92 <memset>
  uint8_t len = (uint8_t)*Len;
 801a13a:	683b      	ldr	r3, [r7, #0]
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	73fb      	strb	r3, [r7, #15]
  memcpy((uint8_t *) usbbuffer,(uint8_t *) Buf, len);  // copy the data to the buffer
 801a140:	7bfb      	ldrb	r3, [r7, #15]
 801a142:	461a      	mov	r2, r3
 801a144:	6879      	ldr	r1, [r7, #4]
 801a146:	4808      	ldr	r0, [pc, #32]	; (801a168 <CDC_Receive_FS+0x50>)
 801a148:	f002 ffbf 	bl	801d0ca <memcpy>
  memset(Buf, '\0', len);
 801a14c:	7bfb      	ldrb	r3, [r7, #15]
 801a14e:	461a      	mov	r2, r3
 801a150:	2100      	movs	r1, #0
 801a152:	6878      	ldr	r0, [r7, #4]
 801a154:	f002 fe9d 	bl	801ce92 <memset>
  return (USBD_OK);
 801a158:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801a15a:	4618      	mov	r0, r3
 801a15c:	3710      	adds	r7, #16
 801a15e:	46bd      	mov	sp, r7
 801a160:	bd80      	pop	{r7, pc}
 801a162:	bf00      	nop
 801a164:	20001664 	.word	0x20001664
 801a168:	20000c0c 	.word	0x20000c0c

0801a16c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801a16c:	b580      	push	{r7, lr}
 801a16e:	b084      	sub	sp, #16
 801a170:	af00      	add	r7, sp, #0
 801a172:	6078      	str	r0, [r7, #4]
 801a174:	460b      	mov	r3, r1
 801a176:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801a178:	2300      	movs	r3, #0
 801a17a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801a17c:	4b0d      	ldr	r3, [pc, #52]	; (801a1b4 <CDC_Transmit_FS+0x48>)
 801a17e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a182:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801a184:	68bb      	ldr	r3, [r7, #8]
 801a186:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d001      	beq.n	801a192 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801a18e:	2301      	movs	r3, #1
 801a190:	e00b      	b.n	801a1aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801a192:	887b      	ldrh	r3, [r7, #2]
 801a194:	461a      	mov	r2, r3
 801a196:	6879      	ldr	r1, [r7, #4]
 801a198:	4806      	ldr	r0, [pc, #24]	; (801a1b4 <CDC_Transmit_FS+0x48>)
 801a19a:	f7fa ff6d 	bl	8015078 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801a19e:	4805      	ldr	r0, [pc, #20]	; (801a1b4 <CDC_Transmit_FS+0x48>)
 801a1a0:	f7fa ffaa 	bl	80150f8 <USBD_CDC_TransmitPacket>
 801a1a4:	4603      	mov	r3, r0
 801a1a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801a1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 801a1aa:	4618      	mov	r0, r3
 801a1ac:	3710      	adds	r7, #16
 801a1ae:	46bd      	mov	sp, r7
 801a1b0:	bd80      	pop	{r7, pc}
 801a1b2:	bf00      	nop
 801a1b4:	20001664 	.word	0x20001664

0801a1b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801a1b8:	b480      	push	{r7}
 801a1ba:	b087      	sub	sp, #28
 801a1bc:	af00      	add	r7, sp, #0
 801a1be:	60f8      	str	r0, [r7, #12]
 801a1c0:	60b9      	str	r1, [r7, #8]
 801a1c2:	4613      	mov	r3, r2
 801a1c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801a1c6:	2300      	movs	r3, #0
 801a1c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801a1ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a1ce:	4618      	mov	r0, r3
 801a1d0:	371c      	adds	r7, #28
 801a1d2:	46bd      	mov	sp, r7
 801a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1d8:	4770      	bx	lr
	...

0801a1dc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a1dc:	b480      	push	{r7}
 801a1de:	b083      	sub	sp, #12
 801a1e0:	af00      	add	r7, sp, #0
 801a1e2:	4603      	mov	r3, r0
 801a1e4:	6039      	str	r1, [r7, #0]
 801a1e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801a1e8:	683b      	ldr	r3, [r7, #0]
 801a1ea:	2212      	movs	r2, #18
 801a1ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801a1ee:	4b03      	ldr	r3, [pc, #12]	; (801a1fc <USBD_CDC_DeviceDescriptor+0x20>)
}
 801a1f0:	4618      	mov	r0, r3
 801a1f2:	370c      	adds	r7, #12
 801a1f4:	46bd      	mov	sp, r7
 801a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1fa:	4770      	bx	lr
 801a1fc:	20000108 	.word	0x20000108

0801a200 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a200:	b480      	push	{r7}
 801a202:	b083      	sub	sp, #12
 801a204:	af00      	add	r7, sp, #0
 801a206:	4603      	mov	r3, r0
 801a208:	6039      	str	r1, [r7, #0]
 801a20a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a20c:	683b      	ldr	r3, [r7, #0]
 801a20e:	2204      	movs	r2, #4
 801a210:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a212:	4b03      	ldr	r3, [pc, #12]	; (801a220 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801a214:	4618      	mov	r0, r3
 801a216:	370c      	adds	r7, #12
 801a218:	46bd      	mov	sp, r7
 801a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a21e:	4770      	bx	lr
 801a220:	2000011c 	.word	0x2000011c

0801a224 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a224:	b580      	push	{r7, lr}
 801a226:	b082      	sub	sp, #8
 801a228:	af00      	add	r7, sp, #0
 801a22a:	4603      	mov	r3, r0
 801a22c:	6039      	str	r1, [r7, #0]
 801a22e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a230:	79fb      	ldrb	r3, [r7, #7]
 801a232:	2b00      	cmp	r3, #0
 801a234:	d105      	bne.n	801a242 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801a236:	683a      	ldr	r2, [r7, #0]
 801a238:	4907      	ldr	r1, [pc, #28]	; (801a258 <USBD_CDC_ProductStrDescriptor+0x34>)
 801a23a:	4808      	ldr	r0, [pc, #32]	; (801a25c <USBD_CDC_ProductStrDescriptor+0x38>)
 801a23c:	f7fc f982 	bl	8016544 <USBD_GetString>
 801a240:	e004      	b.n	801a24c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801a242:	683a      	ldr	r2, [r7, #0]
 801a244:	4904      	ldr	r1, [pc, #16]	; (801a258 <USBD_CDC_ProductStrDescriptor+0x34>)
 801a246:	4805      	ldr	r0, [pc, #20]	; (801a25c <USBD_CDC_ProductStrDescriptor+0x38>)
 801a248:	f7fc f97c 	bl	8016544 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a24c:	4b02      	ldr	r3, [pc, #8]	; (801a258 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801a24e:	4618      	mov	r0, r3
 801a250:	3708      	adds	r7, #8
 801a252:	46bd      	mov	sp, r7
 801a254:	bd80      	pop	{r7, pc}
 801a256:	bf00      	nop
 801a258:	20002940 	.word	0x20002940
 801a25c:	08021a94 	.word	0x08021a94

0801a260 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a260:	b580      	push	{r7, lr}
 801a262:	b082      	sub	sp, #8
 801a264:	af00      	add	r7, sp, #0
 801a266:	4603      	mov	r3, r0
 801a268:	6039      	str	r1, [r7, #0]
 801a26a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a26c:	683a      	ldr	r2, [r7, #0]
 801a26e:	4904      	ldr	r1, [pc, #16]	; (801a280 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801a270:	4804      	ldr	r0, [pc, #16]	; (801a284 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801a272:	f7fc f967 	bl	8016544 <USBD_GetString>
  return USBD_StrDesc;
 801a276:	4b02      	ldr	r3, [pc, #8]	; (801a280 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 801a278:	4618      	mov	r0, r3
 801a27a:	3708      	adds	r7, #8
 801a27c:	46bd      	mov	sp, r7
 801a27e:	bd80      	pop	{r7, pc}
 801a280:	20002940 	.word	0x20002940
 801a284:	08021aac 	.word	0x08021aac

0801a288 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a288:	b580      	push	{r7, lr}
 801a28a:	b082      	sub	sp, #8
 801a28c:	af00      	add	r7, sp, #0
 801a28e:	4603      	mov	r3, r0
 801a290:	6039      	str	r1, [r7, #0]
 801a292:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a294:	683b      	ldr	r3, [r7, #0]
 801a296:	221a      	movs	r2, #26
 801a298:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a29a:	f000 f843 	bl	801a324 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801a29e:	4b02      	ldr	r3, [pc, #8]	; (801a2a8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801a2a0:	4618      	mov	r0, r3
 801a2a2:	3708      	adds	r7, #8
 801a2a4:	46bd      	mov	sp, r7
 801a2a6:	bd80      	pop	{r7, pc}
 801a2a8:	20000120 	.word	0x20000120

0801a2ac <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a2ac:	b580      	push	{r7, lr}
 801a2ae:	b082      	sub	sp, #8
 801a2b0:	af00      	add	r7, sp, #0
 801a2b2:	4603      	mov	r3, r0
 801a2b4:	6039      	str	r1, [r7, #0]
 801a2b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a2b8:	79fb      	ldrb	r3, [r7, #7]
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d105      	bne.n	801a2ca <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801a2be:	683a      	ldr	r2, [r7, #0]
 801a2c0:	4907      	ldr	r1, [pc, #28]	; (801a2e0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801a2c2:	4808      	ldr	r0, [pc, #32]	; (801a2e4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801a2c4:	f7fc f93e 	bl	8016544 <USBD_GetString>
 801a2c8:	e004      	b.n	801a2d4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801a2ca:	683a      	ldr	r2, [r7, #0]
 801a2cc:	4904      	ldr	r1, [pc, #16]	; (801a2e0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801a2ce:	4805      	ldr	r0, [pc, #20]	; (801a2e4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801a2d0:	f7fc f938 	bl	8016544 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a2d4:	4b02      	ldr	r3, [pc, #8]	; (801a2e0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801a2d6:	4618      	mov	r0, r3
 801a2d8:	3708      	adds	r7, #8
 801a2da:	46bd      	mov	sp, r7
 801a2dc:	bd80      	pop	{r7, pc}
 801a2de:	bf00      	nop
 801a2e0:	20002940 	.word	0x20002940
 801a2e4:	08021ac0 	.word	0x08021ac0

0801a2e8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	b082      	sub	sp, #8
 801a2ec:	af00      	add	r7, sp, #0
 801a2ee:	4603      	mov	r3, r0
 801a2f0:	6039      	str	r1, [r7, #0]
 801a2f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a2f4:	79fb      	ldrb	r3, [r7, #7]
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d105      	bne.n	801a306 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801a2fa:	683a      	ldr	r2, [r7, #0]
 801a2fc:	4907      	ldr	r1, [pc, #28]	; (801a31c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801a2fe:	4808      	ldr	r0, [pc, #32]	; (801a320 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801a300:	f7fc f920 	bl	8016544 <USBD_GetString>
 801a304:	e004      	b.n	801a310 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801a306:	683a      	ldr	r2, [r7, #0]
 801a308:	4904      	ldr	r1, [pc, #16]	; (801a31c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801a30a:	4805      	ldr	r0, [pc, #20]	; (801a320 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801a30c:	f7fc f91a 	bl	8016544 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a310:	4b02      	ldr	r3, [pc, #8]	; (801a31c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801a312:	4618      	mov	r0, r3
 801a314:	3708      	adds	r7, #8
 801a316:	46bd      	mov	sp, r7
 801a318:	bd80      	pop	{r7, pc}
 801a31a:	bf00      	nop
 801a31c:	20002940 	.word	0x20002940
 801a320:	08021acc 	.word	0x08021acc

0801a324 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a324:	b580      	push	{r7, lr}
 801a326:	b084      	sub	sp, #16
 801a328:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a32a:	4b0f      	ldr	r3, [pc, #60]	; (801a368 <Get_SerialNum+0x44>)
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a330:	4b0e      	ldr	r3, [pc, #56]	; (801a36c <Get_SerialNum+0x48>)
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a336:	4b0e      	ldr	r3, [pc, #56]	; (801a370 <Get_SerialNum+0x4c>)
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a33c:	68fa      	ldr	r2, [r7, #12]
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	4413      	add	r3, r2
 801a342:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a344:	68fb      	ldr	r3, [r7, #12]
 801a346:	2b00      	cmp	r3, #0
 801a348:	d009      	beq.n	801a35e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a34a:	2208      	movs	r2, #8
 801a34c:	4909      	ldr	r1, [pc, #36]	; (801a374 <Get_SerialNum+0x50>)
 801a34e:	68f8      	ldr	r0, [r7, #12]
 801a350:	f000 f814 	bl	801a37c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a354:	2204      	movs	r2, #4
 801a356:	4908      	ldr	r1, [pc, #32]	; (801a378 <Get_SerialNum+0x54>)
 801a358:	68b8      	ldr	r0, [r7, #8]
 801a35a:	f000 f80f 	bl	801a37c <IntToUnicode>
  }
}
 801a35e:	bf00      	nop
 801a360:	3710      	adds	r7, #16
 801a362:	46bd      	mov	sp, r7
 801a364:	bd80      	pop	{r7, pc}
 801a366:	bf00      	nop
 801a368:	1fff7590 	.word	0x1fff7590
 801a36c:	1fff7594 	.word	0x1fff7594
 801a370:	1fff7598 	.word	0x1fff7598
 801a374:	20000122 	.word	0x20000122
 801a378:	20000132 	.word	0x20000132

0801a37c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a37c:	b480      	push	{r7}
 801a37e:	b087      	sub	sp, #28
 801a380:	af00      	add	r7, sp, #0
 801a382:	60f8      	str	r0, [r7, #12]
 801a384:	60b9      	str	r1, [r7, #8]
 801a386:	4613      	mov	r3, r2
 801a388:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a38a:	2300      	movs	r3, #0
 801a38c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a38e:	2300      	movs	r3, #0
 801a390:	75fb      	strb	r3, [r7, #23]
 801a392:	e027      	b.n	801a3e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a394:	68fb      	ldr	r3, [r7, #12]
 801a396:	0f1b      	lsrs	r3, r3, #28
 801a398:	2b09      	cmp	r3, #9
 801a39a:	d80b      	bhi.n	801a3b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a39c:	68fb      	ldr	r3, [r7, #12]
 801a39e:	0f1b      	lsrs	r3, r3, #28
 801a3a0:	b2da      	uxtb	r2, r3
 801a3a2:	7dfb      	ldrb	r3, [r7, #23]
 801a3a4:	005b      	lsls	r3, r3, #1
 801a3a6:	4619      	mov	r1, r3
 801a3a8:	68bb      	ldr	r3, [r7, #8]
 801a3aa:	440b      	add	r3, r1
 801a3ac:	3230      	adds	r2, #48	; 0x30
 801a3ae:	b2d2      	uxtb	r2, r2
 801a3b0:	701a      	strb	r2, [r3, #0]
 801a3b2:	e00a      	b.n	801a3ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	0f1b      	lsrs	r3, r3, #28
 801a3b8:	b2da      	uxtb	r2, r3
 801a3ba:	7dfb      	ldrb	r3, [r7, #23]
 801a3bc:	005b      	lsls	r3, r3, #1
 801a3be:	4619      	mov	r1, r3
 801a3c0:	68bb      	ldr	r3, [r7, #8]
 801a3c2:	440b      	add	r3, r1
 801a3c4:	3237      	adds	r2, #55	; 0x37
 801a3c6:	b2d2      	uxtb	r2, r2
 801a3c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a3ca:	68fb      	ldr	r3, [r7, #12]
 801a3cc:	011b      	lsls	r3, r3, #4
 801a3ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a3d0:	7dfb      	ldrb	r3, [r7, #23]
 801a3d2:	005b      	lsls	r3, r3, #1
 801a3d4:	3301      	adds	r3, #1
 801a3d6:	68ba      	ldr	r2, [r7, #8]
 801a3d8:	4413      	add	r3, r2
 801a3da:	2200      	movs	r2, #0
 801a3dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a3de:	7dfb      	ldrb	r3, [r7, #23]
 801a3e0:	3301      	adds	r3, #1
 801a3e2:	75fb      	strb	r3, [r7, #23]
 801a3e4:	7dfa      	ldrb	r2, [r7, #23]
 801a3e6:	79fb      	ldrb	r3, [r7, #7]
 801a3e8:	429a      	cmp	r2, r3
 801a3ea:	d3d3      	bcc.n	801a394 <IntToUnicode+0x18>
  }
}
 801a3ec:	bf00      	nop
 801a3ee:	bf00      	nop
 801a3f0:	371c      	adds	r7, #28
 801a3f2:	46bd      	mov	sp, r7
 801a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3f8:	4770      	bx	lr

0801a3fa <LL_AHB2_GRP1_EnableClock>:
{
 801a3fa:	b480      	push	{r7}
 801a3fc:	b085      	sub	sp, #20
 801a3fe:	af00      	add	r7, sp, #0
 801a400:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801a402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	4313      	orrs	r3, r2
 801a410:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801a412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a416:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	4013      	ands	r3, r2
 801a41c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801a41e:	68fb      	ldr	r3, [r7, #12]
}
 801a420:	bf00      	nop
 801a422:	3714      	adds	r7, #20
 801a424:	46bd      	mov	sp, r7
 801a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a42a:	4770      	bx	lr

0801a42c <LL_APB1_GRP1_EnableClock>:
{
 801a42c:	b480      	push	{r7}
 801a42e:	b085      	sub	sp, #20
 801a430:	af00      	add	r7, sp, #0
 801a432:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801a434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a438:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a43a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	4313      	orrs	r3, r2
 801a442:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801a444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a448:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	4013      	ands	r3, r2
 801a44e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801a450:	68fb      	ldr	r3, [r7, #12]
}
 801a452:	bf00      	nop
 801a454:	3714      	adds	r7, #20
 801a456:	46bd      	mov	sp, r7
 801a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a45c:	4770      	bx	lr
	...

0801a460 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a460:	b580      	push	{r7, lr}
 801a462:	b088      	sub	sp, #32
 801a464:	af00      	add	r7, sp, #0
 801a466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a468:	f107 030c 	add.w	r3, r7, #12
 801a46c:	2200      	movs	r2, #0
 801a46e:	601a      	str	r2, [r3, #0]
 801a470:	605a      	str	r2, [r3, #4]
 801a472:	609a      	str	r2, [r3, #8]
 801a474:	60da      	str	r2, [r3, #12]
 801a476:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	4a13      	ldr	r2, [pc, #76]	; (801a4cc <HAL_PCD_MspInit+0x6c>)
 801a47e:	4293      	cmp	r3, r2
 801a480:	d120      	bne.n	801a4c4 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a482:	2001      	movs	r0, #1
 801a484:	f7ff ffb9 	bl	801a3fa <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801a488:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801a48c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a48e:	2302      	movs	r3, #2
 801a490:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a492:	2300      	movs	r3, #0
 801a494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a496:	2300      	movs	r3, #0
 801a498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 801a49a:	230a      	movs	r3, #10
 801a49c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a49e:	f107 030c 	add.w	r3, r7, #12
 801a4a2:	4619      	mov	r1, r3
 801a4a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a4a8:	f7ef fcee 	bl	8009e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801a4ac:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 801a4b0:	f7ff ffbc 	bl	801a42c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801a4b4:	2200      	movs	r2, #0
 801a4b6:	2100      	movs	r1, #0
 801a4b8:	2014      	movs	r0, #20
 801a4ba:	f7ef f8b2 	bl	8009622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801a4be:	2014      	movs	r0, #20
 801a4c0:	f7ef f8c9 	bl	8009656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801a4c4:	bf00      	nop
 801a4c6:	3720      	adds	r7, #32
 801a4c8:	46bd      	mov	sp, r7
 801a4ca:	bd80      	pop	{r7, pc}
 801a4cc:	40006800 	.word	0x40006800

0801a4d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a4d0:	b580      	push	{r7, lr}
 801a4d2:	b082      	sub	sp, #8
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 801a4e4:	4619      	mov	r1, r3
 801a4e6:	4610      	mov	r0, r2
 801a4e8:	f7fa ff2f 	bl	801534a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 801a4ec:	bf00      	nop
 801a4ee:	3708      	adds	r7, #8
 801a4f0:	46bd      	mov	sp, r7
 801a4f2:	bd80      	pop	{r7, pc}

0801a4f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a4f4:	b580      	push	{r7, lr}
 801a4f6:	b082      	sub	sp, #8
 801a4f8:	af00      	add	r7, sp, #0
 801a4fa:	6078      	str	r0, [r7, #4]
 801a4fc:	460b      	mov	r3, r1
 801a4fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 801a506:	78fa      	ldrb	r2, [r7, #3]
 801a508:	6879      	ldr	r1, [r7, #4]
 801a50a:	4613      	mov	r3, r2
 801a50c:	009b      	lsls	r3, r3, #2
 801a50e:	4413      	add	r3, r2
 801a510:	00db      	lsls	r3, r3, #3
 801a512:	440b      	add	r3, r1
 801a514:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a518:	681a      	ldr	r2, [r3, #0]
 801a51a:	78fb      	ldrb	r3, [r7, #3]
 801a51c:	4619      	mov	r1, r3
 801a51e:	f7fa ff69 	bl	80153f4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801a522:	bf00      	nop
 801a524:	3708      	adds	r7, #8
 801a526:	46bd      	mov	sp, r7
 801a528:	bd80      	pop	{r7, pc}

0801a52a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a52a:	b580      	push	{r7, lr}
 801a52c:	b082      	sub	sp, #8
 801a52e:	af00      	add	r7, sp, #0
 801a530:	6078      	str	r0, [r7, #4]
 801a532:	460b      	mov	r3, r1
 801a534:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 801a53c:	78fa      	ldrb	r2, [r7, #3]
 801a53e:	6879      	ldr	r1, [r7, #4]
 801a540:	4613      	mov	r3, r2
 801a542:	009b      	lsls	r3, r3, #2
 801a544:	4413      	add	r3, r2
 801a546:	00db      	lsls	r3, r3, #3
 801a548:	440b      	add	r3, r1
 801a54a:	3324      	adds	r3, #36	; 0x24
 801a54c:	681a      	ldr	r2, [r3, #0]
 801a54e:	78fb      	ldrb	r3, [r7, #3]
 801a550:	4619      	mov	r1, r3
 801a552:	f7fb f802 	bl	801555a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801a556:	bf00      	nop
 801a558:	3708      	adds	r7, #8
 801a55a:	46bd      	mov	sp, r7
 801a55c:	bd80      	pop	{r7, pc}

0801a55e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a55e:	b580      	push	{r7, lr}
 801a560:	b082      	sub	sp, #8
 801a562:	af00      	add	r7, sp, #0
 801a564:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801a56c:	4618      	mov	r0, r3
 801a56e:	f7fb f93c 	bl	80157ea <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801a572:	bf00      	nop
 801a574:	3708      	adds	r7, #8
 801a576:	46bd      	mov	sp, r7
 801a578:	bd80      	pop	{r7, pc}

0801a57a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a57a:	b580      	push	{r7, lr}
 801a57c:	b084      	sub	sp, #16
 801a57e:	af00      	add	r7, sp, #0
 801a580:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a582:	2301      	movs	r3, #1
 801a584:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	795b      	ldrb	r3, [r3, #5]
 801a58a:	2b02      	cmp	r3, #2
 801a58c:	d001      	beq.n	801a592 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801a58e:	f7e8 fd71 	bl	8003074 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801a598:	7bfa      	ldrb	r2, [r7, #15]
 801a59a:	4611      	mov	r1, r2
 801a59c:	4618      	mov	r0, r3
 801a59e:	f7fb f8e0 	bl	8015762 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801a5a8:	4618      	mov	r0, r3
 801a5aa:	f7fb f888 	bl	80156be <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801a5ae:	bf00      	nop
 801a5b0:	3710      	adds	r7, #16
 801a5b2:	46bd      	mov	sp, r7
 801a5b4:	bd80      	pop	{r7, pc}
	...

0801a5b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a5b8:	b580      	push	{r7, lr}
 801a5ba:	b082      	sub	sp, #8
 801a5bc:	af00      	add	r7, sp, #0
 801a5be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801a5c6:	4618      	mov	r0, r3
 801a5c8:	f7fb f8db 	bl	8015782 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	7a5b      	ldrb	r3, [r3, #9]
 801a5d0:	2b00      	cmp	r3, #0
 801a5d2:	d005      	beq.n	801a5e0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a5d4:	4b04      	ldr	r3, [pc, #16]	; (801a5e8 <HAL_PCD_SuspendCallback+0x30>)
 801a5d6:	691b      	ldr	r3, [r3, #16]
 801a5d8:	4a03      	ldr	r2, [pc, #12]	; (801a5e8 <HAL_PCD_SuspendCallback+0x30>)
 801a5da:	f043 0306 	orr.w	r3, r3, #6
 801a5de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801a5e0:	bf00      	nop
 801a5e2:	3708      	adds	r7, #8
 801a5e4:	46bd      	mov	sp, r7
 801a5e6:	bd80      	pop	{r7, pc}
 801a5e8:	e000ed00 	.word	0xe000ed00

0801a5ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a5ec:	b580      	push	{r7, lr}
 801a5ee:	b082      	sub	sp, #8
 801a5f0:	af00      	add	r7, sp, #0
 801a5f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	7a5b      	ldrb	r3, [r3, #9]
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d007      	beq.n	801a60c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a5fc:	4b08      	ldr	r3, [pc, #32]	; (801a620 <HAL_PCD_ResumeCallback+0x34>)
 801a5fe:	691b      	ldr	r3, [r3, #16]
 801a600:	4a07      	ldr	r2, [pc, #28]	; (801a620 <HAL_PCD_ResumeCallback+0x34>)
 801a602:	f023 0306 	bic.w	r3, r3, #6
 801a606:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801a608:	f000 f9fa 	bl	801aa00 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801a612:	4618      	mov	r0, r3
 801a614:	f7fb f8d1 	bl	80157ba <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801a618:	bf00      	nop
 801a61a:	3708      	adds	r7, #8
 801a61c:	46bd      	mov	sp, r7
 801a61e:	bd80      	pop	{r7, pc}
 801a620:	e000ed00 	.word	0xe000ed00

0801a624 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a624:	b580      	push	{r7, lr}
 801a626:	b082      	sub	sp, #8
 801a628:	af00      	add	r7, sp, #0
 801a62a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 801a62c:	4a2c      	ldr	r2, [pc, #176]	; (801a6e0 <USBD_LL_Init+0xbc>)
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	4a2a      	ldr	r2, [pc, #168]	; (801a6e0 <USBD_LL_Init+0xbc>)
 801a638:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 801a63c:	f7f2 fb1a 	bl	800cc74 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 801a640:	4b27      	ldr	r3, [pc, #156]	; (801a6e0 <USBD_LL_Init+0xbc>)
 801a642:	4a28      	ldr	r2, [pc, #160]	; (801a6e4 <USBD_LL_Init+0xc0>)
 801a644:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801a646:	4b26      	ldr	r3, [pc, #152]	; (801a6e0 <USBD_LL_Init+0xbc>)
 801a648:	2208      	movs	r2, #8
 801a64a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801a64c:	4b24      	ldr	r3, [pc, #144]	; (801a6e0 <USBD_LL_Init+0xbc>)
 801a64e:	2202      	movs	r2, #2
 801a650:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801a652:	4b23      	ldr	r3, [pc, #140]	; (801a6e0 <USBD_LL_Init+0xbc>)
 801a654:	2202      	movs	r2, #2
 801a656:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801a658:	4b21      	ldr	r3, [pc, #132]	; (801a6e0 <USBD_LL_Init+0xbc>)
 801a65a:	2200      	movs	r2, #0
 801a65c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801a65e:	4b20      	ldr	r3, [pc, #128]	; (801a6e0 <USBD_LL_Init+0xbc>)
 801a660:	2200      	movs	r2, #0
 801a662:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801a664:	4b1e      	ldr	r3, [pc, #120]	; (801a6e0 <USBD_LL_Init+0xbc>)
 801a666:	2200      	movs	r2, #0
 801a668:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801a66a:	4b1d      	ldr	r3, [pc, #116]	; (801a6e0 <USBD_LL_Init+0xbc>)
 801a66c:	2200      	movs	r2, #0
 801a66e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801a670:	481b      	ldr	r0, [pc, #108]	; (801a6e0 <USBD_LL_Init+0xbc>)
 801a672:	f7f0 fdad 	bl	800b1d0 <HAL_PCD_Init>
 801a676:	4603      	mov	r3, r0
 801a678:	2b00      	cmp	r3, #0
 801a67a:	d001      	beq.n	801a680 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 801a67c:	f7e8 fcfa 	bl	8003074 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801a686:	2318      	movs	r3, #24
 801a688:	2200      	movs	r2, #0
 801a68a:	2100      	movs	r1, #0
 801a68c:	f7f2 fa67 	bl	800cb5e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801a696:	2358      	movs	r3, #88	; 0x58
 801a698:	2200      	movs	r2, #0
 801a69a:	2180      	movs	r1, #128	; 0x80
 801a69c:	f7f2 fa5f 	bl	800cb5e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801a6a6:	23c0      	movs	r3, #192	; 0xc0
 801a6a8:	2200      	movs	r2, #0
 801a6aa:	2181      	movs	r1, #129	; 0x81
 801a6ac:	f7f2 fa57 	bl	800cb5e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801a6b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 801a6ba:	2200      	movs	r2, #0
 801a6bc:	2101      	movs	r1, #1
 801a6be:	f7f2 fa4e 	bl	800cb5e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801a6c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a6cc:	2200      	movs	r2, #0
 801a6ce:	2182      	movs	r1, #130	; 0x82
 801a6d0:	f7f2 fa45 	bl	800cb5e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801a6d4:	2300      	movs	r3, #0
}
 801a6d6:	4618      	mov	r0, r3
 801a6d8:	3708      	adds	r7, #8
 801a6da:	46bd      	mov	sp, r7
 801a6dc:	bd80      	pop	{r7, pc}
 801a6de:	bf00      	nop
 801a6e0:	20002b40 	.word	0x20002b40
 801a6e4:	40006800 	.word	0x40006800

0801a6e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	b084      	sub	sp, #16
 801a6ec:	af00      	add	r7, sp, #0
 801a6ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a6f0:	2300      	movs	r3, #0
 801a6f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a6f4:	2300      	movs	r3, #0
 801a6f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a6fe:	4618      	mov	r0, r3
 801a700:	f7f0 fe34 	bl	800b36c <HAL_PCD_Start>
 801a704:	4603      	mov	r3, r0
 801a706:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a708:	7bfb      	ldrb	r3, [r7, #15]
 801a70a:	4618      	mov	r0, r3
 801a70c:	f000 f97e 	bl	801aa0c <USBD_Get_USB_Status>
 801a710:	4603      	mov	r3, r0
 801a712:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a714:	7bbb      	ldrb	r3, [r7, #14]
}
 801a716:	4618      	mov	r0, r3
 801a718:	3710      	adds	r7, #16
 801a71a:	46bd      	mov	sp, r7
 801a71c:	bd80      	pop	{r7, pc}

0801a71e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a71e:	b580      	push	{r7, lr}
 801a720:	b084      	sub	sp, #16
 801a722:	af00      	add	r7, sp, #0
 801a724:	6078      	str	r0, [r7, #4]
 801a726:	4608      	mov	r0, r1
 801a728:	4611      	mov	r1, r2
 801a72a:	461a      	mov	r2, r3
 801a72c:	4603      	mov	r3, r0
 801a72e:	70fb      	strb	r3, [r7, #3]
 801a730:	460b      	mov	r3, r1
 801a732:	70bb      	strb	r3, [r7, #2]
 801a734:	4613      	mov	r3, r2
 801a736:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a738:	2300      	movs	r3, #0
 801a73a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a73c:	2300      	movs	r3, #0
 801a73e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801a746:	78bb      	ldrb	r3, [r7, #2]
 801a748:	883a      	ldrh	r2, [r7, #0]
 801a74a:	78f9      	ldrb	r1, [r7, #3]
 801a74c:	f7f0 ff7b 	bl	800b646 <HAL_PCD_EP_Open>
 801a750:	4603      	mov	r3, r0
 801a752:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a754:	7bfb      	ldrb	r3, [r7, #15]
 801a756:	4618      	mov	r0, r3
 801a758:	f000 f958 	bl	801aa0c <USBD_Get_USB_Status>
 801a75c:	4603      	mov	r3, r0
 801a75e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a760:	7bbb      	ldrb	r3, [r7, #14]
}
 801a762:	4618      	mov	r0, r3
 801a764:	3710      	adds	r7, #16
 801a766:	46bd      	mov	sp, r7
 801a768:	bd80      	pop	{r7, pc}

0801a76a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a76a:	b580      	push	{r7, lr}
 801a76c:	b084      	sub	sp, #16
 801a76e:	af00      	add	r7, sp, #0
 801a770:	6078      	str	r0, [r7, #4]
 801a772:	460b      	mov	r3, r1
 801a774:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a776:	2300      	movs	r3, #0
 801a778:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a77a:	2300      	movs	r3, #0
 801a77c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a784:	78fa      	ldrb	r2, [r7, #3]
 801a786:	4611      	mov	r1, r2
 801a788:	4618      	mov	r0, r3
 801a78a:	f7f0 ffb9 	bl	800b700 <HAL_PCD_EP_Close>
 801a78e:	4603      	mov	r3, r0
 801a790:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a792:	7bfb      	ldrb	r3, [r7, #15]
 801a794:	4618      	mov	r0, r3
 801a796:	f000 f939 	bl	801aa0c <USBD_Get_USB_Status>
 801a79a:	4603      	mov	r3, r0
 801a79c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a79e:	7bbb      	ldrb	r3, [r7, #14]
}
 801a7a0:	4618      	mov	r0, r3
 801a7a2:	3710      	adds	r7, #16
 801a7a4:	46bd      	mov	sp, r7
 801a7a6:	bd80      	pop	{r7, pc}

0801a7a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a7a8:	b580      	push	{r7, lr}
 801a7aa:	b084      	sub	sp, #16
 801a7ac:	af00      	add	r7, sp, #0
 801a7ae:	6078      	str	r0, [r7, #4]
 801a7b0:	460b      	mov	r3, r1
 801a7b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a7b4:	2300      	movs	r3, #0
 801a7b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a7b8:	2300      	movs	r3, #0
 801a7ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a7c2:	78fa      	ldrb	r2, [r7, #3]
 801a7c4:	4611      	mov	r1, r2
 801a7c6:	4618      	mov	r0, r3
 801a7c8:	f7f1 f862 	bl	800b890 <HAL_PCD_EP_SetStall>
 801a7cc:	4603      	mov	r3, r0
 801a7ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a7d0:	7bfb      	ldrb	r3, [r7, #15]
 801a7d2:	4618      	mov	r0, r3
 801a7d4:	f000 f91a 	bl	801aa0c <USBD_Get_USB_Status>
 801a7d8:	4603      	mov	r3, r0
 801a7da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a7dc:	7bbb      	ldrb	r3, [r7, #14]
}
 801a7de:	4618      	mov	r0, r3
 801a7e0:	3710      	adds	r7, #16
 801a7e2:	46bd      	mov	sp, r7
 801a7e4:	bd80      	pop	{r7, pc}

0801a7e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a7e6:	b580      	push	{r7, lr}
 801a7e8:	b084      	sub	sp, #16
 801a7ea:	af00      	add	r7, sp, #0
 801a7ec:	6078      	str	r0, [r7, #4]
 801a7ee:	460b      	mov	r3, r1
 801a7f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a7f2:	2300      	movs	r3, #0
 801a7f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a7f6:	2300      	movs	r3, #0
 801a7f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a800:	78fa      	ldrb	r2, [r7, #3]
 801a802:	4611      	mov	r1, r2
 801a804:	4618      	mov	r0, r3
 801a806:	f7f1 f895 	bl	800b934 <HAL_PCD_EP_ClrStall>
 801a80a:	4603      	mov	r3, r0
 801a80c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a80e:	7bfb      	ldrb	r3, [r7, #15]
 801a810:	4618      	mov	r0, r3
 801a812:	f000 f8fb 	bl	801aa0c <USBD_Get_USB_Status>
 801a816:	4603      	mov	r3, r0
 801a818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a81a:	7bbb      	ldrb	r3, [r7, #14]
}
 801a81c:	4618      	mov	r0, r3
 801a81e:	3710      	adds	r7, #16
 801a820:	46bd      	mov	sp, r7
 801a822:	bd80      	pop	{r7, pc}

0801a824 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a824:	b480      	push	{r7}
 801a826:	b085      	sub	sp, #20
 801a828:	af00      	add	r7, sp, #0
 801a82a:	6078      	str	r0, [r7, #4]
 801a82c:	460b      	mov	r3, r1
 801a82e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a836:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801a838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	da0b      	bge.n	801a858 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801a840:	78fb      	ldrb	r3, [r7, #3]
 801a842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a846:	68f9      	ldr	r1, [r7, #12]
 801a848:	4613      	mov	r3, r2
 801a84a:	009b      	lsls	r3, r3, #2
 801a84c:	4413      	add	r3, r2
 801a84e:	00db      	lsls	r3, r3, #3
 801a850:	440b      	add	r3, r1
 801a852:	3312      	adds	r3, #18
 801a854:	781b      	ldrb	r3, [r3, #0]
 801a856:	e00b      	b.n	801a870 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801a858:	78fb      	ldrb	r3, [r7, #3]
 801a85a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a85e:	68f9      	ldr	r1, [r7, #12]
 801a860:	4613      	mov	r3, r2
 801a862:	009b      	lsls	r3, r3, #2
 801a864:	4413      	add	r3, r2
 801a866:	00db      	lsls	r3, r3, #3
 801a868:	440b      	add	r3, r1
 801a86a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 801a86e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a870:	4618      	mov	r0, r3
 801a872:	3714      	adds	r7, #20
 801a874:	46bd      	mov	sp, r7
 801a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a87a:	4770      	bx	lr

0801a87c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a87c:	b580      	push	{r7, lr}
 801a87e:	b084      	sub	sp, #16
 801a880:	af00      	add	r7, sp, #0
 801a882:	6078      	str	r0, [r7, #4]
 801a884:	460b      	mov	r3, r1
 801a886:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a888:	2300      	movs	r3, #0
 801a88a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a88c:	2300      	movs	r3, #0
 801a88e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a896:	78fa      	ldrb	r2, [r7, #3]
 801a898:	4611      	mov	r1, r2
 801a89a:	4618      	mov	r0, r3
 801a89c:	f7f0 feaf 	bl	800b5fe <HAL_PCD_SetAddress>
 801a8a0:	4603      	mov	r3, r0
 801a8a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a8a4:	7bfb      	ldrb	r3, [r7, #15]
 801a8a6:	4618      	mov	r0, r3
 801a8a8:	f000 f8b0 	bl	801aa0c <USBD_Get_USB_Status>
 801a8ac:	4603      	mov	r3, r0
 801a8ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a8b0:	7bbb      	ldrb	r3, [r7, #14]
}
 801a8b2:	4618      	mov	r0, r3
 801a8b4:	3710      	adds	r7, #16
 801a8b6:	46bd      	mov	sp, r7
 801a8b8:	bd80      	pop	{r7, pc}

0801a8ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a8ba:	b580      	push	{r7, lr}
 801a8bc:	b086      	sub	sp, #24
 801a8be:	af00      	add	r7, sp, #0
 801a8c0:	60f8      	str	r0, [r7, #12]
 801a8c2:	607a      	str	r2, [r7, #4]
 801a8c4:	603b      	str	r3, [r7, #0]
 801a8c6:	460b      	mov	r3, r1
 801a8c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a8ce:	2300      	movs	r3, #0
 801a8d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a8d2:	68fb      	ldr	r3, [r7, #12]
 801a8d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801a8d8:	7af9      	ldrb	r1, [r7, #11]
 801a8da:	683b      	ldr	r3, [r7, #0]
 801a8dc:	687a      	ldr	r2, [r7, #4]
 801a8de:	f7f0 ffa0 	bl	800b822 <HAL_PCD_EP_Transmit>
 801a8e2:	4603      	mov	r3, r0
 801a8e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a8e6:	7dfb      	ldrb	r3, [r7, #23]
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	f000 f88f 	bl	801aa0c <USBD_Get_USB_Status>
 801a8ee:	4603      	mov	r3, r0
 801a8f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a8f2:	7dbb      	ldrb	r3, [r7, #22]
}
 801a8f4:	4618      	mov	r0, r3
 801a8f6:	3718      	adds	r7, #24
 801a8f8:	46bd      	mov	sp, r7
 801a8fa:	bd80      	pop	{r7, pc}

0801a8fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a8fc:	b580      	push	{r7, lr}
 801a8fe:	b086      	sub	sp, #24
 801a900:	af00      	add	r7, sp, #0
 801a902:	60f8      	str	r0, [r7, #12]
 801a904:	607a      	str	r2, [r7, #4]
 801a906:	603b      	str	r3, [r7, #0]
 801a908:	460b      	mov	r3, r1
 801a90a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a90c:	2300      	movs	r3, #0
 801a90e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a910:	2300      	movs	r3, #0
 801a912:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801a91a:	7af9      	ldrb	r1, [r7, #11]
 801a91c:	683b      	ldr	r3, [r7, #0]
 801a91e:	687a      	ldr	r2, [r7, #4]
 801a920:	f7f0 ff36 	bl	800b790 <HAL_PCD_EP_Receive>
 801a924:	4603      	mov	r3, r0
 801a926:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a928:	7dfb      	ldrb	r3, [r7, #23]
 801a92a:	4618      	mov	r0, r3
 801a92c:	f000 f86e 	bl	801aa0c <USBD_Get_USB_Status>
 801a930:	4603      	mov	r3, r0
 801a932:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a934:	7dbb      	ldrb	r3, [r7, #22]
}
 801a936:	4618      	mov	r0, r3
 801a938:	3718      	adds	r7, #24
 801a93a:	46bd      	mov	sp, r7
 801a93c:	bd80      	pop	{r7, pc}

0801a93e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a93e:	b580      	push	{r7, lr}
 801a940:	b082      	sub	sp, #8
 801a942:	af00      	add	r7, sp, #0
 801a944:	6078      	str	r0, [r7, #4]
 801a946:	460b      	mov	r3, r1
 801a948:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a950:	78fa      	ldrb	r2, [r7, #3]
 801a952:	4611      	mov	r1, r2
 801a954:	4618      	mov	r0, r3
 801a956:	f7f0 ff4c 	bl	800b7f2 <HAL_PCD_EP_GetRxCount>
 801a95a:	4603      	mov	r3, r0
}
 801a95c:	4618      	mov	r0, r3
 801a95e:	3708      	adds	r7, #8
 801a960:	46bd      	mov	sp, r7
 801a962:	bd80      	pop	{r7, pc}

0801a964 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a964:	b580      	push	{r7, lr}
 801a966:	b082      	sub	sp, #8
 801a968:	af00      	add	r7, sp, #0
 801a96a:	6078      	str	r0, [r7, #4]
 801a96c:	460b      	mov	r3, r1
 801a96e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801a970:	78fb      	ldrb	r3, [r7, #3]
 801a972:	2b00      	cmp	r3, #0
 801a974:	d002      	beq.n	801a97c <HAL_PCDEx_LPM_Callback+0x18>
 801a976:	2b01      	cmp	r3, #1
 801a978:	d013      	beq.n	801a9a2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801a97a:	e023      	b.n	801a9c4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	7a5b      	ldrb	r3, [r3, #9]
 801a980:	2b00      	cmp	r3, #0
 801a982:	d007      	beq.n	801a994 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801a984:	f000 f83c 	bl	801aa00 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a988:	4b10      	ldr	r3, [pc, #64]	; (801a9cc <HAL_PCDEx_LPM_Callback+0x68>)
 801a98a:	691b      	ldr	r3, [r3, #16]
 801a98c:	4a0f      	ldr	r2, [pc, #60]	; (801a9cc <HAL_PCDEx_LPM_Callback+0x68>)
 801a98e:	f023 0306 	bic.w	r3, r3, #6
 801a992:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801a99a:	4618      	mov	r0, r3
 801a99c:	f7fa ff0d 	bl	80157ba <USBD_LL_Resume>
    break;
 801a9a0:	e010      	b.n	801a9c4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	f7fa feea 	bl	8015782 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	7a5b      	ldrb	r3, [r3, #9]
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d005      	beq.n	801a9c2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a9b6:	4b05      	ldr	r3, [pc, #20]	; (801a9cc <HAL_PCDEx_LPM_Callback+0x68>)
 801a9b8:	691b      	ldr	r3, [r3, #16]
 801a9ba:	4a04      	ldr	r2, [pc, #16]	; (801a9cc <HAL_PCDEx_LPM_Callback+0x68>)
 801a9bc:	f043 0306 	orr.w	r3, r3, #6
 801a9c0:	6113      	str	r3, [r2, #16]
    break;
 801a9c2:	bf00      	nop
}
 801a9c4:	bf00      	nop
 801a9c6:	3708      	adds	r7, #8
 801a9c8:	46bd      	mov	sp, r7
 801a9ca:	bd80      	pop	{r7, pc}
 801a9cc:	e000ed00 	.word	0xe000ed00

0801a9d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801a9d0:	b480      	push	{r7}
 801a9d2:	b083      	sub	sp, #12
 801a9d4:	af00      	add	r7, sp, #0
 801a9d6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801a9d8:	4b03      	ldr	r3, [pc, #12]	; (801a9e8 <USBD_static_malloc+0x18>)
}
 801a9da:	4618      	mov	r0, r3
 801a9dc:	370c      	adds	r7, #12
 801a9de:	46bd      	mov	sp, r7
 801a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9e4:	4770      	bx	lr
 801a9e6:	bf00      	nop
 801a9e8:	20002e1c 	.word	0x20002e1c

0801a9ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801a9ec:	b480      	push	{r7}
 801a9ee:	b083      	sub	sp, #12
 801a9f0:	af00      	add	r7, sp, #0
 801a9f2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801a9f4:	bf00      	nop
 801a9f6:	370c      	adds	r7, #12
 801a9f8:	46bd      	mov	sp, r7
 801a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9fe:	4770      	bx	lr

0801aa00 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801aa00:	b580      	push	{r7, lr}
 801aa02:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801aa04:	f7e8 fa94 	bl	8002f30 <SystemClock_Config>
}
 801aa08:	bf00      	nop
 801aa0a:	bd80      	pop	{r7, pc}

0801aa0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801aa0c:	b480      	push	{r7}
 801aa0e:	b085      	sub	sp, #20
 801aa10:	af00      	add	r7, sp, #0
 801aa12:	4603      	mov	r3, r0
 801aa14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aa16:	2300      	movs	r3, #0
 801aa18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801aa1a:	79fb      	ldrb	r3, [r7, #7]
 801aa1c:	2b03      	cmp	r3, #3
 801aa1e:	d817      	bhi.n	801aa50 <USBD_Get_USB_Status+0x44>
 801aa20:	a201      	add	r2, pc, #4	; (adr r2, 801aa28 <USBD_Get_USB_Status+0x1c>)
 801aa22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aa26:	bf00      	nop
 801aa28:	0801aa39 	.word	0x0801aa39
 801aa2c:	0801aa3f 	.word	0x0801aa3f
 801aa30:	0801aa45 	.word	0x0801aa45
 801aa34:	0801aa4b 	.word	0x0801aa4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801aa38:	2300      	movs	r3, #0
 801aa3a:	73fb      	strb	r3, [r7, #15]
    break;
 801aa3c:	e00b      	b.n	801aa56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801aa3e:	2303      	movs	r3, #3
 801aa40:	73fb      	strb	r3, [r7, #15]
    break;
 801aa42:	e008      	b.n	801aa56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801aa44:	2301      	movs	r3, #1
 801aa46:	73fb      	strb	r3, [r7, #15]
    break;
 801aa48:	e005      	b.n	801aa56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801aa4a:	2303      	movs	r3, #3
 801aa4c:	73fb      	strb	r3, [r7, #15]
    break;
 801aa4e:	e002      	b.n	801aa56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801aa50:	2303      	movs	r3, #3
 801aa52:	73fb      	strb	r3, [r7, #15]
    break;
 801aa54:	bf00      	nop
  }
  return usb_status;
 801aa56:	7bfb      	ldrb	r3, [r7, #15]
}
 801aa58:	4618      	mov	r0, r3
 801aa5a:	3714      	adds	r7, #20
 801aa5c:	46bd      	mov	sp, r7
 801aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa62:	4770      	bx	lr

0801aa64 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801aa64:	b480      	push	{r7}
 801aa66:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801aa68:	4b05      	ldr	r3, [pc, #20]	; (801aa80 <UTIL_LPM_Init+0x1c>)
 801aa6a:	2200      	movs	r2, #0
 801aa6c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801aa6e:	4b05      	ldr	r3, [pc, #20]	; (801aa84 <UTIL_LPM_Init+0x20>)
 801aa70:	2200      	movs	r2, #0
 801aa72:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801aa74:	bf00      	nop
 801aa76:	46bd      	mov	sp, r7
 801aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa7c:	4770      	bx	lr
 801aa7e:	bf00      	nop
 801aa80:	2000303c 	.word	0x2000303c
 801aa84:	20003040 	.word	0x20003040

0801aa88 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801aa88:	b480      	push	{r7}
 801aa8a:	b087      	sub	sp, #28
 801aa8c:	af00      	add	r7, sp, #0
 801aa8e:	6078      	str	r0, [r7, #4]
 801aa90:	460b      	mov	r3, r1
 801aa92:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa94:	f3ef 8310 	mrs	r3, PRIMASK
 801aa98:	613b      	str	r3, [r7, #16]
  return(result);
 801aa9a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801aa9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa9e:	b672      	cpsid	i
}
 801aaa0:	bf00      	nop
  
  switch(state)
 801aaa2:	78fb      	ldrb	r3, [r7, #3]
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d008      	beq.n	801aaba <UTIL_LPM_SetOffMode+0x32>
 801aaa8:	2b01      	cmp	r3, #1
 801aaaa:	d10e      	bne.n	801aaca <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801aaac:	4b0d      	ldr	r3, [pc, #52]	; (801aae4 <UTIL_LPM_SetOffMode+0x5c>)
 801aaae:	681a      	ldr	r2, [r3, #0]
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	4313      	orrs	r3, r2
 801aab4:	4a0b      	ldr	r2, [pc, #44]	; (801aae4 <UTIL_LPM_SetOffMode+0x5c>)
 801aab6:	6013      	str	r3, [r2, #0]
      break;
 801aab8:	e008      	b.n	801aacc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	43da      	mvns	r2, r3
 801aabe:	4b09      	ldr	r3, [pc, #36]	; (801aae4 <UTIL_LPM_SetOffMode+0x5c>)
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	4013      	ands	r3, r2
 801aac4:	4a07      	ldr	r2, [pc, #28]	; (801aae4 <UTIL_LPM_SetOffMode+0x5c>)
 801aac6:	6013      	str	r3, [r2, #0]
      break;
 801aac8:	e000      	b.n	801aacc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801aaca:	bf00      	nop
 801aacc:	697b      	ldr	r3, [r7, #20]
 801aace:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	f383 8810 	msr	PRIMASK, r3
}
 801aad6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801aad8:	bf00      	nop
 801aada:	371c      	adds	r7, #28
 801aadc:	46bd      	mov	sp, r7
 801aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aae2:	4770      	bx	lr
 801aae4:	20003040 	.word	0x20003040

0801aae8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801aae8:	b580      	push	{r7, lr}
 801aaea:	b090      	sub	sp, #64	; 0x40
 801aaec:	af00      	add	r7, sp, #0
 801aaee:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801aaf0:	4b73      	ldr	r3, [pc, #460]	; (801acc0 <UTIL_SEQ_Run+0x1d8>)
 801aaf2:	681b      	ldr	r3, [r3, #0]
 801aaf4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801aaf6:	4b72      	ldr	r3, [pc, #456]	; (801acc0 <UTIL_SEQ_Run+0x1d8>)
 801aaf8:	681a      	ldr	r2, [r3, #0]
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	4013      	ands	r3, r2
 801aafe:	4a70      	ldr	r2, [pc, #448]	; (801acc0 <UTIL_SEQ_Run+0x1d8>)
 801ab00:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801ab02:	4b70      	ldr	r3, [pc, #448]	; (801acc4 <UTIL_SEQ_Run+0x1dc>)
 801ab04:	681b      	ldr	r3, [r3, #0]
 801ab06:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801ab08:	4b6f      	ldr	r3, [pc, #444]	; (801acc8 <UTIL_SEQ_Run+0x1e0>)
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801ab0e:	4b6f      	ldr	r3, [pc, #444]	; (801accc <UTIL_SEQ_Run+0x1e4>)
 801ab10:	681b      	ldr	r3, [r3, #0]
 801ab12:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801ab14:	4b6e      	ldr	r3, [pc, #440]	; (801acd0 <UTIL_SEQ_Run+0x1e8>)
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801ab1a:	e08d      	b.n	801ac38 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801ab1c:	2300      	movs	r3, #0
 801ab1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801ab20:	e002      	b.n	801ab28 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801ab22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ab24:	3301      	adds	r3, #1
 801ab26:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801ab28:	4a6a      	ldr	r2, [pc, #424]	; (801acd4 <UTIL_SEQ_Run+0x1ec>)
 801ab2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ab2c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab32:	401a      	ands	r2, r3
 801ab34:	4b62      	ldr	r3, [pc, #392]	; (801acc0 <UTIL_SEQ_Run+0x1d8>)
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	4013      	ands	r3, r2
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	d0f1      	beq.n	801ab22 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801ab3e:	4a65      	ldr	r2, [pc, #404]	; (801acd4 <UTIL_SEQ_Run+0x1ec>)
 801ab40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ab42:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ab46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab48:	401a      	ands	r2, r3
 801ab4a:	4b5d      	ldr	r3, [pc, #372]	; (801acc0 <UTIL_SEQ_Run+0x1d8>)
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	4013      	ands	r3, r2
 801ab50:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801ab52:	4a60      	ldr	r2, [pc, #384]	; (801acd4 <UTIL_SEQ_Run+0x1ec>)
 801ab54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ab56:	00db      	lsls	r3, r3, #3
 801ab58:	4413      	add	r3, r2
 801ab5a:	685a      	ldr	r2, [r3, #4]
 801ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab5e:	4013      	ands	r3, r2
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d106      	bne.n	801ab72 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801ab64:	4a5b      	ldr	r2, [pc, #364]	; (801acd4 <UTIL_SEQ_Run+0x1ec>)
 801ab66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ab68:	00db      	lsls	r3, r3, #3
 801ab6a:	4413      	add	r3, r2
 801ab6c:	f04f 32ff 	mov.w	r2, #4294967295
 801ab70:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801ab72:	4a58      	ldr	r2, [pc, #352]	; (801acd4 <UTIL_SEQ_Run+0x1ec>)
 801ab74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ab76:	00db      	lsls	r3, r3, #3
 801ab78:	4413      	add	r3, r2
 801ab7a:	685a      	ldr	r2, [r3, #4]
 801ab7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab7e:	4013      	ands	r3, r2
 801ab80:	4618      	mov	r0, r3
 801ab82:	f000 f9b3 	bl	801aeec <SEQ_BitPosition>
 801ab86:	4603      	mov	r3, r0
 801ab88:	461a      	mov	r2, r3
 801ab8a:	4b53      	ldr	r3, [pc, #332]	; (801acd8 <UTIL_SEQ_Run+0x1f0>)
 801ab8c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801ab8e:	4a51      	ldr	r2, [pc, #324]	; (801acd4 <UTIL_SEQ_Run+0x1ec>)
 801ab90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ab92:	00db      	lsls	r3, r3, #3
 801ab94:	4413      	add	r3, r2
 801ab96:	685a      	ldr	r2, [r3, #4]
 801ab98:	4b4f      	ldr	r3, [pc, #316]	; (801acd8 <UTIL_SEQ_Run+0x1f0>)
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	2101      	movs	r1, #1
 801ab9e:	fa01 f303 	lsl.w	r3, r1, r3
 801aba2:	43db      	mvns	r3, r3
 801aba4:	401a      	ands	r2, r3
 801aba6:	494b      	ldr	r1, [pc, #300]	; (801acd4 <UTIL_SEQ_Run+0x1ec>)
 801aba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801abaa:	00db      	lsls	r3, r3, #3
 801abac:	440b      	add	r3, r1
 801abae:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801abb0:	f3ef 8310 	mrs	r3, PRIMASK
 801abb4:	61bb      	str	r3, [r7, #24]
  return(result);
 801abb6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801abb8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801abba:	b672      	cpsid	i
}
 801abbc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801abbe:	4b46      	ldr	r3, [pc, #280]	; (801acd8 <UTIL_SEQ_Run+0x1f0>)
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	2201      	movs	r2, #1
 801abc4:	fa02 f303 	lsl.w	r3, r2, r3
 801abc8:	43da      	mvns	r2, r3
 801abca:	4b3e      	ldr	r3, [pc, #248]	; (801acc4 <UTIL_SEQ_Run+0x1dc>)
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	4013      	ands	r3, r2
 801abd0:	4a3c      	ldr	r2, [pc, #240]	; (801acc4 <UTIL_SEQ_Run+0x1dc>)
 801abd2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801abd4:	2302      	movs	r3, #2
 801abd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801abd8:	e013      	b.n	801ac02 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801abda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801abdc:	3b01      	subs	r3, #1
 801abde:	4a3d      	ldr	r2, [pc, #244]	; (801acd4 <UTIL_SEQ_Run+0x1ec>)
 801abe0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801abe4:	4b3c      	ldr	r3, [pc, #240]	; (801acd8 <UTIL_SEQ_Run+0x1f0>)
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	2201      	movs	r2, #1
 801abea:	fa02 f303 	lsl.w	r3, r2, r3
 801abee:	43da      	mvns	r2, r3
 801abf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801abf2:	3b01      	subs	r3, #1
 801abf4:	400a      	ands	r2, r1
 801abf6:	4937      	ldr	r1, [pc, #220]	; (801acd4 <UTIL_SEQ_Run+0x1ec>)
 801abf8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801abfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801abfe:	3b01      	subs	r3, #1
 801ac00:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ac02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d1e8      	bne.n	801abda <UTIL_SEQ_Run+0xf2>
 801ac08:	6a3b      	ldr	r3, [r7, #32]
 801ac0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac0c:	697b      	ldr	r3, [r7, #20]
 801ac0e:	f383 8810 	msr	PRIMASK, r3
}
 801ac12:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801ac14:	4b30      	ldr	r3, [pc, #192]	; (801acd8 <UTIL_SEQ_Run+0x1f0>)
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	4a30      	ldr	r2, [pc, #192]	; (801acdc <UTIL_SEQ_Run+0x1f4>)
 801ac1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ac1e:	4798      	blx	r3

    local_taskset = TaskSet;
 801ac20:	4b28      	ldr	r3, [pc, #160]	; (801acc4 <UTIL_SEQ_Run+0x1dc>)
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801ac26:	4b28      	ldr	r3, [pc, #160]	; (801acc8 <UTIL_SEQ_Run+0x1e0>)
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801ac2c:	4b27      	ldr	r3, [pc, #156]	; (801accc <UTIL_SEQ_Run+0x1e4>)
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801ac32:	4b27      	ldr	r3, [pc, #156]	; (801acd0 <UTIL_SEQ_Run+0x1e8>)
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801ac38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac3c:	401a      	ands	r2, r3
 801ac3e:	4b20      	ldr	r3, [pc, #128]	; (801acc0 <UTIL_SEQ_Run+0x1d8>)
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	4013      	ands	r3, r2
 801ac44:	2b00      	cmp	r3, #0
 801ac46:	d005      	beq.n	801ac54 <UTIL_SEQ_Run+0x16c>
 801ac48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ac4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac4c:	4013      	ands	r3, r2
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	f43f af64 	beq.w	801ab1c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801ac54:	4b20      	ldr	r3, [pc, #128]	; (801acd8 <UTIL_SEQ_Run+0x1f0>)
 801ac56:	f04f 32ff 	mov.w	r2, #4294967295
 801ac5a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801ac5c:	f000 f938 	bl	801aed0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ac60:	f3ef 8310 	mrs	r3, PRIMASK
 801ac64:	613b      	str	r3, [r7, #16]
  return(result);
 801ac66:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801ac68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ac6a:	b672      	cpsid	i
}
 801ac6c:	bf00      	nop
  local_taskset = TaskSet;
 801ac6e:	4b15      	ldr	r3, [pc, #84]	; (801acc4 <UTIL_SEQ_Run+0x1dc>)
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801ac74:	4b14      	ldr	r3, [pc, #80]	; (801acc8 <UTIL_SEQ_Run+0x1e0>)
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801ac7a:	4b14      	ldr	r3, [pc, #80]	; (801accc <UTIL_SEQ_Run+0x1e4>)
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801ac80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ac82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac84:	401a      	ands	r2, r3
 801ac86:	4b0e      	ldr	r3, [pc, #56]	; (801acc0 <UTIL_SEQ_Run+0x1d8>)
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	4013      	ands	r3, r2
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d107      	bne.n	801aca0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801ac90:	4b0f      	ldr	r3, [pc, #60]	; (801acd0 <UTIL_SEQ_Run+0x1e8>)
 801ac92:	681a      	ldr	r2, [r3, #0]
 801ac94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac96:	4013      	ands	r3, r2
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	d101      	bne.n	801aca0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801ac9c:	f7e6 ff50 	bl	8001b40 <UTIL_SEQ_Idle>
 801aca0:	69fb      	ldr	r3, [r7, #28]
 801aca2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	f383 8810 	msr	PRIMASK, r3
}
 801acaa:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801acac:	f000 f917 	bl	801aede <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801acb0:	4a03      	ldr	r2, [pc, #12]	; (801acc0 <UTIL_SEQ_Run+0x1d8>)
 801acb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acb4:	6013      	str	r3, [r2, #0]

  return;
 801acb6:	bf00      	nop
}
 801acb8:	3740      	adds	r7, #64	; 0x40
 801acba:	46bd      	mov	sp, r7
 801acbc:	bd80      	pop	{r7, pc}
 801acbe:	bf00      	nop
 801acc0:	20000140 	.word	0x20000140
 801acc4:	20003044 	.word	0x20003044
 801acc8:	20003048 	.word	0x20003048
 801accc:	2000013c 	.word	0x2000013c
 801acd0:	2000304c 	.word	0x2000304c
 801acd4:	200030d4 	.word	0x200030d4
 801acd8:	20003050 	.word	0x20003050
 801acdc:	20003054 	.word	0x20003054

0801ace0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801ace0:	b580      	push	{r7, lr}
 801ace2:	b088      	sub	sp, #32
 801ace4:	af00      	add	r7, sp, #0
 801ace6:	60f8      	str	r0, [r7, #12]
 801ace8:	60b9      	str	r1, [r7, #8]
 801acea:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801acec:	f3ef 8310 	mrs	r3, PRIMASK
 801acf0:	617b      	str	r3, [r7, #20]
  return(result);
 801acf2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801acf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801acf6:	b672      	cpsid	i
}
 801acf8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801acfa:	68f8      	ldr	r0, [r7, #12]
 801acfc:	f000 f8f6 	bl	801aeec <SEQ_BitPosition>
 801ad00:	4603      	mov	r3, r0
 801ad02:	4619      	mov	r1, r3
 801ad04:	4a06      	ldr	r2, [pc, #24]	; (801ad20 <UTIL_SEQ_RegTask+0x40>)
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801ad0c:	69fb      	ldr	r3, [r7, #28]
 801ad0e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad10:	69bb      	ldr	r3, [r7, #24]
 801ad12:	f383 8810 	msr	PRIMASK, r3
}
 801ad16:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801ad18:	bf00      	nop
}
 801ad1a:	3720      	adds	r7, #32
 801ad1c:	46bd      	mov	sp, r7
 801ad1e:	bd80      	pop	{r7, pc}
 801ad20:	20003054 	.word	0x20003054

0801ad24 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801ad24:	b480      	push	{r7}
 801ad26:	b087      	sub	sp, #28
 801ad28:	af00      	add	r7, sp, #0
 801ad2a:	6078      	str	r0, [r7, #4]
 801ad2c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad2e:	f3ef 8310 	mrs	r3, PRIMASK
 801ad32:	60fb      	str	r3, [r7, #12]
  return(result);
 801ad34:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ad36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ad38:	b672      	cpsid	i
}
 801ad3a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801ad3c:	4b0d      	ldr	r3, [pc, #52]	; (801ad74 <UTIL_SEQ_SetTask+0x50>)
 801ad3e:	681a      	ldr	r2, [r3, #0]
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	4313      	orrs	r3, r2
 801ad44:	4a0b      	ldr	r2, [pc, #44]	; (801ad74 <UTIL_SEQ_SetTask+0x50>)
 801ad46:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801ad48:	4a0b      	ldr	r2, [pc, #44]	; (801ad78 <UTIL_SEQ_SetTask+0x54>)
 801ad4a:	683b      	ldr	r3, [r7, #0]
 801ad4c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	431a      	orrs	r2, r3
 801ad54:	4908      	ldr	r1, [pc, #32]	; (801ad78 <UTIL_SEQ_SetTask+0x54>)
 801ad56:	683b      	ldr	r3, [r7, #0]
 801ad58:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801ad5c:	697b      	ldr	r3, [r7, #20]
 801ad5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad60:	693b      	ldr	r3, [r7, #16]
 801ad62:	f383 8810 	msr	PRIMASK, r3
}
 801ad66:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801ad68:	bf00      	nop
}
 801ad6a:	371c      	adds	r7, #28
 801ad6c:	46bd      	mov	sp, r7
 801ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad72:	4770      	bx	lr
 801ad74:	20003044 	.word	0x20003044
 801ad78:	200030d4 	.word	0x200030d4

0801ad7c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801ad7c:	b480      	push	{r7}
 801ad7e:	b087      	sub	sp, #28
 801ad80:	af00      	add	r7, sp, #0
 801ad82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad84:	f3ef 8310 	mrs	r3, PRIMASK
 801ad88:	60fb      	str	r3, [r7, #12]
  return(result);
 801ad8a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ad8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ad8e:	b672      	cpsid	i
}
 801ad90:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	43da      	mvns	r2, r3
 801ad96:	4b08      	ldr	r3, [pc, #32]	; (801adb8 <UTIL_SEQ_PauseTask+0x3c>)
 801ad98:	681b      	ldr	r3, [r3, #0]
 801ad9a:	4013      	ands	r3, r2
 801ad9c:	4a06      	ldr	r2, [pc, #24]	; (801adb8 <UTIL_SEQ_PauseTask+0x3c>)
 801ad9e:	6013      	str	r3, [r2, #0]
 801ada0:	697b      	ldr	r3, [r7, #20]
 801ada2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ada4:	693b      	ldr	r3, [r7, #16]
 801ada6:	f383 8810 	msr	PRIMASK, r3
}
 801adaa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801adac:	bf00      	nop
}
 801adae:	371c      	adds	r7, #28
 801adb0:	46bd      	mov	sp, r7
 801adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adb6:	4770      	bx	lr
 801adb8:	2000013c 	.word	0x2000013c

0801adbc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801adbc:	b480      	push	{r7}
 801adbe:	b087      	sub	sp, #28
 801adc0:	af00      	add	r7, sp, #0
 801adc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801adc4:	f3ef 8310 	mrs	r3, PRIMASK
 801adc8:	60fb      	str	r3, [r7, #12]
  return(result);
 801adca:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801adcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801adce:	b672      	cpsid	i
}
 801add0:	bf00      	nop

  TaskMask |= TaskId_bm;
 801add2:	4b09      	ldr	r3, [pc, #36]	; (801adf8 <UTIL_SEQ_ResumeTask+0x3c>)
 801add4:	681a      	ldr	r2, [r3, #0]
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	4313      	orrs	r3, r2
 801adda:	4a07      	ldr	r2, [pc, #28]	; (801adf8 <UTIL_SEQ_ResumeTask+0x3c>)
 801addc:	6013      	str	r3, [r2, #0]
 801adde:	697b      	ldr	r3, [r7, #20]
 801ade0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ade2:	693b      	ldr	r3, [r7, #16]
 801ade4:	f383 8810 	msr	PRIMASK, r3
}
 801ade8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801adea:	bf00      	nop
}
 801adec:	371c      	adds	r7, #28
 801adee:	46bd      	mov	sp, r7
 801adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adf4:	4770      	bx	lr
 801adf6:	bf00      	nop
 801adf8:	2000013c 	.word	0x2000013c

0801adfc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 801adfc:	b480      	push	{r7}
 801adfe:	b087      	sub	sp, #28
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae04:	f3ef 8310 	mrs	r3, PRIMASK
 801ae08:	60fb      	str	r3, [r7, #12]
  return(result);
 801ae0a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ae0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ae0e:	b672      	cpsid	i
}
 801ae10:	bf00      	nop

  EvtSet |= EvtId_bm;
 801ae12:	4b09      	ldr	r3, [pc, #36]	; (801ae38 <UTIL_SEQ_SetEvt+0x3c>)
 801ae14:	681a      	ldr	r2, [r3, #0]
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	4313      	orrs	r3, r2
 801ae1a:	4a07      	ldr	r2, [pc, #28]	; (801ae38 <UTIL_SEQ_SetEvt+0x3c>)
 801ae1c:	6013      	str	r3, [r2, #0]
 801ae1e:	697b      	ldr	r3, [r7, #20]
 801ae20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae22:	693b      	ldr	r3, [r7, #16]
 801ae24:	f383 8810 	msr	PRIMASK, r3
}
 801ae28:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801ae2a:	bf00      	nop
}
 801ae2c:	371c      	adds	r7, #28
 801ae2e:	46bd      	mov	sp, r7
 801ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae34:	4770      	bx	lr
 801ae36:	bf00      	nop
 801ae38:	20003048 	.word	0x20003048

0801ae3c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 801ae3c:	b580      	push	{r7, lr}
 801ae3e:	b088      	sub	sp, #32
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 801ae44:	4b1f      	ldr	r3, [pc, #124]	; (801aec4 <UTIL_SEQ_WaitEvt+0x88>)
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801ae4a:	4b1e      	ldr	r3, [pc, #120]	; (801aec4 <UTIL_SEQ_WaitEvt+0x88>)
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ae52:	d102      	bne.n	801ae5a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 801ae54:	2300      	movs	r3, #0
 801ae56:	61fb      	str	r3, [r7, #28]
 801ae58:	e005      	b.n	801ae66 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801ae5a:	4b1a      	ldr	r3, [pc, #104]	; (801aec4 <UTIL_SEQ_WaitEvt+0x88>)
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	2201      	movs	r2, #1
 801ae60:	fa02 f303 	lsl.w	r3, r2, r3
 801ae64:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801ae66:	4b18      	ldr	r3, [pc, #96]	; (801aec8 <UTIL_SEQ_WaitEvt+0x8c>)
 801ae68:	681b      	ldr	r3, [r3, #0]
 801ae6a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 801ae6c:	4a16      	ldr	r2, [pc, #88]	; (801aec8 <UTIL_SEQ_WaitEvt+0x8c>)
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801ae72:	e003      	b.n	801ae7c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 801ae74:	6879      	ldr	r1, [r7, #4]
 801ae76:	69f8      	ldr	r0, [r7, #28]
 801ae78:	f7e6 fe69 	bl	8001b4e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 801ae7c:	4b13      	ldr	r3, [pc, #76]	; (801aecc <UTIL_SEQ_WaitEvt+0x90>)
 801ae7e:	681a      	ldr	r2, [r3, #0]
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	4013      	ands	r3, r2
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d0f5      	beq.n	801ae74 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801ae88:	4a0e      	ldr	r2, [pc, #56]	; (801aec4 <UTIL_SEQ_WaitEvt+0x88>)
 801ae8a:	69bb      	ldr	r3, [r7, #24]
 801ae8c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae8e:	f3ef 8310 	mrs	r3, PRIMASK
 801ae92:	60bb      	str	r3, [r7, #8]
  return(result);
 801ae94:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ae96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801ae98:	b672      	cpsid	i
}
 801ae9a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	43da      	mvns	r2, r3
 801aea0:	4b0a      	ldr	r3, [pc, #40]	; (801aecc <UTIL_SEQ_WaitEvt+0x90>)
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	4013      	ands	r3, r2
 801aea6:	4a09      	ldr	r2, [pc, #36]	; (801aecc <UTIL_SEQ_WaitEvt+0x90>)
 801aea8:	6013      	str	r3, [r2, #0]
 801aeaa:	693b      	ldr	r3, [r7, #16]
 801aeac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	f383 8810 	msr	PRIMASK, r3
}
 801aeb4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801aeb6:	4a04      	ldr	r2, [pc, #16]	; (801aec8 <UTIL_SEQ_WaitEvt+0x8c>)
 801aeb8:	697b      	ldr	r3, [r7, #20]
 801aeba:	6013      	str	r3, [r2, #0]
  return;
 801aebc:	bf00      	nop
}
 801aebe:	3720      	adds	r7, #32
 801aec0:	46bd      	mov	sp, r7
 801aec2:	bd80      	pop	{r7, pc}
 801aec4:	20003050 	.word	0x20003050
 801aec8:	2000304c 	.word	0x2000304c
 801aecc:	20003048 	.word	0x20003048

0801aed0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801aed0:	b480      	push	{r7}
 801aed2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801aed4:	bf00      	nop
}
 801aed6:	46bd      	mov	sp, r7
 801aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aedc:	4770      	bx	lr

0801aede <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801aede:	b480      	push	{r7}
 801aee0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801aee2:	bf00      	nop
}
 801aee4:	46bd      	mov	sp, r7
 801aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeea:	4770      	bx	lr

0801aeec <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801aeec:	b480      	push	{r7}
 801aeee:	b085      	sub	sp, #20
 801aef0:	af00      	add	r7, sp, #0
 801aef2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801aef4:	2300      	movs	r3, #0
 801aef6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801aefc:	68bb      	ldr	r3, [r7, #8]
 801aefe:	0c1b      	lsrs	r3, r3, #16
 801af00:	041b      	lsls	r3, r3, #16
 801af02:	2b00      	cmp	r3, #0
 801af04:	d104      	bne.n	801af10 <SEQ_BitPosition+0x24>
 801af06:	2310      	movs	r3, #16
 801af08:	73fb      	strb	r3, [r7, #15]
 801af0a:	68bb      	ldr	r3, [r7, #8]
 801af0c:	041b      	lsls	r3, r3, #16
 801af0e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801af10:	68bb      	ldr	r3, [r7, #8]
 801af12:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801af16:	2b00      	cmp	r3, #0
 801af18:	d105      	bne.n	801af26 <SEQ_BitPosition+0x3a>
 801af1a:	7bfb      	ldrb	r3, [r7, #15]
 801af1c:	3308      	adds	r3, #8
 801af1e:	73fb      	strb	r3, [r7, #15]
 801af20:	68bb      	ldr	r3, [r7, #8]
 801af22:	021b      	lsls	r3, r3, #8
 801af24:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801af26:	68bb      	ldr	r3, [r7, #8]
 801af28:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d105      	bne.n	801af3c <SEQ_BitPosition+0x50>
 801af30:	7bfb      	ldrb	r3, [r7, #15]
 801af32:	3304      	adds	r3, #4
 801af34:	73fb      	strb	r3, [r7, #15]
 801af36:	68bb      	ldr	r3, [r7, #8]
 801af38:	011b      	lsls	r3, r3, #4
 801af3a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801af3c:	68bb      	ldr	r3, [r7, #8]
 801af3e:	0f1b      	lsrs	r3, r3, #28
 801af40:	4a07      	ldr	r2, [pc, #28]	; (801af60 <SEQ_BitPosition+0x74>)
 801af42:	5cd2      	ldrb	r2, [r2, r3]
 801af44:	7bfb      	ldrb	r3, [r7, #15]
 801af46:	4413      	add	r3, r2
 801af48:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801af4a:	7bfb      	ldrb	r3, [r7, #15]
 801af4c:	f1c3 031f 	rsb	r3, r3, #31
 801af50:	b2db      	uxtb	r3, r3
}
 801af52:	4618      	mov	r0, r3
 801af54:	3714      	adds	r7, #20
 801af56:	46bd      	mov	sp, r7
 801af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af5c:	4770      	bx	lr
 801af5e:	bf00      	nop
 801af60:	080238b4 	.word	0x080238b4

0801af64 <atoi>:
 801af64:	220a      	movs	r2, #10
 801af66:	2100      	movs	r1, #0
 801af68:	f000 bfba 	b.w	801bee0 <strtol>

0801af6c <malloc>:
 801af6c:	4b02      	ldr	r3, [pc, #8]	; (801af78 <malloc+0xc>)
 801af6e:	4601      	mov	r1, r0
 801af70:	6818      	ldr	r0, [r3, #0]
 801af72:	f000 b82b 	b.w	801afcc <_malloc_r>
 801af76:	bf00      	nop
 801af78:	20000308 	.word	0x20000308

0801af7c <free>:
 801af7c:	4b02      	ldr	r3, [pc, #8]	; (801af88 <free+0xc>)
 801af7e:	4601      	mov	r1, r0
 801af80:	6818      	ldr	r0, [r3, #0]
 801af82:	f002 bf57 	b.w	801de34 <_free_r>
 801af86:	bf00      	nop
 801af88:	20000308 	.word	0x20000308

0801af8c <sbrk_aligned>:
 801af8c:	b570      	push	{r4, r5, r6, lr}
 801af8e:	4e0e      	ldr	r6, [pc, #56]	; (801afc8 <sbrk_aligned+0x3c>)
 801af90:	460c      	mov	r4, r1
 801af92:	6831      	ldr	r1, [r6, #0]
 801af94:	4605      	mov	r5, r0
 801af96:	b911      	cbnz	r1, 801af9e <sbrk_aligned+0x12>
 801af98:	f002 f840 	bl	801d01c <_sbrk_r>
 801af9c:	6030      	str	r0, [r6, #0]
 801af9e:	4621      	mov	r1, r4
 801afa0:	4628      	mov	r0, r5
 801afa2:	f002 f83b 	bl	801d01c <_sbrk_r>
 801afa6:	1c43      	adds	r3, r0, #1
 801afa8:	d00a      	beq.n	801afc0 <sbrk_aligned+0x34>
 801afaa:	1cc4      	adds	r4, r0, #3
 801afac:	f024 0403 	bic.w	r4, r4, #3
 801afb0:	42a0      	cmp	r0, r4
 801afb2:	d007      	beq.n	801afc4 <sbrk_aligned+0x38>
 801afb4:	1a21      	subs	r1, r4, r0
 801afb6:	4628      	mov	r0, r5
 801afb8:	f002 f830 	bl	801d01c <_sbrk_r>
 801afbc:	3001      	adds	r0, #1
 801afbe:	d101      	bne.n	801afc4 <sbrk_aligned+0x38>
 801afc0:	f04f 34ff 	mov.w	r4, #4294967295
 801afc4:	4620      	mov	r0, r4
 801afc6:	bd70      	pop	{r4, r5, r6, pc}
 801afc8:	200030e8 	.word	0x200030e8

0801afcc <_malloc_r>:
 801afcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801afd0:	1ccd      	adds	r5, r1, #3
 801afd2:	f025 0503 	bic.w	r5, r5, #3
 801afd6:	3508      	adds	r5, #8
 801afd8:	2d0c      	cmp	r5, #12
 801afda:	bf38      	it	cc
 801afdc:	250c      	movcc	r5, #12
 801afde:	2d00      	cmp	r5, #0
 801afe0:	4607      	mov	r7, r0
 801afe2:	db01      	blt.n	801afe8 <_malloc_r+0x1c>
 801afe4:	42a9      	cmp	r1, r5
 801afe6:	d905      	bls.n	801aff4 <_malloc_r+0x28>
 801afe8:	230c      	movs	r3, #12
 801afea:	603b      	str	r3, [r7, #0]
 801afec:	2600      	movs	r6, #0
 801afee:	4630      	mov	r0, r6
 801aff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aff4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801b0c8 <_malloc_r+0xfc>
 801aff8:	f000 f868 	bl	801b0cc <__malloc_lock>
 801affc:	f8d8 3000 	ldr.w	r3, [r8]
 801b000:	461c      	mov	r4, r3
 801b002:	bb5c      	cbnz	r4, 801b05c <_malloc_r+0x90>
 801b004:	4629      	mov	r1, r5
 801b006:	4638      	mov	r0, r7
 801b008:	f7ff ffc0 	bl	801af8c <sbrk_aligned>
 801b00c:	1c43      	adds	r3, r0, #1
 801b00e:	4604      	mov	r4, r0
 801b010:	d155      	bne.n	801b0be <_malloc_r+0xf2>
 801b012:	f8d8 4000 	ldr.w	r4, [r8]
 801b016:	4626      	mov	r6, r4
 801b018:	2e00      	cmp	r6, #0
 801b01a:	d145      	bne.n	801b0a8 <_malloc_r+0xdc>
 801b01c:	2c00      	cmp	r4, #0
 801b01e:	d048      	beq.n	801b0b2 <_malloc_r+0xe6>
 801b020:	6823      	ldr	r3, [r4, #0]
 801b022:	4631      	mov	r1, r6
 801b024:	4638      	mov	r0, r7
 801b026:	eb04 0903 	add.w	r9, r4, r3
 801b02a:	f001 fff7 	bl	801d01c <_sbrk_r>
 801b02e:	4581      	cmp	r9, r0
 801b030:	d13f      	bne.n	801b0b2 <_malloc_r+0xe6>
 801b032:	6821      	ldr	r1, [r4, #0]
 801b034:	1a6d      	subs	r5, r5, r1
 801b036:	4629      	mov	r1, r5
 801b038:	4638      	mov	r0, r7
 801b03a:	f7ff ffa7 	bl	801af8c <sbrk_aligned>
 801b03e:	3001      	adds	r0, #1
 801b040:	d037      	beq.n	801b0b2 <_malloc_r+0xe6>
 801b042:	6823      	ldr	r3, [r4, #0]
 801b044:	442b      	add	r3, r5
 801b046:	6023      	str	r3, [r4, #0]
 801b048:	f8d8 3000 	ldr.w	r3, [r8]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d038      	beq.n	801b0c2 <_malloc_r+0xf6>
 801b050:	685a      	ldr	r2, [r3, #4]
 801b052:	42a2      	cmp	r2, r4
 801b054:	d12b      	bne.n	801b0ae <_malloc_r+0xe2>
 801b056:	2200      	movs	r2, #0
 801b058:	605a      	str	r2, [r3, #4]
 801b05a:	e00f      	b.n	801b07c <_malloc_r+0xb0>
 801b05c:	6822      	ldr	r2, [r4, #0]
 801b05e:	1b52      	subs	r2, r2, r5
 801b060:	d41f      	bmi.n	801b0a2 <_malloc_r+0xd6>
 801b062:	2a0b      	cmp	r2, #11
 801b064:	d917      	bls.n	801b096 <_malloc_r+0xca>
 801b066:	1961      	adds	r1, r4, r5
 801b068:	42a3      	cmp	r3, r4
 801b06a:	6025      	str	r5, [r4, #0]
 801b06c:	bf18      	it	ne
 801b06e:	6059      	strne	r1, [r3, #4]
 801b070:	6863      	ldr	r3, [r4, #4]
 801b072:	bf08      	it	eq
 801b074:	f8c8 1000 	streq.w	r1, [r8]
 801b078:	5162      	str	r2, [r4, r5]
 801b07a:	604b      	str	r3, [r1, #4]
 801b07c:	4638      	mov	r0, r7
 801b07e:	f104 060b 	add.w	r6, r4, #11
 801b082:	f000 f829 	bl	801b0d8 <__malloc_unlock>
 801b086:	f026 0607 	bic.w	r6, r6, #7
 801b08a:	1d23      	adds	r3, r4, #4
 801b08c:	1af2      	subs	r2, r6, r3
 801b08e:	d0ae      	beq.n	801afee <_malloc_r+0x22>
 801b090:	1b9b      	subs	r3, r3, r6
 801b092:	50a3      	str	r3, [r4, r2]
 801b094:	e7ab      	b.n	801afee <_malloc_r+0x22>
 801b096:	42a3      	cmp	r3, r4
 801b098:	6862      	ldr	r2, [r4, #4]
 801b09a:	d1dd      	bne.n	801b058 <_malloc_r+0x8c>
 801b09c:	f8c8 2000 	str.w	r2, [r8]
 801b0a0:	e7ec      	b.n	801b07c <_malloc_r+0xb0>
 801b0a2:	4623      	mov	r3, r4
 801b0a4:	6864      	ldr	r4, [r4, #4]
 801b0a6:	e7ac      	b.n	801b002 <_malloc_r+0x36>
 801b0a8:	4634      	mov	r4, r6
 801b0aa:	6876      	ldr	r6, [r6, #4]
 801b0ac:	e7b4      	b.n	801b018 <_malloc_r+0x4c>
 801b0ae:	4613      	mov	r3, r2
 801b0b0:	e7cc      	b.n	801b04c <_malloc_r+0x80>
 801b0b2:	230c      	movs	r3, #12
 801b0b4:	603b      	str	r3, [r7, #0]
 801b0b6:	4638      	mov	r0, r7
 801b0b8:	f000 f80e 	bl	801b0d8 <__malloc_unlock>
 801b0bc:	e797      	b.n	801afee <_malloc_r+0x22>
 801b0be:	6025      	str	r5, [r4, #0]
 801b0c0:	e7dc      	b.n	801b07c <_malloc_r+0xb0>
 801b0c2:	605b      	str	r3, [r3, #4]
 801b0c4:	deff      	udf	#255	; 0xff
 801b0c6:	bf00      	nop
 801b0c8:	200030e4 	.word	0x200030e4

0801b0cc <__malloc_lock>:
 801b0cc:	4801      	ldr	r0, [pc, #4]	; (801b0d4 <__malloc_lock+0x8>)
 801b0ce:	f001 bff2 	b.w	801d0b6 <__retarget_lock_acquire_recursive>
 801b0d2:	bf00      	nop
 801b0d4:	2000322c 	.word	0x2000322c

0801b0d8 <__malloc_unlock>:
 801b0d8:	4801      	ldr	r0, [pc, #4]	; (801b0e0 <__malloc_unlock+0x8>)
 801b0da:	f001 bfed 	b.w	801d0b8 <__retarget_lock_release_recursive>
 801b0de:	bf00      	nop
 801b0e0:	2000322c 	.word	0x2000322c

0801b0e4 <sulp>:
 801b0e4:	b570      	push	{r4, r5, r6, lr}
 801b0e6:	4604      	mov	r4, r0
 801b0e8:	460d      	mov	r5, r1
 801b0ea:	ec45 4b10 	vmov	d0, r4, r5
 801b0ee:	4616      	mov	r6, r2
 801b0f0:	f003 fdc2 	bl	801ec78 <__ulp>
 801b0f4:	ec51 0b10 	vmov	r0, r1, d0
 801b0f8:	b17e      	cbz	r6, 801b11a <sulp+0x36>
 801b0fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b0fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b102:	2b00      	cmp	r3, #0
 801b104:	dd09      	ble.n	801b11a <sulp+0x36>
 801b106:	051b      	lsls	r3, r3, #20
 801b108:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801b10c:	2400      	movs	r4, #0
 801b10e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801b112:	4622      	mov	r2, r4
 801b114:	462b      	mov	r3, r5
 801b116:	f7e5 fa47 	bl	80005a8 <__aeabi_dmul>
 801b11a:	bd70      	pop	{r4, r5, r6, pc}
 801b11c:	0000      	movs	r0, r0
	...

0801b120 <_strtod_l>:
 801b120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b124:	ed2d 8b02 	vpush	{d8}
 801b128:	b09b      	sub	sp, #108	; 0x6c
 801b12a:	4604      	mov	r4, r0
 801b12c:	9213      	str	r2, [sp, #76]	; 0x4c
 801b12e:	2200      	movs	r2, #0
 801b130:	9216      	str	r2, [sp, #88]	; 0x58
 801b132:	460d      	mov	r5, r1
 801b134:	f04f 0800 	mov.w	r8, #0
 801b138:	f04f 0900 	mov.w	r9, #0
 801b13c:	460a      	mov	r2, r1
 801b13e:	9215      	str	r2, [sp, #84]	; 0x54
 801b140:	7811      	ldrb	r1, [r2, #0]
 801b142:	292b      	cmp	r1, #43	; 0x2b
 801b144:	d04c      	beq.n	801b1e0 <_strtod_l+0xc0>
 801b146:	d83a      	bhi.n	801b1be <_strtod_l+0x9e>
 801b148:	290d      	cmp	r1, #13
 801b14a:	d834      	bhi.n	801b1b6 <_strtod_l+0x96>
 801b14c:	2908      	cmp	r1, #8
 801b14e:	d834      	bhi.n	801b1ba <_strtod_l+0x9a>
 801b150:	2900      	cmp	r1, #0
 801b152:	d03d      	beq.n	801b1d0 <_strtod_l+0xb0>
 801b154:	2200      	movs	r2, #0
 801b156:	920a      	str	r2, [sp, #40]	; 0x28
 801b158:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801b15a:	7832      	ldrb	r2, [r6, #0]
 801b15c:	2a30      	cmp	r2, #48	; 0x30
 801b15e:	f040 80b4 	bne.w	801b2ca <_strtod_l+0x1aa>
 801b162:	7872      	ldrb	r2, [r6, #1]
 801b164:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801b168:	2a58      	cmp	r2, #88	; 0x58
 801b16a:	d170      	bne.n	801b24e <_strtod_l+0x12e>
 801b16c:	9302      	str	r3, [sp, #8]
 801b16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b170:	9301      	str	r3, [sp, #4]
 801b172:	ab16      	add	r3, sp, #88	; 0x58
 801b174:	9300      	str	r3, [sp, #0]
 801b176:	4a8e      	ldr	r2, [pc, #568]	; (801b3b0 <_strtod_l+0x290>)
 801b178:	ab17      	add	r3, sp, #92	; 0x5c
 801b17a:	a915      	add	r1, sp, #84	; 0x54
 801b17c:	4620      	mov	r0, r4
 801b17e:	f002 ff0d 	bl	801df9c <__gethex>
 801b182:	f010 070f 	ands.w	r7, r0, #15
 801b186:	4605      	mov	r5, r0
 801b188:	d005      	beq.n	801b196 <_strtod_l+0x76>
 801b18a:	2f06      	cmp	r7, #6
 801b18c:	d12a      	bne.n	801b1e4 <_strtod_l+0xc4>
 801b18e:	3601      	adds	r6, #1
 801b190:	2300      	movs	r3, #0
 801b192:	9615      	str	r6, [sp, #84]	; 0x54
 801b194:	930a      	str	r3, [sp, #40]	; 0x28
 801b196:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b198:	2b00      	cmp	r3, #0
 801b19a:	f040 857f 	bne.w	801bc9c <_strtod_l+0xb7c>
 801b19e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b1a0:	b1db      	cbz	r3, 801b1da <_strtod_l+0xba>
 801b1a2:	4642      	mov	r2, r8
 801b1a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b1a8:	ec43 2b10 	vmov	d0, r2, r3
 801b1ac:	b01b      	add	sp, #108	; 0x6c
 801b1ae:	ecbd 8b02 	vpop	{d8}
 801b1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1b6:	2920      	cmp	r1, #32
 801b1b8:	d1cc      	bne.n	801b154 <_strtod_l+0x34>
 801b1ba:	3201      	adds	r2, #1
 801b1bc:	e7bf      	b.n	801b13e <_strtod_l+0x1e>
 801b1be:	292d      	cmp	r1, #45	; 0x2d
 801b1c0:	d1c8      	bne.n	801b154 <_strtod_l+0x34>
 801b1c2:	2101      	movs	r1, #1
 801b1c4:	910a      	str	r1, [sp, #40]	; 0x28
 801b1c6:	1c51      	adds	r1, r2, #1
 801b1c8:	9115      	str	r1, [sp, #84]	; 0x54
 801b1ca:	7852      	ldrb	r2, [r2, #1]
 801b1cc:	2a00      	cmp	r2, #0
 801b1ce:	d1c3      	bne.n	801b158 <_strtod_l+0x38>
 801b1d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b1d2:	9515      	str	r5, [sp, #84]	; 0x54
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	f040 855f 	bne.w	801bc98 <_strtod_l+0xb78>
 801b1da:	4642      	mov	r2, r8
 801b1dc:	464b      	mov	r3, r9
 801b1de:	e7e3      	b.n	801b1a8 <_strtod_l+0x88>
 801b1e0:	2100      	movs	r1, #0
 801b1e2:	e7ef      	b.n	801b1c4 <_strtod_l+0xa4>
 801b1e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b1e6:	b13a      	cbz	r2, 801b1f8 <_strtod_l+0xd8>
 801b1e8:	2135      	movs	r1, #53	; 0x35
 801b1ea:	a818      	add	r0, sp, #96	; 0x60
 801b1ec:	f003 fe41 	bl	801ee72 <__copybits>
 801b1f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b1f2:	4620      	mov	r0, r4
 801b1f4:	f003 fa14 	bl	801e620 <_Bfree>
 801b1f8:	3f01      	subs	r7, #1
 801b1fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b1fc:	2f04      	cmp	r7, #4
 801b1fe:	d806      	bhi.n	801b20e <_strtod_l+0xee>
 801b200:	e8df f007 	tbb	[pc, r7]
 801b204:	201d0314 	.word	0x201d0314
 801b208:	14          	.byte	0x14
 801b209:	00          	.byte	0x00
 801b20a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801b20e:	05e9      	lsls	r1, r5, #23
 801b210:	bf48      	it	mi
 801b212:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801b216:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b21a:	0d1b      	lsrs	r3, r3, #20
 801b21c:	051b      	lsls	r3, r3, #20
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d1b9      	bne.n	801b196 <_strtod_l+0x76>
 801b222:	f001 ff1d 	bl	801d060 <__errno>
 801b226:	2322      	movs	r3, #34	; 0x22
 801b228:	6003      	str	r3, [r0, #0]
 801b22a:	e7b4      	b.n	801b196 <_strtod_l+0x76>
 801b22c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801b230:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b234:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801b238:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801b23c:	e7e7      	b.n	801b20e <_strtod_l+0xee>
 801b23e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801b3b8 <_strtod_l+0x298>
 801b242:	e7e4      	b.n	801b20e <_strtod_l+0xee>
 801b244:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801b248:	f04f 38ff 	mov.w	r8, #4294967295
 801b24c:	e7df      	b.n	801b20e <_strtod_l+0xee>
 801b24e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b250:	1c5a      	adds	r2, r3, #1
 801b252:	9215      	str	r2, [sp, #84]	; 0x54
 801b254:	785b      	ldrb	r3, [r3, #1]
 801b256:	2b30      	cmp	r3, #48	; 0x30
 801b258:	d0f9      	beq.n	801b24e <_strtod_l+0x12e>
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d09b      	beq.n	801b196 <_strtod_l+0x76>
 801b25e:	2301      	movs	r3, #1
 801b260:	f04f 0a00 	mov.w	sl, #0
 801b264:	9304      	str	r3, [sp, #16]
 801b266:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b268:	930b      	str	r3, [sp, #44]	; 0x2c
 801b26a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801b26e:	46d3      	mov	fp, sl
 801b270:	220a      	movs	r2, #10
 801b272:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b274:	7806      	ldrb	r6, [r0, #0]
 801b276:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801b27a:	b2d9      	uxtb	r1, r3
 801b27c:	2909      	cmp	r1, #9
 801b27e:	d926      	bls.n	801b2ce <_strtod_l+0x1ae>
 801b280:	494c      	ldr	r1, [pc, #304]	; (801b3b4 <_strtod_l+0x294>)
 801b282:	2201      	movs	r2, #1
 801b284:	f001 fe0d 	bl	801cea2 <strncmp>
 801b288:	2800      	cmp	r0, #0
 801b28a:	d030      	beq.n	801b2ee <_strtod_l+0x1ce>
 801b28c:	2000      	movs	r0, #0
 801b28e:	4632      	mov	r2, r6
 801b290:	9005      	str	r0, [sp, #20]
 801b292:	465e      	mov	r6, fp
 801b294:	4603      	mov	r3, r0
 801b296:	2a65      	cmp	r2, #101	; 0x65
 801b298:	d001      	beq.n	801b29e <_strtod_l+0x17e>
 801b29a:	2a45      	cmp	r2, #69	; 0x45
 801b29c:	d113      	bne.n	801b2c6 <_strtod_l+0x1a6>
 801b29e:	b91e      	cbnz	r6, 801b2a8 <_strtod_l+0x188>
 801b2a0:	9a04      	ldr	r2, [sp, #16]
 801b2a2:	4302      	orrs	r2, r0
 801b2a4:	d094      	beq.n	801b1d0 <_strtod_l+0xb0>
 801b2a6:	2600      	movs	r6, #0
 801b2a8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801b2aa:	1c6a      	adds	r2, r5, #1
 801b2ac:	9215      	str	r2, [sp, #84]	; 0x54
 801b2ae:	786a      	ldrb	r2, [r5, #1]
 801b2b0:	2a2b      	cmp	r2, #43	; 0x2b
 801b2b2:	d074      	beq.n	801b39e <_strtod_l+0x27e>
 801b2b4:	2a2d      	cmp	r2, #45	; 0x2d
 801b2b6:	d078      	beq.n	801b3aa <_strtod_l+0x28a>
 801b2b8:	f04f 0c00 	mov.w	ip, #0
 801b2bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801b2c0:	2909      	cmp	r1, #9
 801b2c2:	d97f      	bls.n	801b3c4 <_strtod_l+0x2a4>
 801b2c4:	9515      	str	r5, [sp, #84]	; 0x54
 801b2c6:	2700      	movs	r7, #0
 801b2c8:	e09e      	b.n	801b408 <_strtod_l+0x2e8>
 801b2ca:	2300      	movs	r3, #0
 801b2cc:	e7c8      	b.n	801b260 <_strtod_l+0x140>
 801b2ce:	f1bb 0f08 	cmp.w	fp, #8
 801b2d2:	bfd8      	it	le
 801b2d4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801b2d6:	f100 0001 	add.w	r0, r0, #1
 801b2da:	bfda      	itte	le
 801b2dc:	fb02 3301 	mlale	r3, r2, r1, r3
 801b2e0:	9309      	strle	r3, [sp, #36]	; 0x24
 801b2e2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801b2e6:	f10b 0b01 	add.w	fp, fp, #1
 801b2ea:	9015      	str	r0, [sp, #84]	; 0x54
 801b2ec:	e7c1      	b.n	801b272 <_strtod_l+0x152>
 801b2ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b2f0:	1c5a      	adds	r2, r3, #1
 801b2f2:	9215      	str	r2, [sp, #84]	; 0x54
 801b2f4:	785a      	ldrb	r2, [r3, #1]
 801b2f6:	f1bb 0f00 	cmp.w	fp, #0
 801b2fa:	d037      	beq.n	801b36c <_strtod_l+0x24c>
 801b2fc:	9005      	str	r0, [sp, #20]
 801b2fe:	465e      	mov	r6, fp
 801b300:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801b304:	2b09      	cmp	r3, #9
 801b306:	d912      	bls.n	801b32e <_strtod_l+0x20e>
 801b308:	2301      	movs	r3, #1
 801b30a:	e7c4      	b.n	801b296 <_strtod_l+0x176>
 801b30c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b30e:	1c5a      	adds	r2, r3, #1
 801b310:	9215      	str	r2, [sp, #84]	; 0x54
 801b312:	785a      	ldrb	r2, [r3, #1]
 801b314:	3001      	adds	r0, #1
 801b316:	2a30      	cmp	r2, #48	; 0x30
 801b318:	d0f8      	beq.n	801b30c <_strtod_l+0x1ec>
 801b31a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801b31e:	2b08      	cmp	r3, #8
 801b320:	f200 84c1 	bhi.w	801bca6 <_strtod_l+0xb86>
 801b324:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b326:	9005      	str	r0, [sp, #20]
 801b328:	2000      	movs	r0, #0
 801b32a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b32c:	4606      	mov	r6, r0
 801b32e:	3a30      	subs	r2, #48	; 0x30
 801b330:	f100 0301 	add.w	r3, r0, #1
 801b334:	d014      	beq.n	801b360 <_strtod_l+0x240>
 801b336:	9905      	ldr	r1, [sp, #20]
 801b338:	4419      	add	r1, r3
 801b33a:	9105      	str	r1, [sp, #20]
 801b33c:	4633      	mov	r3, r6
 801b33e:	eb00 0c06 	add.w	ip, r0, r6
 801b342:	210a      	movs	r1, #10
 801b344:	4563      	cmp	r3, ip
 801b346:	d113      	bne.n	801b370 <_strtod_l+0x250>
 801b348:	1833      	adds	r3, r6, r0
 801b34a:	2b08      	cmp	r3, #8
 801b34c:	f106 0601 	add.w	r6, r6, #1
 801b350:	4406      	add	r6, r0
 801b352:	dc1a      	bgt.n	801b38a <_strtod_l+0x26a>
 801b354:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b356:	230a      	movs	r3, #10
 801b358:	fb03 2301 	mla	r3, r3, r1, r2
 801b35c:	9309      	str	r3, [sp, #36]	; 0x24
 801b35e:	2300      	movs	r3, #0
 801b360:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b362:	1c51      	adds	r1, r2, #1
 801b364:	9115      	str	r1, [sp, #84]	; 0x54
 801b366:	7852      	ldrb	r2, [r2, #1]
 801b368:	4618      	mov	r0, r3
 801b36a:	e7c9      	b.n	801b300 <_strtod_l+0x1e0>
 801b36c:	4658      	mov	r0, fp
 801b36e:	e7d2      	b.n	801b316 <_strtod_l+0x1f6>
 801b370:	2b08      	cmp	r3, #8
 801b372:	f103 0301 	add.w	r3, r3, #1
 801b376:	dc03      	bgt.n	801b380 <_strtod_l+0x260>
 801b378:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b37a:	434f      	muls	r7, r1
 801b37c:	9709      	str	r7, [sp, #36]	; 0x24
 801b37e:	e7e1      	b.n	801b344 <_strtod_l+0x224>
 801b380:	2b10      	cmp	r3, #16
 801b382:	bfd8      	it	le
 801b384:	fb01 fa0a 	mulle.w	sl, r1, sl
 801b388:	e7dc      	b.n	801b344 <_strtod_l+0x224>
 801b38a:	2e10      	cmp	r6, #16
 801b38c:	bfdc      	itt	le
 801b38e:	230a      	movle	r3, #10
 801b390:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801b394:	e7e3      	b.n	801b35e <_strtod_l+0x23e>
 801b396:	2300      	movs	r3, #0
 801b398:	9305      	str	r3, [sp, #20]
 801b39a:	2301      	movs	r3, #1
 801b39c:	e780      	b.n	801b2a0 <_strtod_l+0x180>
 801b39e:	f04f 0c00 	mov.w	ip, #0
 801b3a2:	1caa      	adds	r2, r5, #2
 801b3a4:	9215      	str	r2, [sp, #84]	; 0x54
 801b3a6:	78aa      	ldrb	r2, [r5, #2]
 801b3a8:	e788      	b.n	801b2bc <_strtod_l+0x19c>
 801b3aa:	f04f 0c01 	mov.w	ip, #1
 801b3ae:	e7f8      	b.n	801b3a2 <_strtod_l+0x282>
 801b3b0:	080238c8 	.word	0x080238c8
 801b3b4:	080238c4 	.word	0x080238c4
 801b3b8:	7ff00000 	.word	0x7ff00000
 801b3bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b3be:	1c51      	adds	r1, r2, #1
 801b3c0:	9115      	str	r1, [sp, #84]	; 0x54
 801b3c2:	7852      	ldrb	r2, [r2, #1]
 801b3c4:	2a30      	cmp	r2, #48	; 0x30
 801b3c6:	d0f9      	beq.n	801b3bc <_strtod_l+0x29c>
 801b3c8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801b3cc:	2908      	cmp	r1, #8
 801b3ce:	f63f af7a 	bhi.w	801b2c6 <_strtod_l+0x1a6>
 801b3d2:	3a30      	subs	r2, #48	; 0x30
 801b3d4:	9208      	str	r2, [sp, #32]
 801b3d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b3d8:	920c      	str	r2, [sp, #48]	; 0x30
 801b3da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b3dc:	1c57      	adds	r7, r2, #1
 801b3de:	9715      	str	r7, [sp, #84]	; 0x54
 801b3e0:	7852      	ldrb	r2, [r2, #1]
 801b3e2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801b3e6:	f1be 0f09 	cmp.w	lr, #9
 801b3ea:	d938      	bls.n	801b45e <_strtod_l+0x33e>
 801b3ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b3ee:	1a7f      	subs	r7, r7, r1
 801b3f0:	2f08      	cmp	r7, #8
 801b3f2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801b3f6:	dc03      	bgt.n	801b400 <_strtod_l+0x2e0>
 801b3f8:	9908      	ldr	r1, [sp, #32]
 801b3fa:	428f      	cmp	r7, r1
 801b3fc:	bfa8      	it	ge
 801b3fe:	460f      	movge	r7, r1
 801b400:	f1bc 0f00 	cmp.w	ip, #0
 801b404:	d000      	beq.n	801b408 <_strtod_l+0x2e8>
 801b406:	427f      	negs	r7, r7
 801b408:	2e00      	cmp	r6, #0
 801b40a:	d14f      	bne.n	801b4ac <_strtod_l+0x38c>
 801b40c:	9904      	ldr	r1, [sp, #16]
 801b40e:	4301      	orrs	r1, r0
 801b410:	f47f aec1 	bne.w	801b196 <_strtod_l+0x76>
 801b414:	2b00      	cmp	r3, #0
 801b416:	f47f aedb 	bne.w	801b1d0 <_strtod_l+0xb0>
 801b41a:	2a69      	cmp	r2, #105	; 0x69
 801b41c:	d029      	beq.n	801b472 <_strtod_l+0x352>
 801b41e:	dc26      	bgt.n	801b46e <_strtod_l+0x34e>
 801b420:	2a49      	cmp	r2, #73	; 0x49
 801b422:	d026      	beq.n	801b472 <_strtod_l+0x352>
 801b424:	2a4e      	cmp	r2, #78	; 0x4e
 801b426:	f47f aed3 	bne.w	801b1d0 <_strtod_l+0xb0>
 801b42a:	499b      	ldr	r1, [pc, #620]	; (801b698 <_strtod_l+0x578>)
 801b42c:	a815      	add	r0, sp, #84	; 0x54
 801b42e:	f002 fff5 	bl	801e41c <__match>
 801b432:	2800      	cmp	r0, #0
 801b434:	f43f aecc 	beq.w	801b1d0 <_strtod_l+0xb0>
 801b438:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b43a:	781b      	ldrb	r3, [r3, #0]
 801b43c:	2b28      	cmp	r3, #40	; 0x28
 801b43e:	d12f      	bne.n	801b4a0 <_strtod_l+0x380>
 801b440:	4996      	ldr	r1, [pc, #600]	; (801b69c <_strtod_l+0x57c>)
 801b442:	aa18      	add	r2, sp, #96	; 0x60
 801b444:	a815      	add	r0, sp, #84	; 0x54
 801b446:	f002 fffd 	bl	801e444 <__hexnan>
 801b44a:	2805      	cmp	r0, #5
 801b44c:	d128      	bne.n	801b4a0 <_strtod_l+0x380>
 801b44e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b450:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801b454:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801b458:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801b45c:	e69b      	b.n	801b196 <_strtod_l+0x76>
 801b45e:	9f08      	ldr	r7, [sp, #32]
 801b460:	210a      	movs	r1, #10
 801b462:	fb01 2107 	mla	r1, r1, r7, r2
 801b466:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801b46a:	9208      	str	r2, [sp, #32]
 801b46c:	e7b5      	b.n	801b3da <_strtod_l+0x2ba>
 801b46e:	2a6e      	cmp	r2, #110	; 0x6e
 801b470:	e7d9      	b.n	801b426 <_strtod_l+0x306>
 801b472:	498b      	ldr	r1, [pc, #556]	; (801b6a0 <_strtod_l+0x580>)
 801b474:	a815      	add	r0, sp, #84	; 0x54
 801b476:	f002 ffd1 	bl	801e41c <__match>
 801b47a:	2800      	cmp	r0, #0
 801b47c:	f43f aea8 	beq.w	801b1d0 <_strtod_l+0xb0>
 801b480:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b482:	4988      	ldr	r1, [pc, #544]	; (801b6a4 <_strtod_l+0x584>)
 801b484:	3b01      	subs	r3, #1
 801b486:	a815      	add	r0, sp, #84	; 0x54
 801b488:	9315      	str	r3, [sp, #84]	; 0x54
 801b48a:	f002 ffc7 	bl	801e41c <__match>
 801b48e:	b910      	cbnz	r0, 801b496 <_strtod_l+0x376>
 801b490:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b492:	3301      	adds	r3, #1
 801b494:	9315      	str	r3, [sp, #84]	; 0x54
 801b496:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801b6b4 <_strtod_l+0x594>
 801b49a:	f04f 0800 	mov.w	r8, #0
 801b49e:	e67a      	b.n	801b196 <_strtod_l+0x76>
 801b4a0:	4881      	ldr	r0, [pc, #516]	; (801b6a8 <_strtod_l+0x588>)
 801b4a2:	f001 fe21 	bl	801d0e8 <nan>
 801b4a6:	ec59 8b10 	vmov	r8, r9, d0
 801b4aa:	e674      	b.n	801b196 <_strtod_l+0x76>
 801b4ac:	9b05      	ldr	r3, [sp, #20]
 801b4ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b4b0:	1afb      	subs	r3, r7, r3
 801b4b2:	f1bb 0f00 	cmp.w	fp, #0
 801b4b6:	bf08      	it	eq
 801b4b8:	46b3      	moveq	fp, r6
 801b4ba:	2e10      	cmp	r6, #16
 801b4bc:	9308      	str	r3, [sp, #32]
 801b4be:	4635      	mov	r5, r6
 801b4c0:	bfa8      	it	ge
 801b4c2:	2510      	movge	r5, #16
 801b4c4:	f7e4 fff6 	bl	80004b4 <__aeabi_ui2d>
 801b4c8:	2e09      	cmp	r6, #9
 801b4ca:	4680      	mov	r8, r0
 801b4cc:	4689      	mov	r9, r1
 801b4ce:	dd13      	ble.n	801b4f8 <_strtod_l+0x3d8>
 801b4d0:	4b76      	ldr	r3, [pc, #472]	; (801b6ac <_strtod_l+0x58c>)
 801b4d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b4d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801b4da:	f7e5 f865 	bl	80005a8 <__aeabi_dmul>
 801b4de:	4680      	mov	r8, r0
 801b4e0:	4650      	mov	r0, sl
 801b4e2:	4689      	mov	r9, r1
 801b4e4:	f7e4 ffe6 	bl	80004b4 <__aeabi_ui2d>
 801b4e8:	4602      	mov	r2, r0
 801b4ea:	460b      	mov	r3, r1
 801b4ec:	4640      	mov	r0, r8
 801b4ee:	4649      	mov	r1, r9
 801b4f0:	f7e4 fea4 	bl	800023c <__adddf3>
 801b4f4:	4680      	mov	r8, r0
 801b4f6:	4689      	mov	r9, r1
 801b4f8:	2e0f      	cmp	r6, #15
 801b4fa:	dc38      	bgt.n	801b56e <_strtod_l+0x44e>
 801b4fc:	9b08      	ldr	r3, [sp, #32]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	f43f ae49 	beq.w	801b196 <_strtod_l+0x76>
 801b504:	dd24      	ble.n	801b550 <_strtod_l+0x430>
 801b506:	2b16      	cmp	r3, #22
 801b508:	dc0b      	bgt.n	801b522 <_strtod_l+0x402>
 801b50a:	4968      	ldr	r1, [pc, #416]	; (801b6ac <_strtod_l+0x58c>)
 801b50c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b510:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b514:	4642      	mov	r2, r8
 801b516:	464b      	mov	r3, r9
 801b518:	f7e5 f846 	bl	80005a8 <__aeabi_dmul>
 801b51c:	4680      	mov	r8, r0
 801b51e:	4689      	mov	r9, r1
 801b520:	e639      	b.n	801b196 <_strtod_l+0x76>
 801b522:	9a08      	ldr	r2, [sp, #32]
 801b524:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801b528:	4293      	cmp	r3, r2
 801b52a:	db20      	blt.n	801b56e <_strtod_l+0x44e>
 801b52c:	4c5f      	ldr	r4, [pc, #380]	; (801b6ac <_strtod_l+0x58c>)
 801b52e:	f1c6 060f 	rsb	r6, r6, #15
 801b532:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801b536:	4642      	mov	r2, r8
 801b538:	464b      	mov	r3, r9
 801b53a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b53e:	f7e5 f833 	bl	80005a8 <__aeabi_dmul>
 801b542:	9b08      	ldr	r3, [sp, #32]
 801b544:	1b9e      	subs	r6, r3, r6
 801b546:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801b54a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b54e:	e7e3      	b.n	801b518 <_strtod_l+0x3f8>
 801b550:	9b08      	ldr	r3, [sp, #32]
 801b552:	3316      	adds	r3, #22
 801b554:	db0b      	blt.n	801b56e <_strtod_l+0x44e>
 801b556:	9b05      	ldr	r3, [sp, #20]
 801b558:	1bdf      	subs	r7, r3, r7
 801b55a:	4b54      	ldr	r3, [pc, #336]	; (801b6ac <_strtod_l+0x58c>)
 801b55c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801b560:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b564:	4640      	mov	r0, r8
 801b566:	4649      	mov	r1, r9
 801b568:	f7e5 f948 	bl	80007fc <__aeabi_ddiv>
 801b56c:	e7d6      	b.n	801b51c <_strtod_l+0x3fc>
 801b56e:	9b08      	ldr	r3, [sp, #32]
 801b570:	1b75      	subs	r5, r6, r5
 801b572:	441d      	add	r5, r3
 801b574:	2d00      	cmp	r5, #0
 801b576:	dd70      	ble.n	801b65a <_strtod_l+0x53a>
 801b578:	f015 030f 	ands.w	r3, r5, #15
 801b57c:	d00a      	beq.n	801b594 <_strtod_l+0x474>
 801b57e:	494b      	ldr	r1, [pc, #300]	; (801b6ac <_strtod_l+0x58c>)
 801b580:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b584:	4642      	mov	r2, r8
 801b586:	464b      	mov	r3, r9
 801b588:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b58c:	f7e5 f80c 	bl	80005a8 <__aeabi_dmul>
 801b590:	4680      	mov	r8, r0
 801b592:	4689      	mov	r9, r1
 801b594:	f035 050f 	bics.w	r5, r5, #15
 801b598:	d04d      	beq.n	801b636 <_strtod_l+0x516>
 801b59a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801b59e:	dd22      	ble.n	801b5e6 <_strtod_l+0x4c6>
 801b5a0:	2500      	movs	r5, #0
 801b5a2:	46ab      	mov	fp, r5
 801b5a4:	9509      	str	r5, [sp, #36]	; 0x24
 801b5a6:	9505      	str	r5, [sp, #20]
 801b5a8:	2322      	movs	r3, #34	; 0x22
 801b5aa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801b6b4 <_strtod_l+0x594>
 801b5ae:	6023      	str	r3, [r4, #0]
 801b5b0:	f04f 0800 	mov.w	r8, #0
 801b5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	f43f aded 	beq.w	801b196 <_strtod_l+0x76>
 801b5bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b5be:	4620      	mov	r0, r4
 801b5c0:	f003 f82e 	bl	801e620 <_Bfree>
 801b5c4:	9905      	ldr	r1, [sp, #20]
 801b5c6:	4620      	mov	r0, r4
 801b5c8:	f003 f82a 	bl	801e620 <_Bfree>
 801b5cc:	4659      	mov	r1, fp
 801b5ce:	4620      	mov	r0, r4
 801b5d0:	f003 f826 	bl	801e620 <_Bfree>
 801b5d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b5d6:	4620      	mov	r0, r4
 801b5d8:	f003 f822 	bl	801e620 <_Bfree>
 801b5dc:	4629      	mov	r1, r5
 801b5de:	4620      	mov	r0, r4
 801b5e0:	f003 f81e 	bl	801e620 <_Bfree>
 801b5e4:	e5d7      	b.n	801b196 <_strtod_l+0x76>
 801b5e6:	4b32      	ldr	r3, [pc, #200]	; (801b6b0 <_strtod_l+0x590>)
 801b5e8:	9304      	str	r3, [sp, #16]
 801b5ea:	2300      	movs	r3, #0
 801b5ec:	112d      	asrs	r5, r5, #4
 801b5ee:	4640      	mov	r0, r8
 801b5f0:	4649      	mov	r1, r9
 801b5f2:	469a      	mov	sl, r3
 801b5f4:	2d01      	cmp	r5, #1
 801b5f6:	dc21      	bgt.n	801b63c <_strtod_l+0x51c>
 801b5f8:	b10b      	cbz	r3, 801b5fe <_strtod_l+0x4de>
 801b5fa:	4680      	mov	r8, r0
 801b5fc:	4689      	mov	r9, r1
 801b5fe:	492c      	ldr	r1, [pc, #176]	; (801b6b0 <_strtod_l+0x590>)
 801b600:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801b604:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801b608:	4642      	mov	r2, r8
 801b60a:	464b      	mov	r3, r9
 801b60c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b610:	f7e4 ffca 	bl	80005a8 <__aeabi_dmul>
 801b614:	4b27      	ldr	r3, [pc, #156]	; (801b6b4 <_strtod_l+0x594>)
 801b616:	460a      	mov	r2, r1
 801b618:	400b      	ands	r3, r1
 801b61a:	4927      	ldr	r1, [pc, #156]	; (801b6b8 <_strtod_l+0x598>)
 801b61c:	428b      	cmp	r3, r1
 801b61e:	4680      	mov	r8, r0
 801b620:	d8be      	bhi.n	801b5a0 <_strtod_l+0x480>
 801b622:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b626:	428b      	cmp	r3, r1
 801b628:	bf86      	itte	hi
 801b62a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801b6bc <_strtod_l+0x59c>
 801b62e:	f04f 38ff 	movhi.w	r8, #4294967295
 801b632:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801b636:	2300      	movs	r3, #0
 801b638:	9304      	str	r3, [sp, #16]
 801b63a:	e07b      	b.n	801b734 <_strtod_l+0x614>
 801b63c:	07ea      	lsls	r2, r5, #31
 801b63e:	d505      	bpl.n	801b64c <_strtod_l+0x52c>
 801b640:	9b04      	ldr	r3, [sp, #16]
 801b642:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b646:	f7e4 ffaf 	bl	80005a8 <__aeabi_dmul>
 801b64a:	2301      	movs	r3, #1
 801b64c:	9a04      	ldr	r2, [sp, #16]
 801b64e:	3208      	adds	r2, #8
 801b650:	f10a 0a01 	add.w	sl, sl, #1
 801b654:	106d      	asrs	r5, r5, #1
 801b656:	9204      	str	r2, [sp, #16]
 801b658:	e7cc      	b.n	801b5f4 <_strtod_l+0x4d4>
 801b65a:	d0ec      	beq.n	801b636 <_strtod_l+0x516>
 801b65c:	426d      	negs	r5, r5
 801b65e:	f015 020f 	ands.w	r2, r5, #15
 801b662:	d00a      	beq.n	801b67a <_strtod_l+0x55a>
 801b664:	4b11      	ldr	r3, [pc, #68]	; (801b6ac <_strtod_l+0x58c>)
 801b666:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b66a:	4640      	mov	r0, r8
 801b66c:	4649      	mov	r1, r9
 801b66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b672:	f7e5 f8c3 	bl	80007fc <__aeabi_ddiv>
 801b676:	4680      	mov	r8, r0
 801b678:	4689      	mov	r9, r1
 801b67a:	112d      	asrs	r5, r5, #4
 801b67c:	d0db      	beq.n	801b636 <_strtod_l+0x516>
 801b67e:	2d1f      	cmp	r5, #31
 801b680:	dd1e      	ble.n	801b6c0 <_strtod_l+0x5a0>
 801b682:	2500      	movs	r5, #0
 801b684:	46ab      	mov	fp, r5
 801b686:	9509      	str	r5, [sp, #36]	; 0x24
 801b688:	9505      	str	r5, [sp, #20]
 801b68a:	2322      	movs	r3, #34	; 0x22
 801b68c:	f04f 0800 	mov.w	r8, #0
 801b690:	f04f 0900 	mov.w	r9, #0
 801b694:	6023      	str	r3, [r4, #0]
 801b696:	e78d      	b.n	801b5b4 <_strtod_l+0x494>
 801b698:	08023a26 	.word	0x08023a26
 801b69c:	080238dc 	.word	0x080238dc
 801b6a0:	08023a1e 	.word	0x08023a1e
 801b6a4:	08023b0a 	.word	0x08023b0a
 801b6a8:	08023b06 	.word	0x08023b06
 801b6ac:	08023c60 	.word	0x08023c60
 801b6b0:	08023c38 	.word	0x08023c38
 801b6b4:	7ff00000 	.word	0x7ff00000
 801b6b8:	7ca00000 	.word	0x7ca00000
 801b6bc:	7fefffff 	.word	0x7fefffff
 801b6c0:	f015 0310 	ands.w	r3, r5, #16
 801b6c4:	bf18      	it	ne
 801b6c6:	236a      	movne	r3, #106	; 0x6a
 801b6c8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801ba6c <_strtod_l+0x94c>
 801b6cc:	9304      	str	r3, [sp, #16]
 801b6ce:	4640      	mov	r0, r8
 801b6d0:	4649      	mov	r1, r9
 801b6d2:	2300      	movs	r3, #0
 801b6d4:	07ea      	lsls	r2, r5, #31
 801b6d6:	d504      	bpl.n	801b6e2 <_strtod_l+0x5c2>
 801b6d8:	e9da 2300 	ldrd	r2, r3, [sl]
 801b6dc:	f7e4 ff64 	bl	80005a8 <__aeabi_dmul>
 801b6e0:	2301      	movs	r3, #1
 801b6e2:	106d      	asrs	r5, r5, #1
 801b6e4:	f10a 0a08 	add.w	sl, sl, #8
 801b6e8:	d1f4      	bne.n	801b6d4 <_strtod_l+0x5b4>
 801b6ea:	b10b      	cbz	r3, 801b6f0 <_strtod_l+0x5d0>
 801b6ec:	4680      	mov	r8, r0
 801b6ee:	4689      	mov	r9, r1
 801b6f0:	9b04      	ldr	r3, [sp, #16]
 801b6f2:	b1bb      	cbz	r3, 801b724 <_strtod_l+0x604>
 801b6f4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801b6f8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	4649      	mov	r1, r9
 801b700:	dd10      	ble.n	801b724 <_strtod_l+0x604>
 801b702:	2b1f      	cmp	r3, #31
 801b704:	f340 811e 	ble.w	801b944 <_strtod_l+0x824>
 801b708:	2b34      	cmp	r3, #52	; 0x34
 801b70a:	bfde      	ittt	le
 801b70c:	f04f 33ff 	movle.w	r3, #4294967295
 801b710:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801b714:	4093      	lslle	r3, r2
 801b716:	f04f 0800 	mov.w	r8, #0
 801b71a:	bfcc      	ite	gt
 801b71c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801b720:	ea03 0901 	andle.w	r9, r3, r1
 801b724:	2200      	movs	r2, #0
 801b726:	2300      	movs	r3, #0
 801b728:	4640      	mov	r0, r8
 801b72a:	4649      	mov	r1, r9
 801b72c:	f7e5 f9a4 	bl	8000a78 <__aeabi_dcmpeq>
 801b730:	2800      	cmp	r0, #0
 801b732:	d1a6      	bne.n	801b682 <_strtod_l+0x562>
 801b734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b736:	9300      	str	r3, [sp, #0]
 801b738:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b73a:	4633      	mov	r3, r6
 801b73c:	465a      	mov	r2, fp
 801b73e:	4620      	mov	r0, r4
 801b740:	f002 ffd6 	bl	801e6f0 <__s2b>
 801b744:	9009      	str	r0, [sp, #36]	; 0x24
 801b746:	2800      	cmp	r0, #0
 801b748:	f43f af2a 	beq.w	801b5a0 <_strtod_l+0x480>
 801b74c:	9a08      	ldr	r2, [sp, #32]
 801b74e:	9b05      	ldr	r3, [sp, #20]
 801b750:	2a00      	cmp	r2, #0
 801b752:	eba3 0307 	sub.w	r3, r3, r7
 801b756:	bfa8      	it	ge
 801b758:	2300      	movge	r3, #0
 801b75a:	930c      	str	r3, [sp, #48]	; 0x30
 801b75c:	2500      	movs	r5, #0
 801b75e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801b762:	9312      	str	r3, [sp, #72]	; 0x48
 801b764:	46ab      	mov	fp, r5
 801b766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b768:	4620      	mov	r0, r4
 801b76a:	6859      	ldr	r1, [r3, #4]
 801b76c:	f002 ff18 	bl	801e5a0 <_Balloc>
 801b770:	9005      	str	r0, [sp, #20]
 801b772:	2800      	cmp	r0, #0
 801b774:	f43f af18 	beq.w	801b5a8 <_strtod_l+0x488>
 801b778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b77a:	691a      	ldr	r2, [r3, #16]
 801b77c:	3202      	adds	r2, #2
 801b77e:	f103 010c 	add.w	r1, r3, #12
 801b782:	0092      	lsls	r2, r2, #2
 801b784:	300c      	adds	r0, #12
 801b786:	f001 fca0 	bl	801d0ca <memcpy>
 801b78a:	ec49 8b10 	vmov	d0, r8, r9
 801b78e:	aa18      	add	r2, sp, #96	; 0x60
 801b790:	a917      	add	r1, sp, #92	; 0x5c
 801b792:	4620      	mov	r0, r4
 801b794:	f003 fae0 	bl	801ed58 <__d2b>
 801b798:	ec49 8b18 	vmov	d8, r8, r9
 801b79c:	9016      	str	r0, [sp, #88]	; 0x58
 801b79e:	2800      	cmp	r0, #0
 801b7a0:	f43f af02 	beq.w	801b5a8 <_strtod_l+0x488>
 801b7a4:	2101      	movs	r1, #1
 801b7a6:	4620      	mov	r0, r4
 801b7a8:	f003 f83a 	bl	801e820 <__i2b>
 801b7ac:	4683      	mov	fp, r0
 801b7ae:	2800      	cmp	r0, #0
 801b7b0:	f43f aefa 	beq.w	801b5a8 <_strtod_l+0x488>
 801b7b4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801b7b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b7b8:	2e00      	cmp	r6, #0
 801b7ba:	bfab      	itete	ge
 801b7bc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801b7be:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801b7c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801b7c2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801b7c6:	bfac      	ite	ge
 801b7c8:	eb06 0a03 	addge.w	sl, r6, r3
 801b7cc:	1b9f      	sublt	r7, r3, r6
 801b7ce:	9b04      	ldr	r3, [sp, #16]
 801b7d0:	1af6      	subs	r6, r6, r3
 801b7d2:	4416      	add	r6, r2
 801b7d4:	4ba0      	ldr	r3, [pc, #640]	; (801ba58 <_strtod_l+0x938>)
 801b7d6:	3e01      	subs	r6, #1
 801b7d8:	429e      	cmp	r6, r3
 801b7da:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b7de:	f280 80c4 	bge.w	801b96a <_strtod_l+0x84a>
 801b7e2:	1b9b      	subs	r3, r3, r6
 801b7e4:	2b1f      	cmp	r3, #31
 801b7e6:	eba2 0203 	sub.w	r2, r2, r3
 801b7ea:	f04f 0101 	mov.w	r1, #1
 801b7ee:	f300 80b0 	bgt.w	801b952 <_strtod_l+0x832>
 801b7f2:	fa01 f303 	lsl.w	r3, r1, r3
 801b7f6:	930e      	str	r3, [sp, #56]	; 0x38
 801b7f8:	2300      	movs	r3, #0
 801b7fa:	930d      	str	r3, [sp, #52]	; 0x34
 801b7fc:	eb0a 0602 	add.w	r6, sl, r2
 801b800:	9b04      	ldr	r3, [sp, #16]
 801b802:	45b2      	cmp	sl, r6
 801b804:	4417      	add	r7, r2
 801b806:	441f      	add	r7, r3
 801b808:	4653      	mov	r3, sl
 801b80a:	bfa8      	it	ge
 801b80c:	4633      	movge	r3, r6
 801b80e:	42bb      	cmp	r3, r7
 801b810:	bfa8      	it	ge
 801b812:	463b      	movge	r3, r7
 801b814:	2b00      	cmp	r3, #0
 801b816:	bfc2      	ittt	gt
 801b818:	1af6      	subgt	r6, r6, r3
 801b81a:	1aff      	subgt	r7, r7, r3
 801b81c:	ebaa 0a03 	subgt.w	sl, sl, r3
 801b820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b822:	2b00      	cmp	r3, #0
 801b824:	dd17      	ble.n	801b856 <_strtod_l+0x736>
 801b826:	4659      	mov	r1, fp
 801b828:	461a      	mov	r2, r3
 801b82a:	4620      	mov	r0, r4
 801b82c:	f003 f8b8 	bl	801e9a0 <__pow5mult>
 801b830:	4683      	mov	fp, r0
 801b832:	2800      	cmp	r0, #0
 801b834:	f43f aeb8 	beq.w	801b5a8 <_strtod_l+0x488>
 801b838:	4601      	mov	r1, r0
 801b83a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b83c:	4620      	mov	r0, r4
 801b83e:	f003 f805 	bl	801e84c <__multiply>
 801b842:	900b      	str	r0, [sp, #44]	; 0x2c
 801b844:	2800      	cmp	r0, #0
 801b846:	f43f aeaf 	beq.w	801b5a8 <_strtod_l+0x488>
 801b84a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b84c:	4620      	mov	r0, r4
 801b84e:	f002 fee7 	bl	801e620 <_Bfree>
 801b852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b854:	9316      	str	r3, [sp, #88]	; 0x58
 801b856:	2e00      	cmp	r6, #0
 801b858:	f300 808c 	bgt.w	801b974 <_strtod_l+0x854>
 801b85c:	9b08      	ldr	r3, [sp, #32]
 801b85e:	2b00      	cmp	r3, #0
 801b860:	dd08      	ble.n	801b874 <_strtod_l+0x754>
 801b862:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b864:	9905      	ldr	r1, [sp, #20]
 801b866:	4620      	mov	r0, r4
 801b868:	f003 f89a 	bl	801e9a0 <__pow5mult>
 801b86c:	9005      	str	r0, [sp, #20]
 801b86e:	2800      	cmp	r0, #0
 801b870:	f43f ae9a 	beq.w	801b5a8 <_strtod_l+0x488>
 801b874:	2f00      	cmp	r7, #0
 801b876:	dd08      	ble.n	801b88a <_strtod_l+0x76a>
 801b878:	9905      	ldr	r1, [sp, #20]
 801b87a:	463a      	mov	r2, r7
 801b87c:	4620      	mov	r0, r4
 801b87e:	f003 f8e9 	bl	801ea54 <__lshift>
 801b882:	9005      	str	r0, [sp, #20]
 801b884:	2800      	cmp	r0, #0
 801b886:	f43f ae8f 	beq.w	801b5a8 <_strtod_l+0x488>
 801b88a:	f1ba 0f00 	cmp.w	sl, #0
 801b88e:	dd08      	ble.n	801b8a2 <_strtod_l+0x782>
 801b890:	4659      	mov	r1, fp
 801b892:	4652      	mov	r2, sl
 801b894:	4620      	mov	r0, r4
 801b896:	f003 f8dd 	bl	801ea54 <__lshift>
 801b89a:	4683      	mov	fp, r0
 801b89c:	2800      	cmp	r0, #0
 801b89e:	f43f ae83 	beq.w	801b5a8 <_strtod_l+0x488>
 801b8a2:	9a05      	ldr	r2, [sp, #20]
 801b8a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b8a6:	4620      	mov	r0, r4
 801b8a8:	f003 f95c 	bl	801eb64 <__mdiff>
 801b8ac:	4605      	mov	r5, r0
 801b8ae:	2800      	cmp	r0, #0
 801b8b0:	f43f ae7a 	beq.w	801b5a8 <_strtod_l+0x488>
 801b8b4:	68c3      	ldr	r3, [r0, #12]
 801b8b6:	930b      	str	r3, [sp, #44]	; 0x2c
 801b8b8:	2300      	movs	r3, #0
 801b8ba:	60c3      	str	r3, [r0, #12]
 801b8bc:	4659      	mov	r1, fp
 801b8be:	f003 f935 	bl	801eb2c <__mcmp>
 801b8c2:	2800      	cmp	r0, #0
 801b8c4:	da60      	bge.n	801b988 <_strtod_l+0x868>
 801b8c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b8c8:	ea53 0308 	orrs.w	r3, r3, r8
 801b8cc:	f040 8084 	bne.w	801b9d8 <_strtod_l+0x8b8>
 801b8d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d17f      	bne.n	801b9d8 <_strtod_l+0x8b8>
 801b8d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b8dc:	0d1b      	lsrs	r3, r3, #20
 801b8de:	051b      	lsls	r3, r3, #20
 801b8e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b8e4:	d978      	bls.n	801b9d8 <_strtod_l+0x8b8>
 801b8e6:	696b      	ldr	r3, [r5, #20]
 801b8e8:	b913      	cbnz	r3, 801b8f0 <_strtod_l+0x7d0>
 801b8ea:	692b      	ldr	r3, [r5, #16]
 801b8ec:	2b01      	cmp	r3, #1
 801b8ee:	dd73      	ble.n	801b9d8 <_strtod_l+0x8b8>
 801b8f0:	4629      	mov	r1, r5
 801b8f2:	2201      	movs	r2, #1
 801b8f4:	4620      	mov	r0, r4
 801b8f6:	f003 f8ad 	bl	801ea54 <__lshift>
 801b8fa:	4659      	mov	r1, fp
 801b8fc:	4605      	mov	r5, r0
 801b8fe:	f003 f915 	bl	801eb2c <__mcmp>
 801b902:	2800      	cmp	r0, #0
 801b904:	dd68      	ble.n	801b9d8 <_strtod_l+0x8b8>
 801b906:	9904      	ldr	r1, [sp, #16]
 801b908:	4a54      	ldr	r2, [pc, #336]	; (801ba5c <_strtod_l+0x93c>)
 801b90a:	464b      	mov	r3, r9
 801b90c:	2900      	cmp	r1, #0
 801b90e:	f000 8084 	beq.w	801ba1a <_strtod_l+0x8fa>
 801b912:	ea02 0109 	and.w	r1, r2, r9
 801b916:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b91a:	dc7e      	bgt.n	801ba1a <_strtod_l+0x8fa>
 801b91c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b920:	f77f aeb3 	ble.w	801b68a <_strtod_l+0x56a>
 801b924:	4b4e      	ldr	r3, [pc, #312]	; (801ba60 <_strtod_l+0x940>)
 801b926:	4640      	mov	r0, r8
 801b928:	4649      	mov	r1, r9
 801b92a:	2200      	movs	r2, #0
 801b92c:	f7e4 fe3c 	bl	80005a8 <__aeabi_dmul>
 801b930:	4b4a      	ldr	r3, [pc, #296]	; (801ba5c <_strtod_l+0x93c>)
 801b932:	400b      	ands	r3, r1
 801b934:	4680      	mov	r8, r0
 801b936:	4689      	mov	r9, r1
 801b938:	2b00      	cmp	r3, #0
 801b93a:	f47f ae3f 	bne.w	801b5bc <_strtod_l+0x49c>
 801b93e:	2322      	movs	r3, #34	; 0x22
 801b940:	6023      	str	r3, [r4, #0]
 801b942:	e63b      	b.n	801b5bc <_strtod_l+0x49c>
 801b944:	f04f 32ff 	mov.w	r2, #4294967295
 801b948:	fa02 f303 	lsl.w	r3, r2, r3
 801b94c:	ea03 0808 	and.w	r8, r3, r8
 801b950:	e6e8      	b.n	801b724 <_strtod_l+0x604>
 801b952:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801b956:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801b95a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801b95e:	36e2      	adds	r6, #226	; 0xe2
 801b960:	fa01 f306 	lsl.w	r3, r1, r6
 801b964:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801b968:	e748      	b.n	801b7fc <_strtod_l+0x6dc>
 801b96a:	2100      	movs	r1, #0
 801b96c:	2301      	movs	r3, #1
 801b96e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801b972:	e743      	b.n	801b7fc <_strtod_l+0x6dc>
 801b974:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b976:	4632      	mov	r2, r6
 801b978:	4620      	mov	r0, r4
 801b97a:	f003 f86b 	bl	801ea54 <__lshift>
 801b97e:	9016      	str	r0, [sp, #88]	; 0x58
 801b980:	2800      	cmp	r0, #0
 801b982:	f47f af6b 	bne.w	801b85c <_strtod_l+0x73c>
 801b986:	e60f      	b.n	801b5a8 <_strtod_l+0x488>
 801b988:	46ca      	mov	sl, r9
 801b98a:	d171      	bne.n	801ba70 <_strtod_l+0x950>
 801b98c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b98e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b992:	b352      	cbz	r2, 801b9ea <_strtod_l+0x8ca>
 801b994:	4a33      	ldr	r2, [pc, #204]	; (801ba64 <_strtod_l+0x944>)
 801b996:	4293      	cmp	r3, r2
 801b998:	d12a      	bne.n	801b9f0 <_strtod_l+0x8d0>
 801b99a:	9b04      	ldr	r3, [sp, #16]
 801b99c:	4641      	mov	r1, r8
 801b99e:	b1fb      	cbz	r3, 801b9e0 <_strtod_l+0x8c0>
 801b9a0:	4b2e      	ldr	r3, [pc, #184]	; (801ba5c <_strtod_l+0x93c>)
 801b9a2:	ea09 0303 	and.w	r3, r9, r3
 801b9a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b9aa:	f04f 32ff 	mov.w	r2, #4294967295
 801b9ae:	d81a      	bhi.n	801b9e6 <_strtod_l+0x8c6>
 801b9b0:	0d1b      	lsrs	r3, r3, #20
 801b9b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b9b6:	fa02 f303 	lsl.w	r3, r2, r3
 801b9ba:	4299      	cmp	r1, r3
 801b9bc:	d118      	bne.n	801b9f0 <_strtod_l+0x8d0>
 801b9be:	4b2a      	ldr	r3, [pc, #168]	; (801ba68 <_strtod_l+0x948>)
 801b9c0:	459a      	cmp	sl, r3
 801b9c2:	d102      	bne.n	801b9ca <_strtod_l+0x8aa>
 801b9c4:	3101      	adds	r1, #1
 801b9c6:	f43f adef 	beq.w	801b5a8 <_strtod_l+0x488>
 801b9ca:	4b24      	ldr	r3, [pc, #144]	; (801ba5c <_strtod_l+0x93c>)
 801b9cc:	ea0a 0303 	and.w	r3, sl, r3
 801b9d0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801b9d4:	f04f 0800 	mov.w	r8, #0
 801b9d8:	9b04      	ldr	r3, [sp, #16]
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d1a2      	bne.n	801b924 <_strtod_l+0x804>
 801b9de:	e5ed      	b.n	801b5bc <_strtod_l+0x49c>
 801b9e0:	f04f 33ff 	mov.w	r3, #4294967295
 801b9e4:	e7e9      	b.n	801b9ba <_strtod_l+0x89a>
 801b9e6:	4613      	mov	r3, r2
 801b9e8:	e7e7      	b.n	801b9ba <_strtod_l+0x89a>
 801b9ea:	ea53 0308 	orrs.w	r3, r3, r8
 801b9ee:	d08a      	beq.n	801b906 <_strtod_l+0x7e6>
 801b9f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b9f2:	b1e3      	cbz	r3, 801ba2e <_strtod_l+0x90e>
 801b9f4:	ea13 0f0a 	tst.w	r3, sl
 801b9f8:	d0ee      	beq.n	801b9d8 <_strtod_l+0x8b8>
 801b9fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b9fc:	9a04      	ldr	r2, [sp, #16]
 801b9fe:	4640      	mov	r0, r8
 801ba00:	4649      	mov	r1, r9
 801ba02:	b1c3      	cbz	r3, 801ba36 <_strtod_l+0x916>
 801ba04:	f7ff fb6e 	bl	801b0e4 <sulp>
 801ba08:	4602      	mov	r2, r0
 801ba0a:	460b      	mov	r3, r1
 801ba0c:	ec51 0b18 	vmov	r0, r1, d8
 801ba10:	f7e4 fc14 	bl	800023c <__adddf3>
 801ba14:	4680      	mov	r8, r0
 801ba16:	4689      	mov	r9, r1
 801ba18:	e7de      	b.n	801b9d8 <_strtod_l+0x8b8>
 801ba1a:	4013      	ands	r3, r2
 801ba1c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801ba20:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801ba24:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801ba28:	f04f 38ff 	mov.w	r8, #4294967295
 801ba2c:	e7d4      	b.n	801b9d8 <_strtod_l+0x8b8>
 801ba2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba30:	ea13 0f08 	tst.w	r3, r8
 801ba34:	e7e0      	b.n	801b9f8 <_strtod_l+0x8d8>
 801ba36:	f7ff fb55 	bl	801b0e4 <sulp>
 801ba3a:	4602      	mov	r2, r0
 801ba3c:	460b      	mov	r3, r1
 801ba3e:	ec51 0b18 	vmov	r0, r1, d8
 801ba42:	f7e4 fbf9 	bl	8000238 <__aeabi_dsub>
 801ba46:	2200      	movs	r2, #0
 801ba48:	2300      	movs	r3, #0
 801ba4a:	4680      	mov	r8, r0
 801ba4c:	4689      	mov	r9, r1
 801ba4e:	f7e5 f813 	bl	8000a78 <__aeabi_dcmpeq>
 801ba52:	2800      	cmp	r0, #0
 801ba54:	d0c0      	beq.n	801b9d8 <_strtod_l+0x8b8>
 801ba56:	e618      	b.n	801b68a <_strtod_l+0x56a>
 801ba58:	fffffc02 	.word	0xfffffc02
 801ba5c:	7ff00000 	.word	0x7ff00000
 801ba60:	39500000 	.word	0x39500000
 801ba64:	000fffff 	.word	0x000fffff
 801ba68:	7fefffff 	.word	0x7fefffff
 801ba6c:	080238f0 	.word	0x080238f0
 801ba70:	4659      	mov	r1, fp
 801ba72:	4628      	mov	r0, r5
 801ba74:	f003 f9ca 	bl	801ee0c <__ratio>
 801ba78:	ec57 6b10 	vmov	r6, r7, d0
 801ba7c:	ee10 0a10 	vmov	r0, s0
 801ba80:	2200      	movs	r2, #0
 801ba82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ba86:	4639      	mov	r1, r7
 801ba88:	f7e5 f80a 	bl	8000aa0 <__aeabi_dcmple>
 801ba8c:	2800      	cmp	r0, #0
 801ba8e:	d071      	beq.n	801bb74 <_strtod_l+0xa54>
 801ba90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d17c      	bne.n	801bb90 <_strtod_l+0xa70>
 801ba96:	f1b8 0f00 	cmp.w	r8, #0
 801ba9a:	d15a      	bne.n	801bb52 <_strtod_l+0xa32>
 801ba9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d15d      	bne.n	801bb60 <_strtod_l+0xa40>
 801baa4:	4b90      	ldr	r3, [pc, #576]	; (801bce8 <_strtod_l+0xbc8>)
 801baa6:	2200      	movs	r2, #0
 801baa8:	4630      	mov	r0, r6
 801baaa:	4639      	mov	r1, r7
 801baac:	f7e4 ffee 	bl	8000a8c <__aeabi_dcmplt>
 801bab0:	2800      	cmp	r0, #0
 801bab2:	d15c      	bne.n	801bb6e <_strtod_l+0xa4e>
 801bab4:	4630      	mov	r0, r6
 801bab6:	4639      	mov	r1, r7
 801bab8:	4b8c      	ldr	r3, [pc, #560]	; (801bcec <_strtod_l+0xbcc>)
 801baba:	2200      	movs	r2, #0
 801babc:	f7e4 fd74 	bl	80005a8 <__aeabi_dmul>
 801bac0:	4606      	mov	r6, r0
 801bac2:	460f      	mov	r7, r1
 801bac4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801bac8:	9606      	str	r6, [sp, #24]
 801baca:	9307      	str	r3, [sp, #28]
 801bacc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bad0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801bad4:	4b86      	ldr	r3, [pc, #536]	; (801bcf0 <_strtod_l+0xbd0>)
 801bad6:	ea0a 0303 	and.w	r3, sl, r3
 801bada:	930d      	str	r3, [sp, #52]	; 0x34
 801badc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bade:	4b85      	ldr	r3, [pc, #532]	; (801bcf4 <_strtod_l+0xbd4>)
 801bae0:	429a      	cmp	r2, r3
 801bae2:	f040 8090 	bne.w	801bc06 <_strtod_l+0xae6>
 801bae6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801baea:	ec49 8b10 	vmov	d0, r8, r9
 801baee:	f003 f8c3 	bl	801ec78 <__ulp>
 801baf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801baf6:	ec51 0b10 	vmov	r0, r1, d0
 801bafa:	f7e4 fd55 	bl	80005a8 <__aeabi_dmul>
 801bafe:	4642      	mov	r2, r8
 801bb00:	464b      	mov	r3, r9
 801bb02:	f7e4 fb9b 	bl	800023c <__adddf3>
 801bb06:	460b      	mov	r3, r1
 801bb08:	4979      	ldr	r1, [pc, #484]	; (801bcf0 <_strtod_l+0xbd0>)
 801bb0a:	4a7b      	ldr	r2, [pc, #492]	; (801bcf8 <_strtod_l+0xbd8>)
 801bb0c:	4019      	ands	r1, r3
 801bb0e:	4291      	cmp	r1, r2
 801bb10:	4680      	mov	r8, r0
 801bb12:	d944      	bls.n	801bb9e <_strtod_l+0xa7e>
 801bb14:	ee18 2a90 	vmov	r2, s17
 801bb18:	4b78      	ldr	r3, [pc, #480]	; (801bcfc <_strtod_l+0xbdc>)
 801bb1a:	429a      	cmp	r2, r3
 801bb1c:	d104      	bne.n	801bb28 <_strtod_l+0xa08>
 801bb1e:	ee18 3a10 	vmov	r3, s16
 801bb22:	3301      	adds	r3, #1
 801bb24:	f43f ad40 	beq.w	801b5a8 <_strtod_l+0x488>
 801bb28:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801bcfc <_strtod_l+0xbdc>
 801bb2c:	f04f 38ff 	mov.w	r8, #4294967295
 801bb30:	9916      	ldr	r1, [sp, #88]	; 0x58
 801bb32:	4620      	mov	r0, r4
 801bb34:	f002 fd74 	bl	801e620 <_Bfree>
 801bb38:	9905      	ldr	r1, [sp, #20]
 801bb3a:	4620      	mov	r0, r4
 801bb3c:	f002 fd70 	bl	801e620 <_Bfree>
 801bb40:	4659      	mov	r1, fp
 801bb42:	4620      	mov	r0, r4
 801bb44:	f002 fd6c 	bl	801e620 <_Bfree>
 801bb48:	4629      	mov	r1, r5
 801bb4a:	4620      	mov	r0, r4
 801bb4c:	f002 fd68 	bl	801e620 <_Bfree>
 801bb50:	e609      	b.n	801b766 <_strtod_l+0x646>
 801bb52:	f1b8 0f01 	cmp.w	r8, #1
 801bb56:	d103      	bne.n	801bb60 <_strtod_l+0xa40>
 801bb58:	f1b9 0f00 	cmp.w	r9, #0
 801bb5c:	f43f ad95 	beq.w	801b68a <_strtod_l+0x56a>
 801bb60:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801bcb8 <_strtod_l+0xb98>
 801bb64:	4f60      	ldr	r7, [pc, #384]	; (801bce8 <_strtod_l+0xbc8>)
 801bb66:	ed8d 7b06 	vstr	d7, [sp, #24]
 801bb6a:	2600      	movs	r6, #0
 801bb6c:	e7ae      	b.n	801bacc <_strtod_l+0x9ac>
 801bb6e:	4f5f      	ldr	r7, [pc, #380]	; (801bcec <_strtod_l+0xbcc>)
 801bb70:	2600      	movs	r6, #0
 801bb72:	e7a7      	b.n	801bac4 <_strtod_l+0x9a4>
 801bb74:	4b5d      	ldr	r3, [pc, #372]	; (801bcec <_strtod_l+0xbcc>)
 801bb76:	4630      	mov	r0, r6
 801bb78:	4639      	mov	r1, r7
 801bb7a:	2200      	movs	r2, #0
 801bb7c:	f7e4 fd14 	bl	80005a8 <__aeabi_dmul>
 801bb80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb82:	4606      	mov	r6, r0
 801bb84:	460f      	mov	r7, r1
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d09c      	beq.n	801bac4 <_strtod_l+0x9a4>
 801bb8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801bb8e:	e79d      	b.n	801bacc <_strtod_l+0x9ac>
 801bb90:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801bcc0 <_strtod_l+0xba0>
 801bb94:	ed8d 7b06 	vstr	d7, [sp, #24]
 801bb98:	ec57 6b17 	vmov	r6, r7, d7
 801bb9c:	e796      	b.n	801bacc <_strtod_l+0x9ac>
 801bb9e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801bba2:	9b04      	ldr	r3, [sp, #16]
 801bba4:	46ca      	mov	sl, r9
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d1c2      	bne.n	801bb30 <_strtod_l+0xa10>
 801bbaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801bbae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bbb0:	0d1b      	lsrs	r3, r3, #20
 801bbb2:	051b      	lsls	r3, r3, #20
 801bbb4:	429a      	cmp	r2, r3
 801bbb6:	d1bb      	bne.n	801bb30 <_strtod_l+0xa10>
 801bbb8:	4630      	mov	r0, r6
 801bbba:	4639      	mov	r1, r7
 801bbbc:	f7e5 f854 	bl	8000c68 <__aeabi_d2lz>
 801bbc0:	f7e4 fcc4 	bl	800054c <__aeabi_l2d>
 801bbc4:	4602      	mov	r2, r0
 801bbc6:	460b      	mov	r3, r1
 801bbc8:	4630      	mov	r0, r6
 801bbca:	4639      	mov	r1, r7
 801bbcc:	f7e4 fb34 	bl	8000238 <__aeabi_dsub>
 801bbd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bbd2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bbd6:	ea43 0308 	orr.w	r3, r3, r8
 801bbda:	4313      	orrs	r3, r2
 801bbdc:	4606      	mov	r6, r0
 801bbde:	460f      	mov	r7, r1
 801bbe0:	d054      	beq.n	801bc8c <_strtod_l+0xb6c>
 801bbe2:	a339      	add	r3, pc, #228	; (adr r3, 801bcc8 <_strtod_l+0xba8>)
 801bbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbe8:	f7e4 ff50 	bl	8000a8c <__aeabi_dcmplt>
 801bbec:	2800      	cmp	r0, #0
 801bbee:	f47f ace5 	bne.w	801b5bc <_strtod_l+0x49c>
 801bbf2:	a337      	add	r3, pc, #220	; (adr r3, 801bcd0 <_strtod_l+0xbb0>)
 801bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbf8:	4630      	mov	r0, r6
 801bbfa:	4639      	mov	r1, r7
 801bbfc:	f7e4 ff64 	bl	8000ac8 <__aeabi_dcmpgt>
 801bc00:	2800      	cmp	r0, #0
 801bc02:	d095      	beq.n	801bb30 <_strtod_l+0xa10>
 801bc04:	e4da      	b.n	801b5bc <_strtod_l+0x49c>
 801bc06:	9b04      	ldr	r3, [sp, #16]
 801bc08:	b333      	cbz	r3, 801bc58 <_strtod_l+0xb38>
 801bc0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801bc10:	d822      	bhi.n	801bc58 <_strtod_l+0xb38>
 801bc12:	a331      	add	r3, pc, #196	; (adr r3, 801bcd8 <_strtod_l+0xbb8>)
 801bc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc18:	4630      	mov	r0, r6
 801bc1a:	4639      	mov	r1, r7
 801bc1c:	f7e4 ff40 	bl	8000aa0 <__aeabi_dcmple>
 801bc20:	b1a0      	cbz	r0, 801bc4c <_strtod_l+0xb2c>
 801bc22:	4639      	mov	r1, r7
 801bc24:	4630      	mov	r0, r6
 801bc26:	f7e4 ff97 	bl	8000b58 <__aeabi_d2uiz>
 801bc2a:	2801      	cmp	r0, #1
 801bc2c:	bf38      	it	cc
 801bc2e:	2001      	movcc	r0, #1
 801bc30:	f7e4 fc40 	bl	80004b4 <__aeabi_ui2d>
 801bc34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc36:	4606      	mov	r6, r0
 801bc38:	460f      	mov	r7, r1
 801bc3a:	bb23      	cbnz	r3, 801bc86 <_strtod_l+0xb66>
 801bc3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bc40:	9010      	str	r0, [sp, #64]	; 0x40
 801bc42:	9311      	str	r3, [sp, #68]	; 0x44
 801bc44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801bc48:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801bc4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bc4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bc50:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801bc54:	1a9b      	subs	r3, r3, r2
 801bc56:	930f      	str	r3, [sp, #60]	; 0x3c
 801bc58:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801bc5c:	eeb0 0a48 	vmov.f32	s0, s16
 801bc60:	eef0 0a68 	vmov.f32	s1, s17
 801bc64:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801bc68:	f003 f806 	bl	801ec78 <__ulp>
 801bc6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801bc70:	ec53 2b10 	vmov	r2, r3, d0
 801bc74:	f7e4 fc98 	bl	80005a8 <__aeabi_dmul>
 801bc78:	ec53 2b18 	vmov	r2, r3, d8
 801bc7c:	f7e4 fade 	bl	800023c <__adddf3>
 801bc80:	4680      	mov	r8, r0
 801bc82:	4689      	mov	r9, r1
 801bc84:	e78d      	b.n	801bba2 <_strtod_l+0xa82>
 801bc86:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801bc8a:	e7db      	b.n	801bc44 <_strtod_l+0xb24>
 801bc8c:	a314      	add	r3, pc, #80	; (adr r3, 801bce0 <_strtod_l+0xbc0>)
 801bc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc92:	f7e4 fefb 	bl	8000a8c <__aeabi_dcmplt>
 801bc96:	e7b3      	b.n	801bc00 <_strtod_l+0xae0>
 801bc98:	2300      	movs	r3, #0
 801bc9a:	930a      	str	r3, [sp, #40]	; 0x28
 801bc9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bc9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bca0:	6013      	str	r3, [r2, #0]
 801bca2:	f7ff ba7c 	b.w	801b19e <_strtod_l+0x7e>
 801bca6:	2a65      	cmp	r2, #101	; 0x65
 801bca8:	f43f ab75 	beq.w	801b396 <_strtod_l+0x276>
 801bcac:	2a45      	cmp	r2, #69	; 0x45
 801bcae:	f43f ab72 	beq.w	801b396 <_strtod_l+0x276>
 801bcb2:	2301      	movs	r3, #1
 801bcb4:	f7ff bbaa 	b.w	801b40c <_strtod_l+0x2ec>
 801bcb8:	00000000 	.word	0x00000000
 801bcbc:	bff00000 	.word	0xbff00000
 801bcc0:	00000000 	.word	0x00000000
 801bcc4:	3ff00000 	.word	0x3ff00000
 801bcc8:	94a03595 	.word	0x94a03595
 801bccc:	3fdfffff 	.word	0x3fdfffff
 801bcd0:	35afe535 	.word	0x35afe535
 801bcd4:	3fe00000 	.word	0x3fe00000
 801bcd8:	ffc00000 	.word	0xffc00000
 801bcdc:	41dfffff 	.word	0x41dfffff
 801bce0:	94a03595 	.word	0x94a03595
 801bce4:	3fcfffff 	.word	0x3fcfffff
 801bce8:	3ff00000 	.word	0x3ff00000
 801bcec:	3fe00000 	.word	0x3fe00000
 801bcf0:	7ff00000 	.word	0x7ff00000
 801bcf4:	7fe00000 	.word	0x7fe00000
 801bcf8:	7c9fffff 	.word	0x7c9fffff
 801bcfc:	7fefffff 	.word	0x7fefffff

0801bd00 <_strtod_r>:
 801bd00:	4b01      	ldr	r3, [pc, #4]	; (801bd08 <_strtod_r+0x8>)
 801bd02:	f7ff ba0d 	b.w	801b120 <_strtod_l>
 801bd06:	bf00      	nop
 801bd08:	20000150 	.word	0x20000150

0801bd0c <strtof>:
 801bd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd10:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801bdd4 <strtof+0xc8>
 801bd14:	4b2a      	ldr	r3, [pc, #168]	; (801bdc0 <strtof+0xb4>)
 801bd16:	460a      	mov	r2, r1
 801bd18:	ed2d 8b02 	vpush	{d8}
 801bd1c:	4601      	mov	r1, r0
 801bd1e:	f8d8 0000 	ldr.w	r0, [r8]
 801bd22:	f7ff f9fd 	bl	801b120 <_strtod_l>
 801bd26:	ec55 4b10 	vmov	r4, r5, d0
 801bd2a:	ee10 2a10 	vmov	r2, s0
 801bd2e:	ee10 0a10 	vmov	r0, s0
 801bd32:	462b      	mov	r3, r5
 801bd34:	4629      	mov	r1, r5
 801bd36:	f7e4 fed1 	bl	8000adc <__aeabi_dcmpun>
 801bd3a:	b190      	cbz	r0, 801bd62 <strtof+0x56>
 801bd3c:	2d00      	cmp	r5, #0
 801bd3e:	4821      	ldr	r0, [pc, #132]	; (801bdc4 <strtof+0xb8>)
 801bd40:	da09      	bge.n	801bd56 <strtof+0x4a>
 801bd42:	f001 f9d9 	bl	801d0f8 <nanf>
 801bd46:	eeb1 8a40 	vneg.f32	s16, s0
 801bd4a:	eeb0 0a48 	vmov.f32	s0, s16
 801bd4e:	ecbd 8b02 	vpop	{d8}
 801bd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd56:	ecbd 8b02 	vpop	{d8}
 801bd5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd5e:	f001 b9cb 	b.w	801d0f8 <nanf>
 801bd62:	4620      	mov	r0, r4
 801bd64:	4629      	mov	r1, r5
 801bd66:	f7e4 ff17 	bl	8000b98 <__aeabi_d2f>
 801bd6a:	ee08 0a10 	vmov	s16, r0
 801bd6e:	eddf 7a16 	vldr	s15, [pc, #88]	; 801bdc8 <strtof+0xbc>
 801bd72:	eeb0 7ac8 	vabs.f32	s14, s16
 801bd76:	eeb4 7a67 	vcmp.f32	s14, s15
 801bd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd7e:	dd11      	ble.n	801bda4 <strtof+0x98>
 801bd80:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 801bd84:	4b11      	ldr	r3, [pc, #68]	; (801bdcc <strtof+0xc0>)
 801bd86:	f04f 32ff 	mov.w	r2, #4294967295
 801bd8a:	4620      	mov	r0, r4
 801bd8c:	4639      	mov	r1, r7
 801bd8e:	f7e4 fea5 	bl	8000adc <__aeabi_dcmpun>
 801bd92:	b980      	cbnz	r0, 801bdb6 <strtof+0xaa>
 801bd94:	4b0d      	ldr	r3, [pc, #52]	; (801bdcc <strtof+0xc0>)
 801bd96:	f04f 32ff 	mov.w	r2, #4294967295
 801bd9a:	4620      	mov	r0, r4
 801bd9c:	4639      	mov	r1, r7
 801bd9e:	f7e4 fe7f 	bl	8000aa0 <__aeabi_dcmple>
 801bda2:	b940      	cbnz	r0, 801bdb6 <strtof+0xaa>
 801bda4:	ee18 3a10 	vmov	r3, s16
 801bda8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801bdac:	d1cd      	bne.n	801bd4a <strtof+0x3e>
 801bdae:	4b08      	ldr	r3, [pc, #32]	; (801bdd0 <strtof+0xc4>)
 801bdb0:	402b      	ands	r3, r5
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d0c9      	beq.n	801bd4a <strtof+0x3e>
 801bdb6:	f8d8 3000 	ldr.w	r3, [r8]
 801bdba:	2222      	movs	r2, #34	; 0x22
 801bdbc:	601a      	str	r2, [r3, #0]
 801bdbe:	e7c4      	b.n	801bd4a <strtof+0x3e>
 801bdc0:	20000150 	.word	0x20000150
 801bdc4:	08023b06 	.word	0x08023b06
 801bdc8:	7f7fffff 	.word	0x7f7fffff
 801bdcc:	7fefffff 	.word	0x7fefffff
 801bdd0:	7ff00000 	.word	0x7ff00000
 801bdd4:	20000308 	.word	0x20000308

0801bdd8 <_strtol_l.constprop.0>:
 801bdd8:	2b01      	cmp	r3, #1
 801bdda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bdde:	d001      	beq.n	801bde4 <_strtol_l.constprop.0+0xc>
 801bde0:	2b24      	cmp	r3, #36	; 0x24
 801bde2:	d906      	bls.n	801bdf2 <_strtol_l.constprop.0+0x1a>
 801bde4:	f001 f93c 	bl	801d060 <__errno>
 801bde8:	2316      	movs	r3, #22
 801bdea:	6003      	str	r3, [r0, #0]
 801bdec:	2000      	movs	r0, #0
 801bdee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdf2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801bed8 <_strtol_l.constprop.0+0x100>
 801bdf6:	460d      	mov	r5, r1
 801bdf8:	462e      	mov	r6, r5
 801bdfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bdfe:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801be02:	f017 0708 	ands.w	r7, r7, #8
 801be06:	d1f7      	bne.n	801bdf8 <_strtol_l.constprop.0+0x20>
 801be08:	2c2d      	cmp	r4, #45	; 0x2d
 801be0a:	d132      	bne.n	801be72 <_strtol_l.constprop.0+0x9a>
 801be0c:	782c      	ldrb	r4, [r5, #0]
 801be0e:	2701      	movs	r7, #1
 801be10:	1cb5      	adds	r5, r6, #2
 801be12:	2b00      	cmp	r3, #0
 801be14:	d05b      	beq.n	801bece <_strtol_l.constprop.0+0xf6>
 801be16:	2b10      	cmp	r3, #16
 801be18:	d109      	bne.n	801be2e <_strtol_l.constprop.0+0x56>
 801be1a:	2c30      	cmp	r4, #48	; 0x30
 801be1c:	d107      	bne.n	801be2e <_strtol_l.constprop.0+0x56>
 801be1e:	782c      	ldrb	r4, [r5, #0]
 801be20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801be24:	2c58      	cmp	r4, #88	; 0x58
 801be26:	d14d      	bne.n	801bec4 <_strtol_l.constprop.0+0xec>
 801be28:	786c      	ldrb	r4, [r5, #1]
 801be2a:	2310      	movs	r3, #16
 801be2c:	3502      	adds	r5, #2
 801be2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801be32:	f108 38ff 	add.w	r8, r8, #4294967295
 801be36:	f04f 0e00 	mov.w	lr, #0
 801be3a:	fbb8 f9f3 	udiv	r9, r8, r3
 801be3e:	4676      	mov	r6, lr
 801be40:	fb03 8a19 	mls	sl, r3, r9, r8
 801be44:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801be48:	f1bc 0f09 	cmp.w	ip, #9
 801be4c:	d816      	bhi.n	801be7c <_strtol_l.constprop.0+0xa4>
 801be4e:	4664      	mov	r4, ip
 801be50:	42a3      	cmp	r3, r4
 801be52:	dd24      	ble.n	801be9e <_strtol_l.constprop.0+0xc6>
 801be54:	f1be 3fff 	cmp.w	lr, #4294967295
 801be58:	d008      	beq.n	801be6c <_strtol_l.constprop.0+0x94>
 801be5a:	45b1      	cmp	r9, r6
 801be5c:	d31c      	bcc.n	801be98 <_strtol_l.constprop.0+0xc0>
 801be5e:	d101      	bne.n	801be64 <_strtol_l.constprop.0+0x8c>
 801be60:	45a2      	cmp	sl, r4
 801be62:	db19      	blt.n	801be98 <_strtol_l.constprop.0+0xc0>
 801be64:	fb06 4603 	mla	r6, r6, r3, r4
 801be68:	f04f 0e01 	mov.w	lr, #1
 801be6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801be70:	e7e8      	b.n	801be44 <_strtol_l.constprop.0+0x6c>
 801be72:	2c2b      	cmp	r4, #43	; 0x2b
 801be74:	bf04      	itt	eq
 801be76:	782c      	ldrbeq	r4, [r5, #0]
 801be78:	1cb5      	addeq	r5, r6, #2
 801be7a:	e7ca      	b.n	801be12 <_strtol_l.constprop.0+0x3a>
 801be7c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801be80:	f1bc 0f19 	cmp.w	ip, #25
 801be84:	d801      	bhi.n	801be8a <_strtol_l.constprop.0+0xb2>
 801be86:	3c37      	subs	r4, #55	; 0x37
 801be88:	e7e2      	b.n	801be50 <_strtol_l.constprop.0+0x78>
 801be8a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801be8e:	f1bc 0f19 	cmp.w	ip, #25
 801be92:	d804      	bhi.n	801be9e <_strtol_l.constprop.0+0xc6>
 801be94:	3c57      	subs	r4, #87	; 0x57
 801be96:	e7db      	b.n	801be50 <_strtol_l.constprop.0+0x78>
 801be98:	f04f 3eff 	mov.w	lr, #4294967295
 801be9c:	e7e6      	b.n	801be6c <_strtol_l.constprop.0+0x94>
 801be9e:	f1be 3fff 	cmp.w	lr, #4294967295
 801bea2:	d105      	bne.n	801beb0 <_strtol_l.constprop.0+0xd8>
 801bea4:	2322      	movs	r3, #34	; 0x22
 801bea6:	6003      	str	r3, [r0, #0]
 801bea8:	4646      	mov	r6, r8
 801beaa:	b942      	cbnz	r2, 801bebe <_strtol_l.constprop.0+0xe6>
 801beac:	4630      	mov	r0, r6
 801beae:	e79e      	b.n	801bdee <_strtol_l.constprop.0+0x16>
 801beb0:	b107      	cbz	r7, 801beb4 <_strtol_l.constprop.0+0xdc>
 801beb2:	4276      	negs	r6, r6
 801beb4:	2a00      	cmp	r2, #0
 801beb6:	d0f9      	beq.n	801beac <_strtol_l.constprop.0+0xd4>
 801beb8:	f1be 0f00 	cmp.w	lr, #0
 801bebc:	d000      	beq.n	801bec0 <_strtol_l.constprop.0+0xe8>
 801bebe:	1e69      	subs	r1, r5, #1
 801bec0:	6011      	str	r1, [r2, #0]
 801bec2:	e7f3      	b.n	801beac <_strtol_l.constprop.0+0xd4>
 801bec4:	2430      	movs	r4, #48	; 0x30
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	d1b1      	bne.n	801be2e <_strtol_l.constprop.0+0x56>
 801beca:	2308      	movs	r3, #8
 801becc:	e7af      	b.n	801be2e <_strtol_l.constprop.0+0x56>
 801bece:	2c30      	cmp	r4, #48	; 0x30
 801bed0:	d0a5      	beq.n	801be1e <_strtol_l.constprop.0+0x46>
 801bed2:	230a      	movs	r3, #10
 801bed4:	e7ab      	b.n	801be2e <_strtol_l.constprop.0+0x56>
 801bed6:	bf00      	nop
 801bed8:	08023919 	.word	0x08023919

0801bedc <_strtol_r>:
 801bedc:	f7ff bf7c 	b.w	801bdd8 <_strtol_l.constprop.0>

0801bee0 <strtol>:
 801bee0:	4613      	mov	r3, r2
 801bee2:	460a      	mov	r2, r1
 801bee4:	4601      	mov	r1, r0
 801bee6:	4802      	ldr	r0, [pc, #8]	; (801bef0 <strtol+0x10>)
 801bee8:	6800      	ldr	r0, [r0, #0]
 801beea:	f7ff bf75 	b.w	801bdd8 <_strtol_l.constprop.0>
 801beee:	bf00      	nop
 801bef0:	20000308 	.word	0x20000308

0801bef4 <__cvt>:
 801bef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bef8:	ec55 4b10 	vmov	r4, r5, d0
 801befc:	2d00      	cmp	r5, #0
 801befe:	460e      	mov	r6, r1
 801bf00:	4619      	mov	r1, r3
 801bf02:	462b      	mov	r3, r5
 801bf04:	bfbb      	ittet	lt
 801bf06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801bf0a:	461d      	movlt	r5, r3
 801bf0c:	2300      	movge	r3, #0
 801bf0e:	232d      	movlt	r3, #45	; 0x2d
 801bf10:	700b      	strb	r3, [r1, #0]
 801bf12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801bf18:	4691      	mov	r9, r2
 801bf1a:	f023 0820 	bic.w	r8, r3, #32
 801bf1e:	bfbc      	itt	lt
 801bf20:	4622      	movlt	r2, r4
 801bf22:	4614      	movlt	r4, r2
 801bf24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801bf28:	d005      	beq.n	801bf36 <__cvt+0x42>
 801bf2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801bf2e:	d100      	bne.n	801bf32 <__cvt+0x3e>
 801bf30:	3601      	adds	r6, #1
 801bf32:	2102      	movs	r1, #2
 801bf34:	e000      	b.n	801bf38 <__cvt+0x44>
 801bf36:	2103      	movs	r1, #3
 801bf38:	ab03      	add	r3, sp, #12
 801bf3a:	9301      	str	r3, [sp, #4]
 801bf3c:	ab02      	add	r3, sp, #8
 801bf3e:	9300      	str	r3, [sp, #0]
 801bf40:	ec45 4b10 	vmov	d0, r4, r5
 801bf44:	4653      	mov	r3, sl
 801bf46:	4632      	mov	r2, r6
 801bf48:	f001 f982 	bl	801d250 <_dtoa_r>
 801bf4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801bf50:	4607      	mov	r7, r0
 801bf52:	d102      	bne.n	801bf5a <__cvt+0x66>
 801bf54:	f019 0f01 	tst.w	r9, #1
 801bf58:	d022      	beq.n	801bfa0 <__cvt+0xac>
 801bf5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801bf5e:	eb07 0906 	add.w	r9, r7, r6
 801bf62:	d110      	bne.n	801bf86 <__cvt+0x92>
 801bf64:	783b      	ldrb	r3, [r7, #0]
 801bf66:	2b30      	cmp	r3, #48	; 0x30
 801bf68:	d10a      	bne.n	801bf80 <__cvt+0x8c>
 801bf6a:	2200      	movs	r2, #0
 801bf6c:	2300      	movs	r3, #0
 801bf6e:	4620      	mov	r0, r4
 801bf70:	4629      	mov	r1, r5
 801bf72:	f7e4 fd81 	bl	8000a78 <__aeabi_dcmpeq>
 801bf76:	b918      	cbnz	r0, 801bf80 <__cvt+0x8c>
 801bf78:	f1c6 0601 	rsb	r6, r6, #1
 801bf7c:	f8ca 6000 	str.w	r6, [sl]
 801bf80:	f8da 3000 	ldr.w	r3, [sl]
 801bf84:	4499      	add	r9, r3
 801bf86:	2200      	movs	r2, #0
 801bf88:	2300      	movs	r3, #0
 801bf8a:	4620      	mov	r0, r4
 801bf8c:	4629      	mov	r1, r5
 801bf8e:	f7e4 fd73 	bl	8000a78 <__aeabi_dcmpeq>
 801bf92:	b108      	cbz	r0, 801bf98 <__cvt+0xa4>
 801bf94:	f8cd 900c 	str.w	r9, [sp, #12]
 801bf98:	2230      	movs	r2, #48	; 0x30
 801bf9a:	9b03      	ldr	r3, [sp, #12]
 801bf9c:	454b      	cmp	r3, r9
 801bf9e:	d307      	bcc.n	801bfb0 <__cvt+0xbc>
 801bfa0:	9b03      	ldr	r3, [sp, #12]
 801bfa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bfa4:	1bdb      	subs	r3, r3, r7
 801bfa6:	4638      	mov	r0, r7
 801bfa8:	6013      	str	r3, [r2, #0]
 801bfaa:	b004      	add	sp, #16
 801bfac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfb0:	1c59      	adds	r1, r3, #1
 801bfb2:	9103      	str	r1, [sp, #12]
 801bfb4:	701a      	strb	r2, [r3, #0]
 801bfb6:	e7f0      	b.n	801bf9a <__cvt+0xa6>

0801bfb8 <__exponent>:
 801bfb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bfba:	4603      	mov	r3, r0
 801bfbc:	2900      	cmp	r1, #0
 801bfbe:	bfb8      	it	lt
 801bfc0:	4249      	neglt	r1, r1
 801bfc2:	f803 2b02 	strb.w	r2, [r3], #2
 801bfc6:	bfb4      	ite	lt
 801bfc8:	222d      	movlt	r2, #45	; 0x2d
 801bfca:	222b      	movge	r2, #43	; 0x2b
 801bfcc:	2909      	cmp	r1, #9
 801bfce:	7042      	strb	r2, [r0, #1]
 801bfd0:	dd2a      	ble.n	801c028 <__exponent+0x70>
 801bfd2:	f10d 0207 	add.w	r2, sp, #7
 801bfd6:	4617      	mov	r7, r2
 801bfd8:	260a      	movs	r6, #10
 801bfda:	4694      	mov	ip, r2
 801bfdc:	fb91 f5f6 	sdiv	r5, r1, r6
 801bfe0:	fb06 1415 	mls	r4, r6, r5, r1
 801bfe4:	3430      	adds	r4, #48	; 0x30
 801bfe6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801bfea:	460c      	mov	r4, r1
 801bfec:	2c63      	cmp	r4, #99	; 0x63
 801bfee:	f102 32ff 	add.w	r2, r2, #4294967295
 801bff2:	4629      	mov	r1, r5
 801bff4:	dcf1      	bgt.n	801bfda <__exponent+0x22>
 801bff6:	3130      	adds	r1, #48	; 0x30
 801bff8:	f1ac 0402 	sub.w	r4, ip, #2
 801bffc:	f802 1c01 	strb.w	r1, [r2, #-1]
 801c000:	1c41      	adds	r1, r0, #1
 801c002:	4622      	mov	r2, r4
 801c004:	42ba      	cmp	r2, r7
 801c006:	d30a      	bcc.n	801c01e <__exponent+0x66>
 801c008:	f10d 0209 	add.w	r2, sp, #9
 801c00c:	eba2 020c 	sub.w	r2, r2, ip
 801c010:	42bc      	cmp	r4, r7
 801c012:	bf88      	it	hi
 801c014:	2200      	movhi	r2, #0
 801c016:	4413      	add	r3, r2
 801c018:	1a18      	subs	r0, r3, r0
 801c01a:	b003      	add	sp, #12
 801c01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c01e:	f812 5b01 	ldrb.w	r5, [r2], #1
 801c022:	f801 5f01 	strb.w	r5, [r1, #1]!
 801c026:	e7ed      	b.n	801c004 <__exponent+0x4c>
 801c028:	2330      	movs	r3, #48	; 0x30
 801c02a:	3130      	adds	r1, #48	; 0x30
 801c02c:	7083      	strb	r3, [r0, #2]
 801c02e:	70c1      	strb	r1, [r0, #3]
 801c030:	1d03      	adds	r3, r0, #4
 801c032:	e7f1      	b.n	801c018 <__exponent+0x60>

0801c034 <_printf_float>:
 801c034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c038:	ed2d 8b02 	vpush	{d8}
 801c03c:	b08d      	sub	sp, #52	; 0x34
 801c03e:	460c      	mov	r4, r1
 801c040:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801c044:	4616      	mov	r6, r2
 801c046:	461f      	mov	r7, r3
 801c048:	4605      	mov	r5, r0
 801c04a:	f000 ffaf 	bl	801cfac <_localeconv_r>
 801c04e:	f8d0 a000 	ldr.w	sl, [r0]
 801c052:	4650      	mov	r0, sl
 801c054:	f7e4 f8e4 	bl	8000220 <strlen>
 801c058:	2300      	movs	r3, #0
 801c05a:	930a      	str	r3, [sp, #40]	; 0x28
 801c05c:	6823      	ldr	r3, [r4, #0]
 801c05e:	9305      	str	r3, [sp, #20]
 801c060:	f8d8 3000 	ldr.w	r3, [r8]
 801c064:	f894 b018 	ldrb.w	fp, [r4, #24]
 801c068:	3307      	adds	r3, #7
 801c06a:	f023 0307 	bic.w	r3, r3, #7
 801c06e:	f103 0208 	add.w	r2, r3, #8
 801c072:	f8c8 2000 	str.w	r2, [r8]
 801c076:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c07a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c07e:	9307      	str	r3, [sp, #28]
 801c080:	f8cd 8018 	str.w	r8, [sp, #24]
 801c084:	ee08 0a10 	vmov	s16, r0
 801c088:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801c08c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c090:	4b9e      	ldr	r3, [pc, #632]	; (801c30c <_printf_float+0x2d8>)
 801c092:	f04f 32ff 	mov.w	r2, #4294967295
 801c096:	f7e4 fd21 	bl	8000adc <__aeabi_dcmpun>
 801c09a:	bb88      	cbnz	r0, 801c100 <_printf_float+0xcc>
 801c09c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c0a0:	4b9a      	ldr	r3, [pc, #616]	; (801c30c <_printf_float+0x2d8>)
 801c0a2:	f04f 32ff 	mov.w	r2, #4294967295
 801c0a6:	f7e4 fcfb 	bl	8000aa0 <__aeabi_dcmple>
 801c0aa:	bb48      	cbnz	r0, 801c100 <_printf_float+0xcc>
 801c0ac:	2200      	movs	r2, #0
 801c0ae:	2300      	movs	r3, #0
 801c0b0:	4640      	mov	r0, r8
 801c0b2:	4649      	mov	r1, r9
 801c0b4:	f7e4 fcea 	bl	8000a8c <__aeabi_dcmplt>
 801c0b8:	b110      	cbz	r0, 801c0c0 <_printf_float+0x8c>
 801c0ba:	232d      	movs	r3, #45	; 0x2d
 801c0bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c0c0:	4a93      	ldr	r2, [pc, #588]	; (801c310 <_printf_float+0x2dc>)
 801c0c2:	4b94      	ldr	r3, [pc, #592]	; (801c314 <_printf_float+0x2e0>)
 801c0c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801c0c8:	bf94      	ite	ls
 801c0ca:	4690      	movls	r8, r2
 801c0cc:	4698      	movhi	r8, r3
 801c0ce:	2303      	movs	r3, #3
 801c0d0:	6123      	str	r3, [r4, #16]
 801c0d2:	9b05      	ldr	r3, [sp, #20]
 801c0d4:	f023 0304 	bic.w	r3, r3, #4
 801c0d8:	6023      	str	r3, [r4, #0]
 801c0da:	f04f 0900 	mov.w	r9, #0
 801c0de:	9700      	str	r7, [sp, #0]
 801c0e0:	4633      	mov	r3, r6
 801c0e2:	aa0b      	add	r2, sp, #44	; 0x2c
 801c0e4:	4621      	mov	r1, r4
 801c0e6:	4628      	mov	r0, r5
 801c0e8:	f000 f9da 	bl	801c4a0 <_printf_common>
 801c0ec:	3001      	adds	r0, #1
 801c0ee:	f040 8090 	bne.w	801c212 <_printf_float+0x1de>
 801c0f2:	f04f 30ff 	mov.w	r0, #4294967295
 801c0f6:	b00d      	add	sp, #52	; 0x34
 801c0f8:	ecbd 8b02 	vpop	{d8}
 801c0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c100:	4642      	mov	r2, r8
 801c102:	464b      	mov	r3, r9
 801c104:	4640      	mov	r0, r8
 801c106:	4649      	mov	r1, r9
 801c108:	f7e4 fce8 	bl	8000adc <__aeabi_dcmpun>
 801c10c:	b140      	cbz	r0, 801c120 <_printf_float+0xec>
 801c10e:	464b      	mov	r3, r9
 801c110:	2b00      	cmp	r3, #0
 801c112:	bfbc      	itt	lt
 801c114:	232d      	movlt	r3, #45	; 0x2d
 801c116:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801c11a:	4a7f      	ldr	r2, [pc, #508]	; (801c318 <_printf_float+0x2e4>)
 801c11c:	4b7f      	ldr	r3, [pc, #508]	; (801c31c <_printf_float+0x2e8>)
 801c11e:	e7d1      	b.n	801c0c4 <_printf_float+0x90>
 801c120:	6863      	ldr	r3, [r4, #4]
 801c122:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801c126:	9206      	str	r2, [sp, #24]
 801c128:	1c5a      	adds	r2, r3, #1
 801c12a:	d13f      	bne.n	801c1ac <_printf_float+0x178>
 801c12c:	2306      	movs	r3, #6
 801c12e:	6063      	str	r3, [r4, #4]
 801c130:	9b05      	ldr	r3, [sp, #20]
 801c132:	6861      	ldr	r1, [r4, #4]
 801c134:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801c138:	2300      	movs	r3, #0
 801c13a:	9303      	str	r3, [sp, #12]
 801c13c:	ab0a      	add	r3, sp, #40	; 0x28
 801c13e:	e9cd b301 	strd	fp, r3, [sp, #4]
 801c142:	ab09      	add	r3, sp, #36	; 0x24
 801c144:	ec49 8b10 	vmov	d0, r8, r9
 801c148:	9300      	str	r3, [sp, #0]
 801c14a:	6022      	str	r2, [r4, #0]
 801c14c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801c150:	4628      	mov	r0, r5
 801c152:	f7ff fecf 	bl	801bef4 <__cvt>
 801c156:	9b06      	ldr	r3, [sp, #24]
 801c158:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c15a:	2b47      	cmp	r3, #71	; 0x47
 801c15c:	4680      	mov	r8, r0
 801c15e:	d108      	bne.n	801c172 <_printf_float+0x13e>
 801c160:	1cc8      	adds	r0, r1, #3
 801c162:	db02      	blt.n	801c16a <_printf_float+0x136>
 801c164:	6863      	ldr	r3, [r4, #4]
 801c166:	4299      	cmp	r1, r3
 801c168:	dd41      	ble.n	801c1ee <_printf_float+0x1ba>
 801c16a:	f1ab 0302 	sub.w	r3, fp, #2
 801c16e:	fa5f fb83 	uxtb.w	fp, r3
 801c172:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c176:	d820      	bhi.n	801c1ba <_printf_float+0x186>
 801c178:	3901      	subs	r1, #1
 801c17a:	465a      	mov	r2, fp
 801c17c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801c180:	9109      	str	r1, [sp, #36]	; 0x24
 801c182:	f7ff ff19 	bl	801bfb8 <__exponent>
 801c186:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c188:	1813      	adds	r3, r2, r0
 801c18a:	2a01      	cmp	r2, #1
 801c18c:	4681      	mov	r9, r0
 801c18e:	6123      	str	r3, [r4, #16]
 801c190:	dc02      	bgt.n	801c198 <_printf_float+0x164>
 801c192:	6822      	ldr	r2, [r4, #0]
 801c194:	07d2      	lsls	r2, r2, #31
 801c196:	d501      	bpl.n	801c19c <_printf_float+0x168>
 801c198:	3301      	adds	r3, #1
 801c19a:	6123      	str	r3, [r4, #16]
 801c19c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801c1a0:	2b00      	cmp	r3, #0
 801c1a2:	d09c      	beq.n	801c0de <_printf_float+0xaa>
 801c1a4:	232d      	movs	r3, #45	; 0x2d
 801c1a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c1aa:	e798      	b.n	801c0de <_printf_float+0xaa>
 801c1ac:	9a06      	ldr	r2, [sp, #24]
 801c1ae:	2a47      	cmp	r2, #71	; 0x47
 801c1b0:	d1be      	bne.n	801c130 <_printf_float+0xfc>
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d1bc      	bne.n	801c130 <_printf_float+0xfc>
 801c1b6:	2301      	movs	r3, #1
 801c1b8:	e7b9      	b.n	801c12e <_printf_float+0xfa>
 801c1ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801c1be:	d118      	bne.n	801c1f2 <_printf_float+0x1be>
 801c1c0:	2900      	cmp	r1, #0
 801c1c2:	6863      	ldr	r3, [r4, #4]
 801c1c4:	dd0b      	ble.n	801c1de <_printf_float+0x1aa>
 801c1c6:	6121      	str	r1, [r4, #16]
 801c1c8:	b913      	cbnz	r3, 801c1d0 <_printf_float+0x19c>
 801c1ca:	6822      	ldr	r2, [r4, #0]
 801c1cc:	07d0      	lsls	r0, r2, #31
 801c1ce:	d502      	bpl.n	801c1d6 <_printf_float+0x1a2>
 801c1d0:	3301      	adds	r3, #1
 801c1d2:	440b      	add	r3, r1
 801c1d4:	6123      	str	r3, [r4, #16]
 801c1d6:	65a1      	str	r1, [r4, #88]	; 0x58
 801c1d8:	f04f 0900 	mov.w	r9, #0
 801c1dc:	e7de      	b.n	801c19c <_printf_float+0x168>
 801c1de:	b913      	cbnz	r3, 801c1e6 <_printf_float+0x1b2>
 801c1e0:	6822      	ldr	r2, [r4, #0]
 801c1e2:	07d2      	lsls	r2, r2, #31
 801c1e4:	d501      	bpl.n	801c1ea <_printf_float+0x1b6>
 801c1e6:	3302      	adds	r3, #2
 801c1e8:	e7f4      	b.n	801c1d4 <_printf_float+0x1a0>
 801c1ea:	2301      	movs	r3, #1
 801c1ec:	e7f2      	b.n	801c1d4 <_printf_float+0x1a0>
 801c1ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801c1f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c1f4:	4299      	cmp	r1, r3
 801c1f6:	db05      	blt.n	801c204 <_printf_float+0x1d0>
 801c1f8:	6823      	ldr	r3, [r4, #0]
 801c1fa:	6121      	str	r1, [r4, #16]
 801c1fc:	07d8      	lsls	r0, r3, #31
 801c1fe:	d5ea      	bpl.n	801c1d6 <_printf_float+0x1a2>
 801c200:	1c4b      	adds	r3, r1, #1
 801c202:	e7e7      	b.n	801c1d4 <_printf_float+0x1a0>
 801c204:	2900      	cmp	r1, #0
 801c206:	bfd4      	ite	le
 801c208:	f1c1 0202 	rsble	r2, r1, #2
 801c20c:	2201      	movgt	r2, #1
 801c20e:	4413      	add	r3, r2
 801c210:	e7e0      	b.n	801c1d4 <_printf_float+0x1a0>
 801c212:	6823      	ldr	r3, [r4, #0]
 801c214:	055a      	lsls	r2, r3, #21
 801c216:	d407      	bmi.n	801c228 <_printf_float+0x1f4>
 801c218:	6923      	ldr	r3, [r4, #16]
 801c21a:	4642      	mov	r2, r8
 801c21c:	4631      	mov	r1, r6
 801c21e:	4628      	mov	r0, r5
 801c220:	47b8      	blx	r7
 801c222:	3001      	adds	r0, #1
 801c224:	d12c      	bne.n	801c280 <_printf_float+0x24c>
 801c226:	e764      	b.n	801c0f2 <_printf_float+0xbe>
 801c228:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c22c:	f240 80e0 	bls.w	801c3f0 <_printf_float+0x3bc>
 801c230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c234:	2200      	movs	r2, #0
 801c236:	2300      	movs	r3, #0
 801c238:	f7e4 fc1e 	bl	8000a78 <__aeabi_dcmpeq>
 801c23c:	2800      	cmp	r0, #0
 801c23e:	d034      	beq.n	801c2aa <_printf_float+0x276>
 801c240:	4a37      	ldr	r2, [pc, #220]	; (801c320 <_printf_float+0x2ec>)
 801c242:	2301      	movs	r3, #1
 801c244:	4631      	mov	r1, r6
 801c246:	4628      	mov	r0, r5
 801c248:	47b8      	blx	r7
 801c24a:	3001      	adds	r0, #1
 801c24c:	f43f af51 	beq.w	801c0f2 <_printf_float+0xbe>
 801c250:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c254:	429a      	cmp	r2, r3
 801c256:	db02      	blt.n	801c25e <_printf_float+0x22a>
 801c258:	6823      	ldr	r3, [r4, #0]
 801c25a:	07d8      	lsls	r0, r3, #31
 801c25c:	d510      	bpl.n	801c280 <_printf_float+0x24c>
 801c25e:	ee18 3a10 	vmov	r3, s16
 801c262:	4652      	mov	r2, sl
 801c264:	4631      	mov	r1, r6
 801c266:	4628      	mov	r0, r5
 801c268:	47b8      	blx	r7
 801c26a:	3001      	adds	r0, #1
 801c26c:	f43f af41 	beq.w	801c0f2 <_printf_float+0xbe>
 801c270:	f04f 0800 	mov.w	r8, #0
 801c274:	f104 091a 	add.w	r9, r4, #26
 801c278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c27a:	3b01      	subs	r3, #1
 801c27c:	4543      	cmp	r3, r8
 801c27e:	dc09      	bgt.n	801c294 <_printf_float+0x260>
 801c280:	6823      	ldr	r3, [r4, #0]
 801c282:	079b      	lsls	r3, r3, #30
 801c284:	f100 8107 	bmi.w	801c496 <_printf_float+0x462>
 801c288:	68e0      	ldr	r0, [r4, #12]
 801c28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c28c:	4298      	cmp	r0, r3
 801c28e:	bfb8      	it	lt
 801c290:	4618      	movlt	r0, r3
 801c292:	e730      	b.n	801c0f6 <_printf_float+0xc2>
 801c294:	2301      	movs	r3, #1
 801c296:	464a      	mov	r2, r9
 801c298:	4631      	mov	r1, r6
 801c29a:	4628      	mov	r0, r5
 801c29c:	47b8      	blx	r7
 801c29e:	3001      	adds	r0, #1
 801c2a0:	f43f af27 	beq.w	801c0f2 <_printf_float+0xbe>
 801c2a4:	f108 0801 	add.w	r8, r8, #1
 801c2a8:	e7e6      	b.n	801c278 <_printf_float+0x244>
 801c2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	dc39      	bgt.n	801c324 <_printf_float+0x2f0>
 801c2b0:	4a1b      	ldr	r2, [pc, #108]	; (801c320 <_printf_float+0x2ec>)
 801c2b2:	2301      	movs	r3, #1
 801c2b4:	4631      	mov	r1, r6
 801c2b6:	4628      	mov	r0, r5
 801c2b8:	47b8      	blx	r7
 801c2ba:	3001      	adds	r0, #1
 801c2bc:	f43f af19 	beq.w	801c0f2 <_printf_float+0xbe>
 801c2c0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801c2c4:	4313      	orrs	r3, r2
 801c2c6:	d102      	bne.n	801c2ce <_printf_float+0x29a>
 801c2c8:	6823      	ldr	r3, [r4, #0]
 801c2ca:	07d9      	lsls	r1, r3, #31
 801c2cc:	d5d8      	bpl.n	801c280 <_printf_float+0x24c>
 801c2ce:	ee18 3a10 	vmov	r3, s16
 801c2d2:	4652      	mov	r2, sl
 801c2d4:	4631      	mov	r1, r6
 801c2d6:	4628      	mov	r0, r5
 801c2d8:	47b8      	blx	r7
 801c2da:	3001      	adds	r0, #1
 801c2dc:	f43f af09 	beq.w	801c0f2 <_printf_float+0xbe>
 801c2e0:	f04f 0900 	mov.w	r9, #0
 801c2e4:	f104 0a1a 	add.w	sl, r4, #26
 801c2e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2ea:	425b      	negs	r3, r3
 801c2ec:	454b      	cmp	r3, r9
 801c2ee:	dc01      	bgt.n	801c2f4 <_printf_float+0x2c0>
 801c2f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c2f2:	e792      	b.n	801c21a <_printf_float+0x1e6>
 801c2f4:	2301      	movs	r3, #1
 801c2f6:	4652      	mov	r2, sl
 801c2f8:	4631      	mov	r1, r6
 801c2fa:	4628      	mov	r0, r5
 801c2fc:	47b8      	blx	r7
 801c2fe:	3001      	adds	r0, #1
 801c300:	f43f aef7 	beq.w	801c0f2 <_printf_float+0xbe>
 801c304:	f109 0901 	add.w	r9, r9, #1
 801c308:	e7ee      	b.n	801c2e8 <_printf_float+0x2b4>
 801c30a:	bf00      	nop
 801c30c:	7fefffff 	.word	0x7fefffff
 801c310:	08023a19 	.word	0x08023a19
 801c314:	08023a1d 	.word	0x08023a1d
 801c318:	08023a21 	.word	0x08023a21
 801c31c:	08023a25 	.word	0x08023a25
 801c320:	08023a29 	.word	0x08023a29
 801c324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c326:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c328:	429a      	cmp	r2, r3
 801c32a:	bfa8      	it	ge
 801c32c:	461a      	movge	r2, r3
 801c32e:	2a00      	cmp	r2, #0
 801c330:	4691      	mov	r9, r2
 801c332:	dc37      	bgt.n	801c3a4 <_printf_float+0x370>
 801c334:	f04f 0b00 	mov.w	fp, #0
 801c338:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c33c:	f104 021a 	add.w	r2, r4, #26
 801c340:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c342:	9305      	str	r3, [sp, #20]
 801c344:	eba3 0309 	sub.w	r3, r3, r9
 801c348:	455b      	cmp	r3, fp
 801c34a:	dc33      	bgt.n	801c3b4 <_printf_float+0x380>
 801c34c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c350:	429a      	cmp	r2, r3
 801c352:	db3b      	blt.n	801c3cc <_printf_float+0x398>
 801c354:	6823      	ldr	r3, [r4, #0]
 801c356:	07da      	lsls	r2, r3, #31
 801c358:	d438      	bmi.n	801c3cc <_printf_float+0x398>
 801c35a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801c35e:	eba2 0903 	sub.w	r9, r2, r3
 801c362:	9b05      	ldr	r3, [sp, #20]
 801c364:	1ad2      	subs	r2, r2, r3
 801c366:	4591      	cmp	r9, r2
 801c368:	bfa8      	it	ge
 801c36a:	4691      	movge	r9, r2
 801c36c:	f1b9 0f00 	cmp.w	r9, #0
 801c370:	dc35      	bgt.n	801c3de <_printf_float+0x3aa>
 801c372:	f04f 0800 	mov.w	r8, #0
 801c376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c37a:	f104 0a1a 	add.w	sl, r4, #26
 801c37e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c382:	1a9b      	subs	r3, r3, r2
 801c384:	eba3 0309 	sub.w	r3, r3, r9
 801c388:	4543      	cmp	r3, r8
 801c38a:	f77f af79 	ble.w	801c280 <_printf_float+0x24c>
 801c38e:	2301      	movs	r3, #1
 801c390:	4652      	mov	r2, sl
 801c392:	4631      	mov	r1, r6
 801c394:	4628      	mov	r0, r5
 801c396:	47b8      	blx	r7
 801c398:	3001      	adds	r0, #1
 801c39a:	f43f aeaa 	beq.w	801c0f2 <_printf_float+0xbe>
 801c39e:	f108 0801 	add.w	r8, r8, #1
 801c3a2:	e7ec      	b.n	801c37e <_printf_float+0x34a>
 801c3a4:	4613      	mov	r3, r2
 801c3a6:	4631      	mov	r1, r6
 801c3a8:	4642      	mov	r2, r8
 801c3aa:	4628      	mov	r0, r5
 801c3ac:	47b8      	blx	r7
 801c3ae:	3001      	adds	r0, #1
 801c3b0:	d1c0      	bne.n	801c334 <_printf_float+0x300>
 801c3b2:	e69e      	b.n	801c0f2 <_printf_float+0xbe>
 801c3b4:	2301      	movs	r3, #1
 801c3b6:	4631      	mov	r1, r6
 801c3b8:	4628      	mov	r0, r5
 801c3ba:	9205      	str	r2, [sp, #20]
 801c3bc:	47b8      	blx	r7
 801c3be:	3001      	adds	r0, #1
 801c3c0:	f43f ae97 	beq.w	801c0f2 <_printf_float+0xbe>
 801c3c4:	9a05      	ldr	r2, [sp, #20]
 801c3c6:	f10b 0b01 	add.w	fp, fp, #1
 801c3ca:	e7b9      	b.n	801c340 <_printf_float+0x30c>
 801c3cc:	ee18 3a10 	vmov	r3, s16
 801c3d0:	4652      	mov	r2, sl
 801c3d2:	4631      	mov	r1, r6
 801c3d4:	4628      	mov	r0, r5
 801c3d6:	47b8      	blx	r7
 801c3d8:	3001      	adds	r0, #1
 801c3da:	d1be      	bne.n	801c35a <_printf_float+0x326>
 801c3dc:	e689      	b.n	801c0f2 <_printf_float+0xbe>
 801c3de:	9a05      	ldr	r2, [sp, #20]
 801c3e0:	464b      	mov	r3, r9
 801c3e2:	4442      	add	r2, r8
 801c3e4:	4631      	mov	r1, r6
 801c3e6:	4628      	mov	r0, r5
 801c3e8:	47b8      	blx	r7
 801c3ea:	3001      	adds	r0, #1
 801c3ec:	d1c1      	bne.n	801c372 <_printf_float+0x33e>
 801c3ee:	e680      	b.n	801c0f2 <_printf_float+0xbe>
 801c3f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c3f2:	2a01      	cmp	r2, #1
 801c3f4:	dc01      	bgt.n	801c3fa <_printf_float+0x3c6>
 801c3f6:	07db      	lsls	r3, r3, #31
 801c3f8:	d53a      	bpl.n	801c470 <_printf_float+0x43c>
 801c3fa:	2301      	movs	r3, #1
 801c3fc:	4642      	mov	r2, r8
 801c3fe:	4631      	mov	r1, r6
 801c400:	4628      	mov	r0, r5
 801c402:	47b8      	blx	r7
 801c404:	3001      	adds	r0, #1
 801c406:	f43f ae74 	beq.w	801c0f2 <_printf_float+0xbe>
 801c40a:	ee18 3a10 	vmov	r3, s16
 801c40e:	4652      	mov	r2, sl
 801c410:	4631      	mov	r1, r6
 801c412:	4628      	mov	r0, r5
 801c414:	47b8      	blx	r7
 801c416:	3001      	adds	r0, #1
 801c418:	f43f ae6b 	beq.w	801c0f2 <_printf_float+0xbe>
 801c41c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c420:	2200      	movs	r2, #0
 801c422:	2300      	movs	r3, #0
 801c424:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801c428:	f7e4 fb26 	bl	8000a78 <__aeabi_dcmpeq>
 801c42c:	b9d8      	cbnz	r0, 801c466 <_printf_float+0x432>
 801c42e:	f10a 33ff 	add.w	r3, sl, #4294967295
 801c432:	f108 0201 	add.w	r2, r8, #1
 801c436:	4631      	mov	r1, r6
 801c438:	4628      	mov	r0, r5
 801c43a:	47b8      	blx	r7
 801c43c:	3001      	adds	r0, #1
 801c43e:	d10e      	bne.n	801c45e <_printf_float+0x42a>
 801c440:	e657      	b.n	801c0f2 <_printf_float+0xbe>
 801c442:	2301      	movs	r3, #1
 801c444:	4652      	mov	r2, sl
 801c446:	4631      	mov	r1, r6
 801c448:	4628      	mov	r0, r5
 801c44a:	47b8      	blx	r7
 801c44c:	3001      	adds	r0, #1
 801c44e:	f43f ae50 	beq.w	801c0f2 <_printf_float+0xbe>
 801c452:	f108 0801 	add.w	r8, r8, #1
 801c456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c458:	3b01      	subs	r3, #1
 801c45a:	4543      	cmp	r3, r8
 801c45c:	dcf1      	bgt.n	801c442 <_printf_float+0x40e>
 801c45e:	464b      	mov	r3, r9
 801c460:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801c464:	e6da      	b.n	801c21c <_printf_float+0x1e8>
 801c466:	f04f 0800 	mov.w	r8, #0
 801c46a:	f104 0a1a 	add.w	sl, r4, #26
 801c46e:	e7f2      	b.n	801c456 <_printf_float+0x422>
 801c470:	2301      	movs	r3, #1
 801c472:	4642      	mov	r2, r8
 801c474:	e7df      	b.n	801c436 <_printf_float+0x402>
 801c476:	2301      	movs	r3, #1
 801c478:	464a      	mov	r2, r9
 801c47a:	4631      	mov	r1, r6
 801c47c:	4628      	mov	r0, r5
 801c47e:	47b8      	blx	r7
 801c480:	3001      	adds	r0, #1
 801c482:	f43f ae36 	beq.w	801c0f2 <_printf_float+0xbe>
 801c486:	f108 0801 	add.w	r8, r8, #1
 801c48a:	68e3      	ldr	r3, [r4, #12]
 801c48c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c48e:	1a5b      	subs	r3, r3, r1
 801c490:	4543      	cmp	r3, r8
 801c492:	dcf0      	bgt.n	801c476 <_printf_float+0x442>
 801c494:	e6f8      	b.n	801c288 <_printf_float+0x254>
 801c496:	f04f 0800 	mov.w	r8, #0
 801c49a:	f104 0919 	add.w	r9, r4, #25
 801c49e:	e7f4      	b.n	801c48a <_printf_float+0x456>

0801c4a0 <_printf_common>:
 801c4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c4a4:	4616      	mov	r6, r2
 801c4a6:	4699      	mov	r9, r3
 801c4a8:	688a      	ldr	r2, [r1, #8]
 801c4aa:	690b      	ldr	r3, [r1, #16]
 801c4ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c4b0:	4293      	cmp	r3, r2
 801c4b2:	bfb8      	it	lt
 801c4b4:	4613      	movlt	r3, r2
 801c4b6:	6033      	str	r3, [r6, #0]
 801c4b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c4bc:	4607      	mov	r7, r0
 801c4be:	460c      	mov	r4, r1
 801c4c0:	b10a      	cbz	r2, 801c4c6 <_printf_common+0x26>
 801c4c2:	3301      	adds	r3, #1
 801c4c4:	6033      	str	r3, [r6, #0]
 801c4c6:	6823      	ldr	r3, [r4, #0]
 801c4c8:	0699      	lsls	r1, r3, #26
 801c4ca:	bf42      	ittt	mi
 801c4cc:	6833      	ldrmi	r3, [r6, #0]
 801c4ce:	3302      	addmi	r3, #2
 801c4d0:	6033      	strmi	r3, [r6, #0]
 801c4d2:	6825      	ldr	r5, [r4, #0]
 801c4d4:	f015 0506 	ands.w	r5, r5, #6
 801c4d8:	d106      	bne.n	801c4e8 <_printf_common+0x48>
 801c4da:	f104 0a19 	add.w	sl, r4, #25
 801c4de:	68e3      	ldr	r3, [r4, #12]
 801c4e0:	6832      	ldr	r2, [r6, #0]
 801c4e2:	1a9b      	subs	r3, r3, r2
 801c4e4:	42ab      	cmp	r3, r5
 801c4e6:	dc26      	bgt.n	801c536 <_printf_common+0x96>
 801c4e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c4ec:	1e13      	subs	r3, r2, #0
 801c4ee:	6822      	ldr	r2, [r4, #0]
 801c4f0:	bf18      	it	ne
 801c4f2:	2301      	movne	r3, #1
 801c4f4:	0692      	lsls	r2, r2, #26
 801c4f6:	d42b      	bmi.n	801c550 <_printf_common+0xb0>
 801c4f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c4fc:	4649      	mov	r1, r9
 801c4fe:	4638      	mov	r0, r7
 801c500:	47c0      	blx	r8
 801c502:	3001      	adds	r0, #1
 801c504:	d01e      	beq.n	801c544 <_printf_common+0xa4>
 801c506:	6823      	ldr	r3, [r4, #0]
 801c508:	6922      	ldr	r2, [r4, #16]
 801c50a:	f003 0306 	and.w	r3, r3, #6
 801c50e:	2b04      	cmp	r3, #4
 801c510:	bf02      	ittt	eq
 801c512:	68e5      	ldreq	r5, [r4, #12]
 801c514:	6833      	ldreq	r3, [r6, #0]
 801c516:	1aed      	subeq	r5, r5, r3
 801c518:	68a3      	ldr	r3, [r4, #8]
 801c51a:	bf0c      	ite	eq
 801c51c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c520:	2500      	movne	r5, #0
 801c522:	4293      	cmp	r3, r2
 801c524:	bfc4      	itt	gt
 801c526:	1a9b      	subgt	r3, r3, r2
 801c528:	18ed      	addgt	r5, r5, r3
 801c52a:	2600      	movs	r6, #0
 801c52c:	341a      	adds	r4, #26
 801c52e:	42b5      	cmp	r5, r6
 801c530:	d11a      	bne.n	801c568 <_printf_common+0xc8>
 801c532:	2000      	movs	r0, #0
 801c534:	e008      	b.n	801c548 <_printf_common+0xa8>
 801c536:	2301      	movs	r3, #1
 801c538:	4652      	mov	r2, sl
 801c53a:	4649      	mov	r1, r9
 801c53c:	4638      	mov	r0, r7
 801c53e:	47c0      	blx	r8
 801c540:	3001      	adds	r0, #1
 801c542:	d103      	bne.n	801c54c <_printf_common+0xac>
 801c544:	f04f 30ff 	mov.w	r0, #4294967295
 801c548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c54c:	3501      	adds	r5, #1
 801c54e:	e7c6      	b.n	801c4de <_printf_common+0x3e>
 801c550:	18e1      	adds	r1, r4, r3
 801c552:	1c5a      	adds	r2, r3, #1
 801c554:	2030      	movs	r0, #48	; 0x30
 801c556:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c55a:	4422      	add	r2, r4
 801c55c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c560:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c564:	3302      	adds	r3, #2
 801c566:	e7c7      	b.n	801c4f8 <_printf_common+0x58>
 801c568:	2301      	movs	r3, #1
 801c56a:	4622      	mov	r2, r4
 801c56c:	4649      	mov	r1, r9
 801c56e:	4638      	mov	r0, r7
 801c570:	47c0      	blx	r8
 801c572:	3001      	adds	r0, #1
 801c574:	d0e6      	beq.n	801c544 <_printf_common+0xa4>
 801c576:	3601      	adds	r6, #1
 801c578:	e7d9      	b.n	801c52e <_printf_common+0x8e>
	...

0801c57c <_printf_i>:
 801c57c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c580:	7e0f      	ldrb	r7, [r1, #24]
 801c582:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c584:	2f78      	cmp	r7, #120	; 0x78
 801c586:	4691      	mov	r9, r2
 801c588:	4680      	mov	r8, r0
 801c58a:	460c      	mov	r4, r1
 801c58c:	469a      	mov	sl, r3
 801c58e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c592:	d807      	bhi.n	801c5a4 <_printf_i+0x28>
 801c594:	2f62      	cmp	r7, #98	; 0x62
 801c596:	d80a      	bhi.n	801c5ae <_printf_i+0x32>
 801c598:	2f00      	cmp	r7, #0
 801c59a:	f000 80d4 	beq.w	801c746 <_printf_i+0x1ca>
 801c59e:	2f58      	cmp	r7, #88	; 0x58
 801c5a0:	f000 80c0 	beq.w	801c724 <_printf_i+0x1a8>
 801c5a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c5a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c5ac:	e03a      	b.n	801c624 <_printf_i+0xa8>
 801c5ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c5b2:	2b15      	cmp	r3, #21
 801c5b4:	d8f6      	bhi.n	801c5a4 <_printf_i+0x28>
 801c5b6:	a101      	add	r1, pc, #4	; (adr r1, 801c5bc <_printf_i+0x40>)
 801c5b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c5bc:	0801c615 	.word	0x0801c615
 801c5c0:	0801c629 	.word	0x0801c629
 801c5c4:	0801c5a5 	.word	0x0801c5a5
 801c5c8:	0801c5a5 	.word	0x0801c5a5
 801c5cc:	0801c5a5 	.word	0x0801c5a5
 801c5d0:	0801c5a5 	.word	0x0801c5a5
 801c5d4:	0801c629 	.word	0x0801c629
 801c5d8:	0801c5a5 	.word	0x0801c5a5
 801c5dc:	0801c5a5 	.word	0x0801c5a5
 801c5e0:	0801c5a5 	.word	0x0801c5a5
 801c5e4:	0801c5a5 	.word	0x0801c5a5
 801c5e8:	0801c72d 	.word	0x0801c72d
 801c5ec:	0801c655 	.word	0x0801c655
 801c5f0:	0801c6e7 	.word	0x0801c6e7
 801c5f4:	0801c5a5 	.word	0x0801c5a5
 801c5f8:	0801c5a5 	.word	0x0801c5a5
 801c5fc:	0801c74f 	.word	0x0801c74f
 801c600:	0801c5a5 	.word	0x0801c5a5
 801c604:	0801c655 	.word	0x0801c655
 801c608:	0801c5a5 	.word	0x0801c5a5
 801c60c:	0801c5a5 	.word	0x0801c5a5
 801c610:	0801c6ef 	.word	0x0801c6ef
 801c614:	682b      	ldr	r3, [r5, #0]
 801c616:	1d1a      	adds	r2, r3, #4
 801c618:	681b      	ldr	r3, [r3, #0]
 801c61a:	602a      	str	r2, [r5, #0]
 801c61c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c624:	2301      	movs	r3, #1
 801c626:	e09f      	b.n	801c768 <_printf_i+0x1ec>
 801c628:	6820      	ldr	r0, [r4, #0]
 801c62a:	682b      	ldr	r3, [r5, #0]
 801c62c:	0607      	lsls	r7, r0, #24
 801c62e:	f103 0104 	add.w	r1, r3, #4
 801c632:	6029      	str	r1, [r5, #0]
 801c634:	d501      	bpl.n	801c63a <_printf_i+0xbe>
 801c636:	681e      	ldr	r6, [r3, #0]
 801c638:	e003      	b.n	801c642 <_printf_i+0xc6>
 801c63a:	0646      	lsls	r6, r0, #25
 801c63c:	d5fb      	bpl.n	801c636 <_printf_i+0xba>
 801c63e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c642:	2e00      	cmp	r6, #0
 801c644:	da03      	bge.n	801c64e <_printf_i+0xd2>
 801c646:	232d      	movs	r3, #45	; 0x2d
 801c648:	4276      	negs	r6, r6
 801c64a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c64e:	485a      	ldr	r0, [pc, #360]	; (801c7b8 <_printf_i+0x23c>)
 801c650:	230a      	movs	r3, #10
 801c652:	e012      	b.n	801c67a <_printf_i+0xfe>
 801c654:	682b      	ldr	r3, [r5, #0]
 801c656:	6820      	ldr	r0, [r4, #0]
 801c658:	1d19      	adds	r1, r3, #4
 801c65a:	6029      	str	r1, [r5, #0]
 801c65c:	0605      	lsls	r5, r0, #24
 801c65e:	d501      	bpl.n	801c664 <_printf_i+0xe8>
 801c660:	681e      	ldr	r6, [r3, #0]
 801c662:	e002      	b.n	801c66a <_printf_i+0xee>
 801c664:	0641      	lsls	r1, r0, #25
 801c666:	d5fb      	bpl.n	801c660 <_printf_i+0xe4>
 801c668:	881e      	ldrh	r6, [r3, #0]
 801c66a:	4853      	ldr	r0, [pc, #332]	; (801c7b8 <_printf_i+0x23c>)
 801c66c:	2f6f      	cmp	r7, #111	; 0x6f
 801c66e:	bf0c      	ite	eq
 801c670:	2308      	moveq	r3, #8
 801c672:	230a      	movne	r3, #10
 801c674:	2100      	movs	r1, #0
 801c676:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c67a:	6865      	ldr	r5, [r4, #4]
 801c67c:	60a5      	str	r5, [r4, #8]
 801c67e:	2d00      	cmp	r5, #0
 801c680:	bfa2      	ittt	ge
 801c682:	6821      	ldrge	r1, [r4, #0]
 801c684:	f021 0104 	bicge.w	r1, r1, #4
 801c688:	6021      	strge	r1, [r4, #0]
 801c68a:	b90e      	cbnz	r6, 801c690 <_printf_i+0x114>
 801c68c:	2d00      	cmp	r5, #0
 801c68e:	d04b      	beq.n	801c728 <_printf_i+0x1ac>
 801c690:	4615      	mov	r5, r2
 801c692:	fbb6 f1f3 	udiv	r1, r6, r3
 801c696:	fb03 6711 	mls	r7, r3, r1, r6
 801c69a:	5dc7      	ldrb	r7, [r0, r7]
 801c69c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c6a0:	4637      	mov	r7, r6
 801c6a2:	42bb      	cmp	r3, r7
 801c6a4:	460e      	mov	r6, r1
 801c6a6:	d9f4      	bls.n	801c692 <_printf_i+0x116>
 801c6a8:	2b08      	cmp	r3, #8
 801c6aa:	d10b      	bne.n	801c6c4 <_printf_i+0x148>
 801c6ac:	6823      	ldr	r3, [r4, #0]
 801c6ae:	07de      	lsls	r6, r3, #31
 801c6b0:	d508      	bpl.n	801c6c4 <_printf_i+0x148>
 801c6b2:	6923      	ldr	r3, [r4, #16]
 801c6b4:	6861      	ldr	r1, [r4, #4]
 801c6b6:	4299      	cmp	r1, r3
 801c6b8:	bfde      	ittt	le
 801c6ba:	2330      	movle	r3, #48	; 0x30
 801c6bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c6c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c6c4:	1b52      	subs	r2, r2, r5
 801c6c6:	6122      	str	r2, [r4, #16]
 801c6c8:	f8cd a000 	str.w	sl, [sp]
 801c6cc:	464b      	mov	r3, r9
 801c6ce:	aa03      	add	r2, sp, #12
 801c6d0:	4621      	mov	r1, r4
 801c6d2:	4640      	mov	r0, r8
 801c6d4:	f7ff fee4 	bl	801c4a0 <_printf_common>
 801c6d8:	3001      	adds	r0, #1
 801c6da:	d14a      	bne.n	801c772 <_printf_i+0x1f6>
 801c6dc:	f04f 30ff 	mov.w	r0, #4294967295
 801c6e0:	b004      	add	sp, #16
 801c6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6e6:	6823      	ldr	r3, [r4, #0]
 801c6e8:	f043 0320 	orr.w	r3, r3, #32
 801c6ec:	6023      	str	r3, [r4, #0]
 801c6ee:	4833      	ldr	r0, [pc, #204]	; (801c7bc <_printf_i+0x240>)
 801c6f0:	2778      	movs	r7, #120	; 0x78
 801c6f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c6f6:	6823      	ldr	r3, [r4, #0]
 801c6f8:	6829      	ldr	r1, [r5, #0]
 801c6fa:	061f      	lsls	r7, r3, #24
 801c6fc:	f851 6b04 	ldr.w	r6, [r1], #4
 801c700:	d402      	bmi.n	801c708 <_printf_i+0x18c>
 801c702:	065f      	lsls	r7, r3, #25
 801c704:	bf48      	it	mi
 801c706:	b2b6      	uxthmi	r6, r6
 801c708:	07df      	lsls	r7, r3, #31
 801c70a:	bf48      	it	mi
 801c70c:	f043 0320 	orrmi.w	r3, r3, #32
 801c710:	6029      	str	r1, [r5, #0]
 801c712:	bf48      	it	mi
 801c714:	6023      	strmi	r3, [r4, #0]
 801c716:	b91e      	cbnz	r6, 801c720 <_printf_i+0x1a4>
 801c718:	6823      	ldr	r3, [r4, #0]
 801c71a:	f023 0320 	bic.w	r3, r3, #32
 801c71e:	6023      	str	r3, [r4, #0]
 801c720:	2310      	movs	r3, #16
 801c722:	e7a7      	b.n	801c674 <_printf_i+0xf8>
 801c724:	4824      	ldr	r0, [pc, #144]	; (801c7b8 <_printf_i+0x23c>)
 801c726:	e7e4      	b.n	801c6f2 <_printf_i+0x176>
 801c728:	4615      	mov	r5, r2
 801c72a:	e7bd      	b.n	801c6a8 <_printf_i+0x12c>
 801c72c:	682b      	ldr	r3, [r5, #0]
 801c72e:	6826      	ldr	r6, [r4, #0]
 801c730:	6961      	ldr	r1, [r4, #20]
 801c732:	1d18      	adds	r0, r3, #4
 801c734:	6028      	str	r0, [r5, #0]
 801c736:	0635      	lsls	r5, r6, #24
 801c738:	681b      	ldr	r3, [r3, #0]
 801c73a:	d501      	bpl.n	801c740 <_printf_i+0x1c4>
 801c73c:	6019      	str	r1, [r3, #0]
 801c73e:	e002      	b.n	801c746 <_printf_i+0x1ca>
 801c740:	0670      	lsls	r0, r6, #25
 801c742:	d5fb      	bpl.n	801c73c <_printf_i+0x1c0>
 801c744:	8019      	strh	r1, [r3, #0]
 801c746:	2300      	movs	r3, #0
 801c748:	6123      	str	r3, [r4, #16]
 801c74a:	4615      	mov	r5, r2
 801c74c:	e7bc      	b.n	801c6c8 <_printf_i+0x14c>
 801c74e:	682b      	ldr	r3, [r5, #0]
 801c750:	1d1a      	adds	r2, r3, #4
 801c752:	602a      	str	r2, [r5, #0]
 801c754:	681d      	ldr	r5, [r3, #0]
 801c756:	6862      	ldr	r2, [r4, #4]
 801c758:	2100      	movs	r1, #0
 801c75a:	4628      	mov	r0, r5
 801c75c:	f7e3 fd10 	bl	8000180 <memchr>
 801c760:	b108      	cbz	r0, 801c766 <_printf_i+0x1ea>
 801c762:	1b40      	subs	r0, r0, r5
 801c764:	6060      	str	r0, [r4, #4]
 801c766:	6863      	ldr	r3, [r4, #4]
 801c768:	6123      	str	r3, [r4, #16]
 801c76a:	2300      	movs	r3, #0
 801c76c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c770:	e7aa      	b.n	801c6c8 <_printf_i+0x14c>
 801c772:	6923      	ldr	r3, [r4, #16]
 801c774:	462a      	mov	r2, r5
 801c776:	4649      	mov	r1, r9
 801c778:	4640      	mov	r0, r8
 801c77a:	47d0      	blx	sl
 801c77c:	3001      	adds	r0, #1
 801c77e:	d0ad      	beq.n	801c6dc <_printf_i+0x160>
 801c780:	6823      	ldr	r3, [r4, #0]
 801c782:	079b      	lsls	r3, r3, #30
 801c784:	d413      	bmi.n	801c7ae <_printf_i+0x232>
 801c786:	68e0      	ldr	r0, [r4, #12]
 801c788:	9b03      	ldr	r3, [sp, #12]
 801c78a:	4298      	cmp	r0, r3
 801c78c:	bfb8      	it	lt
 801c78e:	4618      	movlt	r0, r3
 801c790:	e7a6      	b.n	801c6e0 <_printf_i+0x164>
 801c792:	2301      	movs	r3, #1
 801c794:	4632      	mov	r2, r6
 801c796:	4649      	mov	r1, r9
 801c798:	4640      	mov	r0, r8
 801c79a:	47d0      	blx	sl
 801c79c:	3001      	adds	r0, #1
 801c79e:	d09d      	beq.n	801c6dc <_printf_i+0x160>
 801c7a0:	3501      	adds	r5, #1
 801c7a2:	68e3      	ldr	r3, [r4, #12]
 801c7a4:	9903      	ldr	r1, [sp, #12]
 801c7a6:	1a5b      	subs	r3, r3, r1
 801c7a8:	42ab      	cmp	r3, r5
 801c7aa:	dcf2      	bgt.n	801c792 <_printf_i+0x216>
 801c7ac:	e7eb      	b.n	801c786 <_printf_i+0x20a>
 801c7ae:	2500      	movs	r5, #0
 801c7b0:	f104 0619 	add.w	r6, r4, #25
 801c7b4:	e7f5      	b.n	801c7a2 <_printf_i+0x226>
 801c7b6:	bf00      	nop
 801c7b8:	08023a2b 	.word	0x08023a2b
 801c7bc:	08023a3c 	.word	0x08023a3c

0801c7c0 <_scanf_float>:
 801c7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7c4:	b087      	sub	sp, #28
 801c7c6:	4617      	mov	r7, r2
 801c7c8:	9303      	str	r3, [sp, #12]
 801c7ca:	688b      	ldr	r3, [r1, #8]
 801c7cc:	1e5a      	subs	r2, r3, #1
 801c7ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801c7d2:	bf83      	ittte	hi
 801c7d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801c7d8:	195b      	addhi	r3, r3, r5
 801c7da:	9302      	strhi	r3, [sp, #8]
 801c7dc:	2300      	movls	r3, #0
 801c7de:	bf86      	itte	hi
 801c7e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 801c7e4:	608b      	strhi	r3, [r1, #8]
 801c7e6:	9302      	strls	r3, [sp, #8]
 801c7e8:	680b      	ldr	r3, [r1, #0]
 801c7ea:	468b      	mov	fp, r1
 801c7ec:	2500      	movs	r5, #0
 801c7ee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801c7f2:	f84b 3b1c 	str.w	r3, [fp], #28
 801c7f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801c7fa:	4680      	mov	r8, r0
 801c7fc:	460c      	mov	r4, r1
 801c7fe:	465e      	mov	r6, fp
 801c800:	46aa      	mov	sl, r5
 801c802:	46a9      	mov	r9, r5
 801c804:	9501      	str	r5, [sp, #4]
 801c806:	68a2      	ldr	r2, [r4, #8]
 801c808:	b152      	cbz	r2, 801c820 <_scanf_float+0x60>
 801c80a:	683b      	ldr	r3, [r7, #0]
 801c80c:	781b      	ldrb	r3, [r3, #0]
 801c80e:	2b4e      	cmp	r3, #78	; 0x4e
 801c810:	d864      	bhi.n	801c8dc <_scanf_float+0x11c>
 801c812:	2b40      	cmp	r3, #64	; 0x40
 801c814:	d83c      	bhi.n	801c890 <_scanf_float+0xd0>
 801c816:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801c81a:	b2c8      	uxtb	r0, r1
 801c81c:	280e      	cmp	r0, #14
 801c81e:	d93a      	bls.n	801c896 <_scanf_float+0xd6>
 801c820:	f1b9 0f00 	cmp.w	r9, #0
 801c824:	d003      	beq.n	801c82e <_scanf_float+0x6e>
 801c826:	6823      	ldr	r3, [r4, #0]
 801c828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c82c:	6023      	str	r3, [r4, #0]
 801c82e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c832:	f1ba 0f01 	cmp.w	sl, #1
 801c836:	f200 8113 	bhi.w	801ca60 <_scanf_float+0x2a0>
 801c83a:	455e      	cmp	r6, fp
 801c83c:	f200 8105 	bhi.w	801ca4a <_scanf_float+0x28a>
 801c840:	2501      	movs	r5, #1
 801c842:	4628      	mov	r0, r5
 801c844:	b007      	add	sp, #28
 801c846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c84a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801c84e:	2a0d      	cmp	r2, #13
 801c850:	d8e6      	bhi.n	801c820 <_scanf_float+0x60>
 801c852:	a101      	add	r1, pc, #4	; (adr r1, 801c858 <_scanf_float+0x98>)
 801c854:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801c858:	0801c997 	.word	0x0801c997
 801c85c:	0801c821 	.word	0x0801c821
 801c860:	0801c821 	.word	0x0801c821
 801c864:	0801c821 	.word	0x0801c821
 801c868:	0801c9f7 	.word	0x0801c9f7
 801c86c:	0801c9cf 	.word	0x0801c9cf
 801c870:	0801c821 	.word	0x0801c821
 801c874:	0801c821 	.word	0x0801c821
 801c878:	0801c9a5 	.word	0x0801c9a5
 801c87c:	0801c821 	.word	0x0801c821
 801c880:	0801c821 	.word	0x0801c821
 801c884:	0801c821 	.word	0x0801c821
 801c888:	0801c821 	.word	0x0801c821
 801c88c:	0801c95d 	.word	0x0801c95d
 801c890:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801c894:	e7db      	b.n	801c84e <_scanf_float+0x8e>
 801c896:	290e      	cmp	r1, #14
 801c898:	d8c2      	bhi.n	801c820 <_scanf_float+0x60>
 801c89a:	a001      	add	r0, pc, #4	; (adr r0, 801c8a0 <_scanf_float+0xe0>)
 801c89c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801c8a0:	0801c94f 	.word	0x0801c94f
 801c8a4:	0801c821 	.word	0x0801c821
 801c8a8:	0801c94f 	.word	0x0801c94f
 801c8ac:	0801c9e3 	.word	0x0801c9e3
 801c8b0:	0801c821 	.word	0x0801c821
 801c8b4:	0801c8fd 	.word	0x0801c8fd
 801c8b8:	0801c939 	.word	0x0801c939
 801c8bc:	0801c939 	.word	0x0801c939
 801c8c0:	0801c939 	.word	0x0801c939
 801c8c4:	0801c939 	.word	0x0801c939
 801c8c8:	0801c939 	.word	0x0801c939
 801c8cc:	0801c939 	.word	0x0801c939
 801c8d0:	0801c939 	.word	0x0801c939
 801c8d4:	0801c939 	.word	0x0801c939
 801c8d8:	0801c939 	.word	0x0801c939
 801c8dc:	2b6e      	cmp	r3, #110	; 0x6e
 801c8de:	d809      	bhi.n	801c8f4 <_scanf_float+0x134>
 801c8e0:	2b60      	cmp	r3, #96	; 0x60
 801c8e2:	d8b2      	bhi.n	801c84a <_scanf_float+0x8a>
 801c8e4:	2b54      	cmp	r3, #84	; 0x54
 801c8e6:	d077      	beq.n	801c9d8 <_scanf_float+0x218>
 801c8e8:	2b59      	cmp	r3, #89	; 0x59
 801c8ea:	d199      	bne.n	801c820 <_scanf_float+0x60>
 801c8ec:	2d07      	cmp	r5, #7
 801c8ee:	d197      	bne.n	801c820 <_scanf_float+0x60>
 801c8f0:	2508      	movs	r5, #8
 801c8f2:	e029      	b.n	801c948 <_scanf_float+0x188>
 801c8f4:	2b74      	cmp	r3, #116	; 0x74
 801c8f6:	d06f      	beq.n	801c9d8 <_scanf_float+0x218>
 801c8f8:	2b79      	cmp	r3, #121	; 0x79
 801c8fa:	e7f6      	b.n	801c8ea <_scanf_float+0x12a>
 801c8fc:	6821      	ldr	r1, [r4, #0]
 801c8fe:	05c8      	lsls	r0, r1, #23
 801c900:	d51a      	bpl.n	801c938 <_scanf_float+0x178>
 801c902:	9b02      	ldr	r3, [sp, #8]
 801c904:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801c908:	6021      	str	r1, [r4, #0]
 801c90a:	f109 0901 	add.w	r9, r9, #1
 801c90e:	b11b      	cbz	r3, 801c918 <_scanf_float+0x158>
 801c910:	3b01      	subs	r3, #1
 801c912:	3201      	adds	r2, #1
 801c914:	9302      	str	r3, [sp, #8]
 801c916:	60a2      	str	r2, [r4, #8]
 801c918:	68a3      	ldr	r3, [r4, #8]
 801c91a:	3b01      	subs	r3, #1
 801c91c:	60a3      	str	r3, [r4, #8]
 801c91e:	6923      	ldr	r3, [r4, #16]
 801c920:	3301      	adds	r3, #1
 801c922:	6123      	str	r3, [r4, #16]
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	3b01      	subs	r3, #1
 801c928:	2b00      	cmp	r3, #0
 801c92a:	607b      	str	r3, [r7, #4]
 801c92c:	f340 8084 	ble.w	801ca38 <_scanf_float+0x278>
 801c930:	683b      	ldr	r3, [r7, #0]
 801c932:	3301      	adds	r3, #1
 801c934:	603b      	str	r3, [r7, #0]
 801c936:	e766      	b.n	801c806 <_scanf_float+0x46>
 801c938:	eb1a 0f05 	cmn.w	sl, r5
 801c93c:	f47f af70 	bne.w	801c820 <_scanf_float+0x60>
 801c940:	6822      	ldr	r2, [r4, #0]
 801c942:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801c946:	6022      	str	r2, [r4, #0]
 801c948:	f806 3b01 	strb.w	r3, [r6], #1
 801c94c:	e7e4      	b.n	801c918 <_scanf_float+0x158>
 801c94e:	6822      	ldr	r2, [r4, #0]
 801c950:	0610      	lsls	r0, r2, #24
 801c952:	f57f af65 	bpl.w	801c820 <_scanf_float+0x60>
 801c956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c95a:	e7f4      	b.n	801c946 <_scanf_float+0x186>
 801c95c:	f1ba 0f00 	cmp.w	sl, #0
 801c960:	d10e      	bne.n	801c980 <_scanf_float+0x1c0>
 801c962:	f1b9 0f00 	cmp.w	r9, #0
 801c966:	d10e      	bne.n	801c986 <_scanf_float+0x1c6>
 801c968:	6822      	ldr	r2, [r4, #0]
 801c96a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c96e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c972:	d108      	bne.n	801c986 <_scanf_float+0x1c6>
 801c974:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c978:	6022      	str	r2, [r4, #0]
 801c97a:	f04f 0a01 	mov.w	sl, #1
 801c97e:	e7e3      	b.n	801c948 <_scanf_float+0x188>
 801c980:	f1ba 0f02 	cmp.w	sl, #2
 801c984:	d055      	beq.n	801ca32 <_scanf_float+0x272>
 801c986:	2d01      	cmp	r5, #1
 801c988:	d002      	beq.n	801c990 <_scanf_float+0x1d0>
 801c98a:	2d04      	cmp	r5, #4
 801c98c:	f47f af48 	bne.w	801c820 <_scanf_float+0x60>
 801c990:	3501      	adds	r5, #1
 801c992:	b2ed      	uxtb	r5, r5
 801c994:	e7d8      	b.n	801c948 <_scanf_float+0x188>
 801c996:	f1ba 0f01 	cmp.w	sl, #1
 801c99a:	f47f af41 	bne.w	801c820 <_scanf_float+0x60>
 801c99e:	f04f 0a02 	mov.w	sl, #2
 801c9a2:	e7d1      	b.n	801c948 <_scanf_float+0x188>
 801c9a4:	b97d      	cbnz	r5, 801c9c6 <_scanf_float+0x206>
 801c9a6:	f1b9 0f00 	cmp.w	r9, #0
 801c9aa:	f47f af3c 	bne.w	801c826 <_scanf_float+0x66>
 801c9ae:	6822      	ldr	r2, [r4, #0]
 801c9b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c9b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c9b8:	f47f af39 	bne.w	801c82e <_scanf_float+0x6e>
 801c9bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c9c0:	6022      	str	r2, [r4, #0]
 801c9c2:	2501      	movs	r5, #1
 801c9c4:	e7c0      	b.n	801c948 <_scanf_float+0x188>
 801c9c6:	2d03      	cmp	r5, #3
 801c9c8:	d0e2      	beq.n	801c990 <_scanf_float+0x1d0>
 801c9ca:	2d05      	cmp	r5, #5
 801c9cc:	e7de      	b.n	801c98c <_scanf_float+0x1cc>
 801c9ce:	2d02      	cmp	r5, #2
 801c9d0:	f47f af26 	bne.w	801c820 <_scanf_float+0x60>
 801c9d4:	2503      	movs	r5, #3
 801c9d6:	e7b7      	b.n	801c948 <_scanf_float+0x188>
 801c9d8:	2d06      	cmp	r5, #6
 801c9da:	f47f af21 	bne.w	801c820 <_scanf_float+0x60>
 801c9de:	2507      	movs	r5, #7
 801c9e0:	e7b2      	b.n	801c948 <_scanf_float+0x188>
 801c9e2:	6822      	ldr	r2, [r4, #0]
 801c9e4:	0591      	lsls	r1, r2, #22
 801c9e6:	f57f af1b 	bpl.w	801c820 <_scanf_float+0x60>
 801c9ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801c9ee:	6022      	str	r2, [r4, #0]
 801c9f0:	f8cd 9004 	str.w	r9, [sp, #4]
 801c9f4:	e7a8      	b.n	801c948 <_scanf_float+0x188>
 801c9f6:	6822      	ldr	r2, [r4, #0]
 801c9f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801c9fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801ca00:	d006      	beq.n	801ca10 <_scanf_float+0x250>
 801ca02:	0550      	lsls	r0, r2, #21
 801ca04:	f57f af0c 	bpl.w	801c820 <_scanf_float+0x60>
 801ca08:	f1b9 0f00 	cmp.w	r9, #0
 801ca0c:	f43f af0f 	beq.w	801c82e <_scanf_float+0x6e>
 801ca10:	0591      	lsls	r1, r2, #22
 801ca12:	bf58      	it	pl
 801ca14:	9901      	ldrpl	r1, [sp, #4]
 801ca16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ca1a:	bf58      	it	pl
 801ca1c:	eba9 0101 	subpl.w	r1, r9, r1
 801ca20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801ca24:	bf58      	it	pl
 801ca26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801ca2a:	6022      	str	r2, [r4, #0]
 801ca2c:	f04f 0900 	mov.w	r9, #0
 801ca30:	e78a      	b.n	801c948 <_scanf_float+0x188>
 801ca32:	f04f 0a03 	mov.w	sl, #3
 801ca36:	e787      	b.n	801c948 <_scanf_float+0x188>
 801ca38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ca3c:	4639      	mov	r1, r7
 801ca3e:	4640      	mov	r0, r8
 801ca40:	4798      	blx	r3
 801ca42:	2800      	cmp	r0, #0
 801ca44:	f43f aedf 	beq.w	801c806 <_scanf_float+0x46>
 801ca48:	e6ea      	b.n	801c820 <_scanf_float+0x60>
 801ca4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ca4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ca52:	463a      	mov	r2, r7
 801ca54:	4640      	mov	r0, r8
 801ca56:	4798      	blx	r3
 801ca58:	6923      	ldr	r3, [r4, #16]
 801ca5a:	3b01      	subs	r3, #1
 801ca5c:	6123      	str	r3, [r4, #16]
 801ca5e:	e6ec      	b.n	801c83a <_scanf_float+0x7a>
 801ca60:	1e6b      	subs	r3, r5, #1
 801ca62:	2b06      	cmp	r3, #6
 801ca64:	d825      	bhi.n	801cab2 <_scanf_float+0x2f2>
 801ca66:	2d02      	cmp	r5, #2
 801ca68:	d836      	bhi.n	801cad8 <_scanf_float+0x318>
 801ca6a:	455e      	cmp	r6, fp
 801ca6c:	f67f aee8 	bls.w	801c840 <_scanf_float+0x80>
 801ca70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ca74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ca78:	463a      	mov	r2, r7
 801ca7a:	4640      	mov	r0, r8
 801ca7c:	4798      	blx	r3
 801ca7e:	6923      	ldr	r3, [r4, #16]
 801ca80:	3b01      	subs	r3, #1
 801ca82:	6123      	str	r3, [r4, #16]
 801ca84:	e7f1      	b.n	801ca6a <_scanf_float+0x2aa>
 801ca86:	9802      	ldr	r0, [sp, #8]
 801ca88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ca8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801ca90:	9002      	str	r0, [sp, #8]
 801ca92:	463a      	mov	r2, r7
 801ca94:	4640      	mov	r0, r8
 801ca96:	4798      	blx	r3
 801ca98:	6923      	ldr	r3, [r4, #16]
 801ca9a:	3b01      	subs	r3, #1
 801ca9c:	6123      	str	r3, [r4, #16]
 801ca9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801caa2:	fa5f fa8a 	uxtb.w	sl, sl
 801caa6:	f1ba 0f02 	cmp.w	sl, #2
 801caaa:	d1ec      	bne.n	801ca86 <_scanf_float+0x2c6>
 801caac:	3d03      	subs	r5, #3
 801caae:	b2ed      	uxtb	r5, r5
 801cab0:	1b76      	subs	r6, r6, r5
 801cab2:	6823      	ldr	r3, [r4, #0]
 801cab4:	05da      	lsls	r2, r3, #23
 801cab6:	d52f      	bpl.n	801cb18 <_scanf_float+0x358>
 801cab8:	055b      	lsls	r3, r3, #21
 801caba:	d510      	bpl.n	801cade <_scanf_float+0x31e>
 801cabc:	455e      	cmp	r6, fp
 801cabe:	f67f aebf 	bls.w	801c840 <_scanf_float+0x80>
 801cac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801cac6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801caca:	463a      	mov	r2, r7
 801cacc:	4640      	mov	r0, r8
 801cace:	4798      	blx	r3
 801cad0:	6923      	ldr	r3, [r4, #16]
 801cad2:	3b01      	subs	r3, #1
 801cad4:	6123      	str	r3, [r4, #16]
 801cad6:	e7f1      	b.n	801cabc <_scanf_float+0x2fc>
 801cad8:	46aa      	mov	sl, r5
 801cada:	9602      	str	r6, [sp, #8]
 801cadc:	e7df      	b.n	801ca9e <_scanf_float+0x2de>
 801cade:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801cae2:	6923      	ldr	r3, [r4, #16]
 801cae4:	2965      	cmp	r1, #101	; 0x65
 801cae6:	f103 33ff 	add.w	r3, r3, #4294967295
 801caea:	f106 35ff 	add.w	r5, r6, #4294967295
 801caee:	6123      	str	r3, [r4, #16]
 801caf0:	d00c      	beq.n	801cb0c <_scanf_float+0x34c>
 801caf2:	2945      	cmp	r1, #69	; 0x45
 801caf4:	d00a      	beq.n	801cb0c <_scanf_float+0x34c>
 801caf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801cafa:	463a      	mov	r2, r7
 801cafc:	4640      	mov	r0, r8
 801cafe:	4798      	blx	r3
 801cb00:	6923      	ldr	r3, [r4, #16]
 801cb02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801cb06:	3b01      	subs	r3, #1
 801cb08:	1eb5      	subs	r5, r6, #2
 801cb0a:	6123      	str	r3, [r4, #16]
 801cb0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801cb10:	463a      	mov	r2, r7
 801cb12:	4640      	mov	r0, r8
 801cb14:	4798      	blx	r3
 801cb16:	462e      	mov	r6, r5
 801cb18:	6825      	ldr	r5, [r4, #0]
 801cb1a:	f015 0510 	ands.w	r5, r5, #16
 801cb1e:	d158      	bne.n	801cbd2 <_scanf_float+0x412>
 801cb20:	7035      	strb	r5, [r6, #0]
 801cb22:	6823      	ldr	r3, [r4, #0]
 801cb24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801cb28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cb2c:	d11c      	bne.n	801cb68 <_scanf_float+0x3a8>
 801cb2e:	9b01      	ldr	r3, [sp, #4]
 801cb30:	454b      	cmp	r3, r9
 801cb32:	eba3 0209 	sub.w	r2, r3, r9
 801cb36:	d124      	bne.n	801cb82 <_scanf_float+0x3c2>
 801cb38:	2200      	movs	r2, #0
 801cb3a:	4659      	mov	r1, fp
 801cb3c:	4640      	mov	r0, r8
 801cb3e:	f7ff f8df 	bl	801bd00 <_strtod_r>
 801cb42:	9b03      	ldr	r3, [sp, #12]
 801cb44:	6821      	ldr	r1, [r4, #0]
 801cb46:	681b      	ldr	r3, [r3, #0]
 801cb48:	f011 0f02 	tst.w	r1, #2
 801cb4c:	ec57 6b10 	vmov	r6, r7, d0
 801cb50:	f103 0204 	add.w	r2, r3, #4
 801cb54:	d020      	beq.n	801cb98 <_scanf_float+0x3d8>
 801cb56:	9903      	ldr	r1, [sp, #12]
 801cb58:	600a      	str	r2, [r1, #0]
 801cb5a:	681b      	ldr	r3, [r3, #0]
 801cb5c:	e9c3 6700 	strd	r6, r7, [r3]
 801cb60:	68e3      	ldr	r3, [r4, #12]
 801cb62:	3301      	adds	r3, #1
 801cb64:	60e3      	str	r3, [r4, #12]
 801cb66:	e66c      	b.n	801c842 <_scanf_float+0x82>
 801cb68:	9b04      	ldr	r3, [sp, #16]
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d0e4      	beq.n	801cb38 <_scanf_float+0x378>
 801cb6e:	9905      	ldr	r1, [sp, #20]
 801cb70:	230a      	movs	r3, #10
 801cb72:	462a      	mov	r2, r5
 801cb74:	3101      	adds	r1, #1
 801cb76:	4640      	mov	r0, r8
 801cb78:	f7ff f9b0 	bl	801bedc <_strtol_r>
 801cb7c:	9b04      	ldr	r3, [sp, #16]
 801cb7e:	9e05      	ldr	r6, [sp, #20]
 801cb80:	1ac2      	subs	r2, r0, r3
 801cb82:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801cb86:	429e      	cmp	r6, r3
 801cb88:	bf28      	it	cs
 801cb8a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801cb8e:	4912      	ldr	r1, [pc, #72]	; (801cbd8 <_scanf_float+0x418>)
 801cb90:	4630      	mov	r0, r6
 801cb92:	f000 f91b 	bl	801cdcc <siprintf>
 801cb96:	e7cf      	b.n	801cb38 <_scanf_float+0x378>
 801cb98:	f011 0f04 	tst.w	r1, #4
 801cb9c:	9903      	ldr	r1, [sp, #12]
 801cb9e:	600a      	str	r2, [r1, #0]
 801cba0:	d1db      	bne.n	801cb5a <_scanf_float+0x39a>
 801cba2:	f8d3 8000 	ldr.w	r8, [r3]
 801cba6:	ee10 2a10 	vmov	r2, s0
 801cbaa:	ee10 0a10 	vmov	r0, s0
 801cbae:	463b      	mov	r3, r7
 801cbb0:	4639      	mov	r1, r7
 801cbb2:	f7e3 ff93 	bl	8000adc <__aeabi_dcmpun>
 801cbb6:	b128      	cbz	r0, 801cbc4 <_scanf_float+0x404>
 801cbb8:	4808      	ldr	r0, [pc, #32]	; (801cbdc <_scanf_float+0x41c>)
 801cbba:	f000 fa9d 	bl	801d0f8 <nanf>
 801cbbe:	ed88 0a00 	vstr	s0, [r8]
 801cbc2:	e7cd      	b.n	801cb60 <_scanf_float+0x3a0>
 801cbc4:	4630      	mov	r0, r6
 801cbc6:	4639      	mov	r1, r7
 801cbc8:	f7e3 ffe6 	bl	8000b98 <__aeabi_d2f>
 801cbcc:	f8c8 0000 	str.w	r0, [r8]
 801cbd0:	e7c6      	b.n	801cb60 <_scanf_float+0x3a0>
 801cbd2:	2500      	movs	r5, #0
 801cbd4:	e635      	b.n	801c842 <_scanf_float+0x82>
 801cbd6:	bf00      	nop
 801cbd8:	08023a4d 	.word	0x08023a4d
 801cbdc:	08023b06 	.word	0x08023b06

0801cbe0 <std>:
 801cbe0:	2300      	movs	r3, #0
 801cbe2:	b510      	push	{r4, lr}
 801cbe4:	4604      	mov	r4, r0
 801cbe6:	e9c0 3300 	strd	r3, r3, [r0]
 801cbea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cbee:	6083      	str	r3, [r0, #8]
 801cbf0:	8181      	strh	r1, [r0, #12]
 801cbf2:	6643      	str	r3, [r0, #100]	; 0x64
 801cbf4:	81c2      	strh	r2, [r0, #14]
 801cbf6:	6183      	str	r3, [r0, #24]
 801cbf8:	4619      	mov	r1, r3
 801cbfa:	2208      	movs	r2, #8
 801cbfc:	305c      	adds	r0, #92	; 0x5c
 801cbfe:	f000 f948 	bl	801ce92 <memset>
 801cc02:	4b0d      	ldr	r3, [pc, #52]	; (801cc38 <std+0x58>)
 801cc04:	6263      	str	r3, [r4, #36]	; 0x24
 801cc06:	4b0d      	ldr	r3, [pc, #52]	; (801cc3c <std+0x5c>)
 801cc08:	62a3      	str	r3, [r4, #40]	; 0x28
 801cc0a:	4b0d      	ldr	r3, [pc, #52]	; (801cc40 <std+0x60>)
 801cc0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cc0e:	4b0d      	ldr	r3, [pc, #52]	; (801cc44 <std+0x64>)
 801cc10:	6323      	str	r3, [r4, #48]	; 0x30
 801cc12:	4b0d      	ldr	r3, [pc, #52]	; (801cc48 <std+0x68>)
 801cc14:	6224      	str	r4, [r4, #32]
 801cc16:	429c      	cmp	r4, r3
 801cc18:	d006      	beq.n	801cc28 <std+0x48>
 801cc1a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801cc1e:	4294      	cmp	r4, r2
 801cc20:	d002      	beq.n	801cc28 <std+0x48>
 801cc22:	33d0      	adds	r3, #208	; 0xd0
 801cc24:	429c      	cmp	r4, r3
 801cc26:	d105      	bne.n	801cc34 <std+0x54>
 801cc28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cc2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc30:	f000 ba40 	b.w	801d0b4 <__retarget_lock_init_recursive>
 801cc34:	bd10      	pop	{r4, pc}
 801cc36:	bf00      	nop
 801cc38:	0801ce0d 	.word	0x0801ce0d
 801cc3c:	0801ce2f 	.word	0x0801ce2f
 801cc40:	0801ce67 	.word	0x0801ce67
 801cc44:	0801ce8b 	.word	0x0801ce8b
 801cc48:	200030ec 	.word	0x200030ec

0801cc4c <stdio_exit_handler>:
 801cc4c:	4a02      	ldr	r2, [pc, #8]	; (801cc58 <stdio_exit_handler+0xc>)
 801cc4e:	4903      	ldr	r1, [pc, #12]	; (801cc5c <stdio_exit_handler+0x10>)
 801cc50:	4803      	ldr	r0, [pc, #12]	; (801cc60 <stdio_exit_handler+0x14>)
 801cc52:	f000 b869 	b.w	801cd28 <_fwalk_sglue>
 801cc56:	bf00      	nop
 801cc58:	20000144 	.word	0x20000144
 801cc5c:	0801f559 	.word	0x0801f559
 801cc60:	200002bc 	.word	0x200002bc

0801cc64 <cleanup_stdio>:
 801cc64:	6841      	ldr	r1, [r0, #4]
 801cc66:	4b0c      	ldr	r3, [pc, #48]	; (801cc98 <cleanup_stdio+0x34>)
 801cc68:	4299      	cmp	r1, r3
 801cc6a:	b510      	push	{r4, lr}
 801cc6c:	4604      	mov	r4, r0
 801cc6e:	d001      	beq.n	801cc74 <cleanup_stdio+0x10>
 801cc70:	f002 fc72 	bl	801f558 <_fflush_r>
 801cc74:	68a1      	ldr	r1, [r4, #8]
 801cc76:	4b09      	ldr	r3, [pc, #36]	; (801cc9c <cleanup_stdio+0x38>)
 801cc78:	4299      	cmp	r1, r3
 801cc7a:	d002      	beq.n	801cc82 <cleanup_stdio+0x1e>
 801cc7c:	4620      	mov	r0, r4
 801cc7e:	f002 fc6b 	bl	801f558 <_fflush_r>
 801cc82:	68e1      	ldr	r1, [r4, #12]
 801cc84:	4b06      	ldr	r3, [pc, #24]	; (801cca0 <cleanup_stdio+0x3c>)
 801cc86:	4299      	cmp	r1, r3
 801cc88:	d004      	beq.n	801cc94 <cleanup_stdio+0x30>
 801cc8a:	4620      	mov	r0, r4
 801cc8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc90:	f002 bc62 	b.w	801f558 <_fflush_r>
 801cc94:	bd10      	pop	{r4, pc}
 801cc96:	bf00      	nop
 801cc98:	200030ec 	.word	0x200030ec
 801cc9c:	20003154 	.word	0x20003154
 801cca0:	200031bc 	.word	0x200031bc

0801cca4 <global_stdio_init.part.0>:
 801cca4:	b510      	push	{r4, lr}
 801cca6:	4b0b      	ldr	r3, [pc, #44]	; (801ccd4 <global_stdio_init.part.0+0x30>)
 801cca8:	4c0b      	ldr	r4, [pc, #44]	; (801ccd8 <global_stdio_init.part.0+0x34>)
 801ccaa:	4a0c      	ldr	r2, [pc, #48]	; (801ccdc <global_stdio_init.part.0+0x38>)
 801ccac:	601a      	str	r2, [r3, #0]
 801ccae:	4620      	mov	r0, r4
 801ccb0:	2200      	movs	r2, #0
 801ccb2:	2104      	movs	r1, #4
 801ccb4:	f7ff ff94 	bl	801cbe0 <std>
 801ccb8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801ccbc:	2201      	movs	r2, #1
 801ccbe:	2109      	movs	r1, #9
 801ccc0:	f7ff ff8e 	bl	801cbe0 <std>
 801ccc4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801ccc8:	2202      	movs	r2, #2
 801ccca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ccce:	2112      	movs	r1, #18
 801ccd0:	f7ff bf86 	b.w	801cbe0 <std>
 801ccd4:	20003224 	.word	0x20003224
 801ccd8:	200030ec 	.word	0x200030ec
 801ccdc:	0801cc4d 	.word	0x0801cc4d

0801cce0 <__sfp_lock_acquire>:
 801cce0:	4801      	ldr	r0, [pc, #4]	; (801cce8 <__sfp_lock_acquire+0x8>)
 801cce2:	f000 b9e8 	b.w	801d0b6 <__retarget_lock_acquire_recursive>
 801cce6:	bf00      	nop
 801cce8:	2000322d 	.word	0x2000322d

0801ccec <__sfp_lock_release>:
 801ccec:	4801      	ldr	r0, [pc, #4]	; (801ccf4 <__sfp_lock_release+0x8>)
 801ccee:	f000 b9e3 	b.w	801d0b8 <__retarget_lock_release_recursive>
 801ccf2:	bf00      	nop
 801ccf4:	2000322d 	.word	0x2000322d

0801ccf8 <__sinit>:
 801ccf8:	b510      	push	{r4, lr}
 801ccfa:	4604      	mov	r4, r0
 801ccfc:	f7ff fff0 	bl	801cce0 <__sfp_lock_acquire>
 801cd00:	6a23      	ldr	r3, [r4, #32]
 801cd02:	b11b      	cbz	r3, 801cd0c <__sinit+0x14>
 801cd04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cd08:	f7ff bff0 	b.w	801ccec <__sfp_lock_release>
 801cd0c:	4b04      	ldr	r3, [pc, #16]	; (801cd20 <__sinit+0x28>)
 801cd0e:	6223      	str	r3, [r4, #32]
 801cd10:	4b04      	ldr	r3, [pc, #16]	; (801cd24 <__sinit+0x2c>)
 801cd12:	681b      	ldr	r3, [r3, #0]
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d1f5      	bne.n	801cd04 <__sinit+0xc>
 801cd18:	f7ff ffc4 	bl	801cca4 <global_stdio_init.part.0>
 801cd1c:	e7f2      	b.n	801cd04 <__sinit+0xc>
 801cd1e:	bf00      	nop
 801cd20:	0801cc65 	.word	0x0801cc65
 801cd24:	20003224 	.word	0x20003224

0801cd28 <_fwalk_sglue>:
 801cd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cd2c:	4607      	mov	r7, r0
 801cd2e:	4688      	mov	r8, r1
 801cd30:	4614      	mov	r4, r2
 801cd32:	2600      	movs	r6, #0
 801cd34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cd38:	f1b9 0901 	subs.w	r9, r9, #1
 801cd3c:	d505      	bpl.n	801cd4a <_fwalk_sglue+0x22>
 801cd3e:	6824      	ldr	r4, [r4, #0]
 801cd40:	2c00      	cmp	r4, #0
 801cd42:	d1f7      	bne.n	801cd34 <_fwalk_sglue+0xc>
 801cd44:	4630      	mov	r0, r6
 801cd46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd4a:	89ab      	ldrh	r3, [r5, #12]
 801cd4c:	2b01      	cmp	r3, #1
 801cd4e:	d907      	bls.n	801cd60 <_fwalk_sglue+0x38>
 801cd50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cd54:	3301      	adds	r3, #1
 801cd56:	d003      	beq.n	801cd60 <_fwalk_sglue+0x38>
 801cd58:	4629      	mov	r1, r5
 801cd5a:	4638      	mov	r0, r7
 801cd5c:	47c0      	blx	r8
 801cd5e:	4306      	orrs	r6, r0
 801cd60:	3568      	adds	r5, #104	; 0x68
 801cd62:	e7e9      	b.n	801cd38 <_fwalk_sglue+0x10>

0801cd64 <sniprintf>:
 801cd64:	b40c      	push	{r2, r3}
 801cd66:	b530      	push	{r4, r5, lr}
 801cd68:	4b17      	ldr	r3, [pc, #92]	; (801cdc8 <sniprintf+0x64>)
 801cd6a:	1e0c      	subs	r4, r1, #0
 801cd6c:	681d      	ldr	r5, [r3, #0]
 801cd6e:	b09d      	sub	sp, #116	; 0x74
 801cd70:	da08      	bge.n	801cd84 <sniprintf+0x20>
 801cd72:	238b      	movs	r3, #139	; 0x8b
 801cd74:	602b      	str	r3, [r5, #0]
 801cd76:	f04f 30ff 	mov.w	r0, #4294967295
 801cd7a:	b01d      	add	sp, #116	; 0x74
 801cd7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cd80:	b002      	add	sp, #8
 801cd82:	4770      	bx	lr
 801cd84:	f44f 7302 	mov.w	r3, #520	; 0x208
 801cd88:	f8ad 3014 	strh.w	r3, [sp, #20]
 801cd8c:	bf14      	ite	ne
 801cd8e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801cd92:	4623      	moveq	r3, r4
 801cd94:	9304      	str	r3, [sp, #16]
 801cd96:	9307      	str	r3, [sp, #28]
 801cd98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cd9c:	9002      	str	r0, [sp, #8]
 801cd9e:	9006      	str	r0, [sp, #24]
 801cda0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cda4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801cda6:	ab21      	add	r3, sp, #132	; 0x84
 801cda8:	a902      	add	r1, sp, #8
 801cdaa:	4628      	mov	r0, r5
 801cdac:	9301      	str	r3, [sp, #4]
 801cdae:	f002 f90b 	bl	801efc8 <_svfiprintf_r>
 801cdb2:	1c43      	adds	r3, r0, #1
 801cdb4:	bfbc      	itt	lt
 801cdb6:	238b      	movlt	r3, #139	; 0x8b
 801cdb8:	602b      	strlt	r3, [r5, #0]
 801cdba:	2c00      	cmp	r4, #0
 801cdbc:	d0dd      	beq.n	801cd7a <sniprintf+0x16>
 801cdbe:	9b02      	ldr	r3, [sp, #8]
 801cdc0:	2200      	movs	r2, #0
 801cdc2:	701a      	strb	r2, [r3, #0]
 801cdc4:	e7d9      	b.n	801cd7a <sniprintf+0x16>
 801cdc6:	bf00      	nop
 801cdc8:	20000308 	.word	0x20000308

0801cdcc <siprintf>:
 801cdcc:	b40e      	push	{r1, r2, r3}
 801cdce:	b500      	push	{lr}
 801cdd0:	b09c      	sub	sp, #112	; 0x70
 801cdd2:	ab1d      	add	r3, sp, #116	; 0x74
 801cdd4:	9002      	str	r0, [sp, #8]
 801cdd6:	9006      	str	r0, [sp, #24]
 801cdd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801cddc:	4809      	ldr	r0, [pc, #36]	; (801ce04 <siprintf+0x38>)
 801cdde:	9107      	str	r1, [sp, #28]
 801cde0:	9104      	str	r1, [sp, #16]
 801cde2:	4909      	ldr	r1, [pc, #36]	; (801ce08 <siprintf+0x3c>)
 801cde4:	f853 2b04 	ldr.w	r2, [r3], #4
 801cde8:	9105      	str	r1, [sp, #20]
 801cdea:	6800      	ldr	r0, [r0, #0]
 801cdec:	9301      	str	r3, [sp, #4]
 801cdee:	a902      	add	r1, sp, #8
 801cdf0:	f002 f8ea 	bl	801efc8 <_svfiprintf_r>
 801cdf4:	9b02      	ldr	r3, [sp, #8]
 801cdf6:	2200      	movs	r2, #0
 801cdf8:	701a      	strb	r2, [r3, #0]
 801cdfa:	b01c      	add	sp, #112	; 0x70
 801cdfc:	f85d eb04 	ldr.w	lr, [sp], #4
 801ce00:	b003      	add	sp, #12
 801ce02:	4770      	bx	lr
 801ce04:	20000308 	.word	0x20000308
 801ce08:	ffff0208 	.word	0xffff0208

0801ce0c <__sread>:
 801ce0c:	b510      	push	{r4, lr}
 801ce0e:	460c      	mov	r4, r1
 801ce10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce14:	f000 f8f0 	bl	801cff8 <_read_r>
 801ce18:	2800      	cmp	r0, #0
 801ce1a:	bfab      	itete	ge
 801ce1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ce1e:	89a3      	ldrhlt	r3, [r4, #12]
 801ce20:	181b      	addge	r3, r3, r0
 801ce22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ce26:	bfac      	ite	ge
 801ce28:	6563      	strge	r3, [r4, #84]	; 0x54
 801ce2a:	81a3      	strhlt	r3, [r4, #12]
 801ce2c:	bd10      	pop	{r4, pc}

0801ce2e <__swrite>:
 801ce2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce32:	461f      	mov	r7, r3
 801ce34:	898b      	ldrh	r3, [r1, #12]
 801ce36:	05db      	lsls	r3, r3, #23
 801ce38:	4605      	mov	r5, r0
 801ce3a:	460c      	mov	r4, r1
 801ce3c:	4616      	mov	r6, r2
 801ce3e:	d505      	bpl.n	801ce4c <__swrite+0x1e>
 801ce40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce44:	2302      	movs	r3, #2
 801ce46:	2200      	movs	r2, #0
 801ce48:	f000 f8c4 	bl	801cfd4 <_lseek_r>
 801ce4c:	89a3      	ldrh	r3, [r4, #12]
 801ce4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ce52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ce56:	81a3      	strh	r3, [r4, #12]
 801ce58:	4632      	mov	r2, r6
 801ce5a:	463b      	mov	r3, r7
 801ce5c:	4628      	mov	r0, r5
 801ce5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ce62:	f000 b8eb 	b.w	801d03c <_write_r>

0801ce66 <__sseek>:
 801ce66:	b510      	push	{r4, lr}
 801ce68:	460c      	mov	r4, r1
 801ce6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce6e:	f000 f8b1 	bl	801cfd4 <_lseek_r>
 801ce72:	1c43      	adds	r3, r0, #1
 801ce74:	89a3      	ldrh	r3, [r4, #12]
 801ce76:	bf15      	itete	ne
 801ce78:	6560      	strne	r0, [r4, #84]	; 0x54
 801ce7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ce7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ce82:	81a3      	strheq	r3, [r4, #12]
 801ce84:	bf18      	it	ne
 801ce86:	81a3      	strhne	r3, [r4, #12]
 801ce88:	bd10      	pop	{r4, pc}

0801ce8a <__sclose>:
 801ce8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce8e:	f000 b891 	b.w	801cfb4 <_close_r>

0801ce92 <memset>:
 801ce92:	4402      	add	r2, r0
 801ce94:	4603      	mov	r3, r0
 801ce96:	4293      	cmp	r3, r2
 801ce98:	d100      	bne.n	801ce9c <memset+0xa>
 801ce9a:	4770      	bx	lr
 801ce9c:	f803 1b01 	strb.w	r1, [r3], #1
 801cea0:	e7f9      	b.n	801ce96 <memset+0x4>

0801cea2 <strncmp>:
 801cea2:	b510      	push	{r4, lr}
 801cea4:	b16a      	cbz	r2, 801cec2 <strncmp+0x20>
 801cea6:	3901      	subs	r1, #1
 801cea8:	1884      	adds	r4, r0, r2
 801ceaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ceae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801ceb2:	429a      	cmp	r2, r3
 801ceb4:	d103      	bne.n	801cebe <strncmp+0x1c>
 801ceb6:	42a0      	cmp	r0, r4
 801ceb8:	d001      	beq.n	801cebe <strncmp+0x1c>
 801ceba:	2a00      	cmp	r2, #0
 801cebc:	d1f5      	bne.n	801ceaa <strncmp+0x8>
 801cebe:	1ad0      	subs	r0, r2, r3
 801cec0:	bd10      	pop	{r4, pc}
 801cec2:	4610      	mov	r0, r2
 801cec4:	e7fc      	b.n	801cec0 <strncmp+0x1e>
	...

0801cec8 <strtok>:
 801cec8:	4b16      	ldr	r3, [pc, #88]	; (801cf24 <strtok+0x5c>)
 801ceca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cecc:	681e      	ldr	r6, [r3, #0]
 801cece:	6c74      	ldr	r4, [r6, #68]	; 0x44
 801ced0:	4605      	mov	r5, r0
 801ced2:	b9fc      	cbnz	r4, 801cf14 <strtok+0x4c>
 801ced4:	2050      	movs	r0, #80	; 0x50
 801ced6:	9101      	str	r1, [sp, #4]
 801ced8:	f7fe f848 	bl	801af6c <malloc>
 801cedc:	9901      	ldr	r1, [sp, #4]
 801cede:	6470      	str	r0, [r6, #68]	; 0x44
 801cee0:	4602      	mov	r2, r0
 801cee2:	b920      	cbnz	r0, 801ceee <strtok+0x26>
 801cee4:	4b10      	ldr	r3, [pc, #64]	; (801cf28 <strtok+0x60>)
 801cee6:	4811      	ldr	r0, [pc, #68]	; (801cf2c <strtok+0x64>)
 801cee8:	215b      	movs	r1, #91	; 0x5b
 801ceea:	f000 f90b 	bl	801d104 <__assert_func>
 801ceee:	e9c0 4400 	strd	r4, r4, [r0]
 801cef2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801cef6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801cefa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801cefe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801cf02:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801cf06:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801cf0a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801cf0e:	6184      	str	r4, [r0, #24]
 801cf10:	7704      	strb	r4, [r0, #28]
 801cf12:	6244      	str	r4, [r0, #36]	; 0x24
 801cf14:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801cf16:	2301      	movs	r3, #1
 801cf18:	4628      	mov	r0, r5
 801cf1a:	b002      	add	sp, #8
 801cf1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cf20:	f000 b806 	b.w	801cf30 <__strtok_r>
 801cf24:	20000308 	.word	0x20000308
 801cf28:	08023a52 	.word	0x08023a52
 801cf2c:	08023a69 	.word	0x08023a69

0801cf30 <__strtok_r>:
 801cf30:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf32:	b908      	cbnz	r0, 801cf38 <__strtok_r+0x8>
 801cf34:	6810      	ldr	r0, [r2, #0]
 801cf36:	b188      	cbz	r0, 801cf5c <__strtok_r+0x2c>
 801cf38:	4604      	mov	r4, r0
 801cf3a:	4620      	mov	r0, r4
 801cf3c:	f814 5b01 	ldrb.w	r5, [r4], #1
 801cf40:	460f      	mov	r7, r1
 801cf42:	f817 6b01 	ldrb.w	r6, [r7], #1
 801cf46:	b91e      	cbnz	r6, 801cf50 <__strtok_r+0x20>
 801cf48:	b965      	cbnz	r5, 801cf64 <__strtok_r+0x34>
 801cf4a:	6015      	str	r5, [r2, #0]
 801cf4c:	4628      	mov	r0, r5
 801cf4e:	e005      	b.n	801cf5c <__strtok_r+0x2c>
 801cf50:	42b5      	cmp	r5, r6
 801cf52:	d1f6      	bne.n	801cf42 <__strtok_r+0x12>
 801cf54:	2b00      	cmp	r3, #0
 801cf56:	d1f0      	bne.n	801cf3a <__strtok_r+0xa>
 801cf58:	6014      	str	r4, [r2, #0]
 801cf5a:	7003      	strb	r3, [r0, #0]
 801cf5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf5e:	461c      	mov	r4, r3
 801cf60:	e00c      	b.n	801cf7c <__strtok_r+0x4c>
 801cf62:	b915      	cbnz	r5, 801cf6a <__strtok_r+0x3a>
 801cf64:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cf68:	460e      	mov	r6, r1
 801cf6a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801cf6e:	42ab      	cmp	r3, r5
 801cf70:	d1f7      	bne.n	801cf62 <__strtok_r+0x32>
 801cf72:	2b00      	cmp	r3, #0
 801cf74:	d0f3      	beq.n	801cf5e <__strtok_r+0x2e>
 801cf76:	2300      	movs	r3, #0
 801cf78:	f804 3c01 	strb.w	r3, [r4, #-1]
 801cf7c:	6014      	str	r4, [r2, #0]
 801cf7e:	e7ed      	b.n	801cf5c <__strtok_r+0x2c>

0801cf80 <strstr>:
 801cf80:	780a      	ldrb	r2, [r1, #0]
 801cf82:	b570      	push	{r4, r5, r6, lr}
 801cf84:	b96a      	cbnz	r2, 801cfa2 <strstr+0x22>
 801cf86:	bd70      	pop	{r4, r5, r6, pc}
 801cf88:	429a      	cmp	r2, r3
 801cf8a:	d109      	bne.n	801cfa0 <strstr+0x20>
 801cf8c:	460c      	mov	r4, r1
 801cf8e:	4605      	mov	r5, r0
 801cf90:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d0f6      	beq.n	801cf86 <strstr+0x6>
 801cf98:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801cf9c:	429e      	cmp	r6, r3
 801cf9e:	d0f7      	beq.n	801cf90 <strstr+0x10>
 801cfa0:	3001      	adds	r0, #1
 801cfa2:	7803      	ldrb	r3, [r0, #0]
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	d1ef      	bne.n	801cf88 <strstr+0x8>
 801cfa8:	4618      	mov	r0, r3
 801cfaa:	e7ec      	b.n	801cf86 <strstr+0x6>

0801cfac <_localeconv_r>:
 801cfac:	4800      	ldr	r0, [pc, #0]	; (801cfb0 <_localeconv_r+0x4>)
 801cfae:	4770      	bx	lr
 801cfb0:	20000240 	.word	0x20000240

0801cfb4 <_close_r>:
 801cfb4:	b538      	push	{r3, r4, r5, lr}
 801cfb6:	4d06      	ldr	r5, [pc, #24]	; (801cfd0 <_close_r+0x1c>)
 801cfb8:	2300      	movs	r3, #0
 801cfba:	4604      	mov	r4, r0
 801cfbc:	4608      	mov	r0, r1
 801cfbe:	602b      	str	r3, [r5, #0]
 801cfc0:	f7ea faa9 	bl	8007516 <_close>
 801cfc4:	1c43      	adds	r3, r0, #1
 801cfc6:	d102      	bne.n	801cfce <_close_r+0x1a>
 801cfc8:	682b      	ldr	r3, [r5, #0]
 801cfca:	b103      	cbz	r3, 801cfce <_close_r+0x1a>
 801cfcc:	6023      	str	r3, [r4, #0]
 801cfce:	bd38      	pop	{r3, r4, r5, pc}
 801cfd0:	20003228 	.word	0x20003228

0801cfd4 <_lseek_r>:
 801cfd4:	b538      	push	{r3, r4, r5, lr}
 801cfd6:	4d07      	ldr	r5, [pc, #28]	; (801cff4 <_lseek_r+0x20>)
 801cfd8:	4604      	mov	r4, r0
 801cfda:	4608      	mov	r0, r1
 801cfdc:	4611      	mov	r1, r2
 801cfde:	2200      	movs	r2, #0
 801cfe0:	602a      	str	r2, [r5, #0]
 801cfe2:	461a      	mov	r2, r3
 801cfe4:	f7ea fabe 	bl	8007564 <_lseek>
 801cfe8:	1c43      	adds	r3, r0, #1
 801cfea:	d102      	bne.n	801cff2 <_lseek_r+0x1e>
 801cfec:	682b      	ldr	r3, [r5, #0]
 801cfee:	b103      	cbz	r3, 801cff2 <_lseek_r+0x1e>
 801cff0:	6023      	str	r3, [r4, #0]
 801cff2:	bd38      	pop	{r3, r4, r5, pc}
 801cff4:	20003228 	.word	0x20003228

0801cff8 <_read_r>:
 801cff8:	b538      	push	{r3, r4, r5, lr}
 801cffa:	4d07      	ldr	r5, [pc, #28]	; (801d018 <_read_r+0x20>)
 801cffc:	4604      	mov	r4, r0
 801cffe:	4608      	mov	r0, r1
 801d000:	4611      	mov	r1, r2
 801d002:	2200      	movs	r2, #0
 801d004:	602a      	str	r2, [r5, #0]
 801d006:	461a      	mov	r2, r3
 801d008:	f7ea fa4c 	bl	80074a4 <_read>
 801d00c:	1c43      	adds	r3, r0, #1
 801d00e:	d102      	bne.n	801d016 <_read_r+0x1e>
 801d010:	682b      	ldr	r3, [r5, #0]
 801d012:	b103      	cbz	r3, 801d016 <_read_r+0x1e>
 801d014:	6023      	str	r3, [r4, #0]
 801d016:	bd38      	pop	{r3, r4, r5, pc}
 801d018:	20003228 	.word	0x20003228

0801d01c <_sbrk_r>:
 801d01c:	b538      	push	{r3, r4, r5, lr}
 801d01e:	4d06      	ldr	r5, [pc, #24]	; (801d038 <_sbrk_r+0x1c>)
 801d020:	2300      	movs	r3, #0
 801d022:	4604      	mov	r4, r0
 801d024:	4608      	mov	r0, r1
 801d026:	602b      	str	r3, [r5, #0]
 801d028:	f7ea faaa 	bl	8007580 <_sbrk>
 801d02c:	1c43      	adds	r3, r0, #1
 801d02e:	d102      	bne.n	801d036 <_sbrk_r+0x1a>
 801d030:	682b      	ldr	r3, [r5, #0]
 801d032:	b103      	cbz	r3, 801d036 <_sbrk_r+0x1a>
 801d034:	6023      	str	r3, [r4, #0]
 801d036:	bd38      	pop	{r3, r4, r5, pc}
 801d038:	20003228 	.word	0x20003228

0801d03c <_write_r>:
 801d03c:	b538      	push	{r3, r4, r5, lr}
 801d03e:	4d07      	ldr	r5, [pc, #28]	; (801d05c <_write_r+0x20>)
 801d040:	4604      	mov	r4, r0
 801d042:	4608      	mov	r0, r1
 801d044:	4611      	mov	r1, r2
 801d046:	2200      	movs	r2, #0
 801d048:	602a      	str	r2, [r5, #0]
 801d04a:	461a      	mov	r2, r3
 801d04c:	f7ea fa47 	bl	80074de <_write>
 801d050:	1c43      	adds	r3, r0, #1
 801d052:	d102      	bne.n	801d05a <_write_r+0x1e>
 801d054:	682b      	ldr	r3, [r5, #0]
 801d056:	b103      	cbz	r3, 801d05a <_write_r+0x1e>
 801d058:	6023      	str	r3, [r4, #0]
 801d05a:	bd38      	pop	{r3, r4, r5, pc}
 801d05c:	20003228 	.word	0x20003228

0801d060 <__errno>:
 801d060:	4b01      	ldr	r3, [pc, #4]	; (801d068 <__errno+0x8>)
 801d062:	6818      	ldr	r0, [r3, #0]
 801d064:	4770      	bx	lr
 801d066:	bf00      	nop
 801d068:	20000308 	.word	0x20000308

0801d06c <__libc_init_array>:
 801d06c:	b570      	push	{r4, r5, r6, lr}
 801d06e:	4d0d      	ldr	r5, [pc, #52]	; (801d0a4 <__libc_init_array+0x38>)
 801d070:	4c0d      	ldr	r4, [pc, #52]	; (801d0a8 <__libc_init_array+0x3c>)
 801d072:	1b64      	subs	r4, r4, r5
 801d074:	10a4      	asrs	r4, r4, #2
 801d076:	2600      	movs	r6, #0
 801d078:	42a6      	cmp	r6, r4
 801d07a:	d109      	bne.n	801d090 <__libc_init_array+0x24>
 801d07c:	4d0b      	ldr	r5, [pc, #44]	; (801d0ac <__libc_init_array+0x40>)
 801d07e:	4c0c      	ldr	r4, [pc, #48]	; (801d0b0 <__libc_init_array+0x44>)
 801d080:	f004 fb22 	bl	80216c8 <_init>
 801d084:	1b64      	subs	r4, r4, r5
 801d086:	10a4      	asrs	r4, r4, #2
 801d088:	2600      	movs	r6, #0
 801d08a:	42a6      	cmp	r6, r4
 801d08c:	d105      	bne.n	801d09a <__libc_init_array+0x2e>
 801d08e:	bd70      	pop	{r4, r5, r6, pc}
 801d090:	f855 3b04 	ldr.w	r3, [r5], #4
 801d094:	4798      	blx	r3
 801d096:	3601      	adds	r6, #1
 801d098:	e7ee      	b.n	801d078 <__libc_init_array+0xc>
 801d09a:	f855 3b04 	ldr.w	r3, [r5], #4
 801d09e:	4798      	blx	r3
 801d0a0:	3601      	adds	r6, #1
 801d0a2:	e7f2      	b.n	801d08a <__libc_init_array+0x1e>
 801d0a4:	08023f40 	.word	0x08023f40
 801d0a8:	08023f40 	.word	0x08023f40
 801d0ac:	08023f40 	.word	0x08023f40
 801d0b0:	08023f44 	.word	0x08023f44

0801d0b4 <__retarget_lock_init_recursive>:
 801d0b4:	4770      	bx	lr

0801d0b6 <__retarget_lock_acquire_recursive>:
 801d0b6:	4770      	bx	lr

0801d0b8 <__retarget_lock_release_recursive>:
 801d0b8:	4770      	bx	lr

0801d0ba <strcpy>:
 801d0ba:	4603      	mov	r3, r0
 801d0bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d0c0:	f803 2b01 	strb.w	r2, [r3], #1
 801d0c4:	2a00      	cmp	r2, #0
 801d0c6:	d1f9      	bne.n	801d0bc <strcpy+0x2>
 801d0c8:	4770      	bx	lr

0801d0ca <memcpy>:
 801d0ca:	440a      	add	r2, r1
 801d0cc:	4291      	cmp	r1, r2
 801d0ce:	f100 33ff 	add.w	r3, r0, #4294967295
 801d0d2:	d100      	bne.n	801d0d6 <memcpy+0xc>
 801d0d4:	4770      	bx	lr
 801d0d6:	b510      	push	{r4, lr}
 801d0d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d0dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d0e0:	4291      	cmp	r1, r2
 801d0e2:	d1f9      	bne.n	801d0d8 <memcpy+0xe>
 801d0e4:	bd10      	pop	{r4, pc}
	...

0801d0e8 <nan>:
 801d0e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d0f0 <nan+0x8>
 801d0ec:	4770      	bx	lr
 801d0ee:	bf00      	nop
 801d0f0:	00000000 	.word	0x00000000
 801d0f4:	7ff80000 	.word	0x7ff80000

0801d0f8 <nanf>:
 801d0f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d100 <nanf+0x8>
 801d0fc:	4770      	bx	lr
 801d0fe:	bf00      	nop
 801d100:	7fc00000 	.word	0x7fc00000

0801d104 <__assert_func>:
 801d104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d106:	4614      	mov	r4, r2
 801d108:	461a      	mov	r2, r3
 801d10a:	4b09      	ldr	r3, [pc, #36]	; (801d130 <__assert_func+0x2c>)
 801d10c:	681b      	ldr	r3, [r3, #0]
 801d10e:	4605      	mov	r5, r0
 801d110:	68d8      	ldr	r0, [r3, #12]
 801d112:	b14c      	cbz	r4, 801d128 <__assert_func+0x24>
 801d114:	4b07      	ldr	r3, [pc, #28]	; (801d134 <__assert_func+0x30>)
 801d116:	9100      	str	r1, [sp, #0]
 801d118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d11c:	4906      	ldr	r1, [pc, #24]	; (801d138 <__assert_func+0x34>)
 801d11e:	462b      	mov	r3, r5
 801d120:	f002 fa42 	bl	801f5a8 <fiprintf>
 801d124:	f002 fb02 	bl	801f72c <abort>
 801d128:	4b04      	ldr	r3, [pc, #16]	; (801d13c <__assert_func+0x38>)
 801d12a:	461c      	mov	r4, r3
 801d12c:	e7f3      	b.n	801d116 <__assert_func+0x12>
 801d12e:	bf00      	nop
 801d130:	20000308 	.word	0x20000308
 801d134:	08023acb 	.word	0x08023acb
 801d138:	08023ad8 	.word	0x08023ad8
 801d13c:	08023b06 	.word	0x08023b06

0801d140 <quorem>:
 801d140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d144:	6903      	ldr	r3, [r0, #16]
 801d146:	690c      	ldr	r4, [r1, #16]
 801d148:	42a3      	cmp	r3, r4
 801d14a:	4607      	mov	r7, r0
 801d14c:	db7e      	blt.n	801d24c <quorem+0x10c>
 801d14e:	3c01      	subs	r4, #1
 801d150:	f101 0814 	add.w	r8, r1, #20
 801d154:	f100 0514 	add.w	r5, r0, #20
 801d158:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d15c:	9301      	str	r3, [sp, #4]
 801d15e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d162:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d166:	3301      	adds	r3, #1
 801d168:	429a      	cmp	r2, r3
 801d16a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d16e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d172:	fbb2 f6f3 	udiv	r6, r2, r3
 801d176:	d331      	bcc.n	801d1dc <quorem+0x9c>
 801d178:	f04f 0e00 	mov.w	lr, #0
 801d17c:	4640      	mov	r0, r8
 801d17e:	46ac      	mov	ip, r5
 801d180:	46f2      	mov	sl, lr
 801d182:	f850 2b04 	ldr.w	r2, [r0], #4
 801d186:	b293      	uxth	r3, r2
 801d188:	fb06 e303 	mla	r3, r6, r3, lr
 801d18c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d190:	0c1a      	lsrs	r2, r3, #16
 801d192:	b29b      	uxth	r3, r3
 801d194:	ebaa 0303 	sub.w	r3, sl, r3
 801d198:	f8dc a000 	ldr.w	sl, [ip]
 801d19c:	fa13 f38a 	uxtah	r3, r3, sl
 801d1a0:	fb06 220e 	mla	r2, r6, lr, r2
 801d1a4:	9300      	str	r3, [sp, #0]
 801d1a6:	9b00      	ldr	r3, [sp, #0]
 801d1a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d1ac:	b292      	uxth	r2, r2
 801d1ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801d1b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d1b6:	f8bd 3000 	ldrh.w	r3, [sp]
 801d1ba:	4581      	cmp	r9, r0
 801d1bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d1c0:	f84c 3b04 	str.w	r3, [ip], #4
 801d1c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d1c8:	d2db      	bcs.n	801d182 <quorem+0x42>
 801d1ca:	f855 300b 	ldr.w	r3, [r5, fp]
 801d1ce:	b92b      	cbnz	r3, 801d1dc <quorem+0x9c>
 801d1d0:	9b01      	ldr	r3, [sp, #4]
 801d1d2:	3b04      	subs	r3, #4
 801d1d4:	429d      	cmp	r5, r3
 801d1d6:	461a      	mov	r2, r3
 801d1d8:	d32c      	bcc.n	801d234 <quorem+0xf4>
 801d1da:	613c      	str	r4, [r7, #16]
 801d1dc:	4638      	mov	r0, r7
 801d1de:	f001 fca5 	bl	801eb2c <__mcmp>
 801d1e2:	2800      	cmp	r0, #0
 801d1e4:	db22      	blt.n	801d22c <quorem+0xec>
 801d1e6:	3601      	adds	r6, #1
 801d1e8:	4629      	mov	r1, r5
 801d1ea:	2000      	movs	r0, #0
 801d1ec:	f858 2b04 	ldr.w	r2, [r8], #4
 801d1f0:	f8d1 c000 	ldr.w	ip, [r1]
 801d1f4:	b293      	uxth	r3, r2
 801d1f6:	1ac3      	subs	r3, r0, r3
 801d1f8:	0c12      	lsrs	r2, r2, #16
 801d1fa:	fa13 f38c 	uxtah	r3, r3, ip
 801d1fe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801d202:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d206:	b29b      	uxth	r3, r3
 801d208:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d20c:	45c1      	cmp	r9, r8
 801d20e:	f841 3b04 	str.w	r3, [r1], #4
 801d212:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d216:	d2e9      	bcs.n	801d1ec <quorem+0xac>
 801d218:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d21c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d220:	b922      	cbnz	r2, 801d22c <quorem+0xec>
 801d222:	3b04      	subs	r3, #4
 801d224:	429d      	cmp	r5, r3
 801d226:	461a      	mov	r2, r3
 801d228:	d30a      	bcc.n	801d240 <quorem+0x100>
 801d22a:	613c      	str	r4, [r7, #16]
 801d22c:	4630      	mov	r0, r6
 801d22e:	b003      	add	sp, #12
 801d230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d234:	6812      	ldr	r2, [r2, #0]
 801d236:	3b04      	subs	r3, #4
 801d238:	2a00      	cmp	r2, #0
 801d23a:	d1ce      	bne.n	801d1da <quorem+0x9a>
 801d23c:	3c01      	subs	r4, #1
 801d23e:	e7c9      	b.n	801d1d4 <quorem+0x94>
 801d240:	6812      	ldr	r2, [r2, #0]
 801d242:	3b04      	subs	r3, #4
 801d244:	2a00      	cmp	r2, #0
 801d246:	d1f0      	bne.n	801d22a <quorem+0xea>
 801d248:	3c01      	subs	r4, #1
 801d24a:	e7eb      	b.n	801d224 <quorem+0xe4>
 801d24c:	2000      	movs	r0, #0
 801d24e:	e7ee      	b.n	801d22e <quorem+0xee>

0801d250 <_dtoa_r>:
 801d250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d254:	ed2d 8b04 	vpush	{d8-d9}
 801d258:	69c5      	ldr	r5, [r0, #28]
 801d25a:	b093      	sub	sp, #76	; 0x4c
 801d25c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801d260:	ec57 6b10 	vmov	r6, r7, d0
 801d264:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d268:	9107      	str	r1, [sp, #28]
 801d26a:	4604      	mov	r4, r0
 801d26c:	920a      	str	r2, [sp, #40]	; 0x28
 801d26e:	930d      	str	r3, [sp, #52]	; 0x34
 801d270:	b975      	cbnz	r5, 801d290 <_dtoa_r+0x40>
 801d272:	2010      	movs	r0, #16
 801d274:	f7fd fe7a 	bl	801af6c <malloc>
 801d278:	4602      	mov	r2, r0
 801d27a:	61e0      	str	r0, [r4, #28]
 801d27c:	b920      	cbnz	r0, 801d288 <_dtoa_r+0x38>
 801d27e:	4bae      	ldr	r3, [pc, #696]	; (801d538 <_dtoa_r+0x2e8>)
 801d280:	21ef      	movs	r1, #239	; 0xef
 801d282:	48ae      	ldr	r0, [pc, #696]	; (801d53c <_dtoa_r+0x2ec>)
 801d284:	f7ff ff3e 	bl	801d104 <__assert_func>
 801d288:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d28c:	6005      	str	r5, [r0, #0]
 801d28e:	60c5      	str	r5, [r0, #12]
 801d290:	69e3      	ldr	r3, [r4, #28]
 801d292:	6819      	ldr	r1, [r3, #0]
 801d294:	b151      	cbz	r1, 801d2ac <_dtoa_r+0x5c>
 801d296:	685a      	ldr	r2, [r3, #4]
 801d298:	604a      	str	r2, [r1, #4]
 801d29a:	2301      	movs	r3, #1
 801d29c:	4093      	lsls	r3, r2
 801d29e:	608b      	str	r3, [r1, #8]
 801d2a0:	4620      	mov	r0, r4
 801d2a2:	f001 f9bd 	bl	801e620 <_Bfree>
 801d2a6:	69e3      	ldr	r3, [r4, #28]
 801d2a8:	2200      	movs	r2, #0
 801d2aa:	601a      	str	r2, [r3, #0]
 801d2ac:	1e3b      	subs	r3, r7, #0
 801d2ae:	bfbb      	ittet	lt
 801d2b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801d2b4:	9303      	strlt	r3, [sp, #12]
 801d2b6:	2300      	movge	r3, #0
 801d2b8:	2201      	movlt	r2, #1
 801d2ba:	bfac      	ite	ge
 801d2bc:	f8c8 3000 	strge.w	r3, [r8]
 801d2c0:	f8c8 2000 	strlt.w	r2, [r8]
 801d2c4:	4b9e      	ldr	r3, [pc, #632]	; (801d540 <_dtoa_r+0x2f0>)
 801d2c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801d2ca:	ea33 0308 	bics.w	r3, r3, r8
 801d2ce:	d11b      	bne.n	801d308 <_dtoa_r+0xb8>
 801d2d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d2d2:	f242 730f 	movw	r3, #9999	; 0x270f
 801d2d6:	6013      	str	r3, [r2, #0]
 801d2d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801d2dc:	4333      	orrs	r3, r6
 801d2de:	f000 8593 	beq.w	801de08 <_dtoa_r+0xbb8>
 801d2e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d2e4:	b963      	cbnz	r3, 801d300 <_dtoa_r+0xb0>
 801d2e6:	4b97      	ldr	r3, [pc, #604]	; (801d544 <_dtoa_r+0x2f4>)
 801d2e8:	e027      	b.n	801d33a <_dtoa_r+0xea>
 801d2ea:	4b97      	ldr	r3, [pc, #604]	; (801d548 <_dtoa_r+0x2f8>)
 801d2ec:	9300      	str	r3, [sp, #0]
 801d2ee:	3308      	adds	r3, #8
 801d2f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d2f2:	6013      	str	r3, [r2, #0]
 801d2f4:	9800      	ldr	r0, [sp, #0]
 801d2f6:	b013      	add	sp, #76	; 0x4c
 801d2f8:	ecbd 8b04 	vpop	{d8-d9}
 801d2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d300:	4b90      	ldr	r3, [pc, #576]	; (801d544 <_dtoa_r+0x2f4>)
 801d302:	9300      	str	r3, [sp, #0]
 801d304:	3303      	adds	r3, #3
 801d306:	e7f3      	b.n	801d2f0 <_dtoa_r+0xa0>
 801d308:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d30c:	2200      	movs	r2, #0
 801d30e:	ec51 0b17 	vmov	r0, r1, d7
 801d312:	eeb0 8a47 	vmov.f32	s16, s14
 801d316:	eef0 8a67 	vmov.f32	s17, s15
 801d31a:	2300      	movs	r3, #0
 801d31c:	f7e3 fbac 	bl	8000a78 <__aeabi_dcmpeq>
 801d320:	4681      	mov	r9, r0
 801d322:	b160      	cbz	r0, 801d33e <_dtoa_r+0xee>
 801d324:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d326:	2301      	movs	r3, #1
 801d328:	6013      	str	r3, [r2, #0]
 801d32a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	f000 8568 	beq.w	801de02 <_dtoa_r+0xbb2>
 801d332:	4b86      	ldr	r3, [pc, #536]	; (801d54c <_dtoa_r+0x2fc>)
 801d334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d336:	6013      	str	r3, [r2, #0]
 801d338:	3b01      	subs	r3, #1
 801d33a:	9300      	str	r3, [sp, #0]
 801d33c:	e7da      	b.n	801d2f4 <_dtoa_r+0xa4>
 801d33e:	aa10      	add	r2, sp, #64	; 0x40
 801d340:	a911      	add	r1, sp, #68	; 0x44
 801d342:	4620      	mov	r0, r4
 801d344:	eeb0 0a48 	vmov.f32	s0, s16
 801d348:	eef0 0a68 	vmov.f32	s1, s17
 801d34c:	f001 fd04 	bl	801ed58 <__d2b>
 801d350:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801d354:	4682      	mov	sl, r0
 801d356:	2d00      	cmp	r5, #0
 801d358:	d07f      	beq.n	801d45a <_dtoa_r+0x20a>
 801d35a:	ee18 3a90 	vmov	r3, s17
 801d35e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d362:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801d366:	ec51 0b18 	vmov	r0, r1, d8
 801d36a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d36e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d372:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801d376:	4619      	mov	r1, r3
 801d378:	2200      	movs	r2, #0
 801d37a:	4b75      	ldr	r3, [pc, #468]	; (801d550 <_dtoa_r+0x300>)
 801d37c:	f7e2 ff5c 	bl	8000238 <__aeabi_dsub>
 801d380:	a367      	add	r3, pc, #412	; (adr r3, 801d520 <_dtoa_r+0x2d0>)
 801d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d386:	f7e3 f90f 	bl	80005a8 <__aeabi_dmul>
 801d38a:	a367      	add	r3, pc, #412	; (adr r3, 801d528 <_dtoa_r+0x2d8>)
 801d38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d390:	f7e2 ff54 	bl	800023c <__adddf3>
 801d394:	4606      	mov	r6, r0
 801d396:	4628      	mov	r0, r5
 801d398:	460f      	mov	r7, r1
 801d39a:	f7e3 f89b 	bl	80004d4 <__aeabi_i2d>
 801d39e:	a364      	add	r3, pc, #400	; (adr r3, 801d530 <_dtoa_r+0x2e0>)
 801d3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3a4:	f7e3 f900 	bl	80005a8 <__aeabi_dmul>
 801d3a8:	4602      	mov	r2, r0
 801d3aa:	460b      	mov	r3, r1
 801d3ac:	4630      	mov	r0, r6
 801d3ae:	4639      	mov	r1, r7
 801d3b0:	f7e2 ff44 	bl	800023c <__adddf3>
 801d3b4:	4606      	mov	r6, r0
 801d3b6:	460f      	mov	r7, r1
 801d3b8:	f7e3 fba6 	bl	8000b08 <__aeabi_d2iz>
 801d3bc:	2200      	movs	r2, #0
 801d3be:	4683      	mov	fp, r0
 801d3c0:	2300      	movs	r3, #0
 801d3c2:	4630      	mov	r0, r6
 801d3c4:	4639      	mov	r1, r7
 801d3c6:	f7e3 fb61 	bl	8000a8c <__aeabi_dcmplt>
 801d3ca:	b148      	cbz	r0, 801d3e0 <_dtoa_r+0x190>
 801d3cc:	4658      	mov	r0, fp
 801d3ce:	f7e3 f881 	bl	80004d4 <__aeabi_i2d>
 801d3d2:	4632      	mov	r2, r6
 801d3d4:	463b      	mov	r3, r7
 801d3d6:	f7e3 fb4f 	bl	8000a78 <__aeabi_dcmpeq>
 801d3da:	b908      	cbnz	r0, 801d3e0 <_dtoa_r+0x190>
 801d3dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d3e0:	f1bb 0f16 	cmp.w	fp, #22
 801d3e4:	d857      	bhi.n	801d496 <_dtoa_r+0x246>
 801d3e6:	4b5b      	ldr	r3, [pc, #364]	; (801d554 <_dtoa_r+0x304>)
 801d3e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801d3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3f0:	ec51 0b18 	vmov	r0, r1, d8
 801d3f4:	f7e3 fb4a 	bl	8000a8c <__aeabi_dcmplt>
 801d3f8:	2800      	cmp	r0, #0
 801d3fa:	d04e      	beq.n	801d49a <_dtoa_r+0x24a>
 801d3fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d400:	2300      	movs	r3, #0
 801d402:	930c      	str	r3, [sp, #48]	; 0x30
 801d404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d406:	1b5b      	subs	r3, r3, r5
 801d408:	1e5a      	subs	r2, r3, #1
 801d40a:	bf45      	ittet	mi
 801d40c:	f1c3 0301 	rsbmi	r3, r3, #1
 801d410:	9305      	strmi	r3, [sp, #20]
 801d412:	2300      	movpl	r3, #0
 801d414:	2300      	movmi	r3, #0
 801d416:	9206      	str	r2, [sp, #24]
 801d418:	bf54      	ite	pl
 801d41a:	9305      	strpl	r3, [sp, #20]
 801d41c:	9306      	strmi	r3, [sp, #24]
 801d41e:	f1bb 0f00 	cmp.w	fp, #0
 801d422:	db3c      	blt.n	801d49e <_dtoa_r+0x24e>
 801d424:	9b06      	ldr	r3, [sp, #24]
 801d426:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801d42a:	445b      	add	r3, fp
 801d42c:	9306      	str	r3, [sp, #24]
 801d42e:	2300      	movs	r3, #0
 801d430:	9308      	str	r3, [sp, #32]
 801d432:	9b07      	ldr	r3, [sp, #28]
 801d434:	2b09      	cmp	r3, #9
 801d436:	d868      	bhi.n	801d50a <_dtoa_r+0x2ba>
 801d438:	2b05      	cmp	r3, #5
 801d43a:	bfc4      	itt	gt
 801d43c:	3b04      	subgt	r3, #4
 801d43e:	9307      	strgt	r3, [sp, #28]
 801d440:	9b07      	ldr	r3, [sp, #28]
 801d442:	f1a3 0302 	sub.w	r3, r3, #2
 801d446:	bfcc      	ite	gt
 801d448:	2500      	movgt	r5, #0
 801d44a:	2501      	movle	r5, #1
 801d44c:	2b03      	cmp	r3, #3
 801d44e:	f200 8085 	bhi.w	801d55c <_dtoa_r+0x30c>
 801d452:	e8df f003 	tbb	[pc, r3]
 801d456:	3b2e      	.short	0x3b2e
 801d458:	5839      	.short	0x5839
 801d45a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801d45e:	441d      	add	r5, r3
 801d460:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801d464:	2b20      	cmp	r3, #32
 801d466:	bfc1      	itttt	gt
 801d468:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d46c:	fa08 f803 	lslgt.w	r8, r8, r3
 801d470:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801d474:	fa26 f303 	lsrgt.w	r3, r6, r3
 801d478:	bfd6      	itet	le
 801d47a:	f1c3 0320 	rsble	r3, r3, #32
 801d47e:	ea48 0003 	orrgt.w	r0, r8, r3
 801d482:	fa06 f003 	lslle.w	r0, r6, r3
 801d486:	f7e3 f815 	bl	80004b4 <__aeabi_ui2d>
 801d48a:	2201      	movs	r2, #1
 801d48c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801d490:	3d01      	subs	r5, #1
 801d492:	920e      	str	r2, [sp, #56]	; 0x38
 801d494:	e76f      	b.n	801d376 <_dtoa_r+0x126>
 801d496:	2301      	movs	r3, #1
 801d498:	e7b3      	b.n	801d402 <_dtoa_r+0x1b2>
 801d49a:	900c      	str	r0, [sp, #48]	; 0x30
 801d49c:	e7b2      	b.n	801d404 <_dtoa_r+0x1b4>
 801d49e:	9b05      	ldr	r3, [sp, #20]
 801d4a0:	eba3 030b 	sub.w	r3, r3, fp
 801d4a4:	9305      	str	r3, [sp, #20]
 801d4a6:	f1cb 0300 	rsb	r3, fp, #0
 801d4aa:	9308      	str	r3, [sp, #32]
 801d4ac:	2300      	movs	r3, #0
 801d4ae:	930b      	str	r3, [sp, #44]	; 0x2c
 801d4b0:	e7bf      	b.n	801d432 <_dtoa_r+0x1e2>
 801d4b2:	2300      	movs	r3, #0
 801d4b4:	9309      	str	r3, [sp, #36]	; 0x24
 801d4b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d4b8:	2b00      	cmp	r3, #0
 801d4ba:	dc52      	bgt.n	801d562 <_dtoa_r+0x312>
 801d4bc:	2301      	movs	r3, #1
 801d4be:	9301      	str	r3, [sp, #4]
 801d4c0:	9304      	str	r3, [sp, #16]
 801d4c2:	461a      	mov	r2, r3
 801d4c4:	920a      	str	r2, [sp, #40]	; 0x28
 801d4c6:	e00b      	b.n	801d4e0 <_dtoa_r+0x290>
 801d4c8:	2301      	movs	r3, #1
 801d4ca:	e7f3      	b.n	801d4b4 <_dtoa_r+0x264>
 801d4cc:	2300      	movs	r3, #0
 801d4ce:	9309      	str	r3, [sp, #36]	; 0x24
 801d4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d4d2:	445b      	add	r3, fp
 801d4d4:	9301      	str	r3, [sp, #4]
 801d4d6:	3301      	adds	r3, #1
 801d4d8:	2b01      	cmp	r3, #1
 801d4da:	9304      	str	r3, [sp, #16]
 801d4dc:	bfb8      	it	lt
 801d4de:	2301      	movlt	r3, #1
 801d4e0:	69e0      	ldr	r0, [r4, #28]
 801d4e2:	2100      	movs	r1, #0
 801d4e4:	2204      	movs	r2, #4
 801d4e6:	f102 0614 	add.w	r6, r2, #20
 801d4ea:	429e      	cmp	r6, r3
 801d4ec:	d93d      	bls.n	801d56a <_dtoa_r+0x31a>
 801d4ee:	6041      	str	r1, [r0, #4]
 801d4f0:	4620      	mov	r0, r4
 801d4f2:	f001 f855 	bl	801e5a0 <_Balloc>
 801d4f6:	9000      	str	r0, [sp, #0]
 801d4f8:	2800      	cmp	r0, #0
 801d4fa:	d139      	bne.n	801d570 <_dtoa_r+0x320>
 801d4fc:	4b16      	ldr	r3, [pc, #88]	; (801d558 <_dtoa_r+0x308>)
 801d4fe:	4602      	mov	r2, r0
 801d500:	f240 11af 	movw	r1, #431	; 0x1af
 801d504:	e6bd      	b.n	801d282 <_dtoa_r+0x32>
 801d506:	2301      	movs	r3, #1
 801d508:	e7e1      	b.n	801d4ce <_dtoa_r+0x27e>
 801d50a:	2501      	movs	r5, #1
 801d50c:	2300      	movs	r3, #0
 801d50e:	9307      	str	r3, [sp, #28]
 801d510:	9509      	str	r5, [sp, #36]	; 0x24
 801d512:	f04f 33ff 	mov.w	r3, #4294967295
 801d516:	9301      	str	r3, [sp, #4]
 801d518:	9304      	str	r3, [sp, #16]
 801d51a:	2200      	movs	r2, #0
 801d51c:	2312      	movs	r3, #18
 801d51e:	e7d1      	b.n	801d4c4 <_dtoa_r+0x274>
 801d520:	636f4361 	.word	0x636f4361
 801d524:	3fd287a7 	.word	0x3fd287a7
 801d528:	8b60c8b3 	.word	0x8b60c8b3
 801d52c:	3fc68a28 	.word	0x3fc68a28
 801d530:	509f79fb 	.word	0x509f79fb
 801d534:	3fd34413 	.word	0x3fd34413
 801d538:	08023a52 	.word	0x08023a52
 801d53c:	08023b14 	.word	0x08023b14
 801d540:	7ff00000 	.word	0x7ff00000
 801d544:	08023b10 	.word	0x08023b10
 801d548:	08023b07 	.word	0x08023b07
 801d54c:	08023a2a 	.word	0x08023a2a
 801d550:	3ff80000 	.word	0x3ff80000
 801d554:	08023c60 	.word	0x08023c60
 801d558:	08023b6c 	.word	0x08023b6c
 801d55c:	2301      	movs	r3, #1
 801d55e:	9309      	str	r3, [sp, #36]	; 0x24
 801d560:	e7d7      	b.n	801d512 <_dtoa_r+0x2c2>
 801d562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d564:	9301      	str	r3, [sp, #4]
 801d566:	9304      	str	r3, [sp, #16]
 801d568:	e7ba      	b.n	801d4e0 <_dtoa_r+0x290>
 801d56a:	3101      	adds	r1, #1
 801d56c:	0052      	lsls	r2, r2, #1
 801d56e:	e7ba      	b.n	801d4e6 <_dtoa_r+0x296>
 801d570:	69e3      	ldr	r3, [r4, #28]
 801d572:	9a00      	ldr	r2, [sp, #0]
 801d574:	601a      	str	r2, [r3, #0]
 801d576:	9b04      	ldr	r3, [sp, #16]
 801d578:	2b0e      	cmp	r3, #14
 801d57a:	f200 80a8 	bhi.w	801d6ce <_dtoa_r+0x47e>
 801d57e:	2d00      	cmp	r5, #0
 801d580:	f000 80a5 	beq.w	801d6ce <_dtoa_r+0x47e>
 801d584:	f1bb 0f00 	cmp.w	fp, #0
 801d588:	dd38      	ble.n	801d5fc <_dtoa_r+0x3ac>
 801d58a:	4bc0      	ldr	r3, [pc, #768]	; (801d88c <_dtoa_r+0x63c>)
 801d58c:	f00b 020f 	and.w	r2, fp, #15
 801d590:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d594:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801d598:	e9d3 6700 	ldrd	r6, r7, [r3]
 801d59c:	ea4f 182b 	mov.w	r8, fp, asr #4
 801d5a0:	d019      	beq.n	801d5d6 <_dtoa_r+0x386>
 801d5a2:	4bbb      	ldr	r3, [pc, #748]	; (801d890 <_dtoa_r+0x640>)
 801d5a4:	ec51 0b18 	vmov	r0, r1, d8
 801d5a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d5ac:	f7e3 f926 	bl	80007fc <__aeabi_ddiv>
 801d5b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d5b4:	f008 080f 	and.w	r8, r8, #15
 801d5b8:	2503      	movs	r5, #3
 801d5ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801d890 <_dtoa_r+0x640>
 801d5be:	f1b8 0f00 	cmp.w	r8, #0
 801d5c2:	d10a      	bne.n	801d5da <_dtoa_r+0x38a>
 801d5c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d5c8:	4632      	mov	r2, r6
 801d5ca:	463b      	mov	r3, r7
 801d5cc:	f7e3 f916 	bl	80007fc <__aeabi_ddiv>
 801d5d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d5d4:	e02b      	b.n	801d62e <_dtoa_r+0x3de>
 801d5d6:	2502      	movs	r5, #2
 801d5d8:	e7ef      	b.n	801d5ba <_dtoa_r+0x36a>
 801d5da:	f018 0f01 	tst.w	r8, #1
 801d5de:	d008      	beq.n	801d5f2 <_dtoa_r+0x3a2>
 801d5e0:	4630      	mov	r0, r6
 801d5e2:	4639      	mov	r1, r7
 801d5e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 801d5e8:	f7e2 ffde 	bl	80005a8 <__aeabi_dmul>
 801d5ec:	3501      	adds	r5, #1
 801d5ee:	4606      	mov	r6, r0
 801d5f0:	460f      	mov	r7, r1
 801d5f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 801d5f6:	f109 0908 	add.w	r9, r9, #8
 801d5fa:	e7e0      	b.n	801d5be <_dtoa_r+0x36e>
 801d5fc:	f000 809f 	beq.w	801d73e <_dtoa_r+0x4ee>
 801d600:	f1cb 0600 	rsb	r6, fp, #0
 801d604:	4ba1      	ldr	r3, [pc, #644]	; (801d88c <_dtoa_r+0x63c>)
 801d606:	4fa2      	ldr	r7, [pc, #648]	; (801d890 <_dtoa_r+0x640>)
 801d608:	f006 020f 	and.w	r2, r6, #15
 801d60c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d610:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d614:	ec51 0b18 	vmov	r0, r1, d8
 801d618:	f7e2 ffc6 	bl	80005a8 <__aeabi_dmul>
 801d61c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d620:	1136      	asrs	r6, r6, #4
 801d622:	2300      	movs	r3, #0
 801d624:	2502      	movs	r5, #2
 801d626:	2e00      	cmp	r6, #0
 801d628:	d17e      	bne.n	801d728 <_dtoa_r+0x4d8>
 801d62a:	2b00      	cmp	r3, #0
 801d62c:	d1d0      	bne.n	801d5d0 <_dtoa_r+0x380>
 801d62e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d630:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d634:	2b00      	cmp	r3, #0
 801d636:	f000 8084 	beq.w	801d742 <_dtoa_r+0x4f2>
 801d63a:	4b96      	ldr	r3, [pc, #600]	; (801d894 <_dtoa_r+0x644>)
 801d63c:	2200      	movs	r2, #0
 801d63e:	4640      	mov	r0, r8
 801d640:	4649      	mov	r1, r9
 801d642:	f7e3 fa23 	bl	8000a8c <__aeabi_dcmplt>
 801d646:	2800      	cmp	r0, #0
 801d648:	d07b      	beq.n	801d742 <_dtoa_r+0x4f2>
 801d64a:	9b04      	ldr	r3, [sp, #16]
 801d64c:	2b00      	cmp	r3, #0
 801d64e:	d078      	beq.n	801d742 <_dtoa_r+0x4f2>
 801d650:	9b01      	ldr	r3, [sp, #4]
 801d652:	2b00      	cmp	r3, #0
 801d654:	dd39      	ble.n	801d6ca <_dtoa_r+0x47a>
 801d656:	4b90      	ldr	r3, [pc, #576]	; (801d898 <_dtoa_r+0x648>)
 801d658:	2200      	movs	r2, #0
 801d65a:	4640      	mov	r0, r8
 801d65c:	4649      	mov	r1, r9
 801d65e:	f7e2 ffa3 	bl	80005a8 <__aeabi_dmul>
 801d662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d666:	9e01      	ldr	r6, [sp, #4]
 801d668:	f10b 37ff 	add.w	r7, fp, #4294967295
 801d66c:	3501      	adds	r5, #1
 801d66e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d672:	4628      	mov	r0, r5
 801d674:	f7e2 ff2e 	bl	80004d4 <__aeabi_i2d>
 801d678:	4642      	mov	r2, r8
 801d67a:	464b      	mov	r3, r9
 801d67c:	f7e2 ff94 	bl	80005a8 <__aeabi_dmul>
 801d680:	4b86      	ldr	r3, [pc, #536]	; (801d89c <_dtoa_r+0x64c>)
 801d682:	2200      	movs	r2, #0
 801d684:	f7e2 fdda 	bl	800023c <__adddf3>
 801d688:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801d68c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d690:	9303      	str	r3, [sp, #12]
 801d692:	2e00      	cmp	r6, #0
 801d694:	d158      	bne.n	801d748 <_dtoa_r+0x4f8>
 801d696:	4b82      	ldr	r3, [pc, #520]	; (801d8a0 <_dtoa_r+0x650>)
 801d698:	2200      	movs	r2, #0
 801d69a:	4640      	mov	r0, r8
 801d69c:	4649      	mov	r1, r9
 801d69e:	f7e2 fdcb 	bl	8000238 <__aeabi_dsub>
 801d6a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d6a6:	4680      	mov	r8, r0
 801d6a8:	4689      	mov	r9, r1
 801d6aa:	f7e3 fa0d 	bl	8000ac8 <__aeabi_dcmpgt>
 801d6ae:	2800      	cmp	r0, #0
 801d6b0:	f040 8296 	bne.w	801dbe0 <_dtoa_r+0x990>
 801d6b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801d6b8:	4640      	mov	r0, r8
 801d6ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d6be:	4649      	mov	r1, r9
 801d6c0:	f7e3 f9e4 	bl	8000a8c <__aeabi_dcmplt>
 801d6c4:	2800      	cmp	r0, #0
 801d6c6:	f040 8289 	bne.w	801dbdc <_dtoa_r+0x98c>
 801d6ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 801d6ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d6d0:	2b00      	cmp	r3, #0
 801d6d2:	f2c0 814e 	blt.w	801d972 <_dtoa_r+0x722>
 801d6d6:	f1bb 0f0e 	cmp.w	fp, #14
 801d6da:	f300 814a 	bgt.w	801d972 <_dtoa_r+0x722>
 801d6de:	4b6b      	ldr	r3, [pc, #428]	; (801d88c <_dtoa_r+0x63c>)
 801d6e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801d6e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d6ea:	2b00      	cmp	r3, #0
 801d6ec:	f280 80dc 	bge.w	801d8a8 <_dtoa_r+0x658>
 801d6f0:	9b04      	ldr	r3, [sp, #16]
 801d6f2:	2b00      	cmp	r3, #0
 801d6f4:	f300 80d8 	bgt.w	801d8a8 <_dtoa_r+0x658>
 801d6f8:	f040 826f 	bne.w	801dbda <_dtoa_r+0x98a>
 801d6fc:	4b68      	ldr	r3, [pc, #416]	; (801d8a0 <_dtoa_r+0x650>)
 801d6fe:	2200      	movs	r2, #0
 801d700:	4640      	mov	r0, r8
 801d702:	4649      	mov	r1, r9
 801d704:	f7e2 ff50 	bl	80005a8 <__aeabi_dmul>
 801d708:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d70c:	f7e3 f9d2 	bl	8000ab4 <__aeabi_dcmpge>
 801d710:	9e04      	ldr	r6, [sp, #16]
 801d712:	4637      	mov	r7, r6
 801d714:	2800      	cmp	r0, #0
 801d716:	f040 8245 	bne.w	801dba4 <_dtoa_r+0x954>
 801d71a:	9d00      	ldr	r5, [sp, #0]
 801d71c:	2331      	movs	r3, #49	; 0x31
 801d71e:	f805 3b01 	strb.w	r3, [r5], #1
 801d722:	f10b 0b01 	add.w	fp, fp, #1
 801d726:	e241      	b.n	801dbac <_dtoa_r+0x95c>
 801d728:	07f2      	lsls	r2, r6, #31
 801d72a:	d505      	bpl.n	801d738 <_dtoa_r+0x4e8>
 801d72c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d730:	f7e2 ff3a 	bl	80005a8 <__aeabi_dmul>
 801d734:	3501      	adds	r5, #1
 801d736:	2301      	movs	r3, #1
 801d738:	1076      	asrs	r6, r6, #1
 801d73a:	3708      	adds	r7, #8
 801d73c:	e773      	b.n	801d626 <_dtoa_r+0x3d6>
 801d73e:	2502      	movs	r5, #2
 801d740:	e775      	b.n	801d62e <_dtoa_r+0x3de>
 801d742:	9e04      	ldr	r6, [sp, #16]
 801d744:	465f      	mov	r7, fp
 801d746:	e792      	b.n	801d66e <_dtoa_r+0x41e>
 801d748:	9900      	ldr	r1, [sp, #0]
 801d74a:	4b50      	ldr	r3, [pc, #320]	; (801d88c <_dtoa_r+0x63c>)
 801d74c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d750:	4431      	add	r1, r6
 801d752:	9102      	str	r1, [sp, #8]
 801d754:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d756:	eeb0 9a47 	vmov.f32	s18, s14
 801d75a:	eef0 9a67 	vmov.f32	s19, s15
 801d75e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801d762:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d766:	2900      	cmp	r1, #0
 801d768:	d044      	beq.n	801d7f4 <_dtoa_r+0x5a4>
 801d76a:	494e      	ldr	r1, [pc, #312]	; (801d8a4 <_dtoa_r+0x654>)
 801d76c:	2000      	movs	r0, #0
 801d76e:	f7e3 f845 	bl	80007fc <__aeabi_ddiv>
 801d772:	ec53 2b19 	vmov	r2, r3, d9
 801d776:	f7e2 fd5f 	bl	8000238 <__aeabi_dsub>
 801d77a:	9d00      	ldr	r5, [sp, #0]
 801d77c:	ec41 0b19 	vmov	d9, r0, r1
 801d780:	4649      	mov	r1, r9
 801d782:	4640      	mov	r0, r8
 801d784:	f7e3 f9c0 	bl	8000b08 <__aeabi_d2iz>
 801d788:	4606      	mov	r6, r0
 801d78a:	f7e2 fea3 	bl	80004d4 <__aeabi_i2d>
 801d78e:	4602      	mov	r2, r0
 801d790:	460b      	mov	r3, r1
 801d792:	4640      	mov	r0, r8
 801d794:	4649      	mov	r1, r9
 801d796:	f7e2 fd4f 	bl	8000238 <__aeabi_dsub>
 801d79a:	3630      	adds	r6, #48	; 0x30
 801d79c:	f805 6b01 	strb.w	r6, [r5], #1
 801d7a0:	ec53 2b19 	vmov	r2, r3, d9
 801d7a4:	4680      	mov	r8, r0
 801d7a6:	4689      	mov	r9, r1
 801d7a8:	f7e3 f970 	bl	8000a8c <__aeabi_dcmplt>
 801d7ac:	2800      	cmp	r0, #0
 801d7ae:	d164      	bne.n	801d87a <_dtoa_r+0x62a>
 801d7b0:	4642      	mov	r2, r8
 801d7b2:	464b      	mov	r3, r9
 801d7b4:	4937      	ldr	r1, [pc, #220]	; (801d894 <_dtoa_r+0x644>)
 801d7b6:	2000      	movs	r0, #0
 801d7b8:	f7e2 fd3e 	bl	8000238 <__aeabi_dsub>
 801d7bc:	ec53 2b19 	vmov	r2, r3, d9
 801d7c0:	f7e3 f964 	bl	8000a8c <__aeabi_dcmplt>
 801d7c4:	2800      	cmp	r0, #0
 801d7c6:	f040 80b6 	bne.w	801d936 <_dtoa_r+0x6e6>
 801d7ca:	9b02      	ldr	r3, [sp, #8]
 801d7cc:	429d      	cmp	r5, r3
 801d7ce:	f43f af7c 	beq.w	801d6ca <_dtoa_r+0x47a>
 801d7d2:	4b31      	ldr	r3, [pc, #196]	; (801d898 <_dtoa_r+0x648>)
 801d7d4:	ec51 0b19 	vmov	r0, r1, d9
 801d7d8:	2200      	movs	r2, #0
 801d7da:	f7e2 fee5 	bl	80005a8 <__aeabi_dmul>
 801d7de:	4b2e      	ldr	r3, [pc, #184]	; (801d898 <_dtoa_r+0x648>)
 801d7e0:	ec41 0b19 	vmov	d9, r0, r1
 801d7e4:	2200      	movs	r2, #0
 801d7e6:	4640      	mov	r0, r8
 801d7e8:	4649      	mov	r1, r9
 801d7ea:	f7e2 fedd 	bl	80005a8 <__aeabi_dmul>
 801d7ee:	4680      	mov	r8, r0
 801d7f0:	4689      	mov	r9, r1
 801d7f2:	e7c5      	b.n	801d780 <_dtoa_r+0x530>
 801d7f4:	ec51 0b17 	vmov	r0, r1, d7
 801d7f8:	f7e2 fed6 	bl	80005a8 <__aeabi_dmul>
 801d7fc:	9b02      	ldr	r3, [sp, #8]
 801d7fe:	9d00      	ldr	r5, [sp, #0]
 801d800:	930f      	str	r3, [sp, #60]	; 0x3c
 801d802:	ec41 0b19 	vmov	d9, r0, r1
 801d806:	4649      	mov	r1, r9
 801d808:	4640      	mov	r0, r8
 801d80a:	f7e3 f97d 	bl	8000b08 <__aeabi_d2iz>
 801d80e:	4606      	mov	r6, r0
 801d810:	f7e2 fe60 	bl	80004d4 <__aeabi_i2d>
 801d814:	3630      	adds	r6, #48	; 0x30
 801d816:	4602      	mov	r2, r0
 801d818:	460b      	mov	r3, r1
 801d81a:	4640      	mov	r0, r8
 801d81c:	4649      	mov	r1, r9
 801d81e:	f7e2 fd0b 	bl	8000238 <__aeabi_dsub>
 801d822:	f805 6b01 	strb.w	r6, [r5], #1
 801d826:	9b02      	ldr	r3, [sp, #8]
 801d828:	429d      	cmp	r5, r3
 801d82a:	4680      	mov	r8, r0
 801d82c:	4689      	mov	r9, r1
 801d82e:	f04f 0200 	mov.w	r2, #0
 801d832:	d124      	bne.n	801d87e <_dtoa_r+0x62e>
 801d834:	4b1b      	ldr	r3, [pc, #108]	; (801d8a4 <_dtoa_r+0x654>)
 801d836:	ec51 0b19 	vmov	r0, r1, d9
 801d83a:	f7e2 fcff 	bl	800023c <__adddf3>
 801d83e:	4602      	mov	r2, r0
 801d840:	460b      	mov	r3, r1
 801d842:	4640      	mov	r0, r8
 801d844:	4649      	mov	r1, r9
 801d846:	f7e3 f93f 	bl	8000ac8 <__aeabi_dcmpgt>
 801d84a:	2800      	cmp	r0, #0
 801d84c:	d173      	bne.n	801d936 <_dtoa_r+0x6e6>
 801d84e:	ec53 2b19 	vmov	r2, r3, d9
 801d852:	4914      	ldr	r1, [pc, #80]	; (801d8a4 <_dtoa_r+0x654>)
 801d854:	2000      	movs	r0, #0
 801d856:	f7e2 fcef 	bl	8000238 <__aeabi_dsub>
 801d85a:	4602      	mov	r2, r0
 801d85c:	460b      	mov	r3, r1
 801d85e:	4640      	mov	r0, r8
 801d860:	4649      	mov	r1, r9
 801d862:	f7e3 f913 	bl	8000a8c <__aeabi_dcmplt>
 801d866:	2800      	cmp	r0, #0
 801d868:	f43f af2f 	beq.w	801d6ca <_dtoa_r+0x47a>
 801d86c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d86e:	1e6b      	subs	r3, r5, #1
 801d870:	930f      	str	r3, [sp, #60]	; 0x3c
 801d872:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d876:	2b30      	cmp	r3, #48	; 0x30
 801d878:	d0f8      	beq.n	801d86c <_dtoa_r+0x61c>
 801d87a:	46bb      	mov	fp, r7
 801d87c:	e04a      	b.n	801d914 <_dtoa_r+0x6c4>
 801d87e:	4b06      	ldr	r3, [pc, #24]	; (801d898 <_dtoa_r+0x648>)
 801d880:	f7e2 fe92 	bl	80005a8 <__aeabi_dmul>
 801d884:	4680      	mov	r8, r0
 801d886:	4689      	mov	r9, r1
 801d888:	e7bd      	b.n	801d806 <_dtoa_r+0x5b6>
 801d88a:	bf00      	nop
 801d88c:	08023c60 	.word	0x08023c60
 801d890:	08023c38 	.word	0x08023c38
 801d894:	3ff00000 	.word	0x3ff00000
 801d898:	40240000 	.word	0x40240000
 801d89c:	401c0000 	.word	0x401c0000
 801d8a0:	40140000 	.word	0x40140000
 801d8a4:	3fe00000 	.word	0x3fe00000
 801d8a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d8ac:	9d00      	ldr	r5, [sp, #0]
 801d8ae:	4642      	mov	r2, r8
 801d8b0:	464b      	mov	r3, r9
 801d8b2:	4630      	mov	r0, r6
 801d8b4:	4639      	mov	r1, r7
 801d8b6:	f7e2 ffa1 	bl	80007fc <__aeabi_ddiv>
 801d8ba:	f7e3 f925 	bl	8000b08 <__aeabi_d2iz>
 801d8be:	9001      	str	r0, [sp, #4]
 801d8c0:	f7e2 fe08 	bl	80004d4 <__aeabi_i2d>
 801d8c4:	4642      	mov	r2, r8
 801d8c6:	464b      	mov	r3, r9
 801d8c8:	f7e2 fe6e 	bl	80005a8 <__aeabi_dmul>
 801d8cc:	4602      	mov	r2, r0
 801d8ce:	460b      	mov	r3, r1
 801d8d0:	4630      	mov	r0, r6
 801d8d2:	4639      	mov	r1, r7
 801d8d4:	f7e2 fcb0 	bl	8000238 <__aeabi_dsub>
 801d8d8:	9e01      	ldr	r6, [sp, #4]
 801d8da:	9f04      	ldr	r7, [sp, #16]
 801d8dc:	3630      	adds	r6, #48	; 0x30
 801d8de:	f805 6b01 	strb.w	r6, [r5], #1
 801d8e2:	9e00      	ldr	r6, [sp, #0]
 801d8e4:	1bae      	subs	r6, r5, r6
 801d8e6:	42b7      	cmp	r7, r6
 801d8e8:	4602      	mov	r2, r0
 801d8ea:	460b      	mov	r3, r1
 801d8ec:	d134      	bne.n	801d958 <_dtoa_r+0x708>
 801d8ee:	f7e2 fca5 	bl	800023c <__adddf3>
 801d8f2:	4642      	mov	r2, r8
 801d8f4:	464b      	mov	r3, r9
 801d8f6:	4606      	mov	r6, r0
 801d8f8:	460f      	mov	r7, r1
 801d8fa:	f7e3 f8e5 	bl	8000ac8 <__aeabi_dcmpgt>
 801d8fe:	b9c8      	cbnz	r0, 801d934 <_dtoa_r+0x6e4>
 801d900:	4642      	mov	r2, r8
 801d902:	464b      	mov	r3, r9
 801d904:	4630      	mov	r0, r6
 801d906:	4639      	mov	r1, r7
 801d908:	f7e3 f8b6 	bl	8000a78 <__aeabi_dcmpeq>
 801d90c:	b110      	cbz	r0, 801d914 <_dtoa_r+0x6c4>
 801d90e:	9b01      	ldr	r3, [sp, #4]
 801d910:	07db      	lsls	r3, r3, #31
 801d912:	d40f      	bmi.n	801d934 <_dtoa_r+0x6e4>
 801d914:	4651      	mov	r1, sl
 801d916:	4620      	mov	r0, r4
 801d918:	f000 fe82 	bl	801e620 <_Bfree>
 801d91c:	2300      	movs	r3, #0
 801d91e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d920:	702b      	strb	r3, [r5, #0]
 801d922:	f10b 0301 	add.w	r3, fp, #1
 801d926:	6013      	str	r3, [r2, #0]
 801d928:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d92a:	2b00      	cmp	r3, #0
 801d92c:	f43f ace2 	beq.w	801d2f4 <_dtoa_r+0xa4>
 801d930:	601d      	str	r5, [r3, #0]
 801d932:	e4df      	b.n	801d2f4 <_dtoa_r+0xa4>
 801d934:	465f      	mov	r7, fp
 801d936:	462b      	mov	r3, r5
 801d938:	461d      	mov	r5, r3
 801d93a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d93e:	2a39      	cmp	r2, #57	; 0x39
 801d940:	d106      	bne.n	801d950 <_dtoa_r+0x700>
 801d942:	9a00      	ldr	r2, [sp, #0]
 801d944:	429a      	cmp	r2, r3
 801d946:	d1f7      	bne.n	801d938 <_dtoa_r+0x6e8>
 801d948:	9900      	ldr	r1, [sp, #0]
 801d94a:	2230      	movs	r2, #48	; 0x30
 801d94c:	3701      	adds	r7, #1
 801d94e:	700a      	strb	r2, [r1, #0]
 801d950:	781a      	ldrb	r2, [r3, #0]
 801d952:	3201      	adds	r2, #1
 801d954:	701a      	strb	r2, [r3, #0]
 801d956:	e790      	b.n	801d87a <_dtoa_r+0x62a>
 801d958:	4ba3      	ldr	r3, [pc, #652]	; (801dbe8 <_dtoa_r+0x998>)
 801d95a:	2200      	movs	r2, #0
 801d95c:	f7e2 fe24 	bl	80005a8 <__aeabi_dmul>
 801d960:	2200      	movs	r2, #0
 801d962:	2300      	movs	r3, #0
 801d964:	4606      	mov	r6, r0
 801d966:	460f      	mov	r7, r1
 801d968:	f7e3 f886 	bl	8000a78 <__aeabi_dcmpeq>
 801d96c:	2800      	cmp	r0, #0
 801d96e:	d09e      	beq.n	801d8ae <_dtoa_r+0x65e>
 801d970:	e7d0      	b.n	801d914 <_dtoa_r+0x6c4>
 801d972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d974:	2a00      	cmp	r2, #0
 801d976:	f000 80ca 	beq.w	801db0e <_dtoa_r+0x8be>
 801d97a:	9a07      	ldr	r2, [sp, #28]
 801d97c:	2a01      	cmp	r2, #1
 801d97e:	f300 80ad 	bgt.w	801dadc <_dtoa_r+0x88c>
 801d982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d984:	2a00      	cmp	r2, #0
 801d986:	f000 80a5 	beq.w	801dad4 <_dtoa_r+0x884>
 801d98a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d98e:	9e08      	ldr	r6, [sp, #32]
 801d990:	9d05      	ldr	r5, [sp, #20]
 801d992:	9a05      	ldr	r2, [sp, #20]
 801d994:	441a      	add	r2, r3
 801d996:	9205      	str	r2, [sp, #20]
 801d998:	9a06      	ldr	r2, [sp, #24]
 801d99a:	2101      	movs	r1, #1
 801d99c:	441a      	add	r2, r3
 801d99e:	4620      	mov	r0, r4
 801d9a0:	9206      	str	r2, [sp, #24]
 801d9a2:	f000 ff3d 	bl	801e820 <__i2b>
 801d9a6:	4607      	mov	r7, r0
 801d9a8:	b165      	cbz	r5, 801d9c4 <_dtoa_r+0x774>
 801d9aa:	9b06      	ldr	r3, [sp, #24]
 801d9ac:	2b00      	cmp	r3, #0
 801d9ae:	dd09      	ble.n	801d9c4 <_dtoa_r+0x774>
 801d9b0:	42ab      	cmp	r3, r5
 801d9b2:	9a05      	ldr	r2, [sp, #20]
 801d9b4:	bfa8      	it	ge
 801d9b6:	462b      	movge	r3, r5
 801d9b8:	1ad2      	subs	r2, r2, r3
 801d9ba:	9205      	str	r2, [sp, #20]
 801d9bc:	9a06      	ldr	r2, [sp, #24]
 801d9be:	1aed      	subs	r5, r5, r3
 801d9c0:	1ad3      	subs	r3, r2, r3
 801d9c2:	9306      	str	r3, [sp, #24]
 801d9c4:	9b08      	ldr	r3, [sp, #32]
 801d9c6:	b1f3      	cbz	r3, 801da06 <_dtoa_r+0x7b6>
 801d9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d9ca:	2b00      	cmp	r3, #0
 801d9cc:	f000 80a3 	beq.w	801db16 <_dtoa_r+0x8c6>
 801d9d0:	2e00      	cmp	r6, #0
 801d9d2:	dd10      	ble.n	801d9f6 <_dtoa_r+0x7a6>
 801d9d4:	4639      	mov	r1, r7
 801d9d6:	4632      	mov	r2, r6
 801d9d8:	4620      	mov	r0, r4
 801d9da:	f000 ffe1 	bl	801e9a0 <__pow5mult>
 801d9de:	4652      	mov	r2, sl
 801d9e0:	4601      	mov	r1, r0
 801d9e2:	4607      	mov	r7, r0
 801d9e4:	4620      	mov	r0, r4
 801d9e6:	f000 ff31 	bl	801e84c <__multiply>
 801d9ea:	4651      	mov	r1, sl
 801d9ec:	4680      	mov	r8, r0
 801d9ee:	4620      	mov	r0, r4
 801d9f0:	f000 fe16 	bl	801e620 <_Bfree>
 801d9f4:	46c2      	mov	sl, r8
 801d9f6:	9b08      	ldr	r3, [sp, #32]
 801d9f8:	1b9a      	subs	r2, r3, r6
 801d9fa:	d004      	beq.n	801da06 <_dtoa_r+0x7b6>
 801d9fc:	4651      	mov	r1, sl
 801d9fe:	4620      	mov	r0, r4
 801da00:	f000 ffce 	bl	801e9a0 <__pow5mult>
 801da04:	4682      	mov	sl, r0
 801da06:	2101      	movs	r1, #1
 801da08:	4620      	mov	r0, r4
 801da0a:	f000 ff09 	bl	801e820 <__i2b>
 801da0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da10:	2b00      	cmp	r3, #0
 801da12:	4606      	mov	r6, r0
 801da14:	f340 8081 	ble.w	801db1a <_dtoa_r+0x8ca>
 801da18:	461a      	mov	r2, r3
 801da1a:	4601      	mov	r1, r0
 801da1c:	4620      	mov	r0, r4
 801da1e:	f000 ffbf 	bl	801e9a0 <__pow5mult>
 801da22:	9b07      	ldr	r3, [sp, #28]
 801da24:	2b01      	cmp	r3, #1
 801da26:	4606      	mov	r6, r0
 801da28:	dd7a      	ble.n	801db20 <_dtoa_r+0x8d0>
 801da2a:	f04f 0800 	mov.w	r8, #0
 801da2e:	6933      	ldr	r3, [r6, #16]
 801da30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801da34:	6918      	ldr	r0, [r3, #16]
 801da36:	f000 fea5 	bl	801e784 <__hi0bits>
 801da3a:	f1c0 0020 	rsb	r0, r0, #32
 801da3e:	9b06      	ldr	r3, [sp, #24]
 801da40:	4418      	add	r0, r3
 801da42:	f010 001f 	ands.w	r0, r0, #31
 801da46:	f000 8094 	beq.w	801db72 <_dtoa_r+0x922>
 801da4a:	f1c0 0320 	rsb	r3, r0, #32
 801da4e:	2b04      	cmp	r3, #4
 801da50:	f340 8085 	ble.w	801db5e <_dtoa_r+0x90e>
 801da54:	9b05      	ldr	r3, [sp, #20]
 801da56:	f1c0 001c 	rsb	r0, r0, #28
 801da5a:	4403      	add	r3, r0
 801da5c:	9305      	str	r3, [sp, #20]
 801da5e:	9b06      	ldr	r3, [sp, #24]
 801da60:	4403      	add	r3, r0
 801da62:	4405      	add	r5, r0
 801da64:	9306      	str	r3, [sp, #24]
 801da66:	9b05      	ldr	r3, [sp, #20]
 801da68:	2b00      	cmp	r3, #0
 801da6a:	dd05      	ble.n	801da78 <_dtoa_r+0x828>
 801da6c:	4651      	mov	r1, sl
 801da6e:	461a      	mov	r2, r3
 801da70:	4620      	mov	r0, r4
 801da72:	f000 ffef 	bl	801ea54 <__lshift>
 801da76:	4682      	mov	sl, r0
 801da78:	9b06      	ldr	r3, [sp, #24]
 801da7a:	2b00      	cmp	r3, #0
 801da7c:	dd05      	ble.n	801da8a <_dtoa_r+0x83a>
 801da7e:	4631      	mov	r1, r6
 801da80:	461a      	mov	r2, r3
 801da82:	4620      	mov	r0, r4
 801da84:	f000 ffe6 	bl	801ea54 <__lshift>
 801da88:	4606      	mov	r6, r0
 801da8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801da8c:	2b00      	cmp	r3, #0
 801da8e:	d072      	beq.n	801db76 <_dtoa_r+0x926>
 801da90:	4631      	mov	r1, r6
 801da92:	4650      	mov	r0, sl
 801da94:	f001 f84a 	bl	801eb2c <__mcmp>
 801da98:	2800      	cmp	r0, #0
 801da9a:	da6c      	bge.n	801db76 <_dtoa_r+0x926>
 801da9c:	2300      	movs	r3, #0
 801da9e:	4651      	mov	r1, sl
 801daa0:	220a      	movs	r2, #10
 801daa2:	4620      	mov	r0, r4
 801daa4:	f000 fdde 	bl	801e664 <__multadd>
 801daa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801daaa:	f10b 3bff 	add.w	fp, fp, #4294967295
 801daae:	4682      	mov	sl, r0
 801dab0:	2b00      	cmp	r3, #0
 801dab2:	f000 81b0 	beq.w	801de16 <_dtoa_r+0xbc6>
 801dab6:	2300      	movs	r3, #0
 801dab8:	4639      	mov	r1, r7
 801daba:	220a      	movs	r2, #10
 801dabc:	4620      	mov	r0, r4
 801dabe:	f000 fdd1 	bl	801e664 <__multadd>
 801dac2:	9b01      	ldr	r3, [sp, #4]
 801dac4:	2b00      	cmp	r3, #0
 801dac6:	4607      	mov	r7, r0
 801dac8:	f300 8096 	bgt.w	801dbf8 <_dtoa_r+0x9a8>
 801dacc:	9b07      	ldr	r3, [sp, #28]
 801dace:	2b02      	cmp	r3, #2
 801dad0:	dc59      	bgt.n	801db86 <_dtoa_r+0x936>
 801dad2:	e091      	b.n	801dbf8 <_dtoa_r+0x9a8>
 801dad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dad6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801dada:	e758      	b.n	801d98e <_dtoa_r+0x73e>
 801dadc:	9b04      	ldr	r3, [sp, #16]
 801dade:	1e5e      	subs	r6, r3, #1
 801dae0:	9b08      	ldr	r3, [sp, #32]
 801dae2:	42b3      	cmp	r3, r6
 801dae4:	bfbf      	itttt	lt
 801dae6:	9b08      	ldrlt	r3, [sp, #32]
 801dae8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801daea:	9608      	strlt	r6, [sp, #32]
 801daec:	1af3      	sublt	r3, r6, r3
 801daee:	bfb4      	ite	lt
 801daf0:	18d2      	addlt	r2, r2, r3
 801daf2:	1b9e      	subge	r6, r3, r6
 801daf4:	9b04      	ldr	r3, [sp, #16]
 801daf6:	bfbc      	itt	lt
 801daf8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801dafa:	2600      	movlt	r6, #0
 801dafc:	2b00      	cmp	r3, #0
 801dafe:	bfb7      	itett	lt
 801db00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801db04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801db08:	1a9d      	sublt	r5, r3, r2
 801db0a:	2300      	movlt	r3, #0
 801db0c:	e741      	b.n	801d992 <_dtoa_r+0x742>
 801db0e:	9e08      	ldr	r6, [sp, #32]
 801db10:	9d05      	ldr	r5, [sp, #20]
 801db12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801db14:	e748      	b.n	801d9a8 <_dtoa_r+0x758>
 801db16:	9a08      	ldr	r2, [sp, #32]
 801db18:	e770      	b.n	801d9fc <_dtoa_r+0x7ac>
 801db1a:	9b07      	ldr	r3, [sp, #28]
 801db1c:	2b01      	cmp	r3, #1
 801db1e:	dc19      	bgt.n	801db54 <_dtoa_r+0x904>
 801db20:	9b02      	ldr	r3, [sp, #8]
 801db22:	b9bb      	cbnz	r3, 801db54 <_dtoa_r+0x904>
 801db24:	9b03      	ldr	r3, [sp, #12]
 801db26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801db2a:	b99b      	cbnz	r3, 801db54 <_dtoa_r+0x904>
 801db2c:	9b03      	ldr	r3, [sp, #12]
 801db2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801db32:	0d1b      	lsrs	r3, r3, #20
 801db34:	051b      	lsls	r3, r3, #20
 801db36:	b183      	cbz	r3, 801db5a <_dtoa_r+0x90a>
 801db38:	9b05      	ldr	r3, [sp, #20]
 801db3a:	3301      	adds	r3, #1
 801db3c:	9305      	str	r3, [sp, #20]
 801db3e:	9b06      	ldr	r3, [sp, #24]
 801db40:	3301      	adds	r3, #1
 801db42:	9306      	str	r3, [sp, #24]
 801db44:	f04f 0801 	mov.w	r8, #1
 801db48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	f47f af6f 	bne.w	801da2e <_dtoa_r+0x7de>
 801db50:	2001      	movs	r0, #1
 801db52:	e774      	b.n	801da3e <_dtoa_r+0x7ee>
 801db54:	f04f 0800 	mov.w	r8, #0
 801db58:	e7f6      	b.n	801db48 <_dtoa_r+0x8f8>
 801db5a:	4698      	mov	r8, r3
 801db5c:	e7f4      	b.n	801db48 <_dtoa_r+0x8f8>
 801db5e:	d082      	beq.n	801da66 <_dtoa_r+0x816>
 801db60:	9a05      	ldr	r2, [sp, #20]
 801db62:	331c      	adds	r3, #28
 801db64:	441a      	add	r2, r3
 801db66:	9205      	str	r2, [sp, #20]
 801db68:	9a06      	ldr	r2, [sp, #24]
 801db6a:	441a      	add	r2, r3
 801db6c:	441d      	add	r5, r3
 801db6e:	9206      	str	r2, [sp, #24]
 801db70:	e779      	b.n	801da66 <_dtoa_r+0x816>
 801db72:	4603      	mov	r3, r0
 801db74:	e7f4      	b.n	801db60 <_dtoa_r+0x910>
 801db76:	9b04      	ldr	r3, [sp, #16]
 801db78:	2b00      	cmp	r3, #0
 801db7a:	dc37      	bgt.n	801dbec <_dtoa_r+0x99c>
 801db7c:	9b07      	ldr	r3, [sp, #28]
 801db7e:	2b02      	cmp	r3, #2
 801db80:	dd34      	ble.n	801dbec <_dtoa_r+0x99c>
 801db82:	9b04      	ldr	r3, [sp, #16]
 801db84:	9301      	str	r3, [sp, #4]
 801db86:	9b01      	ldr	r3, [sp, #4]
 801db88:	b963      	cbnz	r3, 801dba4 <_dtoa_r+0x954>
 801db8a:	4631      	mov	r1, r6
 801db8c:	2205      	movs	r2, #5
 801db8e:	4620      	mov	r0, r4
 801db90:	f000 fd68 	bl	801e664 <__multadd>
 801db94:	4601      	mov	r1, r0
 801db96:	4606      	mov	r6, r0
 801db98:	4650      	mov	r0, sl
 801db9a:	f000 ffc7 	bl	801eb2c <__mcmp>
 801db9e:	2800      	cmp	r0, #0
 801dba0:	f73f adbb 	bgt.w	801d71a <_dtoa_r+0x4ca>
 801dba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dba6:	9d00      	ldr	r5, [sp, #0]
 801dba8:	ea6f 0b03 	mvn.w	fp, r3
 801dbac:	f04f 0800 	mov.w	r8, #0
 801dbb0:	4631      	mov	r1, r6
 801dbb2:	4620      	mov	r0, r4
 801dbb4:	f000 fd34 	bl	801e620 <_Bfree>
 801dbb8:	2f00      	cmp	r7, #0
 801dbba:	f43f aeab 	beq.w	801d914 <_dtoa_r+0x6c4>
 801dbbe:	f1b8 0f00 	cmp.w	r8, #0
 801dbc2:	d005      	beq.n	801dbd0 <_dtoa_r+0x980>
 801dbc4:	45b8      	cmp	r8, r7
 801dbc6:	d003      	beq.n	801dbd0 <_dtoa_r+0x980>
 801dbc8:	4641      	mov	r1, r8
 801dbca:	4620      	mov	r0, r4
 801dbcc:	f000 fd28 	bl	801e620 <_Bfree>
 801dbd0:	4639      	mov	r1, r7
 801dbd2:	4620      	mov	r0, r4
 801dbd4:	f000 fd24 	bl	801e620 <_Bfree>
 801dbd8:	e69c      	b.n	801d914 <_dtoa_r+0x6c4>
 801dbda:	2600      	movs	r6, #0
 801dbdc:	4637      	mov	r7, r6
 801dbde:	e7e1      	b.n	801dba4 <_dtoa_r+0x954>
 801dbe0:	46bb      	mov	fp, r7
 801dbe2:	4637      	mov	r7, r6
 801dbe4:	e599      	b.n	801d71a <_dtoa_r+0x4ca>
 801dbe6:	bf00      	nop
 801dbe8:	40240000 	.word	0x40240000
 801dbec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	f000 80c8 	beq.w	801dd84 <_dtoa_r+0xb34>
 801dbf4:	9b04      	ldr	r3, [sp, #16]
 801dbf6:	9301      	str	r3, [sp, #4]
 801dbf8:	2d00      	cmp	r5, #0
 801dbfa:	dd05      	ble.n	801dc08 <_dtoa_r+0x9b8>
 801dbfc:	4639      	mov	r1, r7
 801dbfe:	462a      	mov	r2, r5
 801dc00:	4620      	mov	r0, r4
 801dc02:	f000 ff27 	bl	801ea54 <__lshift>
 801dc06:	4607      	mov	r7, r0
 801dc08:	f1b8 0f00 	cmp.w	r8, #0
 801dc0c:	d05b      	beq.n	801dcc6 <_dtoa_r+0xa76>
 801dc0e:	6879      	ldr	r1, [r7, #4]
 801dc10:	4620      	mov	r0, r4
 801dc12:	f000 fcc5 	bl	801e5a0 <_Balloc>
 801dc16:	4605      	mov	r5, r0
 801dc18:	b928      	cbnz	r0, 801dc26 <_dtoa_r+0x9d6>
 801dc1a:	4b83      	ldr	r3, [pc, #524]	; (801de28 <_dtoa_r+0xbd8>)
 801dc1c:	4602      	mov	r2, r0
 801dc1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801dc22:	f7ff bb2e 	b.w	801d282 <_dtoa_r+0x32>
 801dc26:	693a      	ldr	r2, [r7, #16]
 801dc28:	3202      	adds	r2, #2
 801dc2a:	0092      	lsls	r2, r2, #2
 801dc2c:	f107 010c 	add.w	r1, r7, #12
 801dc30:	300c      	adds	r0, #12
 801dc32:	f7ff fa4a 	bl	801d0ca <memcpy>
 801dc36:	2201      	movs	r2, #1
 801dc38:	4629      	mov	r1, r5
 801dc3a:	4620      	mov	r0, r4
 801dc3c:	f000 ff0a 	bl	801ea54 <__lshift>
 801dc40:	9b00      	ldr	r3, [sp, #0]
 801dc42:	3301      	adds	r3, #1
 801dc44:	9304      	str	r3, [sp, #16]
 801dc46:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dc4a:	4413      	add	r3, r2
 801dc4c:	9308      	str	r3, [sp, #32]
 801dc4e:	9b02      	ldr	r3, [sp, #8]
 801dc50:	f003 0301 	and.w	r3, r3, #1
 801dc54:	46b8      	mov	r8, r7
 801dc56:	9306      	str	r3, [sp, #24]
 801dc58:	4607      	mov	r7, r0
 801dc5a:	9b04      	ldr	r3, [sp, #16]
 801dc5c:	4631      	mov	r1, r6
 801dc5e:	3b01      	subs	r3, #1
 801dc60:	4650      	mov	r0, sl
 801dc62:	9301      	str	r3, [sp, #4]
 801dc64:	f7ff fa6c 	bl	801d140 <quorem>
 801dc68:	4641      	mov	r1, r8
 801dc6a:	9002      	str	r0, [sp, #8]
 801dc6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801dc70:	4650      	mov	r0, sl
 801dc72:	f000 ff5b 	bl	801eb2c <__mcmp>
 801dc76:	463a      	mov	r2, r7
 801dc78:	9005      	str	r0, [sp, #20]
 801dc7a:	4631      	mov	r1, r6
 801dc7c:	4620      	mov	r0, r4
 801dc7e:	f000 ff71 	bl	801eb64 <__mdiff>
 801dc82:	68c2      	ldr	r2, [r0, #12]
 801dc84:	4605      	mov	r5, r0
 801dc86:	bb02      	cbnz	r2, 801dcca <_dtoa_r+0xa7a>
 801dc88:	4601      	mov	r1, r0
 801dc8a:	4650      	mov	r0, sl
 801dc8c:	f000 ff4e 	bl	801eb2c <__mcmp>
 801dc90:	4602      	mov	r2, r0
 801dc92:	4629      	mov	r1, r5
 801dc94:	4620      	mov	r0, r4
 801dc96:	9209      	str	r2, [sp, #36]	; 0x24
 801dc98:	f000 fcc2 	bl	801e620 <_Bfree>
 801dc9c:	9b07      	ldr	r3, [sp, #28]
 801dc9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dca0:	9d04      	ldr	r5, [sp, #16]
 801dca2:	ea43 0102 	orr.w	r1, r3, r2
 801dca6:	9b06      	ldr	r3, [sp, #24]
 801dca8:	4319      	orrs	r1, r3
 801dcaa:	d110      	bne.n	801dcce <_dtoa_r+0xa7e>
 801dcac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801dcb0:	d029      	beq.n	801dd06 <_dtoa_r+0xab6>
 801dcb2:	9b05      	ldr	r3, [sp, #20]
 801dcb4:	2b00      	cmp	r3, #0
 801dcb6:	dd02      	ble.n	801dcbe <_dtoa_r+0xa6e>
 801dcb8:	9b02      	ldr	r3, [sp, #8]
 801dcba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801dcbe:	9b01      	ldr	r3, [sp, #4]
 801dcc0:	f883 9000 	strb.w	r9, [r3]
 801dcc4:	e774      	b.n	801dbb0 <_dtoa_r+0x960>
 801dcc6:	4638      	mov	r0, r7
 801dcc8:	e7ba      	b.n	801dc40 <_dtoa_r+0x9f0>
 801dcca:	2201      	movs	r2, #1
 801dccc:	e7e1      	b.n	801dc92 <_dtoa_r+0xa42>
 801dcce:	9b05      	ldr	r3, [sp, #20]
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	db04      	blt.n	801dcde <_dtoa_r+0xa8e>
 801dcd4:	9907      	ldr	r1, [sp, #28]
 801dcd6:	430b      	orrs	r3, r1
 801dcd8:	9906      	ldr	r1, [sp, #24]
 801dcda:	430b      	orrs	r3, r1
 801dcdc:	d120      	bne.n	801dd20 <_dtoa_r+0xad0>
 801dcde:	2a00      	cmp	r2, #0
 801dce0:	dded      	ble.n	801dcbe <_dtoa_r+0xa6e>
 801dce2:	4651      	mov	r1, sl
 801dce4:	2201      	movs	r2, #1
 801dce6:	4620      	mov	r0, r4
 801dce8:	f000 feb4 	bl	801ea54 <__lshift>
 801dcec:	4631      	mov	r1, r6
 801dcee:	4682      	mov	sl, r0
 801dcf0:	f000 ff1c 	bl	801eb2c <__mcmp>
 801dcf4:	2800      	cmp	r0, #0
 801dcf6:	dc03      	bgt.n	801dd00 <_dtoa_r+0xab0>
 801dcf8:	d1e1      	bne.n	801dcbe <_dtoa_r+0xa6e>
 801dcfa:	f019 0f01 	tst.w	r9, #1
 801dcfe:	d0de      	beq.n	801dcbe <_dtoa_r+0xa6e>
 801dd00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801dd04:	d1d8      	bne.n	801dcb8 <_dtoa_r+0xa68>
 801dd06:	9a01      	ldr	r2, [sp, #4]
 801dd08:	2339      	movs	r3, #57	; 0x39
 801dd0a:	7013      	strb	r3, [r2, #0]
 801dd0c:	462b      	mov	r3, r5
 801dd0e:	461d      	mov	r5, r3
 801dd10:	3b01      	subs	r3, #1
 801dd12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801dd16:	2a39      	cmp	r2, #57	; 0x39
 801dd18:	d06c      	beq.n	801ddf4 <_dtoa_r+0xba4>
 801dd1a:	3201      	adds	r2, #1
 801dd1c:	701a      	strb	r2, [r3, #0]
 801dd1e:	e747      	b.n	801dbb0 <_dtoa_r+0x960>
 801dd20:	2a00      	cmp	r2, #0
 801dd22:	dd07      	ble.n	801dd34 <_dtoa_r+0xae4>
 801dd24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801dd28:	d0ed      	beq.n	801dd06 <_dtoa_r+0xab6>
 801dd2a:	9a01      	ldr	r2, [sp, #4]
 801dd2c:	f109 0301 	add.w	r3, r9, #1
 801dd30:	7013      	strb	r3, [r2, #0]
 801dd32:	e73d      	b.n	801dbb0 <_dtoa_r+0x960>
 801dd34:	9b04      	ldr	r3, [sp, #16]
 801dd36:	9a08      	ldr	r2, [sp, #32]
 801dd38:	f803 9c01 	strb.w	r9, [r3, #-1]
 801dd3c:	4293      	cmp	r3, r2
 801dd3e:	d043      	beq.n	801ddc8 <_dtoa_r+0xb78>
 801dd40:	4651      	mov	r1, sl
 801dd42:	2300      	movs	r3, #0
 801dd44:	220a      	movs	r2, #10
 801dd46:	4620      	mov	r0, r4
 801dd48:	f000 fc8c 	bl	801e664 <__multadd>
 801dd4c:	45b8      	cmp	r8, r7
 801dd4e:	4682      	mov	sl, r0
 801dd50:	f04f 0300 	mov.w	r3, #0
 801dd54:	f04f 020a 	mov.w	r2, #10
 801dd58:	4641      	mov	r1, r8
 801dd5a:	4620      	mov	r0, r4
 801dd5c:	d107      	bne.n	801dd6e <_dtoa_r+0xb1e>
 801dd5e:	f000 fc81 	bl	801e664 <__multadd>
 801dd62:	4680      	mov	r8, r0
 801dd64:	4607      	mov	r7, r0
 801dd66:	9b04      	ldr	r3, [sp, #16]
 801dd68:	3301      	adds	r3, #1
 801dd6a:	9304      	str	r3, [sp, #16]
 801dd6c:	e775      	b.n	801dc5a <_dtoa_r+0xa0a>
 801dd6e:	f000 fc79 	bl	801e664 <__multadd>
 801dd72:	4639      	mov	r1, r7
 801dd74:	4680      	mov	r8, r0
 801dd76:	2300      	movs	r3, #0
 801dd78:	220a      	movs	r2, #10
 801dd7a:	4620      	mov	r0, r4
 801dd7c:	f000 fc72 	bl	801e664 <__multadd>
 801dd80:	4607      	mov	r7, r0
 801dd82:	e7f0      	b.n	801dd66 <_dtoa_r+0xb16>
 801dd84:	9b04      	ldr	r3, [sp, #16]
 801dd86:	9301      	str	r3, [sp, #4]
 801dd88:	9d00      	ldr	r5, [sp, #0]
 801dd8a:	4631      	mov	r1, r6
 801dd8c:	4650      	mov	r0, sl
 801dd8e:	f7ff f9d7 	bl	801d140 <quorem>
 801dd92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801dd96:	9b00      	ldr	r3, [sp, #0]
 801dd98:	f805 9b01 	strb.w	r9, [r5], #1
 801dd9c:	1aea      	subs	r2, r5, r3
 801dd9e:	9b01      	ldr	r3, [sp, #4]
 801dda0:	4293      	cmp	r3, r2
 801dda2:	dd07      	ble.n	801ddb4 <_dtoa_r+0xb64>
 801dda4:	4651      	mov	r1, sl
 801dda6:	2300      	movs	r3, #0
 801dda8:	220a      	movs	r2, #10
 801ddaa:	4620      	mov	r0, r4
 801ddac:	f000 fc5a 	bl	801e664 <__multadd>
 801ddb0:	4682      	mov	sl, r0
 801ddb2:	e7ea      	b.n	801dd8a <_dtoa_r+0xb3a>
 801ddb4:	9b01      	ldr	r3, [sp, #4]
 801ddb6:	2b00      	cmp	r3, #0
 801ddb8:	bfc8      	it	gt
 801ddba:	461d      	movgt	r5, r3
 801ddbc:	9b00      	ldr	r3, [sp, #0]
 801ddbe:	bfd8      	it	le
 801ddc0:	2501      	movle	r5, #1
 801ddc2:	441d      	add	r5, r3
 801ddc4:	f04f 0800 	mov.w	r8, #0
 801ddc8:	4651      	mov	r1, sl
 801ddca:	2201      	movs	r2, #1
 801ddcc:	4620      	mov	r0, r4
 801ddce:	f000 fe41 	bl	801ea54 <__lshift>
 801ddd2:	4631      	mov	r1, r6
 801ddd4:	4682      	mov	sl, r0
 801ddd6:	f000 fea9 	bl	801eb2c <__mcmp>
 801ddda:	2800      	cmp	r0, #0
 801dddc:	dc96      	bgt.n	801dd0c <_dtoa_r+0xabc>
 801ddde:	d102      	bne.n	801dde6 <_dtoa_r+0xb96>
 801dde0:	f019 0f01 	tst.w	r9, #1
 801dde4:	d192      	bne.n	801dd0c <_dtoa_r+0xabc>
 801dde6:	462b      	mov	r3, r5
 801dde8:	461d      	mov	r5, r3
 801ddea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ddee:	2a30      	cmp	r2, #48	; 0x30
 801ddf0:	d0fa      	beq.n	801dde8 <_dtoa_r+0xb98>
 801ddf2:	e6dd      	b.n	801dbb0 <_dtoa_r+0x960>
 801ddf4:	9a00      	ldr	r2, [sp, #0]
 801ddf6:	429a      	cmp	r2, r3
 801ddf8:	d189      	bne.n	801dd0e <_dtoa_r+0xabe>
 801ddfa:	f10b 0b01 	add.w	fp, fp, #1
 801ddfe:	2331      	movs	r3, #49	; 0x31
 801de00:	e796      	b.n	801dd30 <_dtoa_r+0xae0>
 801de02:	4b0a      	ldr	r3, [pc, #40]	; (801de2c <_dtoa_r+0xbdc>)
 801de04:	f7ff ba99 	b.w	801d33a <_dtoa_r+0xea>
 801de08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801de0a:	2b00      	cmp	r3, #0
 801de0c:	f47f aa6d 	bne.w	801d2ea <_dtoa_r+0x9a>
 801de10:	4b07      	ldr	r3, [pc, #28]	; (801de30 <_dtoa_r+0xbe0>)
 801de12:	f7ff ba92 	b.w	801d33a <_dtoa_r+0xea>
 801de16:	9b01      	ldr	r3, [sp, #4]
 801de18:	2b00      	cmp	r3, #0
 801de1a:	dcb5      	bgt.n	801dd88 <_dtoa_r+0xb38>
 801de1c:	9b07      	ldr	r3, [sp, #28]
 801de1e:	2b02      	cmp	r3, #2
 801de20:	f73f aeb1 	bgt.w	801db86 <_dtoa_r+0x936>
 801de24:	e7b0      	b.n	801dd88 <_dtoa_r+0xb38>
 801de26:	bf00      	nop
 801de28:	08023b6c 	.word	0x08023b6c
 801de2c:	08023a29 	.word	0x08023a29
 801de30:	08023b07 	.word	0x08023b07

0801de34 <_free_r>:
 801de34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801de36:	2900      	cmp	r1, #0
 801de38:	d044      	beq.n	801dec4 <_free_r+0x90>
 801de3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801de3e:	9001      	str	r0, [sp, #4]
 801de40:	2b00      	cmp	r3, #0
 801de42:	f1a1 0404 	sub.w	r4, r1, #4
 801de46:	bfb8      	it	lt
 801de48:	18e4      	addlt	r4, r4, r3
 801de4a:	f7fd f93f 	bl	801b0cc <__malloc_lock>
 801de4e:	4a1e      	ldr	r2, [pc, #120]	; (801dec8 <_free_r+0x94>)
 801de50:	9801      	ldr	r0, [sp, #4]
 801de52:	6813      	ldr	r3, [r2, #0]
 801de54:	b933      	cbnz	r3, 801de64 <_free_r+0x30>
 801de56:	6063      	str	r3, [r4, #4]
 801de58:	6014      	str	r4, [r2, #0]
 801de5a:	b003      	add	sp, #12
 801de5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801de60:	f7fd b93a 	b.w	801b0d8 <__malloc_unlock>
 801de64:	42a3      	cmp	r3, r4
 801de66:	d908      	bls.n	801de7a <_free_r+0x46>
 801de68:	6825      	ldr	r5, [r4, #0]
 801de6a:	1961      	adds	r1, r4, r5
 801de6c:	428b      	cmp	r3, r1
 801de6e:	bf01      	itttt	eq
 801de70:	6819      	ldreq	r1, [r3, #0]
 801de72:	685b      	ldreq	r3, [r3, #4]
 801de74:	1949      	addeq	r1, r1, r5
 801de76:	6021      	streq	r1, [r4, #0]
 801de78:	e7ed      	b.n	801de56 <_free_r+0x22>
 801de7a:	461a      	mov	r2, r3
 801de7c:	685b      	ldr	r3, [r3, #4]
 801de7e:	b10b      	cbz	r3, 801de84 <_free_r+0x50>
 801de80:	42a3      	cmp	r3, r4
 801de82:	d9fa      	bls.n	801de7a <_free_r+0x46>
 801de84:	6811      	ldr	r1, [r2, #0]
 801de86:	1855      	adds	r5, r2, r1
 801de88:	42a5      	cmp	r5, r4
 801de8a:	d10b      	bne.n	801dea4 <_free_r+0x70>
 801de8c:	6824      	ldr	r4, [r4, #0]
 801de8e:	4421      	add	r1, r4
 801de90:	1854      	adds	r4, r2, r1
 801de92:	42a3      	cmp	r3, r4
 801de94:	6011      	str	r1, [r2, #0]
 801de96:	d1e0      	bne.n	801de5a <_free_r+0x26>
 801de98:	681c      	ldr	r4, [r3, #0]
 801de9a:	685b      	ldr	r3, [r3, #4]
 801de9c:	6053      	str	r3, [r2, #4]
 801de9e:	440c      	add	r4, r1
 801dea0:	6014      	str	r4, [r2, #0]
 801dea2:	e7da      	b.n	801de5a <_free_r+0x26>
 801dea4:	d902      	bls.n	801deac <_free_r+0x78>
 801dea6:	230c      	movs	r3, #12
 801dea8:	6003      	str	r3, [r0, #0]
 801deaa:	e7d6      	b.n	801de5a <_free_r+0x26>
 801deac:	6825      	ldr	r5, [r4, #0]
 801deae:	1961      	adds	r1, r4, r5
 801deb0:	428b      	cmp	r3, r1
 801deb2:	bf04      	itt	eq
 801deb4:	6819      	ldreq	r1, [r3, #0]
 801deb6:	685b      	ldreq	r3, [r3, #4]
 801deb8:	6063      	str	r3, [r4, #4]
 801deba:	bf04      	itt	eq
 801debc:	1949      	addeq	r1, r1, r5
 801debe:	6021      	streq	r1, [r4, #0]
 801dec0:	6054      	str	r4, [r2, #4]
 801dec2:	e7ca      	b.n	801de5a <_free_r+0x26>
 801dec4:	b003      	add	sp, #12
 801dec6:	bd30      	pop	{r4, r5, pc}
 801dec8:	200030e4 	.word	0x200030e4

0801decc <rshift>:
 801decc:	6903      	ldr	r3, [r0, #16]
 801dece:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ded2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ded6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801deda:	f100 0414 	add.w	r4, r0, #20
 801dede:	dd45      	ble.n	801df6c <rshift+0xa0>
 801dee0:	f011 011f 	ands.w	r1, r1, #31
 801dee4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801dee8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801deec:	d10c      	bne.n	801df08 <rshift+0x3c>
 801deee:	f100 0710 	add.w	r7, r0, #16
 801def2:	4629      	mov	r1, r5
 801def4:	42b1      	cmp	r1, r6
 801def6:	d334      	bcc.n	801df62 <rshift+0x96>
 801def8:	1a9b      	subs	r3, r3, r2
 801defa:	009b      	lsls	r3, r3, #2
 801defc:	1eea      	subs	r2, r5, #3
 801defe:	4296      	cmp	r6, r2
 801df00:	bf38      	it	cc
 801df02:	2300      	movcc	r3, #0
 801df04:	4423      	add	r3, r4
 801df06:	e015      	b.n	801df34 <rshift+0x68>
 801df08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801df0c:	f1c1 0820 	rsb	r8, r1, #32
 801df10:	40cf      	lsrs	r7, r1
 801df12:	f105 0e04 	add.w	lr, r5, #4
 801df16:	46a1      	mov	r9, r4
 801df18:	4576      	cmp	r6, lr
 801df1a:	46f4      	mov	ip, lr
 801df1c:	d815      	bhi.n	801df4a <rshift+0x7e>
 801df1e:	1a9a      	subs	r2, r3, r2
 801df20:	0092      	lsls	r2, r2, #2
 801df22:	3a04      	subs	r2, #4
 801df24:	3501      	adds	r5, #1
 801df26:	42ae      	cmp	r6, r5
 801df28:	bf38      	it	cc
 801df2a:	2200      	movcc	r2, #0
 801df2c:	18a3      	adds	r3, r4, r2
 801df2e:	50a7      	str	r7, [r4, r2]
 801df30:	b107      	cbz	r7, 801df34 <rshift+0x68>
 801df32:	3304      	adds	r3, #4
 801df34:	1b1a      	subs	r2, r3, r4
 801df36:	42a3      	cmp	r3, r4
 801df38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801df3c:	bf08      	it	eq
 801df3e:	2300      	moveq	r3, #0
 801df40:	6102      	str	r2, [r0, #16]
 801df42:	bf08      	it	eq
 801df44:	6143      	streq	r3, [r0, #20]
 801df46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801df4a:	f8dc c000 	ldr.w	ip, [ip]
 801df4e:	fa0c fc08 	lsl.w	ip, ip, r8
 801df52:	ea4c 0707 	orr.w	r7, ip, r7
 801df56:	f849 7b04 	str.w	r7, [r9], #4
 801df5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801df5e:	40cf      	lsrs	r7, r1
 801df60:	e7da      	b.n	801df18 <rshift+0x4c>
 801df62:	f851 cb04 	ldr.w	ip, [r1], #4
 801df66:	f847 cf04 	str.w	ip, [r7, #4]!
 801df6a:	e7c3      	b.n	801def4 <rshift+0x28>
 801df6c:	4623      	mov	r3, r4
 801df6e:	e7e1      	b.n	801df34 <rshift+0x68>

0801df70 <__hexdig_fun>:
 801df70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801df74:	2b09      	cmp	r3, #9
 801df76:	d802      	bhi.n	801df7e <__hexdig_fun+0xe>
 801df78:	3820      	subs	r0, #32
 801df7a:	b2c0      	uxtb	r0, r0
 801df7c:	4770      	bx	lr
 801df7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801df82:	2b05      	cmp	r3, #5
 801df84:	d801      	bhi.n	801df8a <__hexdig_fun+0x1a>
 801df86:	3847      	subs	r0, #71	; 0x47
 801df88:	e7f7      	b.n	801df7a <__hexdig_fun+0xa>
 801df8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801df8e:	2b05      	cmp	r3, #5
 801df90:	d801      	bhi.n	801df96 <__hexdig_fun+0x26>
 801df92:	3827      	subs	r0, #39	; 0x27
 801df94:	e7f1      	b.n	801df7a <__hexdig_fun+0xa>
 801df96:	2000      	movs	r0, #0
 801df98:	4770      	bx	lr
	...

0801df9c <__gethex>:
 801df9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfa0:	4617      	mov	r7, r2
 801dfa2:	680a      	ldr	r2, [r1, #0]
 801dfa4:	b085      	sub	sp, #20
 801dfa6:	f102 0b02 	add.w	fp, r2, #2
 801dfaa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801dfae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801dfb2:	4681      	mov	r9, r0
 801dfb4:	468a      	mov	sl, r1
 801dfb6:	9302      	str	r3, [sp, #8]
 801dfb8:	32fe      	adds	r2, #254	; 0xfe
 801dfba:	eb02 030b 	add.w	r3, r2, fp
 801dfbe:	46d8      	mov	r8, fp
 801dfc0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801dfc4:	9301      	str	r3, [sp, #4]
 801dfc6:	2830      	cmp	r0, #48	; 0x30
 801dfc8:	d0f7      	beq.n	801dfba <__gethex+0x1e>
 801dfca:	f7ff ffd1 	bl	801df70 <__hexdig_fun>
 801dfce:	4604      	mov	r4, r0
 801dfd0:	2800      	cmp	r0, #0
 801dfd2:	d138      	bne.n	801e046 <__gethex+0xaa>
 801dfd4:	49a7      	ldr	r1, [pc, #668]	; (801e274 <__gethex+0x2d8>)
 801dfd6:	2201      	movs	r2, #1
 801dfd8:	4640      	mov	r0, r8
 801dfda:	f7fe ff62 	bl	801cea2 <strncmp>
 801dfde:	4606      	mov	r6, r0
 801dfe0:	2800      	cmp	r0, #0
 801dfe2:	d169      	bne.n	801e0b8 <__gethex+0x11c>
 801dfe4:	f898 0001 	ldrb.w	r0, [r8, #1]
 801dfe8:	465d      	mov	r5, fp
 801dfea:	f7ff ffc1 	bl	801df70 <__hexdig_fun>
 801dfee:	2800      	cmp	r0, #0
 801dff0:	d064      	beq.n	801e0bc <__gethex+0x120>
 801dff2:	465a      	mov	r2, fp
 801dff4:	7810      	ldrb	r0, [r2, #0]
 801dff6:	2830      	cmp	r0, #48	; 0x30
 801dff8:	4690      	mov	r8, r2
 801dffa:	f102 0201 	add.w	r2, r2, #1
 801dffe:	d0f9      	beq.n	801dff4 <__gethex+0x58>
 801e000:	f7ff ffb6 	bl	801df70 <__hexdig_fun>
 801e004:	2301      	movs	r3, #1
 801e006:	fab0 f480 	clz	r4, r0
 801e00a:	0964      	lsrs	r4, r4, #5
 801e00c:	465e      	mov	r6, fp
 801e00e:	9301      	str	r3, [sp, #4]
 801e010:	4642      	mov	r2, r8
 801e012:	4615      	mov	r5, r2
 801e014:	3201      	adds	r2, #1
 801e016:	7828      	ldrb	r0, [r5, #0]
 801e018:	f7ff ffaa 	bl	801df70 <__hexdig_fun>
 801e01c:	2800      	cmp	r0, #0
 801e01e:	d1f8      	bne.n	801e012 <__gethex+0x76>
 801e020:	4994      	ldr	r1, [pc, #592]	; (801e274 <__gethex+0x2d8>)
 801e022:	2201      	movs	r2, #1
 801e024:	4628      	mov	r0, r5
 801e026:	f7fe ff3c 	bl	801cea2 <strncmp>
 801e02a:	b978      	cbnz	r0, 801e04c <__gethex+0xb0>
 801e02c:	b946      	cbnz	r6, 801e040 <__gethex+0xa4>
 801e02e:	1c6e      	adds	r6, r5, #1
 801e030:	4632      	mov	r2, r6
 801e032:	4615      	mov	r5, r2
 801e034:	3201      	adds	r2, #1
 801e036:	7828      	ldrb	r0, [r5, #0]
 801e038:	f7ff ff9a 	bl	801df70 <__hexdig_fun>
 801e03c:	2800      	cmp	r0, #0
 801e03e:	d1f8      	bne.n	801e032 <__gethex+0x96>
 801e040:	1b73      	subs	r3, r6, r5
 801e042:	009e      	lsls	r6, r3, #2
 801e044:	e004      	b.n	801e050 <__gethex+0xb4>
 801e046:	2400      	movs	r4, #0
 801e048:	4626      	mov	r6, r4
 801e04a:	e7e1      	b.n	801e010 <__gethex+0x74>
 801e04c:	2e00      	cmp	r6, #0
 801e04e:	d1f7      	bne.n	801e040 <__gethex+0xa4>
 801e050:	782b      	ldrb	r3, [r5, #0]
 801e052:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e056:	2b50      	cmp	r3, #80	; 0x50
 801e058:	d13d      	bne.n	801e0d6 <__gethex+0x13a>
 801e05a:	786b      	ldrb	r3, [r5, #1]
 801e05c:	2b2b      	cmp	r3, #43	; 0x2b
 801e05e:	d02f      	beq.n	801e0c0 <__gethex+0x124>
 801e060:	2b2d      	cmp	r3, #45	; 0x2d
 801e062:	d031      	beq.n	801e0c8 <__gethex+0x12c>
 801e064:	1c69      	adds	r1, r5, #1
 801e066:	f04f 0b00 	mov.w	fp, #0
 801e06a:	7808      	ldrb	r0, [r1, #0]
 801e06c:	f7ff ff80 	bl	801df70 <__hexdig_fun>
 801e070:	1e42      	subs	r2, r0, #1
 801e072:	b2d2      	uxtb	r2, r2
 801e074:	2a18      	cmp	r2, #24
 801e076:	d82e      	bhi.n	801e0d6 <__gethex+0x13a>
 801e078:	f1a0 0210 	sub.w	r2, r0, #16
 801e07c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e080:	f7ff ff76 	bl	801df70 <__hexdig_fun>
 801e084:	f100 3cff 	add.w	ip, r0, #4294967295
 801e088:	fa5f fc8c 	uxtb.w	ip, ip
 801e08c:	f1bc 0f18 	cmp.w	ip, #24
 801e090:	d91d      	bls.n	801e0ce <__gethex+0x132>
 801e092:	f1bb 0f00 	cmp.w	fp, #0
 801e096:	d000      	beq.n	801e09a <__gethex+0xfe>
 801e098:	4252      	negs	r2, r2
 801e09a:	4416      	add	r6, r2
 801e09c:	f8ca 1000 	str.w	r1, [sl]
 801e0a0:	b1dc      	cbz	r4, 801e0da <__gethex+0x13e>
 801e0a2:	9b01      	ldr	r3, [sp, #4]
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	bf14      	ite	ne
 801e0a8:	f04f 0800 	movne.w	r8, #0
 801e0ac:	f04f 0806 	moveq.w	r8, #6
 801e0b0:	4640      	mov	r0, r8
 801e0b2:	b005      	add	sp, #20
 801e0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0b8:	4645      	mov	r5, r8
 801e0ba:	4626      	mov	r6, r4
 801e0bc:	2401      	movs	r4, #1
 801e0be:	e7c7      	b.n	801e050 <__gethex+0xb4>
 801e0c0:	f04f 0b00 	mov.w	fp, #0
 801e0c4:	1ca9      	adds	r1, r5, #2
 801e0c6:	e7d0      	b.n	801e06a <__gethex+0xce>
 801e0c8:	f04f 0b01 	mov.w	fp, #1
 801e0cc:	e7fa      	b.n	801e0c4 <__gethex+0x128>
 801e0ce:	230a      	movs	r3, #10
 801e0d0:	fb03 0002 	mla	r0, r3, r2, r0
 801e0d4:	e7d0      	b.n	801e078 <__gethex+0xdc>
 801e0d6:	4629      	mov	r1, r5
 801e0d8:	e7e0      	b.n	801e09c <__gethex+0x100>
 801e0da:	eba5 0308 	sub.w	r3, r5, r8
 801e0de:	3b01      	subs	r3, #1
 801e0e0:	4621      	mov	r1, r4
 801e0e2:	2b07      	cmp	r3, #7
 801e0e4:	dc0a      	bgt.n	801e0fc <__gethex+0x160>
 801e0e6:	4648      	mov	r0, r9
 801e0e8:	f000 fa5a 	bl	801e5a0 <_Balloc>
 801e0ec:	4604      	mov	r4, r0
 801e0ee:	b940      	cbnz	r0, 801e102 <__gethex+0x166>
 801e0f0:	4b61      	ldr	r3, [pc, #388]	; (801e278 <__gethex+0x2dc>)
 801e0f2:	4602      	mov	r2, r0
 801e0f4:	21e4      	movs	r1, #228	; 0xe4
 801e0f6:	4861      	ldr	r0, [pc, #388]	; (801e27c <__gethex+0x2e0>)
 801e0f8:	f7ff f804 	bl	801d104 <__assert_func>
 801e0fc:	3101      	adds	r1, #1
 801e0fe:	105b      	asrs	r3, r3, #1
 801e100:	e7ef      	b.n	801e0e2 <__gethex+0x146>
 801e102:	f100 0a14 	add.w	sl, r0, #20
 801e106:	2300      	movs	r3, #0
 801e108:	495a      	ldr	r1, [pc, #360]	; (801e274 <__gethex+0x2d8>)
 801e10a:	f8cd a004 	str.w	sl, [sp, #4]
 801e10e:	469b      	mov	fp, r3
 801e110:	45a8      	cmp	r8, r5
 801e112:	d342      	bcc.n	801e19a <__gethex+0x1fe>
 801e114:	9801      	ldr	r0, [sp, #4]
 801e116:	f840 bb04 	str.w	fp, [r0], #4
 801e11a:	eba0 000a 	sub.w	r0, r0, sl
 801e11e:	1080      	asrs	r0, r0, #2
 801e120:	6120      	str	r0, [r4, #16]
 801e122:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801e126:	4658      	mov	r0, fp
 801e128:	f000 fb2c 	bl	801e784 <__hi0bits>
 801e12c:	683d      	ldr	r5, [r7, #0]
 801e12e:	eba8 0000 	sub.w	r0, r8, r0
 801e132:	42a8      	cmp	r0, r5
 801e134:	dd59      	ble.n	801e1ea <__gethex+0x24e>
 801e136:	eba0 0805 	sub.w	r8, r0, r5
 801e13a:	4641      	mov	r1, r8
 801e13c:	4620      	mov	r0, r4
 801e13e:	f000 febb 	bl	801eeb8 <__any_on>
 801e142:	4683      	mov	fp, r0
 801e144:	b1b8      	cbz	r0, 801e176 <__gethex+0x1da>
 801e146:	f108 33ff 	add.w	r3, r8, #4294967295
 801e14a:	1159      	asrs	r1, r3, #5
 801e14c:	f003 021f 	and.w	r2, r3, #31
 801e150:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801e154:	f04f 0b01 	mov.w	fp, #1
 801e158:	fa0b f202 	lsl.w	r2, fp, r2
 801e15c:	420a      	tst	r2, r1
 801e15e:	d00a      	beq.n	801e176 <__gethex+0x1da>
 801e160:	455b      	cmp	r3, fp
 801e162:	dd06      	ble.n	801e172 <__gethex+0x1d6>
 801e164:	f1a8 0102 	sub.w	r1, r8, #2
 801e168:	4620      	mov	r0, r4
 801e16a:	f000 fea5 	bl	801eeb8 <__any_on>
 801e16e:	2800      	cmp	r0, #0
 801e170:	d138      	bne.n	801e1e4 <__gethex+0x248>
 801e172:	f04f 0b02 	mov.w	fp, #2
 801e176:	4641      	mov	r1, r8
 801e178:	4620      	mov	r0, r4
 801e17a:	f7ff fea7 	bl	801decc <rshift>
 801e17e:	4446      	add	r6, r8
 801e180:	68bb      	ldr	r3, [r7, #8]
 801e182:	42b3      	cmp	r3, r6
 801e184:	da41      	bge.n	801e20a <__gethex+0x26e>
 801e186:	4621      	mov	r1, r4
 801e188:	4648      	mov	r0, r9
 801e18a:	f000 fa49 	bl	801e620 <_Bfree>
 801e18e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e190:	2300      	movs	r3, #0
 801e192:	6013      	str	r3, [r2, #0]
 801e194:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801e198:	e78a      	b.n	801e0b0 <__gethex+0x114>
 801e19a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801e19e:	2a2e      	cmp	r2, #46	; 0x2e
 801e1a0:	d014      	beq.n	801e1cc <__gethex+0x230>
 801e1a2:	2b20      	cmp	r3, #32
 801e1a4:	d106      	bne.n	801e1b4 <__gethex+0x218>
 801e1a6:	9b01      	ldr	r3, [sp, #4]
 801e1a8:	f843 bb04 	str.w	fp, [r3], #4
 801e1ac:	f04f 0b00 	mov.w	fp, #0
 801e1b0:	9301      	str	r3, [sp, #4]
 801e1b2:	465b      	mov	r3, fp
 801e1b4:	7828      	ldrb	r0, [r5, #0]
 801e1b6:	9303      	str	r3, [sp, #12]
 801e1b8:	f7ff feda 	bl	801df70 <__hexdig_fun>
 801e1bc:	9b03      	ldr	r3, [sp, #12]
 801e1be:	f000 000f 	and.w	r0, r0, #15
 801e1c2:	4098      	lsls	r0, r3
 801e1c4:	ea4b 0b00 	orr.w	fp, fp, r0
 801e1c8:	3304      	adds	r3, #4
 801e1ca:	e7a1      	b.n	801e110 <__gethex+0x174>
 801e1cc:	45a8      	cmp	r8, r5
 801e1ce:	d8e8      	bhi.n	801e1a2 <__gethex+0x206>
 801e1d0:	2201      	movs	r2, #1
 801e1d2:	4628      	mov	r0, r5
 801e1d4:	9303      	str	r3, [sp, #12]
 801e1d6:	f7fe fe64 	bl	801cea2 <strncmp>
 801e1da:	4926      	ldr	r1, [pc, #152]	; (801e274 <__gethex+0x2d8>)
 801e1dc:	9b03      	ldr	r3, [sp, #12]
 801e1de:	2800      	cmp	r0, #0
 801e1e0:	d1df      	bne.n	801e1a2 <__gethex+0x206>
 801e1e2:	e795      	b.n	801e110 <__gethex+0x174>
 801e1e4:	f04f 0b03 	mov.w	fp, #3
 801e1e8:	e7c5      	b.n	801e176 <__gethex+0x1da>
 801e1ea:	da0b      	bge.n	801e204 <__gethex+0x268>
 801e1ec:	eba5 0800 	sub.w	r8, r5, r0
 801e1f0:	4621      	mov	r1, r4
 801e1f2:	4642      	mov	r2, r8
 801e1f4:	4648      	mov	r0, r9
 801e1f6:	f000 fc2d 	bl	801ea54 <__lshift>
 801e1fa:	eba6 0608 	sub.w	r6, r6, r8
 801e1fe:	4604      	mov	r4, r0
 801e200:	f100 0a14 	add.w	sl, r0, #20
 801e204:	f04f 0b00 	mov.w	fp, #0
 801e208:	e7ba      	b.n	801e180 <__gethex+0x1e4>
 801e20a:	687b      	ldr	r3, [r7, #4]
 801e20c:	42b3      	cmp	r3, r6
 801e20e:	dd73      	ble.n	801e2f8 <__gethex+0x35c>
 801e210:	1b9e      	subs	r6, r3, r6
 801e212:	42b5      	cmp	r5, r6
 801e214:	dc34      	bgt.n	801e280 <__gethex+0x2e4>
 801e216:	68fb      	ldr	r3, [r7, #12]
 801e218:	2b02      	cmp	r3, #2
 801e21a:	d023      	beq.n	801e264 <__gethex+0x2c8>
 801e21c:	2b03      	cmp	r3, #3
 801e21e:	d025      	beq.n	801e26c <__gethex+0x2d0>
 801e220:	2b01      	cmp	r3, #1
 801e222:	d115      	bne.n	801e250 <__gethex+0x2b4>
 801e224:	42b5      	cmp	r5, r6
 801e226:	d113      	bne.n	801e250 <__gethex+0x2b4>
 801e228:	2d01      	cmp	r5, #1
 801e22a:	d10b      	bne.n	801e244 <__gethex+0x2a8>
 801e22c:	9a02      	ldr	r2, [sp, #8]
 801e22e:	687b      	ldr	r3, [r7, #4]
 801e230:	6013      	str	r3, [r2, #0]
 801e232:	2301      	movs	r3, #1
 801e234:	6123      	str	r3, [r4, #16]
 801e236:	f8ca 3000 	str.w	r3, [sl]
 801e23a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e23c:	f04f 0862 	mov.w	r8, #98	; 0x62
 801e240:	601c      	str	r4, [r3, #0]
 801e242:	e735      	b.n	801e0b0 <__gethex+0x114>
 801e244:	1e69      	subs	r1, r5, #1
 801e246:	4620      	mov	r0, r4
 801e248:	f000 fe36 	bl	801eeb8 <__any_on>
 801e24c:	2800      	cmp	r0, #0
 801e24e:	d1ed      	bne.n	801e22c <__gethex+0x290>
 801e250:	4621      	mov	r1, r4
 801e252:	4648      	mov	r0, r9
 801e254:	f000 f9e4 	bl	801e620 <_Bfree>
 801e258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e25a:	2300      	movs	r3, #0
 801e25c:	6013      	str	r3, [r2, #0]
 801e25e:	f04f 0850 	mov.w	r8, #80	; 0x50
 801e262:	e725      	b.n	801e0b0 <__gethex+0x114>
 801e264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e266:	2b00      	cmp	r3, #0
 801e268:	d1f2      	bne.n	801e250 <__gethex+0x2b4>
 801e26a:	e7df      	b.n	801e22c <__gethex+0x290>
 801e26c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e26e:	2b00      	cmp	r3, #0
 801e270:	d1dc      	bne.n	801e22c <__gethex+0x290>
 801e272:	e7ed      	b.n	801e250 <__gethex+0x2b4>
 801e274:	080238c4 	.word	0x080238c4
 801e278:	08023b6c 	.word	0x08023b6c
 801e27c:	08023b7d 	.word	0x08023b7d
 801e280:	f106 38ff 	add.w	r8, r6, #4294967295
 801e284:	f1bb 0f00 	cmp.w	fp, #0
 801e288:	d133      	bne.n	801e2f2 <__gethex+0x356>
 801e28a:	f1b8 0f00 	cmp.w	r8, #0
 801e28e:	d004      	beq.n	801e29a <__gethex+0x2fe>
 801e290:	4641      	mov	r1, r8
 801e292:	4620      	mov	r0, r4
 801e294:	f000 fe10 	bl	801eeb8 <__any_on>
 801e298:	4683      	mov	fp, r0
 801e29a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801e29e:	2301      	movs	r3, #1
 801e2a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801e2a4:	f008 081f 	and.w	r8, r8, #31
 801e2a8:	fa03 f308 	lsl.w	r3, r3, r8
 801e2ac:	4213      	tst	r3, r2
 801e2ae:	4631      	mov	r1, r6
 801e2b0:	4620      	mov	r0, r4
 801e2b2:	bf18      	it	ne
 801e2b4:	f04b 0b02 	orrne.w	fp, fp, #2
 801e2b8:	1bad      	subs	r5, r5, r6
 801e2ba:	f7ff fe07 	bl	801decc <rshift>
 801e2be:	687e      	ldr	r6, [r7, #4]
 801e2c0:	f04f 0802 	mov.w	r8, #2
 801e2c4:	f1bb 0f00 	cmp.w	fp, #0
 801e2c8:	d04a      	beq.n	801e360 <__gethex+0x3c4>
 801e2ca:	68fb      	ldr	r3, [r7, #12]
 801e2cc:	2b02      	cmp	r3, #2
 801e2ce:	d016      	beq.n	801e2fe <__gethex+0x362>
 801e2d0:	2b03      	cmp	r3, #3
 801e2d2:	d018      	beq.n	801e306 <__gethex+0x36a>
 801e2d4:	2b01      	cmp	r3, #1
 801e2d6:	d109      	bne.n	801e2ec <__gethex+0x350>
 801e2d8:	f01b 0f02 	tst.w	fp, #2
 801e2dc:	d006      	beq.n	801e2ec <__gethex+0x350>
 801e2de:	f8da 3000 	ldr.w	r3, [sl]
 801e2e2:	ea4b 0b03 	orr.w	fp, fp, r3
 801e2e6:	f01b 0f01 	tst.w	fp, #1
 801e2ea:	d10f      	bne.n	801e30c <__gethex+0x370>
 801e2ec:	f048 0810 	orr.w	r8, r8, #16
 801e2f0:	e036      	b.n	801e360 <__gethex+0x3c4>
 801e2f2:	f04f 0b01 	mov.w	fp, #1
 801e2f6:	e7d0      	b.n	801e29a <__gethex+0x2fe>
 801e2f8:	f04f 0801 	mov.w	r8, #1
 801e2fc:	e7e2      	b.n	801e2c4 <__gethex+0x328>
 801e2fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e300:	f1c3 0301 	rsb	r3, r3, #1
 801e304:	930f      	str	r3, [sp, #60]	; 0x3c
 801e306:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e308:	2b00      	cmp	r3, #0
 801e30a:	d0ef      	beq.n	801e2ec <__gethex+0x350>
 801e30c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e310:	f104 0214 	add.w	r2, r4, #20
 801e314:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801e318:	9301      	str	r3, [sp, #4]
 801e31a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801e31e:	2300      	movs	r3, #0
 801e320:	4694      	mov	ip, r2
 801e322:	f852 1b04 	ldr.w	r1, [r2], #4
 801e326:	f1b1 3fff 	cmp.w	r1, #4294967295
 801e32a:	d01e      	beq.n	801e36a <__gethex+0x3ce>
 801e32c:	3101      	adds	r1, #1
 801e32e:	f8cc 1000 	str.w	r1, [ip]
 801e332:	f1b8 0f02 	cmp.w	r8, #2
 801e336:	f104 0214 	add.w	r2, r4, #20
 801e33a:	d13d      	bne.n	801e3b8 <__gethex+0x41c>
 801e33c:	683b      	ldr	r3, [r7, #0]
 801e33e:	3b01      	subs	r3, #1
 801e340:	42ab      	cmp	r3, r5
 801e342:	d10b      	bne.n	801e35c <__gethex+0x3c0>
 801e344:	1169      	asrs	r1, r5, #5
 801e346:	2301      	movs	r3, #1
 801e348:	f005 051f 	and.w	r5, r5, #31
 801e34c:	fa03 f505 	lsl.w	r5, r3, r5
 801e350:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e354:	421d      	tst	r5, r3
 801e356:	bf18      	it	ne
 801e358:	f04f 0801 	movne.w	r8, #1
 801e35c:	f048 0820 	orr.w	r8, r8, #32
 801e360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e362:	601c      	str	r4, [r3, #0]
 801e364:	9b02      	ldr	r3, [sp, #8]
 801e366:	601e      	str	r6, [r3, #0]
 801e368:	e6a2      	b.n	801e0b0 <__gethex+0x114>
 801e36a:	4290      	cmp	r0, r2
 801e36c:	f842 3c04 	str.w	r3, [r2, #-4]
 801e370:	d8d6      	bhi.n	801e320 <__gethex+0x384>
 801e372:	68a2      	ldr	r2, [r4, #8]
 801e374:	4593      	cmp	fp, r2
 801e376:	db17      	blt.n	801e3a8 <__gethex+0x40c>
 801e378:	6861      	ldr	r1, [r4, #4]
 801e37a:	4648      	mov	r0, r9
 801e37c:	3101      	adds	r1, #1
 801e37e:	f000 f90f 	bl	801e5a0 <_Balloc>
 801e382:	4682      	mov	sl, r0
 801e384:	b918      	cbnz	r0, 801e38e <__gethex+0x3f2>
 801e386:	4b1b      	ldr	r3, [pc, #108]	; (801e3f4 <__gethex+0x458>)
 801e388:	4602      	mov	r2, r0
 801e38a:	2184      	movs	r1, #132	; 0x84
 801e38c:	e6b3      	b.n	801e0f6 <__gethex+0x15a>
 801e38e:	6922      	ldr	r2, [r4, #16]
 801e390:	3202      	adds	r2, #2
 801e392:	f104 010c 	add.w	r1, r4, #12
 801e396:	0092      	lsls	r2, r2, #2
 801e398:	300c      	adds	r0, #12
 801e39a:	f7fe fe96 	bl	801d0ca <memcpy>
 801e39e:	4621      	mov	r1, r4
 801e3a0:	4648      	mov	r0, r9
 801e3a2:	f000 f93d 	bl	801e620 <_Bfree>
 801e3a6:	4654      	mov	r4, sl
 801e3a8:	6922      	ldr	r2, [r4, #16]
 801e3aa:	1c51      	adds	r1, r2, #1
 801e3ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e3b0:	6121      	str	r1, [r4, #16]
 801e3b2:	2101      	movs	r1, #1
 801e3b4:	6151      	str	r1, [r2, #20]
 801e3b6:	e7bc      	b.n	801e332 <__gethex+0x396>
 801e3b8:	6921      	ldr	r1, [r4, #16]
 801e3ba:	4559      	cmp	r1, fp
 801e3bc:	dd0b      	ble.n	801e3d6 <__gethex+0x43a>
 801e3be:	2101      	movs	r1, #1
 801e3c0:	4620      	mov	r0, r4
 801e3c2:	f7ff fd83 	bl	801decc <rshift>
 801e3c6:	68bb      	ldr	r3, [r7, #8]
 801e3c8:	3601      	adds	r6, #1
 801e3ca:	42b3      	cmp	r3, r6
 801e3cc:	f6ff aedb 	blt.w	801e186 <__gethex+0x1ea>
 801e3d0:	f04f 0801 	mov.w	r8, #1
 801e3d4:	e7c2      	b.n	801e35c <__gethex+0x3c0>
 801e3d6:	f015 051f 	ands.w	r5, r5, #31
 801e3da:	d0f9      	beq.n	801e3d0 <__gethex+0x434>
 801e3dc:	9b01      	ldr	r3, [sp, #4]
 801e3de:	441a      	add	r2, r3
 801e3e0:	f1c5 0520 	rsb	r5, r5, #32
 801e3e4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801e3e8:	f000 f9cc 	bl	801e784 <__hi0bits>
 801e3ec:	42a8      	cmp	r0, r5
 801e3ee:	dbe6      	blt.n	801e3be <__gethex+0x422>
 801e3f0:	e7ee      	b.n	801e3d0 <__gethex+0x434>
 801e3f2:	bf00      	nop
 801e3f4:	08023b6c 	.word	0x08023b6c

0801e3f8 <L_shift>:
 801e3f8:	f1c2 0208 	rsb	r2, r2, #8
 801e3fc:	0092      	lsls	r2, r2, #2
 801e3fe:	b570      	push	{r4, r5, r6, lr}
 801e400:	f1c2 0620 	rsb	r6, r2, #32
 801e404:	6843      	ldr	r3, [r0, #4]
 801e406:	6804      	ldr	r4, [r0, #0]
 801e408:	fa03 f506 	lsl.w	r5, r3, r6
 801e40c:	432c      	orrs	r4, r5
 801e40e:	40d3      	lsrs	r3, r2
 801e410:	6004      	str	r4, [r0, #0]
 801e412:	f840 3f04 	str.w	r3, [r0, #4]!
 801e416:	4288      	cmp	r0, r1
 801e418:	d3f4      	bcc.n	801e404 <L_shift+0xc>
 801e41a:	bd70      	pop	{r4, r5, r6, pc}

0801e41c <__match>:
 801e41c:	b530      	push	{r4, r5, lr}
 801e41e:	6803      	ldr	r3, [r0, #0]
 801e420:	3301      	adds	r3, #1
 801e422:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e426:	b914      	cbnz	r4, 801e42e <__match+0x12>
 801e428:	6003      	str	r3, [r0, #0]
 801e42a:	2001      	movs	r0, #1
 801e42c:	bd30      	pop	{r4, r5, pc}
 801e42e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e432:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801e436:	2d19      	cmp	r5, #25
 801e438:	bf98      	it	ls
 801e43a:	3220      	addls	r2, #32
 801e43c:	42a2      	cmp	r2, r4
 801e43e:	d0f0      	beq.n	801e422 <__match+0x6>
 801e440:	2000      	movs	r0, #0
 801e442:	e7f3      	b.n	801e42c <__match+0x10>

0801e444 <__hexnan>:
 801e444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e448:	680b      	ldr	r3, [r1, #0]
 801e44a:	6801      	ldr	r1, [r0, #0]
 801e44c:	115e      	asrs	r6, r3, #5
 801e44e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e452:	f013 031f 	ands.w	r3, r3, #31
 801e456:	b087      	sub	sp, #28
 801e458:	bf18      	it	ne
 801e45a:	3604      	addne	r6, #4
 801e45c:	2500      	movs	r5, #0
 801e45e:	1f37      	subs	r7, r6, #4
 801e460:	4682      	mov	sl, r0
 801e462:	4690      	mov	r8, r2
 801e464:	9301      	str	r3, [sp, #4]
 801e466:	f846 5c04 	str.w	r5, [r6, #-4]
 801e46a:	46b9      	mov	r9, r7
 801e46c:	463c      	mov	r4, r7
 801e46e:	9502      	str	r5, [sp, #8]
 801e470:	46ab      	mov	fp, r5
 801e472:	784a      	ldrb	r2, [r1, #1]
 801e474:	1c4b      	adds	r3, r1, #1
 801e476:	9303      	str	r3, [sp, #12]
 801e478:	b342      	cbz	r2, 801e4cc <__hexnan+0x88>
 801e47a:	4610      	mov	r0, r2
 801e47c:	9105      	str	r1, [sp, #20]
 801e47e:	9204      	str	r2, [sp, #16]
 801e480:	f7ff fd76 	bl	801df70 <__hexdig_fun>
 801e484:	2800      	cmp	r0, #0
 801e486:	d14f      	bne.n	801e528 <__hexnan+0xe4>
 801e488:	9a04      	ldr	r2, [sp, #16]
 801e48a:	9905      	ldr	r1, [sp, #20]
 801e48c:	2a20      	cmp	r2, #32
 801e48e:	d818      	bhi.n	801e4c2 <__hexnan+0x7e>
 801e490:	9b02      	ldr	r3, [sp, #8]
 801e492:	459b      	cmp	fp, r3
 801e494:	dd13      	ble.n	801e4be <__hexnan+0x7a>
 801e496:	454c      	cmp	r4, r9
 801e498:	d206      	bcs.n	801e4a8 <__hexnan+0x64>
 801e49a:	2d07      	cmp	r5, #7
 801e49c:	dc04      	bgt.n	801e4a8 <__hexnan+0x64>
 801e49e:	462a      	mov	r2, r5
 801e4a0:	4649      	mov	r1, r9
 801e4a2:	4620      	mov	r0, r4
 801e4a4:	f7ff ffa8 	bl	801e3f8 <L_shift>
 801e4a8:	4544      	cmp	r4, r8
 801e4aa:	d950      	bls.n	801e54e <__hexnan+0x10a>
 801e4ac:	2300      	movs	r3, #0
 801e4ae:	f1a4 0904 	sub.w	r9, r4, #4
 801e4b2:	f844 3c04 	str.w	r3, [r4, #-4]
 801e4b6:	f8cd b008 	str.w	fp, [sp, #8]
 801e4ba:	464c      	mov	r4, r9
 801e4bc:	461d      	mov	r5, r3
 801e4be:	9903      	ldr	r1, [sp, #12]
 801e4c0:	e7d7      	b.n	801e472 <__hexnan+0x2e>
 801e4c2:	2a29      	cmp	r2, #41	; 0x29
 801e4c4:	d155      	bne.n	801e572 <__hexnan+0x12e>
 801e4c6:	3102      	adds	r1, #2
 801e4c8:	f8ca 1000 	str.w	r1, [sl]
 801e4cc:	f1bb 0f00 	cmp.w	fp, #0
 801e4d0:	d04f      	beq.n	801e572 <__hexnan+0x12e>
 801e4d2:	454c      	cmp	r4, r9
 801e4d4:	d206      	bcs.n	801e4e4 <__hexnan+0xa0>
 801e4d6:	2d07      	cmp	r5, #7
 801e4d8:	dc04      	bgt.n	801e4e4 <__hexnan+0xa0>
 801e4da:	462a      	mov	r2, r5
 801e4dc:	4649      	mov	r1, r9
 801e4de:	4620      	mov	r0, r4
 801e4e0:	f7ff ff8a 	bl	801e3f8 <L_shift>
 801e4e4:	4544      	cmp	r4, r8
 801e4e6:	d934      	bls.n	801e552 <__hexnan+0x10e>
 801e4e8:	f1a8 0204 	sub.w	r2, r8, #4
 801e4ec:	4623      	mov	r3, r4
 801e4ee:	f853 1b04 	ldr.w	r1, [r3], #4
 801e4f2:	f842 1f04 	str.w	r1, [r2, #4]!
 801e4f6:	429f      	cmp	r7, r3
 801e4f8:	d2f9      	bcs.n	801e4ee <__hexnan+0xaa>
 801e4fa:	1b3b      	subs	r3, r7, r4
 801e4fc:	f023 0303 	bic.w	r3, r3, #3
 801e500:	3304      	adds	r3, #4
 801e502:	3e03      	subs	r6, #3
 801e504:	3401      	adds	r4, #1
 801e506:	42a6      	cmp	r6, r4
 801e508:	bf38      	it	cc
 801e50a:	2304      	movcc	r3, #4
 801e50c:	4443      	add	r3, r8
 801e50e:	2200      	movs	r2, #0
 801e510:	f843 2b04 	str.w	r2, [r3], #4
 801e514:	429f      	cmp	r7, r3
 801e516:	d2fb      	bcs.n	801e510 <__hexnan+0xcc>
 801e518:	683b      	ldr	r3, [r7, #0]
 801e51a:	b91b      	cbnz	r3, 801e524 <__hexnan+0xe0>
 801e51c:	4547      	cmp	r7, r8
 801e51e:	d126      	bne.n	801e56e <__hexnan+0x12a>
 801e520:	2301      	movs	r3, #1
 801e522:	603b      	str	r3, [r7, #0]
 801e524:	2005      	movs	r0, #5
 801e526:	e025      	b.n	801e574 <__hexnan+0x130>
 801e528:	3501      	adds	r5, #1
 801e52a:	2d08      	cmp	r5, #8
 801e52c:	f10b 0b01 	add.w	fp, fp, #1
 801e530:	dd06      	ble.n	801e540 <__hexnan+0xfc>
 801e532:	4544      	cmp	r4, r8
 801e534:	d9c3      	bls.n	801e4be <__hexnan+0x7a>
 801e536:	2300      	movs	r3, #0
 801e538:	f844 3c04 	str.w	r3, [r4, #-4]
 801e53c:	2501      	movs	r5, #1
 801e53e:	3c04      	subs	r4, #4
 801e540:	6822      	ldr	r2, [r4, #0]
 801e542:	f000 000f 	and.w	r0, r0, #15
 801e546:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801e54a:	6020      	str	r0, [r4, #0]
 801e54c:	e7b7      	b.n	801e4be <__hexnan+0x7a>
 801e54e:	2508      	movs	r5, #8
 801e550:	e7b5      	b.n	801e4be <__hexnan+0x7a>
 801e552:	9b01      	ldr	r3, [sp, #4]
 801e554:	2b00      	cmp	r3, #0
 801e556:	d0df      	beq.n	801e518 <__hexnan+0xd4>
 801e558:	f1c3 0320 	rsb	r3, r3, #32
 801e55c:	f04f 32ff 	mov.w	r2, #4294967295
 801e560:	40da      	lsrs	r2, r3
 801e562:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801e566:	4013      	ands	r3, r2
 801e568:	f846 3c04 	str.w	r3, [r6, #-4]
 801e56c:	e7d4      	b.n	801e518 <__hexnan+0xd4>
 801e56e:	3f04      	subs	r7, #4
 801e570:	e7d2      	b.n	801e518 <__hexnan+0xd4>
 801e572:	2004      	movs	r0, #4
 801e574:	b007      	add	sp, #28
 801e576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e57a <__ascii_mbtowc>:
 801e57a:	b082      	sub	sp, #8
 801e57c:	b901      	cbnz	r1, 801e580 <__ascii_mbtowc+0x6>
 801e57e:	a901      	add	r1, sp, #4
 801e580:	b142      	cbz	r2, 801e594 <__ascii_mbtowc+0x1a>
 801e582:	b14b      	cbz	r3, 801e598 <__ascii_mbtowc+0x1e>
 801e584:	7813      	ldrb	r3, [r2, #0]
 801e586:	600b      	str	r3, [r1, #0]
 801e588:	7812      	ldrb	r2, [r2, #0]
 801e58a:	1e10      	subs	r0, r2, #0
 801e58c:	bf18      	it	ne
 801e58e:	2001      	movne	r0, #1
 801e590:	b002      	add	sp, #8
 801e592:	4770      	bx	lr
 801e594:	4610      	mov	r0, r2
 801e596:	e7fb      	b.n	801e590 <__ascii_mbtowc+0x16>
 801e598:	f06f 0001 	mvn.w	r0, #1
 801e59c:	e7f8      	b.n	801e590 <__ascii_mbtowc+0x16>
	...

0801e5a0 <_Balloc>:
 801e5a0:	b570      	push	{r4, r5, r6, lr}
 801e5a2:	69c6      	ldr	r6, [r0, #28]
 801e5a4:	4604      	mov	r4, r0
 801e5a6:	460d      	mov	r5, r1
 801e5a8:	b976      	cbnz	r6, 801e5c8 <_Balloc+0x28>
 801e5aa:	2010      	movs	r0, #16
 801e5ac:	f7fc fcde 	bl	801af6c <malloc>
 801e5b0:	4602      	mov	r2, r0
 801e5b2:	61e0      	str	r0, [r4, #28]
 801e5b4:	b920      	cbnz	r0, 801e5c0 <_Balloc+0x20>
 801e5b6:	4b18      	ldr	r3, [pc, #96]	; (801e618 <_Balloc+0x78>)
 801e5b8:	4818      	ldr	r0, [pc, #96]	; (801e61c <_Balloc+0x7c>)
 801e5ba:	216b      	movs	r1, #107	; 0x6b
 801e5bc:	f7fe fda2 	bl	801d104 <__assert_func>
 801e5c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e5c4:	6006      	str	r6, [r0, #0]
 801e5c6:	60c6      	str	r6, [r0, #12]
 801e5c8:	69e6      	ldr	r6, [r4, #28]
 801e5ca:	68f3      	ldr	r3, [r6, #12]
 801e5cc:	b183      	cbz	r3, 801e5f0 <_Balloc+0x50>
 801e5ce:	69e3      	ldr	r3, [r4, #28]
 801e5d0:	68db      	ldr	r3, [r3, #12]
 801e5d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e5d6:	b9b8      	cbnz	r0, 801e608 <_Balloc+0x68>
 801e5d8:	2101      	movs	r1, #1
 801e5da:	fa01 f605 	lsl.w	r6, r1, r5
 801e5de:	1d72      	adds	r2, r6, #5
 801e5e0:	0092      	lsls	r2, r2, #2
 801e5e2:	4620      	mov	r0, r4
 801e5e4:	f001 f8a9 	bl	801f73a <_calloc_r>
 801e5e8:	b160      	cbz	r0, 801e604 <_Balloc+0x64>
 801e5ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e5ee:	e00e      	b.n	801e60e <_Balloc+0x6e>
 801e5f0:	2221      	movs	r2, #33	; 0x21
 801e5f2:	2104      	movs	r1, #4
 801e5f4:	4620      	mov	r0, r4
 801e5f6:	f001 f8a0 	bl	801f73a <_calloc_r>
 801e5fa:	69e3      	ldr	r3, [r4, #28]
 801e5fc:	60f0      	str	r0, [r6, #12]
 801e5fe:	68db      	ldr	r3, [r3, #12]
 801e600:	2b00      	cmp	r3, #0
 801e602:	d1e4      	bne.n	801e5ce <_Balloc+0x2e>
 801e604:	2000      	movs	r0, #0
 801e606:	bd70      	pop	{r4, r5, r6, pc}
 801e608:	6802      	ldr	r2, [r0, #0]
 801e60a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e60e:	2300      	movs	r3, #0
 801e610:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e614:	e7f7      	b.n	801e606 <_Balloc+0x66>
 801e616:	bf00      	nop
 801e618:	08023a52 	.word	0x08023a52
 801e61c:	08023bdd 	.word	0x08023bdd

0801e620 <_Bfree>:
 801e620:	b570      	push	{r4, r5, r6, lr}
 801e622:	69c6      	ldr	r6, [r0, #28]
 801e624:	4605      	mov	r5, r0
 801e626:	460c      	mov	r4, r1
 801e628:	b976      	cbnz	r6, 801e648 <_Bfree+0x28>
 801e62a:	2010      	movs	r0, #16
 801e62c:	f7fc fc9e 	bl	801af6c <malloc>
 801e630:	4602      	mov	r2, r0
 801e632:	61e8      	str	r0, [r5, #28]
 801e634:	b920      	cbnz	r0, 801e640 <_Bfree+0x20>
 801e636:	4b09      	ldr	r3, [pc, #36]	; (801e65c <_Bfree+0x3c>)
 801e638:	4809      	ldr	r0, [pc, #36]	; (801e660 <_Bfree+0x40>)
 801e63a:	218f      	movs	r1, #143	; 0x8f
 801e63c:	f7fe fd62 	bl	801d104 <__assert_func>
 801e640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e644:	6006      	str	r6, [r0, #0]
 801e646:	60c6      	str	r6, [r0, #12]
 801e648:	b13c      	cbz	r4, 801e65a <_Bfree+0x3a>
 801e64a:	69eb      	ldr	r3, [r5, #28]
 801e64c:	6862      	ldr	r2, [r4, #4]
 801e64e:	68db      	ldr	r3, [r3, #12]
 801e650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e654:	6021      	str	r1, [r4, #0]
 801e656:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e65a:	bd70      	pop	{r4, r5, r6, pc}
 801e65c:	08023a52 	.word	0x08023a52
 801e660:	08023bdd 	.word	0x08023bdd

0801e664 <__multadd>:
 801e664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e668:	690d      	ldr	r5, [r1, #16]
 801e66a:	4607      	mov	r7, r0
 801e66c:	460c      	mov	r4, r1
 801e66e:	461e      	mov	r6, r3
 801e670:	f101 0c14 	add.w	ip, r1, #20
 801e674:	2000      	movs	r0, #0
 801e676:	f8dc 3000 	ldr.w	r3, [ip]
 801e67a:	b299      	uxth	r1, r3
 801e67c:	fb02 6101 	mla	r1, r2, r1, r6
 801e680:	0c1e      	lsrs	r6, r3, #16
 801e682:	0c0b      	lsrs	r3, r1, #16
 801e684:	fb02 3306 	mla	r3, r2, r6, r3
 801e688:	b289      	uxth	r1, r1
 801e68a:	3001      	adds	r0, #1
 801e68c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e690:	4285      	cmp	r5, r0
 801e692:	f84c 1b04 	str.w	r1, [ip], #4
 801e696:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e69a:	dcec      	bgt.n	801e676 <__multadd+0x12>
 801e69c:	b30e      	cbz	r6, 801e6e2 <__multadd+0x7e>
 801e69e:	68a3      	ldr	r3, [r4, #8]
 801e6a0:	42ab      	cmp	r3, r5
 801e6a2:	dc19      	bgt.n	801e6d8 <__multadd+0x74>
 801e6a4:	6861      	ldr	r1, [r4, #4]
 801e6a6:	4638      	mov	r0, r7
 801e6a8:	3101      	adds	r1, #1
 801e6aa:	f7ff ff79 	bl	801e5a0 <_Balloc>
 801e6ae:	4680      	mov	r8, r0
 801e6b0:	b928      	cbnz	r0, 801e6be <__multadd+0x5a>
 801e6b2:	4602      	mov	r2, r0
 801e6b4:	4b0c      	ldr	r3, [pc, #48]	; (801e6e8 <__multadd+0x84>)
 801e6b6:	480d      	ldr	r0, [pc, #52]	; (801e6ec <__multadd+0x88>)
 801e6b8:	21ba      	movs	r1, #186	; 0xba
 801e6ba:	f7fe fd23 	bl	801d104 <__assert_func>
 801e6be:	6922      	ldr	r2, [r4, #16]
 801e6c0:	3202      	adds	r2, #2
 801e6c2:	f104 010c 	add.w	r1, r4, #12
 801e6c6:	0092      	lsls	r2, r2, #2
 801e6c8:	300c      	adds	r0, #12
 801e6ca:	f7fe fcfe 	bl	801d0ca <memcpy>
 801e6ce:	4621      	mov	r1, r4
 801e6d0:	4638      	mov	r0, r7
 801e6d2:	f7ff ffa5 	bl	801e620 <_Bfree>
 801e6d6:	4644      	mov	r4, r8
 801e6d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e6dc:	3501      	adds	r5, #1
 801e6de:	615e      	str	r6, [r3, #20]
 801e6e0:	6125      	str	r5, [r4, #16]
 801e6e2:	4620      	mov	r0, r4
 801e6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e6e8:	08023b6c 	.word	0x08023b6c
 801e6ec:	08023bdd 	.word	0x08023bdd

0801e6f0 <__s2b>:
 801e6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e6f4:	460c      	mov	r4, r1
 801e6f6:	4615      	mov	r5, r2
 801e6f8:	461f      	mov	r7, r3
 801e6fa:	2209      	movs	r2, #9
 801e6fc:	3308      	adds	r3, #8
 801e6fe:	4606      	mov	r6, r0
 801e700:	fb93 f3f2 	sdiv	r3, r3, r2
 801e704:	2100      	movs	r1, #0
 801e706:	2201      	movs	r2, #1
 801e708:	429a      	cmp	r2, r3
 801e70a:	db09      	blt.n	801e720 <__s2b+0x30>
 801e70c:	4630      	mov	r0, r6
 801e70e:	f7ff ff47 	bl	801e5a0 <_Balloc>
 801e712:	b940      	cbnz	r0, 801e726 <__s2b+0x36>
 801e714:	4602      	mov	r2, r0
 801e716:	4b19      	ldr	r3, [pc, #100]	; (801e77c <__s2b+0x8c>)
 801e718:	4819      	ldr	r0, [pc, #100]	; (801e780 <__s2b+0x90>)
 801e71a:	21d3      	movs	r1, #211	; 0xd3
 801e71c:	f7fe fcf2 	bl	801d104 <__assert_func>
 801e720:	0052      	lsls	r2, r2, #1
 801e722:	3101      	adds	r1, #1
 801e724:	e7f0      	b.n	801e708 <__s2b+0x18>
 801e726:	9b08      	ldr	r3, [sp, #32]
 801e728:	6143      	str	r3, [r0, #20]
 801e72a:	2d09      	cmp	r5, #9
 801e72c:	f04f 0301 	mov.w	r3, #1
 801e730:	6103      	str	r3, [r0, #16]
 801e732:	dd16      	ble.n	801e762 <__s2b+0x72>
 801e734:	f104 0909 	add.w	r9, r4, #9
 801e738:	46c8      	mov	r8, r9
 801e73a:	442c      	add	r4, r5
 801e73c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801e740:	4601      	mov	r1, r0
 801e742:	3b30      	subs	r3, #48	; 0x30
 801e744:	220a      	movs	r2, #10
 801e746:	4630      	mov	r0, r6
 801e748:	f7ff ff8c 	bl	801e664 <__multadd>
 801e74c:	45a0      	cmp	r8, r4
 801e74e:	d1f5      	bne.n	801e73c <__s2b+0x4c>
 801e750:	f1a5 0408 	sub.w	r4, r5, #8
 801e754:	444c      	add	r4, r9
 801e756:	1b2d      	subs	r5, r5, r4
 801e758:	1963      	adds	r3, r4, r5
 801e75a:	42bb      	cmp	r3, r7
 801e75c:	db04      	blt.n	801e768 <__s2b+0x78>
 801e75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e762:	340a      	adds	r4, #10
 801e764:	2509      	movs	r5, #9
 801e766:	e7f6      	b.n	801e756 <__s2b+0x66>
 801e768:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e76c:	4601      	mov	r1, r0
 801e76e:	3b30      	subs	r3, #48	; 0x30
 801e770:	220a      	movs	r2, #10
 801e772:	4630      	mov	r0, r6
 801e774:	f7ff ff76 	bl	801e664 <__multadd>
 801e778:	e7ee      	b.n	801e758 <__s2b+0x68>
 801e77a:	bf00      	nop
 801e77c:	08023b6c 	.word	0x08023b6c
 801e780:	08023bdd 	.word	0x08023bdd

0801e784 <__hi0bits>:
 801e784:	0c03      	lsrs	r3, r0, #16
 801e786:	041b      	lsls	r3, r3, #16
 801e788:	b9d3      	cbnz	r3, 801e7c0 <__hi0bits+0x3c>
 801e78a:	0400      	lsls	r0, r0, #16
 801e78c:	2310      	movs	r3, #16
 801e78e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e792:	bf04      	itt	eq
 801e794:	0200      	lsleq	r0, r0, #8
 801e796:	3308      	addeq	r3, #8
 801e798:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e79c:	bf04      	itt	eq
 801e79e:	0100      	lsleq	r0, r0, #4
 801e7a0:	3304      	addeq	r3, #4
 801e7a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e7a6:	bf04      	itt	eq
 801e7a8:	0080      	lsleq	r0, r0, #2
 801e7aa:	3302      	addeq	r3, #2
 801e7ac:	2800      	cmp	r0, #0
 801e7ae:	db05      	blt.n	801e7bc <__hi0bits+0x38>
 801e7b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801e7b4:	f103 0301 	add.w	r3, r3, #1
 801e7b8:	bf08      	it	eq
 801e7ba:	2320      	moveq	r3, #32
 801e7bc:	4618      	mov	r0, r3
 801e7be:	4770      	bx	lr
 801e7c0:	2300      	movs	r3, #0
 801e7c2:	e7e4      	b.n	801e78e <__hi0bits+0xa>

0801e7c4 <__lo0bits>:
 801e7c4:	6803      	ldr	r3, [r0, #0]
 801e7c6:	f013 0207 	ands.w	r2, r3, #7
 801e7ca:	d00c      	beq.n	801e7e6 <__lo0bits+0x22>
 801e7cc:	07d9      	lsls	r1, r3, #31
 801e7ce:	d422      	bmi.n	801e816 <__lo0bits+0x52>
 801e7d0:	079a      	lsls	r2, r3, #30
 801e7d2:	bf49      	itett	mi
 801e7d4:	085b      	lsrmi	r3, r3, #1
 801e7d6:	089b      	lsrpl	r3, r3, #2
 801e7d8:	6003      	strmi	r3, [r0, #0]
 801e7da:	2201      	movmi	r2, #1
 801e7dc:	bf5c      	itt	pl
 801e7de:	6003      	strpl	r3, [r0, #0]
 801e7e0:	2202      	movpl	r2, #2
 801e7e2:	4610      	mov	r0, r2
 801e7e4:	4770      	bx	lr
 801e7e6:	b299      	uxth	r1, r3
 801e7e8:	b909      	cbnz	r1, 801e7ee <__lo0bits+0x2a>
 801e7ea:	0c1b      	lsrs	r3, r3, #16
 801e7ec:	2210      	movs	r2, #16
 801e7ee:	b2d9      	uxtb	r1, r3
 801e7f0:	b909      	cbnz	r1, 801e7f6 <__lo0bits+0x32>
 801e7f2:	3208      	adds	r2, #8
 801e7f4:	0a1b      	lsrs	r3, r3, #8
 801e7f6:	0719      	lsls	r1, r3, #28
 801e7f8:	bf04      	itt	eq
 801e7fa:	091b      	lsreq	r3, r3, #4
 801e7fc:	3204      	addeq	r2, #4
 801e7fe:	0799      	lsls	r1, r3, #30
 801e800:	bf04      	itt	eq
 801e802:	089b      	lsreq	r3, r3, #2
 801e804:	3202      	addeq	r2, #2
 801e806:	07d9      	lsls	r1, r3, #31
 801e808:	d403      	bmi.n	801e812 <__lo0bits+0x4e>
 801e80a:	085b      	lsrs	r3, r3, #1
 801e80c:	f102 0201 	add.w	r2, r2, #1
 801e810:	d003      	beq.n	801e81a <__lo0bits+0x56>
 801e812:	6003      	str	r3, [r0, #0]
 801e814:	e7e5      	b.n	801e7e2 <__lo0bits+0x1e>
 801e816:	2200      	movs	r2, #0
 801e818:	e7e3      	b.n	801e7e2 <__lo0bits+0x1e>
 801e81a:	2220      	movs	r2, #32
 801e81c:	e7e1      	b.n	801e7e2 <__lo0bits+0x1e>
	...

0801e820 <__i2b>:
 801e820:	b510      	push	{r4, lr}
 801e822:	460c      	mov	r4, r1
 801e824:	2101      	movs	r1, #1
 801e826:	f7ff febb 	bl	801e5a0 <_Balloc>
 801e82a:	4602      	mov	r2, r0
 801e82c:	b928      	cbnz	r0, 801e83a <__i2b+0x1a>
 801e82e:	4b05      	ldr	r3, [pc, #20]	; (801e844 <__i2b+0x24>)
 801e830:	4805      	ldr	r0, [pc, #20]	; (801e848 <__i2b+0x28>)
 801e832:	f240 1145 	movw	r1, #325	; 0x145
 801e836:	f7fe fc65 	bl	801d104 <__assert_func>
 801e83a:	2301      	movs	r3, #1
 801e83c:	6144      	str	r4, [r0, #20]
 801e83e:	6103      	str	r3, [r0, #16]
 801e840:	bd10      	pop	{r4, pc}
 801e842:	bf00      	nop
 801e844:	08023b6c 	.word	0x08023b6c
 801e848:	08023bdd 	.word	0x08023bdd

0801e84c <__multiply>:
 801e84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e850:	4691      	mov	r9, r2
 801e852:	690a      	ldr	r2, [r1, #16]
 801e854:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e858:	429a      	cmp	r2, r3
 801e85a:	bfb8      	it	lt
 801e85c:	460b      	movlt	r3, r1
 801e85e:	460c      	mov	r4, r1
 801e860:	bfbc      	itt	lt
 801e862:	464c      	movlt	r4, r9
 801e864:	4699      	movlt	r9, r3
 801e866:	6927      	ldr	r7, [r4, #16]
 801e868:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801e86c:	68a3      	ldr	r3, [r4, #8]
 801e86e:	6861      	ldr	r1, [r4, #4]
 801e870:	eb07 060a 	add.w	r6, r7, sl
 801e874:	42b3      	cmp	r3, r6
 801e876:	b085      	sub	sp, #20
 801e878:	bfb8      	it	lt
 801e87a:	3101      	addlt	r1, #1
 801e87c:	f7ff fe90 	bl	801e5a0 <_Balloc>
 801e880:	b930      	cbnz	r0, 801e890 <__multiply+0x44>
 801e882:	4602      	mov	r2, r0
 801e884:	4b44      	ldr	r3, [pc, #272]	; (801e998 <__multiply+0x14c>)
 801e886:	4845      	ldr	r0, [pc, #276]	; (801e99c <__multiply+0x150>)
 801e888:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801e88c:	f7fe fc3a 	bl	801d104 <__assert_func>
 801e890:	f100 0514 	add.w	r5, r0, #20
 801e894:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e898:	462b      	mov	r3, r5
 801e89a:	2200      	movs	r2, #0
 801e89c:	4543      	cmp	r3, r8
 801e89e:	d321      	bcc.n	801e8e4 <__multiply+0x98>
 801e8a0:	f104 0314 	add.w	r3, r4, #20
 801e8a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801e8a8:	f109 0314 	add.w	r3, r9, #20
 801e8ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801e8b0:	9202      	str	r2, [sp, #8]
 801e8b2:	1b3a      	subs	r2, r7, r4
 801e8b4:	3a15      	subs	r2, #21
 801e8b6:	f022 0203 	bic.w	r2, r2, #3
 801e8ba:	3204      	adds	r2, #4
 801e8bc:	f104 0115 	add.w	r1, r4, #21
 801e8c0:	428f      	cmp	r7, r1
 801e8c2:	bf38      	it	cc
 801e8c4:	2204      	movcc	r2, #4
 801e8c6:	9201      	str	r2, [sp, #4]
 801e8c8:	9a02      	ldr	r2, [sp, #8]
 801e8ca:	9303      	str	r3, [sp, #12]
 801e8cc:	429a      	cmp	r2, r3
 801e8ce:	d80c      	bhi.n	801e8ea <__multiply+0x9e>
 801e8d0:	2e00      	cmp	r6, #0
 801e8d2:	dd03      	ble.n	801e8dc <__multiply+0x90>
 801e8d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	d05b      	beq.n	801e994 <__multiply+0x148>
 801e8dc:	6106      	str	r6, [r0, #16]
 801e8de:	b005      	add	sp, #20
 801e8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8e4:	f843 2b04 	str.w	r2, [r3], #4
 801e8e8:	e7d8      	b.n	801e89c <__multiply+0x50>
 801e8ea:	f8b3 a000 	ldrh.w	sl, [r3]
 801e8ee:	f1ba 0f00 	cmp.w	sl, #0
 801e8f2:	d024      	beq.n	801e93e <__multiply+0xf2>
 801e8f4:	f104 0e14 	add.w	lr, r4, #20
 801e8f8:	46a9      	mov	r9, r5
 801e8fa:	f04f 0c00 	mov.w	ip, #0
 801e8fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 801e902:	f8d9 1000 	ldr.w	r1, [r9]
 801e906:	fa1f fb82 	uxth.w	fp, r2
 801e90a:	b289      	uxth	r1, r1
 801e90c:	fb0a 110b 	mla	r1, sl, fp, r1
 801e910:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801e914:	f8d9 2000 	ldr.w	r2, [r9]
 801e918:	4461      	add	r1, ip
 801e91a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e91e:	fb0a c20b 	mla	r2, sl, fp, ip
 801e922:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801e926:	b289      	uxth	r1, r1
 801e928:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801e92c:	4577      	cmp	r7, lr
 801e92e:	f849 1b04 	str.w	r1, [r9], #4
 801e932:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e936:	d8e2      	bhi.n	801e8fe <__multiply+0xb2>
 801e938:	9a01      	ldr	r2, [sp, #4]
 801e93a:	f845 c002 	str.w	ip, [r5, r2]
 801e93e:	9a03      	ldr	r2, [sp, #12]
 801e940:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e944:	3304      	adds	r3, #4
 801e946:	f1b9 0f00 	cmp.w	r9, #0
 801e94a:	d021      	beq.n	801e990 <__multiply+0x144>
 801e94c:	6829      	ldr	r1, [r5, #0]
 801e94e:	f104 0c14 	add.w	ip, r4, #20
 801e952:	46ae      	mov	lr, r5
 801e954:	f04f 0a00 	mov.w	sl, #0
 801e958:	f8bc b000 	ldrh.w	fp, [ip]
 801e95c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801e960:	fb09 220b 	mla	r2, r9, fp, r2
 801e964:	4452      	add	r2, sl
 801e966:	b289      	uxth	r1, r1
 801e968:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801e96c:	f84e 1b04 	str.w	r1, [lr], #4
 801e970:	f85c 1b04 	ldr.w	r1, [ip], #4
 801e974:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801e978:	f8be 1000 	ldrh.w	r1, [lr]
 801e97c:	fb09 110a 	mla	r1, r9, sl, r1
 801e980:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801e984:	4567      	cmp	r7, ip
 801e986:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801e98a:	d8e5      	bhi.n	801e958 <__multiply+0x10c>
 801e98c:	9a01      	ldr	r2, [sp, #4]
 801e98e:	50a9      	str	r1, [r5, r2]
 801e990:	3504      	adds	r5, #4
 801e992:	e799      	b.n	801e8c8 <__multiply+0x7c>
 801e994:	3e01      	subs	r6, #1
 801e996:	e79b      	b.n	801e8d0 <__multiply+0x84>
 801e998:	08023b6c 	.word	0x08023b6c
 801e99c:	08023bdd 	.word	0x08023bdd

0801e9a0 <__pow5mult>:
 801e9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e9a4:	4615      	mov	r5, r2
 801e9a6:	f012 0203 	ands.w	r2, r2, #3
 801e9aa:	4606      	mov	r6, r0
 801e9ac:	460f      	mov	r7, r1
 801e9ae:	d007      	beq.n	801e9c0 <__pow5mult+0x20>
 801e9b0:	4c25      	ldr	r4, [pc, #148]	; (801ea48 <__pow5mult+0xa8>)
 801e9b2:	3a01      	subs	r2, #1
 801e9b4:	2300      	movs	r3, #0
 801e9b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e9ba:	f7ff fe53 	bl	801e664 <__multadd>
 801e9be:	4607      	mov	r7, r0
 801e9c0:	10ad      	asrs	r5, r5, #2
 801e9c2:	d03d      	beq.n	801ea40 <__pow5mult+0xa0>
 801e9c4:	69f4      	ldr	r4, [r6, #28]
 801e9c6:	b97c      	cbnz	r4, 801e9e8 <__pow5mult+0x48>
 801e9c8:	2010      	movs	r0, #16
 801e9ca:	f7fc facf 	bl	801af6c <malloc>
 801e9ce:	4602      	mov	r2, r0
 801e9d0:	61f0      	str	r0, [r6, #28]
 801e9d2:	b928      	cbnz	r0, 801e9e0 <__pow5mult+0x40>
 801e9d4:	4b1d      	ldr	r3, [pc, #116]	; (801ea4c <__pow5mult+0xac>)
 801e9d6:	481e      	ldr	r0, [pc, #120]	; (801ea50 <__pow5mult+0xb0>)
 801e9d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 801e9dc:	f7fe fb92 	bl	801d104 <__assert_func>
 801e9e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e9e4:	6004      	str	r4, [r0, #0]
 801e9e6:	60c4      	str	r4, [r0, #12]
 801e9e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801e9ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e9f0:	b94c      	cbnz	r4, 801ea06 <__pow5mult+0x66>
 801e9f2:	f240 2171 	movw	r1, #625	; 0x271
 801e9f6:	4630      	mov	r0, r6
 801e9f8:	f7ff ff12 	bl	801e820 <__i2b>
 801e9fc:	2300      	movs	r3, #0
 801e9fe:	f8c8 0008 	str.w	r0, [r8, #8]
 801ea02:	4604      	mov	r4, r0
 801ea04:	6003      	str	r3, [r0, #0]
 801ea06:	f04f 0900 	mov.w	r9, #0
 801ea0a:	07eb      	lsls	r3, r5, #31
 801ea0c:	d50a      	bpl.n	801ea24 <__pow5mult+0x84>
 801ea0e:	4639      	mov	r1, r7
 801ea10:	4622      	mov	r2, r4
 801ea12:	4630      	mov	r0, r6
 801ea14:	f7ff ff1a 	bl	801e84c <__multiply>
 801ea18:	4639      	mov	r1, r7
 801ea1a:	4680      	mov	r8, r0
 801ea1c:	4630      	mov	r0, r6
 801ea1e:	f7ff fdff 	bl	801e620 <_Bfree>
 801ea22:	4647      	mov	r7, r8
 801ea24:	106d      	asrs	r5, r5, #1
 801ea26:	d00b      	beq.n	801ea40 <__pow5mult+0xa0>
 801ea28:	6820      	ldr	r0, [r4, #0]
 801ea2a:	b938      	cbnz	r0, 801ea3c <__pow5mult+0x9c>
 801ea2c:	4622      	mov	r2, r4
 801ea2e:	4621      	mov	r1, r4
 801ea30:	4630      	mov	r0, r6
 801ea32:	f7ff ff0b 	bl	801e84c <__multiply>
 801ea36:	6020      	str	r0, [r4, #0]
 801ea38:	f8c0 9000 	str.w	r9, [r0]
 801ea3c:	4604      	mov	r4, r0
 801ea3e:	e7e4      	b.n	801ea0a <__pow5mult+0x6a>
 801ea40:	4638      	mov	r0, r7
 801ea42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea46:	bf00      	nop
 801ea48:	08023d28 	.word	0x08023d28
 801ea4c:	08023a52 	.word	0x08023a52
 801ea50:	08023bdd 	.word	0x08023bdd

0801ea54 <__lshift>:
 801ea54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea58:	460c      	mov	r4, r1
 801ea5a:	6849      	ldr	r1, [r1, #4]
 801ea5c:	6923      	ldr	r3, [r4, #16]
 801ea5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ea62:	68a3      	ldr	r3, [r4, #8]
 801ea64:	4607      	mov	r7, r0
 801ea66:	4691      	mov	r9, r2
 801ea68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ea6c:	f108 0601 	add.w	r6, r8, #1
 801ea70:	42b3      	cmp	r3, r6
 801ea72:	db0b      	blt.n	801ea8c <__lshift+0x38>
 801ea74:	4638      	mov	r0, r7
 801ea76:	f7ff fd93 	bl	801e5a0 <_Balloc>
 801ea7a:	4605      	mov	r5, r0
 801ea7c:	b948      	cbnz	r0, 801ea92 <__lshift+0x3e>
 801ea7e:	4602      	mov	r2, r0
 801ea80:	4b28      	ldr	r3, [pc, #160]	; (801eb24 <__lshift+0xd0>)
 801ea82:	4829      	ldr	r0, [pc, #164]	; (801eb28 <__lshift+0xd4>)
 801ea84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801ea88:	f7fe fb3c 	bl	801d104 <__assert_func>
 801ea8c:	3101      	adds	r1, #1
 801ea8e:	005b      	lsls	r3, r3, #1
 801ea90:	e7ee      	b.n	801ea70 <__lshift+0x1c>
 801ea92:	2300      	movs	r3, #0
 801ea94:	f100 0114 	add.w	r1, r0, #20
 801ea98:	f100 0210 	add.w	r2, r0, #16
 801ea9c:	4618      	mov	r0, r3
 801ea9e:	4553      	cmp	r3, sl
 801eaa0:	db33      	blt.n	801eb0a <__lshift+0xb6>
 801eaa2:	6920      	ldr	r0, [r4, #16]
 801eaa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801eaa8:	f104 0314 	add.w	r3, r4, #20
 801eaac:	f019 091f 	ands.w	r9, r9, #31
 801eab0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801eab4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801eab8:	d02b      	beq.n	801eb12 <__lshift+0xbe>
 801eaba:	f1c9 0e20 	rsb	lr, r9, #32
 801eabe:	468a      	mov	sl, r1
 801eac0:	2200      	movs	r2, #0
 801eac2:	6818      	ldr	r0, [r3, #0]
 801eac4:	fa00 f009 	lsl.w	r0, r0, r9
 801eac8:	4310      	orrs	r0, r2
 801eaca:	f84a 0b04 	str.w	r0, [sl], #4
 801eace:	f853 2b04 	ldr.w	r2, [r3], #4
 801ead2:	459c      	cmp	ip, r3
 801ead4:	fa22 f20e 	lsr.w	r2, r2, lr
 801ead8:	d8f3      	bhi.n	801eac2 <__lshift+0x6e>
 801eada:	ebac 0304 	sub.w	r3, ip, r4
 801eade:	3b15      	subs	r3, #21
 801eae0:	f023 0303 	bic.w	r3, r3, #3
 801eae4:	3304      	adds	r3, #4
 801eae6:	f104 0015 	add.w	r0, r4, #21
 801eaea:	4584      	cmp	ip, r0
 801eaec:	bf38      	it	cc
 801eaee:	2304      	movcc	r3, #4
 801eaf0:	50ca      	str	r2, [r1, r3]
 801eaf2:	b10a      	cbz	r2, 801eaf8 <__lshift+0xa4>
 801eaf4:	f108 0602 	add.w	r6, r8, #2
 801eaf8:	3e01      	subs	r6, #1
 801eafa:	4638      	mov	r0, r7
 801eafc:	612e      	str	r6, [r5, #16]
 801eafe:	4621      	mov	r1, r4
 801eb00:	f7ff fd8e 	bl	801e620 <_Bfree>
 801eb04:	4628      	mov	r0, r5
 801eb06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb0a:	f842 0f04 	str.w	r0, [r2, #4]!
 801eb0e:	3301      	adds	r3, #1
 801eb10:	e7c5      	b.n	801ea9e <__lshift+0x4a>
 801eb12:	3904      	subs	r1, #4
 801eb14:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb18:	f841 2f04 	str.w	r2, [r1, #4]!
 801eb1c:	459c      	cmp	ip, r3
 801eb1e:	d8f9      	bhi.n	801eb14 <__lshift+0xc0>
 801eb20:	e7ea      	b.n	801eaf8 <__lshift+0xa4>
 801eb22:	bf00      	nop
 801eb24:	08023b6c 	.word	0x08023b6c
 801eb28:	08023bdd 	.word	0x08023bdd

0801eb2c <__mcmp>:
 801eb2c:	b530      	push	{r4, r5, lr}
 801eb2e:	6902      	ldr	r2, [r0, #16]
 801eb30:	690c      	ldr	r4, [r1, #16]
 801eb32:	1b12      	subs	r2, r2, r4
 801eb34:	d10e      	bne.n	801eb54 <__mcmp+0x28>
 801eb36:	f100 0314 	add.w	r3, r0, #20
 801eb3a:	3114      	adds	r1, #20
 801eb3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801eb40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801eb44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801eb48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801eb4c:	42a5      	cmp	r5, r4
 801eb4e:	d003      	beq.n	801eb58 <__mcmp+0x2c>
 801eb50:	d305      	bcc.n	801eb5e <__mcmp+0x32>
 801eb52:	2201      	movs	r2, #1
 801eb54:	4610      	mov	r0, r2
 801eb56:	bd30      	pop	{r4, r5, pc}
 801eb58:	4283      	cmp	r3, r0
 801eb5a:	d3f3      	bcc.n	801eb44 <__mcmp+0x18>
 801eb5c:	e7fa      	b.n	801eb54 <__mcmp+0x28>
 801eb5e:	f04f 32ff 	mov.w	r2, #4294967295
 801eb62:	e7f7      	b.n	801eb54 <__mcmp+0x28>

0801eb64 <__mdiff>:
 801eb64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb68:	460c      	mov	r4, r1
 801eb6a:	4606      	mov	r6, r0
 801eb6c:	4611      	mov	r1, r2
 801eb6e:	4620      	mov	r0, r4
 801eb70:	4690      	mov	r8, r2
 801eb72:	f7ff ffdb 	bl	801eb2c <__mcmp>
 801eb76:	1e05      	subs	r5, r0, #0
 801eb78:	d110      	bne.n	801eb9c <__mdiff+0x38>
 801eb7a:	4629      	mov	r1, r5
 801eb7c:	4630      	mov	r0, r6
 801eb7e:	f7ff fd0f 	bl	801e5a0 <_Balloc>
 801eb82:	b930      	cbnz	r0, 801eb92 <__mdiff+0x2e>
 801eb84:	4b3a      	ldr	r3, [pc, #232]	; (801ec70 <__mdiff+0x10c>)
 801eb86:	4602      	mov	r2, r0
 801eb88:	f240 2137 	movw	r1, #567	; 0x237
 801eb8c:	4839      	ldr	r0, [pc, #228]	; (801ec74 <__mdiff+0x110>)
 801eb8e:	f7fe fab9 	bl	801d104 <__assert_func>
 801eb92:	2301      	movs	r3, #1
 801eb94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801eb98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb9c:	bfa4      	itt	ge
 801eb9e:	4643      	movge	r3, r8
 801eba0:	46a0      	movge	r8, r4
 801eba2:	4630      	mov	r0, r6
 801eba4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801eba8:	bfa6      	itte	ge
 801ebaa:	461c      	movge	r4, r3
 801ebac:	2500      	movge	r5, #0
 801ebae:	2501      	movlt	r5, #1
 801ebb0:	f7ff fcf6 	bl	801e5a0 <_Balloc>
 801ebb4:	b920      	cbnz	r0, 801ebc0 <__mdiff+0x5c>
 801ebb6:	4b2e      	ldr	r3, [pc, #184]	; (801ec70 <__mdiff+0x10c>)
 801ebb8:	4602      	mov	r2, r0
 801ebba:	f240 2145 	movw	r1, #581	; 0x245
 801ebbe:	e7e5      	b.n	801eb8c <__mdiff+0x28>
 801ebc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ebc4:	6926      	ldr	r6, [r4, #16]
 801ebc6:	60c5      	str	r5, [r0, #12]
 801ebc8:	f104 0914 	add.w	r9, r4, #20
 801ebcc:	f108 0514 	add.w	r5, r8, #20
 801ebd0:	f100 0e14 	add.w	lr, r0, #20
 801ebd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801ebd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801ebdc:	f108 0210 	add.w	r2, r8, #16
 801ebe0:	46f2      	mov	sl, lr
 801ebe2:	2100      	movs	r1, #0
 801ebe4:	f859 3b04 	ldr.w	r3, [r9], #4
 801ebe8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ebec:	fa11 f88b 	uxtah	r8, r1, fp
 801ebf0:	b299      	uxth	r1, r3
 801ebf2:	0c1b      	lsrs	r3, r3, #16
 801ebf4:	eba8 0801 	sub.w	r8, r8, r1
 801ebf8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ebfc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ec00:	fa1f f888 	uxth.w	r8, r8
 801ec04:	1419      	asrs	r1, r3, #16
 801ec06:	454e      	cmp	r6, r9
 801ec08:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ec0c:	f84a 3b04 	str.w	r3, [sl], #4
 801ec10:	d8e8      	bhi.n	801ebe4 <__mdiff+0x80>
 801ec12:	1b33      	subs	r3, r6, r4
 801ec14:	3b15      	subs	r3, #21
 801ec16:	f023 0303 	bic.w	r3, r3, #3
 801ec1a:	3304      	adds	r3, #4
 801ec1c:	3415      	adds	r4, #21
 801ec1e:	42a6      	cmp	r6, r4
 801ec20:	bf38      	it	cc
 801ec22:	2304      	movcc	r3, #4
 801ec24:	441d      	add	r5, r3
 801ec26:	4473      	add	r3, lr
 801ec28:	469e      	mov	lr, r3
 801ec2a:	462e      	mov	r6, r5
 801ec2c:	4566      	cmp	r6, ip
 801ec2e:	d30e      	bcc.n	801ec4e <__mdiff+0xea>
 801ec30:	f10c 0203 	add.w	r2, ip, #3
 801ec34:	1b52      	subs	r2, r2, r5
 801ec36:	f022 0203 	bic.w	r2, r2, #3
 801ec3a:	3d03      	subs	r5, #3
 801ec3c:	45ac      	cmp	ip, r5
 801ec3e:	bf38      	it	cc
 801ec40:	2200      	movcc	r2, #0
 801ec42:	4413      	add	r3, r2
 801ec44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801ec48:	b17a      	cbz	r2, 801ec6a <__mdiff+0x106>
 801ec4a:	6107      	str	r7, [r0, #16]
 801ec4c:	e7a4      	b.n	801eb98 <__mdiff+0x34>
 801ec4e:	f856 8b04 	ldr.w	r8, [r6], #4
 801ec52:	fa11 f288 	uxtah	r2, r1, r8
 801ec56:	1414      	asrs	r4, r2, #16
 801ec58:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801ec5c:	b292      	uxth	r2, r2
 801ec5e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801ec62:	f84e 2b04 	str.w	r2, [lr], #4
 801ec66:	1421      	asrs	r1, r4, #16
 801ec68:	e7e0      	b.n	801ec2c <__mdiff+0xc8>
 801ec6a:	3f01      	subs	r7, #1
 801ec6c:	e7ea      	b.n	801ec44 <__mdiff+0xe0>
 801ec6e:	bf00      	nop
 801ec70:	08023b6c 	.word	0x08023b6c
 801ec74:	08023bdd 	.word	0x08023bdd

0801ec78 <__ulp>:
 801ec78:	b082      	sub	sp, #8
 801ec7a:	ed8d 0b00 	vstr	d0, [sp]
 801ec7e:	9a01      	ldr	r2, [sp, #4]
 801ec80:	4b0f      	ldr	r3, [pc, #60]	; (801ecc0 <__ulp+0x48>)
 801ec82:	4013      	ands	r3, r2
 801ec84:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801ec88:	2b00      	cmp	r3, #0
 801ec8a:	dc08      	bgt.n	801ec9e <__ulp+0x26>
 801ec8c:	425b      	negs	r3, r3
 801ec8e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801ec92:	ea4f 5223 	mov.w	r2, r3, asr #20
 801ec96:	da04      	bge.n	801eca2 <__ulp+0x2a>
 801ec98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801ec9c:	4113      	asrs	r3, r2
 801ec9e:	2200      	movs	r2, #0
 801eca0:	e008      	b.n	801ecb4 <__ulp+0x3c>
 801eca2:	f1a2 0314 	sub.w	r3, r2, #20
 801eca6:	2b1e      	cmp	r3, #30
 801eca8:	bfda      	itte	le
 801ecaa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801ecae:	40da      	lsrle	r2, r3
 801ecb0:	2201      	movgt	r2, #1
 801ecb2:	2300      	movs	r3, #0
 801ecb4:	4619      	mov	r1, r3
 801ecb6:	4610      	mov	r0, r2
 801ecb8:	ec41 0b10 	vmov	d0, r0, r1
 801ecbc:	b002      	add	sp, #8
 801ecbe:	4770      	bx	lr
 801ecc0:	7ff00000 	.word	0x7ff00000

0801ecc4 <__b2d>:
 801ecc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ecc8:	6906      	ldr	r6, [r0, #16]
 801ecca:	f100 0814 	add.w	r8, r0, #20
 801ecce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801ecd2:	1f37      	subs	r7, r6, #4
 801ecd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ecd8:	4610      	mov	r0, r2
 801ecda:	f7ff fd53 	bl	801e784 <__hi0bits>
 801ecde:	f1c0 0320 	rsb	r3, r0, #32
 801ece2:	280a      	cmp	r0, #10
 801ece4:	600b      	str	r3, [r1, #0]
 801ece6:	491b      	ldr	r1, [pc, #108]	; (801ed54 <__b2d+0x90>)
 801ece8:	dc15      	bgt.n	801ed16 <__b2d+0x52>
 801ecea:	f1c0 0c0b 	rsb	ip, r0, #11
 801ecee:	fa22 f30c 	lsr.w	r3, r2, ip
 801ecf2:	45b8      	cmp	r8, r7
 801ecf4:	ea43 0501 	orr.w	r5, r3, r1
 801ecf8:	bf34      	ite	cc
 801ecfa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ecfe:	2300      	movcs	r3, #0
 801ed00:	3015      	adds	r0, #21
 801ed02:	fa02 f000 	lsl.w	r0, r2, r0
 801ed06:	fa23 f30c 	lsr.w	r3, r3, ip
 801ed0a:	4303      	orrs	r3, r0
 801ed0c:	461c      	mov	r4, r3
 801ed0e:	ec45 4b10 	vmov	d0, r4, r5
 801ed12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed16:	45b8      	cmp	r8, r7
 801ed18:	bf3a      	itte	cc
 801ed1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ed1e:	f1a6 0708 	subcc.w	r7, r6, #8
 801ed22:	2300      	movcs	r3, #0
 801ed24:	380b      	subs	r0, #11
 801ed26:	d012      	beq.n	801ed4e <__b2d+0x8a>
 801ed28:	f1c0 0120 	rsb	r1, r0, #32
 801ed2c:	fa23 f401 	lsr.w	r4, r3, r1
 801ed30:	4082      	lsls	r2, r0
 801ed32:	4322      	orrs	r2, r4
 801ed34:	4547      	cmp	r7, r8
 801ed36:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801ed3a:	bf8c      	ite	hi
 801ed3c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801ed40:	2200      	movls	r2, #0
 801ed42:	4083      	lsls	r3, r0
 801ed44:	40ca      	lsrs	r2, r1
 801ed46:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801ed4a:	4313      	orrs	r3, r2
 801ed4c:	e7de      	b.n	801ed0c <__b2d+0x48>
 801ed4e:	ea42 0501 	orr.w	r5, r2, r1
 801ed52:	e7db      	b.n	801ed0c <__b2d+0x48>
 801ed54:	3ff00000 	.word	0x3ff00000

0801ed58 <__d2b>:
 801ed58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ed5c:	460f      	mov	r7, r1
 801ed5e:	2101      	movs	r1, #1
 801ed60:	ec59 8b10 	vmov	r8, r9, d0
 801ed64:	4616      	mov	r6, r2
 801ed66:	f7ff fc1b 	bl	801e5a0 <_Balloc>
 801ed6a:	4604      	mov	r4, r0
 801ed6c:	b930      	cbnz	r0, 801ed7c <__d2b+0x24>
 801ed6e:	4602      	mov	r2, r0
 801ed70:	4b24      	ldr	r3, [pc, #144]	; (801ee04 <__d2b+0xac>)
 801ed72:	4825      	ldr	r0, [pc, #148]	; (801ee08 <__d2b+0xb0>)
 801ed74:	f240 310f 	movw	r1, #783	; 0x30f
 801ed78:	f7fe f9c4 	bl	801d104 <__assert_func>
 801ed7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ed80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ed84:	bb2d      	cbnz	r5, 801edd2 <__d2b+0x7a>
 801ed86:	9301      	str	r3, [sp, #4]
 801ed88:	f1b8 0300 	subs.w	r3, r8, #0
 801ed8c:	d026      	beq.n	801eddc <__d2b+0x84>
 801ed8e:	4668      	mov	r0, sp
 801ed90:	9300      	str	r3, [sp, #0]
 801ed92:	f7ff fd17 	bl	801e7c4 <__lo0bits>
 801ed96:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ed9a:	b1e8      	cbz	r0, 801edd8 <__d2b+0x80>
 801ed9c:	f1c0 0320 	rsb	r3, r0, #32
 801eda0:	fa02 f303 	lsl.w	r3, r2, r3
 801eda4:	430b      	orrs	r3, r1
 801eda6:	40c2      	lsrs	r2, r0
 801eda8:	6163      	str	r3, [r4, #20]
 801edaa:	9201      	str	r2, [sp, #4]
 801edac:	9b01      	ldr	r3, [sp, #4]
 801edae:	61a3      	str	r3, [r4, #24]
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	bf14      	ite	ne
 801edb4:	2202      	movne	r2, #2
 801edb6:	2201      	moveq	r2, #1
 801edb8:	6122      	str	r2, [r4, #16]
 801edba:	b1bd      	cbz	r5, 801edec <__d2b+0x94>
 801edbc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801edc0:	4405      	add	r5, r0
 801edc2:	603d      	str	r5, [r7, #0]
 801edc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801edc8:	6030      	str	r0, [r6, #0]
 801edca:	4620      	mov	r0, r4
 801edcc:	b003      	add	sp, #12
 801edce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801edd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801edd6:	e7d6      	b.n	801ed86 <__d2b+0x2e>
 801edd8:	6161      	str	r1, [r4, #20]
 801edda:	e7e7      	b.n	801edac <__d2b+0x54>
 801eddc:	a801      	add	r0, sp, #4
 801edde:	f7ff fcf1 	bl	801e7c4 <__lo0bits>
 801ede2:	9b01      	ldr	r3, [sp, #4]
 801ede4:	6163      	str	r3, [r4, #20]
 801ede6:	3020      	adds	r0, #32
 801ede8:	2201      	movs	r2, #1
 801edea:	e7e5      	b.n	801edb8 <__d2b+0x60>
 801edec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801edf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801edf4:	6038      	str	r0, [r7, #0]
 801edf6:	6918      	ldr	r0, [r3, #16]
 801edf8:	f7ff fcc4 	bl	801e784 <__hi0bits>
 801edfc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ee00:	e7e2      	b.n	801edc8 <__d2b+0x70>
 801ee02:	bf00      	nop
 801ee04:	08023b6c 	.word	0x08023b6c
 801ee08:	08023bdd 	.word	0x08023bdd

0801ee0c <__ratio>:
 801ee0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee10:	4688      	mov	r8, r1
 801ee12:	4669      	mov	r1, sp
 801ee14:	4681      	mov	r9, r0
 801ee16:	f7ff ff55 	bl	801ecc4 <__b2d>
 801ee1a:	a901      	add	r1, sp, #4
 801ee1c:	4640      	mov	r0, r8
 801ee1e:	ec55 4b10 	vmov	r4, r5, d0
 801ee22:	f7ff ff4f 	bl	801ecc4 <__b2d>
 801ee26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ee2a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801ee2e:	eba3 0c02 	sub.w	ip, r3, r2
 801ee32:	e9dd 3200 	ldrd	r3, r2, [sp]
 801ee36:	1a9b      	subs	r3, r3, r2
 801ee38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801ee3c:	ec51 0b10 	vmov	r0, r1, d0
 801ee40:	2b00      	cmp	r3, #0
 801ee42:	bfd6      	itet	le
 801ee44:	460a      	movle	r2, r1
 801ee46:	462a      	movgt	r2, r5
 801ee48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ee4c:	468b      	mov	fp, r1
 801ee4e:	462f      	mov	r7, r5
 801ee50:	bfd4      	ite	le
 801ee52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801ee56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801ee5a:	4620      	mov	r0, r4
 801ee5c:	ee10 2a10 	vmov	r2, s0
 801ee60:	465b      	mov	r3, fp
 801ee62:	4639      	mov	r1, r7
 801ee64:	f7e1 fcca 	bl	80007fc <__aeabi_ddiv>
 801ee68:	ec41 0b10 	vmov	d0, r0, r1
 801ee6c:	b003      	add	sp, #12
 801ee6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ee72 <__copybits>:
 801ee72:	3901      	subs	r1, #1
 801ee74:	b570      	push	{r4, r5, r6, lr}
 801ee76:	1149      	asrs	r1, r1, #5
 801ee78:	6914      	ldr	r4, [r2, #16]
 801ee7a:	3101      	adds	r1, #1
 801ee7c:	f102 0314 	add.w	r3, r2, #20
 801ee80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ee84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ee88:	1f05      	subs	r5, r0, #4
 801ee8a:	42a3      	cmp	r3, r4
 801ee8c:	d30c      	bcc.n	801eea8 <__copybits+0x36>
 801ee8e:	1aa3      	subs	r3, r4, r2
 801ee90:	3b11      	subs	r3, #17
 801ee92:	f023 0303 	bic.w	r3, r3, #3
 801ee96:	3211      	adds	r2, #17
 801ee98:	42a2      	cmp	r2, r4
 801ee9a:	bf88      	it	hi
 801ee9c:	2300      	movhi	r3, #0
 801ee9e:	4418      	add	r0, r3
 801eea0:	2300      	movs	r3, #0
 801eea2:	4288      	cmp	r0, r1
 801eea4:	d305      	bcc.n	801eeb2 <__copybits+0x40>
 801eea6:	bd70      	pop	{r4, r5, r6, pc}
 801eea8:	f853 6b04 	ldr.w	r6, [r3], #4
 801eeac:	f845 6f04 	str.w	r6, [r5, #4]!
 801eeb0:	e7eb      	b.n	801ee8a <__copybits+0x18>
 801eeb2:	f840 3b04 	str.w	r3, [r0], #4
 801eeb6:	e7f4      	b.n	801eea2 <__copybits+0x30>

0801eeb8 <__any_on>:
 801eeb8:	f100 0214 	add.w	r2, r0, #20
 801eebc:	6900      	ldr	r0, [r0, #16]
 801eebe:	114b      	asrs	r3, r1, #5
 801eec0:	4298      	cmp	r0, r3
 801eec2:	b510      	push	{r4, lr}
 801eec4:	db11      	blt.n	801eeea <__any_on+0x32>
 801eec6:	dd0a      	ble.n	801eede <__any_on+0x26>
 801eec8:	f011 011f 	ands.w	r1, r1, #31
 801eecc:	d007      	beq.n	801eede <__any_on+0x26>
 801eece:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801eed2:	fa24 f001 	lsr.w	r0, r4, r1
 801eed6:	fa00 f101 	lsl.w	r1, r0, r1
 801eeda:	428c      	cmp	r4, r1
 801eedc:	d10b      	bne.n	801eef6 <__any_on+0x3e>
 801eede:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801eee2:	4293      	cmp	r3, r2
 801eee4:	d803      	bhi.n	801eeee <__any_on+0x36>
 801eee6:	2000      	movs	r0, #0
 801eee8:	bd10      	pop	{r4, pc}
 801eeea:	4603      	mov	r3, r0
 801eeec:	e7f7      	b.n	801eede <__any_on+0x26>
 801eeee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801eef2:	2900      	cmp	r1, #0
 801eef4:	d0f5      	beq.n	801eee2 <__any_on+0x2a>
 801eef6:	2001      	movs	r0, #1
 801eef8:	e7f6      	b.n	801eee8 <__any_on+0x30>

0801eefa <__ascii_wctomb>:
 801eefa:	b149      	cbz	r1, 801ef10 <__ascii_wctomb+0x16>
 801eefc:	2aff      	cmp	r2, #255	; 0xff
 801eefe:	bf85      	ittet	hi
 801ef00:	238a      	movhi	r3, #138	; 0x8a
 801ef02:	6003      	strhi	r3, [r0, #0]
 801ef04:	700a      	strbls	r2, [r1, #0]
 801ef06:	f04f 30ff 	movhi.w	r0, #4294967295
 801ef0a:	bf98      	it	ls
 801ef0c:	2001      	movls	r0, #1
 801ef0e:	4770      	bx	lr
 801ef10:	4608      	mov	r0, r1
 801ef12:	4770      	bx	lr

0801ef14 <__ssputs_r>:
 801ef14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ef18:	688e      	ldr	r6, [r1, #8]
 801ef1a:	461f      	mov	r7, r3
 801ef1c:	42be      	cmp	r6, r7
 801ef1e:	680b      	ldr	r3, [r1, #0]
 801ef20:	4682      	mov	sl, r0
 801ef22:	460c      	mov	r4, r1
 801ef24:	4690      	mov	r8, r2
 801ef26:	d82c      	bhi.n	801ef82 <__ssputs_r+0x6e>
 801ef28:	898a      	ldrh	r2, [r1, #12]
 801ef2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ef2e:	d026      	beq.n	801ef7e <__ssputs_r+0x6a>
 801ef30:	6965      	ldr	r5, [r4, #20]
 801ef32:	6909      	ldr	r1, [r1, #16]
 801ef34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ef38:	eba3 0901 	sub.w	r9, r3, r1
 801ef3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ef40:	1c7b      	adds	r3, r7, #1
 801ef42:	444b      	add	r3, r9
 801ef44:	106d      	asrs	r5, r5, #1
 801ef46:	429d      	cmp	r5, r3
 801ef48:	bf38      	it	cc
 801ef4a:	461d      	movcc	r5, r3
 801ef4c:	0553      	lsls	r3, r2, #21
 801ef4e:	d527      	bpl.n	801efa0 <__ssputs_r+0x8c>
 801ef50:	4629      	mov	r1, r5
 801ef52:	f7fc f83b 	bl	801afcc <_malloc_r>
 801ef56:	4606      	mov	r6, r0
 801ef58:	b360      	cbz	r0, 801efb4 <__ssputs_r+0xa0>
 801ef5a:	6921      	ldr	r1, [r4, #16]
 801ef5c:	464a      	mov	r2, r9
 801ef5e:	f7fe f8b4 	bl	801d0ca <memcpy>
 801ef62:	89a3      	ldrh	r3, [r4, #12]
 801ef64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ef68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ef6c:	81a3      	strh	r3, [r4, #12]
 801ef6e:	6126      	str	r6, [r4, #16]
 801ef70:	6165      	str	r5, [r4, #20]
 801ef72:	444e      	add	r6, r9
 801ef74:	eba5 0509 	sub.w	r5, r5, r9
 801ef78:	6026      	str	r6, [r4, #0]
 801ef7a:	60a5      	str	r5, [r4, #8]
 801ef7c:	463e      	mov	r6, r7
 801ef7e:	42be      	cmp	r6, r7
 801ef80:	d900      	bls.n	801ef84 <__ssputs_r+0x70>
 801ef82:	463e      	mov	r6, r7
 801ef84:	6820      	ldr	r0, [r4, #0]
 801ef86:	4632      	mov	r2, r6
 801ef88:	4641      	mov	r1, r8
 801ef8a:	f000 fbb5 	bl	801f6f8 <memmove>
 801ef8e:	68a3      	ldr	r3, [r4, #8]
 801ef90:	1b9b      	subs	r3, r3, r6
 801ef92:	60a3      	str	r3, [r4, #8]
 801ef94:	6823      	ldr	r3, [r4, #0]
 801ef96:	4433      	add	r3, r6
 801ef98:	6023      	str	r3, [r4, #0]
 801ef9a:	2000      	movs	r0, #0
 801ef9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801efa0:	462a      	mov	r2, r5
 801efa2:	f000 fbe0 	bl	801f766 <_realloc_r>
 801efa6:	4606      	mov	r6, r0
 801efa8:	2800      	cmp	r0, #0
 801efaa:	d1e0      	bne.n	801ef6e <__ssputs_r+0x5a>
 801efac:	6921      	ldr	r1, [r4, #16]
 801efae:	4650      	mov	r0, sl
 801efb0:	f7fe ff40 	bl	801de34 <_free_r>
 801efb4:	230c      	movs	r3, #12
 801efb6:	f8ca 3000 	str.w	r3, [sl]
 801efba:	89a3      	ldrh	r3, [r4, #12]
 801efbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801efc0:	81a3      	strh	r3, [r4, #12]
 801efc2:	f04f 30ff 	mov.w	r0, #4294967295
 801efc6:	e7e9      	b.n	801ef9c <__ssputs_r+0x88>

0801efc8 <_svfiprintf_r>:
 801efc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efcc:	4698      	mov	r8, r3
 801efce:	898b      	ldrh	r3, [r1, #12]
 801efd0:	061b      	lsls	r3, r3, #24
 801efd2:	b09d      	sub	sp, #116	; 0x74
 801efd4:	4607      	mov	r7, r0
 801efd6:	460d      	mov	r5, r1
 801efd8:	4614      	mov	r4, r2
 801efda:	d50e      	bpl.n	801effa <_svfiprintf_r+0x32>
 801efdc:	690b      	ldr	r3, [r1, #16]
 801efde:	b963      	cbnz	r3, 801effa <_svfiprintf_r+0x32>
 801efe0:	2140      	movs	r1, #64	; 0x40
 801efe2:	f7fb fff3 	bl	801afcc <_malloc_r>
 801efe6:	6028      	str	r0, [r5, #0]
 801efe8:	6128      	str	r0, [r5, #16]
 801efea:	b920      	cbnz	r0, 801eff6 <_svfiprintf_r+0x2e>
 801efec:	230c      	movs	r3, #12
 801efee:	603b      	str	r3, [r7, #0]
 801eff0:	f04f 30ff 	mov.w	r0, #4294967295
 801eff4:	e0d0      	b.n	801f198 <_svfiprintf_r+0x1d0>
 801eff6:	2340      	movs	r3, #64	; 0x40
 801eff8:	616b      	str	r3, [r5, #20]
 801effa:	2300      	movs	r3, #0
 801effc:	9309      	str	r3, [sp, #36]	; 0x24
 801effe:	2320      	movs	r3, #32
 801f000:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f004:	f8cd 800c 	str.w	r8, [sp, #12]
 801f008:	2330      	movs	r3, #48	; 0x30
 801f00a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801f1b0 <_svfiprintf_r+0x1e8>
 801f00e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f012:	f04f 0901 	mov.w	r9, #1
 801f016:	4623      	mov	r3, r4
 801f018:	469a      	mov	sl, r3
 801f01a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f01e:	b10a      	cbz	r2, 801f024 <_svfiprintf_r+0x5c>
 801f020:	2a25      	cmp	r2, #37	; 0x25
 801f022:	d1f9      	bne.n	801f018 <_svfiprintf_r+0x50>
 801f024:	ebba 0b04 	subs.w	fp, sl, r4
 801f028:	d00b      	beq.n	801f042 <_svfiprintf_r+0x7a>
 801f02a:	465b      	mov	r3, fp
 801f02c:	4622      	mov	r2, r4
 801f02e:	4629      	mov	r1, r5
 801f030:	4638      	mov	r0, r7
 801f032:	f7ff ff6f 	bl	801ef14 <__ssputs_r>
 801f036:	3001      	adds	r0, #1
 801f038:	f000 80a9 	beq.w	801f18e <_svfiprintf_r+0x1c6>
 801f03c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f03e:	445a      	add	r2, fp
 801f040:	9209      	str	r2, [sp, #36]	; 0x24
 801f042:	f89a 3000 	ldrb.w	r3, [sl]
 801f046:	2b00      	cmp	r3, #0
 801f048:	f000 80a1 	beq.w	801f18e <_svfiprintf_r+0x1c6>
 801f04c:	2300      	movs	r3, #0
 801f04e:	f04f 32ff 	mov.w	r2, #4294967295
 801f052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f056:	f10a 0a01 	add.w	sl, sl, #1
 801f05a:	9304      	str	r3, [sp, #16]
 801f05c:	9307      	str	r3, [sp, #28]
 801f05e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f062:	931a      	str	r3, [sp, #104]	; 0x68
 801f064:	4654      	mov	r4, sl
 801f066:	2205      	movs	r2, #5
 801f068:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f06c:	4850      	ldr	r0, [pc, #320]	; (801f1b0 <_svfiprintf_r+0x1e8>)
 801f06e:	f7e1 f887 	bl	8000180 <memchr>
 801f072:	9a04      	ldr	r2, [sp, #16]
 801f074:	b9d8      	cbnz	r0, 801f0ae <_svfiprintf_r+0xe6>
 801f076:	06d0      	lsls	r0, r2, #27
 801f078:	bf44      	itt	mi
 801f07a:	2320      	movmi	r3, #32
 801f07c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f080:	0711      	lsls	r1, r2, #28
 801f082:	bf44      	itt	mi
 801f084:	232b      	movmi	r3, #43	; 0x2b
 801f086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f08a:	f89a 3000 	ldrb.w	r3, [sl]
 801f08e:	2b2a      	cmp	r3, #42	; 0x2a
 801f090:	d015      	beq.n	801f0be <_svfiprintf_r+0xf6>
 801f092:	9a07      	ldr	r2, [sp, #28]
 801f094:	4654      	mov	r4, sl
 801f096:	2000      	movs	r0, #0
 801f098:	f04f 0c0a 	mov.w	ip, #10
 801f09c:	4621      	mov	r1, r4
 801f09e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f0a2:	3b30      	subs	r3, #48	; 0x30
 801f0a4:	2b09      	cmp	r3, #9
 801f0a6:	d94d      	bls.n	801f144 <_svfiprintf_r+0x17c>
 801f0a8:	b1b0      	cbz	r0, 801f0d8 <_svfiprintf_r+0x110>
 801f0aa:	9207      	str	r2, [sp, #28]
 801f0ac:	e014      	b.n	801f0d8 <_svfiprintf_r+0x110>
 801f0ae:	eba0 0308 	sub.w	r3, r0, r8
 801f0b2:	fa09 f303 	lsl.w	r3, r9, r3
 801f0b6:	4313      	orrs	r3, r2
 801f0b8:	9304      	str	r3, [sp, #16]
 801f0ba:	46a2      	mov	sl, r4
 801f0bc:	e7d2      	b.n	801f064 <_svfiprintf_r+0x9c>
 801f0be:	9b03      	ldr	r3, [sp, #12]
 801f0c0:	1d19      	adds	r1, r3, #4
 801f0c2:	681b      	ldr	r3, [r3, #0]
 801f0c4:	9103      	str	r1, [sp, #12]
 801f0c6:	2b00      	cmp	r3, #0
 801f0c8:	bfbb      	ittet	lt
 801f0ca:	425b      	neglt	r3, r3
 801f0cc:	f042 0202 	orrlt.w	r2, r2, #2
 801f0d0:	9307      	strge	r3, [sp, #28]
 801f0d2:	9307      	strlt	r3, [sp, #28]
 801f0d4:	bfb8      	it	lt
 801f0d6:	9204      	strlt	r2, [sp, #16]
 801f0d8:	7823      	ldrb	r3, [r4, #0]
 801f0da:	2b2e      	cmp	r3, #46	; 0x2e
 801f0dc:	d10c      	bne.n	801f0f8 <_svfiprintf_r+0x130>
 801f0de:	7863      	ldrb	r3, [r4, #1]
 801f0e0:	2b2a      	cmp	r3, #42	; 0x2a
 801f0e2:	d134      	bne.n	801f14e <_svfiprintf_r+0x186>
 801f0e4:	9b03      	ldr	r3, [sp, #12]
 801f0e6:	1d1a      	adds	r2, r3, #4
 801f0e8:	681b      	ldr	r3, [r3, #0]
 801f0ea:	9203      	str	r2, [sp, #12]
 801f0ec:	2b00      	cmp	r3, #0
 801f0ee:	bfb8      	it	lt
 801f0f0:	f04f 33ff 	movlt.w	r3, #4294967295
 801f0f4:	3402      	adds	r4, #2
 801f0f6:	9305      	str	r3, [sp, #20]
 801f0f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801f1c0 <_svfiprintf_r+0x1f8>
 801f0fc:	7821      	ldrb	r1, [r4, #0]
 801f0fe:	2203      	movs	r2, #3
 801f100:	4650      	mov	r0, sl
 801f102:	f7e1 f83d 	bl	8000180 <memchr>
 801f106:	b138      	cbz	r0, 801f118 <_svfiprintf_r+0x150>
 801f108:	9b04      	ldr	r3, [sp, #16]
 801f10a:	eba0 000a 	sub.w	r0, r0, sl
 801f10e:	2240      	movs	r2, #64	; 0x40
 801f110:	4082      	lsls	r2, r0
 801f112:	4313      	orrs	r3, r2
 801f114:	3401      	adds	r4, #1
 801f116:	9304      	str	r3, [sp, #16]
 801f118:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f11c:	4825      	ldr	r0, [pc, #148]	; (801f1b4 <_svfiprintf_r+0x1ec>)
 801f11e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f122:	2206      	movs	r2, #6
 801f124:	f7e1 f82c 	bl	8000180 <memchr>
 801f128:	2800      	cmp	r0, #0
 801f12a:	d038      	beq.n	801f19e <_svfiprintf_r+0x1d6>
 801f12c:	4b22      	ldr	r3, [pc, #136]	; (801f1b8 <_svfiprintf_r+0x1f0>)
 801f12e:	bb1b      	cbnz	r3, 801f178 <_svfiprintf_r+0x1b0>
 801f130:	9b03      	ldr	r3, [sp, #12]
 801f132:	3307      	adds	r3, #7
 801f134:	f023 0307 	bic.w	r3, r3, #7
 801f138:	3308      	adds	r3, #8
 801f13a:	9303      	str	r3, [sp, #12]
 801f13c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f13e:	4433      	add	r3, r6
 801f140:	9309      	str	r3, [sp, #36]	; 0x24
 801f142:	e768      	b.n	801f016 <_svfiprintf_r+0x4e>
 801f144:	fb0c 3202 	mla	r2, ip, r2, r3
 801f148:	460c      	mov	r4, r1
 801f14a:	2001      	movs	r0, #1
 801f14c:	e7a6      	b.n	801f09c <_svfiprintf_r+0xd4>
 801f14e:	2300      	movs	r3, #0
 801f150:	3401      	adds	r4, #1
 801f152:	9305      	str	r3, [sp, #20]
 801f154:	4619      	mov	r1, r3
 801f156:	f04f 0c0a 	mov.w	ip, #10
 801f15a:	4620      	mov	r0, r4
 801f15c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f160:	3a30      	subs	r2, #48	; 0x30
 801f162:	2a09      	cmp	r2, #9
 801f164:	d903      	bls.n	801f16e <_svfiprintf_r+0x1a6>
 801f166:	2b00      	cmp	r3, #0
 801f168:	d0c6      	beq.n	801f0f8 <_svfiprintf_r+0x130>
 801f16a:	9105      	str	r1, [sp, #20]
 801f16c:	e7c4      	b.n	801f0f8 <_svfiprintf_r+0x130>
 801f16e:	fb0c 2101 	mla	r1, ip, r1, r2
 801f172:	4604      	mov	r4, r0
 801f174:	2301      	movs	r3, #1
 801f176:	e7f0      	b.n	801f15a <_svfiprintf_r+0x192>
 801f178:	ab03      	add	r3, sp, #12
 801f17a:	9300      	str	r3, [sp, #0]
 801f17c:	462a      	mov	r2, r5
 801f17e:	4b0f      	ldr	r3, [pc, #60]	; (801f1bc <_svfiprintf_r+0x1f4>)
 801f180:	a904      	add	r1, sp, #16
 801f182:	4638      	mov	r0, r7
 801f184:	f7fc ff56 	bl	801c034 <_printf_float>
 801f188:	1c42      	adds	r2, r0, #1
 801f18a:	4606      	mov	r6, r0
 801f18c:	d1d6      	bne.n	801f13c <_svfiprintf_r+0x174>
 801f18e:	89ab      	ldrh	r3, [r5, #12]
 801f190:	065b      	lsls	r3, r3, #25
 801f192:	f53f af2d 	bmi.w	801eff0 <_svfiprintf_r+0x28>
 801f196:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f198:	b01d      	add	sp, #116	; 0x74
 801f19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f19e:	ab03      	add	r3, sp, #12
 801f1a0:	9300      	str	r3, [sp, #0]
 801f1a2:	462a      	mov	r2, r5
 801f1a4:	4b05      	ldr	r3, [pc, #20]	; (801f1bc <_svfiprintf_r+0x1f4>)
 801f1a6:	a904      	add	r1, sp, #16
 801f1a8:	4638      	mov	r0, r7
 801f1aa:	f7fd f9e7 	bl	801c57c <_printf_i>
 801f1ae:	e7eb      	b.n	801f188 <_svfiprintf_r+0x1c0>
 801f1b0:	08023d34 	.word	0x08023d34
 801f1b4:	08023d3e 	.word	0x08023d3e
 801f1b8:	0801c035 	.word	0x0801c035
 801f1bc:	0801ef15 	.word	0x0801ef15
 801f1c0:	08023d3a 	.word	0x08023d3a

0801f1c4 <__sfputc_r>:
 801f1c4:	6893      	ldr	r3, [r2, #8]
 801f1c6:	3b01      	subs	r3, #1
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	b410      	push	{r4}
 801f1cc:	6093      	str	r3, [r2, #8]
 801f1ce:	da08      	bge.n	801f1e2 <__sfputc_r+0x1e>
 801f1d0:	6994      	ldr	r4, [r2, #24]
 801f1d2:	42a3      	cmp	r3, r4
 801f1d4:	db01      	blt.n	801f1da <__sfputc_r+0x16>
 801f1d6:	290a      	cmp	r1, #10
 801f1d8:	d103      	bne.n	801f1e2 <__sfputc_r+0x1e>
 801f1da:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f1de:	f000 b9f5 	b.w	801f5cc <__swbuf_r>
 801f1e2:	6813      	ldr	r3, [r2, #0]
 801f1e4:	1c58      	adds	r0, r3, #1
 801f1e6:	6010      	str	r0, [r2, #0]
 801f1e8:	7019      	strb	r1, [r3, #0]
 801f1ea:	4608      	mov	r0, r1
 801f1ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f1f0:	4770      	bx	lr

0801f1f2 <__sfputs_r>:
 801f1f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1f4:	4606      	mov	r6, r0
 801f1f6:	460f      	mov	r7, r1
 801f1f8:	4614      	mov	r4, r2
 801f1fa:	18d5      	adds	r5, r2, r3
 801f1fc:	42ac      	cmp	r4, r5
 801f1fe:	d101      	bne.n	801f204 <__sfputs_r+0x12>
 801f200:	2000      	movs	r0, #0
 801f202:	e007      	b.n	801f214 <__sfputs_r+0x22>
 801f204:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f208:	463a      	mov	r2, r7
 801f20a:	4630      	mov	r0, r6
 801f20c:	f7ff ffda 	bl	801f1c4 <__sfputc_r>
 801f210:	1c43      	adds	r3, r0, #1
 801f212:	d1f3      	bne.n	801f1fc <__sfputs_r+0xa>
 801f214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f218 <_vfiprintf_r>:
 801f218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f21c:	460d      	mov	r5, r1
 801f21e:	b09d      	sub	sp, #116	; 0x74
 801f220:	4614      	mov	r4, r2
 801f222:	4698      	mov	r8, r3
 801f224:	4606      	mov	r6, r0
 801f226:	b118      	cbz	r0, 801f230 <_vfiprintf_r+0x18>
 801f228:	6a03      	ldr	r3, [r0, #32]
 801f22a:	b90b      	cbnz	r3, 801f230 <_vfiprintf_r+0x18>
 801f22c:	f7fd fd64 	bl	801ccf8 <__sinit>
 801f230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f232:	07d9      	lsls	r1, r3, #31
 801f234:	d405      	bmi.n	801f242 <_vfiprintf_r+0x2a>
 801f236:	89ab      	ldrh	r3, [r5, #12]
 801f238:	059a      	lsls	r2, r3, #22
 801f23a:	d402      	bmi.n	801f242 <_vfiprintf_r+0x2a>
 801f23c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f23e:	f7fd ff3a 	bl	801d0b6 <__retarget_lock_acquire_recursive>
 801f242:	89ab      	ldrh	r3, [r5, #12]
 801f244:	071b      	lsls	r3, r3, #28
 801f246:	d501      	bpl.n	801f24c <_vfiprintf_r+0x34>
 801f248:	692b      	ldr	r3, [r5, #16]
 801f24a:	b99b      	cbnz	r3, 801f274 <_vfiprintf_r+0x5c>
 801f24c:	4629      	mov	r1, r5
 801f24e:	4630      	mov	r0, r6
 801f250:	f000 f9fa 	bl	801f648 <__swsetup_r>
 801f254:	b170      	cbz	r0, 801f274 <_vfiprintf_r+0x5c>
 801f256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f258:	07dc      	lsls	r4, r3, #31
 801f25a:	d504      	bpl.n	801f266 <_vfiprintf_r+0x4e>
 801f25c:	f04f 30ff 	mov.w	r0, #4294967295
 801f260:	b01d      	add	sp, #116	; 0x74
 801f262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f266:	89ab      	ldrh	r3, [r5, #12]
 801f268:	0598      	lsls	r0, r3, #22
 801f26a:	d4f7      	bmi.n	801f25c <_vfiprintf_r+0x44>
 801f26c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f26e:	f7fd ff23 	bl	801d0b8 <__retarget_lock_release_recursive>
 801f272:	e7f3      	b.n	801f25c <_vfiprintf_r+0x44>
 801f274:	2300      	movs	r3, #0
 801f276:	9309      	str	r3, [sp, #36]	; 0x24
 801f278:	2320      	movs	r3, #32
 801f27a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f27e:	f8cd 800c 	str.w	r8, [sp, #12]
 801f282:	2330      	movs	r3, #48	; 0x30
 801f284:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801f438 <_vfiprintf_r+0x220>
 801f288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f28c:	f04f 0901 	mov.w	r9, #1
 801f290:	4623      	mov	r3, r4
 801f292:	469a      	mov	sl, r3
 801f294:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f298:	b10a      	cbz	r2, 801f29e <_vfiprintf_r+0x86>
 801f29a:	2a25      	cmp	r2, #37	; 0x25
 801f29c:	d1f9      	bne.n	801f292 <_vfiprintf_r+0x7a>
 801f29e:	ebba 0b04 	subs.w	fp, sl, r4
 801f2a2:	d00b      	beq.n	801f2bc <_vfiprintf_r+0xa4>
 801f2a4:	465b      	mov	r3, fp
 801f2a6:	4622      	mov	r2, r4
 801f2a8:	4629      	mov	r1, r5
 801f2aa:	4630      	mov	r0, r6
 801f2ac:	f7ff ffa1 	bl	801f1f2 <__sfputs_r>
 801f2b0:	3001      	adds	r0, #1
 801f2b2:	f000 80a9 	beq.w	801f408 <_vfiprintf_r+0x1f0>
 801f2b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f2b8:	445a      	add	r2, fp
 801f2ba:	9209      	str	r2, [sp, #36]	; 0x24
 801f2bc:	f89a 3000 	ldrb.w	r3, [sl]
 801f2c0:	2b00      	cmp	r3, #0
 801f2c2:	f000 80a1 	beq.w	801f408 <_vfiprintf_r+0x1f0>
 801f2c6:	2300      	movs	r3, #0
 801f2c8:	f04f 32ff 	mov.w	r2, #4294967295
 801f2cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f2d0:	f10a 0a01 	add.w	sl, sl, #1
 801f2d4:	9304      	str	r3, [sp, #16]
 801f2d6:	9307      	str	r3, [sp, #28]
 801f2d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f2dc:	931a      	str	r3, [sp, #104]	; 0x68
 801f2de:	4654      	mov	r4, sl
 801f2e0:	2205      	movs	r2, #5
 801f2e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f2e6:	4854      	ldr	r0, [pc, #336]	; (801f438 <_vfiprintf_r+0x220>)
 801f2e8:	f7e0 ff4a 	bl	8000180 <memchr>
 801f2ec:	9a04      	ldr	r2, [sp, #16]
 801f2ee:	b9d8      	cbnz	r0, 801f328 <_vfiprintf_r+0x110>
 801f2f0:	06d1      	lsls	r1, r2, #27
 801f2f2:	bf44      	itt	mi
 801f2f4:	2320      	movmi	r3, #32
 801f2f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f2fa:	0713      	lsls	r3, r2, #28
 801f2fc:	bf44      	itt	mi
 801f2fe:	232b      	movmi	r3, #43	; 0x2b
 801f300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f304:	f89a 3000 	ldrb.w	r3, [sl]
 801f308:	2b2a      	cmp	r3, #42	; 0x2a
 801f30a:	d015      	beq.n	801f338 <_vfiprintf_r+0x120>
 801f30c:	9a07      	ldr	r2, [sp, #28]
 801f30e:	4654      	mov	r4, sl
 801f310:	2000      	movs	r0, #0
 801f312:	f04f 0c0a 	mov.w	ip, #10
 801f316:	4621      	mov	r1, r4
 801f318:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f31c:	3b30      	subs	r3, #48	; 0x30
 801f31e:	2b09      	cmp	r3, #9
 801f320:	d94d      	bls.n	801f3be <_vfiprintf_r+0x1a6>
 801f322:	b1b0      	cbz	r0, 801f352 <_vfiprintf_r+0x13a>
 801f324:	9207      	str	r2, [sp, #28]
 801f326:	e014      	b.n	801f352 <_vfiprintf_r+0x13a>
 801f328:	eba0 0308 	sub.w	r3, r0, r8
 801f32c:	fa09 f303 	lsl.w	r3, r9, r3
 801f330:	4313      	orrs	r3, r2
 801f332:	9304      	str	r3, [sp, #16]
 801f334:	46a2      	mov	sl, r4
 801f336:	e7d2      	b.n	801f2de <_vfiprintf_r+0xc6>
 801f338:	9b03      	ldr	r3, [sp, #12]
 801f33a:	1d19      	adds	r1, r3, #4
 801f33c:	681b      	ldr	r3, [r3, #0]
 801f33e:	9103      	str	r1, [sp, #12]
 801f340:	2b00      	cmp	r3, #0
 801f342:	bfbb      	ittet	lt
 801f344:	425b      	neglt	r3, r3
 801f346:	f042 0202 	orrlt.w	r2, r2, #2
 801f34a:	9307      	strge	r3, [sp, #28]
 801f34c:	9307      	strlt	r3, [sp, #28]
 801f34e:	bfb8      	it	lt
 801f350:	9204      	strlt	r2, [sp, #16]
 801f352:	7823      	ldrb	r3, [r4, #0]
 801f354:	2b2e      	cmp	r3, #46	; 0x2e
 801f356:	d10c      	bne.n	801f372 <_vfiprintf_r+0x15a>
 801f358:	7863      	ldrb	r3, [r4, #1]
 801f35a:	2b2a      	cmp	r3, #42	; 0x2a
 801f35c:	d134      	bne.n	801f3c8 <_vfiprintf_r+0x1b0>
 801f35e:	9b03      	ldr	r3, [sp, #12]
 801f360:	1d1a      	adds	r2, r3, #4
 801f362:	681b      	ldr	r3, [r3, #0]
 801f364:	9203      	str	r2, [sp, #12]
 801f366:	2b00      	cmp	r3, #0
 801f368:	bfb8      	it	lt
 801f36a:	f04f 33ff 	movlt.w	r3, #4294967295
 801f36e:	3402      	adds	r4, #2
 801f370:	9305      	str	r3, [sp, #20]
 801f372:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801f448 <_vfiprintf_r+0x230>
 801f376:	7821      	ldrb	r1, [r4, #0]
 801f378:	2203      	movs	r2, #3
 801f37a:	4650      	mov	r0, sl
 801f37c:	f7e0 ff00 	bl	8000180 <memchr>
 801f380:	b138      	cbz	r0, 801f392 <_vfiprintf_r+0x17a>
 801f382:	9b04      	ldr	r3, [sp, #16]
 801f384:	eba0 000a 	sub.w	r0, r0, sl
 801f388:	2240      	movs	r2, #64	; 0x40
 801f38a:	4082      	lsls	r2, r0
 801f38c:	4313      	orrs	r3, r2
 801f38e:	3401      	adds	r4, #1
 801f390:	9304      	str	r3, [sp, #16]
 801f392:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f396:	4829      	ldr	r0, [pc, #164]	; (801f43c <_vfiprintf_r+0x224>)
 801f398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f39c:	2206      	movs	r2, #6
 801f39e:	f7e0 feef 	bl	8000180 <memchr>
 801f3a2:	2800      	cmp	r0, #0
 801f3a4:	d03f      	beq.n	801f426 <_vfiprintf_r+0x20e>
 801f3a6:	4b26      	ldr	r3, [pc, #152]	; (801f440 <_vfiprintf_r+0x228>)
 801f3a8:	bb1b      	cbnz	r3, 801f3f2 <_vfiprintf_r+0x1da>
 801f3aa:	9b03      	ldr	r3, [sp, #12]
 801f3ac:	3307      	adds	r3, #7
 801f3ae:	f023 0307 	bic.w	r3, r3, #7
 801f3b2:	3308      	adds	r3, #8
 801f3b4:	9303      	str	r3, [sp, #12]
 801f3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3b8:	443b      	add	r3, r7
 801f3ba:	9309      	str	r3, [sp, #36]	; 0x24
 801f3bc:	e768      	b.n	801f290 <_vfiprintf_r+0x78>
 801f3be:	fb0c 3202 	mla	r2, ip, r2, r3
 801f3c2:	460c      	mov	r4, r1
 801f3c4:	2001      	movs	r0, #1
 801f3c6:	e7a6      	b.n	801f316 <_vfiprintf_r+0xfe>
 801f3c8:	2300      	movs	r3, #0
 801f3ca:	3401      	adds	r4, #1
 801f3cc:	9305      	str	r3, [sp, #20]
 801f3ce:	4619      	mov	r1, r3
 801f3d0:	f04f 0c0a 	mov.w	ip, #10
 801f3d4:	4620      	mov	r0, r4
 801f3d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f3da:	3a30      	subs	r2, #48	; 0x30
 801f3dc:	2a09      	cmp	r2, #9
 801f3de:	d903      	bls.n	801f3e8 <_vfiprintf_r+0x1d0>
 801f3e0:	2b00      	cmp	r3, #0
 801f3e2:	d0c6      	beq.n	801f372 <_vfiprintf_r+0x15a>
 801f3e4:	9105      	str	r1, [sp, #20]
 801f3e6:	e7c4      	b.n	801f372 <_vfiprintf_r+0x15a>
 801f3e8:	fb0c 2101 	mla	r1, ip, r1, r2
 801f3ec:	4604      	mov	r4, r0
 801f3ee:	2301      	movs	r3, #1
 801f3f0:	e7f0      	b.n	801f3d4 <_vfiprintf_r+0x1bc>
 801f3f2:	ab03      	add	r3, sp, #12
 801f3f4:	9300      	str	r3, [sp, #0]
 801f3f6:	462a      	mov	r2, r5
 801f3f8:	4b12      	ldr	r3, [pc, #72]	; (801f444 <_vfiprintf_r+0x22c>)
 801f3fa:	a904      	add	r1, sp, #16
 801f3fc:	4630      	mov	r0, r6
 801f3fe:	f7fc fe19 	bl	801c034 <_printf_float>
 801f402:	4607      	mov	r7, r0
 801f404:	1c78      	adds	r0, r7, #1
 801f406:	d1d6      	bne.n	801f3b6 <_vfiprintf_r+0x19e>
 801f408:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f40a:	07d9      	lsls	r1, r3, #31
 801f40c:	d405      	bmi.n	801f41a <_vfiprintf_r+0x202>
 801f40e:	89ab      	ldrh	r3, [r5, #12]
 801f410:	059a      	lsls	r2, r3, #22
 801f412:	d402      	bmi.n	801f41a <_vfiprintf_r+0x202>
 801f414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f416:	f7fd fe4f 	bl	801d0b8 <__retarget_lock_release_recursive>
 801f41a:	89ab      	ldrh	r3, [r5, #12]
 801f41c:	065b      	lsls	r3, r3, #25
 801f41e:	f53f af1d 	bmi.w	801f25c <_vfiprintf_r+0x44>
 801f422:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f424:	e71c      	b.n	801f260 <_vfiprintf_r+0x48>
 801f426:	ab03      	add	r3, sp, #12
 801f428:	9300      	str	r3, [sp, #0]
 801f42a:	462a      	mov	r2, r5
 801f42c:	4b05      	ldr	r3, [pc, #20]	; (801f444 <_vfiprintf_r+0x22c>)
 801f42e:	a904      	add	r1, sp, #16
 801f430:	4630      	mov	r0, r6
 801f432:	f7fd f8a3 	bl	801c57c <_printf_i>
 801f436:	e7e4      	b.n	801f402 <_vfiprintf_r+0x1ea>
 801f438:	08023d34 	.word	0x08023d34
 801f43c:	08023d3e 	.word	0x08023d3e
 801f440:	0801c035 	.word	0x0801c035
 801f444:	0801f1f3 	.word	0x0801f1f3
 801f448:	08023d3a 	.word	0x08023d3a

0801f44c <__sflush_r>:
 801f44c:	898a      	ldrh	r2, [r1, #12]
 801f44e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f452:	4605      	mov	r5, r0
 801f454:	0710      	lsls	r0, r2, #28
 801f456:	460c      	mov	r4, r1
 801f458:	d458      	bmi.n	801f50c <__sflush_r+0xc0>
 801f45a:	684b      	ldr	r3, [r1, #4]
 801f45c:	2b00      	cmp	r3, #0
 801f45e:	dc05      	bgt.n	801f46c <__sflush_r+0x20>
 801f460:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f462:	2b00      	cmp	r3, #0
 801f464:	dc02      	bgt.n	801f46c <__sflush_r+0x20>
 801f466:	2000      	movs	r0, #0
 801f468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f46c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f46e:	2e00      	cmp	r6, #0
 801f470:	d0f9      	beq.n	801f466 <__sflush_r+0x1a>
 801f472:	2300      	movs	r3, #0
 801f474:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f478:	682f      	ldr	r7, [r5, #0]
 801f47a:	6a21      	ldr	r1, [r4, #32]
 801f47c:	602b      	str	r3, [r5, #0]
 801f47e:	d032      	beq.n	801f4e6 <__sflush_r+0x9a>
 801f480:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f482:	89a3      	ldrh	r3, [r4, #12]
 801f484:	075a      	lsls	r2, r3, #29
 801f486:	d505      	bpl.n	801f494 <__sflush_r+0x48>
 801f488:	6863      	ldr	r3, [r4, #4]
 801f48a:	1ac0      	subs	r0, r0, r3
 801f48c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f48e:	b10b      	cbz	r3, 801f494 <__sflush_r+0x48>
 801f490:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f492:	1ac0      	subs	r0, r0, r3
 801f494:	2300      	movs	r3, #0
 801f496:	4602      	mov	r2, r0
 801f498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f49a:	6a21      	ldr	r1, [r4, #32]
 801f49c:	4628      	mov	r0, r5
 801f49e:	47b0      	blx	r6
 801f4a0:	1c43      	adds	r3, r0, #1
 801f4a2:	89a3      	ldrh	r3, [r4, #12]
 801f4a4:	d106      	bne.n	801f4b4 <__sflush_r+0x68>
 801f4a6:	6829      	ldr	r1, [r5, #0]
 801f4a8:	291d      	cmp	r1, #29
 801f4aa:	d82b      	bhi.n	801f504 <__sflush_r+0xb8>
 801f4ac:	4a29      	ldr	r2, [pc, #164]	; (801f554 <__sflush_r+0x108>)
 801f4ae:	410a      	asrs	r2, r1
 801f4b0:	07d6      	lsls	r6, r2, #31
 801f4b2:	d427      	bmi.n	801f504 <__sflush_r+0xb8>
 801f4b4:	2200      	movs	r2, #0
 801f4b6:	6062      	str	r2, [r4, #4]
 801f4b8:	04d9      	lsls	r1, r3, #19
 801f4ba:	6922      	ldr	r2, [r4, #16]
 801f4bc:	6022      	str	r2, [r4, #0]
 801f4be:	d504      	bpl.n	801f4ca <__sflush_r+0x7e>
 801f4c0:	1c42      	adds	r2, r0, #1
 801f4c2:	d101      	bne.n	801f4c8 <__sflush_r+0x7c>
 801f4c4:	682b      	ldr	r3, [r5, #0]
 801f4c6:	b903      	cbnz	r3, 801f4ca <__sflush_r+0x7e>
 801f4c8:	6560      	str	r0, [r4, #84]	; 0x54
 801f4ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f4cc:	602f      	str	r7, [r5, #0]
 801f4ce:	2900      	cmp	r1, #0
 801f4d0:	d0c9      	beq.n	801f466 <__sflush_r+0x1a>
 801f4d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f4d6:	4299      	cmp	r1, r3
 801f4d8:	d002      	beq.n	801f4e0 <__sflush_r+0x94>
 801f4da:	4628      	mov	r0, r5
 801f4dc:	f7fe fcaa 	bl	801de34 <_free_r>
 801f4e0:	2000      	movs	r0, #0
 801f4e2:	6360      	str	r0, [r4, #52]	; 0x34
 801f4e4:	e7c0      	b.n	801f468 <__sflush_r+0x1c>
 801f4e6:	2301      	movs	r3, #1
 801f4e8:	4628      	mov	r0, r5
 801f4ea:	47b0      	blx	r6
 801f4ec:	1c41      	adds	r1, r0, #1
 801f4ee:	d1c8      	bne.n	801f482 <__sflush_r+0x36>
 801f4f0:	682b      	ldr	r3, [r5, #0]
 801f4f2:	2b00      	cmp	r3, #0
 801f4f4:	d0c5      	beq.n	801f482 <__sflush_r+0x36>
 801f4f6:	2b1d      	cmp	r3, #29
 801f4f8:	d001      	beq.n	801f4fe <__sflush_r+0xb2>
 801f4fa:	2b16      	cmp	r3, #22
 801f4fc:	d101      	bne.n	801f502 <__sflush_r+0xb6>
 801f4fe:	602f      	str	r7, [r5, #0]
 801f500:	e7b1      	b.n	801f466 <__sflush_r+0x1a>
 801f502:	89a3      	ldrh	r3, [r4, #12]
 801f504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f508:	81a3      	strh	r3, [r4, #12]
 801f50a:	e7ad      	b.n	801f468 <__sflush_r+0x1c>
 801f50c:	690f      	ldr	r7, [r1, #16]
 801f50e:	2f00      	cmp	r7, #0
 801f510:	d0a9      	beq.n	801f466 <__sflush_r+0x1a>
 801f512:	0793      	lsls	r3, r2, #30
 801f514:	680e      	ldr	r6, [r1, #0]
 801f516:	bf08      	it	eq
 801f518:	694b      	ldreq	r3, [r1, #20]
 801f51a:	600f      	str	r7, [r1, #0]
 801f51c:	bf18      	it	ne
 801f51e:	2300      	movne	r3, #0
 801f520:	eba6 0807 	sub.w	r8, r6, r7
 801f524:	608b      	str	r3, [r1, #8]
 801f526:	f1b8 0f00 	cmp.w	r8, #0
 801f52a:	dd9c      	ble.n	801f466 <__sflush_r+0x1a>
 801f52c:	6a21      	ldr	r1, [r4, #32]
 801f52e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f530:	4643      	mov	r3, r8
 801f532:	463a      	mov	r2, r7
 801f534:	4628      	mov	r0, r5
 801f536:	47b0      	blx	r6
 801f538:	2800      	cmp	r0, #0
 801f53a:	dc06      	bgt.n	801f54a <__sflush_r+0xfe>
 801f53c:	89a3      	ldrh	r3, [r4, #12]
 801f53e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f542:	81a3      	strh	r3, [r4, #12]
 801f544:	f04f 30ff 	mov.w	r0, #4294967295
 801f548:	e78e      	b.n	801f468 <__sflush_r+0x1c>
 801f54a:	4407      	add	r7, r0
 801f54c:	eba8 0800 	sub.w	r8, r8, r0
 801f550:	e7e9      	b.n	801f526 <__sflush_r+0xda>
 801f552:	bf00      	nop
 801f554:	dfbffffe 	.word	0xdfbffffe

0801f558 <_fflush_r>:
 801f558:	b538      	push	{r3, r4, r5, lr}
 801f55a:	690b      	ldr	r3, [r1, #16]
 801f55c:	4605      	mov	r5, r0
 801f55e:	460c      	mov	r4, r1
 801f560:	b913      	cbnz	r3, 801f568 <_fflush_r+0x10>
 801f562:	2500      	movs	r5, #0
 801f564:	4628      	mov	r0, r5
 801f566:	bd38      	pop	{r3, r4, r5, pc}
 801f568:	b118      	cbz	r0, 801f572 <_fflush_r+0x1a>
 801f56a:	6a03      	ldr	r3, [r0, #32]
 801f56c:	b90b      	cbnz	r3, 801f572 <_fflush_r+0x1a>
 801f56e:	f7fd fbc3 	bl	801ccf8 <__sinit>
 801f572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f576:	2b00      	cmp	r3, #0
 801f578:	d0f3      	beq.n	801f562 <_fflush_r+0xa>
 801f57a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f57c:	07d0      	lsls	r0, r2, #31
 801f57e:	d404      	bmi.n	801f58a <_fflush_r+0x32>
 801f580:	0599      	lsls	r1, r3, #22
 801f582:	d402      	bmi.n	801f58a <_fflush_r+0x32>
 801f584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f586:	f7fd fd96 	bl	801d0b6 <__retarget_lock_acquire_recursive>
 801f58a:	4628      	mov	r0, r5
 801f58c:	4621      	mov	r1, r4
 801f58e:	f7ff ff5d 	bl	801f44c <__sflush_r>
 801f592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f594:	07da      	lsls	r2, r3, #31
 801f596:	4605      	mov	r5, r0
 801f598:	d4e4      	bmi.n	801f564 <_fflush_r+0xc>
 801f59a:	89a3      	ldrh	r3, [r4, #12]
 801f59c:	059b      	lsls	r3, r3, #22
 801f59e:	d4e1      	bmi.n	801f564 <_fflush_r+0xc>
 801f5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f5a2:	f7fd fd89 	bl	801d0b8 <__retarget_lock_release_recursive>
 801f5a6:	e7dd      	b.n	801f564 <_fflush_r+0xc>

0801f5a8 <fiprintf>:
 801f5a8:	b40e      	push	{r1, r2, r3}
 801f5aa:	b503      	push	{r0, r1, lr}
 801f5ac:	4601      	mov	r1, r0
 801f5ae:	ab03      	add	r3, sp, #12
 801f5b0:	4805      	ldr	r0, [pc, #20]	; (801f5c8 <fiprintf+0x20>)
 801f5b2:	f853 2b04 	ldr.w	r2, [r3], #4
 801f5b6:	6800      	ldr	r0, [r0, #0]
 801f5b8:	9301      	str	r3, [sp, #4]
 801f5ba:	f7ff fe2d 	bl	801f218 <_vfiprintf_r>
 801f5be:	b002      	add	sp, #8
 801f5c0:	f85d eb04 	ldr.w	lr, [sp], #4
 801f5c4:	b003      	add	sp, #12
 801f5c6:	4770      	bx	lr
 801f5c8:	20000308 	.word	0x20000308

0801f5cc <__swbuf_r>:
 801f5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f5ce:	460e      	mov	r6, r1
 801f5d0:	4614      	mov	r4, r2
 801f5d2:	4605      	mov	r5, r0
 801f5d4:	b118      	cbz	r0, 801f5de <__swbuf_r+0x12>
 801f5d6:	6a03      	ldr	r3, [r0, #32]
 801f5d8:	b90b      	cbnz	r3, 801f5de <__swbuf_r+0x12>
 801f5da:	f7fd fb8d 	bl	801ccf8 <__sinit>
 801f5de:	69a3      	ldr	r3, [r4, #24]
 801f5e0:	60a3      	str	r3, [r4, #8]
 801f5e2:	89a3      	ldrh	r3, [r4, #12]
 801f5e4:	071a      	lsls	r2, r3, #28
 801f5e6:	d525      	bpl.n	801f634 <__swbuf_r+0x68>
 801f5e8:	6923      	ldr	r3, [r4, #16]
 801f5ea:	b31b      	cbz	r3, 801f634 <__swbuf_r+0x68>
 801f5ec:	6823      	ldr	r3, [r4, #0]
 801f5ee:	6922      	ldr	r2, [r4, #16]
 801f5f0:	1a98      	subs	r0, r3, r2
 801f5f2:	6963      	ldr	r3, [r4, #20]
 801f5f4:	b2f6      	uxtb	r6, r6
 801f5f6:	4283      	cmp	r3, r0
 801f5f8:	4637      	mov	r7, r6
 801f5fa:	dc04      	bgt.n	801f606 <__swbuf_r+0x3a>
 801f5fc:	4621      	mov	r1, r4
 801f5fe:	4628      	mov	r0, r5
 801f600:	f7ff ffaa 	bl	801f558 <_fflush_r>
 801f604:	b9e0      	cbnz	r0, 801f640 <__swbuf_r+0x74>
 801f606:	68a3      	ldr	r3, [r4, #8]
 801f608:	3b01      	subs	r3, #1
 801f60a:	60a3      	str	r3, [r4, #8]
 801f60c:	6823      	ldr	r3, [r4, #0]
 801f60e:	1c5a      	adds	r2, r3, #1
 801f610:	6022      	str	r2, [r4, #0]
 801f612:	701e      	strb	r6, [r3, #0]
 801f614:	6962      	ldr	r2, [r4, #20]
 801f616:	1c43      	adds	r3, r0, #1
 801f618:	429a      	cmp	r2, r3
 801f61a:	d004      	beq.n	801f626 <__swbuf_r+0x5a>
 801f61c:	89a3      	ldrh	r3, [r4, #12]
 801f61e:	07db      	lsls	r3, r3, #31
 801f620:	d506      	bpl.n	801f630 <__swbuf_r+0x64>
 801f622:	2e0a      	cmp	r6, #10
 801f624:	d104      	bne.n	801f630 <__swbuf_r+0x64>
 801f626:	4621      	mov	r1, r4
 801f628:	4628      	mov	r0, r5
 801f62a:	f7ff ff95 	bl	801f558 <_fflush_r>
 801f62e:	b938      	cbnz	r0, 801f640 <__swbuf_r+0x74>
 801f630:	4638      	mov	r0, r7
 801f632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f634:	4621      	mov	r1, r4
 801f636:	4628      	mov	r0, r5
 801f638:	f000 f806 	bl	801f648 <__swsetup_r>
 801f63c:	2800      	cmp	r0, #0
 801f63e:	d0d5      	beq.n	801f5ec <__swbuf_r+0x20>
 801f640:	f04f 37ff 	mov.w	r7, #4294967295
 801f644:	e7f4      	b.n	801f630 <__swbuf_r+0x64>
	...

0801f648 <__swsetup_r>:
 801f648:	b538      	push	{r3, r4, r5, lr}
 801f64a:	4b2a      	ldr	r3, [pc, #168]	; (801f6f4 <__swsetup_r+0xac>)
 801f64c:	4605      	mov	r5, r0
 801f64e:	6818      	ldr	r0, [r3, #0]
 801f650:	460c      	mov	r4, r1
 801f652:	b118      	cbz	r0, 801f65c <__swsetup_r+0x14>
 801f654:	6a03      	ldr	r3, [r0, #32]
 801f656:	b90b      	cbnz	r3, 801f65c <__swsetup_r+0x14>
 801f658:	f7fd fb4e 	bl	801ccf8 <__sinit>
 801f65c:	89a3      	ldrh	r3, [r4, #12]
 801f65e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f662:	0718      	lsls	r0, r3, #28
 801f664:	d422      	bmi.n	801f6ac <__swsetup_r+0x64>
 801f666:	06d9      	lsls	r1, r3, #27
 801f668:	d407      	bmi.n	801f67a <__swsetup_r+0x32>
 801f66a:	2309      	movs	r3, #9
 801f66c:	602b      	str	r3, [r5, #0]
 801f66e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f672:	81a3      	strh	r3, [r4, #12]
 801f674:	f04f 30ff 	mov.w	r0, #4294967295
 801f678:	e034      	b.n	801f6e4 <__swsetup_r+0x9c>
 801f67a:	0758      	lsls	r0, r3, #29
 801f67c:	d512      	bpl.n	801f6a4 <__swsetup_r+0x5c>
 801f67e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f680:	b141      	cbz	r1, 801f694 <__swsetup_r+0x4c>
 801f682:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f686:	4299      	cmp	r1, r3
 801f688:	d002      	beq.n	801f690 <__swsetup_r+0x48>
 801f68a:	4628      	mov	r0, r5
 801f68c:	f7fe fbd2 	bl	801de34 <_free_r>
 801f690:	2300      	movs	r3, #0
 801f692:	6363      	str	r3, [r4, #52]	; 0x34
 801f694:	89a3      	ldrh	r3, [r4, #12]
 801f696:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f69a:	81a3      	strh	r3, [r4, #12]
 801f69c:	2300      	movs	r3, #0
 801f69e:	6063      	str	r3, [r4, #4]
 801f6a0:	6923      	ldr	r3, [r4, #16]
 801f6a2:	6023      	str	r3, [r4, #0]
 801f6a4:	89a3      	ldrh	r3, [r4, #12]
 801f6a6:	f043 0308 	orr.w	r3, r3, #8
 801f6aa:	81a3      	strh	r3, [r4, #12]
 801f6ac:	6923      	ldr	r3, [r4, #16]
 801f6ae:	b94b      	cbnz	r3, 801f6c4 <__swsetup_r+0x7c>
 801f6b0:	89a3      	ldrh	r3, [r4, #12]
 801f6b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f6b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f6ba:	d003      	beq.n	801f6c4 <__swsetup_r+0x7c>
 801f6bc:	4621      	mov	r1, r4
 801f6be:	4628      	mov	r0, r5
 801f6c0:	f000 f8a6 	bl	801f810 <__smakebuf_r>
 801f6c4:	89a0      	ldrh	r0, [r4, #12]
 801f6c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f6ca:	f010 0301 	ands.w	r3, r0, #1
 801f6ce:	d00a      	beq.n	801f6e6 <__swsetup_r+0x9e>
 801f6d0:	2300      	movs	r3, #0
 801f6d2:	60a3      	str	r3, [r4, #8]
 801f6d4:	6963      	ldr	r3, [r4, #20]
 801f6d6:	425b      	negs	r3, r3
 801f6d8:	61a3      	str	r3, [r4, #24]
 801f6da:	6923      	ldr	r3, [r4, #16]
 801f6dc:	b943      	cbnz	r3, 801f6f0 <__swsetup_r+0xa8>
 801f6de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f6e2:	d1c4      	bne.n	801f66e <__swsetup_r+0x26>
 801f6e4:	bd38      	pop	{r3, r4, r5, pc}
 801f6e6:	0781      	lsls	r1, r0, #30
 801f6e8:	bf58      	it	pl
 801f6ea:	6963      	ldrpl	r3, [r4, #20]
 801f6ec:	60a3      	str	r3, [r4, #8]
 801f6ee:	e7f4      	b.n	801f6da <__swsetup_r+0x92>
 801f6f0:	2000      	movs	r0, #0
 801f6f2:	e7f7      	b.n	801f6e4 <__swsetup_r+0x9c>
 801f6f4:	20000308 	.word	0x20000308

0801f6f8 <memmove>:
 801f6f8:	4288      	cmp	r0, r1
 801f6fa:	b510      	push	{r4, lr}
 801f6fc:	eb01 0402 	add.w	r4, r1, r2
 801f700:	d902      	bls.n	801f708 <memmove+0x10>
 801f702:	4284      	cmp	r4, r0
 801f704:	4623      	mov	r3, r4
 801f706:	d807      	bhi.n	801f718 <memmove+0x20>
 801f708:	1e43      	subs	r3, r0, #1
 801f70a:	42a1      	cmp	r1, r4
 801f70c:	d008      	beq.n	801f720 <memmove+0x28>
 801f70e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f712:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f716:	e7f8      	b.n	801f70a <memmove+0x12>
 801f718:	4402      	add	r2, r0
 801f71a:	4601      	mov	r1, r0
 801f71c:	428a      	cmp	r2, r1
 801f71e:	d100      	bne.n	801f722 <memmove+0x2a>
 801f720:	bd10      	pop	{r4, pc}
 801f722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f72a:	e7f7      	b.n	801f71c <memmove+0x24>

0801f72c <abort>:
 801f72c:	b508      	push	{r3, lr}
 801f72e:	2006      	movs	r0, #6
 801f730:	f000 f8d2 	bl	801f8d8 <raise>
 801f734:	2001      	movs	r0, #1
 801f736:	f7e7 feab 	bl	8007490 <_exit>

0801f73a <_calloc_r>:
 801f73a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f73c:	fba1 2402 	umull	r2, r4, r1, r2
 801f740:	b94c      	cbnz	r4, 801f756 <_calloc_r+0x1c>
 801f742:	4611      	mov	r1, r2
 801f744:	9201      	str	r2, [sp, #4]
 801f746:	f7fb fc41 	bl	801afcc <_malloc_r>
 801f74a:	9a01      	ldr	r2, [sp, #4]
 801f74c:	4605      	mov	r5, r0
 801f74e:	b930      	cbnz	r0, 801f75e <_calloc_r+0x24>
 801f750:	4628      	mov	r0, r5
 801f752:	b003      	add	sp, #12
 801f754:	bd30      	pop	{r4, r5, pc}
 801f756:	220c      	movs	r2, #12
 801f758:	6002      	str	r2, [r0, #0]
 801f75a:	2500      	movs	r5, #0
 801f75c:	e7f8      	b.n	801f750 <_calloc_r+0x16>
 801f75e:	4621      	mov	r1, r4
 801f760:	f7fd fb97 	bl	801ce92 <memset>
 801f764:	e7f4      	b.n	801f750 <_calloc_r+0x16>

0801f766 <_realloc_r>:
 801f766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f76a:	4680      	mov	r8, r0
 801f76c:	4614      	mov	r4, r2
 801f76e:	460e      	mov	r6, r1
 801f770:	b921      	cbnz	r1, 801f77c <_realloc_r+0x16>
 801f772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f776:	4611      	mov	r1, r2
 801f778:	f7fb bc28 	b.w	801afcc <_malloc_r>
 801f77c:	b92a      	cbnz	r2, 801f78a <_realloc_r+0x24>
 801f77e:	f7fe fb59 	bl	801de34 <_free_r>
 801f782:	4625      	mov	r5, r4
 801f784:	4628      	mov	r0, r5
 801f786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f78a:	f000 f8e3 	bl	801f954 <_malloc_usable_size_r>
 801f78e:	4284      	cmp	r4, r0
 801f790:	4607      	mov	r7, r0
 801f792:	d802      	bhi.n	801f79a <_realloc_r+0x34>
 801f794:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f798:	d812      	bhi.n	801f7c0 <_realloc_r+0x5a>
 801f79a:	4621      	mov	r1, r4
 801f79c:	4640      	mov	r0, r8
 801f79e:	f7fb fc15 	bl	801afcc <_malloc_r>
 801f7a2:	4605      	mov	r5, r0
 801f7a4:	2800      	cmp	r0, #0
 801f7a6:	d0ed      	beq.n	801f784 <_realloc_r+0x1e>
 801f7a8:	42bc      	cmp	r4, r7
 801f7aa:	4622      	mov	r2, r4
 801f7ac:	4631      	mov	r1, r6
 801f7ae:	bf28      	it	cs
 801f7b0:	463a      	movcs	r2, r7
 801f7b2:	f7fd fc8a 	bl	801d0ca <memcpy>
 801f7b6:	4631      	mov	r1, r6
 801f7b8:	4640      	mov	r0, r8
 801f7ba:	f7fe fb3b 	bl	801de34 <_free_r>
 801f7be:	e7e1      	b.n	801f784 <_realloc_r+0x1e>
 801f7c0:	4635      	mov	r5, r6
 801f7c2:	e7df      	b.n	801f784 <_realloc_r+0x1e>

0801f7c4 <__swhatbuf_r>:
 801f7c4:	b570      	push	{r4, r5, r6, lr}
 801f7c6:	460c      	mov	r4, r1
 801f7c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f7cc:	2900      	cmp	r1, #0
 801f7ce:	b096      	sub	sp, #88	; 0x58
 801f7d0:	4615      	mov	r5, r2
 801f7d2:	461e      	mov	r6, r3
 801f7d4:	da0d      	bge.n	801f7f2 <__swhatbuf_r+0x2e>
 801f7d6:	89a3      	ldrh	r3, [r4, #12]
 801f7d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 801f7dc:	f04f 0100 	mov.w	r1, #0
 801f7e0:	bf0c      	ite	eq
 801f7e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801f7e6:	2340      	movne	r3, #64	; 0x40
 801f7e8:	2000      	movs	r0, #0
 801f7ea:	6031      	str	r1, [r6, #0]
 801f7ec:	602b      	str	r3, [r5, #0]
 801f7ee:	b016      	add	sp, #88	; 0x58
 801f7f0:	bd70      	pop	{r4, r5, r6, pc}
 801f7f2:	466a      	mov	r2, sp
 801f7f4:	f000 f878 	bl	801f8e8 <_fstat_r>
 801f7f8:	2800      	cmp	r0, #0
 801f7fa:	dbec      	blt.n	801f7d6 <__swhatbuf_r+0x12>
 801f7fc:	9901      	ldr	r1, [sp, #4]
 801f7fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801f802:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801f806:	4259      	negs	r1, r3
 801f808:	4159      	adcs	r1, r3
 801f80a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f80e:	e7eb      	b.n	801f7e8 <__swhatbuf_r+0x24>

0801f810 <__smakebuf_r>:
 801f810:	898b      	ldrh	r3, [r1, #12]
 801f812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f814:	079d      	lsls	r5, r3, #30
 801f816:	4606      	mov	r6, r0
 801f818:	460c      	mov	r4, r1
 801f81a:	d507      	bpl.n	801f82c <__smakebuf_r+0x1c>
 801f81c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f820:	6023      	str	r3, [r4, #0]
 801f822:	6123      	str	r3, [r4, #16]
 801f824:	2301      	movs	r3, #1
 801f826:	6163      	str	r3, [r4, #20]
 801f828:	b002      	add	sp, #8
 801f82a:	bd70      	pop	{r4, r5, r6, pc}
 801f82c:	ab01      	add	r3, sp, #4
 801f82e:	466a      	mov	r2, sp
 801f830:	f7ff ffc8 	bl	801f7c4 <__swhatbuf_r>
 801f834:	9900      	ldr	r1, [sp, #0]
 801f836:	4605      	mov	r5, r0
 801f838:	4630      	mov	r0, r6
 801f83a:	f7fb fbc7 	bl	801afcc <_malloc_r>
 801f83e:	b948      	cbnz	r0, 801f854 <__smakebuf_r+0x44>
 801f840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f844:	059a      	lsls	r2, r3, #22
 801f846:	d4ef      	bmi.n	801f828 <__smakebuf_r+0x18>
 801f848:	f023 0303 	bic.w	r3, r3, #3
 801f84c:	f043 0302 	orr.w	r3, r3, #2
 801f850:	81a3      	strh	r3, [r4, #12]
 801f852:	e7e3      	b.n	801f81c <__smakebuf_r+0xc>
 801f854:	89a3      	ldrh	r3, [r4, #12]
 801f856:	6020      	str	r0, [r4, #0]
 801f858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f85c:	81a3      	strh	r3, [r4, #12]
 801f85e:	9b00      	ldr	r3, [sp, #0]
 801f860:	6163      	str	r3, [r4, #20]
 801f862:	9b01      	ldr	r3, [sp, #4]
 801f864:	6120      	str	r0, [r4, #16]
 801f866:	b15b      	cbz	r3, 801f880 <__smakebuf_r+0x70>
 801f868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f86c:	4630      	mov	r0, r6
 801f86e:	f000 f84d 	bl	801f90c <_isatty_r>
 801f872:	b128      	cbz	r0, 801f880 <__smakebuf_r+0x70>
 801f874:	89a3      	ldrh	r3, [r4, #12]
 801f876:	f023 0303 	bic.w	r3, r3, #3
 801f87a:	f043 0301 	orr.w	r3, r3, #1
 801f87e:	81a3      	strh	r3, [r4, #12]
 801f880:	89a3      	ldrh	r3, [r4, #12]
 801f882:	431d      	orrs	r5, r3
 801f884:	81a5      	strh	r5, [r4, #12]
 801f886:	e7cf      	b.n	801f828 <__smakebuf_r+0x18>

0801f888 <_raise_r>:
 801f888:	291f      	cmp	r1, #31
 801f88a:	b538      	push	{r3, r4, r5, lr}
 801f88c:	4604      	mov	r4, r0
 801f88e:	460d      	mov	r5, r1
 801f890:	d904      	bls.n	801f89c <_raise_r+0x14>
 801f892:	2316      	movs	r3, #22
 801f894:	6003      	str	r3, [r0, #0]
 801f896:	f04f 30ff 	mov.w	r0, #4294967295
 801f89a:	bd38      	pop	{r3, r4, r5, pc}
 801f89c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801f89e:	b112      	cbz	r2, 801f8a6 <_raise_r+0x1e>
 801f8a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f8a4:	b94b      	cbnz	r3, 801f8ba <_raise_r+0x32>
 801f8a6:	4620      	mov	r0, r4
 801f8a8:	f000 f852 	bl	801f950 <_getpid_r>
 801f8ac:	462a      	mov	r2, r5
 801f8ae:	4601      	mov	r1, r0
 801f8b0:	4620      	mov	r0, r4
 801f8b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f8b6:	f000 b839 	b.w	801f92c <_kill_r>
 801f8ba:	2b01      	cmp	r3, #1
 801f8bc:	d00a      	beq.n	801f8d4 <_raise_r+0x4c>
 801f8be:	1c59      	adds	r1, r3, #1
 801f8c0:	d103      	bne.n	801f8ca <_raise_r+0x42>
 801f8c2:	2316      	movs	r3, #22
 801f8c4:	6003      	str	r3, [r0, #0]
 801f8c6:	2001      	movs	r0, #1
 801f8c8:	e7e7      	b.n	801f89a <_raise_r+0x12>
 801f8ca:	2400      	movs	r4, #0
 801f8cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f8d0:	4628      	mov	r0, r5
 801f8d2:	4798      	blx	r3
 801f8d4:	2000      	movs	r0, #0
 801f8d6:	e7e0      	b.n	801f89a <_raise_r+0x12>

0801f8d8 <raise>:
 801f8d8:	4b02      	ldr	r3, [pc, #8]	; (801f8e4 <raise+0xc>)
 801f8da:	4601      	mov	r1, r0
 801f8dc:	6818      	ldr	r0, [r3, #0]
 801f8de:	f7ff bfd3 	b.w	801f888 <_raise_r>
 801f8e2:	bf00      	nop
 801f8e4:	20000308 	.word	0x20000308

0801f8e8 <_fstat_r>:
 801f8e8:	b538      	push	{r3, r4, r5, lr}
 801f8ea:	4d07      	ldr	r5, [pc, #28]	; (801f908 <_fstat_r+0x20>)
 801f8ec:	2300      	movs	r3, #0
 801f8ee:	4604      	mov	r4, r0
 801f8f0:	4608      	mov	r0, r1
 801f8f2:	4611      	mov	r1, r2
 801f8f4:	602b      	str	r3, [r5, #0]
 801f8f6:	f7e7 fe1a 	bl	800752e <_fstat>
 801f8fa:	1c43      	adds	r3, r0, #1
 801f8fc:	d102      	bne.n	801f904 <_fstat_r+0x1c>
 801f8fe:	682b      	ldr	r3, [r5, #0]
 801f900:	b103      	cbz	r3, 801f904 <_fstat_r+0x1c>
 801f902:	6023      	str	r3, [r4, #0]
 801f904:	bd38      	pop	{r3, r4, r5, pc}
 801f906:	bf00      	nop
 801f908:	20003228 	.word	0x20003228

0801f90c <_isatty_r>:
 801f90c:	b538      	push	{r3, r4, r5, lr}
 801f90e:	4d06      	ldr	r5, [pc, #24]	; (801f928 <_isatty_r+0x1c>)
 801f910:	2300      	movs	r3, #0
 801f912:	4604      	mov	r4, r0
 801f914:	4608      	mov	r0, r1
 801f916:	602b      	str	r3, [r5, #0]
 801f918:	f7e7 fe19 	bl	800754e <_isatty>
 801f91c:	1c43      	adds	r3, r0, #1
 801f91e:	d102      	bne.n	801f926 <_isatty_r+0x1a>
 801f920:	682b      	ldr	r3, [r5, #0]
 801f922:	b103      	cbz	r3, 801f926 <_isatty_r+0x1a>
 801f924:	6023      	str	r3, [r4, #0]
 801f926:	bd38      	pop	{r3, r4, r5, pc}
 801f928:	20003228 	.word	0x20003228

0801f92c <_kill_r>:
 801f92c:	b538      	push	{r3, r4, r5, lr}
 801f92e:	4d07      	ldr	r5, [pc, #28]	; (801f94c <_kill_r+0x20>)
 801f930:	2300      	movs	r3, #0
 801f932:	4604      	mov	r4, r0
 801f934:	4608      	mov	r0, r1
 801f936:	4611      	mov	r1, r2
 801f938:	602b      	str	r3, [r5, #0]
 801f93a:	f7e7 fd99 	bl	8007470 <_kill>
 801f93e:	1c43      	adds	r3, r0, #1
 801f940:	d102      	bne.n	801f948 <_kill_r+0x1c>
 801f942:	682b      	ldr	r3, [r5, #0]
 801f944:	b103      	cbz	r3, 801f948 <_kill_r+0x1c>
 801f946:	6023      	str	r3, [r4, #0]
 801f948:	bd38      	pop	{r3, r4, r5, pc}
 801f94a:	bf00      	nop
 801f94c:	20003228 	.word	0x20003228

0801f950 <_getpid_r>:
 801f950:	f7e7 bd86 	b.w	8007460 <_getpid>

0801f954 <_malloc_usable_size_r>:
 801f954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f958:	1f18      	subs	r0, r3, #4
 801f95a:	2b00      	cmp	r3, #0
 801f95c:	bfbc      	itt	lt
 801f95e:	580b      	ldrlt	r3, [r1, r0]
 801f960:	18c0      	addlt	r0, r0, r3
 801f962:	4770      	bx	lr
 801f964:	0000      	movs	r0, r0
	...

0801f968 <cos>:
 801f968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f96a:	ec53 2b10 	vmov	r2, r3, d0
 801f96e:	4826      	ldr	r0, [pc, #152]	; (801fa08 <cos+0xa0>)
 801f970:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801f974:	4281      	cmp	r1, r0
 801f976:	dc06      	bgt.n	801f986 <cos+0x1e>
 801f978:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801fa00 <cos+0x98>
 801f97c:	b005      	add	sp, #20
 801f97e:	f85d eb04 	ldr.w	lr, [sp], #4
 801f982:	f000 b9e9 	b.w	801fd58 <__kernel_cos>
 801f986:	4821      	ldr	r0, [pc, #132]	; (801fa0c <cos+0xa4>)
 801f988:	4281      	cmp	r1, r0
 801f98a:	dd09      	ble.n	801f9a0 <cos+0x38>
 801f98c:	ee10 0a10 	vmov	r0, s0
 801f990:	4619      	mov	r1, r3
 801f992:	f7e0 fc51 	bl	8000238 <__aeabi_dsub>
 801f996:	ec41 0b10 	vmov	d0, r0, r1
 801f99a:	b005      	add	sp, #20
 801f99c:	f85d fb04 	ldr.w	pc, [sp], #4
 801f9a0:	4668      	mov	r0, sp
 801f9a2:	f000 fb61 	bl	8020068 <__ieee754_rem_pio2>
 801f9a6:	f000 0003 	and.w	r0, r0, #3
 801f9aa:	2801      	cmp	r0, #1
 801f9ac:	d00b      	beq.n	801f9c6 <cos+0x5e>
 801f9ae:	2802      	cmp	r0, #2
 801f9b0:	d016      	beq.n	801f9e0 <cos+0x78>
 801f9b2:	b9e0      	cbnz	r0, 801f9ee <cos+0x86>
 801f9b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f9b8:	ed9d 0b00 	vldr	d0, [sp]
 801f9bc:	f000 f9cc 	bl	801fd58 <__kernel_cos>
 801f9c0:	ec51 0b10 	vmov	r0, r1, d0
 801f9c4:	e7e7      	b.n	801f996 <cos+0x2e>
 801f9c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f9ca:	ed9d 0b00 	vldr	d0, [sp]
 801f9ce:	f000 fa8b 	bl	801fee8 <__kernel_sin>
 801f9d2:	ec53 2b10 	vmov	r2, r3, d0
 801f9d6:	ee10 0a10 	vmov	r0, s0
 801f9da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801f9de:	e7da      	b.n	801f996 <cos+0x2e>
 801f9e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f9e4:	ed9d 0b00 	vldr	d0, [sp]
 801f9e8:	f000 f9b6 	bl	801fd58 <__kernel_cos>
 801f9ec:	e7f1      	b.n	801f9d2 <cos+0x6a>
 801f9ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f9f2:	ed9d 0b00 	vldr	d0, [sp]
 801f9f6:	2001      	movs	r0, #1
 801f9f8:	f000 fa76 	bl	801fee8 <__kernel_sin>
 801f9fc:	e7e0      	b.n	801f9c0 <cos+0x58>
 801f9fe:	bf00      	nop
	...
 801fa08:	3fe921fb 	.word	0x3fe921fb
 801fa0c:	7fefffff 	.word	0x7fefffff

0801fa10 <sin>:
 801fa10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fa12:	ec53 2b10 	vmov	r2, r3, d0
 801fa16:	4828      	ldr	r0, [pc, #160]	; (801fab8 <sin+0xa8>)
 801fa18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801fa1c:	4281      	cmp	r1, r0
 801fa1e:	dc07      	bgt.n	801fa30 <sin+0x20>
 801fa20:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801fab0 <sin+0xa0>
 801fa24:	2000      	movs	r0, #0
 801fa26:	b005      	add	sp, #20
 801fa28:	f85d eb04 	ldr.w	lr, [sp], #4
 801fa2c:	f000 ba5c 	b.w	801fee8 <__kernel_sin>
 801fa30:	4822      	ldr	r0, [pc, #136]	; (801fabc <sin+0xac>)
 801fa32:	4281      	cmp	r1, r0
 801fa34:	dd09      	ble.n	801fa4a <sin+0x3a>
 801fa36:	ee10 0a10 	vmov	r0, s0
 801fa3a:	4619      	mov	r1, r3
 801fa3c:	f7e0 fbfc 	bl	8000238 <__aeabi_dsub>
 801fa40:	ec41 0b10 	vmov	d0, r0, r1
 801fa44:	b005      	add	sp, #20
 801fa46:	f85d fb04 	ldr.w	pc, [sp], #4
 801fa4a:	4668      	mov	r0, sp
 801fa4c:	f000 fb0c 	bl	8020068 <__ieee754_rem_pio2>
 801fa50:	f000 0003 	and.w	r0, r0, #3
 801fa54:	2801      	cmp	r0, #1
 801fa56:	d00c      	beq.n	801fa72 <sin+0x62>
 801fa58:	2802      	cmp	r0, #2
 801fa5a:	d011      	beq.n	801fa80 <sin+0x70>
 801fa5c:	b9f0      	cbnz	r0, 801fa9c <sin+0x8c>
 801fa5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801fa62:	ed9d 0b00 	vldr	d0, [sp]
 801fa66:	2001      	movs	r0, #1
 801fa68:	f000 fa3e 	bl	801fee8 <__kernel_sin>
 801fa6c:	ec51 0b10 	vmov	r0, r1, d0
 801fa70:	e7e6      	b.n	801fa40 <sin+0x30>
 801fa72:	ed9d 1b02 	vldr	d1, [sp, #8]
 801fa76:	ed9d 0b00 	vldr	d0, [sp]
 801fa7a:	f000 f96d 	bl	801fd58 <__kernel_cos>
 801fa7e:	e7f5      	b.n	801fa6c <sin+0x5c>
 801fa80:	ed9d 1b02 	vldr	d1, [sp, #8]
 801fa84:	ed9d 0b00 	vldr	d0, [sp]
 801fa88:	2001      	movs	r0, #1
 801fa8a:	f000 fa2d 	bl	801fee8 <__kernel_sin>
 801fa8e:	ec53 2b10 	vmov	r2, r3, d0
 801fa92:	ee10 0a10 	vmov	r0, s0
 801fa96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801fa9a:	e7d1      	b.n	801fa40 <sin+0x30>
 801fa9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801faa0:	ed9d 0b00 	vldr	d0, [sp]
 801faa4:	f000 f958 	bl	801fd58 <__kernel_cos>
 801faa8:	e7f1      	b.n	801fa8e <sin+0x7e>
 801faaa:	bf00      	nop
 801faac:	f3af 8000 	nop.w
	...
 801fab8:	3fe921fb 	.word	0x3fe921fb
 801fabc:	7fefffff 	.word	0x7fefffff

0801fac0 <expf>:
 801fac0:	b508      	push	{r3, lr}
 801fac2:	ed2d 8b02 	vpush	{d8}
 801fac6:	eef0 8a40 	vmov.f32	s17, s0
 801faca:	f000 fd11 	bl	80204f0 <__ieee754_expf>
 801face:	eeb0 8a40 	vmov.f32	s16, s0
 801fad2:	eeb0 0a68 	vmov.f32	s0, s17
 801fad6:	f000 f8a9 	bl	801fc2c <finitef>
 801fada:	b160      	cbz	r0, 801faf6 <expf+0x36>
 801fadc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801fb1c <expf+0x5c>
 801fae0:	eef4 8ae7 	vcmpe.f32	s17, s15
 801fae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fae8:	dd0a      	ble.n	801fb00 <expf+0x40>
 801faea:	f7fd fab9 	bl	801d060 <__errno>
 801faee:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801fb20 <expf+0x60>
 801faf2:	2322      	movs	r3, #34	; 0x22
 801faf4:	6003      	str	r3, [r0, #0]
 801faf6:	eeb0 0a48 	vmov.f32	s0, s16
 801fafa:	ecbd 8b02 	vpop	{d8}
 801fafe:	bd08      	pop	{r3, pc}
 801fb00:	eddf 7a08 	vldr	s15, [pc, #32]	; 801fb24 <expf+0x64>
 801fb04:	eef4 8ae7 	vcmpe.f32	s17, s15
 801fb08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb0c:	d5f3      	bpl.n	801faf6 <expf+0x36>
 801fb0e:	f7fd faa7 	bl	801d060 <__errno>
 801fb12:	2322      	movs	r3, #34	; 0x22
 801fb14:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801fb28 <expf+0x68>
 801fb18:	6003      	str	r3, [r0, #0]
 801fb1a:	e7ec      	b.n	801faf6 <expf+0x36>
 801fb1c:	42b17217 	.word	0x42b17217
 801fb20:	7f800000 	.word	0x7f800000
 801fb24:	c2cff1b5 	.word	0xc2cff1b5
 801fb28:	00000000 	.word	0x00000000

0801fb2c <logf>:
 801fb2c:	b508      	push	{r3, lr}
 801fb2e:	ed2d 8b02 	vpush	{d8}
 801fb32:	eeb0 8a40 	vmov.f32	s16, s0
 801fb36:	f000 fda9 	bl	802068c <__ieee754_logf>
 801fb3a:	eeb4 8a48 	vcmp.f32	s16, s16
 801fb3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb42:	d60f      	bvs.n	801fb64 <logf+0x38>
 801fb44:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801fb48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb4c:	dc0a      	bgt.n	801fb64 <logf+0x38>
 801fb4e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801fb52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb56:	d108      	bne.n	801fb6a <logf+0x3e>
 801fb58:	f7fd fa82 	bl	801d060 <__errno>
 801fb5c:	2322      	movs	r3, #34	; 0x22
 801fb5e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801fb80 <logf+0x54>
 801fb62:	6003      	str	r3, [r0, #0]
 801fb64:	ecbd 8b02 	vpop	{d8}
 801fb68:	bd08      	pop	{r3, pc}
 801fb6a:	f7fd fa79 	bl	801d060 <__errno>
 801fb6e:	ecbd 8b02 	vpop	{d8}
 801fb72:	2321      	movs	r3, #33	; 0x21
 801fb74:	6003      	str	r3, [r0, #0]
 801fb76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801fb7a:	4802      	ldr	r0, [pc, #8]	; (801fb84 <logf+0x58>)
 801fb7c:	f7fd babc 	b.w	801d0f8 <nanf>
 801fb80:	ff800000 	.word	0xff800000
 801fb84:	08023b06 	.word	0x08023b06

0801fb88 <fmin>:
 801fb88:	b508      	push	{r3, lr}
 801fb8a:	ed2d 8b04 	vpush	{d8-d9}
 801fb8e:	eeb0 8a40 	vmov.f32	s16, s0
 801fb92:	eef0 8a60 	vmov.f32	s17, s1
 801fb96:	eeb0 9a41 	vmov.f32	s18, s2
 801fb9a:	eef0 9a61 	vmov.f32	s19, s3
 801fb9e:	f000 f81b 	bl	801fbd8 <__fpclassifyd>
 801fba2:	b168      	cbz	r0, 801fbc0 <fmin+0x38>
 801fba4:	eeb0 0a49 	vmov.f32	s0, s18
 801fba8:	eef0 0a69 	vmov.f32	s1, s19
 801fbac:	f000 f814 	bl	801fbd8 <__fpclassifyd>
 801fbb0:	b150      	cbz	r0, 801fbc8 <fmin+0x40>
 801fbb2:	ec53 2b19 	vmov	r2, r3, d9
 801fbb6:	ec51 0b18 	vmov	r0, r1, d8
 801fbba:	f7e0 ff67 	bl	8000a8c <__aeabi_dcmplt>
 801fbbe:	b918      	cbnz	r0, 801fbc8 <fmin+0x40>
 801fbc0:	eeb0 8a49 	vmov.f32	s16, s18
 801fbc4:	eef0 8a69 	vmov.f32	s17, s19
 801fbc8:	eeb0 0a48 	vmov.f32	s0, s16
 801fbcc:	eef0 0a68 	vmov.f32	s1, s17
 801fbd0:	ecbd 8b04 	vpop	{d8-d9}
 801fbd4:	bd08      	pop	{r3, pc}
	...

0801fbd8 <__fpclassifyd>:
 801fbd8:	ec51 0b10 	vmov	r0, r1, d0
 801fbdc:	b510      	push	{r4, lr}
 801fbde:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 801fbe2:	460b      	mov	r3, r1
 801fbe4:	d019      	beq.n	801fc1a <__fpclassifyd+0x42>
 801fbe6:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 801fbea:	490e      	ldr	r1, [pc, #56]	; (801fc24 <__fpclassifyd+0x4c>)
 801fbec:	428a      	cmp	r2, r1
 801fbee:	d90e      	bls.n	801fc0e <__fpclassifyd+0x36>
 801fbf0:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 801fbf4:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 801fbf8:	428a      	cmp	r2, r1
 801fbfa:	d908      	bls.n	801fc0e <__fpclassifyd+0x36>
 801fbfc:	4a0a      	ldr	r2, [pc, #40]	; (801fc28 <__fpclassifyd+0x50>)
 801fbfe:	4213      	tst	r3, r2
 801fc00:	d007      	beq.n	801fc12 <__fpclassifyd+0x3a>
 801fc02:	4294      	cmp	r4, r2
 801fc04:	d107      	bne.n	801fc16 <__fpclassifyd+0x3e>
 801fc06:	fab0 f080 	clz	r0, r0
 801fc0a:	0940      	lsrs	r0, r0, #5
 801fc0c:	bd10      	pop	{r4, pc}
 801fc0e:	2004      	movs	r0, #4
 801fc10:	e7fc      	b.n	801fc0c <__fpclassifyd+0x34>
 801fc12:	2003      	movs	r0, #3
 801fc14:	e7fa      	b.n	801fc0c <__fpclassifyd+0x34>
 801fc16:	2000      	movs	r0, #0
 801fc18:	e7f8      	b.n	801fc0c <__fpclassifyd+0x34>
 801fc1a:	2800      	cmp	r0, #0
 801fc1c:	d1ee      	bne.n	801fbfc <__fpclassifyd+0x24>
 801fc1e:	2002      	movs	r0, #2
 801fc20:	e7f4      	b.n	801fc0c <__fpclassifyd+0x34>
 801fc22:	bf00      	nop
 801fc24:	7fdfffff 	.word	0x7fdfffff
 801fc28:	7ff00000 	.word	0x7ff00000

0801fc2c <finitef>:
 801fc2c:	b082      	sub	sp, #8
 801fc2e:	ed8d 0a01 	vstr	s0, [sp, #4]
 801fc32:	9801      	ldr	r0, [sp, #4]
 801fc34:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801fc38:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801fc3c:	bfac      	ite	ge
 801fc3e:	2000      	movge	r0, #0
 801fc40:	2001      	movlt	r0, #1
 801fc42:	b002      	add	sp, #8
 801fc44:	4770      	bx	lr

0801fc46 <cosl>:
 801fc46:	f7ff be8f 	b.w	801f968 <cos>

0801fc4a <sinl>:
 801fc4a:	f7ff bee1 	b.w	801fa10 <sin>

0801fc4e <acosl>:
 801fc4e:	f000 bc11 	b.w	8020474 <acos>
 801fc52:	0000      	movs	r0, r0
 801fc54:	0000      	movs	r0, r0
	...

0801fc58 <floor>:
 801fc58:	ec51 0b10 	vmov	r0, r1, d0
 801fc5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801fc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc64:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801fc68:	2e13      	cmp	r6, #19
 801fc6a:	ee10 5a10 	vmov	r5, s0
 801fc6e:	ee10 8a10 	vmov	r8, s0
 801fc72:	460c      	mov	r4, r1
 801fc74:	dc31      	bgt.n	801fcda <floor+0x82>
 801fc76:	2e00      	cmp	r6, #0
 801fc78:	da14      	bge.n	801fca4 <floor+0x4c>
 801fc7a:	a333      	add	r3, pc, #204	; (adr r3, 801fd48 <floor+0xf0>)
 801fc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc80:	f7e0 fadc 	bl	800023c <__adddf3>
 801fc84:	2200      	movs	r2, #0
 801fc86:	2300      	movs	r3, #0
 801fc88:	f7e0 ff1e 	bl	8000ac8 <__aeabi_dcmpgt>
 801fc8c:	b138      	cbz	r0, 801fc9e <floor+0x46>
 801fc8e:	2c00      	cmp	r4, #0
 801fc90:	da53      	bge.n	801fd3a <floor+0xe2>
 801fc92:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801fc96:	4325      	orrs	r5, r4
 801fc98:	d052      	beq.n	801fd40 <floor+0xe8>
 801fc9a:	4c2d      	ldr	r4, [pc, #180]	; (801fd50 <floor+0xf8>)
 801fc9c:	2500      	movs	r5, #0
 801fc9e:	4621      	mov	r1, r4
 801fca0:	4628      	mov	r0, r5
 801fca2:	e024      	b.n	801fcee <floor+0x96>
 801fca4:	4f2b      	ldr	r7, [pc, #172]	; (801fd54 <floor+0xfc>)
 801fca6:	4137      	asrs	r7, r6
 801fca8:	ea01 0307 	and.w	r3, r1, r7
 801fcac:	4303      	orrs	r3, r0
 801fcae:	d01e      	beq.n	801fcee <floor+0x96>
 801fcb0:	a325      	add	r3, pc, #148	; (adr r3, 801fd48 <floor+0xf0>)
 801fcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcb6:	f7e0 fac1 	bl	800023c <__adddf3>
 801fcba:	2200      	movs	r2, #0
 801fcbc:	2300      	movs	r3, #0
 801fcbe:	f7e0 ff03 	bl	8000ac8 <__aeabi_dcmpgt>
 801fcc2:	2800      	cmp	r0, #0
 801fcc4:	d0eb      	beq.n	801fc9e <floor+0x46>
 801fcc6:	2c00      	cmp	r4, #0
 801fcc8:	bfbe      	ittt	lt
 801fcca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801fcce:	4133      	asrlt	r3, r6
 801fcd0:	18e4      	addlt	r4, r4, r3
 801fcd2:	ea24 0407 	bic.w	r4, r4, r7
 801fcd6:	2500      	movs	r5, #0
 801fcd8:	e7e1      	b.n	801fc9e <floor+0x46>
 801fcda:	2e33      	cmp	r6, #51	; 0x33
 801fcdc:	dd0b      	ble.n	801fcf6 <floor+0x9e>
 801fcde:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801fce2:	d104      	bne.n	801fcee <floor+0x96>
 801fce4:	ee10 2a10 	vmov	r2, s0
 801fce8:	460b      	mov	r3, r1
 801fcea:	f7e0 faa7 	bl	800023c <__adddf3>
 801fcee:	ec41 0b10 	vmov	d0, r0, r1
 801fcf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fcf6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801fcfa:	f04f 37ff 	mov.w	r7, #4294967295
 801fcfe:	40df      	lsrs	r7, r3
 801fd00:	4238      	tst	r0, r7
 801fd02:	d0f4      	beq.n	801fcee <floor+0x96>
 801fd04:	a310      	add	r3, pc, #64	; (adr r3, 801fd48 <floor+0xf0>)
 801fd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd0a:	f7e0 fa97 	bl	800023c <__adddf3>
 801fd0e:	2200      	movs	r2, #0
 801fd10:	2300      	movs	r3, #0
 801fd12:	f7e0 fed9 	bl	8000ac8 <__aeabi_dcmpgt>
 801fd16:	2800      	cmp	r0, #0
 801fd18:	d0c1      	beq.n	801fc9e <floor+0x46>
 801fd1a:	2c00      	cmp	r4, #0
 801fd1c:	da0a      	bge.n	801fd34 <floor+0xdc>
 801fd1e:	2e14      	cmp	r6, #20
 801fd20:	d101      	bne.n	801fd26 <floor+0xce>
 801fd22:	3401      	adds	r4, #1
 801fd24:	e006      	b.n	801fd34 <floor+0xdc>
 801fd26:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801fd2a:	2301      	movs	r3, #1
 801fd2c:	40b3      	lsls	r3, r6
 801fd2e:	441d      	add	r5, r3
 801fd30:	45a8      	cmp	r8, r5
 801fd32:	d8f6      	bhi.n	801fd22 <floor+0xca>
 801fd34:	ea25 0507 	bic.w	r5, r5, r7
 801fd38:	e7b1      	b.n	801fc9e <floor+0x46>
 801fd3a:	2500      	movs	r5, #0
 801fd3c:	462c      	mov	r4, r5
 801fd3e:	e7ae      	b.n	801fc9e <floor+0x46>
 801fd40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801fd44:	e7ab      	b.n	801fc9e <floor+0x46>
 801fd46:	bf00      	nop
 801fd48:	8800759c 	.word	0x8800759c
 801fd4c:	7e37e43c 	.word	0x7e37e43c
 801fd50:	bff00000 	.word	0xbff00000
 801fd54:	000fffff 	.word	0x000fffff

0801fd58 <__kernel_cos>:
 801fd58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd5c:	ec57 6b10 	vmov	r6, r7, d0
 801fd60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801fd64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801fd68:	ed8d 1b00 	vstr	d1, [sp]
 801fd6c:	da07      	bge.n	801fd7e <__kernel_cos+0x26>
 801fd6e:	ee10 0a10 	vmov	r0, s0
 801fd72:	4639      	mov	r1, r7
 801fd74:	f7e0 fec8 	bl	8000b08 <__aeabi_d2iz>
 801fd78:	2800      	cmp	r0, #0
 801fd7a:	f000 8088 	beq.w	801fe8e <__kernel_cos+0x136>
 801fd7e:	4632      	mov	r2, r6
 801fd80:	463b      	mov	r3, r7
 801fd82:	4630      	mov	r0, r6
 801fd84:	4639      	mov	r1, r7
 801fd86:	f7e0 fc0f 	bl	80005a8 <__aeabi_dmul>
 801fd8a:	4b51      	ldr	r3, [pc, #324]	; (801fed0 <__kernel_cos+0x178>)
 801fd8c:	2200      	movs	r2, #0
 801fd8e:	4604      	mov	r4, r0
 801fd90:	460d      	mov	r5, r1
 801fd92:	f7e0 fc09 	bl	80005a8 <__aeabi_dmul>
 801fd96:	a340      	add	r3, pc, #256	; (adr r3, 801fe98 <__kernel_cos+0x140>)
 801fd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd9c:	4682      	mov	sl, r0
 801fd9e:	468b      	mov	fp, r1
 801fda0:	4620      	mov	r0, r4
 801fda2:	4629      	mov	r1, r5
 801fda4:	f7e0 fc00 	bl	80005a8 <__aeabi_dmul>
 801fda8:	a33d      	add	r3, pc, #244	; (adr r3, 801fea0 <__kernel_cos+0x148>)
 801fdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdae:	f7e0 fa45 	bl	800023c <__adddf3>
 801fdb2:	4622      	mov	r2, r4
 801fdb4:	462b      	mov	r3, r5
 801fdb6:	f7e0 fbf7 	bl	80005a8 <__aeabi_dmul>
 801fdba:	a33b      	add	r3, pc, #236	; (adr r3, 801fea8 <__kernel_cos+0x150>)
 801fdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdc0:	f7e0 fa3a 	bl	8000238 <__aeabi_dsub>
 801fdc4:	4622      	mov	r2, r4
 801fdc6:	462b      	mov	r3, r5
 801fdc8:	f7e0 fbee 	bl	80005a8 <__aeabi_dmul>
 801fdcc:	a338      	add	r3, pc, #224	; (adr r3, 801feb0 <__kernel_cos+0x158>)
 801fdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdd2:	f7e0 fa33 	bl	800023c <__adddf3>
 801fdd6:	4622      	mov	r2, r4
 801fdd8:	462b      	mov	r3, r5
 801fdda:	f7e0 fbe5 	bl	80005a8 <__aeabi_dmul>
 801fdde:	a336      	add	r3, pc, #216	; (adr r3, 801feb8 <__kernel_cos+0x160>)
 801fde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fde4:	f7e0 fa28 	bl	8000238 <__aeabi_dsub>
 801fde8:	4622      	mov	r2, r4
 801fdea:	462b      	mov	r3, r5
 801fdec:	f7e0 fbdc 	bl	80005a8 <__aeabi_dmul>
 801fdf0:	a333      	add	r3, pc, #204	; (adr r3, 801fec0 <__kernel_cos+0x168>)
 801fdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdf6:	f7e0 fa21 	bl	800023c <__adddf3>
 801fdfa:	4622      	mov	r2, r4
 801fdfc:	462b      	mov	r3, r5
 801fdfe:	f7e0 fbd3 	bl	80005a8 <__aeabi_dmul>
 801fe02:	4622      	mov	r2, r4
 801fe04:	462b      	mov	r3, r5
 801fe06:	f7e0 fbcf 	bl	80005a8 <__aeabi_dmul>
 801fe0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fe0e:	4604      	mov	r4, r0
 801fe10:	460d      	mov	r5, r1
 801fe12:	4630      	mov	r0, r6
 801fe14:	4639      	mov	r1, r7
 801fe16:	f7e0 fbc7 	bl	80005a8 <__aeabi_dmul>
 801fe1a:	460b      	mov	r3, r1
 801fe1c:	4602      	mov	r2, r0
 801fe1e:	4629      	mov	r1, r5
 801fe20:	4620      	mov	r0, r4
 801fe22:	f7e0 fa09 	bl	8000238 <__aeabi_dsub>
 801fe26:	4b2b      	ldr	r3, [pc, #172]	; (801fed4 <__kernel_cos+0x17c>)
 801fe28:	4598      	cmp	r8, r3
 801fe2a:	4606      	mov	r6, r0
 801fe2c:	460f      	mov	r7, r1
 801fe2e:	dc10      	bgt.n	801fe52 <__kernel_cos+0xfa>
 801fe30:	4602      	mov	r2, r0
 801fe32:	460b      	mov	r3, r1
 801fe34:	4650      	mov	r0, sl
 801fe36:	4659      	mov	r1, fp
 801fe38:	f7e0 f9fe 	bl	8000238 <__aeabi_dsub>
 801fe3c:	460b      	mov	r3, r1
 801fe3e:	4926      	ldr	r1, [pc, #152]	; (801fed8 <__kernel_cos+0x180>)
 801fe40:	4602      	mov	r2, r0
 801fe42:	2000      	movs	r0, #0
 801fe44:	f7e0 f9f8 	bl	8000238 <__aeabi_dsub>
 801fe48:	ec41 0b10 	vmov	d0, r0, r1
 801fe4c:	b003      	add	sp, #12
 801fe4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe52:	4b22      	ldr	r3, [pc, #136]	; (801fedc <__kernel_cos+0x184>)
 801fe54:	4920      	ldr	r1, [pc, #128]	; (801fed8 <__kernel_cos+0x180>)
 801fe56:	4598      	cmp	r8, r3
 801fe58:	bfcc      	ite	gt
 801fe5a:	4d21      	ldrgt	r5, [pc, #132]	; (801fee0 <__kernel_cos+0x188>)
 801fe5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801fe60:	2400      	movs	r4, #0
 801fe62:	4622      	mov	r2, r4
 801fe64:	462b      	mov	r3, r5
 801fe66:	2000      	movs	r0, #0
 801fe68:	f7e0 f9e6 	bl	8000238 <__aeabi_dsub>
 801fe6c:	4622      	mov	r2, r4
 801fe6e:	4680      	mov	r8, r0
 801fe70:	4689      	mov	r9, r1
 801fe72:	462b      	mov	r3, r5
 801fe74:	4650      	mov	r0, sl
 801fe76:	4659      	mov	r1, fp
 801fe78:	f7e0 f9de 	bl	8000238 <__aeabi_dsub>
 801fe7c:	4632      	mov	r2, r6
 801fe7e:	463b      	mov	r3, r7
 801fe80:	f7e0 f9da 	bl	8000238 <__aeabi_dsub>
 801fe84:	4602      	mov	r2, r0
 801fe86:	460b      	mov	r3, r1
 801fe88:	4640      	mov	r0, r8
 801fe8a:	4649      	mov	r1, r9
 801fe8c:	e7da      	b.n	801fe44 <__kernel_cos+0xec>
 801fe8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801fec8 <__kernel_cos+0x170>
 801fe92:	e7db      	b.n	801fe4c <__kernel_cos+0xf4>
 801fe94:	f3af 8000 	nop.w
 801fe98:	be8838d4 	.word	0xbe8838d4
 801fe9c:	bda8fae9 	.word	0xbda8fae9
 801fea0:	bdb4b1c4 	.word	0xbdb4b1c4
 801fea4:	3e21ee9e 	.word	0x3e21ee9e
 801fea8:	809c52ad 	.word	0x809c52ad
 801feac:	3e927e4f 	.word	0x3e927e4f
 801feb0:	19cb1590 	.word	0x19cb1590
 801feb4:	3efa01a0 	.word	0x3efa01a0
 801feb8:	16c15177 	.word	0x16c15177
 801febc:	3f56c16c 	.word	0x3f56c16c
 801fec0:	5555554c 	.word	0x5555554c
 801fec4:	3fa55555 	.word	0x3fa55555
 801fec8:	00000000 	.word	0x00000000
 801fecc:	3ff00000 	.word	0x3ff00000
 801fed0:	3fe00000 	.word	0x3fe00000
 801fed4:	3fd33332 	.word	0x3fd33332
 801fed8:	3ff00000 	.word	0x3ff00000
 801fedc:	3fe90000 	.word	0x3fe90000
 801fee0:	3fd20000 	.word	0x3fd20000
 801fee4:	00000000 	.word	0x00000000

0801fee8 <__kernel_sin>:
 801fee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801feec:	ed2d 8b04 	vpush	{d8-d9}
 801fef0:	eeb0 8a41 	vmov.f32	s16, s2
 801fef4:	eef0 8a61 	vmov.f32	s17, s3
 801fef8:	ec55 4b10 	vmov	r4, r5, d0
 801fefc:	b083      	sub	sp, #12
 801fefe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ff02:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801ff06:	9001      	str	r0, [sp, #4]
 801ff08:	da06      	bge.n	801ff18 <__kernel_sin+0x30>
 801ff0a:	ee10 0a10 	vmov	r0, s0
 801ff0e:	4629      	mov	r1, r5
 801ff10:	f7e0 fdfa 	bl	8000b08 <__aeabi_d2iz>
 801ff14:	2800      	cmp	r0, #0
 801ff16:	d051      	beq.n	801ffbc <__kernel_sin+0xd4>
 801ff18:	4622      	mov	r2, r4
 801ff1a:	462b      	mov	r3, r5
 801ff1c:	4620      	mov	r0, r4
 801ff1e:	4629      	mov	r1, r5
 801ff20:	f7e0 fb42 	bl	80005a8 <__aeabi_dmul>
 801ff24:	4682      	mov	sl, r0
 801ff26:	468b      	mov	fp, r1
 801ff28:	4602      	mov	r2, r0
 801ff2a:	460b      	mov	r3, r1
 801ff2c:	4620      	mov	r0, r4
 801ff2e:	4629      	mov	r1, r5
 801ff30:	f7e0 fb3a 	bl	80005a8 <__aeabi_dmul>
 801ff34:	a341      	add	r3, pc, #260	; (adr r3, 802003c <__kernel_sin+0x154>)
 801ff36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff3a:	4680      	mov	r8, r0
 801ff3c:	4689      	mov	r9, r1
 801ff3e:	4650      	mov	r0, sl
 801ff40:	4659      	mov	r1, fp
 801ff42:	f7e0 fb31 	bl	80005a8 <__aeabi_dmul>
 801ff46:	a33f      	add	r3, pc, #252	; (adr r3, 8020044 <__kernel_sin+0x15c>)
 801ff48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff4c:	f7e0 f974 	bl	8000238 <__aeabi_dsub>
 801ff50:	4652      	mov	r2, sl
 801ff52:	465b      	mov	r3, fp
 801ff54:	f7e0 fb28 	bl	80005a8 <__aeabi_dmul>
 801ff58:	a33c      	add	r3, pc, #240	; (adr r3, 802004c <__kernel_sin+0x164>)
 801ff5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff5e:	f7e0 f96d 	bl	800023c <__adddf3>
 801ff62:	4652      	mov	r2, sl
 801ff64:	465b      	mov	r3, fp
 801ff66:	f7e0 fb1f 	bl	80005a8 <__aeabi_dmul>
 801ff6a:	a33a      	add	r3, pc, #232	; (adr r3, 8020054 <__kernel_sin+0x16c>)
 801ff6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff70:	f7e0 f962 	bl	8000238 <__aeabi_dsub>
 801ff74:	4652      	mov	r2, sl
 801ff76:	465b      	mov	r3, fp
 801ff78:	f7e0 fb16 	bl	80005a8 <__aeabi_dmul>
 801ff7c:	a337      	add	r3, pc, #220	; (adr r3, 802005c <__kernel_sin+0x174>)
 801ff7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff82:	f7e0 f95b 	bl	800023c <__adddf3>
 801ff86:	9b01      	ldr	r3, [sp, #4]
 801ff88:	4606      	mov	r6, r0
 801ff8a:	460f      	mov	r7, r1
 801ff8c:	b9eb      	cbnz	r3, 801ffca <__kernel_sin+0xe2>
 801ff8e:	4602      	mov	r2, r0
 801ff90:	460b      	mov	r3, r1
 801ff92:	4650      	mov	r0, sl
 801ff94:	4659      	mov	r1, fp
 801ff96:	f7e0 fb07 	bl	80005a8 <__aeabi_dmul>
 801ff9a:	a325      	add	r3, pc, #148	; (adr r3, 8020030 <__kernel_sin+0x148>)
 801ff9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffa0:	f7e0 f94a 	bl	8000238 <__aeabi_dsub>
 801ffa4:	4642      	mov	r2, r8
 801ffa6:	464b      	mov	r3, r9
 801ffa8:	f7e0 fafe 	bl	80005a8 <__aeabi_dmul>
 801ffac:	4602      	mov	r2, r0
 801ffae:	460b      	mov	r3, r1
 801ffb0:	4620      	mov	r0, r4
 801ffb2:	4629      	mov	r1, r5
 801ffb4:	f7e0 f942 	bl	800023c <__adddf3>
 801ffb8:	4604      	mov	r4, r0
 801ffba:	460d      	mov	r5, r1
 801ffbc:	ec45 4b10 	vmov	d0, r4, r5
 801ffc0:	b003      	add	sp, #12
 801ffc2:	ecbd 8b04 	vpop	{d8-d9}
 801ffc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffca:	4b1b      	ldr	r3, [pc, #108]	; (8020038 <__kernel_sin+0x150>)
 801ffcc:	ec51 0b18 	vmov	r0, r1, d8
 801ffd0:	2200      	movs	r2, #0
 801ffd2:	f7e0 fae9 	bl	80005a8 <__aeabi_dmul>
 801ffd6:	4632      	mov	r2, r6
 801ffd8:	ec41 0b19 	vmov	d9, r0, r1
 801ffdc:	463b      	mov	r3, r7
 801ffde:	4640      	mov	r0, r8
 801ffe0:	4649      	mov	r1, r9
 801ffe2:	f7e0 fae1 	bl	80005a8 <__aeabi_dmul>
 801ffe6:	4602      	mov	r2, r0
 801ffe8:	460b      	mov	r3, r1
 801ffea:	ec51 0b19 	vmov	r0, r1, d9
 801ffee:	f7e0 f923 	bl	8000238 <__aeabi_dsub>
 801fff2:	4652      	mov	r2, sl
 801fff4:	465b      	mov	r3, fp
 801fff6:	f7e0 fad7 	bl	80005a8 <__aeabi_dmul>
 801fffa:	ec53 2b18 	vmov	r2, r3, d8
 801fffe:	f7e0 f91b 	bl	8000238 <__aeabi_dsub>
 8020002:	a30b      	add	r3, pc, #44	; (adr r3, 8020030 <__kernel_sin+0x148>)
 8020004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020008:	4606      	mov	r6, r0
 802000a:	460f      	mov	r7, r1
 802000c:	4640      	mov	r0, r8
 802000e:	4649      	mov	r1, r9
 8020010:	f7e0 faca 	bl	80005a8 <__aeabi_dmul>
 8020014:	4602      	mov	r2, r0
 8020016:	460b      	mov	r3, r1
 8020018:	4630      	mov	r0, r6
 802001a:	4639      	mov	r1, r7
 802001c:	f7e0 f90e 	bl	800023c <__adddf3>
 8020020:	4602      	mov	r2, r0
 8020022:	460b      	mov	r3, r1
 8020024:	4620      	mov	r0, r4
 8020026:	4629      	mov	r1, r5
 8020028:	f7e0 f906 	bl	8000238 <__aeabi_dsub>
 802002c:	e7c4      	b.n	801ffb8 <__kernel_sin+0xd0>
 802002e:	bf00      	nop
 8020030:	55555549 	.word	0x55555549
 8020034:	3fc55555 	.word	0x3fc55555
 8020038:	3fe00000 	.word	0x3fe00000
 802003c:	5acfd57c 	.word	0x5acfd57c
 8020040:	3de5d93a 	.word	0x3de5d93a
 8020044:	8a2b9ceb 	.word	0x8a2b9ceb
 8020048:	3e5ae5e6 	.word	0x3e5ae5e6
 802004c:	57b1fe7d 	.word	0x57b1fe7d
 8020050:	3ec71de3 	.word	0x3ec71de3
 8020054:	19c161d5 	.word	0x19c161d5
 8020058:	3f2a01a0 	.word	0x3f2a01a0
 802005c:	1110f8a6 	.word	0x1110f8a6
 8020060:	3f811111 	.word	0x3f811111
 8020064:	00000000 	.word	0x00000000

08020068 <__ieee754_rem_pio2>:
 8020068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802006c:	ed2d 8b02 	vpush	{d8}
 8020070:	ec55 4b10 	vmov	r4, r5, d0
 8020074:	4bca      	ldr	r3, [pc, #808]	; (80203a0 <__ieee754_rem_pio2+0x338>)
 8020076:	b08b      	sub	sp, #44	; 0x2c
 8020078:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 802007c:	4598      	cmp	r8, r3
 802007e:	4682      	mov	sl, r0
 8020080:	9502      	str	r5, [sp, #8]
 8020082:	dc08      	bgt.n	8020096 <__ieee754_rem_pio2+0x2e>
 8020084:	2200      	movs	r2, #0
 8020086:	2300      	movs	r3, #0
 8020088:	ed80 0b00 	vstr	d0, [r0]
 802008c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8020090:	f04f 0b00 	mov.w	fp, #0
 8020094:	e028      	b.n	80200e8 <__ieee754_rem_pio2+0x80>
 8020096:	4bc3      	ldr	r3, [pc, #780]	; (80203a4 <__ieee754_rem_pio2+0x33c>)
 8020098:	4598      	cmp	r8, r3
 802009a:	dc78      	bgt.n	802018e <__ieee754_rem_pio2+0x126>
 802009c:	9b02      	ldr	r3, [sp, #8]
 802009e:	4ec2      	ldr	r6, [pc, #776]	; (80203a8 <__ieee754_rem_pio2+0x340>)
 80200a0:	2b00      	cmp	r3, #0
 80200a2:	ee10 0a10 	vmov	r0, s0
 80200a6:	a3b0      	add	r3, pc, #704	; (adr r3, 8020368 <__ieee754_rem_pio2+0x300>)
 80200a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200ac:	4629      	mov	r1, r5
 80200ae:	dd39      	ble.n	8020124 <__ieee754_rem_pio2+0xbc>
 80200b0:	f7e0 f8c2 	bl	8000238 <__aeabi_dsub>
 80200b4:	45b0      	cmp	r8, r6
 80200b6:	4604      	mov	r4, r0
 80200b8:	460d      	mov	r5, r1
 80200ba:	d01b      	beq.n	80200f4 <__ieee754_rem_pio2+0x8c>
 80200bc:	a3ac      	add	r3, pc, #688	; (adr r3, 8020370 <__ieee754_rem_pio2+0x308>)
 80200be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200c2:	f7e0 f8b9 	bl	8000238 <__aeabi_dsub>
 80200c6:	4602      	mov	r2, r0
 80200c8:	460b      	mov	r3, r1
 80200ca:	e9ca 2300 	strd	r2, r3, [sl]
 80200ce:	4620      	mov	r0, r4
 80200d0:	4629      	mov	r1, r5
 80200d2:	f7e0 f8b1 	bl	8000238 <__aeabi_dsub>
 80200d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8020370 <__ieee754_rem_pio2+0x308>)
 80200d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200dc:	f7e0 f8ac 	bl	8000238 <__aeabi_dsub>
 80200e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80200e4:	f04f 0b01 	mov.w	fp, #1
 80200e8:	4658      	mov	r0, fp
 80200ea:	b00b      	add	sp, #44	; 0x2c
 80200ec:	ecbd 8b02 	vpop	{d8}
 80200f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200f4:	a3a0      	add	r3, pc, #640	; (adr r3, 8020378 <__ieee754_rem_pio2+0x310>)
 80200f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200fa:	f7e0 f89d 	bl	8000238 <__aeabi_dsub>
 80200fe:	a3a0      	add	r3, pc, #640	; (adr r3, 8020380 <__ieee754_rem_pio2+0x318>)
 8020100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020104:	4604      	mov	r4, r0
 8020106:	460d      	mov	r5, r1
 8020108:	f7e0 f896 	bl	8000238 <__aeabi_dsub>
 802010c:	4602      	mov	r2, r0
 802010e:	460b      	mov	r3, r1
 8020110:	e9ca 2300 	strd	r2, r3, [sl]
 8020114:	4620      	mov	r0, r4
 8020116:	4629      	mov	r1, r5
 8020118:	f7e0 f88e 	bl	8000238 <__aeabi_dsub>
 802011c:	a398      	add	r3, pc, #608	; (adr r3, 8020380 <__ieee754_rem_pio2+0x318>)
 802011e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020122:	e7db      	b.n	80200dc <__ieee754_rem_pio2+0x74>
 8020124:	f7e0 f88a 	bl	800023c <__adddf3>
 8020128:	45b0      	cmp	r8, r6
 802012a:	4604      	mov	r4, r0
 802012c:	460d      	mov	r5, r1
 802012e:	d016      	beq.n	802015e <__ieee754_rem_pio2+0xf6>
 8020130:	a38f      	add	r3, pc, #572	; (adr r3, 8020370 <__ieee754_rem_pio2+0x308>)
 8020132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020136:	f7e0 f881 	bl	800023c <__adddf3>
 802013a:	4602      	mov	r2, r0
 802013c:	460b      	mov	r3, r1
 802013e:	e9ca 2300 	strd	r2, r3, [sl]
 8020142:	4620      	mov	r0, r4
 8020144:	4629      	mov	r1, r5
 8020146:	f7e0 f877 	bl	8000238 <__aeabi_dsub>
 802014a:	a389      	add	r3, pc, #548	; (adr r3, 8020370 <__ieee754_rem_pio2+0x308>)
 802014c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020150:	f7e0 f874 	bl	800023c <__adddf3>
 8020154:	f04f 3bff 	mov.w	fp, #4294967295
 8020158:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802015c:	e7c4      	b.n	80200e8 <__ieee754_rem_pio2+0x80>
 802015e:	a386      	add	r3, pc, #536	; (adr r3, 8020378 <__ieee754_rem_pio2+0x310>)
 8020160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020164:	f7e0 f86a 	bl	800023c <__adddf3>
 8020168:	a385      	add	r3, pc, #532	; (adr r3, 8020380 <__ieee754_rem_pio2+0x318>)
 802016a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802016e:	4604      	mov	r4, r0
 8020170:	460d      	mov	r5, r1
 8020172:	f7e0 f863 	bl	800023c <__adddf3>
 8020176:	4602      	mov	r2, r0
 8020178:	460b      	mov	r3, r1
 802017a:	e9ca 2300 	strd	r2, r3, [sl]
 802017e:	4620      	mov	r0, r4
 8020180:	4629      	mov	r1, r5
 8020182:	f7e0 f859 	bl	8000238 <__aeabi_dsub>
 8020186:	a37e      	add	r3, pc, #504	; (adr r3, 8020380 <__ieee754_rem_pio2+0x318>)
 8020188:	e9d3 2300 	ldrd	r2, r3, [r3]
 802018c:	e7e0      	b.n	8020150 <__ieee754_rem_pio2+0xe8>
 802018e:	4b87      	ldr	r3, [pc, #540]	; (80203ac <__ieee754_rem_pio2+0x344>)
 8020190:	4598      	cmp	r8, r3
 8020192:	f300 80d8 	bgt.w	8020346 <__ieee754_rem_pio2+0x2de>
 8020196:	f000 f9a1 	bl	80204dc <fabs>
 802019a:	ec55 4b10 	vmov	r4, r5, d0
 802019e:	ee10 0a10 	vmov	r0, s0
 80201a2:	a379      	add	r3, pc, #484	; (adr r3, 8020388 <__ieee754_rem_pio2+0x320>)
 80201a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201a8:	4629      	mov	r1, r5
 80201aa:	f7e0 f9fd 	bl	80005a8 <__aeabi_dmul>
 80201ae:	4b80      	ldr	r3, [pc, #512]	; (80203b0 <__ieee754_rem_pio2+0x348>)
 80201b0:	2200      	movs	r2, #0
 80201b2:	f7e0 f843 	bl	800023c <__adddf3>
 80201b6:	f7e0 fca7 	bl	8000b08 <__aeabi_d2iz>
 80201ba:	4683      	mov	fp, r0
 80201bc:	f7e0 f98a 	bl	80004d4 <__aeabi_i2d>
 80201c0:	4602      	mov	r2, r0
 80201c2:	460b      	mov	r3, r1
 80201c4:	ec43 2b18 	vmov	d8, r2, r3
 80201c8:	a367      	add	r3, pc, #412	; (adr r3, 8020368 <__ieee754_rem_pio2+0x300>)
 80201ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201ce:	f7e0 f9eb 	bl	80005a8 <__aeabi_dmul>
 80201d2:	4602      	mov	r2, r0
 80201d4:	460b      	mov	r3, r1
 80201d6:	4620      	mov	r0, r4
 80201d8:	4629      	mov	r1, r5
 80201da:	f7e0 f82d 	bl	8000238 <__aeabi_dsub>
 80201de:	a364      	add	r3, pc, #400	; (adr r3, 8020370 <__ieee754_rem_pio2+0x308>)
 80201e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201e4:	4606      	mov	r6, r0
 80201e6:	460f      	mov	r7, r1
 80201e8:	ec51 0b18 	vmov	r0, r1, d8
 80201ec:	f7e0 f9dc 	bl	80005a8 <__aeabi_dmul>
 80201f0:	f1bb 0f1f 	cmp.w	fp, #31
 80201f4:	4604      	mov	r4, r0
 80201f6:	460d      	mov	r5, r1
 80201f8:	dc0d      	bgt.n	8020216 <__ieee754_rem_pio2+0x1ae>
 80201fa:	4b6e      	ldr	r3, [pc, #440]	; (80203b4 <__ieee754_rem_pio2+0x34c>)
 80201fc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8020200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020204:	4543      	cmp	r3, r8
 8020206:	d006      	beq.n	8020216 <__ieee754_rem_pio2+0x1ae>
 8020208:	4622      	mov	r2, r4
 802020a:	462b      	mov	r3, r5
 802020c:	4630      	mov	r0, r6
 802020e:	4639      	mov	r1, r7
 8020210:	f7e0 f812 	bl	8000238 <__aeabi_dsub>
 8020214:	e00e      	b.n	8020234 <__ieee754_rem_pio2+0x1cc>
 8020216:	462b      	mov	r3, r5
 8020218:	4622      	mov	r2, r4
 802021a:	4630      	mov	r0, r6
 802021c:	4639      	mov	r1, r7
 802021e:	f7e0 f80b 	bl	8000238 <__aeabi_dsub>
 8020222:	ea4f 5328 	mov.w	r3, r8, asr #20
 8020226:	9303      	str	r3, [sp, #12]
 8020228:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802022c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8020230:	2b10      	cmp	r3, #16
 8020232:	dc02      	bgt.n	802023a <__ieee754_rem_pio2+0x1d2>
 8020234:	e9ca 0100 	strd	r0, r1, [sl]
 8020238:	e039      	b.n	80202ae <__ieee754_rem_pio2+0x246>
 802023a:	a34f      	add	r3, pc, #316	; (adr r3, 8020378 <__ieee754_rem_pio2+0x310>)
 802023c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020240:	ec51 0b18 	vmov	r0, r1, d8
 8020244:	f7e0 f9b0 	bl	80005a8 <__aeabi_dmul>
 8020248:	4604      	mov	r4, r0
 802024a:	460d      	mov	r5, r1
 802024c:	4602      	mov	r2, r0
 802024e:	460b      	mov	r3, r1
 8020250:	4630      	mov	r0, r6
 8020252:	4639      	mov	r1, r7
 8020254:	f7df fff0 	bl	8000238 <__aeabi_dsub>
 8020258:	4602      	mov	r2, r0
 802025a:	460b      	mov	r3, r1
 802025c:	4680      	mov	r8, r0
 802025e:	4689      	mov	r9, r1
 8020260:	4630      	mov	r0, r6
 8020262:	4639      	mov	r1, r7
 8020264:	f7df ffe8 	bl	8000238 <__aeabi_dsub>
 8020268:	4622      	mov	r2, r4
 802026a:	462b      	mov	r3, r5
 802026c:	f7df ffe4 	bl	8000238 <__aeabi_dsub>
 8020270:	a343      	add	r3, pc, #268	; (adr r3, 8020380 <__ieee754_rem_pio2+0x318>)
 8020272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020276:	4604      	mov	r4, r0
 8020278:	460d      	mov	r5, r1
 802027a:	ec51 0b18 	vmov	r0, r1, d8
 802027e:	f7e0 f993 	bl	80005a8 <__aeabi_dmul>
 8020282:	4622      	mov	r2, r4
 8020284:	462b      	mov	r3, r5
 8020286:	f7df ffd7 	bl	8000238 <__aeabi_dsub>
 802028a:	4602      	mov	r2, r0
 802028c:	460b      	mov	r3, r1
 802028e:	4604      	mov	r4, r0
 8020290:	460d      	mov	r5, r1
 8020292:	4640      	mov	r0, r8
 8020294:	4649      	mov	r1, r9
 8020296:	f7df ffcf 	bl	8000238 <__aeabi_dsub>
 802029a:	9a03      	ldr	r2, [sp, #12]
 802029c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80202a0:	1ad3      	subs	r3, r2, r3
 80202a2:	2b31      	cmp	r3, #49	; 0x31
 80202a4:	dc24      	bgt.n	80202f0 <__ieee754_rem_pio2+0x288>
 80202a6:	e9ca 0100 	strd	r0, r1, [sl]
 80202aa:	4646      	mov	r6, r8
 80202ac:	464f      	mov	r7, r9
 80202ae:	e9da 8900 	ldrd	r8, r9, [sl]
 80202b2:	4630      	mov	r0, r6
 80202b4:	4642      	mov	r2, r8
 80202b6:	464b      	mov	r3, r9
 80202b8:	4639      	mov	r1, r7
 80202ba:	f7df ffbd 	bl	8000238 <__aeabi_dsub>
 80202be:	462b      	mov	r3, r5
 80202c0:	4622      	mov	r2, r4
 80202c2:	f7df ffb9 	bl	8000238 <__aeabi_dsub>
 80202c6:	9b02      	ldr	r3, [sp, #8]
 80202c8:	2b00      	cmp	r3, #0
 80202ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80202ce:	f6bf af0b 	bge.w	80200e8 <__ieee754_rem_pio2+0x80>
 80202d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80202d6:	f8ca 3004 	str.w	r3, [sl, #4]
 80202da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80202de:	f8ca 8000 	str.w	r8, [sl]
 80202e2:	f8ca 0008 	str.w	r0, [sl, #8]
 80202e6:	f8ca 300c 	str.w	r3, [sl, #12]
 80202ea:	f1cb 0b00 	rsb	fp, fp, #0
 80202ee:	e6fb      	b.n	80200e8 <__ieee754_rem_pio2+0x80>
 80202f0:	a327      	add	r3, pc, #156	; (adr r3, 8020390 <__ieee754_rem_pio2+0x328>)
 80202f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202f6:	ec51 0b18 	vmov	r0, r1, d8
 80202fa:	f7e0 f955 	bl	80005a8 <__aeabi_dmul>
 80202fe:	4604      	mov	r4, r0
 8020300:	460d      	mov	r5, r1
 8020302:	4602      	mov	r2, r0
 8020304:	460b      	mov	r3, r1
 8020306:	4640      	mov	r0, r8
 8020308:	4649      	mov	r1, r9
 802030a:	f7df ff95 	bl	8000238 <__aeabi_dsub>
 802030e:	4602      	mov	r2, r0
 8020310:	460b      	mov	r3, r1
 8020312:	4606      	mov	r6, r0
 8020314:	460f      	mov	r7, r1
 8020316:	4640      	mov	r0, r8
 8020318:	4649      	mov	r1, r9
 802031a:	f7df ff8d 	bl	8000238 <__aeabi_dsub>
 802031e:	4622      	mov	r2, r4
 8020320:	462b      	mov	r3, r5
 8020322:	f7df ff89 	bl	8000238 <__aeabi_dsub>
 8020326:	a31c      	add	r3, pc, #112	; (adr r3, 8020398 <__ieee754_rem_pio2+0x330>)
 8020328:	e9d3 2300 	ldrd	r2, r3, [r3]
 802032c:	4604      	mov	r4, r0
 802032e:	460d      	mov	r5, r1
 8020330:	ec51 0b18 	vmov	r0, r1, d8
 8020334:	f7e0 f938 	bl	80005a8 <__aeabi_dmul>
 8020338:	4622      	mov	r2, r4
 802033a:	462b      	mov	r3, r5
 802033c:	f7df ff7c 	bl	8000238 <__aeabi_dsub>
 8020340:	4604      	mov	r4, r0
 8020342:	460d      	mov	r5, r1
 8020344:	e760      	b.n	8020208 <__ieee754_rem_pio2+0x1a0>
 8020346:	4b1c      	ldr	r3, [pc, #112]	; (80203b8 <__ieee754_rem_pio2+0x350>)
 8020348:	4598      	cmp	r8, r3
 802034a:	dd37      	ble.n	80203bc <__ieee754_rem_pio2+0x354>
 802034c:	ee10 2a10 	vmov	r2, s0
 8020350:	462b      	mov	r3, r5
 8020352:	4620      	mov	r0, r4
 8020354:	4629      	mov	r1, r5
 8020356:	f7df ff6f 	bl	8000238 <__aeabi_dsub>
 802035a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802035e:	e9ca 0100 	strd	r0, r1, [sl]
 8020362:	e695      	b.n	8020090 <__ieee754_rem_pio2+0x28>
 8020364:	f3af 8000 	nop.w
 8020368:	54400000 	.word	0x54400000
 802036c:	3ff921fb 	.word	0x3ff921fb
 8020370:	1a626331 	.word	0x1a626331
 8020374:	3dd0b461 	.word	0x3dd0b461
 8020378:	1a600000 	.word	0x1a600000
 802037c:	3dd0b461 	.word	0x3dd0b461
 8020380:	2e037073 	.word	0x2e037073
 8020384:	3ba3198a 	.word	0x3ba3198a
 8020388:	6dc9c883 	.word	0x6dc9c883
 802038c:	3fe45f30 	.word	0x3fe45f30
 8020390:	2e000000 	.word	0x2e000000
 8020394:	3ba3198a 	.word	0x3ba3198a
 8020398:	252049c1 	.word	0x252049c1
 802039c:	397b839a 	.word	0x397b839a
 80203a0:	3fe921fb 	.word	0x3fe921fb
 80203a4:	4002d97b 	.word	0x4002d97b
 80203a8:	3ff921fb 	.word	0x3ff921fb
 80203ac:	413921fb 	.word	0x413921fb
 80203b0:	3fe00000 	.word	0x3fe00000
 80203b4:	08023d48 	.word	0x08023d48
 80203b8:	7fefffff 	.word	0x7fefffff
 80203bc:	ea4f 5628 	mov.w	r6, r8, asr #20
 80203c0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80203c4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80203c8:	4620      	mov	r0, r4
 80203ca:	460d      	mov	r5, r1
 80203cc:	f7e0 fb9c 	bl	8000b08 <__aeabi_d2iz>
 80203d0:	f7e0 f880 	bl	80004d4 <__aeabi_i2d>
 80203d4:	4602      	mov	r2, r0
 80203d6:	460b      	mov	r3, r1
 80203d8:	4620      	mov	r0, r4
 80203da:	4629      	mov	r1, r5
 80203dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80203e0:	f7df ff2a 	bl	8000238 <__aeabi_dsub>
 80203e4:	4b21      	ldr	r3, [pc, #132]	; (802046c <__ieee754_rem_pio2+0x404>)
 80203e6:	2200      	movs	r2, #0
 80203e8:	f7e0 f8de 	bl	80005a8 <__aeabi_dmul>
 80203ec:	460d      	mov	r5, r1
 80203ee:	4604      	mov	r4, r0
 80203f0:	f7e0 fb8a 	bl	8000b08 <__aeabi_d2iz>
 80203f4:	f7e0 f86e 	bl	80004d4 <__aeabi_i2d>
 80203f8:	4602      	mov	r2, r0
 80203fa:	460b      	mov	r3, r1
 80203fc:	4620      	mov	r0, r4
 80203fe:	4629      	mov	r1, r5
 8020400:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8020404:	f7df ff18 	bl	8000238 <__aeabi_dsub>
 8020408:	4b18      	ldr	r3, [pc, #96]	; (802046c <__ieee754_rem_pio2+0x404>)
 802040a:	2200      	movs	r2, #0
 802040c:	f7e0 f8cc 	bl	80005a8 <__aeabi_dmul>
 8020410:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8020414:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8020418:	2703      	movs	r7, #3
 802041a:	2400      	movs	r4, #0
 802041c:	2500      	movs	r5, #0
 802041e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8020422:	4622      	mov	r2, r4
 8020424:	462b      	mov	r3, r5
 8020426:	46b9      	mov	r9, r7
 8020428:	3f01      	subs	r7, #1
 802042a:	f7e0 fb25 	bl	8000a78 <__aeabi_dcmpeq>
 802042e:	2800      	cmp	r0, #0
 8020430:	d1f5      	bne.n	802041e <__ieee754_rem_pio2+0x3b6>
 8020432:	4b0f      	ldr	r3, [pc, #60]	; (8020470 <__ieee754_rem_pio2+0x408>)
 8020434:	9301      	str	r3, [sp, #4]
 8020436:	2302      	movs	r3, #2
 8020438:	9300      	str	r3, [sp, #0]
 802043a:	4632      	mov	r2, r6
 802043c:	464b      	mov	r3, r9
 802043e:	4651      	mov	r1, sl
 8020440:	a804      	add	r0, sp, #16
 8020442:	f000 fa39 	bl	80208b8 <__kernel_rem_pio2>
 8020446:	9b02      	ldr	r3, [sp, #8]
 8020448:	2b00      	cmp	r3, #0
 802044a:	4683      	mov	fp, r0
 802044c:	f6bf ae4c 	bge.w	80200e8 <__ieee754_rem_pio2+0x80>
 8020450:	e9da 2100 	ldrd	r2, r1, [sl]
 8020454:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020458:	e9ca 2300 	strd	r2, r3, [sl]
 802045c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8020460:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020464:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8020468:	e73f      	b.n	80202ea <__ieee754_rem_pio2+0x282>
 802046a:	bf00      	nop
 802046c:	41700000 	.word	0x41700000
 8020470:	08023dc8 	.word	0x08023dc8

08020474 <acos>:
 8020474:	b538      	push	{r3, r4, r5, lr}
 8020476:	ed2d 8b02 	vpush	{d8}
 802047a:	ec55 4b10 	vmov	r4, r5, d0
 802047e:	f000 fd6b 	bl	8020f58 <__ieee754_acos>
 8020482:	4622      	mov	r2, r4
 8020484:	462b      	mov	r3, r5
 8020486:	4620      	mov	r0, r4
 8020488:	4629      	mov	r1, r5
 802048a:	eeb0 8a40 	vmov.f32	s16, s0
 802048e:	eef0 8a60 	vmov.f32	s17, s1
 8020492:	f7e0 fb23 	bl	8000adc <__aeabi_dcmpun>
 8020496:	b9a8      	cbnz	r0, 80204c4 <acos+0x50>
 8020498:	ec45 4b10 	vmov	d0, r4, r5
 802049c:	f000 f81e 	bl	80204dc <fabs>
 80204a0:	4b0c      	ldr	r3, [pc, #48]	; (80204d4 <acos+0x60>)
 80204a2:	ec51 0b10 	vmov	r0, r1, d0
 80204a6:	2200      	movs	r2, #0
 80204a8:	f7e0 fb0e 	bl	8000ac8 <__aeabi_dcmpgt>
 80204ac:	b150      	cbz	r0, 80204c4 <acos+0x50>
 80204ae:	f7fc fdd7 	bl	801d060 <__errno>
 80204b2:	ecbd 8b02 	vpop	{d8}
 80204b6:	2321      	movs	r3, #33	; 0x21
 80204b8:	6003      	str	r3, [r0, #0]
 80204ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80204be:	4806      	ldr	r0, [pc, #24]	; (80204d8 <acos+0x64>)
 80204c0:	f7fc be12 	b.w	801d0e8 <nan>
 80204c4:	eeb0 0a48 	vmov.f32	s0, s16
 80204c8:	eef0 0a68 	vmov.f32	s1, s17
 80204cc:	ecbd 8b02 	vpop	{d8}
 80204d0:	bd38      	pop	{r3, r4, r5, pc}
 80204d2:	bf00      	nop
 80204d4:	3ff00000 	.word	0x3ff00000
 80204d8:	08023b06 	.word	0x08023b06

080204dc <fabs>:
 80204dc:	ec51 0b10 	vmov	r0, r1, d0
 80204e0:	ee10 2a10 	vmov	r2, s0
 80204e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80204e8:	ec43 2b10 	vmov	d0, r2, r3
 80204ec:	4770      	bx	lr
	...

080204f0 <__ieee754_expf>:
 80204f0:	ee10 2a10 	vmov	r2, s0
 80204f4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80204f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80204fc:	d902      	bls.n	8020504 <__ieee754_expf+0x14>
 80204fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8020502:	4770      	bx	lr
 8020504:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8020508:	d106      	bne.n	8020518 <__ieee754_expf+0x28>
 802050a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8020644 <__ieee754_expf+0x154>
 802050e:	2900      	cmp	r1, #0
 8020510:	bf18      	it	ne
 8020512:	eeb0 0a67 	vmovne.f32	s0, s15
 8020516:	4770      	bx	lr
 8020518:	484b      	ldr	r0, [pc, #300]	; (8020648 <__ieee754_expf+0x158>)
 802051a:	4282      	cmp	r2, r0
 802051c:	dd02      	ble.n	8020524 <__ieee754_expf+0x34>
 802051e:	2000      	movs	r0, #0
 8020520:	f000 b9c2 	b.w	80208a8 <__math_oflowf>
 8020524:	2a00      	cmp	r2, #0
 8020526:	da05      	bge.n	8020534 <__ieee754_expf+0x44>
 8020528:	4a48      	ldr	r2, [pc, #288]	; (802064c <__ieee754_expf+0x15c>)
 802052a:	4293      	cmp	r3, r2
 802052c:	d902      	bls.n	8020534 <__ieee754_expf+0x44>
 802052e:	2000      	movs	r0, #0
 8020530:	f000 b9b4 	b.w	802089c <__math_uflowf>
 8020534:	4a46      	ldr	r2, [pc, #280]	; (8020650 <__ieee754_expf+0x160>)
 8020536:	4293      	cmp	r3, r2
 8020538:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 802053c:	d952      	bls.n	80205e4 <__ieee754_expf+0xf4>
 802053e:	4a45      	ldr	r2, [pc, #276]	; (8020654 <__ieee754_expf+0x164>)
 8020540:	4293      	cmp	r3, r2
 8020542:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8020546:	d834      	bhi.n	80205b2 <__ieee754_expf+0xc2>
 8020548:	4b43      	ldr	r3, [pc, #268]	; (8020658 <__ieee754_expf+0x168>)
 802054a:	4413      	add	r3, r2
 802054c:	ed93 7a00 	vldr	s14, [r3]
 8020550:	4b42      	ldr	r3, [pc, #264]	; (802065c <__ieee754_expf+0x16c>)
 8020552:	4413      	add	r3, r2
 8020554:	ee30 7a47 	vsub.f32	s14, s0, s14
 8020558:	f1c1 0201 	rsb	r2, r1, #1
 802055c:	edd3 7a00 	vldr	s15, [r3]
 8020560:	1a52      	subs	r2, r2, r1
 8020562:	ee37 0a67 	vsub.f32	s0, s14, s15
 8020566:	ee20 6a00 	vmul.f32	s12, s0, s0
 802056a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8020660 <__ieee754_expf+0x170>
 802056e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8020664 <__ieee754_expf+0x174>
 8020572:	eee6 6a05 	vfma.f32	s13, s12, s10
 8020576:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8020668 <__ieee754_expf+0x178>
 802057a:	eea6 5a86 	vfma.f32	s10, s13, s12
 802057e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 802066c <__ieee754_expf+0x17c>
 8020582:	eee5 6a06 	vfma.f32	s13, s10, s12
 8020586:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8020670 <__ieee754_expf+0x180>
 802058a:	eea6 5a86 	vfma.f32	s10, s13, s12
 802058e:	eef0 6a40 	vmov.f32	s13, s0
 8020592:	eee5 6a46 	vfms.f32	s13, s10, s12
 8020596:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 802059a:	ee20 5a26 	vmul.f32	s10, s0, s13
 802059e:	bb92      	cbnz	r2, 8020606 <__ieee754_expf+0x116>
 80205a0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80205a4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80205a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80205ac:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80205b0:	4770      	bx	lr
 80205b2:	4b30      	ldr	r3, [pc, #192]	; (8020674 <__ieee754_expf+0x184>)
 80205b4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8020678 <__ieee754_expf+0x188>
 80205b8:	eddf 6a30 	vldr	s13, [pc, #192]	; 802067c <__ieee754_expf+0x18c>
 80205bc:	4413      	add	r3, r2
 80205be:	edd3 7a00 	vldr	s15, [r3]
 80205c2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80205c6:	eeb0 7a40 	vmov.f32	s14, s0
 80205ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80205ce:	ee17 2a90 	vmov	r2, s15
 80205d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80205d6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80205da:	eddf 6a29 	vldr	s13, [pc, #164]	; 8020680 <__ieee754_expf+0x190>
 80205de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80205e2:	e7be      	b.n	8020562 <__ieee754_expf+0x72>
 80205e4:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 80205e8:	d20b      	bcs.n	8020602 <__ieee754_expf+0x112>
 80205ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8020684 <__ieee754_expf+0x194>
 80205ee:	ee70 6a26 	vadd.f32	s13, s0, s13
 80205f2:	eef4 6ae5 	vcmpe.f32	s13, s11
 80205f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80205fa:	dd02      	ble.n	8020602 <__ieee754_expf+0x112>
 80205fc:	ee30 0a25 	vadd.f32	s0, s0, s11
 8020600:	4770      	bx	lr
 8020602:	2200      	movs	r2, #0
 8020604:	e7af      	b.n	8020566 <__ieee754_expf+0x76>
 8020606:	ee36 6a66 	vsub.f32	s12, s12, s13
 802060a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 802060e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8020612:	bfb8      	it	lt
 8020614:	3264      	addlt	r2, #100	; 0x64
 8020616:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802061a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802061e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8020622:	ee17 3a90 	vmov	r3, s15
 8020626:	bfab      	itete	ge
 8020628:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 802062c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8020630:	ee00 3a10 	vmovge	s0, r3
 8020634:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8020688 <__ieee754_expf+0x198>
 8020638:	bfbc      	itt	lt
 802063a:	ee00 3a10 	vmovlt	s0, r3
 802063e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8020642:	4770      	bx	lr
 8020644:	00000000 	.word	0x00000000
 8020648:	42b17217 	.word	0x42b17217
 802064c:	42cff1b5 	.word	0x42cff1b5
 8020650:	3eb17218 	.word	0x3eb17218
 8020654:	3f851591 	.word	0x3f851591
 8020658:	08023ed8 	.word	0x08023ed8
 802065c:	08023ee0 	.word	0x08023ee0
 8020660:	3331bb4c 	.word	0x3331bb4c
 8020664:	b5ddea0e 	.word	0xb5ddea0e
 8020668:	388ab355 	.word	0x388ab355
 802066c:	bb360b61 	.word	0xbb360b61
 8020670:	3e2aaaab 	.word	0x3e2aaaab
 8020674:	08023ed0 	.word	0x08023ed0
 8020678:	3fb8aa3b 	.word	0x3fb8aa3b
 802067c:	3f317180 	.word	0x3f317180
 8020680:	3717f7d1 	.word	0x3717f7d1
 8020684:	7149f2ca 	.word	0x7149f2ca
 8020688:	0d800000 	.word	0x0d800000

0802068c <__ieee754_logf>:
 802068c:	ee10 3a10 	vmov	r3, s0
 8020690:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8020694:	d106      	bne.n	80206a4 <__ieee754_logf+0x18>
 8020696:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8020830 <__ieee754_logf+0x1a4>
 802069a:	eddf 7a66 	vldr	s15, [pc, #408]	; 8020834 <__ieee754_logf+0x1a8>
 802069e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80206a2:	4770      	bx	lr
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	da02      	bge.n	80206ae <__ieee754_logf+0x22>
 80206a8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80206ac:	e7f5      	b.n	802069a <__ieee754_logf+0xe>
 80206ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80206b2:	db02      	blt.n	80206ba <__ieee754_logf+0x2e>
 80206b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80206b8:	4770      	bx	lr
 80206ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80206be:	bfb8      	it	lt
 80206c0:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 8020838 <__ieee754_logf+0x1ac>
 80206c4:	485d      	ldr	r0, [pc, #372]	; (802083c <__ieee754_logf+0x1b0>)
 80206c6:	bfbe      	ittt	lt
 80206c8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80206cc:	f06f 0118 	mvnlt.w	r1, #24
 80206d0:	ee17 3a90 	vmovlt	r3, s15
 80206d4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80206d8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80206dc:	4418      	add	r0, r3
 80206de:	bfa8      	it	ge
 80206e0:	2100      	movge	r1, #0
 80206e2:	3a7f      	subs	r2, #127	; 0x7f
 80206e4:	440a      	add	r2, r1
 80206e6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 80206ea:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80206ee:	4319      	orrs	r1, r3
 80206f0:	ee00 1a10 	vmov	s0, r1
 80206f4:	4952      	ldr	r1, [pc, #328]	; (8020840 <__ieee754_logf+0x1b4>)
 80206f6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 80206fa:	f103 000f 	add.w	r0, r3, #15
 80206fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8020702:	4001      	ands	r1, r0
 8020704:	ee30 0a67 	vsub.f32	s0, s0, s15
 8020708:	bb89      	cbnz	r1, 802076e <__ieee754_logf+0xe2>
 802070a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 802070e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020712:	d10f      	bne.n	8020734 <__ieee754_logf+0xa8>
 8020714:	2a00      	cmp	r2, #0
 8020716:	f000 8087 	beq.w	8020828 <__ieee754_logf+0x19c>
 802071a:	ee07 2a90 	vmov	s15, r2
 802071e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8020844 <__ieee754_logf+0x1b8>
 8020722:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8020848 <__ieee754_logf+0x1bc>
 8020726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802072a:	ee27 0a80 	vmul.f32	s0, s15, s0
 802072e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8020732:	4770      	bx	lr
 8020734:	eddf 6a45 	vldr	s13, [pc, #276]	; 802084c <__ieee754_logf+0x1c0>
 8020738:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802073c:	eee0 7a66 	vfms.f32	s15, s0, s13
 8020740:	ee20 7a00 	vmul.f32	s14, s0, s0
 8020744:	ee27 7a27 	vmul.f32	s14, s14, s15
 8020748:	b912      	cbnz	r2, 8020750 <__ieee754_logf+0xc4>
 802074a:	ee30 0a47 	vsub.f32	s0, s0, s14
 802074e:	4770      	bx	lr
 8020750:	ee07 2a90 	vmov	s15, r2
 8020754:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8020844 <__ieee754_logf+0x1b8>
 8020758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802075c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8020760:	ee37 0a40 	vsub.f32	s0, s14, s0
 8020764:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8020848 <__ieee754_logf+0x1bc>
 8020768:	ee97 0a87 	vfnms.f32	s0, s15, s14
 802076c:	4770      	bx	lr
 802076e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8020772:	ee70 7a27 	vadd.f32	s15, s0, s15
 8020776:	eddf 5a36 	vldr	s11, [pc, #216]	; 8020850 <__ieee754_logf+0x1c4>
 802077a:	eddf 4a36 	vldr	s9, [pc, #216]	; 8020854 <__ieee754_logf+0x1c8>
 802077e:	4936      	ldr	r1, [pc, #216]	; (8020858 <__ieee754_logf+0x1cc>)
 8020780:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8020784:	4419      	add	r1, r3
 8020786:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 802078a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 802078e:	430b      	orrs	r3, r1
 8020790:	2b00      	cmp	r3, #0
 8020792:	ee07 2a90 	vmov	s15, r2
 8020796:	ee26 5a06 	vmul.f32	s10, s12, s12
 802079a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802079e:	ee25 7a05 	vmul.f32	s14, s10, s10
 80207a2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 802085c <__ieee754_logf+0x1d0>
 80207a6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80207aa:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8020860 <__ieee754_logf+0x1d4>
 80207ae:	eee7 5a87 	vfma.f32	s11, s15, s14
 80207b2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8020864 <__ieee754_logf+0x1d8>
 80207b6:	eee7 7a24 	vfma.f32	s15, s14, s9
 80207ba:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8020868 <__ieee754_logf+0x1dc>
 80207be:	eee7 4a87 	vfma.f32	s9, s15, s14
 80207c2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 802086c <__ieee754_logf+0x1e0>
 80207c6:	eee4 7a87 	vfma.f32	s15, s9, s14
 80207ca:	ee67 7a85 	vmul.f32	s15, s15, s10
 80207ce:	eee5 7a87 	vfma.f32	s15, s11, s14
 80207d2:	dd1a      	ble.n	802080a <__ieee754_logf+0x17e>
 80207d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80207d8:	ee20 7a07 	vmul.f32	s14, s0, s14
 80207dc:	ee27 7a00 	vmul.f32	s14, s14, s0
 80207e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80207e4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80207e8:	b912      	cbnz	r2, 80207f0 <__ieee754_logf+0x164>
 80207ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80207ee:	e7ac      	b.n	802074a <__ieee754_logf+0xbe>
 80207f0:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8020844 <__ieee754_logf+0x1b8>
 80207f4:	eee6 7a86 	vfma.f32	s15, s13, s12
 80207f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80207fc:	ee37 0a40 	vsub.f32	s0, s14, s0
 8020800:	eddf 7a11 	vldr	s15, [pc, #68]	; 8020848 <__ieee754_logf+0x1bc>
 8020804:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8020808:	4770      	bx	lr
 802080a:	ee70 7a67 	vsub.f32	s15, s0, s15
 802080e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8020812:	b912      	cbnz	r2, 802081a <__ieee754_logf+0x18e>
 8020814:	ee30 0a67 	vsub.f32	s0, s0, s15
 8020818:	4770      	bx	lr
 802081a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8020844 <__ieee754_logf+0x1b8>
 802081e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8020822:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8020826:	e7eb      	b.n	8020800 <__ieee754_logf+0x174>
 8020828:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8020834 <__ieee754_logf+0x1a8>
 802082c:	4770      	bx	lr
 802082e:	bf00      	nop
 8020830:	cc000000 	.word	0xcc000000
 8020834:	00000000 	.word	0x00000000
 8020838:	4c000000 	.word	0x4c000000
 802083c:	004afb20 	.word	0x004afb20
 8020840:	007ffff0 	.word	0x007ffff0
 8020844:	3717f7d1 	.word	0x3717f7d1
 8020848:	3f317180 	.word	0x3f317180
 802084c:	3eaaaaab 	.word	0x3eaaaaab
 8020850:	3e1cd04f 	.word	0x3e1cd04f
 8020854:	3e178897 	.word	0x3e178897
 8020858:	ffcf5c30 	.word	0xffcf5c30
 802085c:	3e638e29 	.word	0x3e638e29
 8020860:	3ecccccd 	.word	0x3ecccccd
 8020864:	3e3a3325 	.word	0x3e3a3325
 8020868:	3e924925 	.word	0x3e924925
 802086c:	3f2aaaab 	.word	0x3f2aaaab

08020870 <with_errnof>:
 8020870:	b513      	push	{r0, r1, r4, lr}
 8020872:	4604      	mov	r4, r0
 8020874:	ed8d 0a01 	vstr	s0, [sp, #4]
 8020878:	f7fc fbf2 	bl	801d060 <__errno>
 802087c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8020880:	6004      	str	r4, [r0, #0]
 8020882:	b002      	add	sp, #8
 8020884:	bd10      	pop	{r4, pc}

08020886 <xflowf>:
 8020886:	b130      	cbz	r0, 8020896 <xflowf+0x10>
 8020888:	eef1 7a40 	vneg.f32	s15, s0
 802088c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8020890:	2022      	movs	r0, #34	; 0x22
 8020892:	f7ff bfed 	b.w	8020870 <with_errnof>
 8020896:	eef0 7a40 	vmov.f32	s15, s0
 802089a:	e7f7      	b.n	802088c <xflowf+0x6>

0802089c <__math_uflowf>:
 802089c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80208a4 <__math_uflowf+0x8>
 80208a0:	f7ff bff1 	b.w	8020886 <xflowf>
 80208a4:	10000000 	.word	0x10000000

080208a8 <__math_oflowf>:
 80208a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80208b0 <__math_oflowf+0x8>
 80208ac:	f7ff bfeb 	b.w	8020886 <xflowf>
 80208b0:	70000000 	.word	0x70000000
 80208b4:	00000000 	.word	0x00000000

080208b8 <__kernel_rem_pio2>:
 80208b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208bc:	ed2d 8b02 	vpush	{d8}
 80208c0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80208c4:	f112 0f14 	cmn.w	r2, #20
 80208c8:	9306      	str	r3, [sp, #24]
 80208ca:	9104      	str	r1, [sp, #16]
 80208cc:	4bc2      	ldr	r3, [pc, #776]	; (8020bd8 <__kernel_rem_pio2+0x320>)
 80208ce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80208d0:	9009      	str	r0, [sp, #36]	; 0x24
 80208d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80208d6:	9300      	str	r3, [sp, #0]
 80208d8:	9b06      	ldr	r3, [sp, #24]
 80208da:	f103 33ff 	add.w	r3, r3, #4294967295
 80208de:	bfa8      	it	ge
 80208e0:	1ed4      	subge	r4, r2, #3
 80208e2:	9305      	str	r3, [sp, #20]
 80208e4:	bfb2      	itee	lt
 80208e6:	2400      	movlt	r4, #0
 80208e8:	2318      	movge	r3, #24
 80208ea:	fb94 f4f3 	sdivge	r4, r4, r3
 80208ee:	f06f 0317 	mvn.w	r3, #23
 80208f2:	fb04 3303 	mla	r3, r4, r3, r3
 80208f6:	eb03 0a02 	add.w	sl, r3, r2
 80208fa:	9b00      	ldr	r3, [sp, #0]
 80208fc:	9a05      	ldr	r2, [sp, #20]
 80208fe:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8020bc8 <__kernel_rem_pio2+0x310>
 8020902:	eb03 0802 	add.w	r8, r3, r2
 8020906:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8020908:	1aa7      	subs	r7, r4, r2
 802090a:	ae20      	add	r6, sp, #128	; 0x80
 802090c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8020910:	2500      	movs	r5, #0
 8020912:	4545      	cmp	r5, r8
 8020914:	dd13      	ble.n	802093e <__kernel_rem_pio2+0x86>
 8020916:	9b06      	ldr	r3, [sp, #24]
 8020918:	aa20      	add	r2, sp, #128	; 0x80
 802091a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 802091e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8020922:	f04f 0800 	mov.w	r8, #0
 8020926:	9b00      	ldr	r3, [sp, #0]
 8020928:	4598      	cmp	r8, r3
 802092a:	dc31      	bgt.n	8020990 <__kernel_rem_pio2+0xd8>
 802092c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8020bc8 <__kernel_rem_pio2+0x310>
 8020930:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8020934:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020938:	462f      	mov	r7, r5
 802093a:	2600      	movs	r6, #0
 802093c:	e01b      	b.n	8020976 <__kernel_rem_pio2+0xbe>
 802093e:	42ef      	cmn	r7, r5
 8020940:	d407      	bmi.n	8020952 <__kernel_rem_pio2+0x9a>
 8020942:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8020946:	f7df fdc5 	bl	80004d4 <__aeabi_i2d>
 802094a:	e8e6 0102 	strd	r0, r1, [r6], #8
 802094e:	3501      	adds	r5, #1
 8020950:	e7df      	b.n	8020912 <__kernel_rem_pio2+0x5a>
 8020952:	ec51 0b18 	vmov	r0, r1, d8
 8020956:	e7f8      	b.n	802094a <__kernel_rem_pio2+0x92>
 8020958:	e9d7 2300 	ldrd	r2, r3, [r7]
 802095c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8020960:	f7df fe22 	bl	80005a8 <__aeabi_dmul>
 8020964:	4602      	mov	r2, r0
 8020966:	460b      	mov	r3, r1
 8020968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802096c:	f7df fc66 	bl	800023c <__adddf3>
 8020970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020974:	3601      	adds	r6, #1
 8020976:	9b05      	ldr	r3, [sp, #20]
 8020978:	429e      	cmp	r6, r3
 802097a:	f1a7 0708 	sub.w	r7, r7, #8
 802097e:	ddeb      	ble.n	8020958 <__kernel_rem_pio2+0xa0>
 8020980:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020984:	f108 0801 	add.w	r8, r8, #1
 8020988:	ecab 7b02 	vstmia	fp!, {d7}
 802098c:	3508      	adds	r5, #8
 802098e:	e7ca      	b.n	8020926 <__kernel_rem_pio2+0x6e>
 8020990:	9b00      	ldr	r3, [sp, #0]
 8020992:	aa0c      	add	r2, sp, #48	; 0x30
 8020994:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020998:	930b      	str	r3, [sp, #44]	; 0x2c
 802099a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 802099c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80209a0:	9c00      	ldr	r4, [sp, #0]
 80209a2:	930a      	str	r3, [sp, #40]	; 0x28
 80209a4:	00e3      	lsls	r3, r4, #3
 80209a6:	9308      	str	r3, [sp, #32]
 80209a8:	ab98      	add	r3, sp, #608	; 0x260
 80209aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80209ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80209b2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80209b6:	ab70      	add	r3, sp, #448	; 0x1c0
 80209b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80209bc:	46c3      	mov	fp, r8
 80209be:	46a1      	mov	r9, r4
 80209c0:	f1b9 0f00 	cmp.w	r9, #0
 80209c4:	f1a5 0508 	sub.w	r5, r5, #8
 80209c8:	dc77      	bgt.n	8020aba <__kernel_rem_pio2+0x202>
 80209ca:	ec47 6b10 	vmov	d0, r6, r7
 80209ce:	4650      	mov	r0, sl
 80209d0:	f000 fd22 	bl	8021418 <scalbn>
 80209d4:	ec57 6b10 	vmov	r6, r7, d0
 80209d8:	2200      	movs	r2, #0
 80209da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80209de:	ee10 0a10 	vmov	r0, s0
 80209e2:	4639      	mov	r1, r7
 80209e4:	f7df fde0 	bl	80005a8 <__aeabi_dmul>
 80209e8:	ec41 0b10 	vmov	d0, r0, r1
 80209ec:	f7ff f934 	bl	801fc58 <floor>
 80209f0:	4b7a      	ldr	r3, [pc, #488]	; (8020bdc <__kernel_rem_pio2+0x324>)
 80209f2:	ec51 0b10 	vmov	r0, r1, d0
 80209f6:	2200      	movs	r2, #0
 80209f8:	f7df fdd6 	bl	80005a8 <__aeabi_dmul>
 80209fc:	4602      	mov	r2, r0
 80209fe:	460b      	mov	r3, r1
 8020a00:	4630      	mov	r0, r6
 8020a02:	4639      	mov	r1, r7
 8020a04:	f7df fc18 	bl	8000238 <__aeabi_dsub>
 8020a08:	460f      	mov	r7, r1
 8020a0a:	4606      	mov	r6, r0
 8020a0c:	f7e0 f87c 	bl	8000b08 <__aeabi_d2iz>
 8020a10:	9002      	str	r0, [sp, #8]
 8020a12:	f7df fd5f 	bl	80004d4 <__aeabi_i2d>
 8020a16:	4602      	mov	r2, r0
 8020a18:	460b      	mov	r3, r1
 8020a1a:	4630      	mov	r0, r6
 8020a1c:	4639      	mov	r1, r7
 8020a1e:	f7df fc0b 	bl	8000238 <__aeabi_dsub>
 8020a22:	f1ba 0f00 	cmp.w	sl, #0
 8020a26:	4606      	mov	r6, r0
 8020a28:	460f      	mov	r7, r1
 8020a2a:	dd6d      	ble.n	8020b08 <__kernel_rem_pio2+0x250>
 8020a2c:	1e61      	subs	r1, r4, #1
 8020a2e:	ab0c      	add	r3, sp, #48	; 0x30
 8020a30:	9d02      	ldr	r5, [sp, #8]
 8020a32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8020a36:	f1ca 0018 	rsb	r0, sl, #24
 8020a3a:	fa43 f200 	asr.w	r2, r3, r0
 8020a3e:	4415      	add	r5, r2
 8020a40:	4082      	lsls	r2, r0
 8020a42:	1a9b      	subs	r3, r3, r2
 8020a44:	aa0c      	add	r2, sp, #48	; 0x30
 8020a46:	9502      	str	r5, [sp, #8]
 8020a48:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8020a4c:	f1ca 0217 	rsb	r2, sl, #23
 8020a50:	fa43 fb02 	asr.w	fp, r3, r2
 8020a54:	f1bb 0f00 	cmp.w	fp, #0
 8020a58:	dd65      	ble.n	8020b26 <__kernel_rem_pio2+0x26e>
 8020a5a:	9b02      	ldr	r3, [sp, #8]
 8020a5c:	2200      	movs	r2, #0
 8020a5e:	3301      	adds	r3, #1
 8020a60:	9302      	str	r3, [sp, #8]
 8020a62:	4615      	mov	r5, r2
 8020a64:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8020a68:	4294      	cmp	r4, r2
 8020a6a:	f300 809f 	bgt.w	8020bac <__kernel_rem_pio2+0x2f4>
 8020a6e:	f1ba 0f00 	cmp.w	sl, #0
 8020a72:	dd07      	ble.n	8020a84 <__kernel_rem_pio2+0x1cc>
 8020a74:	f1ba 0f01 	cmp.w	sl, #1
 8020a78:	f000 80c1 	beq.w	8020bfe <__kernel_rem_pio2+0x346>
 8020a7c:	f1ba 0f02 	cmp.w	sl, #2
 8020a80:	f000 80c7 	beq.w	8020c12 <__kernel_rem_pio2+0x35a>
 8020a84:	f1bb 0f02 	cmp.w	fp, #2
 8020a88:	d14d      	bne.n	8020b26 <__kernel_rem_pio2+0x26e>
 8020a8a:	4632      	mov	r2, r6
 8020a8c:	463b      	mov	r3, r7
 8020a8e:	4954      	ldr	r1, [pc, #336]	; (8020be0 <__kernel_rem_pio2+0x328>)
 8020a90:	2000      	movs	r0, #0
 8020a92:	f7df fbd1 	bl	8000238 <__aeabi_dsub>
 8020a96:	4606      	mov	r6, r0
 8020a98:	460f      	mov	r7, r1
 8020a9a:	2d00      	cmp	r5, #0
 8020a9c:	d043      	beq.n	8020b26 <__kernel_rem_pio2+0x26e>
 8020a9e:	4650      	mov	r0, sl
 8020aa0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8020bd0 <__kernel_rem_pio2+0x318>
 8020aa4:	f000 fcb8 	bl	8021418 <scalbn>
 8020aa8:	4630      	mov	r0, r6
 8020aaa:	4639      	mov	r1, r7
 8020aac:	ec53 2b10 	vmov	r2, r3, d0
 8020ab0:	f7df fbc2 	bl	8000238 <__aeabi_dsub>
 8020ab4:	4606      	mov	r6, r0
 8020ab6:	460f      	mov	r7, r1
 8020ab8:	e035      	b.n	8020b26 <__kernel_rem_pio2+0x26e>
 8020aba:	4b4a      	ldr	r3, [pc, #296]	; (8020be4 <__kernel_rem_pio2+0x32c>)
 8020abc:	2200      	movs	r2, #0
 8020abe:	4630      	mov	r0, r6
 8020ac0:	4639      	mov	r1, r7
 8020ac2:	f7df fd71 	bl	80005a8 <__aeabi_dmul>
 8020ac6:	f7e0 f81f 	bl	8000b08 <__aeabi_d2iz>
 8020aca:	f7df fd03 	bl	80004d4 <__aeabi_i2d>
 8020ace:	4602      	mov	r2, r0
 8020ad0:	460b      	mov	r3, r1
 8020ad2:	ec43 2b18 	vmov	d8, r2, r3
 8020ad6:	4b44      	ldr	r3, [pc, #272]	; (8020be8 <__kernel_rem_pio2+0x330>)
 8020ad8:	2200      	movs	r2, #0
 8020ada:	f7df fd65 	bl	80005a8 <__aeabi_dmul>
 8020ade:	4602      	mov	r2, r0
 8020ae0:	460b      	mov	r3, r1
 8020ae2:	4630      	mov	r0, r6
 8020ae4:	4639      	mov	r1, r7
 8020ae6:	f7df fba7 	bl	8000238 <__aeabi_dsub>
 8020aea:	f7e0 f80d 	bl	8000b08 <__aeabi_d2iz>
 8020aee:	e9d5 2300 	ldrd	r2, r3, [r5]
 8020af2:	f84b 0b04 	str.w	r0, [fp], #4
 8020af6:	ec51 0b18 	vmov	r0, r1, d8
 8020afa:	f7df fb9f 	bl	800023c <__adddf3>
 8020afe:	f109 39ff 	add.w	r9, r9, #4294967295
 8020b02:	4606      	mov	r6, r0
 8020b04:	460f      	mov	r7, r1
 8020b06:	e75b      	b.n	80209c0 <__kernel_rem_pio2+0x108>
 8020b08:	d106      	bne.n	8020b18 <__kernel_rem_pio2+0x260>
 8020b0a:	1e63      	subs	r3, r4, #1
 8020b0c:	aa0c      	add	r2, sp, #48	; 0x30
 8020b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020b12:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8020b16:	e79d      	b.n	8020a54 <__kernel_rem_pio2+0x19c>
 8020b18:	4b34      	ldr	r3, [pc, #208]	; (8020bec <__kernel_rem_pio2+0x334>)
 8020b1a:	2200      	movs	r2, #0
 8020b1c:	f7df ffca 	bl	8000ab4 <__aeabi_dcmpge>
 8020b20:	2800      	cmp	r0, #0
 8020b22:	d140      	bne.n	8020ba6 <__kernel_rem_pio2+0x2ee>
 8020b24:	4683      	mov	fp, r0
 8020b26:	2200      	movs	r2, #0
 8020b28:	2300      	movs	r3, #0
 8020b2a:	4630      	mov	r0, r6
 8020b2c:	4639      	mov	r1, r7
 8020b2e:	f7df ffa3 	bl	8000a78 <__aeabi_dcmpeq>
 8020b32:	2800      	cmp	r0, #0
 8020b34:	f000 80c1 	beq.w	8020cba <__kernel_rem_pio2+0x402>
 8020b38:	1e65      	subs	r5, r4, #1
 8020b3a:	462b      	mov	r3, r5
 8020b3c:	2200      	movs	r2, #0
 8020b3e:	9900      	ldr	r1, [sp, #0]
 8020b40:	428b      	cmp	r3, r1
 8020b42:	da6d      	bge.n	8020c20 <__kernel_rem_pio2+0x368>
 8020b44:	2a00      	cmp	r2, #0
 8020b46:	f000 808a 	beq.w	8020c5e <__kernel_rem_pio2+0x3a6>
 8020b4a:	ab0c      	add	r3, sp, #48	; 0x30
 8020b4c:	f1aa 0a18 	sub.w	sl, sl, #24
 8020b50:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8020b54:	2b00      	cmp	r3, #0
 8020b56:	f000 80ae 	beq.w	8020cb6 <__kernel_rem_pio2+0x3fe>
 8020b5a:	4650      	mov	r0, sl
 8020b5c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8020bd0 <__kernel_rem_pio2+0x318>
 8020b60:	f000 fc5a 	bl	8021418 <scalbn>
 8020b64:	1c6b      	adds	r3, r5, #1
 8020b66:	00da      	lsls	r2, r3, #3
 8020b68:	9205      	str	r2, [sp, #20]
 8020b6a:	ec57 6b10 	vmov	r6, r7, d0
 8020b6e:	aa70      	add	r2, sp, #448	; 0x1c0
 8020b70:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8020be4 <__kernel_rem_pio2+0x32c>
 8020b74:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8020b78:	462c      	mov	r4, r5
 8020b7a:	f04f 0800 	mov.w	r8, #0
 8020b7e:	2c00      	cmp	r4, #0
 8020b80:	f280 80d4 	bge.w	8020d2c <__kernel_rem_pio2+0x474>
 8020b84:	462c      	mov	r4, r5
 8020b86:	2c00      	cmp	r4, #0
 8020b88:	f2c0 8102 	blt.w	8020d90 <__kernel_rem_pio2+0x4d8>
 8020b8c:	4b18      	ldr	r3, [pc, #96]	; (8020bf0 <__kernel_rem_pio2+0x338>)
 8020b8e:	461e      	mov	r6, r3
 8020b90:	ab70      	add	r3, sp, #448	; 0x1c0
 8020b92:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8020b96:	1b2b      	subs	r3, r5, r4
 8020b98:	f04f 0900 	mov.w	r9, #0
 8020b9c:	f04f 0a00 	mov.w	sl, #0
 8020ba0:	2700      	movs	r7, #0
 8020ba2:	9306      	str	r3, [sp, #24]
 8020ba4:	e0e6      	b.n	8020d74 <__kernel_rem_pio2+0x4bc>
 8020ba6:	f04f 0b02 	mov.w	fp, #2
 8020baa:	e756      	b.n	8020a5a <__kernel_rem_pio2+0x1a2>
 8020bac:	f8d8 3000 	ldr.w	r3, [r8]
 8020bb0:	bb05      	cbnz	r5, 8020bf4 <__kernel_rem_pio2+0x33c>
 8020bb2:	b123      	cbz	r3, 8020bbe <__kernel_rem_pio2+0x306>
 8020bb4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8020bb8:	f8c8 3000 	str.w	r3, [r8]
 8020bbc:	2301      	movs	r3, #1
 8020bbe:	3201      	adds	r2, #1
 8020bc0:	f108 0804 	add.w	r8, r8, #4
 8020bc4:	461d      	mov	r5, r3
 8020bc6:	e74f      	b.n	8020a68 <__kernel_rem_pio2+0x1b0>
	...
 8020bd4:	3ff00000 	.word	0x3ff00000
 8020bd8:	08023f28 	.word	0x08023f28
 8020bdc:	40200000 	.word	0x40200000
 8020be0:	3ff00000 	.word	0x3ff00000
 8020be4:	3e700000 	.word	0x3e700000
 8020be8:	41700000 	.word	0x41700000
 8020bec:	3fe00000 	.word	0x3fe00000
 8020bf0:	08023ee8 	.word	0x08023ee8
 8020bf4:	1acb      	subs	r3, r1, r3
 8020bf6:	f8c8 3000 	str.w	r3, [r8]
 8020bfa:	462b      	mov	r3, r5
 8020bfc:	e7df      	b.n	8020bbe <__kernel_rem_pio2+0x306>
 8020bfe:	1e62      	subs	r2, r4, #1
 8020c00:	ab0c      	add	r3, sp, #48	; 0x30
 8020c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020c06:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8020c0a:	a90c      	add	r1, sp, #48	; 0x30
 8020c0c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8020c10:	e738      	b.n	8020a84 <__kernel_rem_pio2+0x1cc>
 8020c12:	1e62      	subs	r2, r4, #1
 8020c14:	ab0c      	add	r3, sp, #48	; 0x30
 8020c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020c1a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8020c1e:	e7f4      	b.n	8020c0a <__kernel_rem_pio2+0x352>
 8020c20:	a90c      	add	r1, sp, #48	; 0x30
 8020c22:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8020c26:	3b01      	subs	r3, #1
 8020c28:	430a      	orrs	r2, r1
 8020c2a:	e788      	b.n	8020b3e <__kernel_rem_pio2+0x286>
 8020c2c:	3301      	adds	r3, #1
 8020c2e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8020c32:	2900      	cmp	r1, #0
 8020c34:	d0fa      	beq.n	8020c2c <__kernel_rem_pio2+0x374>
 8020c36:	9a08      	ldr	r2, [sp, #32]
 8020c38:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8020c3c:	446a      	add	r2, sp
 8020c3e:	3a98      	subs	r2, #152	; 0x98
 8020c40:	9208      	str	r2, [sp, #32]
 8020c42:	9a06      	ldr	r2, [sp, #24]
 8020c44:	a920      	add	r1, sp, #128	; 0x80
 8020c46:	18a2      	adds	r2, r4, r2
 8020c48:	18e3      	adds	r3, r4, r3
 8020c4a:	f104 0801 	add.w	r8, r4, #1
 8020c4e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8020c52:	9302      	str	r3, [sp, #8]
 8020c54:	9b02      	ldr	r3, [sp, #8]
 8020c56:	4543      	cmp	r3, r8
 8020c58:	da04      	bge.n	8020c64 <__kernel_rem_pio2+0x3ac>
 8020c5a:	461c      	mov	r4, r3
 8020c5c:	e6a2      	b.n	80209a4 <__kernel_rem_pio2+0xec>
 8020c5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020c60:	2301      	movs	r3, #1
 8020c62:	e7e4      	b.n	8020c2e <__kernel_rem_pio2+0x376>
 8020c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c66:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8020c6a:	f7df fc33 	bl	80004d4 <__aeabi_i2d>
 8020c6e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8020c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c74:	46ab      	mov	fp, r5
 8020c76:	461c      	mov	r4, r3
 8020c78:	f04f 0900 	mov.w	r9, #0
 8020c7c:	2600      	movs	r6, #0
 8020c7e:	2700      	movs	r7, #0
 8020c80:	9b05      	ldr	r3, [sp, #20]
 8020c82:	4599      	cmp	r9, r3
 8020c84:	dd06      	ble.n	8020c94 <__kernel_rem_pio2+0x3dc>
 8020c86:	9b08      	ldr	r3, [sp, #32]
 8020c88:	e8e3 6702 	strd	r6, r7, [r3], #8
 8020c8c:	f108 0801 	add.w	r8, r8, #1
 8020c90:	9308      	str	r3, [sp, #32]
 8020c92:	e7df      	b.n	8020c54 <__kernel_rem_pio2+0x39c>
 8020c94:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8020c98:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8020c9c:	f7df fc84 	bl	80005a8 <__aeabi_dmul>
 8020ca0:	4602      	mov	r2, r0
 8020ca2:	460b      	mov	r3, r1
 8020ca4:	4630      	mov	r0, r6
 8020ca6:	4639      	mov	r1, r7
 8020ca8:	f7df fac8 	bl	800023c <__adddf3>
 8020cac:	f109 0901 	add.w	r9, r9, #1
 8020cb0:	4606      	mov	r6, r0
 8020cb2:	460f      	mov	r7, r1
 8020cb4:	e7e4      	b.n	8020c80 <__kernel_rem_pio2+0x3c8>
 8020cb6:	3d01      	subs	r5, #1
 8020cb8:	e747      	b.n	8020b4a <__kernel_rem_pio2+0x292>
 8020cba:	ec47 6b10 	vmov	d0, r6, r7
 8020cbe:	f1ca 0000 	rsb	r0, sl, #0
 8020cc2:	f000 fba9 	bl	8021418 <scalbn>
 8020cc6:	ec57 6b10 	vmov	r6, r7, d0
 8020cca:	4ba0      	ldr	r3, [pc, #640]	; (8020f4c <__kernel_rem_pio2+0x694>)
 8020ccc:	ee10 0a10 	vmov	r0, s0
 8020cd0:	2200      	movs	r2, #0
 8020cd2:	4639      	mov	r1, r7
 8020cd4:	f7df feee 	bl	8000ab4 <__aeabi_dcmpge>
 8020cd8:	b1f8      	cbz	r0, 8020d1a <__kernel_rem_pio2+0x462>
 8020cda:	4b9d      	ldr	r3, [pc, #628]	; (8020f50 <__kernel_rem_pio2+0x698>)
 8020cdc:	2200      	movs	r2, #0
 8020cde:	4630      	mov	r0, r6
 8020ce0:	4639      	mov	r1, r7
 8020ce2:	f7df fc61 	bl	80005a8 <__aeabi_dmul>
 8020ce6:	f7df ff0f 	bl	8000b08 <__aeabi_d2iz>
 8020cea:	4680      	mov	r8, r0
 8020cec:	f7df fbf2 	bl	80004d4 <__aeabi_i2d>
 8020cf0:	4b96      	ldr	r3, [pc, #600]	; (8020f4c <__kernel_rem_pio2+0x694>)
 8020cf2:	2200      	movs	r2, #0
 8020cf4:	f7df fc58 	bl	80005a8 <__aeabi_dmul>
 8020cf8:	460b      	mov	r3, r1
 8020cfa:	4602      	mov	r2, r0
 8020cfc:	4639      	mov	r1, r7
 8020cfe:	4630      	mov	r0, r6
 8020d00:	f7df fa9a 	bl	8000238 <__aeabi_dsub>
 8020d04:	f7df ff00 	bl	8000b08 <__aeabi_d2iz>
 8020d08:	1c65      	adds	r5, r4, #1
 8020d0a:	ab0c      	add	r3, sp, #48	; 0x30
 8020d0c:	f10a 0a18 	add.w	sl, sl, #24
 8020d10:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8020d14:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8020d18:	e71f      	b.n	8020b5a <__kernel_rem_pio2+0x2a2>
 8020d1a:	4630      	mov	r0, r6
 8020d1c:	4639      	mov	r1, r7
 8020d1e:	f7df fef3 	bl	8000b08 <__aeabi_d2iz>
 8020d22:	ab0c      	add	r3, sp, #48	; 0x30
 8020d24:	4625      	mov	r5, r4
 8020d26:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8020d2a:	e716      	b.n	8020b5a <__kernel_rem_pio2+0x2a2>
 8020d2c:	ab0c      	add	r3, sp, #48	; 0x30
 8020d2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8020d32:	f7df fbcf 	bl	80004d4 <__aeabi_i2d>
 8020d36:	4632      	mov	r2, r6
 8020d38:	463b      	mov	r3, r7
 8020d3a:	f7df fc35 	bl	80005a8 <__aeabi_dmul>
 8020d3e:	4642      	mov	r2, r8
 8020d40:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8020d44:	464b      	mov	r3, r9
 8020d46:	4630      	mov	r0, r6
 8020d48:	4639      	mov	r1, r7
 8020d4a:	f7df fc2d 	bl	80005a8 <__aeabi_dmul>
 8020d4e:	3c01      	subs	r4, #1
 8020d50:	4606      	mov	r6, r0
 8020d52:	460f      	mov	r7, r1
 8020d54:	e713      	b.n	8020b7e <__kernel_rem_pio2+0x2c6>
 8020d56:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8020d5a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8020d5e:	f7df fc23 	bl	80005a8 <__aeabi_dmul>
 8020d62:	4602      	mov	r2, r0
 8020d64:	460b      	mov	r3, r1
 8020d66:	4648      	mov	r0, r9
 8020d68:	4651      	mov	r1, sl
 8020d6a:	f7df fa67 	bl	800023c <__adddf3>
 8020d6e:	3701      	adds	r7, #1
 8020d70:	4681      	mov	r9, r0
 8020d72:	468a      	mov	sl, r1
 8020d74:	9b00      	ldr	r3, [sp, #0]
 8020d76:	429f      	cmp	r7, r3
 8020d78:	dc02      	bgt.n	8020d80 <__kernel_rem_pio2+0x4c8>
 8020d7a:	9b06      	ldr	r3, [sp, #24]
 8020d7c:	429f      	cmp	r7, r3
 8020d7e:	ddea      	ble.n	8020d56 <__kernel_rem_pio2+0x49e>
 8020d80:	9a06      	ldr	r2, [sp, #24]
 8020d82:	ab48      	add	r3, sp, #288	; 0x120
 8020d84:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8020d88:	e9c6 9a00 	strd	r9, sl, [r6]
 8020d8c:	3c01      	subs	r4, #1
 8020d8e:	e6fa      	b.n	8020b86 <__kernel_rem_pio2+0x2ce>
 8020d90:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8020d92:	2b02      	cmp	r3, #2
 8020d94:	dc0b      	bgt.n	8020dae <__kernel_rem_pio2+0x4f6>
 8020d96:	2b00      	cmp	r3, #0
 8020d98:	dc39      	bgt.n	8020e0e <__kernel_rem_pio2+0x556>
 8020d9a:	d05d      	beq.n	8020e58 <__kernel_rem_pio2+0x5a0>
 8020d9c:	9b02      	ldr	r3, [sp, #8]
 8020d9e:	f003 0007 	and.w	r0, r3, #7
 8020da2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8020da6:	ecbd 8b02 	vpop	{d8}
 8020daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8020db0:	2b03      	cmp	r3, #3
 8020db2:	d1f3      	bne.n	8020d9c <__kernel_rem_pio2+0x4e4>
 8020db4:	9b05      	ldr	r3, [sp, #20]
 8020db6:	9500      	str	r5, [sp, #0]
 8020db8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8020dbc:	eb0d 0403 	add.w	r4, sp, r3
 8020dc0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8020dc4:	46a2      	mov	sl, r4
 8020dc6:	9b00      	ldr	r3, [sp, #0]
 8020dc8:	2b00      	cmp	r3, #0
 8020dca:	f1aa 0a08 	sub.w	sl, sl, #8
 8020dce:	dc69      	bgt.n	8020ea4 <__kernel_rem_pio2+0x5ec>
 8020dd0:	46aa      	mov	sl, r5
 8020dd2:	f1ba 0f01 	cmp.w	sl, #1
 8020dd6:	f1a4 0408 	sub.w	r4, r4, #8
 8020dda:	f300 8083 	bgt.w	8020ee4 <__kernel_rem_pio2+0x62c>
 8020dde:	9c05      	ldr	r4, [sp, #20]
 8020de0:	ab48      	add	r3, sp, #288	; 0x120
 8020de2:	441c      	add	r4, r3
 8020de4:	2000      	movs	r0, #0
 8020de6:	2100      	movs	r1, #0
 8020de8:	2d01      	cmp	r5, #1
 8020dea:	f300 809a 	bgt.w	8020f22 <__kernel_rem_pio2+0x66a>
 8020dee:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8020df2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8020df6:	f1bb 0f00 	cmp.w	fp, #0
 8020dfa:	f040 8098 	bne.w	8020f2e <__kernel_rem_pio2+0x676>
 8020dfe:	9b04      	ldr	r3, [sp, #16]
 8020e00:	e9c3 7800 	strd	r7, r8, [r3]
 8020e04:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8020e08:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8020e0c:	e7c6      	b.n	8020d9c <__kernel_rem_pio2+0x4e4>
 8020e0e:	9e05      	ldr	r6, [sp, #20]
 8020e10:	ab48      	add	r3, sp, #288	; 0x120
 8020e12:	441e      	add	r6, r3
 8020e14:	462c      	mov	r4, r5
 8020e16:	2000      	movs	r0, #0
 8020e18:	2100      	movs	r1, #0
 8020e1a:	2c00      	cmp	r4, #0
 8020e1c:	da33      	bge.n	8020e86 <__kernel_rem_pio2+0x5ce>
 8020e1e:	f1bb 0f00 	cmp.w	fp, #0
 8020e22:	d036      	beq.n	8020e92 <__kernel_rem_pio2+0x5da>
 8020e24:	4602      	mov	r2, r0
 8020e26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020e2a:	9c04      	ldr	r4, [sp, #16]
 8020e2c:	e9c4 2300 	strd	r2, r3, [r4]
 8020e30:	4602      	mov	r2, r0
 8020e32:	460b      	mov	r3, r1
 8020e34:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8020e38:	f7df f9fe 	bl	8000238 <__aeabi_dsub>
 8020e3c:	ae4a      	add	r6, sp, #296	; 0x128
 8020e3e:	2401      	movs	r4, #1
 8020e40:	42a5      	cmp	r5, r4
 8020e42:	da29      	bge.n	8020e98 <__kernel_rem_pio2+0x5e0>
 8020e44:	f1bb 0f00 	cmp.w	fp, #0
 8020e48:	d002      	beq.n	8020e50 <__kernel_rem_pio2+0x598>
 8020e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020e4e:	4619      	mov	r1, r3
 8020e50:	9b04      	ldr	r3, [sp, #16]
 8020e52:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8020e56:	e7a1      	b.n	8020d9c <__kernel_rem_pio2+0x4e4>
 8020e58:	9c05      	ldr	r4, [sp, #20]
 8020e5a:	ab48      	add	r3, sp, #288	; 0x120
 8020e5c:	441c      	add	r4, r3
 8020e5e:	2000      	movs	r0, #0
 8020e60:	2100      	movs	r1, #0
 8020e62:	2d00      	cmp	r5, #0
 8020e64:	da09      	bge.n	8020e7a <__kernel_rem_pio2+0x5c2>
 8020e66:	f1bb 0f00 	cmp.w	fp, #0
 8020e6a:	d002      	beq.n	8020e72 <__kernel_rem_pio2+0x5ba>
 8020e6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020e70:	4619      	mov	r1, r3
 8020e72:	9b04      	ldr	r3, [sp, #16]
 8020e74:	e9c3 0100 	strd	r0, r1, [r3]
 8020e78:	e790      	b.n	8020d9c <__kernel_rem_pio2+0x4e4>
 8020e7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8020e7e:	f7df f9dd 	bl	800023c <__adddf3>
 8020e82:	3d01      	subs	r5, #1
 8020e84:	e7ed      	b.n	8020e62 <__kernel_rem_pio2+0x5aa>
 8020e86:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8020e8a:	f7df f9d7 	bl	800023c <__adddf3>
 8020e8e:	3c01      	subs	r4, #1
 8020e90:	e7c3      	b.n	8020e1a <__kernel_rem_pio2+0x562>
 8020e92:	4602      	mov	r2, r0
 8020e94:	460b      	mov	r3, r1
 8020e96:	e7c8      	b.n	8020e2a <__kernel_rem_pio2+0x572>
 8020e98:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8020e9c:	f7df f9ce 	bl	800023c <__adddf3>
 8020ea0:	3401      	adds	r4, #1
 8020ea2:	e7cd      	b.n	8020e40 <__kernel_rem_pio2+0x588>
 8020ea4:	e9da 8900 	ldrd	r8, r9, [sl]
 8020ea8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8020eac:	9b00      	ldr	r3, [sp, #0]
 8020eae:	3b01      	subs	r3, #1
 8020eb0:	9300      	str	r3, [sp, #0]
 8020eb2:	4632      	mov	r2, r6
 8020eb4:	463b      	mov	r3, r7
 8020eb6:	4640      	mov	r0, r8
 8020eb8:	4649      	mov	r1, r9
 8020eba:	f7df f9bf 	bl	800023c <__adddf3>
 8020ebe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020ec2:	4602      	mov	r2, r0
 8020ec4:	460b      	mov	r3, r1
 8020ec6:	4640      	mov	r0, r8
 8020ec8:	4649      	mov	r1, r9
 8020eca:	f7df f9b5 	bl	8000238 <__aeabi_dsub>
 8020ece:	4632      	mov	r2, r6
 8020ed0:	463b      	mov	r3, r7
 8020ed2:	f7df f9b3 	bl	800023c <__adddf3>
 8020ed6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8020eda:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8020ede:	ed8a 7b00 	vstr	d7, [sl]
 8020ee2:	e770      	b.n	8020dc6 <__kernel_rem_pio2+0x50e>
 8020ee4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8020ee8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8020eec:	4640      	mov	r0, r8
 8020eee:	4632      	mov	r2, r6
 8020ef0:	463b      	mov	r3, r7
 8020ef2:	4649      	mov	r1, r9
 8020ef4:	f7df f9a2 	bl	800023c <__adddf3>
 8020ef8:	e9cd 0100 	strd	r0, r1, [sp]
 8020efc:	4602      	mov	r2, r0
 8020efe:	460b      	mov	r3, r1
 8020f00:	4640      	mov	r0, r8
 8020f02:	4649      	mov	r1, r9
 8020f04:	f7df f998 	bl	8000238 <__aeabi_dsub>
 8020f08:	4632      	mov	r2, r6
 8020f0a:	463b      	mov	r3, r7
 8020f0c:	f7df f996 	bl	800023c <__adddf3>
 8020f10:	ed9d 7b00 	vldr	d7, [sp]
 8020f14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8020f18:	ed84 7b00 	vstr	d7, [r4]
 8020f1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020f20:	e757      	b.n	8020dd2 <__kernel_rem_pio2+0x51a>
 8020f22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8020f26:	f7df f989 	bl	800023c <__adddf3>
 8020f2a:	3d01      	subs	r5, #1
 8020f2c:	e75c      	b.n	8020de8 <__kernel_rem_pio2+0x530>
 8020f2e:	9b04      	ldr	r3, [sp, #16]
 8020f30:	9a04      	ldr	r2, [sp, #16]
 8020f32:	601f      	str	r7, [r3, #0]
 8020f34:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8020f38:	605c      	str	r4, [r3, #4]
 8020f3a:	609d      	str	r5, [r3, #8]
 8020f3c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8020f40:	60d3      	str	r3, [r2, #12]
 8020f42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020f46:	6110      	str	r0, [r2, #16]
 8020f48:	6153      	str	r3, [r2, #20]
 8020f4a:	e727      	b.n	8020d9c <__kernel_rem_pio2+0x4e4>
 8020f4c:	41700000 	.word	0x41700000
 8020f50:	3e700000 	.word	0x3e700000
 8020f54:	00000000 	.word	0x00000000

08020f58 <__ieee754_acos>:
 8020f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f5c:	ec55 4b10 	vmov	r4, r5, d0
 8020f60:	49b7      	ldr	r1, [pc, #732]	; (8021240 <__ieee754_acos+0x2e8>)
 8020f62:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8020f66:	428b      	cmp	r3, r1
 8020f68:	dd1b      	ble.n	8020fa2 <__ieee754_acos+0x4a>
 8020f6a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8020f6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8020f72:	4323      	orrs	r3, r4
 8020f74:	d106      	bne.n	8020f84 <__ieee754_acos+0x2c>
 8020f76:	2d00      	cmp	r5, #0
 8020f78:	f300 8211 	bgt.w	802139e <__ieee754_acos+0x446>
 8020f7c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 80211d8 <__ieee754_acos+0x280>
 8020f80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f84:	ee10 2a10 	vmov	r2, s0
 8020f88:	462b      	mov	r3, r5
 8020f8a:	ee10 0a10 	vmov	r0, s0
 8020f8e:	4629      	mov	r1, r5
 8020f90:	f7df f952 	bl	8000238 <__aeabi_dsub>
 8020f94:	4602      	mov	r2, r0
 8020f96:	460b      	mov	r3, r1
 8020f98:	f7df fc30 	bl	80007fc <__aeabi_ddiv>
 8020f9c:	ec41 0b10 	vmov	d0, r0, r1
 8020fa0:	e7ee      	b.n	8020f80 <__ieee754_acos+0x28>
 8020fa2:	49a8      	ldr	r1, [pc, #672]	; (8021244 <__ieee754_acos+0x2ec>)
 8020fa4:	428b      	cmp	r3, r1
 8020fa6:	f300 8087 	bgt.w	80210b8 <__ieee754_acos+0x160>
 8020faa:	4aa7      	ldr	r2, [pc, #668]	; (8021248 <__ieee754_acos+0x2f0>)
 8020fac:	4293      	cmp	r3, r2
 8020fae:	f340 81f9 	ble.w	80213a4 <__ieee754_acos+0x44c>
 8020fb2:	ee10 2a10 	vmov	r2, s0
 8020fb6:	ee10 0a10 	vmov	r0, s0
 8020fba:	462b      	mov	r3, r5
 8020fbc:	4629      	mov	r1, r5
 8020fbe:	f7df faf3 	bl	80005a8 <__aeabi_dmul>
 8020fc2:	a387      	add	r3, pc, #540	; (adr r3, 80211e0 <__ieee754_acos+0x288>)
 8020fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fc8:	4606      	mov	r6, r0
 8020fca:	460f      	mov	r7, r1
 8020fcc:	f7df faec 	bl	80005a8 <__aeabi_dmul>
 8020fd0:	a385      	add	r3, pc, #532	; (adr r3, 80211e8 <__ieee754_acos+0x290>)
 8020fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fd6:	f7df f931 	bl	800023c <__adddf3>
 8020fda:	4632      	mov	r2, r6
 8020fdc:	463b      	mov	r3, r7
 8020fde:	f7df fae3 	bl	80005a8 <__aeabi_dmul>
 8020fe2:	a383      	add	r3, pc, #524	; (adr r3, 80211f0 <__ieee754_acos+0x298>)
 8020fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fe8:	f7df f926 	bl	8000238 <__aeabi_dsub>
 8020fec:	4632      	mov	r2, r6
 8020fee:	463b      	mov	r3, r7
 8020ff0:	f7df fada 	bl	80005a8 <__aeabi_dmul>
 8020ff4:	a380      	add	r3, pc, #512	; (adr r3, 80211f8 <__ieee754_acos+0x2a0>)
 8020ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ffa:	f7df f91f 	bl	800023c <__adddf3>
 8020ffe:	4632      	mov	r2, r6
 8021000:	463b      	mov	r3, r7
 8021002:	f7df fad1 	bl	80005a8 <__aeabi_dmul>
 8021006:	a37e      	add	r3, pc, #504	; (adr r3, 8021200 <__ieee754_acos+0x2a8>)
 8021008:	e9d3 2300 	ldrd	r2, r3, [r3]
 802100c:	f7df f914 	bl	8000238 <__aeabi_dsub>
 8021010:	4632      	mov	r2, r6
 8021012:	463b      	mov	r3, r7
 8021014:	f7df fac8 	bl	80005a8 <__aeabi_dmul>
 8021018:	a37b      	add	r3, pc, #492	; (adr r3, 8021208 <__ieee754_acos+0x2b0>)
 802101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802101e:	f7df f90d 	bl	800023c <__adddf3>
 8021022:	4632      	mov	r2, r6
 8021024:	463b      	mov	r3, r7
 8021026:	f7df fabf 	bl	80005a8 <__aeabi_dmul>
 802102a:	a379      	add	r3, pc, #484	; (adr r3, 8021210 <__ieee754_acos+0x2b8>)
 802102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021030:	4680      	mov	r8, r0
 8021032:	4689      	mov	r9, r1
 8021034:	4630      	mov	r0, r6
 8021036:	4639      	mov	r1, r7
 8021038:	f7df fab6 	bl	80005a8 <__aeabi_dmul>
 802103c:	a376      	add	r3, pc, #472	; (adr r3, 8021218 <__ieee754_acos+0x2c0>)
 802103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021042:	f7df f8f9 	bl	8000238 <__aeabi_dsub>
 8021046:	4632      	mov	r2, r6
 8021048:	463b      	mov	r3, r7
 802104a:	f7df faad 	bl	80005a8 <__aeabi_dmul>
 802104e:	a374      	add	r3, pc, #464	; (adr r3, 8021220 <__ieee754_acos+0x2c8>)
 8021050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021054:	f7df f8f2 	bl	800023c <__adddf3>
 8021058:	4632      	mov	r2, r6
 802105a:	463b      	mov	r3, r7
 802105c:	f7df faa4 	bl	80005a8 <__aeabi_dmul>
 8021060:	a371      	add	r3, pc, #452	; (adr r3, 8021228 <__ieee754_acos+0x2d0>)
 8021062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021066:	f7df f8e7 	bl	8000238 <__aeabi_dsub>
 802106a:	4632      	mov	r2, r6
 802106c:	463b      	mov	r3, r7
 802106e:	f7df fa9b 	bl	80005a8 <__aeabi_dmul>
 8021072:	4b76      	ldr	r3, [pc, #472]	; (802124c <__ieee754_acos+0x2f4>)
 8021074:	2200      	movs	r2, #0
 8021076:	f7df f8e1 	bl	800023c <__adddf3>
 802107a:	4602      	mov	r2, r0
 802107c:	460b      	mov	r3, r1
 802107e:	4640      	mov	r0, r8
 8021080:	4649      	mov	r1, r9
 8021082:	f7df fbbb 	bl	80007fc <__aeabi_ddiv>
 8021086:	4622      	mov	r2, r4
 8021088:	462b      	mov	r3, r5
 802108a:	f7df fa8d 	bl	80005a8 <__aeabi_dmul>
 802108e:	4602      	mov	r2, r0
 8021090:	460b      	mov	r3, r1
 8021092:	a167      	add	r1, pc, #412	; (adr r1, 8021230 <__ieee754_acos+0x2d8>)
 8021094:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021098:	f7df f8ce 	bl	8000238 <__aeabi_dsub>
 802109c:	4602      	mov	r2, r0
 802109e:	460b      	mov	r3, r1
 80210a0:	4620      	mov	r0, r4
 80210a2:	4629      	mov	r1, r5
 80210a4:	f7df f8c8 	bl	8000238 <__aeabi_dsub>
 80210a8:	4602      	mov	r2, r0
 80210aa:	460b      	mov	r3, r1
 80210ac:	a162      	add	r1, pc, #392	; (adr r1, 8021238 <__ieee754_acos+0x2e0>)
 80210ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80210b2:	f7df f8c1 	bl	8000238 <__aeabi_dsub>
 80210b6:	e771      	b.n	8020f9c <__ieee754_acos+0x44>
 80210b8:	2d00      	cmp	r5, #0
 80210ba:	f280 80cb 	bge.w	8021254 <__ieee754_acos+0x2fc>
 80210be:	ee10 0a10 	vmov	r0, s0
 80210c2:	4b62      	ldr	r3, [pc, #392]	; (802124c <__ieee754_acos+0x2f4>)
 80210c4:	2200      	movs	r2, #0
 80210c6:	4629      	mov	r1, r5
 80210c8:	f7df f8b8 	bl	800023c <__adddf3>
 80210cc:	4b60      	ldr	r3, [pc, #384]	; (8021250 <__ieee754_acos+0x2f8>)
 80210ce:	2200      	movs	r2, #0
 80210d0:	f7df fa6a 	bl	80005a8 <__aeabi_dmul>
 80210d4:	a342      	add	r3, pc, #264	; (adr r3, 80211e0 <__ieee754_acos+0x288>)
 80210d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210da:	4604      	mov	r4, r0
 80210dc:	460d      	mov	r5, r1
 80210de:	f7df fa63 	bl	80005a8 <__aeabi_dmul>
 80210e2:	a341      	add	r3, pc, #260	; (adr r3, 80211e8 <__ieee754_acos+0x290>)
 80210e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210e8:	f7df f8a8 	bl	800023c <__adddf3>
 80210ec:	4622      	mov	r2, r4
 80210ee:	462b      	mov	r3, r5
 80210f0:	f7df fa5a 	bl	80005a8 <__aeabi_dmul>
 80210f4:	a33e      	add	r3, pc, #248	; (adr r3, 80211f0 <__ieee754_acos+0x298>)
 80210f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210fa:	f7df f89d 	bl	8000238 <__aeabi_dsub>
 80210fe:	4622      	mov	r2, r4
 8021100:	462b      	mov	r3, r5
 8021102:	f7df fa51 	bl	80005a8 <__aeabi_dmul>
 8021106:	a33c      	add	r3, pc, #240	; (adr r3, 80211f8 <__ieee754_acos+0x2a0>)
 8021108:	e9d3 2300 	ldrd	r2, r3, [r3]
 802110c:	f7df f896 	bl	800023c <__adddf3>
 8021110:	4622      	mov	r2, r4
 8021112:	462b      	mov	r3, r5
 8021114:	f7df fa48 	bl	80005a8 <__aeabi_dmul>
 8021118:	a339      	add	r3, pc, #228	; (adr r3, 8021200 <__ieee754_acos+0x2a8>)
 802111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802111e:	f7df f88b 	bl	8000238 <__aeabi_dsub>
 8021122:	4622      	mov	r2, r4
 8021124:	462b      	mov	r3, r5
 8021126:	f7df fa3f 	bl	80005a8 <__aeabi_dmul>
 802112a:	a337      	add	r3, pc, #220	; (adr r3, 8021208 <__ieee754_acos+0x2b0>)
 802112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021130:	f7df f884 	bl	800023c <__adddf3>
 8021134:	4622      	mov	r2, r4
 8021136:	462b      	mov	r3, r5
 8021138:	f7df fa36 	bl	80005a8 <__aeabi_dmul>
 802113c:	ec45 4b10 	vmov	d0, r4, r5
 8021140:	4680      	mov	r8, r0
 8021142:	4689      	mov	r9, r1
 8021144:	f000 f9e6 	bl	8021514 <__ieee754_sqrt>
 8021148:	a331      	add	r3, pc, #196	; (adr r3, 8021210 <__ieee754_acos+0x2b8>)
 802114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802114e:	4620      	mov	r0, r4
 8021150:	4629      	mov	r1, r5
 8021152:	ec57 6b10 	vmov	r6, r7, d0
 8021156:	f7df fa27 	bl	80005a8 <__aeabi_dmul>
 802115a:	a32f      	add	r3, pc, #188	; (adr r3, 8021218 <__ieee754_acos+0x2c0>)
 802115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021160:	f7df f86a 	bl	8000238 <__aeabi_dsub>
 8021164:	4622      	mov	r2, r4
 8021166:	462b      	mov	r3, r5
 8021168:	f7df fa1e 	bl	80005a8 <__aeabi_dmul>
 802116c:	a32c      	add	r3, pc, #176	; (adr r3, 8021220 <__ieee754_acos+0x2c8>)
 802116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021172:	f7df f863 	bl	800023c <__adddf3>
 8021176:	4622      	mov	r2, r4
 8021178:	462b      	mov	r3, r5
 802117a:	f7df fa15 	bl	80005a8 <__aeabi_dmul>
 802117e:	a32a      	add	r3, pc, #168	; (adr r3, 8021228 <__ieee754_acos+0x2d0>)
 8021180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021184:	f7df f858 	bl	8000238 <__aeabi_dsub>
 8021188:	4622      	mov	r2, r4
 802118a:	462b      	mov	r3, r5
 802118c:	f7df fa0c 	bl	80005a8 <__aeabi_dmul>
 8021190:	4b2e      	ldr	r3, [pc, #184]	; (802124c <__ieee754_acos+0x2f4>)
 8021192:	2200      	movs	r2, #0
 8021194:	f7df f852 	bl	800023c <__adddf3>
 8021198:	4602      	mov	r2, r0
 802119a:	460b      	mov	r3, r1
 802119c:	4640      	mov	r0, r8
 802119e:	4649      	mov	r1, r9
 80211a0:	f7df fb2c 	bl	80007fc <__aeabi_ddiv>
 80211a4:	4632      	mov	r2, r6
 80211a6:	463b      	mov	r3, r7
 80211a8:	f7df f9fe 	bl	80005a8 <__aeabi_dmul>
 80211ac:	a320      	add	r3, pc, #128	; (adr r3, 8021230 <__ieee754_acos+0x2d8>)
 80211ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211b2:	f7df f841 	bl	8000238 <__aeabi_dsub>
 80211b6:	4632      	mov	r2, r6
 80211b8:	463b      	mov	r3, r7
 80211ba:	f7df f83f 	bl	800023c <__adddf3>
 80211be:	4602      	mov	r2, r0
 80211c0:	460b      	mov	r3, r1
 80211c2:	f7df f83b 	bl	800023c <__adddf3>
 80211c6:	4602      	mov	r2, r0
 80211c8:	460b      	mov	r3, r1
 80211ca:	a103      	add	r1, pc, #12	; (adr r1, 80211d8 <__ieee754_acos+0x280>)
 80211cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80211d0:	e76f      	b.n	80210b2 <__ieee754_acos+0x15a>
 80211d2:	bf00      	nop
 80211d4:	f3af 8000 	nop.w
 80211d8:	54442d18 	.word	0x54442d18
 80211dc:	400921fb 	.word	0x400921fb
 80211e0:	0dfdf709 	.word	0x0dfdf709
 80211e4:	3f023de1 	.word	0x3f023de1
 80211e8:	7501b288 	.word	0x7501b288
 80211ec:	3f49efe0 	.word	0x3f49efe0
 80211f0:	b5688f3b 	.word	0xb5688f3b
 80211f4:	3fa48228 	.word	0x3fa48228
 80211f8:	0e884455 	.word	0x0e884455
 80211fc:	3fc9c155 	.word	0x3fc9c155
 8021200:	03eb6f7d 	.word	0x03eb6f7d
 8021204:	3fd4d612 	.word	0x3fd4d612
 8021208:	55555555 	.word	0x55555555
 802120c:	3fc55555 	.word	0x3fc55555
 8021210:	b12e9282 	.word	0xb12e9282
 8021214:	3fb3b8c5 	.word	0x3fb3b8c5
 8021218:	1b8d0159 	.word	0x1b8d0159
 802121c:	3fe6066c 	.word	0x3fe6066c
 8021220:	9c598ac8 	.word	0x9c598ac8
 8021224:	40002ae5 	.word	0x40002ae5
 8021228:	1c8a2d4b 	.word	0x1c8a2d4b
 802122c:	40033a27 	.word	0x40033a27
 8021230:	33145c07 	.word	0x33145c07
 8021234:	3c91a626 	.word	0x3c91a626
 8021238:	54442d18 	.word	0x54442d18
 802123c:	3ff921fb 	.word	0x3ff921fb
 8021240:	3fefffff 	.word	0x3fefffff
 8021244:	3fdfffff 	.word	0x3fdfffff
 8021248:	3c600000 	.word	0x3c600000
 802124c:	3ff00000 	.word	0x3ff00000
 8021250:	3fe00000 	.word	0x3fe00000
 8021254:	ee10 2a10 	vmov	r2, s0
 8021258:	462b      	mov	r3, r5
 802125a:	496d      	ldr	r1, [pc, #436]	; (8021410 <__ieee754_acos+0x4b8>)
 802125c:	2000      	movs	r0, #0
 802125e:	f7de ffeb 	bl	8000238 <__aeabi_dsub>
 8021262:	4b6c      	ldr	r3, [pc, #432]	; (8021414 <__ieee754_acos+0x4bc>)
 8021264:	2200      	movs	r2, #0
 8021266:	f7df f99f 	bl	80005a8 <__aeabi_dmul>
 802126a:	4604      	mov	r4, r0
 802126c:	460d      	mov	r5, r1
 802126e:	ec45 4b10 	vmov	d0, r4, r5
 8021272:	f000 f94f 	bl	8021514 <__ieee754_sqrt>
 8021276:	a34e      	add	r3, pc, #312	; (adr r3, 80213b0 <__ieee754_acos+0x458>)
 8021278:	e9d3 2300 	ldrd	r2, r3, [r3]
 802127c:	4620      	mov	r0, r4
 802127e:	4629      	mov	r1, r5
 8021280:	ec59 8b10 	vmov	r8, r9, d0
 8021284:	f7df f990 	bl	80005a8 <__aeabi_dmul>
 8021288:	a34b      	add	r3, pc, #300	; (adr r3, 80213b8 <__ieee754_acos+0x460>)
 802128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802128e:	f7de ffd5 	bl	800023c <__adddf3>
 8021292:	4622      	mov	r2, r4
 8021294:	462b      	mov	r3, r5
 8021296:	f7df f987 	bl	80005a8 <__aeabi_dmul>
 802129a:	a349      	add	r3, pc, #292	; (adr r3, 80213c0 <__ieee754_acos+0x468>)
 802129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212a0:	f7de ffca 	bl	8000238 <__aeabi_dsub>
 80212a4:	4622      	mov	r2, r4
 80212a6:	462b      	mov	r3, r5
 80212a8:	f7df f97e 	bl	80005a8 <__aeabi_dmul>
 80212ac:	a346      	add	r3, pc, #280	; (adr r3, 80213c8 <__ieee754_acos+0x470>)
 80212ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212b2:	f7de ffc3 	bl	800023c <__adddf3>
 80212b6:	4622      	mov	r2, r4
 80212b8:	462b      	mov	r3, r5
 80212ba:	f7df f975 	bl	80005a8 <__aeabi_dmul>
 80212be:	a344      	add	r3, pc, #272	; (adr r3, 80213d0 <__ieee754_acos+0x478>)
 80212c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212c4:	f7de ffb8 	bl	8000238 <__aeabi_dsub>
 80212c8:	4622      	mov	r2, r4
 80212ca:	462b      	mov	r3, r5
 80212cc:	f7df f96c 	bl	80005a8 <__aeabi_dmul>
 80212d0:	a341      	add	r3, pc, #260	; (adr r3, 80213d8 <__ieee754_acos+0x480>)
 80212d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212d6:	f7de ffb1 	bl	800023c <__adddf3>
 80212da:	4622      	mov	r2, r4
 80212dc:	462b      	mov	r3, r5
 80212de:	f7df f963 	bl	80005a8 <__aeabi_dmul>
 80212e2:	a33f      	add	r3, pc, #252	; (adr r3, 80213e0 <__ieee754_acos+0x488>)
 80212e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212e8:	4682      	mov	sl, r0
 80212ea:	468b      	mov	fp, r1
 80212ec:	4620      	mov	r0, r4
 80212ee:	4629      	mov	r1, r5
 80212f0:	f7df f95a 	bl	80005a8 <__aeabi_dmul>
 80212f4:	a33c      	add	r3, pc, #240	; (adr r3, 80213e8 <__ieee754_acos+0x490>)
 80212f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212fa:	f7de ff9d 	bl	8000238 <__aeabi_dsub>
 80212fe:	4622      	mov	r2, r4
 8021300:	462b      	mov	r3, r5
 8021302:	f7df f951 	bl	80005a8 <__aeabi_dmul>
 8021306:	a33a      	add	r3, pc, #232	; (adr r3, 80213f0 <__ieee754_acos+0x498>)
 8021308:	e9d3 2300 	ldrd	r2, r3, [r3]
 802130c:	f7de ff96 	bl	800023c <__adddf3>
 8021310:	4622      	mov	r2, r4
 8021312:	462b      	mov	r3, r5
 8021314:	f7df f948 	bl	80005a8 <__aeabi_dmul>
 8021318:	a337      	add	r3, pc, #220	; (adr r3, 80213f8 <__ieee754_acos+0x4a0>)
 802131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802131e:	f7de ff8b 	bl	8000238 <__aeabi_dsub>
 8021322:	4622      	mov	r2, r4
 8021324:	462b      	mov	r3, r5
 8021326:	f7df f93f 	bl	80005a8 <__aeabi_dmul>
 802132a:	4b39      	ldr	r3, [pc, #228]	; (8021410 <__ieee754_acos+0x4b8>)
 802132c:	2200      	movs	r2, #0
 802132e:	f7de ff85 	bl	800023c <__adddf3>
 8021332:	4602      	mov	r2, r0
 8021334:	460b      	mov	r3, r1
 8021336:	4650      	mov	r0, sl
 8021338:	4659      	mov	r1, fp
 802133a:	f7df fa5f 	bl	80007fc <__aeabi_ddiv>
 802133e:	4642      	mov	r2, r8
 8021340:	464b      	mov	r3, r9
 8021342:	f7df f931 	bl	80005a8 <__aeabi_dmul>
 8021346:	2600      	movs	r6, #0
 8021348:	4682      	mov	sl, r0
 802134a:	468b      	mov	fp, r1
 802134c:	4632      	mov	r2, r6
 802134e:	464b      	mov	r3, r9
 8021350:	4630      	mov	r0, r6
 8021352:	4649      	mov	r1, r9
 8021354:	f7df f928 	bl	80005a8 <__aeabi_dmul>
 8021358:	4602      	mov	r2, r0
 802135a:	460b      	mov	r3, r1
 802135c:	4620      	mov	r0, r4
 802135e:	4629      	mov	r1, r5
 8021360:	f7de ff6a 	bl	8000238 <__aeabi_dsub>
 8021364:	4632      	mov	r2, r6
 8021366:	4604      	mov	r4, r0
 8021368:	460d      	mov	r5, r1
 802136a:	464b      	mov	r3, r9
 802136c:	4640      	mov	r0, r8
 802136e:	4649      	mov	r1, r9
 8021370:	f7de ff64 	bl	800023c <__adddf3>
 8021374:	4602      	mov	r2, r0
 8021376:	460b      	mov	r3, r1
 8021378:	4620      	mov	r0, r4
 802137a:	4629      	mov	r1, r5
 802137c:	f7df fa3e 	bl	80007fc <__aeabi_ddiv>
 8021380:	4602      	mov	r2, r0
 8021382:	460b      	mov	r3, r1
 8021384:	4650      	mov	r0, sl
 8021386:	4659      	mov	r1, fp
 8021388:	f7de ff58 	bl	800023c <__adddf3>
 802138c:	4632      	mov	r2, r6
 802138e:	464b      	mov	r3, r9
 8021390:	f7de ff54 	bl	800023c <__adddf3>
 8021394:	4602      	mov	r2, r0
 8021396:	460b      	mov	r3, r1
 8021398:	f7de ff50 	bl	800023c <__adddf3>
 802139c:	e5fe      	b.n	8020f9c <__ieee754_acos+0x44>
 802139e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8021400 <__ieee754_acos+0x4a8>
 80213a2:	e5ed      	b.n	8020f80 <__ieee754_acos+0x28>
 80213a4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8021408 <__ieee754_acos+0x4b0>
 80213a8:	e5ea      	b.n	8020f80 <__ieee754_acos+0x28>
 80213aa:	bf00      	nop
 80213ac:	f3af 8000 	nop.w
 80213b0:	0dfdf709 	.word	0x0dfdf709
 80213b4:	3f023de1 	.word	0x3f023de1
 80213b8:	7501b288 	.word	0x7501b288
 80213bc:	3f49efe0 	.word	0x3f49efe0
 80213c0:	b5688f3b 	.word	0xb5688f3b
 80213c4:	3fa48228 	.word	0x3fa48228
 80213c8:	0e884455 	.word	0x0e884455
 80213cc:	3fc9c155 	.word	0x3fc9c155
 80213d0:	03eb6f7d 	.word	0x03eb6f7d
 80213d4:	3fd4d612 	.word	0x3fd4d612
 80213d8:	55555555 	.word	0x55555555
 80213dc:	3fc55555 	.word	0x3fc55555
 80213e0:	b12e9282 	.word	0xb12e9282
 80213e4:	3fb3b8c5 	.word	0x3fb3b8c5
 80213e8:	1b8d0159 	.word	0x1b8d0159
 80213ec:	3fe6066c 	.word	0x3fe6066c
 80213f0:	9c598ac8 	.word	0x9c598ac8
 80213f4:	40002ae5 	.word	0x40002ae5
 80213f8:	1c8a2d4b 	.word	0x1c8a2d4b
 80213fc:	40033a27 	.word	0x40033a27
	...
 8021408:	54442d18 	.word	0x54442d18
 802140c:	3ff921fb 	.word	0x3ff921fb
 8021410:	3ff00000 	.word	0x3ff00000
 8021414:	3fe00000 	.word	0x3fe00000

08021418 <scalbn>:
 8021418:	b570      	push	{r4, r5, r6, lr}
 802141a:	ec55 4b10 	vmov	r4, r5, d0
 802141e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8021422:	4606      	mov	r6, r0
 8021424:	462b      	mov	r3, r5
 8021426:	b999      	cbnz	r1, 8021450 <scalbn+0x38>
 8021428:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802142c:	4323      	orrs	r3, r4
 802142e:	d03f      	beq.n	80214b0 <scalbn+0x98>
 8021430:	4b35      	ldr	r3, [pc, #212]	; (8021508 <scalbn+0xf0>)
 8021432:	4629      	mov	r1, r5
 8021434:	ee10 0a10 	vmov	r0, s0
 8021438:	2200      	movs	r2, #0
 802143a:	f7df f8b5 	bl	80005a8 <__aeabi_dmul>
 802143e:	4b33      	ldr	r3, [pc, #204]	; (802150c <scalbn+0xf4>)
 8021440:	429e      	cmp	r6, r3
 8021442:	4604      	mov	r4, r0
 8021444:	460d      	mov	r5, r1
 8021446:	da10      	bge.n	802146a <scalbn+0x52>
 8021448:	a327      	add	r3, pc, #156	; (adr r3, 80214e8 <scalbn+0xd0>)
 802144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802144e:	e01f      	b.n	8021490 <scalbn+0x78>
 8021450:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8021454:	4291      	cmp	r1, r2
 8021456:	d10c      	bne.n	8021472 <scalbn+0x5a>
 8021458:	ee10 2a10 	vmov	r2, s0
 802145c:	4620      	mov	r0, r4
 802145e:	4629      	mov	r1, r5
 8021460:	f7de feec 	bl	800023c <__adddf3>
 8021464:	4604      	mov	r4, r0
 8021466:	460d      	mov	r5, r1
 8021468:	e022      	b.n	80214b0 <scalbn+0x98>
 802146a:	460b      	mov	r3, r1
 802146c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8021470:	3936      	subs	r1, #54	; 0x36
 8021472:	f24c 3250 	movw	r2, #50000	; 0xc350
 8021476:	4296      	cmp	r6, r2
 8021478:	dd0d      	ble.n	8021496 <scalbn+0x7e>
 802147a:	2d00      	cmp	r5, #0
 802147c:	a11c      	add	r1, pc, #112	; (adr r1, 80214f0 <scalbn+0xd8>)
 802147e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021482:	da02      	bge.n	802148a <scalbn+0x72>
 8021484:	a11c      	add	r1, pc, #112	; (adr r1, 80214f8 <scalbn+0xe0>)
 8021486:	e9d1 0100 	ldrd	r0, r1, [r1]
 802148a:	a319      	add	r3, pc, #100	; (adr r3, 80214f0 <scalbn+0xd8>)
 802148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021490:	f7df f88a 	bl	80005a8 <__aeabi_dmul>
 8021494:	e7e6      	b.n	8021464 <scalbn+0x4c>
 8021496:	1872      	adds	r2, r6, r1
 8021498:	f240 71fe 	movw	r1, #2046	; 0x7fe
 802149c:	428a      	cmp	r2, r1
 802149e:	dcec      	bgt.n	802147a <scalbn+0x62>
 80214a0:	2a00      	cmp	r2, #0
 80214a2:	dd08      	ble.n	80214b6 <scalbn+0x9e>
 80214a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80214a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80214ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80214b0:	ec45 4b10 	vmov	d0, r4, r5
 80214b4:	bd70      	pop	{r4, r5, r6, pc}
 80214b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80214ba:	da08      	bge.n	80214ce <scalbn+0xb6>
 80214bc:	2d00      	cmp	r5, #0
 80214be:	a10a      	add	r1, pc, #40	; (adr r1, 80214e8 <scalbn+0xd0>)
 80214c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80214c4:	dac0      	bge.n	8021448 <scalbn+0x30>
 80214c6:	a10e      	add	r1, pc, #56	; (adr r1, 8021500 <scalbn+0xe8>)
 80214c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80214cc:	e7bc      	b.n	8021448 <scalbn+0x30>
 80214ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80214d2:	3236      	adds	r2, #54	; 0x36
 80214d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80214d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80214dc:	4620      	mov	r0, r4
 80214de:	4b0c      	ldr	r3, [pc, #48]	; (8021510 <scalbn+0xf8>)
 80214e0:	2200      	movs	r2, #0
 80214e2:	e7d5      	b.n	8021490 <scalbn+0x78>
 80214e4:	f3af 8000 	nop.w
 80214e8:	c2f8f359 	.word	0xc2f8f359
 80214ec:	01a56e1f 	.word	0x01a56e1f
 80214f0:	8800759c 	.word	0x8800759c
 80214f4:	7e37e43c 	.word	0x7e37e43c
 80214f8:	8800759c 	.word	0x8800759c
 80214fc:	fe37e43c 	.word	0xfe37e43c
 8021500:	c2f8f359 	.word	0xc2f8f359
 8021504:	81a56e1f 	.word	0x81a56e1f
 8021508:	43500000 	.word	0x43500000
 802150c:	ffff3cb0 	.word	0xffff3cb0
 8021510:	3c900000 	.word	0x3c900000

08021514 <__ieee754_sqrt>:
 8021514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021518:	ec55 4b10 	vmov	r4, r5, d0
 802151c:	4e67      	ldr	r6, [pc, #412]	; (80216bc <__ieee754_sqrt+0x1a8>)
 802151e:	43ae      	bics	r6, r5
 8021520:	ee10 0a10 	vmov	r0, s0
 8021524:	ee10 2a10 	vmov	r2, s0
 8021528:	4629      	mov	r1, r5
 802152a:	462b      	mov	r3, r5
 802152c:	d10d      	bne.n	802154a <__ieee754_sqrt+0x36>
 802152e:	f7df f83b 	bl	80005a8 <__aeabi_dmul>
 8021532:	4602      	mov	r2, r0
 8021534:	460b      	mov	r3, r1
 8021536:	4620      	mov	r0, r4
 8021538:	4629      	mov	r1, r5
 802153a:	f7de fe7f 	bl	800023c <__adddf3>
 802153e:	4604      	mov	r4, r0
 8021540:	460d      	mov	r5, r1
 8021542:	ec45 4b10 	vmov	d0, r4, r5
 8021546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802154a:	2d00      	cmp	r5, #0
 802154c:	dc0b      	bgt.n	8021566 <__ieee754_sqrt+0x52>
 802154e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8021552:	4326      	orrs	r6, r4
 8021554:	d0f5      	beq.n	8021542 <__ieee754_sqrt+0x2e>
 8021556:	b135      	cbz	r5, 8021566 <__ieee754_sqrt+0x52>
 8021558:	f7de fe6e 	bl	8000238 <__aeabi_dsub>
 802155c:	4602      	mov	r2, r0
 802155e:	460b      	mov	r3, r1
 8021560:	f7df f94c 	bl	80007fc <__aeabi_ddiv>
 8021564:	e7eb      	b.n	802153e <__ieee754_sqrt+0x2a>
 8021566:	1509      	asrs	r1, r1, #20
 8021568:	f000 808d 	beq.w	8021686 <__ieee754_sqrt+0x172>
 802156c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021570:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8021574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021578:	07c9      	lsls	r1, r1, #31
 802157a:	bf5c      	itt	pl
 802157c:	005b      	lslpl	r3, r3, #1
 802157e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8021582:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021586:	bf58      	it	pl
 8021588:	0052      	lslpl	r2, r2, #1
 802158a:	2500      	movs	r5, #0
 802158c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8021590:	1076      	asrs	r6, r6, #1
 8021592:	0052      	lsls	r2, r2, #1
 8021594:	f04f 0e16 	mov.w	lr, #22
 8021598:	46ac      	mov	ip, r5
 802159a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802159e:	eb0c 0001 	add.w	r0, ip, r1
 80215a2:	4298      	cmp	r0, r3
 80215a4:	bfde      	ittt	le
 80215a6:	1a1b      	suble	r3, r3, r0
 80215a8:	eb00 0c01 	addle.w	ip, r0, r1
 80215ac:	186d      	addle	r5, r5, r1
 80215ae:	005b      	lsls	r3, r3, #1
 80215b0:	f1be 0e01 	subs.w	lr, lr, #1
 80215b4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80215b8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80215bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80215c0:	d1ed      	bne.n	802159e <__ieee754_sqrt+0x8a>
 80215c2:	4674      	mov	r4, lr
 80215c4:	2720      	movs	r7, #32
 80215c6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80215ca:	4563      	cmp	r3, ip
 80215cc:	eb01 000e 	add.w	r0, r1, lr
 80215d0:	dc02      	bgt.n	80215d8 <__ieee754_sqrt+0xc4>
 80215d2:	d113      	bne.n	80215fc <__ieee754_sqrt+0xe8>
 80215d4:	4290      	cmp	r0, r2
 80215d6:	d811      	bhi.n	80215fc <__ieee754_sqrt+0xe8>
 80215d8:	2800      	cmp	r0, #0
 80215da:	eb00 0e01 	add.w	lr, r0, r1
 80215de:	da57      	bge.n	8021690 <__ieee754_sqrt+0x17c>
 80215e0:	f1be 0f00 	cmp.w	lr, #0
 80215e4:	db54      	blt.n	8021690 <__ieee754_sqrt+0x17c>
 80215e6:	f10c 0801 	add.w	r8, ip, #1
 80215ea:	eba3 030c 	sub.w	r3, r3, ip
 80215ee:	4290      	cmp	r0, r2
 80215f0:	bf88      	it	hi
 80215f2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80215f6:	1a12      	subs	r2, r2, r0
 80215f8:	440c      	add	r4, r1
 80215fa:	46c4      	mov	ip, r8
 80215fc:	005b      	lsls	r3, r3, #1
 80215fe:	3f01      	subs	r7, #1
 8021600:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8021604:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8021608:	ea4f 0242 	mov.w	r2, r2, lsl #1
 802160c:	d1dd      	bne.n	80215ca <__ieee754_sqrt+0xb6>
 802160e:	4313      	orrs	r3, r2
 8021610:	d01b      	beq.n	802164a <__ieee754_sqrt+0x136>
 8021612:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80216c0 <__ieee754_sqrt+0x1ac>
 8021616:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80216c4 <__ieee754_sqrt+0x1b0>
 802161a:	e9da 0100 	ldrd	r0, r1, [sl]
 802161e:	e9db 2300 	ldrd	r2, r3, [fp]
 8021622:	f7de fe09 	bl	8000238 <__aeabi_dsub>
 8021626:	e9da 8900 	ldrd	r8, r9, [sl]
 802162a:	4602      	mov	r2, r0
 802162c:	460b      	mov	r3, r1
 802162e:	4640      	mov	r0, r8
 8021630:	4649      	mov	r1, r9
 8021632:	f7df fa35 	bl	8000aa0 <__aeabi_dcmple>
 8021636:	b140      	cbz	r0, 802164a <__ieee754_sqrt+0x136>
 8021638:	f1b4 3fff 	cmp.w	r4, #4294967295
 802163c:	e9da 0100 	ldrd	r0, r1, [sl]
 8021640:	e9db 2300 	ldrd	r2, r3, [fp]
 8021644:	d126      	bne.n	8021694 <__ieee754_sqrt+0x180>
 8021646:	3501      	adds	r5, #1
 8021648:	463c      	mov	r4, r7
 802164a:	106a      	asrs	r2, r5, #1
 802164c:	0863      	lsrs	r3, r4, #1
 802164e:	07e9      	lsls	r1, r5, #31
 8021650:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8021654:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8021658:	bf48      	it	mi
 802165a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 802165e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8021662:	461c      	mov	r4, r3
 8021664:	e76d      	b.n	8021542 <__ieee754_sqrt+0x2e>
 8021666:	0ad3      	lsrs	r3, r2, #11
 8021668:	3815      	subs	r0, #21
 802166a:	0552      	lsls	r2, r2, #21
 802166c:	2b00      	cmp	r3, #0
 802166e:	d0fa      	beq.n	8021666 <__ieee754_sqrt+0x152>
 8021670:	02dc      	lsls	r4, r3, #11
 8021672:	d50a      	bpl.n	802168a <__ieee754_sqrt+0x176>
 8021674:	f1c1 0420 	rsb	r4, r1, #32
 8021678:	fa22 f404 	lsr.w	r4, r2, r4
 802167c:	1e4d      	subs	r5, r1, #1
 802167e:	408a      	lsls	r2, r1
 8021680:	4323      	orrs	r3, r4
 8021682:	1b41      	subs	r1, r0, r5
 8021684:	e772      	b.n	802156c <__ieee754_sqrt+0x58>
 8021686:	4608      	mov	r0, r1
 8021688:	e7f0      	b.n	802166c <__ieee754_sqrt+0x158>
 802168a:	005b      	lsls	r3, r3, #1
 802168c:	3101      	adds	r1, #1
 802168e:	e7ef      	b.n	8021670 <__ieee754_sqrt+0x15c>
 8021690:	46e0      	mov	r8, ip
 8021692:	e7aa      	b.n	80215ea <__ieee754_sqrt+0xd6>
 8021694:	f7de fdd2 	bl	800023c <__adddf3>
 8021698:	e9da 8900 	ldrd	r8, r9, [sl]
 802169c:	4602      	mov	r2, r0
 802169e:	460b      	mov	r3, r1
 80216a0:	4640      	mov	r0, r8
 80216a2:	4649      	mov	r1, r9
 80216a4:	f7df f9f2 	bl	8000a8c <__aeabi_dcmplt>
 80216a8:	b120      	cbz	r0, 80216b4 <__ieee754_sqrt+0x1a0>
 80216aa:	1ca0      	adds	r0, r4, #2
 80216ac:	bf08      	it	eq
 80216ae:	3501      	addeq	r5, #1
 80216b0:	3402      	adds	r4, #2
 80216b2:	e7ca      	b.n	802164a <__ieee754_sqrt+0x136>
 80216b4:	3401      	adds	r4, #1
 80216b6:	f024 0401 	bic.w	r4, r4, #1
 80216ba:	e7c6      	b.n	802164a <__ieee754_sqrt+0x136>
 80216bc:	7ff00000 	.word	0x7ff00000
 80216c0:	20000310 	.word	0x20000310
 80216c4:	20000318 	.word	0x20000318

080216c8 <_init>:
 80216c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80216ca:	bf00      	nop
 80216cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80216ce:	bc08      	pop	{r3}
 80216d0:	469e      	mov	lr, r3
 80216d2:	4770      	bx	lr

080216d4 <_fini>:
 80216d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80216d6:	bf00      	nop
 80216d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80216da:	bc08      	pop	{r3}
 80216dc:	469e      	mov	lr, r3
 80216de:	4770      	bx	lr
